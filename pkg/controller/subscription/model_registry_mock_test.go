// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/modelregistry/modelregistry.go

// Package subscription is a generated GoMock package.
package subscription

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	modelregistry "github.com/onosproject/onos-e2t/pkg/modelregistry"
)

// MockModelRegistry is a mock of ModelRegistry interface.
type MockModelRegistry struct {
	ctrl     *gomock.Controller
	recorder *MockModelRegistryMockRecorder
}

// MockModelRegistryMockRecorder is the mock recorder for MockModelRegistry.
type MockModelRegistryMockRecorder struct {
	mock *MockModelRegistry
}

// NewMockModelRegistry creates a new mock instance.
func NewMockModelRegistry(ctrl *gomock.Controller) *MockModelRegistry {
	mock := &MockModelRegistry{ctrl: ctrl}
	mock.recorder = &MockModelRegistryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockModelRegistry) EXPECT() *MockModelRegistryMockRecorder {
	return m.recorder
}

// GetPlugin mocks base method.
func (m *MockModelRegistry) GetPlugin(name modelregistry.ModelFullName) (modelregistry.ServiceModel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPlugin", name)
	ret0, _ := ret[0].(modelregistry.ServiceModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPlugin indicates an expected call of GetPlugin.
func (mr *MockModelRegistryMockRecorder) GetPlugin(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPlugin", reflect.TypeOf((*MockModelRegistry)(nil).GetPlugin), name)
}

// GetPlugins mocks base method.
func (m *MockModelRegistry) GetPlugins() map[modelregistry.ModelFullName]modelregistry.ServiceModel {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPlugins")
	ret0, _ := ret[0].(map[modelregistry.ModelFullName]modelregistry.ServiceModel)
	return ret0
}

// GetPlugins indicates an expected call of GetPlugins.
func (mr *MockModelRegistryMockRecorder) GetPlugins() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPlugins", reflect.TypeOf((*MockModelRegistry)(nil).GetPlugins))
}

// RegisterModelPlugin mocks base method.
func (m *MockModelRegistry) RegisterModelPlugin(moduleName string) (modelregistry.ModelType, modelregistry.ModelVersion, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterModelPlugin", moduleName)
	ret0, _ := ret[0].(modelregistry.ModelType)
	ret1, _ := ret[1].(modelregistry.ModelVersion)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// RegisterModelPlugin indicates an expected call of RegisterModelPlugin.
func (mr *MockModelRegistryMockRecorder) RegisterModelPlugin(moduleName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterModelPlugin", reflect.TypeOf((*MockModelRegistry)(nil).RegisterModelPlugin), moduleName)
}
