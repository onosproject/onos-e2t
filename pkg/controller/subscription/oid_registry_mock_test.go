// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/oid/oid.go

// Package subscription is a generated GoMock package.
package subscription

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	oid "github.com/onosproject/onos-e2t/pkg/oid"
)

// MockRegistry is a mock of Registry interface.
type MockRegistry struct {
	ctrl     *gomock.Controller
	recorder *MockRegistryMockRecorder
}

// MockRegistryMockRecorder is the mock recorder for MockRegistry.
type MockRegistryMockRecorder struct {
	mock *MockRegistry
}

// NewMockRegistry creates a new mock instance.
func NewMockRegistry(ctrl *gomock.Controller) *MockRegistry {
	mock := &MockRegistry{ctrl: ctrl}
	mock.recorder = &MockRegistryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRegistry) EXPECT() *MockRegistryMockRecorder {
	return m.recorder
}

// AddOid mocks base method.
func (m *MockRegistry) AddOid(key string, oid oid.Oid) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddOid", key, oid)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddOid indicates an expected call of AddOid.
func (mr *MockRegistryMockRecorder) AddOid(key, oid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddOid", reflect.TypeOf((*MockRegistry)(nil).AddOid), key, oid)
}

// GetOid mocks base method.
func (m *MockRegistry) GetOid(key string) oid.Oid {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOid", key)
	ret0, _ := ret[0].(oid.Oid)
	return ret0
}

// GetOid indicates an expected call of GetOid.
func (mr *MockRegistryMockRecorder) GetOid(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOid", reflect.TypeOf((*MockRegistry)(nil).GetOid), key)
}
