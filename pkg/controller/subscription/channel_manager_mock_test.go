// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/southbound/e2ap101/server/manager.go

// Package subscription is a generated GoMock package.
package subscription

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	server "github.com/onosproject/onos-e2t/pkg/southbound/e2ap101/server"
)

// MockChannelManager is a mock of ChannelManager interface.
type MockChannelManager struct {
	ctrl     *gomock.Controller
	recorder *MockChannelManagerMockRecorder
}

// MockChannelManagerMockRecorder is the mock recorder for MockChannelManager.
type MockChannelManagerMockRecorder struct {
	mock *MockChannelManager
}

// NewMockChannelManager creates a new mock instance.
func NewMockChannelManager(ctrl *gomock.Controller) *MockChannelManager {
	mock := &MockChannelManager{ctrl: ctrl}
	mock.recorder = &MockChannelManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockChannelManager) EXPECT() *MockChannelManagerMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockChannelManager) Get(ctx context.Context, id server.ChannelID) (*server.E2Channel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, id)
	ret0, _ := ret[0].(*server.E2Channel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockChannelManagerMockRecorder) Get(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockChannelManager)(nil).Get), ctx, id)
}

// List mocks base method.
func (m *MockChannelManager) List(ctx context.Context) ([]*server.E2Channel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx)
	ret0, _ := ret[0].([]*server.E2Channel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockChannelManagerMockRecorder) List(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockChannelManager)(nil).List), ctx)
}

// Open mocks base method.
func (m *MockChannelManager) Open(id server.ChannelID, channel *server.E2Channel) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Open", id, channel)
}

// Open indicates an expected call of Open.
func (mr *MockChannelManagerMockRecorder) Open(id, channel interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Open", reflect.TypeOf((*MockChannelManager)(nil).Open), id, channel)
}

// Watch mocks base method.
func (m *MockChannelManager) Watch(ctx context.Context, ch chan<- *server.E2Channel) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Watch", ctx, ch)
	ret0, _ := ret[0].(error)
	return ret0
}

// Watch indicates an expected call of Watch.
func (mr *MockChannelManagerMockRecorder) Watch(ctx, ch interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Watch", reflect.TypeOf((*MockChannelManager)(nil).Watch), ctx, ch)
}
