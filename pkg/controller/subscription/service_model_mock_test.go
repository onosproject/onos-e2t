// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/modelregistry/modelregistry.go

// Package subscription is a generated GoMock package.
package subscription

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	types "github.com/onosproject/onos-api/go/onos/e2t/e2sm"
)

// MockServiceModel is a mock of ServiceModel interface.
type MockServiceModel struct {
	ctrl     *gomock.Controller
	recorder *MockServiceModelMockRecorder
}

// MockServiceModelMockRecorder is the mock recorder for MockServiceModel.
type MockServiceModelMockRecorder struct {
	mock *MockServiceModel
}

// NewMockServiceModel creates a new mock instance.
func NewMockServiceModel(ctrl *gomock.Controller) *MockServiceModel {
	mock := &MockServiceModel{ctrl: ctrl}
	mock.recorder = &MockServiceModelMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServiceModel) EXPECT() *MockServiceModelMockRecorder {
	return m.recorder
}

// ActionDefinitionASN1toProto mocks base method.
func (m *MockServiceModel) ActionDefinitionASN1toProto(asn1Bytes []byte) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ActionDefinitionASN1toProto", asn1Bytes)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ActionDefinitionASN1toProto indicates an expected call of ActionDefinitionASN1toProto.
func (mr *MockServiceModelMockRecorder) ActionDefinitionASN1toProto(asn1Bytes interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ActionDefinitionASN1toProto", reflect.TypeOf((*MockServiceModel)(nil).ActionDefinitionASN1toProto), asn1Bytes)
}

// ActionDefinitionProtoToASN1 mocks base method.
func (m *MockServiceModel) ActionDefinitionProtoToASN1(protoBytes []byte) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ActionDefinitionProtoToASN1", protoBytes)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ActionDefinitionProtoToASN1 indicates an expected call of ActionDefinitionProtoToASN1.
func (mr *MockServiceModelMockRecorder) ActionDefinitionProtoToASN1(protoBytes interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ActionDefinitionProtoToASN1", reflect.TypeOf((*MockServiceModel)(nil).ActionDefinitionProtoToASN1), protoBytes)
}

// ControlHeaderASN1toProto mocks base method.
func (m *MockServiceModel) ControlHeaderASN1toProto(asn1Bytes []byte) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ControlHeaderASN1toProto", asn1Bytes)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ControlHeaderASN1toProto indicates an expected call of ControlHeaderASN1toProto.
func (mr *MockServiceModelMockRecorder) ControlHeaderASN1toProto(asn1Bytes interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ControlHeaderASN1toProto", reflect.TypeOf((*MockServiceModel)(nil).ControlHeaderASN1toProto), asn1Bytes)
}

// ControlHeaderProtoToASN1 mocks base method.
func (m *MockServiceModel) ControlHeaderProtoToASN1(protoBytes []byte) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ControlHeaderProtoToASN1", protoBytes)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ControlHeaderProtoToASN1 indicates an expected call of ControlHeaderProtoToASN1.
func (mr *MockServiceModelMockRecorder) ControlHeaderProtoToASN1(protoBytes interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ControlHeaderProtoToASN1", reflect.TypeOf((*MockServiceModel)(nil).ControlHeaderProtoToASN1), protoBytes)
}

// ControlMessageASN1toProto mocks base method.
func (m *MockServiceModel) ControlMessageASN1toProto(asn1Bytes []byte) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ControlMessageASN1toProto", asn1Bytes)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ControlMessageASN1toProto indicates an expected call of ControlMessageASN1toProto.
func (mr *MockServiceModelMockRecorder) ControlMessageASN1toProto(asn1Bytes interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ControlMessageASN1toProto", reflect.TypeOf((*MockServiceModel)(nil).ControlMessageASN1toProto), asn1Bytes)
}

// ControlMessageProtoToASN1 mocks base method.
func (m *MockServiceModel) ControlMessageProtoToASN1(protoBytes []byte) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ControlMessageProtoToASN1", protoBytes)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ControlMessageProtoToASN1 indicates an expected call of ControlMessageProtoToASN1.
func (mr *MockServiceModelMockRecorder) ControlMessageProtoToASN1(protoBytes interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ControlMessageProtoToASN1", reflect.TypeOf((*MockServiceModel)(nil).ControlMessageProtoToASN1), protoBytes)
}

// ControlOutcomeASN1toProto mocks base method.
func (m *MockServiceModel) ControlOutcomeASN1toProto(asn1Bytes []byte) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ControlOutcomeASN1toProto", asn1Bytes)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ControlOutcomeASN1toProto indicates an expected call of ControlOutcomeASN1toProto.
func (mr *MockServiceModelMockRecorder) ControlOutcomeASN1toProto(asn1Bytes interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ControlOutcomeASN1toProto", reflect.TypeOf((*MockServiceModel)(nil).ControlOutcomeASN1toProto), asn1Bytes)
}

// ControlOutcomeProtoToASN1 mocks base method.
func (m *MockServiceModel) ControlOutcomeProtoToASN1(protoBytes []byte) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ControlOutcomeProtoToASN1", protoBytes)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ControlOutcomeProtoToASN1 indicates an expected call of ControlOutcomeProtoToASN1.
func (mr *MockServiceModelMockRecorder) ControlOutcomeProtoToASN1(protoBytes interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ControlOutcomeProtoToASN1", reflect.TypeOf((*MockServiceModel)(nil).ControlOutcomeProtoToASN1), protoBytes)
}

// DecodeRanFunctionDescription mocks base method.
func (m *MockServiceModel) DecodeRanFunctionDescription(asn1bytes []byte) (*types.RanfunctionNameDef, *types.RicEventTriggerList, *types.RicReportList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DecodeRanFunctionDescription", asn1bytes)
	ret0, _ := ret[0].(*types.RanfunctionNameDef)
	ret1, _ := ret[1].(*types.RicEventTriggerList)
	ret2, _ := ret[2].(*types.RicReportList)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// DecodeRanFunctionDescription indicates an expected call of DecodeRanFunctionDescription.
func (mr *MockServiceModelMockRecorder) DecodeRanFunctionDescription(asn1bytes interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DecodeRanFunctionDescription", reflect.TypeOf((*MockServiceModel)(nil).DecodeRanFunctionDescription), asn1bytes)
}

// EventTriggerDefinitionASN1toProto mocks base method.
func (m *MockServiceModel) EventTriggerDefinitionASN1toProto(asn1Bytes []byte) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EventTriggerDefinitionASN1toProto", asn1Bytes)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EventTriggerDefinitionASN1toProto indicates an expected call of EventTriggerDefinitionASN1toProto.
func (mr *MockServiceModelMockRecorder) EventTriggerDefinitionASN1toProto(asn1Bytes interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EventTriggerDefinitionASN1toProto", reflect.TypeOf((*MockServiceModel)(nil).EventTriggerDefinitionASN1toProto), asn1Bytes)
}

// EventTriggerDefinitionProtoToASN1 mocks base method.
func (m *MockServiceModel) EventTriggerDefinitionProtoToASN1(protoBytes []byte) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EventTriggerDefinitionProtoToASN1", protoBytes)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EventTriggerDefinitionProtoToASN1 indicates an expected call of EventTriggerDefinitionProtoToASN1.
func (mr *MockServiceModelMockRecorder) EventTriggerDefinitionProtoToASN1(protoBytes interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EventTriggerDefinitionProtoToASN1", reflect.TypeOf((*MockServiceModel)(nil).EventTriggerDefinitionProtoToASN1), protoBytes)
}

// IndicationHeaderASN1toProto mocks base method.
func (m *MockServiceModel) IndicationHeaderASN1toProto(asn1Bytes []byte) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IndicationHeaderASN1toProto", asn1Bytes)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IndicationHeaderASN1toProto indicates an expected call of IndicationHeaderASN1toProto.
func (mr *MockServiceModelMockRecorder) IndicationHeaderASN1toProto(asn1Bytes interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IndicationHeaderASN1toProto", reflect.TypeOf((*MockServiceModel)(nil).IndicationHeaderASN1toProto), asn1Bytes)
}

// IndicationHeaderProtoToASN1 mocks base method.
func (m *MockServiceModel) IndicationHeaderProtoToASN1(protoBytes []byte) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IndicationHeaderProtoToASN1", protoBytes)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IndicationHeaderProtoToASN1 indicates an expected call of IndicationHeaderProtoToASN1.
func (mr *MockServiceModelMockRecorder) IndicationHeaderProtoToASN1(protoBytes interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IndicationHeaderProtoToASN1", reflect.TypeOf((*MockServiceModel)(nil).IndicationHeaderProtoToASN1), protoBytes)
}

// IndicationMessageASN1toProto mocks base method.
func (m *MockServiceModel) IndicationMessageASN1toProto(asn1Bytes []byte) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IndicationMessageASN1toProto", asn1Bytes)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IndicationMessageASN1toProto indicates an expected call of IndicationMessageASN1toProto.
func (mr *MockServiceModelMockRecorder) IndicationMessageASN1toProto(asn1Bytes interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IndicationMessageASN1toProto", reflect.TypeOf((*MockServiceModel)(nil).IndicationMessageASN1toProto), asn1Bytes)
}

// IndicationMessageProtoToASN1 mocks base method.
func (m *MockServiceModel) IndicationMessageProtoToASN1(protoBytes []byte) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IndicationMessageProtoToASN1", protoBytes)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IndicationMessageProtoToASN1 indicates an expected call of IndicationMessageProtoToASN1.
func (mr *MockServiceModelMockRecorder) IndicationMessageProtoToASN1(protoBytes interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IndicationMessageProtoToASN1", reflect.TypeOf((*MockServiceModel)(nil).IndicationMessageProtoToASN1), protoBytes)
}

// RanFuncDescriptionASN1toProto mocks base method.
func (m *MockServiceModel) RanFuncDescriptionASN1toProto(asn1Bytes []byte) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RanFuncDescriptionASN1toProto", asn1Bytes)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RanFuncDescriptionASN1toProto indicates an expected call of RanFuncDescriptionASN1toProto.
func (mr *MockServiceModelMockRecorder) RanFuncDescriptionASN1toProto(asn1Bytes interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RanFuncDescriptionASN1toProto", reflect.TypeOf((*MockServiceModel)(nil).RanFuncDescriptionASN1toProto), asn1Bytes)
}

// RanFuncDescriptionProtoToASN1 mocks base method.
func (m *MockServiceModel) RanFuncDescriptionProtoToASN1(protoBytes []byte) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RanFuncDescriptionProtoToASN1", protoBytes)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RanFuncDescriptionProtoToASN1 indicates an expected call of RanFuncDescriptionProtoToASN1.
func (mr *MockServiceModelMockRecorder) RanFuncDescriptionProtoToASN1(protoBytes interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RanFuncDescriptionProtoToASN1", reflect.TypeOf((*MockServiceModel)(nil).RanFuncDescriptionProtoToASN1), protoBytes)
}

// ServiceModelData mocks base method.
func (m *MockServiceModel) ServiceModelData() types.ServiceModelData {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ServiceModelData")
	ret0, _ := ret[0].(types.ServiceModelData)
	return ret0
}

// ServiceModelData indicates an expected call of ServiceModelData.
func (mr *MockServiceModelMockRecorder) ServiceModelData() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServiceModelData", reflect.TypeOf((*MockServiceModel)(nil).ServiceModelData))
}
