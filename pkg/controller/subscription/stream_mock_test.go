// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/broker/subscription/stream.go

// Package subscription is a generated GoMock package.
package subscription

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	subscription "github.com/onosproject/onos-api/go/onos/e2sub/subscription"
	e2ap_pdu_contents "github.com/onosproject/onos-e2t/api/e2ap/v1beta2/e2ap-pdu-contents"
	subscription0 "github.com/onosproject/onos-e2t/pkg/broker/subscription"
)

// MockStreamReader is a mock of StreamReader interface.
type MockStreamReader struct {
	ctrl     *gomock.Controller
	recorder *MockStreamReaderMockRecorder
}

// MockStreamReaderMockRecorder is the mock recorder for MockStreamReader.
type MockStreamReaderMockRecorder struct {
	mock *MockStreamReader
}

// NewMockStreamReader creates a new mock instance.
func NewMockStreamReader(ctrl *gomock.Controller) *MockStreamReader {
	mock := &MockStreamReader{ctrl: ctrl}
	mock.recorder = &MockStreamReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStreamReader) EXPECT() *MockStreamReaderMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockStreamReader) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockStreamReaderMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockStreamReader)(nil).Close))
}

// Recv mocks base method.
func (m *MockStreamReader) Recv(arg0 context.Context) (*e2ap_pdu_contents.Ricindication, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv", arg0)
	ret0, _ := ret[0].(*e2ap_pdu_contents.Ricindication)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv.
func (mr *MockStreamReaderMockRecorder) Recv(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockStreamReader)(nil).Recv), arg0)
}

// StreamID mocks base method.
func (m *MockStreamReader) StreamID() subscription0.StreamID {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StreamID")
	ret0, _ := ret[0].(subscription0.StreamID)
	return ret0
}

// StreamID indicates an expected call of StreamID.
func (mr *MockStreamReaderMockRecorder) StreamID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StreamID", reflect.TypeOf((*MockStreamReader)(nil).StreamID))
}

// SubscriptionID mocks base method.
func (m *MockStreamReader) SubscriptionID() subscription.ID {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubscriptionID")
	ret0, _ := ret[0].(subscription.ID)
	return ret0
}

// SubscriptionID indicates an expected call of SubscriptionID.
func (mr *MockStreamReaderMockRecorder) SubscriptionID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubscriptionID", reflect.TypeOf((*MockStreamReader)(nil).SubscriptionID))
}

// MockStreamWriter is a mock of StreamWriter interface.
type MockStreamWriter struct {
	ctrl     *gomock.Controller
	recorder *MockStreamWriterMockRecorder
}

// MockStreamWriterMockRecorder is the mock recorder for MockStreamWriter.
type MockStreamWriterMockRecorder struct {
	mock *MockStreamWriter
}

// NewMockStreamWriter creates a new mock instance.
func NewMockStreamWriter(ctrl *gomock.Controller) *MockStreamWriter {
	mock := &MockStreamWriter{ctrl: ctrl}
	mock.recorder = &MockStreamWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStreamWriter) EXPECT() *MockStreamWriterMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockStreamWriter) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockStreamWriterMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockStreamWriter)(nil).Close))
}

// Send mocks base method.
func (m *MockStreamWriter) Send(indication *e2ap_pdu_contents.Ricindication) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", indication)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockStreamWriterMockRecorder) Send(indication interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockStreamWriter)(nil).Send), indication)
}

// StreamID mocks base method.
func (m *MockStreamWriter) StreamID() subscription0.StreamID {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StreamID")
	ret0, _ := ret[0].(subscription0.StreamID)
	return ret0
}

// StreamID indicates an expected call of StreamID.
func (mr *MockStreamWriterMockRecorder) StreamID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StreamID", reflect.TypeOf((*MockStreamWriter)(nil).StreamID))
}

// SubscriptionID mocks base method.
func (m *MockStreamWriter) SubscriptionID() subscription.ID {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubscriptionID")
	ret0, _ := ret[0].(subscription.ID)
	return ret0
}

// SubscriptionID indicates an expected call of SubscriptionID.
func (mr *MockStreamWriterMockRecorder) SubscriptionID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubscriptionID", reflect.TypeOf((*MockStreamWriter)(nil).SubscriptionID))
}

// MockStreamIO is a mock of StreamIO interface.
type MockStreamIO struct {
	ctrl     *gomock.Controller
	recorder *MockStreamIOMockRecorder
}

// MockStreamIOMockRecorder is the mock recorder for MockStreamIO.
type MockStreamIOMockRecorder struct {
	mock *MockStreamIO
}

// NewMockStreamIO creates a new mock instance.
func NewMockStreamIO(ctrl *gomock.Controller) *MockStreamIO {
	mock := &MockStreamIO{ctrl: ctrl}
	mock.recorder = &MockStreamIOMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStreamIO) EXPECT() *MockStreamIOMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockStreamIO) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockStreamIOMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockStreamIO)(nil).Close))
}

// StreamID mocks base method.
func (m *MockStreamIO) StreamID() subscription0.StreamID {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StreamID")
	ret0, _ := ret[0].(subscription0.StreamID)
	return ret0
}

// StreamID indicates an expected call of StreamID.
func (mr *MockStreamIOMockRecorder) StreamID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StreamID", reflect.TypeOf((*MockStreamIO)(nil).StreamID))
}

// SubscriptionID mocks base method.
func (m *MockStreamIO) SubscriptionID() subscription.ID {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubscriptionID")
	ret0, _ := ret[0].(subscription.ID)
	return ret0
}

// SubscriptionID indicates an expected call of SubscriptionID.
func (mr *MockStreamIOMockRecorder) SubscriptionID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubscriptionID", reflect.TypeOf((*MockStreamIO)(nil).SubscriptionID))
}

// MockStream is a mock of Stream interface.
type MockStream struct {
	ctrl     *gomock.Controller
	recorder *MockStreamMockRecorder
}

// MockStreamMockRecorder is the mock recorder for MockStream.
type MockStreamMockRecorder struct {
	mock *MockStream
}

// NewMockStream creates a new mock instance.
func NewMockStream(ctrl *gomock.Controller) *MockStream {
	mock := &MockStream{ctrl: ctrl}
	mock.recorder = &MockStreamMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStream) EXPECT() *MockStreamMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockStream) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockStreamMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockStream)(nil).Close))
}

// Recv mocks base method.
func (m *MockStream) Recv(arg0 context.Context) (*e2ap_pdu_contents.Ricindication, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv", arg0)
	ret0, _ := ret[0].(*e2ap_pdu_contents.Ricindication)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv.
func (mr *MockStreamMockRecorder) Recv(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockStream)(nil).Recv), arg0)
}

// Send mocks base method.
func (m *MockStream) Send(indication *e2ap_pdu_contents.Ricindication) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", indication)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockStreamMockRecorder) Send(indication interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockStream)(nil).Send), indication)
}

// StreamID mocks base method.
func (m *MockStream) StreamID() subscription0.StreamID {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StreamID")
	ret0, _ := ret[0].(subscription0.StreamID)
	return ret0
}

// StreamID indicates an expected call of StreamID.
func (mr *MockStreamMockRecorder) StreamID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StreamID", reflect.TypeOf((*MockStream)(nil).StreamID))
}

// SubscriptionID mocks base method.
func (m *MockStream) SubscriptionID() subscription.ID {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubscriptionID")
	ret0, _ := ret[0].(subscription.ID)
	return ret0
}

// SubscriptionID indicates an expected call of SubscriptionID.
func (mr *MockStreamMockRecorder) SubscriptionID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubscriptionID", reflect.TypeOf((*MockStream)(nil).SubscriptionID))
}
