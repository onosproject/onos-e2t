// SPDX-FileCopyrightText: 2020-present Open Networking Foundation <info@opennetworking.org>
//
// SPDX-License-Identifier: LicenseRef-ONF-Member-1.0

package pdudecoder

import (
	"encoding/hex"
	"github.com/onosproject/onos-e2t/pkg/southbound/e2ap101/asn1cgo"
	"github.com/onosproject/onos-e2t/pkg/southbound/e2ap101/types"
	"gotest.tools/assert"
	"io/ioutil"
	"testing"
)

//PDU obtained from Kushal
func Test_XerDecodeE2SetupRequest(t *testing.T) {
	e2sr, err := ioutil.ReadFile("../test/RiaB_E2setupRequest.xml")
	assert.NilError(t, err, "Unexpected error when loading file")
	e2apPdu, err := asn1cgo.XerDecodeE2apPdu(e2sr)
	assert.NilError(t, err)

	identifier, ranFunctions, err := DecodeE2SetupRequestPdu(e2apPdu)
	assert.NilError(t, err)
	//assert.Assert(t, identifier != nil) //Commented due to the Linters (v1.34.1) error - possible nil pointer dereference (https://staticcheck.io/docs/checks#SA5011) on lines 24, 25 & 26
	assert.DeepEqual(t, []byte{0x02, 0xf8, 0x10}, []byte{identifier.Plmn[0], identifier.Plmn[1], identifier.Plmn[2]})
	assert.Equal(t, types.E2NodeTypeENB, identifier.NodeType)
	assert.DeepEqual(t, []byte{0x00, 0xE0, 0x00}, identifier.NodeIdentifier)

	//Verifying that GetE2NodeID() function works correctly
	nodeID := GetE2NodeID(identifier.NodeIdentifier)
	t.Logf("Node ID is %s\n", nodeID)

	assert.Equal(t, 1, len(*ranFunctions))
	rf0 := (*ranFunctions)[1]
	assert.Equal(t, 1, int(rf0.Revision))
	assert.DeepEqual(t, []byte("1.3.6.1.4.1.53148.1.2.2.2"), []byte(rf0.OID))
	//Printing PER bytes for RanFunctionDefinition
	t.Logf("PER bytes for RanFunctionDefinition are \n%v", hex.Dump(rf0.Description))
}

// Bytes obtained from Kushal
func Test_PerDecodeE2SetupRequest(t *testing.T) {
	t.Logf("PER bytes in HEX for E2SetupRequest are \n%v", hex.Dump(bytesKushal))
	e2apPdu1, err := asn1cgo.PerDecodeE2apPdu(bytesKushal)
	assert.NilError(t, err)
	t.Logf("Decoded message is \n%v", e2apPdu1)

	xer, err := asn1cgo.XerEncodeE2apPdu(e2apPdu1)
	assert.NilError(t, err)
	// Printing message in XER to verify that it's the same as ../test/RiaB_E2setupRequest.xml
	t.Logf("Encoded message is \n%s", xer)

	identifier, ranFunctions, err := DecodeE2SetupRequestPdu(e2apPdu1)
	assert.NilError(t, err)
	//assert.Assert(t, identifier != nil) //Commented due to the Linters (v1.34.1) error - possible nil pointer dereference (https://staticcheck.io/docs/checks#SA5011) on lines 24, 25 & 26
	assert.DeepEqual(t, []byte{0x02, 0xf8, 0x10}, []byte{identifier.Plmn[0], identifier.Plmn[1], identifier.Plmn[2]})
	assert.Equal(t, types.E2NodeTypeENB, identifier.NodeType)
	assert.DeepEqual(t, []byte{0x00, 0xE0, 0x00}, identifier.NodeIdentifier)

	//Verifying that GetE2NodeID() function works correctly
	nodeID := GetE2NodeID(identifier.NodeIdentifier)
	t.Logf("Node ID is %s\n", nodeID)

	assert.Equal(t, 1, len(*ranFunctions))
	rf0 := (*ranFunctions)[1]
	assert.Equal(t, 1, int(rf0.Revision))
	assert.DeepEqual(t, []byte("1.3.6.1.4.1.53148.1.2.2.2"), []byte(rf0.OID))
	//Printing PER bytes for RanFunctionDefinition
	t.Logf("PER bytes for RanFunctionDefinition are \n%v", hex.Dump(rf0.Description))
}

var bytesKushal = []byte{
	0x00, 0x01, 0x00, 0x81, 0x65, 0x00, 0x00, 0x02, 0x00, 0x03, 0x00, 0x08, 0x60, 0x02, 0xF8, 0x10,
	0x00, 0x00, 0xE0, 0x00, 0x00, 0x0A, 0x00, 0x81, 0x51, 0x00, 0x01, 0x00, 0x08, 0x00, 0x81, 0x4A,
	0x80, 0x00, 0x01, 0x81, 0x25, 0x74, 0x18, 0x4F, 0x52, 0x41, 0x4E, 0x2D, 0x45, 0x32, 0x53, 0x4D,
	0x2D, 0x4B, 0x50, 0x4D, 0x00, 0x00, 0x18, 0x31, 0x2E, 0x33, 0x2E, 0x36, 0x2E, 0x31, 0x2E, 0x34,
	0x2E, 0x31, 0x2E, 0x35, 0x33, 0x31, 0x34, 0x38, 0x2E, 0x31, 0x2E, 0x32, 0x2E, 0x32, 0x2E, 0x32,
	0x05, 0x00, 0x4B, 0x50, 0x4D, 0x20, 0x6D, 0x6F, 0x6E, 0x69, 0x74, 0x6F, 0x72, 0x00, 0x00, 0x00,
	0x00, 0x58, 0x02, 0xF8, 0x10, 0x00, 0x00, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0D, 0x45, 0x55,
	0x74, 0x72, 0x61, 0x6E, 0x43, 0x65, 0x6C, 0x6C, 0x46, 0x44, 0x44, 0x40, 0x02, 0xF8, 0x10, 0x00,
	0xE0, 0x00, 0x00, 0x00, 0x01, 0x03, 0x80, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x31, 0x00,
	0x01, 0x00, 0x06, 0x1E, 0x80, 0x4F, 0x2D, 0x43, 0x55, 0x2D, 0x55, 0x50, 0x20, 0x4D, 0x65, 0x61,
	0x73, 0x75, 0x72, 0x65, 0x6D, 0x65, 0x6E, 0x74, 0x20, 0x43, 0x6F, 0x6E, 0x74, 0x61, 0x69, 0x6E,
	0x65, 0x72, 0x20, 0x66, 0x6F, 0x72, 0x20, 0x74, 0x68, 0x65, 0x20, 0x45, 0x50, 0x43, 0x20, 0x63,
	0x6F, 0x6E, 0x6E, 0x65, 0x63, 0x74, 0x65, 0x64, 0x20, 0x64, 0x65, 0x70, 0x6C, 0x6F, 0x79, 0x6D,
	0x65, 0x6E, 0x74, 0x00, 0x06, 0x00, 0x04, 0x42, 0x60, 0x52, 0x52, 0x43, 0x2E, 0x43, 0x6F, 0x6E,
	0x6E, 0x45, 0x73, 0x74, 0x61, 0x62, 0x41, 0x74, 0x74, 0x2E, 0x73, 0x75, 0x6D, 0x00, 0x00, 0x00,
	0x42, 0x80, 0x52, 0x52, 0x43, 0x2E, 0x43, 0x6F, 0x6E, 0x6E, 0x45, 0x73, 0x74, 0x61, 0x62, 0x53,
	0x75, 0x63, 0x63, 0x2E, 0x73, 0x75, 0x6D, 0x00, 0x00, 0x01, 0x42, 0xA0, 0x52, 0x52, 0x43, 0x2E,
	0x43, 0x6F, 0x6E, 0x6E, 0x52, 0x65, 0x45, 0x73, 0x74, 0x61, 0x62, 0x41, 0x74, 0x74, 0x2E, 0x73,
	0x75, 0x6D, 0x00, 0x00, 0x02, 0x41, 0x60, 0x52, 0x52, 0x43, 0x2E, 0x43, 0x6F, 0x6E, 0x6E, 0x4D,
	0x65, 0x61, 0x6E, 0x00, 0x00, 0x03, 0x41, 0x40, 0x52, 0x52, 0x43, 0x2E, 0x43, 0x6F, 0x6E, 0x6E,
	0x4D, 0x61, 0x78, 0x00, 0x00, 0x04, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x01, 0x1C, 0x00, 0x00,
	0x18, 0x31, 0x2E, 0x33, 0x2E, 0x36, 0x2E, 0x31, 0x2E, 0x34, 0x2E, 0x31, 0x2E, 0x35, 0x33, 0x31,
	0x34, 0x38, 0x2E, 0x31, 0x2E, 0x32, 0x2E, 0x32, 0x2E, 0x32}
