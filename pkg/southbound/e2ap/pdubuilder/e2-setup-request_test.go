// SPDX-FileCopyrightText: 2020-present Open Networking Foundation <info@opennetworking.org>
//
// SPDX-License-Identifier: LicenseRef-ONF-Member-1.0
package pdubuilder

import (
	"encoding/hex"
	"testing"

	e2ap_ies "github.com/onosproject/onos-e2t/api/e2ap/v1beta2/e2ap-ies"
	"github.com/onosproject/onos-e2t/pkg/southbound/e2ap/asn1cgo"
	"github.com/onosproject/onos-e2t/pkg/southbound/e2ap/types"
	"gotest.tools/assert"
)

func TestE2SetupRequest(t *testing.T) {
	ranFunctionList := make(types.RanFunctions)
	ranFunctionList[100] = types.RanFunctionItem{
		Description: []byte("Type 1"),
		Revision:    1,
		OID:         []byte("oid1"),
	}

	ranFunctionList[200] = types.RanFunctionItem{
		Description: []byte("Type 2"),
		Revision:    2,
		OID:         []byte("oid2"),
	}

	gnbID, err := CreateGnbIDchoice([]byte{0x00, 0x00, 0x04}, 22)
	assert.NilError(t, err)

	newE2apPdu, err := CreateE2SetupRequestPdu([3]byte{0x4F, 0x4E, 0x46}, gnbID, ranFunctionList)
	assert.NilError(t, err)
	assert.Assert(t, newE2apPdu != nil)

	xer, err := asn1cgo.XerEncodeE2apPdu(newE2apPdu)
	assert.NilError(t, err)
	t.Logf("E2SetupRequest XER\n%s", string(xer))

	e2apPdu, err := asn1cgo.XerDecodeE2apPdu(xer)
	assert.NilError(t, err)
	assert.DeepEqual(t, newE2apPdu.String(), e2apPdu.String())

	per, err := asn1cgo.PerEncodeE2apPdu(newE2apPdu)
	assert.NilError(t, err)
	t.Logf("E2SetupRequest E2AP PDU PER\n%v", hex.Dump(per))

	e2apPdu, err = asn1cgo.PerDecodeE2apPdu(per)
	assert.NilError(t, err)
	assert.DeepEqual(t, newE2apPdu.String(), e2apPdu.String())
}

func TestE2SetupRequestExcludeOptionalIE(t *testing.T) {
	gnbID, err := CreateGnbIDchoice([]byte{0x00, 0x00, 0x04}, 22)
	assert.NilError(t, err)

	newE2apPdu, err := CreateE2SetupRequestPdu([3]byte{0x4F, 0x4E, 0x46}, gnbID, nil)
	assert.NilError(t, err)
	assert.Assert(t, newE2apPdu != nil)

	xer, err := asn1cgo.XerEncodeE2apPdu(newE2apPdu)
	assert.NilError(t, err)
	t.Logf("E2SetupRequest XER\n%s", string(xer))

	e2apPdu, err := asn1cgo.XerDecodeE2apPdu(xer)
	assert.NilError(t, err)
	assert.DeepEqual(t, newE2apPdu.String(), e2apPdu.String())

	per, err := asn1cgo.PerEncodeE2apPdu(newE2apPdu)
	assert.NilError(t, err)
	t.Logf("E2SetupRequest E2AP PDU PER\n%v", hex.Dump(per))

	e2apPdu, err = asn1cgo.PerDecodeE2apPdu(per)
	assert.NilError(t, err)
	assert.DeepEqual(t, newE2apPdu.String(), e2apPdu.String())
}

func TestE2SetupRequestCuDuIDs(t *testing.T) {
	ranFunctionList := make(types.RanFunctions)
	ranFunctionList[100] = types.RanFunctionItem{
		Description: []byte("Type 1"),
		Revision:    1,
		OID:         []byte("oid1"),
	}

	ranFunctionList[200] = types.RanFunctionItem{
		Description: []byte("Type 2"),
		Revision:    2,
		OID:         []byte("oid2"),
	}

	gnbID, err := CreateGnbIDchoice([]byte{0x00, 0x00, 0x04}, 22)
	assert.NilError(t, err)

	newE2apPdu, err := CreateE2SetupRequestPdu([3]byte{0x4F, 0x4E, 0x46}, gnbID, ranFunctionList)
	assert.NilError(t, err)
	assert.Assert(t, newE2apPdu != nil)
	newE2apPdu.GetInitiatingMessage().GetProcedureCode().GetE2Setup().GetInitiatingMessage().GetProtocolIes().GetE2ApProtocolIes3().GetValue().GetGNb().GNbCuUpId = &e2ap_ies.GnbCuUpId{
		Value: 15,
	}
	newE2apPdu.GetInitiatingMessage().GetProcedureCode().GetE2Setup().GetInitiatingMessage().GetProtocolIes().GetE2ApProtocolIes3().GetValue().GetGNb().GNbDuId = &e2ap_ies.GnbDuId{
		Value: 21,
	}

	xer, err := asn1cgo.XerEncodeE2apPdu(newE2apPdu)
	assert.NilError(t, err)
	t.Logf("E2SetupRequest XER\n%s", string(xer))

	e2apPdu, err := asn1cgo.XerDecodeE2apPdu(xer)
	assert.NilError(t, err)
	assert.DeepEqual(t, newE2apPdu.String(), e2apPdu.String())

	per, err := asn1cgo.PerEncodeE2apPdu(newE2apPdu)
	assert.NilError(t, err)
	t.Logf("E2SetupRequest E2AP PDU PER\n%v", hex.Dump(per))

	e2apPdu, err = asn1cgo.PerDecodeE2apPdu(per)
	assert.NilError(t, err)
	assert.DeepEqual(t, newE2apPdu.String(), e2apPdu.String())
}

var sercommBytes0312 = []byte{
	0x00, 0x01, 0x00, 0x81, 0x96, 0x00, 0x00, 0x02, 0x00, 0x03, 0x00, 0x09,
	0x00, 0x13, 0xf1, 0x84, 0x50, 0x00, 0x00, 0x00, 0x01, 0x00, 0x0a, 0x00, 0x81, 0x81, 0x00, 0x01,
	0x00, 0x08, 0x40, 0x81, 0x7a, 0x80, 0x00, 0x01, 0x81, 0x55, 0x74, 0x18, 0x4f, 0x52, 0x41, 0x4e,
	0x2d, 0x45, 0x32, 0x53, 0x4d, 0x2d, 0x4b, 0x50, 0x4d, 0x00, 0x00, 0x18, 0x31, 0x2e, 0x33, 0x2e,
	0x36, 0x2e, 0x31, 0x2e, 0x34, 0x2e, 0x31, 0x2e, 0x35, 0x33, 0x31, 0x34, 0x38, 0x2e, 0x31, 0x2e,
	0x32, 0x2e, 0x32, 0x2e, 0x32, 0x05, 0x00, 0x4b, 0x50, 0x4d, 0x20, 0x6d, 0x6f, 0x6e, 0x69, 0x74,
	0x6f, 0x72, 0x01, 0x00, 0x00, 0x40, 0x00, 0x13, 0xf1, 0x84, 0x50, 0x00, 0x00, 0x00, 0x01, 0x00,
	0x00, 0x00, 0x01, 0x30, 0x00, 0x13, 0xf1, 0x84, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x01, 0x07,
	0x00, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x69, 0x63, 0x20, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x01, 0x00, 0x03, 0x09, 0x00, 0x45, 0x32, 0x20, 0x4e, 0x6f, 0x64, 0x65, 0x20, 0x4d, 0x65, 0x61,
	0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x00, 0x01, 0x00, 0x07, 0x42, 0x60, 0x52, 0x52,
	0x43, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x45, 0x73, 0x74, 0x61, 0x62, 0x41, 0x74, 0x74, 0x2e, 0x54,
	0x6f, 0x74, 0x00, 0x00, 0x00, 0x42, 0x80, 0x52, 0x52, 0x43, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x45,
	0x73, 0x74, 0x61, 0x62, 0x53, 0x75, 0x63, 0x63, 0x2e, 0x54, 0x6f, 0x74, 0x00, 0x00, 0x01, 0x42,
	0xa0, 0x52, 0x52, 0x43, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x52, 0x65, 0x45, 0x73, 0x74, 0x61, 0x62,
	0x41, 0x74, 0x74, 0x2e, 0x54, 0x6f, 0x74, 0x00, 0x00, 0x02, 0x43, 0xc0, 0x52, 0x52, 0x43, 0x2e,
	0x43, 0x6f, 0x6e, 0x6e, 0x52, 0x65, 0x45, 0x73, 0x74, 0x61, 0x62, 0x41, 0x74, 0x74, 0x2e, 0x72,
	0x65, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x46, 0x61, 0x69, 0x6c, 0x00, 0x00, 0x03, 0x43, 0x00,
	0x52, 0x52, 0x43, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x52, 0x65, 0x45, 0x73, 0x74, 0x61, 0x62, 0x41,
	0x74, 0x74, 0x2e, 0x48, 0x4f, 0x46, 0x61, 0x69, 0x6c, 0x00, 0x00, 0x04, 0x42, 0xe0, 0x52, 0x52,
	0x43, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x52, 0x65, 0x45, 0x73, 0x74, 0x61, 0x62, 0x41, 0x74, 0x74,
	0x2e, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x00, 0x00, 0x05, 0x41, 0x60, 0x52, 0x52, 0x43, 0x2e, 0x43,
	0x6f, 0x6e, 0x6e, 0x2e, 0x41, 0x76, 0x67, 0x00, 0x00, 0x06, 0x41, 0x60, 0x52, 0x52, 0x43, 0x2e,
	0x43, 0x6f, 0x6e, 0x6e, 0x2e, 0x4d, 0x61, 0x78, 0x00, 0x00, 0x07, 0x00, 0x01, 0x00, 0x01, 0x00,
	0x00, 0x01, 0x1c, 0x00, 0x00, 0x18, 0x31, 0x2e, 0x33, 0x2e, 0x36, 0x2e, 0x31, 0x2e, 0x34, 0x2e,
	0x31, 0x2e, 0x35, 0x33, 0x31, 0x34, 0x38, 0x2e, 0x31, 0x2e, 0x32, 0x2e, 0x32, 0x2e, 0x32}

//var sercommBytes2611 = []byte{
//	0x00, 0x01, 0x00, 0x81, 0x95, 0x00, 0x00, 0x02, 0x00, 0x03, 0x00, 0x09,
//	0x00, 0x13, 0xf1, 0x84, 0x50, 0x00, 0x00, 0x00, 0x01, 0x00, 0x0a, 0x00, 0x81, 0x80, 0x00, 0x01,
//	0x00, 0x08, 0x40, 0x81, 0x79, 0x80, 0x00, 0x01, 0x81, 0x54, 0x07, 0x01, 0x80, 0x4f, 0x52, 0x41,
//	0x4e, 0x2d, 0x45, 0x32, 0x53, 0x4d, 0x2d, 0x4b, 0x50, 0x4d, 0x00, 0x00, 0x18, 0x31, 0x2e, 0x33,
//	0x2e, 0x36, 0x2e, 0x31, 0x2e, 0x34, 0x2e, 0x31, 0x2e, 0x35, 0x33, 0x31, 0x34, 0x38, 0x2e, 0x31,
//	0x2e, 0x32, 0x2e, 0x32, 0x2e, 0x32, 0x05, 0x00, 0x4b, 0x50, 0x4d, 0x20, 0x6d, 0x6f, 0x6e, 0x69,
//	0x74, 0x6f, 0x72, 0x00, 0x00, 0x40, 0x00, 0x13, 0xf1, 0x84, 0x50, 0x00, 0x00, 0x00, 0x01, 0x00,
//	0x00, 0x00, 0x01, 0x30, 0x00, 0x13, 0xf1, 0x84, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x01, 0x07,
//	0x00, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x69, 0x63, 0x20, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74,
//	0x01, 0x00, 0x03, 0x09, 0x00, 0x45, 0x32, 0x20, 0x4e, 0x6f, 0x64, 0x65, 0x20, 0x4d, 0x65, 0x61,
//	0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x00, 0x01, 0x08, 0x42, 0x60, 0x52, 0x52, 0x43,
//	0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x45, 0x73, 0x74, 0x61, 0x62, 0x41, 0x74, 0x74, 0x2e, 0x54, 0x6f,
//	0x74, 0x00, 0x00, 0x00, 0x42, 0x80, 0x52, 0x52, 0x43, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x45, 0x73,
//	0x74, 0x61, 0x62, 0x53, 0x75, 0x63, 0x63, 0x2e, 0x54, 0x6f, 0x74, 0x00, 0x00, 0x01, 0x42, 0xa0,
//	0x52, 0x52, 0x43, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x52, 0x65, 0x45, 0x73, 0x74, 0x61, 0x62, 0x41,
//	0x74, 0x74, 0x2e, 0x54, 0x6f, 0x74, 0x00, 0x00, 0x02, 0x43, 0xc0, 0x52, 0x52, 0x43, 0x2e, 0x43,
//	0x6f, 0x6e, 0x6e, 0x52, 0x65, 0x45, 0x73, 0x74, 0x61, 0x62, 0x41, 0x74, 0x74, 0x2e, 0x72, 0x65,
//	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x46, 0x61, 0x69, 0x6c, 0x00, 0x00, 0x03, 0x43, 0x00, 0x52,
//	0x52, 0x43, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x52, 0x65, 0x45, 0x73, 0x74, 0x61, 0x62, 0x41, 0x74,
//	0x74, 0x2e, 0x48, 0x4f, 0x46, 0x61, 0x69, 0x6c, 0x00, 0x00, 0x04, 0x42, 0xe0, 0x52, 0x52, 0x43,
//	0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x52, 0x65, 0x45, 0x73, 0x74, 0x61, 0x62, 0x41, 0x74, 0x74, 0x2e,
//	0x4f, 0x74, 0x68, 0x65, 0x72, 0x00, 0x00, 0x05, 0x41, 0x60, 0x52, 0x52, 0x43, 0x2e, 0x43, 0x6f,
//	0x6e, 0x6e, 0x2e, 0x41, 0x76, 0x67, 0x00, 0x00, 0x06, 0x41, 0x60, 0x52, 0x52, 0x43, 0x2e, 0x43,
//	0x6f, 0x6e, 0x6e, 0x2e, 0x4d, 0x61, 0x78, 0x00, 0x00, 0x07, 0x00, 0x01, 0x00, 0x01, 0x00, 0x00,
//	0x01, 0x1c, 0x00, 0x00, 0x18, 0x31, 0x2e, 0x33, 0x2e, 0x36, 0x2e, 0x31, 0x2e, 0x34, 0x2e, 0x31,
//	0x2e, 0x35, 0x33, 0x31, 0x34, 0x38, 0x2e, 0x31, 0x2e, 0x32, 0x2e, 0x32, 0x2e, 0x32}

func TestSercommBytes(t *testing.T) {

	t.Logf("Obtained PER bytes \n%v", hex.Dump(sercommBytes0312))

	e2apPdu, err := asn1cgo.PerDecodeE2apPdu(sercommBytes0312)
	assert.NilError(t, err)
	t.Logf("Decoded message is \n%v", e2apPdu)

	xer, err := asn1cgo.XerEncodeE2apPdu(e2apPdu)
	assert.NilError(t, err)
	t.Logf("E2SetupRequest XER\n%s", string(xer))
}
