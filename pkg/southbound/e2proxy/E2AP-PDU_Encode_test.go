// SPDX-FileCopyrightText: 2020-present Open Networking Foundation <info@opennetworking.org>
//
// SPDX-License-Identifier: LicenseRef-ONF-Member-1.0

package e2proxy

import (
	"github.com/onosproject/onos-e2t/pkg/southbound/e2proxy/e2ctypes"
	"github.com/onosproject/onos-e2t/pkg/southbound/e2proxy/orane2"
	"gotest.tools/assert"
	"testing"
)

func Test_E2AP_PDU_Empty(t *testing.T) {
	e2apPdu := new(e2ctypes.E2AP_PDUT)

	_, err := orane2.PerEncodeE2apPdu(e2apPdu)
	assert.Error(t, err, "newE2apPdu() <nil> not yet implemented")
}

// This creates the kind of payload generated by O-RAN-SC E2 SIM at:
// https://gerrit.o-ran-sc.org/r/gitweb?p=sim/e2-interface.git;a=blob;f=e2sim/e2apv1sim/src/E2AP/XML/E2AP_RICindication_type1.xml;h=e4e3f38c1cd56c9d7668bb62f3440216ebb40f3b;hb=HEAD
func Test_E2AP_RICindication_type1(t *testing.T) {
	ricInd := e2ctypes.RICindicationT{
		ProtocolIEs: &e2ctypes.ProtocolIE_Container_1544P6T{
			List: make([]*e2ctypes.RICindication_IEsT, 0),
		},
	}
	ie1 := e2ctypes.RICindication_IEsT{
		Id:          e2ctypes.ProtocolIE_IDT_ProtocolIE_ID_id_RICindicationType,
		Criticality: e2ctypes.CriticalityT_Criticality_reject,
		Choice: &e2ctypes.RICindication_IEsT_RICrequestID{
			RICrequestID: &e2ctypes.RICrequestIDT{
				RicRequestorID: 6,
				RicInstanceID:  12,
			},
		},
	}
	ricInd.ProtocolIEs.List = append(ricInd.ProtocolIEs.List, &ie1)

	ie2 := e2ctypes.RICindication_IEsT{
		Id:          e2ctypes.ProtocolIE_IDT_ProtocolIE_ID_id_RANfunctionID,
		Criticality: e2ctypes.CriticalityT_Criticality_reject,
		Choice: &e2ctypes.RICindication_IEsT_RANfunctionID{
			RANfunctionID: 10,
		},
	}
	ricInd.ProtocolIEs.List = append(ricInd.ProtocolIEs.List, &ie2)

	ie3 := e2ctypes.RICindication_IEsT{
		Id:          e2ctypes.ProtocolIE_IDT_ProtocolIE_ID_id_RICactionID,
		Criticality: e2ctypes.CriticalityT_Criticality_reject,
		Choice: &e2ctypes.RICindication_IEsT_RICactionID{
			RICactionID: 100,
		},
	}
	ricInd.ProtocolIEs.List = append(ricInd.ProtocolIEs.List, &ie3)

	ie4 := e2ctypes.RICindication_IEsT{
		Id:          e2ctypes.ProtocolIE_IDT_ProtocolIE_ID_id_RICindicationSN,
		Criticality: e2ctypes.CriticalityT_Criticality_reject,
		Choice: &e2ctypes.RICindication_IEsT_RICindicationSN{
			RICindicationSN: 100,
		},
	}
	ricInd.ProtocolIEs.List = append(ricInd.ProtocolIEs.List, &ie4)

	ie5 := e2ctypes.RICindication_IEsT{
		Id:          e2ctypes.ProtocolIE_IDT_ProtocolIE_ID_id_RICindicationType,
		Criticality: e2ctypes.CriticalityT_Criticality_reject,
		Choice: &e2ctypes.RICindication_IEsT_RICindicationType{
			RICindicationType: e2ctypes.RICindicationType_RICindicationType_report,
		},
	}
	ricInd.ProtocolIEs.List = append(ricInd.ProtocolIEs.List, &ie5)

	ie6 := e2ctypes.RICindication_IEsT{
		Id:          e2ctypes.ProtocolIE_IDT_ProtocolIE_ID_id_RICindicationType,
		Criticality: e2ctypes.CriticalityT_Criticality_reject,
		Choice: &e2ctypes.RICindication_IEsT_RICindicationHeader{
			RICindicationHeader: "test-header",
		},
	}
	ricInd.ProtocolIEs.List = append(ricInd.ProtocolIEs.List, &ie6)

	ie7 := e2ctypes.RICindication_IEsT{
		Id:          e2ctypes.ProtocolIE_IDT_ProtocolIE_ID_id_RICindicationType,
		Criticality: e2ctypes.CriticalityT_Criticality_reject,
		Choice: &e2ctypes.RICindication_IEsT_RICindicationMessage{
			RICindicationMessage: "test-message",
		},
	}
	ricInd.ProtocolIEs.List = append(ricInd.ProtocolIEs.List, &ie7)

	e2apPdu := e2ctypes.E2AP_PDUT{
		Choice: &e2ctypes.E2AP_PDUT_InitiatingMessage{
			InitiatingMessage: &e2ctypes.InitiatingMessageT{
				ProcedureCode: e2ctypes.ProcedureCodeT_ProcedureCode_id_RICindication,
				Criticality:   e2ctypes.CriticalityT_Criticality_reject,
				Choice: &e2ctypes.InitiatingMessageT_RICindication{
					RICindication: &ricInd,
				},
			},
		},
	}

	bytes, err := orane2.PerEncodeE2apPdu(&e2apPdu)
	assert.NilError(t, err, "Unexpected error transforming PDU to PER")
	assert.Equal(t, 568, len(bytes))

	bytesXer, err := orane2.XerEncodeE2apPdu(&e2apPdu)
	assert.NilError(t, err, "Unexpected error outputting PDU to XER")
	t.Logf("Xer encoded \n%s", string(bytesXer))

}

// This creates the kind of payload generated by O-RAN-SC E2 SIM at:
// https://gerrit.o-ran-sc.org/r/gitweb?p=sim/e2-interface.git;a=blob;f=e2sim/e2apv1sim/src/E2AP/XML/E2AP_SetupRequest.xml;h=b2343b9a85f38b7d8ebec428671c9da62b932340;hb=HEAD
func Test_E2AP_E2SetupRequest(t *testing.T) {

	e2SetupRequest := e2ctypes.E2SetupRequestT{
		ProtocolIEs: &e2ctypes.ProtocolIE_Container_1544P11T{
			List: make([]*e2ctypes.E2SetupRequestIEsT, 0),
		},
	}

	gnbBs := e2ctypes.BIT_STRING{
		BitString: []byte{0xFF, 0xBB, 0xCC},
		Numbits:   22,
	}

	gnbID := e2ctypes.GNB_ID_ChoiceT{
		Choice: &e2ctypes.GNB_ID_ChoiceT_Gnb_ID{
			Gnb_ID: &gnbBs,
		},
	}

	globalE2NodeID := e2ctypes.GlobalE2Node_IDT{
		Choice: &e2ctypes.GlobalE2Node_IDT_GNB{
			GNB: &e2ctypes.GlobalE2NodeGNB_ID{
				GlobalGNB_ID: &e2ctypes.GlobalgNB_IDT{
					PlmnId: "abc",
					GnbId:  &gnbID,
				},
			},
		},
	}

	ie1 := e2ctypes.E2SetupRequestIEsT{
		Id:          e2ctypes.ProtocolIE_IDT_ProtocolIE_ID_id_GlobalE2node_ID,
		Criticality: e2ctypes.CriticalityT_Criticality_reject,
		Choice: &e2ctypes.E2SetupRequestIEsT_GlobalE2Node_ID{
			GlobalE2Node_ID: &globalE2NodeID,
		},
	}
	//fmt.Printf("Skipping IE %T\n", ie1)
	e2SetupRequest.ProtocolIEs.List = append(e2SetupRequest.ProtocolIEs.List, &ie1)

	e2apPdu := e2ctypes.E2AP_PDUT{
		Choice: &e2ctypes.E2AP_PDUT_InitiatingMessage{
			InitiatingMessage: &e2ctypes.InitiatingMessageT{
				ProcedureCode: e2ctypes.ProcedureCodeT_ProcedureCode_id_E2setup,
				Criticality:   e2ctypes.CriticalityT_Criticality_reject,
				Choice: &e2ctypes.InitiatingMessageT_E2SetupRequest{
					E2SetupRequest: &e2SetupRequest,
				},
			},
		},
	}

	bytesXer1, err := orane2.XerEncodeBitStringOld(&gnbBs)
	assert.NilError(t, err, "Unexpected error outputting PDU to XER")
	t.Logf("Xer encoded \n%s", string(bytesXer1))

	bytesPer1, err := orane2.PerEncodeBitStringOld(&gnbBs)
	assert.NilError(t, err, "Unexpected error transforming PDU to PER")
	assert.Equal(t, 30, len(bytesPer1))

	bytesXer2, err := orane2.XerEncodeGnbID(&gnbID)
	assert.NilError(t, err, "Unexpected error outputting PDU to XER")
	t.Logf("Xer encoded \n%s", string(bytesXer2))

	bytesPer2, err := orane2.PerEncodeGnbID(&gnbID)
	assert.NilError(t, err, "Unexpected error transforming PDU to PER")
	assert.Equal(t, 30, len(bytesPer2))

	//bytesXer3, err := orane2.XerEncodeGlobalE2nodeID(&globalE2NodeID)
	//assert.NilError(t, err, "Unexpected error outputting PDU to XER")
	//t.Logf("Xer encoded \n%s", string(bytesXer3))

	//bytesXer3, err := orane2.XerEncodeE2setRequest(&ie1)
	//assert.NilError(t, err, "Unexpected error outputting PDU to XER")
	//t.Logf("Xer encoded \n%s", string(bytesXer3))

	bytes, err := orane2.PerEncodeE2apPdu(&e2apPdu)
	//fmt.Printf("Skipping %T\n", e2apPdu)
	assert.NilError(t, err, "Unexpected error transforming PDU to PER")
	assert.Equal(t, 152, len(bytes))

	bytesXer, err := orane2.XerEncodeE2apPdu(&e2apPdu)
	assert.NilError(t, err, "Unexpected error outputting PDU to XER")
	t.Logf("Xer encoded \n%s", string(bytesXer))
}

// This creates the kind of payload generated by O-RAN-SC E2 SIM at:
// https://gerrit.o-ran-sc.org/r/gitweb?p=sim/e2-interface.git;a=blob;f=e2sim/e2apv1sim/src/E2AP/XML/E2AP_RICsubscriptionRequest_Ashwin.xml;h=524f7afed6ec41f018dc4f1ea880aabe41a79025;hb=HEAD
func Test_E2AP_RICsubscriptionRequest(t *testing.T) {
	e2apPdu := NewRICsubscriptionRequest(2, 1, 1, []byte{0x10, 0x54, 0x65, 0x73, 0x10, 0x54, 0x65, 0x73, 0x40, 0x1B, 0x40})

	//bytesXer1, err := orane2.XerEncodeRICsubscriptionRequest(&rsrIe1)
	//assert.NilError(t, err, "Unexpected error outputting PDU to XER")
	//t.Logf("Xer encoded \n%s", string(bytesXer1))

	bytesPer1, err := orane2.PerEncodeRICsubscriptionRequest(e2apPdu.GetInitiatingMessage().GetRICsubscriptionRequest().GetProtocolIEs().GetList()[0])
	assert.NilError(t, err, "Unexpected error outputting PDU to PER")
	assert.Equal(t, 72, len(bytesPer1), "unexpected length of PER encoded RICsubscriptionRequest")

	//bytesXer2, err := orane2.XerEncodeRICsubscriptionRequest(&rsrIe2)
	//assert.NilError(t, err, "Unexpected error outputting PDU to XER")
	//t.Logf("Xer encoded \n%s", string(bytesXer2))

	bytesPer2, err := orane2.PerEncodeRICsubscriptionRequest(e2apPdu.GetInitiatingMessage().GetRICsubscriptionRequest().GetProtocolIEs().GetList()[1])
	assert.NilError(t, err, "Unexpected error outputting PDU to PER")
	assert.Equal(t, 48, len(bytesPer2), "unexpected length of PER encoded RICsubscriptionRequest")

	//bytesXer4, err := orane2.XerEncodeRICactionToBeSetupItem(
	//	e2apPdu.GetInitiatingMessage().GetRICsubscriptionRequest().GetProtocolIEs().
	//		GetList()[2].GetRICsubscriptionDetails().GetRicAction_ToBeSetup_List().GetList()[0])
	//assert.NilError(t, err, "Unexpected error outputting PDU to XER")
	//t.Logf("Xer encoded \n%s", string(bytesXer4))

	bytesPer4, err := orane2.PerEncodeRICactionToBeSetupItem(
		e2apPdu.GetInitiatingMessage().GetRICsubscriptionRequest().GetProtocolIEs().
			GetList()[2].GetRICsubscriptionDetails().GetRicAction_ToBeSetup_List().GetList()[0])
	assert.NilError(t, err, "Unexpected error outputting PDU to PER")
	assert.Equal(t, 152, len(bytesPer4), "unexpected length of PER encoded RICsubscriptionRequest")

	//bytesXer5, err := orane2.XerEncodeRICsubscriptionDetails(&rsd1)
	//assert.NilError(t, err, "Unexpected error outputting PDU to XER")
	//t.Logf("Xer encoded \n%s", string(bytesXer5))

	bytesPer5, err := orane2.PerEncodeRICsubscriptionDetails(e2apPdu.GetInitiatingMessage().GetRICsubscriptionRequest().GetProtocolIEs().
		GetList()[2].GetRICsubscriptionDetails())
	assert.NilError(t, err, "Unexpected error outputting PDU to PER")
	assert.Equal(t, 264, len(bytesPer5), "unexpected length of PER encoded RICsubscriptionRequest")

	//bytesXer6, err := orane2.XerEncodeRICsubscriptionRequest(&rsrIe3)
	//assert.NilError(t, err, "Unexpected error outputting PDU to XER")
	//t.Logf("Xer encoded \n%s", string(bytesXer6))

	//fmt.Printf("Skipping %T\n", rsrIe3)
	bytesPer6, err := orane2.PerEncodeRICsubscriptionRequest(e2apPdu.GetInitiatingMessage().GetRICsubscriptionRequest().GetProtocolIEs().GetList()[2])
	assert.NilError(t, err, "Unexpected error outputting PDU to PER")
	assert.Equal(t, 296, len(bytesPer6), "unexpected length of PER encoded RICsubscriptionRequest")

	bytes, err := orane2.PerEncodeE2apPdu(e2apPdu)
	//fmt.Printf("Skipping %T\n", e2apPdu)
	assert.NilError(t, err, "Unexpected error transforming PDU to PER")
	assert.Equal(t, 472, len(bytes))

	bytesXer, err := orane2.XerEncodeE2apPdu(e2apPdu)
	assert.NilError(t, err, "Unexpected error outputting PDU to XER")
	t.Logf("Xer encoded \n%s", string(bytesXer))
}

func Test_E2AP_E2setupResponse(t *testing.T) {
	e2apPdu := NewE2SetupResponse()

	bytesPer1, err := orane2.PerGlobalRicIDT(e2apPdu.GetSuccessfulOutcome().GetE2SetupResponse().GetProtocolIEs().GetList()[0].GetGlobalRIC_ID())
	assert.NilError(t, err, "Unexpected error outputting PDU to PER")
	assert.Equal(t, 52, len(bytesPer1), "unexpected length of PER encoded GlobalRIC_ID")

	//bytesXer1, err := orane2.XerGlobalRicIDT(&globalricID)
	//assert.NilError(t, err, "Unexpected error outputting PDU to XER")
	//t.Logf("Xer encoded \n%s", string(bytesXer1))

	bytesPer2, err := orane2.PerEncodeE2setupResponse(e2apPdu.GetSuccessfulOutcome().GetE2SetupResponse().GetProtocolIEs().GetList()[0])
	assert.NilError(t, err, "Unexpected error outputting PDU to PER")
	assert.Equal(t, 88, len(bytesPer2), "unexpected length of PER encoded E2SetupResponseIE")

	//bytesXer2, err := orane2.XerEncodeE2setupResponse(&e2SrIe1)
	//assert.NilError(t, err, "Unexpected error outputting PDU to XER")
	//t.Logf("Xer encoded \n%s", string(bytesXer2))

	bytes, err := orane2.PerEncodeE2apPdu(e2apPdu)
	assert.NilError(t, err, "Unexpected error transforming PDU to PER")
	assert.Equal(t, 144, len(bytes), "unexpected length of PER encoded E2AP_PDU")

	bytesXer, err := orane2.XerEncodeE2apPdu(e2apPdu)
	assert.NilError(t, err, "Unexpected error outputting PDU to XER")
	t.Logf("Xer encoded \n%s", string(bytesXer))
}
