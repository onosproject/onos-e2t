// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: sim/e2/sim.proto

package e2

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/gogo/protobuf/types"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type StartSubscriptionRequest struct {
	SubscriptionId string `protobuf:"bytes,1,opt,name=subscription_id,json=subscriptionId,proto3" json:"subscription_id,omitempty"`
	NodeId         string `protobuf:"bytes,2,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	CellObjectId   string `protobuf:"bytes,3,opt,name=cell_object_id,json=cellObjectId,proto3" json:"cell_object_id,omitempty"`
	ReportPeriod   uint32 `protobuf:"varint,4,opt,name=report_period,json=reportPeriod,proto3" json:"report_period,omitempty"`
	Granularity    uint32 `protobuf:"varint,5,opt,name=granularity,proto3" json:"granularity,omitempty"`
}

func (m *StartSubscriptionRequest) Reset()         { *m = StartSubscriptionRequest{} }
func (m *StartSubscriptionRequest) String() string { return proto.CompactTextString(m) }
func (*StartSubscriptionRequest) ProtoMessage()    {}
func (*StartSubscriptionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c8cb5dd9b1dcb747, []int{0}
}
func (m *StartSubscriptionRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StartSubscriptionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StartSubscriptionRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StartSubscriptionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StartSubscriptionRequest.Merge(m, src)
}
func (m *StartSubscriptionRequest) XXX_Size() int {
	return m.Size()
}
func (m *StartSubscriptionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_StartSubscriptionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_StartSubscriptionRequest proto.InternalMessageInfo

func (m *StartSubscriptionRequest) GetSubscriptionId() string {
	if m != nil {
		return m.SubscriptionId
	}
	return ""
}

func (m *StartSubscriptionRequest) GetNodeId() string {
	if m != nil {
		return m.NodeId
	}
	return ""
}

func (m *StartSubscriptionRequest) GetCellObjectId() string {
	if m != nil {
		return m.CellObjectId
	}
	return ""
}

func (m *StartSubscriptionRequest) GetReportPeriod() uint32 {
	if m != nil {
		return m.ReportPeriod
	}
	return 0
}

func (m *StartSubscriptionRequest) GetGranularity() uint32 {
	if m != nil {
		return m.Granularity
	}
	return 0
}

type StartSubscriptionResponse struct {
}

func (m *StartSubscriptionResponse) Reset()         { *m = StartSubscriptionResponse{} }
func (m *StartSubscriptionResponse) String() string { return proto.CompactTextString(m) }
func (*StartSubscriptionResponse) ProtoMessage()    {}
func (*StartSubscriptionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c8cb5dd9b1dcb747, []int{1}
}
func (m *StartSubscriptionResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StartSubscriptionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StartSubscriptionResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StartSubscriptionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StartSubscriptionResponse.Merge(m, src)
}
func (m *StartSubscriptionResponse) XXX_Size() int {
	return m.Size()
}
func (m *StartSubscriptionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_StartSubscriptionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_StartSubscriptionResponse proto.InternalMessageInfo

type StopSubscriptionRequest struct {
	SubscriptionId string `protobuf:"bytes,1,opt,name=subscription_id,json=subscriptionId,proto3" json:"subscription_id,omitempty"`
	NodeId         string `protobuf:"bytes,2,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
}

func (m *StopSubscriptionRequest) Reset()         { *m = StopSubscriptionRequest{} }
func (m *StopSubscriptionRequest) String() string { return proto.CompactTextString(m) }
func (*StopSubscriptionRequest) ProtoMessage()    {}
func (*StopSubscriptionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c8cb5dd9b1dcb747, []int{2}
}
func (m *StopSubscriptionRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StopSubscriptionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StopSubscriptionRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StopSubscriptionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StopSubscriptionRequest.Merge(m, src)
}
func (m *StopSubscriptionRequest) XXX_Size() int {
	return m.Size()
}
func (m *StopSubscriptionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_StopSubscriptionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_StopSubscriptionRequest proto.InternalMessageInfo

func (m *StopSubscriptionRequest) GetSubscriptionId() string {
	if m != nil {
		return m.SubscriptionId
	}
	return ""
}

func (m *StopSubscriptionRequest) GetNodeId() string {
	if m != nil {
		return m.NodeId
	}
	return ""
}

type StopSubscriptionResponse struct {
}

func (m *StopSubscriptionResponse) Reset()         { *m = StopSubscriptionResponse{} }
func (m *StopSubscriptionResponse) String() string { return proto.CompactTextString(m) }
func (*StopSubscriptionResponse) ProtoMessage()    {}
func (*StopSubscriptionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c8cb5dd9b1dcb747, []int{3}
}
func (m *StopSubscriptionResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StopSubscriptionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StopSubscriptionResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StopSubscriptionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StopSubscriptionResponse.Merge(m, src)
}
func (m *StopSubscriptionResponse) XXX_Size() int {
	return m.Size()
}
func (m *StopSubscriptionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_StopSubscriptionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_StopSubscriptionResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*StartSubscriptionRequest)(nil), "onos.e2t.sim.e2.StartSubscriptionRequest")
	proto.RegisterType((*StartSubscriptionResponse)(nil), "onos.e2t.sim.e2.StartSubscriptionResponse")
	proto.RegisterType((*StopSubscriptionRequest)(nil), "onos.e2t.sim.e2.StopSubscriptionRequest")
	proto.RegisterType((*StopSubscriptionResponse)(nil), "onos.e2t.sim.e2.StopSubscriptionResponse")
}

func init() { proto.RegisterFile("sim/e2/sim.proto", fileDescriptor_c8cb5dd9b1dcb747) }

var fileDescriptor_c8cb5dd9b1dcb747 = []byte{
	// 344 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x92, 0xbb, 0x4e, 0xc3, 0x30,
	0x14, 0x86, 0x6b, 0x2e, 0x45, 0x98, 0xde, 0xb0, 0x90, 0x1a, 0x82, 0x14, 0x55, 0x01, 0x89, 0x96,
	0x21, 0x91, 0xc2, 0x1b, 0xb0, 0x75, 0x02, 0x35, 0x23, 0x43, 0x95, 0xcb, 0x21, 0x72, 0x95, 0xe6,
	0x04, 0xdb, 0x41, 0xe2, 0x2d, 0x78, 0x2c, 0xd8, 0x3a, 0x32, 0x42, 0xfb, 0x22, 0xc8, 0xce, 0x52,
	0x95, 0x22, 0x75, 0x61, 0xf3, 0xf9, 0xfe, 0xdf, 0x3e, 0x37, 0xd3, 0x9e, 0xe4, 0x73, 0x1f, 0x02,
	0x5f, 0xf2, 0xb9, 0x57, 0x0a, 0x54, 0xc8, 0xba, 0x58, 0xa0, 0xf4, 0x20, 0x50, 0x9e, 0x66, 0x10,
	0xd8, 0x67, 0x19, 0x66, 0x68, 0x34, 0x5f, 0x9f, 0x6a, 0x9b, 0xed, 0x64, 0x88, 0x59, 0x0e, 0xbe,
	0x89, 0xe2, 0xea, 0xc9, 0x4f, 0x2b, 0x11, 0x29, 0x8e, 0x45, 0xad, 0xbb, 0x1f, 0x84, 0x5a, 0xa1,
	0x8a, 0x84, 0x0a, 0xab, 0x58, 0x26, 0x82, 0x97, 0x5a, 0x9b, 0xc0, 0x73, 0x05, 0x52, 0xb1, 0x6b,
	0xda, 0x95, 0x6b, 0x78, 0xca, 0x53, 0x8b, 0x0c, 0xc8, 0xf0, 0x78, 0xd2, 0x59, 0xc7, 0xe3, 0x94,
	0xf5, 0xe9, 0x51, 0x81, 0x29, 0x68, 0xc3, 0x9e, 0x31, 0x34, 0x75, 0x38, 0x4e, 0xd9, 0x15, 0xed,
	0x24, 0x90, 0xe7, 0x53, 0x8c, 0x67, 0x90, 0x28, 0xad, 0xef, 0x1b, 0xbd, 0xa5, 0xe9, 0xbd, 0x81,
	0xe3, 0x94, 0x5d, 0xd2, 0xb6, 0x80, 0x12, 0x85, 0x9a, 0x96, 0x20, 0x38, 0xa6, 0xd6, 0xc1, 0x80,
	0x0c, 0xdb, 0x93, 0x56, 0x0d, 0x1f, 0x0c, 0x63, 0x03, 0x7a, 0x92, 0x89, 0xa8, 0xa8, 0xf2, 0x48,
	0x70, 0xf5, 0x6a, 0x1d, 0x1a, 0xcb, 0x3a, 0x72, 0x2f, 0xe8, 0xf9, 0x96, 0x56, 0x64, 0x89, 0x85,
	0x04, 0xf7, 0x91, 0xf6, 0x43, 0x85, 0xe5, 0xbf, 0xb4, 0xe9, 0xda, 0x7a, 0x88, 0x9b, 0x8f, 0xd7,
	0x89, 0x83, 0x6f, 0x42, 0x69, 0xc8, 0xe7, 0x21, 0x88, 0x17, 0x9e, 0x00, 0x9b, 0xd1, 0xd3, 0x5f,
	0x45, 0xb2, 0x91, 0xb7, 0xb1, 0x4d, 0xef, 0xaf, 0x9d, 0xd8, 0x37, 0xbb, 0x58, 0xeb, 0xd4, 0x2c,
	0xa3, 0xbd, 0xcd, 0xb2, 0xd8, 0x70, 0xcb, 0xfd, 0xad, 0x63, 0xb1, 0x47, 0x3b, 0x38, 0xeb, 0x44,
	0x77, 0xd6, 0xfb, 0xd2, 0x21, 0x8b, 0xa5, 0x43, 0xbe, 0x96, 0x0e, 0x79, 0x5b, 0x39, 0x8d, 0xc5,
	0xca, 0x69, 0x7c, 0xae, 0x9c, 0x46, 0xdc, 0x34, 0xdf, 0xec, 0xf6, 0x27, 0x00, 0x00, 0xff, 0xff,
	0xb3, 0x63, 0x86, 0x5e, 0xc1, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// SimServiceClient is the client API for SimService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SimServiceClient interface {
	StartSubscription(ctx context.Context, in *StartSubscriptionRequest, opts ...grpc.CallOption) (*StartSubscriptionResponse, error)
	StopSubscription(ctx context.Context, in *StopSubscriptionRequest, opts ...grpc.CallOption) (*StopSubscriptionResponse, error)
}

type simServiceClient struct {
	cc *grpc.ClientConn
}

func NewSimServiceClient(cc *grpc.ClientConn) SimServiceClient {
	return &simServiceClient{cc}
}

func (c *simServiceClient) StartSubscription(ctx context.Context, in *StartSubscriptionRequest, opts ...grpc.CallOption) (*StartSubscriptionResponse, error) {
	out := new(StartSubscriptionResponse)
	err := c.cc.Invoke(ctx, "/onos.e2t.sim.e2.SimService/StartSubscription", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *simServiceClient) StopSubscription(ctx context.Context, in *StopSubscriptionRequest, opts ...grpc.CallOption) (*StopSubscriptionResponse, error) {
	out := new(StopSubscriptionResponse)
	err := c.cc.Invoke(ctx, "/onos.e2t.sim.e2.SimService/StopSubscription", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SimServiceServer is the server API for SimService service.
type SimServiceServer interface {
	StartSubscription(context.Context, *StartSubscriptionRequest) (*StartSubscriptionResponse, error)
	StopSubscription(context.Context, *StopSubscriptionRequest) (*StopSubscriptionResponse, error)
}

// UnimplementedSimServiceServer can be embedded to have forward compatible implementations.
type UnimplementedSimServiceServer struct {
}

func (*UnimplementedSimServiceServer) StartSubscription(ctx context.Context, req *StartSubscriptionRequest) (*StartSubscriptionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartSubscription not implemented")
}
func (*UnimplementedSimServiceServer) StopSubscription(ctx context.Context, req *StopSubscriptionRequest) (*StopSubscriptionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopSubscription not implemented")
}

func RegisterSimServiceServer(s *grpc.Server, srv SimServiceServer) {
	s.RegisterService(&_SimService_serviceDesc, srv)
}

func _SimService_StartSubscription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartSubscriptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SimServiceServer).StartSubscription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/onos.e2t.sim.e2.SimService/StartSubscription",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SimServiceServer).StartSubscription(ctx, req.(*StartSubscriptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SimService_StopSubscription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopSubscriptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SimServiceServer).StopSubscription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/onos.e2t.sim.e2.SimService/StopSubscription",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SimServiceServer).StopSubscription(ctx, req.(*StopSubscriptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _SimService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "onos.e2t.sim.e2.SimService",
	HandlerType: (*SimServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StartSubscription",
			Handler:    _SimService_StartSubscription_Handler,
		},
		{
			MethodName: "StopSubscription",
			Handler:    _SimService_StopSubscription_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sim/e2/sim.proto",
}

func (m *StartSubscriptionRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StartSubscriptionRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StartSubscriptionRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Granularity != 0 {
		i = encodeVarintSim(dAtA, i, uint64(m.Granularity))
		i--
		dAtA[i] = 0x28
	}
	if m.ReportPeriod != 0 {
		i = encodeVarintSim(dAtA, i, uint64(m.ReportPeriod))
		i--
		dAtA[i] = 0x20
	}
	if len(m.CellObjectId) > 0 {
		i -= len(m.CellObjectId)
		copy(dAtA[i:], m.CellObjectId)
		i = encodeVarintSim(dAtA, i, uint64(len(m.CellObjectId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.NodeId) > 0 {
		i -= len(m.NodeId)
		copy(dAtA[i:], m.NodeId)
		i = encodeVarintSim(dAtA, i, uint64(len(m.NodeId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.SubscriptionId) > 0 {
		i -= len(m.SubscriptionId)
		copy(dAtA[i:], m.SubscriptionId)
		i = encodeVarintSim(dAtA, i, uint64(len(m.SubscriptionId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *StartSubscriptionResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StartSubscriptionResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StartSubscriptionResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *StopSubscriptionRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StopSubscriptionRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StopSubscriptionRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.NodeId) > 0 {
		i -= len(m.NodeId)
		copy(dAtA[i:], m.NodeId)
		i = encodeVarintSim(dAtA, i, uint64(len(m.NodeId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.SubscriptionId) > 0 {
		i -= len(m.SubscriptionId)
		copy(dAtA[i:], m.SubscriptionId)
		i = encodeVarintSim(dAtA, i, uint64(len(m.SubscriptionId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *StopSubscriptionResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StopSubscriptionResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StopSubscriptionResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintSim(dAtA []byte, offset int, v uint64) int {
	offset -= sovSim(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *StartSubscriptionRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SubscriptionId)
	if l > 0 {
		n += 1 + l + sovSim(uint64(l))
	}
	l = len(m.NodeId)
	if l > 0 {
		n += 1 + l + sovSim(uint64(l))
	}
	l = len(m.CellObjectId)
	if l > 0 {
		n += 1 + l + sovSim(uint64(l))
	}
	if m.ReportPeriod != 0 {
		n += 1 + sovSim(uint64(m.ReportPeriod))
	}
	if m.Granularity != 0 {
		n += 1 + sovSim(uint64(m.Granularity))
	}
	return n
}

func (m *StartSubscriptionResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *StopSubscriptionRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SubscriptionId)
	if l > 0 {
		n += 1 + l + sovSim(uint64(l))
	}
	l = len(m.NodeId)
	if l > 0 {
		n += 1 + l + sovSim(uint64(l))
	}
	return n
}

func (m *StopSubscriptionResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovSim(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozSim(x uint64) (n int) {
	return sovSim(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *StartSubscriptionRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSim
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StartSubscriptionRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StartSubscriptionRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubscriptionId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSim
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSim
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSim
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SubscriptionId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSim
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSim
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSim
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NodeId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CellObjectId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSim
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSim
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSim
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CellObjectId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReportPeriod", wireType)
			}
			m.ReportPeriod = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSim
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReportPeriod |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Granularity", wireType)
			}
			m.Granularity = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSim
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Granularity |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSim(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSim
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StartSubscriptionResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSim
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StartSubscriptionResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StartSubscriptionResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipSim(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSim
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StopSubscriptionRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSim
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StopSubscriptionRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StopSubscriptionRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubscriptionId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSim
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSim
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSim
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SubscriptionId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSim
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSim
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSim
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NodeId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSim(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSim
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StopSubscriptionResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSim
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StopSubscriptionResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StopSubscriptionResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipSim(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSim
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSim(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSim
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSim
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSim
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthSim
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupSim
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthSim
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthSim        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSim          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupSim = fmt.Errorf("proto: unexpected end of group")
)
