//
//SPDX-FileCopyrightText: 2022-present Intel Corporation
//
//SPDX-License-Identifier: Apache-2.0

////////////////////// xnap-pdu-contents.proto //////////////////////
// Protobuf generated from /xnap_v1.asn1 by asn1c-0.9.29
// XnAP-PDU-Contents { itu-t(0) identified-organization(4) etsi(0) mobileDomain(0) ngran-access(22) modules(3) xnap(2) version1(1) xnap-PDU-Contents(1) }

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1-devel
// 	protoc        v3.19.4
// source: api/xnap/v1/xnap_pdu_contents.proto

package xnappducontentsv1

import (
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	xnap_commondatatypes "github.com/onosproject/onos-e2t/api/xnap/v1/xnap-commondatatypes"
	_ "github.com/onosproject/onos-e2t/api/xnap/v1/xnap-constants"
	_ "github.com/onosproject/onos-e2t/api/xnap/v1/xnap-containers"
	xnap_ies "github.com/onosproject/onos-e2t/api/xnap/v1/xnap-ies"
	_ "github.com/onosproject/onos-lib-go/api/asn1/v1/asn1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// enumerated from xnap_v1.asn1:1363
type RequestedFastMcgrecoveryViaSrb3 int32

const (
	RequestedFastMcgrecoveryViaSrb3_REQUESTED_FAST_MCGRECOVERY_VIA_SRB3_TRUE RequestedFastMcgrecoveryViaSrb3 = 0
)

// Enum value maps for RequestedFastMcgrecoveryViaSrb3.
var (
	RequestedFastMcgrecoveryViaSrb3_name = map[int32]string{
		0: "REQUESTED_FAST_MCGRECOVERY_VIA_SRB3_TRUE",
	}
	RequestedFastMcgrecoveryViaSrb3_value = map[string]int32{
		"REQUESTED_FAST_MCGRECOVERY_VIA_SRB3_TRUE": 0,
	}
)

func (x RequestedFastMcgrecoveryViaSrb3) Enum() *RequestedFastMcgrecoveryViaSrb3 {
	p := new(RequestedFastMcgrecoveryViaSrb3)
	*p = x
	return p
}

func (x RequestedFastMcgrecoveryViaSrb3) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RequestedFastMcgrecoveryViaSrb3) Descriptor() protoreflect.EnumDescriptor {
	return file_api_xnap_v1_xnap_pdu_contents_proto_enumTypes[0].Descriptor()
}

func (RequestedFastMcgrecoveryViaSrb3) Type() protoreflect.EnumType {
	return &file_api_xnap_v1_xnap_pdu_contents_proto_enumTypes[0]
}

func (x RequestedFastMcgrecoveryViaSrb3) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RequestedFastMcgrecoveryViaSrb3.Descriptor instead.
func (RequestedFastMcgrecoveryViaSrb3) EnumDescriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_pdu_contents_proto_rawDescGZIP(), []int{0}
}

// enumerated from xnap_v1.asn1:1420
type AvailableFastMcgrecoveryViaSrb3 int32

const (
	AvailableFastMcgrecoveryViaSrb3_AVAILABLE_FAST_MCGRECOVERY_VIA_SRB3_TRUE AvailableFastMcgrecoveryViaSrb3 = 0
)

// Enum value maps for AvailableFastMcgrecoveryViaSrb3.
var (
	AvailableFastMcgrecoveryViaSrb3_name = map[int32]string{
		0: "AVAILABLE_FAST_MCGRECOVERY_VIA_SRB3_TRUE",
	}
	AvailableFastMcgrecoveryViaSrb3_value = map[string]int32{
		"AVAILABLE_FAST_MCGRECOVERY_VIA_SRB3_TRUE": 0,
	}
)

func (x AvailableFastMcgrecoveryViaSrb3) Enum() *AvailableFastMcgrecoveryViaSrb3 {
	p := new(AvailableFastMcgrecoveryViaSrb3)
	*p = x
	return p
}

func (x AvailableFastMcgrecoveryViaSrb3) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AvailableFastMcgrecoveryViaSrb3) Descriptor() protoreflect.EnumDescriptor {
	return file_api_xnap_v1_xnap_pdu_contents_proto_enumTypes[1].Descriptor()
}

func (AvailableFastMcgrecoveryViaSrb3) Type() protoreflect.EnumType {
	return &file_api_xnap_v1_xnap_pdu_contents_proto_enumTypes[1]
}

func (x AvailableFastMcgrecoveryViaSrb3) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AvailableFastMcgrecoveryViaSrb3.Descriptor instead.
func (AvailableFastMcgrecoveryViaSrb3) EnumDescriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_pdu_contents_proto_rawDescGZIP(), []int{1}
}

// enumerated from xnap_v1.asn1:1606
type RequestedFastMcgrecoveryViaSrb3Release int32

const (
	RequestedFastMcgrecoveryViaSrb3Release_REQUESTED_FAST_MCGRECOVERY_VIA_SRB3_RELEASE_TRUE RequestedFastMcgrecoveryViaSrb3Release = 0
)

// Enum value maps for RequestedFastMcgrecoveryViaSrb3Release.
var (
	RequestedFastMcgrecoveryViaSrb3Release_name = map[int32]string{
		0: "REQUESTED_FAST_MCGRECOVERY_VIA_SRB3_RELEASE_TRUE",
	}
	RequestedFastMcgrecoveryViaSrb3Release_value = map[string]int32{
		"REQUESTED_FAST_MCGRECOVERY_VIA_SRB3_RELEASE_TRUE": 0,
	}
)

func (x RequestedFastMcgrecoveryViaSrb3Release) Enum() *RequestedFastMcgrecoveryViaSrb3Release {
	p := new(RequestedFastMcgrecoveryViaSrb3Release)
	*p = x
	return p
}

func (x RequestedFastMcgrecoveryViaSrb3Release) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RequestedFastMcgrecoveryViaSrb3Release) Descriptor() protoreflect.EnumDescriptor {
	return file_api_xnap_v1_xnap_pdu_contents_proto_enumTypes[2].Descriptor()
}

func (RequestedFastMcgrecoveryViaSrb3Release) Type() protoreflect.EnumType {
	return &file_api_xnap_v1_xnap_pdu_contents_proto_enumTypes[2]
}

func (x RequestedFastMcgrecoveryViaSrb3Release) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RequestedFastMcgrecoveryViaSrb3Release.Descriptor instead.
func (RequestedFastMcgrecoveryViaSrb3Release) EnumDescriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_pdu_contents_proto_rawDescGZIP(), []int{2}
}

// enumerated from xnap_v1.asn1:1713
type ReleaseFastMcgrecoveryViaSrb3 int32

const (
	ReleaseFastMcgrecoveryViaSrb3_RELEASE_FAST_MCGRECOVERY_VIA_SRB3_TRUE ReleaseFastMcgrecoveryViaSrb3 = 0
)

// Enum value maps for ReleaseFastMcgrecoveryViaSrb3.
var (
	ReleaseFastMcgrecoveryViaSrb3_name = map[int32]string{
		0: "RELEASE_FAST_MCGRECOVERY_VIA_SRB3_TRUE",
	}
	ReleaseFastMcgrecoveryViaSrb3_value = map[string]int32{
		"RELEASE_FAST_MCGRECOVERY_VIA_SRB3_TRUE": 0,
	}
)

func (x ReleaseFastMcgrecoveryViaSrb3) Enum() *ReleaseFastMcgrecoveryViaSrb3 {
	p := new(ReleaseFastMcgrecoveryViaSrb3)
	*p = x
	return p
}

func (x ReleaseFastMcgrecoveryViaSrb3) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ReleaseFastMcgrecoveryViaSrb3) Descriptor() protoreflect.EnumDescriptor {
	return file_api_xnap_v1_xnap_pdu_contents_proto_enumTypes[3].Descriptor()
}

func (ReleaseFastMcgrecoveryViaSrb3) Type() protoreflect.EnumType {
	return &file_api_xnap_v1_xnap_pdu_contents_proto_enumTypes[3]
}

func (x ReleaseFastMcgrecoveryViaSrb3) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ReleaseFastMcgrecoveryViaSrb3.Descriptor instead.
func (ReleaseFastMcgrecoveryViaSrb3) EnumDescriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_pdu_contents_proto_rawDescGZIP(), []int{3}
}

// enumerated from xnap_v1.asn1:2145
type SrbTypeSplitSrbrrctransfer int32

const (
	SrbTypeSplitSrbrrctransfer_SRB_TYPE_SPLIT_SRBRRCTRANSFER_SRB1 SrbTypeSplitSrbrrctransfer = 0
	SrbTypeSplitSrbrrctransfer_SRB_TYPE_SPLIT_SRBRRCTRANSFER_SRB2 SrbTypeSplitSrbrrctransfer = 1
)

// Enum value maps for SrbTypeSplitSrbrrctransfer.
var (
	SrbTypeSplitSrbrrctransfer_name = map[int32]string{
		0: "SRB_TYPE_SPLIT_SRBRRCTRANSFER_SRB1",
		1: "SRB_TYPE_SPLIT_SRBRRCTRANSFER_SRB2",
	}
	SrbTypeSplitSrbrrctransfer_value = map[string]int32{
		"SRB_TYPE_SPLIT_SRBRRCTRANSFER_SRB1": 0,
		"SRB_TYPE_SPLIT_SRBRRCTRANSFER_SRB2": 1,
	}
)

func (x SrbTypeSplitSrbrrctransfer) Enum() *SrbTypeSplitSrbrrctransfer {
	p := new(SrbTypeSplitSrbrrctransfer)
	*p = x
	return p
}

func (x SrbTypeSplitSrbrrctransfer) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SrbTypeSplitSrbrrctransfer) Descriptor() protoreflect.EnumDescriptor {
	return file_api_xnap_v1_xnap_pdu_contents_proto_enumTypes[4].Descriptor()
}

func (SrbTypeSplitSrbrrctransfer) Type() protoreflect.EnumType {
	return &file_api_xnap_v1_xnap_pdu_contents_proto_enumTypes[4]
}

func (x SrbTypeSplitSrbrrctransfer) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SrbTypeSplitSrbrrctransfer.Descriptor instead.
func (SrbTypeSplitSrbrrctransfer) EnumDescriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_pdu_contents_proto_rawDescGZIP(), []int{4}
}

// value set from xnap_v1.asn1:951
// {HandoverRequest-IEs&Value}
type HandoverRequestIEsValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// value set translated as choice from xnap_v1.asn1:951
	//
	// Types that are assignable to HandoverRequestIes:
	//	*HandoverRequestIEsValue_IdSourceNgRannodeUexnApid
	//	*HandoverRequestIEsValue_IdCause
	//	*HandoverRequestIEsValue_IdTargetCellGlobalId
	//	*HandoverRequestIEsValue_IdGuami
	//	*HandoverRequestIEsValue_IdUecontextInfoHorequest
	//	*HandoverRequestIEsValue_IdTraceActivation
	//	*HandoverRequestIEsValue_IdMaskedImeisv
	//	*HandoverRequestIEsValue_IdUehistoryInformation
	//	*HandoverRequestIEsValue_IdUecontextRefAtSnHorequest
	//	*HandoverRequestIEsValue_IdChoinformationReq
	//	*HandoverRequestIEsValue_IdNrv2XservicesAuthorized
	//	*HandoverRequestIEsValue_IdLtev2XservicesAuthorized
	//	*HandoverRequestIEsValue_IdPc5QoSparameters
	//	*HandoverRequestIEsValue_IdMobilityInformation
	//	*HandoverRequestIEsValue_IdUehistoryInformationFromTheUe
	//	*HandoverRequestIEsValue_IdIabnodeIndication
	HandoverRequestIes isHandoverRequestIEsValue_HandoverRequestIes `protobuf_oneof:"handover_request_ies"`
}

func (x *HandoverRequestIEsValue) Reset() {
	*x = HandoverRequestIEsValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HandoverRequestIEsValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HandoverRequestIEsValue) ProtoMessage() {}

func (x *HandoverRequestIEsValue) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HandoverRequestIEsValue.ProtoReflect.Descriptor instead.
func (*HandoverRequestIEsValue) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_pdu_contents_proto_rawDescGZIP(), []int{0}
}

func (m *HandoverRequestIEsValue) GetHandoverRequestIes() isHandoverRequestIEsValue_HandoverRequestIes {
	if m != nil {
		return m.HandoverRequestIes
	}
	return nil
}

func (x *HandoverRequestIEsValue) GetIdSourceNgRannodeUexnApid() *xnap_ies.NgRAnnodeUexnApid {
	if x, ok := x.GetHandoverRequestIes().(*HandoverRequestIEsValue_IdSourceNgRannodeUexnApid); ok {
		return x.IdSourceNgRannodeUexnApid
	}
	return nil
}

func (x *HandoverRequestIEsValue) GetIdCause() *xnap_ies.Cause {
	if x, ok := x.GetHandoverRequestIes().(*HandoverRequestIEsValue_IdCause); ok {
		return x.IdCause
	}
	return nil
}

func (x *HandoverRequestIEsValue) GetIdTargetCellGlobalId() *xnap_ies.TargetCGi {
	if x, ok := x.GetHandoverRequestIes().(*HandoverRequestIEsValue_IdTargetCellGlobalId); ok {
		return x.IdTargetCellGlobalId
	}
	return nil
}

func (x *HandoverRequestIEsValue) GetIdGuami() *xnap_ies.Guami {
	if x, ok := x.GetHandoverRequestIes().(*HandoverRequestIEsValue_IdGuami); ok {
		return x.IdGuami
	}
	return nil
}

func (x *HandoverRequestIEsValue) GetIdUecontextInfoHorequest() *UecontextInfoHorequest {
	if x, ok := x.GetHandoverRequestIes().(*HandoverRequestIEsValue_IdUecontextInfoHorequest); ok {
		return x.IdUecontextInfoHorequest
	}
	return nil
}

func (x *HandoverRequestIEsValue) GetIdTraceActivation() *xnap_ies.TraceActivation {
	if x, ok := x.GetHandoverRequestIes().(*HandoverRequestIEsValue_IdTraceActivation); ok {
		return x.IdTraceActivation
	}
	return nil
}

func (x *HandoverRequestIEsValue) GetIdMaskedImeisv() *xnap_ies.MaskedImeisv {
	if x, ok := x.GetHandoverRequestIes().(*HandoverRequestIEsValue_IdMaskedImeisv); ok {
		return x.IdMaskedImeisv
	}
	return nil
}

func (x *HandoverRequestIEsValue) GetIdUehistoryInformation() *xnap_ies.UehistoryInformation {
	if x, ok := x.GetHandoverRequestIes().(*HandoverRequestIEsValue_IdUehistoryInformation); ok {
		return x.IdUehistoryInformation
	}
	return nil
}

func (x *HandoverRequestIEsValue) GetIdUecontextRefAtSnHorequest() *UecontextRefAtSnHOrequest {
	if x, ok := x.GetHandoverRequestIes().(*HandoverRequestIEsValue_IdUecontextRefAtSnHorequest); ok {
		return x.IdUecontextRefAtSnHorequest
	}
	return nil
}

func (x *HandoverRequestIEsValue) GetIdChoinformationReq() *xnap_ies.ChoinformationReq {
	if x, ok := x.GetHandoverRequestIes().(*HandoverRequestIEsValue_IdChoinformationReq); ok {
		return x.IdChoinformationReq
	}
	return nil
}

func (x *HandoverRequestIEsValue) GetIdNrv2XservicesAuthorized() *xnap_ies.Nrv2XservicesAuthorized {
	if x, ok := x.GetHandoverRequestIes().(*HandoverRequestIEsValue_IdNrv2XservicesAuthorized); ok {
		return x.IdNrv2XservicesAuthorized
	}
	return nil
}

func (x *HandoverRequestIEsValue) GetIdLtev2XservicesAuthorized() *xnap_ies.Ltev2XservicesAuthorized {
	if x, ok := x.GetHandoverRequestIes().(*HandoverRequestIEsValue_IdLtev2XservicesAuthorized); ok {
		return x.IdLtev2XservicesAuthorized
	}
	return nil
}

func (x *HandoverRequestIEsValue) GetIdPc5QoSparameters() *xnap_ies.Pc5QoSparameters {
	if x, ok := x.GetHandoverRequestIes().(*HandoverRequestIEsValue_IdPc5QoSparameters); ok {
		return x.IdPc5QoSparameters
	}
	return nil
}

func (x *HandoverRequestIEsValue) GetIdMobilityInformation() *xnap_ies.MobilityInformation {
	if x, ok := x.GetHandoverRequestIes().(*HandoverRequestIEsValue_IdMobilityInformation); ok {
		return x.IdMobilityInformation
	}
	return nil
}

func (x *HandoverRequestIEsValue) GetIdUehistoryInformationFromTheUe() *xnap_ies.UehistoryInformationFromTheUe {
	if x, ok := x.GetHandoverRequestIes().(*HandoverRequestIEsValue_IdUehistoryInformationFromTheUe); ok {
		return x.IdUehistoryInformationFromTheUe
	}
	return nil
}

func (x *HandoverRequestIEsValue) GetIdIabnodeIndication() xnap_ies.IabnodeIndication {
	if x, ok := x.GetHandoverRequestIes().(*HandoverRequestIEsValue_IdIabnodeIndication); ok {
		return x.IdIabnodeIndication
	}
	return xnap_ies.IabnodeIndication(0)
}

type isHandoverRequestIEsValue_HandoverRequestIes interface {
	isHandoverRequestIEsValue_HandoverRequestIes()
}

type HandoverRequestIEsValue_IdSourceNgRannodeUexnApid struct {
	// @inject_tag: aper:"choiceIdx:1,"
	IdSourceNgRannodeUexnApid *xnap_ies.NgRAnnodeUexnApid `protobuf:"bytes,1,opt,name=id_source_ng_rannode_uexn_apid,json=id-sourceNG-RANnodeUEXnAPID,proto3,oneof" aper:"choiceIdx:1,"`
}

type HandoverRequestIEsValue_IdCause struct {
	// @inject_tag: aper:"choiceIdx:2,"
	IdCause *xnap_ies.Cause `protobuf:"bytes,2,opt,name=id_cause,json=id-Cause,proto3,oneof" aper:"choiceIdx:2,"`
}

type HandoverRequestIEsValue_IdTargetCellGlobalId struct {
	// @inject_tag: aper:"choiceIdx:3,"
	IdTargetCellGlobalId *xnap_ies.TargetCGi `protobuf:"bytes,3,opt,name=id_target_cell_global_id,json=id-targetCellGlobalID,proto3,oneof" aper:"choiceIdx:3,"`
}

type HandoverRequestIEsValue_IdGuami struct {
	// @inject_tag: aper:"choiceIdx:4,valueExt,"
	IdGuami *xnap_ies.Guami `protobuf:"bytes,4,opt,name=id_guami,json=id-GUAMI,proto3,oneof" aper:"choiceIdx:4,valueExt,"`
}

type HandoverRequestIEsValue_IdUecontextInfoHorequest struct {
	// @inject_tag: aper:"choiceIdx:5,valueExt,"
	IdUecontextInfoHorequest *UecontextInfoHorequest `protobuf:"bytes,5,opt,name=id_uecontext_info_horequest,json=id-UEContextInfoHORequest,proto3,oneof" aper:"choiceIdx:5,valueExt,"`
}

type HandoverRequestIEsValue_IdTraceActivation struct {
	// @inject_tag: aper:"choiceIdx:6,valueExt,"
	IdTraceActivation *xnap_ies.TraceActivation `protobuf:"bytes,6,opt,name=id_trace_activation,json=id-TraceActivation,proto3,oneof" aper:"choiceIdx:6,valueExt,"`
}

type HandoverRequestIEsValue_IdMaskedImeisv struct {
	// @inject_tag: aper:"choiceIdx:7,"
	IdMaskedImeisv *xnap_ies.MaskedImeisv `protobuf:"bytes,7,opt,name=id_masked_imeisv,json=id-MaskedIMEISV,proto3,oneof" aper:"choiceIdx:7,"`
}

type HandoverRequestIEsValue_IdUehistoryInformation struct {
	// @inject_tag: aper:"choiceIdx:8,"
	IdUehistoryInformation *xnap_ies.UehistoryInformation `protobuf:"bytes,8,opt,name=id_uehistory_information,json=id-UEHistoryInformation,proto3,oneof" aper:"choiceIdx:8,"`
}

type HandoverRequestIEsValue_IdUecontextRefAtSnHorequest struct {
	// @inject_tag: aper:"choiceIdx:9,valueExt,"
	IdUecontextRefAtSnHorequest *UecontextRefAtSnHOrequest `protobuf:"bytes,9,opt,name=id_uecontext_ref_at_sn_horequest,json=id-UEContextRefAtSN-HORequest,proto3,oneof" aper:"choiceIdx:9,valueExt,"`
}

type HandoverRequestIEsValue_IdChoinformationReq struct {
	// @inject_tag: aper:"choiceIdx:10,valueExt,"
	IdChoinformationReq *xnap_ies.ChoinformationReq `protobuf:"bytes,10,opt,name=id_choinformation_req,json=id-CHOinformation-Req,proto3,oneof" aper:"choiceIdx:10,valueExt,"`
}

type HandoverRequestIEsValue_IdNrv2XservicesAuthorized struct {
	// @inject_tag: aper:"choiceIdx:11,valueExt,"
	IdNrv2XservicesAuthorized *xnap_ies.Nrv2XservicesAuthorized `protobuf:"bytes,11,opt,name=id_nrv2_xservices_authorized,json=id-NRV2XServicesAuthorized,proto3,oneof" aper:"choiceIdx:11,valueExt,"`
}

type HandoverRequestIEsValue_IdLtev2XservicesAuthorized struct {
	// @inject_tag: aper:"choiceIdx:12,valueExt,"
	IdLtev2XservicesAuthorized *xnap_ies.Ltev2XservicesAuthorized `protobuf:"bytes,12,opt,name=id_ltev2_xservices_authorized,json=id-LTEV2XServicesAuthorized,proto3,oneof" aper:"choiceIdx:12,valueExt,"`
}

type HandoverRequestIEsValue_IdPc5QoSparameters struct {
	// @inject_tag: aper:"choiceIdx:13,valueExt,"
	IdPc5QoSparameters *xnap_ies.Pc5QoSparameters `protobuf:"bytes,13,opt,name=id_pc5_qo_sparameters,json=id-PC5QoSParameters,proto3,oneof" aper:"choiceIdx:13,valueExt,"`
}

type HandoverRequestIEsValue_IdMobilityInformation struct {
	// @inject_tag: aper:"choiceIdx:14,"
	IdMobilityInformation *xnap_ies.MobilityInformation `protobuf:"bytes,14,opt,name=id_mobility_information,json=id-MobilityInformation,proto3,oneof" aper:"choiceIdx:14,"`
}

type HandoverRequestIEsValue_IdUehistoryInformationFromTheUe struct {
	// @inject_tag: aper:"choiceIdx:15,"
	IdUehistoryInformationFromTheUe *xnap_ies.UehistoryInformationFromTheUe `protobuf:"bytes,15,opt,name=id_uehistory_information_from_the_ue,json=id-UEHistoryInformationFromTheUE,proto3,oneof" aper:"choiceIdx:15,"`
}

type HandoverRequestIEsValue_IdIabnodeIndication struct {
	// @inject_tag: aper:"choiceIdx:16,valueExt,valueLB:0,valueUB:0,"
	IdIabnodeIndication xnap_ies.IabnodeIndication `protobuf:"varint,16,opt,name=id_iabnode_indication,json=id-IABNodeIndication,proto3,enum=xnap.v1.IabnodeIndication,oneof" aper:"choiceIdx:16,valueExt,valueLB:0,valueUB:0,"`
}

func (*HandoverRequestIEsValue_IdSourceNgRannodeUexnApid) isHandoverRequestIEsValue_HandoverRequestIes() {
}

func (*HandoverRequestIEsValue_IdCause) isHandoverRequestIEsValue_HandoverRequestIes() {}

func (*HandoverRequestIEsValue_IdTargetCellGlobalId) isHandoverRequestIEsValue_HandoverRequestIes() {}

func (*HandoverRequestIEsValue_IdGuami) isHandoverRequestIEsValue_HandoverRequestIes() {}

func (*HandoverRequestIEsValue_IdUecontextInfoHorequest) isHandoverRequestIEsValue_HandoverRequestIes() {
}

func (*HandoverRequestIEsValue_IdTraceActivation) isHandoverRequestIEsValue_HandoverRequestIes() {}

func (*HandoverRequestIEsValue_IdMaskedImeisv) isHandoverRequestIEsValue_HandoverRequestIes() {}

func (*HandoverRequestIEsValue_IdUehistoryInformation) isHandoverRequestIEsValue_HandoverRequestIes() {
}

func (*HandoverRequestIEsValue_IdUecontextRefAtSnHorequest) isHandoverRequestIEsValue_HandoverRequestIes() {
}

func (*HandoverRequestIEsValue_IdChoinformationReq) isHandoverRequestIEsValue_HandoverRequestIes() {}

func (*HandoverRequestIEsValue_IdNrv2XservicesAuthorized) isHandoverRequestIEsValue_HandoverRequestIes() {
}

func (*HandoverRequestIEsValue_IdLtev2XservicesAuthorized) isHandoverRequestIEsValue_HandoverRequestIes() {
}

func (*HandoverRequestIEsValue_IdPc5QoSparameters) isHandoverRequestIEsValue_HandoverRequestIes() {}

func (*HandoverRequestIEsValue_IdMobilityInformation) isHandoverRequestIEsValue_HandoverRequestIes() {
}

func (*HandoverRequestIEsValue_IdUehistoryInformationFromTheUe) isHandoverRequestIEsValue_HandoverRequestIes() {
}

func (*HandoverRequestIEsValue_IdIabnodeIndication) isHandoverRequestIEsValue_HandoverRequestIes() {}

// concrete instance(s) of class XNAP-PROTOCOL-IES from xnap_v1.asn1:951
// @inject_tag: aper:"valueExt"
// {HandoverRequest-IEs}
type HandoverRequestIEs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"unique,"
	Id *xnap_commondatatypes.ProtocolIeID `protobuf:"bytes,1,opt,name=id,json=&id,proto3" json:"id,omitempty" aper:"unique,"`
	// @inject_tag: aper:"valueLB:0,valueUB:2,"
	Criticality xnap_commondatatypes.Criticality `protobuf:"varint,2,opt,name=criticality,json=&criticality,proto3,enum=xnap.v1.Criticality" json:"criticality,omitempty" aper:"valueLB:0,valueUB:2,"`
	// @inject_tag: aper:"canonicalOrder,"
	Value *HandoverRequestIEsValue `protobuf:"bytes,3,opt,name=value,json=&Value,proto3" json:"value,omitempty" aper:"canonicalOrder,"`
}

func (x *HandoverRequestIEs) Reset() {
	*x = HandoverRequestIEs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HandoverRequestIEs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HandoverRequestIEs) ProtoMessage() {}

func (x *HandoverRequestIEs) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HandoverRequestIEs.ProtoReflect.Descriptor instead.
func (*HandoverRequestIEs) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_pdu_contents_proto_rawDescGZIP(), []int{1}
}

func (x *HandoverRequestIEs) GetId() *xnap_commondatatypes.ProtocolIeID {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *HandoverRequestIEs) GetCriticality() xnap_commondatatypes.Criticality {
	if x != nil {
		return x.Criticality
	}
	return xnap_commondatatypes.Criticality(0)
}

func (x *HandoverRequestIEs) GetValue() *HandoverRequestIEsValue {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:947
// @inject_tag: aper:"valueExt"
// {HandoverRequest}
type HandoverRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProtocolIes []*HandoverRequestIEs `protobuf:"bytes,1,rep,name=protocol_ies,json=protocolIEs,proto3" json:"protocol_ies,omitempty"`
}

func (x *HandoverRequest) Reset() {
	*x = HandoverRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HandoverRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HandoverRequest) ProtoMessage() {}

func (x *HandoverRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HandoverRequest.ProtoReflect.Descriptor instead.
func (*HandoverRequest) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_pdu_contents_proto_rawDescGZIP(), []int{2}
}

func (x *HandoverRequest) GetProtocolIes() []*HandoverRequestIEs {
	if x != nil {
		return x.ProtocolIes
	}
	return nil
}

// value set from xnap_v1.asn1:986
// {UEContextInfoHORequest-ExtIEs&Extension}
type UecontextInfoHorequestExtIesExtension struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// value set translated as choice from xnap_v1.asn1:986
	//
	// Types that are assignable to UecontextInfoHorequestExtIes:
	//	*UecontextInfoHorequestExtIesExtension_IdFiveGcmobilityRestrictionListContainer
	//	*UecontextInfoHorequestExtIesExtension_IdNruesidelinkAggregateMaximumBitRate
	//	*UecontextInfoHorequestExtIesExtension_IdLteuesidelinkAggregateMaximumBitRate
	//	*UecontextInfoHorequestExtIesExtension_IdMdtplmnlist
	//	*UecontextInfoHorequestExtIesExtension_IdUeradioCapabilityId
	UecontextInfoHorequestExtIes isUecontextInfoHorequestExtIesExtension_UecontextInfoHorequestExtIes `protobuf_oneof:"uecontext_info_horequest_ext_ies"`
}

func (x *UecontextInfoHorequestExtIesExtension) Reset() {
	*x = UecontextInfoHorequestExtIesExtension{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UecontextInfoHorequestExtIesExtension) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UecontextInfoHorequestExtIesExtension) ProtoMessage() {}

func (x *UecontextInfoHorequestExtIesExtension) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UecontextInfoHorequestExtIesExtension.ProtoReflect.Descriptor instead.
func (*UecontextInfoHorequestExtIesExtension) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_pdu_contents_proto_rawDescGZIP(), []int{3}
}

func (m *UecontextInfoHorequestExtIesExtension) GetUecontextInfoHorequestExtIes() isUecontextInfoHorequestExtIesExtension_UecontextInfoHorequestExtIes {
	if m != nil {
		return m.UecontextInfoHorequestExtIes
	}
	return nil
}

func (x *UecontextInfoHorequestExtIesExtension) GetIdFiveGcmobilityRestrictionListContainer() *xnap_ies.FiveGcmobilityRestrictionListContainer {
	if x, ok := x.GetUecontextInfoHorequestExtIes().(*UecontextInfoHorequestExtIesExtension_IdFiveGcmobilityRestrictionListContainer); ok {
		return x.IdFiveGcmobilityRestrictionListContainer
	}
	return nil
}

func (x *UecontextInfoHorequestExtIesExtension) GetIdNruesidelinkAggregateMaximumBitRate() *xnap_ies.NruesidelinkAggregateMaximumBitRate {
	if x, ok := x.GetUecontextInfoHorequestExtIes().(*UecontextInfoHorequestExtIesExtension_IdNruesidelinkAggregateMaximumBitRate); ok {
		return x.IdNruesidelinkAggregateMaximumBitRate
	}
	return nil
}

func (x *UecontextInfoHorequestExtIesExtension) GetIdLteuesidelinkAggregateMaximumBitRate() *xnap_ies.LteuesidelinkAggregateMaximumBitRate {
	if x, ok := x.GetUecontextInfoHorequestExtIes().(*UecontextInfoHorequestExtIesExtension_IdLteuesidelinkAggregateMaximumBitRate); ok {
		return x.IdLteuesidelinkAggregateMaximumBitRate
	}
	return nil
}

func (x *UecontextInfoHorequestExtIesExtension) GetIdMdtplmnlist() *xnap_ies.Mdtplmnlist {
	if x, ok := x.GetUecontextInfoHorequestExtIes().(*UecontextInfoHorequestExtIesExtension_IdMdtplmnlist); ok {
		return x.IdMdtplmnlist
	}
	return nil
}

func (x *UecontextInfoHorequestExtIesExtension) GetIdUeradioCapabilityId() *xnap_ies.UeradioCapabilityId {
	if x, ok := x.GetUecontextInfoHorequestExtIes().(*UecontextInfoHorequestExtIesExtension_IdUeradioCapabilityId); ok {
		return x.IdUeradioCapabilityId
	}
	return nil
}

type isUecontextInfoHorequestExtIesExtension_UecontextInfoHorequestExtIes interface {
	isUecontextInfoHorequestExtIesExtension_UecontextInfoHorequestExtIes()
}

type UecontextInfoHorequestExtIesExtension_IdFiveGcmobilityRestrictionListContainer struct {
	// @inject_tag: aper:"choiceIdx:1,"
	IdFiveGcmobilityRestrictionListContainer *xnap_ies.FiveGcmobilityRestrictionListContainer `protobuf:"bytes,1,opt,name=id_five_gcmobility_restriction_list_container,json=id-FiveGCMobilityRestrictionListContainer,proto3,oneof" aper:"choiceIdx:1,"`
}

type UecontextInfoHorequestExtIesExtension_IdNruesidelinkAggregateMaximumBitRate struct {
	// @inject_tag: aper:"choiceIdx:2,valueExt,"
	IdNruesidelinkAggregateMaximumBitRate *xnap_ies.NruesidelinkAggregateMaximumBitRate `protobuf:"bytes,2,opt,name=id_nruesidelink_aggregate_maximum_bit_rate,json=id-NRUESidelinkAggregateMaximumBitRate,proto3,oneof" aper:"choiceIdx:2,valueExt,"`
}

type UecontextInfoHorequestExtIesExtension_IdLteuesidelinkAggregateMaximumBitRate struct {
	// @inject_tag: aper:"choiceIdx:3,valueExt,"
	IdLteuesidelinkAggregateMaximumBitRate *xnap_ies.LteuesidelinkAggregateMaximumBitRate `protobuf:"bytes,3,opt,name=id_lteuesidelink_aggregate_maximum_bit_rate,json=id-LTEUESidelinkAggregateMaximumBitRate,proto3,oneof" aper:"choiceIdx:3,valueExt,"`
}

type UecontextInfoHorequestExtIesExtension_IdMdtplmnlist struct {
	// @inject_tag: aper:"choiceIdx:4,"
	IdMdtplmnlist *xnap_ies.Mdtplmnlist `protobuf:"bytes,4,opt,name=id_mdtplmnlist,json=id-MDTPLMNList,proto3,oneof" aper:"choiceIdx:4,"`
}

type UecontextInfoHorequestExtIesExtension_IdUeradioCapabilityId struct {
	// @inject_tag: aper:"choiceIdx:5,"
	IdUeradioCapabilityId *xnap_ies.UeradioCapabilityId `protobuf:"bytes,5,opt,name=id_ueradio_capability_id,json=id-UERadioCapabilityID,proto3,oneof" aper:"choiceIdx:5,"`
}

func (*UecontextInfoHorequestExtIesExtension_IdFiveGcmobilityRestrictionListContainer) isUecontextInfoHorequestExtIesExtension_UecontextInfoHorequestExtIes() {
}

func (*UecontextInfoHorequestExtIesExtension_IdNruesidelinkAggregateMaximumBitRate) isUecontextInfoHorequestExtIesExtension_UecontextInfoHorequestExtIes() {
}

func (*UecontextInfoHorequestExtIesExtension_IdLteuesidelinkAggregateMaximumBitRate) isUecontextInfoHorequestExtIesExtension_UecontextInfoHorequestExtIes() {
}

func (*UecontextInfoHorequestExtIesExtension_IdMdtplmnlist) isUecontextInfoHorequestExtIesExtension_UecontextInfoHorequestExtIes() {
}

func (*UecontextInfoHorequestExtIesExtension_IdUeradioCapabilityId) isUecontextInfoHorequestExtIesExtension_UecontextInfoHorequestExtIes() {
}

// concrete instance(s) of class XNAP-PROTOCOL-EXTENSION from xnap_v1.asn1:986
// @inject_tag: aper:"valueExt"
// {UEContextInfoHORequest-ExtIEs}
type UecontextInfoHorequestExtIes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"unique,"
	Id *xnap_commondatatypes.ProtocolIeID `protobuf:"bytes,1,opt,name=id,json=&id,proto3" json:"id,omitempty" aper:"unique,"`
	// @inject_tag: aper:"valueLB:0,valueUB:2,"
	Criticality xnap_commondatatypes.Criticality `protobuf:"varint,2,opt,name=criticality,json=&criticality,proto3,enum=xnap.v1.Criticality" json:"criticality,omitempty" aper:"valueLB:0,valueUB:2,"`
	// @inject_tag: aper:"canonicalOrder,"
	Extension *UecontextInfoHorequestExtIesExtension `protobuf:"bytes,3,opt,name=extension,json=&Extension,proto3" json:"extension,omitempty" aper:"canonicalOrder,"`
}

func (x *UecontextInfoHorequestExtIes) Reset() {
	*x = UecontextInfoHorequestExtIes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UecontextInfoHorequestExtIes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UecontextInfoHorequestExtIes) ProtoMessage() {}

func (x *UecontextInfoHorequestExtIes) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UecontextInfoHorequestExtIes.ProtoReflect.Descriptor instead.
func (*UecontextInfoHorequestExtIes) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_pdu_contents_proto_rawDescGZIP(), []int{4}
}

func (x *UecontextInfoHorequestExtIes) GetId() *xnap_commondatatypes.ProtocolIeID {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *UecontextInfoHorequestExtIes) GetCriticality() xnap_commondatatypes.Criticality {
	if x != nil {
		return x.Criticality
	}
	return xnap_commondatatypes.Criticality(0)
}

func (x *UecontextInfoHorequestExtIes) GetExtension() *UecontextInfoHorequestExtIesExtension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// sequence from xnap_v1.asn1:972
// @inject_tag: aper:"valueExt"
// {UEContextInfoHORequest}
type UecontextInfoHorequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NgCUeReference  *xnap_ies.AmfUENGapID                 `protobuf:"bytes,1,opt,name=ng_c_ue_reference,json=ng-c-UE-reference,proto3" json:"ng_c_ue_reference,omitempty"`
	CpTnlInfoSource *xnap_ies.CptransportLayerInformation `protobuf:"bytes,2,opt,name=cp_tnl_info_source,json=cp-TNL-info-source,proto3" json:"cp_tnl_info_source,omitempty"`
	// @inject_tag: aper:"valueExt,"
	UeSecurityCapabilities *xnap_ies.UesecurityCapabilities `protobuf:"bytes,3,opt,name=ue_security_capabilities,json=ueSecurityCapabilities,proto3" json:"ue_security_capabilities,omitempty" aper:"valueExt,"`
	// @inject_tag: aper:"valueExt,"
	SecurityInformation *xnap_ies.AsSecurityInformation `protobuf:"bytes,4,opt,name=security_information,json=securityInformation,proto3" json:"security_information,omitempty" aper:"valueExt,"`
	// @inject_tag: aper:"optional,"
	IndexToRatFrequencySelectionPriority *xnap_ies.RfspIndex `protobuf:"bytes,5,opt,name=index_to_rat_frequency_selection_priority,json=indexToRatFrequencySelectionPriority,proto3,oneof" json:"index_to_rat_frequency_selection_priority,omitempty" aper:"optional,"`
	// @inject_tag: aper:"valueExt,"
	UeAmbr                           *xnap_ies.UeaggregateMaximumBitRate        `protobuf:"bytes,6,opt,name=ue_ambr,json=ue-AMBR,proto3" json:"ue_ambr,omitempty" aper:"valueExt,"`
	PduSessionResourcesToBeSetupList *xnap_ies.PdusessionResourcesToBeSetupList `protobuf:"bytes,7,opt,name=pdu_session_resources_to_be_setup_list,json=pduSessionResourcesToBeSetup-List,proto3" json:"pdu_session_resources_to_be_setup_list,omitempty"`
	RrcContext                       []byte                                     `protobuf:"bytes,8,opt,name=rrc_context,json=rrc-Context,proto3" json:"rrc_context,omitempty"`
	// @inject_tag: aper:"optional,valueExt,"
	LocationReportingInformation *xnap_ies.LocationReportingInformation `protobuf:"bytes,9,opt,name=location_reporting_information,json=locationReportingInformation,proto3,oneof" json:"location_reporting_information,omitempty" aper:"optional,valueExt,"`
	// @inject_tag: aper:"optional,valueExt,"
	Mrl *xnap_ies.MobilityRestrictionList `protobuf:"bytes,10,opt,name=mrl,proto3,oneof" json:"mrl,omitempty" aper:"optional,valueExt,"`
	// @inject_tag: aper:"optional,sizeLB:1,"
	IEExtensions []*UecontextInfoHorequestExtIes `protobuf:"bytes,11,rep,name=i_e_extensions,json=iE-Extensions,proto3" json:"i_e_extensions,omitempty" aper:"optional,sizeLB:1,"`
}

func (x *UecontextInfoHorequest) Reset() {
	*x = UecontextInfoHorequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UecontextInfoHorequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UecontextInfoHorequest) ProtoMessage() {}

func (x *UecontextInfoHorequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UecontextInfoHorequest.ProtoReflect.Descriptor instead.
func (*UecontextInfoHorequest) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_pdu_contents_proto_rawDescGZIP(), []int{5}
}

func (x *UecontextInfoHorequest) GetNgCUeReference() *xnap_ies.AmfUENGapID {
	if x != nil {
		return x.NgCUeReference
	}
	return nil
}

func (x *UecontextInfoHorequest) GetCpTnlInfoSource() *xnap_ies.CptransportLayerInformation {
	if x != nil {
		return x.CpTnlInfoSource
	}
	return nil
}

func (x *UecontextInfoHorequest) GetUeSecurityCapabilities() *xnap_ies.UesecurityCapabilities {
	if x != nil {
		return x.UeSecurityCapabilities
	}
	return nil
}

func (x *UecontextInfoHorequest) GetSecurityInformation() *xnap_ies.AsSecurityInformation {
	if x != nil {
		return x.SecurityInformation
	}
	return nil
}

func (x *UecontextInfoHorequest) GetIndexToRatFrequencySelectionPriority() *xnap_ies.RfspIndex {
	if x != nil {
		return x.IndexToRatFrequencySelectionPriority
	}
	return nil
}

func (x *UecontextInfoHorequest) GetUeAmbr() *xnap_ies.UeaggregateMaximumBitRate {
	if x != nil {
		return x.UeAmbr
	}
	return nil
}

func (x *UecontextInfoHorequest) GetPduSessionResourcesToBeSetupList() *xnap_ies.PdusessionResourcesToBeSetupList {
	if x != nil {
		return x.PduSessionResourcesToBeSetupList
	}
	return nil
}

func (x *UecontextInfoHorequest) GetRrcContext() []byte {
	if x != nil {
		return x.RrcContext
	}
	return nil
}

func (x *UecontextInfoHorequest) GetLocationReportingInformation() *xnap_ies.LocationReportingInformation {
	if x != nil {
		return x.LocationReportingInformation
	}
	return nil
}

func (x *UecontextInfoHorequest) GetMrl() *xnap_ies.MobilityRestrictionList {
	if x != nil {
		return x.Mrl
	}
	return nil
}

func (x *UecontextInfoHorequest) GetIEExtensions() []*UecontextInfoHorequestExtIes {
	if x != nil {
		return x.IEExtensions
	}
	return nil
}

// value set from xnap_v1.asn1:1002
// {UEContextRefAtSN-HORequest-ExtIEs}
type UecontextRefAtSnHOrequestExtIes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *emptypb.Empty `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *UecontextRefAtSnHOrequestExtIes) Reset() {
	*x = UecontextRefAtSnHOrequestExtIes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UecontextRefAtSnHOrequestExtIes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UecontextRefAtSnHOrequestExtIes) ProtoMessage() {}

func (x *UecontextRefAtSnHOrequestExtIes) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UecontextRefAtSnHOrequestExtIes.ProtoReflect.Descriptor instead.
func (*UecontextRefAtSnHOrequestExtIes) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_pdu_contents_proto_rawDescGZIP(), []int{6}
}

func (x *UecontextRefAtSnHOrequestExtIes) GetValue() *emptypb.Empty {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:996
// @inject_tag: aper:"valueExt"
// {UEContextRefAtSN-HORequest}
type UecontextRefAtSnHOrequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GlobalNgRannodeId   *xnap_ies.GlobalNgRAnnodeID `protobuf:"bytes,1,opt,name=global_ng_rannode_id,json=globalNG-RANNode-ID,proto3" json:"global_ng_rannode_id,omitempty"`
	SNNgRannodeUexnApid *xnap_ies.NgRAnnodeUexnApid `protobuf:"bytes,2,opt,name=s_n_ng_rannode_uexn_apid,json=sN-NG-RANnodeUEXnAPID,proto3" json:"s_n_ng_rannode_uexn_apid,omitempty"`
	// @inject_tag: aper:"optional,sizeLB:1,"
	IEExtensions []*UecontextRefAtSnHOrequestExtIes `protobuf:"bytes,3,rep,name=i_e_extensions,json=iE-Extensions,proto3" json:"i_e_extensions,omitempty" aper:"optional,sizeLB:1,"`
}

func (x *UecontextRefAtSnHOrequest) Reset() {
	*x = UecontextRefAtSnHOrequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UecontextRefAtSnHOrequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UecontextRefAtSnHOrequest) ProtoMessage() {}

func (x *UecontextRefAtSnHOrequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UecontextRefAtSnHOrequest.ProtoReflect.Descriptor instead.
func (*UecontextRefAtSnHOrequest) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_pdu_contents_proto_rawDescGZIP(), []int{7}
}

func (x *UecontextRefAtSnHOrequest) GetGlobalNgRannodeId() *xnap_ies.GlobalNgRAnnodeID {
	if x != nil {
		return x.GlobalNgRannodeId
	}
	return nil
}

func (x *UecontextRefAtSnHOrequest) GetSNNgRannodeUexnApid() *xnap_ies.NgRAnnodeUexnApid {
	if x != nil {
		return x.SNNgRannodeUexnApid
	}
	return nil
}

func (x *UecontextRefAtSnHOrequest) GetIEExtensions() []*UecontextRefAtSnHOrequestExtIes {
	if x != nil {
		return x.IEExtensions
	}
	return nil
}

// value set from xnap_v1.asn1:1017
// {HandoverRequestAcknowledge-IEs&Value}
type HandoverRequestAcknowledgeIEsValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// value set translated as choice from xnap_v1.asn1:1017
	//
	// Types that are assignable to HandoverRequestAcknowledgeIes:
	//	*HandoverRequestAcknowledgeIEsValue_IdSourceNgRannodeUexnApid
	//	*HandoverRequestAcknowledgeIEsValue_IdTargetNgRannodeUexnApid
	//	*HandoverRequestAcknowledgeIEsValue_IdPdusessionResourcesAdmittedList
	//	*HandoverRequestAcknowledgeIEsValue_IdPdusessionResourcesNotAdmittedList
	//	*HandoverRequestAcknowledgeIEsValue_IdTarget2SourceNgRannodeTranspContainer
	//	*HandoverRequestAcknowledgeIEsValue_IdUecontextKeptIndicator
	//	*HandoverRequestAcknowledgeIEsValue_IdCriticalityDiagnostics
	//	*HandoverRequestAcknowledgeIEsValue_IdDrbsTransferredToMn
	//	*HandoverRequestAcknowledgeIEsValue_IdDapsresponseInfoList
	//	*HandoverRequestAcknowledgeIEsValue_IdChoinformationAck
	HandoverRequestAcknowledgeIes isHandoverRequestAcknowledgeIEsValue_HandoverRequestAcknowledgeIes `protobuf_oneof:"handover_request_acknowledge_ies"`
}

func (x *HandoverRequestAcknowledgeIEsValue) Reset() {
	*x = HandoverRequestAcknowledgeIEsValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HandoverRequestAcknowledgeIEsValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HandoverRequestAcknowledgeIEsValue) ProtoMessage() {}

func (x *HandoverRequestAcknowledgeIEsValue) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HandoverRequestAcknowledgeIEsValue.ProtoReflect.Descriptor instead.
func (*HandoverRequestAcknowledgeIEsValue) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_pdu_contents_proto_rawDescGZIP(), []int{8}
}

func (m *HandoverRequestAcknowledgeIEsValue) GetHandoverRequestAcknowledgeIes() isHandoverRequestAcknowledgeIEsValue_HandoverRequestAcknowledgeIes {
	if m != nil {
		return m.HandoverRequestAcknowledgeIes
	}
	return nil
}

func (x *HandoverRequestAcknowledgeIEsValue) GetIdSourceNgRannodeUexnApid() *xnap_ies.NgRAnnodeUexnApid {
	if x, ok := x.GetHandoverRequestAcknowledgeIes().(*HandoverRequestAcknowledgeIEsValue_IdSourceNgRannodeUexnApid); ok {
		return x.IdSourceNgRannodeUexnApid
	}
	return nil
}

func (x *HandoverRequestAcknowledgeIEsValue) GetIdTargetNgRannodeUexnApid() *xnap_ies.NgRAnnodeUexnApid {
	if x, ok := x.GetHandoverRequestAcknowledgeIes().(*HandoverRequestAcknowledgeIEsValue_IdTargetNgRannodeUexnApid); ok {
		return x.IdTargetNgRannodeUexnApid
	}
	return nil
}

func (x *HandoverRequestAcknowledgeIEsValue) GetIdPdusessionResourcesAdmittedList() *xnap_ies.PdusessionResourcesAdmittedList {
	if x, ok := x.GetHandoverRequestAcknowledgeIes().(*HandoverRequestAcknowledgeIEsValue_IdPdusessionResourcesAdmittedList); ok {
		return x.IdPdusessionResourcesAdmittedList
	}
	return nil
}

func (x *HandoverRequestAcknowledgeIEsValue) GetIdPdusessionResourcesNotAdmittedList() *xnap_ies.PdusessionResourcesNotAdmittedList {
	if x, ok := x.GetHandoverRequestAcknowledgeIes().(*HandoverRequestAcknowledgeIEsValue_IdPdusessionResourcesNotAdmittedList); ok {
		return x.IdPdusessionResourcesNotAdmittedList
	}
	return nil
}

func (x *HandoverRequestAcknowledgeIEsValue) GetIdTarget2SourceNgRannodeTranspContainer() string {
	if x, ok := x.GetHandoverRequestAcknowledgeIes().(*HandoverRequestAcknowledgeIEsValue_IdTarget2SourceNgRannodeTranspContainer); ok {
		return x.IdTarget2SourceNgRannodeTranspContainer
	}
	return ""
}

func (x *HandoverRequestAcknowledgeIEsValue) GetIdUecontextKeptIndicator() xnap_ies.UecontextKeptIndicator {
	if x, ok := x.GetHandoverRequestAcknowledgeIes().(*HandoverRequestAcknowledgeIEsValue_IdUecontextKeptIndicator); ok {
		return x.IdUecontextKeptIndicator
	}
	return xnap_ies.UecontextKeptIndicator(0)
}

func (x *HandoverRequestAcknowledgeIEsValue) GetIdCriticalityDiagnostics() *xnap_ies.CriticalityDiagnostics {
	if x, ok := x.GetHandoverRequestAcknowledgeIes().(*HandoverRequestAcknowledgeIEsValue_IdCriticalityDiagnostics); ok {
		return x.IdCriticalityDiagnostics
	}
	return nil
}

func (x *HandoverRequestAcknowledgeIEsValue) GetIdDrbsTransferredToMn() *xnap_ies.DrbList {
	if x, ok := x.GetHandoverRequestAcknowledgeIes().(*HandoverRequestAcknowledgeIEsValue_IdDrbsTransferredToMn); ok {
		return x.IdDrbsTransferredToMn
	}
	return nil
}

func (x *HandoverRequestAcknowledgeIEsValue) GetIdDapsresponseInfoList() *xnap_ies.DapsresponseInfoList {
	if x, ok := x.GetHandoverRequestAcknowledgeIes().(*HandoverRequestAcknowledgeIEsValue_IdDapsresponseInfoList); ok {
		return x.IdDapsresponseInfoList
	}
	return nil
}

func (x *HandoverRequestAcknowledgeIEsValue) GetIdChoinformationAck() *xnap_ies.ChoinformationAck {
	if x, ok := x.GetHandoverRequestAcknowledgeIes().(*HandoverRequestAcknowledgeIEsValue_IdChoinformationAck); ok {
		return x.IdChoinformationAck
	}
	return nil
}

type isHandoverRequestAcknowledgeIEsValue_HandoverRequestAcknowledgeIes interface {
	isHandoverRequestAcknowledgeIEsValue_HandoverRequestAcknowledgeIes()
}

type HandoverRequestAcknowledgeIEsValue_IdSourceNgRannodeUexnApid struct {
	// @inject_tag: aper:"choiceIdx:1,"
	IdSourceNgRannodeUexnApid *xnap_ies.NgRAnnodeUexnApid `protobuf:"bytes,1,opt,name=id_source_ng_rannode_uexn_apid,json=id-sourceNG-RANnodeUEXnAPID,proto3,oneof" aper:"choiceIdx:1,"`
}

type HandoverRequestAcknowledgeIEsValue_IdTargetNgRannodeUexnApid struct {
	// @inject_tag: aper:"choiceIdx:2,"
	IdTargetNgRannodeUexnApid *xnap_ies.NgRAnnodeUexnApid `protobuf:"bytes,2,opt,name=id_target_ng_rannode_uexn_apid,json=id-targetNG-RANnodeUEXnAPID,proto3,oneof" aper:"choiceIdx:2,"`
}

type HandoverRequestAcknowledgeIEsValue_IdPdusessionResourcesAdmittedList struct {
	// @inject_tag: aper:"choiceIdx:3,"
	IdPdusessionResourcesAdmittedList *xnap_ies.PdusessionResourcesAdmittedList `protobuf:"bytes,3,opt,name=id_pdusession_resources_admitted_list,json=id-PDUSessionResourcesAdmitted-List,proto3,oneof" aper:"choiceIdx:3,"`
}

type HandoverRequestAcknowledgeIEsValue_IdPdusessionResourcesNotAdmittedList struct {
	// @inject_tag: aper:"choiceIdx:4,"
	IdPdusessionResourcesNotAdmittedList *xnap_ies.PdusessionResourcesNotAdmittedList `protobuf:"bytes,4,opt,name=id_pdusession_resources_not_admitted_list,json=id-PDUSessionResourcesNotAdmitted-List,proto3,oneof" aper:"choiceIdx:4,"`
}

type HandoverRequestAcknowledgeIEsValue_IdTarget2SourceNgRannodeTranspContainer struct {
	// @inject_tag: aper:"choiceIdx:5,"
	IdTarget2SourceNgRannodeTranspContainer string `protobuf:"bytes,5,opt,name=id_target2_source_ng_rannode_transp_container,json=id-Target2SourceNG-RANnodeTranspContainer,proto3,oneof" aper:"choiceIdx:5,"`
}

type HandoverRequestAcknowledgeIEsValue_IdUecontextKeptIndicator struct {
	// @inject_tag: aper:"choiceIdx:6,valueExt,valueLB:0,valueUB:0,"
	IdUecontextKeptIndicator xnap_ies.UecontextKeptIndicator `protobuf:"varint,6,opt,name=id_uecontext_kept_indicator,json=id-UEContextKeptIndicator,proto3,enum=xnap.v1.UecontextKeptIndicator,oneof" aper:"choiceIdx:6,valueExt,valueLB:0,valueUB:0,"`
}

type HandoverRequestAcknowledgeIEsValue_IdCriticalityDiagnostics struct {
	// @inject_tag: aper:"choiceIdx:7,valueExt,"
	IdCriticalityDiagnostics *xnap_ies.CriticalityDiagnostics `protobuf:"bytes,7,opt,name=id_criticality_diagnostics,json=id-CriticalityDiagnostics,proto3,oneof" aper:"choiceIdx:7,valueExt,"`
}

type HandoverRequestAcknowledgeIEsValue_IdDrbsTransferredToMn struct {
	// @inject_tag: aper:"choiceIdx:8,"
	IdDrbsTransferredToMn *xnap_ies.DrbList `protobuf:"bytes,8,opt,name=id_drbs_transferred_to_mn,json=id-DRBs-transferred-to-MN,proto3,oneof" aper:"choiceIdx:8,"`
}

type HandoverRequestAcknowledgeIEsValue_IdDapsresponseInfoList struct {
	// @inject_tag: aper:"choiceIdx:9,"
	IdDapsresponseInfoList *xnap_ies.DapsresponseInfoList `protobuf:"bytes,9,opt,name=id_dapsresponse_info_list,json=id-DAPSResponseInfo-List,proto3,oneof" aper:"choiceIdx:9,"`
}

type HandoverRequestAcknowledgeIEsValue_IdChoinformationAck struct {
	// @inject_tag: aper:"choiceIdx:10,valueExt,"
	IdChoinformationAck *xnap_ies.ChoinformationAck `protobuf:"bytes,10,opt,name=id_choinformation_ack,json=id-CHOinformation-Ack,proto3,oneof" aper:"choiceIdx:10,valueExt,"`
}

func (*HandoverRequestAcknowledgeIEsValue_IdSourceNgRannodeUexnApid) isHandoverRequestAcknowledgeIEsValue_HandoverRequestAcknowledgeIes() {
}

func (*HandoverRequestAcknowledgeIEsValue_IdTargetNgRannodeUexnApid) isHandoverRequestAcknowledgeIEsValue_HandoverRequestAcknowledgeIes() {
}

func (*HandoverRequestAcknowledgeIEsValue_IdPdusessionResourcesAdmittedList) isHandoverRequestAcknowledgeIEsValue_HandoverRequestAcknowledgeIes() {
}

func (*HandoverRequestAcknowledgeIEsValue_IdPdusessionResourcesNotAdmittedList) isHandoverRequestAcknowledgeIEsValue_HandoverRequestAcknowledgeIes() {
}

func (*HandoverRequestAcknowledgeIEsValue_IdTarget2SourceNgRannodeTranspContainer) isHandoverRequestAcknowledgeIEsValue_HandoverRequestAcknowledgeIes() {
}

func (*HandoverRequestAcknowledgeIEsValue_IdUecontextKeptIndicator) isHandoverRequestAcknowledgeIEsValue_HandoverRequestAcknowledgeIes() {
}

func (*HandoverRequestAcknowledgeIEsValue_IdCriticalityDiagnostics) isHandoverRequestAcknowledgeIEsValue_HandoverRequestAcknowledgeIes() {
}

func (*HandoverRequestAcknowledgeIEsValue_IdDrbsTransferredToMn) isHandoverRequestAcknowledgeIEsValue_HandoverRequestAcknowledgeIes() {
}

func (*HandoverRequestAcknowledgeIEsValue_IdDapsresponseInfoList) isHandoverRequestAcknowledgeIEsValue_HandoverRequestAcknowledgeIes() {
}

func (*HandoverRequestAcknowledgeIEsValue_IdChoinformationAck) isHandoverRequestAcknowledgeIEsValue_HandoverRequestAcknowledgeIes() {
}

// concrete instance(s) of class XNAP-PROTOCOL-IES from xnap_v1.asn1:1017
// @inject_tag: aper:"valueExt"
// {HandoverRequestAcknowledge-IEs}
type HandoverRequestAcknowledgeIEs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"unique,"
	Id *xnap_commondatatypes.ProtocolIeID `protobuf:"bytes,1,opt,name=id,json=&id,proto3" json:"id,omitempty" aper:"unique,"`
	// @inject_tag: aper:"valueLB:0,valueUB:2,"
	Criticality xnap_commondatatypes.Criticality `protobuf:"varint,2,opt,name=criticality,json=&criticality,proto3,enum=xnap.v1.Criticality" json:"criticality,omitempty" aper:"valueLB:0,valueUB:2,"`
	// @inject_tag: aper:"canonicalOrder,"
	Value *HandoverRequestAcknowledgeIEsValue `protobuf:"bytes,3,opt,name=value,json=&Value,proto3" json:"value,omitempty" aper:"canonicalOrder,"`
}

func (x *HandoverRequestAcknowledgeIEs) Reset() {
	*x = HandoverRequestAcknowledgeIEs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HandoverRequestAcknowledgeIEs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HandoverRequestAcknowledgeIEs) ProtoMessage() {}

func (x *HandoverRequestAcknowledgeIEs) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HandoverRequestAcknowledgeIEs.ProtoReflect.Descriptor instead.
func (*HandoverRequestAcknowledgeIEs) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_pdu_contents_proto_rawDescGZIP(), []int{9}
}

func (x *HandoverRequestAcknowledgeIEs) GetId() *xnap_commondatatypes.ProtocolIeID {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *HandoverRequestAcknowledgeIEs) GetCriticality() xnap_commondatatypes.Criticality {
	if x != nil {
		return x.Criticality
	}
	return xnap_commondatatypes.Criticality(0)
}

func (x *HandoverRequestAcknowledgeIEs) GetValue() *HandoverRequestAcknowledgeIEsValue {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:1013
// @inject_tag: aper:"valueExt"
// {HandoverRequestAcknowledge}
type HandoverRequestAcknowledge struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProtocolIes []*HandoverRequestAcknowledgeIEs `protobuf:"bytes,1,rep,name=protocol_ies,json=protocolIEs,proto3" json:"protocol_ies,omitempty"`
}

func (x *HandoverRequestAcknowledge) Reset() {
	*x = HandoverRequestAcknowledge{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HandoverRequestAcknowledge) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HandoverRequestAcknowledge) ProtoMessage() {}

func (x *HandoverRequestAcknowledge) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HandoverRequestAcknowledge.ProtoReflect.Descriptor instead.
func (*HandoverRequestAcknowledge) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_pdu_contents_proto_rawDescGZIP(), []int{10}
}

func (x *HandoverRequestAcknowledge) GetProtocolIes() []*HandoverRequestAcknowledgeIEs {
	if x != nil {
		return x.ProtocolIes
	}
	return nil
}

// value set from xnap_v1.asn1:1042
// {HandoverPreparationFailure-IEs&Value}
type HandoverPreparationFailureIEsValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// value set translated as choice from xnap_v1.asn1:1042
	//
	// Types that are assignable to HandoverPreparationFailureIes:
	//	*HandoverPreparationFailureIEsValue_IdSourceNgRannodeUexnApid
	//	*HandoverPreparationFailureIEsValue_IdCause
	//	*HandoverPreparationFailureIEsValue_IdCriticalityDiagnostics
	//	*HandoverPreparationFailureIEsValue_IdRequestedTargetCellGlobalId
	HandoverPreparationFailureIes isHandoverPreparationFailureIEsValue_HandoverPreparationFailureIes `protobuf_oneof:"handover_preparation_failure_ies"`
}

func (x *HandoverPreparationFailureIEsValue) Reset() {
	*x = HandoverPreparationFailureIEsValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HandoverPreparationFailureIEsValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HandoverPreparationFailureIEsValue) ProtoMessage() {}

func (x *HandoverPreparationFailureIEsValue) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HandoverPreparationFailureIEsValue.ProtoReflect.Descriptor instead.
func (*HandoverPreparationFailureIEsValue) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_pdu_contents_proto_rawDescGZIP(), []int{11}
}

func (m *HandoverPreparationFailureIEsValue) GetHandoverPreparationFailureIes() isHandoverPreparationFailureIEsValue_HandoverPreparationFailureIes {
	if m != nil {
		return m.HandoverPreparationFailureIes
	}
	return nil
}

func (x *HandoverPreparationFailureIEsValue) GetIdSourceNgRannodeUexnApid() *xnap_ies.NgRAnnodeUexnApid {
	if x, ok := x.GetHandoverPreparationFailureIes().(*HandoverPreparationFailureIEsValue_IdSourceNgRannodeUexnApid); ok {
		return x.IdSourceNgRannodeUexnApid
	}
	return nil
}

func (x *HandoverPreparationFailureIEsValue) GetIdCause() *xnap_ies.Cause {
	if x, ok := x.GetHandoverPreparationFailureIes().(*HandoverPreparationFailureIEsValue_IdCause); ok {
		return x.IdCause
	}
	return nil
}

func (x *HandoverPreparationFailureIEsValue) GetIdCriticalityDiagnostics() *xnap_ies.CriticalityDiagnostics {
	if x, ok := x.GetHandoverPreparationFailureIes().(*HandoverPreparationFailureIEsValue_IdCriticalityDiagnostics); ok {
		return x.IdCriticalityDiagnostics
	}
	return nil
}

func (x *HandoverPreparationFailureIEsValue) GetIdRequestedTargetCellGlobalId() *xnap_ies.TargetCGi {
	if x, ok := x.GetHandoverPreparationFailureIes().(*HandoverPreparationFailureIEsValue_IdRequestedTargetCellGlobalId); ok {
		return x.IdRequestedTargetCellGlobalId
	}
	return nil
}

type isHandoverPreparationFailureIEsValue_HandoverPreparationFailureIes interface {
	isHandoverPreparationFailureIEsValue_HandoverPreparationFailureIes()
}

type HandoverPreparationFailureIEsValue_IdSourceNgRannodeUexnApid struct {
	// @inject_tag: aper:"choiceIdx:1,"
	IdSourceNgRannodeUexnApid *xnap_ies.NgRAnnodeUexnApid `protobuf:"bytes,1,opt,name=id_source_ng_rannode_uexn_apid,json=id-sourceNG-RANnodeUEXnAPID,proto3,oneof" aper:"choiceIdx:1,"`
}

type HandoverPreparationFailureIEsValue_IdCause struct {
	// @inject_tag: aper:"choiceIdx:2,"
	IdCause *xnap_ies.Cause `protobuf:"bytes,2,opt,name=id_cause,json=id-Cause,proto3,oneof" aper:"choiceIdx:2,"`
}

type HandoverPreparationFailureIEsValue_IdCriticalityDiagnostics struct {
	// @inject_tag: aper:"choiceIdx:3,valueExt,"
	IdCriticalityDiagnostics *xnap_ies.CriticalityDiagnostics `protobuf:"bytes,3,opt,name=id_criticality_diagnostics,json=id-CriticalityDiagnostics,proto3,oneof" aper:"choiceIdx:3,valueExt,"`
}

type HandoverPreparationFailureIEsValue_IdRequestedTargetCellGlobalId struct {
	// @inject_tag: aper:"choiceIdx:4,"
	IdRequestedTargetCellGlobalId *xnap_ies.TargetCGi `protobuf:"bytes,4,opt,name=id_requested_target_cell_global_id,json=id-requestedTargetCellGlobalID,proto3,oneof" aper:"choiceIdx:4,"`
}

func (*HandoverPreparationFailureIEsValue_IdSourceNgRannodeUexnApid) isHandoverPreparationFailureIEsValue_HandoverPreparationFailureIes() {
}

func (*HandoverPreparationFailureIEsValue_IdCause) isHandoverPreparationFailureIEsValue_HandoverPreparationFailureIes() {
}

func (*HandoverPreparationFailureIEsValue_IdCriticalityDiagnostics) isHandoverPreparationFailureIEsValue_HandoverPreparationFailureIes() {
}

func (*HandoverPreparationFailureIEsValue_IdRequestedTargetCellGlobalId) isHandoverPreparationFailureIEsValue_HandoverPreparationFailureIes() {
}

// concrete instance(s) of class XNAP-PROTOCOL-IES from xnap_v1.asn1:1042
// @inject_tag: aper:"valueExt"
// {HandoverPreparationFailure-IEs}
type HandoverPreparationFailureIEs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"unique,"
	Id *xnap_commondatatypes.ProtocolIeID `protobuf:"bytes,1,opt,name=id,json=&id,proto3" json:"id,omitempty" aper:"unique,"`
	// @inject_tag: aper:"valueLB:0,valueUB:2,"
	Criticality xnap_commondatatypes.Criticality `protobuf:"varint,2,opt,name=criticality,json=&criticality,proto3,enum=xnap.v1.Criticality" json:"criticality,omitempty" aper:"valueLB:0,valueUB:2,"`
	// @inject_tag: aper:"canonicalOrder,"
	Value *HandoverPreparationFailureIEsValue `protobuf:"bytes,3,opt,name=value,json=&Value,proto3" json:"value,omitempty" aper:"canonicalOrder,"`
}

func (x *HandoverPreparationFailureIEs) Reset() {
	*x = HandoverPreparationFailureIEs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HandoverPreparationFailureIEs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HandoverPreparationFailureIEs) ProtoMessage() {}

func (x *HandoverPreparationFailureIEs) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HandoverPreparationFailureIEs.ProtoReflect.Descriptor instead.
func (*HandoverPreparationFailureIEs) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_pdu_contents_proto_rawDescGZIP(), []int{12}
}

func (x *HandoverPreparationFailureIEs) GetId() *xnap_commondatatypes.ProtocolIeID {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *HandoverPreparationFailureIEs) GetCriticality() xnap_commondatatypes.Criticality {
	if x != nil {
		return x.Criticality
	}
	return xnap_commondatatypes.Criticality(0)
}

func (x *HandoverPreparationFailureIEs) GetValue() *HandoverPreparationFailureIEsValue {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:1038
// @inject_tag: aper:"valueExt"
// {HandoverPreparationFailure}
type HandoverPreparationFailure struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProtocolIes []*HandoverPreparationFailureIEs `protobuf:"bytes,1,rep,name=protocol_ies,json=protocolIEs,proto3" json:"protocol_ies,omitempty"`
}

func (x *HandoverPreparationFailure) Reset() {
	*x = HandoverPreparationFailure{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HandoverPreparationFailure) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HandoverPreparationFailure) ProtoMessage() {}

func (x *HandoverPreparationFailure) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HandoverPreparationFailure.ProtoReflect.Descriptor instead.
func (*HandoverPreparationFailure) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_pdu_contents_proto_rawDescGZIP(), []int{13}
}

func (x *HandoverPreparationFailure) GetProtocolIes() []*HandoverPreparationFailureIEs {
	if x != nil {
		return x.ProtocolIes
	}
	return nil
}

// value set from xnap_v1.asn1:1061
// {SNStatusTransfer-IEs&Value}
type SnstatusTransferIEsValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// value set translated as choice from xnap_v1.asn1:1061
	//
	// Types that are assignable to SnstatusTransferIes:
	//	*SnstatusTransferIEsValue_IdSourceNgRannodeUexnApid
	//	*SnstatusTransferIEsValue_IdTargetNgRannodeUexnApid
	//	*SnstatusTransferIEsValue_IdDrbsSubjectToStatusTransferList
	SnstatusTransferIes isSnstatusTransferIEsValue_SnstatusTransferIes `protobuf_oneof:"snstatus_transfer_ies"`
}

func (x *SnstatusTransferIEsValue) Reset() {
	*x = SnstatusTransferIEsValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SnstatusTransferIEsValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SnstatusTransferIEsValue) ProtoMessage() {}

func (x *SnstatusTransferIEsValue) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SnstatusTransferIEsValue.ProtoReflect.Descriptor instead.
func (*SnstatusTransferIEsValue) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_pdu_contents_proto_rawDescGZIP(), []int{14}
}

func (m *SnstatusTransferIEsValue) GetSnstatusTransferIes() isSnstatusTransferIEsValue_SnstatusTransferIes {
	if m != nil {
		return m.SnstatusTransferIes
	}
	return nil
}

func (x *SnstatusTransferIEsValue) GetIdSourceNgRannodeUexnApid() *xnap_ies.NgRAnnodeUexnApid {
	if x, ok := x.GetSnstatusTransferIes().(*SnstatusTransferIEsValue_IdSourceNgRannodeUexnApid); ok {
		return x.IdSourceNgRannodeUexnApid
	}
	return nil
}

func (x *SnstatusTransferIEsValue) GetIdTargetNgRannodeUexnApid() *xnap_ies.NgRAnnodeUexnApid {
	if x, ok := x.GetSnstatusTransferIes().(*SnstatusTransferIEsValue_IdTargetNgRannodeUexnApid); ok {
		return x.IdTargetNgRannodeUexnApid
	}
	return nil
}

func (x *SnstatusTransferIEsValue) GetIdDrbsSubjectToStatusTransferList() *xnap_ies.DrbsSubjectToStatusTransferList {
	if x, ok := x.GetSnstatusTransferIes().(*SnstatusTransferIEsValue_IdDrbsSubjectToStatusTransferList); ok {
		return x.IdDrbsSubjectToStatusTransferList
	}
	return nil
}

type isSnstatusTransferIEsValue_SnstatusTransferIes interface {
	isSnstatusTransferIEsValue_SnstatusTransferIes()
}

type SnstatusTransferIEsValue_IdSourceNgRannodeUexnApid struct {
	// @inject_tag: aper:"choiceIdx:1,"
	IdSourceNgRannodeUexnApid *xnap_ies.NgRAnnodeUexnApid `protobuf:"bytes,1,opt,name=id_source_ng_rannode_uexn_apid,json=id-sourceNG-RANnodeUEXnAPID,proto3,oneof" aper:"choiceIdx:1,"`
}

type SnstatusTransferIEsValue_IdTargetNgRannodeUexnApid struct {
	// @inject_tag: aper:"choiceIdx:2,"
	IdTargetNgRannodeUexnApid *xnap_ies.NgRAnnodeUexnApid `protobuf:"bytes,2,opt,name=id_target_ng_rannode_uexn_apid,json=id-targetNG-RANnodeUEXnAPID,proto3,oneof" aper:"choiceIdx:2,"`
}

type SnstatusTransferIEsValue_IdDrbsSubjectToStatusTransferList struct {
	// @inject_tag: aper:"choiceIdx:3,"
	IdDrbsSubjectToStatusTransferList *xnap_ies.DrbsSubjectToStatusTransferList `protobuf:"bytes,3,opt,name=id_drbs_subject_to_status_transfer_list,json=id-DRBsSubjectToStatusTransfer-List,proto3,oneof" aper:"choiceIdx:3,"`
}

func (*SnstatusTransferIEsValue_IdSourceNgRannodeUexnApid) isSnstatusTransferIEsValue_SnstatusTransferIes() {
}

func (*SnstatusTransferIEsValue_IdTargetNgRannodeUexnApid) isSnstatusTransferIEsValue_SnstatusTransferIes() {
}

func (*SnstatusTransferIEsValue_IdDrbsSubjectToStatusTransferList) isSnstatusTransferIEsValue_SnstatusTransferIes() {
}

// concrete instance(s) of class XNAP-PROTOCOL-IES from xnap_v1.asn1:1061
// @inject_tag: aper:"valueExt"
// {SNStatusTransfer-IEs}
type SnstatusTransferIEs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"unique,"
	Id *xnap_commondatatypes.ProtocolIeID `protobuf:"bytes,1,opt,name=id,json=&id,proto3" json:"id,omitempty" aper:"unique,"`
	// @inject_tag: aper:"valueLB:0,valueUB:2,"
	Criticality xnap_commondatatypes.Criticality `protobuf:"varint,2,opt,name=criticality,json=&criticality,proto3,enum=xnap.v1.Criticality" json:"criticality,omitempty" aper:"valueLB:0,valueUB:2,"`
	// @inject_tag: aper:"canonicalOrder,"
	Value *SnstatusTransferIEsValue `protobuf:"bytes,3,opt,name=value,json=&Value,proto3" json:"value,omitempty" aper:"canonicalOrder,"`
}

func (x *SnstatusTransferIEs) Reset() {
	*x = SnstatusTransferIEs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SnstatusTransferIEs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SnstatusTransferIEs) ProtoMessage() {}

func (x *SnstatusTransferIEs) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SnstatusTransferIEs.ProtoReflect.Descriptor instead.
func (*SnstatusTransferIEs) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_pdu_contents_proto_rawDescGZIP(), []int{15}
}

func (x *SnstatusTransferIEs) GetId() *xnap_commondatatypes.ProtocolIeID {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *SnstatusTransferIEs) GetCriticality() xnap_commondatatypes.Criticality {
	if x != nil {
		return x.Criticality
	}
	return xnap_commondatatypes.Criticality(0)
}

func (x *SnstatusTransferIEs) GetValue() *SnstatusTransferIEsValue {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:1057
// @inject_tag: aper:"valueExt"
// {SNStatusTransfer}
type SnstatusTransfer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProtocolIes []*SnstatusTransferIEs `protobuf:"bytes,1,rep,name=protocol_ies,json=protocolIEs,proto3" json:"protocol_ies,omitempty"`
}

func (x *SnstatusTransfer) Reset() {
	*x = SnstatusTransfer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SnstatusTransfer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SnstatusTransfer) ProtoMessage() {}

func (x *SnstatusTransfer) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SnstatusTransfer.ProtoReflect.Descriptor instead.
func (*SnstatusTransfer) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_pdu_contents_proto_rawDescGZIP(), []int{16}
}

func (x *SnstatusTransfer) GetProtocolIes() []*SnstatusTransferIEs {
	if x != nil {
		return x.ProtocolIes
	}
	return nil
}

// value set from xnap_v1.asn1:1079
// {UEContextRelease-IEs&Value}
type UecontextReleaseIEsValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// value set translated as choice from xnap_v1.asn1:1079
	//
	// Types that are assignable to UecontextReleaseIes:
	//	*UecontextReleaseIEsValue_IdSourceNgRannodeUexnApid
	//	*UecontextReleaseIEsValue_IdTargetNgRannodeUexnApid
	UecontextReleaseIes isUecontextReleaseIEsValue_UecontextReleaseIes `protobuf_oneof:"uecontext_release_ies"`
}

func (x *UecontextReleaseIEsValue) Reset() {
	*x = UecontextReleaseIEsValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UecontextReleaseIEsValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UecontextReleaseIEsValue) ProtoMessage() {}

func (x *UecontextReleaseIEsValue) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UecontextReleaseIEsValue.ProtoReflect.Descriptor instead.
func (*UecontextReleaseIEsValue) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_pdu_contents_proto_rawDescGZIP(), []int{17}
}

func (m *UecontextReleaseIEsValue) GetUecontextReleaseIes() isUecontextReleaseIEsValue_UecontextReleaseIes {
	if m != nil {
		return m.UecontextReleaseIes
	}
	return nil
}

func (x *UecontextReleaseIEsValue) GetIdSourceNgRannodeUexnApid() *xnap_ies.NgRAnnodeUexnApid {
	if x, ok := x.GetUecontextReleaseIes().(*UecontextReleaseIEsValue_IdSourceNgRannodeUexnApid); ok {
		return x.IdSourceNgRannodeUexnApid
	}
	return nil
}

func (x *UecontextReleaseIEsValue) GetIdTargetNgRannodeUexnApid() *xnap_ies.NgRAnnodeUexnApid {
	if x, ok := x.GetUecontextReleaseIes().(*UecontextReleaseIEsValue_IdTargetNgRannodeUexnApid); ok {
		return x.IdTargetNgRannodeUexnApid
	}
	return nil
}

type isUecontextReleaseIEsValue_UecontextReleaseIes interface {
	isUecontextReleaseIEsValue_UecontextReleaseIes()
}

type UecontextReleaseIEsValue_IdSourceNgRannodeUexnApid struct {
	// @inject_tag: aper:"choiceIdx:1,"
	IdSourceNgRannodeUexnApid *xnap_ies.NgRAnnodeUexnApid `protobuf:"bytes,1,opt,name=id_source_ng_rannode_uexn_apid,json=id-sourceNG-RANnodeUEXnAPID,proto3,oneof" aper:"choiceIdx:1,"`
}

type UecontextReleaseIEsValue_IdTargetNgRannodeUexnApid struct {
	// @inject_tag: aper:"choiceIdx:2,"
	IdTargetNgRannodeUexnApid *xnap_ies.NgRAnnodeUexnApid `protobuf:"bytes,2,opt,name=id_target_ng_rannode_uexn_apid,json=id-targetNG-RANnodeUEXnAPID,proto3,oneof" aper:"choiceIdx:2,"`
}

func (*UecontextReleaseIEsValue_IdSourceNgRannodeUexnApid) isUecontextReleaseIEsValue_UecontextReleaseIes() {
}

func (*UecontextReleaseIEsValue_IdTargetNgRannodeUexnApid) isUecontextReleaseIEsValue_UecontextReleaseIes() {
}

// concrete instance(s) of class XNAP-PROTOCOL-IES from xnap_v1.asn1:1079
// @inject_tag: aper:"valueExt"
// {UEContextRelease-IEs}
type UecontextReleaseIEs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"unique,"
	Id *xnap_commondatatypes.ProtocolIeID `protobuf:"bytes,1,opt,name=id,json=&id,proto3" json:"id,omitempty" aper:"unique,"`
	// @inject_tag: aper:"valueLB:0,valueUB:2,"
	Criticality xnap_commondatatypes.Criticality `protobuf:"varint,2,opt,name=criticality,json=&criticality,proto3,enum=xnap.v1.Criticality" json:"criticality,omitempty" aper:"valueLB:0,valueUB:2,"`
	// @inject_tag: aper:"canonicalOrder,"
	Value *UecontextReleaseIEsValue `protobuf:"bytes,3,opt,name=value,json=&Value,proto3" json:"value,omitempty" aper:"canonicalOrder,"`
}

func (x *UecontextReleaseIEs) Reset() {
	*x = UecontextReleaseIEs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UecontextReleaseIEs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UecontextReleaseIEs) ProtoMessage() {}

func (x *UecontextReleaseIEs) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UecontextReleaseIEs.ProtoReflect.Descriptor instead.
func (*UecontextReleaseIEs) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_pdu_contents_proto_rawDescGZIP(), []int{18}
}

func (x *UecontextReleaseIEs) GetId() *xnap_commondatatypes.ProtocolIeID {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *UecontextReleaseIEs) GetCriticality() xnap_commondatatypes.Criticality {
	if x != nil {
		return x.Criticality
	}
	return xnap_commondatatypes.Criticality(0)
}

func (x *UecontextReleaseIEs) GetValue() *UecontextReleaseIEsValue {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:1075
// @inject_tag: aper:"valueExt"
// {UEContextRelease}
type UecontextRelease struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProtocolIes []*UecontextReleaseIEs `protobuf:"bytes,1,rep,name=protocol_ies,json=protocolIEs,proto3" json:"protocol_ies,omitempty"`
}

func (x *UecontextRelease) Reset() {
	*x = UecontextRelease{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UecontextRelease) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UecontextRelease) ProtoMessage() {}

func (x *UecontextRelease) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UecontextRelease.ProtoReflect.Descriptor instead.
func (*UecontextRelease) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_pdu_contents_proto_rawDescGZIP(), []int{19}
}

func (x *UecontextRelease) GetProtocolIes() []*UecontextReleaseIEs {
	if x != nil {
		return x.ProtocolIes
	}
	return nil
}

// value set from xnap_v1.asn1:1096
// {HandoverCancel-IEs&Value}
type HandoverCancelIEsValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// value set translated as choice from xnap_v1.asn1:1096
	//
	// Types that are assignable to HandoverCancelIes:
	//	*HandoverCancelIEsValue_IdSourceNgRannodeUexnApid
	//	*HandoverCancelIEsValue_IdTargetNgRannodeUexnApid
	//	*HandoverCancelIEsValue_IdCause
	//	*HandoverCancelIEsValue_IdTargetCellsToCancel
	HandoverCancelIes isHandoverCancelIEsValue_HandoverCancelIes `protobuf_oneof:"handover_cancel_ies"`
}

func (x *HandoverCancelIEsValue) Reset() {
	*x = HandoverCancelIEsValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HandoverCancelIEsValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HandoverCancelIEsValue) ProtoMessage() {}

func (x *HandoverCancelIEsValue) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HandoverCancelIEsValue.ProtoReflect.Descriptor instead.
func (*HandoverCancelIEsValue) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_pdu_contents_proto_rawDescGZIP(), []int{20}
}

func (m *HandoverCancelIEsValue) GetHandoverCancelIes() isHandoverCancelIEsValue_HandoverCancelIes {
	if m != nil {
		return m.HandoverCancelIes
	}
	return nil
}

func (x *HandoverCancelIEsValue) GetIdSourceNgRannodeUexnApid() *xnap_ies.NgRAnnodeUexnApid {
	if x, ok := x.GetHandoverCancelIes().(*HandoverCancelIEsValue_IdSourceNgRannodeUexnApid); ok {
		return x.IdSourceNgRannodeUexnApid
	}
	return nil
}

func (x *HandoverCancelIEsValue) GetIdTargetNgRannodeUexnApid() *xnap_ies.NgRAnnodeUexnApid {
	if x, ok := x.GetHandoverCancelIes().(*HandoverCancelIEsValue_IdTargetNgRannodeUexnApid); ok {
		return x.IdTargetNgRannodeUexnApid
	}
	return nil
}

func (x *HandoverCancelIEsValue) GetIdCause() *xnap_ies.Cause {
	if x, ok := x.GetHandoverCancelIes().(*HandoverCancelIEsValue_IdCause); ok {
		return x.IdCause
	}
	return nil
}

func (x *HandoverCancelIEsValue) GetIdTargetCellsToCancel() *xnap_ies.TargetCellList {
	if x, ok := x.GetHandoverCancelIes().(*HandoverCancelIEsValue_IdTargetCellsToCancel); ok {
		return x.IdTargetCellsToCancel
	}
	return nil
}

type isHandoverCancelIEsValue_HandoverCancelIes interface {
	isHandoverCancelIEsValue_HandoverCancelIes()
}

type HandoverCancelIEsValue_IdSourceNgRannodeUexnApid struct {
	// @inject_tag: aper:"choiceIdx:1,"
	IdSourceNgRannodeUexnApid *xnap_ies.NgRAnnodeUexnApid `protobuf:"bytes,1,opt,name=id_source_ng_rannode_uexn_apid,json=id-sourceNG-RANnodeUEXnAPID,proto3,oneof" aper:"choiceIdx:1,"`
}

type HandoverCancelIEsValue_IdTargetNgRannodeUexnApid struct {
	// @inject_tag: aper:"choiceIdx:2,"
	IdTargetNgRannodeUexnApid *xnap_ies.NgRAnnodeUexnApid `protobuf:"bytes,2,opt,name=id_target_ng_rannode_uexn_apid,json=id-targetNG-RANnodeUEXnAPID,proto3,oneof" aper:"choiceIdx:2,"`
}

type HandoverCancelIEsValue_IdCause struct {
	// @inject_tag: aper:"choiceIdx:3,"
	IdCause *xnap_ies.Cause `protobuf:"bytes,3,opt,name=id_cause,json=id-Cause,proto3,oneof" aper:"choiceIdx:3,"`
}

type HandoverCancelIEsValue_IdTargetCellsToCancel struct {
	// @inject_tag: aper:"choiceIdx:4,"
	IdTargetCellsToCancel *xnap_ies.TargetCellList `protobuf:"bytes,4,opt,name=id_target_cells_to_cancel,json=id-targetCellsToCancel,proto3,oneof" aper:"choiceIdx:4,"`
}

func (*HandoverCancelIEsValue_IdSourceNgRannodeUexnApid) isHandoverCancelIEsValue_HandoverCancelIes() {
}

func (*HandoverCancelIEsValue_IdTargetNgRannodeUexnApid) isHandoverCancelIEsValue_HandoverCancelIes() {
}

func (*HandoverCancelIEsValue_IdCause) isHandoverCancelIEsValue_HandoverCancelIes() {}

func (*HandoverCancelIEsValue_IdTargetCellsToCancel) isHandoverCancelIEsValue_HandoverCancelIes() {}

// concrete instance(s) of class XNAP-PROTOCOL-IES from xnap_v1.asn1:1096
// @inject_tag: aper:"valueExt"
// {HandoverCancel-IEs}
type HandoverCancelIEs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"unique,"
	Id *xnap_commondatatypes.ProtocolIeID `protobuf:"bytes,1,opt,name=id,json=&id,proto3" json:"id,omitempty" aper:"unique,"`
	// @inject_tag: aper:"valueLB:0,valueUB:2,"
	Criticality xnap_commondatatypes.Criticality `protobuf:"varint,2,opt,name=criticality,json=&criticality,proto3,enum=xnap.v1.Criticality" json:"criticality,omitempty" aper:"valueLB:0,valueUB:2,"`
	// @inject_tag: aper:"canonicalOrder,"
	Value *HandoverCancelIEsValue `protobuf:"bytes,3,opt,name=value,json=&Value,proto3" json:"value,omitempty" aper:"canonicalOrder,"`
}

func (x *HandoverCancelIEs) Reset() {
	*x = HandoverCancelIEs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HandoverCancelIEs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HandoverCancelIEs) ProtoMessage() {}

func (x *HandoverCancelIEs) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HandoverCancelIEs.ProtoReflect.Descriptor instead.
func (*HandoverCancelIEs) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_pdu_contents_proto_rawDescGZIP(), []int{21}
}

func (x *HandoverCancelIEs) GetId() *xnap_commondatatypes.ProtocolIeID {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *HandoverCancelIEs) GetCriticality() xnap_commondatatypes.Criticality {
	if x != nil {
		return x.Criticality
	}
	return xnap_commondatatypes.Criticality(0)
}

func (x *HandoverCancelIEs) GetValue() *HandoverCancelIEsValue {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:1092
// @inject_tag: aper:"valueExt"
// {HandoverCancel}
type HandoverCancel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProtocolIes []*HandoverCancelIEs `protobuf:"bytes,1,rep,name=protocol_ies,json=protocolIEs,proto3" json:"protocol_ies,omitempty"`
}

func (x *HandoverCancel) Reset() {
	*x = HandoverCancel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HandoverCancel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HandoverCancel) ProtoMessage() {}

func (x *HandoverCancel) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HandoverCancel.ProtoReflect.Descriptor instead.
func (*HandoverCancel) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_pdu_contents_proto_rawDescGZIP(), []int{22}
}

func (x *HandoverCancel) GetProtocolIes() []*HandoverCancelIEs {
	if x != nil {
		return x.ProtocolIes
	}
	return nil
}

// value set from xnap_v1.asn1:1115
// {HandoverSuccess-IEs&Value}
type HandoverSuccessIEsValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// value set translated as choice from xnap_v1.asn1:1115
	//
	// Types that are assignable to HandoverSuccessIes:
	//	*HandoverSuccessIEsValue_IdSourceNgRannodeUexnApid
	//	*HandoverSuccessIEsValue_IdTargetNgRannodeUexnApid
	//	*HandoverSuccessIEsValue_IdRequestedTargetCellGlobalId
	HandoverSuccessIes isHandoverSuccessIEsValue_HandoverSuccessIes `protobuf_oneof:"handover_success_ies"`
}

func (x *HandoverSuccessIEsValue) Reset() {
	*x = HandoverSuccessIEsValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HandoverSuccessIEsValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HandoverSuccessIEsValue) ProtoMessage() {}

func (x *HandoverSuccessIEsValue) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HandoverSuccessIEsValue.ProtoReflect.Descriptor instead.
func (*HandoverSuccessIEsValue) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_pdu_contents_proto_rawDescGZIP(), []int{23}
}

func (m *HandoverSuccessIEsValue) GetHandoverSuccessIes() isHandoverSuccessIEsValue_HandoverSuccessIes {
	if m != nil {
		return m.HandoverSuccessIes
	}
	return nil
}

func (x *HandoverSuccessIEsValue) GetIdSourceNgRannodeUexnApid() *xnap_ies.NgRAnnodeUexnApid {
	if x, ok := x.GetHandoverSuccessIes().(*HandoverSuccessIEsValue_IdSourceNgRannodeUexnApid); ok {
		return x.IdSourceNgRannodeUexnApid
	}
	return nil
}

func (x *HandoverSuccessIEsValue) GetIdTargetNgRannodeUexnApid() *xnap_ies.NgRAnnodeUexnApid {
	if x, ok := x.GetHandoverSuccessIes().(*HandoverSuccessIEsValue_IdTargetNgRannodeUexnApid); ok {
		return x.IdTargetNgRannodeUexnApid
	}
	return nil
}

func (x *HandoverSuccessIEsValue) GetIdRequestedTargetCellGlobalId() *xnap_ies.TargetCGi {
	if x, ok := x.GetHandoverSuccessIes().(*HandoverSuccessIEsValue_IdRequestedTargetCellGlobalId); ok {
		return x.IdRequestedTargetCellGlobalId
	}
	return nil
}

type isHandoverSuccessIEsValue_HandoverSuccessIes interface {
	isHandoverSuccessIEsValue_HandoverSuccessIes()
}

type HandoverSuccessIEsValue_IdSourceNgRannodeUexnApid struct {
	// @inject_tag: aper:"choiceIdx:1,"
	IdSourceNgRannodeUexnApid *xnap_ies.NgRAnnodeUexnApid `protobuf:"bytes,1,opt,name=id_source_ng_rannode_uexn_apid,json=id-sourceNG-RANnodeUEXnAPID,proto3,oneof" aper:"choiceIdx:1,"`
}

type HandoverSuccessIEsValue_IdTargetNgRannodeUexnApid struct {
	// @inject_tag: aper:"choiceIdx:2,"
	IdTargetNgRannodeUexnApid *xnap_ies.NgRAnnodeUexnApid `protobuf:"bytes,2,opt,name=id_target_ng_rannode_uexn_apid,json=id-targetNG-RANnodeUEXnAPID,proto3,oneof" aper:"choiceIdx:2,"`
}

type HandoverSuccessIEsValue_IdRequestedTargetCellGlobalId struct {
	// @inject_tag: aper:"choiceIdx:3,"
	IdRequestedTargetCellGlobalId *xnap_ies.TargetCGi `protobuf:"bytes,3,opt,name=id_requested_target_cell_global_id,json=id-requestedTargetCellGlobalID,proto3,oneof" aper:"choiceIdx:3,"`
}

func (*HandoverSuccessIEsValue_IdSourceNgRannodeUexnApid) isHandoverSuccessIEsValue_HandoverSuccessIes() {
}

func (*HandoverSuccessIEsValue_IdTargetNgRannodeUexnApid) isHandoverSuccessIEsValue_HandoverSuccessIes() {
}

func (*HandoverSuccessIEsValue_IdRequestedTargetCellGlobalId) isHandoverSuccessIEsValue_HandoverSuccessIes() {
}

// concrete instance(s) of class XNAP-PROTOCOL-IES from xnap_v1.asn1:1115
// @inject_tag: aper:"valueExt"
// {HandoverSuccess-IEs}
type HandoverSuccessIEs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"unique,"
	Id *xnap_commondatatypes.ProtocolIeID `protobuf:"bytes,1,opt,name=id,json=&id,proto3" json:"id,omitempty" aper:"unique,"`
	// @inject_tag: aper:"valueLB:0,valueUB:2,"
	Criticality xnap_commondatatypes.Criticality `protobuf:"varint,2,opt,name=criticality,json=&criticality,proto3,enum=xnap.v1.Criticality" json:"criticality,omitempty" aper:"valueLB:0,valueUB:2,"`
	// @inject_tag: aper:"canonicalOrder,"
	Value *HandoverSuccessIEsValue `protobuf:"bytes,3,opt,name=value,json=&Value,proto3" json:"value,omitempty" aper:"canonicalOrder,"`
}

func (x *HandoverSuccessIEs) Reset() {
	*x = HandoverSuccessIEs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HandoverSuccessIEs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HandoverSuccessIEs) ProtoMessage() {}

func (x *HandoverSuccessIEs) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HandoverSuccessIEs.ProtoReflect.Descriptor instead.
func (*HandoverSuccessIEs) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_pdu_contents_proto_rawDescGZIP(), []int{24}
}

func (x *HandoverSuccessIEs) GetId() *xnap_commondatatypes.ProtocolIeID {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *HandoverSuccessIEs) GetCriticality() xnap_commondatatypes.Criticality {
	if x != nil {
		return x.Criticality
	}
	return xnap_commondatatypes.Criticality(0)
}

func (x *HandoverSuccessIEs) GetValue() *HandoverSuccessIEsValue {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:1111
// @inject_tag: aper:"valueExt"
// {HandoverSuccess}
type HandoverSuccess struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProtocolIes []*HandoverSuccessIEs `protobuf:"bytes,1,rep,name=protocol_ies,json=protocolIEs,proto3" json:"protocol_ies,omitempty"`
}

func (x *HandoverSuccess) Reset() {
	*x = HandoverSuccess{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HandoverSuccess) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HandoverSuccess) ProtoMessage() {}

func (x *HandoverSuccess) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HandoverSuccess.ProtoReflect.Descriptor instead.
func (*HandoverSuccess) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_pdu_contents_proto_rawDescGZIP(), []int{25}
}

func (x *HandoverSuccess) GetProtocolIes() []*HandoverSuccessIEs {
	if x != nil {
		return x.ProtocolIes
	}
	return nil
}

// value set from xnap_v1.asn1:1133
// {ConditionalHandoverCancel-IEs&Value}
type ConditionalHandoverCancelIEsValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// value set translated as choice from xnap_v1.asn1:1133
	//
	// Types that are assignable to ConditionalHandoverCancelIes:
	//	*ConditionalHandoverCancelIEsValue_IdSourceNgRannodeUexnApid
	//	*ConditionalHandoverCancelIEsValue_IdTargetNgRannodeUexnApid
	//	*ConditionalHandoverCancelIEsValue_IdCause
	//	*ConditionalHandoverCancelIEsValue_IdTargetCellsToCancel
	ConditionalHandoverCancelIes isConditionalHandoverCancelIEsValue_ConditionalHandoverCancelIes `protobuf_oneof:"conditional_handover_cancel_ies"`
}

func (x *ConditionalHandoverCancelIEsValue) Reset() {
	*x = ConditionalHandoverCancelIEsValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConditionalHandoverCancelIEsValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConditionalHandoverCancelIEsValue) ProtoMessage() {}

func (x *ConditionalHandoverCancelIEsValue) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConditionalHandoverCancelIEsValue.ProtoReflect.Descriptor instead.
func (*ConditionalHandoverCancelIEsValue) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_pdu_contents_proto_rawDescGZIP(), []int{26}
}

func (m *ConditionalHandoverCancelIEsValue) GetConditionalHandoverCancelIes() isConditionalHandoverCancelIEsValue_ConditionalHandoverCancelIes {
	if m != nil {
		return m.ConditionalHandoverCancelIes
	}
	return nil
}

func (x *ConditionalHandoverCancelIEsValue) GetIdSourceNgRannodeUexnApid() *xnap_ies.NgRAnnodeUexnApid {
	if x, ok := x.GetConditionalHandoverCancelIes().(*ConditionalHandoverCancelIEsValue_IdSourceNgRannodeUexnApid); ok {
		return x.IdSourceNgRannodeUexnApid
	}
	return nil
}

func (x *ConditionalHandoverCancelIEsValue) GetIdTargetNgRannodeUexnApid() *xnap_ies.NgRAnnodeUexnApid {
	if x, ok := x.GetConditionalHandoverCancelIes().(*ConditionalHandoverCancelIEsValue_IdTargetNgRannodeUexnApid); ok {
		return x.IdTargetNgRannodeUexnApid
	}
	return nil
}

func (x *ConditionalHandoverCancelIEsValue) GetIdCause() *xnap_ies.Cause {
	if x, ok := x.GetConditionalHandoverCancelIes().(*ConditionalHandoverCancelIEsValue_IdCause); ok {
		return x.IdCause
	}
	return nil
}

func (x *ConditionalHandoverCancelIEsValue) GetIdTargetCellsToCancel() *xnap_ies.TargetCellList {
	if x, ok := x.GetConditionalHandoverCancelIes().(*ConditionalHandoverCancelIEsValue_IdTargetCellsToCancel); ok {
		return x.IdTargetCellsToCancel
	}
	return nil
}

type isConditionalHandoverCancelIEsValue_ConditionalHandoverCancelIes interface {
	isConditionalHandoverCancelIEsValue_ConditionalHandoverCancelIes()
}

type ConditionalHandoverCancelIEsValue_IdSourceNgRannodeUexnApid struct {
	// @inject_tag: aper:"choiceIdx:1,"
	IdSourceNgRannodeUexnApid *xnap_ies.NgRAnnodeUexnApid `protobuf:"bytes,1,opt,name=id_source_ng_rannode_uexn_apid,json=id-sourceNG-RANnodeUEXnAPID,proto3,oneof" aper:"choiceIdx:1,"`
}

type ConditionalHandoverCancelIEsValue_IdTargetNgRannodeUexnApid struct {
	// @inject_tag: aper:"choiceIdx:2,"
	IdTargetNgRannodeUexnApid *xnap_ies.NgRAnnodeUexnApid `protobuf:"bytes,2,opt,name=id_target_ng_rannode_uexn_apid,json=id-targetNG-RANnodeUEXnAPID,proto3,oneof" aper:"choiceIdx:2,"`
}

type ConditionalHandoverCancelIEsValue_IdCause struct {
	// @inject_tag: aper:"choiceIdx:3,"
	IdCause *xnap_ies.Cause `protobuf:"bytes,3,opt,name=id_cause,json=id-Cause,proto3,oneof" aper:"choiceIdx:3,"`
}

type ConditionalHandoverCancelIEsValue_IdTargetCellsToCancel struct {
	// @inject_tag: aper:"choiceIdx:4,"
	IdTargetCellsToCancel *xnap_ies.TargetCellList `protobuf:"bytes,4,opt,name=id_target_cells_to_cancel,json=id-targetCellsToCancel,proto3,oneof" aper:"choiceIdx:4,"`
}

func (*ConditionalHandoverCancelIEsValue_IdSourceNgRannodeUexnApid) isConditionalHandoverCancelIEsValue_ConditionalHandoverCancelIes() {
}

func (*ConditionalHandoverCancelIEsValue_IdTargetNgRannodeUexnApid) isConditionalHandoverCancelIEsValue_ConditionalHandoverCancelIes() {
}

func (*ConditionalHandoverCancelIEsValue_IdCause) isConditionalHandoverCancelIEsValue_ConditionalHandoverCancelIes() {
}

func (*ConditionalHandoverCancelIEsValue_IdTargetCellsToCancel) isConditionalHandoverCancelIEsValue_ConditionalHandoverCancelIes() {
}

// concrete instance(s) of class XNAP-PROTOCOL-IES from xnap_v1.asn1:1133
// @inject_tag: aper:"valueExt"
// {ConditionalHandoverCancel-IEs}
type ConditionalHandoverCancelIEs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"unique,"
	Id *xnap_commondatatypes.ProtocolIeID `protobuf:"bytes,1,opt,name=id,json=&id,proto3" json:"id,omitempty" aper:"unique,"`
	// @inject_tag: aper:"valueLB:0,valueUB:2,"
	Criticality xnap_commondatatypes.Criticality `protobuf:"varint,2,opt,name=criticality,json=&criticality,proto3,enum=xnap.v1.Criticality" json:"criticality,omitempty" aper:"valueLB:0,valueUB:2,"`
	// @inject_tag: aper:"canonicalOrder,"
	Value *ConditionalHandoverCancelIEsValue `protobuf:"bytes,3,opt,name=value,json=&Value,proto3" json:"value,omitempty" aper:"canonicalOrder,"`
}

func (x *ConditionalHandoverCancelIEs) Reset() {
	*x = ConditionalHandoverCancelIEs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConditionalHandoverCancelIEs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConditionalHandoverCancelIEs) ProtoMessage() {}

func (x *ConditionalHandoverCancelIEs) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConditionalHandoverCancelIEs.ProtoReflect.Descriptor instead.
func (*ConditionalHandoverCancelIEs) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_pdu_contents_proto_rawDescGZIP(), []int{27}
}

func (x *ConditionalHandoverCancelIEs) GetId() *xnap_commondatatypes.ProtocolIeID {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ConditionalHandoverCancelIEs) GetCriticality() xnap_commondatatypes.Criticality {
	if x != nil {
		return x.Criticality
	}
	return xnap_commondatatypes.Criticality(0)
}

func (x *ConditionalHandoverCancelIEs) GetValue() *ConditionalHandoverCancelIEsValue {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:1129
// @inject_tag: aper:"valueExt"
// {ConditionalHandoverCancel}
type ConditionalHandoverCancel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProtocolIes []*ConditionalHandoverCancelIEs `protobuf:"bytes,1,rep,name=protocol_ies,json=protocolIEs,proto3" json:"protocol_ies,omitempty"`
}

func (x *ConditionalHandoverCancel) Reset() {
	*x = ConditionalHandoverCancel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConditionalHandoverCancel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConditionalHandoverCancel) ProtoMessage() {}

func (x *ConditionalHandoverCancel) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConditionalHandoverCancel.ProtoReflect.Descriptor instead.
func (*ConditionalHandoverCancel) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_pdu_contents_proto_rawDescGZIP(), []int{28}
}

func (x *ConditionalHandoverCancel) GetProtocolIes() []*ConditionalHandoverCancelIEs {
	if x != nil {
		return x.ProtocolIes
	}
	return nil
}

// value set from xnap_v1.asn1:1152
// {EarlyStatusTransfer-IEs&Value}
type EarlyStatusTransferIEsValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// value set translated as choice from xnap_v1.asn1:1152
	//
	// Types that are assignable to EarlyStatusTransferIes:
	//	*EarlyStatusTransferIEsValue_IdSourceNgRannodeUexnApid
	//	*EarlyStatusTransferIEsValue_IdTargetNgRannodeUexnApid
	//	*EarlyStatusTransferIEsValue_IdProcedureStage
	EarlyStatusTransferIes isEarlyStatusTransferIEsValue_EarlyStatusTransferIes `protobuf_oneof:"early_status_transfer_ies"`
}

func (x *EarlyStatusTransferIEsValue) Reset() {
	*x = EarlyStatusTransferIEsValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EarlyStatusTransferIEsValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EarlyStatusTransferIEsValue) ProtoMessage() {}

func (x *EarlyStatusTransferIEsValue) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EarlyStatusTransferIEsValue.ProtoReflect.Descriptor instead.
func (*EarlyStatusTransferIEsValue) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_pdu_contents_proto_rawDescGZIP(), []int{29}
}

func (m *EarlyStatusTransferIEsValue) GetEarlyStatusTransferIes() isEarlyStatusTransferIEsValue_EarlyStatusTransferIes {
	if m != nil {
		return m.EarlyStatusTransferIes
	}
	return nil
}

func (x *EarlyStatusTransferIEsValue) GetIdSourceNgRannodeUexnApid() *xnap_ies.NgRAnnodeUexnApid {
	if x, ok := x.GetEarlyStatusTransferIes().(*EarlyStatusTransferIEsValue_IdSourceNgRannodeUexnApid); ok {
		return x.IdSourceNgRannodeUexnApid
	}
	return nil
}

func (x *EarlyStatusTransferIEsValue) GetIdTargetNgRannodeUexnApid() *xnap_ies.NgRAnnodeUexnApid {
	if x, ok := x.GetEarlyStatusTransferIes().(*EarlyStatusTransferIEsValue_IdTargetNgRannodeUexnApid); ok {
		return x.IdTargetNgRannodeUexnApid
	}
	return nil
}

func (x *EarlyStatusTransferIEsValue) GetIdProcedureStage() *ProcedureStageChoice {
	if x, ok := x.GetEarlyStatusTransferIes().(*EarlyStatusTransferIEsValue_IdProcedureStage); ok {
		return x.IdProcedureStage
	}
	return nil
}

type isEarlyStatusTransferIEsValue_EarlyStatusTransferIes interface {
	isEarlyStatusTransferIEsValue_EarlyStatusTransferIes()
}

type EarlyStatusTransferIEsValue_IdSourceNgRannodeUexnApid struct {
	// @inject_tag: aper:"choiceIdx:1,"
	IdSourceNgRannodeUexnApid *xnap_ies.NgRAnnodeUexnApid `protobuf:"bytes,1,opt,name=id_source_ng_rannode_uexn_apid,json=id-sourceNG-RANnodeUEXnAPID,proto3,oneof" aper:"choiceIdx:1,"`
}

type EarlyStatusTransferIEsValue_IdTargetNgRannodeUexnApid struct {
	// @inject_tag: aper:"choiceIdx:2,"
	IdTargetNgRannodeUexnApid *xnap_ies.NgRAnnodeUexnApid `protobuf:"bytes,2,opt,name=id_target_ng_rannode_uexn_apid,json=id-targetNG-RANnodeUEXnAPID,proto3,oneof" aper:"choiceIdx:2,"`
}

type EarlyStatusTransferIEsValue_IdProcedureStage struct {
	// @inject_tag: aper:"choiceIdx:3,"
	IdProcedureStage *ProcedureStageChoice `protobuf:"bytes,3,opt,name=id_procedure_stage,json=id-procedureStage,proto3,oneof" aper:"choiceIdx:3,"`
}

func (*EarlyStatusTransferIEsValue_IdSourceNgRannodeUexnApid) isEarlyStatusTransferIEsValue_EarlyStatusTransferIes() {
}

func (*EarlyStatusTransferIEsValue_IdTargetNgRannodeUexnApid) isEarlyStatusTransferIEsValue_EarlyStatusTransferIes() {
}

func (*EarlyStatusTransferIEsValue_IdProcedureStage) isEarlyStatusTransferIEsValue_EarlyStatusTransferIes() {
}

// concrete instance(s) of class XNAP-PROTOCOL-IES from xnap_v1.asn1:1152
// @inject_tag: aper:"valueExt"
// {EarlyStatusTransfer-IEs}
type EarlyStatusTransferIEs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"unique,"
	Id *xnap_commondatatypes.ProtocolIeID `protobuf:"bytes,1,opt,name=id,json=&id,proto3" json:"id,omitempty" aper:"unique,"`
	// @inject_tag: aper:"valueLB:0,valueUB:2,"
	Criticality xnap_commondatatypes.Criticality `protobuf:"varint,2,opt,name=criticality,json=&criticality,proto3,enum=xnap.v1.Criticality" json:"criticality,omitempty" aper:"valueLB:0,valueUB:2,"`
	// @inject_tag: aper:"canonicalOrder,"
	Value *EarlyStatusTransferIEsValue `protobuf:"bytes,3,opt,name=value,json=&Value,proto3" json:"value,omitempty" aper:"canonicalOrder,"`
}

func (x *EarlyStatusTransferIEs) Reset() {
	*x = EarlyStatusTransferIEs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EarlyStatusTransferIEs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EarlyStatusTransferIEs) ProtoMessage() {}

func (x *EarlyStatusTransferIEs) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EarlyStatusTransferIEs.ProtoReflect.Descriptor instead.
func (*EarlyStatusTransferIEs) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_pdu_contents_proto_rawDescGZIP(), []int{30}
}

func (x *EarlyStatusTransferIEs) GetId() *xnap_commondatatypes.ProtocolIeID {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *EarlyStatusTransferIEs) GetCriticality() xnap_commondatatypes.Criticality {
	if x != nil {
		return x.Criticality
	}
	return xnap_commondatatypes.Criticality(0)
}

func (x *EarlyStatusTransferIEs) GetValue() *EarlyStatusTransferIEsValue {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:1148
// @inject_tag: aper:"valueExt"
// {EarlyStatusTransfer}
type EarlyStatusTransfer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProtocolIes []*EarlyStatusTransferIEs `protobuf:"bytes,1,rep,name=protocol_ies,json=protocolIEs,proto3" json:"protocol_ies,omitempty"`
}

func (x *EarlyStatusTransfer) Reset() {
	*x = EarlyStatusTransfer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EarlyStatusTransfer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EarlyStatusTransfer) ProtoMessage() {}

func (x *EarlyStatusTransfer) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EarlyStatusTransfer.ProtoReflect.Descriptor instead.
func (*EarlyStatusTransfer) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_pdu_contents_proto_rawDescGZIP(), []int{31}
}

func (x *EarlyStatusTransfer) GetProtocolIes() []*EarlyStatusTransferIEs {
	if x != nil {
		return x.ProtocolIes
	}
	return nil
}

// value set from xnap_v1.asn1:1165
// {ProcedureStageChoice-ExtIEs}
type ProcedureStageChoiceExtIes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *emptypb.Empty `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *ProcedureStageChoiceExtIes) Reset() {
	*x = ProcedureStageChoiceExtIes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProcedureStageChoiceExtIes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcedureStageChoiceExtIes) ProtoMessage() {}

func (x *ProcedureStageChoiceExtIes) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcedureStageChoiceExtIes.ProtoReflect.Descriptor instead.
func (*ProcedureStageChoiceExtIes) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_pdu_contents_proto_rawDescGZIP(), []int{32}
}

func (x *ProcedureStageChoiceExtIes) GetValue() *emptypb.Empty {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:1160
// {ProcedureStageChoice}
type ProcedureStageChoice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// choice from xnap_v1.asn1:1160
	//
	// Types that are assignable to ProcedureStageChoice:
	//	*ProcedureStageChoice_FirstDlCount
	//	*ProcedureStageChoice_DlDiscarding
	//	*ProcedureStageChoice_ChoiceExtension
	ProcedureStageChoice isProcedureStageChoice_ProcedureStageChoice `protobuf_oneof:"procedure_stage_choice"`
}

func (x *ProcedureStageChoice) Reset() {
	*x = ProcedureStageChoice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProcedureStageChoice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcedureStageChoice) ProtoMessage() {}

func (x *ProcedureStageChoice) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcedureStageChoice.ProtoReflect.Descriptor instead.
func (*ProcedureStageChoice) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_pdu_contents_proto_rawDescGZIP(), []int{33}
}

func (m *ProcedureStageChoice) GetProcedureStageChoice() isProcedureStageChoice_ProcedureStageChoice {
	if m != nil {
		return m.ProcedureStageChoice
	}
	return nil
}

func (x *ProcedureStageChoice) GetFirstDlCount() *FirstDlcount {
	if x, ok := x.GetProcedureStageChoice().(*ProcedureStageChoice_FirstDlCount); ok {
		return x.FirstDlCount
	}
	return nil
}

func (x *ProcedureStageChoice) GetDlDiscarding() *Dldiscarding {
	if x, ok := x.GetProcedureStageChoice().(*ProcedureStageChoice_DlDiscarding); ok {
		return x.DlDiscarding
	}
	return nil
}

func (x *ProcedureStageChoice) GetChoiceExtension() *ProcedureStageChoiceExtIes {
	if x, ok := x.GetProcedureStageChoice().(*ProcedureStageChoice_ChoiceExtension); ok {
		return x.ChoiceExtension
	}
	return nil
}

type isProcedureStageChoice_ProcedureStageChoice interface {
	isProcedureStageChoice_ProcedureStageChoice()
}

type ProcedureStageChoice_FirstDlCount struct {
	// @inject_tag: aper:"choiceIdx:1,valueExt,"
	FirstDlCount *FirstDlcount `protobuf:"bytes,1,opt,name=first_dl_count,json=first-dl-count,proto3,oneof" aper:"choiceIdx:1,valueExt,"`
}

type ProcedureStageChoice_DlDiscarding struct {
	// @inject_tag: aper:"choiceIdx:2,valueExt,"
	DlDiscarding *Dldiscarding `protobuf:"bytes,2,opt,name=dl_discarding,json=dl-discarding,proto3,oneof" aper:"choiceIdx:2,valueExt,"`
}

type ProcedureStageChoice_ChoiceExtension struct {
	// @inject_tag: aper:"choiceIdx:3,"
	ChoiceExtension *ProcedureStageChoiceExtIes `protobuf:"bytes,3,opt,name=choice_extension,json=choice-extension,proto3,oneof" aper:"choiceIdx:3,"`
}

func (*ProcedureStageChoice_FirstDlCount) isProcedureStageChoice_ProcedureStageChoice() {}

func (*ProcedureStageChoice_DlDiscarding) isProcedureStageChoice_ProcedureStageChoice() {}

func (*ProcedureStageChoice_ChoiceExtension) isProcedureStageChoice_ProcedureStageChoice() {}

// value set from xnap_v1.asn1:1175
// {FirstDLCount-ExtIEs}
type FirstDlcountExtIes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *emptypb.Empty `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *FirstDlcountExtIes) Reset() {
	*x = FirstDlcountExtIes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FirstDlcountExtIes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FirstDlcountExtIes) ProtoMessage() {}

func (x *FirstDlcountExtIes) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FirstDlcountExtIes.ProtoReflect.Descriptor instead.
func (*FirstDlcountExtIes) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_pdu_contents_proto_rawDescGZIP(), []int{34}
}

func (x *FirstDlcountExtIes) GetValue() *emptypb.Empty {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:1170
// @inject_tag: aper:"valueExt"
// {FirstDLCount}
type FirstDlcount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DRbsSubjectToEarlyStatusTransfer *xnap_ies.DrbsSubjectToEarlyStatusTransferList `protobuf:"bytes,1,opt,name=d_rbs_subject_to_early_status_transfer,json=dRBsSubjectToEarlyStatusTransfer,proto3" json:"d_rbs_subject_to_early_status_transfer,omitempty"`
	// @inject_tag: aper:"optional,sizeLB:1,"
	IEExtension []*FirstDlcountExtIes `protobuf:"bytes,2,rep,name=i_e_extension,json=iE-Extension,proto3" json:"i_e_extension,omitempty" aper:"optional,sizeLB:1,"`
}

func (x *FirstDlcount) Reset() {
	*x = FirstDlcount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FirstDlcount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FirstDlcount) ProtoMessage() {}

func (x *FirstDlcount) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FirstDlcount.ProtoReflect.Descriptor instead.
func (*FirstDlcount) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_pdu_contents_proto_rawDescGZIP(), []int{35}
}

func (x *FirstDlcount) GetDRbsSubjectToEarlyStatusTransfer() *xnap_ies.DrbsSubjectToEarlyStatusTransferList {
	if x != nil {
		return x.DRbsSubjectToEarlyStatusTransfer
	}
	return nil
}

func (x *FirstDlcount) GetIEExtension() []*FirstDlcountExtIes {
	if x != nil {
		return x.IEExtension
	}
	return nil
}

// value set from xnap_v1.asn1:1185
// {DLDiscarding-ExtIEs}
type DldiscardingExtIes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *emptypb.Empty `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *DldiscardingExtIes) Reset() {
	*x = DldiscardingExtIes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DldiscardingExtIes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DldiscardingExtIes) ProtoMessage() {}

func (x *DldiscardingExtIes) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DldiscardingExtIes.ProtoReflect.Descriptor instead.
func (*DldiscardingExtIes) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_pdu_contents_proto_rawDescGZIP(), []int{36}
}

func (x *DldiscardingExtIes) GetValue() *emptypb.Empty {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:1180
// @inject_tag: aper:"valueExt"
// {DLDiscarding}
type Dldiscarding struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DRbsSubjectToDldiscarding *xnap_ies.DrbsSubjectToDldiscardingList `protobuf:"bytes,1,opt,name=d_rbs_subject_to_dldiscarding,json=dRBsSubjectToDLDiscarding,proto3" json:"d_rbs_subject_to_dldiscarding,omitempty"`
	// @inject_tag: aper:"optional,sizeLB:1,"
	IEExtension []*DldiscardingExtIes `protobuf:"bytes,2,rep,name=i_e_extension,json=iE-Extension,proto3" json:"i_e_extension,omitempty" aper:"optional,sizeLB:1,"`
}

func (x *Dldiscarding) Reset() {
	*x = Dldiscarding{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Dldiscarding) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Dldiscarding) ProtoMessage() {}

func (x *Dldiscarding) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Dldiscarding.ProtoReflect.Descriptor instead.
func (*Dldiscarding) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_pdu_contents_proto_rawDescGZIP(), []int{37}
}

func (x *Dldiscarding) GetDRbsSubjectToDldiscarding() *xnap_ies.DrbsSubjectToDldiscardingList {
	if x != nil {
		return x.DRbsSubjectToDldiscarding
	}
	return nil
}

func (x *Dldiscarding) GetIEExtension() []*DldiscardingExtIes {
	if x != nil {
		return x.IEExtension
	}
	return nil
}

// value set from xnap_v1.asn1:1200
// {RANPaging-IEs&Value}
type RanpagingIEsValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// value set translated as choice from xnap_v1.asn1:1200
	//
	// Types that are assignable to RanpagingIes:
	//	*RanpagingIEsValue_IdUeidentityIndexValue
	//	*RanpagingIEsValue_IdUeranpagingIdentity
	//	*RanpagingIEsValue_IdPagingDrx
	//	*RanpagingIEsValue_IdRanpagingArea
	//	*RanpagingIEsValue_IdPagingPriority
	//	*RanpagingIEsValue_IdAssistanceDataForRanpaging
	//	*RanpagingIEsValue_IdUeradioCapabilityForPaging
	//	*RanpagingIEsValue_IdExtendedUeidentityIndexValue
	//	*RanpagingIEsValue_IdPagingeDrxinformation
	//	*RanpagingIEsValue_IdUespecificDrx
	RanpagingIes isRanpagingIEsValue_RanpagingIes `protobuf_oneof:"ranpaging_ies"`
}

func (x *RanpagingIEsValue) Reset() {
	*x = RanpagingIEsValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RanpagingIEsValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RanpagingIEsValue) ProtoMessage() {}

func (x *RanpagingIEsValue) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RanpagingIEsValue.ProtoReflect.Descriptor instead.
func (*RanpagingIEsValue) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_pdu_contents_proto_rawDescGZIP(), []int{38}
}

func (m *RanpagingIEsValue) GetRanpagingIes() isRanpagingIEsValue_RanpagingIes {
	if m != nil {
		return m.RanpagingIes
	}
	return nil
}

func (x *RanpagingIEsValue) GetIdUeidentityIndexValue() *xnap_ies.UeidentityIndexValue {
	if x, ok := x.GetRanpagingIes().(*RanpagingIEsValue_IdUeidentityIndexValue); ok {
		return x.IdUeidentityIndexValue
	}
	return nil
}

func (x *RanpagingIEsValue) GetIdUeranpagingIdentity() *xnap_ies.UeranpagingIdentity {
	if x, ok := x.GetRanpagingIes().(*RanpagingIEsValue_IdUeranpagingIdentity); ok {
		return x.IdUeranpagingIdentity
	}
	return nil
}

func (x *RanpagingIEsValue) GetIdPagingDrx() xnap_ies.PagingDrx {
	if x, ok := x.GetRanpagingIes().(*RanpagingIEsValue_IdPagingDrx); ok {
		return x.IdPagingDrx
	}
	return xnap_ies.PagingDrx(0)
}

func (x *RanpagingIEsValue) GetIdRanpagingArea() *xnap_ies.RanpagingArea {
	if x, ok := x.GetRanpagingIes().(*RanpagingIEsValue_IdRanpagingArea); ok {
		return x.IdRanpagingArea
	}
	return nil
}

func (x *RanpagingIEsValue) GetIdPagingPriority() xnap_ies.PagingPriority {
	if x, ok := x.GetRanpagingIes().(*RanpagingIEsValue_IdPagingPriority); ok {
		return x.IdPagingPriority
	}
	return xnap_ies.PagingPriority(0)
}

func (x *RanpagingIEsValue) GetIdAssistanceDataForRanpaging() *xnap_ies.AssistanceDataForRanpaging {
	if x, ok := x.GetRanpagingIes().(*RanpagingIEsValue_IdAssistanceDataForRanpaging); ok {
		return x.IdAssistanceDataForRanpaging
	}
	return nil
}

func (x *RanpagingIEsValue) GetIdUeradioCapabilityForPaging() *xnap_ies.UeradioCapabilityForPaging {
	if x, ok := x.GetRanpagingIes().(*RanpagingIEsValue_IdUeradioCapabilityForPaging); ok {
		return x.IdUeradioCapabilityForPaging
	}
	return nil
}

func (x *RanpagingIEsValue) GetIdExtendedUeidentityIndexValue() *xnap_ies.ExtendedUeidentityIndexValue {
	if x, ok := x.GetRanpagingIes().(*RanpagingIEsValue_IdExtendedUeidentityIndexValue); ok {
		return x.IdExtendedUeidentityIndexValue
	}
	return nil
}

func (x *RanpagingIEsValue) GetIdPagingeDrxinformation() *xnap_ies.PagingeDrxinformation {
	if x, ok := x.GetRanpagingIes().(*RanpagingIEsValue_IdPagingeDrxinformation); ok {
		return x.IdPagingeDrxinformation
	}
	return nil
}

func (x *RanpagingIEsValue) GetIdUespecificDrx() xnap_ies.UespecificDrx {
	if x, ok := x.GetRanpagingIes().(*RanpagingIEsValue_IdUespecificDrx); ok {
		return x.IdUespecificDrx
	}
	return xnap_ies.UespecificDrx(0)
}

type isRanpagingIEsValue_RanpagingIes interface {
	isRanpagingIEsValue_RanpagingIes()
}

type RanpagingIEsValue_IdUeidentityIndexValue struct {
	// @inject_tag: aper:"choiceIdx:1,"
	IdUeidentityIndexValue *xnap_ies.UeidentityIndexValue `protobuf:"bytes,1,opt,name=id_ueidentity_index_value,json=id-UEIdentityIndexValue,proto3,oneof" aper:"choiceIdx:1,"`
}

type RanpagingIEsValue_IdUeranpagingIdentity struct {
	// @inject_tag: aper:"choiceIdx:2,"
	IdUeranpagingIdentity *xnap_ies.UeranpagingIdentity `protobuf:"bytes,2,opt,name=id_ueranpaging_identity,json=id-UERANPagingIdentity,proto3,oneof" aper:"choiceIdx:2,"`
}

type RanpagingIEsValue_IdPagingDrx struct {
	// @inject_tag: aper:"choiceIdx:3,valueExt,valueLB:0,valueUB:3,"
	IdPagingDrx xnap_ies.PagingDrx `protobuf:"varint,3,opt,name=id_paging_drx,json=id-PagingDRX,proto3,enum=xnap.v1.PagingDrx,oneof" aper:"choiceIdx:3,valueExt,valueLB:0,valueUB:3,"`
}

type RanpagingIEsValue_IdRanpagingArea struct {
	// @inject_tag: aper:"choiceIdx:4,valueExt,"
	IdRanpagingArea *xnap_ies.RanpagingArea `protobuf:"bytes,4,opt,name=id_ranpaging_area,json=id-RANPagingArea,proto3,oneof" aper:"choiceIdx:4,valueExt,"`
}

type RanpagingIEsValue_IdPagingPriority struct {
	// @inject_tag: aper:"choiceIdx:5,valueExt,valueLB:0,valueUB:7,"
	IdPagingPriority xnap_ies.PagingPriority `protobuf:"varint,5,opt,name=id_paging_priority,json=id-PagingPriority,proto3,enum=xnap.v1.PagingPriority,oneof" aper:"choiceIdx:5,valueExt,valueLB:0,valueUB:7,"`
}

type RanpagingIEsValue_IdAssistanceDataForRanpaging struct {
	// @inject_tag: aper:"choiceIdx:6,valueExt,"
	IdAssistanceDataForRanpaging *xnap_ies.AssistanceDataForRanpaging `protobuf:"bytes,6,opt,name=id_assistance_data_for_ranpaging,json=id-AssistanceDataForRANPaging,proto3,oneof" aper:"choiceIdx:6,valueExt,"`
}

type RanpagingIEsValue_IdUeradioCapabilityForPaging struct {
	// @inject_tag: aper:"choiceIdx:7,valueExt,"
	IdUeradioCapabilityForPaging *xnap_ies.UeradioCapabilityForPaging `protobuf:"bytes,7,opt,name=id_ueradio_capability_for_paging,json=id-UERadioCapabilityForPaging,proto3,oneof" aper:"choiceIdx:7,valueExt,"`
}

type RanpagingIEsValue_IdExtendedUeidentityIndexValue struct {
	// @inject_tag: aper:"choiceIdx:8,"
	IdExtendedUeidentityIndexValue *xnap_ies.ExtendedUeidentityIndexValue `protobuf:"bytes,8,opt,name=id_extended_ueidentity_index_value,json=id-ExtendedUEIdentityIndexValue,proto3,oneof" aper:"choiceIdx:8,"`
}

type RanpagingIEsValue_IdPagingeDrxinformation struct {
	// @inject_tag: aper:"choiceIdx:9,valueExt,"
	IdPagingeDrxinformation *xnap_ies.PagingeDrxinformation `protobuf:"bytes,9,opt,name=id_paginge_drxinformation,json=id-PagingeDRXInformation,proto3,oneof" aper:"choiceIdx:9,valueExt,"`
}

type RanpagingIEsValue_IdUespecificDrx struct {
	// @inject_tag: aper:"choiceIdx:10,valueExt,valueLB:0,valueUB:3,"
	IdUespecificDrx xnap_ies.UespecificDrx `protobuf:"varint,10,opt,name=id_uespecific_drx,json=id-UESpecificDRX,proto3,enum=xnap.v1.UespecificDrx,oneof" aper:"choiceIdx:10,valueExt,valueLB:0,valueUB:3,"`
}

func (*RanpagingIEsValue_IdUeidentityIndexValue) isRanpagingIEsValue_RanpagingIes() {}

func (*RanpagingIEsValue_IdUeranpagingIdentity) isRanpagingIEsValue_RanpagingIes() {}

func (*RanpagingIEsValue_IdPagingDrx) isRanpagingIEsValue_RanpagingIes() {}

func (*RanpagingIEsValue_IdRanpagingArea) isRanpagingIEsValue_RanpagingIes() {}

func (*RanpagingIEsValue_IdPagingPriority) isRanpagingIEsValue_RanpagingIes() {}

func (*RanpagingIEsValue_IdAssistanceDataForRanpaging) isRanpagingIEsValue_RanpagingIes() {}

func (*RanpagingIEsValue_IdUeradioCapabilityForPaging) isRanpagingIEsValue_RanpagingIes() {}

func (*RanpagingIEsValue_IdExtendedUeidentityIndexValue) isRanpagingIEsValue_RanpagingIes() {}

func (*RanpagingIEsValue_IdPagingeDrxinformation) isRanpagingIEsValue_RanpagingIes() {}

func (*RanpagingIEsValue_IdUespecificDrx) isRanpagingIEsValue_RanpagingIes() {}

// concrete instance(s) of class XNAP-PROTOCOL-IES from xnap_v1.asn1:1200
// @inject_tag: aper:"valueExt"
// {RANPaging-IEs}
type RanpagingIEs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"unique,"
	Id *xnap_commondatatypes.ProtocolIeID `protobuf:"bytes,1,opt,name=id,json=&id,proto3" json:"id,omitempty" aper:"unique,"`
	// @inject_tag: aper:"valueLB:0,valueUB:2,"
	Criticality xnap_commondatatypes.Criticality `protobuf:"varint,2,opt,name=criticality,json=&criticality,proto3,enum=xnap.v1.Criticality" json:"criticality,omitempty" aper:"valueLB:0,valueUB:2,"`
	// @inject_tag: aper:"canonicalOrder,"
	Value *RanpagingIEsValue `protobuf:"bytes,3,opt,name=value,json=&Value,proto3" json:"value,omitempty" aper:"canonicalOrder,"`
}

func (x *RanpagingIEs) Reset() {
	*x = RanpagingIEs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RanpagingIEs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RanpagingIEs) ProtoMessage() {}

func (x *RanpagingIEs) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RanpagingIEs.ProtoReflect.Descriptor instead.
func (*RanpagingIEs) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_pdu_contents_proto_rawDescGZIP(), []int{39}
}

func (x *RanpagingIEs) GetId() *xnap_commondatatypes.ProtocolIeID {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *RanpagingIEs) GetCriticality() xnap_commondatatypes.Criticality {
	if x != nil {
		return x.Criticality
	}
	return xnap_commondatatypes.Criticality(0)
}

func (x *RanpagingIEs) GetValue() *RanpagingIEsValue {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:1196
// @inject_tag: aper:"valueExt"
// {RANPaging}
type Ranpaging struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProtocolIes []*RanpagingIEs `protobuf:"bytes,1,rep,name=protocol_ies,json=protocolIEs,proto3" json:"protocol_ies,omitempty"`
}

func (x *Ranpaging) Reset() {
	*x = Ranpaging{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ranpaging) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ranpaging) ProtoMessage() {}

func (x *Ranpaging) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ranpaging.ProtoReflect.Descriptor instead.
func (*Ranpaging) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_pdu_contents_proto_rawDescGZIP(), []int{40}
}

func (x *Ranpaging) GetProtocolIes() []*RanpagingIEs {
	if x != nil {
		return x.ProtocolIes
	}
	return nil
}

// value set from xnap_v1.asn1:1225
// {RetrieveUEContextRequest-IEs&Value}
type RetrieveUecontextRequestIEsValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// value set translated as choice from xnap_v1.asn1:1225
	//
	// Types that are assignable to RetrieveUecontextRequestIes:
	//	*RetrieveUecontextRequestIEsValue_IdNewNgRannodeUexnApid
	//	*RetrieveUecontextRequestIEsValue_IdUecontextId
	//	*RetrieveUecontextRequestIEsValue_IdMacI
	//	*RetrieveUecontextRequestIEsValue_IdNewNgRanCellIdentity
	//	*RetrieveUecontextRequestIEsValue_IdRrcresumeCause
	RetrieveUecontextRequestIes isRetrieveUecontextRequestIEsValue_RetrieveUecontextRequestIes `protobuf_oneof:"retrieve_uecontext_request_ies"`
}

func (x *RetrieveUecontextRequestIEsValue) Reset() {
	*x = RetrieveUecontextRequestIEsValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RetrieveUecontextRequestIEsValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RetrieveUecontextRequestIEsValue) ProtoMessage() {}

func (x *RetrieveUecontextRequestIEsValue) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RetrieveUecontextRequestIEsValue.ProtoReflect.Descriptor instead.
func (*RetrieveUecontextRequestIEsValue) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_pdu_contents_proto_rawDescGZIP(), []int{41}
}

func (m *RetrieveUecontextRequestIEsValue) GetRetrieveUecontextRequestIes() isRetrieveUecontextRequestIEsValue_RetrieveUecontextRequestIes {
	if m != nil {
		return m.RetrieveUecontextRequestIes
	}
	return nil
}

func (x *RetrieveUecontextRequestIEsValue) GetIdNewNgRannodeUexnApid() *xnap_ies.NgRAnnodeUexnApid {
	if x, ok := x.GetRetrieveUecontextRequestIes().(*RetrieveUecontextRequestIEsValue_IdNewNgRannodeUexnApid); ok {
		return x.IdNewNgRannodeUexnApid
	}
	return nil
}

func (x *RetrieveUecontextRequestIEsValue) GetIdUecontextId() *xnap_ies.UecontextId {
	if x, ok := x.GetRetrieveUecontextRequestIes().(*RetrieveUecontextRequestIEsValue_IdUecontextId); ok {
		return x.IdUecontextId
	}
	return nil
}

func (x *RetrieveUecontextRequestIEsValue) GetIdMacI() *xnap_ies.MacI {
	if x, ok := x.GetRetrieveUecontextRequestIes().(*RetrieveUecontextRequestIEsValue_IdMacI); ok {
		return x.IdMacI
	}
	return nil
}

func (x *RetrieveUecontextRequestIEsValue) GetIdNewNgRanCellIdentity() *xnap_ies.NgRAnCellIdentity {
	if x, ok := x.GetRetrieveUecontextRequestIes().(*RetrieveUecontextRequestIEsValue_IdNewNgRanCellIdentity); ok {
		return x.IdNewNgRanCellIdentity
	}
	return nil
}

func (x *RetrieveUecontextRequestIEsValue) GetIdRrcresumeCause() xnap_ies.RrcresumeCause {
	if x, ok := x.GetRetrieveUecontextRequestIes().(*RetrieveUecontextRequestIEsValue_IdRrcresumeCause); ok {
		return x.IdRrcresumeCause
	}
	return xnap_ies.RrcresumeCause(0)
}

type isRetrieveUecontextRequestIEsValue_RetrieveUecontextRequestIes interface {
	isRetrieveUecontextRequestIEsValue_RetrieveUecontextRequestIes()
}

type RetrieveUecontextRequestIEsValue_IdNewNgRannodeUexnApid struct {
	// @inject_tag: aper:"choiceIdx:1,"
	IdNewNgRannodeUexnApid *xnap_ies.NgRAnnodeUexnApid `protobuf:"bytes,1,opt,name=id_new_ng_rannode_uexn_apid,json=id-newNG-RANnodeUEXnAPID,proto3,oneof" aper:"choiceIdx:1,"`
}

type RetrieveUecontextRequestIEsValue_IdUecontextId struct {
	// @inject_tag: aper:"choiceIdx:2,"
	IdUecontextId *xnap_ies.UecontextId `protobuf:"bytes,2,opt,name=id_uecontext_id,json=id-UEContextID,proto3,oneof" aper:"choiceIdx:2,"`
}

type RetrieveUecontextRequestIEsValue_IdMacI struct {
	// @inject_tag: aper:"choiceIdx:3,"
	IdMacI *xnap_ies.MacI `protobuf:"bytes,3,opt,name=id_mac_i,json=id-MAC-I,proto3,oneof" aper:"choiceIdx:3,"`
}

type RetrieveUecontextRequestIEsValue_IdNewNgRanCellIdentity struct {
	// @inject_tag: aper:"choiceIdx:4,"
	IdNewNgRanCellIdentity *xnap_ies.NgRAnCellIdentity `protobuf:"bytes,4,opt,name=id_new_ng_ran_cell_identity,json=id-new-NG-RAN-Cell-Identity,proto3,oneof" aper:"choiceIdx:4,"`
}

type RetrieveUecontextRequestIEsValue_IdRrcresumeCause struct {
	// @inject_tag: aper:"choiceIdx:5,valueExt,valueLB:0,valueUB:0,"
	IdRrcresumeCause xnap_ies.RrcresumeCause `protobuf:"varint,5,opt,name=id_rrcresume_cause,json=id-RRCResumeCause,proto3,enum=xnap.v1.RrcresumeCause,oneof" aper:"choiceIdx:5,valueExt,valueLB:0,valueUB:0,"`
}

func (*RetrieveUecontextRequestIEsValue_IdNewNgRannodeUexnApid) isRetrieveUecontextRequestIEsValue_RetrieveUecontextRequestIes() {
}

func (*RetrieveUecontextRequestIEsValue_IdUecontextId) isRetrieveUecontextRequestIEsValue_RetrieveUecontextRequestIes() {
}

func (*RetrieveUecontextRequestIEsValue_IdMacI) isRetrieveUecontextRequestIEsValue_RetrieveUecontextRequestIes() {
}

func (*RetrieveUecontextRequestIEsValue_IdNewNgRanCellIdentity) isRetrieveUecontextRequestIEsValue_RetrieveUecontextRequestIes() {
}

func (*RetrieveUecontextRequestIEsValue_IdRrcresumeCause) isRetrieveUecontextRequestIEsValue_RetrieveUecontextRequestIes() {
}

// concrete instance(s) of class XNAP-PROTOCOL-IES from xnap_v1.asn1:1225
// @inject_tag: aper:"valueExt"
// {RetrieveUEContextRequest-IEs}
type RetrieveUecontextRequestIEs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"unique,"
	Id *xnap_commondatatypes.ProtocolIeID `protobuf:"bytes,1,opt,name=id,json=&id,proto3" json:"id,omitempty" aper:"unique,"`
	// @inject_tag: aper:"valueLB:0,valueUB:2,"
	Criticality xnap_commondatatypes.Criticality `protobuf:"varint,2,opt,name=criticality,json=&criticality,proto3,enum=xnap.v1.Criticality" json:"criticality,omitempty" aper:"valueLB:0,valueUB:2,"`
	// @inject_tag: aper:"canonicalOrder,"
	Value *RetrieveUecontextRequestIEsValue `protobuf:"bytes,3,opt,name=value,json=&Value,proto3" json:"value,omitempty" aper:"canonicalOrder,"`
}

func (x *RetrieveUecontextRequestIEs) Reset() {
	*x = RetrieveUecontextRequestIEs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RetrieveUecontextRequestIEs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RetrieveUecontextRequestIEs) ProtoMessage() {}

func (x *RetrieveUecontextRequestIEs) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RetrieveUecontextRequestIEs.ProtoReflect.Descriptor instead.
func (*RetrieveUecontextRequestIEs) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_pdu_contents_proto_rawDescGZIP(), []int{42}
}

func (x *RetrieveUecontextRequestIEs) GetId() *xnap_commondatatypes.ProtocolIeID {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *RetrieveUecontextRequestIEs) GetCriticality() xnap_commondatatypes.Criticality {
	if x != nil {
		return x.Criticality
	}
	return xnap_commondatatypes.Criticality(0)
}

func (x *RetrieveUecontextRequestIEs) GetValue() *RetrieveUecontextRequestIEsValue {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:1221
// @inject_tag: aper:"valueExt"
// {RetrieveUEContextRequest}
type RetrieveUecontextRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProtocolIes []*RetrieveUecontextRequestIEs `protobuf:"bytes,1,rep,name=protocol_ies,json=protocolIEs,proto3" json:"protocol_ies,omitempty"`
}

func (x *RetrieveUecontextRequest) Reset() {
	*x = RetrieveUecontextRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RetrieveUecontextRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RetrieveUecontextRequest) ProtoMessage() {}

func (x *RetrieveUecontextRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RetrieveUecontextRequest.ProtoReflect.Descriptor instead.
func (*RetrieveUecontextRequest) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_pdu_contents_proto_rawDescGZIP(), []int{43}
}

func (x *RetrieveUecontextRequest) GetProtocolIes() []*RetrieveUecontextRequestIEs {
	if x != nil {
		return x.ProtocolIes
	}
	return nil
}

// value set from xnap_v1.asn1:1245
// {RetrieveUEContextResponse-IEs&Value}
type RetrieveUecontextResponseIEsValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// value set translated as choice from xnap_v1.asn1:1245
	//
	// Types that are assignable to RetrieveUecontextResponseIes:
	//	*RetrieveUecontextResponseIEsValue_IdNewNgRannodeUexnApid
	//	*RetrieveUecontextResponseIEsValue_IdOldNgRannodeUexnApid
	//	*RetrieveUecontextResponseIEsValue_IdGuami
	//	*RetrieveUecontextResponseIEsValue_IdUecontextInfoRetrUectxtResp
	//	*RetrieveUecontextResponseIEsValue_IdTraceActivation
	//	*RetrieveUecontextResponseIEsValue_IdMaskedImeisv
	//	*RetrieveUecontextResponseIEsValue_IdLocationReportingInformation
	//	*RetrieveUecontextResponseIEsValue_IdCriticalityDiagnostics
	//	*RetrieveUecontextResponseIEsValue_IdNrv2XservicesAuthorized
	//	*RetrieveUecontextResponseIEsValue_IdLtev2XservicesAuthorized
	//	*RetrieveUecontextResponseIEsValue_IdPc5QoSparameters
	//	*RetrieveUecontextResponseIEsValue_IdUehistoryInformation
	//	*RetrieveUecontextResponseIEsValue_IdUehistoryInformationFromTheUe
	//	*RetrieveUecontextResponseIEsValue_IdMdtplmnlist
	RetrieveUecontextResponseIes isRetrieveUecontextResponseIEsValue_RetrieveUecontextResponseIes `protobuf_oneof:"retrieve_uecontext_response_ies"`
}

func (x *RetrieveUecontextResponseIEsValue) Reset() {
	*x = RetrieveUecontextResponseIEsValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RetrieveUecontextResponseIEsValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RetrieveUecontextResponseIEsValue) ProtoMessage() {}

func (x *RetrieveUecontextResponseIEsValue) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RetrieveUecontextResponseIEsValue.ProtoReflect.Descriptor instead.
func (*RetrieveUecontextResponseIEsValue) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_pdu_contents_proto_rawDescGZIP(), []int{44}
}

func (m *RetrieveUecontextResponseIEsValue) GetRetrieveUecontextResponseIes() isRetrieveUecontextResponseIEsValue_RetrieveUecontextResponseIes {
	if m != nil {
		return m.RetrieveUecontextResponseIes
	}
	return nil
}

func (x *RetrieveUecontextResponseIEsValue) GetIdNewNgRannodeUexnApid() *xnap_ies.NgRAnnodeUexnApid {
	if x, ok := x.GetRetrieveUecontextResponseIes().(*RetrieveUecontextResponseIEsValue_IdNewNgRannodeUexnApid); ok {
		return x.IdNewNgRannodeUexnApid
	}
	return nil
}

func (x *RetrieveUecontextResponseIEsValue) GetIdOldNgRannodeUexnApid() *xnap_ies.NgRAnnodeUexnApid {
	if x, ok := x.GetRetrieveUecontextResponseIes().(*RetrieveUecontextResponseIEsValue_IdOldNgRannodeUexnApid); ok {
		return x.IdOldNgRannodeUexnApid
	}
	return nil
}

func (x *RetrieveUecontextResponseIEsValue) GetIdGuami() *xnap_ies.Guami {
	if x, ok := x.GetRetrieveUecontextResponseIes().(*RetrieveUecontextResponseIEsValue_IdGuami); ok {
		return x.IdGuami
	}
	return nil
}

func (x *RetrieveUecontextResponseIEsValue) GetIdUecontextInfoRetrUectxtResp() *xnap_ies.UecontextInfoRetrUectxtResp {
	if x, ok := x.GetRetrieveUecontextResponseIes().(*RetrieveUecontextResponseIEsValue_IdUecontextInfoRetrUectxtResp); ok {
		return x.IdUecontextInfoRetrUectxtResp
	}
	return nil
}

func (x *RetrieveUecontextResponseIEsValue) GetIdTraceActivation() *xnap_ies.TraceActivation {
	if x, ok := x.GetRetrieveUecontextResponseIes().(*RetrieveUecontextResponseIEsValue_IdTraceActivation); ok {
		return x.IdTraceActivation
	}
	return nil
}

func (x *RetrieveUecontextResponseIEsValue) GetIdMaskedImeisv() *xnap_ies.MaskedImeisv {
	if x, ok := x.GetRetrieveUecontextResponseIes().(*RetrieveUecontextResponseIEsValue_IdMaskedImeisv); ok {
		return x.IdMaskedImeisv
	}
	return nil
}

func (x *RetrieveUecontextResponseIEsValue) GetIdLocationReportingInformation() *xnap_ies.LocationReportingInformation {
	if x, ok := x.GetRetrieveUecontextResponseIes().(*RetrieveUecontextResponseIEsValue_IdLocationReportingInformation); ok {
		return x.IdLocationReportingInformation
	}
	return nil
}

func (x *RetrieveUecontextResponseIEsValue) GetIdCriticalityDiagnostics() *xnap_ies.CriticalityDiagnostics {
	if x, ok := x.GetRetrieveUecontextResponseIes().(*RetrieveUecontextResponseIEsValue_IdCriticalityDiagnostics); ok {
		return x.IdCriticalityDiagnostics
	}
	return nil
}

func (x *RetrieveUecontextResponseIEsValue) GetIdNrv2XservicesAuthorized() *xnap_ies.Nrv2XservicesAuthorized {
	if x, ok := x.GetRetrieveUecontextResponseIes().(*RetrieveUecontextResponseIEsValue_IdNrv2XservicesAuthorized); ok {
		return x.IdNrv2XservicesAuthorized
	}
	return nil
}

func (x *RetrieveUecontextResponseIEsValue) GetIdLtev2XservicesAuthorized() *xnap_ies.Ltev2XservicesAuthorized {
	if x, ok := x.GetRetrieveUecontextResponseIes().(*RetrieveUecontextResponseIEsValue_IdLtev2XservicesAuthorized); ok {
		return x.IdLtev2XservicesAuthorized
	}
	return nil
}

func (x *RetrieveUecontextResponseIEsValue) GetIdPc5QoSparameters() *xnap_ies.Pc5QoSparameters {
	if x, ok := x.GetRetrieveUecontextResponseIes().(*RetrieveUecontextResponseIEsValue_IdPc5QoSparameters); ok {
		return x.IdPc5QoSparameters
	}
	return nil
}

func (x *RetrieveUecontextResponseIEsValue) GetIdUehistoryInformation() *xnap_ies.UehistoryInformation {
	if x, ok := x.GetRetrieveUecontextResponseIes().(*RetrieveUecontextResponseIEsValue_IdUehistoryInformation); ok {
		return x.IdUehistoryInformation
	}
	return nil
}

func (x *RetrieveUecontextResponseIEsValue) GetIdUehistoryInformationFromTheUe() *xnap_ies.UehistoryInformationFromTheUe {
	if x, ok := x.GetRetrieveUecontextResponseIes().(*RetrieveUecontextResponseIEsValue_IdUehistoryInformationFromTheUe); ok {
		return x.IdUehistoryInformationFromTheUe
	}
	return nil
}

func (x *RetrieveUecontextResponseIEsValue) GetIdMdtplmnlist() *xnap_ies.Mdtplmnlist {
	if x, ok := x.GetRetrieveUecontextResponseIes().(*RetrieveUecontextResponseIEsValue_IdMdtplmnlist); ok {
		return x.IdMdtplmnlist
	}
	return nil
}

type isRetrieveUecontextResponseIEsValue_RetrieveUecontextResponseIes interface {
	isRetrieveUecontextResponseIEsValue_RetrieveUecontextResponseIes()
}

type RetrieveUecontextResponseIEsValue_IdNewNgRannodeUexnApid struct {
	// @inject_tag: aper:"choiceIdx:1,"
	IdNewNgRannodeUexnApid *xnap_ies.NgRAnnodeUexnApid `protobuf:"bytes,1,opt,name=id_new_ng_rannode_uexn_apid,json=id-newNG-RANnodeUEXnAPID,proto3,oneof" aper:"choiceIdx:1,"`
}

type RetrieveUecontextResponseIEsValue_IdOldNgRannodeUexnApid struct {
	// @inject_tag: aper:"choiceIdx:2,"
	IdOldNgRannodeUexnApid *xnap_ies.NgRAnnodeUexnApid `protobuf:"bytes,2,opt,name=id_old_ng_rannode_uexn_apid,json=id-oldNG-RANnodeUEXnAPID,proto3,oneof" aper:"choiceIdx:2,"`
}

type RetrieveUecontextResponseIEsValue_IdGuami struct {
	// @inject_tag: aper:"choiceIdx:3,valueExt,"
	IdGuami *xnap_ies.Guami `protobuf:"bytes,3,opt,name=id_guami,json=id-GUAMI,proto3,oneof" aper:"choiceIdx:3,valueExt,"`
}

type RetrieveUecontextResponseIEsValue_IdUecontextInfoRetrUectxtResp struct {
	// @inject_tag: aper:"choiceIdx:4,valueExt,"
	IdUecontextInfoRetrUectxtResp *xnap_ies.UecontextInfoRetrUectxtResp `protobuf:"bytes,4,opt,name=id_uecontext_info_retr_uectxt_resp,json=id-UEContextInfoRetrUECtxtResp,proto3,oneof" aper:"choiceIdx:4,valueExt,"`
}

type RetrieveUecontextResponseIEsValue_IdTraceActivation struct {
	// @inject_tag: aper:"choiceIdx:5,valueExt,"
	IdTraceActivation *xnap_ies.TraceActivation `protobuf:"bytes,5,opt,name=id_trace_activation,json=id-TraceActivation,proto3,oneof" aper:"choiceIdx:5,valueExt,"`
}

type RetrieveUecontextResponseIEsValue_IdMaskedImeisv struct {
	// @inject_tag: aper:"choiceIdx:6,"
	IdMaskedImeisv *xnap_ies.MaskedImeisv `protobuf:"bytes,6,opt,name=id_masked_imeisv,json=id-MaskedIMEISV,proto3,oneof" aper:"choiceIdx:6,"`
}

type RetrieveUecontextResponseIEsValue_IdLocationReportingInformation struct {
	// @inject_tag: aper:"choiceIdx:7,valueExt,"
	IdLocationReportingInformation *xnap_ies.LocationReportingInformation `protobuf:"bytes,7,opt,name=id_location_reporting_information,json=id-LocationReportingInformation,proto3,oneof" aper:"choiceIdx:7,valueExt,"`
}

type RetrieveUecontextResponseIEsValue_IdCriticalityDiagnostics struct {
	// @inject_tag: aper:"choiceIdx:8,valueExt,"
	IdCriticalityDiagnostics *xnap_ies.CriticalityDiagnostics `protobuf:"bytes,8,opt,name=id_criticality_diagnostics,json=id-CriticalityDiagnostics,proto3,oneof" aper:"choiceIdx:8,valueExt,"`
}

type RetrieveUecontextResponseIEsValue_IdNrv2XservicesAuthorized struct {
	// @inject_tag: aper:"choiceIdx:9,valueExt,"
	IdNrv2XservicesAuthorized *xnap_ies.Nrv2XservicesAuthorized `protobuf:"bytes,9,opt,name=id_nrv2_xservices_authorized,json=id-NRV2XServicesAuthorized,proto3,oneof" aper:"choiceIdx:9,valueExt,"`
}

type RetrieveUecontextResponseIEsValue_IdLtev2XservicesAuthorized struct {
	// @inject_tag: aper:"choiceIdx:10,valueExt,"
	IdLtev2XservicesAuthorized *xnap_ies.Ltev2XservicesAuthorized `protobuf:"bytes,10,opt,name=id_ltev2_xservices_authorized,json=id-LTEV2XServicesAuthorized,proto3,oneof" aper:"choiceIdx:10,valueExt,"`
}

type RetrieveUecontextResponseIEsValue_IdPc5QoSparameters struct {
	// @inject_tag: aper:"choiceIdx:11,valueExt,"
	IdPc5QoSparameters *xnap_ies.Pc5QoSparameters `protobuf:"bytes,11,opt,name=id_pc5_qo_sparameters,json=id-PC5QoSParameters,proto3,oneof" aper:"choiceIdx:11,valueExt,"`
}

type RetrieveUecontextResponseIEsValue_IdUehistoryInformation struct {
	// @inject_tag: aper:"choiceIdx:12,"
	IdUehistoryInformation *xnap_ies.UehistoryInformation `protobuf:"bytes,12,opt,name=id_uehistory_information,json=id-UEHistoryInformation,proto3,oneof" aper:"choiceIdx:12,"`
}

type RetrieveUecontextResponseIEsValue_IdUehistoryInformationFromTheUe struct {
	// @inject_tag: aper:"choiceIdx:13,"
	IdUehistoryInformationFromTheUe *xnap_ies.UehistoryInformationFromTheUe `protobuf:"bytes,13,opt,name=id_uehistory_information_from_the_ue,json=id-UEHistoryInformationFromTheUE,proto3,oneof" aper:"choiceIdx:13,"`
}

type RetrieveUecontextResponseIEsValue_IdMdtplmnlist struct {
	// @inject_tag: aper:"choiceIdx:14,"
	IdMdtplmnlist *xnap_ies.Mdtplmnlist `protobuf:"bytes,14,opt,name=id_mdtplmnlist,json=id-MDTPLMNList,proto3,oneof" aper:"choiceIdx:14,"`
}

func (*RetrieveUecontextResponseIEsValue_IdNewNgRannodeUexnApid) isRetrieveUecontextResponseIEsValue_RetrieveUecontextResponseIes() {
}

func (*RetrieveUecontextResponseIEsValue_IdOldNgRannodeUexnApid) isRetrieveUecontextResponseIEsValue_RetrieveUecontextResponseIes() {
}

func (*RetrieveUecontextResponseIEsValue_IdGuami) isRetrieveUecontextResponseIEsValue_RetrieveUecontextResponseIes() {
}

func (*RetrieveUecontextResponseIEsValue_IdUecontextInfoRetrUectxtResp) isRetrieveUecontextResponseIEsValue_RetrieveUecontextResponseIes() {
}

func (*RetrieveUecontextResponseIEsValue_IdTraceActivation) isRetrieveUecontextResponseIEsValue_RetrieveUecontextResponseIes() {
}

func (*RetrieveUecontextResponseIEsValue_IdMaskedImeisv) isRetrieveUecontextResponseIEsValue_RetrieveUecontextResponseIes() {
}

func (*RetrieveUecontextResponseIEsValue_IdLocationReportingInformation) isRetrieveUecontextResponseIEsValue_RetrieveUecontextResponseIes() {
}

func (*RetrieveUecontextResponseIEsValue_IdCriticalityDiagnostics) isRetrieveUecontextResponseIEsValue_RetrieveUecontextResponseIes() {
}

func (*RetrieveUecontextResponseIEsValue_IdNrv2XservicesAuthorized) isRetrieveUecontextResponseIEsValue_RetrieveUecontextResponseIes() {
}

func (*RetrieveUecontextResponseIEsValue_IdLtev2XservicesAuthorized) isRetrieveUecontextResponseIEsValue_RetrieveUecontextResponseIes() {
}

func (*RetrieveUecontextResponseIEsValue_IdPc5QoSparameters) isRetrieveUecontextResponseIEsValue_RetrieveUecontextResponseIes() {
}

func (*RetrieveUecontextResponseIEsValue_IdUehistoryInformation) isRetrieveUecontextResponseIEsValue_RetrieveUecontextResponseIes() {
}

func (*RetrieveUecontextResponseIEsValue_IdUehistoryInformationFromTheUe) isRetrieveUecontextResponseIEsValue_RetrieveUecontextResponseIes() {
}

func (*RetrieveUecontextResponseIEsValue_IdMdtplmnlist) isRetrieveUecontextResponseIEsValue_RetrieveUecontextResponseIes() {
}

// concrete instance(s) of class XNAP-PROTOCOL-IES from xnap_v1.asn1:1245
// @inject_tag: aper:"valueExt"
// {RetrieveUEContextResponse-IEs}
type RetrieveUecontextResponseIEs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"unique,"
	Id *xnap_commondatatypes.ProtocolIeID `protobuf:"bytes,1,opt,name=id,json=&id,proto3" json:"id,omitempty" aper:"unique,"`
	// @inject_tag: aper:"valueLB:0,valueUB:2,"
	Criticality xnap_commondatatypes.Criticality `protobuf:"varint,2,opt,name=criticality,json=&criticality,proto3,enum=xnap.v1.Criticality" json:"criticality,omitempty" aper:"valueLB:0,valueUB:2,"`
	// @inject_tag: aper:"canonicalOrder,"
	Value *RetrieveUecontextResponseIEsValue `protobuf:"bytes,3,opt,name=value,json=&Value,proto3" json:"value,omitempty" aper:"canonicalOrder,"`
}

func (x *RetrieveUecontextResponseIEs) Reset() {
	*x = RetrieveUecontextResponseIEs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RetrieveUecontextResponseIEs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RetrieveUecontextResponseIEs) ProtoMessage() {}

func (x *RetrieveUecontextResponseIEs) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RetrieveUecontextResponseIEs.ProtoReflect.Descriptor instead.
func (*RetrieveUecontextResponseIEs) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_pdu_contents_proto_rawDescGZIP(), []int{45}
}

func (x *RetrieveUecontextResponseIEs) GetId() *xnap_commondatatypes.ProtocolIeID {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *RetrieveUecontextResponseIEs) GetCriticality() xnap_commondatatypes.Criticality {
	if x != nil {
		return x.Criticality
	}
	return xnap_commondatatypes.Criticality(0)
}

func (x *RetrieveUecontextResponseIEs) GetValue() *RetrieveUecontextResponseIEsValue {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:1241
// @inject_tag: aper:"valueExt"
// {RetrieveUEContextResponse}
type RetrieveUecontextResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProtocolIes []*RetrieveUecontextResponseIEs `protobuf:"bytes,1,rep,name=protocol_ies,json=protocolIEs,proto3" json:"protocol_ies,omitempty"`
}

func (x *RetrieveUecontextResponse) Reset() {
	*x = RetrieveUecontextResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RetrieveUecontextResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RetrieveUecontextResponse) ProtoMessage() {}

func (x *RetrieveUecontextResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RetrieveUecontextResponse.ProtoReflect.Descriptor instead.
func (*RetrieveUecontextResponse) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_pdu_contents_proto_rawDescGZIP(), []int{46}
}

func (x *RetrieveUecontextResponse) GetProtocolIes() []*RetrieveUecontextResponseIEs {
	if x != nil {
		return x.ProtocolIes
	}
	return nil
}

// value set from xnap_v1.asn1:1274
// {RetrieveUEContextFailure-IEs&Value}
type RetrieveUecontextFailureIEsValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// value set translated as choice from xnap_v1.asn1:1274
	//
	// Types that are assignable to RetrieveUecontextFailureIes:
	//	*RetrieveUecontextFailureIEsValue_IdNewNgRannodeUexnApid
	//	*RetrieveUecontextFailureIEsValue_IdOldtoNewNgRannodeResumeContainer
	//	*RetrieveUecontextFailureIEsValue_IdCause
	//	*RetrieveUecontextFailureIEsValue_IdCriticalityDiagnostics
	RetrieveUecontextFailureIes isRetrieveUecontextFailureIEsValue_RetrieveUecontextFailureIes `protobuf_oneof:"retrieve_uecontext_failure_ies"`
}

func (x *RetrieveUecontextFailureIEsValue) Reset() {
	*x = RetrieveUecontextFailureIEsValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RetrieveUecontextFailureIEsValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RetrieveUecontextFailureIEsValue) ProtoMessage() {}

func (x *RetrieveUecontextFailureIEsValue) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RetrieveUecontextFailureIEsValue.ProtoReflect.Descriptor instead.
func (*RetrieveUecontextFailureIEsValue) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_pdu_contents_proto_rawDescGZIP(), []int{47}
}

func (m *RetrieveUecontextFailureIEsValue) GetRetrieveUecontextFailureIes() isRetrieveUecontextFailureIEsValue_RetrieveUecontextFailureIes {
	if m != nil {
		return m.RetrieveUecontextFailureIes
	}
	return nil
}

func (x *RetrieveUecontextFailureIEsValue) GetIdNewNgRannodeUexnApid() *xnap_ies.NgRAnnodeUexnApid {
	if x, ok := x.GetRetrieveUecontextFailureIes().(*RetrieveUecontextFailureIEsValue_IdNewNgRannodeUexnApid); ok {
		return x.IdNewNgRannodeUexnApid
	}
	return nil
}

func (x *RetrieveUecontextFailureIEsValue) GetIdOldtoNewNgRannodeResumeContainer() string {
	if x, ok := x.GetRetrieveUecontextFailureIes().(*RetrieveUecontextFailureIEsValue_IdOldtoNewNgRannodeResumeContainer); ok {
		return x.IdOldtoNewNgRannodeResumeContainer
	}
	return ""
}

func (x *RetrieveUecontextFailureIEsValue) GetIdCause() *xnap_ies.Cause {
	if x, ok := x.GetRetrieveUecontextFailureIes().(*RetrieveUecontextFailureIEsValue_IdCause); ok {
		return x.IdCause
	}
	return nil
}

func (x *RetrieveUecontextFailureIEsValue) GetIdCriticalityDiagnostics() *xnap_ies.CriticalityDiagnostics {
	if x, ok := x.GetRetrieveUecontextFailureIes().(*RetrieveUecontextFailureIEsValue_IdCriticalityDiagnostics); ok {
		return x.IdCriticalityDiagnostics
	}
	return nil
}

type isRetrieveUecontextFailureIEsValue_RetrieveUecontextFailureIes interface {
	isRetrieveUecontextFailureIEsValue_RetrieveUecontextFailureIes()
}

type RetrieveUecontextFailureIEsValue_IdNewNgRannodeUexnApid struct {
	// @inject_tag: aper:"choiceIdx:1,"
	IdNewNgRannodeUexnApid *xnap_ies.NgRAnnodeUexnApid `protobuf:"bytes,1,opt,name=id_new_ng_rannode_uexn_apid,json=id-newNG-RANnodeUEXnAPID,proto3,oneof" aper:"choiceIdx:1,"`
}

type RetrieveUecontextFailureIEsValue_IdOldtoNewNgRannodeResumeContainer struct {
	// @inject_tag: aper:"choiceIdx:2,"
	IdOldtoNewNgRannodeResumeContainer string `protobuf:"bytes,2,opt,name=id_oldto_new_ng_rannode_resume_container,json=id-OldtoNewNG-RANnodeResumeContainer,proto3,oneof" aper:"choiceIdx:2,"`
}

type RetrieveUecontextFailureIEsValue_IdCause struct {
	// @inject_tag: aper:"choiceIdx:3,"
	IdCause *xnap_ies.Cause `protobuf:"bytes,3,opt,name=id_cause,json=id-Cause,proto3,oneof" aper:"choiceIdx:3,"`
}

type RetrieveUecontextFailureIEsValue_IdCriticalityDiagnostics struct {
	// @inject_tag: aper:"choiceIdx:4,valueExt,"
	IdCriticalityDiagnostics *xnap_ies.CriticalityDiagnostics `protobuf:"bytes,4,opt,name=id_criticality_diagnostics,json=id-CriticalityDiagnostics,proto3,oneof" aper:"choiceIdx:4,valueExt,"`
}

func (*RetrieveUecontextFailureIEsValue_IdNewNgRannodeUexnApid) isRetrieveUecontextFailureIEsValue_RetrieveUecontextFailureIes() {
}

func (*RetrieveUecontextFailureIEsValue_IdOldtoNewNgRannodeResumeContainer) isRetrieveUecontextFailureIEsValue_RetrieveUecontextFailureIes() {
}

func (*RetrieveUecontextFailureIEsValue_IdCause) isRetrieveUecontextFailureIEsValue_RetrieveUecontextFailureIes() {
}

func (*RetrieveUecontextFailureIEsValue_IdCriticalityDiagnostics) isRetrieveUecontextFailureIEsValue_RetrieveUecontextFailureIes() {
}

// concrete instance(s) of class XNAP-PROTOCOL-IES from xnap_v1.asn1:1274
// @inject_tag: aper:"valueExt"
// {RetrieveUEContextFailure-IEs}
type RetrieveUecontextFailureIEs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"unique,"
	Id *xnap_commondatatypes.ProtocolIeID `protobuf:"bytes,1,opt,name=id,json=&id,proto3" json:"id,omitempty" aper:"unique,"`
	// @inject_tag: aper:"valueLB:0,valueUB:2,"
	Criticality xnap_commondatatypes.Criticality `protobuf:"varint,2,opt,name=criticality,json=&criticality,proto3,enum=xnap.v1.Criticality" json:"criticality,omitempty" aper:"valueLB:0,valueUB:2,"`
	// @inject_tag: aper:"canonicalOrder,"
	Value *RetrieveUecontextFailureIEsValue `protobuf:"bytes,3,opt,name=value,json=&Value,proto3" json:"value,omitempty" aper:"canonicalOrder,"`
}

func (x *RetrieveUecontextFailureIEs) Reset() {
	*x = RetrieveUecontextFailureIEs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RetrieveUecontextFailureIEs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RetrieveUecontextFailureIEs) ProtoMessage() {}

func (x *RetrieveUecontextFailureIEs) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RetrieveUecontextFailureIEs.ProtoReflect.Descriptor instead.
func (*RetrieveUecontextFailureIEs) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_pdu_contents_proto_rawDescGZIP(), []int{48}
}

func (x *RetrieveUecontextFailureIEs) GetId() *xnap_commondatatypes.ProtocolIeID {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *RetrieveUecontextFailureIEs) GetCriticality() xnap_commondatatypes.Criticality {
	if x != nil {
		return x.Criticality
	}
	return xnap_commondatatypes.Criticality(0)
}

func (x *RetrieveUecontextFailureIEs) GetValue() *RetrieveUecontextFailureIEsValue {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:1270
// @inject_tag: aper:"valueExt"
// {RetrieveUEContextFailure}
type RetrieveUecontextFailure struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProtocolIes []*RetrieveUecontextFailureIEs `protobuf:"bytes,1,rep,name=protocol_ies,json=protocolIEs,proto3" json:"protocol_ies,omitempty"`
}

func (x *RetrieveUecontextFailure) Reset() {
	*x = RetrieveUecontextFailure{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RetrieveUecontextFailure) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RetrieveUecontextFailure) ProtoMessage() {}

func (x *RetrieveUecontextFailure) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RetrieveUecontextFailure.ProtoReflect.Descriptor instead.
func (*RetrieveUecontextFailure) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_pdu_contents_proto_rawDescGZIP(), []int{49}
}

func (x *RetrieveUecontextFailure) GetProtocolIes() []*RetrieveUecontextFailureIEs {
	if x != nil {
		return x.ProtocolIes
	}
	return nil
}

// value set from xnap_v1.asn1:1293
// {XnUAddressIndication-IEs&Value}
type XnUaddressIndicationIEsValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// value set translated as choice from xnap_v1.asn1:1293
	//
	// Types that are assignable to XnUaddressIndicationIes:
	//	*XnUaddressIndicationIEsValue_IdNewNgRannodeUexnApid
	//	*XnUaddressIndicationIEsValue_IdOldNgRannodeUexnApid
	//	*XnUaddressIndicationIEsValue_IdXnUaddressInfoperPdusessionList
	//	*XnUaddressIndicationIEsValue_IdChoMrdcIndicator
	//	*XnUaddressIndicationIEsValue_IdChoMrdcEarlyDataForwarding
	XnUaddressIndicationIes isXnUaddressIndicationIEsValue_XnUaddressIndicationIes `protobuf_oneof:"xn_uaddress_indication_ies"`
}

func (x *XnUaddressIndicationIEsValue) Reset() {
	*x = XnUaddressIndicationIEsValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *XnUaddressIndicationIEsValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*XnUaddressIndicationIEsValue) ProtoMessage() {}

func (x *XnUaddressIndicationIEsValue) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use XnUaddressIndicationIEsValue.ProtoReflect.Descriptor instead.
func (*XnUaddressIndicationIEsValue) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_pdu_contents_proto_rawDescGZIP(), []int{50}
}

func (m *XnUaddressIndicationIEsValue) GetXnUaddressIndicationIes() isXnUaddressIndicationIEsValue_XnUaddressIndicationIes {
	if m != nil {
		return m.XnUaddressIndicationIes
	}
	return nil
}

func (x *XnUaddressIndicationIEsValue) GetIdNewNgRannodeUexnApid() *xnap_ies.NgRAnnodeUexnApid {
	if x, ok := x.GetXnUaddressIndicationIes().(*XnUaddressIndicationIEsValue_IdNewNgRannodeUexnApid); ok {
		return x.IdNewNgRannodeUexnApid
	}
	return nil
}

func (x *XnUaddressIndicationIEsValue) GetIdOldNgRannodeUexnApid() *xnap_ies.NgRAnnodeUexnApid {
	if x, ok := x.GetXnUaddressIndicationIes().(*XnUaddressIndicationIEsValue_IdOldNgRannodeUexnApid); ok {
		return x.IdOldNgRannodeUexnApid
	}
	return nil
}

func (x *XnUaddressIndicationIEsValue) GetIdXnUaddressInfoperPdusessionList() *xnap_ies.XnUaddressInfoperPdusessionList {
	if x, ok := x.GetXnUaddressIndicationIes().(*XnUaddressIndicationIEsValue_IdXnUaddressInfoperPdusessionList); ok {
		return x.IdXnUaddressInfoperPdusessionList
	}
	return nil
}

func (x *XnUaddressIndicationIEsValue) GetIdChoMrdcIndicator() xnap_ies.ChoMRdcIndicator {
	if x, ok := x.GetXnUaddressIndicationIes().(*XnUaddressIndicationIEsValue_IdChoMrdcIndicator); ok {
		return x.IdChoMrdcIndicator
	}
	return xnap_ies.ChoMRdcIndicator(0)
}

func (x *XnUaddressIndicationIEsValue) GetIdChoMrdcEarlyDataForwarding() xnap_ies.ChoMRdcEarlyDataForwarding {
	if x, ok := x.GetXnUaddressIndicationIes().(*XnUaddressIndicationIEsValue_IdChoMrdcEarlyDataForwarding); ok {
		return x.IdChoMrdcEarlyDataForwarding
	}
	return xnap_ies.ChoMRdcEarlyDataForwarding(0)
}

type isXnUaddressIndicationIEsValue_XnUaddressIndicationIes interface {
	isXnUaddressIndicationIEsValue_XnUaddressIndicationIes()
}

type XnUaddressIndicationIEsValue_IdNewNgRannodeUexnApid struct {
	// @inject_tag: aper:"choiceIdx:1,"
	IdNewNgRannodeUexnApid *xnap_ies.NgRAnnodeUexnApid `protobuf:"bytes,1,opt,name=id_new_ng_rannode_uexn_apid,json=id-newNG-RANnodeUEXnAPID,proto3,oneof" aper:"choiceIdx:1,"`
}

type XnUaddressIndicationIEsValue_IdOldNgRannodeUexnApid struct {
	// @inject_tag: aper:"choiceIdx:2,"
	IdOldNgRannodeUexnApid *xnap_ies.NgRAnnodeUexnApid `protobuf:"bytes,2,opt,name=id_old_ng_rannode_uexn_apid,json=id-oldNG-RANnodeUEXnAPID,proto3,oneof" aper:"choiceIdx:2,"`
}

type XnUaddressIndicationIEsValue_IdXnUaddressInfoperPdusessionList struct {
	// @inject_tag: aper:"choiceIdx:3,"
	IdXnUaddressInfoperPdusessionList *xnap_ies.XnUaddressInfoperPdusessionList `protobuf:"bytes,3,opt,name=id_xn_uaddress_infoper_pdusession_list,json=id-XnUAddressInfoperPDUSession-List,proto3,oneof" aper:"choiceIdx:3,"`
}

type XnUaddressIndicationIEsValue_IdChoMrdcIndicator struct {
	// @inject_tag: aper:"choiceIdx:4,valueExt,valueLB:0,valueUB:0,"
	IdChoMrdcIndicator xnap_ies.ChoMRdcIndicator `protobuf:"varint,4,opt,name=id_cho_mrdc_indicator,json=id-CHO-MRDC-Indicator,proto3,enum=xnap.v1.ChoMRdcIndicator,oneof" aper:"choiceIdx:4,valueExt,valueLB:0,valueUB:0,"`
}

type XnUaddressIndicationIEsValue_IdChoMrdcEarlyDataForwarding struct {
	// @inject_tag: aper:"choiceIdx:5,valueExt,valueLB:0,valueUB:0,"
	IdChoMrdcEarlyDataForwarding xnap_ies.ChoMRdcEarlyDataForwarding `protobuf:"varint,5,opt,name=id_cho_mrdc_early_data_forwarding,json=id-CHO-MRDC-EarlyDataForwarding,proto3,enum=xnap.v1.ChoMRdcEarlyDataForwarding,oneof" aper:"choiceIdx:5,valueExt,valueLB:0,valueUB:0,"`
}

func (*XnUaddressIndicationIEsValue_IdNewNgRannodeUexnApid) isXnUaddressIndicationIEsValue_XnUaddressIndicationIes() {
}

func (*XnUaddressIndicationIEsValue_IdOldNgRannodeUexnApid) isXnUaddressIndicationIEsValue_XnUaddressIndicationIes() {
}

func (*XnUaddressIndicationIEsValue_IdXnUaddressInfoperPdusessionList) isXnUaddressIndicationIEsValue_XnUaddressIndicationIes() {
}

func (*XnUaddressIndicationIEsValue_IdChoMrdcIndicator) isXnUaddressIndicationIEsValue_XnUaddressIndicationIes() {
}

func (*XnUaddressIndicationIEsValue_IdChoMrdcEarlyDataForwarding) isXnUaddressIndicationIEsValue_XnUaddressIndicationIes() {
}

// concrete instance(s) of class XNAP-PROTOCOL-IES from xnap_v1.asn1:1293
// @inject_tag: aper:"valueExt"
// {XnUAddressIndication-IEs}
type XnUaddressIndicationIEs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"unique,"
	Id *xnap_commondatatypes.ProtocolIeID `protobuf:"bytes,1,opt,name=id,json=&id,proto3" json:"id,omitempty" aper:"unique,"`
	// @inject_tag: aper:"valueLB:0,valueUB:2,"
	Criticality xnap_commondatatypes.Criticality `protobuf:"varint,2,opt,name=criticality,json=&criticality,proto3,enum=xnap.v1.Criticality" json:"criticality,omitempty" aper:"valueLB:0,valueUB:2,"`
	// @inject_tag: aper:"canonicalOrder,"
	Value *XnUaddressIndicationIEsValue `protobuf:"bytes,3,opt,name=value,json=&Value,proto3" json:"value,omitempty" aper:"canonicalOrder,"`
}

func (x *XnUaddressIndicationIEs) Reset() {
	*x = XnUaddressIndicationIEs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *XnUaddressIndicationIEs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*XnUaddressIndicationIEs) ProtoMessage() {}

func (x *XnUaddressIndicationIEs) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use XnUaddressIndicationIEs.ProtoReflect.Descriptor instead.
func (*XnUaddressIndicationIEs) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_pdu_contents_proto_rawDescGZIP(), []int{51}
}

func (x *XnUaddressIndicationIEs) GetId() *xnap_commondatatypes.ProtocolIeID {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *XnUaddressIndicationIEs) GetCriticality() xnap_commondatatypes.Criticality {
	if x != nil {
		return x.Criticality
	}
	return xnap_commondatatypes.Criticality(0)
}

func (x *XnUaddressIndicationIEs) GetValue() *XnUaddressIndicationIEsValue {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:1289
// @inject_tag: aper:"valueExt"
// {XnUAddressIndication}
type XnUaddressIndication struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProtocolIes []*XnUaddressIndicationIEs `protobuf:"bytes,1,rep,name=protocol_ies,json=protocolIEs,proto3" json:"protocol_ies,omitempty"`
}

func (x *XnUaddressIndication) Reset() {
	*x = XnUaddressIndication{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *XnUaddressIndication) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*XnUaddressIndication) ProtoMessage() {}

func (x *XnUaddressIndication) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use XnUaddressIndication.ProtoReflect.Descriptor instead.
func (*XnUaddressIndication) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_pdu_contents_proto_rawDescGZIP(), []int{52}
}

func (x *XnUaddressIndication) GetProtocolIes() []*XnUaddressIndicationIEs {
	if x != nil {
		return x.ProtocolIes
	}
	return nil
}

// value set from xnap_v1.asn1:1313
// {SNodeAdditionRequest-IEs&Value}
type SnodeAdditionRequestIEsValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// value set translated as choice from xnap_v1.asn1:1313
	//
	// Types that are assignable to SnodeAdditionRequestIes:
	//	*SnodeAdditionRequestIEsValue_IdMNgRannodeUexnApid
	//	*SnodeAdditionRequestIEsValue_IdUesecurityCapabilities
	//	*SnodeAdditionRequestIEsValue_IdSNgRannodeSecurityKey
	//	*SnodeAdditionRequestIEsValue_IdSNgRannodeUeAmbr
	//	*SnodeAdditionRequestIEsValue_IdSelectedPlmn
	//	*SnodeAdditionRequestIEsValue_IdMobilityRestrictionList
	//	*SnodeAdditionRequestIEsValue_IdIndexToRatFrequSelectionPriority
	//	*SnodeAdditionRequestIEsValue_IdPdusessionToBeAddedAddReq
	//	*SnodeAdditionRequestIEsValue_IdMnToSnContainer
	//	*SnodeAdditionRequestIEsValue_IdSNgRannodeUexnApid
	//	*SnodeAdditionRequestIEsValue_IdExpectedUebehaviour
	//	*SnodeAdditionRequestIEsValue_IdRequestedSplitSrb
	//	*SnodeAdditionRequestIEsValue_IdPcellId
	//	*SnodeAdditionRequestIEsValue_IdDesiredActNotificationLevel
	//	*SnodeAdditionRequestIEsValue_IdAvailableDrbids
	//	*SnodeAdditionRequestIEsValue_IdSNgRannodeMaxIpdataRateUl
	//	*SnodeAdditionRequestIEsValue_IdSNgRannodeMaxIpdataRateDl
	//	*SnodeAdditionRequestIEsValue_IdLocationInformationSnreporting
	//	*SnodeAdditionRequestIEsValue_IdMrDcResourceCoordinationInfo
	//	*SnodeAdditionRequestIEsValue_IdMaskedImeisv
	//	*SnodeAdditionRequestIEsValue_IdNeDcTdmPattern
	//	*SnodeAdditionRequestIEsValue_IdSNgRannodeAdditionTriggerInd
	//	*SnodeAdditionRequestIEsValue_IdTraceActivation
	//	*SnodeAdditionRequestIEsValue_IdRequestedFastMcgrecoveryViaSrb3
	//	*SnodeAdditionRequestIEsValue_IdUeradioCapabilityId
	//	*SnodeAdditionRequestIEsValue_IdSourceNgRanNodeId
	SnodeAdditionRequestIes isSnodeAdditionRequestIEsValue_SnodeAdditionRequestIes `protobuf_oneof:"snode_addition_request_ies"`
}

func (x *SnodeAdditionRequestIEsValue) Reset() {
	*x = SnodeAdditionRequestIEsValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SnodeAdditionRequestIEsValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SnodeAdditionRequestIEsValue) ProtoMessage() {}

func (x *SnodeAdditionRequestIEsValue) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SnodeAdditionRequestIEsValue.ProtoReflect.Descriptor instead.
func (*SnodeAdditionRequestIEsValue) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_pdu_contents_proto_rawDescGZIP(), []int{53}
}

func (m *SnodeAdditionRequestIEsValue) GetSnodeAdditionRequestIes() isSnodeAdditionRequestIEsValue_SnodeAdditionRequestIes {
	if m != nil {
		return m.SnodeAdditionRequestIes
	}
	return nil
}

func (x *SnodeAdditionRequestIEsValue) GetIdMNgRannodeUexnApid() *xnap_ies.NgRAnnodeUexnApid {
	if x, ok := x.GetSnodeAdditionRequestIes().(*SnodeAdditionRequestIEsValue_IdMNgRannodeUexnApid); ok {
		return x.IdMNgRannodeUexnApid
	}
	return nil
}

func (x *SnodeAdditionRequestIEsValue) GetIdUesecurityCapabilities() *xnap_ies.UesecurityCapabilities {
	if x, ok := x.GetSnodeAdditionRequestIes().(*SnodeAdditionRequestIEsValue_IdUesecurityCapabilities); ok {
		return x.IdUesecurityCapabilities
	}
	return nil
}

func (x *SnodeAdditionRequestIEsValue) GetIdSNgRannodeSecurityKey() *xnap_ies.SNGRAnnodeSecurityKey {
	if x, ok := x.GetSnodeAdditionRequestIes().(*SnodeAdditionRequestIEsValue_IdSNgRannodeSecurityKey); ok {
		return x.IdSNgRannodeSecurityKey
	}
	return nil
}

func (x *SnodeAdditionRequestIEsValue) GetIdSNgRannodeUeAmbr() *xnap_ies.UeaggregateMaximumBitRate {
	if x, ok := x.GetSnodeAdditionRequestIes().(*SnodeAdditionRequestIEsValue_IdSNgRannodeUeAmbr); ok {
		return x.IdSNgRannodeUeAmbr
	}
	return nil
}

func (x *SnodeAdditionRequestIEsValue) GetIdSelectedPlmn() *xnap_ies.PlmnIdentity {
	if x, ok := x.GetSnodeAdditionRequestIes().(*SnodeAdditionRequestIEsValue_IdSelectedPlmn); ok {
		return x.IdSelectedPlmn
	}
	return nil
}

func (x *SnodeAdditionRequestIEsValue) GetIdMobilityRestrictionList() *xnap_ies.MobilityRestrictionList {
	if x, ok := x.GetSnodeAdditionRequestIes().(*SnodeAdditionRequestIEsValue_IdMobilityRestrictionList); ok {
		return x.IdMobilityRestrictionList
	}
	return nil
}

func (x *SnodeAdditionRequestIEsValue) GetIdIndexToRatFrequSelectionPriority() *xnap_ies.RfspIndex {
	if x, ok := x.GetSnodeAdditionRequestIes().(*SnodeAdditionRequestIEsValue_IdIndexToRatFrequSelectionPriority); ok {
		return x.IdIndexToRatFrequSelectionPriority
	}
	return nil
}

func (x *SnodeAdditionRequestIEsValue) GetIdPdusessionToBeAddedAddReq() *PdusessionToBeAddedAddReq {
	if x, ok := x.GetSnodeAdditionRequestIes().(*SnodeAdditionRequestIEsValue_IdPdusessionToBeAddedAddReq); ok {
		return x.IdPdusessionToBeAddedAddReq
	}
	return nil
}

func (x *SnodeAdditionRequestIEsValue) GetIdMnToSnContainer() string {
	if x, ok := x.GetSnodeAdditionRequestIes().(*SnodeAdditionRequestIEsValue_IdMnToSnContainer); ok {
		return x.IdMnToSnContainer
	}
	return ""
}

func (x *SnodeAdditionRequestIEsValue) GetIdSNgRannodeUexnApid() *xnap_ies.NgRAnnodeUexnApid {
	if x, ok := x.GetSnodeAdditionRequestIes().(*SnodeAdditionRequestIEsValue_IdSNgRannodeUexnApid); ok {
		return x.IdSNgRannodeUexnApid
	}
	return nil
}

func (x *SnodeAdditionRequestIEsValue) GetIdExpectedUebehaviour() *xnap_ies.ExpectedUebehaviour {
	if x, ok := x.GetSnodeAdditionRequestIes().(*SnodeAdditionRequestIEsValue_IdExpectedUebehaviour); ok {
		return x.IdExpectedUebehaviour
	}
	return nil
}

func (x *SnodeAdditionRequestIEsValue) GetIdRequestedSplitSrb() xnap_ies.SplitSrbsTypes {
	if x, ok := x.GetSnodeAdditionRequestIes().(*SnodeAdditionRequestIEsValue_IdRequestedSplitSrb); ok {
		return x.IdRequestedSplitSrb
	}
	return xnap_ies.SplitSrbsTypes(0)
}

func (x *SnodeAdditionRequestIEsValue) GetIdPcellId() *xnap_ies.GlobalNgRAncellID {
	if x, ok := x.GetSnodeAdditionRequestIes().(*SnodeAdditionRequestIEsValue_IdPcellId); ok {
		return x.IdPcellId
	}
	return nil
}

func (x *SnodeAdditionRequestIEsValue) GetIdDesiredActNotificationLevel() xnap_ies.DesiredActNotificationLevel {
	if x, ok := x.GetSnodeAdditionRequestIes().(*SnodeAdditionRequestIEsValue_IdDesiredActNotificationLevel); ok {
		return x.IdDesiredActNotificationLevel
	}
	return xnap_ies.DesiredActNotificationLevel(0)
}

func (x *SnodeAdditionRequestIEsValue) GetIdAvailableDrbids() *xnap_ies.DrbList {
	if x, ok := x.GetSnodeAdditionRequestIes().(*SnodeAdditionRequestIEsValue_IdAvailableDrbids); ok {
		return x.IdAvailableDrbids
	}
	return nil
}

func (x *SnodeAdditionRequestIEsValue) GetIdSNgRannodeMaxIpdataRateUl() *xnap_ies.BitRate {
	if x, ok := x.GetSnodeAdditionRequestIes().(*SnodeAdditionRequestIEsValue_IdSNgRannodeMaxIpdataRateUl); ok {
		return x.IdSNgRannodeMaxIpdataRateUl
	}
	return nil
}

func (x *SnodeAdditionRequestIEsValue) GetIdSNgRannodeMaxIpdataRateDl() *xnap_ies.BitRate {
	if x, ok := x.GetSnodeAdditionRequestIes().(*SnodeAdditionRequestIEsValue_IdSNgRannodeMaxIpdataRateDl); ok {
		return x.IdSNgRannodeMaxIpdataRateDl
	}
	return nil
}

func (x *SnodeAdditionRequestIEsValue) GetIdLocationInformationSnreporting() xnap_ies.LocationInformationSnreporting {
	if x, ok := x.GetSnodeAdditionRequestIes().(*SnodeAdditionRequestIEsValue_IdLocationInformationSnreporting); ok {
		return x.IdLocationInformationSnreporting
	}
	return xnap_ies.LocationInformationSnreporting(0)
}

func (x *SnodeAdditionRequestIEsValue) GetIdMrDcResourceCoordinationInfo() *xnap_ies.MrDCResourceCoordinationInfo {
	if x, ok := x.GetSnodeAdditionRequestIes().(*SnodeAdditionRequestIEsValue_IdMrDcResourceCoordinationInfo); ok {
		return x.IdMrDcResourceCoordinationInfo
	}
	return nil
}

func (x *SnodeAdditionRequestIEsValue) GetIdMaskedImeisv() *xnap_ies.MaskedImeisv {
	if x, ok := x.GetSnodeAdditionRequestIes().(*SnodeAdditionRequestIEsValue_IdMaskedImeisv); ok {
		return x.IdMaskedImeisv
	}
	return nil
}

func (x *SnodeAdditionRequestIEsValue) GetIdNeDcTdmPattern() *xnap_ies.NeDCTDmPattern {
	if x, ok := x.GetSnodeAdditionRequestIes().(*SnodeAdditionRequestIEsValue_IdNeDcTdmPattern); ok {
		return x.IdNeDcTdmPattern
	}
	return nil
}

func (x *SnodeAdditionRequestIEsValue) GetIdSNgRannodeAdditionTriggerInd() xnap_ies.SNGRAnnodeAdditionTriggerInd {
	if x, ok := x.GetSnodeAdditionRequestIes().(*SnodeAdditionRequestIEsValue_IdSNgRannodeAdditionTriggerInd); ok {
		return x.IdSNgRannodeAdditionTriggerInd
	}
	return xnap_ies.SNGRAnnodeAdditionTriggerInd(0)
}

func (x *SnodeAdditionRequestIEsValue) GetIdTraceActivation() *xnap_ies.TraceActivation {
	if x, ok := x.GetSnodeAdditionRequestIes().(*SnodeAdditionRequestIEsValue_IdTraceActivation); ok {
		return x.IdTraceActivation
	}
	return nil
}

func (x *SnodeAdditionRequestIEsValue) GetIdRequestedFastMcgrecoveryViaSrb3() RequestedFastMcgrecoveryViaSrb3 {
	if x, ok := x.GetSnodeAdditionRequestIes().(*SnodeAdditionRequestIEsValue_IdRequestedFastMcgrecoveryViaSrb3); ok {
		return x.IdRequestedFastMcgrecoveryViaSrb3
	}
	return RequestedFastMcgrecoveryViaSrb3_REQUESTED_FAST_MCGRECOVERY_VIA_SRB3_TRUE
}

func (x *SnodeAdditionRequestIEsValue) GetIdUeradioCapabilityId() *xnap_ies.UeradioCapabilityId {
	if x, ok := x.GetSnodeAdditionRequestIes().(*SnodeAdditionRequestIEsValue_IdUeradioCapabilityId); ok {
		return x.IdUeradioCapabilityId
	}
	return nil
}

func (x *SnodeAdditionRequestIEsValue) GetIdSourceNgRanNodeId() *xnap_ies.GlobalNgRAnnodeID {
	if x, ok := x.GetSnodeAdditionRequestIes().(*SnodeAdditionRequestIEsValue_IdSourceNgRanNodeId); ok {
		return x.IdSourceNgRanNodeId
	}
	return nil
}

type isSnodeAdditionRequestIEsValue_SnodeAdditionRequestIes interface {
	isSnodeAdditionRequestIEsValue_SnodeAdditionRequestIes()
}

type SnodeAdditionRequestIEsValue_IdMNgRannodeUexnApid struct {
	// @inject_tag: aper:"choiceIdx:1,"
	IdMNgRannodeUexnApid *xnap_ies.NgRAnnodeUexnApid `protobuf:"bytes,1,opt,name=id_m_ng_rannode_uexn_apid,json=id-M-NG-RANnodeUEXnAPID,proto3,oneof" aper:"choiceIdx:1,"`
}

type SnodeAdditionRequestIEsValue_IdUesecurityCapabilities struct {
	// @inject_tag: aper:"choiceIdx:2,valueExt,"
	IdUesecurityCapabilities *xnap_ies.UesecurityCapabilities `protobuf:"bytes,2,opt,name=id_uesecurity_capabilities,json=id-UESecurityCapabilities,proto3,oneof" aper:"choiceIdx:2,valueExt,"`
}

type SnodeAdditionRequestIEsValue_IdSNgRannodeSecurityKey struct {
	// @inject_tag: aper:"choiceIdx:3,"
	IdSNgRannodeSecurityKey *xnap_ies.SNGRAnnodeSecurityKey `protobuf:"bytes,3,opt,name=id_s_ng_rannode_security_key,json=id-s-ng-RANnode-SecurityKey,proto3,oneof" aper:"choiceIdx:3,"`
}

type SnodeAdditionRequestIEsValue_IdSNgRannodeUeAmbr struct {
	// @inject_tag: aper:"choiceIdx:4,valueExt,"
	IdSNgRannodeUeAmbr *xnap_ies.UeaggregateMaximumBitRate `protobuf:"bytes,4,opt,name=id_s_ng_rannode_ue_ambr,json=id-S-NG-RANnodeUE-AMBR,proto3,oneof" aper:"choiceIdx:4,valueExt,"`
}

type SnodeAdditionRequestIEsValue_IdSelectedPlmn struct {
	// @inject_tag: aper:"choiceIdx:5,"
	IdSelectedPlmn *xnap_ies.PlmnIdentity `protobuf:"bytes,5,opt,name=id_selected_plmn,json=id-selectedPLMN,proto3,oneof" aper:"choiceIdx:5,"`
}

type SnodeAdditionRequestIEsValue_IdMobilityRestrictionList struct {
	// @inject_tag: aper:"choiceIdx:6,valueExt,"
	IdMobilityRestrictionList *xnap_ies.MobilityRestrictionList `protobuf:"bytes,6,opt,name=id_mobility_restriction_list,json=id-MobilityRestrictionList,proto3,oneof" aper:"choiceIdx:6,valueExt,"`
}

type SnodeAdditionRequestIEsValue_IdIndexToRatFrequSelectionPriority struct {
	// @inject_tag: aper:"choiceIdx:7,"
	IdIndexToRatFrequSelectionPriority *xnap_ies.RfspIndex `protobuf:"bytes,7,opt,name=id_index_to_rat_frequ_selection_priority,json=id-indexToRatFrequSelectionPriority,proto3,oneof" aper:"choiceIdx:7,"`
}

type SnodeAdditionRequestIEsValue_IdPdusessionToBeAddedAddReq struct {
	// @inject_tag: aper:"choiceIdx:8,"
	IdPdusessionToBeAddedAddReq *PdusessionToBeAddedAddReq `protobuf:"bytes,8,opt,name=id_pdusession_to_be_added_add_req,json=id-PDUSessionToBeAddedAddReq,proto3,oneof" aper:"choiceIdx:8,"`
}

type SnodeAdditionRequestIEsValue_IdMnToSnContainer struct {
	// @inject_tag: aper:"choiceIdx:9,"
	IdMnToSnContainer string `protobuf:"bytes,9,opt,name=id_mn_to_sn_container,json=id-MN-to-SN-Container,proto3,oneof" aper:"choiceIdx:9,"`
}

type SnodeAdditionRequestIEsValue_IdSNgRannodeUexnApid struct {
	// @inject_tag: aper:"choiceIdx:10,"
	IdSNgRannodeUexnApid *xnap_ies.NgRAnnodeUexnApid `protobuf:"bytes,10,opt,name=id_s_ng_rannode_uexn_apid,json=id-S-NG-RANnodeUEXnAPID,proto3,oneof" aper:"choiceIdx:10,"`
}

type SnodeAdditionRequestIEsValue_IdExpectedUebehaviour struct {
	// @inject_tag: aper:"choiceIdx:11,valueExt,"
	IdExpectedUebehaviour *xnap_ies.ExpectedUebehaviour `protobuf:"bytes,11,opt,name=id_expected_uebehaviour,json=id-ExpectedUEBehaviour,proto3,oneof" aper:"choiceIdx:11,valueExt,"`
}

type SnodeAdditionRequestIEsValue_IdRequestedSplitSrb struct {
	// @inject_tag: aper:"choiceIdx:12,valueExt,valueLB:0,valueUB:2,"
	IdRequestedSplitSrb xnap_ies.SplitSrbsTypes `protobuf:"varint,12,opt,name=id_requested_split_srb,json=id-requestedSplitSRB,proto3,enum=xnap.v1.SplitSrbsTypes,oneof" aper:"choiceIdx:12,valueExt,valueLB:0,valueUB:2,"`
}

type SnodeAdditionRequestIEsValue_IdPcellId struct {
	// @inject_tag: aper:"choiceIdx:13,valueExt,"
	IdPcellId *xnap_ies.GlobalNgRAncellID `protobuf:"bytes,13,opt,name=id_pcell_id,json=id-PCellID,proto3,oneof" aper:"choiceIdx:13,valueExt,"`
}

type SnodeAdditionRequestIEsValue_IdDesiredActNotificationLevel struct {
	// @inject_tag: aper:"choiceIdx:14,valueExt,valueLB:0,valueUB:3,"
	IdDesiredActNotificationLevel xnap_ies.DesiredActNotificationLevel `protobuf:"varint,14,opt,name=id_desired_act_notification_level,json=id-DesiredActNotificationLevel,proto3,enum=xnap.v1.DesiredActNotificationLevel,oneof" aper:"choiceIdx:14,valueExt,valueLB:0,valueUB:3,"`
}

type SnodeAdditionRequestIEsValue_IdAvailableDrbids struct {
	// @inject_tag: aper:"choiceIdx:15,"
	IdAvailableDrbids *xnap_ies.DrbList `protobuf:"bytes,15,opt,name=id_available_drbids,json=id-AvailableDRBIDs,proto3,oneof" aper:"choiceIdx:15,"`
}

type SnodeAdditionRequestIEsValue_IdSNgRannodeMaxIpdataRateUl struct {
	// @inject_tag: aper:"choiceIdx:16,"
	IdSNgRannodeMaxIpdataRateUl *xnap_ies.BitRate `protobuf:"bytes,16,opt,name=id_s_ng_rannode_max_ipdata_rate_ul,json=id-S-NG-RANnodeMaxIPDataRate-UL,proto3,oneof" aper:"choiceIdx:16,"`
}

type SnodeAdditionRequestIEsValue_IdSNgRannodeMaxIpdataRateDl struct {
	// @inject_tag: aper:"choiceIdx:17,"
	IdSNgRannodeMaxIpdataRateDl *xnap_ies.BitRate `protobuf:"bytes,17,opt,name=id_s_ng_rannode_max_ipdata_rate_dl,json=id-S-NG-RANnodeMaxIPDataRate-DL,proto3,oneof" aper:"choiceIdx:17,"`
}

type SnodeAdditionRequestIEsValue_IdLocationInformationSnreporting struct {
	// @inject_tag: aper:"choiceIdx:18,valueExt,valueLB:0,valueUB:0,"
	IdLocationInformationSnreporting xnap_ies.LocationInformationSnreporting `protobuf:"varint,18,opt,name=id_location_information_snreporting,json=id-LocationInformationSNReporting,proto3,enum=xnap.v1.LocationInformationSnreporting,oneof" aper:"choiceIdx:18,valueExt,valueLB:0,valueUB:0,"`
}

type SnodeAdditionRequestIEsValue_IdMrDcResourceCoordinationInfo struct {
	// @inject_tag: aper:"choiceIdx:19,valueExt,"
	IdMrDcResourceCoordinationInfo *xnap_ies.MrDCResourceCoordinationInfo `protobuf:"bytes,19,opt,name=id_mr_dc_resource_coordination_info,json=id-MR-DC-ResourceCoordinationInfo,proto3,oneof" aper:"choiceIdx:19,valueExt,"`
}

type SnodeAdditionRequestIEsValue_IdMaskedImeisv struct {
	// @inject_tag: aper:"choiceIdx:20,"
	IdMaskedImeisv *xnap_ies.MaskedImeisv `protobuf:"bytes,20,opt,name=id_masked_imeisv,json=id-MaskedIMEISV,proto3,oneof" aper:"choiceIdx:20,"`
}

type SnodeAdditionRequestIEsValue_IdNeDcTdmPattern struct {
	// @inject_tag: aper:"choiceIdx:21,valueExt,"
	IdNeDcTdmPattern *xnap_ies.NeDCTDmPattern `protobuf:"bytes,21,opt,name=id_ne_dc_tdm_pattern,json=id-NE-DC-TDM-Pattern,proto3,oneof" aper:"choiceIdx:21,valueExt,"`
}

type SnodeAdditionRequestIEsValue_IdSNgRannodeAdditionTriggerInd struct {
	// @inject_tag: aper:"choiceIdx:22,valueExt,valueLB:0,valueUB:2,"
	IdSNgRannodeAdditionTriggerInd xnap_ies.SNGRAnnodeAdditionTriggerInd `protobuf:"varint,22,opt,name=id_s_ng_rannode_addition_trigger_ind,json=id-S-NG-RANnode-Addition-Trigger-Ind,proto3,enum=xnap.v1.SNGRAnnodeAdditionTriggerInd,oneof" aper:"choiceIdx:22,valueExt,valueLB:0,valueUB:2,"`
}

type SnodeAdditionRequestIEsValue_IdTraceActivation struct {
	// @inject_tag: aper:"choiceIdx:23,valueExt,"
	IdTraceActivation *xnap_ies.TraceActivation `protobuf:"bytes,23,opt,name=id_trace_activation,json=id-TraceActivation,proto3,oneof" aper:"choiceIdx:23,valueExt,"`
}

type SnodeAdditionRequestIEsValue_IdRequestedFastMcgrecoveryViaSrb3 struct {
	// @inject_tag: aper:"choiceIdx:24,valueExt,valueLB:0,valueUB:0,"
	IdRequestedFastMcgrecoveryViaSrb3 RequestedFastMcgrecoveryViaSrb3 `protobuf:"varint,24,opt,name=id_requested_fast_mcgrecovery_via_srb3,json=id-RequestedFastMCGRecoveryViaSRB3,proto3,enum=xnap.v1.RequestedFastMcgrecoveryViaSrb3,oneof" aper:"choiceIdx:24,valueExt,valueLB:0,valueUB:0,"`
}

type SnodeAdditionRequestIEsValue_IdUeradioCapabilityId struct {
	// @inject_tag: aper:"choiceIdx:25,"
	IdUeradioCapabilityId *xnap_ies.UeradioCapabilityId `protobuf:"bytes,25,opt,name=id_ueradio_capability_id,json=id-UERadioCapabilityID,proto3,oneof" aper:"choiceIdx:25,"`
}

type SnodeAdditionRequestIEsValue_IdSourceNgRanNodeId struct {
	// @inject_tag: aper:"choiceIdx:26,"
	IdSourceNgRanNodeId *xnap_ies.GlobalNgRAnnodeID `protobuf:"bytes,26,opt,name=id_source_ng_ran_node_id,json=id-SourceNG-RAN-node-ID,proto3,oneof" aper:"choiceIdx:26,"`
}

func (*SnodeAdditionRequestIEsValue_IdMNgRannodeUexnApid) isSnodeAdditionRequestIEsValue_SnodeAdditionRequestIes() {
}

func (*SnodeAdditionRequestIEsValue_IdUesecurityCapabilities) isSnodeAdditionRequestIEsValue_SnodeAdditionRequestIes() {
}

func (*SnodeAdditionRequestIEsValue_IdSNgRannodeSecurityKey) isSnodeAdditionRequestIEsValue_SnodeAdditionRequestIes() {
}

func (*SnodeAdditionRequestIEsValue_IdSNgRannodeUeAmbr) isSnodeAdditionRequestIEsValue_SnodeAdditionRequestIes() {
}

func (*SnodeAdditionRequestIEsValue_IdSelectedPlmn) isSnodeAdditionRequestIEsValue_SnodeAdditionRequestIes() {
}

func (*SnodeAdditionRequestIEsValue_IdMobilityRestrictionList) isSnodeAdditionRequestIEsValue_SnodeAdditionRequestIes() {
}

func (*SnodeAdditionRequestIEsValue_IdIndexToRatFrequSelectionPriority) isSnodeAdditionRequestIEsValue_SnodeAdditionRequestIes() {
}

func (*SnodeAdditionRequestIEsValue_IdPdusessionToBeAddedAddReq) isSnodeAdditionRequestIEsValue_SnodeAdditionRequestIes() {
}

func (*SnodeAdditionRequestIEsValue_IdMnToSnContainer) isSnodeAdditionRequestIEsValue_SnodeAdditionRequestIes() {
}

func (*SnodeAdditionRequestIEsValue_IdSNgRannodeUexnApid) isSnodeAdditionRequestIEsValue_SnodeAdditionRequestIes() {
}

func (*SnodeAdditionRequestIEsValue_IdExpectedUebehaviour) isSnodeAdditionRequestIEsValue_SnodeAdditionRequestIes() {
}

func (*SnodeAdditionRequestIEsValue_IdRequestedSplitSrb) isSnodeAdditionRequestIEsValue_SnodeAdditionRequestIes() {
}

func (*SnodeAdditionRequestIEsValue_IdPcellId) isSnodeAdditionRequestIEsValue_SnodeAdditionRequestIes() {
}

func (*SnodeAdditionRequestIEsValue_IdDesiredActNotificationLevel) isSnodeAdditionRequestIEsValue_SnodeAdditionRequestIes() {
}

func (*SnodeAdditionRequestIEsValue_IdAvailableDrbids) isSnodeAdditionRequestIEsValue_SnodeAdditionRequestIes() {
}

func (*SnodeAdditionRequestIEsValue_IdSNgRannodeMaxIpdataRateUl) isSnodeAdditionRequestIEsValue_SnodeAdditionRequestIes() {
}

func (*SnodeAdditionRequestIEsValue_IdSNgRannodeMaxIpdataRateDl) isSnodeAdditionRequestIEsValue_SnodeAdditionRequestIes() {
}

func (*SnodeAdditionRequestIEsValue_IdLocationInformationSnreporting) isSnodeAdditionRequestIEsValue_SnodeAdditionRequestIes() {
}

func (*SnodeAdditionRequestIEsValue_IdMrDcResourceCoordinationInfo) isSnodeAdditionRequestIEsValue_SnodeAdditionRequestIes() {
}

func (*SnodeAdditionRequestIEsValue_IdMaskedImeisv) isSnodeAdditionRequestIEsValue_SnodeAdditionRequestIes() {
}

func (*SnodeAdditionRequestIEsValue_IdNeDcTdmPattern) isSnodeAdditionRequestIEsValue_SnodeAdditionRequestIes() {
}

func (*SnodeAdditionRequestIEsValue_IdSNgRannodeAdditionTriggerInd) isSnodeAdditionRequestIEsValue_SnodeAdditionRequestIes() {
}

func (*SnodeAdditionRequestIEsValue_IdTraceActivation) isSnodeAdditionRequestIEsValue_SnodeAdditionRequestIes() {
}

func (*SnodeAdditionRequestIEsValue_IdRequestedFastMcgrecoveryViaSrb3) isSnodeAdditionRequestIEsValue_SnodeAdditionRequestIes() {
}

func (*SnodeAdditionRequestIEsValue_IdUeradioCapabilityId) isSnodeAdditionRequestIEsValue_SnodeAdditionRequestIes() {
}

func (*SnodeAdditionRequestIEsValue_IdSourceNgRanNodeId) isSnodeAdditionRequestIEsValue_SnodeAdditionRequestIes() {
}

// concrete instance(s) of class XNAP-PROTOCOL-IES from xnap_v1.asn1:1313
// @inject_tag: aper:"valueExt"
// {SNodeAdditionRequest-IEs}
type SnodeAdditionRequestIEs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"unique,"
	Id *xnap_commondatatypes.ProtocolIeID `protobuf:"bytes,1,opt,name=id,json=&id,proto3" json:"id,omitempty" aper:"unique,"`
	// @inject_tag: aper:"valueLB:0,valueUB:2,"
	Criticality xnap_commondatatypes.Criticality `protobuf:"varint,2,opt,name=criticality,json=&criticality,proto3,enum=xnap.v1.Criticality" json:"criticality,omitempty" aper:"valueLB:0,valueUB:2,"`
	// @inject_tag: aper:"canonicalOrder,"
	Value *SnodeAdditionRequestIEsValue `protobuf:"bytes,3,opt,name=value,json=&Value,proto3" json:"value,omitempty" aper:"canonicalOrder,"`
}

func (x *SnodeAdditionRequestIEs) Reset() {
	*x = SnodeAdditionRequestIEs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SnodeAdditionRequestIEs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SnodeAdditionRequestIEs) ProtoMessage() {}

func (x *SnodeAdditionRequestIEs) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SnodeAdditionRequestIEs.ProtoReflect.Descriptor instead.
func (*SnodeAdditionRequestIEs) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_pdu_contents_proto_rawDescGZIP(), []int{54}
}

func (x *SnodeAdditionRequestIEs) GetId() *xnap_commondatatypes.ProtocolIeID {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *SnodeAdditionRequestIEs) GetCriticality() xnap_commondatatypes.Criticality {
	if x != nil {
		return x.Criticality
	}
	return xnap_commondatatypes.Criticality(0)
}

func (x *SnodeAdditionRequestIEs) GetValue() *SnodeAdditionRequestIEsValue {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:1309
// @inject_tag: aper:"valueExt"
// {SNodeAdditionRequest}
type SnodeAdditionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProtocolIes []*SnodeAdditionRequestIEs `protobuf:"bytes,1,rep,name=protocol_ies,json=protocolIEs,proto3" json:"protocol_ies,omitempty"`
}

func (x *SnodeAdditionRequest) Reset() {
	*x = SnodeAdditionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SnodeAdditionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SnodeAdditionRequest) ProtoMessage() {}

func (x *SnodeAdditionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SnodeAdditionRequest.ProtoReflect.Descriptor instead.
func (*SnodeAdditionRequest) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_pdu_contents_proto_rawDescGZIP(), []int{55}
}

func (x *SnodeAdditionRequest) GetProtocolIes() []*SnodeAdditionRequestIEs {
	if x != nil {
		return x.ProtocolIes
	}
	return nil
}

// sequence from xnap_v1.asn1:1346
// {PDUSessionToBeAddedAddReq}
type PdusessionToBeAddedAddReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"valueExt,sizeLB:1,sizeUB:256,"
	Value []*PdusessionToBeAddedAddReqItem `protobuf:"bytes,1,rep,name=value,proto3" json:"value,omitempty" aper:"valueExt,sizeLB:1,sizeUB:256,"`
}

func (x *PdusessionToBeAddedAddReq) Reset() {
	*x = PdusessionToBeAddedAddReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PdusessionToBeAddedAddReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PdusessionToBeAddedAddReq) ProtoMessage() {}

func (x *PdusessionToBeAddedAddReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PdusessionToBeAddedAddReq.ProtoReflect.Descriptor instead.
func (*PdusessionToBeAddedAddReq) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_pdu_contents_proto_rawDescGZIP(), []int{56}
}

func (x *PdusessionToBeAddedAddReq) GetValue() []*PdusessionToBeAddedAddReqItem {
	if x != nil {
		return x.Value
	}
	return nil
}

// value set from xnap_v1.asn1:1359
// {PDUSessionToBeAddedAddReq-Item-ExtIEs}
type PdusessionToBeAddedAddReqItemExtIes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *emptypb.Empty `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *PdusessionToBeAddedAddReqItemExtIes) Reset() {
	*x = PdusessionToBeAddedAddReqItemExtIes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PdusessionToBeAddedAddReqItemExtIes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PdusessionToBeAddedAddReqItemExtIes) ProtoMessage() {}

func (x *PdusessionToBeAddedAddReqItemExtIes) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PdusessionToBeAddedAddReqItemExtIes.ProtoReflect.Descriptor instead.
func (*PdusessionToBeAddedAddReqItemExtIes) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_pdu_contents_proto_rawDescGZIP(), []int{57}
}

func (x *PdusessionToBeAddedAddReqItemExtIes) GetValue() *emptypb.Empty {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:1347
// @inject_tag: aper:"valueExt"
// {PDUSessionToBeAddedAddReq-Item}
type PdusessionToBeAddedAddReqItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PduSessionId *xnap_ies.PdusessionID `protobuf:"bytes,1,opt,name=pdu_session_id,json=pduSessionId,proto3" json:"pdu_session_id,omitempty"`
	// @inject_tag: aper:"valueExt,"
	SNssai *xnap_ies.SNSsai `protobuf:"bytes,2,opt,name=s_nssai,json=s-NSSAI,proto3" json:"s_nssai,omitempty" aper:"valueExt,"`
	// @inject_tag: aper:"optional,valueExt,"
	SNPdusessionAmbr *xnap_ies.PdusessionAggregateMaximumBitRate `protobuf:"bytes,3,opt,name=s_n_pdusession_ambr,json=sN-PDUSessionAMBR,proto3,oneof" json:"s_n_pdusession_ambr,omitempty" aper:"optional,valueExt,"`
	// @inject_tag: aper:"optional,valueExt,"
	SnTerminated *xnap_ies.PdusessionResourceSetupInfoSNterminated `protobuf:"bytes,4,opt,name=sn_terminated,json=sn-terminated,proto3,oneof" json:"sn_terminated,omitempty" aper:"optional,valueExt,"`
	// @inject_tag: aper:"optional,valueExt,"
	MnTerminated *xnap_ies.PdusessionResourceSetupInfoMNterminated `protobuf:"bytes,5,opt,name=mn_terminated,json=mn-terminated,proto3,oneof" json:"mn_terminated,omitempty" aper:"optional,valueExt,"`
	// @inject_tag: aper:"optional,sizeLB:1,"
	IEExtension []*PdusessionToBeAddedAddReqItemExtIes `protobuf:"bytes,6,rep,name=i_e_extension,json=iE-Extension,proto3" json:"i_e_extension,omitempty" aper:"optional,sizeLB:1,"`
}

func (x *PdusessionToBeAddedAddReqItem) Reset() {
	*x = PdusessionToBeAddedAddReqItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PdusessionToBeAddedAddReqItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PdusessionToBeAddedAddReqItem) ProtoMessage() {}

func (x *PdusessionToBeAddedAddReqItem) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PdusessionToBeAddedAddReqItem.ProtoReflect.Descriptor instead.
func (*PdusessionToBeAddedAddReqItem) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_pdu_contents_proto_rawDescGZIP(), []int{58}
}

func (x *PdusessionToBeAddedAddReqItem) GetPduSessionId() *xnap_ies.PdusessionID {
	if x != nil {
		return x.PduSessionId
	}
	return nil
}

func (x *PdusessionToBeAddedAddReqItem) GetSNssai() *xnap_ies.SNSsai {
	if x != nil {
		return x.SNssai
	}
	return nil
}

func (x *PdusessionToBeAddedAddReqItem) GetSNPdusessionAmbr() *xnap_ies.PdusessionAggregateMaximumBitRate {
	if x != nil {
		return x.SNPdusessionAmbr
	}
	return nil
}

func (x *PdusessionToBeAddedAddReqItem) GetSnTerminated() *xnap_ies.PdusessionResourceSetupInfoSNterminated {
	if x != nil {
		return x.SnTerminated
	}
	return nil
}

func (x *PdusessionToBeAddedAddReqItem) GetMnTerminated() *xnap_ies.PdusessionResourceSetupInfoMNterminated {
	if x != nil {
		return x.MnTerminated
	}
	return nil
}

func (x *PdusessionToBeAddedAddReqItem) GetIEExtension() []*PdusessionToBeAddedAddReqItemExtIes {
	if x != nil {
		return x.IEExtension
	}
	return nil
}

// value set from xnap_v1.asn1:1376
// {SNodeAdditionRequestAcknowledge-IEs&Value}
type SnodeAdditionRequestAcknowledgeIEsValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// value set translated as choice from xnap_v1.asn1:1376
	//
	// Types that are assignable to SnodeAdditionRequestAcknowledgeIes:
	//	*SnodeAdditionRequestAcknowledgeIEsValue_IdMNgRannodeUexnApid
	//	*SnodeAdditionRequestAcknowledgeIEsValue_IdSNgRannodeUexnApid
	//	*SnodeAdditionRequestAcknowledgeIEsValue_IdPdusessionAdmittedAddedAddReqAck
	//	*SnodeAdditionRequestAcknowledgeIEsValue_IdPdusessionNotAdmittedAddReqAck
	//	*SnodeAdditionRequestAcknowledgeIEsValue_IdSnToMnContainer
	//	*SnodeAdditionRequestAcknowledgeIEsValue_IdAdmittedSplitSrb
	//	*SnodeAdditionRequestAcknowledgeIEsValue_IdRrcconfigIndication
	//	*SnodeAdditionRequestAcknowledgeIEsValue_IdCriticalityDiagnostics
	//	*SnodeAdditionRequestAcknowledgeIEsValue_IdLocationInformationSn
	//	*SnodeAdditionRequestAcknowledgeIEsValue_IdMrDcResourceCoordinationInfo
	//	*SnodeAdditionRequestAcknowledgeIEsValue_IdAvailableFastMcgrecoveryViaSrb3
	//	*SnodeAdditionRequestAcknowledgeIEsValue_IdDirectForwardingPathAvailability
	SnodeAdditionRequestAcknowledgeIes isSnodeAdditionRequestAcknowledgeIEsValue_SnodeAdditionRequestAcknowledgeIes `protobuf_oneof:"snode_addition_request_acknowledge_ies"`
}

func (x *SnodeAdditionRequestAcknowledgeIEsValue) Reset() {
	*x = SnodeAdditionRequestAcknowledgeIEsValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SnodeAdditionRequestAcknowledgeIEsValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SnodeAdditionRequestAcknowledgeIEsValue) ProtoMessage() {}

func (x *SnodeAdditionRequestAcknowledgeIEsValue) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SnodeAdditionRequestAcknowledgeIEsValue.ProtoReflect.Descriptor instead.
func (*SnodeAdditionRequestAcknowledgeIEsValue) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_pdu_contents_proto_rawDescGZIP(), []int{59}
}

func (m *SnodeAdditionRequestAcknowledgeIEsValue) GetSnodeAdditionRequestAcknowledgeIes() isSnodeAdditionRequestAcknowledgeIEsValue_SnodeAdditionRequestAcknowledgeIes {
	if m != nil {
		return m.SnodeAdditionRequestAcknowledgeIes
	}
	return nil
}

func (x *SnodeAdditionRequestAcknowledgeIEsValue) GetIdMNgRannodeUexnApid() *xnap_ies.NgRAnnodeUexnApid {
	if x, ok := x.GetSnodeAdditionRequestAcknowledgeIes().(*SnodeAdditionRequestAcknowledgeIEsValue_IdMNgRannodeUexnApid); ok {
		return x.IdMNgRannodeUexnApid
	}
	return nil
}

func (x *SnodeAdditionRequestAcknowledgeIEsValue) GetIdSNgRannodeUexnApid() *xnap_ies.NgRAnnodeUexnApid {
	if x, ok := x.GetSnodeAdditionRequestAcknowledgeIes().(*SnodeAdditionRequestAcknowledgeIEsValue_IdSNgRannodeUexnApid); ok {
		return x.IdSNgRannodeUexnApid
	}
	return nil
}

func (x *SnodeAdditionRequestAcknowledgeIEsValue) GetIdPdusessionAdmittedAddedAddReqAck() *PdusessionAdmittedAddedAddReqAck {
	if x, ok := x.GetSnodeAdditionRequestAcknowledgeIes().(*SnodeAdditionRequestAcknowledgeIEsValue_IdPdusessionAdmittedAddedAddReqAck); ok {
		return x.IdPdusessionAdmittedAddedAddReqAck
	}
	return nil
}

func (x *SnodeAdditionRequestAcknowledgeIEsValue) GetIdPdusessionNotAdmittedAddReqAck() *PdusessionNotAdmittedAddReqAck {
	if x, ok := x.GetSnodeAdditionRequestAcknowledgeIes().(*SnodeAdditionRequestAcknowledgeIEsValue_IdPdusessionNotAdmittedAddReqAck); ok {
		return x.IdPdusessionNotAdmittedAddReqAck
	}
	return nil
}

func (x *SnodeAdditionRequestAcknowledgeIEsValue) GetIdSnToMnContainer() string {
	if x, ok := x.GetSnodeAdditionRequestAcknowledgeIes().(*SnodeAdditionRequestAcknowledgeIEsValue_IdSnToMnContainer); ok {
		return x.IdSnToMnContainer
	}
	return ""
}

func (x *SnodeAdditionRequestAcknowledgeIEsValue) GetIdAdmittedSplitSrb() xnap_ies.SplitSrbsTypes {
	if x, ok := x.GetSnodeAdditionRequestAcknowledgeIes().(*SnodeAdditionRequestAcknowledgeIEsValue_IdAdmittedSplitSrb); ok {
		return x.IdAdmittedSplitSrb
	}
	return xnap_ies.SplitSrbsTypes(0)
}

func (x *SnodeAdditionRequestAcknowledgeIEsValue) GetIdRrcconfigIndication() xnap_ies.RrcconfigIndication {
	if x, ok := x.GetSnodeAdditionRequestAcknowledgeIes().(*SnodeAdditionRequestAcknowledgeIEsValue_IdRrcconfigIndication); ok {
		return x.IdRrcconfigIndication
	}
	return xnap_ies.RrcconfigIndication(0)
}

func (x *SnodeAdditionRequestAcknowledgeIEsValue) GetIdCriticalityDiagnostics() *xnap_ies.CriticalityDiagnostics {
	if x, ok := x.GetSnodeAdditionRequestAcknowledgeIes().(*SnodeAdditionRequestAcknowledgeIEsValue_IdCriticalityDiagnostics); ok {
		return x.IdCriticalityDiagnostics
	}
	return nil
}

func (x *SnodeAdditionRequestAcknowledgeIEsValue) GetIdLocationInformationSn() *xnap_ies.TargetCGi {
	if x, ok := x.GetSnodeAdditionRequestAcknowledgeIes().(*SnodeAdditionRequestAcknowledgeIEsValue_IdLocationInformationSn); ok {
		return x.IdLocationInformationSn
	}
	return nil
}

func (x *SnodeAdditionRequestAcknowledgeIEsValue) GetIdMrDcResourceCoordinationInfo() *xnap_ies.MrDCResourceCoordinationInfo {
	if x, ok := x.GetSnodeAdditionRequestAcknowledgeIes().(*SnodeAdditionRequestAcknowledgeIEsValue_IdMrDcResourceCoordinationInfo); ok {
		return x.IdMrDcResourceCoordinationInfo
	}
	return nil
}

func (x *SnodeAdditionRequestAcknowledgeIEsValue) GetIdAvailableFastMcgrecoveryViaSrb3() AvailableFastMcgrecoveryViaSrb3 {
	if x, ok := x.GetSnodeAdditionRequestAcknowledgeIes().(*SnodeAdditionRequestAcknowledgeIEsValue_IdAvailableFastMcgrecoveryViaSrb3); ok {
		return x.IdAvailableFastMcgrecoveryViaSrb3
	}
	return AvailableFastMcgrecoveryViaSrb3_AVAILABLE_FAST_MCGRECOVERY_VIA_SRB3_TRUE
}

func (x *SnodeAdditionRequestAcknowledgeIEsValue) GetIdDirectForwardingPathAvailability() xnap_ies.DirectForwardingPathAvailability {
	if x, ok := x.GetSnodeAdditionRequestAcknowledgeIes().(*SnodeAdditionRequestAcknowledgeIEsValue_IdDirectForwardingPathAvailability); ok {
		return x.IdDirectForwardingPathAvailability
	}
	return xnap_ies.DirectForwardingPathAvailability(0)
}

type isSnodeAdditionRequestAcknowledgeIEsValue_SnodeAdditionRequestAcknowledgeIes interface {
	isSnodeAdditionRequestAcknowledgeIEsValue_SnodeAdditionRequestAcknowledgeIes()
}

type SnodeAdditionRequestAcknowledgeIEsValue_IdMNgRannodeUexnApid struct {
	// @inject_tag: aper:"choiceIdx:1,"
	IdMNgRannodeUexnApid *xnap_ies.NgRAnnodeUexnApid `protobuf:"bytes,1,opt,name=id_m_ng_rannode_uexn_apid,json=id-M-NG-RANnodeUEXnAPID,proto3,oneof" aper:"choiceIdx:1,"`
}

type SnodeAdditionRequestAcknowledgeIEsValue_IdSNgRannodeUexnApid struct {
	// @inject_tag: aper:"choiceIdx:2,"
	IdSNgRannodeUexnApid *xnap_ies.NgRAnnodeUexnApid `protobuf:"bytes,2,opt,name=id_s_ng_rannode_uexn_apid,json=id-S-NG-RANnodeUEXnAPID,proto3,oneof" aper:"choiceIdx:2,"`
}

type SnodeAdditionRequestAcknowledgeIEsValue_IdPdusessionAdmittedAddedAddReqAck struct {
	// @inject_tag: aper:"choiceIdx:3,"
	IdPdusessionAdmittedAddedAddReqAck *PdusessionAdmittedAddedAddReqAck `protobuf:"bytes,3,opt,name=id_pdusession_admitted_added_add_req_ack,json=id-PDUSessionAdmittedAddedAddReqAck,proto3,oneof" aper:"choiceIdx:3,"`
}

type SnodeAdditionRequestAcknowledgeIEsValue_IdPdusessionNotAdmittedAddReqAck struct {
	// @inject_tag: aper:"choiceIdx:4,valueExt,"
	IdPdusessionNotAdmittedAddReqAck *PdusessionNotAdmittedAddReqAck `protobuf:"bytes,4,opt,name=id_pdusession_not_admitted_add_req_ack,json=id-PDUSessionNotAdmittedAddReqAck,proto3,oneof" aper:"choiceIdx:4,valueExt,"`
}

type SnodeAdditionRequestAcknowledgeIEsValue_IdSnToMnContainer struct {
	// @inject_tag: aper:"choiceIdx:5,"
	IdSnToMnContainer string `protobuf:"bytes,5,opt,name=id_sn_to_mn_container,json=id-SN-to-MN-Container,proto3,oneof" aper:"choiceIdx:5,"`
}

type SnodeAdditionRequestAcknowledgeIEsValue_IdAdmittedSplitSrb struct {
	// @inject_tag: aper:"choiceIdx:6,valueExt,valueLB:0,valueUB:2,"
	IdAdmittedSplitSrb xnap_ies.SplitSrbsTypes `protobuf:"varint,6,opt,name=id_admitted_split_srb,json=id-admittedSplitSRB,proto3,enum=xnap.v1.SplitSrbsTypes,oneof" aper:"choiceIdx:6,valueExt,valueLB:0,valueUB:2,"`
}

type SnodeAdditionRequestAcknowledgeIEsValue_IdRrcconfigIndication struct {
	// @inject_tag: aper:"choiceIdx:7,valueExt,valueLB:0,valueUB:1,"
	IdRrcconfigIndication xnap_ies.RrcconfigIndication `protobuf:"varint,7,opt,name=id_rrcconfig_indication,json=id-RRCConfigIndication,proto3,enum=xnap.v1.RrcconfigIndication,oneof" aper:"choiceIdx:7,valueExt,valueLB:0,valueUB:1,"`
}

type SnodeAdditionRequestAcknowledgeIEsValue_IdCriticalityDiagnostics struct {
	// @inject_tag: aper:"choiceIdx:8,valueExt,"
	IdCriticalityDiagnostics *xnap_ies.CriticalityDiagnostics `protobuf:"bytes,8,opt,name=id_criticality_diagnostics,json=id-CriticalityDiagnostics,proto3,oneof" aper:"choiceIdx:8,valueExt,"`
}

type SnodeAdditionRequestAcknowledgeIEsValue_IdLocationInformationSn struct {
	// @inject_tag: aper:"choiceIdx:9,"
	IdLocationInformationSn *xnap_ies.TargetCGi `protobuf:"bytes,9,opt,name=id_location_information_sn,json=id-LocationInformationSN,proto3,oneof" aper:"choiceIdx:9,"`
}

type SnodeAdditionRequestAcknowledgeIEsValue_IdMrDcResourceCoordinationInfo struct {
	// @inject_tag: aper:"choiceIdx:10,valueExt,"
	IdMrDcResourceCoordinationInfo *xnap_ies.MrDCResourceCoordinationInfo `protobuf:"bytes,10,opt,name=id_mr_dc_resource_coordination_info,json=id-MR-DC-ResourceCoordinationInfo,proto3,oneof" aper:"choiceIdx:10,valueExt,"`
}

type SnodeAdditionRequestAcknowledgeIEsValue_IdAvailableFastMcgrecoveryViaSrb3 struct {
	// @inject_tag: aper:"choiceIdx:11,valueExt,valueLB:0,valueUB:0,"
	IdAvailableFastMcgrecoveryViaSrb3 AvailableFastMcgrecoveryViaSrb3 `protobuf:"varint,11,opt,name=id_available_fast_mcgrecovery_via_srb3,json=id-AvailableFastMCGRecoveryViaSRB3,proto3,enum=xnap.v1.AvailableFastMcgrecoveryViaSrb3,oneof" aper:"choiceIdx:11,valueExt,valueLB:0,valueUB:0,"`
}

type SnodeAdditionRequestAcknowledgeIEsValue_IdDirectForwardingPathAvailability struct {
	// @inject_tag: aper:"choiceIdx:12,valueExt,valueLB:0,valueUB:0,"
	IdDirectForwardingPathAvailability xnap_ies.DirectForwardingPathAvailability `protobuf:"varint,12,opt,name=id_direct_forwarding_path_availability,json=id-DirectForwardingPathAvailability,proto3,enum=xnap.v1.DirectForwardingPathAvailability,oneof" aper:"choiceIdx:12,valueExt,valueLB:0,valueUB:0,"`
}

func (*SnodeAdditionRequestAcknowledgeIEsValue_IdMNgRannodeUexnApid) isSnodeAdditionRequestAcknowledgeIEsValue_SnodeAdditionRequestAcknowledgeIes() {
}

func (*SnodeAdditionRequestAcknowledgeIEsValue_IdSNgRannodeUexnApid) isSnodeAdditionRequestAcknowledgeIEsValue_SnodeAdditionRequestAcknowledgeIes() {
}

func (*SnodeAdditionRequestAcknowledgeIEsValue_IdPdusessionAdmittedAddedAddReqAck) isSnodeAdditionRequestAcknowledgeIEsValue_SnodeAdditionRequestAcknowledgeIes() {
}

func (*SnodeAdditionRequestAcknowledgeIEsValue_IdPdusessionNotAdmittedAddReqAck) isSnodeAdditionRequestAcknowledgeIEsValue_SnodeAdditionRequestAcknowledgeIes() {
}

func (*SnodeAdditionRequestAcknowledgeIEsValue_IdSnToMnContainer) isSnodeAdditionRequestAcknowledgeIEsValue_SnodeAdditionRequestAcknowledgeIes() {
}

func (*SnodeAdditionRequestAcknowledgeIEsValue_IdAdmittedSplitSrb) isSnodeAdditionRequestAcknowledgeIEsValue_SnodeAdditionRequestAcknowledgeIes() {
}

func (*SnodeAdditionRequestAcknowledgeIEsValue_IdRrcconfigIndication) isSnodeAdditionRequestAcknowledgeIEsValue_SnodeAdditionRequestAcknowledgeIes() {
}

func (*SnodeAdditionRequestAcknowledgeIEsValue_IdCriticalityDiagnostics) isSnodeAdditionRequestAcknowledgeIEsValue_SnodeAdditionRequestAcknowledgeIes() {
}

func (*SnodeAdditionRequestAcknowledgeIEsValue_IdLocationInformationSn) isSnodeAdditionRequestAcknowledgeIEsValue_SnodeAdditionRequestAcknowledgeIes() {
}

func (*SnodeAdditionRequestAcknowledgeIEsValue_IdMrDcResourceCoordinationInfo) isSnodeAdditionRequestAcknowledgeIEsValue_SnodeAdditionRequestAcknowledgeIes() {
}

func (*SnodeAdditionRequestAcknowledgeIEsValue_IdAvailableFastMcgrecoveryViaSrb3) isSnodeAdditionRequestAcknowledgeIEsValue_SnodeAdditionRequestAcknowledgeIes() {
}

func (*SnodeAdditionRequestAcknowledgeIEsValue_IdDirectForwardingPathAvailability) isSnodeAdditionRequestAcknowledgeIEsValue_SnodeAdditionRequestAcknowledgeIes() {
}

// concrete instance(s) of class XNAP-PROTOCOL-IES from xnap_v1.asn1:1376
// @inject_tag: aper:"valueExt"
// {SNodeAdditionRequestAcknowledge-IEs}
type SnodeAdditionRequestAcknowledgeIEs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"unique,"
	Id *xnap_commondatatypes.ProtocolIeID `protobuf:"bytes,1,opt,name=id,json=&id,proto3" json:"id,omitempty" aper:"unique,"`
	// @inject_tag: aper:"valueLB:0,valueUB:2,"
	Criticality xnap_commondatatypes.Criticality `protobuf:"varint,2,opt,name=criticality,json=&criticality,proto3,enum=xnap.v1.Criticality" json:"criticality,omitempty" aper:"valueLB:0,valueUB:2,"`
	// @inject_tag: aper:"canonicalOrder,"
	Value *SnodeAdditionRequestAcknowledgeIEsValue `protobuf:"bytes,3,opt,name=value,json=&Value,proto3" json:"value,omitempty" aper:"canonicalOrder,"`
}

func (x *SnodeAdditionRequestAcknowledgeIEs) Reset() {
	*x = SnodeAdditionRequestAcknowledgeIEs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SnodeAdditionRequestAcknowledgeIEs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SnodeAdditionRequestAcknowledgeIEs) ProtoMessage() {}

func (x *SnodeAdditionRequestAcknowledgeIEs) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SnodeAdditionRequestAcknowledgeIEs.ProtoReflect.Descriptor instead.
func (*SnodeAdditionRequestAcknowledgeIEs) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_pdu_contents_proto_rawDescGZIP(), []int{60}
}

func (x *SnodeAdditionRequestAcknowledgeIEs) GetId() *xnap_commondatatypes.ProtocolIeID {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *SnodeAdditionRequestAcknowledgeIEs) GetCriticality() xnap_commondatatypes.Criticality {
	if x != nil {
		return x.Criticality
	}
	return xnap_commondatatypes.Criticality(0)
}

func (x *SnodeAdditionRequestAcknowledgeIEs) GetValue() *SnodeAdditionRequestAcknowledgeIEsValue {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:1372
// @inject_tag: aper:"valueExt"
// {SNodeAdditionRequestAcknowledge}
type SnodeAdditionRequestAcknowledge struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProtocolIes []*SnodeAdditionRequestAcknowledgeIEs `protobuf:"bytes,1,rep,name=protocol_ies,json=protocolIEs,proto3" json:"protocol_ies,omitempty"`
}

func (x *SnodeAdditionRequestAcknowledge) Reset() {
	*x = SnodeAdditionRequestAcknowledge{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SnodeAdditionRequestAcknowledge) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SnodeAdditionRequestAcknowledge) ProtoMessage() {}

func (x *SnodeAdditionRequestAcknowledge) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SnodeAdditionRequestAcknowledge.ProtoReflect.Descriptor instead.
func (*SnodeAdditionRequestAcknowledge) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_pdu_contents_proto_rawDescGZIP(), []int{61}
}

func (x *SnodeAdditionRequestAcknowledge) GetProtocolIes() []*SnodeAdditionRequestAcknowledgeIEs {
	if x != nil {
		return x.ProtocolIes
	}
	return nil
}

// sequence from xnap_v1.asn1:1394
// {PDUSessionAdmittedAddedAddReqAck}
type PdusessionAdmittedAddedAddReqAck struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"valueExt,sizeLB:1,sizeUB:256,"
	Value []*PdusessionAdmittedAddedAddReqAckItem `protobuf:"bytes,1,rep,name=value,proto3" json:"value,omitempty" aper:"valueExt,sizeLB:1,sizeUB:256,"`
}

func (x *PdusessionAdmittedAddedAddReqAck) Reset() {
	*x = PdusessionAdmittedAddedAddReqAck{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PdusessionAdmittedAddedAddReqAck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PdusessionAdmittedAddedAddReqAck) ProtoMessage() {}

func (x *PdusessionAdmittedAddedAddReqAck) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PdusessionAdmittedAddedAddReqAck.ProtoReflect.Descriptor instead.
func (*PdusessionAdmittedAddedAddReqAck) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_pdu_contents_proto_rawDescGZIP(), []int{62}
}

func (x *PdusessionAdmittedAddedAddReqAck) GetValue() []*PdusessionAdmittedAddedAddReqAckItem {
	if x != nil {
		return x.Value
	}
	return nil
}

// value set from xnap_v1.asn1:1405
// {PDUSessionAdmittedAddedAddReqAck-Item-ExtIEs}
type PdusessionAdmittedAddedAddReqAckItemExtIes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *emptypb.Empty `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *PdusessionAdmittedAddedAddReqAckItemExtIes) Reset() {
	*x = PdusessionAdmittedAddedAddReqAckItemExtIes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PdusessionAdmittedAddedAddReqAckItemExtIes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PdusessionAdmittedAddedAddReqAckItemExtIes) ProtoMessage() {}

func (x *PdusessionAdmittedAddedAddReqAckItemExtIes) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PdusessionAdmittedAddedAddReqAckItemExtIes.ProtoReflect.Descriptor instead.
func (*PdusessionAdmittedAddedAddReqAckItemExtIes) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_pdu_contents_proto_rawDescGZIP(), []int{63}
}

func (x *PdusessionAdmittedAddedAddReqAckItemExtIes) GetValue() *emptypb.Empty {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:1395
// @inject_tag: aper:"valueExt"
// {PDUSessionAdmittedAddedAddReqAck-Item}
type PdusessionAdmittedAddedAddReqAckItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PduSessionId *xnap_ies.PdusessionID `protobuf:"bytes,1,opt,name=pdu_session_id,json=pduSessionId,proto3" json:"pdu_session_id,omitempty"`
	// @inject_tag: aper:"optional,valueExt,"
	SnTerminated *xnap_ies.PdusessionResourceSetupResponseInfoSNterminated `protobuf:"bytes,2,opt,name=sn_terminated,json=sn-terminated,proto3,oneof" json:"sn_terminated,omitempty" aper:"optional,valueExt,"`
	// @inject_tag: aper:"optional,valueExt,"
	MnTerminated *xnap_ies.PdusessionResourceSetupResponseInfoMNterminated `protobuf:"bytes,3,opt,name=mn_terminated,json=mn-terminated,proto3,oneof" json:"mn_terminated,omitempty" aper:"optional,valueExt,"`
	// @inject_tag: aper:"optional,sizeLB:1,"
	IEExtension []*PdusessionAdmittedAddedAddReqAckItemExtIes `protobuf:"bytes,4,rep,name=i_e_extension,json=iE-Extension,proto3" json:"i_e_extension,omitempty" aper:"optional,sizeLB:1,"`
}

func (x *PdusessionAdmittedAddedAddReqAckItem) Reset() {
	*x = PdusessionAdmittedAddedAddReqAckItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PdusessionAdmittedAddedAddReqAckItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PdusessionAdmittedAddedAddReqAckItem) ProtoMessage() {}

func (x *PdusessionAdmittedAddedAddReqAckItem) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PdusessionAdmittedAddedAddReqAckItem.ProtoReflect.Descriptor instead.
func (*PdusessionAdmittedAddedAddReqAckItem) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_pdu_contents_proto_rawDescGZIP(), []int{64}
}

func (x *PdusessionAdmittedAddedAddReqAckItem) GetPduSessionId() *xnap_ies.PdusessionID {
	if x != nil {
		return x.PduSessionId
	}
	return nil
}

func (x *PdusessionAdmittedAddedAddReqAckItem) GetSnTerminated() *xnap_ies.PdusessionResourceSetupResponseInfoSNterminated {
	if x != nil {
		return x.SnTerminated
	}
	return nil
}

func (x *PdusessionAdmittedAddedAddReqAckItem) GetMnTerminated() *xnap_ies.PdusessionResourceSetupResponseInfoMNterminated {
	if x != nil {
		return x.MnTerminated
	}
	return nil
}

func (x *PdusessionAdmittedAddedAddReqAckItem) GetIEExtension() []*PdusessionAdmittedAddedAddReqAckItemExtIes {
	if x != nil {
		return x.IEExtension
	}
	return nil
}

// value set from xnap_v1.asn1:1416
// {PDUSessionNotAdmittedAddReqAck-ExtIEs}
type PdusessionNotAdmittedAddReqAckExtIes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *emptypb.Empty `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *PdusessionNotAdmittedAddReqAckExtIes) Reset() {
	*x = PdusessionNotAdmittedAddReqAckExtIes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PdusessionNotAdmittedAddReqAckExtIes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PdusessionNotAdmittedAddReqAckExtIes) ProtoMessage() {}

func (x *PdusessionNotAdmittedAddReqAckExtIes) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PdusessionNotAdmittedAddReqAckExtIes.ProtoReflect.Descriptor instead.
func (*PdusessionNotAdmittedAddReqAckExtIes) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_pdu_contents_proto_rawDescGZIP(), []int{65}
}

func (x *PdusessionNotAdmittedAddReqAckExtIes) GetValue() *emptypb.Empty {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:1410
// @inject_tag: aper:"valueExt"
// {PDUSessionNotAdmittedAddReqAck}
type PdusessionNotAdmittedAddReqAck struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"optional,"
	PduSessionResourcesNotAdmittedSnterminated *xnap_ies.PdusessionResourcesNotAdmittedList `protobuf:"bytes,1,opt,name=pdu_session_resources_not_admitted_snterminated,json=pduSessionResourcesNotAdmitted-SNterminated,proto3,oneof" json:"pdu_session_resources_not_admitted_snterminated,omitempty" aper:"optional,"`
	// @inject_tag: aper:"optional,"
	PduSessionResourcesNotAdmittedMnterminated *xnap_ies.PdusessionResourcesNotAdmittedList `protobuf:"bytes,2,opt,name=pdu_session_resources_not_admitted_mnterminated,json=pduSessionResourcesNotAdmitted-MNterminated,proto3,oneof" json:"pdu_session_resources_not_admitted_mnterminated,omitempty" aper:"optional,"`
	// @inject_tag: aper:"optional,sizeLB:1,"
	IEExtension []*PdusessionNotAdmittedAddReqAckExtIes `protobuf:"bytes,3,rep,name=i_e_extension,json=iE-Extension,proto3" json:"i_e_extension,omitempty" aper:"optional,sizeLB:1,"`
}

func (x *PdusessionNotAdmittedAddReqAck) Reset() {
	*x = PdusessionNotAdmittedAddReqAck{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PdusessionNotAdmittedAddReqAck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PdusessionNotAdmittedAddReqAck) ProtoMessage() {}

func (x *PdusessionNotAdmittedAddReqAck) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PdusessionNotAdmittedAddReqAck.ProtoReflect.Descriptor instead.
func (*PdusessionNotAdmittedAddReqAck) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_pdu_contents_proto_rawDescGZIP(), []int{66}
}

func (x *PdusessionNotAdmittedAddReqAck) GetPduSessionResourcesNotAdmittedSnterminated() *xnap_ies.PdusessionResourcesNotAdmittedList {
	if x != nil {
		return x.PduSessionResourcesNotAdmittedSnterminated
	}
	return nil
}

func (x *PdusessionNotAdmittedAddReqAck) GetPduSessionResourcesNotAdmittedMnterminated() *xnap_ies.PdusessionResourcesNotAdmittedList {
	if x != nil {
		return x.PduSessionResourcesNotAdmittedMnterminated
	}
	return nil
}

func (x *PdusessionNotAdmittedAddReqAck) GetIEExtension() []*PdusessionNotAdmittedAddReqAckExtIes {
	if x != nil {
		return x.IEExtension
	}
	return nil
}

// value set from xnap_v1.asn1:1433
// {SNodeAdditionRequestReject-IEs&Value}
type SnodeAdditionRequestRejectIEsValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// value set translated as choice from xnap_v1.asn1:1433
	//
	// Types that are assignable to SnodeAdditionRequestRejectIes:
	//	*SnodeAdditionRequestRejectIEsValue_IdMNgRannodeUexnApid
	//	*SnodeAdditionRequestRejectIEsValue_IdSNgRannodeUexnApid
	//	*SnodeAdditionRequestRejectIEsValue_IdCause
	//	*SnodeAdditionRequestRejectIEsValue_IdCriticalityDiagnostics
	SnodeAdditionRequestRejectIes isSnodeAdditionRequestRejectIEsValue_SnodeAdditionRequestRejectIes `protobuf_oneof:"snode_addition_request_reject_ies"`
}

func (x *SnodeAdditionRequestRejectIEsValue) Reset() {
	*x = SnodeAdditionRequestRejectIEsValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SnodeAdditionRequestRejectIEsValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SnodeAdditionRequestRejectIEsValue) ProtoMessage() {}

func (x *SnodeAdditionRequestRejectIEsValue) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SnodeAdditionRequestRejectIEsValue.ProtoReflect.Descriptor instead.
func (*SnodeAdditionRequestRejectIEsValue) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_pdu_contents_proto_rawDescGZIP(), []int{67}
}

func (m *SnodeAdditionRequestRejectIEsValue) GetSnodeAdditionRequestRejectIes() isSnodeAdditionRequestRejectIEsValue_SnodeAdditionRequestRejectIes {
	if m != nil {
		return m.SnodeAdditionRequestRejectIes
	}
	return nil
}

func (x *SnodeAdditionRequestRejectIEsValue) GetIdMNgRannodeUexnApid() *xnap_ies.NgRAnnodeUexnApid {
	if x, ok := x.GetSnodeAdditionRequestRejectIes().(*SnodeAdditionRequestRejectIEsValue_IdMNgRannodeUexnApid); ok {
		return x.IdMNgRannodeUexnApid
	}
	return nil
}

func (x *SnodeAdditionRequestRejectIEsValue) GetIdSNgRannodeUexnApid() *xnap_ies.NgRAnnodeUexnApid {
	if x, ok := x.GetSnodeAdditionRequestRejectIes().(*SnodeAdditionRequestRejectIEsValue_IdSNgRannodeUexnApid); ok {
		return x.IdSNgRannodeUexnApid
	}
	return nil
}

func (x *SnodeAdditionRequestRejectIEsValue) GetIdCause() *xnap_ies.Cause {
	if x, ok := x.GetSnodeAdditionRequestRejectIes().(*SnodeAdditionRequestRejectIEsValue_IdCause); ok {
		return x.IdCause
	}
	return nil
}

func (x *SnodeAdditionRequestRejectIEsValue) GetIdCriticalityDiagnostics() *xnap_ies.CriticalityDiagnostics {
	if x, ok := x.GetSnodeAdditionRequestRejectIes().(*SnodeAdditionRequestRejectIEsValue_IdCriticalityDiagnostics); ok {
		return x.IdCriticalityDiagnostics
	}
	return nil
}

type isSnodeAdditionRequestRejectIEsValue_SnodeAdditionRequestRejectIes interface {
	isSnodeAdditionRequestRejectIEsValue_SnodeAdditionRequestRejectIes()
}

type SnodeAdditionRequestRejectIEsValue_IdMNgRannodeUexnApid struct {
	// @inject_tag: aper:"choiceIdx:1,"
	IdMNgRannodeUexnApid *xnap_ies.NgRAnnodeUexnApid `protobuf:"bytes,1,opt,name=id_m_ng_rannode_uexn_apid,json=id-M-NG-RANnodeUEXnAPID,proto3,oneof" aper:"choiceIdx:1,"`
}

type SnodeAdditionRequestRejectIEsValue_IdSNgRannodeUexnApid struct {
	// @inject_tag: aper:"choiceIdx:2,"
	IdSNgRannodeUexnApid *xnap_ies.NgRAnnodeUexnApid `protobuf:"bytes,2,opt,name=id_s_ng_rannode_uexn_apid,json=id-S-NG-RANnodeUEXnAPID,proto3,oneof" aper:"choiceIdx:2,"`
}

type SnodeAdditionRequestRejectIEsValue_IdCause struct {
	// @inject_tag: aper:"choiceIdx:3,"
	IdCause *xnap_ies.Cause `protobuf:"bytes,3,opt,name=id_cause,json=id-Cause,proto3,oneof" aper:"choiceIdx:3,"`
}

type SnodeAdditionRequestRejectIEsValue_IdCriticalityDiagnostics struct {
	// @inject_tag: aper:"choiceIdx:4,valueExt,"
	IdCriticalityDiagnostics *xnap_ies.CriticalityDiagnostics `protobuf:"bytes,4,opt,name=id_criticality_diagnostics,json=id-CriticalityDiagnostics,proto3,oneof" aper:"choiceIdx:4,valueExt,"`
}

func (*SnodeAdditionRequestRejectIEsValue_IdMNgRannodeUexnApid) isSnodeAdditionRequestRejectIEsValue_SnodeAdditionRequestRejectIes() {
}

func (*SnodeAdditionRequestRejectIEsValue_IdSNgRannodeUexnApid) isSnodeAdditionRequestRejectIEsValue_SnodeAdditionRequestRejectIes() {
}

func (*SnodeAdditionRequestRejectIEsValue_IdCause) isSnodeAdditionRequestRejectIEsValue_SnodeAdditionRequestRejectIes() {
}

func (*SnodeAdditionRequestRejectIEsValue_IdCriticalityDiagnostics) isSnodeAdditionRequestRejectIEsValue_SnodeAdditionRequestRejectIes() {
}

// concrete instance(s) of class XNAP-PROTOCOL-IES from xnap_v1.asn1:1433
// @inject_tag: aper:"valueExt"
// {SNodeAdditionRequestReject-IEs}
type SnodeAdditionRequestRejectIEs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"unique,"
	Id *xnap_commondatatypes.ProtocolIeID `protobuf:"bytes,1,opt,name=id,json=&id,proto3" json:"id,omitempty" aper:"unique,"`
	// @inject_tag: aper:"valueLB:0,valueUB:2,"
	Criticality xnap_commondatatypes.Criticality `protobuf:"varint,2,opt,name=criticality,json=&criticality,proto3,enum=xnap.v1.Criticality" json:"criticality,omitempty" aper:"valueLB:0,valueUB:2,"`
	// @inject_tag: aper:"canonicalOrder,"
	Value *SnodeAdditionRequestRejectIEsValue `protobuf:"bytes,3,opt,name=value,json=&Value,proto3" json:"value,omitempty" aper:"canonicalOrder,"`
}

func (x *SnodeAdditionRequestRejectIEs) Reset() {
	*x = SnodeAdditionRequestRejectIEs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SnodeAdditionRequestRejectIEs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SnodeAdditionRequestRejectIEs) ProtoMessage() {}

func (x *SnodeAdditionRequestRejectIEs) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SnodeAdditionRequestRejectIEs.ProtoReflect.Descriptor instead.
func (*SnodeAdditionRequestRejectIEs) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_pdu_contents_proto_rawDescGZIP(), []int{68}
}

func (x *SnodeAdditionRequestRejectIEs) GetId() *xnap_commondatatypes.ProtocolIeID {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *SnodeAdditionRequestRejectIEs) GetCriticality() xnap_commondatatypes.Criticality {
	if x != nil {
		return x.Criticality
	}
	return xnap_commondatatypes.Criticality(0)
}

func (x *SnodeAdditionRequestRejectIEs) GetValue() *SnodeAdditionRequestRejectIEsValue {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:1429
// @inject_tag: aper:"valueExt"
// {SNodeAdditionRequestReject}
type SnodeAdditionRequestReject struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProtocolIes []*SnodeAdditionRequestRejectIEs `protobuf:"bytes,1,rep,name=protocol_ies,json=protocolIEs,proto3" json:"protocol_ies,omitempty"`
}

func (x *SnodeAdditionRequestReject) Reset() {
	*x = SnodeAdditionRequestReject{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SnodeAdditionRequestReject) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SnodeAdditionRequestReject) ProtoMessage() {}

func (x *SnodeAdditionRequestReject) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SnodeAdditionRequestReject.ProtoReflect.Descriptor instead.
func (*SnodeAdditionRequestReject) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_pdu_contents_proto_rawDescGZIP(), []int{69}
}

func (x *SnodeAdditionRequestReject) GetProtocolIes() []*SnodeAdditionRequestRejectIEs {
	if x != nil {
		return x.ProtocolIes
	}
	return nil
}

// value set from xnap_v1.asn1:1452
// {SNodeReconfigurationComplete-IEs&Value}
type SnodeReconfigurationCompleteIEsValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// value set translated as choice from xnap_v1.asn1:1452
	//
	// Types that are assignable to SnodeReconfigurationCompleteIes:
	//	*SnodeReconfigurationCompleteIEsValue_IdMNgRannodeUexnApid
	//	*SnodeReconfigurationCompleteIEsValue_IdSNgRannodeUexnApid
	//	*SnodeReconfigurationCompleteIEsValue_IdResponseInfoReconfCompl
	SnodeReconfigurationCompleteIes isSnodeReconfigurationCompleteIEsValue_SnodeReconfigurationCompleteIes `protobuf_oneof:"snode_reconfiguration_complete_ies"`
}

func (x *SnodeReconfigurationCompleteIEsValue) Reset() {
	*x = SnodeReconfigurationCompleteIEsValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SnodeReconfigurationCompleteIEsValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SnodeReconfigurationCompleteIEsValue) ProtoMessage() {}

func (x *SnodeReconfigurationCompleteIEsValue) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SnodeReconfigurationCompleteIEsValue.ProtoReflect.Descriptor instead.
func (*SnodeReconfigurationCompleteIEsValue) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_pdu_contents_proto_rawDescGZIP(), []int{70}
}

func (m *SnodeReconfigurationCompleteIEsValue) GetSnodeReconfigurationCompleteIes() isSnodeReconfigurationCompleteIEsValue_SnodeReconfigurationCompleteIes {
	if m != nil {
		return m.SnodeReconfigurationCompleteIes
	}
	return nil
}

func (x *SnodeReconfigurationCompleteIEsValue) GetIdMNgRannodeUexnApid() *xnap_ies.NgRAnnodeUexnApid {
	if x, ok := x.GetSnodeReconfigurationCompleteIes().(*SnodeReconfigurationCompleteIEsValue_IdMNgRannodeUexnApid); ok {
		return x.IdMNgRannodeUexnApid
	}
	return nil
}

func (x *SnodeReconfigurationCompleteIEsValue) GetIdSNgRannodeUexnApid() *xnap_ies.NgRAnnodeUexnApid {
	if x, ok := x.GetSnodeReconfigurationCompleteIes().(*SnodeReconfigurationCompleteIEsValue_IdSNgRannodeUexnApid); ok {
		return x.IdSNgRannodeUexnApid
	}
	return nil
}

func (x *SnodeReconfigurationCompleteIEsValue) GetIdResponseInfoReconfCompl() *ResponseInfoReconfCompl {
	if x, ok := x.GetSnodeReconfigurationCompleteIes().(*SnodeReconfigurationCompleteIEsValue_IdResponseInfoReconfCompl); ok {
		return x.IdResponseInfoReconfCompl
	}
	return nil
}

type isSnodeReconfigurationCompleteIEsValue_SnodeReconfigurationCompleteIes interface {
	isSnodeReconfigurationCompleteIEsValue_SnodeReconfigurationCompleteIes()
}

type SnodeReconfigurationCompleteIEsValue_IdMNgRannodeUexnApid struct {
	// @inject_tag: aper:"choiceIdx:1,"
	IdMNgRannodeUexnApid *xnap_ies.NgRAnnodeUexnApid `protobuf:"bytes,1,opt,name=id_m_ng_rannode_uexn_apid,json=id-M-NG-RANnodeUEXnAPID,proto3,oneof" aper:"choiceIdx:1,"`
}

type SnodeReconfigurationCompleteIEsValue_IdSNgRannodeUexnApid struct {
	// @inject_tag: aper:"choiceIdx:2,"
	IdSNgRannodeUexnApid *xnap_ies.NgRAnnodeUexnApid `protobuf:"bytes,2,opt,name=id_s_ng_rannode_uexn_apid,json=id-S-NG-RANnodeUEXnAPID,proto3,oneof" aper:"choiceIdx:2,"`
}

type SnodeReconfigurationCompleteIEsValue_IdResponseInfoReconfCompl struct {
	// @inject_tag: aper:"choiceIdx:3,valueExt,"
	IdResponseInfoReconfCompl *ResponseInfoReconfCompl `protobuf:"bytes,3,opt,name=id_response_info_reconf_compl,json=id-ResponseInfo-ReconfCompl,proto3,oneof" aper:"choiceIdx:3,valueExt,"`
}

func (*SnodeReconfigurationCompleteIEsValue_IdMNgRannodeUexnApid) isSnodeReconfigurationCompleteIEsValue_SnodeReconfigurationCompleteIes() {
}

func (*SnodeReconfigurationCompleteIEsValue_IdSNgRannodeUexnApid) isSnodeReconfigurationCompleteIEsValue_SnodeReconfigurationCompleteIes() {
}

func (*SnodeReconfigurationCompleteIEsValue_IdResponseInfoReconfCompl) isSnodeReconfigurationCompleteIEsValue_SnodeReconfigurationCompleteIes() {
}

// concrete instance(s) of class XNAP-PROTOCOL-IES from xnap_v1.asn1:1452
// @inject_tag: aper:"valueExt"
// {SNodeReconfigurationComplete-IEs}
type SnodeReconfigurationCompleteIEs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"unique,"
	Id *xnap_commondatatypes.ProtocolIeID `protobuf:"bytes,1,opt,name=id,json=&id,proto3" json:"id,omitempty" aper:"unique,"`
	// @inject_tag: aper:"valueLB:0,valueUB:2,"
	Criticality xnap_commondatatypes.Criticality `protobuf:"varint,2,opt,name=criticality,json=&criticality,proto3,enum=xnap.v1.Criticality" json:"criticality,omitempty" aper:"valueLB:0,valueUB:2,"`
	// @inject_tag: aper:"canonicalOrder,"
	Value *SnodeReconfigurationCompleteIEsValue `protobuf:"bytes,3,opt,name=value,json=&Value,proto3" json:"value,omitempty" aper:"canonicalOrder,"`
}

func (x *SnodeReconfigurationCompleteIEs) Reset() {
	*x = SnodeReconfigurationCompleteIEs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SnodeReconfigurationCompleteIEs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SnodeReconfigurationCompleteIEs) ProtoMessage() {}

func (x *SnodeReconfigurationCompleteIEs) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SnodeReconfigurationCompleteIEs.ProtoReflect.Descriptor instead.
func (*SnodeReconfigurationCompleteIEs) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_pdu_contents_proto_rawDescGZIP(), []int{71}
}

func (x *SnodeReconfigurationCompleteIEs) GetId() *xnap_commondatatypes.ProtocolIeID {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *SnodeReconfigurationCompleteIEs) GetCriticality() xnap_commondatatypes.Criticality {
	if x != nil {
		return x.Criticality
	}
	return xnap_commondatatypes.Criticality(0)
}

func (x *SnodeReconfigurationCompleteIEs) GetValue() *SnodeReconfigurationCompleteIEsValue {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:1448
// @inject_tag: aper:"valueExt"
// {SNodeReconfigurationComplete}
type SnodeReconfigurationComplete struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProtocolIes []*SnodeReconfigurationCompleteIEs `protobuf:"bytes,1,rep,name=protocol_ies,json=protocolIEs,proto3" json:"protocol_ies,omitempty"`
}

func (x *SnodeReconfigurationComplete) Reset() {
	*x = SnodeReconfigurationComplete{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SnodeReconfigurationComplete) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SnodeReconfigurationComplete) ProtoMessage() {}

func (x *SnodeReconfigurationComplete) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SnodeReconfigurationComplete.ProtoReflect.Descriptor instead.
func (*SnodeReconfigurationComplete) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_pdu_contents_proto_rawDescGZIP(), []int{72}
}

func (x *SnodeReconfigurationComplete) GetProtocolIes() []*SnodeReconfigurationCompleteIEs {
	if x != nil {
		return x.ProtocolIes
	}
	return nil
}

// value set from xnap_v1.asn1:1465
// {ResponseInfo-ReconfCompl-ExtIEs}
type ResponseInfoReconfComplExtIes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *emptypb.Empty `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *ResponseInfoReconfComplExtIes) Reset() {
	*x = ResponseInfoReconfComplExtIes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponseInfoReconfComplExtIes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseInfoReconfComplExtIes) ProtoMessage() {}

func (x *ResponseInfoReconfComplExtIes) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseInfoReconfComplExtIes.ProtoReflect.Descriptor instead.
func (*ResponseInfoReconfComplExtIes) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_pdu_contents_proto_rawDescGZIP(), []int{73}
}

func (x *ResponseInfoReconfComplExtIes) GetValue() *emptypb.Empty {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:1460
// @inject_tag: aper:"valueExt"
// {ResponseInfo-ReconfCompl}
type ResponseInfoReconfCompl struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResponseTypeReconfComplete *ResponseTypeReconfComplete `protobuf:"bytes,1,opt,name=response_type_reconf_complete,json=responseType-ReconfComplete,proto3" json:"response_type_reconf_complete,omitempty"`
	// @inject_tag: aper:"optional,sizeLB:1,"
	IEExtensions []*ResponseInfoReconfComplExtIes `protobuf:"bytes,2,rep,name=i_e_extensions,json=iE-Extensions,proto3" json:"i_e_extensions,omitempty" aper:"optional,sizeLB:1,"`
}

func (x *ResponseInfoReconfCompl) Reset() {
	*x = ResponseInfoReconfCompl{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponseInfoReconfCompl) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseInfoReconfCompl) ProtoMessage() {}

func (x *ResponseInfoReconfCompl) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseInfoReconfCompl.ProtoReflect.Descriptor instead.
func (*ResponseInfoReconfCompl) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_pdu_contents_proto_rawDescGZIP(), []int{74}
}

func (x *ResponseInfoReconfCompl) GetResponseTypeReconfComplete() *ResponseTypeReconfComplete {
	if x != nil {
		return x.ResponseTypeReconfComplete
	}
	return nil
}

func (x *ResponseInfoReconfCompl) GetIEExtensions() []*ResponseInfoReconfComplExtIes {
	if x != nil {
		return x.IEExtensions
	}
	return nil
}

// value set from xnap_v1.asn1:1475
// {ResponseType-ReconfComplete-ExtIEs}
type ResponseTypeReconfCompleteExtIes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *emptypb.Empty `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *ResponseTypeReconfCompleteExtIes) Reset() {
	*x = ResponseTypeReconfCompleteExtIes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponseTypeReconfCompleteExtIes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseTypeReconfCompleteExtIes) ProtoMessage() {}

func (x *ResponseTypeReconfCompleteExtIes) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseTypeReconfCompleteExtIes.ProtoReflect.Descriptor instead.
func (*ResponseTypeReconfCompleteExtIes) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_pdu_contents_proto_rawDescGZIP(), []int{75}
}

func (x *ResponseTypeReconfCompleteExtIes) GetValue() *emptypb.Empty {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:1470
// {ResponseType-ReconfComplete}
type ResponseTypeReconfComplete struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// choice from xnap_v1.asn1:1470
	//
	// Types that are assignable to ResponseTypeReconfComplete:
	//	*ResponseTypeReconfComplete_ConfigurationSuccessfullyApplied
	//	*ResponseTypeReconfComplete_ConfigurationRejectedByMNgRannode
	//	*ResponseTypeReconfComplete_ChoiceExtension
	ResponseTypeReconfComplete isResponseTypeReconfComplete_ResponseTypeReconfComplete `protobuf_oneof:"response_type_reconf_complete"`
}

func (x *ResponseTypeReconfComplete) Reset() {
	*x = ResponseTypeReconfComplete{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponseTypeReconfComplete) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseTypeReconfComplete) ProtoMessage() {}

func (x *ResponseTypeReconfComplete) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseTypeReconfComplete.ProtoReflect.Descriptor instead.
func (*ResponseTypeReconfComplete) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_pdu_contents_proto_rawDescGZIP(), []int{76}
}

func (m *ResponseTypeReconfComplete) GetResponseTypeReconfComplete() isResponseTypeReconfComplete_ResponseTypeReconfComplete {
	if m != nil {
		return m.ResponseTypeReconfComplete
	}
	return nil
}

func (x *ResponseTypeReconfComplete) GetConfigurationSuccessfullyApplied() *Configurationsuccessfullyapplied {
	if x, ok := x.GetResponseTypeReconfComplete().(*ResponseTypeReconfComplete_ConfigurationSuccessfullyApplied); ok {
		return x.ConfigurationSuccessfullyApplied
	}
	return nil
}

func (x *ResponseTypeReconfComplete) GetConfigurationRejectedByMNgRannode() *ConfigurationrejectedbyMNGRAnnode {
	if x, ok := x.GetResponseTypeReconfComplete().(*ResponseTypeReconfComplete_ConfigurationRejectedByMNgRannode); ok {
		return x.ConfigurationRejectedByMNgRannode
	}
	return nil
}

func (x *ResponseTypeReconfComplete) GetChoiceExtension() *ResponseTypeReconfCompleteExtIes {
	if x, ok := x.GetResponseTypeReconfComplete().(*ResponseTypeReconfComplete_ChoiceExtension); ok {
		return x.ChoiceExtension
	}
	return nil
}

type isResponseTypeReconfComplete_ResponseTypeReconfComplete interface {
	isResponseTypeReconfComplete_ResponseTypeReconfComplete()
}

type ResponseTypeReconfComplete_ConfigurationSuccessfullyApplied struct {
	// @inject_tag: aper:"choiceIdx:1,valueExt,"
	ConfigurationSuccessfullyApplied *Configurationsuccessfullyapplied `protobuf:"bytes,1,opt,name=configuration_successfully_applied,json=configuration-successfully-applied,proto3,oneof" aper:"choiceIdx:1,valueExt,"`
}

type ResponseTypeReconfComplete_ConfigurationRejectedByMNgRannode struct {
	// @inject_tag: aper:"choiceIdx:2,valueExt,"
	ConfigurationRejectedByMNgRannode *ConfigurationrejectedbyMNGRAnnode `protobuf:"bytes,2,opt,name=configuration_rejected_by_m_ng_rannode,json=configuration-rejected-by-M-NG-RANNode,proto3,oneof" aper:"choiceIdx:2,valueExt,"`
}

type ResponseTypeReconfComplete_ChoiceExtension struct {
	// @inject_tag: aper:"choiceIdx:3,"
	ChoiceExtension *ResponseTypeReconfCompleteExtIes `protobuf:"bytes,3,opt,name=choice_extension,json=choice-extension,proto3,oneof" aper:"choiceIdx:3,"`
}

func (*ResponseTypeReconfComplete_ConfigurationSuccessfullyApplied) isResponseTypeReconfComplete_ResponseTypeReconfComplete() {
}

func (*ResponseTypeReconfComplete_ConfigurationRejectedByMNgRannode) isResponseTypeReconfComplete_ResponseTypeReconfComplete() {
}

func (*ResponseTypeReconfComplete_ChoiceExtension) isResponseTypeReconfComplete_ResponseTypeReconfComplete() {
}

// value set from xnap_v1.asn1:1485
// {Configuration-successfully-applied-ExtIEs}
type ConfigurationsuccessfullyappliedExtIes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *emptypb.Empty `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *ConfigurationsuccessfullyappliedExtIes) Reset() {
	*x = ConfigurationsuccessfullyappliedExtIes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigurationsuccessfullyappliedExtIes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigurationsuccessfullyappliedExtIes) ProtoMessage() {}

func (x *ConfigurationsuccessfullyappliedExtIes) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigurationsuccessfullyappliedExtIes.ProtoReflect.Descriptor instead.
func (*ConfigurationsuccessfullyappliedExtIes) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_pdu_contents_proto_rawDescGZIP(), []int{77}
}

func (x *ConfigurationsuccessfullyappliedExtIes) GetValue() *emptypb.Empty {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:1480
// @inject_tag: aper:"valueExt"
// {Configuration-successfully-applied}
type Configurationsuccessfullyapplied struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"optional,"
	MNgRannodeToSNgRannodeContainer []byte `protobuf:"bytes,1,opt,name=m_ng_rannode_to_s_ng_rannode_container,json=m-NG-RANNode-to-S-NG-RANNode-Container,proto3,oneof" json:"m_ng_rannode_to_s_ng_rannode_container,omitempty" aper:"optional,"`
	// @inject_tag: aper:"optional,sizeLB:1,"
	IEExtensions []*ConfigurationsuccessfullyappliedExtIes `protobuf:"bytes,2,rep,name=i_e_extensions,json=iE-Extensions,proto3" json:"i_e_extensions,omitempty" aper:"optional,sizeLB:1,"`
}

func (x *Configurationsuccessfullyapplied) Reset() {
	*x = Configurationsuccessfullyapplied{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[78]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Configurationsuccessfullyapplied) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Configurationsuccessfullyapplied) ProtoMessage() {}

func (x *Configurationsuccessfullyapplied) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[78]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Configurationsuccessfullyapplied.ProtoReflect.Descriptor instead.
func (*Configurationsuccessfullyapplied) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_pdu_contents_proto_rawDescGZIP(), []int{78}
}

func (x *Configurationsuccessfullyapplied) GetMNgRannodeToSNgRannodeContainer() []byte {
	if x != nil {
		return x.MNgRannodeToSNgRannodeContainer
	}
	return nil
}

func (x *Configurationsuccessfullyapplied) GetIEExtensions() []*ConfigurationsuccessfullyappliedExtIes {
	if x != nil {
		return x.IEExtensions
	}
	return nil
}

// value set from xnap_v1.asn1:1496
// {Configuration-rejected-by-M-NG-RANNode-ExtIEs}
type ConfigurationrejectedbyMNGRAnnodeExtIes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *emptypb.Empty `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *ConfigurationrejectedbyMNGRAnnodeExtIes) Reset() {
	*x = ConfigurationrejectedbyMNGRAnnodeExtIes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[79]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigurationrejectedbyMNGRAnnodeExtIes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigurationrejectedbyMNGRAnnodeExtIes) ProtoMessage() {}

func (x *ConfigurationrejectedbyMNGRAnnodeExtIes) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[79]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigurationrejectedbyMNGRAnnodeExtIes.ProtoReflect.Descriptor instead.
func (*ConfigurationrejectedbyMNGRAnnodeExtIes) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_pdu_contents_proto_rawDescGZIP(), []int{79}
}

func (x *ConfigurationrejectedbyMNGRAnnodeExtIes) GetValue() *emptypb.Empty {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:1490
// @inject_tag: aper:"valueExt"
// {Configuration-rejected-by-M-NG-RANNode}
type ConfigurationrejectedbyMNGRAnnode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cause *xnap_ies.Cause `protobuf:"bytes,1,opt,name=cause,proto3" json:"cause,omitempty"`
	// @inject_tag: aper:"optional,"
	MNgRannodeToSNgRannodeContainer []byte `protobuf:"bytes,2,opt,name=m_ng_rannode_to_s_ng_rannode_container,json=m-NG-RANNode-to-S-NG-RANNode-Container,proto3,oneof" json:"m_ng_rannode_to_s_ng_rannode_container,omitempty" aper:"optional,"`
	// @inject_tag: aper:"optional,sizeLB:1,"
	IEExtensions []*ConfigurationrejectedbyMNGRAnnodeExtIes `protobuf:"bytes,3,rep,name=i_e_extensions,json=iE-Extensions,proto3" json:"i_e_extensions,omitempty" aper:"optional,sizeLB:1,"`
}

func (x *ConfigurationrejectedbyMNGRAnnode) Reset() {
	*x = ConfigurationrejectedbyMNGRAnnode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[80]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigurationrejectedbyMNGRAnnode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigurationrejectedbyMNGRAnnode) ProtoMessage() {}

func (x *ConfigurationrejectedbyMNGRAnnode) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[80]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigurationrejectedbyMNGRAnnode.ProtoReflect.Descriptor instead.
func (*ConfigurationrejectedbyMNGRAnnode) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_pdu_contents_proto_rawDescGZIP(), []int{80}
}

func (x *ConfigurationrejectedbyMNGRAnnode) GetCause() *xnap_ies.Cause {
	if x != nil {
		return x.Cause
	}
	return nil
}

func (x *ConfigurationrejectedbyMNGRAnnode) GetMNgRannodeToSNgRannodeContainer() []byte {
	if x != nil {
		return x.MNgRannodeToSNgRannodeContainer
	}
	return nil
}

func (x *ConfigurationrejectedbyMNGRAnnode) GetIEExtensions() []*ConfigurationrejectedbyMNGRAnnodeExtIes {
	if x != nil {
		return x.IEExtensions
	}
	return nil
}

// value set from xnap_v1.asn1:1512
// {SNodeModificationRequest-IEs&Value}
type SnodeModificationRequestIEsValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// value set translated as choice from xnap_v1.asn1:1512
	//
	// Types that are assignable to SnodeModificationRequestIes:
	//	*SnodeModificationRequestIEsValue_IdMNgRannodeUexnApid
	//	*SnodeModificationRequestIEsValue_IdSNgRannodeUexnApid
	//	*SnodeModificationRequestIEsValue_IdCause
	//	*SnodeModificationRequestIEsValue_IdPdcpchangeIndication
	//	*SnodeModificationRequestIEsValue_IdSelectedPlmn
	//	*SnodeModificationRequestIEsValue_IdMobilityRestrictionList
	//	*SnodeModificationRequestIEsValue_IdScgconfigurationQuery
	//	*SnodeModificationRequestIEsValue_IdUecontextInfoSnmodRequest
	//	*SnodeModificationRequestIEsValue_IdMnToSnContainer
	//	*SnodeModificationRequestIEsValue_IdRequestedSplitSrb
	//	*SnodeModificationRequestIEsValue_IdRequestedSplitSrbrelease
	//	*SnodeModificationRequestIEsValue_IdDesiredActNotificationLevel
	//	*SnodeModificationRequestIEsValue_IdAdditionalDrbids
	//	*SnodeModificationRequestIEsValue_IdSNgRannodeMaxIpdataRateUl
	//	*SnodeModificationRequestIEsValue_IdSNgRannodeMaxIpdataRateDl
	//	*SnodeModificationRequestIEsValue_IdLocationInformationSnreporting
	//	*SnodeModificationRequestIEsValue_IdMrDcResourceCoordinationInfo
	//	*SnodeModificationRequestIEsValue_IdPcellId
	//	*SnodeModificationRequestIEsValue_IdNeDcTdmPattern
	//	*SnodeModificationRequestIEsValue_IdRequestedFastMcgrecoveryViaSrb3
	//	*SnodeModificationRequestIEsValue_IdRequestedFastMcgrecoveryViaSrb3Release
	//	*SnodeModificationRequestIEsValue_IdSntriggered
	//	*SnodeModificationRequestIEsValue_IdTargetNodeId
	SnodeModificationRequestIes isSnodeModificationRequestIEsValue_SnodeModificationRequestIes `protobuf_oneof:"snode_modification_request_ies"`
}

func (x *SnodeModificationRequestIEsValue) Reset() {
	*x = SnodeModificationRequestIEsValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[81]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SnodeModificationRequestIEsValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SnodeModificationRequestIEsValue) ProtoMessage() {}

func (x *SnodeModificationRequestIEsValue) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[81]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SnodeModificationRequestIEsValue.ProtoReflect.Descriptor instead.
func (*SnodeModificationRequestIEsValue) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_pdu_contents_proto_rawDescGZIP(), []int{81}
}

func (m *SnodeModificationRequestIEsValue) GetSnodeModificationRequestIes() isSnodeModificationRequestIEsValue_SnodeModificationRequestIes {
	if m != nil {
		return m.SnodeModificationRequestIes
	}
	return nil
}

func (x *SnodeModificationRequestIEsValue) GetIdMNgRannodeUexnApid() *xnap_ies.NgRAnnodeUexnApid {
	if x, ok := x.GetSnodeModificationRequestIes().(*SnodeModificationRequestIEsValue_IdMNgRannodeUexnApid); ok {
		return x.IdMNgRannodeUexnApid
	}
	return nil
}

func (x *SnodeModificationRequestIEsValue) GetIdSNgRannodeUexnApid() *xnap_ies.NgRAnnodeUexnApid {
	if x, ok := x.GetSnodeModificationRequestIes().(*SnodeModificationRequestIEsValue_IdSNgRannodeUexnApid); ok {
		return x.IdSNgRannodeUexnApid
	}
	return nil
}

func (x *SnodeModificationRequestIEsValue) GetIdCause() *xnap_ies.Cause {
	if x, ok := x.GetSnodeModificationRequestIes().(*SnodeModificationRequestIEsValue_IdCause); ok {
		return x.IdCause
	}
	return nil
}

func (x *SnodeModificationRequestIEsValue) GetIdPdcpchangeIndication() *xnap_ies.PdcpchangeIndication {
	if x, ok := x.GetSnodeModificationRequestIes().(*SnodeModificationRequestIEsValue_IdPdcpchangeIndication); ok {
		return x.IdPdcpchangeIndication
	}
	return nil
}

func (x *SnodeModificationRequestIEsValue) GetIdSelectedPlmn() *xnap_ies.PlmnIdentity {
	if x, ok := x.GetSnodeModificationRequestIes().(*SnodeModificationRequestIEsValue_IdSelectedPlmn); ok {
		return x.IdSelectedPlmn
	}
	return nil
}

func (x *SnodeModificationRequestIEsValue) GetIdMobilityRestrictionList() *xnap_ies.MobilityRestrictionList {
	if x, ok := x.GetSnodeModificationRequestIes().(*SnodeModificationRequestIEsValue_IdMobilityRestrictionList); ok {
		return x.IdMobilityRestrictionList
	}
	return nil
}

func (x *SnodeModificationRequestIEsValue) GetIdScgconfigurationQuery() xnap_ies.ScgconfigurationQuery {
	if x, ok := x.GetSnodeModificationRequestIes().(*SnodeModificationRequestIEsValue_IdScgconfigurationQuery); ok {
		return x.IdScgconfigurationQuery
	}
	return xnap_ies.ScgconfigurationQuery(0)
}

func (x *SnodeModificationRequestIEsValue) GetIdUecontextInfoSnmodRequest() *UecontextInfoSNmodRequest {
	if x, ok := x.GetSnodeModificationRequestIes().(*SnodeModificationRequestIEsValue_IdUecontextInfoSnmodRequest); ok {
		return x.IdUecontextInfoSnmodRequest
	}
	return nil
}

func (x *SnodeModificationRequestIEsValue) GetIdMnToSnContainer() string {
	if x, ok := x.GetSnodeModificationRequestIes().(*SnodeModificationRequestIEsValue_IdMnToSnContainer); ok {
		return x.IdMnToSnContainer
	}
	return ""
}

func (x *SnodeModificationRequestIEsValue) GetIdRequestedSplitSrb() xnap_ies.SplitSrbsTypes {
	if x, ok := x.GetSnodeModificationRequestIes().(*SnodeModificationRequestIEsValue_IdRequestedSplitSrb); ok {
		return x.IdRequestedSplitSrb
	}
	return xnap_ies.SplitSrbsTypes(0)
}

func (x *SnodeModificationRequestIEsValue) GetIdRequestedSplitSrbrelease() xnap_ies.SplitSrbsTypes {
	if x, ok := x.GetSnodeModificationRequestIes().(*SnodeModificationRequestIEsValue_IdRequestedSplitSrbrelease); ok {
		return x.IdRequestedSplitSrbrelease
	}
	return xnap_ies.SplitSrbsTypes(0)
}

func (x *SnodeModificationRequestIEsValue) GetIdDesiredActNotificationLevel() xnap_ies.DesiredActNotificationLevel {
	if x, ok := x.GetSnodeModificationRequestIes().(*SnodeModificationRequestIEsValue_IdDesiredActNotificationLevel); ok {
		return x.IdDesiredActNotificationLevel
	}
	return xnap_ies.DesiredActNotificationLevel(0)
}

func (x *SnodeModificationRequestIEsValue) GetIdAdditionalDrbids() *xnap_ies.DrbList {
	if x, ok := x.GetSnodeModificationRequestIes().(*SnodeModificationRequestIEsValue_IdAdditionalDrbids); ok {
		return x.IdAdditionalDrbids
	}
	return nil
}

func (x *SnodeModificationRequestIEsValue) GetIdSNgRannodeMaxIpdataRateUl() *xnap_ies.BitRate {
	if x, ok := x.GetSnodeModificationRequestIes().(*SnodeModificationRequestIEsValue_IdSNgRannodeMaxIpdataRateUl); ok {
		return x.IdSNgRannodeMaxIpdataRateUl
	}
	return nil
}

func (x *SnodeModificationRequestIEsValue) GetIdSNgRannodeMaxIpdataRateDl() *xnap_ies.BitRate {
	if x, ok := x.GetSnodeModificationRequestIes().(*SnodeModificationRequestIEsValue_IdSNgRannodeMaxIpdataRateDl); ok {
		return x.IdSNgRannodeMaxIpdataRateDl
	}
	return nil
}

func (x *SnodeModificationRequestIEsValue) GetIdLocationInformationSnreporting() xnap_ies.LocationInformationSnreporting {
	if x, ok := x.GetSnodeModificationRequestIes().(*SnodeModificationRequestIEsValue_IdLocationInformationSnreporting); ok {
		return x.IdLocationInformationSnreporting
	}
	return xnap_ies.LocationInformationSnreporting(0)
}

func (x *SnodeModificationRequestIEsValue) GetIdMrDcResourceCoordinationInfo() *xnap_ies.MrDCResourceCoordinationInfo {
	if x, ok := x.GetSnodeModificationRequestIes().(*SnodeModificationRequestIEsValue_IdMrDcResourceCoordinationInfo); ok {
		return x.IdMrDcResourceCoordinationInfo
	}
	return nil
}

func (x *SnodeModificationRequestIEsValue) GetIdPcellId() *xnap_ies.GlobalNgRAncellID {
	if x, ok := x.GetSnodeModificationRequestIes().(*SnodeModificationRequestIEsValue_IdPcellId); ok {
		return x.IdPcellId
	}
	return nil
}

func (x *SnodeModificationRequestIEsValue) GetIdNeDcTdmPattern() *xnap_ies.NeDCTDmPattern {
	if x, ok := x.GetSnodeModificationRequestIes().(*SnodeModificationRequestIEsValue_IdNeDcTdmPattern); ok {
		return x.IdNeDcTdmPattern
	}
	return nil
}

func (x *SnodeModificationRequestIEsValue) GetIdRequestedFastMcgrecoveryViaSrb3() RequestedFastMcgrecoveryViaSrb3 {
	if x, ok := x.GetSnodeModificationRequestIes().(*SnodeModificationRequestIEsValue_IdRequestedFastMcgrecoveryViaSrb3); ok {
		return x.IdRequestedFastMcgrecoveryViaSrb3
	}
	return RequestedFastMcgrecoveryViaSrb3_REQUESTED_FAST_MCGRECOVERY_VIA_SRB3_TRUE
}

func (x *SnodeModificationRequestIEsValue) GetIdRequestedFastMcgrecoveryViaSrb3Release() RequestedFastMcgrecoveryViaSrb3Release {
	if x, ok := x.GetSnodeModificationRequestIes().(*SnodeModificationRequestIEsValue_IdRequestedFastMcgrecoveryViaSrb3Release); ok {
		return x.IdRequestedFastMcgrecoveryViaSrb3Release
	}
	return RequestedFastMcgrecoveryViaSrb3Release_REQUESTED_FAST_MCGRECOVERY_VIA_SRB3_RELEASE_TRUE
}

func (x *SnodeModificationRequestIEsValue) GetIdSntriggered() xnap_ies.Sntriggered {
	if x, ok := x.GetSnodeModificationRequestIes().(*SnodeModificationRequestIEsValue_IdSntriggered); ok {
		return x.IdSntriggered
	}
	return xnap_ies.Sntriggered(0)
}

func (x *SnodeModificationRequestIEsValue) GetIdTargetNodeId() *xnap_ies.GlobalNgRAnnodeID {
	if x, ok := x.GetSnodeModificationRequestIes().(*SnodeModificationRequestIEsValue_IdTargetNodeId); ok {
		return x.IdTargetNodeId
	}
	return nil
}

type isSnodeModificationRequestIEsValue_SnodeModificationRequestIes interface {
	isSnodeModificationRequestIEsValue_SnodeModificationRequestIes()
}

type SnodeModificationRequestIEsValue_IdMNgRannodeUexnApid struct {
	// @inject_tag: aper:"choiceIdx:1,"
	IdMNgRannodeUexnApid *xnap_ies.NgRAnnodeUexnApid `protobuf:"bytes,1,opt,name=id_m_ng_rannode_uexn_apid,json=id-M-NG-RANnodeUEXnAPID,proto3,oneof" aper:"choiceIdx:1,"`
}

type SnodeModificationRequestIEsValue_IdSNgRannodeUexnApid struct {
	// @inject_tag: aper:"choiceIdx:2,"
	IdSNgRannodeUexnApid *xnap_ies.NgRAnnodeUexnApid `protobuf:"bytes,2,opt,name=id_s_ng_rannode_uexn_apid,json=id-S-NG-RANnodeUEXnAPID,proto3,oneof" aper:"choiceIdx:2,"`
}

type SnodeModificationRequestIEsValue_IdCause struct {
	// @inject_tag: aper:"choiceIdx:3,"
	IdCause *xnap_ies.Cause `protobuf:"bytes,3,opt,name=id_cause,json=id-Cause,proto3,oneof" aper:"choiceIdx:3,"`
}

type SnodeModificationRequestIEsValue_IdPdcpchangeIndication struct {
	// @inject_tag: aper:"choiceIdx:4,"
	IdPdcpchangeIndication *xnap_ies.PdcpchangeIndication `protobuf:"bytes,4,opt,name=id_pdcpchange_indication,json=id-PDCPChangeIndication,proto3,oneof" aper:"choiceIdx:4,"`
}

type SnodeModificationRequestIEsValue_IdSelectedPlmn struct {
	// @inject_tag: aper:"choiceIdx:5,"
	IdSelectedPlmn *xnap_ies.PlmnIdentity `protobuf:"bytes,5,opt,name=id_selected_plmn,json=id-selectedPLMN,proto3,oneof" aper:"choiceIdx:5,"`
}

type SnodeModificationRequestIEsValue_IdMobilityRestrictionList struct {
	// @inject_tag: aper:"choiceIdx:6,valueExt,"
	IdMobilityRestrictionList *xnap_ies.MobilityRestrictionList `protobuf:"bytes,6,opt,name=id_mobility_restriction_list,json=id-MobilityRestrictionList,proto3,oneof" aper:"choiceIdx:6,valueExt,"`
}

type SnodeModificationRequestIEsValue_IdScgconfigurationQuery struct {
	// @inject_tag: aper:"choiceIdx:7,valueExt,valueLB:0,valueUB:0,"
	IdScgconfigurationQuery xnap_ies.ScgconfigurationQuery `protobuf:"varint,7,opt,name=id_scgconfiguration_query,json=id-SCGConfigurationQuery,proto3,enum=xnap.v1.ScgconfigurationQuery,oneof" aper:"choiceIdx:7,valueExt,valueLB:0,valueUB:0,"`
}

type SnodeModificationRequestIEsValue_IdUecontextInfoSnmodRequest struct {
	// @inject_tag: aper:"choiceIdx:8,valueExt,"
	IdUecontextInfoSnmodRequest *UecontextInfoSNmodRequest `protobuf:"bytes,8,opt,name=id_uecontext_info_snmod_request,json=id-UEContextInfo-SNModRequest,proto3,oneof" aper:"choiceIdx:8,valueExt,"`
}

type SnodeModificationRequestIEsValue_IdMnToSnContainer struct {
	// @inject_tag: aper:"choiceIdx:9,"
	IdMnToSnContainer string `protobuf:"bytes,9,opt,name=id_mn_to_sn_container,json=id-MN-to-SN-Container,proto3,oneof" aper:"choiceIdx:9,"`
}

type SnodeModificationRequestIEsValue_IdRequestedSplitSrb struct {
	// @inject_tag: aper:"choiceIdx:10,valueExt,valueLB:0,valueUB:2,"
	IdRequestedSplitSrb xnap_ies.SplitSrbsTypes `protobuf:"varint,10,opt,name=id_requested_split_srb,json=id-requestedSplitSRB,proto3,enum=xnap.v1.SplitSrbsTypes,oneof" aper:"choiceIdx:10,valueExt,valueLB:0,valueUB:2,"`
}

type SnodeModificationRequestIEsValue_IdRequestedSplitSrbrelease struct {
	// @inject_tag: aper:"choiceIdx:11,valueExt,valueLB:0,valueUB:2,"
	IdRequestedSplitSrbrelease xnap_ies.SplitSrbsTypes `protobuf:"varint,11,opt,name=id_requested_split_srbrelease,json=id-requestedSplitSRBrelease,proto3,enum=xnap.v1.SplitSrbsTypes,oneof" aper:"choiceIdx:11,valueExt,valueLB:0,valueUB:2,"`
}

type SnodeModificationRequestIEsValue_IdDesiredActNotificationLevel struct {
	// @inject_tag: aper:"choiceIdx:12,valueExt,valueLB:0,valueUB:3,"
	IdDesiredActNotificationLevel xnap_ies.DesiredActNotificationLevel `protobuf:"varint,12,opt,name=id_desired_act_notification_level,json=id-DesiredActNotificationLevel,proto3,enum=xnap.v1.DesiredActNotificationLevel,oneof" aper:"choiceIdx:12,valueExt,valueLB:0,valueUB:3,"`
}

type SnodeModificationRequestIEsValue_IdAdditionalDrbids struct {
	// @inject_tag: aper:"choiceIdx:13,"
	IdAdditionalDrbids *xnap_ies.DrbList `protobuf:"bytes,13,opt,name=id_additional_drbids,json=id-AdditionalDRBIDs,proto3,oneof" aper:"choiceIdx:13,"`
}

type SnodeModificationRequestIEsValue_IdSNgRannodeMaxIpdataRateUl struct {
	// @inject_tag: aper:"choiceIdx:14,"
	IdSNgRannodeMaxIpdataRateUl *xnap_ies.BitRate `protobuf:"bytes,14,opt,name=id_s_ng_rannode_max_ipdata_rate_ul,json=id-S-NG-RANnodeMaxIPDataRate-UL,proto3,oneof" aper:"choiceIdx:14,"`
}

type SnodeModificationRequestIEsValue_IdSNgRannodeMaxIpdataRateDl struct {
	// @inject_tag: aper:"choiceIdx:15,"
	IdSNgRannodeMaxIpdataRateDl *xnap_ies.BitRate `protobuf:"bytes,15,opt,name=id_s_ng_rannode_max_ipdata_rate_dl,json=id-S-NG-RANnodeMaxIPDataRate-DL,proto3,oneof" aper:"choiceIdx:15,"`
}

type SnodeModificationRequestIEsValue_IdLocationInformationSnreporting struct {
	// @inject_tag: aper:"choiceIdx:16,valueExt,valueLB:0,valueUB:0,"
	IdLocationInformationSnreporting xnap_ies.LocationInformationSnreporting `protobuf:"varint,16,opt,name=id_location_information_snreporting,json=id-LocationInformationSNReporting,proto3,enum=xnap.v1.LocationInformationSnreporting,oneof" aper:"choiceIdx:16,valueExt,valueLB:0,valueUB:0,"`
}

type SnodeModificationRequestIEsValue_IdMrDcResourceCoordinationInfo struct {
	// @inject_tag: aper:"choiceIdx:17,valueExt,"
	IdMrDcResourceCoordinationInfo *xnap_ies.MrDCResourceCoordinationInfo `protobuf:"bytes,17,opt,name=id_mr_dc_resource_coordination_info,json=id-MR-DC-ResourceCoordinationInfo,proto3,oneof" aper:"choiceIdx:17,valueExt,"`
}

type SnodeModificationRequestIEsValue_IdPcellId struct {
	// @inject_tag: aper:"choiceIdx:18,valueExt,"
	IdPcellId *xnap_ies.GlobalNgRAncellID `protobuf:"bytes,18,opt,name=id_pcell_id,json=id-PCellID,proto3,oneof" aper:"choiceIdx:18,valueExt,"`
}

type SnodeModificationRequestIEsValue_IdNeDcTdmPattern struct {
	// @inject_tag: aper:"choiceIdx:19,valueExt,"
	IdNeDcTdmPattern *xnap_ies.NeDCTDmPattern `protobuf:"bytes,19,opt,name=id_ne_dc_tdm_pattern,json=id-NE-DC-TDM-Pattern,proto3,oneof" aper:"choiceIdx:19,valueExt,"`
}

type SnodeModificationRequestIEsValue_IdRequestedFastMcgrecoveryViaSrb3 struct {
	// @inject_tag: aper:"choiceIdx:20,valueExt,valueLB:0,valueUB:0,"
	IdRequestedFastMcgrecoveryViaSrb3 RequestedFastMcgrecoveryViaSrb3 `protobuf:"varint,20,opt,name=id_requested_fast_mcgrecovery_via_srb3,json=id-RequestedFastMCGRecoveryViaSRB3,proto3,enum=xnap.v1.RequestedFastMcgrecoveryViaSrb3,oneof" aper:"choiceIdx:20,valueExt,valueLB:0,valueUB:0,"`
}

type SnodeModificationRequestIEsValue_IdRequestedFastMcgrecoveryViaSrb3Release struct {
	// @inject_tag: aper:"choiceIdx:21,valueExt,valueLB:0,valueUB:0,"
	IdRequestedFastMcgrecoveryViaSrb3Release RequestedFastMcgrecoveryViaSrb3Release `protobuf:"varint,21,opt,name=id_requested_fast_mcgrecovery_via_srb3_release,json=id-RequestedFastMCGRecoveryViaSRB3Release,proto3,enum=xnap.v1.RequestedFastMcgrecoveryViaSrb3Release,oneof" aper:"choiceIdx:21,valueExt,valueLB:0,valueUB:0,"`
}

type SnodeModificationRequestIEsValue_IdSntriggered struct {
	// @inject_tag: aper:"choiceIdx:22,valueExt,valueLB:0,valueUB:0,"
	IdSntriggered xnap_ies.Sntriggered `protobuf:"varint,22,opt,name=id_sntriggered,json=id-SNTriggered,proto3,enum=xnap.v1.Sntriggered,oneof" aper:"choiceIdx:22,valueExt,valueLB:0,valueUB:0,"`
}

type SnodeModificationRequestIEsValue_IdTargetNodeId struct {
	// @inject_tag: aper:"choiceIdx:23,"
	IdTargetNodeId *xnap_ies.GlobalNgRAnnodeID `protobuf:"bytes,23,opt,name=id_target_node_id,json=id-TargetNodeID,proto3,oneof" aper:"choiceIdx:23,"`
}

func (*SnodeModificationRequestIEsValue_IdMNgRannodeUexnApid) isSnodeModificationRequestIEsValue_SnodeModificationRequestIes() {
}

func (*SnodeModificationRequestIEsValue_IdSNgRannodeUexnApid) isSnodeModificationRequestIEsValue_SnodeModificationRequestIes() {
}

func (*SnodeModificationRequestIEsValue_IdCause) isSnodeModificationRequestIEsValue_SnodeModificationRequestIes() {
}

func (*SnodeModificationRequestIEsValue_IdPdcpchangeIndication) isSnodeModificationRequestIEsValue_SnodeModificationRequestIes() {
}

func (*SnodeModificationRequestIEsValue_IdSelectedPlmn) isSnodeModificationRequestIEsValue_SnodeModificationRequestIes() {
}

func (*SnodeModificationRequestIEsValue_IdMobilityRestrictionList) isSnodeModificationRequestIEsValue_SnodeModificationRequestIes() {
}

func (*SnodeModificationRequestIEsValue_IdScgconfigurationQuery) isSnodeModificationRequestIEsValue_SnodeModificationRequestIes() {
}

func (*SnodeModificationRequestIEsValue_IdUecontextInfoSnmodRequest) isSnodeModificationRequestIEsValue_SnodeModificationRequestIes() {
}

func (*SnodeModificationRequestIEsValue_IdMnToSnContainer) isSnodeModificationRequestIEsValue_SnodeModificationRequestIes() {
}

func (*SnodeModificationRequestIEsValue_IdRequestedSplitSrb) isSnodeModificationRequestIEsValue_SnodeModificationRequestIes() {
}

func (*SnodeModificationRequestIEsValue_IdRequestedSplitSrbrelease) isSnodeModificationRequestIEsValue_SnodeModificationRequestIes() {
}

func (*SnodeModificationRequestIEsValue_IdDesiredActNotificationLevel) isSnodeModificationRequestIEsValue_SnodeModificationRequestIes() {
}

func (*SnodeModificationRequestIEsValue_IdAdditionalDrbids) isSnodeModificationRequestIEsValue_SnodeModificationRequestIes() {
}

func (*SnodeModificationRequestIEsValue_IdSNgRannodeMaxIpdataRateUl) isSnodeModificationRequestIEsValue_SnodeModificationRequestIes() {
}

func (*SnodeModificationRequestIEsValue_IdSNgRannodeMaxIpdataRateDl) isSnodeModificationRequestIEsValue_SnodeModificationRequestIes() {
}

func (*SnodeModificationRequestIEsValue_IdLocationInformationSnreporting) isSnodeModificationRequestIEsValue_SnodeModificationRequestIes() {
}

func (*SnodeModificationRequestIEsValue_IdMrDcResourceCoordinationInfo) isSnodeModificationRequestIEsValue_SnodeModificationRequestIes() {
}

func (*SnodeModificationRequestIEsValue_IdPcellId) isSnodeModificationRequestIEsValue_SnodeModificationRequestIes() {
}

func (*SnodeModificationRequestIEsValue_IdNeDcTdmPattern) isSnodeModificationRequestIEsValue_SnodeModificationRequestIes() {
}

func (*SnodeModificationRequestIEsValue_IdRequestedFastMcgrecoveryViaSrb3) isSnodeModificationRequestIEsValue_SnodeModificationRequestIes() {
}

func (*SnodeModificationRequestIEsValue_IdRequestedFastMcgrecoveryViaSrb3Release) isSnodeModificationRequestIEsValue_SnodeModificationRequestIes() {
}

func (*SnodeModificationRequestIEsValue_IdSntriggered) isSnodeModificationRequestIEsValue_SnodeModificationRequestIes() {
}

func (*SnodeModificationRequestIEsValue_IdTargetNodeId) isSnodeModificationRequestIEsValue_SnodeModificationRequestIes() {
}

// concrete instance(s) of class XNAP-PROTOCOL-IES from xnap_v1.asn1:1512
// @inject_tag: aper:"valueExt"
// {SNodeModificationRequest-IEs}
type SnodeModificationRequestIEs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"unique,"
	Id *xnap_commondatatypes.ProtocolIeID `protobuf:"bytes,1,opt,name=id,json=&id,proto3" json:"id,omitempty" aper:"unique,"`
	// @inject_tag: aper:"valueLB:0,valueUB:2,"
	Criticality xnap_commondatatypes.Criticality `protobuf:"varint,2,opt,name=criticality,json=&criticality,proto3,enum=xnap.v1.Criticality" json:"criticality,omitempty" aper:"valueLB:0,valueUB:2,"`
	// @inject_tag: aper:"canonicalOrder,"
	Value *SnodeModificationRequestIEsValue `protobuf:"bytes,3,opt,name=value,json=&Value,proto3" json:"value,omitempty" aper:"canonicalOrder,"`
}

func (x *SnodeModificationRequestIEs) Reset() {
	*x = SnodeModificationRequestIEs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[82]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SnodeModificationRequestIEs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SnodeModificationRequestIEs) ProtoMessage() {}

func (x *SnodeModificationRequestIEs) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[82]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SnodeModificationRequestIEs.ProtoReflect.Descriptor instead.
func (*SnodeModificationRequestIEs) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_pdu_contents_proto_rawDescGZIP(), []int{82}
}

func (x *SnodeModificationRequestIEs) GetId() *xnap_commondatatypes.ProtocolIeID {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *SnodeModificationRequestIEs) GetCriticality() xnap_commondatatypes.Criticality {
	if x != nil {
		return x.Criticality
	}
	return xnap_commondatatypes.Criticality(0)
}

func (x *SnodeModificationRequestIEs) GetValue() *SnodeModificationRequestIEsValue {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:1508
// @inject_tag: aper:"valueExt"
// {SNodeModificationRequest}
type SnodeModificationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProtocolIes []*SnodeModificationRequestIEs `protobuf:"bytes,1,rep,name=protocol_ies,json=protocolIEs,proto3" json:"protocol_ies,omitempty"`
}

func (x *SnodeModificationRequest) Reset() {
	*x = SnodeModificationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[83]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SnodeModificationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SnodeModificationRequest) ProtoMessage() {}

func (x *SnodeModificationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[83]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SnodeModificationRequest.ProtoReflect.Descriptor instead.
func (*SnodeModificationRequest) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_pdu_contents_proto_rawDescGZIP(), []int{83}
}

func (x *SnodeModificationRequest) GetProtocolIes() []*SnodeModificationRequestIEs {
	if x != nil {
		return x.ProtocolIes
	}
	return nil
}

// value set from xnap_v1.asn1:1552
// {UEContextInfo-SNModRequest-ExtIEs}
type UecontextInfoSNmodRequestExtIes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *emptypb.Empty `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *UecontextInfoSNmodRequestExtIes) Reset() {
	*x = UecontextInfoSNmodRequestExtIes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[84]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UecontextInfoSNmodRequestExtIes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UecontextInfoSNmodRequestExtIes) ProtoMessage() {}

func (x *UecontextInfoSNmodRequestExtIes) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[84]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UecontextInfoSNmodRequestExtIes.ProtoReflect.Descriptor instead.
func (*UecontextInfoSNmodRequestExtIes) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_pdu_contents_proto_rawDescGZIP(), []int{84}
}

func (x *UecontextInfoSNmodRequestExtIes) GetValue() *emptypb.Empty {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:1540
// @inject_tag: aper:"valueExt"
// {UEContextInfo-SNModRequest}
type UecontextInfoSNmodRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"optional,valueExt,"
	UeSecurityCapabilities *xnap_ies.UesecurityCapabilities `protobuf:"bytes,1,opt,name=ue_security_capabilities,json=ueSecurityCapabilities,proto3,oneof" json:"ue_security_capabilities,omitempty" aper:"optional,valueExt,"`
	// @inject_tag: aper:"optional,"
	SNgRannodeSecurityKey *xnap_ies.SNGRAnnodeSecurityKey `protobuf:"bytes,2,opt,name=s_ng_rannode_security_key,json=s-ng-RANnode-SecurityKey,proto3,oneof" json:"s_ng_rannode_security_key,omitempty" aper:"optional,"`
	// @inject_tag: aper:"optional,valueExt,"
	SNgRannodeUeAmbr *xnap_ies.UeaggregateMaximumBitRate `protobuf:"bytes,3,opt,name=s_ng_rannode_ue_ambr,json=s-ng-RANnodeUE-AMBR,proto3,oneof" json:"s_ng_rannode_ue_ambr,omitempty" aper:"optional,valueExt,"`
	// @inject_tag: aper:"optional,"
	IndexToRatFrequencySelectionPriority *xnap_ies.RfspIndex `protobuf:"bytes,4,opt,name=index_to_rat_frequency_selection_priority,json=indexToRatFrequencySelectionPriority,proto3,oneof" json:"index_to_rat_frequency_selection_priority,omitempty" aper:"optional,"`
	// @inject_tag: aper:"optional,valueExt,valueLB:0,valueUB:1,"
	LowerLayerPresenceStatusChange *xnap_ies.LowerLayerPresenceStatusChange `protobuf:"varint,5,opt,name=lower_layer_presence_status_change,json=lowerLayerPresenceStatusChange,proto3,enum=xnap.v1.LowerLayerPresenceStatusChange,oneof" json:"lower_layer_presence_status_change,omitempty" aper:"optional,valueExt,valueLB:0,valueUB:1,"`
	// @inject_tag: aper:"optional,"
	PduSessionResourceToBeAdded *PdusessionsToBeAddedSNmodRequestList `protobuf:"bytes,6,opt,name=pdu_session_resource_to_be_added,json=pduSessionResourceToBeAdded,proto3,oneof" json:"pdu_session_resource_to_be_added,omitempty" aper:"optional,"`
	// @inject_tag: aper:"optional,"
	PduSessionResourceToBeModified *PdusessionsToBeModifiedSNmodRequestList `protobuf:"bytes,7,opt,name=pdu_session_resource_to_be_modified,json=pduSessionResourceToBeModified,proto3,oneof" json:"pdu_session_resource_to_be_modified,omitempty" aper:"optional,"`
	// @inject_tag: aper:"optional,valueExt,"
	PduSessionResourceToBeReleased *PdusessionsToBeReleasedSNmodRequestList `protobuf:"bytes,8,opt,name=pdu_session_resource_to_be_released,json=pduSessionResourceToBeReleased,proto3,oneof" json:"pdu_session_resource_to_be_released,omitempty" aper:"optional,valueExt,"`
	// @inject_tag: aper:"optional,sizeLB:1,"
	IEExtension []*UecontextInfoSNmodRequestExtIes `protobuf:"bytes,9,rep,name=i_e_extension,json=iE-Extension,proto3" json:"i_e_extension,omitempty" aper:"optional,sizeLB:1,"`
}

func (x *UecontextInfoSNmodRequest) Reset() {
	*x = UecontextInfoSNmodRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[85]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UecontextInfoSNmodRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UecontextInfoSNmodRequest) ProtoMessage() {}

func (x *UecontextInfoSNmodRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[85]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UecontextInfoSNmodRequest.ProtoReflect.Descriptor instead.
func (*UecontextInfoSNmodRequest) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_pdu_contents_proto_rawDescGZIP(), []int{85}
}

func (x *UecontextInfoSNmodRequest) GetUeSecurityCapabilities() *xnap_ies.UesecurityCapabilities {
	if x != nil {
		return x.UeSecurityCapabilities
	}
	return nil
}

func (x *UecontextInfoSNmodRequest) GetSNgRannodeSecurityKey() *xnap_ies.SNGRAnnodeSecurityKey {
	if x != nil {
		return x.SNgRannodeSecurityKey
	}
	return nil
}

func (x *UecontextInfoSNmodRequest) GetSNgRannodeUeAmbr() *xnap_ies.UeaggregateMaximumBitRate {
	if x != nil {
		return x.SNgRannodeUeAmbr
	}
	return nil
}

func (x *UecontextInfoSNmodRequest) GetIndexToRatFrequencySelectionPriority() *xnap_ies.RfspIndex {
	if x != nil {
		return x.IndexToRatFrequencySelectionPriority
	}
	return nil
}

func (x *UecontextInfoSNmodRequest) GetLowerLayerPresenceStatusChange() xnap_ies.LowerLayerPresenceStatusChange {
	if x != nil && x.LowerLayerPresenceStatusChange != nil {
		return *x.LowerLayerPresenceStatusChange
	}
	return xnap_ies.LowerLayerPresenceStatusChange(0)
}

func (x *UecontextInfoSNmodRequest) GetPduSessionResourceToBeAdded() *PdusessionsToBeAddedSNmodRequestList {
	if x != nil {
		return x.PduSessionResourceToBeAdded
	}
	return nil
}

func (x *UecontextInfoSNmodRequest) GetPduSessionResourceToBeModified() *PdusessionsToBeModifiedSNmodRequestList {
	if x != nil {
		return x.PduSessionResourceToBeModified
	}
	return nil
}

func (x *UecontextInfoSNmodRequest) GetPduSessionResourceToBeReleased() *PdusessionsToBeReleasedSNmodRequestList {
	if x != nil {
		return x.PduSessionResourceToBeReleased
	}
	return nil
}

func (x *UecontextInfoSNmodRequest) GetIEExtension() []*UecontextInfoSNmodRequestExtIes {
	if x != nil {
		return x.IEExtension
	}
	return nil
}

// sequence from xnap_v1.asn1:1558
// {PDUSessionsToBeAdded-SNModRequest-List}
type PdusessionsToBeAddedSNmodRequestList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"valueExt,sizeLB:1,sizeUB:256,"
	Value []*PdusessionsToBeAddedSNmodRequestItem `protobuf:"bytes,1,rep,name=value,proto3" json:"value,omitempty" aper:"valueExt,sizeLB:1,sizeUB:256,"`
}

func (x *PdusessionsToBeAddedSNmodRequestList) Reset() {
	*x = PdusessionsToBeAddedSNmodRequestList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[86]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PdusessionsToBeAddedSNmodRequestList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PdusessionsToBeAddedSNmodRequestList) ProtoMessage() {}

func (x *PdusessionsToBeAddedSNmodRequestList) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[86]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PdusessionsToBeAddedSNmodRequestList.ProtoReflect.Descriptor instead.
func (*PdusessionsToBeAddedSNmodRequestList) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_pdu_contents_proto_rawDescGZIP(), []int{86}
}

func (x *PdusessionsToBeAddedSNmodRequestList) GetValue() []*PdusessionsToBeAddedSNmodRequestItem {
	if x != nil {
		return x.Value
	}
	return nil
}

// value set from xnap_v1.asn1:1571
// {PDUSessionsToBeAdded-SNModRequest-Item-ExtIEs}
type PdusessionsToBeAddedSNmodRequestItemExtIes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *emptypb.Empty `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *PdusessionsToBeAddedSNmodRequestItemExtIes) Reset() {
	*x = PdusessionsToBeAddedSNmodRequestItemExtIes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[87]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PdusessionsToBeAddedSNmodRequestItemExtIes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PdusessionsToBeAddedSNmodRequestItemExtIes) ProtoMessage() {}

func (x *PdusessionsToBeAddedSNmodRequestItemExtIes) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[87]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PdusessionsToBeAddedSNmodRequestItemExtIes.ProtoReflect.Descriptor instead.
func (*PdusessionsToBeAddedSNmodRequestItemExtIes) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_pdu_contents_proto_rawDescGZIP(), []int{87}
}

func (x *PdusessionsToBeAddedSNmodRequestItemExtIes) GetValue() *emptypb.Empty {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:1559
// @inject_tag: aper:"valueExt"
// {PDUSessionsToBeAdded-SNModRequest-Item}
type PdusessionsToBeAddedSNmodRequestItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PduSessionId *xnap_ies.PdusessionID `protobuf:"bytes,1,opt,name=pdu_session_id,json=pduSessionId,proto3" json:"pdu_session_id,omitempty"`
	// @inject_tag: aper:"valueExt,"
	SNssai *xnap_ies.SNSsai `protobuf:"bytes,2,opt,name=s_nssai,json=s-NSSAI,proto3" json:"s_nssai,omitempty" aper:"valueExt,"`
	// @inject_tag: aper:"optional,valueExt,"
	SNPdusessionAmbr *xnap_ies.PdusessionAggregateMaximumBitRate `protobuf:"bytes,3,opt,name=s_n_pdusession_ambr,json=sN-PDUSessionAMBR,proto3,oneof" json:"s_n_pdusession_ambr,omitempty" aper:"optional,valueExt,"`
	// @inject_tag: aper:"optional,valueExt,"
	SnTerminated *xnap_ies.PdusessionResourceSetupInfoSNterminated `protobuf:"bytes,4,opt,name=sn_terminated,json=sn-terminated,proto3,oneof" json:"sn_terminated,omitempty" aper:"optional,valueExt,"`
	// @inject_tag: aper:"optional,valueExt,"
	MnTerminated *xnap_ies.PdusessionResourceSetupInfoMNterminated `protobuf:"bytes,5,opt,name=mn_terminated,json=mn-terminated,proto3,oneof" json:"mn_terminated,omitempty" aper:"optional,valueExt,"`
	// @inject_tag: aper:"optional,sizeLB:1,"
	IEExtension []*PdusessionsToBeAddedSNmodRequestItemExtIes `protobuf:"bytes,6,rep,name=i_e_extension,json=iE-Extension,proto3" json:"i_e_extension,omitempty" aper:"optional,sizeLB:1,"`
}

func (x *PdusessionsToBeAddedSNmodRequestItem) Reset() {
	*x = PdusessionsToBeAddedSNmodRequestItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[88]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PdusessionsToBeAddedSNmodRequestItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PdusessionsToBeAddedSNmodRequestItem) ProtoMessage() {}

func (x *PdusessionsToBeAddedSNmodRequestItem) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[88]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PdusessionsToBeAddedSNmodRequestItem.ProtoReflect.Descriptor instead.
func (*PdusessionsToBeAddedSNmodRequestItem) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_pdu_contents_proto_rawDescGZIP(), []int{88}
}

func (x *PdusessionsToBeAddedSNmodRequestItem) GetPduSessionId() *xnap_ies.PdusessionID {
	if x != nil {
		return x.PduSessionId
	}
	return nil
}

func (x *PdusessionsToBeAddedSNmodRequestItem) GetSNssai() *xnap_ies.SNSsai {
	if x != nil {
		return x.SNssai
	}
	return nil
}

func (x *PdusessionsToBeAddedSNmodRequestItem) GetSNPdusessionAmbr() *xnap_ies.PdusessionAggregateMaximumBitRate {
	if x != nil {
		return x.SNPdusessionAmbr
	}
	return nil
}

func (x *PdusessionsToBeAddedSNmodRequestItem) GetSnTerminated() *xnap_ies.PdusessionResourceSetupInfoSNterminated {
	if x != nil {
		return x.SnTerminated
	}
	return nil
}

func (x *PdusessionsToBeAddedSNmodRequestItem) GetMnTerminated() *xnap_ies.PdusessionResourceSetupInfoMNterminated {
	if x != nil {
		return x.MnTerminated
	}
	return nil
}

func (x *PdusessionsToBeAddedSNmodRequestItem) GetIEExtension() []*PdusessionsToBeAddedSNmodRequestItemExtIes {
	if x != nil {
		return x.IEExtension
	}
	return nil
}

// sequence from xnap_v1.asn1:1578
// {PDUSessionsToBeModified-SNModRequest-List}
type PdusessionsToBeModifiedSNmodRequestList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"valueExt,sizeLB:1,sizeUB:256,"
	Value []*PdusessionsToBeModifiedSNmodRequestItem `protobuf:"bytes,1,rep,name=value,proto3" json:"value,omitempty" aper:"valueExt,sizeLB:1,sizeUB:256,"`
}

func (x *PdusessionsToBeModifiedSNmodRequestList) Reset() {
	*x = PdusessionsToBeModifiedSNmodRequestList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[89]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PdusessionsToBeModifiedSNmodRequestList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PdusessionsToBeModifiedSNmodRequestList) ProtoMessage() {}

func (x *PdusessionsToBeModifiedSNmodRequestList) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[89]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PdusessionsToBeModifiedSNmodRequestList.ProtoReflect.Descriptor instead.
func (*PdusessionsToBeModifiedSNmodRequestList) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_pdu_contents_proto_rawDescGZIP(), []int{89}
}

func (x *PdusessionsToBeModifiedSNmodRequestList) GetValue() []*PdusessionsToBeModifiedSNmodRequestItem {
	if x != nil {
		return x.Value
	}
	return nil
}

// value set from xnap_v1.asn1:1590
// {PDUSessionsToBeModified-SNModRequest-Item-ExtIEs&Extension}
type PdusessionsToBeModifiedSNmodRequestItemExtIesExtension struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// value set translated as choice from xnap_v1.asn1:1590
	//
	// Types that are assignable to PdusessionsToBeModifiedSnmodRequestItemExtIes:
	//	*PdusessionsToBeModifiedSNmodRequestItemExtIesExtension_IdSNssai
	//	*PdusessionsToBeModifiedSNmodRequestItemExtIesExtension_IdPdusessionExpectedUeactivityBehaviour
	PdusessionsToBeModifiedSnmodRequestItemExtIes isPdusessionsToBeModifiedSNmodRequestItemExtIesExtension_PdusessionsToBeModifiedSnmodRequestItemExtIes `protobuf_oneof:"pdusessions_to_be_modified_snmod_request_item_ext_ies"`
}

func (x *PdusessionsToBeModifiedSNmodRequestItemExtIesExtension) Reset() {
	*x = PdusessionsToBeModifiedSNmodRequestItemExtIesExtension{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[90]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PdusessionsToBeModifiedSNmodRequestItemExtIesExtension) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PdusessionsToBeModifiedSNmodRequestItemExtIesExtension) ProtoMessage() {}

func (x *PdusessionsToBeModifiedSNmodRequestItemExtIesExtension) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[90]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PdusessionsToBeModifiedSNmodRequestItemExtIesExtension.ProtoReflect.Descriptor instead.
func (*PdusessionsToBeModifiedSNmodRequestItemExtIesExtension) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_pdu_contents_proto_rawDescGZIP(), []int{90}
}

func (m *PdusessionsToBeModifiedSNmodRequestItemExtIesExtension) GetPdusessionsToBeModifiedSnmodRequestItemExtIes() isPdusessionsToBeModifiedSNmodRequestItemExtIesExtension_PdusessionsToBeModifiedSnmodRequestItemExtIes {
	if m != nil {
		return m.PdusessionsToBeModifiedSnmodRequestItemExtIes
	}
	return nil
}

func (x *PdusessionsToBeModifiedSNmodRequestItemExtIesExtension) GetIdSNssai() *xnap_ies.SNSsai {
	if x, ok := x.GetPdusessionsToBeModifiedSnmodRequestItemExtIes().(*PdusessionsToBeModifiedSNmodRequestItemExtIesExtension_IdSNssai); ok {
		return x.IdSNssai
	}
	return nil
}

func (x *PdusessionsToBeModifiedSNmodRequestItemExtIesExtension) GetIdPdusessionExpectedUeactivityBehaviour() *xnap_ies.ExpectedUeactivityBehaviour {
	if x, ok := x.GetPdusessionsToBeModifiedSnmodRequestItemExtIes().(*PdusessionsToBeModifiedSNmodRequestItemExtIesExtension_IdPdusessionExpectedUeactivityBehaviour); ok {
		return x.IdPdusessionExpectedUeactivityBehaviour
	}
	return nil
}

type isPdusessionsToBeModifiedSNmodRequestItemExtIesExtension_PdusessionsToBeModifiedSnmodRequestItemExtIes interface {
	isPdusessionsToBeModifiedSNmodRequestItemExtIesExtension_PdusessionsToBeModifiedSnmodRequestItemExtIes()
}

type PdusessionsToBeModifiedSNmodRequestItemExtIesExtension_IdSNssai struct {
	// @inject_tag: aper:"choiceIdx:1,valueExt,"
	IdSNssai *xnap_ies.SNSsai `protobuf:"bytes,1,opt,name=id_s_nssai,json=id-S-NSSAI,proto3,oneof" aper:"choiceIdx:1,valueExt,"`
}

type PdusessionsToBeModifiedSNmodRequestItemExtIesExtension_IdPdusessionExpectedUeactivityBehaviour struct {
	// @inject_tag: aper:"choiceIdx:2,valueExt,"
	IdPdusessionExpectedUeactivityBehaviour *xnap_ies.ExpectedUeactivityBehaviour `protobuf:"bytes,2,opt,name=id_pdusession_expected_ueactivity_behaviour,json=id-PDUSessionExpectedUEActivityBehaviour,proto3,oneof" aper:"choiceIdx:2,valueExt,"`
}

func (*PdusessionsToBeModifiedSNmodRequestItemExtIesExtension_IdSNssai) isPdusessionsToBeModifiedSNmodRequestItemExtIesExtension_PdusessionsToBeModifiedSnmodRequestItemExtIes() {
}

func (*PdusessionsToBeModifiedSNmodRequestItemExtIesExtension_IdPdusessionExpectedUeactivityBehaviour) isPdusessionsToBeModifiedSNmodRequestItemExtIesExtension_PdusessionsToBeModifiedSnmodRequestItemExtIes() {
}

// concrete instance(s) of class XNAP-PROTOCOL-EXTENSION from xnap_v1.asn1:1590
// @inject_tag: aper:"valueExt"
// {PDUSessionsToBeModified-SNModRequest-Item-ExtIEs}
type PdusessionsToBeModifiedSNmodRequestItemExtIes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"unique,"
	Id *xnap_commondatatypes.ProtocolIeID `protobuf:"bytes,1,opt,name=id,json=&id,proto3" json:"id,omitempty" aper:"unique,"`
	// @inject_tag: aper:"valueLB:0,valueUB:2,"
	Criticality xnap_commondatatypes.Criticality `protobuf:"varint,2,opt,name=criticality,json=&criticality,proto3,enum=xnap.v1.Criticality" json:"criticality,omitempty" aper:"valueLB:0,valueUB:2,"`
	// @inject_tag: aper:"canonicalOrder,"
	Extension *PdusessionsToBeModifiedSNmodRequestItemExtIesExtension `protobuf:"bytes,3,opt,name=extension,json=&Extension,proto3" json:"extension,omitempty" aper:"canonicalOrder,"`
}

func (x *PdusessionsToBeModifiedSNmodRequestItemExtIes) Reset() {
	*x = PdusessionsToBeModifiedSNmodRequestItemExtIes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[91]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PdusessionsToBeModifiedSNmodRequestItemExtIes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PdusessionsToBeModifiedSNmodRequestItemExtIes) ProtoMessage() {}

func (x *PdusessionsToBeModifiedSNmodRequestItemExtIes) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[91]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PdusessionsToBeModifiedSNmodRequestItemExtIes.ProtoReflect.Descriptor instead.
func (*PdusessionsToBeModifiedSNmodRequestItemExtIes) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_pdu_contents_proto_rawDescGZIP(), []int{91}
}

func (x *PdusessionsToBeModifiedSNmodRequestItemExtIes) GetId() *xnap_commondatatypes.ProtocolIeID {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *PdusessionsToBeModifiedSNmodRequestItemExtIes) GetCriticality() xnap_commondatatypes.Criticality {
	if x != nil {
		return x.Criticality
	}
	return xnap_commondatatypes.Criticality(0)
}

func (x *PdusessionsToBeModifiedSNmodRequestItemExtIes) GetExtension() *PdusessionsToBeModifiedSNmodRequestItemExtIesExtension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// sequence from xnap_v1.asn1:1579
// @inject_tag: aper:"valueExt"
// {PDUSessionsToBeModified-SNModRequest-Item}
type PdusessionsToBeModifiedSNmodRequestItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PduSessionId *xnap_ies.PdusessionID `protobuf:"bytes,1,opt,name=pdu_session_id,json=pduSessionId,proto3" json:"pdu_session_id,omitempty"`
	// @inject_tag: aper:"optional,valueExt,"
	SNPdusessionAmbr *xnap_ies.PdusessionAggregateMaximumBitRate `protobuf:"bytes,2,opt,name=s_n_pdusession_ambr,json=sN-PDUSessionAMBR,proto3,oneof" json:"s_n_pdusession_ambr,omitempty" aper:"optional,valueExt,"`
	// @inject_tag: aper:"optional,valueExt,"
	SnTerminated *xnap_ies.PdusessionResourceModificationInfoSNterminated `protobuf:"bytes,3,opt,name=sn_terminated,json=sn-terminated,proto3,oneof" json:"sn_terminated,omitempty" aper:"optional,valueExt,"`
	// @inject_tag: aper:"optional,valueExt,"
	MnTerminated *xnap_ies.PdusessionResourceModificationInfoMNterminated `protobuf:"bytes,4,opt,name=mn_terminated,json=mn-terminated,proto3,oneof" json:"mn_terminated,omitempty" aper:"optional,valueExt,"`
	// @inject_tag: aper:"optional,sizeLB:1,"
	IEExtension []*PdusessionsToBeModifiedSNmodRequestItemExtIes `protobuf:"bytes,5,rep,name=i_e_extension,json=iE-Extension,proto3" json:"i_e_extension,omitempty" aper:"optional,sizeLB:1,"`
}

func (x *PdusessionsToBeModifiedSNmodRequestItem) Reset() {
	*x = PdusessionsToBeModifiedSNmodRequestItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[92]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PdusessionsToBeModifiedSNmodRequestItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PdusessionsToBeModifiedSNmodRequestItem) ProtoMessage() {}

func (x *PdusessionsToBeModifiedSNmodRequestItem) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[92]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PdusessionsToBeModifiedSNmodRequestItem.ProtoReflect.Descriptor instead.
func (*PdusessionsToBeModifiedSNmodRequestItem) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_pdu_contents_proto_rawDescGZIP(), []int{92}
}

func (x *PdusessionsToBeModifiedSNmodRequestItem) GetPduSessionId() *xnap_ies.PdusessionID {
	if x != nil {
		return x.PduSessionId
	}
	return nil
}

func (x *PdusessionsToBeModifiedSNmodRequestItem) GetSNPdusessionAmbr() *xnap_ies.PdusessionAggregateMaximumBitRate {
	if x != nil {
		return x.SNPdusessionAmbr
	}
	return nil
}

func (x *PdusessionsToBeModifiedSNmodRequestItem) GetSnTerminated() *xnap_ies.PdusessionResourceModificationInfoSNterminated {
	if x != nil {
		return x.SnTerminated
	}
	return nil
}

func (x *PdusessionsToBeModifiedSNmodRequestItem) GetMnTerminated() *xnap_ies.PdusessionResourceModificationInfoMNterminated {
	if x != nil {
		return x.MnTerminated
	}
	return nil
}

func (x *PdusessionsToBeModifiedSNmodRequestItem) GetIEExtension() []*PdusessionsToBeModifiedSNmodRequestItemExtIes {
	if x != nil {
		return x.IEExtension
	}
	return nil
}

// value set from xnap_v1.asn1:1602
// {PDUSessionsToBeReleased-SNModRequest-List-ExtIEs}
type PdusessionsToBeReleasedSNmodRequestListExtIes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *emptypb.Empty `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *PdusessionsToBeReleasedSNmodRequestListExtIes) Reset() {
	*x = PdusessionsToBeReleasedSNmodRequestListExtIes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[93]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PdusessionsToBeReleasedSNmodRequestListExtIes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PdusessionsToBeReleasedSNmodRequestListExtIes) ProtoMessage() {}

func (x *PdusessionsToBeReleasedSNmodRequestListExtIes) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[93]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PdusessionsToBeReleasedSNmodRequestListExtIes.ProtoReflect.Descriptor instead.
func (*PdusessionsToBeReleasedSNmodRequestListExtIes) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_pdu_contents_proto_rawDescGZIP(), []int{93}
}

func (x *PdusessionsToBeReleasedSNmodRequestListExtIes) GetValue() *emptypb.Empty {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:1597
// @inject_tag: aper:"valueExt"
// {PDUSessionsToBeReleased-SNModRequest-List}
type PdusessionsToBeReleasedSNmodRequestList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"optional,"
	PduSessionList *xnap_ies.PdusessionListwithCause `protobuf:"bytes,1,opt,name=pdu_session_list,json=pdu-session-list,proto3,oneof" json:"pdu_session_list,omitempty" aper:"optional,"`
	// @inject_tag: aper:"optional,sizeLB:1,"
	IEExtension []*PdusessionsToBeReleasedSNmodRequestListExtIes `protobuf:"bytes,2,rep,name=i_e_extension,json=iE-Extension,proto3" json:"i_e_extension,omitempty" aper:"optional,sizeLB:1,"`
}

func (x *PdusessionsToBeReleasedSNmodRequestList) Reset() {
	*x = PdusessionsToBeReleasedSNmodRequestList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[94]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PdusessionsToBeReleasedSNmodRequestList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PdusessionsToBeReleasedSNmodRequestList) ProtoMessage() {}

func (x *PdusessionsToBeReleasedSNmodRequestList) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[94]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PdusessionsToBeReleasedSNmodRequestList.ProtoReflect.Descriptor instead.
func (*PdusessionsToBeReleasedSNmodRequestList) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_pdu_contents_proto_rawDescGZIP(), []int{94}
}

func (x *PdusessionsToBeReleasedSNmodRequestList) GetPduSessionList() *xnap_ies.PdusessionListwithCause {
	if x != nil {
		return x.PduSessionList
	}
	return nil
}

func (x *PdusessionsToBeReleasedSNmodRequestList) GetIEExtension() []*PdusessionsToBeReleasedSNmodRequestListExtIes {
	if x != nil {
		return x.IEExtension
	}
	return nil
}

// value set from xnap_v1.asn1:1619
// {SNodeModificationRequestAcknowledge-IEs&Value}
type SnodeModificationRequestAcknowledgeIEsValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// value set translated as choice from xnap_v1.asn1:1619
	//
	// Types that are assignable to SnodeModificationRequestAcknowledgeIes:
	//	*SnodeModificationRequestAcknowledgeIEsValue_IdMNgRannodeUexnApid
	//	*SnodeModificationRequestAcknowledgeIEsValue_IdSNgRannodeUexnApid
	//	*SnodeModificationRequestAcknowledgeIEsValue_IdPdusessionAdmittedSnmodResponse
	//	*SnodeModificationRequestAcknowledgeIEsValue_IdPdusessionNotAdmittedSnmodResponse
	//	*SnodeModificationRequestAcknowledgeIEsValue_IdSnToMnContainer
	//	*SnodeModificationRequestAcknowledgeIEsValue_IdAdmittedSplitSrb
	//	*SnodeModificationRequestAcknowledgeIEsValue_IdAdmittedSplitSrbrelease
	//	*SnodeModificationRequestAcknowledgeIEsValue_IdCriticalityDiagnostics
	//	*SnodeModificationRequestAcknowledgeIEsValue_IdLocationInformationSn
	//	*SnodeModificationRequestAcknowledgeIEsValue_IdMrDcResourceCoordinationInfo
	//	*SnodeModificationRequestAcknowledgeIEsValue_IdPdusessionDataForwardingSnmodResponse
	//	*SnodeModificationRequestAcknowledgeIEsValue_IdRrcconfigIndication
	//	*SnodeModificationRequestAcknowledgeIEsValue_IdAvailableFastMcgrecoveryViaSrb3
	//	*SnodeModificationRequestAcknowledgeIEsValue_IdReleaseFastMcgrecoveryViaSrb3
	//	*SnodeModificationRequestAcknowledgeIEsValue_IdDirectForwardingPathAvailability
	SnodeModificationRequestAcknowledgeIes isSnodeModificationRequestAcknowledgeIEsValue_SnodeModificationRequestAcknowledgeIes `protobuf_oneof:"snode_modification_request_acknowledge_ies"`
}

func (x *SnodeModificationRequestAcknowledgeIEsValue) Reset() {
	*x = SnodeModificationRequestAcknowledgeIEsValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[95]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SnodeModificationRequestAcknowledgeIEsValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SnodeModificationRequestAcknowledgeIEsValue) ProtoMessage() {}

func (x *SnodeModificationRequestAcknowledgeIEsValue) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[95]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SnodeModificationRequestAcknowledgeIEsValue.ProtoReflect.Descriptor instead.
func (*SnodeModificationRequestAcknowledgeIEsValue) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_pdu_contents_proto_rawDescGZIP(), []int{95}
}

func (m *SnodeModificationRequestAcknowledgeIEsValue) GetSnodeModificationRequestAcknowledgeIes() isSnodeModificationRequestAcknowledgeIEsValue_SnodeModificationRequestAcknowledgeIes {
	if m != nil {
		return m.SnodeModificationRequestAcknowledgeIes
	}
	return nil
}

func (x *SnodeModificationRequestAcknowledgeIEsValue) GetIdMNgRannodeUexnApid() *xnap_ies.NgRAnnodeUexnApid {
	if x, ok := x.GetSnodeModificationRequestAcknowledgeIes().(*SnodeModificationRequestAcknowledgeIEsValue_IdMNgRannodeUexnApid); ok {
		return x.IdMNgRannodeUexnApid
	}
	return nil
}

func (x *SnodeModificationRequestAcknowledgeIEsValue) GetIdSNgRannodeUexnApid() *xnap_ies.NgRAnnodeUexnApid {
	if x, ok := x.GetSnodeModificationRequestAcknowledgeIes().(*SnodeModificationRequestAcknowledgeIEsValue_IdSNgRannodeUexnApid); ok {
		return x.IdSNgRannodeUexnApid
	}
	return nil
}

func (x *SnodeModificationRequestAcknowledgeIEsValue) GetIdPdusessionAdmittedSnmodResponse() *PdusessionAdmittedSNmodResponse {
	if x, ok := x.GetSnodeModificationRequestAcknowledgeIes().(*SnodeModificationRequestAcknowledgeIEsValue_IdPdusessionAdmittedSnmodResponse); ok {
		return x.IdPdusessionAdmittedSnmodResponse
	}
	return nil
}

func (x *SnodeModificationRequestAcknowledgeIEsValue) GetIdPdusessionNotAdmittedSnmodResponse() *PdusessionNotAdmittedSNmodResponse {
	if x, ok := x.GetSnodeModificationRequestAcknowledgeIes().(*SnodeModificationRequestAcknowledgeIEsValue_IdPdusessionNotAdmittedSnmodResponse); ok {
		return x.IdPdusessionNotAdmittedSnmodResponse
	}
	return nil
}

func (x *SnodeModificationRequestAcknowledgeIEsValue) GetIdSnToMnContainer() string {
	if x, ok := x.GetSnodeModificationRequestAcknowledgeIes().(*SnodeModificationRequestAcknowledgeIEsValue_IdSnToMnContainer); ok {
		return x.IdSnToMnContainer
	}
	return ""
}

func (x *SnodeModificationRequestAcknowledgeIEsValue) GetIdAdmittedSplitSrb() xnap_ies.SplitSrbsTypes {
	if x, ok := x.GetSnodeModificationRequestAcknowledgeIes().(*SnodeModificationRequestAcknowledgeIEsValue_IdAdmittedSplitSrb); ok {
		return x.IdAdmittedSplitSrb
	}
	return xnap_ies.SplitSrbsTypes(0)
}

func (x *SnodeModificationRequestAcknowledgeIEsValue) GetIdAdmittedSplitSrbrelease() xnap_ies.SplitSrbsTypes {
	if x, ok := x.GetSnodeModificationRequestAcknowledgeIes().(*SnodeModificationRequestAcknowledgeIEsValue_IdAdmittedSplitSrbrelease); ok {
		return x.IdAdmittedSplitSrbrelease
	}
	return xnap_ies.SplitSrbsTypes(0)
}

func (x *SnodeModificationRequestAcknowledgeIEsValue) GetIdCriticalityDiagnostics() *xnap_ies.CriticalityDiagnostics {
	if x, ok := x.GetSnodeModificationRequestAcknowledgeIes().(*SnodeModificationRequestAcknowledgeIEsValue_IdCriticalityDiagnostics); ok {
		return x.IdCriticalityDiagnostics
	}
	return nil
}

func (x *SnodeModificationRequestAcknowledgeIEsValue) GetIdLocationInformationSn() *xnap_ies.TargetCGi {
	if x, ok := x.GetSnodeModificationRequestAcknowledgeIes().(*SnodeModificationRequestAcknowledgeIEsValue_IdLocationInformationSn); ok {
		return x.IdLocationInformationSn
	}
	return nil
}

func (x *SnodeModificationRequestAcknowledgeIEsValue) GetIdMrDcResourceCoordinationInfo() *xnap_ies.MrDCResourceCoordinationInfo {
	if x, ok := x.GetSnodeModificationRequestAcknowledgeIes().(*SnodeModificationRequestAcknowledgeIEsValue_IdMrDcResourceCoordinationInfo); ok {
		return x.IdMrDcResourceCoordinationInfo
	}
	return nil
}

func (x *SnodeModificationRequestAcknowledgeIEsValue) GetIdPdusessionDataForwardingSnmodResponse() *PdusessionDataForwardingSNmodResponse {
	if x, ok := x.GetSnodeModificationRequestAcknowledgeIes().(*SnodeModificationRequestAcknowledgeIEsValue_IdPdusessionDataForwardingSnmodResponse); ok {
		return x.IdPdusessionDataForwardingSnmodResponse
	}
	return nil
}

func (x *SnodeModificationRequestAcknowledgeIEsValue) GetIdRrcconfigIndication() xnap_ies.RrcconfigIndication {
	if x, ok := x.GetSnodeModificationRequestAcknowledgeIes().(*SnodeModificationRequestAcknowledgeIEsValue_IdRrcconfigIndication); ok {
		return x.IdRrcconfigIndication
	}
	return xnap_ies.RrcconfigIndication(0)
}

func (x *SnodeModificationRequestAcknowledgeIEsValue) GetIdAvailableFastMcgrecoveryViaSrb3() AvailableFastMcgrecoveryViaSrb3 {
	if x, ok := x.GetSnodeModificationRequestAcknowledgeIes().(*SnodeModificationRequestAcknowledgeIEsValue_IdAvailableFastMcgrecoveryViaSrb3); ok {
		return x.IdAvailableFastMcgrecoveryViaSrb3
	}
	return AvailableFastMcgrecoveryViaSrb3_AVAILABLE_FAST_MCGRECOVERY_VIA_SRB3_TRUE
}

func (x *SnodeModificationRequestAcknowledgeIEsValue) GetIdReleaseFastMcgrecoveryViaSrb3() ReleaseFastMcgrecoveryViaSrb3 {
	if x, ok := x.GetSnodeModificationRequestAcknowledgeIes().(*SnodeModificationRequestAcknowledgeIEsValue_IdReleaseFastMcgrecoveryViaSrb3); ok {
		return x.IdReleaseFastMcgrecoveryViaSrb3
	}
	return ReleaseFastMcgrecoveryViaSrb3_RELEASE_FAST_MCGRECOVERY_VIA_SRB3_TRUE
}

func (x *SnodeModificationRequestAcknowledgeIEsValue) GetIdDirectForwardingPathAvailability() xnap_ies.DirectForwardingPathAvailability {
	if x, ok := x.GetSnodeModificationRequestAcknowledgeIes().(*SnodeModificationRequestAcknowledgeIEsValue_IdDirectForwardingPathAvailability); ok {
		return x.IdDirectForwardingPathAvailability
	}
	return xnap_ies.DirectForwardingPathAvailability(0)
}

type isSnodeModificationRequestAcknowledgeIEsValue_SnodeModificationRequestAcknowledgeIes interface {
	isSnodeModificationRequestAcknowledgeIEsValue_SnodeModificationRequestAcknowledgeIes()
}

type SnodeModificationRequestAcknowledgeIEsValue_IdMNgRannodeUexnApid struct {
	// @inject_tag: aper:"choiceIdx:1,"
	IdMNgRannodeUexnApid *xnap_ies.NgRAnnodeUexnApid `protobuf:"bytes,1,opt,name=id_m_ng_rannode_uexn_apid,json=id-M-NG-RANnodeUEXnAPID,proto3,oneof" aper:"choiceIdx:1,"`
}

type SnodeModificationRequestAcknowledgeIEsValue_IdSNgRannodeUexnApid struct {
	// @inject_tag: aper:"choiceIdx:2,"
	IdSNgRannodeUexnApid *xnap_ies.NgRAnnodeUexnApid `protobuf:"bytes,2,opt,name=id_s_ng_rannode_uexn_apid,json=id-S-NG-RANnodeUEXnAPID,proto3,oneof" aper:"choiceIdx:2,"`
}

type SnodeModificationRequestAcknowledgeIEsValue_IdPdusessionAdmittedSnmodResponse struct {
	// @inject_tag: aper:"choiceIdx:3,valueExt,"
	IdPdusessionAdmittedSnmodResponse *PdusessionAdmittedSNmodResponse `protobuf:"bytes,3,opt,name=id_pdusession_admitted_snmod_response,json=id-PDUSessionAdmitted-SNModResponse,proto3,oneof" aper:"choiceIdx:3,valueExt,"`
}

type SnodeModificationRequestAcknowledgeIEsValue_IdPdusessionNotAdmittedSnmodResponse struct {
	// @inject_tag: aper:"choiceIdx:4,valueExt,"
	IdPdusessionNotAdmittedSnmodResponse *PdusessionNotAdmittedSNmodResponse `protobuf:"bytes,4,opt,name=id_pdusession_not_admitted_snmod_response,json=id-PDUSessionNotAdmitted-SNModResponse,proto3,oneof" aper:"choiceIdx:4,valueExt,"`
}

type SnodeModificationRequestAcknowledgeIEsValue_IdSnToMnContainer struct {
	// @inject_tag: aper:"choiceIdx:5,"
	IdSnToMnContainer string `protobuf:"bytes,5,opt,name=id_sn_to_mn_container,json=id-SN-to-MN-Container,proto3,oneof" aper:"choiceIdx:5,"`
}

type SnodeModificationRequestAcknowledgeIEsValue_IdAdmittedSplitSrb struct {
	// @inject_tag: aper:"choiceIdx:6,valueExt,valueLB:0,valueUB:2,"
	IdAdmittedSplitSrb xnap_ies.SplitSrbsTypes `protobuf:"varint,6,opt,name=id_admitted_split_srb,json=id-admittedSplitSRB,proto3,enum=xnap.v1.SplitSrbsTypes,oneof" aper:"choiceIdx:6,valueExt,valueLB:0,valueUB:2,"`
}

type SnodeModificationRequestAcknowledgeIEsValue_IdAdmittedSplitSrbrelease struct {
	// @inject_tag: aper:"choiceIdx:7,valueExt,valueLB:0,valueUB:2,"
	IdAdmittedSplitSrbrelease xnap_ies.SplitSrbsTypes `protobuf:"varint,7,opt,name=id_admitted_split_srbrelease,json=id-admittedSplitSRBrelease,proto3,enum=xnap.v1.SplitSrbsTypes,oneof" aper:"choiceIdx:7,valueExt,valueLB:0,valueUB:2,"`
}

type SnodeModificationRequestAcknowledgeIEsValue_IdCriticalityDiagnostics struct {
	// @inject_tag: aper:"choiceIdx:8,valueExt,"
	IdCriticalityDiagnostics *xnap_ies.CriticalityDiagnostics `protobuf:"bytes,8,opt,name=id_criticality_diagnostics,json=id-CriticalityDiagnostics,proto3,oneof" aper:"choiceIdx:8,valueExt,"`
}

type SnodeModificationRequestAcknowledgeIEsValue_IdLocationInformationSn struct {
	// @inject_tag: aper:"choiceIdx:9,"
	IdLocationInformationSn *xnap_ies.TargetCGi `protobuf:"bytes,9,opt,name=id_location_information_sn,json=id-LocationInformationSN,proto3,oneof" aper:"choiceIdx:9,"`
}

type SnodeModificationRequestAcknowledgeIEsValue_IdMrDcResourceCoordinationInfo struct {
	// @inject_tag: aper:"choiceIdx:10,valueExt,"
	IdMrDcResourceCoordinationInfo *xnap_ies.MrDCResourceCoordinationInfo `protobuf:"bytes,10,opt,name=id_mr_dc_resource_coordination_info,json=id-MR-DC-ResourceCoordinationInfo,proto3,oneof" aper:"choiceIdx:10,valueExt,"`
}

type SnodeModificationRequestAcknowledgeIEsValue_IdPdusessionDataForwardingSnmodResponse struct {
	// @inject_tag: aper:"choiceIdx:11,valueExt,"
	IdPdusessionDataForwardingSnmodResponse *PdusessionDataForwardingSNmodResponse `protobuf:"bytes,11,opt,name=id_pdusession_data_forwarding_snmod_response,json=id-PDUSessionDataForwarding-SNModResponse,proto3,oneof" aper:"choiceIdx:11,valueExt,"`
}

type SnodeModificationRequestAcknowledgeIEsValue_IdRrcconfigIndication struct {
	// @inject_tag: aper:"choiceIdx:12,valueExt,valueLB:0,valueUB:1,"
	IdRrcconfigIndication xnap_ies.RrcconfigIndication `protobuf:"varint,12,opt,name=id_rrcconfig_indication,json=id-RRCConfigIndication,proto3,enum=xnap.v1.RrcconfigIndication,oneof" aper:"choiceIdx:12,valueExt,valueLB:0,valueUB:1,"`
}

type SnodeModificationRequestAcknowledgeIEsValue_IdAvailableFastMcgrecoveryViaSrb3 struct {
	// @inject_tag: aper:"choiceIdx:13,valueExt,valueLB:0,valueUB:0,"
	IdAvailableFastMcgrecoveryViaSrb3 AvailableFastMcgrecoveryViaSrb3 `protobuf:"varint,13,opt,name=id_available_fast_mcgrecovery_via_srb3,json=id-AvailableFastMCGRecoveryViaSRB3,proto3,enum=xnap.v1.AvailableFastMcgrecoveryViaSrb3,oneof" aper:"choiceIdx:13,valueExt,valueLB:0,valueUB:0,"`
}

type SnodeModificationRequestAcknowledgeIEsValue_IdReleaseFastMcgrecoveryViaSrb3 struct {
	// @inject_tag: aper:"choiceIdx:14,valueExt,valueLB:0,valueUB:0,"
	IdReleaseFastMcgrecoveryViaSrb3 ReleaseFastMcgrecoveryViaSrb3 `protobuf:"varint,14,opt,name=id_release_fast_mcgrecovery_via_srb3,json=id-ReleaseFastMCGRecoveryViaSRB3,proto3,enum=xnap.v1.ReleaseFastMcgrecoveryViaSrb3,oneof" aper:"choiceIdx:14,valueExt,valueLB:0,valueUB:0,"`
}

type SnodeModificationRequestAcknowledgeIEsValue_IdDirectForwardingPathAvailability struct {
	// @inject_tag: aper:"choiceIdx:15,valueExt,valueLB:0,valueUB:0,"
	IdDirectForwardingPathAvailability xnap_ies.DirectForwardingPathAvailability `protobuf:"varint,15,opt,name=id_direct_forwarding_path_availability,json=id-DirectForwardingPathAvailability,proto3,enum=xnap.v1.DirectForwardingPathAvailability,oneof" aper:"choiceIdx:15,valueExt,valueLB:0,valueUB:0,"`
}

func (*SnodeModificationRequestAcknowledgeIEsValue_IdMNgRannodeUexnApid) isSnodeModificationRequestAcknowledgeIEsValue_SnodeModificationRequestAcknowledgeIes() {
}

func (*SnodeModificationRequestAcknowledgeIEsValue_IdSNgRannodeUexnApid) isSnodeModificationRequestAcknowledgeIEsValue_SnodeModificationRequestAcknowledgeIes() {
}

func (*SnodeModificationRequestAcknowledgeIEsValue_IdPdusessionAdmittedSnmodResponse) isSnodeModificationRequestAcknowledgeIEsValue_SnodeModificationRequestAcknowledgeIes() {
}

func (*SnodeModificationRequestAcknowledgeIEsValue_IdPdusessionNotAdmittedSnmodResponse) isSnodeModificationRequestAcknowledgeIEsValue_SnodeModificationRequestAcknowledgeIes() {
}

func (*SnodeModificationRequestAcknowledgeIEsValue_IdSnToMnContainer) isSnodeModificationRequestAcknowledgeIEsValue_SnodeModificationRequestAcknowledgeIes() {
}

func (*SnodeModificationRequestAcknowledgeIEsValue_IdAdmittedSplitSrb) isSnodeModificationRequestAcknowledgeIEsValue_SnodeModificationRequestAcknowledgeIes() {
}

func (*SnodeModificationRequestAcknowledgeIEsValue_IdAdmittedSplitSrbrelease) isSnodeModificationRequestAcknowledgeIEsValue_SnodeModificationRequestAcknowledgeIes() {
}

func (*SnodeModificationRequestAcknowledgeIEsValue_IdCriticalityDiagnostics) isSnodeModificationRequestAcknowledgeIEsValue_SnodeModificationRequestAcknowledgeIes() {
}

func (*SnodeModificationRequestAcknowledgeIEsValue_IdLocationInformationSn) isSnodeModificationRequestAcknowledgeIEsValue_SnodeModificationRequestAcknowledgeIes() {
}

func (*SnodeModificationRequestAcknowledgeIEsValue_IdMrDcResourceCoordinationInfo) isSnodeModificationRequestAcknowledgeIEsValue_SnodeModificationRequestAcknowledgeIes() {
}

func (*SnodeModificationRequestAcknowledgeIEsValue_IdPdusessionDataForwardingSnmodResponse) isSnodeModificationRequestAcknowledgeIEsValue_SnodeModificationRequestAcknowledgeIes() {
}

func (*SnodeModificationRequestAcknowledgeIEsValue_IdRrcconfigIndication) isSnodeModificationRequestAcknowledgeIEsValue_SnodeModificationRequestAcknowledgeIes() {
}

func (*SnodeModificationRequestAcknowledgeIEsValue_IdAvailableFastMcgrecoveryViaSrb3) isSnodeModificationRequestAcknowledgeIEsValue_SnodeModificationRequestAcknowledgeIes() {
}

func (*SnodeModificationRequestAcknowledgeIEsValue_IdReleaseFastMcgrecoveryViaSrb3) isSnodeModificationRequestAcknowledgeIEsValue_SnodeModificationRequestAcknowledgeIes() {
}

func (*SnodeModificationRequestAcknowledgeIEsValue_IdDirectForwardingPathAvailability) isSnodeModificationRequestAcknowledgeIEsValue_SnodeModificationRequestAcknowledgeIes() {
}

// concrete instance(s) of class XNAP-PROTOCOL-IES from xnap_v1.asn1:1619
// @inject_tag: aper:"valueExt"
// {SNodeModificationRequestAcknowledge-IEs}
type SnodeModificationRequestAcknowledgeIEs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"unique,"
	Id *xnap_commondatatypes.ProtocolIeID `protobuf:"bytes,1,opt,name=id,json=&id,proto3" json:"id,omitempty" aper:"unique,"`
	// @inject_tag: aper:"valueLB:0,valueUB:2,"
	Criticality xnap_commondatatypes.Criticality `protobuf:"varint,2,opt,name=criticality,json=&criticality,proto3,enum=xnap.v1.Criticality" json:"criticality,omitempty" aper:"valueLB:0,valueUB:2,"`
	// @inject_tag: aper:"canonicalOrder,"
	Value *SnodeModificationRequestAcknowledgeIEsValue `protobuf:"bytes,3,opt,name=value,json=&Value,proto3" json:"value,omitempty" aper:"canonicalOrder,"`
}

func (x *SnodeModificationRequestAcknowledgeIEs) Reset() {
	*x = SnodeModificationRequestAcknowledgeIEs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[96]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SnodeModificationRequestAcknowledgeIEs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SnodeModificationRequestAcknowledgeIEs) ProtoMessage() {}

func (x *SnodeModificationRequestAcknowledgeIEs) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[96]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SnodeModificationRequestAcknowledgeIEs.ProtoReflect.Descriptor instead.
func (*SnodeModificationRequestAcknowledgeIEs) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_pdu_contents_proto_rawDescGZIP(), []int{96}
}

func (x *SnodeModificationRequestAcknowledgeIEs) GetId() *xnap_commondatatypes.ProtocolIeID {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *SnodeModificationRequestAcknowledgeIEs) GetCriticality() xnap_commondatatypes.Criticality {
	if x != nil {
		return x.Criticality
	}
	return xnap_commondatatypes.Criticality(0)
}

func (x *SnodeModificationRequestAcknowledgeIEs) GetValue() *SnodeModificationRequestAcknowledgeIEsValue {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:1615
// @inject_tag: aper:"valueExt"
// {SNodeModificationRequestAcknowledge}
type SnodeModificationRequestAcknowledge struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProtocolIes []*SnodeModificationRequestAcknowledgeIEs `protobuf:"bytes,1,rep,name=protocol_ies,json=protocolIEs,proto3" json:"protocol_ies,omitempty"`
}

func (x *SnodeModificationRequestAcknowledge) Reset() {
	*x = SnodeModificationRequestAcknowledge{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[97]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SnodeModificationRequestAcknowledge) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SnodeModificationRequestAcknowledge) ProtoMessage() {}

func (x *SnodeModificationRequestAcknowledge) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[97]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SnodeModificationRequestAcknowledge.ProtoReflect.Descriptor instead.
func (*SnodeModificationRequestAcknowledge) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_pdu_contents_proto_rawDescGZIP(), []int{97}
}

func (x *SnodeModificationRequestAcknowledge) GetProtocolIes() []*SnodeModificationRequestAcknowledgeIEs {
	if x != nil {
		return x.ProtocolIes
	}
	return nil
}

// value set from xnap_v1.asn1:1645
// {PDUSessionAdmitted-SNModResponse-ExtIEs}
type PdusessionAdmittedSNmodResponseExtIes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *emptypb.Empty `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *PdusessionAdmittedSNmodResponseExtIes) Reset() {
	*x = PdusessionAdmittedSNmodResponseExtIes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[98]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PdusessionAdmittedSNmodResponseExtIes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PdusessionAdmittedSNmodResponseExtIes) ProtoMessage() {}

func (x *PdusessionAdmittedSNmodResponseExtIes) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[98]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PdusessionAdmittedSNmodResponseExtIes.ProtoReflect.Descriptor instead.
func (*PdusessionAdmittedSNmodResponseExtIes) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_pdu_contents_proto_rawDescGZIP(), []int{98}
}

func (x *PdusessionAdmittedSNmodResponseExtIes) GetValue() *emptypb.Empty {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:1638
// @inject_tag: aper:"valueExt"
// {PDUSessionAdmitted-SNModResponse}
type PdusessionAdmittedSNmodResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"optional,"
	PduSessionResourcesAdmittedToBeAdded *PdusessionAdmittedToBeAddedSnmodResponse `protobuf:"bytes,1,opt,name=pdu_session_resources_admitted_to_be_added,json=pduSessionResourcesAdmittedToBeAdded,proto3,oneof" json:"pdu_session_resources_admitted_to_be_added,omitempty" aper:"optional,"`
	// @inject_tag: aper:"optional,"
	PduSessionResourcesAdmittedToBeModified *PdusessionAdmittedToBeModifiedSnmodResponse `protobuf:"bytes,2,opt,name=pdu_session_resources_admitted_to_be_modified,json=pduSessionResourcesAdmittedToBeModified,proto3,oneof" json:"pdu_session_resources_admitted_to_be_modified,omitempty" aper:"optional,"`
	// @inject_tag: aper:"optional,valueExt,"
	PduSessionResourcesAdmittedToBeReleased *PdusessionAdmittedToBeReleasedSnmodResponse `protobuf:"bytes,3,opt,name=pdu_session_resources_admitted_to_be_released,json=pduSessionResourcesAdmittedToBeReleased,proto3,oneof" json:"pdu_session_resources_admitted_to_be_released,omitempty" aper:"optional,valueExt,"`
	// @inject_tag: aper:"optional,sizeLB:1,"
	IEExtension []*PdusessionAdmittedSNmodResponseExtIes `protobuf:"bytes,4,rep,name=i_e_extension,json=iE-Extension,proto3" json:"i_e_extension,omitempty" aper:"optional,sizeLB:1,"`
}

func (x *PdusessionAdmittedSNmodResponse) Reset() {
	*x = PdusessionAdmittedSNmodResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[99]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PdusessionAdmittedSNmodResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PdusessionAdmittedSNmodResponse) ProtoMessage() {}

func (x *PdusessionAdmittedSNmodResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[99]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PdusessionAdmittedSNmodResponse.ProtoReflect.Descriptor instead.
func (*PdusessionAdmittedSNmodResponse) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_pdu_contents_proto_rawDescGZIP(), []int{99}
}

func (x *PdusessionAdmittedSNmodResponse) GetPduSessionResourcesAdmittedToBeAdded() *PdusessionAdmittedToBeAddedSnmodResponse {
	if x != nil {
		return x.PduSessionResourcesAdmittedToBeAdded
	}
	return nil
}

func (x *PdusessionAdmittedSNmodResponse) GetPduSessionResourcesAdmittedToBeModified() *PdusessionAdmittedToBeModifiedSnmodResponse {
	if x != nil {
		return x.PduSessionResourcesAdmittedToBeModified
	}
	return nil
}

func (x *PdusessionAdmittedSNmodResponse) GetPduSessionResourcesAdmittedToBeReleased() *PdusessionAdmittedToBeReleasedSnmodResponse {
	if x != nil {
		return x.PduSessionResourcesAdmittedToBeReleased
	}
	return nil
}

func (x *PdusessionAdmittedSNmodResponse) GetIEExtension() []*PdusessionAdmittedSNmodResponseExtIes {
	if x != nil {
		return x.IEExtension
	}
	return nil
}

// sequence from xnap_v1.asn1:1650
// {PDUSessionAdmittedToBeAddedSNModResponse}
type PdusessionAdmittedToBeAddedSnmodResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"valueExt,sizeLB:1,sizeUB:256,"
	Value []*PdusessionAdmittedToBeAddedSnmodResponseItem `protobuf:"bytes,1,rep,name=value,proto3" json:"value,omitempty" aper:"valueExt,sizeLB:1,sizeUB:256,"`
}

func (x *PdusessionAdmittedToBeAddedSnmodResponse) Reset() {
	*x = PdusessionAdmittedToBeAddedSnmodResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[100]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PdusessionAdmittedToBeAddedSnmodResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PdusessionAdmittedToBeAddedSnmodResponse) ProtoMessage() {}

func (x *PdusessionAdmittedToBeAddedSnmodResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[100]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PdusessionAdmittedToBeAddedSnmodResponse.ProtoReflect.Descriptor instead.
func (*PdusessionAdmittedToBeAddedSnmodResponse) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_pdu_contents_proto_rawDescGZIP(), []int{100}
}

func (x *PdusessionAdmittedToBeAddedSnmodResponse) GetValue() []*PdusessionAdmittedToBeAddedSnmodResponseItem {
	if x != nil {
		return x.Value
	}
	return nil
}

// value set from xnap_v1.asn1:1661
// {PDUSessionAdmittedToBeAddedSNModResponse-Item-ExtIEs}
type PdusessionAdmittedToBeAddedSnmodResponseItemExtIes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *emptypb.Empty `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *PdusessionAdmittedToBeAddedSnmodResponseItemExtIes) Reset() {
	*x = PdusessionAdmittedToBeAddedSnmodResponseItemExtIes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[101]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PdusessionAdmittedToBeAddedSnmodResponseItemExtIes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PdusessionAdmittedToBeAddedSnmodResponseItemExtIes) ProtoMessage() {}

func (x *PdusessionAdmittedToBeAddedSnmodResponseItemExtIes) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[101]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PdusessionAdmittedToBeAddedSnmodResponseItemExtIes.ProtoReflect.Descriptor instead.
func (*PdusessionAdmittedToBeAddedSnmodResponseItemExtIes) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_pdu_contents_proto_rawDescGZIP(), []int{101}
}

func (x *PdusessionAdmittedToBeAddedSnmodResponseItemExtIes) GetValue() *emptypb.Empty {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:1651
// @inject_tag: aper:"valueExt"
// {PDUSessionAdmittedToBeAddedSNModResponse-Item}
type PdusessionAdmittedToBeAddedSnmodResponseItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PduSessionId *xnap_ies.PdusessionID `protobuf:"bytes,1,opt,name=pdu_session_id,json=pduSessionId,proto3" json:"pdu_session_id,omitempty"`
	// @inject_tag: aper:"optional,valueExt,"
	SnTerminated *xnap_ies.PdusessionResourceSetupResponseInfoSNterminated `protobuf:"bytes,2,opt,name=sn_terminated,json=sn-terminated,proto3,oneof" json:"sn_terminated,omitempty" aper:"optional,valueExt,"`
	// @inject_tag: aper:"optional,valueExt,"
	MnTerminated *xnap_ies.PdusessionResourceSetupResponseInfoMNterminated `protobuf:"bytes,3,opt,name=mn_terminated,json=mn-terminated,proto3,oneof" json:"mn_terminated,omitempty" aper:"optional,valueExt,"`
	// @inject_tag: aper:"optional,sizeLB:1,"
	IEExtension []*PdusessionAdmittedToBeAddedSnmodResponseItemExtIes `protobuf:"bytes,4,rep,name=i_e_extension,json=iE-Extension,proto3" json:"i_e_extension,omitempty" aper:"optional,sizeLB:1,"`
}

func (x *PdusessionAdmittedToBeAddedSnmodResponseItem) Reset() {
	*x = PdusessionAdmittedToBeAddedSnmodResponseItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[102]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PdusessionAdmittedToBeAddedSnmodResponseItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PdusessionAdmittedToBeAddedSnmodResponseItem) ProtoMessage() {}

func (x *PdusessionAdmittedToBeAddedSnmodResponseItem) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[102]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PdusessionAdmittedToBeAddedSnmodResponseItem.ProtoReflect.Descriptor instead.
func (*PdusessionAdmittedToBeAddedSnmodResponseItem) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_pdu_contents_proto_rawDescGZIP(), []int{102}
}

func (x *PdusessionAdmittedToBeAddedSnmodResponseItem) GetPduSessionId() *xnap_ies.PdusessionID {
	if x != nil {
		return x.PduSessionId
	}
	return nil
}

func (x *PdusessionAdmittedToBeAddedSnmodResponseItem) GetSnTerminated() *xnap_ies.PdusessionResourceSetupResponseInfoSNterminated {
	if x != nil {
		return x.SnTerminated
	}
	return nil
}

func (x *PdusessionAdmittedToBeAddedSnmodResponseItem) GetMnTerminated() *xnap_ies.PdusessionResourceSetupResponseInfoMNterminated {
	if x != nil {
		return x.MnTerminated
	}
	return nil
}

func (x *PdusessionAdmittedToBeAddedSnmodResponseItem) GetIEExtension() []*PdusessionAdmittedToBeAddedSnmodResponseItemExtIes {
	if x != nil {
		return x.IEExtension
	}
	return nil
}

// sequence from xnap_v1.asn1:1666
// {PDUSessionAdmittedToBeModifiedSNModResponse}
type PdusessionAdmittedToBeModifiedSnmodResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"valueExt,sizeLB:1,sizeUB:256,"
	Value []*PdusessionAdmittedToBeModifiedSnmodResponseItem `protobuf:"bytes,1,rep,name=value,proto3" json:"value,omitempty" aper:"valueExt,sizeLB:1,sizeUB:256,"`
}

func (x *PdusessionAdmittedToBeModifiedSnmodResponse) Reset() {
	*x = PdusessionAdmittedToBeModifiedSnmodResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[103]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PdusessionAdmittedToBeModifiedSnmodResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PdusessionAdmittedToBeModifiedSnmodResponse) ProtoMessage() {}

func (x *PdusessionAdmittedToBeModifiedSnmodResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[103]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PdusessionAdmittedToBeModifiedSnmodResponse.ProtoReflect.Descriptor instead.
func (*PdusessionAdmittedToBeModifiedSnmodResponse) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_pdu_contents_proto_rawDescGZIP(), []int{103}
}

func (x *PdusessionAdmittedToBeModifiedSnmodResponse) GetValue() []*PdusessionAdmittedToBeModifiedSnmodResponseItem {
	if x != nil {
		return x.Value
	}
	return nil
}

// value set from xnap_v1.asn1:1677
// {PDUSessionAdmittedToBeModifiedSNModResponse-Item-ExtIEs}
type PdusessionAdmittedToBeModifiedSnmodResponseItemExtIes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *emptypb.Empty `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *PdusessionAdmittedToBeModifiedSnmodResponseItemExtIes) Reset() {
	*x = PdusessionAdmittedToBeModifiedSnmodResponseItemExtIes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[104]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PdusessionAdmittedToBeModifiedSnmodResponseItemExtIes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PdusessionAdmittedToBeModifiedSnmodResponseItemExtIes) ProtoMessage() {}

func (x *PdusessionAdmittedToBeModifiedSnmodResponseItemExtIes) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[104]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PdusessionAdmittedToBeModifiedSnmodResponseItemExtIes.ProtoReflect.Descriptor instead.
func (*PdusessionAdmittedToBeModifiedSnmodResponseItemExtIes) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_pdu_contents_proto_rawDescGZIP(), []int{104}
}

func (x *PdusessionAdmittedToBeModifiedSnmodResponseItemExtIes) GetValue() *emptypb.Empty {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:1667
// @inject_tag: aper:"valueExt"
// {PDUSessionAdmittedToBeModifiedSNModResponse-Item}
type PdusessionAdmittedToBeModifiedSnmodResponseItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PduSessionId *xnap_ies.PdusessionID `protobuf:"bytes,1,opt,name=pdu_session_id,json=pduSessionId,proto3" json:"pdu_session_id,omitempty"`
	// @inject_tag: aper:"optional,valueExt,"
	SnTerminated *xnap_ies.PdusessionResourceModificationResponseInfoSNterminated `protobuf:"bytes,2,opt,name=sn_terminated,json=sn-terminated,proto3,oneof" json:"sn_terminated,omitempty" aper:"optional,valueExt,"`
	// @inject_tag: aper:"optional,valueExt,"
	MnTerminated *xnap_ies.PdusessionResourceModificationResponseInfoMNterminated `protobuf:"bytes,3,opt,name=mn_terminated,json=mn-terminated,proto3,oneof" json:"mn_terminated,omitempty" aper:"optional,valueExt,"`
	// @inject_tag: aper:"optional,sizeLB:1,"
	IEExtension []*PdusessionAdmittedToBeModifiedSnmodResponseItemExtIes `protobuf:"bytes,4,rep,name=i_e_extension,json=iE-Extension,proto3" json:"i_e_extension,omitempty" aper:"optional,sizeLB:1,"`
}

func (x *PdusessionAdmittedToBeModifiedSnmodResponseItem) Reset() {
	*x = PdusessionAdmittedToBeModifiedSnmodResponseItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[105]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PdusessionAdmittedToBeModifiedSnmodResponseItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PdusessionAdmittedToBeModifiedSnmodResponseItem) ProtoMessage() {}

func (x *PdusessionAdmittedToBeModifiedSnmodResponseItem) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[105]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PdusessionAdmittedToBeModifiedSnmodResponseItem.ProtoReflect.Descriptor instead.
func (*PdusessionAdmittedToBeModifiedSnmodResponseItem) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_pdu_contents_proto_rawDescGZIP(), []int{105}
}

func (x *PdusessionAdmittedToBeModifiedSnmodResponseItem) GetPduSessionId() *xnap_ies.PdusessionID {
	if x != nil {
		return x.PduSessionId
	}
	return nil
}

func (x *PdusessionAdmittedToBeModifiedSnmodResponseItem) GetSnTerminated() *xnap_ies.PdusessionResourceModificationResponseInfoSNterminated {
	if x != nil {
		return x.SnTerminated
	}
	return nil
}

func (x *PdusessionAdmittedToBeModifiedSnmodResponseItem) GetMnTerminated() *xnap_ies.PdusessionResourceModificationResponseInfoMNterminated {
	if x != nil {
		return x.MnTerminated
	}
	return nil
}

func (x *PdusessionAdmittedToBeModifiedSnmodResponseItem) GetIEExtension() []*PdusessionAdmittedToBeModifiedSnmodResponseItemExtIes {
	if x != nil {
		return x.IEExtension
	}
	return nil
}

// value set from xnap_v1.asn1:1688
// {PDUSessionAdmittedToBeReleasedSNModResponse-ExtIEs}
type PdusessionAdmittedToBeReleasedSnmodResponseExtIes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *emptypb.Empty `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *PdusessionAdmittedToBeReleasedSnmodResponseExtIes) Reset() {
	*x = PdusessionAdmittedToBeReleasedSnmodResponseExtIes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[106]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PdusessionAdmittedToBeReleasedSnmodResponseExtIes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PdusessionAdmittedToBeReleasedSnmodResponseExtIes) ProtoMessage() {}

func (x *PdusessionAdmittedToBeReleasedSnmodResponseExtIes) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[106]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PdusessionAdmittedToBeReleasedSnmodResponseExtIes.ProtoReflect.Descriptor instead.
func (*PdusessionAdmittedToBeReleasedSnmodResponseExtIes) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_pdu_contents_proto_rawDescGZIP(), []int{106}
}

func (x *PdusessionAdmittedToBeReleasedSnmodResponseExtIes) GetValue() *emptypb.Empty {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:1682
// @inject_tag: aper:"valueExt"
// {PDUSessionAdmittedToBeReleasedSNModResponse}
type PdusessionAdmittedToBeReleasedSnmodResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"optional,"
	SnTerminated *xnap_ies.PdusessionListwithDataForwardingRequest `protobuf:"bytes,1,opt,name=sn_terminated,json=sn-terminated,proto3,oneof" json:"sn_terminated,omitempty" aper:"optional,"`
	// @inject_tag: aper:"optional,"
	MnTerminated *xnap_ies.PdusessionListwithCause `protobuf:"bytes,2,opt,name=mn_terminated,json=mn-terminated,proto3,oneof" json:"mn_terminated,omitempty" aper:"optional,"`
	// @inject_tag: aper:"optional,sizeLB:1,"
	IEExtension []*PdusessionAdmittedToBeReleasedSnmodResponseExtIes `protobuf:"bytes,3,rep,name=i_e_extension,json=iE-Extension,proto3" json:"i_e_extension,omitempty" aper:"optional,sizeLB:1,"`
}

func (x *PdusessionAdmittedToBeReleasedSnmodResponse) Reset() {
	*x = PdusessionAdmittedToBeReleasedSnmodResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[107]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PdusessionAdmittedToBeReleasedSnmodResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PdusessionAdmittedToBeReleasedSnmodResponse) ProtoMessage() {}

func (x *PdusessionAdmittedToBeReleasedSnmodResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[107]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PdusessionAdmittedToBeReleasedSnmodResponse.ProtoReflect.Descriptor instead.
func (*PdusessionAdmittedToBeReleasedSnmodResponse) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_pdu_contents_proto_rawDescGZIP(), []int{107}
}

func (x *PdusessionAdmittedToBeReleasedSnmodResponse) GetSnTerminated() *xnap_ies.PdusessionListwithDataForwardingRequest {
	if x != nil {
		return x.SnTerminated
	}
	return nil
}

func (x *PdusessionAdmittedToBeReleasedSnmodResponse) GetMnTerminated() *xnap_ies.PdusessionListwithCause {
	if x != nil {
		return x.MnTerminated
	}
	return nil
}

func (x *PdusessionAdmittedToBeReleasedSnmodResponse) GetIEExtension() []*PdusessionAdmittedToBeReleasedSnmodResponseExtIes {
	if x != nil {
		return x.IEExtension
	}
	return nil
}

// value set from xnap_v1.asn1:1698
// {PDUSessionNotAdmitted-SNModResponse-ExtIEs}
type PdusessionNotAdmittedSNmodResponseExtIes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *emptypb.Empty `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *PdusessionNotAdmittedSNmodResponseExtIes) Reset() {
	*x = PdusessionNotAdmittedSNmodResponseExtIes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[108]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PdusessionNotAdmittedSNmodResponseExtIes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PdusessionNotAdmittedSNmodResponseExtIes) ProtoMessage() {}

func (x *PdusessionNotAdmittedSNmodResponseExtIes) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[108]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PdusessionNotAdmittedSNmodResponseExtIes.ProtoReflect.Descriptor instead.
func (*PdusessionNotAdmittedSNmodResponseExtIes) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_pdu_contents_proto_rawDescGZIP(), []int{108}
}

func (x *PdusessionNotAdmittedSNmodResponseExtIes) GetValue() *emptypb.Empty {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:1693
// @inject_tag: aper:"valueExt"
// {PDUSessionNotAdmitted-SNModResponse}
type PdusessionNotAdmittedSNmodResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"optional,"
	PduSessionList *xnap_ies.PdusessionList `protobuf:"bytes,1,opt,name=pdu_session_list,json=pdu-Session-List,proto3,oneof" json:"pdu_session_list,omitempty" aper:"optional,"`
	// @inject_tag: aper:"optional,sizeLB:1,"
	IEExtension []*PdusessionNotAdmittedSNmodResponseExtIes `protobuf:"bytes,2,rep,name=i_e_extension,json=iE-Extension,proto3" json:"i_e_extension,omitempty" aper:"optional,sizeLB:1,"`
}

func (x *PdusessionNotAdmittedSNmodResponse) Reset() {
	*x = PdusessionNotAdmittedSNmodResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[109]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PdusessionNotAdmittedSNmodResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PdusessionNotAdmittedSNmodResponse) ProtoMessage() {}

func (x *PdusessionNotAdmittedSNmodResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[109]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PdusessionNotAdmittedSNmodResponse.ProtoReflect.Descriptor instead.
func (*PdusessionNotAdmittedSNmodResponse) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_pdu_contents_proto_rawDescGZIP(), []int{109}
}

func (x *PdusessionNotAdmittedSNmodResponse) GetPduSessionList() *xnap_ies.PdusessionList {
	if x != nil {
		return x.PduSessionList
	}
	return nil
}

func (x *PdusessionNotAdmittedSNmodResponse) GetIEExtension() []*PdusessionNotAdmittedSNmodResponseExtIes {
	if x != nil {
		return x.IEExtension
	}
	return nil
}

// value set from xnap_v1.asn1:1709
// {PDUSessionDataForwarding-SNModResponse-ExtIEs}
type PdusessionDataForwardingSNmodResponseExtIes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *emptypb.Empty `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *PdusessionDataForwardingSNmodResponseExtIes) Reset() {
	*x = PdusessionDataForwardingSNmodResponseExtIes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[110]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PdusessionDataForwardingSNmodResponseExtIes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PdusessionDataForwardingSNmodResponseExtIes) ProtoMessage() {}

func (x *PdusessionDataForwardingSNmodResponseExtIes) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[110]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PdusessionDataForwardingSNmodResponseExtIes.ProtoReflect.Descriptor instead.
func (*PdusessionDataForwardingSNmodResponseExtIes) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_pdu_contents_proto_rawDescGZIP(), []int{110}
}

func (x *PdusessionDataForwardingSNmodResponseExtIes) GetValue() *emptypb.Empty {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:1704
// @inject_tag: aper:"valueExt"
// {PDUSessionDataForwarding-SNModResponse}
type PdusessionDataForwardingSNmodResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SnTerminated *xnap_ies.PdusessionListwithDataForwardingRequest `protobuf:"bytes,1,opt,name=sn_terminated,json=sn-terminated,proto3" json:"sn_terminated,omitempty"`
	// @inject_tag: aper:"optional,sizeLB:1,"
	IEExtensions []*PdusessionDataForwardingSNmodResponseExtIes `protobuf:"bytes,2,rep,name=i_e_extensions,json=iE-Extensions,proto3" json:"i_e_extensions,omitempty" aper:"optional,sizeLB:1,"`
}

func (x *PdusessionDataForwardingSNmodResponse) Reset() {
	*x = PdusessionDataForwardingSNmodResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[111]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PdusessionDataForwardingSNmodResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PdusessionDataForwardingSNmodResponse) ProtoMessage() {}

func (x *PdusessionDataForwardingSNmodResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[111]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PdusessionDataForwardingSNmodResponse.ProtoReflect.Descriptor instead.
func (*PdusessionDataForwardingSNmodResponse) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_pdu_contents_proto_rawDescGZIP(), []int{111}
}

func (x *PdusessionDataForwardingSNmodResponse) GetSnTerminated() *xnap_ies.PdusessionListwithDataForwardingRequest {
	if x != nil {
		return x.SnTerminated
	}
	return nil
}

func (x *PdusessionDataForwardingSNmodResponse) GetIEExtensions() []*PdusessionDataForwardingSNmodResponseExtIes {
	if x != nil {
		return x.IEExtensions
	}
	return nil
}

// value set from xnap_v1.asn1:1728
// {SNodeModificationRequestReject-IEs&Value}
type SnodeModificationRequestRejectIEsValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// value set translated as choice from xnap_v1.asn1:1728
	//
	// Types that are assignable to SnodeModificationRequestRejectIes:
	//	*SnodeModificationRequestRejectIEsValue_IdMNgRannodeUexnApid
	//	*SnodeModificationRequestRejectIEsValue_IdSNgRannodeUexnApid
	//	*SnodeModificationRequestRejectIEsValue_IdCause
	//	*SnodeModificationRequestRejectIEsValue_IdCriticalityDiagnostics
	SnodeModificationRequestRejectIes isSnodeModificationRequestRejectIEsValue_SnodeModificationRequestRejectIes `protobuf_oneof:"snode_modification_request_reject_ies"`
}

func (x *SnodeModificationRequestRejectIEsValue) Reset() {
	*x = SnodeModificationRequestRejectIEsValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[112]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SnodeModificationRequestRejectIEsValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SnodeModificationRequestRejectIEsValue) ProtoMessage() {}

func (x *SnodeModificationRequestRejectIEsValue) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[112]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SnodeModificationRequestRejectIEsValue.ProtoReflect.Descriptor instead.
func (*SnodeModificationRequestRejectIEsValue) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_pdu_contents_proto_rawDescGZIP(), []int{112}
}

func (m *SnodeModificationRequestRejectIEsValue) GetSnodeModificationRequestRejectIes() isSnodeModificationRequestRejectIEsValue_SnodeModificationRequestRejectIes {
	if m != nil {
		return m.SnodeModificationRequestRejectIes
	}
	return nil
}

func (x *SnodeModificationRequestRejectIEsValue) GetIdMNgRannodeUexnApid() *xnap_ies.NgRAnnodeUexnApid {
	if x, ok := x.GetSnodeModificationRequestRejectIes().(*SnodeModificationRequestRejectIEsValue_IdMNgRannodeUexnApid); ok {
		return x.IdMNgRannodeUexnApid
	}
	return nil
}

func (x *SnodeModificationRequestRejectIEsValue) GetIdSNgRannodeUexnApid() *xnap_ies.NgRAnnodeUexnApid {
	if x, ok := x.GetSnodeModificationRequestRejectIes().(*SnodeModificationRequestRejectIEsValue_IdSNgRannodeUexnApid); ok {
		return x.IdSNgRannodeUexnApid
	}
	return nil
}

func (x *SnodeModificationRequestRejectIEsValue) GetIdCause() *xnap_ies.Cause {
	if x, ok := x.GetSnodeModificationRequestRejectIes().(*SnodeModificationRequestRejectIEsValue_IdCause); ok {
		return x.IdCause
	}
	return nil
}

func (x *SnodeModificationRequestRejectIEsValue) GetIdCriticalityDiagnostics() *xnap_ies.CriticalityDiagnostics {
	if x, ok := x.GetSnodeModificationRequestRejectIes().(*SnodeModificationRequestRejectIEsValue_IdCriticalityDiagnostics); ok {
		return x.IdCriticalityDiagnostics
	}
	return nil
}

type isSnodeModificationRequestRejectIEsValue_SnodeModificationRequestRejectIes interface {
	isSnodeModificationRequestRejectIEsValue_SnodeModificationRequestRejectIes()
}

type SnodeModificationRequestRejectIEsValue_IdMNgRannodeUexnApid struct {
	// @inject_tag: aper:"choiceIdx:1,"
	IdMNgRannodeUexnApid *xnap_ies.NgRAnnodeUexnApid `protobuf:"bytes,1,opt,name=id_m_ng_rannode_uexn_apid,json=id-M-NG-RANnodeUEXnAPID,proto3,oneof" aper:"choiceIdx:1,"`
}

type SnodeModificationRequestRejectIEsValue_IdSNgRannodeUexnApid struct {
	// @inject_tag: aper:"choiceIdx:2,"
	IdSNgRannodeUexnApid *xnap_ies.NgRAnnodeUexnApid `protobuf:"bytes,2,opt,name=id_s_ng_rannode_uexn_apid,json=id-S-NG-RANnodeUEXnAPID,proto3,oneof" aper:"choiceIdx:2,"`
}

type SnodeModificationRequestRejectIEsValue_IdCause struct {
	// @inject_tag: aper:"choiceIdx:3,"
	IdCause *xnap_ies.Cause `protobuf:"bytes,3,opt,name=id_cause,json=id-Cause,proto3,oneof" aper:"choiceIdx:3,"`
}

type SnodeModificationRequestRejectIEsValue_IdCriticalityDiagnostics struct {
	// @inject_tag: aper:"choiceIdx:4,valueExt,"
	IdCriticalityDiagnostics *xnap_ies.CriticalityDiagnostics `protobuf:"bytes,4,opt,name=id_criticality_diagnostics,json=id-CriticalityDiagnostics,proto3,oneof" aper:"choiceIdx:4,valueExt,"`
}

func (*SnodeModificationRequestRejectIEsValue_IdMNgRannodeUexnApid) isSnodeModificationRequestRejectIEsValue_SnodeModificationRequestRejectIes() {
}

func (*SnodeModificationRequestRejectIEsValue_IdSNgRannodeUexnApid) isSnodeModificationRequestRejectIEsValue_SnodeModificationRequestRejectIes() {
}

func (*SnodeModificationRequestRejectIEsValue_IdCause) isSnodeModificationRequestRejectIEsValue_SnodeModificationRequestRejectIes() {
}

func (*SnodeModificationRequestRejectIEsValue_IdCriticalityDiagnostics) isSnodeModificationRequestRejectIEsValue_SnodeModificationRequestRejectIes() {
}

// concrete instance(s) of class XNAP-PROTOCOL-IES from xnap_v1.asn1:1728
// @inject_tag: aper:"valueExt"
// {SNodeModificationRequestReject-IEs}
type SnodeModificationRequestRejectIEs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"unique,"
	Id *xnap_commondatatypes.ProtocolIeID `protobuf:"bytes,1,opt,name=id,json=&id,proto3" json:"id,omitempty" aper:"unique,"`
	// @inject_tag: aper:"valueLB:0,valueUB:2,"
	Criticality xnap_commondatatypes.Criticality `protobuf:"varint,2,opt,name=criticality,json=&criticality,proto3,enum=xnap.v1.Criticality" json:"criticality,omitempty" aper:"valueLB:0,valueUB:2,"`
	// @inject_tag: aper:"canonicalOrder,"
	Value *SnodeModificationRequestRejectIEsValue `protobuf:"bytes,3,opt,name=value,json=&Value,proto3" json:"value,omitempty" aper:"canonicalOrder,"`
}

func (x *SnodeModificationRequestRejectIEs) Reset() {
	*x = SnodeModificationRequestRejectIEs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[113]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SnodeModificationRequestRejectIEs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SnodeModificationRequestRejectIEs) ProtoMessage() {}

func (x *SnodeModificationRequestRejectIEs) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[113]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SnodeModificationRequestRejectIEs.ProtoReflect.Descriptor instead.
func (*SnodeModificationRequestRejectIEs) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_pdu_contents_proto_rawDescGZIP(), []int{113}
}

func (x *SnodeModificationRequestRejectIEs) GetId() *xnap_commondatatypes.ProtocolIeID {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *SnodeModificationRequestRejectIEs) GetCriticality() xnap_commondatatypes.Criticality {
	if x != nil {
		return x.Criticality
	}
	return xnap_commondatatypes.Criticality(0)
}

func (x *SnodeModificationRequestRejectIEs) GetValue() *SnodeModificationRequestRejectIEsValue {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:1724
// @inject_tag: aper:"valueExt"
// {SNodeModificationRequestReject}
type SnodeModificationRequestReject struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProtocolIes []*SnodeModificationRequestRejectIEs `protobuf:"bytes,1,rep,name=protocol_ies,json=protocolIEs,proto3" json:"protocol_ies,omitempty"`
}

func (x *SnodeModificationRequestReject) Reset() {
	*x = SnodeModificationRequestReject{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[114]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SnodeModificationRequestReject) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SnodeModificationRequestReject) ProtoMessage() {}

func (x *SnodeModificationRequestReject) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[114]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SnodeModificationRequestReject.ProtoReflect.Descriptor instead.
func (*SnodeModificationRequestReject) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_pdu_contents_proto_rawDescGZIP(), []int{114}
}

func (x *SnodeModificationRequestReject) GetProtocolIes() []*SnodeModificationRequestRejectIEs {
	if x != nil {
		return x.ProtocolIes
	}
	return nil
}

// value set from xnap_v1.asn1:1747
// {SNodeModificationRequired-IEs&Value}
type SnodeModificationRequiredIEsValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// value set translated as choice from xnap_v1.asn1:1747
	//
	// Types that are assignable to SnodeModificationRequiredIes:
	//	*SnodeModificationRequiredIEsValue_IdMNgRannodeUexnApid
	//	*SnodeModificationRequiredIEsValue_IdSNgRannodeUexnApid
	//	*SnodeModificationRequiredIEsValue_IdCause
	//	*SnodeModificationRequiredIEsValue_IdPdcpchangeIndication
	//	*SnodeModificationRequiredIEsValue_IdPdusessionToBeModifiedSnmodRequired
	//	*SnodeModificationRequiredIEsValue_IdPdusessionToBeReleasedSnmodRequired
	//	*SnodeModificationRequiredIEsValue_IdSnToMnContainer
	//	*SnodeModificationRequiredIEsValue_IdSpareDrbids
	//	*SnodeModificationRequiredIEsValue_IdRequiredNumberOfDrbids
	//	*SnodeModificationRequiredIEsValue_IdLocationInformationSn
	//	*SnodeModificationRequiredIEsValue_IdMrDcResourceCoordinationInfo
	//	*SnodeModificationRequiredIEsValue_IdRrcconfigIndication
	//	*SnodeModificationRequiredIEsValue_IdAvailableFastMcgrecoveryViaSrb3
	//	*SnodeModificationRequiredIEsValue_IdReleaseFastMcgrecoveryViaSrb3
	//	*SnodeModificationRequiredIEsValue_IdScgindicator
	SnodeModificationRequiredIes isSnodeModificationRequiredIEsValue_SnodeModificationRequiredIes `protobuf_oneof:"snode_modification_required_ies"`
}

func (x *SnodeModificationRequiredIEsValue) Reset() {
	*x = SnodeModificationRequiredIEsValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[115]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SnodeModificationRequiredIEsValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SnodeModificationRequiredIEsValue) ProtoMessage() {}

func (x *SnodeModificationRequiredIEsValue) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[115]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SnodeModificationRequiredIEsValue.ProtoReflect.Descriptor instead.
func (*SnodeModificationRequiredIEsValue) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_pdu_contents_proto_rawDescGZIP(), []int{115}
}

func (m *SnodeModificationRequiredIEsValue) GetSnodeModificationRequiredIes() isSnodeModificationRequiredIEsValue_SnodeModificationRequiredIes {
	if m != nil {
		return m.SnodeModificationRequiredIes
	}
	return nil
}

func (x *SnodeModificationRequiredIEsValue) GetIdMNgRannodeUexnApid() *xnap_ies.NgRAnnodeUexnApid {
	if x, ok := x.GetSnodeModificationRequiredIes().(*SnodeModificationRequiredIEsValue_IdMNgRannodeUexnApid); ok {
		return x.IdMNgRannodeUexnApid
	}
	return nil
}

func (x *SnodeModificationRequiredIEsValue) GetIdSNgRannodeUexnApid() *xnap_ies.NgRAnnodeUexnApid {
	if x, ok := x.GetSnodeModificationRequiredIes().(*SnodeModificationRequiredIEsValue_IdSNgRannodeUexnApid); ok {
		return x.IdSNgRannodeUexnApid
	}
	return nil
}

func (x *SnodeModificationRequiredIEsValue) GetIdCause() *xnap_ies.Cause {
	if x, ok := x.GetSnodeModificationRequiredIes().(*SnodeModificationRequiredIEsValue_IdCause); ok {
		return x.IdCause
	}
	return nil
}

func (x *SnodeModificationRequiredIEsValue) GetIdPdcpchangeIndication() *xnap_ies.PdcpchangeIndication {
	if x, ok := x.GetSnodeModificationRequiredIes().(*SnodeModificationRequiredIEsValue_IdPdcpchangeIndication); ok {
		return x.IdPdcpchangeIndication
	}
	return nil
}

func (x *SnodeModificationRequiredIEsValue) GetIdPdusessionToBeModifiedSnmodRequired() *PdusessionToBeModifiedSnmodRequired {
	if x, ok := x.GetSnodeModificationRequiredIes().(*SnodeModificationRequiredIEsValue_IdPdusessionToBeModifiedSnmodRequired); ok {
		return x.IdPdusessionToBeModifiedSnmodRequired
	}
	return nil
}

func (x *SnodeModificationRequiredIEsValue) GetIdPdusessionToBeReleasedSnmodRequired() *PdusessionToBeReleasedSnmodRequired {
	if x, ok := x.GetSnodeModificationRequiredIes().(*SnodeModificationRequiredIEsValue_IdPdusessionToBeReleasedSnmodRequired); ok {
		return x.IdPdusessionToBeReleasedSnmodRequired
	}
	return nil
}

func (x *SnodeModificationRequiredIEsValue) GetIdSnToMnContainer() string {
	if x, ok := x.GetSnodeModificationRequiredIes().(*SnodeModificationRequiredIEsValue_IdSnToMnContainer); ok {
		return x.IdSnToMnContainer
	}
	return ""
}

func (x *SnodeModificationRequiredIEsValue) GetIdSpareDrbids() *xnap_ies.DrbList {
	if x, ok := x.GetSnodeModificationRequiredIes().(*SnodeModificationRequiredIEsValue_IdSpareDrbids); ok {
		return x.IdSpareDrbids
	}
	return nil
}

func (x *SnodeModificationRequiredIEsValue) GetIdRequiredNumberOfDrbids() *xnap_ies.DrbNumber {
	if x, ok := x.GetSnodeModificationRequiredIes().(*SnodeModificationRequiredIEsValue_IdRequiredNumberOfDrbids); ok {
		return x.IdRequiredNumberOfDrbids
	}
	return nil
}

func (x *SnodeModificationRequiredIEsValue) GetIdLocationInformationSn() *xnap_ies.TargetCGi {
	if x, ok := x.GetSnodeModificationRequiredIes().(*SnodeModificationRequiredIEsValue_IdLocationInformationSn); ok {
		return x.IdLocationInformationSn
	}
	return nil
}

func (x *SnodeModificationRequiredIEsValue) GetIdMrDcResourceCoordinationInfo() *xnap_ies.MrDCResourceCoordinationInfo {
	if x, ok := x.GetSnodeModificationRequiredIes().(*SnodeModificationRequiredIEsValue_IdMrDcResourceCoordinationInfo); ok {
		return x.IdMrDcResourceCoordinationInfo
	}
	return nil
}

func (x *SnodeModificationRequiredIEsValue) GetIdRrcconfigIndication() xnap_ies.RrcconfigIndication {
	if x, ok := x.GetSnodeModificationRequiredIes().(*SnodeModificationRequiredIEsValue_IdRrcconfigIndication); ok {
		return x.IdRrcconfigIndication
	}
	return xnap_ies.RrcconfigIndication(0)
}

func (x *SnodeModificationRequiredIEsValue) GetIdAvailableFastMcgrecoveryViaSrb3() AvailableFastMcgrecoveryViaSrb3 {
	if x, ok := x.GetSnodeModificationRequiredIes().(*SnodeModificationRequiredIEsValue_IdAvailableFastMcgrecoveryViaSrb3); ok {
		return x.IdAvailableFastMcgrecoveryViaSrb3
	}
	return AvailableFastMcgrecoveryViaSrb3_AVAILABLE_FAST_MCGRECOVERY_VIA_SRB3_TRUE
}

func (x *SnodeModificationRequiredIEsValue) GetIdReleaseFastMcgrecoveryViaSrb3() ReleaseFastMcgrecoveryViaSrb3 {
	if x, ok := x.GetSnodeModificationRequiredIes().(*SnodeModificationRequiredIEsValue_IdReleaseFastMcgrecoveryViaSrb3); ok {
		return x.IdReleaseFastMcgrecoveryViaSrb3
	}
	return ReleaseFastMcgrecoveryViaSrb3_RELEASE_FAST_MCGRECOVERY_VIA_SRB3_TRUE
}

func (x *SnodeModificationRequiredIEsValue) GetIdScgindicator() xnap_ies.Scgindicator {
	if x, ok := x.GetSnodeModificationRequiredIes().(*SnodeModificationRequiredIEsValue_IdScgindicator); ok {
		return x.IdScgindicator
	}
	return xnap_ies.Scgindicator(0)
}

type isSnodeModificationRequiredIEsValue_SnodeModificationRequiredIes interface {
	isSnodeModificationRequiredIEsValue_SnodeModificationRequiredIes()
}

type SnodeModificationRequiredIEsValue_IdMNgRannodeUexnApid struct {
	// @inject_tag: aper:"choiceIdx:1,"
	IdMNgRannodeUexnApid *xnap_ies.NgRAnnodeUexnApid `protobuf:"bytes,1,opt,name=id_m_ng_rannode_uexn_apid,json=id-M-NG-RANnodeUEXnAPID,proto3,oneof" aper:"choiceIdx:1,"`
}

type SnodeModificationRequiredIEsValue_IdSNgRannodeUexnApid struct {
	// @inject_tag: aper:"choiceIdx:2,"
	IdSNgRannodeUexnApid *xnap_ies.NgRAnnodeUexnApid `protobuf:"bytes,2,opt,name=id_s_ng_rannode_uexn_apid,json=id-S-NG-RANnodeUEXnAPID,proto3,oneof" aper:"choiceIdx:2,"`
}

type SnodeModificationRequiredIEsValue_IdCause struct {
	// @inject_tag: aper:"choiceIdx:3,"
	IdCause *xnap_ies.Cause `protobuf:"bytes,3,opt,name=id_cause,json=id-Cause,proto3,oneof" aper:"choiceIdx:3,"`
}

type SnodeModificationRequiredIEsValue_IdPdcpchangeIndication struct {
	// @inject_tag: aper:"choiceIdx:4,"
	IdPdcpchangeIndication *xnap_ies.PdcpchangeIndication `protobuf:"bytes,4,opt,name=id_pdcpchange_indication,json=id-PDCPChangeIndication,proto3,oneof" aper:"choiceIdx:4,"`
}

type SnodeModificationRequiredIEsValue_IdPdusessionToBeModifiedSnmodRequired struct {
	// @inject_tag: aper:"choiceIdx:5,"
	IdPdusessionToBeModifiedSnmodRequired *PdusessionToBeModifiedSnmodRequired `protobuf:"bytes,5,opt,name=id_pdusession_to_be_modified_snmod_required,json=id-PDUSessionToBeModifiedSNModRequired,proto3,oneof" aper:"choiceIdx:5,"`
}

type SnodeModificationRequiredIEsValue_IdPdusessionToBeReleasedSnmodRequired struct {
	// @inject_tag: aper:"choiceIdx:6,valueExt,"
	IdPdusessionToBeReleasedSnmodRequired *PdusessionToBeReleasedSnmodRequired `protobuf:"bytes,6,opt,name=id_pdusession_to_be_released_snmod_required,json=id-PDUSessionToBeReleasedSNModRequired,proto3,oneof" aper:"choiceIdx:6,valueExt,"`
}

type SnodeModificationRequiredIEsValue_IdSnToMnContainer struct {
	// @inject_tag: aper:"choiceIdx:7,"
	IdSnToMnContainer string `protobuf:"bytes,7,opt,name=id_sn_to_mn_container,json=id-SN-to-MN-Container,proto3,oneof" aper:"choiceIdx:7,"`
}

type SnodeModificationRequiredIEsValue_IdSpareDrbids struct {
	// @inject_tag: aper:"choiceIdx:8,"
	IdSpareDrbids *xnap_ies.DrbList `protobuf:"bytes,8,opt,name=id_spare_drbids,json=id-SpareDRBIDs,proto3,oneof" aper:"choiceIdx:8,"`
}

type SnodeModificationRequiredIEsValue_IdRequiredNumberOfDrbids struct {
	// @inject_tag: aper:"choiceIdx:9,"
	IdRequiredNumberOfDrbids *xnap_ies.DrbNumber `protobuf:"bytes,9,opt,name=id_required_number_of_drbids,json=id-RequiredNumberOfDRBIDs,proto3,oneof" aper:"choiceIdx:9,"`
}

type SnodeModificationRequiredIEsValue_IdLocationInformationSn struct {
	// @inject_tag: aper:"choiceIdx:10,"
	IdLocationInformationSn *xnap_ies.TargetCGi `protobuf:"bytes,10,opt,name=id_location_information_sn,json=id-LocationInformationSN,proto3,oneof" aper:"choiceIdx:10,"`
}

type SnodeModificationRequiredIEsValue_IdMrDcResourceCoordinationInfo struct {
	// @inject_tag: aper:"choiceIdx:11,valueExt,"
	IdMrDcResourceCoordinationInfo *xnap_ies.MrDCResourceCoordinationInfo `protobuf:"bytes,11,opt,name=id_mr_dc_resource_coordination_info,json=id-MR-DC-ResourceCoordinationInfo,proto3,oneof" aper:"choiceIdx:11,valueExt,"`
}

type SnodeModificationRequiredIEsValue_IdRrcconfigIndication struct {
	// @inject_tag: aper:"choiceIdx:12,valueExt,valueLB:0,valueUB:1,"
	IdRrcconfigIndication xnap_ies.RrcconfigIndication `protobuf:"varint,12,opt,name=id_rrcconfig_indication,json=id-RRCConfigIndication,proto3,enum=xnap.v1.RrcconfigIndication,oneof" aper:"choiceIdx:12,valueExt,valueLB:0,valueUB:1,"`
}

type SnodeModificationRequiredIEsValue_IdAvailableFastMcgrecoveryViaSrb3 struct {
	// @inject_tag: aper:"choiceIdx:13,valueExt,valueLB:0,valueUB:0,"
	IdAvailableFastMcgrecoveryViaSrb3 AvailableFastMcgrecoveryViaSrb3 `protobuf:"varint,13,opt,name=id_available_fast_mcgrecovery_via_srb3,json=id-AvailableFastMCGRecoveryViaSRB3,proto3,enum=xnap.v1.AvailableFastMcgrecoveryViaSrb3,oneof" aper:"choiceIdx:13,valueExt,valueLB:0,valueUB:0,"`
}

type SnodeModificationRequiredIEsValue_IdReleaseFastMcgrecoveryViaSrb3 struct {
	// @inject_tag: aper:"choiceIdx:14,valueExt,valueLB:0,valueUB:0,"
	IdReleaseFastMcgrecoveryViaSrb3 ReleaseFastMcgrecoveryViaSrb3 `protobuf:"varint,14,opt,name=id_release_fast_mcgrecovery_via_srb3,json=id-ReleaseFastMCGRecoveryViaSRB3,proto3,enum=xnap.v1.ReleaseFastMcgrecoveryViaSrb3,oneof" aper:"choiceIdx:14,valueExt,valueLB:0,valueUB:0,"`
}

type SnodeModificationRequiredIEsValue_IdScgindicator struct {
	// @inject_tag: aper:"choiceIdx:15,valueExt,valueLB:0,valueUB:0,"
	IdScgindicator xnap_ies.Scgindicator `protobuf:"varint,15,opt,name=id_scgindicator,json=id-SCGIndicator,proto3,enum=xnap.v1.Scgindicator,oneof" aper:"choiceIdx:15,valueExt,valueLB:0,valueUB:0,"`
}

func (*SnodeModificationRequiredIEsValue_IdMNgRannodeUexnApid) isSnodeModificationRequiredIEsValue_SnodeModificationRequiredIes() {
}

func (*SnodeModificationRequiredIEsValue_IdSNgRannodeUexnApid) isSnodeModificationRequiredIEsValue_SnodeModificationRequiredIes() {
}

func (*SnodeModificationRequiredIEsValue_IdCause) isSnodeModificationRequiredIEsValue_SnodeModificationRequiredIes() {
}

func (*SnodeModificationRequiredIEsValue_IdPdcpchangeIndication) isSnodeModificationRequiredIEsValue_SnodeModificationRequiredIes() {
}

func (*SnodeModificationRequiredIEsValue_IdPdusessionToBeModifiedSnmodRequired) isSnodeModificationRequiredIEsValue_SnodeModificationRequiredIes() {
}

func (*SnodeModificationRequiredIEsValue_IdPdusessionToBeReleasedSnmodRequired) isSnodeModificationRequiredIEsValue_SnodeModificationRequiredIes() {
}

func (*SnodeModificationRequiredIEsValue_IdSnToMnContainer) isSnodeModificationRequiredIEsValue_SnodeModificationRequiredIes() {
}

func (*SnodeModificationRequiredIEsValue_IdSpareDrbids) isSnodeModificationRequiredIEsValue_SnodeModificationRequiredIes() {
}

func (*SnodeModificationRequiredIEsValue_IdRequiredNumberOfDrbids) isSnodeModificationRequiredIEsValue_SnodeModificationRequiredIes() {
}

func (*SnodeModificationRequiredIEsValue_IdLocationInformationSn) isSnodeModificationRequiredIEsValue_SnodeModificationRequiredIes() {
}

func (*SnodeModificationRequiredIEsValue_IdMrDcResourceCoordinationInfo) isSnodeModificationRequiredIEsValue_SnodeModificationRequiredIes() {
}

func (*SnodeModificationRequiredIEsValue_IdRrcconfigIndication) isSnodeModificationRequiredIEsValue_SnodeModificationRequiredIes() {
}

func (*SnodeModificationRequiredIEsValue_IdAvailableFastMcgrecoveryViaSrb3) isSnodeModificationRequiredIEsValue_SnodeModificationRequiredIes() {
}

func (*SnodeModificationRequiredIEsValue_IdReleaseFastMcgrecoveryViaSrb3) isSnodeModificationRequiredIEsValue_SnodeModificationRequiredIes() {
}

func (*SnodeModificationRequiredIEsValue_IdScgindicator) isSnodeModificationRequiredIEsValue_SnodeModificationRequiredIes() {
}

// concrete instance(s) of class XNAP-PROTOCOL-IES from xnap_v1.asn1:1747
// @inject_tag: aper:"valueExt"
// {SNodeModificationRequired-IEs}
type SnodeModificationRequiredIEs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"unique,"
	Id *xnap_commondatatypes.ProtocolIeID `protobuf:"bytes,1,opt,name=id,json=&id,proto3" json:"id,omitempty" aper:"unique,"`
	// @inject_tag: aper:"valueLB:0,valueUB:2,"
	Criticality xnap_commondatatypes.Criticality `protobuf:"varint,2,opt,name=criticality,json=&criticality,proto3,enum=xnap.v1.Criticality" json:"criticality,omitempty" aper:"valueLB:0,valueUB:2,"`
	// @inject_tag: aper:"canonicalOrder,"
	Value *SnodeModificationRequiredIEsValue `protobuf:"bytes,3,opt,name=value,json=&Value,proto3" json:"value,omitempty" aper:"canonicalOrder,"`
}

func (x *SnodeModificationRequiredIEs) Reset() {
	*x = SnodeModificationRequiredIEs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[116]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SnodeModificationRequiredIEs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SnodeModificationRequiredIEs) ProtoMessage() {}

func (x *SnodeModificationRequiredIEs) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[116]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SnodeModificationRequiredIEs.ProtoReflect.Descriptor instead.
func (*SnodeModificationRequiredIEs) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_pdu_contents_proto_rawDescGZIP(), []int{116}
}

func (x *SnodeModificationRequiredIEs) GetId() *xnap_commondatatypes.ProtocolIeID {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *SnodeModificationRequiredIEs) GetCriticality() xnap_commondatatypes.Criticality {
	if x != nil {
		return x.Criticality
	}
	return xnap_commondatatypes.Criticality(0)
}

func (x *SnodeModificationRequiredIEs) GetValue() *SnodeModificationRequiredIEsValue {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:1743
// @inject_tag: aper:"valueExt"
// {SNodeModificationRequired}
type SnodeModificationRequired struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProtocolIes []*SnodeModificationRequiredIEs `protobuf:"bytes,1,rep,name=protocol_ies,json=protocolIEs,proto3" json:"protocol_ies,omitempty"`
}

func (x *SnodeModificationRequired) Reset() {
	*x = SnodeModificationRequired{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[117]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SnodeModificationRequired) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SnodeModificationRequired) ProtoMessage() {}

func (x *SnodeModificationRequired) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[117]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SnodeModificationRequired.ProtoReflect.Descriptor instead.
func (*SnodeModificationRequired) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_pdu_contents_proto_rawDescGZIP(), []int{117}
}

func (x *SnodeModificationRequired) GetProtocolIes() []*SnodeModificationRequiredIEs {
	if x != nil {
		return x.ProtocolIes
	}
	return nil
}

// sequence from xnap_v1.asn1:1767
// {PDUSessionToBeModifiedSNModRequired}
type PdusessionToBeModifiedSnmodRequired struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"valueExt,sizeLB:1,sizeUB:256,"
	Value []*PdusessionToBeModifiedSnmodRequiredItem `protobuf:"bytes,1,rep,name=value,proto3" json:"value,omitempty" aper:"valueExt,sizeLB:1,sizeUB:256,"`
}

func (x *PdusessionToBeModifiedSnmodRequired) Reset() {
	*x = PdusessionToBeModifiedSnmodRequired{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[118]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PdusessionToBeModifiedSnmodRequired) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PdusessionToBeModifiedSnmodRequired) ProtoMessage() {}

func (x *PdusessionToBeModifiedSnmodRequired) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[118]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PdusessionToBeModifiedSnmodRequired.ProtoReflect.Descriptor instead.
func (*PdusessionToBeModifiedSnmodRequired) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_pdu_contents_proto_rawDescGZIP(), []int{118}
}

func (x *PdusessionToBeModifiedSnmodRequired) GetValue() []*PdusessionToBeModifiedSnmodRequiredItem {
	if x != nil {
		return x.Value
	}
	return nil
}

// value set from xnap_v1.asn1:1778
// {PDUSessionToBeModifiedSNModRequired-Item-ExtIEs}
type PdusessionToBeModifiedSnmodRequiredItemExtIes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *emptypb.Empty `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *PdusessionToBeModifiedSnmodRequiredItemExtIes) Reset() {
	*x = PdusessionToBeModifiedSnmodRequiredItemExtIes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[119]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PdusessionToBeModifiedSnmodRequiredItemExtIes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PdusessionToBeModifiedSnmodRequiredItemExtIes) ProtoMessage() {}

func (x *PdusessionToBeModifiedSnmodRequiredItemExtIes) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[119]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PdusessionToBeModifiedSnmodRequiredItemExtIes.ProtoReflect.Descriptor instead.
func (*PdusessionToBeModifiedSnmodRequiredItemExtIes) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_pdu_contents_proto_rawDescGZIP(), []int{119}
}

func (x *PdusessionToBeModifiedSnmodRequiredItemExtIes) GetValue() *emptypb.Empty {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:1768
// @inject_tag: aper:"valueExt"
// {PDUSessionToBeModifiedSNModRequired-Item}
type PdusessionToBeModifiedSnmodRequiredItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PduSessionId *xnap_ies.PdusessionID `protobuf:"bytes,1,opt,name=pdu_session_id,json=pduSessionId,proto3" json:"pdu_session_id,omitempty"`
	// @inject_tag: aper:"optional,valueExt,"
	SnTerminated *xnap_ies.PdusessionResourceModRqdInfoSNterminated `protobuf:"bytes,2,opt,name=sn_terminated,json=sn-terminated,proto3,oneof" json:"sn_terminated,omitempty" aper:"optional,valueExt,"`
	// @inject_tag: aper:"optional,valueExt,"
	MnTerminated *xnap_ies.PdusessionResourceModRqdInfoMNterminated `protobuf:"bytes,3,opt,name=mn_terminated,json=mn-terminated,proto3,oneof" json:"mn_terminated,omitempty" aper:"optional,valueExt,"`
	// @inject_tag: aper:"optional,sizeLB:1,"
	IEExtension []*PdusessionToBeModifiedSnmodRequiredItemExtIes `protobuf:"bytes,4,rep,name=i_e_extension,json=iE-Extension,proto3" json:"i_e_extension,omitempty" aper:"optional,sizeLB:1,"`
}

func (x *PdusessionToBeModifiedSnmodRequiredItem) Reset() {
	*x = PdusessionToBeModifiedSnmodRequiredItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[120]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PdusessionToBeModifiedSnmodRequiredItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PdusessionToBeModifiedSnmodRequiredItem) ProtoMessage() {}

func (x *PdusessionToBeModifiedSnmodRequiredItem) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[120]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PdusessionToBeModifiedSnmodRequiredItem.ProtoReflect.Descriptor instead.
func (*PdusessionToBeModifiedSnmodRequiredItem) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_pdu_contents_proto_rawDescGZIP(), []int{120}
}

func (x *PdusessionToBeModifiedSnmodRequiredItem) GetPduSessionId() *xnap_ies.PdusessionID {
	if x != nil {
		return x.PduSessionId
	}
	return nil
}

func (x *PdusessionToBeModifiedSnmodRequiredItem) GetSnTerminated() *xnap_ies.PdusessionResourceModRqdInfoSNterminated {
	if x != nil {
		return x.SnTerminated
	}
	return nil
}

func (x *PdusessionToBeModifiedSnmodRequiredItem) GetMnTerminated() *xnap_ies.PdusessionResourceModRqdInfoMNterminated {
	if x != nil {
		return x.MnTerminated
	}
	return nil
}

func (x *PdusessionToBeModifiedSnmodRequiredItem) GetIEExtension() []*PdusessionToBeModifiedSnmodRequiredItemExtIes {
	if x != nil {
		return x.IEExtension
	}
	return nil
}

// value set from xnap_v1.asn1:1789
// {PDUSessionToBeReleasedSNModRequired-ExtIEs}
type PdusessionToBeReleasedSnmodRequiredExtIes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *emptypb.Empty `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *PdusessionToBeReleasedSnmodRequiredExtIes) Reset() {
	*x = PdusessionToBeReleasedSnmodRequiredExtIes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[121]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PdusessionToBeReleasedSnmodRequiredExtIes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PdusessionToBeReleasedSnmodRequiredExtIes) ProtoMessage() {}

func (x *PdusessionToBeReleasedSnmodRequiredExtIes) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[121]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PdusessionToBeReleasedSnmodRequiredExtIes.ProtoReflect.Descriptor instead.
func (*PdusessionToBeReleasedSnmodRequiredExtIes) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_pdu_contents_proto_rawDescGZIP(), []int{121}
}

func (x *PdusessionToBeReleasedSnmodRequiredExtIes) GetValue() *emptypb.Empty {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:1783
// @inject_tag: aper:"valueExt"
// {PDUSessionToBeReleasedSNModRequired}
type PdusessionToBeReleasedSnmodRequired struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"optional,"
	SnTerminated *xnap_ies.PdusessionListwithDataForwardingRequest `protobuf:"bytes,1,opt,name=sn_terminated,json=sn-terminated,proto3,oneof" json:"sn_terminated,omitempty" aper:"optional,"`
	// @inject_tag: aper:"optional,"
	MnTerminated *xnap_ies.PdusessionListwithCause `protobuf:"bytes,2,opt,name=mn_terminated,json=mn-terminated,proto3,oneof" json:"mn_terminated,omitempty" aper:"optional,"`
	// @inject_tag: aper:"optional,sizeLB:1,"
	IEExtension []*PdusessionToBeReleasedSnmodRequiredExtIes `protobuf:"bytes,3,rep,name=i_e_extension,json=iE-Extension,proto3" json:"i_e_extension,omitempty" aper:"optional,sizeLB:1,"`
}

func (x *PdusessionToBeReleasedSnmodRequired) Reset() {
	*x = PdusessionToBeReleasedSnmodRequired{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[122]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PdusessionToBeReleasedSnmodRequired) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PdusessionToBeReleasedSnmodRequired) ProtoMessage() {}

func (x *PdusessionToBeReleasedSnmodRequired) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[122]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PdusessionToBeReleasedSnmodRequired.ProtoReflect.Descriptor instead.
func (*PdusessionToBeReleasedSnmodRequired) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_pdu_contents_proto_rawDescGZIP(), []int{122}
}

func (x *PdusessionToBeReleasedSnmodRequired) GetSnTerminated() *xnap_ies.PdusessionListwithDataForwardingRequest {
	if x != nil {
		return x.SnTerminated
	}
	return nil
}

func (x *PdusessionToBeReleasedSnmodRequired) GetMnTerminated() *xnap_ies.PdusessionListwithCause {
	if x != nil {
		return x.MnTerminated
	}
	return nil
}

func (x *PdusessionToBeReleasedSnmodRequired) GetIEExtension() []*PdusessionToBeReleasedSnmodRequiredExtIes {
	if x != nil {
		return x.IEExtension
	}
	return nil
}

// value set from xnap_v1.asn1:1804
// {SNodeModificationConfirm-IEs&Value}
type SnodeModificationConfirmIEsValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// value set translated as choice from xnap_v1.asn1:1804
	//
	// Types that are assignable to SnodeModificationConfirmIes:
	//	*SnodeModificationConfirmIEsValue_IdMNgRannodeUexnApid
	//	*SnodeModificationConfirmIEsValue_IdSNgRannodeUexnApid
	//	*SnodeModificationConfirmIEsValue_IdPdusessionAdmittedModSnmodConfirm
	//	*SnodeModificationConfirmIEsValue_IdPdusessionReleasedSnmodConfirm
	//	*SnodeModificationConfirmIEsValue_IdMnToSnContainer
	//	*SnodeModificationConfirmIEsValue_IdAdditionalDrbids
	//	*SnodeModificationConfirmIEsValue_IdCriticalityDiagnostics
	//	*SnodeModificationConfirmIEsValue_IdMrDcResourceCoordinationInfo
	SnodeModificationConfirmIes isSnodeModificationConfirmIEsValue_SnodeModificationConfirmIes `protobuf_oneof:"snode_modification_confirm_ies"`
}

func (x *SnodeModificationConfirmIEsValue) Reset() {
	*x = SnodeModificationConfirmIEsValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[123]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SnodeModificationConfirmIEsValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SnodeModificationConfirmIEsValue) ProtoMessage() {}

func (x *SnodeModificationConfirmIEsValue) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[123]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SnodeModificationConfirmIEsValue.ProtoReflect.Descriptor instead.
func (*SnodeModificationConfirmIEsValue) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_pdu_contents_proto_rawDescGZIP(), []int{123}
}

func (m *SnodeModificationConfirmIEsValue) GetSnodeModificationConfirmIes() isSnodeModificationConfirmIEsValue_SnodeModificationConfirmIes {
	if m != nil {
		return m.SnodeModificationConfirmIes
	}
	return nil
}

func (x *SnodeModificationConfirmIEsValue) GetIdMNgRannodeUexnApid() *xnap_ies.NgRAnnodeUexnApid {
	if x, ok := x.GetSnodeModificationConfirmIes().(*SnodeModificationConfirmIEsValue_IdMNgRannodeUexnApid); ok {
		return x.IdMNgRannodeUexnApid
	}
	return nil
}

func (x *SnodeModificationConfirmIEsValue) GetIdSNgRannodeUexnApid() *xnap_ies.NgRAnnodeUexnApid {
	if x, ok := x.GetSnodeModificationConfirmIes().(*SnodeModificationConfirmIEsValue_IdSNgRannodeUexnApid); ok {
		return x.IdSNgRannodeUexnApid
	}
	return nil
}

func (x *SnodeModificationConfirmIEsValue) GetIdPdusessionAdmittedModSnmodConfirm() *PdusessionAdmittedModSnmodConfirm {
	if x, ok := x.GetSnodeModificationConfirmIes().(*SnodeModificationConfirmIEsValue_IdPdusessionAdmittedModSnmodConfirm); ok {
		return x.IdPdusessionAdmittedModSnmodConfirm
	}
	return nil
}

func (x *SnodeModificationConfirmIEsValue) GetIdPdusessionReleasedSnmodConfirm() *PdusessionReleasedSnmodConfirm {
	if x, ok := x.GetSnodeModificationConfirmIes().(*SnodeModificationConfirmIEsValue_IdPdusessionReleasedSnmodConfirm); ok {
		return x.IdPdusessionReleasedSnmodConfirm
	}
	return nil
}

func (x *SnodeModificationConfirmIEsValue) GetIdMnToSnContainer() string {
	if x, ok := x.GetSnodeModificationConfirmIes().(*SnodeModificationConfirmIEsValue_IdMnToSnContainer); ok {
		return x.IdMnToSnContainer
	}
	return ""
}

func (x *SnodeModificationConfirmIEsValue) GetIdAdditionalDrbids() *xnap_ies.DrbList {
	if x, ok := x.GetSnodeModificationConfirmIes().(*SnodeModificationConfirmIEsValue_IdAdditionalDrbids); ok {
		return x.IdAdditionalDrbids
	}
	return nil
}

func (x *SnodeModificationConfirmIEsValue) GetIdCriticalityDiagnostics() *xnap_ies.CriticalityDiagnostics {
	if x, ok := x.GetSnodeModificationConfirmIes().(*SnodeModificationConfirmIEsValue_IdCriticalityDiagnostics); ok {
		return x.IdCriticalityDiagnostics
	}
	return nil
}

func (x *SnodeModificationConfirmIEsValue) GetIdMrDcResourceCoordinationInfo() *xnap_ies.MrDCResourceCoordinationInfo {
	if x, ok := x.GetSnodeModificationConfirmIes().(*SnodeModificationConfirmIEsValue_IdMrDcResourceCoordinationInfo); ok {
		return x.IdMrDcResourceCoordinationInfo
	}
	return nil
}

type isSnodeModificationConfirmIEsValue_SnodeModificationConfirmIes interface {
	isSnodeModificationConfirmIEsValue_SnodeModificationConfirmIes()
}

type SnodeModificationConfirmIEsValue_IdMNgRannodeUexnApid struct {
	// @inject_tag: aper:"choiceIdx:1,"
	IdMNgRannodeUexnApid *xnap_ies.NgRAnnodeUexnApid `protobuf:"bytes,1,opt,name=id_m_ng_rannode_uexn_apid,json=id-M-NG-RANnodeUEXnAPID,proto3,oneof" aper:"choiceIdx:1,"`
}

type SnodeModificationConfirmIEsValue_IdSNgRannodeUexnApid struct {
	// @inject_tag: aper:"choiceIdx:2,"
	IdSNgRannodeUexnApid *xnap_ies.NgRAnnodeUexnApid `protobuf:"bytes,2,opt,name=id_s_ng_rannode_uexn_apid,json=id-S-NG-RANnodeUEXnAPID,proto3,oneof" aper:"choiceIdx:2,"`
}

type SnodeModificationConfirmIEsValue_IdPdusessionAdmittedModSnmodConfirm struct {
	// @inject_tag: aper:"choiceIdx:3,"
	IdPdusessionAdmittedModSnmodConfirm *PdusessionAdmittedModSnmodConfirm `protobuf:"bytes,3,opt,name=id_pdusession_admitted_mod_snmod_confirm,json=id-PDUSessionAdmittedModSNModConfirm,proto3,oneof" aper:"choiceIdx:3,"`
}

type SnodeModificationConfirmIEsValue_IdPdusessionReleasedSnmodConfirm struct {
	// @inject_tag: aper:"choiceIdx:4,valueExt,"
	IdPdusessionReleasedSnmodConfirm *PdusessionReleasedSnmodConfirm `protobuf:"bytes,4,opt,name=id_pdusession_released_snmod_confirm,json=id-PDUSessionReleasedSNModConfirm,proto3,oneof" aper:"choiceIdx:4,valueExt,"`
}

type SnodeModificationConfirmIEsValue_IdMnToSnContainer struct {
	// @inject_tag: aper:"choiceIdx:5,"
	IdMnToSnContainer string `protobuf:"bytes,5,opt,name=id_mn_to_sn_container,json=id-MN-to-SN-Container,proto3,oneof" aper:"choiceIdx:5,"`
}

type SnodeModificationConfirmIEsValue_IdAdditionalDrbids struct {
	// @inject_tag: aper:"choiceIdx:6,"
	IdAdditionalDrbids *xnap_ies.DrbList `protobuf:"bytes,6,opt,name=id_additional_drbids,json=id-AdditionalDRBIDs,proto3,oneof" aper:"choiceIdx:6,"`
}

type SnodeModificationConfirmIEsValue_IdCriticalityDiagnostics struct {
	// @inject_tag: aper:"choiceIdx:7,valueExt,"
	IdCriticalityDiagnostics *xnap_ies.CriticalityDiagnostics `protobuf:"bytes,7,opt,name=id_criticality_diagnostics,json=id-CriticalityDiagnostics,proto3,oneof" aper:"choiceIdx:7,valueExt,"`
}

type SnodeModificationConfirmIEsValue_IdMrDcResourceCoordinationInfo struct {
	// @inject_tag: aper:"choiceIdx:8,valueExt,"
	IdMrDcResourceCoordinationInfo *xnap_ies.MrDCResourceCoordinationInfo `protobuf:"bytes,8,opt,name=id_mr_dc_resource_coordination_info,json=id-MR-DC-ResourceCoordinationInfo,proto3,oneof" aper:"choiceIdx:8,valueExt,"`
}

func (*SnodeModificationConfirmIEsValue_IdMNgRannodeUexnApid) isSnodeModificationConfirmIEsValue_SnodeModificationConfirmIes() {
}

func (*SnodeModificationConfirmIEsValue_IdSNgRannodeUexnApid) isSnodeModificationConfirmIEsValue_SnodeModificationConfirmIes() {
}

func (*SnodeModificationConfirmIEsValue_IdPdusessionAdmittedModSnmodConfirm) isSnodeModificationConfirmIEsValue_SnodeModificationConfirmIes() {
}

func (*SnodeModificationConfirmIEsValue_IdPdusessionReleasedSnmodConfirm) isSnodeModificationConfirmIEsValue_SnodeModificationConfirmIes() {
}

func (*SnodeModificationConfirmIEsValue_IdMnToSnContainer) isSnodeModificationConfirmIEsValue_SnodeModificationConfirmIes() {
}

func (*SnodeModificationConfirmIEsValue_IdAdditionalDrbids) isSnodeModificationConfirmIEsValue_SnodeModificationConfirmIes() {
}

func (*SnodeModificationConfirmIEsValue_IdCriticalityDiagnostics) isSnodeModificationConfirmIEsValue_SnodeModificationConfirmIes() {
}

func (*SnodeModificationConfirmIEsValue_IdMrDcResourceCoordinationInfo) isSnodeModificationConfirmIEsValue_SnodeModificationConfirmIes() {
}

// concrete instance(s) of class XNAP-PROTOCOL-IES from xnap_v1.asn1:1804
// @inject_tag: aper:"valueExt"
// {SNodeModificationConfirm-IEs}
type SnodeModificationConfirmIEs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"unique,"
	Id *xnap_commondatatypes.ProtocolIeID `protobuf:"bytes,1,opt,name=id,json=&id,proto3" json:"id,omitempty" aper:"unique,"`
	// @inject_tag: aper:"valueLB:0,valueUB:2,"
	Criticality xnap_commondatatypes.Criticality `protobuf:"varint,2,opt,name=criticality,json=&criticality,proto3,enum=xnap.v1.Criticality" json:"criticality,omitempty" aper:"valueLB:0,valueUB:2,"`
	// @inject_tag: aper:"canonicalOrder,"
	Value *SnodeModificationConfirmIEsValue `protobuf:"bytes,3,opt,name=value,json=&Value,proto3" json:"value,omitempty" aper:"canonicalOrder,"`
}

func (x *SnodeModificationConfirmIEs) Reset() {
	*x = SnodeModificationConfirmIEs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[124]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SnodeModificationConfirmIEs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SnodeModificationConfirmIEs) ProtoMessage() {}

func (x *SnodeModificationConfirmIEs) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[124]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SnodeModificationConfirmIEs.ProtoReflect.Descriptor instead.
func (*SnodeModificationConfirmIEs) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_pdu_contents_proto_rawDescGZIP(), []int{124}
}

func (x *SnodeModificationConfirmIEs) GetId() *xnap_commondatatypes.ProtocolIeID {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *SnodeModificationConfirmIEs) GetCriticality() xnap_commondatatypes.Criticality {
	if x != nil {
		return x.Criticality
	}
	return xnap_commondatatypes.Criticality(0)
}

func (x *SnodeModificationConfirmIEs) GetValue() *SnodeModificationConfirmIEsValue {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:1800
// @inject_tag: aper:"valueExt"
// {SNodeModificationConfirm}
type SnodeModificationConfirm struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProtocolIes []*SnodeModificationConfirmIEs `protobuf:"bytes,1,rep,name=protocol_ies,json=protocolIEs,proto3" json:"protocol_ies,omitempty"`
}

func (x *SnodeModificationConfirm) Reset() {
	*x = SnodeModificationConfirm{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[125]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SnodeModificationConfirm) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SnodeModificationConfirm) ProtoMessage() {}

func (x *SnodeModificationConfirm) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[125]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SnodeModificationConfirm.ProtoReflect.Descriptor instead.
func (*SnodeModificationConfirm) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_pdu_contents_proto_rawDescGZIP(), []int{125}
}

func (x *SnodeModificationConfirm) GetProtocolIes() []*SnodeModificationConfirmIEs {
	if x != nil {
		return x.ProtocolIes
	}
	return nil
}

// sequence from xnap_v1.asn1:1818
// {PDUSessionAdmittedModSNModConfirm}
type PdusessionAdmittedModSnmodConfirm struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"valueExt,sizeLB:1,sizeUB:256,"
	Value []*PdusessionAdmittedModSnmodConfirmItem `protobuf:"bytes,1,rep,name=value,proto3" json:"value,omitempty" aper:"valueExt,sizeLB:1,sizeUB:256,"`
}

func (x *PdusessionAdmittedModSnmodConfirm) Reset() {
	*x = PdusessionAdmittedModSnmodConfirm{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[126]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PdusessionAdmittedModSnmodConfirm) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PdusessionAdmittedModSnmodConfirm) ProtoMessage() {}

func (x *PdusessionAdmittedModSnmodConfirm) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[126]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PdusessionAdmittedModSnmodConfirm.ProtoReflect.Descriptor instead.
func (*PdusessionAdmittedModSnmodConfirm) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_pdu_contents_proto_rawDescGZIP(), []int{126}
}

func (x *PdusessionAdmittedModSnmodConfirm) GetValue() []*PdusessionAdmittedModSnmodConfirmItem {
	if x != nil {
		return x.Value
	}
	return nil
}

// value set from xnap_v1.asn1:1829
// {PDUSessionAdmittedModSNModConfirm-Item-ExtIEs}
type PdusessionAdmittedModSnmodConfirmItemExtIes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *emptypb.Empty `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *PdusessionAdmittedModSnmodConfirmItemExtIes) Reset() {
	*x = PdusessionAdmittedModSnmodConfirmItemExtIes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[127]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PdusessionAdmittedModSnmodConfirmItemExtIes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PdusessionAdmittedModSnmodConfirmItemExtIes) ProtoMessage() {}

func (x *PdusessionAdmittedModSnmodConfirmItemExtIes) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[127]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PdusessionAdmittedModSnmodConfirmItemExtIes.ProtoReflect.Descriptor instead.
func (*PdusessionAdmittedModSnmodConfirmItemExtIes) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_pdu_contents_proto_rawDescGZIP(), []int{127}
}

func (x *PdusessionAdmittedModSnmodConfirmItemExtIes) GetValue() *emptypb.Empty {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:1819
// @inject_tag: aper:"valueExt"
// {PDUSessionAdmittedModSNModConfirm-Item}
type PdusessionAdmittedModSnmodConfirmItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PduSessionId *xnap_ies.PdusessionID `protobuf:"bytes,1,opt,name=pdu_session_id,json=pduSessionId,proto3" json:"pdu_session_id,omitempty"`
	// @inject_tag: aper:"optional,valueExt,"
	SnTerminated *xnap_ies.PdusessionResourceModConfirmInfoSNterminated `protobuf:"bytes,2,opt,name=sn_terminated,json=sn-terminated,proto3,oneof" json:"sn_terminated,omitempty" aper:"optional,valueExt,"`
	// @inject_tag: aper:"optional,valueExt,"
	MnTerminated *xnap_ies.PdusessionResourceModConfirmInfoMNterminated `protobuf:"bytes,3,opt,name=mn_terminated,json=mn-terminated,proto3,oneof" json:"mn_terminated,omitempty" aper:"optional,valueExt,"`
	// @inject_tag: aper:"optional,sizeLB:1,"
	IEExtension []*PdusessionAdmittedModSnmodConfirmItemExtIes `protobuf:"bytes,4,rep,name=i_e_extension,json=iE-Extension,proto3" json:"i_e_extension,omitempty" aper:"optional,sizeLB:1,"`
}

func (x *PdusessionAdmittedModSnmodConfirmItem) Reset() {
	*x = PdusessionAdmittedModSnmodConfirmItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[128]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PdusessionAdmittedModSnmodConfirmItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PdusessionAdmittedModSnmodConfirmItem) ProtoMessage() {}

func (x *PdusessionAdmittedModSnmodConfirmItem) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[128]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PdusessionAdmittedModSnmodConfirmItem.ProtoReflect.Descriptor instead.
func (*PdusessionAdmittedModSnmodConfirmItem) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_pdu_contents_proto_rawDescGZIP(), []int{128}
}

func (x *PdusessionAdmittedModSnmodConfirmItem) GetPduSessionId() *xnap_ies.PdusessionID {
	if x != nil {
		return x.PduSessionId
	}
	return nil
}

func (x *PdusessionAdmittedModSnmodConfirmItem) GetSnTerminated() *xnap_ies.PdusessionResourceModConfirmInfoSNterminated {
	if x != nil {
		return x.SnTerminated
	}
	return nil
}

func (x *PdusessionAdmittedModSnmodConfirmItem) GetMnTerminated() *xnap_ies.PdusessionResourceModConfirmInfoMNterminated {
	if x != nil {
		return x.MnTerminated
	}
	return nil
}

func (x *PdusessionAdmittedModSnmodConfirmItem) GetIEExtension() []*PdusessionAdmittedModSnmodConfirmItemExtIes {
	if x != nil {
		return x.IEExtension
	}
	return nil
}

// value set from xnap_v1.asn1:1841
// {PDUSessionAdmittedToBeReleasedSNModConfirm-ExtIEs}
type PdusessionAdmittedToBeReleasedSnmodConfirmExtIes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *emptypb.Empty `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *PdusessionAdmittedToBeReleasedSnmodConfirmExtIes) Reset() {
	*x = PdusessionAdmittedToBeReleasedSnmodConfirmExtIes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[129]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PdusessionAdmittedToBeReleasedSnmodConfirmExtIes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PdusessionAdmittedToBeReleasedSnmodConfirmExtIes) ProtoMessage() {}

func (x *PdusessionAdmittedToBeReleasedSnmodConfirmExtIes) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[129]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PdusessionAdmittedToBeReleasedSnmodConfirmExtIes.ProtoReflect.Descriptor instead.
func (*PdusessionAdmittedToBeReleasedSnmodConfirmExtIes) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_pdu_contents_proto_rawDescGZIP(), []int{129}
}

func (x *PdusessionAdmittedToBeReleasedSnmodConfirmExtIes) GetValue() *emptypb.Empty {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:1835
// @inject_tag: aper:"valueExt"
// {PDUSessionReleasedSNModConfirm}
type PdusessionReleasedSnmodConfirm struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"optional,"
	SnTerminated *xnap_ies.PdusessionListwithDataForwardingFromTarget `protobuf:"bytes,1,opt,name=sn_terminated,json=sn-terminated,proto3,oneof" json:"sn_terminated,omitempty" aper:"optional,"`
	// @inject_tag: aper:"optional,"
	MnTerminated *xnap_ies.PdusessionList `protobuf:"bytes,2,opt,name=mn_terminated,json=mn-terminated,proto3,oneof" json:"mn_terminated,omitempty" aper:"optional,"`
	// @inject_tag: aper:"optional,sizeLB:1,"
	IEExtension []*PdusessionAdmittedToBeReleasedSnmodConfirmExtIes `protobuf:"bytes,3,rep,name=i_e_extension,json=iE-Extension,proto3" json:"i_e_extension,omitempty" aper:"optional,sizeLB:1,"`
}

func (x *PdusessionReleasedSnmodConfirm) Reset() {
	*x = PdusessionReleasedSnmodConfirm{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[130]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PdusessionReleasedSnmodConfirm) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PdusessionReleasedSnmodConfirm) ProtoMessage() {}

func (x *PdusessionReleasedSnmodConfirm) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[130]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PdusessionReleasedSnmodConfirm.ProtoReflect.Descriptor instead.
func (*PdusessionReleasedSnmodConfirm) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_pdu_contents_proto_rawDescGZIP(), []int{130}
}

func (x *PdusessionReleasedSnmodConfirm) GetSnTerminated() *xnap_ies.PdusessionListwithDataForwardingFromTarget {
	if x != nil {
		return x.SnTerminated
	}
	return nil
}

func (x *PdusessionReleasedSnmodConfirm) GetMnTerminated() *xnap_ies.PdusessionList {
	if x != nil {
		return x.MnTerminated
	}
	return nil
}

func (x *PdusessionReleasedSnmodConfirm) GetIEExtension() []*PdusessionAdmittedToBeReleasedSnmodConfirmExtIes {
	if x != nil {
		return x.IEExtension
	}
	return nil
}

// value set from xnap_v1.asn1:1857
// {SNodeModificationRefuse-IEs&Value}
type SnodeModificationRefuseIEsValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// value set translated as choice from xnap_v1.asn1:1857
	//
	// Types that are assignable to SnodeModificationRefuseIes:
	//	*SnodeModificationRefuseIEsValue_IdMNgRannodeUexnApid
	//	*SnodeModificationRefuseIEsValue_IdSNgRannodeUexnApid
	//	*SnodeModificationRefuseIEsValue_IdCause
	//	*SnodeModificationRefuseIEsValue_IdMnToSnContainer
	//	*SnodeModificationRefuseIEsValue_IdCriticalityDiagnostics
	SnodeModificationRefuseIes isSnodeModificationRefuseIEsValue_SnodeModificationRefuseIes `protobuf_oneof:"snode_modification_refuse_ies"`
}

func (x *SnodeModificationRefuseIEsValue) Reset() {
	*x = SnodeModificationRefuseIEsValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[131]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SnodeModificationRefuseIEsValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SnodeModificationRefuseIEsValue) ProtoMessage() {}

func (x *SnodeModificationRefuseIEsValue) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[131]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SnodeModificationRefuseIEsValue.ProtoReflect.Descriptor instead.
func (*SnodeModificationRefuseIEsValue) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_pdu_contents_proto_rawDescGZIP(), []int{131}
}

func (m *SnodeModificationRefuseIEsValue) GetSnodeModificationRefuseIes() isSnodeModificationRefuseIEsValue_SnodeModificationRefuseIes {
	if m != nil {
		return m.SnodeModificationRefuseIes
	}
	return nil
}

func (x *SnodeModificationRefuseIEsValue) GetIdMNgRannodeUexnApid() *xnap_ies.NgRAnnodeUexnApid {
	if x, ok := x.GetSnodeModificationRefuseIes().(*SnodeModificationRefuseIEsValue_IdMNgRannodeUexnApid); ok {
		return x.IdMNgRannodeUexnApid
	}
	return nil
}

func (x *SnodeModificationRefuseIEsValue) GetIdSNgRannodeUexnApid() *xnap_ies.NgRAnnodeUexnApid {
	if x, ok := x.GetSnodeModificationRefuseIes().(*SnodeModificationRefuseIEsValue_IdSNgRannodeUexnApid); ok {
		return x.IdSNgRannodeUexnApid
	}
	return nil
}

func (x *SnodeModificationRefuseIEsValue) GetIdCause() *xnap_ies.Cause {
	if x, ok := x.GetSnodeModificationRefuseIes().(*SnodeModificationRefuseIEsValue_IdCause); ok {
		return x.IdCause
	}
	return nil
}

func (x *SnodeModificationRefuseIEsValue) GetIdMnToSnContainer() string {
	if x, ok := x.GetSnodeModificationRefuseIes().(*SnodeModificationRefuseIEsValue_IdMnToSnContainer); ok {
		return x.IdMnToSnContainer
	}
	return ""
}

func (x *SnodeModificationRefuseIEsValue) GetIdCriticalityDiagnostics() *xnap_ies.CriticalityDiagnostics {
	if x, ok := x.GetSnodeModificationRefuseIes().(*SnodeModificationRefuseIEsValue_IdCriticalityDiagnostics); ok {
		return x.IdCriticalityDiagnostics
	}
	return nil
}

type isSnodeModificationRefuseIEsValue_SnodeModificationRefuseIes interface {
	isSnodeModificationRefuseIEsValue_SnodeModificationRefuseIes()
}

type SnodeModificationRefuseIEsValue_IdMNgRannodeUexnApid struct {
	// @inject_tag: aper:"choiceIdx:1,"
	IdMNgRannodeUexnApid *xnap_ies.NgRAnnodeUexnApid `protobuf:"bytes,1,opt,name=id_m_ng_rannode_uexn_apid,json=id-M-NG-RANnodeUEXnAPID,proto3,oneof" aper:"choiceIdx:1,"`
}

type SnodeModificationRefuseIEsValue_IdSNgRannodeUexnApid struct {
	// @inject_tag: aper:"choiceIdx:2,"
	IdSNgRannodeUexnApid *xnap_ies.NgRAnnodeUexnApid `protobuf:"bytes,2,opt,name=id_s_ng_rannode_uexn_apid,json=id-S-NG-RANnodeUEXnAPID,proto3,oneof" aper:"choiceIdx:2,"`
}

type SnodeModificationRefuseIEsValue_IdCause struct {
	// @inject_tag: aper:"choiceIdx:3,"
	IdCause *xnap_ies.Cause `protobuf:"bytes,3,opt,name=id_cause,json=id-Cause,proto3,oneof" aper:"choiceIdx:3,"`
}

type SnodeModificationRefuseIEsValue_IdMnToSnContainer struct {
	// @inject_tag: aper:"choiceIdx:4,"
	IdMnToSnContainer string `protobuf:"bytes,4,opt,name=id_mn_to_sn_container,json=id-MN-to-SN-Container,proto3,oneof" aper:"choiceIdx:4,"`
}

type SnodeModificationRefuseIEsValue_IdCriticalityDiagnostics struct {
	// @inject_tag: aper:"choiceIdx:5,valueExt,"
	IdCriticalityDiagnostics *xnap_ies.CriticalityDiagnostics `protobuf:"bytes,5,opt,name=id_criticality_diagnostics,json=id-CriticalityDiagnostics,proto3,oneof" aper:"choiceIdx:5,valueExt,"`
}

func (*SnodeModificationRefuseIEsValue_IdMNgRannodeUexnApid) isSnodeModificationRefuseIEsValue_SnodeModificationRefuseIes() {
}

func (*SnodeModificationRefuseIEsValue_IdSNgRannodeUexnApid) isSnodeModificationRefuseIEsValue_SnodeModificationRefuseIes() {
}

func (*SnodeModificationRefuseIEsValue_IdCause) isSnodeModificationRefuseIEsValue_SnodeModificationRefuseIes() {
}

func (*SnodeModificationRefuseIEsValue_IdMnToSnContainer) isSnodeModificationRefuseIEsValue_SnodeModificationRefuseIes() {
}

func (*SnodeModificationRefuseIEsValue_IdCriticalityDiagnostics) isSnodeModificationRefuseIEsValue_SnodeModificationRefuseIes() {
}

// concrete instance(s) of class XNAP-PROTOCOL-IES from xnap_v1.asn1:1857
// @inject_tag: aper:"valueExt"
// {SNodeModificationRefuse-IEs}
type SnodeModificationRefuseIEs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"unique,"
	Id *xnap_commondatatypes.ProtocolIeID `protobuf:"bytes,1,opt,name=id,json=&id,proto3" json:"id,omitempty" aper:"unique,"`
	// @inject_tag: aper:"valueLB:0,valueUB:2,"
	Criticality xnap_commondatatypes.Criticality `protobuf:"varint,2,opt,name=criticality,json=&criticality,proto3,enum=xnap.v1.Criticality" json:"criticality,omitempty" aper:"valueLB:0,valueUB:2,"`
	// @inject_tag: aper:"canonicalOrder,"
	Value *SnodeModificationRefuseIEsValue `protobuf:"bytes,3,opt,name=value,json=&Value,proto3" json:"value,omitempty" aper:"canonicalOrder,"`
}

func (x *SnodeModificationRefuseIEs) Reset() {
	*x = SnodeModificationRefuseIEs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[132]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SnodeModificationRefuseIEs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SnodeModificationRefuseIEs) ProtoMessage() {}

func (x *SnodeModificationRefuseIEs) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[132]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SnodeModificationRefuseIEs.ProtoReflect.Descriptor instead.
func (*SnodeModificationRefuseIEs) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_pdu_contents_proto_rawDescGZIP(), []int{132}
}

func (x *SnodeModificationRefuseIEs) GetId() *xnap_commondatatypes.ProtocolIeID {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *SnodeModificationRefuseIEs) GetCriticality() xnap_commondatatypes.Criticality {
	if x != nil {
		return x.Criticality
	}
	return xnap_commondatatypes.Criticality(0)
}

func (x *SnodeModificationRefuseIEs) GetValue() *SnodeModificationRefuseIEsValue {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:1853
// @inject_tag: aper:"valueExt"
// {SNodeModificationRefuse}
type SnodeModificationRefuse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProtocolIes []*SnodeModificationRefuseIEs `protobuf:"bytes,1,rep,name=protocol_ies,json=protocolIEs,proto3" json:"protocol_ies,omitempty"`
}

func (x *SnodeModificationRefuse) Reset() {
	*x = SnodeModificationRefuse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[133]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SnodeModificationRefuse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SnodeModificationRefuse) ProtoMessage() {}

func (x *SnodeModificationRefuse) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[133]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SnodeModificationRefuse.ProtoReflect.Descriptor instead.
func (*SnodeModificationRefuse) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_pdu_contents_proto_rawDescGZIP(), []int{133}
}

func (x *SnodeModificationRefuse) GetProtocolIes() []*SnodeModificationRefuseIEs {
	if x != nil {
		return x.ProtocolIes
	}
	return nil
}

// value set from xnap_v1.asn1:1877
// {SNodeReleaseRequest-IEs&Value}
type SnodeReleaseRequestIEsValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// value set translated as choice from xnap_v1.asn1:1877
	//
	// Types that are assignable to SnodeReleaseRequestIes:
	//	*SnodeReleaseRequestIEsValue_IdMNgRannodeUexnApid
	//	*SnodeReleaseRequestIEsValue_IdSNgRannodeUexnApid
	//	*SnodeReleaseRequestIEsValue_IdCause
	//	*SnodeReleaseRequestIEsValue_IdPdusessionToBeReleasedRelReq
	//	*SnodeReleaseRequestIEsValue_IdUecontextKeptIndicator
	//	*SnodeReleaseRequestIEsValue_IdMnToSnContainer
	//	*SnodeReleaseRequestIEsValue_IdDrbsTransferredToMn
	SnodeReleaseRequestIes isSnodeReleaseRequestIEsValue_SnodeReleaseRequestIes `protobuf_oneof:"snode_release_request_ies"`
}

func (x *SnodeReleaseRequestIEsValue) Reset() {
	*x = SnodeReleaseRequestIEsValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[134]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SnodeReleaseRequestIEsValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SnodeReleaseRequestIEsValue) ProtoMessage() {}

func (x *SnodeReleaseRequestIEsValue) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[134]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SnodeReleaseRequestIEsValue.ProtoReflect.Descriptor instead.
func (*SnodeReleaseRequestIEsValue) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_pdu_contents_proto_rawDescGZIP(), []int{134}
}

func (m *SnodeReleaseRequestIEsValue) GetSnodeReleaseRequestIes() isSnodeReleaseRequestIEsValue_SnodeReleaseRequestIes {
	if m != nil {
		return m.SnodeReleaseRequestIes
	}
	return nil
}

func (x *SnodeReleaseRequestIEsValue) GetIdMNgRannodeUexnApid() *xnap_ies.NgRAnnodeUexnApid {
	if x, ok := x.GetSnodeReleaseRequestIes().(*SnodeReleaseRequestIEsValue_IdMNgRannodeUexnApid); ok {
		return x.IdMNgRannodeUexnApid
	}
	return nil
}

func (x *SnodeReleaseRequestIEsValue) GetIdSNgRannodeUexnApid() *xnap_ies.NgRAnnodeUexnApid {
	if x, ok := x.GetSnodeReleaseRequestIes().(*SnodeReleaseRequestIEsValue_IdSNgRannodeUexnApid); ok {
		return x.IdSNgRannodeUexnApid
	}
	return nil
}

func (x *SnodeReleaseRequestIEsValue) GetIdCause() *xnap_ies.Cause {
	if x, ok := x.GetSnodeReleaseRequestIes().(*SnodeReleaseRequestIEsValue_IdCause); ok {
		return x.IdCause
	}
	return nil
}

func (x *SnodeReleaseRequestIEsValue) GetIdPdusessionToBeReleasedRelReq() *xnap_ies.PdusessionListwithCause {
	if x, ok := x.GetSnodeReleaseRequestIes().(*SnodeReleaseRequestIEsValue_IdPdusessionToBeReleasedRelReq); ok {
		return x.IdPdusessionToBeReleasedRelReq
	}
	return nil
}

func (x *SnodeReleaseRequestIEsValue) GetIdUecontextKeptIndicator() xnap_ies.UecontextKeptIndicator {
	if x, ok := x.GetSnodeReleaseRequestIes().(*SnodeReleaseRequestIEsValue_IdUecontextKeptIndicator); ok {
		return x.IdUecontextKeptIndicator
	}
	return xnap_ies.UecontextKeptIndicator(0)
}

func (x *SnodeReleaseRequestIEsValue) GetIdMnToSnContainer() string {
	if x, ok := x.GetSnodeReleaseRequestIes().(*SnodeReleaseRequestIEsValue_IdMnToSnContainer); ok {
		return x.IdMnToSnContainer
	}
	return ""
}

func (x *SnodeReleaseRequestIEsValue) GetIdDrbsTransferredToMn() *xnap_ies.DrbList {
	if x, ok := x.GetSnodeReleaseRequestIes().(*SnodeReleaseRequestIEsValue_IdDrbsTransferredToMn); ok {
		return x.IdDrbsTransferredToMn
	}
	return nil
}

type isSnodeReleaseRequestIEsValue_SnodeReleaseRequestIes interface {
	isSnodeReleaseRequestIEsValue_SnodeReleaseRequestIes()
}

type SnodeReleaseRequestIEsValue_IdMNgRannodeUexnApid struct {
	// @inject_tag: aper:"choiceIdx:1,"
	IdMNgRannodeUexnApid *xnap_ies.NgRAnnodeUexnApid `protobuf:"bytes,1,opt,name=id_m_ng_rannode_uexn_apid,json=id-M-NG-RANnodeUEXnAPID,proto3,oneof" aper:"choiceIdx:1,"`
}

type SnodeReleaseRequestIEsValue_IdSNgRannodeUexnApid struct {
	// @inject_tag: aper:"choiceIdx:2,"
	IdSNgRannodeUexnApid *xnap_ies.NgRAnnodeUexnApid `protobuf:"bytes,2,opt,name=id_s_ng_rannode_uexn_apid,json=id-S-NG-RANnodeUEXnAPID,proto3,oneof" aper:"choiceIdx:2,"`
}

type SnodeReleaseRequestIEsValue_IdCause struct {
	// @inject_tag: aper:"choiceIdx:3,"
	IdCause *xnap_ies.Cause `protobuf:"bytes,3,opt,name=id_cause,json=id-Cause,proto3,oneof" aper:"choiceIdx:3,"`
}

type SnodeReleaseRequestIEsValue_IdPdusessionToBeReleasedRelReq struct {
	// @inject_tag: aper:"choiceIdx:4,"
	IdPdusessionToBeReleasedRelReq *xnap_ies.PdusessionListwithCause `protobuf:"bytes,4,opt,name=id_pdusession_to_be_released_rel_req,json=id-PDUSessionToBeReleased-RelReq,proto3,oneof" aper:"choiceIdx:4,"`
}

type SnodeReleaseRequestIEsValue_IdUecontextKeptIndicator struct {
	// @inject_tag: aper:"choiceIdx:5,valueExt,valueLB:0,valueUB:0,"
	IdUecontextKeptIndicator xnap_ies.UecontextKeptIndicator `protobuf:"varint,5,opt,name=id_uecontext_kept_indicator,json=id-UEContextKeptIndicator,proto3,enum=xnap.v1.UecontextKeptIndicator,oneof" aper:"choiceIdx:5,valueExt,valueLB:0,valueUB:0,"`
}

type SnodeReleaseRequestIEsValue_IdMnToSnContainer struct {
	// @inject_tag: aper:"choiceIdx:6,"
	IdMnToSnContainer string `protobuf:"bytes,6,opt,name=id_mn_to_sn_container,json=id-MN-to-SN-Container,proto3,oneof" aper:"choiceIdx:6,"`
}

type SnodeReleaseRequestIEsValue_IdDrbsTransferredToMn struct {
	// @inject_tag: aper:"choiceIdx:7,"
	IdDrbsTransferredToMn *xnap_ies.DrbList `protobuf:"bytes,7,opt,name=id_drbs_transferred_to_mn,json=id-DRBs-transferred-to-MN,proto3,oneof" aper:"choiceIdx:7,"`
}

func (*SnodeReleaseRequestIEsValue_IdMNgRannodeUexnApid) isSnodeReleaseRequestIEsValue_SnodeReleaseRequestIes() {
}

func (*SnodeReleaseRequestIEsValue_IdSNgRannodeUexnApid) isSnodeReleaseRequestIEsValue_SnodeReleaseRequestIes() {
}

func (*SnodeReleaseRequestIEsValue_IdCause) isSnodeReleaseRequestIEsValue_SnodeReleaseRequestIes() {}

func (*SnodeReleaseRequestIEsValue_IdPdusessionToBeReleasedRelReq) isSnodeReleaseRequestIEsValue_SnodeReleaseRequestIes() {
}

func (*SnodeReleaseRequestIEsValue_IdUecontextKeptIndicator) isSnodeReleaseRequestIEsValue_SnodeReleaseRequestIes() {
}

func (*SnodeReleaseRequestIEsValue_IdMnToSnContainer) isSnodeReleaseRequestIEsValue_SnodeReleaseRequestIes() {
}

func (*SnodeReleaseRequestIEsValue_IdDrbsTransferredToMn) isSnodeReleaseRequestIEsValue_SnodeReleaseRequestIes() {
}

// concrete instance(s) of class XNAP-PROTOCOL-IES from xnap_v1.asn1:1877
// @inject_tag: aper:"valueExt"
// {SNodeReleaseRequest-IEs}
type SnodeReleaseRequestIEs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"unique,"
	Id *xnap_commondatatypes.ProtocolIeID `protobuf:"bytes,1,opt,name=id,json=&id,proto3" json:"id,omitempty" aper:"unique,"`
	// @inject_tag: aper:"valueLB:0,valueUB:2,"
	Criticality xnap_commondatatypes.Criticality `protobuf:"varint,2,opt,name=criticality,json=&criticality,proto3,enum=xnap.v1.Criticality" json:"criticality,omitempty" aper:"valueLB:0,valueUB:2,"`
	// @inject_tag: aper:"canonicalOrder,"
	Value *SnodeReleaseRequestIEsValue `protobuf:"bytes,3,opt,name=value,json=&Value,proto3" json:"value,omitempty" aper:"canonicalOrder,"`
}

func (x *SnodeReleaseRequestIEs) Reset() {
	*x = SnodeReleaseRequestIEs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[135]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SnodeReleaseRequestIEs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SnodeReleaseRequestIEs) ProtoMessage() {}

func (x *SnodeReleaseRequestIEs) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[135]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SnodeReleaseRequestIEs.ProtoReflect.Descriptor instead.
func (*SnodeReleaseRequestIEs) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_pdu_contents_proto_rawDescGZIP(), []int{135}
}

func (x *SnodeReleaseRequestIEs) GetId() *xnap_commondatatypes.ProtocolIeID {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *SnodeReleaseRequestIEs) GetCriticality() xnap_commondatatypes.Criticality {
	if x != nil {
		return x.Criticality
	}
	return xnap_commondatatypes.Criticality(0)
}

func (x *SnodeReleaseRequestIEs) GetValue() *SnodeReleaseRequestIEsValue {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:1873
// @inject_tag: aper:"valueExt"
// {SNodeReleaseRequest}
type SnodeReleaseRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProtocolIes []*SnodeReleaseRequestIEs `protobuf:"bytes,1,rep,name=protocol_ies,json=protocolIEs,proto3" json:"protocol_ies,omitempty"`
}

func (x *SnodeReleaseRequest) Reset() {
	*x = SnodeReleaseRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[136]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SnodeReleaseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SnodeReleaseRequest) ProtoMessage() {}

func (x *SnodeReleaseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[136]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SnodeReleaseRequest.ProtoReflect.Descriptor instead.
func (*SnodeReleaseRequest) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_pdu_contents_proto_rawDescGZIP(), []int{136}
}

func (x *SnodeReleaseRequest) GetProtocolIes() []*SnodeReleaseRequestIEs {
	if x != nil {
		return x.ProtocolIes
	}
	return nil
}

// value set from xnap_v1.asn1:1899
// {SNodeReleaseRequestAcknowledge-IEs&Value}
type SnodeReleaseRequestAcknowledgeIEsValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// value set translated as choice from xnap_v1.asn1:1899
	//
	// Types that are assignable to SnodeReleaseRequestAcknowledgeIes:
	//	*SnodeReleaseRequestAcknowledgeIEsValue_IdMNgRannodeUexnApid
	//	*SnodeReleaseRequestAcknowledgeIEsValue_IdSNgRannodeUexnApid
	//	*SnodeReleaseRequestAcknowledgeIEsValue_IdPdusessionToBeReleasedRelReqAck
	//	*SnodeReleaseRequestAcknowledgeIEsValue_IdCriticalityDiagnostics
	SnodeReleaseRequestAcknowledgeIes isSnodeReleaseRequestAcknowledgeIEsValue_SnodeReleaseRequestAcknowledgeIes `protobuf_oneof:"snode_release_request_acknowledge_ies"`
}

func (x *SnodeReleaseRequestAcknowledgeIEsValue) Reset() {
	*x = SnodeReleaseRequestAcknowledgeIEsValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[137]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SnodeReleaseRequestAcknowledgeIEsValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SnodeReleaseRequestAcknowledgeIEsValue) ProtoMessage() {}

func (x *SnodeReleaseRequestAcknowledgeIEsValue) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[137]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SnodeReleaseRequestAcknowledgeIEsValue.ProtoReflect.Descriptor instead.
func (*SnodeReleaseRequestAcknowledgeIEsValue) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_pdu_contents_proto_rawDescGZIP(), []int{137}
}

func (m *SnodeReleaseRequestAcknowledgeIEsValue) GetSnodeReleaseRequestAcknowledgeIes() isSnodeReleaseRequestAcknowledgeIEsValue_SnodeReleaseRequestAcknowledgeIes {
	if m != nil {
		return m.SnodeReleaseRequestAcknowledgeIes
	}
	return nil
}

func (x *SnodeReleaseRequestAcknowledgeIEsValue) GetIdMNgRannodeUexnApid() *xnap_ies.NgRAnnodeUexnApid {
	if x, ok := x.GetSnodeReleaseRequestAcknowledgeIes().(*SnodeReleaseRequestAcknowledgeIEsValue_IdMNgRannodeUexnApid); ok {
		return x.IdMNgRannodeUexnApid
	}
	return nil
}

func (x *SnodeReleaseRequestAcknowledgeIEsValue) GetIdSNgRannodeUexnApid() *xnap_ies.NgRAnnodeUexnApid {
	if x, ok := x.GetSnodeReleaseRequestAcknowledgeIes().(*SnodeReleaseRequestAcknowledgeIEsValue_IdSNgRannodeUexnApid); ok {
		return x.IdSNgRannodeUexnApid
	}
	return nil
}

func (x *SnodeReleaseRequestAcknowledgeIEsValue) GetIdPdusessionToBeReleasedRelReqAck() *PdusessionToBeReleasedListRelReqAck {
	if x, ok := x.GetSnodeReleaseRequestAcknowledgeIes().(*SnodeReleaseRequestAcknowledgeIEsValue_IdPdusessionToBeReleasedRelReqAck); ok {
		return x.IdPdusessionToBeReleasedRelReqAck
	}
	return nil
}

func (x *SnodeReleaseRequestAcknowledgeIEsValue) GetIdCriticalityDiagnostics() *xnap_ies.CriticalityDiagnostics {
	if x, ok := x.GetSnodeReleaseRequestAcknowledgeIes().(*SnodeReleaseRequestAcknowledgeIEsValue_IdCriticalityDiagnostics); ok {
		return x.IdCriticalityDiagnostics
	}
	return nil
}

type isSnodeReleaseRequestAcknowledgeIEsValue_SnodeReleaseRequestAcknowledgeIes interface {
	isSnodeReleaseRequestAcknowledgeIEsValue_SnodeReleaseRequestAcknowledgeIes()
}

type SnodeReleaseRequestAcknowledgeIEsValue_IdMNgRannodeUexnApid struct {
	// @inject_tag: aper:"choiceIdx:1,"
	IdMNgRannodeUexnApid *xnap_ies.NgRAnnodeUexnApid `protobuf:"bytes,1,opt,name=id_m_ng_rannode_uexn_apid,json=id-M-NG-RANnodeUEXnAPID,proto3,oneof" aper:"choiceIdx:1,"`
}

type SnodeReleaseRequestAcknowledgeIEsValue_IdSNgRannodeUexnApid struct {
	// @inject_tag: aper:"choiceIdx:2,"
	IdSNgRannodeUexnApid *xnap_ies.NgRAnnodeUexnApid `protobuf:"bytes,2,opt,name=id_s_ng_rannode_uexn_apid,json=id-S-NG-RANnodeUEXnAPID,proto3,oneof" aper:"choiceIdx:2,"`
}

type SnodeReleaseRequestAcknowledgeIEsValue_IdPdusessionToBeReleasedRelReqAck struct {
	// @inject_tag: aper:"choiceIdx:3,valueExt,"
	IdPdusessionToBeReleasedRelReqAck *PdusessionToBeReleasedListRelReqAck `protobuf:"bytes,3,opt,name=id_pdusession_to_be_released_rel_req_ack,json=id-PDUSessionToBeReleased-RelReqAck,proto3,oneof" aper:"choiceIdx:3,valueExt,"`
}

type SnodeReleaseRequestAcknowledgeIEsValue_IdCriticalityDiagnostics struct {
	// @inject_tag: aper:"choiceIdx:4,valueExt,"
	IdCriticalityDiagnostics *xnap_ies.CriticalityDiagnostics `protobuf:"bytes,4,opt,name=id_criticality_diagnostics,json=id-CriticalityDiagnostics,proto3,oneof" aper:"choiceIdx:4,valueExt,"`
}

func (*SnodeReleaseRequestAcknowledgeIEsValue_IdMNgRannodeUexnApid) isSnodeReleaseRequestAcknowledgeIEsValue_SnodeReleaseRequestAcknowledgeIes() {
}

func (*SnodeReleaseRequestAcknowledgeIEsValue_IdSNgRannodeUexnApid) isSnodeReleaseRequestAcknowledgeIEsValue_SnodeReleaseRequestAcknowledgeIes() {
}

func (*SnodeReleaseRequestAcknowledgeIEsValue_IdPdusessionToBeReleasedRelReqAck) isSnodeReleaseRequestAcknowledgeIEsValue_SnodeReleaseRequestAcknowledgeIes() {
}

func (*SnodeReleaseRequestAcknowledgeIEsValue_IdCriticalityDiagnostics) isSnodeReleaseRequestAcknowledgeIEsValue_SnodeReleaseRequestAcknowledgeIes() {
}

// concrete instance(s) of class XNAP-PROTOCOL-IES from xnap_v1.asn1:1899
// @inject_tag: aper:"valueExt"
// {SNodeReleaseRequestAcknowledge-IEs}
type SnodeReleaseRequestAcknowledgeIEs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"unique,"
	Id *xnap_commondatatypes.ProtocolIeID `protobuf:"bytes,1,opt,name=id,json=&id,proto3" json:"id,omitempty" aper:"unique,"`
	// @inject_tag: aper:"valueLB:0,valueUB:2,"
	Criticality xnap_commondatatypes.Criticality `protobuf:"varint,2,opt,name=criticality,json=&criticality,proto3,enum=xnap.v1.Criticality" json:"criticality,omitempty" aper:"valueLB:0,valueUB:2,"`
	// @inject_tag: aper:"canonicalOrder,"
	Value *SnodeReleaseRequestAcknowledgeIEsValue `protobuf:"bytes,3,opt,name=value,json=&Value,proto3" json:"value,omitempty" aper:"canonicalOrder,"`
}

func (x *SnodeReleaseRequestAcknowledgeIEs) Reset() {
	*x = SnodeReleaseRequestAcknowledgeIEs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[138]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SnodeReleaseRequestAcknowledgeIEs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SnodeReleaseRequestAcknowledgeIEs) ProtoMessage() {}

func (x *SnodeReleaseRequestAcknowledgeIEs) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[138]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SnodeReleaseRequestAcknowledgeIEs.ProtoReflect.Descriptor instead.
func (*SnodeReleaseRequestAcknowledgeIEs) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_pdu_contents_proto_rawDescGZIP(), []int{138}
}

func (x *SnodeReleaseRequestAcknowledgeIEs) GetId() *xnap_commondatatypes.ProtocolIeID {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *SnodeReleaseRequestAcknowledgeIEs) GetCriticality() xnap_commondatatypes.Criticality {
	if x != nil {
		return x.Criticality
	}
	return xnap_commondatatypes.Criticality(0)
}

func (x *SnodeReleaseRequestAcknowledgeIEs) GetValue() *SnodeReleaseRequestAcknowledgeIEsValue {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:1895
// @inject_tag: aper:"valueExt"
// {SNodeReleaseRequestAcknowledge}
type SnodeReleaseRequestAcknowledge struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProtocolIes []*SnodeReleaseRequestAcknowledgeIEs `protobuf:"bytes,1,rep,name=protocol_ies,json=protocolIEs,proto3" json:"protocol_ies,omitempty"`
}

func (x *SnodeReleaseRequestAcknowledge) Reset() {
	*x = SnodeReleaseRequestAcknowledge{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[139]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SnodeReleaseRequestAcknowledge) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SnodeReleaseRequestAcknowledge) ProtoMessage() {}

func (x *SnodeReleaseRequestAcknowledge) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[139]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SnodeReleaseRequestAcknowledge.ProtoReflect.Descriptor instead.
func (*SnodeReleaseRequestAcknowledge) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_pdu_contents_proto_rawDescGZIP(), []int{139}
}

func (x *SnodeReleaseRequestAcknowledge) GetProtocolIes() []*SnodeReleaseRequestAcknowledgeIEs {
	if x != nil {
		return x.ProtocolIes
	}
	return nil
}

// value set from xnap_v1.asn1:1913
// {PDUSessionToBeReleasedList-RelReqAck-ExtIEs}
type PdusessionToBeReleasedListRelReqAckExtIes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *emptypb.Empty `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *PdusessionToBeReleasedListRelReqAckExtIes) Reset() {
	*x = PdusessionToBeReleasedListRelReqAckExtIes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[140]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PdusessionToBeReleasedListRelReqAckExtIes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PdusessionToBeReleasedListRelReqAckExtIes) ProtoMessage() {}

func (x *PdusessionToBeReleasedListRelReqAckExtIes) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[140]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PdusessionToBeReleasedListRelReqAckExtIes.ProtoReflect.Descriptor instead.
func (*PdusessionToBeReleasedListRelReqAckExtIes) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_pdu_contents_proto_rawDescGZIP(), []int{140}
}

func (x *PdusessionToBeReleasedListRelReqAckExtIes) GetValue() *emptypb.Empty {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:1908
// @inject_tag: aper:"valueExt"
// {PDUSessionToBeReleasedList-RelReqAck}
type PdusessionToBeReleasedListRelReqAck struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"optional,"
	PduSessionsToBeReleasedListSnterminated *xnap_ies.PdusessionListwithDataForwardingRequest `protobuf:"bytes,1,opt,name=pdu_sessions_to_be_released_list_snterminated,json=pduSessionsToBeReleasedList-SNterminated,proto3,oneof" json:"pdu_sessions_to_be_released_list_snterminated,omitempty" aper:"optional,"`
	// @inject_tag: aper:"optional,sizeLB:1,"
	IEExtensions []*PdusessionToBeReleasedListRelReqAckExtIes `protobuf:"bytes,2,rep,name=i_e_extensions,json=iE-Extensions,proto3" json:"i_e_extensions,omitempty" aper:"optional,sizeLB:1,"`
}

func (x *PdusessionToBeReleasedListRelReqAck) Reset() {
	*x = PdusessionToBeReleasedListRelReqAck{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[141]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PdusessionToBeReleasedListRelReqAck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PdusessionToBeReleasedListRelReqAck) ProtoMessage() {}

func (x *PdusessionToBeReleasedListRelReqAck) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[141]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PdusessionToBeReleasedListRelReqAck.ProtoReflect.Descriptor instead.
func (*PdusessionToBeReleasedListRelReqAck) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_pdu_contents_proto_rawDescGZIP(), []int{141}
}

func (x *PdusessionToBeReleasedListRelReqAck) GetPduSessionsToBeReleasedListSnterminated() *xnap_ies.PdusessionListwithDataForwardingRequest {
	if x != nil {
		return x.PduSessionsToBeReleasedListSnterminated
	}
	return nil
}

func (x *PdusessionToBeReleasedListRelReqAck) GetIEExtensions() []*PdusessionToBeReleasedListRelReqAckExtIes {
	if x != nil {
		return x.IEExtensions
	}
	return nil
}

// value set from xnap_v1.asn1:1928
// {SNodeReleaseReject-IEs&Value}
type SnodeReleaseRejectIEsValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// value set translated as choice from xnap_v1.asn1:1928
	//
	// Types that are assignable to SnodeReleaseRejectIes:
	//	*SnodeReleaseRejectIEsValue_IdMNgRannodeUexnApid
	//	*SnodeReleaseRejectIEsValue_IdSNgRannodeUexnApid
	//	*SnodeReleaseRejectIEsValue_IdCause
	//	*SnodeReleaseRejectIEsValue_IdCriticalityDiagnostics
	SnodeReleaseRejectIes isSnodeReleaseRejectIEsValue_SnodeReleaseRejectIes `protobuf_oneof:"snode_release_reject_ies"`
}

func (x *SnodeReleaseRejectIEsValue) Reset() {
	*x = SnodeReleaseRejectIEsValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[142]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SnodeReleaseRejectIEsValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SnodeReleaseRejectIEsValue) ProtoMessage() {}

func (x *SnodeReleaseRejectIEsValue) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[142]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SnodeReleaseRejectIEsValue.ProtoReflect.Descriptor instead.
func (*SnodeReleaseRejectIEsValue) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_pdu_contents_proto_rawDescGZIP(), []int{142}
}

func (m *SnodeReleaseRejectIEsValue) GetSnodeReleaseRejectIes() isSnodeReleaseRejectIEsValue_SnodeReleaseRejectIes {
	if m != nil {
		return m.SnodeReleaseRejectIes
	}
	return nil
}

func (x *SnodeReleaseRejectIEsValue) GetIdMNgRannodeUexnApid() *xnap_ies.NgRAnnodeUexnApid {
	if x, ok := x.GetSnodeReleaseRejectIes().(*SnodeReleaseRejectIEsValue_IdMNgRannodeUexnApid); ok {
		return x.IdMNgRannodeUexnApid
	}
	return nil
}

func (x *SnodeReleaseRejectIEsValue) GetIdSNgRannodeUexnApid() *xnap_ies.NgRAnnodeUexnApid {
	if x, ok := x.GetSnodeReleaseRejectIes().(*SnodeReleaseRejectIEsValue_IdSNgRannodeUexnApid); ok {
		return x.IdSNgRannodeUexnApid
	}
	return nil
}

func (x *SnodeReleaseRejectIEsValue) GetIdCause() *xnap_ies.Cause {
	if x, ok := x.GetSnodeReleaseRejectIes().(*SnodeReleaseRejectIEsValue_IdCause); ok {
		return x.IdCause
	}
	return nil
}

func (x *SnodeReleaseRejectIEsValue) GetIdCriticalityDiagnostics() *xnap_ies.CriticalityDiagnostics {
	if x, ok := x.GetSnodeReleaseRejectIes().(*SnodeReleaseRejectIEsValue_IdCriticalityDiagnostics); ok {
		return x.IdCriticalityDiagnostics
	}
	return nil
}

type isSnodeReleaseRejectIEsValue_SnodeReleaseRejectIes interface {
	isSnodeReleaseRejectIEsValue_SnodeReleaseRejectIes()
}

type SnodeReleaseRejectIEsValue_IdMNgRannodeUexnApid struct {
	// @inject_tag: aper:"choiceIdx:1,"
	IdMNgRannodeUexnApid *xnap_ies.NgRAnnodeUexnApid `protobuf:"bytes,1,opt,name=id_m_ng_rannode_uexn_apid,json=id-M-NG-RANnodeUEXnAPID,proto3,oneof" aper:"choiceIdx:1,"`
}

type SnodeReleaseRejectIEsValue_IdSNgRannodeUexnApid struct {
	// @inject_tag: aper:"choiceIdx:2,"
	IdSNgRannodeUexnApid *xnap_ies.NgRAnnodeUexnApid `protobuf:"bytes,2,opt,name=id_s_ng_rannode_uexn_apid,json=id-S-NG-RANnodeUEXnAPID,proto3,oneof" aper:"choiceIdx:2,"`
}

type SnodeReleaseRejectIEsValue_IdCause struct {
	// @inject_tag: aper:"choiceIdx:3,"
	IdCause *xnap_ies.Cause `protobuf:"bytes,3,opt,name=id_cause,json=id-Cause,proto3,oneof" aper:"choiceIdx:3,"`
}

type SnodeReleaseRejectIEsValue_IdCriticalityDiagnostics struct {
	// @inject_tag: aper:"choiceIdx:4,valueExt,"
	IdCriticalityDiagnostics *xnap_ies.CriticalityDiagnostics `protobuf:"bytes,4,opt,name=id_criticality_diagnostics,json=id-CriticalityDiagnostics,proto3,oneof" aper:"choiceIdx:4,valueExt,"`
}

func (*SnodeReleaseRejectIEsValue_IdMNgRannodeUexnApid) isSnodeReleaseRejectIEsValue_SnodeReleaseRejectIes() {
}

func (*SnodeReleaseRejectIEsValue_IdSNgRannodeUexnApid) isSnodeReleaseRejectIEsValue_SnodeReleaseRejectIes() {
}

func (*SnodeReleaseRejectIEsValue_IdCause) isSnodeReleaseRejectIEsValue_SnodeReleaseRejectIes() {}

func (*SnodeReleaseRejectIEsValue_IdCriticalityDiagnostics) isSnodeReleaseRejectIEsValue_SnodeReleaseRejectIes() {
}

// concrete instance(s) of class XNAP-PROTOCOL-IES from xnap_v1.asn1:1928
// @inject_tag: aper:"valueExt"
// {SNodeReleaseReject-IEs}
type SnodeReleaseRejectIEs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"unique,"
	Id *xnap_commondatatypes.ProtocolIeID `protobuf:"bytes,1,opt,name=id,json=&id,proto3" json:"id,omitempty" aper:"unique,"`
	// @inject_tag: aper:"valueLB:0,valueUB:2,"
	Criticality xnap_commondatatypes.Criticality `protobuf:"varint,2,opt,name=criticality,json=&criticality,proto3,enum=xnap.v1.Criticality" json:"criticality,omitempty" aper:"valueLB:0,valueUB:2,"`
	// @inject_tag: aper:"canonicalOrder,"
	Value *SnodeReleaseRejectIEsValue `protobuf:"bytes,3,opt,name=value,json=&Value,proto3" json:"value,omitempty" aper:"canonicalOrder,"`
}

func (x *SnodeReleaseRejectIEs) Reset() {
	*x = SnodeReleaseRejectIEs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[143]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SnodeReleaseRejectIEs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SnodeReleaseRejectIEs) ProtoMessage() {}

func (x *SnodeReleaseRejectIEs) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[143]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SnodeReleaseRejectIEs.ProtoReflect.Descriptor instead.
func (*SnodeReleaseRejectIEs) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_pdu_contents_proto_rawDescGZIP(), []int{143}
}

func (x *SnodeReleaseRejectIEs) GetId() *xnap_commondatatypes.ProtocolIeID {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *SnodeReleaseRejectIEs) GetCriticality() xnap_commondatatypes.Criticality {
	if x != nil {
		return x.Criticality
	}
	return xnap_commondatatypes.Criticality(0)
}

func (x *SnodeReleaseRejectIEs) GetValue() *SnodeReleaseRejectIEsValue {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:1924
// @inject_tag: aper:"valueExt"
// {SNodeReleaseReject}
type SnodeReleaseReject struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProtocolIes []*SnodeReleaseRejectIEs `protobuf:"bytes,1,rep,name=protocol_ies,json=protocolIEs,proto3" json:"protocol_ies,omitempty"`
}

func (x *SnodeReleaseReject) Reset() {
	*x = SnodeReleaseReject{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[144]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SnodeReleaseReject) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SnodeReleaseReject) ProtoMessage() {}

func (x *SnodeReleaseReject) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[144]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SnodeReleaseReject.ProtoReflect.Descriptor instead.
func (*SnodeReleaseReject) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_pdu_contents_proto_rawDescGZIP(), []int{144}
}

func (x *SnodeReleaseReject) GetProtocolIes() []*SnodeReleaseRejectIEs {
	if x != nil {
		return x.ProtocolIes
	}
	return nil
}

// value set from xnap_v1.asn1:1947
// {SNodeReleaseRequired-IEs&Value}
type SnodeReleaseRequiredIEsValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// value set translated as choice from xnap_v1.asn1:1947
	//
	// Types that are assignable to SnodeReleaseRequiredIes:
	//	*SnodeReleaseRequiredIEsValue_IdMNgRannodeUexnApid
	//	*SnodeReleaseRequiredIEsValue_IdSNgRannodeUexnApid
	//	*SnodeReleaseRequiredIEsValue_IdPdusessionToBeReleasedListRelRqd
	//	*SnodeReleaseRequiredIEsValue_IdCause
	//	*SnodeReleaseRequiredIEsValue_IdSnToMnContainer
	SnodeReleaseRequiredIes isSnodeReleaseRequiredIEsValue_SnodeReleaseRequiredIes `protobuf_oneof:"snode_release_required_ies"`
}

func (x *SnodeReleaseRequiredIEsValue) Reset() {
	*x = SnodeReleaseRequiredIEsValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[145]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SnodeReleaseRequiredIEsValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SnodeReleaseRequiredIEsValue) ProtoMessage() {}

func (x *SnodeReleaseRequiredIEsValue) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[145]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SnodeReleaseRequiredIEsValue.ProtoReflect.Descriptor instead.
func (*SnodeReleaseRequiredIEsValue) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_pdu_contents_proto_rawDescGZIP(), []int{145}
}

func (m *SnodeReleaseRequiredIEsValue) GetSnodeReleaseRequiredIes() isSnodeReleaseRequiredIEsValue_SnodeReleaseRequiredIes {
	if m != nil {
		return m.SnodeReleaseRequiredIes
	}
	return nil
}

func (x *SnodeReleaseRequiredIEsValue) GetIdMNgRannodeUexnApid() *xnap_ies.NgRAnnodeUexnApid {
	if x, ok := x.GetSnodeReleaseRequiredIes().(*SnodeReleaseRequiredIEsValue_IdMNgRannodeUexnApid); ok {
		return x.IdMNgRannodeUexnApid
	}
	return nil
}

func (x *SnodeReleaseRequiredIEsValue) GetIdSNgRannodeUexnApid() *xnap_ies.NgRAnnodeUexnApid {
	if x, ok := x.GetSnodeReleaseRequiredIes().(*SnodeReleaseRequiredIEsValue_IdSNgRannodeUexnApid); ok {
		return x.IdSNgRannodeUexnApid
	}
	return nil
}

func (x *SnodeReleaseRequiredIEsValue) GetIdPdusessionToBeReleasedListRelRqd() *PdusessionToBeReleasedListRelRqd {
	if x, ok := x.GetSnodeReleaseRequiredIes().(*SnodeReleaseRequiredIEsValue_IdPdusessionToBeReleasedListRelRqd); ok {
		return x.IdPdusessionToBeReleasedListRelRqd
	}
	return nil
}

func (x *SnodeReleaseRequiredIEsValue) GetIdCause() *xnap_ies.Cause {
	if x, ok := x.GetSnodeReleaseRequiredIes().(*SnodeReleaseRequiredIEsValue_IdCause); ok {
		return x.IdCause
	}
	return nil
}

func (x *SnodeReleaseRequiredIEsValue) GetIdSnToMnContainer() string {
	if x, ok := x.GetSnodeReleaseRequiredIes().(*SnodeReleaseRequiredIEsValue_IdSnToMnContainer); ok {
		return x.IdSnToMnContainer
	}
	return ""
}

type isSnodeReleaseRequiredIEsValue_SnodeReleaseRequiredIes interface {
	isSnodeReleaseRequiredIEsValue_SnodeReleaseRequiredIes()
}

type SnodeReleaseRequiredIEsValue_IdMNgRannodeUexnApid struct {
	// @inject_tag: aper:"choiceIdx:1,"
	IdMNgRannodeUexnApid *xnap_ies.NgRAnnodeUexnApid `protobuf:"bytes,1,opt,name=id_m_ng_rannode_uexn_apid,json=id-M-NG-RANnodeUEXnAPID,proto3,oneof" aper:"choiceIdx:1,"`
}

type SnodeReleaseRequiredIEsValue_IdSNgRannodeUexnApid struct {
	// @inject_tag: aper:"choiceIdx:2,"
	IdSNgRannodeUexnApid *xnap_ies.NgRAnnodeUexnApid `protobuf:"bytes,2,opt,name=id_s_ng_rannode_uexn_apid,json=id-S-NG-RANnodeUEXnAPID,proto3,oneof" aper:"choiceIdx:2,"`
}

type SnodeReleaseRequiredIEsValue_IdPdusessionToBeReleasedListRelRqd struct {
	// @inject_tag: aper:"choiceIdx:3,valueExt,"
	IdPdusessionToBeReleasedListRelRqd *PdusessionToBeReleasedListRelRqd `protobuf:"bytes,3,opt,name=id_pdusession_to_be_released_list_rel_rqd,json=id-PDUSessionToBeReleasedList-RelRqd,proto3,oneof" aper:"choiceIdx:3,valueExt,"`
}

type SnodeReleaseRequiredIEsValue_IdCause struct {
	// @inject_tag: aper:"choiceIdx:4,"
	IdCause *xnap_ies.Cause `protobuf:"bytes,4,opt,name=id_cause,json=id-Cause,proto3,oneof" aper:"choiceIdx:4,"`
}

type SnodeReleaseRequiredIEsValue_IdSnToMnContainer struct {
	// @inject_tag: aper:"choiceIdx:5,"
	IdSnToMnContainer string `protobuf:"bytes,5,opt,name=id_sn_to_mn_container,json=id-SN-to-MN-Container,proto3,oneof" aper:"choiceIdx:5,"`
}

func (*SnodeReleaseRequiredIEsValue_IdMNgRannodeUexnApid) isSnodeReleaseRequiredIEsValue_SnodeReleaseRequiredIes() {
}

func (*SnodeReleaseRequiredIEsValue_IdSNgRannodeUexnApid) isSnodeReleaseRequiredIEsValue_SnodeReleaseRequiredIes() {
}

func (*SnodeReleaseRequiredIEsValue_IdPdusessionToBeReleasedListRelRqd) isSnodeReleaseRequiredIEsValue_SnodeReleaseRequiredIes() {
}

func (*SnodeReleaseRequiredIEsValue_IdCause) isSnodeReleaseRequiredIEsValue_SnodeReleaseRequiredIes() {
}

func (*SnodeReleaseRequiredIEsValue_IdSnToMnContainer) isSnodeReleaseRequiredIEsValue_SnodeReleaseRequiredIes() {
}

// concrete instance(s) of class XNAP-PROTOCOL-IES from xnap_v1.asn1:1947
// @inject_tag: aper:"valueExt"
// {SNodeReleaseRequired-IEs}
type SnodeReleaseRequiredIEs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"unique,"
	Id *xnap_commondatatypes.ProtocolIeID `protobuf:"bytes,1,opt,name=id,json=&id,proto3" json:"id,omitempty" aper:"unique,"`
	// @inject_tag: aper:"valueLB:0,valueUB:2,"
	Criticality xnap_commondatatypes.Criticality `protobuf:"varint,2,opt,name=criticality,json=&criticality,proto3,enum=xnap.v1.Criticality" json:"criticality,omitempty" aper:"valueLB:0,valueUB:2,"`
	// @inject_tag: aper:"canonicalOrder,"
	Value *SnodeReleaseRequiredIEsValue `protobuf:"bytes,3,opt,name=value,json=&Value,proto3" json:"value,omitempty" aper:"canonicalOrder,"`
}

func (x *SnodeReleaseRequiredIEs) Reset() {
	*x = SnodeReleaseRequiredIEs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[146]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SnodeReleaseRequiredIEs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SnodeReleaseRequiredIEs) ProtoMessage() {}

func (x *SnodeReleaseRequiredIEs) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[146]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SnodeReleaseRequiredIEs.ProtoReflect.Descriptor instead.
func (*SnodeReleaseRequiredIEs) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_pdu_contents_proto_rawDescGZIP(), []int{146}
}

func (x *SnodeReleaseRequiredIEs) GetId() *xnap_commondatatypes.ProtocolIeID {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *SnodeReleaseRequiredIEs) GetCriticality() xnap_commondatatypes.Criticality {
	if x != nil {
		return x.Criticality
	}
	return xnap_commondatatypes.Criticality(0)
}

func (x *SnodeReleaseRequiredIEs) GetValue() *SnodeReleaseRequiredIEsValue {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:1943
// @inject_tag: aper:"valueExt"
// {SNodeReleaseRequired}
type SnodeReleaseRequired struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProtocolIes []*SnodeReleaseRequiredIEs `protobuf:"bytes,1,rep,name=protocol_ies,json=protocolIEs,proto3" json:"protocol_ies,omitempty"`
}

func (x *SnodeReleaseRequired) Reset() {
	*x = SnodeReleaseRequired{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[147]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SnodeReleaseRequired) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SnodeReleaseRequired) ProtoMessage() {}

func (x *SnodeReleaseRequired) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[147]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SnodeReleaseRequired.ProtoReflect.Descriptor instead.
func (*SnodeReleaseRequired) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_pdu_contents_proto_rawDescGZIP(), []int{147}
}

func (x *SnodeReleaseRequired) GetProtocolIes() []*SnodeReleaseRequiredIEs {
	if x != nil {
		return x.ProtocolIes
	}
	return nil
}

// value set from xnap_v1.asn1:1962
// {PDUSessionToBeReleasedList-RelRqd-ExtIEs}
type PdusessionToBeReleasedListRelRqdExtIes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *emptypb.Empty `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *PdusessionToBeReleasedListRelRqdExtIes) Reset() {
	*x = PdusessionToBeReleasedListRelRqdExtIes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[148]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PdusessionToBeReleasedListRelRqdExtIes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PdusessionToBeReleasedListRelRqdExtIes) ProtoMessage() {}

func (x *PdusessionToBeReleasedListRelRqdExtIes) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[148]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PdusessionToBeReleasedListRelRqdExtIes.ProtoReflect.Descriptor instead.
func (*PdusessionToBeReleasedListRelRqdExtIes) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_pdu_contents_proto_rawDescGZIP(), []int{148}
}

func (x *PdusessionToBeReleasedListRelRqdExtIes) GetValue() *emptypb.Empty {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:1957
// @inject_tag: aper:"valueExt"
// {PDUSessionToBeReleasedList-RelRqd}
type PdusessionToBeReleasedListRelRqd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"optional,"
	PduSessionsToBeReleasedListSnterminated *xnap_ies.PdusessionListwithDataForwardingRequest `protobuf:"bytes,1,opt,name=pdu_sessions_to_be_released_list_snterminated,json=pduSessionsToBeReleasedList-SNterminated,proto3,oneof" json:"pdu_sessions_to_be_released_list_snterminated,omitempty" aper:"optional,"`
	// @inject_tag: aper:"optional,sizeLB:1,"
	IEExtensions []*PdusessionToBeReleasedListRelRqdExtIes `protobuf:"bytes,2,rep,name=i_e_extensions,json=iE-Extensions,proto3" json:"i_e_extensions,omitempty" aper:"optional,sizeLB:1,"`
}

func (x *PdusessionToBeReleasedListRelRqd) Reset() {
	*x = PdusessionToBeReleasedListRelRqd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[149]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PdusessionToBeReleasedListRelRqd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PdusessionToBeReleasedListRelRqd) ProtoMessage() {}

func (x *PdusessionToBeReleasedListRelRqd) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[149]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PdusessionToBeReleasedListRelRqd.ProtoReflect.Descriptor instead.
func (*PdusessionToBeReleasedListRelRqd) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_pdu_contents_proto_rawDescGZIP(), []int{149}
}

func (x *PdusessionToBeReleasedListRelRqd) GetPduSessionsToBeReleasedListSnterminated() *xnap_ies.PdusessionListwithDataForwardingRequest {
	if x != nil {
		return x.PduSessionsToBeReleasedListSnterminated
	}
	return nil
}

func (x *PdusessionToBeReleasedListRelRqd) GetIEExtensions() []*PdusessionToBeReleasedListRelRqdExtIes {
	if x != nil {
		return x.IEExtensions
	}
	return nil
}

// value set from xnap_v1.asn1:1978
// {SNodeReleaseConfirm-IEs&Value}
type SnodeReleaseConfirmIEsValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// value set translated as choice from xnap_v1.asn1:1978
	//
	// Types that are assignable to SnodeReleaseConfirmIes:
	//	*SnodeReleaseConfirmIEsValue_IdMNgRannodeUexnApid
	//	*SnodeReleaseConfirmIEsValue_IdSNgRannodeUexnApid
	//	*SnodeReleaseConfirmIEsValue_IdPdusessionReleasedListRelConf
	//	*SnodeReleaseConfirmIEsValue_IdCriticalityDiagnostics
	SnodeReleaseConfirmIes isSnodeReleaseConfirmIEsValue_SnodeReleaseConfirmIes `protobuf_oneof:"snode_release_confirm_ies"`
}

func (x *SnodeReleaseConfirmIEsValue) Reset() {
	*x = SnodeReleaseConfirmIEsValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[150]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SnodeReleaseConfirmIEsValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SnodeReleaseConfirmIEsValue) ProtoMessage() {}

func (x *SnodeReleaseConfirmIEsValue) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[150]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SnodeReleaseConfirmIEsValue.ProtoReflect.Descriptor instead.
func (*SnodeReleaseConfirmIEsValue) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_pdu_contents_proto_rawDescGZIP(), []int{150}
}

func (m *SnodeReleaseConfirmIEsValue) GetSnodeReleaseConfirmIes() isSnodeReleaseConfirmIEsValue_SnodeReleaseConfirmIes {
	if m != nil {
		return m.SnodeReleaseConfirmIes
	}
	return nil
}

func (x *SnodeReleaseConfirmIEsValue) GetIdMNgRannodeUexnApid() *xnap_ies.NgRAnnodeUexnApid {
	if x, ok := x.GetSnodeReleaseConfirmIes().(*SnodeReleaseConfirmIEsValue_IdMNgRannodeUexnApid); ok {
		return x.IdMNgRannodeUexnApid
	}
	return nil
}

func (x *SnodeReleaseConfirmIEsValue) GetIdSNgRannodeUexnApid() *xnap_ies.NgRAnnodeUexnApid {
	if x, ok := x.GetSnodeReleaseConfirmIes().(*SnodeReleaseConfirmIEsValue_IdSNgRannodeUexnApid); ok {
		return x.IdSNgRannodeUexnApid
	}
	return nil
}

func (x *SnodeReleaseConfirmIEsValue) GetIdPdusessionReleasedListRelConf() *PdusessionReleasedListRelConf {
	if x, ok := x.GetSnodeReleaseConfirmIes().(*SnodeReleaseConfirmIEsValue_IdPdusessionReleasedListRelConf); ok {
		return x.IdPdusessionReleasedListRelConf
	}
	return nil
}

func (x *SnodeReleaseConfirmIEsValue) GetIdCriticalityDiagnostics() *xnap_ies.CriticalityDiagnostics {
	if x, ok := x.GetSnodeReleaseConfirmIes().(*SnodeReleaseConfirmIEsValue_IdCriticalityDiagnostics); ok {
		return x.IdCriticalityDiagnostics
	}
	return nil
}

type isSnodeReleaseConfirmIEsValue_SnodeReleaseConfirmIes interface {
	isSnodeReleaseConfirmIEsValue_SnodeReleaseConfirmIes()
}

type SnodeReleaseConfirmIEsValue_IdMNgRannodeUexnApid struct {
	// @inject_tag: aper:"choiceIdx:1,"
	IdMNgRannodeUexnApid *xnap_ies.NgRAnnodeUexnApid `protobuf:"bytes,1,opt,name=id_m_ng_rannode_uexn_apid,json=id-M-NG-RANnodeUEXnAPID,proto3,oneof" aper:"choiceIdx:1,"`
}

type SnodeReleaseConfirmIEsValue_IdSNgRannodeUexnApid struct {
	// @inject_tag: aper:"choiceIdx:2,"
	IdSNgRannodeUexnApid *xnap_ies.NgRAnnodeUexnApid `protobuf:"bytes,2,opt,name=id_s_ng_rannode_uexn_apid,json=id-S-NG-RANnodeUEXnAPID,proto3,oneof" aper:"choiceIdx:2,"`
}

type SnodeReleaseConfirmIEsValue_IdPdusessionReleasedListRelConf struct {
	// @inject_tag: aper:"choiceIdx:3,valueExt,"
	IdPdusessionReleasedListRelConf *PdusessionReleasedListRelConf `protobuf:"bytes,3,opt,name=id_pdusession_released_list_rel_conf,json=id-PDUSessionReleasedList-RelConf,proto3,oneof" aper:"choiceIdx:3,valueExt,"`
}

type SnodeReleaseConfirmIEsValue_IdCriticalityDiagnostics struct {
	// @inject_tag: aper:"choiceIdx:4,valueExt,"
	IdCriticalityDiagnostics *xnap_ies.CriticalityDiagnostics `protobuf:"bytes,4,opt,name=id_criticality_diagnostics,json=id-CriticalityDiagnostics,proto3,oneof" aper:"choiceIdx:4,valueExt,"`
}

func (*SnodeReleaseConfirmIEsValue_IdMNgRannodeUexnApid) isSnodeReleaseConfirmIEsValue_SnodeReleaseConfirmIes() {
}

func (*SnodeReleaseConfirmIEsValue_IdSNgRannodeUexnApid) isSnodeReleaseConfirmIEsValue_SnodeReleaseConfirmIes() {
}

func (*SnodeReleaseConfirmIEsValue_IdPdusessionReleasedListRelConf) isSnodeReleaseConfirmIEsValue_SnodeReleaseConfirmIes() {
}

func (*SnodeReleaseConfirmIEsValue_IdCriticalityDiagnostics) isSnodeReleaseConfirmIEsValue_SnodeReleaseConfirmIes() {
}

// concrete instance(s) of class XNAP-PROTOCOL-IES from xnap_v1.asn1:1978
// @inject_tag: aper:"valueExt"
// {SNodeReleaseConfirm-IEs}
type SnodeReleaseConfirmIEs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"unique,"
	Id *xnap_commondatatypes.ProtocolIeID `protobuf:"bytes,1,opt,name=id,json=&id,proto3" json:"id,omitempty" aper:"unique,"`
	// @inject_tag: aper:"valueLB:0,valueUB:2,"
	Criticality xnap_commondatatypes.Criticality `protobuf:"varint,2,opt,name=criticality,json=&criticality,proto3,enum=xnap.v1.Criticality" json:"criticality,omitempty" aper:"valueLB:0,valueUB:2,"`
	// @inject_tag: aper:"canonicalOrder,"
	Value *SnodeReleaseConfirmIEsValue `protobuf:"bytes,3,opt,name=value,json=&Value,proto3" json:"value,omitempty" aper:"canonicalOrder,"`
}

func (x *SnodeReleaseConfirmIEs) Reset() {
	*x = SnodeReleaseConfirmIEs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[151]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SnodeReleaseConfirmIEs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SnodeReleaseConfirmIEs) ProtoMessage() {}

func (x *SnodeReleaseConfirmIEs) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[151]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SnodeReleaseConfirmIEs.ProtoReflect.Descriptor instead.
func (*SnodeReleaseConfirmIEs) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_pdu_contents_proto_rawDescGZIP(), []int{151}
}

func (x *SnodeReleaseConfirmIEs) GetId() *xnap_commondatatypes.ProtocolIeID {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *SnodeReleaseConfirmIEs) GetCriticality() xnap_commondatatypes.Criticality {
	if x != nil {
		return x.Criticality
	}
	return xnap_commondatatypes.Criticality(0)
}

func (x *SnodeReleaseConfirmIEs) GetValue() *SnodeReleaseConfirmIEsValue {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:1974
// @inject_tag: aper:"valueExt"
// {SNodeReleaseConfirm}
type SnodeReleaseConfirm struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProtocolIes []*SnodeReleaseConfirmIEs `protobuf:"bytes,1,rep,name=protocol_ies,json=protocolIEs,proto3" json:"protocol_ies,omitempty"`
}

func (x *SnodeReleaseConfirm) Reset() {
	*x = SnodeReleaseConfirm{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[152]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SnodeReleaseConfirm) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SnodeReleaseConfirm) ProtoMessage() {}

func (x *SnodeReleaseConfirm) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[152]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SnodeReleaseConfirm.ProtoReflect.Descriptor instead.
func (*SnodeReleaseConfirm) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_pdu_contents_proto_rawDescGZIP(), []int{152}
}

func (x *SnodeReleaseConfirm) GetProtocolIes() []*SnodeReleaseConfirmIEs {
	if x != nil {
		return x.ProtocolIes
	}
	return nil
}

// value set from xnap_v1.asn1:1992
// {PDUSessionReleasedList-RelConf-ExtIEs}
type PdusessionReleasedListRelConfExtIes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *emptypb.Empty `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *PdusessionReleasedListRelConfExtIes) Reset() {
	*x = PdusessionReleasedListRelConfExtIes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[153]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PdusessionReleasedListRelConfExtIes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PdusessionReleasedListRelConfExtIes) ProtoMessage() {}

func (x *PdusessionReleasedListRelConfExtIes) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[153]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PdusessionReleasedListRelConfExtIes.ProtoReflect.Descriptor instead.
func (*PdusessionReleasedListRelConfExtIes) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_pdu_contents_proto_rawDescGZIP(), []int{153}
}

func (x *PdusessionReleasedListRelConfExtIes) GetValue() *emptypb.Empty {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:1987
// @inject_tag: aper:"valueExt"
// {PDUSessionReleasedList-RelConf}
type PdusessionReleasedListRelConf struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"optional,"
	PduSessionsReleasedListSnterminated *xnap_ies.PdusessionListwithDataForwardingFromTarget `protobuf:"bytes,1,opt,name=pdu_sessions_released_list_snterminated,json=pduSessionsReleasedList-SNterminated,proto3,oneof" json:"pdu_sessions_released_list_snterminated,omitempty" aper:"optional,"`
	// @inject_tag: aper:"optional,sizeLB:1,"
	IEExtensions []*PdusessionReleasedListRelConfExtIes `protobuf:"bytes,2,rep,name=i_e_extensions,json=iE-Extensions,proto3" json:"i_e_extensions,omitempty" aper:"optional,sizeLB:1,"`
}

func (x *PdusessionReleasedListRelConf) Reset() {
	*x = PdusessionReleasedListRelConf{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[154]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PdusessionReleasedListRelConf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PdusessionReleasedListRelConf) ProtoMessage() {}

func (x *PdusessionReleasedListRelConf) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[154]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PdusessionReleasedListRelConf.ProtoReflect.Descriptor instead.
func (*PdusessionReleasedListRelConf) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_pdu_contents_proto_rawDescGZIP(), []int{154}
}

func (x *PdusessionReleasedListRelConf) GetPduSessionsReleasedListSnterminated() *xnap_ies.PdusessionListwithDataForwardingFromTarget {
	if x != nil {
		return x.PduSessionsReleasedListSnterminated
	}
	return nil
}

func (x *PdusessionReleasedListRelConf) GetIEExtensions() []*PdusessionReleasedListRelConfExtIes {
	if x != nil {
		return x.IEExtensions
	}
	return nil
}

// value set from xnap_v1.asn1:2008
// {SNodeCounterCheckRequest-IEs&Value}
type SnodeCounterCheckRequestIEsValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// value set translated as choice from xnap_v1.asn1:2008
	//
	// Types that are assignable to SnodeCounterCheckRequestIes:
	//	*SnodeCounterCheckRequestIEsValue_IdMNgRannodeUexnApid
	//	*SnodeCounterCheckRequestIEsValue_IdSNgRannodeUexnApid
	//	*SnodeCounterCheckRequestIEsValue_IdBearersSubjectToCounterCheck
	SnodeCounterCheckRequestIes isSnodeCounterCheckRequestIEsValue_SnodeCounterCheckRequestIes `protobuf_oneof:"snode_counter_check_request_ies"`
}

func (x *SnodeCounterCheckRequestIEsValue) Reset() {
	*x = SnodeCounterCheckRequestIEsValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[155]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SnodeCounterCheckRequestIEsValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SnodeCounterCheckRequestIEsValue) ProtoMessage() {}

func (x *SnodeCounterCheckRequestIEsValue) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[155]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SnodeCounterCheckRequestIEsValue.ProtoReflect.Descriptor instead.
func (*SnodeCounterCheckRequestIEsValue) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_pdu_contents_proto_rawDescGZIP(), []int{155}
}

func (m *SnodeCounterCheckRequestIEsValue) GetSnodeCounterCheckRequestIes() isSnodeCounterCheckRequestIEsValue_SnodeCounterCheckRequestIes {
	if m != nil {
		return m.SnodeCounterCheckRequestIes
	}
	return nil
}

func (x *SnodeCounterCheckRequestIEsValue) GetIdMNgRannodeUexnApid() *xnap_ies.NgRAnnodeUexnApid {
	if x, ok := x.GetSnodeCounterCheckRequestIes().(*SnodeCounterCheckRequestIEsValue_IdMNgRannodeUexnApid); ok {
		return x.IdMNgRannodeUexnApid
	}
	return nil
}

func (x *SnodeCounterCheckRequestIEsValue) GetIdSNgRannodeUexnApid() *xnap_ies.NgRAnnodeUexnApid {
	if x, ok := x.GetSnodeCounterCheckRequestIes().(*SnodeCounterCheckRequestIEsValue_IdSNgRannodeUexnApid); ok {
		return x.IdSNgRannodeUexnApid
	}
	return nil
}

func (x *SnodeCounterCheckRequestIEsValue) GetIdBearersSubjectToCounterCheck() *BearersSubjectToCounterCheckList {
	if x, ok := x.GetSnodeCounterCheckRequestIes().(*SnodeCounterCheckRequestIEsValue_IdBearersSubjectToCounterCheck); ok {
		return x.IdBearersSubjectToCounterCheck
	}
	return nil
}

type isSnodeCounterCheckRequestIEsValue_SnodeCounterCheckRequestIes interface {
	isSnodeCounterCheckRequestIEsValue_SnodeCounterCheckRequestIes()
}

type SnodeCounterCheckRequestIEsValue_IdMNgRannodeUexnApid struct {
	// @inject_tag: aper:"choiceIdx:1,"
	IdMNgRannodeUexnApid *xnap_ies.NgRAnnodeUexnApid `protobuf:"bytes,1,opt,name=id_m_ng_rannode_uexn_apid,json=id-M-NG-RANnodeUEXnAPID,proto3,oneof" aper:"choiceIdx:1,"`
}

type SnodeCounterCheckRequestIEsValue_IdSNgRannodeUexnApid struct {
	// @inject_tag: aper:"choiceIdx:2,"
	IdSNgRannodeUexnApid *xnap_ies.NgRAnnodeUexnApid `protobuf:"bytes,2,opt,name=id_s_ng_rannode_uexn_apid,json=id-S-NG-RANnodeUEXnAPID,proto3,oneof" aper:"choiceIdx:2,"`
}

type SnodeCounterCheckRequestIEsValue_IdBearersSubjectToCounterCheck struct {
	// @inject_tag: aper:"choiceIdx:3,"
	IdBearersSubjectToCounterCheck *BearersSubjectToCounterCheckList `protobuf:"bytes,3,opt,name=id_bearers_subject_to_counter_check,json=id-BearersSubjectToCounterCheck,proto3,oneof" aper:"choiceIdx:3,"`
}

func (*SnodeCounterCheckRequestIEsValue_IdMNgRannodeUexnApid) isSnodeCounterCheckRequestIEsValue_SnodeCounterCheckRequestIes() {
}

func (*SnodeCounterCheckRequestIEsValue_IdSNgRannodeUexnApid) isSnodeCounterCheckRequestIEsValue_SnodeCounterCheckRequestIes() {
}

func (*SnodeCounterCheckRequestIEsValue_IdBearersSubjectToCounterCheck) isSnodeCounterCheckRequestIEsValue_SnodeCounterCheckRequestIes() {
}

// concrete instance(s) of class XNAP-PROTOCOL-IES from xnap_v1.asn1:2008
// @inject_tag: aper:"valueExt"
// {SNodeCounterCheckRequest-IEs}
type SnodeCounterCheckRequestIEs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"unique,"
	Id *xnap_commondatatypes.ProtocolIeID `protobuf:"bytes,1,opt,name=id,json=&id,proto3" json:"id,omitempty" aper:"unique,"`
	// @inject_tag: aper:"valueLB:0,valueUB:2,"
	Criticality xnap_commondatatypes.Criticality `protobuf:"varint,2,opt,name=criticality,json=&criticality,proto3,enum=xnap.v1.Criticality" json:"criticality,omitempty" aper:"valueLB:0,valueUB:2,"`
	// @inject_tag: aper:"canonicalOrder,"
	Value *SnodeCounterCheckRequestIEsValue `protobuf:"bytes,3,opt,name=value,json=&Value,proto3" json:"value,omitempty" aper:"canonicalOrder,"`
}

func (x *SnodeCounterCheckRequestIEs) Reset() {
	*x = SnodeCounterCheckRequestIEs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[156]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SnodeCounterCheckRequestIEs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SnodeCounterCheckRequestIEs) ProtoMessage() {}

func (x *SnodeCounterCheckRequestIEs) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[156]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SnodeCounterCheckRequestIEs.ProtoReflect.Descriptor instead.
func (*SnodeCounterCheckRequestIEs) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_pdu_contents_proto_rawDescGZIP(), []int{156}
}

func (x *SnodeCounterCheckRequestIEs) GetId() *xnap_commondatatypes.ProtocolIeID {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *SnodeCounterCheckRequestIEs) GetCriticality() xnap_commondatatypes.Criticality {
	if x != nil {
		return x.Criticality
	}
	return xnap_commondatatypes.Criticality(0)
}

func (x *SnodeCounterCheckRequestIEs) GetValue() *SnodeCounterCheckRequestIEsValue {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:2004
// @inject_tag: aper:"valueExt"
// {SNodeCounterCheckRequest}
type SnodeCounterCheckRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProtocolIes []*SnodeCounterCheckRequestIEs `protobuf:"bytes,1,rep,name=protocol_ies,json=protocolIEs,proto3" json:"protocol_ies,omitempty"`
}

func (x *SnodeCounterCheckRequest) Reset() {
	*x = SnodeCounterCheckRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[157]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SnodeCounterCheckRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SnodeCounterCheckRequest) ProtoMessage() {}

func (x *SnodeCounterCheckRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[157]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SnodeCounterCheckRequest.ProtoReflect.Descriptor instead.
func (*SnodeCounterCheckRequest) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_pdu_contents_proto_rawDescGZIP(), []int{157}
}

func (x *SnodeCounterCheckRequest) GetProtocolIes() []*SnodeCounterCheckRequestIEs {
	if x != nil {
		return x.ProtocolIes
	}
	return nil
}

// sequence from xnap_v1.asn1:2017
// {BearersSubjectToCounterCheck-List}
type BearersSubjectToCounterCheckList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"valueExt,sizeLB:1,sizeUB:32,"
	Value []*BearersSubjectToCounterCheckItem `protobuf:"bytes,1,rep,name=value,proto3" json:"value,omitempty" aper:"valueExt,sizeLB:1,sizeUB:32,"`
}

func (x *BearersSubjectToCounterCheckList) Reset() {
	*x = BearersSubjectToCounterCheckList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[158]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BearersSubjectToCounterCheckList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BearersSubjectToCounterCheckList) ProtoMessage() {}

func (x *BearersSubjectToCounterCheckList) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[158]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BearersSubjectToCounterCheckList.ProtoReflect.Descriptor instead.
func (*BearersSubjectToCounterCheckList) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_pdu_contents_proto_rawDescGZIP(), []int{158}
}

func (x *BearersSubjectToCounterCheckList) GetValue() []*BearersSubjectToCounterCheckItem {
	if x != nil {
		return x.Value
	}
	return nil
}

// value set from xnap_v1.asn1:2025
// {BearersSubjectToCounterCheck-Item-ExtIEs}
type BearersSubjectToCounterCheckItemExtIes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *emptypb.Empty `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *BearersSubjectToCounterCheckItemExtIes) Reset() {
	*x = BearersSubjectToCounterCheckItemExtIes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[159]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BearersSubjectToCounterCheckItemExtIes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BearersSubjectToCounterCheckItemExtIes) ProtoMessage() {}

func (x *BearersSubjectToCounterCheckItemExtIes) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[159]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BearersSubjectToCounterCheckItemExtIes.ProtoReflect.Descriptor instead.
func (*BearersSubjectToCounterCheckItemExtIes) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_pdu_contents_proto_rawDescGZIP(), []int{159}
}

func (x *BearersSubjectToCounterCheckItemExtIes) GetValue() *emptypb.Empty {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:2018
// @inject_tag: aper:"valueExt"
// {BearersSubjectToCounterCheck-Item}
type BearersSubjectToCounterCheckItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DrbId *xnap_ies.DrbID `protobuf:"bytes,1,opt,name=drb_id,json=drb-ID,proto3" json:"drb_id,omitempty"`
	// @inject_tag: aper:"valueLB:0,valueUB:4294967295,"
	UlCount int32 `protobuf:"varint,2,opt,name=ul_count,json=ul-count,proto3" json:"ul_count,omitempty" aper:"valueLB:0,valueUB:4294967295,"`
	// @inject_tag: aper:"valueLB:0,valueUB:4294967295,"
	DlCount int32 `protobuf:"varint,3,opt,name=dl_count,json=dl-count,proto3" json:"dl_count,omitempty" aper:"valueLB:0,valueUB:4294967295,"`
	// @inject_tag: aper:"optional,sizeLB:1,"
	IEExtensions []*BearersSubjectToCounterCheckItemExtIes `protobuf:"bytes,4,rep,name=i_e_extensions,json=iE-Extensions,proto3" json:"i_e_extensions,omitempty" aper:"optional,sizeLB:1,"`
}

func (x *BearersSubjectToCounterCheckItem) Reset() {
	*x = BearersSubjectToCounterCheckItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[160]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BearersSubjectToCounterCheckItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BearersSubjectToCounterCheckItem) ProtoMessage() {}

func (x *BearersSubjectToCounterCheckItem) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[160]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BearersSubjectToCounterCheckItem.ProtoReflect.Descriptor instead.
func (*BearersSubjectToCounterCheckItem) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_pdu_contents_proto_rawDescGZIP(), []int{160}
}

func (x *BearersSubjectToCounterCheckItem) GetDrbId() *xnap_ies.DrbID {
	if x != nil {
		return x.DrbId
	}
	return nil
}

func (x *BearersSubjectToCounterCheckItem) GetUlCount() int32 {
	if x != nil {
		return x.UlCount
	}
	return 0
}

func (x *BearersSubjectToCounterCheckItem) GetDlCount() int32 {
	if x != nil {
		return x.DlCount
	}
	return 0
}

func (x *BearersSubjectToCounterCheckItem) GetIEExtensions() []*BearersSubjectToCounterCheckItemExtIes {
	if x != nil {
		return x.IEExtensions
	}
	return nil
}

// value set from xnap_v1.asn1:2041
// {SNodeChangeRequired-IEs&Value}
type SnodeChangeRequiredIEsValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// value set translated as choice from xnap_v1.asn1:2041
	//
	// Types that are assignable to SnodeChangeRequiredIes:
	//	*SnodeChangeRequiredIEsValue_IdMNgRannodeUexnApid
	//	*SnodeChangeRequiredIEsValue_IdSNgRannodeUexnApid
	//	*SnodeChangeRequiredIEsValue_IdTargetSNgRannodeId
	//	*SnodeChangeRequiredIEsValue_IdCause
	//	*SnodeChangeRequiredIEsValue_IdPdusessionSnchangeRequiredList
	//	*SnodeChangeRequiredIEsValue_IdSnToMnContainer
	SnodeChangeRequiredIes isSnodeChangeRequiredIEsValue_SnodeChangeRequiredIes `protobuf_oneof:"snode_change_required_ies"`
}

func (x *SnodeChangeRequiredIEsValue) Reset() {
	*x = SnodeChangeRequiredIEsValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[161]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SnodeChangeRequiredIEsValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SnodeChangeRequiredIEsValue) ProtoMessage() {}

func (x *SnodeChangeRequiredIEsValue) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[161]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SnodeChangeRequiredIEsValue.ProtoReflect.Descriptor instead.
func (*SnodeChangeRequiredIEsValue) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_pdu_contents_proto_rawDescGZIP(), []int{161}
}

func (m *SnodeChangeRequiredIEsValue) GetSnodeChangeRequiredIes() isSnodeChangeRequiredIEsValue_SnodeChangeRequiredIes {
	if m != nil {
		return m.SnodeChangeRequiredIes
	}
	return nil
}

func (x *SnodeChangeRequiredIEsValue) GetIdMNgRannodeUexnApid() *xnap_ies.NgRAnnodeUexnApid {
	if x, ok := x.GetSnodeChangeRequiredIes().(*SnodeChangeRequiredIEsValue_IdMNgRannodeUexnApid); ok {
		return x.IdMNgRannodeUexnApid
	}
	return nil
}

func (x *SnodeChangeRequiredIEsValue) GetIdSNgRannodeUexnApid() *xnap_ies.NgRAnnodeUexnApid {
	if x, ok := x.GetSnodeChangeRequiredIes().(*SnodeChangeRequiredIEsValue_IdSNgRannodeUexnApid); ok {
		return x.IdSNgRannodeUexnApid
	}
	return nil
}

func (x *SnodeChangeRequiredIEsValue) GetIdTargetSNgRannodeId() *xnap_ies.GlobalNgRAnnodeID {
	if x, ok := x.GetSnodeChangeRequiredIes().(*SnodeChangeRequiredIEsValue_IdTargetSNgRannodeId); ok {
		return x.IdTargetSNgRannodeId
	}
	return nil
}

func (x *SnodeChangeRequiredIEsValue) GetIdCause() *xnap_ies.Cause {
	if x, ok := x.GetSnodeChangeRequiredIes().(*SnodeChangeRequiredIEsValue_IdCause); ok {
		return x.IdCause
	}
	return nil
}

func (x *SnodeChangeRequiredIEsValue) GetIdPdusessionSnchangeRequiredList() *PdusessionSNchangeRequiredList {
	if x, ok := x.GetSnodeChangeRequiredIes().(*SnodeChangeRequiredIEsValue_IdPdusessionSnchangeRequiredList); ok {
		return x.IdPdusessionSnchangeRequiredList
	}
	return nil
}

func (x *SnodeChangeRequiredIEsValue) GetIdSnToMnContainer() string {
	if x, ok := x.GetSnodeChangeRequiredIes().(*SnodeChangeRequiredIEsValue_IdSnToMnContainer); ok {
		return x.IdSnToMnContainer
	}
	return ""
}

type isSnodeChangeRequiredIEsValue_SnodeChangeRequiredIes interface {
	isSnodeChangeRequiredIEsValue_SnodeChangeRequiredIes()
}

type SnodeChangeRequiredIEsValue_IdMNgRannodeUexnApid struct {
	// @inject_tag: aper:"choiceIdx:1,"
	IdMNgRannodeUexnApid *xnap_ies.NgRAnnodeUexnApid `protobuf:"bytes,1,opt,name=id_m_ng_rannode_uexn_apid,json=id-M-NG-RANnodeUEXnAPID,proto3,oneof" aper:"choiceIdx:1,"`
}

type SnodeChangeRequiredIEsValue_IdSNgRannodeUexnApid struct {
	// @inject_tag: aper:"choiceIdx:2,"
	IdSNgRannodeUexnApid *xnap_ies.NgRAnnodeUexnApid `protobuf:"bytes,2,opt,name=id_s_ng_rannode_uexn_apid,json=id-S-NG-RANnodeUEXnAPID,proto3,oneof" aper:"choiceIdx:2,"`
}

type SnodeChangeRequiredIEsValue_IdTargetSNgRannodeId struct {
	// @inject_tag: aper:"choiceIdx:3,"
	IdTargetSNgRannodeId *xnap_ies.GlobalNgRAnnodeID `protobuf:"bytes,3,opt,name=id_target_s_ng_rannode_id,json=id-target-S-NG-RANnodeID,proto3,oneof" aper:"choiceIdx:3,"`
}

type SnodeChangeRequiredIEsValue_IdCause struct {
	// @inject_tag: aper:"choiceIdx:4,"
	IdCause *xnap_ies.Cause `protobuf:"bytes,4,opt,name=id_cause,json=id-Cause,proto3,oneof" aper:"choiceIdx:4,"`
}

type SnodeChangeRequiredIEsValue_IdPdusessionSnchangeRequiredList struct {
	// @inject_tag: aper:"choiceIdx:5,"
	IdPdusessionSnchangeRequiredList *PdusessionSNchangeRequiredList `protobuf:"bytes,5,opt,name=id_pdusession_snchange_required_list,json=id-PDUSession-SNChangeRequired-List,proto3,oneof" aper:"choiceIdx:5,"`
}

type SnodeChangeRequiredIEsValue_IdSnToMnContainer struct {
	// @inject_tag: aper:"choiceIdx:6,"
	IdSnToMnContainer string `protobuf:"bytes,6,opt,name=id_sn_to_mn_container,json=id-SN-to-MN-Container,proto3,oneof" aper:"choiceIdx:6,"`
}

func (*SnodeChangeRequiredIEsValue_IdMNgRannodeUexnApid) isSnodeChangeRequiredIEsValue_SnodeChangeRequiredIes() {
}

func (*SnodeChangeRequiredIEsValue_IdSNgRannodeUexnApid) isSnodeChangeRequiredIEsValue_SnodeChangeRequiredIes() {
}

func (*SnodeChangeRequiredIEsValue_IdTargetSNgRannodeId) isSnodeChangeRequiredIEsValue_SnodeChangeRequiredIes() {
}

func (*SnodeChangeRequiredIEsValue_IdCause) isSnodeChangeRequiredIEsValue_SnodeChangeRequiredIes() {}

func (*SnodeChangeRequiredIEsValue_IdPdusessionSnchangeRequiredList) isSnodeChangeRequiredIEsValue_SnodeChangeRequiredIes() {
}

func (*SnodeChangeRequiredIEsValue_IdSnToMnContainer) isSnodeChangeRequiredIEsValue_SnodeChangeRequiredIes() {
}

// concrete instance(s) of class XNAP-PROTOCOL-IES from xnap_v1.asn1:2041
// @inject_tag: aper:"valueExt"
// {SNodeChangeRequired-IEs}
type SnodeChangeRequiredIEs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"unique,"
	Id *xnap_commondatatypes.ProtocolIeID `protobuf:"bytes,1,opt,name=id,json=&id,proto3" json:"id,omitempty" aper:"unique,"`
	// @inject_tag: aper:"valueLB:0,valueUB:2,"
	Criticality xnap_commondatatypes.Criticality `protobuf:"varint,2,opt,name=criticality,json=&criticality,proto3,enum=xnap.v1.Criticality" json:"criticality,omitempty" aper:"valueLB:0,valueUB:2,"`
	// @inject_tag: aper:"canonicalOrder,"
	Value *SnodeChangeRequiredIEsValue `protobuf:"bytes,3,opt,name=value,json=&Value,proto3" json:"value,omitempty" aper:"canonicalOrder,"`
}

func (x *SnodeChangeRequiredIEs) Reset() {
	*x = SnodeChangeRequiredIEs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[162]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SnodeChangeRequiredIEs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SnodeChangeRequiredIEs) ProtoMessage() {}

func (x *SnodeChangeRequiredIEs) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[162]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SnodeChangeRequiredIEs.ProtoReflect.Descriptor instead.
func (*SnodeChangeRequiredIEs) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_pdu_contents_proto_rawDescGZIP(), []int{162}
}

func (x *SnodeChangeRequiredIEs) GetId() *xnap_commondatatypes.ProtocolIeID {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *SnodeChangeRequiredIEs) GetCriticality() xnap_commondatatypes.Criticality {
	if x != nil {
		return x.Criticality
	}
	return xnap_commondatatypes.Criticality(0)
}

func (x *SnodeChangeRequiredIEs) GetValue() *SnodeChangeRequiredIEsValue {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:2037
// @inject_tag: aper:"valueExt"
// {SNodeChangeRequired}
type SnodeChangeRequired struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProtocolIes []*SnodeChangeRequiredIEs `protobuf:"bytes,1,rep,name=protocol_ies,json=protocolIEs,proto3" json:"protocol_ies,omitempty"`
}

func (x *SnodeChangeRequired) Reset() {
	*x = SnodeChangeRequired{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[163]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SnodeChangeRequired) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SnodeChangeRequired) ProtoMessage() {}

func (x *SnodeChangeRequired) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[163]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SnodeChangeRequired.ProtoReflect.Descriptor instead.
func (*SnodeChangeRequired) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_pdu_contents_proto_rawDescGZIP(), []int{163}
}

func (x *SnodeChangeRequired) GetProtocolIes() []*SnodeChangeRequiredIEs {
	if x != nil {
		return x.ProtocolIes
	}
	return nil
}

// sequence from xnap_v1.asn1:2053
// {PDUSession-SNChangeRequired-List}
type PdusessionSNchangeRequiredList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"valueExt,sizeLB:1,sizeUB:256,"
	Value []*PdusessionSNchangeRequiredItem `protobuf:"bytes,1,rep,name=value,proto3" json:"value,omitempty" aper:"valueExt,sizeLB:1,sizeUB:256,"`
}

func (x *PdusessionSNchangeRequiredList) Reset() {
	*x = PdusessionSNchangeRequiredList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[164]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PdusessionSNchangeRequiredList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PdusessionSNchangeRequiredList) ProtoMessage() {}

func (x *PdusessionSNchangeRequiredList) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[164]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PdusessionSNchangeRequiredList.ProtoReflect.Descriptor instead.
func (*PdusessionSNchangeRequiredList) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_pdu_contents_proto_rawDescGZIP(), []int{164}
}

func (x *PdusessionSNchangeRequiredList) GetValue() []*PdusessionSNchangeRequiredItem {
	if x != nil {
		return x.Value
	}
	return nil
}

// value set from xnap_v1.asn1:2063
// {PDUSession-SNChangeRequired-Item-ExtIEs}
type PdusessionSNchangeRequiredItemExtIes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *emptypb.Empty `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *PdusessionSNchangeRequiredItemExtIes) Reset() {
	*x = PdusessionSNchangeRequiredItemExtIes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[165]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PdusessionSNchangeRequiredItemExtIes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PdusessionSNchangeRequiredItemExtIes) ProtoMessage() {}

func (x *PdusessionSNchangeRequiredItemExtIes) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[165]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PdusessionSNchangeRequiredItemExtIes.ProtoReflect.Descriptor instead.
func (*PdusessionSNchangeRequiredItemExtIes) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_pdu_contents_proto_rawDescGZIP(), []int{165}
}

func (x *PdusessionSNchangeRequiredItemExtIes) GetValue() *emptypb.Empty {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:2054
// @inject_tag: aper:"valueExt"
// {PDUSession-SNChangeRequired-Item}
type PdusessionSNchangeRequiredItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PduSessionId *xnap_ies.PdusessionID `protobuf:"bytes,1,opt,name=pdu_session_id,json=pduSessionId,proto3" json:"pdu_session_id,omitempty"`
	// @inject_tag: aper:"optional,valueExt,"
	SnTerminated *xnap_ies.PdusessionResourceChangeRequiredInfoSNterminated `protobuf:"bytes,2,opt,name=sn_terminated,json=sn-terminated,proto3,oneof" json:"sn_terminated,omitempty" aper:"optional,valueExt,"`
	// @inject_tag: aper:"optional,valueExt,"
	MnTerminated *xnap_ies.PdusessionResourceChangeRequiredInfoMNterminated `protobuf:"bytes,3,opt,name=mn_terminated,json=mn-terminated,proto3,oneof" json:"mn_terminated,omitempty" aper:"optional,valueExt,"`
	// @inject_tag: aper:"optional,sizeLB:1,"
	IEExtension []*PdusessionSNchangeRequiredItemExtIes `protobuf:"bytes,4,rep,name=i_e_extension,json=iE-Extension,proto3" json:"i_e_extension,omitempty" aper:"optional,sizeLB:1,"`
}

func (x *PdusessionSNchangeRequiredItem) Reset() {
	*x = PdusessionSNchangeRequiredItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[166]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PdusessionSNchangeRequiredItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PdusessionSNchangeRequiredItem) ProtoMessage() {}

func (x *PdusessionSNchangeRequiredItem) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[166]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PdusessionSNchangeRequiredItem.ProtoReflect.Descriptor instead.
func (*PdusessionSNchangeRequiredItem) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_pdu_contents_proto_rawDescGZIP(), []int{166}
}

func (x *PdusessionSNchangeRequiredItem) GetPduSessionId() *xnap_ies.PdusessionID {
	if x != nil {
		return x.PduSessionId
	}
	return nil
}

func (x *PdusessionSNchangeRequiredItem) GetSnTerminated() *xnap_ies.PdusessionResourceChangeRequiredInfoSNterminated {
	if x != nil {
		return x.SnTerminated
	}
	return nil
}

func (x *PdusessionSNchangeRequiredItem) GetMnTerminated() *xnap_ies.PdusessionResourceChangeRequiredInfoMNterminated {
	if x != nil {
		return x.MnTerminated
	}
	return nil
}

func (x *PdusessionSNchangeRequiredItem) GetIEExtension() []*PdusessionSNchangeRequiredItemExtIes {
	if x != nil {
		return x.IEExtension
	}
	return nil
}

// value set from xnap_v1.asn1:2079
// {SNodeChangeConfirm-IEs&Value}
type SnodeChangeConfirmIEsValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// value set translated as choice from xnap_v1.asn1:2079
	//
	// Types that are assignable to SnodeChangeConfirmIes:
	//	*SnodeChangeConfirmIEsValue_IdMNgRannodeUexnApid
	//	*SnodeChangeConfirmIEsValue_IdSNgRannodeUexnApid
	//	*SnodeChangeConfirmIEsValue_IdPdusessionSnchangeConfirmList
	//	*SnodeChangeConfirmIEsValue_IdCriticalityDiagnostics
	SnodeChangeConfirmIes isSnodeChangeConfirmIEsValue_SnodeChangeConfirmIes `protobuf_oneof:"snode_change_confirm_ies"`
}

func (x *SnodeChangeConfirmIEsValue) Reset() {
	*x = SnodeChangeConfirmIEsValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[167]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SnodeChangeConfirmIEsValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SnodeChangeConfirmIEsValue) ProtoMessage() {}

func (x *SnodeChangeConfirmIEsValue) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[167]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SnodeChangeConfirmIEsValue.ProtoReflect.Descriptor instead.
func (*SnodeChangeConfirmIEsValue) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_pdu_contents_proto_rawDescGZIP(), []int{167}
}

func (m *SnodeChangeConfirmIEsValue) GetSnodeChangeConfirmIes() isSnodeChangeConfirmIEsValue_SnodeChangeConfirmIes {
	if m != nil {
		return m.SnodeChangeConfirmIes
	}
	return nil
}

func (x *SnodeChangeConfirmIEsValue) GetIdMNgRannodeUexnApid() *xnap_ies.NgRAnnodeUexnApid {
	if x, ok := x.GetSnodeChangeConfirmIes().(*SnodeChangeConfirmIEsValue_IdMNgRannodeUexnApid); ok {
		return x.IdMNgRannodeUexnApid
	}
	return nil
}

func (x *SnodeChangeConfirmIEsValue) GetIdSNgRannodeUexnApid() *xnap_ies.NgRAnnodeUexnApid {
	if x, ok := x.GetSnodeChangeConfirmIes().(*SnodeChangeConfirmIEsValue_IdSNgRannodeUexnApid); ok {
		return x.IdSNgRannodeUexnApid
	}
	return nil
}

func (x *SnodeChangeConfirmIEsValue) GetIdPdusessionSnchangeConfirmList() *PdusessionSNchangeConfirmList {
	if x, ok := x.GetSnodeChangeConfirmIes().(*SnodeChangeConfirmIEsValue_IdPdusessionSnchangeConfirmList); ok {
		return x.IdPdusessionSnchangeConfirmList
	}
	return nil
}

func (x *SnodeChangeConfirmIEsValue) GetIdCriticalityDiagnostics() *xnap_ies.CriticalityDiagnostics {
	if x, ok := x.GetSnodeChangeConfirmIes().(*SnodeChangeConfirmIEsValue_IdCriticalityDiagnostics); ok {
		return x.IdCriticalityDiagnostics
	}
	return nil
}

type isSnodeChangeConfirmIEsValue_SnodeChangeConfirmIes interface {
	isSnodeChangeConfirmIEsValue_SnodeChangeConfirmIes()
}

type SnodeChangeConfirmIEsValue_IdMNgRannodeUexnApid struct {
	// @inject_tag: aper:"choiceIdx:1,"
	IdMNgRannodeUexnApid *xnap_ies.NgRAnnodeUexnApid `protobuf:"bytes,1,opt,name=id_m_ng_rannode_uexn_apid,json=id-M-NG-RANnodeUEXnAPID,proto3,oneof" aper:"choiceIdx:1,"`
}

type SnodeChangeConfirmIEsValue_IdSNgRannodeUexnApid struct {
	// @inject_tag: aper:"choiceIdx:2,"
	IdSNgRannodeUexnApid *xnap_ies.NgRAnnodeUexnApid `protobuf:"bytes,2,opt,name=id_s_ng_rannode_uexn_apid,json=id-S-NG-RANnodeUEXnAPID,proto3,oneof" aper:"choiceIdx:2,"`
}

type SnodeChangeConfirmIEsValue_IdPdusessionSnchangeConfirmList struct {
	// @inject_tag: aper:"choiceIdx:3,"
	IdPdusessionSnchangeConfirmList *PdusessionSNchangeConfirmList `protobuf:"bytes,3,opt,name=id_pdusession_snchange_confirm_list,json=id-PDUSession-SNChangeConfirm-List,proto3,oneof" aper:"choiceIdx:3,"`
}

type SnodeChangeConfirmIEsValue_IdCriticalityDiagnostics struct {
	// @inject_tag: aper:"choiceIdx:4,valueExt,"
	IdCriticalityDiagnostics *xnap_ies.CriticalityDiagnostics `protobuf:"bytes,4,opt,name=id_criticality_diagnostics,json=id-CriticalityDiagnostics,proto3,oneof" aper:"choiceIdx:4,valueExt,"`
}

func (*SnodeChangeConfirmIEsValue_IdMNgRannodeUexnApid) isSnodeChangeConfirmIEsValue_SnodeChangeConfirmIes() {
}

func (*SnodeChangeConfirmIEsValue_IdSNgRannodeUexnApid) isSnodeChangeConfirmIEsValue_SnodeChangeConfirmIes() {
}

func (*SnodeChangeConfirmIEsValue_IdPdusessionSnchangeConfirmList) isSnodeChangeConfirmIEsValue_SnodeChangeConfirmIes() {
}

func (*SnodeChangeConfirmIEsValue_IdCriticalityDiagnostics) isSnodeChangeConfirmIEsValue_SnodeChangeConfirmIes() {
}

// concrete instance(s) of class XNAP-PROTOCOL-IES from xnap_v1.asn1:2079
// @inject_tag: aper:"valueExt"
// {SNodeChangeConfirm-IEs}
type SnodeChangeConfirmIEs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"unique,"
	Id *xnap_commondatatypes.ProtocolIeID `protobuf:"bytes,1,opt,name=id,json=&id,proto3" json:"id,omitempty" aper:"unique,"`
	// @inject_tag: aper:"valueLB:0,valueUB:2,"
	Criticality xnap_commondatatypes.Criticality `protobuf:"varint,2,opt,name=criticality,json=&criticality,proto3,enum=xnap.v1.Criticality" json:"criticality,omitempty" aper:"valueLB:0,valueUB:2,"`
	// @inject_tag: aper:"canonicalOrder,"
	Value *SnodeChangeConfirmIEsValue `protobuf:"bytes,3,opt,name=value,json=&Value,proto3" json:"value,omitempty" aper:"canonicalOrder,"`
}

func (x *SnodeChangeConfirmIEs) Reset() {
	*x = SnodeChangeConfirmIEs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[168]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SnodeChangeConfirmIEs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SnodeChangeConfirmIEs) ProtoMessage() {}

func (x *SnodeChangeConfirmIEs) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[168]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SnodeChangeConfirmIEs.ProtoReflect.Descriptor instead.
func (*SnodeChangeConfirmIEs) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_pdu_contents_proto_rawDescGZIP(), []int{168}
}

func (x *SnodeChangeConfirmIEs) GetId() *xnap_commondatatypes.ProtocolIeID {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *SnodeChangeConfirmIEs) GetCriticality() xnap_commondatatypes.Criticality {
	if x != nil {
		return x.Criticality
	}
	return xnap_commondatatypes.Criticality(0)
}

func (x *SnodeChangeConfirmIEs) GetValue() *SnodeChangeConfirmIEsValue {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:2075
// @inject_tag: aper:"valueExt"
// {SNodeChangeConfirm}
type SnodeChangeConfirm struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProtocolIes []*SnodeChangeConfirmIEs `protobuf:"bytes,1,rep,name=protocol_ies,json=protocolIEs,proto3" json:"protocol_ies,omitempty"`
}

func (x *SnodeChangeConfirm) Reset() {
	*x = SnodeChangeConfirm{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[169]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SnodeChangeConfirm) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SnodeChangeConfirm) ProtoMessage() {}

func (x *SnodeChangeConfirm) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[169]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SnodeChangeConfirm.ProtoReflect.Descriptor instead.
func (*SnodeChangeConfirm) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_pdu_contents_proto_rawDescGZIP(), []int{169}
}

func (x *SnodeChangeConfirm) GetProtocolIes() []*SnodeChangeConfirmIEs {
	if x != nil {
		return x.ProtocolIes
	}
	return nil
}

// sequence from xnap_v1.asn1:2088
// {PDUSession-SNChangeConfirm-List}
type PdusessionSNchangeConfirmList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"valueExt,sizeLB:1,sizeUB:256,"
	Value []*PdusessionSNchangeConfirmItem `protobuf:"bytes,1,rep,name=value,proto3" json:"value,omitempty" aper:"valueExt,sizeLB:1,sizeUB:256,"`
}

func (x *PdusessionSNchangeConfirmList) Reset() {
	*x = PdusessionSNchangeConfirmList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[170]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PdusessionSNchangeConfirmList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PdusessionSNchangeConfirmList) ProtoMessage() {}

func (x *PdusessionSNchangeConfirmList) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[170]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PdusessionSNchangeConfirmList.ProtoReflect.Descriptor instead.
func (*PdusessionSNchangeConfirmList) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_pdu_contents_proto_rawDescGZIP(), []int{170}
}

func (x *PdusessionSNchangeConfirmList) GetValue() []*PdusessionSNchangeConfirmItem {
	if x != nil {
		return x.Value
	}
	return nil
}

// value set from xnap_v1.asn1:2098
// {PDUSession-SNChangeConfirm-Item-ExtIEs}
type PdusessionSNchangeConfirmItemExtIes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *emptypb.Empty `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *PdusessionSNchangeConfirmItemExtIes) Reset() {
	*x = PdusessionSNchangeConfirmItemExtIes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[171]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PdusessionSNchangeConfirmItemExtIes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PdusessionSNchangeConfirmItemExtIes) ProtoMessage() {}

func (x *PdusessionSNchangeConfirmItemExtIes) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[171]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PdusessionSNchangeConfirmItemExtIes.ProtoReflect.Descriptor instead.
func (*PdusessionSNchangeConfirmItemExtIes) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_pdu_contents_proto_rawDescGZIP(), []int{171}
}

func (x *PdusessionSNchangeConfirmItemExtIes) GetValue() *emptypb.Empty {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:2089
// @inject_tag: aper:"valueExt"
// {PDUSession-SNChangeConfirm-Item}
type PdusessionSNchangeConfirmItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PduSessionId *xnap_ies.PdusessionID `protobuf:"bytes,1,opt,name=pdu_session_id,json=pduSessionId,proto3" json:"pdu_session_id,omitempty"`
	// @inject_tag: aper:"optional,valueExt,"
	SnTerminated *xnap_ies.PdusessionResourceChangeConfirmInfoSNterminated `protobuf:"bytes,2,opt,name=sn_terminated,json=sn-terminated,proto3,oneof" json:"sn_terminated,omitempty" aper:"optional,valueExt,"`
	// @inject_tag: aper:"optional,valueExt,"
	MnTerminated *xnap_ies.PdusessionResourceChangeConfirmInfoMNterminated `protobuf:"bytes,3,opt,name=mn_terminated,json=mn-terminated,proto3,oneof" json:"mn_terminated,omitempty" aper:"optional,valueExt,"`
	// @inject_tag: aper:"optional,sizeLB:1,"
	IEExtension []*PdusessionSNchangeConfirmItemExtIes `protobuf:"bytes,4,rep,name=i_e_extension,json=iE-Extension,proto3" json:"i_e_extension,omitempty" aper:"optional,sizeLB:1,"`
}

func (x *PdusessionSNchangeConfirmItem) Reset() {
	*x = PdusessionSNchangeConfirmItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[172]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PdusessionSNchangeConfirmItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PdusessionSNchangeConfirmItem) ProtoMessage() {}

func (x *PdusessionSNchangeConfirmItem) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[172]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PdusessionSNchangeConfirmItem.ProtoReflect.Descriptor instead.
func (*PdusessionSNchangeConfirmItem) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_pdu_contents_proto_rawDescGZIP(), []int{172}
}

func (x *PdusessionSNchangeConfirmItem) GetPduSessionId() *xnap_ies.PdusessionID {
	if x != nil {
		return x.PduSessionId
	}
	return nil
}

func (x *PdusessionSNchangeConfirmItem) GetSnTerminated() *xnap_ies.PdusessionResourceChangeConfirmInfoSNterminated {
	if x != nil {
		return x.SnTerminated
	}
	return nil
}

func (x *PdusessionSNchangeConfirmItem) GetMnTerminated() *xnap_ies.PdusessionResourceChangeConfirmInfoMNterminated {
	if x != nil {
		return x.MnTerminated
	}
	return nil
}

func (x *PdusessionSNchangeConfirmItem) GetIEExtension() []*PdusessionSNchangeConfirmItemExtIes {
	if x != nil {
		return x.IEExtension
	}
	return nil
}

// value set from xnap_v1.asn1:2114
// {SNodeChangeRefuse-IEs&Value}
type SnodeChangeRefuseIEsValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// value set translated as choice from xnap_v1.asn1:2114
	//
	// Types that are assignable to SnodeChangeRefuseIes:
	//	*SnodeChangeRefuseIEsValue_IdMNgRannodeUexnApid
	//	*SnodeChangeRefuseIEsValue_IdSNgRannodeUexnApid
	//	*SnodeChangeRefuseIEsValue_IdCause
	//	*SnodeChangeRefuseIEsValue_IdCriticalityDiagnostics
	SnodeChangeRefuseIes isSnodeChangeRefuseIEsValue_SnodeChangeRefuseIes `protobuf_oneof:"snode_change_refuse_ies"`
}

func (x *SnodeChangeRefuseIEsValue) Reset() {
	*x = SnodeChangeRefuseIEsValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[173]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SnodeChangeRefuseIEsValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SnodeChangeRefuseIEsValue) ProtoMessage() {}

func (x *SnodeChangeRefuseIEsValue) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[173]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SnodeChangeRefuseIEsValue.ProtoReflect.Descriptor instead.
func (*SnodeChangeRefuseIEsValue) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_pdu_contents_proto_rawDescGZIP(), []int{173}
}

func (m *SnodeChangeRefuseIEsValue) GetSnodeChangeRefuseIes() isSnodeChangeRefuseIEsValue_SnodeChangeRefuseIes {
	if m != nil {
		return m.SnodeChangeRefuseIes
	}
	return nil
}

func (x *SnodeChangeRefuseIEsValue) GetIdMNgRannodeUexnApid() *xnap_ies.NgRAnnodeUexnApid {
	if x, ok := x.GetSnodeChangeRefuseIes().(*SnodeChangeRefuseIEsValue_IdMNgRannodeUexnApid); ok {
		return x.IdMNgRannodeUexnApid
	}
	return nil
}

func (x *SnodeChangeRefuseIEsValue) GetIdSNgRannodeUexnApid() *xnap_ies.NgRAnnodeUexnApid {
	if x, ok := x.GetSnodeChangeRefuseIes().(*SnodeChangeRefuseIEsValue_IdSNgRannodeUexnApid); ok {
		return x.IdSNgRannodeUexnApid
	}
	return nil
}

func (x *SnodeChangeRefuseIEsValue) GetIdCause() *xnap_ies.Cause {
	if x, ok := x.GetSnodeChangeRefuseIes().(*SnodeChangeRefuseIEsValue_IdCause); ok {
		return x.IdCause
	}
	return nil
}

func (x *SnodeChangeRefuseIEsValue) GetIdCriticalityDiagnostics() *xnap_ies.CriticalityDiagnostics {
	if x, ok := x.GetSnodeChangeRefuseIes().(*SnodeChangeRefuseIEsValue_IdCriticalityDiagnostics); ok {
		return x.IdCriticalityDiagnostics
	}
	return nil
}

type isSnodeChangeRefuseIEsValue_SnodeChangeRefuseIes interface {
	isSnodeChangeRefuseIEsValue_SnodeChangeRefuseIes()
}

type SnodeChangeRefuseIEsValue_IdMNgRannodeUexnApid struct {
	// @inject_tag: aper:"choiceIdx:1,"
	IdMNgRannodeUexnApid *xnap_ies.NgRAnnodeUexnApid `protobuf:"bytes,1,opt,name=id_m_ng_rannode_uexn_apid,json=id-M-NG-RANnodeUEXnAPID,proto3,oneof" aper:"choiceIdx:1,"`
}

type SnodeChangeRefuseIEsValue_IdSNgRannodeUexnApid struct {
	// @inject_tag: aper:"choiceIdx:2,"
	IdSNgRannodeUexnApid *xnap_ies.NgRAnnodeUexnApid `protobuf:"bytes,2,opt,name=id_s_ng_rannode_uexn_apid,json=id-S-NG-RANnodeUEXnAPID,proto3,oneof" aper:"choiceIdx:2,"`
}

type SnodeChangeRefuseIEsValue_IdCause struct {
	// @inject_tag: aper:"choiceIdx:3,"
	IdCause *xnap_ies.Cause `protobuf:"bytes,3,opt,name=id_cause,json=id-Cause,proto3,oneof" aper:"choiceIdx:3,"`
}

type SnodeChangeRefuseIEsValue_IdCriticalityDiagnostics struct {
	// @inject_tag: aper:"choiceIdx:4,valueExt,"
	IdCriticalityDiagnostics *xnap_ies.CriticalityDiagnostics `protobuf:"bytes,4,opt,name=id_criticality_diagnostics,json=id-CriticalityDiagnostics,proto3,oneof" aper:"choiceIdx:4,valueExt,"`
}

func (*SnodeChangeRefuseIEsValue_IdMNgRannodeUexnApid) isSnodeChangeRefuseIEsValue_SnodeChangeRefuseIes() {
}

func (*SnodeChangeRefuseIEsValue_IdSNgRannodeUexnApid) isSnodeChangeRefuseIEsValue_SnodeChangeRefuseIes() {
}

func (*SnodeChangeRefuseIEsValue_IdCause) isSnodeChangeRefuseIEsValue_SnodeChangeRefuseIes() {}

func (*SnodeChangeRefuseIEsValue_IdCriticalityDiagnostics) isSnodeChangeRefuseIEsValue_SnodeChangeRefuseIes() {
}

// concrete instance(s) of class XNAP-PROTOCOL-IES from xnap_v1.asn1:2114
// @inject_tag: aper:"valueExt"
// {SNodeChangeRefuse-IEs}
type SnodeChangeRefuseIEs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"unique,"
	Id *xnap_commondatatypes.ProtocolIeID `protobuf:"bytes,1,opt,name=id,json=&id,proto3" json:"id,omitempty" aper:"unique,"`
	// @inject_tag: aper:"valueLB:0,valueUB:2,"
	Criticality xnap_commondatatypes.Criticality `protobuf:"varint,2,opt,name=criticality,json=&criticality,proto3,enum=xnap.v1.Criticality" json:"criticality,omitempty" aper:"valueLB:0,valueUB:2,"`
	// @inject_tag: aper:"canonicalOrder,"
	Value *SnodeChangeRefuseIEsValue `protobuf:"bytes,3,opt,name=value,json=&Value,proto3" json:"value,omitempty" aper:"canonicalOrder,"`
}

func (x *SnodeChangeRefuseIEs) Reset() {
	*x = SnodeChangeRefuseIEs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[174]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SnodeChangeRefuseIEs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SnodeChangeRefuseIEs) ProtoMessage() {}

func (x *SnodeChangeRefuseIEs) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[174]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SnodeChangeRefuseIEs.ProtoReflect.Descriptor instead.
func (*SnodeChangeRefuseIEs) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_pdu_contents_proto_rawDescGZIP(), []int{174}
}

func (x *SnodeChangeRefuseIEs) GetId() *xnap_commondatatypes.ProtocolIeID {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *SnodeChangeRefuseIEs) GetCriticality() xnap_commondatatypes.Criticality {
	if x != nil {
		return x.Criticality
	}
	return xnap_commondatatypes.Criticality(0)
}

func (x *SnodeChangeRefuseIEs) GetValue() *SnodeChangeRefuseIEsValue {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:2110
// @inject_tag: aper:"valueExt"
// {SNodeChangeRefuse}
type SnodeChangeRefuse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProtocolIes []*SnodeChangeRefuseIEs `protobuf:"bytes,1,rep,name=protocol_ies,json=protocolIEs,proto3" json:"protocol_ies,omitempty"`
}

func (x *SnodeChangeRefuse) Reset() {
	*x = SnodeChangeRefuse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[175]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SnodeChangeRefuse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SnodeChangeRefuse) ProtoMessage() {}

func (x *SnodeChangeRefuse) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[175]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SnodeChangeRefuse.ProtoReflect.Descriptor instead.
func (*SnodeChangeRefuse) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_pdu_contents_proto_rawDescGZIP(), []int{175}
}

func (x *SnodeChangeRefuse) GetProtocolIes() []*SnodeChangeRefuseIEs {
	if x != nil {
		return x.ProtocolIes
	}
	return nil
}

// value set from xnap_v1.asn1:2133
// {RRCTransfer-IEs&Value}
type RrctransferIEsValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// value set translated as choice from xnap_v1.asn1:2133
	//
	// Types that are assignable to RrctransferIes:
	//	*RrctransferIEsValue_IdMNgRannodeUexnApid
	//	*RrctransferIEsValue_IdSNgRannodeUexnApid
	//	*RrctransferIEsValue_IdSplitSrbRrctransfer
	//	*RrctransferIEsValue_IdUereportRrctransfer
	//	*RrctransferIEsValue_IdFastMcgrecoveryRrctransferSnToMn
	//	*RrctransferIEsValue_IdFastMcgrecoveryRrctransferMnToSn
	RrctransferIes isRrctransferIEsValue_RrctransferIes `protobuf_oneof:"rrctransfer_ies"`
}

func (x *RrctransferIEsValue) Reset() {
	*x = RrctransferIEsValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[176]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RrctransferIEsValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RrctransferIEsValue) ProtoMessage() {}

func (x *RrctransferIEsValue) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[176]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RrctransferIEsValue.ProtoReflect.Descriptor instead.
func (*RrctransferIEsValue) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_pdu_contents_proto_rawDescGZIP(), []int{176}
}

func (m *RrctransferIEsValue) GetRrctransferIes() isRrctransferIEsValue_RrctransferIes {
	if m != nil {
		return m.RrctransferIes
	}
	return nil
}

func (x *RrctransferIEsValue) GetIdMNgRannodeUexnApid() *xnap_ies.NgRAnnodeUexnApid {
	if x, ok := x.GetRrctransferIes().(*RrctransferIEsValue_IdMNgRannodeUexnApid); ok {
		return x.IdMNgRannodeUexnApid
	}
	return nil
}

func (x *RrctransferIEsValue) GetIdSNgRannodeUexnApid() *xnap_ies.NgRAnnodeUexnApid {
	if x, ok := x.GetRrctransferIes().(*RrctransferIEsValue_IdSNgRannodeUexnApid); ok {
		return x.IdSNgRannodeUexnApid
	}
	return nil
}

func (x *RrctransferIEsValue) GetIdSplitSrbRrctransfer() *SplitSrbRRctransfer {
	if x, ok := x.GetRrctransferIes().(*RrctransferIEsValue_IdSplitSrbRrctransfer); ok {
		return x.IdSplitSrbRrctransfer
	}
	return nil
}

func (x *RrctransferIEsValue) GetIdUereportRrctransfer() *UereportRrctransfer {
	if x, ok := x.GetRrctransferIes().(*RrctransferIEsValue_IdUereportRrctransfer); ok {
		return x.IdUereportRrctransfer
	}
	return nil
}

func (x *RrctransferIEsValue) GetIdFastMcgrecoveryRrctransferSnToMn() *FastMcgrecoveryRrctransfer {
	if x, ok := x.GetRrctransferIes().(*RrctransferIEsValue_IdFastMcgrecoveryRrctransferSnToMn); ok {
		return x.IdFastMcgrecoveryRrctransferSnToMn
	}
	return nil
}

func (x *RrctransferIEsValue) GetIdFastMcgrecoveryRrctransferMnToSn() *FastMcgrecoveryRrctransfer {
	if x, ok := x.GetRrctransferIes().(*RrctransferIEsValue_IdFastMcgrecoveryRrctransferMnToSn); ok {
		return x.IdFastMcgrecoveryRrctransferMnToSn
	}
	return nil
}

type isRrctransferIEsValue_RrctransferIes interface {
	isRrctransferIEsValue_RrctransferIes()
}

type RrctransferIEsValue_IdMNgRannodeUexnApid struct {
	// @inject_tag: aper:"choiceIdx:1,"
	IdMNgRannodeUexnApid *xnap_ies.NgRAnnodeUexnApid `protobuf:"bytes,1,opt,name=id_m_ng_rannode_uexn_apid,json=id-M-NG-RANnodeUEXnAPID,proto3,oneof" aper:"choiceIdx:1,"`
}

type RrctransferIEsValue_IdSNgRannodeUexnApid struct {
	// @inject_tag: aper:"choiceIdx:2,"
	IdSNgRannodeUexnApid *xnap_ies.NgRAnnodeUexnApid `protobuf:"bytes,2,opt,name=id_s_ng_rannode_uexn_apid,json=id-S-NG-RANnodeUEXnAPID,proto3,oneof" aper:"choiceIdx:2,"`
}

type RrctransferIEsValue_IdSplitSrbRrctransfer struct {
	// @inject_tag: aper:"choiceIdx:3,valueExt,"
	IdSplitSrbRrctransfer *SplitSrbRRctransfer `protobuf:"bytes,3,opt,name=id_split_srb_rrctransfer,json=id-SplitSRB-RRCTransfer,proto3,oneof" aper:"choiceIdx:3,valueExt,"`
}

type RrctransferIEsValue_IdUereportRrctransfer struct {
	// @inject_tag: aper:"choiceIdx:4,valueExt,"
	IdUereportRrctransfer *UereportRrctransfer `protobuf:"bytes,4,opt,name=id_uereport_rrctransfer,json=id-UEReportRRCTransfer,proto3,oneof" aper:"choiceIdx:4,valueExt,"`
}

type RrctransferIEsValue_IdFastMcgrecoveryRrctransferSnToMn struct {
	// @inject_tag: aper:"choiceIdx:5,valueExt,"
	IdFastMcgrecoveryRrctransferSnToMn *FastMcgrecoveryRrctransfer `protobuf:"bytes,5,opt,name=id_fast_mcgrecovery_rrctransfer_sn_to_mn,json=id-FastMCGRecoveryRRCTransfer-SN-to-MN,proto3,oneof" aper:"choiceIdx:5,valueExt,"`
}

type RrctransferIEsValue_IdFastMcgrecoveryRrctransferMnToSn struct {
	// @inject_tag: aper:"choiceIdx:6,valueExt,"
	IdFastMcgrecoveryRrctransferMnToSn *FastMcgrecoveryRrctransfer `protobuf:"bytes,6,opt,name=id_fast_mcgrecovery_rrctransfer_mn_to_sn,json=id-FastMCGRecoveryRRCTransfer-MN-to-SN,proto3,oneof" aper:"choiceIdx:6,valueExt,"`
}

func (*RrctransferIEsValue_IdMNgRannodeUexnApid) isRrctransferIEsValue_RrctransferIes() {}

func (*RrctransferIEsValue_IdSNgRannodeUexnApid) isRrctransferIEsValue_RrctransferIes() {}

func (*RrctransferIEsValue_IdSplitSrbRrctransfer) isRrctransferIEsValue_RrctransferIes() {}

func (*RrctransferIEsValue_IdUereportRrctransfer) isRrctransferIEsValue_RrctransferIes() {}

func (*RrctransferIEsValue_IdFastMcgrecoveryRrctransferSnToMn) isRrctransferIEsValue_RrctransferIes() {
}

func (*RrctransferIEsValue_IdFastMcgrecoveryRrctransferMnToSn) isRrctransferIEsValue_RrctransferIes() {
}

// concrete instance(s) of class XNAP-PROTOCOL-IES from xnap_v1.asn1:2133
// @inject_tag: aper:"valueExt"
// {RRCTransfer-IEs}
type RrctransferIEs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"unique,"
	Id *xnap_commondatatypes.ProtocolIeID `protobuf:"bytes,1,opt,name=id,json=&id,proto3" json:"id,omitempty" aper:"unique,"`
	// @inject_tag: aper:"valueLB:0,valueUB:2,"
	Criticality xnap_commondatatypes.Criticality `protobuf:"varint,2,opt,name=criticality,json=&criticality,proto3,enum=xnap.v1.Criticality" json:"criticality,omitempty" aper:"valueLB:0,valueUB:2,"`
	// @inject_tag: aper:"canonicalOrder,"
	Value *RrctransferIEsValue `protobuf:"bytes,3,opt,name=value,json=&Value,proto3" json:"value,omitempty" aper:"canonicalOrder,"`
}

func (x *RrctransferIEs) Reset() {
	*x = RrctransferIEs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[177]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RrctransferIEs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RrctransferIEs) ProtoMessage() {}

func (x *RrctransferIEs) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[177]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RrctransferIEs.ProtoReflect.Descriptor instead.
func (*RrctransferIEs) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_pdu_contents_proto_rawDescGZIP(), []int{177}
}

func (x *RrctransferIEs) GetId() *xnap_commondatatypes.ProtocolIeID {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *RrctransferIEs) GetCriticality() xnap_commondatatypes.Criticality {
	if x != nil {
		return x.Criticality
	}
	return xnap_commondatatypes.Criticality(0)
}

func (x *RrctransferIEs) GetValue() *RrctransferIEsValue {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:2129
// @inject_tag: aper:"valueExt"
// {RRCTransfer}
type Rrctransfer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProtocolIes []*RrctransferIEs `protobuf:"bytes,1,rep,name=protocol_ies,json=protocolIEs,proto3" json:"protocol_ies,omitempty"`
}

func (x *Rrctransfer) Reset() {
	*x = Rrctransfer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[178]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Rrctransfer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Rrctransfer) ProtoMessage() {}

func (x *Rrctransfer) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[178]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Rrctransfer.ProtoReflect.Descriptor instead.
func (*Rrctransfer) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_pdu_contents_proto_rawDescGZIP(), []int{178}
}

func (x *Rrctransfer) GetProtocolIes() []*RrctransferIEs {
	if x != nil {
		return x.ProtocolIes
	}
	return nil
}

// value set from xnap_v1.asn1:2151
// {SplitSRB-RRCTransfer-ExtIEs}
type SplitSrbRRctransferExtIes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *emptypb.Empty `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *SplitSrbRRctransferExtIes) Reset() {
	*x = SplitSrbRRctransferExtIes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[179]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SplitSrbRRctransferExtIes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SplitSrbRRctransferExtIes) ProtoMessage() {}

func (x *SplitSrbRRctransferExtIes) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[179]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SplitSrbRRctransferExtIes.ProtoReflect.Descriptor instead.
func (*SplitSrbRRctransferExtIes) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_pdu_contents_proto_rawDescGZIP(), []int{179}
}

func (x *SplitSrbRRctransferExtIes) GetValue() *emptypb.Empty {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:2144
// @inject_tag: aper:"valueExt"
// {SplitSRB-RRCTransfer}
type SplitSrbRRctransfer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"optional,"
	RrcContainer []byte `protobuf:"bytes,1,opt,name=rrc_container,json=rrcContainer,proto3,oneof" json:"rrc_container,omitempty" aper:"optional,"`
	// @inject_tag: aper:"valueExt,valueLB:0,valueUB:1,"
	SrbType SrbTypeSplitSrbrrctransfer `protobuf:"varint,2,opt,name=srb_type,json=srbType,proto3,enum=xnap.v1.SrbTypeSplitSrbrrctransfer" json:"srb_type,omitempty" aper:"valueExt,valueLB:0,valueUB:1,"`
	// @inject_tag: aper:"optional,"
	DeliveryStatus *xnap_ies.DeliveryStatus `protobuf:"bytes,3,opt,name=delivery_status,json=deliveryStatus,proto3,oneof" json:"delivery_status,omitempty" aper:"optional,"`
	// @inject_tag: aper:"optional,sizeLB:1,"
	IEExtensions []*SplitSrbRRctransferExtIes `protobuf:"bytes,4,rep,name=i_e_extensions,json=iE-Extensions,proto3" json:"i_e_extensions,omitempty" aper:"optional,sizeLB:1,"`
}

func (x *SplitSrbRRctransfer) Reset() {
	*x = SplitSrbRRctransfer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[180]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SplitSrbRRctransfer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SplitSrbRRctransfer) ProtoMessage() {}

func (x *SplitSrbRRctransfer) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[180]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SplitSrbRRctransfer.ProtoReflect.Descriptor instead.
func (*SplitSrbRRctransfer) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_pdu_contents_proto_rawDescGZIP(), []int{180}
}

func (x *SplitSrbRRctransfer) GetRrcContainer() []byte {
	if x != nil {
		return x.RrcContainer
	}
	return nil
}

func (x *SplitSrbRRctransfer) GetSrbType() SrbTypeSplitSrbrrctransfer {
	if x != nil {
		return x.SrbType
	}
	return SrbTypeSplitSrbrrctransfer_SRB_TYPE_SPLIT_SRBRRCTRANSFER_SRB1
}

func (x *SplitSrbRRctransfer) GetDeliveryStatus() *xnap_ies.DeliveryStatus {
	if x != nil {
		return x.DeliveryStatus
	}
	return nil
}

func (x *SplitSrbRRctransfer) GetIEExtensions() []*SplitSrbRRctransferExtIes {
	if x != nil {
		return x.IEExtensions
	}
	return nil
}

// value set from xnap_v1.asn1:2161
// {UEReportRRCTransfer-ExtIEs}
type UereportRrctransferExtIes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *emptypb.Empty `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *UereportRrctransferExtIes) Reset() {
	*x = UereportRrctransferExtIes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[181]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UereportRrctransferExtIes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UereportRrctransferExtIes) ProtoMessage() {}

func (x *UereportRrctransferExtIes) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[181]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UereportRrctransferExtIes.ProtoReflect.Descriptor instead.
func (*UereportRrctransferExtIes) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_pdu_contents_proto_rawDescGZIP(), []int{181}
}

func (x *UereportRrctransferExtIes) GetValue() *emptypb.Empty {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:2156
// @inject_tag: aper:"valueExt"
// {UEReportRRCTransfer}
type UereportRrctransfer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RrcContainer []byte `protobuf:"bytes,1,opt,name=rrc_container,json=rrcContainer,proto3" json:"rrc_container,omitempty"`
	// @inject_tag: aper:"optional,sizeLB:1,"
	IEExtensions []*UereportRrctransferExtIes `protobuf:"bytes,2,rep,name=i_e_extensions,json=iE-Extensions,proto3" json:"i_e_extensions,omitempty" aper:"optional,sizeLB:1,"`
}

func (x *UereportRrctransfer) Reset() {
	*x = UereportRrctransfer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[182]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UereportRrctransfer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UereportRrctransfer) ProtoMessage() {}

func (x *UereportRrctransfer) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[182]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UereportRrctransfer.ProtoReflect.Descriptor instead.
func (*UereportRrctransfer) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_pdu_contents_proto_rawDescGZIP(), []int{182}
}

func (x *UereportRrctransfer) GetRrcContainer() []byte {
	if x != nil {
		return x.RrcContainer
	}
	return nil
}

func (x *UereportRrctransfer) GetIEExtensions() []*UereportRrctransferExtIes {
	if x != nil {
		return x.IEExtensions
	}
	return nil
}

// value set from xnap_v1.asn1:2171
// {FastMCGRecoveryRRCTransfer-ExtIEs}
type FastMcgrecoveryRrctransferExtIes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *emptypb.Empty `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *FastMcgrecoveryRrctransferExtIes) Reset() {
	*x = FastMcgrecoveryRrctransferExtIes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[183]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FastMcgrecoveryRrctransferExtIes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FastMcgrecoveryRrctransferExtIes) ProtoMessage() {}

func (x *FastMcgrecoveryRrctransferExtIes) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[183]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FastMcgrecoveryRrctransferExtIes.ProtoReflect.Descriptor instead.
func (*FastMcgrecoveryRrctransferExtIes) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_pdu_contents_proto_rawDescGZIP(), []int{183}
}

func (x *FastMcgrecoveryRrctransferExtIes) GetValue() *emptypb.Empty {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:2166
// @inject_tag: aper:"valueExt"
// {FastMCGRecoveryRRCTransfer}
type FastMcgrecoveryRrctransfer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RrcContainer []byte `protobuf:"bytes,1,opt,name=rrc_container,json=rrcContainer,proto3" json:"rrc_container,omitempty"`
	// @inject_tag: aper:"optional,sizeLB:1,"
	IEExtensions []*FastMcgrecoveryRrctransferExtIes `protobuf:"bytes,2,rep,name=i_e_extensions,json=iE-Extensions,proto3" json:"i_e_extensions,omitempty" aper:"optional,sizeLB:1,"`
}

func (x *FastMcgrecoveryRrctransfer) Reset() {
	*x = FastMcgrecoveryRrctransfer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[184]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FastMcgrecoveryRrctransfer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FastMcgrecoveryRrctransfer) ProtoMessage() {}

func (x *FastMcgrecoveryRrctransfer) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[184]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FastMcgrecoveryRrctransfer.ProtoReflect.Descriptor instead.
func (*FastMcgrecoveryRrctransfer) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_pdu_contents_proto_rawDescGZIP(), []int{184}
}

func (x *FastMcgrecoveryRrctransfer) GetRrcContainer() []byte {
	if x != nil {
		return x.RrcContainer
	}
	return nil
}

func (x *FastMcgrecoveryRrctransfer) GetIEExtensions() []*FastMcgrecoveryRrctransferExtIes {
	if x != nil {
		return x.IEExtensions
	}
	return nil
}

// value set from xnap_v1.asn1:2186
// {NotificationControlIndication-IEs&Value}
type NotificationControlIndicationIEsValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// value set translated as choice from xnap_v1.asn1:2186
	//
	// Types that are assignable to NotificationControlIndicationIes:
	//	*NotificationControlIndicationIEsValue_IdMNgRannodeUexnApid
	//	*NotificationControlIndicationIEsValue_IdSNgRannodeUexnApid
	//	*NotificationControlIndicationIEsValue_IdPdusessionResourcesNotifyList
	NotificationControlIndicationIes isNotificationControlIndicationIEsValue_NotificationControlIndicationIes `protobuf_oneof:"notification_control_indication_ies"`
}

func (x *NotificationControlIndicationIEsValue) Reset() {
	*x = NotificationControlIndicationIEsValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[185]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NotificationControlIndicationIEsValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NotificationControlIndicationIEsValue) ProtoMessage() {}

func (x *NotificationControlIndicationIEsValue) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[185]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NotificationControlIndicationIEsValue.ProtoReflect.Descriptor instead.
func (*NotificationControlIndicationIEsValue) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_pdu_contents_proto_rawDescGZIP(), []int{185}
}

func (m *NotificationControlIndicationIEsValue) GetNotificationControlIndicationIes() isNotificationControlIndicationIEsValue_NotificationControlIndicationIes {
	if m != nil {
		return m.NotificationControlIndicationIes
	}
	return nil
}

func (x *NotificationControlIndicationIEsValue) GetIdMNgRannodeUexnApid() *xnap_ies.NgRAnnodeUexnApid {
	if x, ok := x.GetNotificationControlIndicationIes().(*NotificationControlIndicationIEsValue_IdMNgRannodeUexnApid); ok {
		return x.IdMNgRannodeUexnApid
	}
	return nil
}

func (x *NotificationControlIndicationIEsValue) GetIdSNgRannodeUexnApid() *xnap_ies.NgRAnnodeUexnApid {
	if x, ok := x.GetNotificationControlIndicationIes().(*NotificationControlIndicationIEsValue_IdSNgRannodeUexnApid); ok {
		return x.IdSNgRannodeUexnApid
	}
	return nil
}

func (x *NotificationControlIndicationIEsValue) GetIdPdusessionResourcesNotifyList() *PdusessionResourcesNotifyList {
	if x, ok := x.GetNotificationControlIndicationIes().(*NotificationControlIndicationIEsValue_IdPdusessionResourcesNotifyList); ok {
		return x.IdPdusessionResourcesNotifyList
	}
	return nil
}

type isNotificationControlIndicationIEsValue_NotificationControlIndicationIes interface {
	isNotificationControlIndicationIEsValue_NotificationControlIndicationIes()
}

type NotificationControlIndicationIEsValue_IdMNgRannodeUexnApid struct {
	// @inject_tag: aper:"choiceIdx:1,"
	IdMNgRannodeUexnApid *xnap_ies.NgRAnnodeUexnApid `protobuf:"bytes,1,opt,name=id_m_ng_rannode_uexn_apid,json=id-M-NG-RANnodeUEXnAPID,proto3,oneof" aper:"choiceIdx:1,"`
}

type NotificationControlIndicationIEsValue_IdSNgRannodeUexnApid struct {
	// @inject_tag: aper:"choiceIdx:2,"
	IdSNgRannodeUexnApid *xnap_ies.NgRAnnodeUexnApid `protobuf:"bytes,2,opt,name=id_s_ng_rannode_uexn_apid,json=id-S-NG-RANnodeUEXnAPID,proto3,oneof" aper:"choiceIdx:2,"`
}

type NotificationControlIndicationIEsValue_IdPdusessionResourcesNotifyList struct {
	// @inject_tag: aper:"choiceIdx:3,"
	IdPdusessionResourcesNotifyList *PdusessionResourcesNotifyList `protobuf:"bytes,3,opt,name=id_pdusession_resources_notify_list,json=id-PDUSessionResourcesNotifyList,proto3,oneof" aper:"choiceIdx:3,"`
}

func (*NotificationControlIndicationIEsValue_IdMNgRannodeUexnApid) isNotificationControlIndicationIEsValue_NotificationControlIndicationIes() {
}

func (*NotificationControlIndicationIEsValue_IdSNgRannodeUexnApid) isNotificationControlIndicationIEsValue_NotificationControlIndicationIes() {
}

func (*NotificationControlIndicationIEsValue_IdPdusessionResourcesNotifyList) isNotificationControlIndicationIEsValue_NotificationControlIndicationIes() {
}

// concrete instance(s) of class XNAP-PROTOCOL-IES from xnap_v1.asn1:2186
// @inject_tag: aper:"valueExt"
// {NotificationControlIndication-IEs}
type NotificationControlIndicationIEs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"unique,"
	Id *xnap_commondatatypes.ProtocolIeID `protobuf:"bytes,1,opt,name=id,json=&id,proto3" json:"id,omitempty" aper:"unique,"`
	// @inject_tag: aper:"valueLB:0,valueUB:2,"
	Criticality xnap_commondatatypes.Criticality `protobuf:"varint,2,opt,name=criticality,json=&criticality,proto3,enum=xnap.v1.Criticality" json:"criticality,omitempty" aper:"valueLB:0,valueUB:2,"`
	// @inject_tag: aper:"canonicalOrder,"
	Value *NotificationControlIndicationIEsValue `protobuf:"bytes,3,opt,name=value,json=&Value,proto3" json:"value,omitempty" aper:"canonicalOrder,"`
}

func (x *NotificationControlIndicationIEs) Reset() {
	*x = NotificationControlIndicationIEs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[186]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NotificationControlIndicationIEs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NotificationControlIndicationIEs) ProtoMessage() {}

func (x *NotificationControlIndicationIEs) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[186]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NotificationControlIndicationIEs.ProtoReflect.Descriptor instead.
func (*NotificationControlIndicationIEs) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_pdu_contents_proto_rawDescGZIP(), []int{186}
}

func (x *NotificationControlIndicationIEs) GetId() *xnap_commondatatypes.ProtocolIeID {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *NotificationControlIndicationIEs) GetCriticality() xnap_commondatatypes.Criticality {
	if x != nil {
		return x.Criticality
	}
	return xnap_commondatatypes.Criticality(0)
}

func (x *NotificationControlIndicationIEs) GetValue() *NotificationControlIndicationIEsValue {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:2182
// @inject_tag: aper:"valueExt"
// {NotificationControlIndication}
type NotificationControlIndication struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProtocolIes []*NotificationControlIndicationIEs `protobuf:"bytes,1,rep,name=protocol_ies,json=protocolIEs,proto3" json:"protocol_ies,omitempty"`
}

func (x *NotificationControlIndication) Reset() {
	*x = NotificationControlIndication{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[187]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NotificationControlIndication) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NotificationControlIndication) ProtoMessage() {}

func (x *NotificationControlIndication) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[187]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NotificationControlIndication.ProtoReflect.Descriptor instead.
func (*NotificationControlIndication) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_pdu_contents_proto_rawDescGZIP(), []int{187}
}

func (x *NotificationControlIndication) GetProtocolIes() []*NotificationControlIndicationIEs {
	if x != nil {
		return x.ProtocolIes
	}
	return nil
}

// sequence from xnap_v1.asn1:2195
// {PDUSessionResourcesNotifyList}
type PdusessionResourcesNotifyList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"valueExt,sizeLB:1,sizeUB:256,"
	Value []*PdusessionResourcesNotifyItem `protobuf:"bytes,1,rep,name=value,proto3" json:"value,omitempty" aper:"valueExt,sizeLB:1,sizeUB:256,"`
}

func (x *PdusessionResourcesNotifyList) Reset() {
	*x = PdusessionResourcesNotifyList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[188]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PdusessionResourcesNotifyList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PdusessionResourcesNotifyList) ProtoMessage() {}

func (x *PdusessionResourcesNotifyList) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[188]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PdusessionResourcesNotifyList.ProtoReflect.Descriptor instead.
func (*PdusessionResourcesNotifyList) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_pdu_contents_proto_rawDescGZIP(), []int{188}
}

func (x *PdusessionResourcesNotifyList) GetValue() []*PdusessionResourcesNotifyItem {
	if x != nil {
		return x.Value
	}
	return nil
}

// value set from xnap_v1.asn1:2202
// {PDUSessionResourcesNotify-Item-ExtIEs}
type PdusessionResourcesNotifyItemExtIes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *emptypb.Empty `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *PdusessionResourcesNotifyItemExtIes) Reset() {
	*x = PdusessionResourcesNotifyItemExtIes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[189]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PdusessionResourcesNotifyItemExtIes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PdusessionResourcesNotifyItemExtIes) ProtoMessage() {}

func (x *PdusessionResourcesNotifyItemExtIes) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[189]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PdusessionResourcesNotifyItemExtIes.ProtoReflect.Descriptor instead.
func (*PdusessionResourcesNotifyItemExtIes) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_pdu_contents_proto_rawDescGZIP(), []int{189}
}

func (x *PdusessionResourcesNotifyItemExtIes) GetValue() *emptypb.Empty {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:2196
// @inject_tag: aper:"valueExt"
// {PDUSessionResourcesNotify-Item}
type PdusessionResourcesNotifyItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PduSessionId                     *xnap_ies.PdusessionID                             `protobuf:"bytes,1,opt,name=pdu_session_id,json=pduSessionId,proto3" json:"pdu_session_id,omitempty"`
	QosFlowsNotificationContrIndInfo *xnap_ies.QoSflowNotificationControlIndicationInfo `protobuf:"bytes,2,opt,name=qos_flows_notification_contr_ind_info,json=qosFlowsNotificationContrIndInfo,proto3" json:"qos_flows_notification_contr_ind_info,omitempty"`
	// @inject_tag: aper:"optional,sizeLB:1,"
	IEExtensions []*PdusessionResourcesNotifyItemExtIes `protobuf:"bytes,3,rep,name=i_e_extensions,json=iE-Extensions,proto3" json:"i_e_extensions,omitempty" aper:"optional,sizeLB:1,"`
}

func (x *PdusessionResourcesNotifyItem) Reset() {
	*x = PdusessionResourcesNotifyItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[190]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PdusessionResourcesNotifyItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PdusessionResourcesNotifyItem) ProtoMessage() {}

func (x *PdusessionResourcesNotifyItem) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[190]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PdusessionResourcesNotifyItem.ProtoReflect.Descriptor instead.
func (*PdusessionResourcesNotifyItem) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_pdu_contents_proto_rawDescGZIP(), []int{190}
}

func (x *PdusessionResourcesNotifyItem) GetPduSessionId() *xnap_ies.PdusessionID {
	if x != nil {
		return x.PduSessionId
	}
	return nil
}

func (x *PdusessionResourcesNotifyItem) GetQosFlowsNotificationContrIndInfo() *xnap_ies.QoSflowNotificationControlIndicationInfo {
	if x != nil {
		return x.QosFlowsNotificationContrIndInfo
	}
	return nil
}

func (x *PdusessionResourcesNotifyItem) GetIEExtensions() []*PdusessionResourcesNotifyItemExtIes {
	if x != nil {
		return x.IEExtensions
	}
	return nil
}

// value set from xnap_v1.asn1:2217
// {ActivityNotification-IEs&Value}
type ActivityNotificationIEsValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// value set translated as choice from xnap_v1.asn1:2217
	//
	// Types that are assignable to ActivityNotificationIes:
	//	*ActivityNotificationIEsValue_IdMNgRannodeUexnApid
	//	*ActivityNotificationIEsValue_IdSNgRannodeUexnApid
	//	*ActivityNotificationIEsValue_IdUserPlaneTrafficActivityReport
	//	*ActivityNotificationIEsValue_IdPdusessionResourcesActivityNotifyList
	//	*ActivityNotificationIEsValue_IdRanpagingFailure
	ActivityNotificationIes isActivityNotificationIEsValue_ActivityNotificationIes `protobuf_oneof:"activity_notification_ies"`
}

func (x *ActivityNotificationIEsValue) Reset() {
	*x = ActivityNotificationIEsValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[191]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActivityNotificationIEsValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActivityNotificationIEsValue) ProtoMessage() {}

func (x *ActivityNotificationIEsValue) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[191]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActivityNotificationIEsValue.ProtoReflect.Descriptor instead.
func (*ActivityNotificationIEsValue) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_pdu_contents_proto_rawDescGZIP(), []int{191}
}

func (m *ActivityNotificationIEsValue) GetActivityNotificationIes() isActivityNotificationIEsValue_ActivityNotificationIes {
	if m != nil {
		return m.ActivityNotificationIes
	}
	return nil
}

func (x *ActivityNotificationIEsValue) GetIdMNgRannodeUexnApid() *xnap_ies.NgRAnnodeUexnApid {
	if x, ok := x.GetActivityNotificationIes().(*ActivityNotificationIEsValue_IdMNgRannodeUexnApid); ok {
		return x.IdMNgRannodeUexnApid
	}
	return nil
}

func (x *ActivityNotificationIEsValue) GetIdSNgRannodeUexnApid() *xnap_ies.NgRAnnodeUexnApid {
	if x, ok := x.GetActivityNotificationIes().(*ActivityNotificationIEsValue_IdSNgRannodeUexnApid); ok {
		return x.IdSNgRannodeUexnApid
	}
	return nil
}

func (x *ActivityNotificationIEsValue) GetIdUserPlaneTrafficActivityReport() xnap_ies.UserPlaneTrafficActivityReport {
	if x, ok := x.GetActivityNotificationIes().(*ActivityNotificationIEsValue_IdUserPlaneTrafficActivityReport); ok {
		return x.IdUserPlaneTrafficActivityReport
	}
	return xnap_ies.UserPlaneTrafficActivityReport(0)
}

func (x *ActivityNotificationIEsValue) GetIdPdusessionResourcesActivityNotifyList() *PdusessionResourcesActivityNotifyList {
	if x, ok := x.GetActivityNotificationIes().(*ActivityNotificationIEsValue_IdPdusessionResourcesActivityNotifyList); ok {
		return x.IdPdusessionResourcesActivityNotifyList
	}
	return nil
}

func (x *ActivityNotificationIEsValue) GetIdRanpagingFailure() xnap_ies.RanpagingFailure {
	if x, ok := x.GetActivityNotificationIes().(*ActivityNotificationIEsValue_IdRanpagingFailure); ok {
		return x.IdRanpagingFailure
	}
	return xnap_ies.RanpagingFailure(0)
}

type isActivityNotificationIEsValue_ActivityNotificationIes interface {
	isActivityNotificationIEsValue_ActivityNotificationIes()
}

type ActivityNotificationIEsValue_IdMNgRannodeUexnApid struct {
	// @inject_tag: aper:"choiceIdx:1,"
	IdMNgRannodeUexnApid *xnap_ies.NgRAnnodeUexnApid `protobuf:"bytes,1,opt,name=id_m_ng_rannode_uexn_apid,json=id-M-NG-RANnodeUEXnAPID,proto3,oneof" aper:"choiceIdx:1,"`
}

type ActivityNotificationIEsValue_IdSNgRannodeUexnApid struct {
	// @inject_tag: aper:"choiceIdx:2,"
	IdSNgRannodeUexnApid *xnap_ies.NgRAnnodeUexnApid `protobuf:"bytes,2,opt,name=id_s_ng_rannode_uexn_apid,json=id-S-NG-RANnodeUEXnAPID,proto3,oneof" aper:"choiceIdx:2,"`
}

type ActivityNotificationIEsValue_IdUserPlaneTrafficActivityReport struct {
	// @inject_tag: aper:"choiceIdx:3,valueExt,valueLB:0,valueUB:1,"
	IdUserPlaneTrafficActivityReport xnap_ies.UserPlaneTrafficActivityReport `protobuf:"varint,3,opt,name=id_user_plane_traffic_activity_report,json=id-UserPlaneTrafficActivityReport,proto3,enum=xnap.v1.UserPlaneTrafficActivityReport,oneof" aper:"choiceIdx:3,valueExt,valueLB:0,valueUB:1,"`
}

type ActivityNotificationIEsValue_IdPdusessionResourcesActivityNotifyList struct {
	// @inject_tag: aper:"choiceIdx:4,"
	IdPdusessionResourcesActivityNotifyList *PdusessionResourcesActivityNotifyList `protobuf:"bytes,4,opt,name=id_pdusession_resources_activity_notify_list,json=id-PDUSessionResourcesActivityNotifyList,proto3,oneof" aper:"choiceIdx:4,"`
}

type ActivityNotificationIEsValue_IdRanpagingFailure struct {
	// @inject_tag: aper:"choiceIdx:5,valueExt,valueLB:0,valueUB:0,"
	IdRanpagingFailure xnap_ies.RanpagingFailure `protobuf:"varint,5,opt,name=id_ranpaging_failure,json=id-RANPagingFailure,proto3,enum=xnap.v1.RanpagingFailure,oneof" aper:"choiceIdx:5,valueExt,valueLB:0,valueUB:0,"`
}

func (*ActivityNotificationIEsValue_IdMNgRannodeUexnApid) isActivityNotificationIEsValue_ActivityNotificationIes() {
}

func (*ActivityNotificationIEsValue_IdSNgRannodeUexnApid) isActivityNotificationIEsValue_ActivityNotificationIes() {
}

func (*ActivityNotificationIEsValue_IdUserPlaneTrafficActivityReport) isActivityNotificationIEsValue_ActivityNotificationIes() {
}

func (*ActivityNotificationIEsValue_IdPdusessionResourcesActivityNotifyList) isActivityNotificationIEsValue_ActivityNotificationIes() {
}

func (*ActivityNotificationIEsValue_IdRanpagingFailure) isActivityNotificationIEsValue_ActivityNotificationIes() {
}

// concrete instance(s) of class XNAP-PROTOCOL-IES from xnap_v1.asn1:2217
// @inject_tag: aper:"valueExt"
// {ActivityNotification-IEs}
type ActivityNotificationIEs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"unique,"
	Id *xnap_commondatatypes.ProtocolIeID `protobuf:"bytes,1,opt,name=id,json=&id,proto3" json:"id,omitempty" aper:"unique,"`
	// @inject_tag: aper:"valueLB:0,valueUB:2,"
	Criticality xnap_commondatatypes.Criticality `protobuf:"varint,2,opt,name=criticality,json=&criticality,proto3,enum=xnap.v1.Criticality" json:"criticality,omitempty" aper:"valueLB:0,valueUB:2,"`
	// @inject_tag: aper:"canonicalOrder,"
	Value *ActivityNotificationIEsValue `protobuf:"bytes,3,opt,name=value,json=&Value,proto3" json:"value,omitempty" aper:"canonicalOrder,"`
}

func (x *ActivityNotificationIEs) Reset() {
	*x = ActivityNotificationIEs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[192]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActivityNotificationIEs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActivityNotificationIEs) ProtoMessage() {}

func (x *ActivityNotificationIEs) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[192]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActivityNotificationIEs.ProtoReflect.Descriptor instead.
func (*ActivityNotificationIEs) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_pdu_contents_proto_rawDescGZIP(), []int{192}
}

func (x *ActivityNotificationIEs) GetId() *xnap_commondatatypes.ProtocolIeID {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ActivityNotificationIEs) GetCriticality() xnap_commondatatypes.Criticality {
	if x != nil {
		return x.Criticality
	}
	return xnap_commondatatypes.Criticality(0)
}

func (x *ActivityNotificationIEs) GetValue() *ActivityNotificationIEsValue {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:2213
// @inject_tag: aper:"valueExt"
// {ActivityNotification}
type ActivityNotification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProtocolIes []*ActivityNotificationIEs `protobuf:"bytes,1,rep,name=protocol_ies,json=protocolIEs,proto3" json:"protocol_ies,omitempty"`
}

func (x *ActivityNotification) Reset() {
	*x = ActivityNotification{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[193]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActivityNotification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActivityNotification) ProtoMessage() {}

func (x *ActivityNotification) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[193]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActivityNotification.ProtoReflect.Descriptor instead.
func (*ActivityNotification) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_pdu_contents_proto_rawDescGZIP(), []int{193}
}

func (x *ActivityNotification) GetProtocolIes() []*ActivityNotificationIEs {
	if x != nil {
		return x.ProtocolIes
	}
	return nil
}

// sequence from xnap_v1.asn1:2228
// {PDUSessionResourcesActivityNotifyList}
type PdusessionResourcesActivityNotifyList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"valueExt,sizeLB:1,sizeUB:256,"
	Value []*PdusessionResourcesActivityNotifyItem `protobuf:"bytes,1,rep,name=value,proto3" json:"value,omitempty" aper:"valueExt,sizeLB:1,sizeUB:256,"`
}

func (x *PdusessionResourcesActivityNotifyList) Reset() {
	*x = PdusessionResourcesActivityNotifyList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[194]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PdusessionResourcesActivityNotifyList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PdusessionResourcesActivityNotifyList) ProtoMessage() {}

func (x *PdusessionResourcesActivityNotifyList) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[194]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PdusessionResourcesActivityNotifyList.ProtoReflect.Descriptor instead.
func (*PdusessionResourcesActivityNotifyList) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_pdu_contents_proto_rawDescGZIP(), []int{194}
}

func (x *PdusessionResourcesActivityNotifyList) GetValue() []*PdusessionResourcesActivityNotifyItem {
	if x != nil {
		return x.Value
	}
	return nil
}

// value set from xnap_v1.asn1:2236
// {PDUSessionResourcesActivityNotify-Item-ExtIEs}
type PdusessionResourcesActivityNotifyItemExtIes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *emptypb.Empty `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *PdusessionResourcesActivityNotifyItemExtIes) Reset() {
	*x = PdusessionResourcesActivityNotifyItemExtIes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[195]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PdusessionResourcesActivityNotifyItemExtIes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PdusessionResourcesActivityNotifyItemExtIes) ProtoMessage() {}

func (x *PdusessionResourcesActivityNotifyItemExtIes) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[195]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PdusessionResourcesActivityNotifyItemExtIes.ProtoReflect.Descriptor instead.
func (*PdusessionResourcesActivityNotifyItemExtIes) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_pdu_contents_proto_rawDescGZIP(), []int{195}
}

func (x *PdusessionResourcesActivityNotifyItemExtIes) GetValue() *emptypb.Empty {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:2229
// @inject_tag: aper:"valueExt"
// {PDUSessionResourcesActivityNotify-Item}
type PdusessionResourcesActivityNotifyItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PduSessionId *xnap_ies.PdusessionID `protobuf:"bytes,1,opt,name=pdu_session_id,json=pduSessionId,proto3" json:"pdu_session_id,omitempty"`
	// @inject_tag: aper:"optional,valueExt,valueLB:0,valueUB:1,"
	PduSessionLevelUpactivityreport *xnap_ies.UserPlaneTrafficActivityReport `protobuf:"varint,2,opt,name=pdu_session_level_upactivityreport,json=pduSessionLevelUPactivityreport,proto3,enum=xnap.v1.UserPlaneTrafficActivityReport,oneof" json:"pdu_session_level_upactivityreport,omitempty" aper:"optional,valueExt,valueLB:0,valueUB:1,"`
	// @inject_tag: aper:"optional,"
	QosFlowsActivityNotifyList *QoSflowsActivityNotifyList `protobuf:"bytes,3,opt,name=qos_flows_activity_notify_list,json=qosFlowsActivityNotifyList,proto3,oneof" json:"qos_flows_activity_notify_list,omitempty" aper:"optional,"`
	// @inject_tag: aper:"optional,sizeLB:1,"
	IEExtensions []*PdusessionResourcesActivityNotifyItemExtIes `protobuf:"bytes,4,rep,name=i_e_extensions,json=iE-Extensions,proto3" json:"i_e_extensions,omitempty" aper:"optional,sizeLB:1,"`
}

func (x *PdusessionResourcesActivityNotifyItem) Reset() {
	*x = PdusessionResourcesActivityNotifyItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[196]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PdusessionResourcesActivityNotifyItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PdusessionResourcesActivityNotifyItem) ProtoMessage() {}

func (x *PdusessionResourcesActivityNotifyItem) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[196]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PdusessionResourcesActivityNotifyItem.ProtoReflect.Descriptor instead.
func (*PdusessionResourcesActivityNotifyItem) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_pdu_contents_proto_rawDescGZIP(), []int{196}
}

func (x *PdusessionResourcesActivityNotifyItem) GetPduSessionId() *xnap_ies.PdusessionID {
	if x != nil {
		return x.PduSessionId
	}
	return nil
}

func (x *PdusessionResourcesActivityNotifyItem) GetPduSessionLevelUpactivityreport() xnap_ies.UserPlaneTrafficActivityReport {
	if x != nil && x.PduSessionLevelUpactivityreport != nil {
		return *x.PduSessionLevelUpactivityreport
	}
	return xnap_ies.UserPlaneTrafficActivityReport(0)
}

func (x *PdusessionResourcesActivityNotifyItem) GetQosFlowsActivityNotifyList() *QoSflowsActivityNotifyList {
	if x != nil {
		return x.QosFlowsActivityNotifyList
	}
	return nil
}

func (x *PdusessionResourcesActivityNotifyItem) GetIEExtensions() []*PdusessionResourcesActivityNotifyItemExtIes {
	if x != nil {
		return x.IEExtensions
	}
	return nil
}

// sequence from xnap_v1.asn1:2242
// {QoSFlowsActivityNotifyList}
type QoSflowsActivityNotifyList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"valueExt,sizeLB:1,sizeUB:64,"
	Value []*QoSflowsActivityNotifyItem `protobuf:"bytes,1,rep,name=value,proto3" json:"value,omitempty" aper:"valueExt,sizeLB:1,sizeUB:64,"`
}

func (x *QoSflowsActivityNotifyList) Reset() {
	*x = QoSflowsActivityNotifyList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[197]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QoSflowsActivityNotifyList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QoSflowsActivityNotifyList) ProtoMessage() {}

func (x *QoSflowsActivityNotifyList) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[197]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QoSflowsActivityNotifyList.ProtoReflect.Descriptor instead.
func (*QoSflowsActivityNotifyList) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_pdu_contents_proto_rawDescGZIP(), []int{197}
}

func (x *QoSflowsActivityNotifyList) GetValue() []*QoSflowsActivityNotifyItem {
	if x != nil {
		return x.Value
	}
	return nil
}

// value set from xnap_v1.asn1:2249
// {QoSFlowsActivityNotifyItem-ExtIEs}
type QoSflowsActivityNotifyItemExtIes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *emptypb.Empty `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *QoSflowsActivityNotifyItemExtIes) Reset() {
	*x = QoSflowsActivityNotifyItemExtIes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[198]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QoSflowsActivityNotifyItemExtIes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QoSflowsActivityNotifyItemExtIes) ProtoMessage() {}

func (x *QoSflowsActivityNotifyItemExtIes) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[198]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QoSflowsActivityNotifyItemExtIes.ProtoReflect.Descriptor instead.
func (*QoSflowsActivityNotifyItemExtIes) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_pdu_contents_proto_rawDescGZIP(), []int{198}
}

func (x *QoSflowsActivityNotifyItemExtIes) GetValue() *emptypb.Empty {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:2243
// @inject_tag: aper:"valueExt"
// {QoSFlowsActivityNotifyItem}
type QoSflowsActivityNotifyItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	QosFlowIdentifier *xnap_ies.QoSflowIdentifier `protobuf:"bytes,1,opt,name=qos_flow_identifier,json=qosFlowIdentifier,proto3" json:"qos_flow_identifier,omitempty"`
	// @inject_tag: aper:"valueExt,valueLB:0,valueUB:1,"
	PduSessionLevelUpactivityreport xnap_ies.UserPlaneTrafficActivityReport `protobuf:"varint,2,opt,name=pdu_session_level_upactivityreport,json=pduSessionLevelUPactivityreport,proto3,enum=xnap.v1.UserPlaneTrafficActivityReport" json:"pdu_session_level_upactivityreport,omitempty" aper:"valueExt,valueLB:0,valueUB:1,"`
	// @inject_tag: aper:"optional,sizeLB:1,"
	IEExtensions []*QoSflowsActivityNotifyItemExtIes `protobuf:"bytes,3,rep,name=i_e_extensions,json=iE-Extensions,proto3" json:"i_e_extensions,omitempty" aper:"optional,sizeLB:1,"`
}

func (x *QoSflowsActivityNotifyItem) Reset() {
	*x = QoSflowsActivityNotifyItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[199]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QoSflowsActivityNotifyItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QoSflowsActivityNotifyItem) ProtoMessage() {}

func (x *QoSflowsActivityNotifyItem) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[199]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QoSflowsActivityNotifyItem.ProtoReflect.Descriptor instead.
func (*QoSflowsActivityNotifyItem) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_pdu_contents_proto_rawDescGZIP(), []int{199}
}

func (x *QoSflowsActivityNotifyItem) GetQosFlowIdentifier() *xnap_ies.QoSflowIdentifier {
	if x != nil {
		return x.QosFlowIdentifier
	}
	return nil
}

func (x *QoSflowsActivityNotifyItem) GetPduSessionLevelUpactivityreport() xnap_ies.UserPlaneTrafficActivityReport {
	if x != nil {
		return x.PduSessionLevelUpactivityreport
	}
	return xnap_ies.UserPlaneTrafficActivityReport(0)
}

func (x *QoSflowsActivityNotifyItem) GetIEExtensions() []*QoSflowsActivityNotifyItemExtIes {
	if x != nil {
		return x.IEExtensions
	}
	return nil
}

// value set from xnap_v1.asn1:2264
// {XnSetupRequest-IEs&Value}
type XnSetupRequestIEsValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// value set translated as choice from xnap_v1.asn1:2264
	//
	// Types that are assignable to XnSetupRequestIes:
	//	*XnSetupRequestIEsValue_IdGlobalNgRanNodeId
	//	*XnSetupRequestIEsValue_IdTaisupportList
	//	*XnSetupRequestIEsValue_IdAmfRegionInformation
	//	*XnSetupRequestIEsValue_IdListOfServedCellsNr
	//	*XnSetupRequestIEsValue_IdListOfServedCellsEUtra
	//	*XnSetupRequestIEsValue_IdInterfaceInstanceIndication
	//	*XnSetupRequestIEsValue_IdTnlconfigurationInfo
	//	*XnSetupRequestIEsValue_IdPartialListIndicatorNr
	//	*XnSetupRequestIEsValue_IdCellAndCapacityAssistanceInfoNr
	//	*XnSetupRequestIEsValue_IdPartialListIndicatorEutra
	//	*XnSetupRequestIEsValue_IdCellAndCapacityAssistanceInfoEutra
	XnSetupRequestIes isXnSetupRequestIEsValue_XnSetupRequestIes `protobuf_oneof:"xn_setup_request_ies"`
}

func (x *XnSetupRequestIEsValue) Reset() {
	*x = XnSetupRequestIEsValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[200]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *XnSetupRequestIEsValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*XnSetupRequestIEsValue) ProtoMessage() {}

func (x *XnSetupRequestIEsValue) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[200]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use XnSetupRequestIEsValue.ProtoReflect.Descriptor instead.
func (*XnSetupRequestIEsValue) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_pdu_contents_proto_rawDescGZIP(), []int{200}
}

func (m *XnSetupRequestIEsValue) GetXnSetupRequestIes() isXnSetupRequestIEsValue_XnSetupRequestIes {
	if m != nil {
		return m.XnSetupRequestIes
	}
	return nil
}

func (x *XnSetupRequestIEsValue) GetIdGlobalNgRanNodeId() *xnap_ies.GlobalNgRAnnodeID {
	if x, ok := x.GetXnSetupRequestIes().(*XnSetupRequestIEsValue_IdGlobalNgRanNodeId); ok {
		return x.IdGlobalNgRanNodeId
	}
	return nil
}

func (x *XnSetupRequestIEsValue) GetIdTaisupportList() *xnap_ies.TaisupportList {
	if x, ok := x.GetXnSetupRequestIes().(*XnSetupRequestIEsValue_IdTaisupportList); ok {
		return x.IdTaisupportList
	}
	return nil
}

func (x *XnSetupRequestIEsValue) GetIdAmfRegionInformation() *xnap_ies.AmfRegionInformation {
	if x, ok := x.GetXnSetupRequestIes().(*XnSetupRequestIEsValue_IdAmfRegionInformation); ok {
		return x.IdAmfRegionInformation
	}
	return nil
}

func (x *XnSetupRequestIEsValue) GetIdListOfServedCellsNr() *xnap_ies.ServedCellsNR {
	if x, ok := x.GetXnSetupRequestIes().(*XnSetupRequestIEsValue_IdListOfServedCellsNr); ok {
		return x.IdListOfServedCellsNr
	}
	return nil
}

func (x *XnSetupRequestIEsValue) GetIdListOfServedCellsEUtra() *xnap_ies.ServedCellsEUTra {
	if x, ok := x.GetXnSetupRequestIes().(*XnSetupRequestIEsValue_IdListOfServedCellsEUtra); ok {
		return x.IdListOfServedCellsEUtra
	}
	return nil
}

func (x *XnSetupRequestIEsValue) GetIdInterfaceInstanceIndication() *xnap_ies.InterfaceInstanceIndication {
	if x, ok := x.GetXnSetupRequestIes().(*XnSetupRequestIEsValue_IdInterfaceInstanceIndication); ok {
		return x.IdInterfaceInstanceIndication
	}
	return nil
}

func (x *XnSetupRequestIEsValue) GetIdTnlconfigurationInfo() *xnap_ies.TnlconfigurationInfo {
	if x, ok := x.GetXnSetupRequestIes().(*XnSetupRequestIEsValue_IdTnlconfigurationInfo); ok {
		return x.IdTnlconfigurationInfo
	}
	return nil
}

func (x *XnSetupRequestIEsValue) GetIdPartialListIndicatorNr() xnap_ies.PartialListIndicator {
	if x, ok := x.GetXnSetupRequestIes().(*XnSetupRequestIEsValue_IdPartialListIndicatorNr); ok {
		return x.IdPartialListIndicatorNr
	}
	return xnap_ies.PartialListIndicator(0)
}

func (x *XnSetupRequestIEsValue) GetIdCellAndCapacityAssistanceInfoNr() *xnap_ies.CellAndCapacityAssistanceInfoNR {
	if x, ok := x.GetXnSetupRequestIes().(*XnSetupRequestIEsValue_IdCellAndCapacityAssistanceInfoNr); ok {
		return x.IdCellAndCapacityAssistanceInfoNr
	}
	return nil
}

func (x *XnSetupRequestIEsValue) GetIdPartialListIndicatorEutra() xnap_ies.PartialListIndicator {
	if x, ok := x.GetXnSetupRequestIes().(*XnSetupRequestIEsValue_IdPartialListIndicatorEutra); ok {
		return x.IdPartialListIndicatorEutra
	}
	return xnap_ies.PartialListIndicator(0)
}

func (x *XnSetupRequestIEsValue) GetIdCellAndCapacityAssistanceInfoEutra() *xnap_ies.CellAndCapacityAssistanceInfoEUtra {
	if x, ok := x.GetXnSetupRequestIes().(*XnSetupRequestIEsValue_IdCellAndCapacityAssistanceInfoEutra); ok {
		return x.IdCellAndCapacityAssistanceInfoEutra
	}
	return nil
}

type isXnSetupRequestIEsValue_XnSetupRequestIes interface {
	isXnSetupRequestIEsValue_XnSetupRequestIes()
}

type XnSetupRequestIEsValue_IdGlobalNgRanNodeId struct {
	// @inject_tag: aper:"choiceIdx:1,"
	IdGlobalNgRanNodeId *xnap_ies.GlobalNgRAnnodeID `protobuf:"bytes,1,opt,name=id_global_ng_ran_node_id,json=id-GlobalNG-RAN-node-ID,proto3,oneof" aper:"choiceIdx:1,"`
}

type XnSetupRequestIEsValue_IdTaisupportList struct {
	// @inject_tag: aper:"choiceIdx:2,"
	IdTaisupportList *xnap_ies.TaisupportList `protobuf:"bytes,2,opt,name=id_taisupport_list,json=id-TAISupport-list,proto3,oneof" aper:"choiceIdx:2,"`
}

type XnSetupRequestIEsValue_IdAmfRegionInformation struct {
	// @inject_tag: aper:"choiceIdx:3,"
	IdAmfRegionInformation *xnap_ies.AmfRegionInformation `protobuf:"bytes,3,opt,name=id_amf_region_information,json=id-AMF-Region-Information,proto3,oneof" aper:"choiceIdx:3,"`
}

type XnSetupRequestIEsValue_IdListOfServedCellsNr struct {
	// @inject_tag: aper:"choiceIdx:4,"
	IdListOfServedCellsNr *xnap_ies.ServedCellsNR `protobuf:"bytes,4,opt,name=id_list_of_served_cells_nr,json=id-List-of-served-cells-NR,proto3,oneof" aper:"choiceIdx:4,"`
}

type XnSetupRequestIEsValue_IdListOfServedCellsEUtra struct {
	// @inject_tag: aper:"choiceIdx:5,"
	IdListOfServedCellsEUtra *xnap_ies.ServedCellsEUTra `protobuf:"bytes,5,opt,name=id_list_of_served_cells_e_utra,json=id-List-of-served-cells-E-UTRA,proto3,oneof" aper:"choiceIdx:5,"`
}

type XnSetupRequestIEsValue_IdInterfaceInstanceIndication struct {
	// @inject_tag: aper:"choiceIdx:6,"
	IdInterfaceInstanceIndication *xnap_ies.InterfaceInstanceIndication `protobuf:"bytes,6,opt,name=id_interface_instance_indication,json=id-InterfaceInstanceIndication,proto3,oneof" aper:"choiceIdx:6,"`
}

type XnSetupRequestIEsValue_IdTnlconfigurationInfo struct {
	// @inject_tag: aper:"choiceIdx:7,valueExt,"
	IdTnlconfigurationInfo *xnap_ies.TnlconfigurationInfo `protobuf:"bytes,7,opt,name=id_tnlconfiguration_info,json=id-TNLConfigurationInfo,proto3,oneof" aper:"choiceIdx:7,valueExt,"`
}

type XnSetupRequestIEsValue_IdPartialListIndicatorNr struct {
	// @inject_tag: aper:"choiceIdx:8,valueExt,valueLB:0,valueUB:0,"
	IdPartialListIndicatorNr xnap_ies.PartialListIndicator `protobuf:"varint,8,opt,name=id_partial_list_indicator_nr,json=id-PartialListIndicator-NR,proto3,enum=xnap.v1.PartialListIndicator,oneof" aper:"choiceIdx:8,valueExt,valueLB:0,valueUB:0,"`
}

type XnSetupRequestIEsValue_IdCellAndCapacityAssistanceInfoNr struct {
	// @inject_tag: aper:"choiceIdx:9,valueExt,"
	IdCellAndCapacityAssistanceInfoNr *xnap_ies.CellAndCapacityAssistanceInfoNR `protobuf:"bytes,9,opt,name=id_cell_and_capacity_assistance_info_nr,json=id-CellAndCapacityAssistanceInfo-NR,proto3,oneof" aper:"choiceIdx:9,valueExt,"`
}

type XnSetupRequestIEsValue_IdPartialListIndicatorEutra struct {
	// @inject_tag: aper:"choiceIdx:10,valueExt,valueLB:0,valueUB:0,"
	IdPartialListIndicatorEutra xnap_ies.PartialListIndicator `protobuf:"varint,10,opt,name=id_partial_list_indicator_eutra,json=id-PartialListIndicator-EUTRA,proto3,enum=xnap.v1.PartialListIndicator,oneof" aper:"choiceIdx:10,valueExt,valueLB:0,valueUB:0,"`
}

type XnSetupRequestIEsValue_IdCellAndCapacityAssistanceInfoEutra struct {
	// @inject_tag: aper:"choiceIdx:11,valueExt,"
	IdCellAndCapacityAssistanceInfoEutra *xnap_ies.CellAndCapacityAssistanceInfoEUtra `protobuf:"bytes,11,opt,name=id_cell_and_capacity_assistance_info_eutra,json=id-CellAndCapacityAssistanceInfo-EUTRA,proto3,oneof" aper:"choiceIdx:11,valueExt,"`
}

func (*XnSetupRequestIEsValue_IdGlobalNgRanNodeId) isXnSetupRequestIEsValue_XnSetupRequestIes() {}

func (*XnSetupRequestIEsValue_IdTaisupportList) isXnSetupRequestIEsValue_XnSetupRequestIes() {}

func (*XnSetupRequestIEsValue_IdAmfRegionInformation) isXnSetupRequestIEsValue_XnSetupRequestIes() {}

func (*XnSetupRequestIEsValue_IdListOfServedCellsNr) isXnSetupRequestIEsValue_XnSetupRequestIes() {}

func (*XnSetupRequestIEsValue_IdListOfServedCellsEUtra) isXnSetupRequestIEsValue_XnSetupRequestIes() {
}

func (*XnSetupRequestIEsValue_IdInterfaceInstanceIndication) isXnSetupRequestIEsValue_XnSetupRequestIes() {
}

func (*XnSetupRequestIEsValue_IdTnlconfigurationInfo) isXnSetupRequestIEsValue_XnSetupRequestIes() {}

func (*XnSetupRequestIEsValue_IdPartialListIndicatorNr) isXnSetupRequestIEsValue_XnSetupRequestIes() {
}

func (*XnSetupRequestIEsValue_IdCellAndCapacityAssistanceInfoNr) isXnSetupRequestIEsValue_XnSetupRequestIes() {
}

func (*XnSetupRequestIEsValue_IdPartialListIndicatorEutra) isXnSetupRequestIEsValue_XnSetupRequestIes() {
}

func (*XnSetupRequestIEsValue_IdCellAndCapacityAssistanceInfoEutra) isXnSetupRequestIEsValue_XnSetupRequestIes() {
}

// concrete instance(s) of class XNAP-PROTOCOL-IES from xnap_v1.asn1:2264
// @inject_tag: aper:"valueExt"
// {XnSetupRequest-IEs}
type XnSetupRequestIEs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"unique,valueLB:0,valueUB:255"
	Id int32 `protobuf:"varint,1,opt,name=id,json=&id,proto3" json:"id,omitempty" aper:"unique,valueLB:0,valueUB:255"`
	// @inject_tag: aper:"valueLB:0,valueUB:2,"
	Criticality xnap_commondatatypes.Criticality `protobuf:"varint,2,opt,name=criticality,json=&criticality,proto3,enum=xnap.v1.Criticality" json:"criticality,omitempty" aper:"valueLB:0,valueUB:2,"`
	// @inject_tag: aper:"canonicalOrder,"
	Value *XnSetupRequestIEsValue `protobuf:"bytes,3,opt,name=value,json=&Value,proto3" json:"value,omitempty" aper:"canonicalOrder,"`
}

func (x *XnSetupRequestIEs) Reset() {
	*x = XnSetupRequestIEs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[201]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *XnSetupRequestIEs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*XnSetupRequestIEs) ProtoMessage() {}

func (x *XnSetupRequestIEs) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[201]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use XnSetupRequestIEs.ProtoReflect.Descriptor instead.
func (*XnSetupRequestIEs) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_pdu_contents_proto_rawDescGZIP(), []int{201}
}

func (x *XnSetupRequestIEs) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *XnSetupRequestIEs) GetCriticality() xnap_commondatatypes.Criticality {
	if x != nil {
		return x.Criticality
	}
	return xnap_commondatatypes.Criticality(0)
}

func (x *XnSetupRequestIEs) GetValue() *XnSetupRequestIEsValue {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:2260
// @inject_tag: aper:"valueExt"
// {XnSetupRequest}
type XnSetupRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProtocolIes []*XnSetupRequestIEs `protobuf:"bytes,1,rep,name=protocol_ies,json=protocolIEs,proto3" json:"protocol_ies,omitempty"`
}

func (x *XnSetupRequest) Reset() {
	*x = XnSetupRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[202]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *XnSetupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*XnSetupRequest) ProtoMessage() {}

func (x *XnSetupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[202]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use XnSetupRequest.ProtoReflect.Descriptor instead.
func (*XnSetupRequest) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_pdu_contents_proto_rawDescGZIP(), []int{202}
}

func (x *XnSetupRequest) GetProtocolIes() []*XnSetupRequestIEs {
	if x != nil {
		return x.ProtocolIes
	}
	return nil
}

// value set from xnap_v1.asn1:2290
// {XnSetupResponse-IEs&Value}
type XnSetupResponseIEsValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// value set translated as choice from xnap_v1.asn1:2290
	//
	// Types that are assignable to XnSetupResponseIes:
	//	*XnSetupResponseIEsValue_IdGlobalNgRanNodeId
	//	*XnSetupResponseIEsValue_IdTaisupportList
	//	*XnSetupResponseIEsValue_IdListOfServedCellsNr
	//	*XnSetupResponseIEsValue_IdListOfServedCellsEUtra
	//	*XnSetupResponseIEsValue_IdCriticalityDiagnostics
	//	*XnSetupResponseIEsValue_IdAmfRegionInformation
	//	*XnSetupResponseIEsValue_IdInterfaceInstanceIndication
	//	*XnSetupResponseIEsValue_IdTnlconfigurationInfo
	//	*XnSetupResponseIEsValue_IdPartialListIndicatorNr
	//	*XnSetupResponseIEsValue_IdCellAndCapacityAssistanceInfoNr
	//	*XnSetupResponseIEsValue_IdPartialListIndicatorEutra
	//	*XnSetupResponseIEsValue_IdCellAndCapacityAssistanceInfoEutra
	XnSetupResponseIes isXnSetupResponseIEsValue_XnSetupResponseIes `protobuf_oneof:"xn_setup_response_ies"`
}

func (x *XnSetupResponseIEsValue) Reset() {
	*x = XnSetupResponseIEsValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[203]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *XnSetupResponseIEsValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*XnSetupResponseIEsValue) ProtoMessage() {}

func (x *XnSetupResponseIEsValue) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[203]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use XnSetupResponseIEsValue.ProtoReflect.Descriptor instead.
func (*XnSetupResponseIEsValue) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_pdu_contents_proto_rawDescGZIP(), []int{203}
}

func (m *XnSetupResponseIEsValue) GetXnSetupResponseIes() isXnSetupResponseIEsValue_XnSetupResponseIes {
	if m != nil {
		return m.XnSetupResponseIes
	}
	return nil
}

func (x *XnSetupResponseIEsValue) GetIdGlobalNgRanNodeId() *xnap_ies.GlobalNgRAnnodeID {
	if x, ok := x.GetXnSetupResponseIes().(*XnSetupResponseIEsValue_IdGlobalNgRanNodeId); ok {
		return x.IdGlobalNgRanNodeId
	}
	return nil
}

func (x *XnSetupResponseIEsValue) GetIdTaisupportList() *xnap_ies.TaisupportList {
	if x, ok := x.GetXnSetupResponseIes().(*XnSetupResponseIEsValue_IdTaisupportList); ok {
		return x.IdTaisupportList
	}
	return nil
}

func (x *XnSetupResponseIEsValue) GetIdListOfServedCellsNr() *xnap_ies.ServedCellsNR {
	if x, ok := x.GetXnSetupResponseIes().(*XnSetupResponseIEsValue_IdListOfServedCellsNr); ok {
		return x.IdListOfServedCellsNr
	}
	return nil
}

func (x *XnSetupResponseIEsValue) GetIdListOfServedCellsEUtra() *xnap_ies.ServedCellsEUTra {
	if x, ok := x.GetXnSetupResponseIes().(*XnSetupResponseIEsValue_IdListOfServedCellsEUtra); ok {
		return x.IdListOfServedCellsEUtra
	}
	return nil
}

func (x *XnSetupResponseIEsValue) GetIdCriticalityDiagnostics() *xnap_ies.CriticalityDiagnostics {
	if x, ok := x.GetXnSetupResponseIes().(*XnSetupResponseIEsValue_IdCriticalityDiagnostics); ok {
		return x.IdCriticalityDiagnostics
	}
	return nil
}

func (x *XnSetupResponseIEsValue) GetIdAmfRegionInformation() *xnap_ies.AmfRegionInformation {
	if x, ok := x.GetXnSetupResponseIes().(*XnSetupResponseIEsValue_IdAmfRegionInformation); ok {
		return x.IdAmfRegionInformation
	}
	return nil
}

func (x *XnSetupResponseIEsValue) GetIdInterfaceInstanceIndication() *xnap_ies.InterfaceInstanceIndication {
	if x, ok := x.GetXnSetupResponseIes().(*XnSetupResponseIEsValue_IdInterfaceInstanceIndication); ok {
		return x.IdInterfaceInstanceIndication
	}
	return nil
}

func (x *XnSetupResponseIEsValue) GetIdTnlconfigurationInfo() *xnap_ies.TnlconfigurationInfo {
	if x, ok := x.GetXnSetupResponseIes().(*XnSetupResponseIEsValue_IdTnlconfigurationInfo); ok {
		return x.IdTnlconfigurationInfo
	}
	return nil
}

func (x *XnSetupResponseIEsValue) GetIdPartialListIndicatorNr() xnap_ies.PartialListIndicator {
	if x, ok := x.GetXnSetupResponseIes().(*XnSetupResponseIEsValue_IdPartialListIndicatorNr); ok {
		return x.IdPartialListIndicatorNr
	}
	return xnap_ies.PartialListIndicator(0)
}

func (x *XnSetupResponseIEsValue) GetIdCellAndCapacityAssistanceInfoNr() *xnap_ies.CellAndCapacityAssistanceInfoNR {
	if x, ok := x.GetXnSetupResponseIes().(*XnSetupResponseIEsValue_IdCellAndCapacityAssistanceInfoNr); ok {
		return x.IdCellAndCapacityAssistanceInfoNr
	}
	return nil
}

func (x *XnSetupResponseIEsValue) GetIdPartialListIndicatorEutra() xnap_ies.PartialListIndicator {
	if x, ok := x.GetXnSetupResponseIes().(*XnSetupResponseIEsValue_IdPartialListIndicatorEutra); ok {
		return x.IdPartialListIndicatorEutra
	}
	return xnap_ies.PartialListIndicator(0)
}

func (x *XnSetupResponseIEsValue) GetIdCellAndCapacityAssistanceInfoEutra() *xnap_ies.CellAndCapacityAssistanceInfoEUtra {
	if x, ok := x.GetXnSetupResponseIes().(*XnSetupResponseIEsValue_IdCellAndCapacityAssistanceInfoEutra); ok {
		return x.IdCellAndCapacityAssistanceInfoEutra
	}
	return nil
}

type isXnSetupResponseIEsValue_XnSetupResponseIes interface {
	isXnSetupResponseIEsValue_XnSetupResponseIes()
}

type XnSetupResponseIEsValue_IdGlobalNgRanNodeId struct {
	// @inject_tag: aper:"choiceIdx:1,"
	IdGlobalNgRanNodeId *xnap_ies.GlobalNgRAnnodeID `protobuf:"bytes,1,opt,name=id_global_ng_ran_node_id,json=id-GlobalNG-RAN-node-ID,proto3,oneof" aper:"choiceIdx:1,"`
}

type XnSetupResponseIEsValue_IdTaisupportList struct {
	// @inject_tag: aper:"choiceIdx:2,"
	IdTaisupportList *xnap_ies.TaisupportList `protobuf:"bytes,2,opt,name=id_taisupport_list,json=id-TAISupport-list,proto3,oneof" aper:"choiceIdx:2,"`
}

type XnSetupResponseIEsValue_IdListOfServedCellsNr struct {
	// @inject_tag: aper:"choiceIdx:3,"
	IdListOfServedCellsNr *xnap_ies.ServedCellsNR `protobuf:"bytes,3,opt,name=id_list_of_served_cells_nr,json=id-List-of-served-cells-NR,proto3,oneof" aper:"choiceIdx:3,"`
}

type XnSetupResponseIEsValue_IdListOfServedCellsEUtra struct {
	// @inject_tag: aper:"choiceIdx:4,"
	IdListOfServedCellsEUtra *xnap_ies.ServedCellsEUTra `protobuf:"bytes,4,opt,name=id_list_of_served_cells_e_utra,json=id-List-of-served-cells-E-UTRA,proto3,oneof" aper:"choiceIdx:4,"`
}

type XnSetupResponseIEsValue_IdCriticalityDiagnostics struct {
	// @inject_tag: aper:"choiceIdx:5,valueExt,"
	IdCriticalityDiagnostics *xnap_ies.CriticalityDiagnostics `protobuf:"bytes,5,opt,name=id_criticality_diagnostics,json=id-CriticalityDiagnostics,proto3,oneof" aper:"choiceIdx:5,valueExt,"`
}

type XnSetupResponseIEsValue_IdAmfRegionInformation struct {
	// @inject_tag: aper:"choiceIdx:6,"
	IdAmfRegionInformation *xnap_ies.AmfRegionInformation `protobuf:"bytes,6,opt,name=id_amf_region_information,json=id-AMF-Region-Information,proto3,oneof" aper:"choiceIdx:6,"`
}

type XnSetupResponseIEsValue_IdInterfaceInstanceIndication struct {
	// @inject_tag: aper:"choiceIdx:7,"
	IdInterfaceInstanceIndication *xnap_ies.InterfaceInstanceIndication `protobuf:"bytes,7,opt,name=id_interface_instance_indication,json=id-InterfaceInstanceIndication,proto3,oneof" aper:"choiceIdx:7,"`
}

type XnSetupResponseIEsValue_IdTnlconfigurationInfo struct {
	// @inject_tag: aper:"choiceIdx:8,valueExt,"
	IdTnlconfigurationInfo *xnap_ies.TnlconfigurationInfo `protobuf:"bytes,8,opt,name=id_tnlconfiguration_info,json=id-TNLConfigurationInfo,proto3,oneof" aper:"choiceIdx:8,valueExt,"`
}

type XnSetupResponseIEsValue_IdPartialListIndicatorNr struct {
	// @inject_tag: aper:"choiceIdx:9,valueExt,valueLB:0,valueUB:0,"
	IdPartialListIndicatorNr xnap_ies.PartialListIndicator `protobuf:"varint,9,opt,name=id_partial_list_indicator_nr,json=id-PartialListIndicator-NR,proto3,enum=xnap.v1.PartialListIndicator,oneof" aper:"choiceIdx:9,valueExt,valueLB:0,valueUB:0,"`
}

type XnSetupResponseIEsValue_IdCellAndCapacityAssistanceInfoNr struct {
	// @inject_tag: aper:"choiceIdx:10,valueExt,"
	IdCellAndCapacityAssistanceInfoNr *xnap_ies.CellAndCapacityAssistanceInfoNR `protobuf:"bytes,10,opt,name=id_cell_and_capacity_assistance_info_nr,json=id-CellAndCapacityAssistanceInfo-NR,proto3,oneof" aper:"choiceIdx:10,valueExt,"`
}

type XnSetupResponseIEsValue_IdPartialListIndicatorEutra struct {
	// @inject_tag: aper:"choiceIdx:11,valueExt,valueLB:0,valueUB:0,"
	IdPartialListIndicatorEutra xnap_ies.PartialListIndicator `protobuf:"varint,11,opt,name=id_partial_list_indicator_eutra,json=id-PartialListIndicator-EUTRA,proto3,enum=xnap.v1.PartialListIndicator,oneof" aper:"choiceIdx:11,valueExt,valueLB:0,valueUB:0,"`
}

type XnSetupResponseIEsValue_IdCellAndCapacityAssistanceInfoEutra struct {
	// @inject_tag: aper:"choiceIdx:12,valueExt,"
	IdCellAndCapacityAssistanceInfoEutra *xnap_ies.CellAndCapacityAssistanceInfoEUtra `protobuf:"bytes,12,opt,name=id_cell_and_capacity_assistance_info_eutra,json=id-CellAndCapacityAssistanceInfo-EUTRA,proto3,oneof" aper:"choiceIdx:12,valueExt,"`
}

func (*XnSetupResponseIEsValue_IdGlobalNgRanNodeId) isXnSetupResponseIEsValue_XnSetupResponseIes() {}

func (*XnSetupResponseIEsValue_IdTaisupportList) isXnSetupResponseIEsValue_XnSetupResponseIes() {}

func (*XnSetupResponseIEsValue_IdListOfServedCellsNr) isXnSetupResponseIEsValue_XnSetupResponseIes() {
}

func (*XnSetupResponseIEsValue_IdListOfServedCellsEUtra) isXnSetupResponseIEsValue_XnSetupResponseIes() {
}

func (*XnSetupResponseIEsValue_IdCriticalityDiagnostics) isXnSetupResponseIEsValue_XnSetupResponseIes() {
}

func (*XnSetupResponseIEsValue_IdAmfRegionInformation) isXnSetupResponseIEsValue_XnSetupResponseIes() {
}

func (*XnSetupResponseIEsValue_IdInterfaceInstanceIndication) isXnSetupResponseIEsValue_XnSetupResponseIes() {
}

func (*XnSetupResponseIEsValue_IdTnlconfigurationInfo) isXnSetupResponseIEsValue_XnSetupResponseIes() {
}

func (*XnSetupResponseIEsValue_IdPartialListIndicatorNr) isXnSetupResponseIEsValue_XnSetupResponseIes() {
}

func (*XnSetupResponseIEsValue_IdCellAndCapacityAssistanceInfoNr) isXnSetupResponseIEsValue_XnSetupResponseIes() {
}

func (*XnSetupResponseIEsValue_IdPartialListIndicatorEutra) isXnSetupResponseIEsValue_XnSetupResponseIes() {
}

func (*XnSetupResponseIEsValue_IdCellAndCapacityAssistanceInfoEutra) isXnSetupResponseIEsValue_XnSetupResponseIes() {
}

// concrete instance(s) of class XNAP-PROTOCOL-IES from xnap_v1.asn1:2290
// @inject_tag: aper:"valueExt"
// {XnSetupResponse-IEs}
type XnSetupResponseIEs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"unique,"
	Id *xnap_commondatatypes.ProtocolIeID `protobuf:"bytes,1,opt,name=id,json=&id,proto3" json:"id,omitempty" aper:"unique,"`
	// @inject_tag: aper:"valueLB:0,valueUB:2,"
	Criticality xnap_commondatatypes.Criticality `protobuf:"varint,2,opt,name=criticality,json=&criticality,proto3,enum=xnap.v1.Criticality" json:"criticality,omitempty" aper:"valueLB:0,valueUB:2,"`
	// @inject_tag: aper:"canonicalOrder,"
	Value *XnSetupResponseIEsValue `protobuf:"bytes,3,opt,name=value,json=&Value,proto3" json:"value,omitempty" aper:"canonicalOrder,"`
}

func (x *XnSetupResponseIEs) Reset() {
	*x = XnSetupResponseIEs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[204]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *XnSetupResponseIEs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*XnSetupResponseIEs) ProtoMessage() {}

func (x *XnSetupResponseIEs) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[204]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use XnSetupResponseIEs.ProtoReflect.Descriptor instead.
func (*XnSetupResponseIEs) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_pdu_contents_proto_rawDescGZIP(), []int{204}
}

func (x *XnSetupResponseIEs) GetId() *xnap_commondatatypes.ProtocolIeID {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *XnSetupResponseIEs) GetCriticality() xnap_commondatatypes.Criticality {
	if x != nil {
		return x.Criticality
	}
	return xnap_commondatatypes.Criticality(0)
}

func (x *XnSetupResponseIEs) GetValue() *XnSetupResponseIEsValue {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:2286
// @inject_tag: aper:"valueExt"
// {XnSetupResponse}
type XnSetupResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProtocolIes []*XnSetupResponseIEs `protobuf:"bytes,1,rep,name=protocol_ies,json=protocolIEs,proto3" json:"protocol_ies,omitempty"`
}

func (x *XnSetupResponse) Reset() {
	*x = XnSetupResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[205]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *XnSetupResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*XnSetupResponse) ProtoMessage() {}

func (x *XnSetupResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[205]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use XnSetupResponse.ProtoReflect.Descriptor instead.
func (*XnSetupResponse) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_pdu_contents_proto_rawDescGZIP(), []int{205}
}

func (x *XnSetupResponse) GetProtocolIes() []*XnSetupResponseIEs {
	if x != nil {
		return x.ProtocolIes
	}
	return nil
}

// value set from xnap_v1.asn1:2317
// {XnSetupFailure-IEs&Value}
type XnSetupFailureIEsValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// value set translated as choice from xnap_v1.asn1:2317
	//
	// Types that are assignable to XnSetupFailureIes:
	//	*XnSetupFailureIEsValue_IdCause
	//	*XnSetupFailureIEsValue_IdTimeToWait
	//	*XnSetupFailureIEsValue_IdCriticalityDiagnostics
	//	*XnSetupFailureIEsValue_IdInterfaceInstanceIndication
	//	*XnSetupFailureIEsValue_IdMessageOversizeNotification
	XnSetupFailureIes isXnSetupFailureIEsValue_XnSetupFailureIes `protobuf_oneof:"xn_setup_failure_ies"`
}

func (x *XnSetupFailureIEsValue) Reset() {
	*x = XnSetupFailureIEsValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[206]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *XnSetupFailureIEsValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*XnSetupFailureIEsValue) ProtoMessage() {}

func (x *XnSetupFailureIEsValue) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[206]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use XnSetupFailureIEsValue.ProtoReflect.Descriptor instead.
func (*XnSetupFailureIEsValue) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_pdu_contents_proto_rawDescGZIP(), []int{206}
}

func (m *XnSetupFailureIEsValue) GetXnSetupFailureIes() isXnSetupFailureIEsValue_XnSetupFailureIes {
	if m != nil {
		return m.XnSetupFailureIes
	}
	return nil
}

func (x *XnSetupFailureIEsValue) GetIdCause() *xnap_ies.Cause {
	if x, ok := x.GetXnSetupFailureIes().(*XnSetupFailureIEsValue_IdCause); ok {
		return x.IdCause
	}
	return nil
}

func (x *XnSetupFailureIEsValue) GetIdTimeToWait() xnap_ies.TimeToWait {
	if x, ok := x.GetXnSetupFailureIes().(*XnSetupFailureIEsValue_IdTimeToWait); ok {
		return x.IdTimeToWait
	}
	return xnap_ies.TimeToWait(0)
}

func (x *XnSetupFailureIEsValue) GetIdCriticalityDiagnostics() *xnap_ies.CriticalityDiagnostics {
	if x, ok := x.GetXnSetupFailureIes().(*XnSetupFailureIEsValue_IdCriticalityDiagnostics); ok {
		return x.IdCriticalityDiagnostics
	}
	return nil
}

func (x *XnSetupFailureIEsValue) GetIdInterfaceInstanceIndication() *xnap_ies.InterfaceInstanceIndication {
	if x, ok := x.GetXnSetupFailureIes().(*XnSetupFailureIEsValue_IdInterfaceInstanceIndication); ok {
		return x.IdInterfaceInstanceIndication
	}
	return nil
}

func (x *XnSetupFailureIEsValue) GetIdMessageOversizeNotification() *xnap_ies.MessageOversizeNotification {
	if x, ok := x.GetXnSetupFailureIes().(*XnSetupFailureIEsValue_IdMessageOversizeNotification); ok {
		return x.IdMessageOversizeNotification
	}
	return nil
}

type isXnSetupFailureIEsValue_XnSetupFailureIes interface {
	isXnSetupFailureIEsValue_XnSetupFailureIes()
}

type XnSetupFailureIEsValue_IdCause struct {
	// @inject_tag: aper:"choiceIdx:1,"
	IdCause *xnap_ies.Cause `protobuf:"bytes,1,opt,name=id_cause,json=id-Cause,proto3,oneof" aper:"choiceIdx:1,"`
}

type XnSetupFailureIEsValue_IdTimeToWait struct {
	// @inject_tag: aper:"choiceIdx:2,valueExt,valueLB:0,valueUB:5,"
	IdTimeToWait xnap_ies.TimeToWait `protobuf:"varint,2,opt,name=id_time_to_wait,json=id-TimeToWait,proto3,enum=xnap.v1.TimeToWait,oneof" aper:"choiceIdx:2,valueExt,valueLB:0,valueUB:5,"`
}

type XnSetupFailureIEsValue_IdCriticalityDiagnostics struct {
	// @inject_tag: aper:"choiceIdx:3,valueExt,"
	IdCriticalityDiagnostics *xnap_ies.CriticalityDiagnostics `protobuf:"bytes,3,opt,name=id_criticality_diagnostics,json=id-CriticalityDiagnostics,proto3,oneof" aper:"choiceIdx:3,valueExt,"`
}

type XnSetupFailureIEsValue_IdInterfaceInstanceIndication struct {
	// @inject_tag: aper:"choiceIdx:4,"
	IdInterfaceInstanceIndication *xnap_ies.InterfaceInstanceIndication `protobuf:"bytes,4,opt,name=id_interface_instance_indication,json=id-InterfaceInstanceIndication,proto3,oneof" aper:"choiceIdx:4,"`
}

type XnSetupFailureIEsValue_IdMessageOversizeNotification struct {
	// @inject_tag: aper:"choiceIdx:5,valueExt,"
	IdMessageOversizeNotification *xnap_ies.MessageOversizeNotification `protobuf:"bytes,5,opt,name=id_message_oversize_notification,json=id-MessageOversizeNotification,proto3,oneof" aper:"choiceIdx:5,valueExt,"`
}

func (*XnSetupFailureIEsValue_IdCause) isXnSetupFailureIEsValue_XnSetupFailureIes() {}

func (*XnSetupFailureIEsValue_IdTimeToWait) isXnSetupFailureIEsValue_XnSetupFailureIes() {}

func (*XnSetupFailureIEsValue_IdCriticalityDiagnostics) isXnSetupFailureIEsValue_XnSetupFailureIes() {
}

func (*XnSetupFailureIEsValue_IdInterfaceInstanceIndication) isXnSetupFailureIEsValue_XnSetupFailureIes() {
}

func (*XnSetupFailureIEsValue_IdMessageOversizeNotification) isXnSetupFailureIEsValue_XnSetupFailureIes() {
}

// concrete instance(s) of class XNAP-PROTOCOL-IES from xnap_v1.asn1:2317
// @inject_tag: aper:"valueExt"
// {XnSetupFailure-IEs}
type XnSetupFailureIEs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"unique,"
	Id *xnap_commondatatypes.ProtocolIeID `protobuf:"bytes,1,opt,name=id,json=&id,proto3" json:"id,omitempty" aper:"unique,"`
	// @inject_tag: aper:"valueLB:0,valueUB:2,"
	Criticality xnap_commondatatypes.Criticality `protobuf:"varint,2,opt,name=criticality,json=&criticality,proto3,enum=xnap.v1.Criticality" json:"criticality,omitempty" aper:"valueLB:0,valueUB:2,"`
	// @inject_tag: aper:"canonicalOrder,"
	Value *XnSetupFailureIEsValue `protobuf:"bytes,3,opt,name=value,json=&Value,proto3" json:"value,omitempty" aper:"canonicalOrder,"`
}

func (x *XnSetupFailureIEs) Reset() {
	*x = XnSetupFailureIEs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[207]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *XnSetupFailureIEs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*XnSetupFailureIEs) ProtoMessage() {}

func (x *XnSetupFailureIEs) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[207]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use XnSetupFailureIEs.ProtoReflect.Descriptor instead.
func (*XnSetupFailureIEs) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_pdu_contents_proto_rawDescGZIP(), []int{207}
}

func (x *XnSetupFailureIEs) GetId() *xnap_commondatatypes.ProtocolIeID {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *XnSetupFailureIEs) GetCriticality() xnap_commondatatypes.Criticality {
	if x != nil {
		return x.Criticality
	}
	return xnap_commondatatypes.Criticality(0)
}

func (x *XnSetupFailureIEs) GetValue() *XnSetupFailureIEsValue {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:2313
// @inject_tag: aper:"valueExt"
// {XnSetupFailure}
type XnSetupFailure struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProtocolIes []*XnSetupFailureIEs `protobuf:"bytes,1,rep,name=protocol_ies,json=protocolIEs,proto3" json:"protocol_ies,omitempty"`
}

func (x *XnSetupFailure) Reset() {
	*x = XnSetupFailure{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[208]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *XnSetupFailure) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*XnSetupFailure) ProtoMessage() {}

func (x *XnSetupFailure) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[208]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use XnSetupFailure.ProtoReflect.Descriptor instead.
func (*XnSetupFailure) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_pdu_contents_proto_rawDescGZIP(), []int{208}
}

func (x *XnSetupFailure) GetProtocolIes() []*XnSetupFailureIEs {
	if x != nil {
		return x.ProtocolIes
	}
	return nil
}

// value set from xnap_v1.asn1:2337
// {NGRANNodeConfigurationUpdate-IEs&Value}
type NgrannodeConfigurationUpdateIEsValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// value set translated as choice from xnap_v1.asn1:2337
	//
	// Types that are assignable to NgrannodeConfigurationUpdateIes:
	//	*NgrannodeConfigurationUpdateIEsValue_IdTaisupportList
	//	*NgrannodeConfigurationUpdateIEsValue_IdConfigurationUpdateInitiatingNodeChoice
	//	*NgrannodeConfigurationUpdateIEsValue_IdTnlaToAddList
	//	*NgrannodeConfigurationUpdateIEsValue_IdTnlaToRemoveList
	//	*NgrannodeConfigurationUpdateIEsValue_IdTnlaToUpdateList
	//	*NgrannodeConfigurationUpdateIEsValue_IdGlobalNgRanNodeId
	//	*NgrannodeConfigurationUpdateIEsValue_IdAmfRegionInformationToAdd
	//	*NgrannodeConfigurationUpdateIEsValue_IdAmfRegionInformationToDelete
	//	*NgrannodeConfigurationUpdateIEsValue_IdInterfaceInstanceIndication
	//	*NgrannodeConfigurationUpdateIEsValue_IdTnlconfigurationInfo
	NgrannodeConfigurationUpdateIes isNgrannodeConfigurationUpdateIEsValue_NgrannodeConfigurationUpdateIes `protobuf_oneof:"ngrannode_configuration_update_ies"`
}

func (x *NgrannodeConfigurationUpdateIEsValue) Reset() {
	*x = NgrannodeConfigurationUpdateIEsValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[209]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NgrannodeConfigurationUpdateIEsValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NgrannodeConfigurationUpdateIEsValue) ProtoMessage() {}

func (x *NgrannodeConfigurationUpdateIEsValue) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[209]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NgrannodeConfigurationUpdateIEsValue.ProtoReflect.Descriptor instead.
func (*NgrannodeConfigurationUpdateIEsValue) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_pdu_contents_proto_rawDescGZIP(), []int{209}
}

func (m *NgrannodeConfigurationUpdateIEsValue) GetNgrannodeConfigurationUpdateIes() isNgrannodeConfigurationUpdateIEsValue_NgrannodeConfigurationUpdateIes {
	if m != nil {
		return m.NgrannodeConfigurationUpdateIes
	}
	return nil
}

func (x *NgrannodeConfigurationUpdateIEsValue) GetIdTaisupportList() *xnap_ies.TaisupportList {
	if x, ok := x.GetNgrannodeConfigurationUpdateIes().(*NgrannodeConfigurationUpdateIEsValue_IdTaisupportList); ok {
		return x.IdTaisupportList
	}
	return nil
}

func (x *NgrannodeConfigurationUpdateIEsValue) GetIdConfigurationUpdateInitiatingNodeChoice() *ConfigurationUpdateInitiatingNodeChoice {
	if x, ok := x.GetNgrannodeConfigurationUpdateIes().(*NgrannodeConfigurationUpdateIEsValue_IdConfigurationUpdateInitiatingNodeChoice); ok {
		return x.IdConfigurationUpdateInitiatingNodeChoice
	}
	return nil
}

func (x *NgrannodeConfigurationUpdateIEsValue) GetIdTnlaToAddList() *xnap_ies.TnlaToAddList {
	if x, ok := x.GetNgrannodeConfigurationUpdateIes().(*NgrannodeConfigurationUpdateIEsValue_IdTnlaToAddList); ok {
		return x.IdTnlaToAddList
	}
	return nil
}

func (x *NgrannodeConfigurationUpdateIEsValue) GetIdTnlaToRemoveList() *xnap_ies.TnlaToRemoveList {
	if x, ok := x.GetNgrannodeConfigurationUpdateIes().(*NgrannodeConfigurationUpdateIEsValue_IdTnlaToRemoveList); ok {
		return x.IdTnlaToRemoveList
	}
	return nil
}

func (x *NgrannodeConfigurationUpdateIEsValue) GetIdTnlaToUpdateList() *xnap_ies.TnlaToUpdateList {
	if x, ok := x.GetNgrannodeConfigurationUpdateIes().(*NgrannodeConfigurationUpdateIEsValue_IdTnlaToUpdateList); ok {
		return x.IdTnlaToUpdateList
	}
	return nil
}

func (x *NgrannodeConfigurationUpdateIEsValue) GetIdGlobalNgRanNodeId() *xnap_ies.GlobalNgRAnnodeID {
	if x, ok := x.GetNgrannodeConfigurationUpdateIes().(*NgrannodeConfigurationUpdateIEsValue_IdGlobalNgRanNodeId); ok {
		return x.IdGlobalNgRanNodeId
	}
	return nil
}

func (x *NgrannodeConfigurationUpdateIEsValue) GetIdAmfRegionInformationToAdd() *xnap_ies.AmfRegionInformation {
	if x, ok := x.GetNgrannodeConfigurationUpdateIes().(*NgrannodeConfigurationUpdateIEsValue_IdAmfRegionInformationToAdd); ok {
		return x.IdAmfRegionInformationToAdd
	}
	return nil
}

func (x *NgrannodeConfigurationUpdateIEsValue) GetIdAmfRegionInformationToDelete() *xnap_ies.AmfRegionInformation {
	if x, ok := x.GetNgrannodeConfigurationUpdateIes().(*NgrannodeConfigurationUpdateIEsValue_IdAmfRegionInformationToDelete); ok {
		return x.IdAmfRegionInformationToDelete
	}
	return nil
}

func (x *NgrannodeConfigurationUpdateIEsValue) GetIdInterfaceInstanceIndication() *xnap_ies.InterfaceInstanceIndication {
	if x, ok := x.GetNgrannodeConfigurationUpdateIes().(*NgrannodeConfigurationUpdateIEsValue_IdInterfaceInstanceIndication); ok {
		return x.IdInterfaceInstanceIndication
	}
	return nil
}

func (x *NgrannodeConfigurationUpdateIEsValue) GetIdTnlconfigurationInfo() *xnap_ies.TnlconfigurationInfo {
	if x, ok := x.GetNgrannodeConfigurationUpdateIes().(*NgrannodeConfigurationUpdateIEsValue_IdTnlconfigurationInfo); ok {
		return x.IdTnlconfigurationInfo
	}
	return nil
}

type isNgrannodeConfigurationUpdateIEsValue_NgrannodeConfigurationUpdateIes interface {
	isNgrannodeConfigurationUpdateIEsValue_NgrannodeConfigurationUpdateIes()
}

type NgrannodeConfigurationUpdateIEsValue_IdTaisupportList struct {
	// @inject_tag: aper:"choiceIdx:1,"
	IdTaisupportList *xnap_ies.TaisupportList `protobuf:"bytes,1,opt,name=id_taisupport_list,json=id-TAISupport-list,proto3,oneof" aper:"choiceIdx:1,"`
}

type NgrannodeConfigurationUpdateIEsValue_IdConfigurationUpdateInitiatingNodeChoice struct {
	// @inject_tag: aper:"choiceIdx:2,"
	IdConfigurationUpdateInitiatingNodeChoice *ConfigurationUpdateInitiatingNodeChoice `protobuf:"bytes,2,opt,name=id_configuration_update_initiating_node_choice,json=id-ConfigurationUpdateInitiatingNodeChoice,proto3,oneof" aper:"choiceIdx:2,"`
}

type NgrannodeConfigurationUpdateIEsValue_IdTnlaToAddList struct {
	// @inject_tag: aper:"choiceIdx:3,"
	IdTnlaToAddList *xnap_ies.TnlaToAddList `protobuf:"bytes,3,opt,name=id_tnla_to_add_list,json=id-TNLA-To-Add-List,proto3,oneof" aper:"choiceIdx:3,"`
}

type NgrannodeConfigurationUpdateIEsValue_IdTnlaToRemoveList struct {
	// @inject_tag: aper:"choiceIdx:4,"
	IdTnlaToRemoveList *xnap_ies.TnlaToRemoveList `protobuf:"bytes,4,opt,name=id_tnla_to_remove_list,json=id-TNLA-To-Remove-List,proto3,oneof" aper:"choiceIdx:4,"`
}

type NgrannodeConfigurationUpdateIEsValue_IdTnlaToUpdateList struct {
	// @inject_tag: aper:"choiceIdx:5,"
	IdTnlaToUpdateList *xnap_ies.TnlaToUpdateList `protobuf:"bytes,5,opt,name=id_tnla_to_update_list,json=id-TNLA-To-Update-List,proto3,oneof" aper:"choiceIdx:5,"`
}

type NgrannodeConfigurationUpdateIEsValue_IdGlobalNgRanNodeId struct {
	// @inject_tag: aper:"choiceIdx:6,"
	IdGlobalNgRanNodeId *xnap_ies.GlobalNgRAnnodeID `protobuf:"bytes,6,opt,name=id_global_ng_ran_node_id,json=id-GlobalNG-RAN-node-ID,proto3,oneof" aper:"choiceIdx:6,"`
}

type NgrannodeConfigurationUpdateIEsValue_IdAmfRegionInformationToAdd struct {
	// @inject_tag: aper:"choiceIdx:7,"
	IdAmfRegionInformationToAdd *xnap_ies.AmfRegionInformation `protobuf:"bytes,7,opt,name=id_amf_region_information_to_add,json=id-AMF-Region-Information-To-Add,proto3,oneof" aper:"choiceIdx:7,"`
}

type NgrannodeConfigurationUpdateIEsValue_IdAmfRegionInformationToDelete struct {
	// @inject_tag: aper:"choiceIdx:8,"
	IdAmfRegionInformationToDelete *xnap_ies.AmfRegionInformation `protobuf:"bytes,8,opt,name=id_amf_region_information_to_delete,json=id-AMF-Region-Information-To-Delete,proto3,oneof" aper:"choiceIdx:8,"`
}

type NgrannodeConfigurationUpdateIEsValue_IdInterfaceInstanceIndication struct {
	// @inject_tag: aper:"choiceIdx:9,"
	IdInterfaceInstanceIndication *xnap_ies.InterfaceInstanceIndication `protobuf:"bytes,9,opt,name=id_interface_instance_indication,json=id-InterfaceInstanceIndication,proto3,oneof" aper:"choiceIdx:9,"`
}

type NgrannodeConfigurationUpdateIEsValue_IdTnlconfigurationInfo struct {
	// @inject_tag: aper:"choiceIdx:10,valueExt,"
	IdTnlconfigurationInfo *xnap_ies.TnlconfigurationInfo `protobuf:"bytes,10,opt,name=id_tnlconfiguration_info,json=id-TNLConfigurationInfo,proto3,oneof" aper:"choiceIdx:10,valueExt,"`
}

func (*NgrannodeConfigurationUpdateIEsValue_IdTaisupportList) isNgrannodeConfigurationUpdateIEsValue_NgrannodeConfigurationUpdateIes() {
}

func (*NgrannodeConfigurationUpdateIEsValue_IdConfigurationUpdateInitiatingNodeChoice) isNgrannodeConfigurationUpdateIEsValue_NgrannodeConfigurationUpdateIes() {
}

func (*NgrannodeConfigurationUpdateIEsValue_IdTnlaToAddList) isNgrannodeConfigurationUpdateIEsValue_NgrannodeConfigurationUpdateIes() {
}

func (*NgrannodeConfigurationUpdateIEsValue_IdTnlaToRemoveList) isNgrannodeConfigurationUpdateIEsValue_NgrannodeConfigurationUpdateIes() {
}

func (*NgrannodeConfigurationUpdateIEsValue_IdTnlaToUpdateList) isNgrannodeConfigurationUpdateIEsValue_NgrannodeConfigurationUpdateIes() {
}

func (*NgrannodeConfigurationUpdateIEsValue_IdGlobalNgRanNodeId) isNgrannodeConfigurationUpdateIEsValue_NgrannodeConfigurationUpdateIes() {
}

func (*NgrannodeConfigurationUpdateIEsValue_IdAmfRegionInformationToAdd) isNgrannodeConfigurationUpdateIEsValue_NgrannodeConfigurationUpdateIes() {
}

func (*NgrannodeConfigurationUpdateIEsValue_IdAmfRegionInformationToDelete) isNgrannodeConfigurationUpdateIEsValue_NgrannodeConfigurationUpdateIes() {
}

func (*NgrannodeConfigurationUpdateIEsValue_IdInterfaceInstanceIndication) isNgrannodeConfigurationUpdateIEsValue_NgrannodeConfigurationUpdateIes() {
}

func (*NgrannodeConfigurationUpdateIEsValue_IdTnlconfigurationInfo) isNgrannodeConfigurationUpdateIEsValue_NgrannodeConfigurationUpdateIes() {
}

// concrete instance(s) of class XNAP-PROTOCOL-IES from xnap_v1.asn1:2337
// @inject_tag: aper:"valueExt"
// {NGRANNodeConfigurationUpdate-IEs}
type NgrannodeConfigurationUpdateIEs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"unique,"
	Id *xnap_commondatatypes.ProtocolIeID `protobuf:"bytes,1,opt,name=id,json=&id,proto3" json:"id,omitempty" aper:"unique,"`
	// @inject_tag: aper:"valueLB:0,valueUB:2,"
	Criticality xnap_commondatatypes.Criticality `protobuf:"varint,2,opt,name=criticality,json=&criticality,proto3,enum=xnap.v1.Criticality" json:"criticality,omitempty" aper:"valueLB:0,valueUB:2,"`
	// @inject_tag: aper:"canonicalOrder,"
	Value *NgrannodeConfigurationUpdateIEsValue `protobuf:"bytes,3,opt,name=value,json=&Value,proto3" json:"value,omitempty" aper:"canonicalOrder,"`
}

func (x *NgrannodeConfigurationUpdateIEs) Reset() {
	*x = NgrannodeConfigurationUpdateIEs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[210]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NgrannodeConfigurationUpdateIEs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NgrannodeConfigurationUpdateIEs) ProtoMessage() {}

func (x *NgrannodeConfigurationUpdateIEs) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[210]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NgrannodeConfigurationUpdateIEs.ProtoReflect.Descriptor instead.
func (*NgrannodeConfigurationUpdateIEs) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_pdu_contents_proto_rawDescGZIP(), []int{210}
}

func (x *NgrannodeConfigurationUpdateIEs) GetId() *xnap_commondatatypes.ProtocolIeID {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *NgrannodeConfigurationUpdateIEs) GetCriticality() xnap_commondatatypes.Criticality {
	if x != nil {
		return x.Criticality
	}
	return xnap_commondatatypes.Criticality(0)
}

func (x *NgrannodeConfigurationUpdateIEs) GetValue() *NgrannodeConfigurationUpdateIEsValue {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:2333
// @inject_tag: aper:"valueExt"
// {NGRANNodeConfigurationUpdate}
type NgrannodeConfigurationUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProtocolIes []*NgrannodeConfigurationUpdateIEs `protobuf:"bytes,1,rep,name=protocol_ies,json=protocolIEs,proto3" json:"protocol_ies,omitempty"`
}

func (x *NgrannodeConfigurationUpdate) Reset() {
	*x = NgrannodeConfigurationUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[211]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NgrannodeConfigurationUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NgrannodeConfigurationUpdate) ProtoMessage() {}

func (x *NgrannodeConfigurationUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[211]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NgrannodeConfigurationUpdate.ProtoReflect.Descriptor instead.
func (*NgrannodeConfigurationUpdate) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_pdu_contents_proto_rawDescGZIP(), []int{211}
}

func (x *NgrannodeConfigurationUpdate) GetProtocolIes() []*NgrannodeConfigurationUpdateIEs {
	if x != nil {
		return x.ProtocolIes
	}
	return nil
}

// value set from xnap_v1.asn1:2361
// {ConfigurationUpdate-gNB&Value}
type ConfigurationUpdategNbValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// value set translated as choice from xnap_v1.asn1:2361
	//
	// Types that are assignable to ConfigurationUpdateGNb:
	//	*ConfigurationUpdategNbValue_IdServedCellsToUpdateNr
	//	*ConfigurationUpdategNbValue_IdCellAssistanceInfoNr
	//	*ConfigurationUpdategNbValue_IdCellAssistanceInfoEutra
	ConfigurationUpdateGNb isConfigurationUpdategNbValue_ConfigurationUpdateGNb `protobuf_oneof:"configuration_update_g_nb"`
}

func (x *ConfigurationUpdategNbValue) Reset() {
	*x = ConfigurationUpdategNbValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[212]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigurationUpdategNbValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigurationUpdategNbValue) ProtoMessage() {}

func (x *ConfigurationUpdategNbValue) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[212]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigurationUpdategNbValue.ProtoReflect.Descriptor instead.
func (*ConfigurationUpdategNbValue) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_pdu_contents_proto_rawDescGZIP(), []int{212}
}

func (m *ConfigurationUpdategNbValue) GetConfigurationUpdateGNb() isConfigurationUpdategNbValue_ConfigurationUpdateGNb {
	if m != nil {
		return m.ConfigurationUpdateGNb
	}
	return nil
}

func (x *ConfigurationUpdategNbValue) GetIdServedCellsToUpdateNr() *xnap_ies.ServedCellsToUpdateNR {
	if x, ok := x.GetConfigurationUpdateGNb().(*ConfigurationUpdategNbValue_IdServedCellsToUpdateNr); ok {
		return x.IdServedCellsToUpdateNr
	}
	return nil
}

func (x *ConfigurationUpdategNbValue) GetIdCellAssistanceInfoNr() *xnap_ies.CellAssistanceInfoNR {
	if x, ok := x.GetConfigurationUpdateGNb().(*ConfigurationUpdategNbValue_IdCellAssistanceInfoNr); ok {
		return x.IdCellAssistanceInfoNr
	}
	return nil
}

func (x *ConfigurationUpdategNbValue) GetIdCellAssistanceInfoEutra() *xnap_ies.CellAssistanceInfoEUtra {
	if x, ok := x.GetConfigurationUpdateGNb().(*ConfigurationUpdategNbValue_IdCellAssistanceInfoEutra); ok {
		return x.IdCellAssistanceInfoEutra
	}
	return nil
}

type isConfigurationUpdategNbValue_ConfigurationUpdateGNb interface {
	isConfigurationUpdategNbValue_ConfigurationUpdateGNb()
}

type ConfigurationUpdategNbValue_IdServedCellsToUpdateNr struct {
	// @inject_tag: aper:"choiceIdx:1,valueExt,"
	IdServedCellsToUpdateNr *xnap_ies.ServedCellsToUpdateNR `protobuf:"bytes,1,opt,name=id_served_cells_to_update_nr,json=id-servedCellsToUpdate-NR,proto3,oneof" aper:"choiceIdx:1,valueExt,"`
}

type ConfigurationUpdategNbValue_IdCellAssistanceInfoNr struct {
	// @inject_tag: aper:"choiceIdx:2,"
	IdCellAssistanceInfoNr *xnap_ies.CellAssistanceInfoNR `protobuf:"bytes,2,opt,name=id_cell_assistance_info_nr,json=id-cellAssistanceInfo-NR,proto3,oneof" aper:"choiceIdx:2,"`
}

type ConfigurationUpdategNbValue_IdCellAssistanceInfoEutra struct {
	// @inject_tag: aper:"choiceIdx:3,"
	IdCellAssistanceInfoEutra *xnap_ies.CellAssistanceInfoEUtra `protobuf:"bytes,3,opt,name=id_cell_assistance_info_eutra,json=id-cellAssistanceInfo-EUTRA,proto3,oneof" aper:"choiceIdx:3,"`
}

func (*ConfigurationUpdategNbValue_IdServedCellsToUpdateNr) isConfigurationUpdategNbValue_ConfigurationUpdateGNb() {
}

func (*ConfigurationUpdategNbValue_IdCellAssistanceInfoNr) isConfigurationUpdategNbValue_ConfigurationUpdateGNb() {
}

func (*ConfigurationUpdategNbValue_IdCellAssistanceInfoEutra) isConfigurationUpdategNbValue_ConfigurationUpdateGNb() {
}

// concrete instance(s) of class XNAP-PROTOCOL-IES from xnap_v1.asn1:2361
// @inject_tag: aper:"valueExt"
// {ConfigurationUpdate-gNB}
type ConfigurationUpdategNb struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"unique,"
	Id *xnap_commondatatypes.ProtocolIeID `protobuf:"bytes,1,opt,name=id,json=&id,proto3" json:"id,omitempty" aper:"unique,"`
	// @inject_tag: aper:"valueLB:0,valueUB:2,"
	Criticality xnap_commondatatypes.Criticality `protobuf:"varint,2,opt,name=criticality,json=&criticality,proto3,enum=xnap.v1.Criticality" json:"criticality,omitempty" aper:"valueLB:0,valueUB:2,"`
	// @inject_tag: aper:"canonicalOrder,"
	Value *ConfigurationUpdategNbValue `protobuf:"bytes,3,opt,name=value,json=&Value,proto3" json:"value,omitempty" aper:"canonicalOrder,"`
}

func (x *ConfigurationUpdategNb) Reset() {
	*x = ConfigurationUpdategNb{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[213]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigurationUpdategNb) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigurationUpdategNb) ProtoMessage() {}

func (x *ConfigurationUpdategNb) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[213]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigurationUpdategNb.ProtoReflect.Descriptor instead.
func (*ConfigurationUpdategNb) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_pdu_contents_proto_rawDescGZIP(), []int{213}
}

func (x *ConfigurationUpdategNb) GetId() *xnap_commondatatypes.ProtocolIeID {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ConfigurationUpdategNb) GetCriticality() xnap_commondatatypes.Criticality {
	if x != nil {
		return x.Criticality
	}
	return xnap_commondatatypes.Criticality(0)
}

func (x *ConfigurationUpdategNb) GetValue() *ConfigurationUpdategNbValue {
	if x != nil {
		return x.Value
	}
	return nil
}

// value set from xnap_v1.asn1:2369
// {ConfigurationUpdate-ng-eNB&Value}
type ConfigurationUpdatengeNbValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// value set translated as choice from xnap_v1.asn1:2369
	//
	// Types that are assignable to ConfigurationUpdateNgENb:
	//	*ConfigurationUpdatengeNbValue_IdServedCellsToUpdateEUtra
	//	*ConfigurationUpdatengeNbValue_IdCellAssistanceInfoNr
	//	*ConfigurationUpdatengeNbValue_IdCellAssistanceInfoEutra
	ConfigurationUpdateNgENb isConfigurationUpdatengeNbValue_ConfigurationUpdateNgENb `protobuf_oneof:"configuration_update_ng_e_nb"`
}

func (x *ConfigurationUpdatengeNbValue) Reset() {
	*x = ConfigurationUpdatengeNbValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[214]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigurationUpdatengeNbValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigurationUpdatengeNbValue) ProtoMessage() {}

func (x *ConfigurationUpdatengeNbValue) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[214]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigurationUpdatengeNbValue.ProtoReflect.Descriptor instead.
func (*ConfigurationUpdatengeNbValue) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_pdu_contents_proto_rawDescGZIP(), []int{214}
}

func (m *ConfigurationUpdatengeNbValue) GetConfigurationUpdateNgENb() isConfigurationUpdatengeNbValue_ConfigurationUpdateNgENb {
	if m != nil {
		return m.ConfigurationUpdateNgENb
	}
	return nil
}

func (x *ConfigurationUpdatengeNbValue) GetIdServedCellsToUpdateEUtra() *xnap_ies.ServedCellsToUpdateEUTra {
	if x, ok := x.GetConfigurationUpdateNgENb().(*ConfigurationUpdatengeNbValue_IdServedCellsToUpdateEUtra); ok {
		return x.IdServedCellsToUpdateEUtra
	}
	return nil
}

func (x *ConfigurationUpdatengeNbValue) GetIdCellAssistanceInfoNr() *xnap_ies.CellAssistanceInfoNR {
	if x, ok := x.GetConfigurationUpdateNgENb().(*ConfigurationUpdatengeNbValue_IdCellAssistanceInfoNr); ok {
		return x.IdCellAssistanceInfoNr
	}
	return nil
}

func (x *ConfigurationUpdatengeNbValue) GetIdCellAssistanceInfoEutra() *xnap_ies.CellAssistanceInfoEUtra {
	if x, ok := x.GetConfigurationUpdateNgENb().(*ConfigurationUpdatengeNbValue_IdCellAssistanceInfoEutra); ok {
		return x.IdCellAssistanceInfoEutra
	}
	return nil
}

type isConfigurationUpdatengeNbValue_ConfigurationUpdateNgENb interface {
	isConfigurationUpdatengeNbValue_ConfigurationUpdateNgENb()
}

type ConfigurationUpdatengeNbValue_IdServedCellsToUpdateEUtra struct {
	// @inject_tag: aper:"choiceIdx:1,valueExt,"
	IdServedCellsToUpdateEUtra *xnap_ies.ServedCellsToUpdateEUTra `protobuf:"bytes,1,opt,name=id_served_cells_to_update_e_utra,json=id-servedCellsToUpdate-E-UTRA,proto3,oneof" aper:"choiceIdx:1,valueExt,"`
}

type ConfigurationUpdatengeNbValue_IdCellAssistanceInfoNr struct {
	// @inject_tag: aper:"choiceIdx:2,"
	IdCellAssistanceInfoNr *xnap_ies.CellAssistanceInfoNR `protobuf:"bytes,2,opt,name=id_cell_assistance_info_nr,json=id-cellAssistanceInfo-NR,proto3,oneof" aper:"choiceIdx:2,"`
}

type ConfigurationUpdatengeNbValue_IdCellAssistanceInfoEutra struct {
	// @inject_tag: aper:"choiceIdx:3,"
	IdCellAssistanceInfoEutra *xnap_ies.CellAssistanceInfoEUtra `protobuf:"bytes,3,opt,name=id_cell_assistance_info_eutra,json=id-cellAssistanceInfo-EUTRA,proto3,oneof" aper:"choiceIdx:3,"`
}

func (*ConfigurationUpdatengeNbValue_IdServedCellsToUpdateEUtra) isConfigurationUpdatengeNbValue_ConfigurationUpdateNgENb() {
}

func (*ConfigurationUpdatengeNbValue_IdCellAssistanceInfoNr) isConfigurationUpdatengeNbValue_ConfigurationUpdateNgENb() {
}

func (*ConfigurationUpdatengeNbValue_IdCellAssistanceInfoEutra) isConfigurationUpdatengeNbValue_ConfigurationUpdateNgENb() {
}

// concrete instance(s) of class XNAP-PROTOCOL-IES from xnap_v1.asn1:2369
// @inject_tag: aper:"valueExt"
// {ConfigurationUpdate-ng-eNB}
type ConfigurationUpdatengeNb struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"unique,"
	Id *xnap_commondatatypes.ProtocolIeID `protobuf:"bytes,1,opt,name=id,json=&id,proto3" json:"id,omitempty" aper:"unique,"`
	// @inject_tag: aper:"valueLB:0,valueUB:2,"
	Criticality xnap_commondatatypes.Criticality `protobuf:"varint,2,opt,name=criticality,json=&criticality,proto3,enum=xnap.v1.Criticality" json:"criticality,omitempty" aper:"valueLB:0,valueUB:2,"`
	// @inject_tag: aper:"canonicalOrder,"
	Value *ConfigurationUpdatengeNbValue `protobuf:"bytes,3,opt,name=value,json=&Value,proto3" json:"value,omitempty" aper:"canonicalOrder,"`
}

func (x *ConfigurationUpdatengeNb) Reset() {
	*x = ConfigurationUpdatengeNb{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[215]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigurationUpdatengeNb) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigurationUpdatengeNb) ProtoMessage() {}

func (x *ConfigurationUpdatengeNb) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[215]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigurationUpdatengeNb.ProtoReflect.Descriptor instead.
func (*ConfigurationUpdatengeNb) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_pdu_contents_proto_rawDescGZIP(), []int{215}
}

func (x *ConfigurationUpdatengeNb) GetId() *xnap_commondatatypes.ProtocolIeID {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ConfigurationUpdatengeNb) GetCriticality() xnap_commondatatypes.Criticality {
	if x != nil {
		return x.Criticality
	}
	return xnap_commondatatypes.Criticality(0)
}

func (x *ConfigurationUpdatengeNb) GetValue() *ConfigurationUpdatengeNbValue {
	if x != nil {
		return x.Value
	}
	return nil
}

// value set from xnap_v1.asn1:2357
// {ServedCellsToUpdateInitiatingNodeChoice-ExtIEs}
type ServedCellsToUpdateInitiatingNodeChoiceExtIes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *emptypb.Empty `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *ServedCellsToUpdateInitiatingNodeChoiceExtIes) Reset() {
	*x = ServedCellsToUpdateInitiatingNodeChoiceExtIes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[216]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServedCellsToUpdateInitiatingNodeChoiceExtIes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServedCellsToUpdateInitiatingNodeChoiceExtIes) ProtoMessage() {}

func (x *ServedCellsToUpdateInitiatingNodeChoiceExtIes) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[216]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServedCellsToUpdateInitiatingNodeChoiceExtIes.ProtoReflect.Descriptor instead.
func (*ServedCellsToUpdateInitiatingNodeChoiceExtIes) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_pdu_contents_proto_rawDescGZIP(), []int{216}
}

func (x *ServedCellsToUpdateInitiatingNodeChoiceExtIes) GetValue() *emptypb.Empty {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:2352
// {ConfigurationUpdateInitiatingNodeChoice}
type ConfigurationUpdateInitiatingNodeChoice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// choice from xnap_v1.asn1:2352
	//
	// Types that are assignable to ConfigurationUpdateInitiatingNodeChoice:
	//	*ConfigurationUpdateInitiatingNodeChoice_GNb
	//	*ConfigurationUpdateInitiatingNodeChoice_NgENb
	//	*ConfigurationUpdateInitiatingNodeChoice_ChoiceExtension
	ConfigurationUpdateInitiatingNodeChoice isConfigurationUpdateInitiatingNodeChoice_ConfigurationUpdateInitiatingNodeChoice `protobuf_oneof:"configuration_update_initiating_node_choice"`
}

func (x *ConfigurationUpdateInitiatingNodeChoice) Reset() {
	*x = ConfigurationUpdateInitiatingNodeChoice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[217]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigurationUpdateInitiatingNodeChoice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigurationUpdateInitiatingNodeChoice) ProtoMessage() {}

func (x *ConfigurationUpdateInitiatingNodeChoice) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[217]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigurationUpdateInitiatingNodeChoice.ProtoReflect.Descriptor instead.
func (*ConfigurationUpdateInitiatingNodeChoice) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_pdu_contents_proto_rawDescGZIP(), []int{217}
}

func (m *ConfigurationUpdateInitiatingNodeChoice) GetConfigurationUpdateInitiatingNodeChoice() isConfigurationUpdateInitiatingNodeChoice_ConfigurationUpdateInitiatingNodeChoice {
	if m != nil {
		return m.ConfigurationUpdateInitiatingNodeChoice
	}
	return nil
}

func (x *ConfigurationUpdateInitiatingNodeChoice) GetGNb() *ConfigurationUpdategNb {
	if x, ok := x.GetConfigurationUpdateInitiatingNodeChoice().(*ConfigurationUpdateInitiatingNodeChoice_GNb); ok {
		return x.GNb
	}
	return nil
}

func (x *ConfigurationUpdateInitiatingNodeChoice) GetNgENb() *ConfigurationUpdatengeNb {
	if x, ok := x.GetConfigurationUpdateInitiatingNodeChoice().(*ConfigurationUpdateInitiatingNodeChoice_NgENb); ok {
		return x.NgENb
	}
	return nil
}

func (x *ConfigurationUpdateInitiatingNodeChoice) GetChoiceExtension() *ServedCellsToUpdateInitiatingNodeChoiceExtIes {
	if x, ok := x.GetConfigurationUpdateInitiatingNodeChoice().(*ConfigurationUpdateInitiatingNodeChoice_ChoiceExtension); ok {
		return x.ChoiceExtension
	}
	return nil
}

type isConfigurationUpdateInitiatingNodeChoice_ConfigurationUpdateInitiatingNodeChoice interface {
	isConfigurationUpdateInitiatingNodeChoice_ConfigurationUpdateInitiatingNodeChoice()
}

type ConfigurationUpdateInitiatingNodeChoice_GNb struct {
	// @inject_tag: aper:"choiceIdx:1,sizeLB:0,"
	GNb *ConfigurationUpdategNb `protobuf:"bytes,1,opt,name=g_nb,json=gNB,proto3,oneof" aper:"choiceIdx:1,sizeLB:0,"`
}

type ConfigurationUpdateInitiatingNodeChoice_NgENb struct {
	// @inject_tag: aper:"choiceIdx:2,sizeLB:0,"
	NgENb *ConfigurationUpdatengeNb `protobuf:"bytes,2,opt,name=ng_e_nb,json=ng-eNB,proto3,oneof" aper:"choiceIdx:2,sizeLB:0,"`
}

type ConfigurationUpdateInitiatingNodeChoice_ChoiceExtension struct {
	// @inject_tag: aper:"choiceIdx:3,"
	ChoiceExtension *ServedCellsToUpdateInitiatingNodeChoiceExtIes `protobuf:"bytes,3,opt,name=choice_extension,json=choice-extension,proto3,oneof" aper:"choiceIdx:3,"`
}

func (*ConfigurationUpdateInitiatingNodeChoice_GNb) isConfigurationUpdateInitiatingNodeChoice_ConfigurationUpdateInitiatingNodeChoice() {
}

func (*ConfigurationUpdateInitiatingNodeChoice_NgENb) isConfigurationUpdateInitiatingNodeChoice_ConfigurationUpdateInitiatingNodeChoice() {
}

func (*ConfigurationUpdateInitiatingNodeChoice_ChoiceExtension) isConfigurationUpdateInitiatingNodeChoice_ConfigurationUpdateInitiatingNodeChoice() {
}

// value set from xnap_v1.asn1:2389
// {NGRANNodeConfigurationUpdateAcknowledge-IEs&Value}
type NgrannodeConfigurationUpdateAcknowledgeIEsValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// value set translated as choice from xnap_v1.asn1:2389
	//
	// Types that are assignable to NgrannodeConfigurationUpdateAcknowledgeIes:
	//	*NgrannodeConfigurationUpdateAcknowledgeIEsValue_IdRespondingNodeTypeConfigUpdateAck
	//	*NgrannodeConfigurationUpdateAcknowledgeIEsValue_IdTnlaSetupList
	//	*NgrannodeConfigurationUpdateAcknowledgeIEsValue_IdTnlaFailedToSetupList
	//	*NgrannodeConfigurationUpdateAcknowledgeIEsValue_IdCriticalityDiagnostics
	//	*NgrannodeConfigurationUpdateAcknowledgeIEsValue_IdInterfaceInstanceIndication
	//	*NgrannodeConfigurationUpdateAcknowledgeIEsValue_IdTnlconfigurationInfo
	NgrannodeConfigurationUpdateAcknowledgeIes isNgrannodeConfigurationUpdateAcknowledgeIEsValue_NgrannodeConfigurationUpdateAcknowledgeIes `protobuf_oneof:"ngrannode_configuration_update_acknowledge_ies"`
}

func (x *NgrannodeConfigurationUpdateAcknowledgeIEsValue) Reset() {
	*x = NgrannodeConfigurationUpdateAcknowledgeIEsValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[218]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NgrannodeConfigurationUpdateAcknowledgeIEsValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NgrannodeConfigurationUpdateAcknowledgeIEsValue) ProtoMessage() {}

func (x *NgrannodeConfigurationUpdateAcknowledgeIEsValue) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[218]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NgrannodeConfigurationUpdateAcknowledgeIEsValue.ProtoReflect.Descriptor instead.
func (*NgrannodeConfigurationUpdateAcknowledgeIEsValue) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_pdu_contents_proto_rawDescGZIP(), []int{218}
}

func (m *NgrannodeConfigurationUpdateAcknowledgeIEsValue) GetNgrannodeConfigurationUpdateAcknowledgeIes() isNgrannodeConfigurationUpdateAcknowledgeIEsValue_NgrannodeConfigurationUpdateAcknowledgeIes {
	if m != nil {
		return m.NgrannodeConfigurationUpdateAcknowledgeIes
	}
	return nil
}

func (x *NgrannodeConfigurationUpdateAcknowledgeIEsValue) GetIdRespondingNodeTypeConfigUpdateAck() *RespondingNodeTypeConfigUpdateAck {
	if x, ok := x.GetNgrannodeConfigurationUpdateAcknowledgeIes().(*NgrannodeConfigurationUpdateAcknowledgeIEsValue_IdRespondingNodeTypeConfigUpdateAck); ok {
		return x.IdRespondingNodeTypeConfigUpdateAck
	}
	return nil
}

func (x *NgrannodeConfigurationUpdateAcknowledgeIEsValue) GetIdTnlaSetupList() *xnap_ies.TnlaSetupList {
	if x, ok := x.GetNgrannodeConfigurationUpdateAcknowledgeIes().(*NgrannodeConfigurationUpdateAcknowledgeIEsValue_IdTnlaSetupList); ok {
		return x.IdTnlaSetupList
	}
	return nil
}

func (x *NgrannodeConfigurationUpdateAcknowledgeIEsValue) GetIdTnlaFailedToSetupList() *xnap_ies.TnlaFailedToSetupList {
	if x, ok := x.GetNgrannodeConfigurationUpdateAcknowledgeIes().(*NgrannodeConfigurationUpdateAcknowledgeIEsValue_IdTnlaFailedToSetupList); ok {
		return x.IdTnlaFailedToSetupList
	}
	return nil
}

func (x *NgrannodeConfigurationUpdateAcknowledgeIEsValue) GetIdCriticalityDiagnostics() *xnap_ies.CriticalityDiagnostics {
	if x, ok := x.GetNgrannodeConfigurationUpdateAcknowledgeIes().(*NgrannodeConfigurationUpdateAcknowledgeIEsValue_IdCriticalityDiagnostics); ok {
		return x.IdCriticalityDiagnostics
	}
	return nil
}

func (x *NgrannodeConfigurationUpdateAcknowledgeIEsValue) GetIdInterfaceInstanceIndication() *xnap_ies.InterfaceInstanceIndication {
	if x, ok := x.GetNgrannodeConfigurationUpdateAcknowledgeIes().(*NgrannodeConfigurationUpdateAcknowledgeIEsValue_IdInterfaceInstanceIndication); ok {
		return x.IdInterfaceInstanceIndication
	}
	return nil
}

func (x *NgrannodeConfigurationUpdateAcknowledgeIEsValue) GetIdTnlconfigurationInfo() *xnap_ies.TnlconfigurationInfo {
	if x, ok := x.GetNgrannodeConfigurationUpdateAcknowledgeIes().(*NgrannodeConfigurationUpdateAcknowledgeIEsValue_IdTnlconfigurationInfo); ok {
		return x.IdTnlconfigurationInfo
	}
	return nil
}

type isNgrannodeConfigurationUpdateAcknowledgeIEsValue_NgrannodeConfigurationUpdateAcknowledgeIes interface {
	isNgrannodeConfigurationUpdateAcknowledgeIEsValue_NgrannodeConfigurationUpdateAcknowledgeIes()
}

type NgrannodeConfigurationUpdateAcknowledgeIEsValue_IdRespondingNodeTypeConfigUpdateAck struct {
	// @inject_tag: aper:"choiceIdx:1,"
	IdRespondingNodeTypeConfigUpdateAck *RespondingNodeTypeConfigUpdateAck `protobuf:"bytes,1,opt,name=id_responding_node_type_config_update_ack,json=id-RespondingNodeTypeConfigUpdateAck,proto3,oneof" aper:"choiceIdx:1,"`
}

type NgrannodeConfigurationUpdateAcknowledgeIEsValue_IdTnlaSetupList struct {
	// @inject_tag: aper:"choiceIdx:2,"
	IdTnlaSetupList *xnap_ies.TnlaSetupList `protobuf:"bytes,2,opt,name=id_tnla_setup_list,json=id-TNLA-Setup-List,proto3,oneof" aper:"choiceIdx:2,"`
}

type NgrannodeConfigurationUpdateAcknowledgeIEsValue_IdTnlaFailedToSetupList struct {
	// @inject_tag: aper:"choiceIdx:3,"
	IdTnlaFailedToSetupList *xnap_ies.TnlaFailedToSetupList `protobuf:"bytes,3,opt,name=id_tnla_failed_to_setup_list,json=id-TNLA-Failed-To-Setup-List,proto3,oneof" aper:"choiceIdx:3,"`
}

type NgrannodeConfigurationUpdateAcknowledgeIEsValue_IdCriticalityDiagnostics struct {
	// @inject_tag: aper:"choiceIdx:4,valueExt,"
	IdCriticalityDiagnostics *xnap_ies.CriticalityDiagnostics `protobuf:"bytes,4,opt,name=id_criticality_diagnostics,json=id-CriticalityDiagnostics,proto3,oneof" aper:"choiceIdx:4,valueExt,"`
}

type NgrannodeConfigurationUpdateAcknowledgeIEsValue_IdInterfaceInstanceIndication struct {
	// @inject_tag: aper:"choiceIdx:5,"
	IdInterfaceInstanceIndication *xnap_ies.InterfaceInstanceIndication `protobuf:"bytes,5,opt,name=id_interface_instance_indication,json=id-InterfaceInstanceIndication,proto3,oneof" aper:"choiceIdx:5,"`
}

type NgrannodeConfigurationUpdateAcknowledgeIEsValue_IdTnlconfigurationInfo struct {
	// @inject_tag: aper:"choiceIdx:6,valueExt,"
	IdTnlconfigurationInfo *xnap_ies.TnlconfigurationInfo `protobuf:"bytes,6,opt,name=id_tnlconfiguration_info,json=id-TNLConfigurationInfo,proto3,oneof" aper:"choiceIdx:6,valueExt,"`
}

func (*NgrannodeConfigurationUpdateAcknowledgeIEsValue_IdRespondingNodeTypeConfigUpdateAck) isNgrannodeConfigurationUpdateAcknowledgeIEsValue_NgrannodeConfigurationUpdateAcknowledgeIes() {
}

func (*NgrannodeConfigurationUpdateAcknowledgeIEsValue_IdTnlaSetupList) isNgrannodeConfigurationUpdateAcknowledgeIEsValue_NgrannodeConfigurationUpdateAcknowledgeIes() {
}

func (*NgrannodeConfigurationUpdateAcknowledgeIEsValue_IdTnlaFailedToSetupList) isNgrannodeConfigurationUpdateAcknowledgeIEsValue_NgrannodeConfigurationUpdateAcknowledgeIes() {
}

func (*NgrannodeConfigurationUpdateAcknowledgeIEsValue_IdCriticalityDiagnostics) isNgrannodeConfigurationUpdateAcknowledgeIEsValue_NgrannodeConfigurationUpdateAcknowledgeIes() {
}

func (*NgrannodeConfigurationUpdateAcknowledgeIEsValue_IdInterfaceInstanceIndication) isNgrannodeConfigurationUpdateAcknowledgeIEsValue_NgrannodeConfigurationUpdateAcknowledgeIes() {
}

func (*NgrannodeConfigurationUpdateAcknowledgeIEsValue_IdTnlconfigurationInfo) isNgrannodeConfigurationUpdateAcknowledgeIEsValue_NgrannodeConfigurationUpdateAcknowledgeIes() {
}

// concrete instance(s) of class XNAP-PROTOCOL-IES from xnap_v1.asn1:2389
// @inject_tag: aper:"valueExt"
// {NGRANNodeConfigurationUpdateAcknowledge-IEs}
type NgrannodeConfigurationUpdateAcknowledgeIEs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"unique,"
	Id *xnap_commondatatypes.ProtocolIeID `protobuf:"bytes,1,opt,name=id,json=&id,proto3" json:"id,omitempty" aper:"unique,"`
	// @inject_tag: aper:"valueLB:0,valueUB:2,"
	Criticality xnap_commondatatypes.Criticality `protobuf:"varint,2,opt,name=criticality,json=&criticality,proto3,enum=xnap.v1.Criticality" json:"criticality,omitempty" aper:"valueLB:0,valueUB:2,"`
	// @inject_tag: aper:"canonicalOrder,"
	Value *NgrannodeConfigurationUpdateAcknowledgeIEsValue `protobuf:"bytes,3,opt,name=value,json=&Value,proto3" json:"value,omitempty" aper:"canonicalOrder,"`
}

func (x *NgrannodeConfigurationUpdateAcknowledgeIEs) Reset() {
	*x = NgrannodeConfigurationUpdateAcknowledgeIEs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[219]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NgrannodeConfigurationUpdateAcknowledgeIEs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NgrannodeConfigurationUpdateAcknowledgeIEs) ProtoMessage() {}

func (x *NgrannodeConfigurationUpdateAcknowledgeIEs) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[219]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NgrannodeConfigurationUpdateAcknowledgeIEs.ProtoReflect.Descriptor instead.
func (*NgrannodeConfigurationUpdateAcknowledgeIEs) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_pdu_contents_proto_rawDescGZIP(), []int{219}
}

func (x *NgrannodeConfigurationUpdateAcknowledgeIEs) GetId() *xnap_commondatatypes.ProtocolIeID {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *NgrannodeConfigurationUpdateAcknowledgeIEs) GetCriticality() xnap_commondatatypes.Criticality {
	if x != nil {
		return x.Criticality
	}
	return xnap_commondatatypes.Criticality(0)
}

func (x *NgrannodeConfigurationUpdateAcknowledgeIEs) GetValue() *NgrannodeConfigurationUpdateAcknowledgeIEsValue {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:2385
// @inject_tag: aper:"valueExt"
// {NGRANNodeConfigurationUpdateAcknowledge}
type NgrannodeConfigurationUpdateAcknowledge struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProtocolIes []*NgrannodeConfigurationUpdateAcknowledgeIEs `protobuf:"bytes,1,rep,name=protocol_ies,json=protocolIEs,proto3" json:"protocol_ies,omitempty"`
}

func (x *NgrannodeConfigurationUpdateAcknowledge) Reset() {
	*x = NgrannodeConfigurationUpdateAcknowledge{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[220]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NgrannodeConfigurationUpdateAcknowledge) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NgrannodeConfigurationUpdateAcknowledge) ProtoMessage() {}

func (x *NgrannodeConfigurationUpdateAcknowledge) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[220]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NgrannodeConfigurationUpdateAcknowledge.ProtoReflect.Descriptor instead.
func (*NgrannodeConfigurationUpdateAcknowledge) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_pdu_contents_proto_rawDescGZIP(), []int{220}
}

func (x *NgrannodeConfigurationUpdateAcknowledge) GetProtocolIes() []*NgrannodeConfigurationUpdateAcknowledgeIEs {
	if x != nil {
		return x.ProtocolIes
	}
	return nil
}

// value set from xnap_v1.asn1:2404
// {RespondingNodeTypeConfigUpdateAck-ExtIEs}
type RespondingNodeTypeConfigUpdateAckExtIes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *emptypb.Empty `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *RespondingNodeTypeConfigUpdateAckExtIes) Reset() {
	*x = RespondingNodeTypeConfigUpdateAckExtIes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[221]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RespondingNodeTypeConfigUpdateAckExtIes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RespondingNodeTypeConfigUpdateAckExtIes) ProtoMessage() {}

func (x *RespondingNodeTypeConfigUpdateAckExtIes) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[221]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RespondingNodeTypeConfigUpdateAckExtIes.ProtoReflect.Descriptor instead.
func (*RespondingNodeTypeConfigUpdateAckExtIes) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_pdu_contents_proto_rawDescGZIP(), []int{221}
}

func (x *RespondingNodeTypeConfigUpdateAckExtIes) GetValue() *emptypb.Empty {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:2399
// {RespondingNodeTypeConfigUpdateAck}
type RespondingNodeTypeConfigUpdateAck struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// choice from xnap_v1.asn1:2399
	//
	// Types that are assignable to RespondingNodeTypeConfigUpdateAck:
	//	*RespondingNodeTypeConfigUpdateAck_NgENb
	//	*RespondingNodeTypeConfigUpdateAck_GNb
	//	*RespondingNodeTypeConfigUpdateAck_ChoiceExtension
	RespondingNodeTypeConfigUpdateAck isRespondingNodeTypeConfigUpdateAck_RespondingNodeTypeConfigUpdateAck `protobuf_oneof:"responding_node_type_config_update_ack"`
}

func (x *RespondingNodeTypeConfigUpdateAck) Reset() {
	*x = RespondingNodeTypeConfigUpdateAck{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[222]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RespondingNodeTypeConfigUpdateAck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RespondingNodeTypeConfigUpdateAck) ProtoMessage() {}

func (x *RespondingNodeTypeConfigUpdateAck) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[222]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RespondingNodeTypeConfigUpdateAck.ProtoReflect.Descriptor instead.
func (*RespondingNodeTypeConfigUpdateAck) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_pdu_contents_proto_rawDescGZIP(), []int{222}
}

func (m *RespondingNodeTypeConfigUpdateAck) GetRespondingNodeTypeConfigUpdateAck() isRespondingNodeTypeConfigUpdateAck_RespondingNodeTypeConfigUpdateAck {
	if m != nil {
		return m.RespondingNodeTypeConfigUpdateAck
	}
	return nil
}

func (x *RespondingNodeTypeConfigUpdateAck) GetNgENb() *RespondingNodeTypeConfigUpdateAckngeNb {
	if x, ok := x.GetRespondingNodeTypeConfigUpdateAck().(*RespondingNodeTypeConfigUpdateAck_NgENb); ok {
		return x.NgENb
	}
	return nil
}

func (x *RespondingNodeTypeConfigUpdateAck) GetGNb() *RespondingNodeTypeConfigUpdateAckgNb {
	if x, ok := x.GetRespondingNodeTypeConfigUpdateAck().(*RespondingNodeTypeConfigUpdateAck_GNb); ok {
		return x.GNb
	}
	return nil
}

func (x *RespondingNodeTypeConfigUpdateAck) GetChoiceExtension() *RespondingNodeTypeConfigUpdateAckExtIes {
	if x, ok := x.GetRespondingNodeTypeConfigUpdateAck().(*RespondingNodeTypeConfigUpdateAck_ChoiceExtension); ok {
		return x.ChoiceExtension
	}
	return nil
}

type isRespondingNodeTypeConfigUpdateAck_RespondingNodeTypeConfigUpdateAck interface {
	isRespondingNodeTypeConfigUpdateAck_RespondingNodeTypeConfigUpdateAck()
}

type RespondingNodeTypeConfigUpdateAck_NgENb struct {
	// @inject_tag: aper:"choiceIdx:1,valueExt,"
	NgENb *RespondingNodeTypeConfigUpdateAckngeNb `protobuf:"bytes,1,opt,name=ng_e_nb,json=ng-eNB,proto3,oneof" aper:"choiceIdx:1,valueExt,"`
}

type RespondingNodeTypeConfigUpdateAck_GNb struct {
	// @inject_tag: aper:"choiceIdx:2,valueExt,"
	GNb *RespondingNodeTypeConfigUpdateAckgNb `protobuf:"bytes,2,opt,name=g_nb,json=gNB,proto3,oneof" aper:"choiceIdx:2,valueExt,"`
}

type RespondingNodeTypeConfigUpdateAck_ChoiceExtension struct {
	// @inject_tag: aper:"choiceIdx:3,"
	ChoiceExtension *RespondingNodeTypeConfigUpdateAckExtIes `protobuf:"bytes,3,opt,name=choice_extension,json=choice-extension,proto3,oneof" aper:"choiceIdx:3,"`
}

func (*RespondingNodeTypeConfigUpdateAck_NgENb) isRespondingNodeTypeConfigUpdateAck_RespondingNodeTypeConfigUpdateAck() {
}

func (*RespondingNodeTypeConfigUpdateAck_GNb) isRespondingNodeTypeConfigUpdateAck_RespondingNodeTypeConfigUpdateAck() {
}

func (*RespondingNodeTypeConfigUpdateAck_ChoiceExtension) isRespondingNodeTypeConfigUpdateAck_RespondingNodeTypeConfigUpdateAck() {
}

// value set from xnap_v1.asn1:2413
// {RespondingNodeTypeConfigUpdateAck-ng-eNB-ExtIEs&Extension}
type RespondingNodeTypeConfigUpdateAckngeNbExtIesExtension struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// value set translated as choice from xnap_v1.asn1:2413
	//
	// Types that are assignable to RespondingNodeTypeConfigUpdateAckNgENbExtIes:
	//	*RespondingNodeTypeConfigUpdateAckngeNbExtIesExtension_IdListOfServedCellsEUtra
	//	*RespondingNodeTypeConfigUpdateAckngeNbExtIesExtension_IdPartialListIndicatorEutra
	//	*RespondingNodeTypeConfigUpdateAckngeNbExtIesExtension_IdCellAndCapacityAssistanceInfoEutra
	RespondingNodeTypeConfigUpdateAckNgENbExtIes isRespondingNodeTypeConfigUpdateAckngeNbExtIesExtension_RespondingNodeTypeConfigUpdateAckNgENbExtIes `protobuf_oneof:"responding_node_type_config_update_ack_ng_e_nb_ext_ies"`
}

func (x *RespondingNodeTypeConfigUpdateAckngeNbExtIesExtension) Reset() {
	*x = RespondingNodeTypeConfigUpdateAckngeNbExtIesExtension{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[223]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RespondingNodeTypeConfigUpdateAckngeNbExtIesExtension) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RespondingNodeTypeConfigUpdateAckngeNbExtIesExtension) ProtoMessage() {}

func (x *RespondingNodeTypeConfigUpdateAckngeNbExtIesExtension) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[223]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RespondingNodeTypeConfigUpdateAckngeNbExtIesExtension.ProtoReflect.Descriptor instead.
func (*RespondingNodeTypeConfigUpdateAckngeNbExtIesExtension) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_pdu_contents_proto_rawDescGZIP(), []int{223}
}

func (m *RespondingNodeTypeConfigUpdateAckngeNbExtIesExtension) GetRespondingNodeTypeConfigUpdateAckNgENbExtIes() isRespondingNodeTypeConfigUpdateAckngeNbExtIesExtension_RespondingNodeTypeConfigUpdateAckNgENbExtIes {
	if m != nil {
		return m.RespondingNodeTypeConfigUpdateAckNgENbExtIes
	}
	return nil
}

func (x *RespondingNodeTypeConfigUpdateAckngeNbExtIesExtension) GetIdListOfServedCellsEUtra() *xnap_ies.ServedCellsEUTra {
	if x, ok := x.GetRespondingNodeTypeConfigUpdateAckNgENbExtIes().(*RespondingNodeTypeConfigUpdateAckngeNbExtIesExtension_IdListOfServedCellsEUtra); ok {
		return x.IdListOfServedCellsEUtra
	}
	return nil
}

func (x *RespondingNodeTypeConfigUpdateAckngeNbExtIesExtension) GetIdPartialListIndicatorEutra() xnap_ies.PartialListIndicator {
	if x, ok := x.GetRespondingNodeTypeConfigUpdateAckNgENbExtIes().(*RespondingNodeTypeConfigUpdateAckngeNbExtIesExtension_IdPartialListIndicatorEutra); ok {
		return x.IdPartialListIndicatorEutra
	}
	return xnap_ies.PartialListIndicator(0)
}

func (x *RespondingNodeTypeConfigUpdateAckngeNbExtIesExtension) GetIdCellAndCapacityAssistanceInfoEutra() *xnap_ies.CellAndCapacityAssistanceInfoEUtra {
	if x, ok := x.GetRespondingNodeTypeConfigUpdateAckNgENbExtIes().(*RespondingNodeTypeConfigUpdateAckngeNbExtIesExtension_IdCellAndCapacityAssistanceInfoEutra); ok {
		return x.IdCellAndCapacityAssistanceInfoEutra
	}
	return nil
}

type isRespondingNodeTypeConfigUpdateAckngeNbExtIesExtension_RespondingNodeTypeConfigUpdateAckNgENbExtIes interface {
	isRespondingNodeTypeConfigUpdateAckngeNbExtIesExtension_RespondingNodeTypeConfigUpdateAckNgENbExtIes()
}

type RespondingNodeTypeConfigUpdateAckngeNbExtIesExtension_IdListOfServedCellsEUtra struct {
	// @inject_tag: aper:"choiceIdx:1,"
	IdListOfServedCellsEUtra *xnap_ies.ServedCellsEUTra `protobuf:"bytes,1,opt,name=id_list_of_served_cells_e_utra,json=id-List-of-served-cells-E-UTRA,proto3,oneof" aper:"choiceIdx:1,"`
}

type RespondingNodeTypeConfigUpdateAckngeNbExtIesExtension_IdPartialListIndicatorEutra struct {
	// @inject_tag: aper:"choiceIdx:2,valueExt,valueLB:0,valueUB:0,"
	IdPartialListIndicatorEutra xnap_ies.PartialListIndicator `protobuf:"varint,2,opt,name=id_partial_list_indicator_eutra,json=id-PartialListIndicator-EUTRA,proto3,enum=xnap.v1.PartialListIndicator,oneof" aper:"choiceIdx:2,valueExt,valueLB:0,valueUB:0,"`
}

type RespondingNodeTypeConfigUpdateAckngeNbExtIesExtension_IdCellAndCapacityAssistanceInfoEutra struct {
	// @inject_tag: aper:"choiceIdx:3,valueExt,"
	IdCellAndCapacityAssistanceInfoEutra *xnap_ies.CellAndCapacityAssistanceInfoEUtra `protobuf:"bytes,3,opt,name=id_cell_and_capacity_assistance_info_eutra,json=id-CellAndCapacityAssistanceInfo-EUTRA,proto3,oneof" aper:"choiceIdx:3,valueExt,"`
}

func (*RespondingNodeTypeConfigUpdateAckngeNbExtIesExtension_IdListOfServedCellsEUtra) isRespondingNodeTypeConfigUpdateAckngeNbExtIesExtension_RespondingNodeTypeConfigUpdateAckNgENbExtIes() {
}

func (*RespondingNodeTypeConfigUpdateAckngeNbExtIesExtension_IdPartialListIndicatorEutra) isRespondingNodeTypeConfigUpdateAckngeNbExtIesExtension_RespondingNodeTypeConfigUpdateAckNgENbExtIes() {
}

func (*RespondingNodeTypeConfigUpdateAckngeNbExtIesExtension_IdCellAndCapacityAssistanceInfoEutra) isRespondingNodeTypeConfigUpdateAckngeNbExtIesExtension_RespondingNodeTypeConfigUpdateAckNgENbExtIes() {
}

// concrete instance(s) of class XNAP-PROTOCOL-EXTENSION from xnap_v1.asn1:2413
// @inject_tag: aper:"valueExt"
// {RespondingNodeTypeConfigUpdateAck-ng-eNB-ExtIEs}
type RespondingNodeTypeConfigUpdateAckngeNbExtIes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"unique,"
	Id *xnap_commondatatypes.ProtocolIeID `protobuf:"bytes,1,opt,name=id,json=&id,proto3" json:"id,omitempty" aper:"unique,"`
	// @inject_tag: aper:"valueLB:0,valueUB:2,"
	Criticality xnap_commondatatypes.Criticality `protobuf:"varint,2,opt,name=criticality,json=&criticality,proto3,enum=xnap.v1.Criticality" json:"criticality,omitempty" aper:"valueLB:0,valueUB:2,"`
	// @inject_tag: aper:"canonicalOrder,"
	Extension *RespondingNodeTypeConfigUpdateAckngeNbExtIesExtension `protobuf:"bytes,3,opt,name=extension,json=&Extension,proto3" json:"extension,omitempty" aper:"canonicalOrder,"`
}

func (x *RespondingNodeTypeConfigUpdateAckngeNbExtIes) Reset() {
	*x = RespondingNodeTypeConfigUpdateAckngeNbExtIes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[224]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RespondingNodeTypeConfigUpdateAckngeNbExtIes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RespondingNodeTypeConfigUpdateAckngeNbExtIes) ProtoMessage() {}

func (x *RespondingNodeTypeConfigUpdateAckngeNbExtIes) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[224]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RespondingNodeTypeConfigUpdateAckngeNbExtIes.ProtoReflect.Descriptor instead.
func (*RespondingNodeTypeConfigUpdateAckngeNbExtIes) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_pdu_contents_proto_rawDescGZIP(), []int{224}
}

func (x *RespondingNodeTypeConfigUpdateAckngeNbExtIes) GetId() *xnap_commondatatypes.ProtocolIeID {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *RespondingNodeTypeConfigUpdateAckngeNbExtIes) GetCriticality() xnap_commondatatypes.Criticality {
	if x != nil {
		return x.Criticality
	}
	return xnap_commondatatypes.Criticality(0)
}

func (x *RespondingNodeTypeConfigUpdateAckngeNbExtIes) GetExtension() *RespondingNodeTypeConfigUpdateAckngeNbExtIesExtension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// sequence from xnap_v1.asn1:2409
// @inject_tag: aper:"valueExt"
// {RespondingNodeTypeConfigUpdateAck-ng-eNB}
type RespondingNodeTypeConfigUpdateAckngeNb struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"optional,sizeLB:1,"
	IEExtension []*RespondingNodeTypeConfigUpdateAckngeNbExtIes `protobuf:"bytes,1,rep,name=i_e_extension,json=iE-Extension,proto3" json:"i_e_extension,omitempty" aper:"optional,sizeLB:1,"`
}

func (x *RespondingNodeTypeConfigUpdateAckngeNb) Reset() {
	*x = RespondingNodeTypeConfigUpdateAckngeNb{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[225]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RespondingNodeTypeConfigUpdateAckngeNb) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RespondingNodeTypeConfigUpdateAckngeNb) ProtoMessage() {}

func (x *RespondingNodeTypeConfigUpdateAckngeNb) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[225]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RespondingNodeTypeConfigUpdateAckngeNb.ProtoReflect.Descriptor instead.
func (*RespondingNodeTypeConfigUpdateAckngeNb) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_pdu_contents_proto_rawDescGZIP(), []int{225}
}

func (x *RespondingNodeTypeConfigUpdateAckngeNb) GetIEExtension() []*RespondingNodeTypeConfigUpdateAckngeNbExtIes {
	if x != nil {
		return x.IEExtension
	}
	return nil
}

// value set from xnap_v1.asn1:2427
// {RespondingNodeTypeConfigUpdateAck-gNB-ExtIEs&Extension}
type RespondingNodeTypeConfigUpdateAckgNbExtIesExtension struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// value set translated as choice from xnap_v1.asn1:2427
	//
	// Types that are assignable to RespondingNodeTypeConfigUpdateAckGNbExtIes:
	//	*RespondingNodeTypeConfigUpdateAckgNbExtIesExtension_IdPartialListIndicatorNr
	//	*RespondingNodeTypeConfigUpdateAckgNbExtIesExtension_IdCellAndCapacityAssistanceInfoNr
	RespondingNodeTypeConfigUpdateAckGNbExtIes isRespondingNodeTypeConfigUpdateAckgNbExtIesExtension_RespondingNodeTypeConfigUpdateAckGNbExtIes `protobuf_oneof:"responding_node_type_config_update_ack_g_nb_ext_ies"`
}

func (x *RespondingNodeTypeConfigUpdateAckgNbExtIesExtension) Reset() {
	*x = RespondingNodeTypeConfigUpdateAckgNbExtIesExtension{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[226]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RespondingNodeTypeConfigUpdateAckgNbExtIesExtension) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RespondingNodeTypeConfigUpdateAckgNbExtIesExtension) ProtoMessage() {}

func (x *RespondingNodeTypeConfigUpdateAckgNbExtIesExtension) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[226]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RespondingNodeTypeConfigUpdateAckgNbExtIesExtension.ProtoReflect.Descriptor instead.
func (*RespondingNodeTypeConfigUpdateAckgNbExtIesExtension) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_pdu_contents_proto_rawDescGZIP(), []int{226}
}

func (m *RespondingNodeTypeConfigUpdateAckgNbExtIesExtension) GetRespondingNodeTypeConfigUpdateAckGNbExtIes() isRespondingNodeTypeConfigUpdateAckgNbExtIesExtension_RespondingNodeTypeConfigUpdateAckGNbExtIes {
	if m != nil {
		return m.RespondingNodeTypeConfigUpdateAckGNbExtIes
	}
	return nil
}

func (x *RespondingNodeTypeConfigUpdateAckgNbExtIesExtension) GetIdPartialListIndicatorNr() xnap_ies.PartialListIndicator {
	if x, ok := x.GetRespondingNodeTypeConfigUpdateAckGNbExtIes().(*RespondingNodeTypeConfigUpdateAckgNbExtIesExtension_IdPartialListIndicatorNr); ok {
		return x.IdPartialListIndicatorNr
	}
	return xnap_ies.PartialListIndicator(0)
}

func (x *RespondingNodeTypeConfigUpdateAckgNbExtIesExtension) GetIdCellAndCapacityAssistanceInfoNr() *xnap_ies.CellAndCapacityAssistanceInfoNR {
	if x, ok := x.GetRespondingNodeTypeConfigUpdateAckGNbExtIes().(*RespondingNodeTypeConfigUpdateAckgNbExtIesExtension_IdCellAndCapacityAssistanceInfoNr); ok {
		return x.IdCellAndCapacityAssistanceInfoNr
	}
	return nil
}

type isRespondingNodeTypeConfigUpdateAckgNbExtIesExtension_RespondingNodeTypeConfigUpdateAckGNbExtIes interface {
	isRespondingNodeTypeConfigUpdateAckgNbExtIesExtension_RespondingNodeTypeConfigUpdateAckGNbExtIes()
}

type RespondingNodeTypeConfigUpdateAckgNbExtIesExtension_IdPartialListIndicatorNr struct {
	// @inject_tag: aper:"choiceIdx:1,valueExt,valueLB:0,valueUB:0,"
	IdPartialListIndicatorNr xnap_ies.PartialListIndicator `protobuf:"varint,1,opt,name=id_partial_list_indicator_nr,json=id-PartialListIndicator-NR,proto3,enum=xnap.v1.PartialListIndicator,oneof" aper:"choiceIdx:1,valueExt,valueLB:0,valueUB:0,"`
}

type RespondingNodeTypeConfigUpdateAckgNbExtIesExtension_IdCellAndCapacityAssistanceInfoNr struct {
	// @inject_tag: aper:"choiceIdx:2,valueExt,"
	IdCellAndCapacityAssistanceInfoNr *xnap_ies.CellAndCapacityAssistanceInfoNR `protobuf:"bytes,2,opt,name=id_cell_and_capacity_assistance_info_nr,json=id-CellAndCapacityAssistanceInfo-NR,proto3,oneof" aper:"choiceIdx:2,valueExt,"`
}

func (*RespondingNodeTypeConfigUpdateAckgNbExtIesExtension_IdPartialListIndicatorNr) isRespondingNodeTypeConfigUpdateAckgNbExtIesExtension_RespondingNodeTypeConfigUpdateAckGNbExtIes() {
}

func (*RespondingNodeTypeConfigUpdateAckgNbExtIesExtension_IdCellAndCapacityAssistanceInfoNr) isRespondingNodeTypeConfigUpdateAckgNbExtIesExtension_RespondingNodeTypeConfigUpdateAckGNbExtIes() {
}

// concrete instance(s) of class XNAP-PROTOCOL-EXTENSION from xnap_v1.asn1:2427
// @inject_tag: aper:"valueExt"
// {RespondingNodeTypeConfigUpdateAck-gNB-ExtIEs}
type RespondingNodeTypeConfigUpdateAckgNbExtIes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"unique,"
	Id *xnap_commondatatypes.ProtocolIeID `protobuf:"bytes,1,opt,name=id,json=&id,proto3" json:"id,omitempty" aper:"unique,"`
	// @inject_tag: aper:"valueLB:0,valueUB:2,"
	Criticality xnap_commondatatypes.Criticality `protobuf:"varint,2,opt,name=criticality,json=&criticality,proto3,enum=xnap.v1.Criticality" json:"criticality,omitempty" aper:"valueLB:0,valueUB:2,"`
	// @inject_tag: aper:"canonicalOrder,"
	Extension *RespondingNodeTypeConfigUpdateAckgNbExtIesExtension `protobuf:"bytes,3,opt,name=extension,json=&Extension,proto3" json:"extension,omitempty" aper:"canonicalOrder,"`
}

func (x *RespondingNodeTypeConfigUpdateAckgNbExtIes) Reset() {
	*x = RespondingNodeTypeConfigUpdateAckgNbExtIes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[227]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RespondingNodeTypeConfigUpdateAckgNbExtIes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RespondingNodeTypeConfigUpdateAckgNbExtIes) ProtoMessage() {}

func (x *RespondingNodeTypeConfigUpdateAckgNbExtIes) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[227]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RespondingNodeTypeConfigUpdateAckgNbExtIes.ProtoReflect.Descriptor instead.
func (*RespondingNodeTypeConfigUpdateAckgNbExtIes) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_pdu_contents_proto_rawDescGZIP(), []int{227}
}

func (x *RespondingNodeTypeConfigUpdateAckgNbExtIes) GetId() *xnap_commondatatypes.ProtocolIeID {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *RespondingNodeTypeConfigUpdateAckgNbExtIes) GetCriticality() xnap_commondatatypes.Criticality {
	if x != nil {
		return x.Criticality
	}
	return xnap_commondatatypes.Criticality(0)
}

func (x *RespondingNodeTypeConfigUpdateAckgNbExtIes) GetExtension() *RespondingNodeTypeConfigUpdateAckgNbExtIesExtension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// sequence from xnap_v1.asn1:2422
// @inject_tag: aper:"valueExt"
// {RespondingNodeTypeConfigUpdateAck-gNB}
type RespondingNodeTypeConfigUpdateAckgNb struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"optional,"
	ServedNrCells *xnap_ies.ServedCellsNR `protobuf:"bytes,1,opt,name=served_nr_cells,json=served-NR-Cells,proto3,oneof" json:"served_nr_cells,omitempty" aper:"optional,"`
	// @inject_tag: aper:"optional,sizeLB:1,"
	IEExtension []*RespondingNodeTypeConfigUpdateAckgNbExtIes `protobuf:"bytes,2,rep,name=i_e_extension,json=iE-Extension,proto3" json:"i_e_extension,omitempty" aper:"optional,sizeLB:1,"`
}

func (x *RespondingNodeTypeConfigUpdateAckgNb) Reset() {
	*x = RespondingNodeTypeConfigUpdateAckgNb{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[228]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RespondingNodeTypeConfigUpdateAckgNb) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RespondingNodeTypeConfigUpdateAckgNb) ProtoMessage() {}

func (x *RespondingNodeTypeConfigUpdateAckgNb) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[228]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RespondingNodeTypeConfigUpdateAckgNb.ProtoReflect.Descriptor instead.
func (*RespondingNodeTypeConfigUpdateAckgNb) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_pdu_contents_proto_rawDescGZIP(), []int{228}
}

func (x *RespondingNodeTypeConfigUpdateAckgNb) GetServedNrCells() *xnap_ies.ServedCellsNR {
	if x != nil {
		return x.ServedNrCells
	}
	return nil
}

func (x *RespondingNodeTypeConfigUpdateAckgNb) GetIEExtension() []*RespondingNodeTypeConfigUpdateAckgNbExtIes {
	if x != nil {
		return x.IEExtension
	}
	return nil
}

// value set from xnap_v1.asn1:2445
// {NGRANNodeConfigurationUpdateFailure-IEs&Value}
type NgrannodeConfigurationUpdateFailureIEsValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// value set translated as choice from xnap_v1.asn1:2445
	//
	// Types that are assignable to NgrannodeConfigurationUpdateFailureIes:
	//	*NgrannodeConfigurationUpdateFailureIEsValue_IdCause
	//	*NgrannodeConfigurationUpdateFailureIEsValue_IdTimeToWait
	//	*NgrannodeConfigurationUpdateFailureIEsValue_IdCriticalityDiagnostics
	//	*NgrannodeConfigurationUpdateFailureIEsValue_IdInterfaceInstanceIndication
	NgrannodeConfigurationUpdateFailureIes isNgrannodeConfigurationUpdateFailureIEsValue_NgrannodeConfigurationUpdateFailureIes `protobuf_oneof:"ngrannode_configuration_update_failure_ies"`
}

func (x *NgrannodeConfigurationUpdateFailureIEsValue) Reset() {
	*x = NgrannodeConfigurationUpdateFailureIEsValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[229]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NgrannodeConfigurationUpdateFailureIEsValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NgrannodeConfigurationUpdateFailureIEsValue) ProtoMessage() {}

func (x *NgrannodeConfigurationUpdateFailureIEsValue) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[229]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NgrannodeConfigurationUpdateFailureIEsValue.ProtoReflect.Descriptor instead.
func (*NgrannodeConfigurationUpdateFailureIEsValue) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_pdu_contents_proto_rawDescGZIP(), []int{229}
}

func (m *NgrannodeConfigurationUpdateFailureIEsValue) GetNgrannodeConfigurationUpdateFailureIes() isNgrannodeConfigurationUpdateFailureIEsValue_NgrannodeConfigurationUpdateFailureIes {
	if m != nil {
		return m.NgrannodeConfigurationUpdateFailureIes
	}
	return nil
}

func (x *NgrannodeConfigurationUpdateFailureIEsValue) GetIdCause() *xnap_ies.Cause {
	if x, ok := x.GetNgrannodeConfigurationUpdateFailureIes().(*NgrannodeConfigurationUpdateFailureIEsValue_IdCause); ok {
		return x.IdCause
	}
	return nil
}

func (x *NgrannodeConfigurationUpdateFailureIEsValue) GetIdTimeToWait() xnap_ies.TimeToWait {
	if x, ok := x.GetNgrannodeConfigurationUpdateFailureIes().(*NgrannodeConfigurationUpdateFailureIEsValue_IdTimeToWait); ok {
		return x.IdTimeToWait
	}
	return xnap_ies.TimeToWait(0)
}

func (x *NgrannodeConfigurationUpdateFailureIEsValue) GetIdCriticalityDiagnostics() *xnap_ies.CriticalityDiagnostics {
	if x, ok := x.GetNgrannodeConfigurationUpdateFailureIes().(*NgrannodeConfigurationUpdateFailureIEsValue_IdCriticalityDiagnostics); ok {
		return x.IdCriticalityDiagnostics
	}
	return nil
}

func (x *NgrannodeConfigurationUpdateFailureIEsValue) GetIdInterfaceInstanceIndication() *xnap_ies.InterfaceInstanceIndication {
	if x, ok := x.GetNgrannodeConfigurationUpdateFailureIes().(*NgrannodeConfigurationUpdateFailureIEsValue_IdInterfaceInstanceIndication); ok {
		return x.IdInterfaceInstanceIndication
	}
	return nil
}

type isNgrannodeConfigurationUpdateFailureIEsValue_NgrannodeConfigurationUpdateFailureIes interface {
	isNgrannodeConfigurationUpdateFailureIEsValue_NgrannodeConfigurationUpdateFailureIes()
}

type NgrannodeConfigurationUpdateFailureIEsValue_IdCause struct {
	// @inject_tag: aper:"choiceIdx:1,"
	IdCause *xnap_ies.Cause `protobuf:"bytes,1,opt,name=id_cause,json=id-Cause,proto3,oneof" aper:"choiceIdx:1,"`
}

type NgrannodeConfigurationUpdateFailureIEsValue_IdTimeToWait struct {
	// @inject_tag: aper:"choiceIdx:2,valueExt,valueLB:0,valueUB:5,"
	IdTimeToWait xnap_ies.TimeToWait `protobuf:"varint,2,opt,name=id_time_to_wait,json=id-TimeToWait,proto3,enum=xnap.v1.TimeToWait,oneof" aper:"choiceIdx:2,valueExt,valueLB:0,valueUB:5,"`
}

type NgrannodeConfigurationUpdateFailureIEsValue_IdCriticalityDiagnostics struct {
	// @inject_tag: aper:"choiceIdx:3,valueExt,"
	IdCriticalityDiagnostics *xnap_ies.CriticalityDiagnostics `protobuf:"bytes,3,opt,name=id_criticality_diagnostics,json=id-CriticalityDiagnostics,proto3,oneof" aper:"choiceIdx:3,valueExt,"`
}

type NgrannodeConfigurationUpdateFailureIEsValue_IdInterfaceInstanceIndication struct {
	// @inject_tag: aper:"choiceIdx:4,"
	IdInterfaceInstanceIndication *xnap_ies.InterfaceInstanceIndication `protobuf:"bytes,4,opt,name=id_interface_instance_indication,json=id-InterfaceInstanceIndication,proto3,oneof" aper:"choiceIdx:4,"`
}

func (*NgrannodeConfigurationUpdateFailureIEsValue_IdCause) isNgrannodeConfigurationUpdateFailureIEsValue_NgrannodeConfigurationUpdateFailureIes() {
}

func (*NgrannodeConfigurationUpdateFailureIEsValue_IdTimeToWait) isNgrannodeConfigurationUpdateFailureIEsValue_NgrannodeConfigurationUpdateFailureIes() {
}

func (*NgrannodeConfigurationUpdateFailureIEsValue_IdCriticalityDiagnostics) isNgrannodeConfigurationUpdateFailureIEsValue_NgrannodeConfigurationUpdateFailureIes() {
}

func (*NgrannodeConfigurationUpdateFailureIEsValue_IdInterfaceInstanceIndication) isNgrannodeConfigurationUpdateFailureIEsValue_NgrannodeConfigurationUpdateFailureIes() {
}

// concrete instance(s) of class XNAP-PROTOCOL-IES from xnap_v1.asn1:2445
// @inject_tag: aper:"valueExt"
// {NGRANNodeConfigurationUpdateFailure-IEs}
type NgrannodeConfigurationUpdateFailureIEs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"unique,"
	Id *xnap_commondatatypes.ProtocolIeID `protobuf:"bytes,1,opt,name=id,json=&id,proto3" json:"id,omitempty" aper:"unique,"`
	// @inject_tag: aper:"valueLB:0,valueUB:2,"
	Criticality xnap_commondatatypes.Criticality `protobuf:"varint,2,opt,name=criticality,json=&criticality,proto3,enum=xnap.v1.Criticality" json:"criticality,omitempty" aper:"valueLB:0,valueUB:2,"`
	// @inject_tag: aper:"canonicalOrder,"
	Value *NgrannodeConfigurationUpdateFailureIEsValue `protobuf:"bytes,3,opt,name=value,json=&Value,proto3" json:"value,omitempty" aper:"canonicalOrder,"`
}

func (x *NgrannodeConfigurationUpdateFailureIEs) Reset() {
	*x = NgrannodeConfigurationUpdateFailureIEs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[230]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NgrannodeConfigurationUpdateFailureIEs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NgrannodeConfigurationUpdateFailureIEs) ProtoMessage() {}

func (x *NgrannodeConfigurationUpdateFailureIEs) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[230]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NgrannodeConfigurationUpdateFailureIEs.ProtoReflect.Descriptor instead.
func (*NgrannodeConfigurationUpdateFailureIEs) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_pdu_contents_proto_rawDescGZIP(), []int{230}
}

func (x *NgrannodeConfigurationUpdateFailureIEs) GetId() *xnap_commondatatypes.ProtocolIeID {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *NgrannodeConfigurationUpdateFailureIEs) GetCriticality() xnap_commondatatypes.Criticality {
	if x != nil {
		return x.Criticality
	}
	return xnap_commondatatypes.Criticality(0)
}

func (x *NgrannodeConfigurationUpdateFailureIEs) GetValue() *NgrannodeConfigurationUpdateFailureIEsValue {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:2441
// @inject_tag: aper:"valueExt"
// {NGRANNodeConfigurationUpdateFailure}
type NgrannodeConfigurationUpdateFailure struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProtocolIes []*NgrannodeConfigurationUpdateFailureIEs `protobuf:"bytes,1,rep,name=protocol_ies,json=protocolIEs,proto3" json:"protocol_ies,omitempty"`
}

func (x *NgrannodeConfigurationUpdateFailure) Reset() {
	*x = NgrannodeConfigurationUpdateFailure{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[231]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NgrannodeConfigurationUpdateFailure) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NgrannodeConfigurationUpdateFailure) ProtoMessage() {}

func (x *NgrannodeConfigurationUpdateFailure) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[231]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NgrannodeConfigurationUpdateFailure.ProtoReflect.Descriptor instead.
func (*NgrannodeConfigurationUpdateFailure) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_pdu_contents_proto_rawDescGZIP(), []int{231}
}

func (x *NgrannodeConfigurationUpdateFailure) GetProtocolIes() []*NgrannodeConfigurationUpdateFailureIEs {
	if x != nil {
		return x.ProtocolIes
	}
	return nil
}

// value set from xnap_v1.asn1:2465
// {E-UTRA-NR-CellResourceCoordinationRequest-IEs&Value}
type EUTraNRCellResourceCoordinationRequestIEsValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// value set translated as choice from xnap_v1.asn1:2465
	//
	// Types that are assignable to EUtraNrCellResourceCoordinationRequestIes:
	//	*EUTraNRCellResourceCoordinationRequestIEsValue_IdInitiatingNodeTypeResourceCoordRequest
	//	*EUTraNRCellResourceCoordinationRequestIEsValue_IdInterfaceInstanceIndication
	EUtraNrCellResourceCoordinationRequestIes isEUTraNRCellResourceCoordinationRequestIEsValue_EUtraNrCellResourceCoordinationRequestIes `protobuf_oneof:"e_utra_nr_cell_resource_coordination_request_ies"`
}

func (x *EUTraNRCellResourceCoordinationRequestIEsValue) Reset() {
	*x = EUTraNRCellResourceCoordinationRequestIEsValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[232]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EUTraNRCellResourceCoordinationRequestIEsValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EUTraNRCellResourceCoordinationRequestIEsValue) ProtoMessage() {}

func (x *EUTraNRCellResourceCoordinationRequestIEsValue) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[232]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EUTraNRCellResourceCoordinationRequestIEsValue.ProtoReflect.Descriptor instead.
func (*EUTraNRCellResourceCoordinationRequestIEsValue) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_pdu_contents_proto_rawDescGZIP(), []int{232}
}

func (m *EUTraNRCellResourceCoordinationRequestIEsValue) GetEUtraNrCellResourceCoordinationRequestIes() isEUTraNRCellResourceCoordinationRequestIEsValue_EUtraNrCellResourceCoordinationRequestIes {
	if m != nil {
		return m.EUtraNrCellResourceCoordinationRequestIes
	}
	return nil
}

func (x *EUTraNRCellResourceCoordinationRequestIEsValue) GetIdInitiatingNodeTypeResourceCoordRequest() *InitiatingNodeTypeResourceCoordRequest {
	if x, ok := x.GetEUtraNrCellResourceCoordinationRequestIes().(*EUTraNRCellResourceCoordinationRequestIEsValue_IdInitiatingNodeTypeResourceCoordRequest); ok {
		return x.IdInitiatingNodeTypeResourceCoordRequest
	}
	return nil
}

func (x *EUTraNRCellResourceCoordinationRequestIEsValue) GetIdInterfaceInstanceIndication() *xnap_ies.InterfaceInstanceIndication {
	if x, ok := x.GetEUtraNrCellResourceCoordinationRequestIes().(*EUTraNRCellResourceCoordinationRequestIEsValue_IdInterfaceInstanceIndication); ok {
		return x.IdInterfaceInstanceIndication
	}
	return nil
}

type isEUTraNRCellResourceCoordinationRequestIEsValue_EUtraNrCellResourceCoordinationRequestIes interface {
	isEUTraNRCellResourceCoordinationRequestIEsValue_EUtraNrCellResourceCoordinationRequestIes()
}

type EUTraNRCellResourceCoordinationRequestIEsValue_IdInitiatingNodeTypeResourceCoordRequest struct {
	// @inject_tag: aper:"choiceIdx:1,"
	IdInitiatingNodeTypeResourceCoordRequest *InitiatingNodeTypeResourceCoordRequest `protobuf:"bytes,1,opt,name=id_initiating_node_type_resource_coord_request,json=id-initiatingNodeType-ResourceCoordRequest,proto3,oneof" aper:"choiceIdx:1,"`
}

type EUTraNRCellResourceCoordinationRequestIEsValue_IdInterfaceInstanceIndication struct {
	// @inject_tag: aper:"choiceIdx:2,"
	IdInterfaceInstanceIndication *xnap_ies.InterfaceInstanceIndication `protobuf:"bytes,2,opt,name=id_interface_instance_indication,json=id-InterfaceInstanceIndication,proto3,oneof" aper:"choiceIdx:2,"`
}

func (*EUTraNRCellResourceCoordinationRequestIEsValue_IdInitiatingNodeTypeResourceCoordRequest) isEUTraNRCellResourceCoordinationRequestIEsValue_EUtraNrCellResourceCoordinationRequestIes() {
}

func (*EUTraNRCellResourceCoordinationRequestIEsValue_IdInterfaceInstanceIndication) isEUTraNRCellResourceCoordinationRequestIEsValue_EUtraNrCellResourceCoordinationRequestIes() {
}

// concrete instance(s) of class XNAP-PROTOCOL-IES from xnap_v1.asn1:2465
// @inject_tag: aper:"valueExt"
// {E-UTRA-NR-CellResourceCoordinationRequest-IEs}
type EUTraNRCellResourceCoordinationRequestIEs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"unique,"
	Id *xnap_commondatatypes.ProtocolIeID `protobuf:"bytes,1,opt,name=id,json=&id,proto3" json:"id,omitempty" aper:"unique,"`
	// @inject_tag: aper:"valueLB:0,valueUB:2,"
	Criticality xnap_commondatatypes.Criticality `protobuf:"varint,2,opt,name=criticality,json=&criticality,proto3,enum=xnap.v1.Criticality" json:"criticality,omitempty" aper:"valueLB:0,valueUB:2,"`
	// @inject_tag: aper:"canonicalOrder,"
	Value *EUTraNRCellResourceCoordinationRequestIEsValue `protobuf:"bytes,3,opt,name=value,json=&Value,proto3" json:"value,omitempty" aper:"canonicalOrder,"`
}

func (x *EUTraNRCellResourceCoordinationRequestIEs) Reset() {
	*x = EUTraNRCellResourceCoordinationRequestIEs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[233]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EUTraNRCellResourceCoordinationRequestIEs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EUTraNRCellResourceCoordinationRequestIEs) ProtoMessage() {}

func (x *EUTraNRCellResourceCoordinationRequestIEs) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[233]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EUTraNRCellResourceCoordinationRequestIEs.ProtoReflect.Descriptor instead.
func (*EUTraNRCellResourceCoordinationRequestIEs) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_pdu_contents_proto_rawDescGZIP(), []int{233}
}

func (x *EUTraNRCellResourceCoordinationRequestIEs) GetId() *xnap_commondatatypes.ProtocolIeID {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *EUTraNRCellResourceCoordinationRequestIEs) GetCriticality() xnap_commondatatypes.Criticality {
	if x != nil {
		return x.Criticality
	}
	return xnap_commondatatypes.Criticality(0)
}

func (x *EUTraNRCellResourceCoordinationRequestIEs) GetValue() *EUTraNRCellResourceCoordinationRequestIEsValue {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:2461
// @inject_tag: aper:"valueExt"
// {E-UTRA-NR-CellResourceCoordinationRequest}
type EUTraNRCellResourceCoordinationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProtocolIes []*EUTraNRCellResourceCoordinationRequestIEs `protobuf:"bytes,1,rep,name=protocol_ies,json=protocolIEs,proto3" json:"protocol_ies,omitempty"`
}

func (x *EUTraNRCellResourceCoordinationRequest) Reset() {
	*x = EUTraNRCellResourceCoordinationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[234]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EUTraNRCellResourceCoordinationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EUTraNRCellResourceCoordinationRequest) ProtoMessage() {}

func (x *EUTraNRCellResourceCoordinationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[234]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EUTraNRCellResourceCoordinationRequest.ProtoReflect.Descriptor instead.
func (*EUTraNRCellResourceCoordinationRequest) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_pdu_contents_proto_rawDescGZIP(), []int{234}
}

func (x *EUTraNRCellResourceCoordinationRequest) GetProtocolIes() []*EUTraNRCellResourceCoordinationRequestIEs {
	if x != nil {
		return x.ProtocolIes
	}
	return nil
}

// value set from xnap_v1.asn1:2477
// {InitiatingNodeType-ResourceCoordRequest-ExtIEs}
type InitiatingNodeTypeResourceCoordRequestExtIes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *emptypb.Empty `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *InitiatingNodeTypeResourceCoordRequestExtIes) Reset() {
	*x = InitiatingNodeTypeResourceCoordRequestExtIes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[235]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InitiatingNodeTypeResourceCoordRequestExtIes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InitiatingNodeTypeResourceCoordRequestExtIes) ProtoMessage() {}

func (x *InitiatingNodeTypeResourceCoordRequestExtIes) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[235]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InitiatingNodeTypeResourceCoordRequestExtIes.ProtoReflect.Descriptor instead.
func (*InitiatingNodeTypeResourceCoordRequestExtIes) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_pdu_contents_proto_rawDescGZIP(), []int{235}
}

func (x *InitiatingNodeTypeResourceCoordRequestExtIes) GetValue() *emptypb.Empty {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:2472
// {InitiatingNodeType-ResourceCoordRequest}
type InitiatingNodeTypeResourceCoordRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// choice from xnap_v1.asn1:2472
	//
	// Types that are assignable to InitiatingNodeTypeResourceCoordRequest:
	//	*InitiatingNodeTypeResourceCoordRequest_NgENb
	//	*InitiatingNodeTypeResourceCoordRequest_GNb
	//	*InitiatingNodeTypeResourceCoordRequest_ChoiceExtension
	InitiatingNodeTypeResourceCoordRequest isInitiatingNodeTypeResourceCoordRequest_InitiatingNodeTypeResourceCoordRequest `protobuf_oneof:"initiating_node_type_resource_coord_request"`
}

func (x *InitiatingNodeTypeResourceCoordRequest) Reset() {
	*x = InitiatingNodeTypeResourceCoordRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[236]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InitiatingNodeTypeResourceCoordRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InitiatingNodeTypeResourceCoordRequest) ProtoMessage() {}

func (x *InitiatingNodeTypeResourceCoordRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[236]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InitiatingNodeTypeResourceCoordRequest.ProtoReflect.Descriptor instead.
func (*InitiatingNodeTypeResourceCoordRequest) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_pdu_contents_proto_rawDescGZIP(), []int{236}
}

func (m *InitiatingNodeTypeResourceCoordRequest) GetInitiatingNodeTypeResourceCoordRequest() isInitiatingNodeTypeResourceCoordRequest_InitiatingNodeTypeResourceCoordRequest {
	if m != nil {
		return m.InitiatingNodeTypeResourceCoordRequest
	}
	return nil
}

func (x *InitiatingNodeTypeResourceCoordRequest) GetNgENb() *ResourceCoordRequestngeNbinitiated {
	if x, ok := x.GetInitiatingNodeTypeResourceCoordRequest().(*InitiatingNodeTypeResourceCoordRequest_NgENb); ok {
		return x.NgENb
	}
	return nil
}

func (x *InitiatingNodeTypeResourceCoordRequest) GetGNb() *ResourceCoordRequestgNbinitiated {
	if x, ok := x.GetInitiatingNodeTypeResourceCoordRequest().(*InitiatingNodeTypeResourceCoordRequest_GNb); ok {
		return x.GNb
	}
	return nil
}

func (x *InitiatingNodeTypeResourceCoordRequest) GetChoiceExtension() *InitiatingNodeTypeResourceCoordRequestExtIes {
	if x, ok := x.GetInitiatingNodeTypeResourceCoordRequest().(*InitiatingNodeTypeResourceCoordRequest_ChoiceExtension); ok {
		return x.ChoiceExtension
	}
	return nil
}

type isInitiatingNodeTypeResourceCoordRequest_InitiatingNodeTypeResourceCoordRequest interface {
	isInitiatingNodeTypeResourceCoordRequest_InitiatingNodeTypeResourceCoordRequest()
}

type InitiatingNodeTypeResourceCoordRequest_NgENb struct {
	// @inject_tag: aper:"choiceIdx:1,valueExt,"
	NgENb *ResourceCoordRequestngeNbinitiated `protobuf:"bytes,1,opt,name=ng_e_nb,json=ng-eNB,proto3,oneof" aper:"choiceIdx:1,valueExt,"`
}

type InitiatingNodeTypeResourceCoordRequest_GNb struct {
	// @inject_tag: aper:"choiceIdx:2,valueExt,"
	GNb *ResourceCoordRequestgNbinitiated `protobuf:"bytes,2,opt,name=g_nb,json=gNB,proto3,oneof" aper:"choiceIdx:2,valueExt,"`
}

type InitiatingNodeTypeResourceCoordRequest_ChoiceExtension struct {
	// @inject_tag: aper:"choiceIdx:3,"
	ChoiceExtension *InitiatingNodeTypeResourceCoordRequestExtIes `protobuf:"bytes,3,opt,name=choice_extension,json=choice-extension,proto3,oneof" aper:"choiceIdx:3,"`
}

func (*InitiatingNodeTypeResourceCoordRequest_NgENb) isInitiatingNodeTypeResourceCoordRequest_InitiatingNodeTypeResourceCoordRequest() {
}

func (*InitiatingNodeTypeResourceCoordRequest_GNb) isInitiatingNodeTypeResourceCoordRequest_InitiatingNodeTypeResourceCoordRequest() {
}

func (*InitiatingNodeTypeResourceCoordRequest_ChoiceExtension) isInitiatingNodeTypeResourceCoordRequest_InitiatingNodeTypeResourceCoordRequest() {
}

// value set from xnap_v1.asn1:2489
// {ResourceCoordRequest-ng-eNB-initiated-ExtIEs}
type ResourceCoordRequestngeNbinitiatedExtIes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *emptypb.Empty `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *ResourceCoordRequestngeNbinitiatedExtIes) Reset() {
	*x = ResourceCoordRequestngeNbinitiatedExtIes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[237]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResourceCoordRequestngeNbinitiatedExtIes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResourceCoordRequestngeNbinitiatedExtIes) ProtoMessage() {}

func (x *ResourceCoordRequestngeNbinitiatedExtIes) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[237]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResourceCoordRequestngeNbinitiatedExtIes.ProtoReflect.Descriptor instead.
func (*ResourceCoordRequestngeNbinitiatedExtIes) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_pdu_contents_proto_rawDescGZIP(), []int{237}
}

func (x *ResourceCoordRequestngeNbinitiatedExtIes) GetValue() *emptypb.Empty {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:2482
// @inject_tag: aper:"valueExt"
// {ResourceCoordRequest-ng-eNB-initiated}
type ResourceCoordRequestngeNbinitiated struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"valueExt,"
	DataTrafficResourceIndication *xnap_ies.DataTrafficResourceIndication `protobuf:"bytes,1,opt,name=data_traffic_resource_indication,json=dataTrafficResourceIndication,proto3" json:"data_traffic_resource_indication,omitempty" aper:"valueExt,"`
	SpectrumSharingGroupId        *xnap_ies.SpectrumSharingGroupId        `protobuf:"bytes,2,opt,name=spectrum_sharing_group_id,json=spectrumSharingGroupID,proto3" json:"spectrum_sharing_group_id,omitempty"`
	// @inject_tag: aper:"optional,sizeLB:1,sizeUB:16384,"
	ListofEUtracells []*xnap_ies.EUTraCGi `protobuf:"bytes,3,rep,name=listof_e_utracells,json=listofE-UTRACells,proto3" json:"listof_e_utracells,omitempty" aper:"optional,sizeLB:1,sizeUB:16384,"`
	// @inject_tag: aper:"optional,sizeLB:1,"
	IEExtensions []*ResourceCoordRequestngeNbinitiatedExtIes `protobuf:"bytes,4,rep,name=i_e_extensions,json=iE-Extensions,proto3" json:"i_e_extensions,omitempty" aper:"optional,sizeLB:1,"`
}

func (x *ResourceCoordRequestngeNbinitiated) Reset() {
	*x = ResourceCoordRequestngeNbinitiated{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[238]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResourceCoordRequestngeNbinitiated) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResourceCoordRequestngeNbinitiated) ProtoMessage() {}

func (x *ResourceCoordRequestngeNbinitiated) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[238]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResourceCoordRequestngeNbinitiated.ProtoReflect.Descriptor instead.
func (*ResourceCoordRequestngeNbinitiated) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_pdu_contents_proto_rawDescGZIP(), []int{238}
}

func (x *ResourceCoordRequestngeNbinitiated) GetDataTrafficResourceIndication() *xnap_ies.DataTrafficResourceIndication {
	if x != nil {
		return x.DataTrafficResourceIndication
	}
	return nil
}

func (x *ResourceCoordRequestngeNbinitiated) GetSpectrumSharingGroupId() *xnap_ies.SpectrumSharingGroupId {
	if x != nil {
		return x.SpectrumSharingGroupId
	}
	return nil
}

func (x *ResourceCoordRequestngeNbinitiated) GetListofEUtracells() []*xnap_ies.EUTraCGi {
	if x != nil {
		return x.ListofEUtracells
	}
	return nil
}

func (x *ResourceCoordRequestngeNbinitiated) GetIEExtensions() []*ResourceCoordRequestngeNbinitiatedExtIes {
	if x != nil {
		return x.IEExtensions
	}
	return nil
}

// value set from xnap_v1.asn1:2503
// {ResourceCoordRequest-gNB-initiated-ExtIEs}
type ResourceCoordRequestgNbinitiatedExtIes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *emptypb.Empty `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *ResourceCoordRequestgNbinitiatedExtIes) Reset() {
	*x = ResourceCoordRequestgNbinitiatedExtIes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[239]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResourceCoordRequestgNbinitiatedExtIes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResourceCoordRequestgNbinitiatedExtIes) ProtoMessage() {}

func (x *ResourceCoordRequestgNbinitiatedExtIes) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[239]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResourceCoordRequestgNbinitiatedExtIes.ProtoReflect.Descriptor instead.
func (*ResourceCoordRequestgNbinitiatedExtIes) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_pdu_contents_proto_rawDescGZIP(), []int{239}
}

func (x *ResourceCoordRequestgNbinitiatedExtIes) GetValue() *emptypb.Empty {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:2495
// @inject_tag: aper:"valueExt"
// {ResourceCoordRequest-gNB-initiated}
type ResourceCoordRequestgNbinitiated struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"valueExt,"
	DataTrafficResourceIndication *xnap_ies.DataTrafficResourceIndication `protobuf:"bytes,1,opt,name=data_traffic_resource_indication,json=dataTrafficResourceIndication,proto3" json:"data_traffic_resource_indication,omitempty" aper:"valueExt,"`
	// @inject_tag: aper:"optional,sizeLB:1,sizeUB:16384,"
	ListofEUtracells       []*xnap_ies.EUTraCGi             `protobuf:"bytes,2,rep,name=listof_e_utracells,json=listofE-UTRACells,proto3" json:"listof_e_utracells,omitempty" aper:"optional,sizeLB:1,sizeUB:16384,"`
	SpectrumSharingGroupId *xnap_ies.SpectrumSharingGroupId `protobuf:"bytes,3,opt,name=spectrum_sharing_group_id,json=spectrumSharingGroupID,proto3" json:"spectrum_sharing_group_id,omitempty"`
	// @inject_tag: aper:"optional,sizeLB:1,sizeUB:16384,"
	ListofNrcells []*xnap_ies.NrCGi `protobuf:"bytes,4,rep,name=listof_nrcells,json=listofNRCells,proto3" json:"listof_nrcells,omitempty" aper:"optional,sizeLB:1,sizeUB:16384,"`
	// @inject_tag: aper:"optional,sizeLB:1,"
	IEExtensions []*ResourceCoordRequestgNbinitiatedExtIes `protobuf:"bytes,5,rep,name=i_e_extensions,json=iE-Extensions,proto3" json:"i_e_extensions,omitempty" aper:"optional,sizeLB:1,"`
}

func (x *ResourceCoordRequestgNbinitiated) Reset() {
	*x = ResourceCoordRequestgNbinitiated{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[240]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResourceCoordRequestgNbinitiated) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResourceCoordRequestgNbinitiated) ProtoMessage() {}

func (x *ResourceCoordRequestgNbinitiated) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[240]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResourceCoordRequestgNbinitiated.ProtoReflect.Descriptor instead.
func (*ResourceCoordRequestgNbinitiated) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_pdu_contents_proto_rawDescGZIP(), []int{240}
}

func (x *ResourceCoordRequestgNbinitiated) GetDataTrafficResourceIndication() *xnap_ies.DataTrafficResourceIndication {
	if x != nil {
		return x.DataTrafficResourceIndication
	}
	return nil
}

func (x *ResourceCoordRequestgNbinitiated) GetListofEUtracells() []*xnap_ies.EUTraCGi {
	if x != nil {
		return x.ListofEUtracells
	}
	return nil
}

func (x *ResourceCoordRequestgNbinitiated) GetSpectrumSharingGroupId() *xnap_ies.SpectrumSharingGroupId {
	if x != nil {
		return x.SpectrumSharingGroupId
	}
	return nil
}

func (x *ResourceCoordRequestgNbinitiated) GetListofNrcells() []*xnap_ies.NrCGi {
	if x != nil {
		return x.ListofNrcells
	}
	return nil
}

func (x *ResourceCoordRequestgNbinitiated) GetIEExtensions() []*ResourceCoordRequestgNbinitiatedExtIes {
	if x != nil {
		return x.IEExtensions
	}
	return nil
}

// value set from xnap_v1.asn1:2519
// {E-UTRA-NR-CellResourceCoordinationResponse-IEs&Value}
type EUTraNRCellResourceCoordinationResponseIEsValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// value set translated as choice from xnap_v1.asn1:2519
	//
	// Types that are assignable to EUtraNrCellResourceCoordinationResponseIes:
	//	*EUTraNRCellResourceCoordinationResponseIEsValue_IdRespondingNodeTypeResourceCoordResponse
	//	*EUTraNRCellResourceCoordinationResponseIEsValue_IdInterfaceInstanceIndication
	EUtraNrCellResourceCoordinationResponseIes isEUTraNRCellResourceCoordinationResponseIEsValue_EUtraNrCellResourceCoordinationResponseIes `protobuf_oneof:"e_utra_nr_cell_resource_coordination_response_ies"`
}

func (x *EUTraNRCellResourceCoordinationResponseIEsValue) Reset() {
	*x = EUTraNRCellResourceCoordinationResponseIEsValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[241]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EUTraNRCellResourceCoordinationResponseIEsValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EUTraNRCellResourceCoordinationResponseIEsValue) ProtoMessage() {}

func (x *EUTraNRCellResourceCoordinationResponseIEsValue) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[241]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EUTraNRCellResourceCoordinationResponseIEsValue.ProtoReflect.Descriptor instead.
func (*EUTraNRCellResourceCoordinationResponseIEsValue) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_pdu_contents_proto_rawDescGZIP(), []int{241}
}

func (m *EUTraNRCellResourceCoordinationResponseIEsValue) GetEUtraNrCellResourceCoordinationResponseIes() isEUTraNRCellResourceCoordinationResponseIEsValue_EUtraNrCellResourceCoordinationResponseIes {
	if m != nil {
		return m.EUtraNrCellResourceCoordinationResponseIes
	}
	return nil
}

func (x *EUTraNRCellResourceCoordinationResponseIEsValue) GetIdRespondingNodeTypeResourceCoordResponse() *RespondingNodeTypeResourceCoordResponse {
	if x, ok := x.GetEUtraNrCellResourceCoordinationResponseIes().(*EUTraNRCellResourceCoordinationResponseIEsValue_IdRespondingNodeTypeResourceCoordResponse); ok {
		return x.IdRespondingNodeTypeResourceCoordResponse
	}
	return nil
}

func (x *EUTraNRCellResourceCoordinationResponseIEsValue) GetIdInterfaceInstanceIndication() *xnap_ies.InterfaceInstanceIndication {
	if x, ok := x.GetEUtraNrCellResourceCoordinationResponseIes().(*EUTraNRCellResourceCoordinationResponseIEsValue_IdInterfaceInstanceIndication); ok {
		return x.IdInterfaceInstanceIndication
	}
	return nil
}

type isEUTraNRCellResourceCoordinationResponseIEsValue_EUtraNrCellResourceCoordinationResponseIes interface {
	isEUTraNRCellResourceCoordinationResponseIEsValue_EUtraNrCellResourceCoordinationResponseIes()
}

type EUTraNRCellResourceCoordinationResponseIEsValue_IdRespondingNodeTypeResourceCoordResponse struct {
	// @inject_tag: aper:"choiceIdx:1,"
	IdRespondingNodeTypeResourceCoordResponse *RespondingNodeTypeResourceCoordResponse `protobuf:"bytes,1,opt,name=id_responding_node_type_resource_coord_response,json=id-respondingNodeType-ResourceCoordResponse,proto3,oneof" aper:"choiceIdx:1,"`
}

type EUTraNRCellResourceCoordinationResponseIEsValue_IdInterfaceInstanceIndication struct {
	// @inject_tag: aper:"choiceIdx:2,"
	IdInterfaceInstanceIndication *xnap_ies.InterfaceInstanceIndication `protobuf:"bytes,2,opt,name=id_interface_instance_indication,json=id-InterfaceInstanceIndication,proto3,oneof" aper:"choiceIdx:2,"`
}

func (*EUTraNRCellResourceCoordinationResponseIEsValue_IdRespondingNodeTypeResourceCoordResponse) isEUTraNRCellResourceCoordinationResponseIEsValue_EUtraNrCellResourceCoordinationResponseIes() {
}

func (*EUTraNRCellResourceCoordinationResponseIEsValue_IdInterfaceInstanceIndication) isEUTraNRCellResourceCoordinationResponseIEsValue_EUtraNrCellResourceCoordinationResponseIes() {
}

// concrete instance(s) of class XNAP-PROTOCOL-IES from xnap_v1.asn1:2519
// @inject_tag: aper:"valueExt"
// {E-UTRA-NR-CellResourceCoordinationResponse-IEs}
type EUTraNRCellResourceCoordinationResponseIEs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"unique,"
	Id *xnap_commondatatypes.ProtocolIeID `protobuf:"bytes,1,opt,name=id,json=&id,proto3" json:"id,omitempty" aper:"unique,"`
	// @inject_tag: aper:"valueLB:0,valueUB:2,"
	Criticality xnap_commondatatypes.Criticality `protobuf:"varint,2,opt,name=criticality,json=&criticality,proto3,enum=xnap.v1.Criticality" json:"criticality,omitempty" aper:"valueLB:0,valueUB:2,"`
	// @inject_tag: aper:"canonicalOrder,"
	Value *EUTraNRCellResourceCoordinationResponseIEsValue `protobuf:"bytes,3,opt,name=value,json=&Value,proto3" json:"value,omitempty" aper:"canonicalOrder,"`
}

func (x *EUTraNRCellResourceCoordinationResponseIEs) Reset() {
	*x = EUTraNRCellResourceCoordinationResponseIEs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[242]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EUTraNRCellResourceCoordinationResponseIEs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EUTraNRCellResourceCoordinationResponseIEs) ProtoMessage() {}

func (x *EUTraNRCellResourceCoordinationResponseIEs) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[242]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EUTraNRCellResourceCoordinationResponseIEs.ProtoReflect.Descriptor instead.
func (*EUTraNRCellResourceCoordinationResponseIEs) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_pdu_contents_proto_rawDescGZIP(), []int{242}
}

func (x *EUTraNRCellResourceCoordinationResponseIEs) GetId() *xnap_commondatatypes.ProtocolIeID {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *EUTraNRCellResourceCoordinationResponseIEs) GetCriticality() xnap_commondatatypes.Criticality {
	if x != nil {
		return x.Criticality
	}
	return xnap_commondatatypes.Criticality(0)
}

func (x *EUTraNRCellResourceCoordinationResponseIEs) GetValue() *EUTraNRCellResourceCoordinationResponseIEsValue {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:2515
// @inject_tag: aper:"valueExt"
// {E-UTRA-NR-CellResourceCoordinationResponse}
type EUTraNRCellResourceCoordinationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProtocolIes []*EUTraNRCellResourceCoordinationResponseIEs `protobuf:"bytes,1,rep,name=protocol_ies,json=protocolIEs,proto3" json:"protocol_ies,omitempty"`
}

func (x *EUTraNRCellResourceCoordinationResponse) Reset() {
	*x = EUTraNRCellResourceCoordinationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[243]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EUTraNRCellResourceCoordinationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EUTraNRCellResourceCoordinationResponse) ProtoMessage() {}

func (x *EUTraNRCellResourceCoordinationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[243]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EUTraNRCellResourceCoordinationResponse.ProtoReflect.Descriptor instead.
func (*EUTraNRCellResourceCoordinationResponse) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_pdu_contents_proto_rawDescGZIP(), []int{243}
}

func (x *EUTraNRCellResourceCoordinationResponse) GetProtocolIes() []*EUTraNRCellResourceCoordinationResponseIEs {
	if x != nil {
		return x.ProtocolIes
	}
	return nil
}

// value set from xnap_v1.asn1:2531
// {RespondingNodeType-ResourceCoordResponse-ExtIEs}
type RespondingNodeTypeResourceCoordResponseExtIes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *emptypb.Empty `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *RespondingNodeTypeResourceCoordResponseExtIes) Reset() {
	*x = RespondingNodeTypeResourceCoordResponseExtIes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[244]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RespondingNodeTypeResourceCoordResponseExtIes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RespondingNodeTypeResourceCoordResponseExtIes) ProtoMessage() {}

func (x *RespondingNodeTypeResourceCoordResponseExtIes) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[244]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RespondingNodeTypeResourceCoordResponseExtIes.ProtoReflect.Descriptor instead.
func (*RespondingNodeTypeResourceCoordResponseExtIes) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_pdu_contents_proto_rawDescGZIP(), []int{244}
}

func (x *RespondingNodeTypeResourceCoordResponseExtIes) GetValue() *emptypb.Empty {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:2526
// {RespondingNodeType-ResourceCoordResponse}
type RespondingNodeTypeResourceCoordResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// choice from xnap_v1.asn1:2526
	//
	// Types that are assignable to RespondingNodeTypeResourceCoordResponse:
	//	*RespondingNodeTypeResourceCoordResponse_NgENb
	//	*RespondingNodeTypeResourceCoordResponse_GNb
	//	*RespondingNodeTypeResourceCoordResponse_ChoiceExtension
	RespondingNodeTypeResourceCoordResponse isRespondingNodeTypeResourceCoordResponse_RespondingNodeTypeResourceCoordResponse `protobuf_oneof:"responding_node_type_resource_coord_response"`
}

func (x *RespondingNodeTypeResourceCoordResponse) Reset() {
	*x = RespondingNodeTypeResourceCoordResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[245]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RespondingNodeTypeResourceCoordResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RespondingNodeTypeResourceCoordResponse) ProtoMessage() {}

func (x *RespondingNodeTypeResourceCoordResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[245]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RespondingNodeTypeResourceCoordResponse.ProtoReflect.Descriptor instead.
func (*RespondingNodeTypeResourceCoordResponse) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_pdu_contents_proto_rawDescGZIP(), []int{245}
}

func (m *RespondingNodeTypeResourceCoordResponse) GetRespondingNodeTypeResourceCoordResponse() isRespondingNodeTypeResourceCoordResponse_RespondingNodeTypeResourceCoordResponse {
	if m != nil {
		return m.RespondingNodeTypeResourceCoordResponse
	}
	return nil
}

func (x *RespondingNodeTypeResourceCoordResponse) GetNgENb() *ResourceCoordResponsengeNbinitiated {
	if x, ok := x.GetRespondingNodeTypeResourceCoordResponse().(*RespondingNodeTypeResourceCoordResponse_NgENb); ok {
		return x.NgENb
	}
	return nil
}

func (x *RespondingNodeTypeResourceCoordResponse) GetGNb() *ResourceCoordResponsegNbinitiated {
	if x, ok := x.GetRespondingNodeTypeResourceCoordResponse().(*RespondingNodeTypeResourceCoordResponse_GNb); ok {
		return x.GNb
	}
	return nil
}

func (x *RespondingNodeTypeResourceCoordResponse) GetChoiceExtension() *RespondingNodeTypeResourceCoordResponseExtIes {
	if x, ok := x.GetRespondingNodeTypeResourceCoordResponse().(*RespondingNodeTypeResourceCoordResponse_ChoiceExtension); ok {
		return x.ChoiceExtension
	}
	return nil
}

type isRespondingNodeTypeResourceCoordResponse_RespondingNodeTypeResourceCoordResponse interface {
	isRespondingNodeTypeResourceCoordResponse_RespondingNodeTypeResourceCoordResponse()
}

type RespondingNodeTypeResourceCoordResponse_NgENb struct {
	// @inject_tag: aper:"choiceIdx:1,valueExt,"
	NgENb *ResourceCoordResponsengeNbinitiated `protobuf:"bytes,1,opt,name=ng_e_nb,json=ng-eNB,proto3,oneof" aper:"choiceIdx:1,valueExt,"`
}

type RespondingNodeTypeResourceCoordResponse_GNb struct {
	// @inject_tag: aper:"choiceIdx:2,valueExt,"
	GNb *ResourceCoordResponsegNbinitiated `protobuf:"bytes,2,opt,name=g_nb,json=gNB,proto3,oneof" aper:"choiceIdx:2,valueExt,"`
}

type RespondingNodeTypeResourceCoordResponse_ChoiceExtension struct {
	// @inject_tag: aper:"choiceIdx:3,"
	ChoiceExtension *RespondingNodeTypeResourceCoordResponseExtIes `protobuf:"bytes,3,opt,name=choice_extension,json=choice-extension,proto3,oneof" aper:"choiceIdx:3,"`
}

func (*RespondingNodeTypeResourceCoordResponse_NgENb) isRespondingNodeTypeResourceCoordResponse_RespondingNodeTypeResourceCoordResponse() {
}

func (*RespondingNodeTypeResourceCoordResponse_GNb) isRespondingNodeTypeResourceCoordResponse_RespondingNodeTypeResourceCoordResponse() {
}

func (*RespondingNodeTypeResourceCoordResponse_ChoiceExtension) isRespondingNodeTypeResourceCoordResponse_RespondingNodeTypeResourceCoordResponse() {
}

// value set from xnap_v1.asn1:2543
// {ResourceCoordResponse-ng-eNB-initiated-ExtIEs}
type ResourceCoordResponsengeNbinitiatedExtIes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *emptypb.Empty `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *ResourceCoordResponsengeNbinitiatedExtIes) Reset() {
	*x = ResourceCoordResponsengeNbinitiatedExtIes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[246]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResourceCoordResponsengeNbinitiatedExtIes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResourceCoordResponsengeNbinitiatedExtIes) ProtoMessage() {}

func (x *ResourceCoordResponsengeNbinitiatedExtIes) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[246]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResourceCoordResponsengeNbinitiatedExtIes.ProtoReflect.Descriptor instead.
func (*ResourceCoordResponsengeNbinitiatedExtIes) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_pdu_contents_proto_rawDescGZIP(), []int{246}
}

func (x *ResourceCoordResponsengeNbinitiatedExtIes) GetValue() *emptypb.Empty {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:2536
// @inject_tag: aper:"valueExt"
// {ResourceCoordResponse-ng-eNB-initiated}
type ResourceCoordResponsengeNbinitiated struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"valueExt,"
	DataTrafficResourceIndication *xnap_ies.DataTrafficResourceIndication `protobuf:"bytes,1,opt,name=data_traffic_resource_indication,json=dataTrafficResourceIndication,proto3" json:"data_traffic_resource_indication,omitempty" aper:"valueExt,"`
	SpectrumSharingGroupId        *xnap_ies.SpectrumSharingGroupId        `protobuf:"bytes,2,opt,name=spectrum_sharing_group_id,json=spectrumSharingGroupID,proto3" json:"spectrum_sharing_group_id,omitempty"`
	// @inject_tag: aper:"optional,sizeLB:1,sizeUB:16384,"
	ListofEUtracells []*xnap_ies.EUTraCGi `protobuf:"bytes,3,rep,name=listof_e_utracells,json=listofE-UTRACells,proto3" json:"listof_e_utracells,omitempty" aper:"optional,sizeLB:1,sizeUB:16384,"`
	// @inject_tag: aper:"optional,sizeLB:1,"
	IEExtensions []*ResourceCoordResponsengeNbinitiatedExtIes `protobuf:"bytes,4,rep,name=i_e_extensions,json=iE-Extensions,proto3" json:"i_e_extensions,omitempty" aper:"optional,sizeLB:1,"`
}

func (x *ResourceCoordResponsengeNbinitiated) Reset() {
	*x = ResourceCoordResponsengeNbinitiated{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[247]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResourceCoordResponsengeNbinitiated) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResourceCoordResponsengeNbinitiated) ProtoMessage() {}

func (x *ResourceCoordResponsengeNbinitiated) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[247]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResourceCoordResponsengeNbinitiated.ProtoReflect.Descriptor instead.
func (*ResourceCoordResponsengeNbinitiated) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_pdu_contents_proto_rawDescGZIP(), []int{247}
}

func (x *ResourceCoordResponsengeNbinitiated) GetDataTrafficResourceIndication() *xnap_ies.DataTrafficResourceIndication {
	if x != nil {
		return x.DataTrafficResourceIndication
	}
	return nil
}

func (x *ResourceCoordResponsengeNbinitiated) GetSpectrumSharingGroupId() *xnap_ies.SpectrumSharingGroupId {
	if x != nil {
		return x.SpectrumSharingGroupId
	}
	return nil
}

func (x *ResourceCoordResponsengeNbinitiated) GetListofEUtracells() []*xnap_ies.EUTraCGi {
	if x != nil {
		return x.ListofEUtracells
	}
	return nil
}

func (x *ResourceCoordResponsengeNbinitiated) GetIEExtensions() []*ResourceCoordResponsengeNbinitiatedExtIes {
	if x != nil {
		return x.IEExtensions
	}
	return nil
}

// value set from xnap_v1.asn1:2556
// {ResourceCoordResponse-gNB-initiated-ExtIEs}
type ResourceCoordResponsegNbinitiatedExtIes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *emptypb.Empty `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *ResourceCoordResponsegNbinitiatedExtIes) Reset() {
	*x = ResourceCoordResponsegNbinitiatedExtIes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[248]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResourceCoordResponsegNbinitiatedExtIes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResourceCoordResponsegNbinitiatedExtIes) ProtoMessage() {}

func (x *ResourceCoordResponsegNbinitiatedExtIes) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[248]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResourceCoordResponsegNbinitiatedExtIes.ProtoReflect.Descriptor instead.
func (*ResourceCoordResponsegNbinitiatedExtIes) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_pdu_contents_proto_rawDescGZIP(), []int{248}
}

func (x *ResourceCoordResponsegNbinitiatedExtIes) GetValue() *emptypb.Empty {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:2549
// @inject_tag: aper:"valueExt"
// {ResourceCoordResponse-gNB-initiated}
type ResourceCoordResponsegNbinitiated struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"valueExt,"
	DataTrafficResourceIndication *xnap_ies.DataTrafficResourceIndication `protobuf:"bytes,1,opt,name=data_traffic_resource_indication,json=dataTrafficResourceIndication,proto3" json:"data_traffic_resource_indication,omitempty" aper:"valueExt,"`
	SpectrumSharingGroupId        *xnap_ies.SpectrumSharingGroupId        `protobuf:"bytes,2,opt,name=spectrum_sharing_group_id,json=spectrumSharingGroupID,proto3" json:"spectrum_sharing_group_id,omitempty"`
	// @inject_tag: aper:"optional,sizeLB:1,sizeUB:16384,"
	ListofNrcells []*xnap_ies.NrCGi `protobuf:"bytes,3,rep,name=listof_nrcells,json=listofNRCells,proto3" json:"listof_nrcells,omitempty" aper:"optional,sizeLB:1,sizeUB:16384,"`
	// @inject_tag: aper:"optional,sizeLB:1,"
	IEExtensions []*ResourceCoordResponsegNbinitiatedExtIes `protobuf:"bytes,4,rep,name=i_e_extensions,json=iE-Extensions,proto3" json:"i_e_extensions,omitempty" aper:"optional,sizeLB:1,"`
}

func (x *ResourceCoordResponsegNbinitiated) Reset() {
	*x = ResourceCoordResponsegNbinitiated{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[249]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResourceCoordResponsegNbinitiated) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResourceCoordResponsegNbinitiated) ProtoMessage() {}

func (x *ResourceCoordResponsegNbinitiated) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[249]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResourceCoordResponsegNbinitiated.ProtoReflect.Descriptor instead.
func (*ResourceCoordResponsegNbinitiated) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_pdu_contents_proto_rawDescGZIP(), []int{249}
}

func (x *ResourceCoordResponsegNbinitiated) GetDataTrafficResourceIndication() *xnap_ies.DataTrafficResourceIndication {
	if x != nil {
		return x.DataTrafficResourceIndication
	}
	return nil
}

func (x *ResourceCoordResponsegNbinitiated) GetSpectrumSharingGroupId() *xnap_ies.SpectrumSharingGroupId {
	if x != nil {
		return x.SpectrumSharingGroupId
	}
	return nil
}

func (x *ResourceCoordResponsegNbinitiated) GetListofNrcells() []*xnap_ies.NrCGi {
	if x != nil {
		return x.ListofNrcells
	}
	return nil
}

func (x *ResourceCoordResponsegNbinitiated) GetIEExtensions() []*ResourceCoordResponsegNbinitiatedExtIes {
	if x != nil {
		return x.IEExtensions
	}
	return nil
}

// value set from xnap_v1.asn1:2571
// {SecondaryRATDataUsageReport-IEs&Value}
type SecondaryRatdataUsageReportIEsValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// value set translated as choice from xnap_v1.asn1:2571
	//
	// Types that are assignable to SecondaryRatdataUsageReportIes:
	//	*SecondaryRatdataUsageReportIEsValue_IdMNgRannodeUexnApid
	//	*SecondaryRatdataUsageReportIEsValue_IdSNgRannodeUexnApid
	//	*SecondaryRatdataUsageReportIEsValue_IdPdusessionResourceSecondaryRatusageList
	SecondaryRatdataUsageReportIes isSecondaryRatdataUsageReportIEsValue_SecondaryRatdataUsageReportIes `protobuf_oneof:"secondary_ratdata_usage_report_ies"`
}

func (x *SecondaryRatdataUsageReportIEsValue) Reset() {
	*x = SecondaryRatdataUsageReportIEsValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[250]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SecondaryRatdataUsageReportIEsValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SecondaryRatdataUsageReportIEsValue) ProtoMessage() {}

func (x *SecondaryRatdataUsageReportIEsValue) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[250]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SecondaryRatdataUsageReportIEsValue.ProtoReflect.Descriptor instead.
func (*SecondaryRatdataUsageReportIEsValue) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_pdu_contents_proto_rawDescGZIP(), []int{250}
}

func (m *SecondaryRatdataUsageReportIEsValue) GetSecondaryRatdataUsageReportIes() isSecondaryRatdataUsageReportIEsValue_SecondaryRatdataUsageReportIes {
	if m != nil {
		return m.SecondaryRatdataUsageReportIes
	}
	return nil
}

func (x *SecondaryRatdataUsageReportIEsValue) GetIdMNgRannodeUexnApid() *xnap_ies.NgRAnnodeUexnApid {
	if x, ok := x.GetSecondaryRatdataUsageReportIes().(*SecondaryRatdataUsageReportIEsValue_IdMNgRannodeUexnApid); ok {
		return x.IdMNgRannodeUexnApid
	}
	return nil
}

func (x *SecondaryRatdataUsageReportIEsValue) GetIdSNgRannodeUexnApid() *xnap_ies.NgRAnnodeUexnApid {
	if x, ok := x.GetSecondaryRatdataUsageReportIes().(*SecondaryRatdataUsageReportIEsValue_IdSNgRannodeUexnApid); ok {
		return x.IdSNgRannodeUexnApid
	}
	return nil
}

func (x *SecondaryRatdataUsageReportIEsValue) GetIdPdusessionResourceSecondaryRatusageList() *xnap_ies.PdusessionResourceSecondaryRatusageList {
	if x, ok := x.GetSecondaryRatdataUsageReportIes().(*SecondaryRatdataUsageReportIEsValue_IdPdusessionResourceSecondaryRatusageList); ok {
		return x.IdPdusessionResourceSecondaryRatusageList
	}
	return nil
}

type isSecondaryRatdataUsageReportIEsValue_SecondaryRatdataUsageReportIes interface {
	isSecondaryRatdataUsageReportIEsValue_SecondaryRatdataUsageReportIes()
}

type SecondaryRatdataUsageReportIEsValue_IdMNgRannodeUexnApid struct {
	// @inject_tag: aper:"choiceIdx:1,"
	IdMNgRannodeUexnApid *xnap_ies.NgRAnnodeUexnApid `protobuf:"bytes,1,opt,name=id_m_ng_rannode_uexn_apid,json=id-M-NG-RANnodeUEXnAPID,proto3,oneof" aper:"choiceIdx:1,"`
}

type SecondaryRatdataUsageReportIEsValue_IdSNgRannodeUexnApid struct {
	// @inject_tag: aper:"choiceIdx:2,"
	IdSNgRannodeUexnApid *xnap_ies.NgRAnnodeUexnApid `protobuf:"bytes,2,opt,name=id_s_ng_rannode_uexn_apid,json=id-S-NG-RANnodeUEXnAPID,proto3,oneof" aper:"choiceIdx:2,"`
}

type SecondaryRatdataUsageReportIEsValue_IdPdusessionResourceSecondaryRatusageList struct {
	// @inject_tag: aper:"choiceIdx:3,"
	IdPdusessionResourceSecondaryRatusageList *xnap_ies.PdusessionResourceSecondaryRatusageList `protobuf:"bytes,3,opt,name=id_pdusession_resource_secondary_ratusage_list,json=id-PDUSessionResourceSecondaryRATUsageList,proto3,oneof" aper:"choiceIdx:3,"`
}

func (*SecondaryRatdataUsageReportIEsValue_IdMNgRannodeUexnApid) isSecondaryRatdataUsageReportIEsValue_SecondaryRatdataUsageReportIes() {
}

func (*SecondaryRatdataUsageReportIEsValue_IdSNgRannodeUexnApid) isSecondaryRatdataUsageReportIEsValue_SecondaryRatdataUsageReportIes() {
}

func (*SecondaryRatdataUsageReportIEsValue_IdPdusessionResourceSecondaryRatusageList) isSecondaryRatdataUsageReportIEsValue_SecondaryRatdataUsageReportIes() {
}

// concrete instance(s) of class XNAP-PROTOCOL-IES from xnap_v1.asn1:2571
// @inject_tag: aper:"valueExt"
// {SecondaryRATDataUsageReport-IEs}
type SecondaryRatdataUsageReportIEs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"unique,"
	Id *xnap_commondatatypes.ProtocolIeID `protobuf:"bytes,1,opt,name=id,json=&id,proto3" json:"id,omitempty" aper:"unique,"`
	// @inject_tag: aper:"valueLB:0,valueUB:2,"
	Criticality xnap_commondatatypes.Criticality `protobuf:"varint,2,opt,name=criticality,json=&criticality,proto3,enum=xnap.v1.Criticality" json:"criticality,omitempty" aper:"valueLB:0,valueUB:2,"`
	// @inject_tag: aper:"canonicalOrder,"
	Value *SecondaryRatdataUsageReportIEsValue `protobuf:"bytes,3,opt,name=value,json=&Value,proto3" json:"value,omitempty" aper:"canonicalOrder,"`
}

func (x *SecondaryRatdataUsageReportIEs) Reset() {
	*x = SecondaryRatdataUsageReportIEs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[251]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SecondaryRatdataUsageReportIEs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SecondaryRatdataUsageReportIEs) ProtoMessage() {}

func (x *SecondaryRatdataUsageReportIEs) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[251]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SecondaryRatdataUsageReportIEs.ProtoReflect.Descriptor instead.
func (*SecondaryRatdataUsageReportIEs) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_pdu_contents_proto_rawDescGZIP(), []int{251}
}

func (x *SecondaryRatdataUsageReportIEs) GetId() *xnap_commondatatypes.ProtocolIeID {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *SecondaryRatdataUsageReportIEs) GetCriticality() xnap_commondatatypes.Criticality {
	if x != nil {
		return x.Criticality
	}
	return xnap_commondatatypes.Criticality(0)
}

func (x *SecondaryRatdataUsageReportIEs) GetValue() *SecondaryRatdataUsageReportIEsValue {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:2567
// @inject_tag: aper:"valueExt"
// {SecondaryRATDataUsageReport}
type SecondaryRatdataUsageReport struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProtocolIes []*SecondaryRatdataUsageReportIEs `protobuf:"bytes,1,rep,name=protocol_ies,json=protocolIEs,proto3" json:"protocol_ies,omitempty"`
}

func (x *SecondaryRatdataUsageReport) Reset() {
	*x = SecondaryRatdataUsageReport{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[252]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SecondaryRatdataUsageReport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SecondaryRatdataUsageReport) ProtoMessage() {}

func (x *SecondaryRatdataUsageReport) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[252]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SecondaryRatdataUsageReport.ProtoReflect.Descriptor instead.
func (*SecondaryRatdataUsageReport) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_pdu_contents_proto_rawDescGZIP(), []int{252}
}

func (x *SecondaryRatdataUsageReport) GetProtocolIes() []*SecondaryRatdataUsageReportIEs {
	if x != nil {
		return x.ProtocolIes
	}
	return nil
}

// value set from xnap_v1.asn1:2590
// {XnRemovalRequest-IEs&Value}
type XnRemovalRequestIEsValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// value set translated as choice from xnap_v1.asn1:2590
	//
	// Types that are assignable to XnRemovalRequestIes:
	//	*XnRemovalRequestIEsValue_IdGlobalNgRanNodeId
	//	*XnRemovalRequestIEsValue_IdXnRemovalThreshold
	//	*XnRemovalRequestIEsValue_IdInterfaceInstanceIndication
	XnRemovalRequestIes isXnRemovalRequestIEsValue_XnRemovalRequestIes `protobuf_oneof:"xn_removal_request_ies"`
}

func (x *XnRemovalRequestIEsValue) Reset() {
	*x = XnRemovalRequestIEsValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[253]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *XnRemovalRequestIEsValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*XnRemovalRequestIEsValue) ProtoMessage() {}

func (x *XnRemovalRequestIEsValue) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[253]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use XnRemovalRequestIEsValue.ProtoReflect.Descriptor instead.
func (*XnRemovalRequestIEsValue) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_pdu_contents_proto_rawDescGZIP(), []int{253}
}

func (m *XnRemovalRequestIEsValue) GetXnRemovalRequestIes() isXnRemovalRequestIEsValue_XnRemovalRequestIes {
	if m != nil {
		return m.XnRemovalRequestIes
	}
	return nil
}

func (x *XnRemovalRequestIEsValue) GetIdGlobalNgRanNodeId() *xnap_ies.GlobalNgRAnnodeID {
	if x, ok := x.GetXnRemovalRequestIes().(*XnRemovalRequestIEsValue_IdGlobalNgRanNodeId); ok {
		return x.IdGlobalNgRanNodeId
	}
	return nil
}

func (x *XnRemovalRequestIEsValue) GetIdXnRemovalThreshold() *xnap_ies.XnBenefitValue {
	if x, ok := x.GetXnRemovalRequestIes().(*XnRemovalRequestIEsValue_IdXnRemovalThreshold); ok {
		return x.IdXnRemovalThreshold
	}
	return nil
}

func (x *XnRemovalRequestIEsValue) GetIdInterfaceInstanceIndication() *xnap_ies.InterfaceInstanceIndication {
	if x, ok := x.GetXnRemovalRequestIes().(*XnRemovalRequestIEsValue_IdInterfaceInstanceIndication); ok {
		return x.IdInterfaceInstanceIndication
	}
	return nil
}

type isXnRemovalRequestIEsValue_XnRemovalRequestIes interface {
	isXnRemovalRequestIEsValue_XnRemovalRequestIes()
}

type XnRemovalRequestIEsValue_IdGlobalNgRanNodeId struct {
	// @inject_tag: aper:"choiceIdx:1,"
	IdGlobalNgRanNodeId *xnap_ies.GlobalNgRAnnodeID `protobuf:"bytes,1,opt,name=id_global_ng_ran_node_id,json=id-GlobalNG-RAN-node-ID,proto3,oneof" aper:"choiceIdx:1,"`
}

type XnRemovalRequestIEsValue_IdXnRemovalThreshold struct {
	// @inject_tag: aper:"choiceIdx:2,"
	IdXnRemovalThreshold *xnap_ies.XnBenefitValue `protobuf:"bytes,2,opt,name=id_xn_removal_threshold,json=id-XnRemovalThreshold,proto3,oneof" aper:"choiceIdx:2,"`
}

type XnRemovalRequestIEsValue_IdInterfaceInstanceIndication struct {
	// @inject_tag: aper:"choiceIdx:3,"
	IdInterfaceInstanceIndication *xnap_ies.InterfaceInstanceIndication `protobuf:"bytes,3,opt,name=id_interface_instance_indication,json=id-InterfaceInstanceIndication,proto3,oneof" aper:"choiceIdx:3,"`
}

func (*XnRemovalRequestIEsValue_IdGlobalNgRanNodeId) isXnRemovalRequestIEsValue_XnRemovalRequestIes() {
}

func (*XnRemovalRequestIEsValue_IdXnRemovalThreshold) isXnRemovalRequestIEsValue_XnRemovalRequestIes() {
}

func (*XnRemovalRequestIEsValue_IdInterfaceInstanceIndication) isXnRemovalRequestIEsValue_XnRemovalRequestIes() {
}

// concrete instance(s) of class XNAP-PROTOCOL-IES from xnap_v1.asn1:2590
// @inject_tag: aper:"valueExt"
// {XnRemovalRequest-IEs}
type XnRemovalRequestIEs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"unique,"
	Id *xnap_commondatatypes.ProtocolIeID `protobuf:"bytes,1,opt,name=id,json=&id,proto3" json:"id,omitempty" aper:"unique,"`
	// @inject_tag: aper:"valueLB:0,valueUB:2,"
	Criticality xnap_commondatatypes.Criticality `protobuf:"varint,2,opt,name=criticality,json=&criticality,proto3,enum=xnap.v1.Criticality" json:"criticality,omitempty" aper:"valueLB:0,valueUB:2,"`
	// @inject_tag: aper:"canonicalOrder,"
	Value *XnRemovalRequestIEsValue `protobuf:"bytes,3,opt,name=value,json=&Value,proto3" json:"value,omitempty" aper:"canonicalOrder,"`
}

func (x *XnRemovalRequestIEs) Reset() {
	*x = XnRemovalRequestIEs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[254]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *XnRemovalRequestIEs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*XnRemovalRequestIEs) ProtoMessage() {}

func (x *XnRemovalRequestIEs) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[254]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use XnRemovalRequestIEs.ProtoReflect.Descriptor instead.
func (*XnRemovalRequestIEs) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_pdu_contents_proto_rawDescGZIP(), []int{254}
}

func (x *XnRemovalRequestIEs) GetId() *xnap_commondatatypes.ProtocolIeID {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *XnRemovalRequestIEs) GetCriticality() xnap_commondatatypes.Criticality {
	if x != nil {
		return x.Criticality
	}
	return xnap_commondatatypes.Criticality(0)
}

func (x *XnRemovalRequestIEs) GetValue() *XnRemovalRequestIEsValue {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:2586
// @inject_tag: aper:"valueExt"
// {XnRemovalRequest}
type XnRemovalRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProtocolIes []*XnRemovalRequestIEs `protobuf:"bytes,1,rep,name=protocol_ies,json=protocolIEs,proto3" json:"protocol_ies,omitempty"`
}

func (x *XnRemovalRequest) Reset() {
	*x = XnRemovalRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[255]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *XnRemovalRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*XnRemovalRequest) ProtoMessage() {}

func (x *XnRemovalRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[255]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use XnRemovalRequest.ProtoReflect.Descriptor instead.
func (*XnRemovalRequest) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_pdu_contents_proto_rawDescGZIP(), []int{255}
}

func (x *XnRemovalRequest) GetProtocolIes() []*XnRemovalRequestIEs {
	if x != nil {
		return x.ProtocolIes
	}
	return nil
}

// value set from xnap_v1.asn1:2608
// {XnRemovalResponse-IEs&Value}
type XnRemovalResponseIEsValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// value set translated as choice from xnap_v1.asn1:2608
	//
	// Types that are assignable to XnRemovalResponseIes:
	//	*XnRemovalResponseIEsValue_IdGlobalNgRanNodeId
	//	*XnRemovalResponseIEsValue_IdCriticalityDiagnostics
	//	*XnRemovalResponseIEsValue_IdInterfaceInstanceIndication
	XnRemovalResponseIes isXnRemovalResponseIEsValue_XnRemovalResponseIes `protobuf_oneof:"xn_removal_response_ies"`
}

func (x *XnRemovalResponseIEsValue) Reset() {
	*x = XnRemovalResponseIEsValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[256]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *XnRemovalResponseIEsValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*XnRemovalResponseIEsValue) ProtoMessage() {}

func (x *XnRemovalResponseIEsValue) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[256]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use XnRemovalResponseIEsValue.ProtoReflect.Descriptor instead.
func (*XnRemovalResponseIEsValue) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_pdu_contents_proto_rawDescGZIP(), []int{256}
}

func (m *XnRemovalResponseIEsValue) GetXnRemovalResponseIes() isXnRemovalResponseIEsValue_XnRemovalResponseIes {
	if m != nil {
		return m.XnRemovalResponseIes
	}
	return nil
}

func (x *XnRemovalResponseIEsValue) GetIdGlobalNgRanNodeId() *xnap_ies.GlobalNgRAnnodeID {
	if x, ok := x.GetXnRemovalResponseIes().(*XnRemovalResponseIEsValue_IdGlobalNgRanNodeId); ok {
		return x.IdGlobalNgRanNodeId
	}
	return nil
}

func (x *XnRemovalResponseIEsValue) GetIdCriticalityDiagnostics() *xnap_ies.CriticalityDiagnostics {
	if x, ok := x.GetXnRemovalResponseIes().(*XnRemovalResponseIEsValue_IdCriticalityDiagnostics); ok {
		return x.IdCriticalityDiagnostics
	}
	return nil
}

func (x *XnRemovalResponseIEsValue) GetIdInterfaceInstanceIndication() *xnap_ies.InterfaceInstanceIndication {
	if x, ok := x.GetXnRemovalResponseIes().(*XnRemovalResponseIEsValue_IdInterfaceInstanceIndication); ok {
		return x.IdInterfaceInstanceIndication
	}
	return nil
}

type isXnRemovalResponseIEsValue_XnRemovalResponseIes interface {
	isXnRemovalResponseIEsValue_XnRemovalResponseIes()
}

type XnRemovalResponseIEsValue_IdGlobalNgRanNodeId struct {
	// @inject_tag: aper:"choiceIdx:1,"
	IdGlobalNgRanNodeId *xnap_ies.GlobalNgRAnnodeID `protobuf:"bytes,1,opt,name=id_global_ng_ran_node_id,json=id-GlobalNG-RAN-node-ID,proto3,oneof" aper:"choiceIdx:1,"`
}

type XnRemovalResponseIEsValue_IdCriticalityDiagnostics struct {
	// @inject_tag: aper:"choiceIdx:2,valueExt,"
	IdCriticalityDiagnostics *xnap_ies.CriticalityDiagnostics `protobuf:"bytes,2,opt,name=id_criticality_diagnostics,json=id-CriticalityDiagnostics,proto3,oneof" aper:"choiceIdx:2,valueExt,"`
}

type XnRemovalResponseIEsValue_IdInterfaceInstanceIndication struct {
	// @inject_tag: aper:"choiceIdx:3,"
	IdInterfaceInstanceIndication *xnap_ies.InterfaceInstanceIndication `protobuf:"bytes,3,opt,name=id_interface_instance_indication,json=id-InterfaceInstanceIndication,proto3,oneof" aper:"choiceIdx:3,"`
}

func (*XnRemovalResponseIEsValue_IdGlobalNgRanNodeId) isXnRemovalResponseIEsValue_XnRemovalResponseIes() {
}

func (*XnRemovalResponseIEsValue_IdCriticalityDiagnostics) isXnRemovalResponseIEsValue_XnRemovalResponseIes() {
}

func (*XnRemovalResponseIEsValue_IdInterfaceInstanceIndication) isXnRemovalResponseIEsValue_XnRemovalResponseIes() {
}

// concrete instance(s) of class XNAP-PROTOCOL-IES from xnap_v1.asn1:2608
// @inject_tag: aper:"valueExt"
// {XnRemovalResponse-IEs}
type XnRemovalResponseIEs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"unique,"
	Id *xnap_commondatatypes.ProtocolIeID `protobuf:"bytes,1,opt,name=id,json=&id,proto3" json:"id,omitempty" aper:"unique,"`
	// @inject_tag: aper:"valueLB:0,valueUB:2,"
	Criticality xnap_commondatatypes.Criticality `protobuf:"varint,2,opt,name=criticality,json=&criticality,proto3,enum=xnap.v1.Criticality" json:"criticality,omitempty" aper:"valueLB:0,valueUB:2,"`
	// @inject_tag: aper:"canonicalOrder,"
	Value *XnRemovalResponseIEsValue `protobuf:"bytes,3,opt,name=value,json=&Value,proto3" json:"value,omitempty" aper:"canonicalOrder,"`
}

func (x *XnRemovalResponseIEs) Reset() {
	*x = XnRemovalResponseIEs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[257]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *XnRemovalResponseIEs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*XnRemovalResponseIEs) ProtoMessage() {}

func (x *XnRemovalResponseIEs) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[257]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use XnRemovalResponseIEs.ProtoReflect.Descriptor instead.
func (*XnRemovalResponseIEs) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_pdu_contents_proto_rawDescGZIP(), []int{257}
}

func (x *XnRemovalResponseIEs) GetId() *xnap_commondatatypes.ProtocolIeID {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *XnRemovalResponseIEs) GetCriticality() xnap_commondatatypes.Criticality {
	if x != nil {
		return x.Criticality
	}
	return xnap_commondatatypes.Criticality(0)
}

func (x *XnRemovalResponseIEs) GetValue() *XnRemovalResponseIEsValue {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:2604
// @inject_tag: aper:"valueExt"
// {XnRemovalResponse}
type XnRemovalResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProtocolIes []*XnRemovalResponseIEs `protobuf:"bytes,1,rep,name=protocol_ies,json=protocolIEs,proto3" json:"protocol_ies,omitempty"`
}

func (x *XnRemovalResponse) Reset() {
	*x = XnRemovalResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[258]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *XnRemovalResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*XnRemovalResponse) ProtoMessage() {}

func (x *XnRemovalResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[258]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use XnRemovalResponse.ProtoReflect.Descriptor instead.
func (*XnRemovalResponse) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_pdu_contents_proto_rawDescGZIP(), []int{258}
}

func (x *XnRemovalResponse) GetProtocolIes() []*XnRemovalResponseIEs {
	if x != nil {
		return x.ProtocolIes
	}
	return nil
}

// value set from xnap_v1.asn1:2626
// {XnRemovalFailure-IEs&Value}
type XnRemovalFailureIEsValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// value set translated as choice from xnap_v1.asn1:2626
	//
	// Types that are assignable to XnRemovalFailureIes:
	//	*XnRemovalFailureIEsValue_IdCause
	//	*XnRemovalFailureIEsValue_IdCriticalityDiagnostics
	//	*XnRemovalFailureIEsValue_IdInterfaceInstanceIndication
	XnRemovalFailureIes isXnRemovalFailureIEsValue_XnRemovalFailureIes `protobuf_oneof:"xn_removal_failure_ies"`
}

func (x *XnRemovalFailureIEsValue) Reset() {
	*x = XnRemovalFailureIEsValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[259]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *XnRemovalFailureIEsValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*XnRemovalFailureIEsValue) ProtoMessage() {}

func (x *XnRemovalFailureIEsValue) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[259]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use XnRemovalFailureIEsValue.ProtoReflect.Descriptor instead.
func (*XnRemovalFailureIEsValue) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_pdu_contents_proto_rawDescGZIP(), []int{259}
}

func (m *XnRemovalFailureIEsValue) GetXnRemovalFailureIes() isXnRemovalFailureIEsValue_XnRemovalFailureIes {
	if m != nil {
		return m.XnRemovalFailureIes
	}
	return nil
}

func (x *XnRemovalFailureIEsValue) GetIdCause() *xnap_ies.Cause {
	if x, ok := x.GetXnRemovalFailureIes().(*XnRemovalFailureIEsValue_IdCause); ok {
		return x.IdCause
	}
	return nil
}

func (x *XnRemovalFailureIEsValue) GetIdCriticalityDiagnostics() *xnap_ies.CriticalityDiagnostics {
	if x, ok := x.GetXnRemovalFailureIes().(*XnRemovalFailureIEsValue_IdCriticalityDiagnostics); ok {
		return x.IdCriticalityDiagnostics
	}
	return nil
}

func (x *XnRemovalFailureIEsValue) GetIdInterfaceInstanceIndication() *xnap_ies.InterfaceInstanceIndication {
	if x, ok := x.GetXnRemovalFailureIes().(*XnRemovalFailureIEsValue_IdInterfaceInstanceIndication); ok {
		return x.IdInterfaceInstanceIndication
	}
	return nil
}

type isXnRemovalFailureIEsValue_XnRemovalFailureIes interface {
	isXnRemovalFailureIEsValue_XnRemovalFailureIes()
}

type XnRemovalFailureIEsValue_IdCause struct {
	// @inject_tag: aper:"choiceIdx:1,"
	IdCause *xnap_ies.Cause `protobuf:"bytes,1,opt,name=id_cause,json=id-Cause,proto3,oneof" aper:"choiceIdx:1,"`
}

type XnRemovalFailureIEsValue_IdCriticalityDiagnostics struct {
	// @inject_tag: aper:"choiceIdx:2,valueExt,"
	IdCriticalityDiagnostics *xnap_ies.CriticalityDiagnostics `protobuf:"bytes,2,opt,name=id_criticality_diagnostics,json=id-CriticalityDiagnostics,proto3,oneof" aper:"choiceIdx:2,valueExt,"`
}

type XnRemovalFailureIEsValue_IdInterfaceInstanceIndication struct {
	// @inject_tag: aper:"choiceIdx:3,"
	IdInterfaceInstanceIndication *xnap_ies.InterfaceInstanceIndication `protobuf:"bytes,3,opt,name=id_interface_instance_indication,json=id-InterfaceInstanceIndication,proto3,oneof" aper:"choiceIdx:3,"`
}

func (*XnRemovalFailureIEsValue_IdCause) isXnRemovalFailureIEsValue_XnRemovalFailureIes() {}

func (*XnRemovalFailureIEsValue_IdCriticalityDiagnostics) isXnRemovalFailureIEsValue_XnRemovalFailureIes() {
}

func (*XnRemovalFailureIEsValue_IdInterfaceInstanceIndication) isXnRemovalFailureIEsValue_XnRemovalFailureIes() {
}

// concrete instance(s) of class XNAP-PROTOCOL-IES from xnap_v1.asn1:2626
// @inject_tag: aper:"valueExt"
// {XnRemovalFailure-IEs}
type XnRemovalFailureIEs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"unique,"
	Id *xnap_commondatatypes.ProtocolIeID `protobuf:"bytes,1,opt,name=id,json=&id,proto3" json:"id,omitempty" aper:"unique,"`
	// @inject_tag: aper:"valueLB:0,valueUB:2,"
	Criticality xnap_commondatatypes.Criticality `protobuf:"varint,2,opt,name=criticality,json=&criticality,proto3,enum=xnap.v1.Criticality" json:"criticality,omitempty" aper:"valueLB:0,valueUB:2,"`
	// @inject_tag: aper:"canonicalOrder,"
	Value *XnRemovalFailureIEsValue `protobuf:"bytes,3,opt,name=value,json=&Value,proto3" json:"value,omitempty" aper:"canonicalOrder,"`
}

func (x *XnRemovalFailureIEs) Reset() {
	*x = XnRemovalFailureIEs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[260]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *XnRemovalFailureIEs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*XnRemovalFailureIEs) ProtoMessage() {}

func (x *XnRemovalFailureIEs) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[260]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use XnRemovalFailureIEs.ProtoReflect.Descriptor instead.
func (*XnRemovalFailureIEs) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_pdu_contents_proto_rawDescGZIP(), []int{260}
}

func (x *XnRemovalFailureIEs) GetId() *xnap_commondatatypes.ProtocolIeID {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *XnRemovalFailureIEs) GetCriticality() xnap_commondatatypes.Criticality {
	if x != nil {
		return x.Criticality
	}
	return xnap_commondatatypes.Criticality(0)
}

func (x *XnRemovalFailureIEs) GetValue() *XnRemovalFailureIEsValue {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:2622
// @inject_tag: aper:"valueExt"
// {XnRemovalFailure}
type XnRemovalFailure struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProtocolIes []*XnRemovalFailureIEs `protobuf:"bytes,1,rep,name=protocol_ies,json=protocolIEs,proto3" json:"protocol_ies,omitempty"`
}

func (x *XnRemovalFailure) Reset() {
	*x = XnRemovalFailure{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[261]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *XnRemovalFailure) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*XnRemovalFailure) ProtoMessage() {}

func (x *XnRemovalFailure) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[261]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use XnRemovalFailure.ProtoReflect.Descriptor instead.
func (*XnRemovalFailure) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_pdu_contents_proto_rawDescGZIP(), []int{261}
}

func (x *XnRemovalFailure) GetProtocolIes() []*XnRemovalFailureIEs {
	if x != nil {
		return x.ProtocolIes
	}
	return nil
}

// value set from xnap_v1.asn1:2644
// {CellActivationRequest-IEs&Value}
type CellActivationRequestIEsValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// value set translated as choice from xnap_v1.asn1:2644
	//
	// Types that are assignable to CellActivationRequestIes:
	//	*CellActivationRequestIEsValue_IdServedCellsToActivate
	//	*CellActivationRequestIEsValue_IdActivationIdforCellActivation
	//	*CellActivationRequestIEsValue_IdInterfaceInstanceIndication
	CellActivationRequestIes isCellActivationRequestIEsValue_CellActivationRequestIes `protobuf_oneof:"cell_activation_request_ies"`
}

func (x *CellActivationRequestIEsValue) Reset() {
	*x = CellActivationRequestIEsValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[262]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CellActivationRequestIEsValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CellActivationRequestIEsValue) ProtoMessage() {}

func (x *CellActivationRequestIEsValue) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[262]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CellActivationRequestIEsValue.ProtoReflect.Descriptor instead.
func (*CellActivationRequestIEsValue) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_pdu_contents_proto_rawDescGZIP(), []int{262}
}

func (m *CellActivationRequestIEsValue) GetCellActivationRequestIes() isCellActivationRequestIEsValue_CellActivationRequestIes {
	if m != nil {
		return m.CellActivationRequestIes
	}
	return nil
}

func (x *CellActivationRequestIEsValue) GetIdServedCellsToActivate() *ServedCellsToActivate {
	if x, ok := x.GetCellActivationRequestIes().(*CellActivationRequestIEsValue_IdServedCellsToActivate); ok {
		return x.IdServedCellsToActivate
	}
	return nil
}

func (x *CellActivationRequestIEsValue) GetIdActivationIdforCellActivation() *xnap_ies.ActivationIdforCellActivation {
	if x, ok := x.GetCellActivationRequestIes().(*CellActivationRequestIEsValue_IdActivationIdforCellActivation); ok {
		return x.IdActivationIdforCellActivation
	}
	return nil
}

func (x *CellActivationRequestIEsValue) GetIdInterfaceInstanceIndication() *xnap_ies.InterfaceInstanceIndication {
	if x, ok := x.GetCellActivationRequestIes().(*CellActivationRequestIEsValue_IdInterfaceInstanceIndication); ok {
		return x.IdInterfaceInstanceIndication
	}
	return nil
}

type isCellActivationRequestIEsValue_CellActivationRequestIes interface {
	isCellActivationRequestIEsValue_CellActivationRequestIes()
}

type CellActivationRequestIEsValue_IdServedCellsToActivate struct {
	// @inject_tag: aper:"choiceIdx:1,"
	IdServedCellsToActivate *ServedCellsToActivate `protobuf:"bytes,1,opt,name=id_served_cells_to_activate,json=id-ServedCellsToActivate,proto3,oneof" aper:"choiceIdx:1,"`
}

type CellActivationRequestIEsValue_IdActivationIdforCellActivation struct {
	// @inject_tag: aper:"choiceIdx:2,"
	IdActivationIdforCellActivation *xnap_ies.ActivationIdforCellActivation `protobuf:"bytes,2,opt,name=id_activation_idfor_cell_activation,json=id-ActivationIDforCellActivation,proto3,oneof" aper:"choiceIdx:2,"`
}

type CellActivationRequestIEsValue_IdInterfaceInstanceIndication struct {
	// @inject_tag: aper:"choiceIdx:3,"
	IdInterfaceInstanceIndication *xnap_ies.InterfaceInstanceIndication `protobuf:"bytes,3,opt,name=id_interface_instance_indication,json=id-InterfaceInstanceIndication,proto3,oneof" aper:"choiceIdx:3,"`
}

func (*CellActivationRequestIEsValue_IdServedCellsToActivate) isCellActivationRequestIEsValue_CellActivationRequestIes() {
}

func (*CellActivationRequestIEsValue_IdActivationIdforCellActivation) isCellActivationRequestIEsValue_CellActivationRequestIes() {
}

func (*CellActivationRequestIEsValue_IdInterfaceInstanceIndication) isCellActivationRequestIEsValue_CellActivationRequestIes() {
}

// concrete instance(s) of class XNAP-PROTOCOL-IES from xnap_v1.asn1:2644
// @inject_tag: aper:"valueExt"
// {CellActivationRequest-IEs}
type CellActivationRequestIEs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"unique,"
	Id *xnap_commondatatypes.ProtocolIeID `protobuf:"bytes,1,opt,name=id,json=&id,proto3" json:"id,omitempty" aper:"unique,"`
	// @inject_tag: aper:"valueLB:0,valueUB:2,"
	Criticality xnap_commondatatypes.Criticality `protobuf:"varint,2,opt,name=criticality,json=&criticality,proto3,enum=xnap.v1.Criticality" json:"criticality,omitempty" aper:"valueLB:0,valueUB:2,"`
	// @inject_tag: aper:"canonicalOrder,"
	Value *CellActivationRequestIEsValue `protobuf:"bytes,3,opt,name=value,json=&Value,proto3" json:"value,omitempty" aper:"canonicalOrder,"`
}

func (x *CellActivationRequestIEs) Reset() {
	*x = CellActivationRequestIEs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[263]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CellActivationRequestIEs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CellActivationRequestIEs) ProtoMessage() {}

func (x *CellActivationRequestIEs) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[263]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CellActivationRequestIEs.ProtoReflect.Descriptor instead.
func (*CellActivationRequestIEs) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_pdu_contents_proto_rawDescGZIP(), []int{263}
}

func (x *CellActivationRequestIEs) GetId() *xnap_commondatatypes.ProtocolIeID {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *CellActivationRequestIEs) GetCriticality() xnap_commondatatypes.Criticality {
	if x != nil {
		return x.Criticality
	}
	return xnap_commondatatypes.Criticality(0)
}

func (x *CellActivationRequestIEs) GetValue() *CellActivationRequestIEsValue {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:2640
// @inject_tag: aper:"valueExt"
// {CellActivationRequest}
type CellActivationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProtocolIes []*CellActivationRequestIEs `protobuf:"bytes,1,rep,name=protocol_ies,json=protocolIEs,proto3" json:"protocol_ies,omitempty"`
}

func (x *CellActivationRequest) Reset() {
	*x = CellActivationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[264]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CellActivationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CellActivationRequest) ProtoMessage() {}

func (x *CellActivationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[264]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CellActivationRequest.ProtoReflect.Descriptor instead.
func (*CellActivationRequest) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_pdu_contents_proto_rawDescGZIP(), []int{264}
}

func (x *CellActivationRequest) GetProtocolIes() []*CellActivationRequestIEs {
	if x != nil {
		return x.ProtocolIes
	}
	return nil
}

// repeated from xnap_v1.asn1:2652
// {nr-cellsServedCellsToActivate}
type NrcellsServedCellsToActivate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"sizeLB:1,sizeUB:16384,"
	NrCells []*xnap_ies.NrCGi `protobuf:"bytes,1,rep,name=nr_cells,json=nr-cells,proto3" json:"nr_cells,omitempty" aper:"sizeLB:1,sizeUB:16384,"`
}

func (x *NrcellsServedCellsToActivate) Reset() {
	*x = NrcellsServedCellsToActivate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[265]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NrcellsServedCellsToActivate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NrcellsServedCellsToActivate) ProtoMessage() {}

func (x *NrcellsServedCellsToActivate) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[265]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NrcellsServedCellsToActivate.ProtoReflect.Descriptor instead.
func (*NrcellsServedCellsToActivate) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_pdu_contents_proto_rawDescGZIP(), []int{265}
}

func (x *NrcellsServedCellsToActivate) GetNrCells() []*xnap_ies.NrCGi {
	if x != nil {
		return x.NrCells
	}
	return nil
}

// repeated from xnap_v1.asn1:2653
// {e-utra-cellsServedCellsToActivate}
type EutracellsServedCellsToActivate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"sizeLB:1,sizeUB:16384,"
	EUtraCells []*xnap_ies.EUTraCGi `protobuf:"bytes,1,rep,name=e_utra_cells,json=e-utra-cells,proto3" json:"e_utra_cells,omitempty" aper:"sizeLB:1,sizeUB:16384,"`
}

func (x *EutracellsServedCellsToActivate) Reset() {
	*x = EutracellsServedCellsToActivate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[266]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EutracellsServedCellsToActivate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EutracellsServedCellsToActivate) ProtoMessage() {}

func (x *EutracellsServedCellsToActivate) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[266]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EutracellsServedCellsToActivate.ProtoReflect.Descriptor instead.
func (*EutracellsServedCellsToActivate) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_pdu_contents_proto_rawDescGZIP(), []int{266}
}

func (x *EutracellsServedCellsToActivate) GetEUtraCells() []*xnap_ies.EUTraCGi {
	if x != nil {
		return x.EUtraCells
	}
	return nil
}

// value set from xnap_v1.asn1:2657
// {ServedCellsToActivate-ExtIEs}
type ServedCellsToActivateExtIes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *emptypb.Empty `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *ServedCellsToActivateExtIes) Reset() {
	*x = ServedCellsToActivateExtIes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[267]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServedCellsToActivateExtIes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServedCellsToActivateExtIes) ProtoMessage() {}

func (x *ServedCellsToActivateExtIes) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[267]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServedCellsToActivateExtIes.ProtoReflect.Descriptor instead.
func (*ServedCellsToActivateExtIes) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_pdu_contents_proto_rawDescGZIP(), []int{267}
}

func (x *ServedCellsToActivateExtIes) GetValue() *emptypb.Empty {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:2652
// {ServedCellsToActivate}
type ServedCellsToActivate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// choice from xnap_v1.asn1:2652
	//
	// Types that are assignable to ServedCellsToActivate:
	//	*ServedCellsToActivate_NrCells
	//	*ServedCellsToActivate_EUtraCells
	//	*ServedCellsToActivate_ChoiceExtension
	ServedCellsToActivate isServedCellsToActivate_ServedCellsToActivate `protobuf_oneof:"served_cells_to_activate"`
}

func (x *ServedCellsToActivate) Reset() {
	*x = ServedCellsToActivate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[268]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServedCellsToActivate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServedCellsToActivate) ProtoMessage() {}

func (x *ServedCellsToActivate) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[268]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServedCellsToActivate.ProtoReflect.Descriptor instead.
func (*ServedCellsToActivate) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_pdu_contents_proto_rawDescGZIP(), []int{268}
}

func (m *ServedCellsToActivate) GetServedCellsToActivate() isServedCellsToActivate_ServedCellsToActivate {
	if m != nil {
		return m.ServedCellsToActivate
	}
	return nil
}

func (x *ServedCellsToActivate) GetNrCells() *NrcellsServedCellsToActivate {
	if x, ok := x.GetServedCellsToActivate().(*ServedCellsToActivate_NrCells); ok {
		return x.NrCells
	}
	return nil
}

func (x *ServedCellsToActivate) GetEUtraCells() *EutracellsServedCellsToActivate {
	if x, ok := x.GetServedCellsToActivate().(*ServedCellsToActivate_EUtraCells); ok {
		return x.EUtraCells
	}
	return nil
}

func (x *ServedCellsToActivate) GetChoiceExtension() *ServedCellsToActivateExtIes {
	if x, ok := x.GetServedCellsToActivate().(*ServedCellsToActivate_ChoiceExtension); ok {
		return x.ChoiceExtension
	}
	return nil
}

type isServedCellsToActivate_ServedCellsToActivate interface {
	isServedCellsToActivate_ServedCellsToActivate()
}

type ServedCellsToActivate_NrCells struct {
	// @inject_tag: aper:"choiceIdx:1,"
	NrCells *NrcellsServedCellsToActivate `protobuf:"bytes,1,opt,name=nr_cells,json=nr-cells,proto3,oneof" aper:"choiceIdx:1,"`
}

type ServedCellsToActivate_EUtraCells struct {
	// @inject_tag: aper:"choiceIdx:2,"
	EUtraCells *EutracellsServedCellsToActivate `protobuf:"bytes,2,opt,name=e_utra_cells,json=e-utra-cells,proto3,oneof" aper:"choiceIdx:2,"`
}

type ServedCellsToActivate_ChoiceExtension struct {
	// @inject_tag: aper:"choiceIdx:3,"
	ChoiceExtension *ServedCellsToActivateExtIes `protobuf:"bytes,3,opt,name=choice_extension,json=choice-extension,proto3,oneof" aper:"choiceIdx:3,"`
}

func (*ServedCellsToActivate_NrCells) isServedCellsToActivate_ServedCellsToActivate() {}

func (*ServedCellsToActivate_EUtraCells) isServedCellsToActivate_ServedCellsToActivate() {}

func (*ServedCellsToActivate_ChoiceExtension) isServedCellsToActivate_ServedCellsToActivate() {}

// value set from xnap_v1.asn1:2673
// {CellActivationResponse-IEs&Value}
type CellActivationResponseIEsValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// value set translated as choice from xnap_v1.asn1:2673
	//
	// Types that are assignable to CellActivationResponseIes:
	//	*CellActivationResponseIEsValue_IdActivatedServedCells
	//	*CellActivationResponseIEsValue_IdActivationIdforCellActivation
	//	*CellActivationResponseIEsValue_IdCriticalityDiagnostics
	//	*CellActivationResponseIEsValue_IdInterfaceInstanceIndication
	CellActivationResponseIes isCellActivationResponseIEsValue_CellActivationResponseIes `protobuf_oneof:"cell_activation_response_ies"`
}

func (x *CellActivationResponseIEsValue) Reset() {
	*x = CellActivationResponseIEsValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[269]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CellActivationResponseIEsValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CellActivationResponseIEsValue) ProtoMessage() {}

func (x *CellActivationResponseIEsValue) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[269]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CellActivationResponseIEsValue.ProtoReflect.Descriptor instead.
func (*CellActivationResponseIEsValue) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_pdu_contents_proto_rawDescGZIP(), []int{269}
}

func (m *CellActivationResponseIEsValue) GetCellActivationResponseIes() isCellActivationResponseIEsValue_CellActivationResponseIes {
	if m != nil {
		return m.CellActivationResponseIes
	}
	return nil
}

func (x *CellActivationResponseIEsValue) GetIdActivatedServedCells() *ActivatedServedCells {
	if x, ok := x.GetCellActivationResponseIes().(*CellActivationResponseIEsValue_IdActivatedServedCells); ok {
		return x.IdActivatedServedCells
	}
	return nil
}

func (x *CellActivationResponseIEsValue) GetIdActivationIdforCellActivation() *xnap_ies.ActivationIdforCellActivation {
	if x, ok := x.GetCellActivationResponseIes().(*CellActivationResponseIEsValue_IdActivationIdforCellActivation); ok {
		return x.IdActivationIdforCellActivation
	}
	return nil
}

func (x *CellActivationResponseIEsValue) GetIdCriticalityDiagnostics() *xnap_ies.CriticalityDiagnostics {
	if x, ok := x.GetCellActivationResponseIes().(*CellActivationResponseIEsValue_IdCriticalityDiagnostics); ok {
		return x.IdCriticalityDiagnostics
	}
	return nil
}

func (x *CellActivationResponseIEsValue) GetIdInterfaceInstanceIndication() *xnap_ies.InterfaceInstanceIndication {
	if x, ok := x.GetCellActivationResponseIes().(*CellActivationResponseIEsValue_IdInterfaceInstanceIndication); ok {
		return x.IdInterfaceInstanceIndication
	}
	return nil
}

type isCellActivationResponseIEsValue_CellActivationResponseIes interface {
	isCellActivationResponseIEsValue_CellActivationResponseIes()
}

type CellActivationResponseIEsValue_IdActivatedServedCells struct {
	// @inject_tag: aper:"choiceIdx:1,"
	IdActivatedServedCells *ActivatedServedCells `protobuf:"bytes,1,opt,name=id_activated_served_cells,json=id-ActivatedServedCells,proto3,oneof" aper:"choiceIdx:1,"`
}

type CellActivationResponseIEsValue_IdActivationIdforCellActivation struct {
	// @inject_tag: aper:"choiceIdx:2,"
	IdActivationIdforCellActivation *xnap_ies.ActivationIdforCellActivation `protobuf:"bytes,2,opt,name=id_activation_idfor_cell_activation,json=id-ActivationIDforCellActivation,proto3,oneof" aper:"choiceIdx:2,"`
}

type CellActivationResponseIEsValue_IdCriticalityDiagnostics struct {
	// @inject_tag: aper:"choiceIdx:3,valueExt,"
	IdCriticalityDiagnostics *xnap_ies.CriticalityDiagnostics `protobuf:"bytes,3,opt,name=id_criticality_diagnostics,json=id-CriticalityDiagnostics,proto3,oneof" aper:"choiceIdx:3,valueExt,"`
}

type CellActivationResponseIEsValue_IdInterfaceInstanceIndication struct {
	// @inject_tag: aper:"choiceIdx:4,"
	IdInterfaceInstanceIndication *xnap_ies.InterfaceInstanceIndication `protobuf:"bytes,4,opt,name=id_interface_instance_indication,json=id-InterfaceInstanceIndication,proto3,oneof" aper:"choiceIdx:4,"`
}

func (*CellActivationResponseIEsValue_IdActivatedServedCells) isCellActivationResponseIEsValue_CellActivationResponseIes() {
}

func (*CellActivationResponseIEsValue_IdActivationIdforCellActivation) isCellActivationResponseIEsValue_CellActivationResponseIes() {
}

func (*CellActivationResponseIEsValue_IdCriticalityDiagnostics) isCellActivationResponseIEsValue_CellActivationResponseIes() {
}

func (*CellActivationResponseIEsValue_IdInterfaceInstanceIndication) isCellActivationResponseIEsValue_CellActivationResponseIes() {
}

// concrete instance(s) of class XNAP-PROTOCOL-IES from xnap_v1.asn1:2673
// @inject_tag: aper:"valueExt"
// {CellActivationResponse-IEs}
type CellActivationResponseIEs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"unique,"
	Id *xnap_commondatatypes.ProtocolIeID `protobuf:"bytes,1,opt,name=id,json=&id,proto3" json:"id,omitempty" aper:"unique,"`
	// @inject_tag: aper:"valueLB:0,valueUB:2,"
	Criticality xnap_commondatatypes.Criticality `protobuf:"varint,2,opt,name=criticality,json=&criticality,proto3,enum=xnap.v1.Criticality" json:"criticality,omitempty" aper:"valueLB:0,valueUB:2,"`
	// @inject_tag: aper:"canonicalOrder,"
	Value *CellActivationResponseIEsValue `protobuf:"bytes,3,opt,name=value,json=&Value,proto3" json:"value,omitempty" aper:"canonicalOrder,"`
}

func (x *CellActivationResponseIEs) Reset() {
	*x = CellActivationResponseIEs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[270]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CellActivationResponseIEs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CellActivationResponseIEs) ProtoMessage() {}

func (x *CellActivationResponseIEs) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[270]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CellActivationResponseIEs.ProtoReflect.Descriptor instead.
func (*CellActivationResponseIEs) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_pdu_contents_proto_rawDescGZIP(), []int{270}
}

func (x *CellActivationResponseIEs) GetId() *xnap_commondatatypes.ProtocolIeID {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *CellActivationResponseIEs) GetCriticality() xnap_commondatatypes.Criticality {
	if x != nil {
		return x.Criticality
	}
	return xnap_commondatatypes.Criticality(0)
}

func (x *CellActivationResponseIEs) GetValue() *CellActivationResponseIEsValue {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:2669
// @inject_tag: aper:"valueExt"
// {CellActivationResponse}
type CellActivationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProtocolIes []*CellActivationResponseIEs `protobuf:"bytes,1,rep,name=protocol_ies,json=protocolIEs,proto3" json:"protocol_ies,omitempty"`
}

func (x *CellActivationResponse) Reset() {
	*x = CellActivationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[271]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CellActivationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CellActivationResponse) ProtoMessage() {}

func (x *CellActivationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[271]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CellActivationResponse.ProtoReflect.Descriptor instead.
func (*CellActivationResponse) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_pdu_contents_proto_rawDescGZIP(), []int{271}
}

func (x *CellActivationResponse) GetProtocolIes() []*CellActivationResponseIEs {
	if x != nil {
		return x.ProtocolIes
	}
	return nil
}

// repeated from xnap_v1.asn1:2682
// {nr-cellsActivatedServedCells}
type NrcellsActivatedServedCells struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"sizeLB:1,sizeUB:16384,"
	NrCells []*xnap_ies.NrCGi `protobuf:"bytes,1,rep,name=nr_cells,json=nr-cells,proto3" json:"nr_cells,omitempty" aper:"sizeLB:1,sizeUB:16384,"`
}

func (x *NrcellsActivatedServedCells) Reset() {
	*x = NrcellsActivatedServedCells{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[272]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NrcellsActivatedServedCells) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NrcellsActivatedServedCells) ProtoMessage() {}

func (x *NrcellsActivatedServedCells) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[272]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NrcellsActivatedServedCells.ProtoReflect.Descriptor instead.
func (*NrcellsActivatedServedCells) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_pdu_contents_proto_rawDescGZIP(), []int{272}
}

func (x *NrcellsActivatedServedCells) GetNrCells() []*xnap_ies.NrCGi {
	if x != nil {
		return x.NrCells
	}
	return nil
}

// repeated from xnap_v1.asn1:2683
// {e-utra-cellsActivatedServedCells}
type EutracellsActivatedServedCells struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"sizeLB:1,sizeUB:16384,"
	EUtraCells []*xnap_ies.EUTraCGi `protobuf:"bytes,1,rep,name=e_utra_cells,json=e-utra-cells,proto3" json:"e_utra_cells,omitempty" aper:"sizeLB:1,sizeUB:16384,"`
}

func (x *EutracellsActivatedServedCells) Reset() {
	*x = EutracellsActivatedServedCells{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[273]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EutracellsActivatedServedCells) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EutracellsActivatedServedCells) ProtoMessage() {}

func (x *EutracellsActivatedServedCells) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[273]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EutracellsActivatedServedCells.ProtoReflect.Descriptor instead.
func (*EutracellsActivatedServedCells) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_pdu_contents_proto_rawDescGZIP(), []int{273}
}

func (x *EutracellsActivatedServedCells) GetEUtraCells() []*xnap_ies.EUTraCGi {
	if x != nil {
		return x.EUtraCells
	}
	return nil
}

// value set from xnap_v1.asn1:2687
// {ActivatedServedCells-ExtIEs}
type ActivatedServedCellsExtIes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *emptypb.Empty `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *ActivatedServedCellsExtIes) Reset() {
	*x = ActivatedServedCellsExtIes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[274]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActivatedServedCellsExtIes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActivatedServedCellsExtIes) ProtoMessage() {}

func (x *ActivatedServedCellsExtIes) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[274]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActivatedServedCellsExtIes.ProtoReflect.Descriptor instead.
func (*ActivatedServedCellsExtIes) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_pdu_contents_proto_rawDescGZIP(), []int{274}
}

func (x *ActivatedServedCellsExtIes) GetValue() *emptypb.Empty {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:2682
// {ActivatedServedCells}
type ActivatedServedCells struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// choice from xnap_v1.asn1:2682
	//
	// Types that are assignable to ActivatedServedCells:
	//	*ActivatedServedCells_NrCells
	//	*ActivatedServedCells_EUtraCells
	//	*ActivatedServedCells_ChoiceExtension
	ActivatedServedCells isActivatedServedCells_ActivatedServedCells `protobuf_oneof:"activated_served_cells"`
}

func (x *ActivatedServedCells) Reset() {
	*x = ActivatedServedCells{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[275]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActivatedServedCells) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActivatedServedCells) ProtoMessage() {}

func (x *ActivatedServedCells) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[275]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActivatedServedCells.ProtoReflect.Descriptor instead.
func (*ActivatedServedCells) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_pdu_contents_proto_rawDescGZIP(), []int{275}
}

func (m *ActivatedServedCells) GetActivatedServedCells() isActivatedServedCells_ActivatedServedCells {
	if m != nil {
		return m.ActivatedServedCells
	}
	return nil
}

func (x *ActivatedServedCells) GetNrCells() *NrcellsActivatedServedCells {
	if x, ok := x.GetActivatedServedCells().(*ActivatedServedCells_NrCells); ok {
		return x.NrCells
	}
	return nil
}

func (x *ActivatedServedCells) GetEUtraCells() *EutracellsActivatedServedCells {
	if x, ok := x.GetActivatedServedCells().(*ActivatedServedCells_EUtraCells); ok {
		return x.EUtraCells
	}
	return nil
}

func (x *ActivatedServedCells) GetChoiceExtension() *ActivatedServedCellsExtIes {
	if x, ok := x.GetActivatedServedCells().(*ActivatedServedCells_ChoiceExtension); ok {
		return x.ChoiceExtension
	}
	return nil
}

type isActivatedServedCells_ActivatedServedCells interface {
	isActivatedServedCells_ActivatedServedCells()
}

type ActivatedServedCells_NrCells struct {
	// @inject_tag: aper:"choiceIdx:1,"
	NrCells *NrcellsActivatedServedCells `protobuf:"bytes,1,opt,name=nr_cells,json=nr-cells,proto3,oneof" aper:"choiceIdx:1,"`
}

type ActivatedServedCells_EUtraCells struct {
	// @inject_tag: aper:"choiceIdx:2,"
	EUtraCells *EutracellsActivatedServedCells `protobuf:"bytes,2,opt,name=e_utra_cells,json=e-utra-cells,proto3,oneof" aper:"choiceIdx:2,"`
}

type ActivatedServedCells_ChoiceExtension struct {
	// @inject_tag: aper:"choiceIdx:3,"
	ChoiceExtension *ActivatedServedCellsExtIes `protobuf:"bytes,3,opt,name=choice_extension,json=choice-extension,proto3,oneof" aper:"choiceIdx:3,"`
}

func (*ActivatedServedCells_NrCells) isActivatedServedCells_ActivatedServedCells() {}

func (*ActivatedServedCells_EUtraCells) isActivatedServedCells_ActivatedServedCells() {}

func (*ActivatedServedCells_ChoiceExtension) isActivatedServedCells_ActivatedServedCells() {}

// value set from xnap_v1.asn1:2703
// {CellActivationFailure-IEs&Value}
type CellActivationFailureIEsValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// value set translated as choice from xnap_v1.asn1:2703
	//
	// Types that are assignable to CellActivationFailureIes:
	//	*CellActivationFailureIEsValue_IdActivationIdforCellActivation
	//	*CellActivationFailureIEsValue_IdCause
	//	*CellActivationFailureIEsValue_IdCriticalityDiagnostics
	//	*CellActivationFailureIEsValue_IdInterfaceInstanceIndication
	CellActivationFailureIes isCellActivationFailureIEsValue_CellActivationFailureIes `protobuf_oneof:"cell_activation_failure_ies"`
}

func (x *CellActivationFailureIEsValue) Reset() {
	*x = CellActivationFailureIEsValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[276]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CellActivationFailureIEsValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CellActivationFailureIEsValue) ProtoMessage() {}

func (x *CellActivationFailureIEsValue) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[276]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CellActivationFailureIEsValue.ProtoReflect.Descriptor instead.
func (*CellActivationFailureIEsValue) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_pdu_contents_proto_rawDescGZIP(), []int{276}
}

func (m *CellActivationFailureIEsValue) GetCellActivationFailureIes() isCellActivationFailureIEsValue_CellActivationFailureIes {
	if m != nil {
		return m.CellActivationFailureIes
	}
	return nil
}

func (x *CellActivationFailureIEsValue) GetIdActivationIdforCellActivation() *xnap_ies.ActivationIdforCellActivation {
	if x, ok := x.GetCellActivationFailureIes().(*CellActivationFailureIEsValue_IdActivationIdforCellActivation); ok {
		return x.IdActivationIdforCellActivation
	}
	return nil
}

func (x *CellActivationFailureIEsValue) GetIdCause() *xnap_ies.Cause {
	if x, ok := x.GetCellActivationFailureIes().(*CellActivationFailureIEsValue_IdCause); ok {
		return x.IdCause
	}
	return nil
}

func (x *CellActivationFailureIEsValue) GetIdCriticalityDiagnostics() *xnap_ies.CriticalityDiagnostics {
	if x, ok := x.GetCellActivationFailureIes().(*CellActivationFailureIEsValue_IdCriticalityDiagnostics); ok {
		return x.IdCriticalityDiagnostics
	}
	return nil
}

func (x *CellActivationFailureIEsValue) GetIdInterfaceInstanceIndication() *xnap_ies.InterfaceInstanceIndication {
	if x, ok := x.GetCellActivationFailureIes().(*CellActivationFailureIEsValue_IdInterfaceInstanceIndication); ok {
		return x.IdInterfaceInstanceIndication
	}
	return nil
}

type isCellActivationFailureIEsValue_CellActivationFailureIes interface {
	isCellActivationFailureIEsValue_CellActivationFailureIes()
}

type CellActivationFailureIEsValue_IdActivationIdforCellActivation struct {
	// @inject_tag: aper:"choiceIdx:1,"
	IdActivationIdforCellActivation *xnap_ies.ActivationIdforCellActivation `protobuf:"bytes,1,opt,name=id_activation_idfor_cell_activation,json=id-ActivationIDforCellActivation,proto3,oneof" aper:"choiceIdx:1,"`
}

type CellActivationFailureIEsValue_IdCause struct {
	// @inject_tag: aper:"choiceIdx:2,"
	IdCause *xnap_ies.Cause `protobuf:"bytes,2,opt,name=id_cause,json=id-Cause,proto3,oneof" aper:"choiceIdx:2,"`
}

type CellActivationFailureIEsValue_IdCriticalityDiagnostics struct {
	// @inject_tag: aper:"choiceIdx:3,valueExt,"
	IdCriticalityDiagnostics *xnap_ies.CriticalityDiagnostics `protobuf:"bytes,3,opt,name=id_criticality_diagnostics,json=id-CriticalityDiagnostics,proto3,oneof" aper:"choiceIdx:3,valueExt,"`
}

type CellActivationFailureIEsValue_IdInterfaceInstanceIndication struct {
	// @inject_tag: aper:"choiceIdx:4,"
	IdInterfaceInstanceIndication *xnap_ies.InterfaceInstanceIndication `protobuf:"bytes,4,opt,name=id_interface_instance_indication,json=id-InterfaceInstanceIndication,proto3,oneof" aper:"choiceIdx:4,"`
}

func (*CellActivationFailureIEsValue_IdActivationIdforCellActivation) isCellActivationFailureIEsValue_CellActivationFailureIes() {
}

func (*CellActivationFailureIEsValue_IdCause) isCellActivationFailureIEsValue_CellActivationFailureIes() {
}

func (*CellActivationFailureIEsValue_IdCriticalityDiagnostics) isCellActivationFailureIEsValue_CellActivationFailureIes() {
}

func (*CellActivationFailureIEsValue_IdInterfaceInstanceIndication) isCellActivationFailureIEsValue_CellActivationFailureIes() {
}

// concrete instance(s) of class XNAP-PROTOCOL-IES from xnap_v1.asn1:2703
// @inject_tag: aper:"valueExt"
// {CellActivationFailure-IEs}
type CellActivationFailureIEs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"unique,"
	Id *xnap_commondatatypes.ProtocolIeID `protobuf:"bytes,1,opt,name=id,json=&id,proto3" json:"id,omitempty" aper:"unique,"`
	// @inject_tag: aper:"valueLB:0,valueUB:2,"
	Criticality xnap_commondatatypes.Criticality `protobuf:"varint,2,opt,name=criticality,json=&criticality,proto3,enum=xnap.v1.Criticality" json:"criticality,omitempty" aper:"valueLB:0,valueUB:2,"`
	// @inject_tag: aper:"canonicalOrder,"
	Value *CellActivationFailureIEsValue `protobuf:"bytes,3,opt,name=value,json=&Value,proto3" json:"value,omitempty" aper:"canonicalOrder,"`
}

func (x *CellActivationFailureIEs) Reset() {
	*x = CellActivationFailureIEs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[277]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CellActivationFailureIEs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CellActivationFailureIEs) ProtoMessage() {}

func (x *CellActivationFailureIEs) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[277]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CellActivationFailureIEs.ProtoReflect.Descriptor instead.
func (*CellActivationFailureIEs) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_pdu_contents_proto_rawDescGZIP(), []int{277}
}

func (x *CellActivationFailureIEs) GetId() *xnap_commondatatypes.ProtocolIeID {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *CellActivationFailureIEs) GetCriticality() xnap_commondatatypes.Criticality {
	if x != nil {
		return x.Criticality
	}
	return xnap_commondatatypes.Criticality(0)
}

func (x *CellActivationFailureIEs) GetValue() *CellActivationFailureIEsValue {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:2699
// @inject_tag: aper:"valueExt"
// {CellActivationFailure}
type CellActivationFailure struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProtocolIes []*CellActivationFailureIEs `protobuf:"bytes,1,rep,name=protocol_ies,json=protocolIEs,proto3" json:"protocol_ies,omitempty"`
}

func (x *CellActivationFailure) Reset() {
	*x = CellActivationFailure{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[278]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CellActivationFailure) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CellActivationFailure) ProtoMessage() {}

func (x *CellActivationFailure) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[278]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CellActivationFailure.ProtoReflect.Descriptor instead.
func (*CellActivationFailure) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_pdu_contents_proto_rawDescGZIP(), []int{278}
}

func (x *CellActivationFailure) GetProtocolIes() []*CellActivationFailureIEs {
	if x != nil {
		return x.ProtocolIes
	}
	return nil
}

// value set from xnap_v1.asn1:2722
// {ResetRequest-IEs&Value}
type ResetRequestIEsValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// value set translated as choice from xnap_v1.asn1:2722
	//
	// Types that are assignable to ResetRequestIes:
	//	*ResetRequestIEsValue_IdResetRequestTypeInfo
	//	*ResetRequestIEsValue_IdCause
	//	*ResetRequestIEsValue_IdInterfaceInstanceIndication
	ResetRequestIes isResetRequestIEsValue_ResetRequestIes `protobuf_oneof:"reset_request_ies"`
}

func (x *ResetRequestIEsValue) Reset() {
	*x = ResetRequestIEsValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[279]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResetRequestIEsValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResetRequestIEsValue) ProtoMessage() {}

func (x *ResetRequestIEsValue) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[279]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResetRequestIEsValue.ProtoReflect.Descriptor instead.
func (*ResetRequestIEsValue) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_pdu_contents_proto_rawDescGZIP(), []int{279}
}

func (m *ResetRequestIEsValue) GetResetRequestIes() isResetRequestIEsValue_ResetRequestIes {
	if m != nil {
		return m.ResetRequestIes
	}
	return nil
}

func (x *ResetRequestIEsValue) GetIdResetRequestTypeInfo() *xnap_ies.ResetRequestTypeInfo {
	if x, ok := x.GetResetRequestIes().(*ResetRequestIEsValue_IdResetRequestTypeInfo); ok {
		return x.IdResetRequestTypeInfo
	}
	return nil
}

func (x *ResetRequestIEsValue) GetIdCause() *xnap_ies.Cause {
	if x, ok := x.GetResetRequestIes().(*ResetRequestIEsValue_IdCause); ok {
		return x.IdCause
	}
	return nil
}

func (x *ResetRequestIEsValue) GetIdInterfaceInstanceIndication() *xnap_ies.InterfaceInstanceIndication {
	if x, ok := x.GetResetRequestIes().(*ResetRequestIEsValue_IdInterfaceInstanceIndication); ok {
		return x.IdInterfaceInstanceIndication
	}
	return nil
}

type isResetRequestIEsValue_ResetRequestIes interface {
	isResetRequestIEsValue_ResetRequestIes()
}

type ResetRequestIEsValue_IdResetRequestTypeInfo struct {
	// @inject_tag: aper:"choiceIdx:1,"
	IdResetRequestTypeInfo *xnap_ies.ResetRequestTypeInfo `protobuf:"bytes,1,opt,name=id_reset_request_type_info,json=id-ResetRequestTypeInfo,proto3,oneof" aper:"choiceIdx:1,"`
}

type ResetRequestIEsValue_IdCause struct {
	// @inject_tag: aper:"choiceIdx:2,"
	IdCause *xnap_ies.Cause `protobuf:"bytes,2,opt,name=id_cause,json=id-Cause,proto3,oneof" aper:"choiceIdx:2,"`
}

type ResetRequestIEsValue_IdInterfaceInstanceIndication struct {
	// @inject_tag: aper:"choiceIdx:3,"
	IdInterfaceInstanceIndication *xnap_ies.InterfaceInstanceIndication `protobuf:"bytes,3,opt,name=id_interface_instance_indication,json=id-InterfaceInstanceIndication,proto3,oneof" aper:"choiceIdx:3,"`
}

func (*ResetRequestIEsValue_IdResetRequestTypeInfo) isResetRequestIEsValue_ResetRequestIes() {}

func (*ResetRequestIEsValue_IdCause) isResetRequestIEsValue_ResetRequestIes() {}

func (*ResetRequestIEsValue_IdInterfaceInstanceIndication) isResetRequestIEsValue_ResetRequestIes() {}

// concrete instance(s) of class XNAP-PROTOCOL-IES from xnap_v1.asn1:2722
// @inject_tag: aper:"valueExt"
// {ResetRequest-IEs}
type ResetRequestIEs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"unique,"
	Id *xnap_commondatatypes.ProtocolIeID `protobuf:"bytes,1,opt,name=id,json=&id,proto3" json:"id,omitempty" aper:"unique,"`
	// @inject_tag: aper:"valueLB:0,valueUB:2,"
	Criticality xnap_commondatatypes.Criticality `protobuf:"varint,2,opt,name=criticality,json=&criticality,proto3,enum=xnap.v1.Criticality" json:"criticality,omitempty" aper:"valueLB:0,valueUB:2,"`
	// @inject_tag: aper:"canonicalOrder,"
	Value *ResetRequestIEsValue `protobuf:"bytes,3,opt,name=value,json=&Value,proto3" json:"value,omitempty" aper:"canonicalOrder,"`
}

func (x *ResetRequestIEs) Reset() {
	*x = ResetRequestIEs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[280]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResetRequestIEs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResetRequestIEs) ProtoMessage() {}

func (x *ResetRequestIEs) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[280]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResetRequestIEs.ProtoReflect.Descriptor instead.
func (*ResetRequestIEs) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_pdu_contents_proto_rawDescGZIP(), []int{280}
}

func (x *ResetRequestIEs) GetId() *xnap_commondatatypes.ProtocolIeID {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ResetRequestIEs) GetCriticality() xnap_commondatatypes.Criticality {
	if x != nil {
		return x.Criticality
	}
	return xnap_commondatatypes.Criticality(0)
}

func (x *ResetRequestIEs) GetValue() *ResetRequestIEsValue {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:2718
// @inject_tag: aper:"valueExt"
// {ResetRequest}
type ResetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProtocolIes []*ResetRequestIEs `protobuf:"bytes,1,rep,name=protocol_ies,json=protocolIEs,proto3" json:"protocol_ies,omitempty"`
}

func (x *ResetRequest) Reset() {
	*x = ResetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[281]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResetRequest) ProtoMessage() {}

func (x *ResetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[281]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResetRequest.ProtoReflect.Descriptor instead.
func (*ResetRequest) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_pdu_contents_proto_rawDescGZIP(), []int{281}
}

func (x *ResetRequest) GetProtocolIes() []*ResetRequestIEs {
	if x != nil {
		return x.ProtocolIes
	}
	return nil
}

// value set from xnap_v1.asn1:2740
// {ResetResponse-IEs&Value}
type ResetResponseIEsValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// value set translated as choice from xnap_v1.asn1:2740
	//
	// Types that are assignable to ResetResponseIes:
	//	*ResetResponseIEsValue_IdResetResponseTypeInfo
	//	*ResetResponseIEsValue_IdCriticalityDiagnostics
	//	*ResetResponseIEsValue_IdInterfaceInstanceIndication
	ResetResponseIes isResetResponseIEsValue_ResetResponseIes `protobuf_oneof:"reset_response_ies"`
}

func (x *ResetResponseIEsValue) Reset() {
	*x = ResetResponseIEsValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[282]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResetResponseIEsValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResetResponseIEsValue) ProtoMessage() {}

func (x *ResetResponseIEsValue) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[282]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResetResponseIEsValue.ProtoReflect.Descriptor instead.
func (*ResetResponseIEsValue) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_pdu_contents_proto_rawDescGZIP(), []int{282}
}

func (m *ResetResponseIEsValue) GetResetResponseIes() isResetResponseIEsValue_ResetResponseIes {
	if m != nil {
		return m.ResetResponseIes
	}
	return nil
}

func (x *ResetResponseIEsValue) GetIdResetResponseTypeInfo() *xnap_ies.ResetResponseTypeInfo {
	if x, ok := x.GetResetResponseIes().(*ResetResponseIEsValue_IdResetResponseTypeInfo); ok {
		return x.IdResetResponseTypeInfo
	}
	return nil
}

func (x *ResetResponseIEsValue) GetIdCriticalityDiagnostics() *xnap_ies.CriticalityDiagnostics {
	if x, ok := x.GetResetResponseIes().(*ResetResponseIEsValue_IdCriticalityDiagnostics); ok {
		return x.IdCriticalityDiagnostics
	}
	return nil
}

func (x *ResetResponseIEsValue) GetIdInterfaceInstanceIndication() *xnap_ies.InterfaceInstanceIndication {
	if x, ok := x.GetResetResponseIes().(*ResetResponseIEsValue_IdInterfaceInstanceIndication); ok {
		return x.IdInterfaceInstanceIndication
	}
	return nil
}

type isResetResponseIEsValue_ResetResponseIes interface {
	isResetResponseIEsValue_ResetResponseIes()
}

type ResetResponseIEsValue_IdResetResponseTypeInfo struct {
	// @inject_tag: aper:"choiceIdx:1,"
	IdResetResponseTypeInfo *xnap_ies.ResetResponseTypeInfo `protobuf:"bytes,1,opt,name=id_reset_response_type_info,json=id-ResetResponseTypeInfo,proto3,oneof" aper:"choiceIdx:1,"`
}

type ResetResponseIEsValue_IdCriticalityDiagnostics struct {
	// @inject_tag: aper:"choiceIdx:2,valueExt,"
	IdCriticalityDiagnostics *xnap_ies.CriticalityDiagnostics `protobuf:"bytes,2,opt,name=id_criticality_diagnostics,json=id-CriticalityDiagnostics,proto3,oneof" aper:"choiceIdx:2,valueExt,"`
}

type ResetResponseIEsValue_IdInterfaceInstanceIndication struct {
	// @inject_tag: aper:"choiceIdx:3,"
	IdInterfaceInstanceIndication *xnap_ies.InterfaceInstanceIndication `protobuf:"bytes,3,opt,name=id_interface_instance_indication,json=id-InterfaceInstanceIndication,proto3,oneof" aper:"choiceIdx:3,"`
}

func (*ResetResponseIEsValue_IdResetResponseTypeInfo) isResetResponseIEsValue_ResetResponseIes() {}

func (*ResetResponseIEsValue_IdCriticalityDiagnostics) isResetResponseIEsValue_ResetResponseIes() {}

func (*ResetResponseIEsValue_IdInterfaceInstanceIndication) isResetResponseIEsValue_ResetResponseIes() {
}

// concrete instance(s) of class XNAP-PROTOCOL-IES from xnap_v1.asn1:2740
// @inject_tag: aper:"valueExt"
// {ResetResponse-IEs}
type ResetResponseIEs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"unique,"
	Id *xnap_commondatatypes.ProtocolIeID `protobuf:"bytes,1,opt,name=id,json=&id,proto3" json:"id,omitempty" aper:"unique,"`
	// @inject_tag: aper:"valueLB:0,valueUB:2,"
	Criticality xnap_commondatatypes.Criticality `protobuf:"varint,2,opt,name=criticality,json=&criticality,proto3,enum=xnap.v1.Criticality" json:"criticality,omitempty" aper:"valueLB:0,valueUB:2,"`
	// @inject_tag: aper:"canonicalOrder,"
	Value *ResetResponseIEsValue `protobuf:"bytes,3,opt,name=value,json=&Value,proto3" json:"value,omitempty" aper:"canonicalOrder,"`
}

func (x *ResetResponseIEs) Reset() {
	*x = ResetResponseIEs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[283]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResetResponseIEs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResetResponseIEs) ProtoMessage() {}

func (x *ResetResponseIEs) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[283]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResetResponseIEs.ProtoReflect.Descriptor instead.
func (*ResetResponseIEs) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_pdu_contents_proto_rawDescGZIP(), []int{283}
}

func (x *ResetResponseIEs) GetId() *xnap_commondatatypes.ProtocolIeID {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ResetResponseIEs) GetCriticality() xnap_commondatatypes.Criticality {
	if x != nil {
		return x.Criticality
	}
	return xnap_commondatatypes.Criticality(0)
}

func (x *ResetResponseIEs) GetValue() *ResetResponseIEsValue {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:2736
// @inject_tag: aper:"valueExt"
// {ResetResponse}
type ResetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProtocolIes []*ResetResponseIEs `protobuf:"bytes,1,rep,name=protocol_ies,json=protocolIEs,proto3" json:"protocol_ies,omitempty"`
}

func (x *ResetResponse) Reset() {
	*x = ResetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[284]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResetResponse) ProtoMessage() {}

func (x *ResetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[284]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResetResponse.ProtoReflect.Descriptor instead.
func (*ResetResponse) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_pdu_contents_proto_rawDescGZIP(), []int{284}
}

func (x *ResetResponse) GetProtocolIes() []*ResetResponseIEs {
	if x != nil {
		return x.ProtocolIes
	}
	return nil
}

// value set from xnap_v1.asn1:2758
// {ErrorIndication-IEs&Value}
type ErrorIndicationIEsValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// value set translated as choice from xnap_v1.asn1:2758
	//
	// Types that are assignable to ErrorIndicationIes:
	//	*ErrorIndicationIEsValue_IdOldNgRannodeUexnApid
	//	*ErrorIndicationIEsValue_IdNewNgRannodeUexnApid
	//	*ErrorIndicationIEsValue_IdCause
	//	*ErrorIndicationIEsValue_IdCriticalityDiagnostics
	//	*ErrorIndicationIEsValue_IdInterfaceInstanceIndication
	ErrorIndicationIes isErrorIndicationIEsValue_ErrorIndicationIes `protobuf_oneof:"error_indication_ies"`
}

func (x *ErrorIndicationIEsValue) Reset() {
	*x = ErrorIndicationIEsValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[285]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ErrorIndicationIEsValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ErrorIndicationIEsValue) ProtoMessage() {}

func (x *ErrorIndicationIEsValue) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[285]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ErrorIndicationIEsValue.ProtoReflect.Descriptor instead.
func (*ErrorIndicationIEsValue) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_pdu_contents_proto_rawDescGZIP(), []int{285}
}

func (m *ErrorIndicationIEsValue) GetErrorIndicationIes() isErrorIndicationIEsValue_ErrorIndicationIes {
	if m != nil {
		return m.ErrorIndicationIes
	}
	return nil
}

func (x *ErrorIndicationIEsValue) GetIdOldNgRannodeUexnApid() *xnap_ies.NgRAnnodeUexnApid {
	if x, ok := x.GetErrorIndicationIes().(*ErrorIndicationIEsValue_IdOldNgRannodeUexnApid); ok {
		return x.IdOldNgRannodeUexnApid
	}
	return nil
}

func (x *ErrorIndicationIEsValue) GetIdNewNgRannodeUexnApid() *xnap_ies.NgRAnnodeUexnApid {
	if x, ok := x.GetErrorIndicationIes().(*ErrorIndicationIEsValue_IdNewNgRannodeUexnApid); ok {
		return x.IdNewNgRannodeUexnApid
	}
	return nil
}

func (x *ErrorIndicationIEsValue) GetIdCause() *xnap_ies.Cause {
	if x, ok := x.GetErrorIndicationIes().(*ErrorIndicationIEsValue_IdCause); ok {
		return x.IdCause
	}
	return nil
}

func (x *ErrorIndicationIEsValue) GetIdCriticalityDiagnostics() *xnap_ies.CriticalityDiagnostics {
	if x, ok := x.GetErrorIndicationIes().(*ErrorIndicationIEsValue_IdCriticalityDiagnostics); ok {
		return x.IdCriticalityDiagnostics
	}
	return nil
}

func (x *ErrorIndicationIEsValue) GetIdInterfaceInstanceIndication() *xnap_ies.InterfaceInstanceIndication {
	if x, ok := x.GetErrorIndicationIes().(*ErrorIndicationIEsValue_IdInterfaceInstanceIndication); ok {
		return x.IdInterfaceInstanceIndication
	}
	return nil
}

type isErrorIndicationIEsValue_ErrorIndicationIes interface {
	isErrorIndicationIEsValue_ErrorIndicationIes()
}

type ErrorIndicationIEsValue_IdOldNgRannodeUexnApid struct {
	// @inject_tag: aper:"choiceIdx:1,"
	IdOldNgRannodeUexnApid *xnap_ies.NgRAnnodeUexnApid `protobuf:"bytes,1,opt,name=id_old_ng_rannode_uexn_apid,json=id-oldNG-RANnodeUEXnAPID,proto3,oneof" aper:"choiceIdx:1,"`
}

type ErrorIndicationIEsValue_IdNewNgRannodeUexnApid struct {
	// @inject_tag: aper:"choiceIdx:2,"
	IdNewNgRannodeUexnApid *xnap_ies.NgRAnnodeUexnApid `protobuf:"bytes,2,opt,name=id_new_ng_rannode_uexn_apid,json=id-newNG-RANnodeUEXnAPID,proto3,oneof" aper:"choiceIdx:2,"`
}

type ErrorIndicationIEsValue_IdCause struct {
	// @inject_tag: aper:"choiceIdx:3,"
	IdCause *xnap_ies.Cause `protobuf:"bytes,3,opt,name=id_cause,json=id-Cause,proto3,oneof" aper:"choiceIdx:3,"`
}

type ErrorIndicationIEsValue_IdCriticalityDiagnostics struct {
	// @inject_tag: aper:"choiceIdx:4,valueExt,"
	IdCriticalityDiagnostics *xnap_ies.CriticalityDiagnostics `protobuf:"bytes,4,opt,name=id_criticality_diagnostics,json=id-CriticalityDiagnostics,proto3,oneof" aper:"choiceIdx:4,valueExt,"`
}

type ErrorIndicationIEsValue_IdInterfaceInstanceIndication struct {
	// @inject_tag: aper:"choiceIdx:5,"
	IdInterfaceInstanceIndication *xnap_ies.InterfaceInstanceIndication `protobuf:"bytes,5,opt,name=id_interface_instance_indication,json=id-InterfaceInstanceIndication,proto3,oneof" aper:"choiceIdx:5,"`
}

func (*ErrorIndicationIEsValue_IdOldNgRannodeUexnApid) isErrorIndicationIEsValue_ErrorIndicationIes() {
}

func (*ErrorIndicationIEsValue_IdNewNgRannodeUexnApid) isErrorIndicationIEsValue_ErrorIndicationIes() {
}

func (*ErrorIndicationIEsValue_IdCause) isErrorIndicationIEsValue_ErrorIndicationIes() {}

func (*ErrorIndicationIEsValue_IdCriticalityDiagnostics) isErrorIndicationIEsValue_ErrorIndicationIes() {
}

func (*ErrorIndicationIEsValue_IdInterfaceInstanceIndication) isErrorIndicationIEsValue_ErrorIndicationIes() {
}

// concrete instance(s) of class XNAP-PROTOCOL-IES from xnap_v1.asn1:2758
// @inject_tag: aper:"valueExt"
// {ErrorIndication-IEs}
type ErrorIndicationIEs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"unique,"
	Id *xnap_commondatatypes.ProtocolIeID `protobuf:"bytes,1,opt,name=id,json=&id,proto3" json:"id,omitempty" aper:"unique,"`
	// @inject_tag: aper:"valueLB:0,valueUB:2,"
	Criticality xnap_commondatatypes.Criticality `protobuf:"varint,2,opt,name=criticality,json=&criticality,proto3,enum=xnap.v1.Criticality" json:"criticality,omitempty" aper:"valueLB:0,valueUB:2,"`
	// @inject_tag: aper:"canonicalOrder,"
	Value *ErrorIndicationIEsValue `protobuf:"bytes,3,opt,name=value,json=&Value,proto3" json:"value,omitempty" aper:"canonicalOrder,"`
}

func (x *ErrorIndicationIEs) Reset() {
	*x = ErrorIndicationIEs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[286]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ErrorIndicationIEs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ErrorIndicationIEs) ProtoMessage() {}

func (x *ErrorIndicationIEs) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[286]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ErrorIndicationIEs.ProtoReflect.Descriptor instead.
func (*ErrorIndicationIEs) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_pdu_contents_proto_rawDescGZIP(), []int{286}
}

func (x *ErrorIndicationIEs) GetId() *xnap_commondatatypes.ProtocolIeID {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ErrorIndicationIEs) GetCriticality() xnap_commondatatypes.Criticality {
	if x != nil {
		return x.Criticality
	}
	return xnap_commondatatypes.Criticality(0)
}

func (x *ErrorIndicationIEs) GetValue() *ErrorIndicationIEsValue {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:2754
// @inject_tag: aper:"valueExt"
// {ErrorIndication}
type ErrorIndication struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProtocolIes []*ErrorIndicationIEs `protobuf:"bytes,1,rep,name=protocol_ies,json=protocolIEs,proto3" json:"protocol_ies,omitempty"`
}

func (x *ErrorIndication) Reset() {
	*x = ErrorIndication{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[287]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ErrorIndication) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ErrorIndication) ProtoMessage() {}

func (x *ErrorIndication) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[287]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ErrorIndication.ProtoReflect.Descriptor instead.
func (*ErrorIndication) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_pdu_contents_proto_rawDescGZIP(), []int{287}
}

func (x *ErrorIndication) GetProtocolIes() []*ErrorIndicationIEs {
	if x != nil {
		return x.ProtocolIes
	}
	return nil
}

// value set from xnap_v1.asn1:2778
// {PrivateMessage-IEs}
type PrivateMessageIEs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *emptypb.Empty `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *PrivateMessageIEs) Reset() {
	*x = PrivateMessageIEs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[288]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PrivateMessageIEs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrivateMessageIEs) ProtoMessage() {}

func (x *PrivateMessageIEs) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[288]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrivateMessageIEs.ProtoReflect.Descriptor instead.
func (*PrivateMessageIEs) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_pdu_contents_proto_rawDescGZIP(), []int{288}
}

func (x *PrivateMessageIEs) GetValue() *emptypb.Empty {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:2774
// @inject_tag: aper:"valueExt"
// {PrivateMessage}
type PrivateMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"sizeLB:1,"
	PrivateIes []*PrivateMessageIEs `protobuf:"bytes,1,rep,name=private_ies,json=privateIEs,proto3" json:"private_ies,omitempty" aper:"sizeLB:1,"`
}

func (x *PrivateMessage) Reset() {
	*x = PrivateMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[289]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PrivateMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrivateMessage) ProtoMessage() {}

func (x *PrivateMessage) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[289]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrivateMessage.ProtoReflect.Descriptor instead.
func (*PrivateMessage) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_pdu_contents_proto_rawDescGZIP(), []int{289}
}

func (x *PrivateMessage) GetPrivateIes() []*PrivateMessageIEs {
	if x != nil {
		return x.PrivateIes
	}
	return nil
}

// value set from xnap_v1.asn1:2794
// {TraceStartIEs&Value}
type TraceStartIesValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// value set translated as choice from xnap_v1.asn1:2794
	//
	// Types that are assignable to TraceStartIes:
	//	*TraceStartIesValue_IdMNgRannodeUexnApid
	//	*TraceStartIesValue_IdSNgRannodeUexnApid
	//	*TraceStartIesValue_IdTraceActivation
	TraceStartIes isTraceStartIesValue_TraceStartIes `protobuf_oneof:"trace_start_ies"`
}

func (x *TraceStartIesValue) Reset() {
	*x = TraceStartIesValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[290]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TraceStartIesValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TraceStartIesValue) ProtoMessage() {}

func (x *TraceStartIesValue) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[290]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TraceStartIesValue.ProtoReflect.Descriptor instead.
func (*TraceStartIesValue) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_pdu_contents_proto_rawDescGZIP(), []int{290}
}

func (m *TraceStartIesValue) GetTraceStartIes() isTraceStartIesValue_TraceStartIes {
	if m != nil {
		return m.TraceStartIes
	}
	return nil
}

func (x *TraceStartIesValue) GetIdMNgRannodeUexnApid() *xnap_ies.NgRAnnodeUexnApid {
	if x, ok := x.GetTraceStartIes().(*TraceStartIesValue_IdMNgRannodeUexnApid); ok {
		return x.IdMNgRannodeUexnApid
	}
	return nil
}

func (x *TraceStartIesValue) GetIdSNgRannodeUexnApid() *xnap_ies.NgRAnnodeUexnApid {
	if x, ok := x.GetTraceStartIes().(*TraceStartIesValue_IdSNgRannodeUexnApid); ok {
		return x.IdSNgRannodeUexnApid
	}
	return nil
}

func (x *TraceStartIesValue) GetIdTraceActivation() *xnap_ies.TraceActivation {
	if x, ok := x.GetTraceStartIes().(*TraceStartIesValue_IdTraceActivation); ok {
		return x.IdTraceActivation
	}
	return nil
}

type isTraceStartIesValue_TraceStartIes interface {
	isTraceStartIesValue_TraceStartIes()
}

type TraceStartIesValue_IdMNgRannodeUexnApid struct {
	// @inject_tag: aper:"choiceIdx:1,"
	IdMNgRannodeUexnApid *xnap_ies.NgRAnnodeUexnApid `protobuf:"bytes,1,opt,name=id_m_ng_rannode_uexn_apid,json=id-M-NG-RANnodeUEXnAPID,proto3,oneof" aper:"choiceIdx:1,"`
}

type TraceStartIesValue_IdSNgRannodeUexnApid struct {
	// @inject_tag: aper:"choiceIdx:2,"
	IdSNgRannodeUexnApid *xnap_ies.NgRAnnodeUexnApid `protobuf:"bytes,2,opt,name=id_s_ng_rannode_uexn_apid,json=id-S-NG-RANnodeUEXnAPID,proto3,oneof" aper:"choiceIdx:2,"`
}

type TraceStartIesValue_IdTraceActivation struct {
	// @inject_tag: aper:"choiceIdx:3,valueExt,"
	IdTraceActivation *xnap_ies.TraceActivation `protobuf:"bytes,3,opt,name=id_trace_activation,json=id-TraceActivation,proto3,oneof" aper:"choiceIdx:3,valueExt,"`
}

func (*TraceStartIesValue_IdMNgRannodeUexnApid) isTraceStartIesValue_TraceStartIes() {}

func (*TraceStartIesValue_IdSNgRannodeUexnApid) isTraceStartIesValue_TraceStartIes() {}

func (*TraceStartIesValue_IdTraceActivation) isTraceStartIesValue_TraceStartIes() {}

// concrete instance(s) of class XNAP-PROTOCOL-IES from xnap_v1.asn1:2794
// @inject_tag: aper:"valueExt"
// {TraceStartIEs}
type TraceStartIes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"unique,"
	Id *xnap_commondatatypes.ProtocolIeID `protobuf:"bytes,1,opt,name=id,json=&id,proto3" json:"id,omitempty" aper:"unique,"`
	// @inject_tag: aper:"valueLB:0,valueUB:2,"
	Criticality xnap_commondatatypes.Criticality `protobuf:"varint,2,opt,name=criticality,json=&criticality,proto3,enum=xnap.v1.Criticality" json:"criticality,omitempty" aper:"valueLB:0,valueUB:2,"`
	// @inject_tag: aper:"canonicalOrder,"
	Value *TraceStartIesValue `protobuf:"bytes,3,opt,name=value,json=&Value,proto3" json:"value,omitempty" aper:"canonicalOrder,"`
}

func (x *TraceStartIes) Reset() {
	*x = TraceStartIes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[291]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TraceStartIes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TraceStartIes) ProtoMessage() {}

func (x *TraceStartIes) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[291]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TraceStartIes.ProtoReflect.Descriptor instead.
func (*TraceStartIes) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_pdu_contents_proto_rawDescGZIP(), []int{291}
}

func (x *TraceStartIes) GetId() *xnap_commondatatypes.ProtocolIeID {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *TraceStartIes) GetCriticality() xnap_commondatatypes.Criticality {
	if x != nil {
		return x.Criticality
	}
	return xnap_commondatatypes.Criticality(0)
}

func (x *TraceStartIes) GetValue() *TraceStartIesValue {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:2790
// @inject_tag: aper:"valueExt"
// {TraceStart}
type TraceStart struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProtocolIes []*TraceStartIes `protobuf:"bytes,1,rep,name=protocol_ies,json=protocolIEs,proto3" json:"protocol_ies,omitempty"`
}

func (x *TraceStart) Reset() {
	*x = TraceStart{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[292]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TraceStart) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TraceStart) ProtoMessage() {}

func (x *TraceStart) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[292]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TraceStart.ProtoReflect.Descriptor instead.
func (*TraceStart) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_pdu_contents_proto_rawDescGZIP(), []int{292}
}

func (x *TraceStart) GetProtocolIes() []*TraceStartIes {
	if x != nil {
		return x.ProtocolIes
	}
	return nil
}

// value set from xnap_v1.asn1:2812
// {DeactivateTraceIEs&Value}
type DeactivateTraceIesValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// value set translated as choice from xnap_v1.asn1:2812
	//
	// Types that are assignable to DeactivateTraceIes:
	//	*DeactivateTraceIesValue_IdMNgRannodeUexnApid
	//	*DeactivateTraceIesValue_IdSNgRannodeUexnApid
	//	*DeactivateTraceIesValue_IdNgRantraceId
	DeactivateTraceIes isDeactivateTraceIesValue_DeactivateTraceIes `protobuf_oneof:"deactivate_trace_ies"`
}

func (x *DeactivateTraceIesValue) Reset() {
	*x = DeactivateTraceIesValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[293]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeactivateTraceIesValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeactivateTraceIesValue) ProtoMessage() {}

func (x *DeactivateTraceIesValue) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[293]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeactivateTraceIesValue.ProtoReflect.Descriptor instead.
func (*DeactivateTraceIesValue) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_pdu_contents_proto_rawDescGZIP(), []int{293}
}

func (m *DeactivateTraceIesValue) GetDeactivateTraceIes() isDeactivateTraceIesValue_DeactivateTraceIes {
	if m != nil {
		return m.DeactivateTraceIes
	}
	return nil
}

func (x *DeactivateTraceIesValue) GetIdMNgRannodeUexnApid() *xnap_ies.NgRAnnodeUexnApid {
	if x, ok := x.GetDeactivateTraceIes().(*DeactivateTraceIesValue_IdMNgRannodeUexnApid); ok {
		return x.IdMNgRannodeUexnApid
	}
	return nil
}

func (x *DeactivateTraceIesValue) GetIdSNgRannodeUexnApid() *xnap_ies.NgRAnnodeUexnApid {
	if x, ok := x.GetDeactivateTraceIes().(*DeactivateTraceIesValue_IdSNgRannodeUexnApid); ok {
		return x.IdSNgRannodeUexnApid
	}
	return nil
}

func (x *DeactivateTraceIesValue) GetIdNgRantraceId() *xnap_ies.NgRAntraceId {
	if x, ok := x.GetDeactivateTraceIes().(*DeactivateTraceIesValue_IdNgRantraceId); ok {
		return x.IdNgRantraceId
	}
	return nil
}

type isDeactivateTraceIesValue_DeactivateTraceIes interface {
	isDeactivateTraceIesValue_DeactivateTraceIes()
}

type DeactivateTraceIesValue_IdMNgRannodeUexnApid struct {
	// @inject_tag: aper:"choiceIdx:1,"
	IdMNgRannodeUexnApid *xnap_ies.NgRAnnodeUexnApid `protobuf:"bytes,1,opt,name=id_m_ng_rannode_uexn_apid,json=id-M-NG-RANnodeUEXnAPID,proto3,oneof" aper:"choiceIdx:1,"`
}

type DeactivateTraceIesValue_IdSNgRannodeUexnApid struct {
	// @inject_tag: aper:"choiceIdx:2,"
	IdSNgRannodeUexnApid *xnap_ies.NgRAnnodeUexnApid `protobuf:"bytes,2,opt,name=id_s_ng_rannode_uexn_apid,json=id-S-NG-RANnodeUEXnAPID,proto3,oneof" aper:"choiceIdx:2,"`
}

type DeactivateTraceIesValue_IdNgRantraceId struct {
	// @inject_tag: aper:"choiceIdx:3,"
	IdNgRantraceId *xnap_ies.NgRAntraceId `protobuf:"bytes,3,opt,name=id_ng_rantrace_id,json=id-NG-RANTraceID,proto3,oneof" aper:"choiceIdx:3,"`
}

func (*DeactivateTraceIesValue_IdMNgRannodeUexnApid) isDeactivateTraceIesValue_DeactivateTraceIes() {}

func (*DeactivateTraceIesValue_IdSNgRannodeUexnApid) isDeactivateTraceIesValue_DeactivateTraceIes() {}

func (*DeactivateTraceIesValue_IdNgRantraceId) isDeactivateTraceIesValue_DeactivateTraceIes() {}

// concrete instance(s) of class XNAP-PROTOCOL-IES from xnap_v1.asn1:2812
// @inject_tag: aper:"valueExt"
// {DeactivateTraceIEs}
type DeactivateTraceIes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"unique,"
	Id *xnap_commondatatypes.ProtocolIeID `protobuf:"bytes,1,opt,name=id,json=&id,proto3" json:"id,omitempty" aper:"unique,"`
	// @inject_tag: aper:"valueLB:0,valueUB:2,"
	Criticality xnap_commondatatypes.Criticality `protobuf:"varint,2,opt,name=criticality,json=&criticality,proto3,enum=xnap.v1.Criticality" json:"criticality,omitempty" aper:"valueLB:0,valueUB:2,"`
	// @inject_tag: aper:"canonicalOrder,"
	Value *DeactivateTraceIesValue `protobuf:"bytes,3,opt,name=value,json=&Value,proto3" json:"value,omitempty" aper:"canonicalOrder,"`
}

func (x *DeactivateTraceIes) Reset() {
	*x = DeactivateTraceIes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[294]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeactivateTraceIes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeactivateTraceIes) ProtoMessage() {}

func (x *DeactivateTraceIes) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[294]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeactivateTraceIes.ProtoReflect.Descriptor instead.
func (*DeactivateTraceIes) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_pdu_contents_proto_rawDescGZIP(), []int{294}
}

func (x *DeactivateTraceIes) GetId() *xnap_commondatatypes.ProtocolIeID {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *DeactivateTraceIes) GetCriticality() xnap_commondatatypes.Criticality {
	if x != nil {
		return x.Criticality
	}
	return xnap_commondatatypes.Criticality(0)
}

func (x *DeactivateTraceIes) GetValue() *DeactivateTraceIesValue {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:2808
// @inject_tag: aper:"valueExt"
// {DeactivateTrace}
type DeactivateTrace struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProtocolIes []*DeactivateTraceIes `protobuf:"bytes,1,rep,name=protocol_ies,json=protocolIEs,proto3" json:"protocol_ies,omitempty"`
}

func (x *DeactivateTrace) Reset() {
	*x = DeactivateTrace{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[295]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeactivateTrace) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeactivateTrace) ProtoMessage() {}

func (x *DeactivateTrace) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[295]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeactivateTrace.ProtoReflect.Descriptor instead.
func (*DeactivateTrace) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_pdu_contents_proto_rawDescGZIP(), []int{295}
}

func (x *DeactivateTrace) GetProtocolIes() []*DeactivateTraceIes {
	if x != nil {
		return x.ProtocolIes
	}
	return nil
}

// value set from xnap_v1.asn1:2830
// {FailureIndication-IEs}
type FailureIndicationIEs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *emptypb.Empty `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *FailureIndicationIEs) Reset() {
	*x = FailureIndicationIEs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[296]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FailureIndicationIEs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FailureIndicationIEs) ProtoMessage() {}

func (x *FailureIndicationIEs) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[296]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FailureIndicationIEs.ProtoReflect.Descriptor instead.
func (*FailureIndicationIEs) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_pdu_contents_proto_rawDescGZIP(), []int{296}
}

func (x *FailureIndicationIEs) GetValue() *emptypb.Empty {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:2826
// @inject_tag: aper:"valueExt"
// {FailureIndication}
type FailureIndication struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProtocolIes []*FailureIndicationIEs `protobuf:"bytes,1,rep,name=protocol_ies,json=protocolIEs,proto3" json:"protocol_ies,omitempty"`
}

func (x *FailureIndication) Reset() {
	*x = FailureIndication{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[297]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FailureIndication) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FailureIndication) ProtoMessage() {}

func (x *FailureIndication) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[297]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FailureIndication.ProtoReflect.Descriptor instead.
func (*FailureIndication) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_pdu_contents_proto_rawDescGZIP(), []int{297}
}

func (x *FailureIndication) GetProtocolIes() []*FailureIndicationIEs {
	if x != nil {
		return x.ProtocolIes
	}
	return nil
}

// value set from xnap_v1.asn1:2846
// {HandoverReport-IEs&Value}
type HandoverReportIEsValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// value set translated as choice from xnap_v1.asn1:2846
	//
	// Types that are assignable to HandoverReportIes:
	//	*HandoverReportIEsValue_IdHandoverReportType
	//	*HandoverReportIEsValue_IdHandoverCause
	//	*HandoverReportIEsValue_IdSourceCellCgi
	//	*HandoverReportIEsValue_IdTargetCellCgi
	//	*HandoverReportIEsValue_IdReEstablishmentCellCgi
	//	*HandoverReportIEsValue_IdTargetCellinEutran
	//	*HandoverReportIEsValue_IdSourceCellCrnti
	//	*HandoverReportIEsValue_IdMobilityInformation
	//	*HandoverReportIEsValue_IdUerlfreportContainer
	HandoverReportIes isHandoverReportIEsValue_HandoverReportIes `protobuf_oneof:"handover_report_ies"`
}

func (x *HandoverReportIEsValue) Reset() {
	*x = HandoverReportIEsValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[298]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HandoverReportIEsValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HandoverReportIEsValue) ProtoMessage() {}

func (x *HandoverReportIEsValue) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[298]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HandoverReportIEsValue.ProtoReflect.Descriptor instead.
func (*HandoverReportIEsValue) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_pdu_contents_proto_rawDescGZIP(), []int{298}
}

func (m *HandoverReportIEsValue) GetHandoverReportIes() isHandoverReportIEsValue_HandoverReportIes {
	if m != nil {
		return m.HandoverReportIes
	}
	return nil
}

func (x *HandoverReportIEsValue) GetIdHandoverReportType() xnap_ies.HandoverReportType {
	if x, ok := x.GetHandoverReportIes().(*HandoverReportIEsValue_IdHandoverReportType); ok {
		return x.IdHandoverReportType
	}
	return xnap_ies.HandoverReportType(0)
}

func (x *HandoverReportIEsValue) GetIdHandoverCause() *xnap_ies.Cause {
	if x, ok := x.GetHandoverReportIes().(*HandoverReportIEsValue_IdHandoverCause); ok {
		return x.IdHandoverCause
	}
	return nil
}

func (x *HandoverReportIEsValue) GetIdSourceCellCgi() *xnap_ies.GlobalNgRAncellID {
	if x, ok := x.GetHandoverReportIes().(*HandoverReportIEsValue_IdSourceCellCgi); ok {
		return x.IdSourceCellCgi
	}
	return nil
}

func (x *HandoverReportIEsValue) GetIdTargetCellCgi() *xnap_ies.GlobalNgRAncellID {
	if x, ok := x.GetHandoverReportIes().(*HandoverReportIEsValue_IdTargetCellCgi); ok {
		return x.IdTargetCellCgi
	}
	return nil
}

func (x *HandoverReportIEsValue) GetIdReEstablishmentCellCgi() *xnap_ies.GlobalCellID {
	if x, ok := x.GetHandoverReportIes().(*HandoverReportIEsValue_IdReEstablishmentCellCgi); ok {
		return x.IdReEstablishmentCellCgi
	}
	return nil
}

func (x *HandoverReportIEsValue) GetIdTargetCellinEutran() *xnap_ies.TargetCellinEutran {
	if x, ok := x.GetHandoverReportIes().(*HandoverReportIEsValue_IdTargetCellinEutran); ok {
		return x.IdTargetCellinEutran
	}
	return nil
}

func (x *HandoverReportIEsValue) GetIdSourceCellCrnti() *xnap_ies.CRNti {
	if x, ok := x.GetHandoverReportIes().(*HandoverReportIEsValue_IdSourceCellCrnti); ok {
		return x.IdSourceCellCrnti
	}
	return nil
}

func (x *HandoverReportIEsValue) GetIdMobilityInformation() *xnap_ies.MobilityInformation {
	if x, ok := x.GetHandoverReportIes().(*HandoverReportIEsValue_IdMobilityInformation); ok {
		return x.IdMobilityInformation
	}
	return nil
}

func (x *HandoverReportIEsValue) GetIdUerlfreportContainer() *xnap_ies.UerlfreportContainer {
	if x, ok := x.GetHandoverReportIes().(*HandoverReportIEsValue_IdUerlfreportContainer); ok {
		return x.IdUerlfreportContainer
	}
	return nil
}

type isHandoverReportIEsValue_HandoverReportIes interface {
	isHandoverReportIEsValue_HandoverReportIes()
}

type HandoverReportIEsValue_IdHandoverReportType struct {
	// @inject_tag: aper:"choiceIdx:1,valueExt,valueLB:0,valueUB:2,"
	IdHandoverReportType xnap_ies.HandoverReportType `protobuf:"varint,1,opt,name=id_handover_report_type,json=id-HandoverReportType,proto3,enum=xnap.v1.HandoverReportType,oneof" aper:"choiceIdx:1,valueExt,valueLB:0,valueUB:2,"`
}

type HandoverReportIEsValue_IdHandoverCause struct {
	// @inject_tag: aper:"choiceIdx:2,"
	IdHandoverCause *xnap_ies.Cause `protobuf:"bytes,2,opt,name=id_handover_cause,json=id-HandoverCause,proto3,oneof" aper:"choiceIdx:2,"`
}

type HandoverReportIEsValue_IdSourceCellCgi struct {
	// @inject_tag: aper:"choiceIdx:3,valueExt,"
	IdSourceCellCgi *xnap_ies.GlobalNgRAncellID `protobuf:"bytes,3,opt,name=id_source_cell_cgi,json=id-SourceCellCGI,proto3,oneof" aper:"choiceIdx:3,valueExt,"`
}

type HandoverReportIEsValue_IdTargetCellCgi struct {
	// @inject_tag: aper:"choiceIdx:4,valueExt,"
	IdTargetCellCgi *xnap_ies.GlobalNgRAncellID `protobuf:"bytes,4,opt,name=id_target_cell_cgi,json=id-TargetCellCGI,proto3,oneof" aper:"choiceIdx:4,valueExt,"`
}

type HandoverReportIEsValue_IdReEstablishmentCellCgi struct {
	// @inject_tag: aper:"choiceIdx:5,valueExt,"
	IdReEstablishmentCellCgi *xnap_ies.GlobalCellID `protobuf:"bytes,5,opt,name=id_re_establishment_cell_cgi,json=id-ReEstablishmentCellCGI,proto3,oneof" aper:"choiceIdx:5,valueExt,"`
}

type HandoverReportIEsValue_IdTargetCellinEutran struct {
	// @inject_tag: aper:"choiceIdx:6,"
	IdTargetCellinEutran *xnap_ies.TargetCellinEutran `protobuf:"bytes,6,opt,name=id_target_cellin_eutran,json=id-TargetCellinEUTRAN,proto3,oneof" aper:"choiceIdx:6,"`
}

type HandoverReportIEsValue_IdSourceCellCrnti struct {
	// @inject_tag: aper:"choiceIdx:7,"
	IdSourceCellCrnti *xnap_ies.CRNti `protobuf:"bytes,7,opt,name=id_source_cell_crnti,json=id-SourceCellCRNTI,proto3,oneof" aper:"choiceIdx:7,"`
}

type HandoverReportIEsValue_IdMobilityInformation struct {
	// @inject_tag: aper:"choiceIdx:8,"
	IdMobilityInformation *xnap_ies.MobilityInformation `protobuf:"bytes,8,opt,name=id_mobility_information,json=id-MobilityInformation,proto3,oneof" aper:"choiceIdx:8,"`
}

type HandoverReportIEsValue_IdUerlfreportContainer struct {
	// @inject_tag: aper:"choiceIdx:9,"
	IdUerlfreportContainer *xnap_ies.UerlfreportContainer `protobuf:"bytes,9,opt,name=id_uerlfreport_container,json=id-UERLFReportContainer,proto3,oneof" aper:"choiceIdx:9,"`
}

func (*HandoverReportIEsValue_IdHandoverReportType) isHandoverReportIEsValue_HandoverReportIes() {}

func (*HandoverReportIEsValue_IdHandoverCause) isHandoverReportIEsValue_HandoverReportIes() {}

func (*HandoverReportIEsValue_IdSourceCellCgi) isHandoverReportIEsValue_HandoverReportIes() {}

func (*HandoverReportIEsValue_IdTargetCellCgi) isHandoverReportIEsValue_HandoverReportIes() {}

func (*HandoverReportIEsValue_IdReEstablishmentCellCgi) isHandoverReportIEsValue_HandoverReportIes() {
}

func (*HandoverReportIEsValue_IdTargetCellinEutran) isHandoverReportIEsValue_HandoverReportIes() {}

func (*HandoverReportIEsValue_IdSourceCellCrnti) isHandoverReportIEsValue_HandoverReportIes() {}

func (*HandoverReportIEsValue_IdMobilityInformation) isHandoverReportIEsValue_HandoverReportIes() {}

func (*HandoverReportIEsValue_IdUerlfreportContainer) isHandoverReportIEsValue_HandoverReportIes() {}

// concrete instance(s) of class XNAP-PROTOCOL-IES from xnap_v1.asn1:2846
// @inject_tag: aper:"valueExt"
// {HandoverReport-IEs}
type HandoverReportIEs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"unique,"
	Id *xnap_commondatatypes.ProtocolIeID `protobuf:"bytes,1,opt,name=id,json=&id,proto3" json:"id,omitempty" aper:"unique,"`
	// @inject_tag: aper:"valueLB:0,valueUB:2,"
	Criticality xnap_commondatatypes.Criticality `protobuf:"varint,2,opt,name=criticality,json=&criticality,proto3,enum=xnap.v1.Criticality" json:"criticality,omitempty" aper:"valueLB:0,valueUB:2,"`
	// @inject_tag: aper:"canonicalOrder,"
	Value *HandoverReportIEsValue `protobuf:"bytes,3,opt,name=value,json=&Value,proto3" json:"value,omitempty" aper:"canonicalOrder,"`
}

func (x *HandoverReportIEs) Reset() {
	*x = HandoverReportIEs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[299]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HandoverReportIEs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HandoverReportIEs) ProtoMessage() {}

func (x *HandoverReportIEs) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[299]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HandoverReportIEs.ProtoReflect.Descriptor instead.
func (*HandoverReportIEs) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_pdu_contents_proto_rawDescGZIP(), []int{299}
}

func (x *HandoverReportIEs) GetId() *xnap_commondatatypes.ProtocolIeID {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *HandoverReportIEs) GetCriticality() xnap_commondatatypes.Criticality {
	if x != nil {
		return x.Criticality
	}
	return xnap_commondatatypes.Criticality(0)
}

func (x *HandoverReportIEs) GetValue() *HandoverReportIEsValue {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:2842
// @inject_tag: aper:"valueExt"
// {HandoverReport}
type HandoverReport struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProtocolIes []*HandoverReportIEs `protobuf:"bytes,1,rep,name=protocol_ies,json=protocolIEs,proto3" json:"protocol_ies,omitempty"`
}

func (x *HandoverReport) Reset() {
	*x = HandoverReport{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[300]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HandoverReport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HandoverReport) ProtoMessage() {}

func (x *HandoverReport) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[300]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HandoverReport.ProtoReflect.Descriptor instead.
func (*HandoverReport) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_pdu_contents_proto_rawDescGZIP(), []int{300}
}

func (x *HandoverReport) GetProtocolIes() []*HandoverReportIEs {
	if x != nil {
		return x.ProtocolIes
	}
	return nil
}

// value set from xnap_v1.asn1:2872
// {ResourceStatusRequest-IEs&Value}
type ResourceStatusRequestIEsValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// value set translated as choice from xnap_v1.asn1:2872
	//
	// Types that are assignable to ResourceStatusRequestIes:
	//	*ResourceStatusRequestIEsValue_IdNgranNode1MeasurementId
	//	*ResourceStatusRequestIEsValue_IdNgranNode2MeasurementId
	//	*ResourceStatusRequestIEsValue_IdRegistrationRequest
	//	*ResourceStatusRequestIEsValue_IdReportCharacteristics
	//	*ResourceStatusRequestIEsValue_IdCellToReport
	//	*ResourceStatusRequestIEsValue_IdReportingPeriodicity
	ResourceStatusRequestIes isResourceStatusRequestIEsValue_ResourceStatusRequestIes `protobuf_oneof:"resource_status_request_ies"`
}

func (x *ResourceStatusRequestIEsValue) Reset() {
	*x = ResourceStatusRequestIEsValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[301]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResourceStatusRequestIEsValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResourceStatusRequestIEsValue) ProtoMessage() {}

func (x *ResourceStatusRequestIEsValue) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[301]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResourceStatusRequestIEsValue.ProtoReflect.Descriptor instead.
func (*ResourceStatusRequestIEsValue) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_pdu_contents_proto_rawDescGZIP(), []int{301}
}

func (m *ResourceStatusRequestIEsValue) GetResourceStatusRequestIes() isResourceStatusRequestIEsValue_ResourceStatusRequestIes {
	if m != nil {
		return m.ResourceStatusRequestIes
	}
	return nil
}

func (x *ResourceStatusRequestIEsValue) GetIdNgranNode1MeasurementId() *xnap_ies.MeasurementID {
	if x, ok := x.GetResourceStatusRequestIes().(*ResourceStatusRequestIEsValue_IdNgranNode1MeasurementId); ok {
		return x.IdNgranNode1MeasurementId
	}
	return nil
}

func (x *ResourceStatusRequestIEsValue) GetIdNgranNode2MeasurementId() *xnap_ies.MeasurementID {
	if x, ok := x.GetResourceStatusRequestIes().(*ResourceStatusRequestIEsValue_IdNgranNode2MeasurementId); ok {
		return x.IdNgranNode2MeasurementId
	}
	return nil
}

func (x *ResourceStatusRequestIEsValue) GetIdRegistrationRequest() xnap_ies.RegistrationRequest {
	if x, ok := x.GetResourceStatusRequestIes().(*ResourceStatusRequestIEsValue_IdRegistrationRequest); ok {
		return x.IdRegistrationRequest
	}
	return xnap_ies.RegistrationRequest(0)
}

func (x *ResourceStatusRequestIEsValue) GetIdReportCharacteristics() *xnap_ies.ReportCharacteristics {
	if x, ok := x.GetResourceStatusRequestIes().(*ResourceStatusRequestIEsValue_IdReportCharacteristics); ok {
		return x.IdReportCharacteristics
	}
	return nil
}

func (x *ResourceStatusRequestIEsValue) GetIdCellToReport() *xnap_ies.CellToReport {
	if x, ok := x.GetResourceStatusRequestIes().(*ResourceStatusRequestIEsValue_IdCellToReport); ok {
		return x.IdCellToReport
	}
	return nil
}

func (x *ResourceStatusRequestIEsValue) GetIdReportingPeriodicity() xnap_ies.ReportingPeriodicity {
	if x, ok := x.GetResourceStatusRequestIes().(*ResourceStatusRequestIEsValue_IdReportingPeriodicity); ok {
		return x.IdReportingPeriodicity
	}
	return xnap_ies.ReportingPeriodicity(0)
}

type isResourceStatusRequestIEsValue_ResourceStatusRequestIes interface {
	isResourceStatusRequestIEsValue_ResourceStatusRequestIes()
}

type ResourceStatusRequestIEsValue_IdNgranNode1MeasurementId struct {
	// @inject_tag: aper:"choiceIdx:1,"
	IdNgranNode1MeasurementId *xnap_ies.MeasurementID `protobuf:"bytes,1,opt,name=id_ngran_node1_measurement_id,json=id-NGRAN-Node1-Measurement-ID,proto3,oneof" aper:"choiceIdx:1,"`
}

type ResourceStatusRequestIEsValue_IdNgranNode2MeasurementId struct {
	// @inject_tag: aper:"choiceIdx:2,"
	IdNgranNode2MeasurementId *xnap_ies.MeasurementID `protobuf:"bytes,2,opt,name=id_ngran_node2_measurement_id,json=id-NGRAN-Node2-Measurement-ID,proto3,oneof" aper:"choiceIdx:2,"`
}

type ResourceStatusRequestIEsValue_IdRegistrationRequest struct {
	// @inject_tag: aper:"choiceIdx:3,valueExt,valueLB:0,valueUB:2,"
	IdRegistrationRequest xnap_ies.RegistrationRequest `protobuf:"varint,3,opt,name=id_registration_request,json=id-RegistrationRequest,proto3,enum=xnap.v1.RegistrationRequest,oneof" aper:"choiceIdx:3,valueExt,valueLB:0,valueUB:2,"`
}

type ResourceStatusRequestIEsValue_IdReportCharacteristics struct {
	// @inject_tag: aper:"choiceIdx:4,"
	IdReportCharacteristics *xnap_ies.ReportCharacteristics `protobuf:"bytes,4,opt,name=id_report_characteristics,json=id-ReportCharacteristics,proto3,oneof" aper:"choiceIdx:4,"`
}

type ResourceStatusRequestIEsValue_IdCellToReport struct {
	// @inject_tag: aper:"choiceIdx:5,"
	IdCellToReport *xnap_ies.CellToReport `protobuf:"bytes,5,opt,name=id_cell_to_report,json=id-CellToReport,proto3,oneof" aper:"choiceIdx:5,"`
}

type ResourceStatusRequestIEsValue_IdReportingPeriodicity struct {
	// @inject_tag: aper:"choiceIdx:6,valueExt,valueLB:0,valueUB:4,"
	IdReportingPeriodicity xnap_ies.ReportingPeriodicity `protobuf:"varint,6,opt,name=id_reporting_periodicity,json=id-ReportingPeriodicity,proto3,enum=xnap.v1.ReportingPeriodicity,oneof" aper:"choiceIdx:6,valueExt,valueLB:0,valueUB:4,"`
}

func (*ResourceStatusRequestIEsValue_IdNgranNode1MeasurementId) isResourceStatusRequestIEsValue_ResourceStatusRequestIes() {
}

func (*ResourceStatusRequestIEsValue_IdNgranNode2MeasurementId) isResourceStatusRequestIEsValue_ResourceStatusRequestIes() {
}

func (*ResourceStatusRequestIEsValue_IdRegistrationRequest) isResourceStatusRequestIEsValue_ResourceStatusRequestIes() {
}

func (*ResourceStatusRequestIEsValue_IdReportCharacteristics) isResourceStatusRequestIEsValue_ResourceStatusRequestIes() {
}

func (*ResourceStatusRequestIEsValue_IdCellToReport) isResourceStatusRequestIEsValue_ResourceStatusRequestIes() {
}

func (*ResourceStatusRequestIEsValue_IdReportingPeriodicity) isResourceStatusRequestIEsValue_ResourceStatusRequestIes() {
}

// concrete instance(s) of class XNAP-PROTOCOL-IES from xnap_v1.asn1:2872
// @inject_tag: aper:"valueExt"
// {ResourceStatusRequest-IEs}
type ResourceStatusRequestIEs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"unique,"
	Id *xnap_commondatatypes.ProtocolIeID `protobuf:"bytes,1,opt,name=id,json=&id,proto3" json:"id,omitempty" aper:"unique,"`
	// @inject_tag: aper:"valueLB:0,valueUB:2,"
	Criticality xnap_commondatatypes.Criticality `protobuf:"varint,2,opt,name=criticality,json=&criticality,proto3,enum=xnap.v1.Criticality" json:"criticality,omitempty" aper:"valueLB:0,valueUB:2,"`
	// @inject_tag: aper:"canonicalOrder,"
	Value *ResourceStatusRequestIEsValue `protobuf:"bytes,3,opt,name=value,json=&Value,proto3" json:"value,omitempty" aper:"canonicalOrder,"`
}

func (x *ResourceStatusRequestIEs) Reset() {
	*x = ResourceStatusRequestIEs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[302]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResourceStatusRequestIEs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResourceStatusRequestIEs) ProtoMessage() {}

func (x *ResourceStatusRequestIEs) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[302]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResourceStatusRequestIEs.ProtoReflect.Descriptor instead.
func (*ResourceStatusRequestIEs) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_pdu_contents_proto_rawDescGZIP(), []int{302}
}

func (x *ResourceStatusRequestIEs) GetId() *xnap_commondatatypes.ProtocolIeID {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ResourceStatusRequestIEs) GetCriticality() xnap_commondatatypes.Criticality {
	if x != nil {
		return x.Criticality
	}
	return xnap_commondatatypes.Criticality(0)
}

func (x *ResourceStatusRequestIEs) GetValue() *ResourceStatusRequestIEsValue {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:2868
// @inject_tag: aper:"valueExt"
// {ResourceStatusRequest}
type ResourceStatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProtocolIes []*ResourceStatusRequestIEs `protobuf:"bytes,1,rep,name=protocol_ies,json=protocolIEs,proto3" json:"protocol_ies,omitempty"`
}

func (x *ResourceStatusRequest) Reset() {
	*x = ResourceStatusRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[303]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResourceStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResourceStatusRequest) ProtoMessage() {}

func (x *ResourceStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[303]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResourceStatusRequest.ProtoReflect.Descriptor instead.
func (*ResourceStatusRequest) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_pdu_contents_proto_rawDescGZIP(), []int{303}
}

func (x *ResourceStatusRequest) GetProtocolIes() []*ResourceStatusRequestIEs {
	if x != nil {
		return x.ProtocolIes
	}
	return nil
}

// value set from xnap_v1.asn1:2896
// {ResourceStatusResponse-IEs&Value}
type ResourceStatusResponseIEsValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// value set translated as choice from xnap_v1.asn1:2896
	//
	// Types that are assignable to ResourceStatusResponseIes:
	//	*ResourceStatusResponseIEsValue_IdNgranNode1MeasurementId
	//	*ResourceStatusResponseIEsValue_IdNgranNode2MeasurementId
	//	*ResourceStatusResponseIEsValue_IdCriticalityDiagnostics
	ResourceStatusResponseIes isResourceStatusResponseIEsValue_ResourceStatusResponseIes `protobuf_oneof:"resource_status_response_ies"`
}

func (x *ResourceStatusResponseIEsValue) Reset() {
	*x = ResourceStatusResponseIEsValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[304]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResourceStatusResponseIEsValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResourceStatusResponseIEsValue) ProtoMessage() {}

func (x *ResourceStatusResponseIEsValue) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[304]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResourceStatusResponseIEsValue.ProtoReflect.Descriptor instead.
func (*ResourceStatusResponseIEsValue) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_pdu_contents_proto_rawDescGZIP(), []int{304}
}

func (m *ResourceStatusResponseIEsValue) GetResourceStatusResponseIes() isResourceStatusResponseIEsValue_ResourceStatusResponseIes {
	if m != nil {
		return m.ResourceStatusResponseIes
	}
	return nil
}

func (x *ResourceStatusResponseIEsValue) GetIdNgranNode1MeasurementId() *xnap_ies.MeasurementID {
	if x, ok := x.GetResourceStatusResponseIes().(*ResourceStatusResponseIEsValue_IdNgranNode1MeasurementId); ok {
		return x.IdNgranNode1MeasurementId
	}
	return nil
}

func (x *ResourceStatusResponseIEsValue) GetIdNgranNode2MeasurementId() *xnap_ies.MeasurementID {
	if x, ok := x.GetResourceStatusResponseIes().(*ResourceStatusResponseIEsValue_IdNgranNode2MeasurementId); ok {
		return x.IdNgranNode2MeasurementId
	}
	return nil
}

func (x *ResourceStatusResponseIEsValue) GetIdCriticalityDiagnostics() *xnap_ies.CriticalityDiagnostics {
	if x, ok := x.GetResourceStatusResponseIes().(*ResourceStatusResponseIEsValue_IdCriticalityDiagnostics); ok {
		return x.IdCriticalityDiagnostics
	}
	return nil
}

type isResourceStatusResponseIEsValue_ResourceStatusResponseIes interface {
	isResourceStatusResponseIEsValue_ResourceStatusResponseIes()
}

type ResourceStatusResponseIEsValue_IdNgranNode1MeasurementId struct {
	// @inject_tag: aper:"choiceIdx:1,"
	IdNgranNode1MeasurementId *xnap_ies.MeasurementID `protobuf:"bytes,1,opt,name=id_ngran_node1_measurement_id,json=id-NGRAN-Node1-Measurement-ID,proto3,oneof" aper:"choiceIdx:1,"`
}

type ResourceStatusResponseIEsValue_IdNgranNode2MeasurementId struct {
	// @inject_tag: aper:"choiceIdx:2,"
	IdNgranNode2MeasurementId *xnap_ies.MeasurementID `protobuf:"bytes,2,opt,name=id_ngran_node2_measurement_id,json=id-NGRAN-Node2-Measurement-ID,proto3,oneof" aper:"choiceIdx:2,"`
}

type ResourceStatusResponseIEsValue_IdCriticalityDiagnostics struct {
	// @inject_tag: aper:"choiceIdx:3,valueExt,"
	IdCriticalityDiagnostics *xnap_ies.CriticalityDiagnostics `protobuf:"bytes,3,opt,name=id_criticality_diagnostics,json=id-CriticalityDiagnostics,proto3,oneof" aper:"choiceIdx:3,valueExt,"`
}

func (*ResourceStatusResponseIEsValue_IdNgranNode1MeasurementId) isResourceStatusResponseIEsValue_ResourceStatusResponseIes() {
}

func (*ResourceStatusResponseIEsValue_IdNgranNode2MeasurementId) isResourceStatusResponseIEsValue_ResourceStatusResponseIes() {
}

func (*ResourceStatusResponseIEsValue_IdCriticalityDiagnostics) isResourceStatusResponseIEsValue_ResourceStatusResponseIes() {
}

// concrete instance(s) of class XNAP-PROTOCOL-IES from xnap_v1.asn1:2896
// @inject_tag: aper:"valueExt"
// {ResourceStatusResponse-IEs}
type ResourceStatusResponseIEs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"unique,"
	Id *xnap_commondatatypes.ProtocolIeID `protobuf:"bytes,1,opt,name=id,json=&id,proto3" json:"id,omitempty" aper:"unique,"`
	// @inject_tag: aper:"valueLB:0,valueUB:2,"
	Criticality xnap_commondatatypes.Criticality `protobuf:"varint,2,opt,name=criticality,json=&criticality,proto3,enum=xnap.v1.Criticality" json:"criticality,omitempty" aper:"valueLB:0,valueUB:2,"`
	// @inject_tag: aper:"canonicalOrder,"
	Value *ResourceStatusResponseIEsValue `protobuf:"bytes,3,opt,name=value,json=&Value,proto3" json:"value,omitempty" aper:"canonicalOrder,"`
}

func (x *ResourceStatusResponseIEs) Reset() {
	*x = ResourceStatusResponseIEs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[305]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResourceStatusResponseIEs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResourceStatusResponseIEs) ProtoMessage() {}

func (x *ResourceStatusResponseIEs) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[305]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResourceStatusResponseIEs.ProtoReflect.Descriptor instead.
func (*ResourceStatusResponseIEs) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_pdu_contents_proto_rawDescGZIP(), []int{305}
}

func (x *ResourceStatusResponseIEs) GetId() *xnap_commondatatypes.ProtocolIeID {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ResourceStatusResponseIEs) GetCriticality() xnap_commondatatypes.Criticality {
	if x != nil {
		return x.Criticality
	}
	return xnap_commondatatypes.Criticality(0)
}

func (x *ResourceStatusResponseIEs) GetValue() *ResourceStatusResponseIEsValue {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:2892
// @inject_tag: aper:"valueExt"
// {ResourceStatusResponse}
type ResourceStatusResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProtocolIes []*ResourceStatusResponseIEs `protobuf:"bytes,1,rep,name=protocol_ies,json=protocolIEs,proto3" json:"protocol_ies,omitempty"`
}

func (x *ResourceStatusResponse) Reset() {
	*x = ResourceStatusResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[306]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResourceStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResourceStatusResponse) ProtoMessage() {}

func (x *ResourceStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[306]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResourceStatusResponse.ProtoReflect.Descriptor instead.
func (*ResourceStatusResponse) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_pdu_contents_proto_rawDescGZIP(), []int{306}
}

func (x *ResourceStatusResponse) GetProtocolIes() []*ResourceStatusResponseIEs {
	if x != nil {
		return x.ProtocolIes
	}
	return nil
}

// value set from xnap_v1.asn1:2915
// {ResourceStatusFailure-IEs&Value}
type ResourceStatusFailureIEsValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// value set translated as choice from xnap_v1.asn1:2915
	//
	// Types that are assignable to ResourceStatusFailureIes:
	//	*ResourceStatusFailureIEsValue_IdNgranNode1MeasurementId
	//	*ResourceStatusFailureIEsValue_IdNgranNode2MeasurementId
	//	*ResourceStatusFailureIEsValue_IdCause
	//	*ResourceStatusFailureIEsValue_IdCriticalityDiagnostics
	ResourceStatusFailureIes isResourceStatusFailureIEsValue_ResourceStatusFailureIes `protobuf_oneof:"resource_status_failure_ies"`
}

func (x *ResourceStatusFailureIEsValue) Reset() {
	*x = ResourceStatusFailureIEsValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[307]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResourceStatusFailureIEsValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResourceStatusFailureIEsValue) ProtoMessage() {}

func (x *ResourceStatusFailureIEsValue) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[307]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResourceStatusFailureIEsValue.ProtoReflect.Descriptor instead.
func (*ResourceStatusFailureIEsValue) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_pdu_contents_proto_rawDescGZIP(), []int{307}
}

func (m *ResourceStatusFailureIEsValue) GetResourceStatusFailureIes() isResourceStatusFailureIEsValue_ResourceStatusFailureIes {
	if m != nil {
		return m.ResourceStatusFailureIes
	}
	return nil
}

func (x *ResourceStatusFailureIEsValue) GetIdNgranNode1MeasurementId() *xnap_ies.MeasurementID {
	if x, ok := x.GetResourceStatusFailureIes().(*ResourceStatusFailureIEsValue_IdNgranNode1MeasurementId); ok {
		return x.IdNgranNode1MeasurementId
	}
	return nil
}

func (x *ResourceStatusFailureIEsValue) GetIdNgranNode2MeasurementId() *xnap_ies.MeasurementID {
	if x, ok := x.GetResourceStatusFailureIes().(*ResourceStatusFailureIEsValue_IdNgranNode2MeasurementId); ok {
		return x.IdNgranNode2MeasurementId
	}
	return nil
}

func (x *ResourceStatusFailureIEsValue) GetIdCause() *xnap_ies.Cause {
	if x, ok := x.GetResourceStatusFailureIes().(*ResourceStatusFailureIEsValue_IdCause); ok {
		return x.IdCause
	}
	return nil
}

func (x *ResourceStatusFailureIEsValue) GetIdCriticalityDiagnostics() *xnap_ies.CriticalityDiagnostics {
	if x, ok := x.GetResourceStatusFailureIes().(*ResourceStatusFailureIEsValue_IdCriticalityDiagnostics); ok {
		return x.IdCriticalityDiagnostics
	}
	return nil
}

type isResourceStatusFailureIEsValue_ResourceStatusFailureIes interface {
	isResourceStatusFailureIEsValue_ResourceStatusFailureIes()
}

type ResourceStatusFailureIEsValue_IdNgranNode1MeasurementId struct {
	// @inject_tag: aper:"choiceIdx:1,"
	IdNgranNode1MeasurementId *xnap_ies.MeasurementID `protobuf:"bytes,1,opt,name=id_ngran_node1_measurement_id,json=id-NGRAN-Node1-Measurement-ID,proto3,oneof" aper:"choiceIdx:1,"`
}

type ResourceStatusFailureIEsValue_IdNgranNode2MeasurementId struct {
	// @inject_tag: aper:"choiceIdx:2,"
	IdNgranNode2MeasurementId *xnap_ies.MeasurementID `protobuf:"bytes,2,opt,name=id_ngran_node2_measurement_id,json=id-NGRAN-Node2-Measurement-ID,proto3,oneof" aper:"choiceIdx:2,"`
}

type ResourceStatusFailureIEsValue_IdCause struct {
	// @inject_tag: aper:"choiceIdx:3,"
	IdCause *xnap_ies.Cause `protobuf:"bytes,3,opt,name=id_cause,json=id-Cause,proto3,oneof" aper:"choiceIdx:3,"`
}

type ResourceStatusFailureIEsValue_IdCriticalityDiagnostics struct {
	// @inject_tag: aper:"choiceIdx:4,valueExt,"
	IdCriticalityDiagnostics *xnap_ies.CriticalityDiagnostics `protobuf:"bytes,4,opt,name=id_criticality_diagnostics,json=id-CriticalityDiagnostics,proto3,oneof" aper:"choiceIdx:4,valueExt,"`
}

func (*ResourceStatusFailureIEsValue_IdNgranNode1MeasurementId) isResourceStatusFailureIEsValue_ResourceStatusFailureIes() {
}

func (*ResourceStatusFailureIEsValue_IdNgranNode2MeasurementId) isResourceStatusFailureIEsValue_ResourceStatusFailureIes() {
}

func (*ResourceStatusFailureIEsValue_IdCause) isResourceStatusFailureIEsValue_ResourceStatusFailureIes() {
}

func (*ResourceStatusFailureIEsValue_IdCriticalityDiagnostics) isResourceStatusFailureIEsValue_ResourceStatusFailureIes() {
}

// concrete instance(s) of class XNAP-PROTOCOL-IES from xnap_v1.asn1:2915
// @inject_tag: aper:"valueExt"
// {ResourceStatusFailure-IEs}
type ResourceStatusFailureIEs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"unique,"
	Id *xnap_commondatatypes.ProtocolIeID `protobuf:"bytes,1,opt,name=id,json=&id,proto3" json:"id,omitempty" aper:"unique,"`
	// @inject_tag: aper:"valueLB:0,valueUB:2,"
	Criticality xnap_commondatatypes.Criticality `protobuf:"varint,2,opt,name=criticality,json=&criticality,proto3,enum=xnap.v1.Criticality" json:"criticality,omitempty" aper:"valueLB:0,valueUB:2,"`
	// @inject_tag: aper:"canonicalOrder,"
	Value *ResourceStatusFailureIEsValue `protobuf:"bytes,3,opt,name=value,json=&Value,proto3" json:"value,omitempty" aper:"canonicalOrder,"`
}

func (x *ResourceStatusFailureIEs) Reset() {
	*x = ResourceStatusFailureIEs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[308]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResourceStatusFailureIEs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResourceStatusFailureIEs) ProtoMessage() {}

func (x *ResourceStatusFailureIEs) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[308]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResourceStatusFailureIEs.ProtoReflect.Descriptor instead.
func (*ResourceStatusFailureIEs) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_pdu_contents_proto_rawDescGZIP(), []int{308}
}

func (x *ResourceStatusFailureIEs) GetId() *xnap_commondatatypes.ProtocolIeID {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ResourceStatusFailureIEs) GetCriticality() xnap_commondatatypes.Criticality {
	if x != nil {
		return x.Criticality
	}
	return xnap_commondatatypes.Criticality(0)
}

func (x *ResourceStatusFailureIEs) GetValue() *ResourceStatusFailureIEsValue {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:2911
// @inject_tag: aper:"valueExt"
// {ResourceStatusFailure}
type ResourceStatusFailure struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProtocolIes []*ResourceStatusFailureIEs `protobuf:"bytes,1,rep,name=protocol_ies,json=protocolIEs,proto3" json:"protocol_ies,omitempty"`
}

func (x *ResourceStatusFailure) Reset() {
	*x = ResourceStatusFailure{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[309]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResourceStatusFailure) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResourceStatusFailure) ProtoMessage() {}

func (x *ResourceStatusFailure) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[309]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResourceStatusFailure.ProtoReflect.Descriptor instead.
func (*ResourceStatusFailure) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_pdu_contents_proto_rawDescGZIP(), []int{309}
}

func (x *ResourceStatusFailure) GetProtocolIes() []*ResourceStatusFailureIEs {
	if x != nil {
		return x.ProtocolIes
	}
	return nil
}

// value set from xnap_v1.asn1:2935
// {ResourceStatusUpdate-IEs&Value}
type ResourceStatusUpdateIEsValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// value set translated as choice from xnap_v1.asn1:2935
	//
	// Types that are assignable to ResourceStatusUpdateIes:
	//	*ResourceStatusUpdateIEsValue_IdNgranNode1MeasurementId
	//	*ResourceStatusUpdateIEsValue_IdNgranNode2MeasurementId
	//	*ResourceStatusUpdateIEsValue_IdCellMeasurementResult
	ResourceStatusUpdateIes isResourceStatusUpdateIEsValue_ResourceStatusUpdateIes `protobuf_oneof:"resource_status_update_ies"`
}

func (x *ResourceStatusUpdateIEsValue) Reset() {
	*x = ResourceStatusUpdateIEsValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[310]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResourceStatusUpdateIEsValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResourceStatusUpdateIEsValue) ProtoMessage() {}

func (x *ResourceStatusUpdateIEsValue) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[310]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResourceStatusUpdateIEsValue.ProtoReflect.Descriptor instead.
func (*ResourceStatusUpdateIEsValue) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_pdu_contents_proto_rawDescGZIP(), []int{310}
}

func (m *ResourceStatusUpdateIEsValue) GetResourceStatusUpdateIes() isResourceStatusUpdateIEsValue_ResourceStatusUpdateIes {
	if m != nil {
		return m.ResourceStatusUpdateIes
	}
	return nil
}

func (x *ResourceStatusUpdateIEsValue) GetIdNgranNode1MeasurementId() *xnap_ies.MeasurementID {
	if x, ok := x.GetResourceStatusUpdateIes().(*ResourceStatusUpdateIEsValue_IdNgranNode1MeasurementId); ok {
		return x.IdNgranNode1MeasurementId
	}
	return nil
}

func (x *ResourceStatusUpdateIEsValue) GetIdNgranNode2MeasurementId() *xnap_ies.MeasurementID {
	if x, ok := x.GetResourceStatusUpdateIes().(*ResourceStatusUpdateIEsValue_IdNgranNode2MeasurementId); ok {
		return x.IdNgranNode2MeasurementId
	}
	return nil
}

func (x *ResourceStatusUpdateIEsValue) GetIdCellMeasurementResult() *xnap_ies.CellMeasurementResult {
	if x, ok := x.GetResourceStatusUpdateIes().(*ResourceStatusUpdateIEsValue_IdCellMeasurementResult); ok {
		return x.IdCellMeasurementResult
	}
	return nil
}

type isResourceStatusUpdateIEsValue_ResourceStatusUpdateIes interface {
	isResourceStatusUpdateIEsValue_ResourceStatusUpdateIes()
}

type ResourceStatusUpdateIEsValue_IdNgranNode1MeasurementId struct {
	// @inject_tag: aper:"choiceIdx:1,"
	IdNgranNode1MeasurementId *xnap_ies.MeasurementID `protobuf:"bytes,1,opt,name=id_ngran_node1_measurement_id,json=id-NGRAN-Node1-Measurement-ID,proto3,oneof" aper:"choiceIdx:1,"`
}

type ResourceStatusUpdateIEsValue_IdNgranNode2MeasurementId struct {
	// @inject_tag: aper:"choiceIdx:2,"
	IdNgranNode2MeasurementId *xnap_ies.MeasurementID `protobuf:"bytes,2,opt,name=id_ngran_node2_measurement_id,json=id-NGRAN-Node2-Measurement-ID,proto3,oneof" aper:"choiceIdx:2,"`
}

type ResourceStatusUpdateIEsValue_IdCellMeasurementResult struct {
	// @inject_tag: aper:"choiceIdx:3,"
	IdCellMeasurementResult *xnap_ies.CellMeasurementResult `protobuf:"bytes,3,opt,name=id_cell_measurement_result,json=id-CellMeasurementResult,proto3,oneof" aper:"choiceIdx:3,"`
}

func (*ResourceStatusUpdateIEsValue_IdNgranNode1MeasurementId) isResourceStatusUpdateIEsValue_ResourceStatusUpdateIes() {
}

func (*ResourceStatusUpdateIEsValue_IdNgranNode2MeasurementId) isResourceStatusUpdateIEsValue_ResourceStatusUpdateIes() {
}

func (*ResourceStatusUpdateIEsValue_IdCellMeasurementResult) isResourceStatusUpdateIEsValue_ResourceStatusUpdateIes() {
}

// concrete instance(s) of class XNAP-PROTOCOL-IES from xnap_v1.asn1:2935
// @inject_tag: aper:"valueExt"
// {ResourceStatusUpdate-IEs}
type ResourceStatusUpdateIEs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"unique,"
	Id *xnap_commondatatypes.ProtocolIeID `protobuf:"bytes,1,opt,name=id,json=&id,proto3" json:"id,omitempty" aper:"unique,"`
	// @inject_tag: aper:"valueLB:0,valueUB:2,"
	Criticality xnap_commondatatypes.Criticality `protobuf:"varint,2,opt,name=criticality,json=&criticality,proto3,enum=xnap.v1.Criticality" json:"criticality,omitempty" aper:"valueLB:0,valueUB:2,"`
	// @inject_tag: aper:"canonicalOrder,"
	Value *ResourceStatusUpdateIEsValue `protobuf:"bytes,3,opt,name=value,json=&Value,proto3" json:"value,omitempty" aper:"canonicalOrder,"`
}

func (x *ResourceStatusUpdateIEs) Reset() {
	*x = ResourceStatusUpdateIEs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[311]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResourceStatusUpdateIEs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResourceStatusUpdateIEs) ProtoMessage() {}

func (x *ResourceStatusUpdateIEs) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[311]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResourceStatusUpdateIEs.ProtoReflect.Descriptor instead.
func (*ResourceStatusUpdateIEs) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_pdu_contents_proto_rawDescGZIP(), []int{311}
}

func (x *ResourceStatusUpdateIEs) GetId() *xnap_commondatatypes.ProtocolIeID {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ResourceStatusUpdateIEs) GetCriticality() xnap_commondatatypes.Criticality {
	if x != nil {
		return x.Criticality
	}
	return xnap_commondatatypes.Criticality(0)
}

func (x *ResourceStatusUpdateIEs) GetValue() *ResourceStatusUpdateIEsValue {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:2931
// @inject_tag: aper:"valueExt"
// {ResourceStatusUpdate}
type ResourceStatusUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProtocolIes []*ResourceStatusUpdateIEs `protobuf:"bytes,1,rep,name=protocol_ies,json=protocolIEs,proto3" json:"protocol_ies,omitempty"`
}

func (x *ResourceStatusUpdate) Reset() {
	*x = ResourceStatusUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[312]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResourceStatusUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResourceStatusUpdate) ProtoMessage() {}

func (x *ResourceStatusUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[312]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResourceStatusUpdate.ProtoReflect.Descriptor instead.
func (*ResourceStatusUpdate) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_pdu_contents_proto_rawDescGZIP(), []int{312}
}

func (x *ResourceStatusUpdate) GetProtocolIes() []*ResourceStatusUpdateIEs {
	if x != nil {
		return x.ProtocolIes
	}
	return nil
}

// value set from xnap_v1.asn1:2953
// {MobilityChangeRequest-IEs&Value}
type MobilityChangeRequestIEsValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// value set translated as choice from xnap_v1.asn1:2953
	//
	// Types that are assignable to MobilityChangeRequestIes:
	//	*MobilityChangeRequestIEsValue_IdNgRannode1CellId
	//	*MobilityChangeRequestIEsValue_IdNgRannode2CellId
	//	*MobilityChangeRequestIEsValue_IdNgRannode1MobilityParameters
	//	*MobilityChangeRequestIEsValue_IdNgRannode2ProposedMobilityParameters
	//	*MobilityChangeRequestIEsValue_IdCause
	MobilityChangeRequestIes isMobilityChangeRequestIEsValue_MobilityChangeRequestIes `protobuf_oneof:"mobility_change_request_ies"`
}

func (x *MobilityChangeRequestIEsValue) Reset() {
	*x = MobilityChangeRequestIEsValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[313]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MobilityChangeRequestIEsValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MobilityChangeRequestIEsValue) ProtoMessage() {}

func (x *MobilityChangeRequestIEsValue) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[313]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MobilityChangeRequestIEsValue.ProtoReflect.Descriptor instead.
func (*MobilityChangeRequestIEsValue) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_pdu_contents_proto_rawDescGZIP(), []int{313}
}

func (m *MobilityChangeRequestIEsValue) GetMobilityChangeRequestIes() isMobilityChangeRequestIEsValue_MobilityChangeRequestIes {
	if m != nil {
		return m.MobilityChangeRequestIes
	}
	return nil
}

func (x *MobilityChangeRequestIEsValue) GetIdNgRannode1CellId() *xnap_ies.GlobalNgRAncellID {
	if x, ok := x.GetMobilityChangeRequestIes().(*MobilityChangeRequestIEsValue_IdNgRannode1CellId); ok {
		return x.IdNgRannode1CellId
	}
	return nil
}

func (x *MobilityChangeRequestIEsValue) GetIdNgRannode2CellId() *xnap_ies.GlobalNgRAncellID {
	if x, ok := x.GetMobilityChangeRequestIes().(*MobilityChangeRequestIEsValue_IdNgRannode2CellId); ok {
		return x.IdNgRannode2CellId
	}
	return nil
}

func (x *MobilityChangeRequestIEsValue) GetIdNgRannode1MobilityParameters() *xnap_ies.MobilityParametersInformation {
	if x, ok := x.GetMobilityChangeRequestIes().(*MobilityChangeRequestIEsValue_IdNgRannode1MobilityParameters); ok {
		return x.IdNgRannode1MobilityParameters
	}
	return nil
}

func (x *MobilityChangeRequestIEsValue) GetIdNgRannode2ProposedMobilityParameters() *xnap_ies.MobilityParametersInformation {
	if x, ok := x.GetMobilityChangeRequestIes().(*MobilityChangeRequestIEsValue_IdNgRannode2ProposedMobilityParameters); ok {
		return x.IdNgRannode2ProposedMobilityParameters
	}
	return nil
}

func (x *MobilityChangeRequestIEsValue) GetIdCause() *xnap_ies.Cause {
	if x, ok := x.GetMobilityChangeRequestIes().(*MobilityChangeRequestIEsValue_IdCause); ok {
		return x.IdCause
	}
	return nil
}

type isMobilityChangeRequestIEsValue_MobilityChangeRequestIes interface {
	isMobilityChangeRequestIEsValue_MobilityChangeRequestIes()
}

type MobilityChangeRequestIEsValue_IdNgRannode1CellId struct {
	// @inject_tag: aper:"choiceIdx:1,valueExt,"
	IdNgRannode1CellId *xnap_ies.GlobalNgRAncellID `protobuf:"bytes,1,opt,name=id_ng_rannode1_cell_id,json=id-NG-RANnode1CellID,proto3,oneof" aper:"choiceIdx:1,valueExt,"`
}

type MobilityChangeRequestIEsValue_IdNgRannode2CellId struct {
	// @inject_tag: aper:"choiceIdx:2,valueExt,"
	IdNgRannode2CellId *xnap_ies.GlobalNgRAncellID `protobuf:"bytes,2,opt,name=id_ng_rannode2_cell_id,json=id-NG-RANnode2CellID,proto3,oneof" aper:"choiceIdx:2,valueExt,"`
}

type MobilityChangeRequestIEsValue_IdNgRannode1MobilityParameters struct {
	// @inject_tag: aper:"choiceIdx:3,valueExt,"
	IdNgRannode1MobilityParameters *xnap_ies.MobilityParametersInformation `protobuf:"bytes,3,opt,name=id_ng_rannode1_mobility_parameters,json=id-NG-RANnode1MobilityParameters,proto3,oneof" aper:"choiceIdx:3,valueExt,"`
}

type MobilityChangeRequestIEsValue_IdNgRannode2ProposedMobilityParameters struct {
	// @inject_tag: aper:"choiceIdx:4,valueExt,"
	IdNgRannode2ProposedMobilityParameters *xnap_ies.MobilityParametersInformation `protobuf:"bytes,4,opt,name=id_ng_rannode2_proposed_mobility_parameters,json=id-NG-RANnode2ProposedMobilityParameters,proto3,oneof" aper:"choiceIdx:4,valueExt,"`
}

type MobilityChangeRequestIEsValue_IdCause struct {
	// @inject_tag: aper:"choiceIdx:5,"
	IdCause *xnap_ies.Cause `protobuf:"bytes,5,opt,name=id_cause,json=id-Cause,proto3,oneof" aper:"choiceIdx:5,"`
}

func (*MobilityChangeRequestIEsValue_IdNgRannode1CellId) isMobilityChangeRequestIEsValue_MobilityChangeRequestIes() {
}

func (*MobilityChangeRequestIEsValue_IdNgRannode2CellId) isMobilityChangeRequestIEsValue_MobilityChangeRequestIes() {
}

func (*MobilityChangeRequestIEsValue_IdNgRannode1MobilityParameters) isMobilityChangeRequestIEsValue_MobilityChangeRequestIes() {
}

func (*MobilityChangeRequestIEsValue_IdNgRannode2ProposedMobilityParameters) isMobilityChangeRequestIEsValue_MobilityChangeRequestIes() {
}

func (*MobilityChangeRequestIEsValue_IdCause) isMobilityChangeRequestIEsValue_MobilityChangeRequestIes() {
}

// concrete instance(s) of class XNAP-PROTOCOL-IES from xnap_v1.asn1:2953
// @inject_tag: aper:"valueExt"
// {MobilityChangeRequest-IEs}
type MobilityChangeRequestIEs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"unique,"
	Id *xnap_commondatatypes.ProtocolIeID `protobuf:"bytes,1,opt,name=id,json=&id,proto3" json:"id,omitempty" aper:"unique,"`
	// @inject_tag: aper:"valueLB:0,valueUB:2,"
	Criticality xnap_commondatatypes.Criticality `protobuf:"varint,2,opt,name=criticality,json=&criticality,proto3,enum=xnap.v1.Criticality" json:"criticality,omitempty" aper:"valueLB:0,valueUB:2,"`
	// @inject_tag: aper:"canonicalOrder,"
	Value *MobilityChangeRequestIEsValue `protobuf:"bytes,3,opt,name=value,json=&Value,proto3" json:"value,omitempty" aper:"canonicalOrder,"`
}

func (x *MobilityChangeRequestIEs) Reset() {
	*x = MobilityChangeRequestIEs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[314]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MobilityChangeRequestIEs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MobilityChangeRequestIEs) ProtoMessage() {}

func (x *MobilityChangeRequestIEs) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[314]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MobilityChangeRequestIEs.ProtoReflect.Descriptor instead.
func (*MobilityChangeRequestIEs) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_pdu_contents_proto_rawDescGZIP(), []int{314}
}

func (x *MobilityChangeRequestIEs) GetId() *xnap_commondatatypes.ProtocolIeID {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *MobilityChangeRequestIEs) GetCriticality() xnap_commondatatypes.Criticality {
	if x != nil {
		return x.Criticality
	}
	return xnap_commondatatypes.Criticality(0)
}

func (x *MobilityChangeRequestIEs) GetValue() *MobilityChangeRequestIEsValue {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:2949
// @inject_tag: aper:"valueExt"
// {MobilityChangeRequest}
type MobilityChangeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProtocolIes []*MobilityChangeRequestIEs `protobuf:"bytes,1,rep,name=protocol_ies,json=protocolIEs,proto3" json:"protocol_ies,omitempty"`
}

func (x *MobilityChangeRequest) Reset() {
	*x = MobilityChangeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[315]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MobilityChangeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MobilityChangeRequest) ProtoMessage() {}

func (x *MobilityChangeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[315]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MobilityChangeRequest.ProtoReflect.Descriptor instead.
func (*MobilityChangeRequest) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_pdu_contents_proto_rawDescGZIP(), []int{315}
}

func (x *MobilityChangeRequest) GetProtocolIes() []*MobilityChangeRequestIEs {
	if x != nil {
		return x.ProtocolIes
	}
	return nil
}

// value set from xnap_v1.asn1:2974
// {MobilityChangeAcknowledge-IEs&Value}
type MobilityChangeAcknowledgeIEsValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// value set translated as choice from xnap_v1.asn1:2974
	//
	// Types that are assignable to MobilityChangeAcknowledgeIes:
	//	*MobilityChangeAcknowledgeIEsValue_IdNgRannode1CellId
	//	*MobilityChangeAcknowledgeIEsValue_IdNgRannode2CellId
	//	*MobilityChangeAcknowledgeIEsValue_IdCriticalityDiagnostics
	MobilityChangeAcknowledgeIes isMobilityChangeAcknowledgeIEsValue_MobilityChangeAcknowledgeIes `protobuf_oneof:"mobility_change_acknowledge_ies"`
}

func (x *MobilityChangeAcknowledgeIEsValue) Reset() {
	*x = MobilityChangeAcknowledgeIEsValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[316]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MobilityChangeAcknowledgeIEsValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MobilityChangeAcknowledgeIEsValue) ProtoMessage() {}

func (x *MobilityChangeAcknowledgeIEsValue) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[316]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MobilityChangeAcknowledgeIEsValue.ProtoReflect.Descriptor instead.
func (*MobilityChangeAcknowledgeIEsValue) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_pdu_contents_proto_rawDescGZIP(), []int{316}
}

func (m *MobilityChangeAcknowledgeIEsValue) GetMobilityChangeAcknowledgeIes() isMobilityChangeAcknowledgeIEsValue_MobilityChangeAcknowledgeIes {
	if m != nil {
		return m.MobilityChangeAcknowledgeIes
	}
	return nil
}

func (x *MobilityChangeAcknowledgeIEsValue) GetIdNgRannode1CellId() *xnap_ies.GlobalNgRAncellID {
	if x, ok := x.GetMobilityChangeAcknowledgeIes().(*MobilityChangeAcknowledgeIEsValue_IdNgRannode1CellId); ok {
		return x.IdNgRannode1CellId
	}
	return nil
}

func (x *MobilityChangeAcknowledgeIEsValue) GetIdNgRannode2CellId() *xnap_ies.GlobalNgRAncellID {
	if x, ok := x.GetMobilityChangeAcknowledgeIes().(*MobilityChangeAcknowledgeIEsValue_IdNgRannode2CellId); ok {
		return x.IdNgRannode2CellId
	}
	return nil
}

func (x *MobilityChangeAcknowledgeIEsValue) GetIdCriticalityDiagnostics() *xnap_ies.CriticalityDiagnostics {
	if x, ok := x.GetMobilityChangeAcknowledgeIes().(*MobilityChangeAcknowledgeIEsValue_IdCriticalityDiagnostics); ok {
		return x.IdCriticalityDiagnostics
	}
	return nil
}

type isMobilityChangeAcknowledgeIEsValue_MobilityChangeAcknowledgeIes interface {
	isMobilityChangeAcknowledgeIEsValue_MobilityChangeAcknowledgeIes()
}

type MobilityChangeAcknowledgeIEsValue_IdNgRannode1CellId struct {
	// @inject_tag: aper:"choiceIdx:1,valueExt,"
	IdNgRannode1CellId *xnap_ies.GlobalNgRAncellID `protobuf:"bytes,1,opt,name=id_ng_rannode1_cell_id,json=id-NG-RANnode1CellID,proto3,oneof" aper:"choiceIdx:1,valueExt,"`
}

type MobilityChangeAcknowledgeIEsValue_IdNgRannode2CellId struct {
	// @inject_tag: aper:"choiceIdx:2,valueExt,"
	IdNgRannode2CellId *xnap_ies.GlobalNgRAncellID `protobuf:"bytes,2,opt,name=id_ng_rannode2_cell_id,json=id-NG-RANnode2CellID,proto3,oneof" aper:"choiceIdx:2,valueExt,"`
}

type MobilityChangeAcknowledgeIEsValue_IdCriticalityDiagnostics struct {
	// @inject_tag: aper:"choiceIdx:3,valueExt,"
	IdCriticalityDiagnostics *xnap_ies.CriticalityDiagnostics `protobuf:"bytes,3,opt,name=id_criticality_diagnostics,json=id-CriticalityDiagnostics,proto3,oneof" aper:"choiceIdx:3,valueExt,"`
}

func (*MobilityChangeAcknowledgeIEsValue_IdNgRannode1CellId) isMobilityChangeAcknowledgeIEsValue_MobilityChangeAcknowledgeIes() {
}

func (*MobilityChangeAcknowledgeIEsValue_IdNgRannode2CellId) isMobilityChangeAcknowledgeIEsValue_MobilityChangeAcknowledgeIes() {
}

func (*MobilityChangeAcknowledgeIEsValue_IdCriticalityDiagnostics) isMobilityChangeAcknowledgeIEsValue_MobilityChangeAcknowledgeIes() {
}

// concrete instance(s) of class XNAP-PROTOCOL-IES from xnap_v1.asn1:2974
// @inject_tag: aper:"valueExt"
// {MobilityChangeAcknowledge-IEs}
type MobilityChangeAcknowledgeIEs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"unique,"
	Id *xnap_commondatatypes.ProtocolIeID `protobuf:"bytes,1,opt,name=id,json=&id,proto3" json:"id,omitempty" aper:"unique,"`
	// @inject_tag: aper:"valueLB:0,valueUB:2,"
	Criticality xnap_commondatatypes.Criticality `protobuf:"varint,2,opt,name=criticality,json=&criticality,proto3,enum=xnap.v1.Criticality" json:"criticality,omitempty" aper:"valueLB:0,valueUB:2,"`
	// @inject_tag: aper:"canonicalOrder,"
	Value *MobilityChangeAcknowledgeIEsValue `protobuf:"bytes,3,opt,name=value,json=&Value,proto3" json:"value,omitempty" aper:"canonicalOrder,"`
}

func (x *MobilityChangeAcknowledgeIEs) Reset() {
	*x = MobilityChangeAcknowledgeIEs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[317]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MobilityChangeAcknowledgeIEs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MobilityChangeAcknowledgeIEs) ProtoMessage() {}

func (x *MobilityChangeAcknowledgeIEs) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[317]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MobilityChangeAcknowledgeIEs.ProtoReflect.Descriptor instead.
func (*MobilityChangeAcknowledgeIEs) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_pdu_contents_proto_rawDescGZIP(), []int{317}
}

func (x *MobilityChangeAcknowledgeIEs) GetId() *xnap_commondatatypes.ProtocolIeID {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *MobilityChangeAcknowledgeIEs) GetCriticality() xnap_commondatatypes.Criticality {
	if x != nil {
		return x.Criticality
	}
	return xnap_commondatatypes.Criticality(0)
}

func (x *MobilityChangeAcknowledgeIEs) GetValue() *MobilityChangeAcknowledgeIEsValue {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:2970
// @inject_tag: aper:"valueExt"
// {MobilityChangeAcknowledge}
type MobilityChangeAcknowledge struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProtocolIes []*MobilityChangeAcknowledgeIEs `protobuf:"bytes,1,rep,name=protocol_ies,json=protocolIEs,proto3" json:"protocol_ies,omitempty"`
}

func (x *MobilityChangeAcknowledge) Reset() {
	*x = MobilityChangeAcknowledge{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[318]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MobilityChangeAcknowledge) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MobilityChangeAcknowledge) ProtoMessage() {}

func (x *MobilityChangeAcknowledge) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[318]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MobilityChangeAcknowledge.ProtoReflect.Descriptor instead.
func (*MobilityChangeAcknowledge) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_pdu_contents_proto_rawDescGZIP(), []int{318}
}

func (x *MobilityChangeAcknowledge) GetProtocolIes() []*MobilityChangeAcknowledgeIEs {
	if x != nil {
		return x.ProtocolIes
	}
	return nil
}

// value set from xnap_v1.asn1:2993
// {MobilityChangeFailure-IEs&Value}
type MobilityChangeFailureIEsValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// value set translated as choice from xnap_v1.asn1:2993
	//
	// Types that are assignable to MobilityChangeFailureIes:
	//	*MobilityChangeFailureIEsValue_IdNgRannode1CellId
	//	*MobilityChangeFailureIEsValue_IdNgRannode2CellId
	//	*MobilityChangeFailureIEsValue_IdCause
	//	*MobilityChangeFailureIEsValue_IdMobilityParametersModificationRange
	//	*MobilityChangeFailureIEsValue_IdCriticalityDiagnostics
	MobilityChangeFailureIes isMobilityChangeFailureIEsValue_MobilityChangeFailureIes `protobuf_oneof:"mobility_change_failure_ies"`
}

func (x *MobilityChangeFailureIEsValue) Reset() {
	*x = MobilityChangeFailureIEsValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[319]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MobilityChangeFailureIEsValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MobilityChangeFailureIEsValue) ProtoMessage() {}

func (x *MobilityChangeFailureIEsValue) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[319]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MobilityChangeFailureIEsValue.ProtoReflect.Descriptor instead.
func (*MobilityChangeFailureIEsValue) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_pdu_contents_proto_rawDescGZIP(), []int{319}
}

func (m *MobilityChangeFailureIEsValue) GetMobilityChangeFailureIes() isMobilityChangeFailureIEsValue_MobilityChangeFailureIes {
	if m != nil {
		return m.MobilityChangeFailureIes
	}
	return nil
}

func (x *MobilityChangeFailureIEsValue) GetIdNgRannode1CellId() *xnap_ies.GlobalNgRAncellID {
	if x, ok := x.GetMobilityChangeFailureIes().(*MobilityChangeFailureIEsValue_IdNgRannode1CellId); ok {
		return x.IdNgRannode1CellId
	}
	return nil
}

func (x *MobilityChangeFailureIEsValue) GetIdNgRannode2CellId() *xnap_ies.GlobalNgRAncellID {
	if x, ok := x.GetMobilityChangeFailureIes().(*MobilityChangeFailureIEsValue_IdNgRannode2CellId); ok {
		return x.IdNgRannode2CellId
	}
	return nil
}

func (x *MobilityChangeFailureIEsValue) GetIdCause() *xnap_ies.Cause {
	if x, ok := x.GetMobilityChangeFailureIes().(*MobilityChangeFailureIEsValue_IdCause); ok {
		return x.IdCause
	}
	return nil
}

func (x *MobilityChangeFailureIEsValue) GetIdMobilityParametersModificationRange() *xnap_ies.MobilityParametersModificationRange {
	if x, ok := x.GetMobilityChangeFailureIes().(*MobilityChangeFailureIEsValue_IdMobilityParametersModificationRange); ok {
		return x.IdMobilityParametersModificationRange
	}
	return nil
}

func (x *MobilityChangeFailureIEsValue) GetIdCriticalityDiagnostics() *xnap_ies.CriticalityDiagnostics {
	if x, ok := x.GetMobilityChangeFailureIes().(*MobilityChangeFailureIEsValue_IdCriticalityDiagnostics); ok {
		return x.IdCriticalityDiagnostics
	}
	return nil
}

type isMobilityChangeFailureIEsValue_MobilityChangeFailureIes interface {
	isMobilityChangeFailureIEsValue_MobilityChangeFailureIes()
}

type MobilityChangeFailureIEsValue_IdNgRannode1CellId struct {
	// @inject_tag: aper:"choiceIdx:1,valueExt,"
	IdNgRannode1CellId *xnap_ies.GlobalNgRAncellID `protobuf:"bytes,1,opt,name=id_ng_rannode1_cell_id,json=id-NG-RANnode1CellID,proto3,oneof" aper:"choiceIdx:1,valueExt,"`
}

type MobilityChangeFailureIEsValue_IdNgRannode2CellId struct {
	// @inject_tag: aper:"choiceIdx:2,valueExt,"
	IdNgRannode2CellId *xnap_ies.GlobalNgRAncellID `protobuf:"bytes,2,opt,name=id_ng_rannode2_cell_id,json=id-NG-RANnode2CellID,proto3,oneof" aper:"choiceIdx:2,valueExt,"`
}

type MobilityChangeFailureIEsValue_IdCause struct {
	// @inject_tag: aper:"choiceIdx:3,"
	IdCause *xnap_ies.Cause `protobuf:"bytes,3,opt,name=id_cause,json=id-Cause,proto3,oneof" aper:"choiceIdx:3,"`
}

type MobilityChangeFailureIEsValue_IdMobilityParametersModificationRange struct {
	// @inject_tag: aper:"choiceIdx:4,valueExt,"
	IdMobilityParametersModificationRange *xnap_ies.MobilityParametersModificationRange `protobuf:"bytes,4,opt,name=id_mobility_parameters_modification_range,json=id-MobilityParametersModificationRange,proto3,oneof" aper:"choiceIdx:4,valueExt,"`
}

type MobilityChangeFailureIEsValue_IdCriticalityDiagnostics struct {
	// @inject_tag: aper:"choiceIdx:5,valueExt,"
	IdCriticalityDiagnostics *xnap_ies.CriticalityDiagnostics `protobuf:"bytes,5,opt,name=id_criticality_diagnostics,json=id-CriticalityDiagnostics,proto3,oneof" aper:"choiceIdx:5,valueExt,"`
}

func (*MobilityChangeFailureIEsValue_IdNgRannode1CellId) isMobilityChangeFailureIEsValue_MobilityChangeFailureIes() {
}

func (*MobilityChangeFailureIEsValue_IdNgRannode2CellId) isMobilityChangeFailureIEsValue_MobilityChangeFailureIes() {
}

func (*MobilityChangeFailureIEsValue_IdCause) isMobilityChangeFailureIEsValue_MobilityChangeFailureIes() {
}

func (*MobilityChangeFailureIEsValue_IdMobilityParametersModificationRange) isMobilityChangeFailureIEsValue_MobilityChangeFailureIes() {
}

func (*MobilityChangeFailureIEsValue_IdCriticalityDiagnostics) isMobilityChangeFailureIEsValue_MobilityChangeFailureIes() {
}

// concrete instance(s) of class XNAP-PROTOCOL-IES from xnap_v1.asn1:2993
// @inject_tag: aper:"valueExt"
// {MobilityChangeFailure-IEs}
type MobilityChangeFailureIEs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"unique,"
	Id *xnap_commondatatypes.ProtocolIeID `protobuf:"bytes,1,opt,name=id,json=&id,proto3" json:"id,omitempty" aper:"unique,"`
	// @inject_tag: aper:"valueLB:0,valueUB:2,"
	Criticality xnap_commondatatypes.Criticality `protobuf:"varint,2,opt,name=criticality,json=&criticality,proto3,enum=xnap.v1.Criticality" json:"criticality,omitempty" aper:"valueLB:0,valueUB:2,"`
	// @inject_tag: aper:"canonicalOrder,"
	Value *MobilityChangeFailureIEsValue `protobuf:"bytes,3,opt,name=value,json=&Value,proto3" json:"value,omitempty" aper:"canonicalOrder,"`
}

func (x *MobilityChangeFailureIEs) Reset() {
	*x = MobilityChangeFailureIEs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[320]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MobilityChangeFailureIEs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MobilityChangeFailureIEs) ProtoMessage() {}

func (x *MobilityChangeFailureIEs) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[320]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MobilityChangeFailureIEs.ProtoReflect.Descriptor instead.
func (*MobilityChangeFailureIEs) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_pdu_contents_proto_rawDescGZIP(), []int{320}
}

func (x *MobilityChangeFailureIEs) GetId() *xnap_commondatatypes.ProtocolIeID {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *MobilityChangeFailureIEs) GetCriticality() xnap_commondatatypes.Criticality {
	if x != nil {
		return x.Criticality
	}
	return xnap_commondatatypes.Criticality(0)
}

func (x *MobilityChangeFailureIEs) GetValue() *MobilityChangeFailureIEsValue {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:2989
// @inject_tag: aper:"valueExt"
// {MobilityChangeFailure}
type MobilityChangeFailure struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProtocolIes []*MobilityChangeFailureIEs `protobuf:"bytes,1,rep,name=protocol_ies,json=protocolIEs,proto3" json:"protocol_ies,omitempty"`
}

func (x *MobilityChangeFailure) Reset() {
	*x = MobilityChangeFailure{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[321]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MobilityChangeFailure) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MobilityChangeFailure) ProtoMessage() {}

func (x *MobilityChangeFailure) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[321]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MobilityChangeFailure.ProtoReflect.Descriptor instead.
func (*MobilityChangeFailure) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_pdu_contents_proto_rawDescGZIP(), []int{321}
}

func (x *MobilityChangeFailure) GetProtocolIes() []*MobilityChangeFailureIEs {
	if x != nil {
		return x.ProtocolIes
	}
	return nil
}

// value set from xnap_v1.asn1:3013
// {AccessAndMobilityIndication-IEs}
type AccessAndMobilityIndicationIEs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *emptypb.Empty `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *AccessAndMobilityIndicationIEs) Reset() {
	*x = AccessAndMobilityIndicationIEs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[322]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessAndMobilityIndicationIEs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessAndMobilityIndicationIEs) ProtoMessage() {}

func (x *AccessAndMobilityIndicationIEs) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[322]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessAndMobilityIndicationIEs.ProtoReflect.Descriptor instead.
func (*AccessAndMobilityIndicationIEs) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_pdu_contents_proto_rawDescGZIP(), []int{322}
}

func (x *AccessAndMobilityIndicationIEs) GetValue() *emptypb.Empty {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:3010
// @inject_tag: aper:"valueExt"
// {AccessAndMobilityIndication}
type AccessAndMobilityIndication struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProtocolIes []*AccessAndMobilityIndicationIEs `protobuf:"bytes,1,rep,name=protocol_ies,json=protocolIEs,proto3" json:"protocol_ies,omitempty"`
}

func (x *AccessAndMobilityIndication) Reset() {
	*x = AccessAndMobilityIndication{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[323]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessAndMobilityIndication) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessAndMobilityIndication) ProtoMessage() {}

func (x *AccessAndMobilityIndication) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[323]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessAndMobilityIndication.ProtoReflect.Descriptor instead.
func (*AccessAndMobilityIndication) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_pdu_contents_proto_rawDescGZIP(), []int{323}
}

func (x *AccessAndMobilityIndication) GetProtocolIes() []*AccessAndMobilityIndicationIEs {
	if x != nil {
		return x.ProtocolIes
	}
	return nil
}

var File_api_xnap_v1_xnap_pdu_contents_proto protoreflect.FileDescriptor

var file_api_xnap_v1_xnap_pdu_contents_proto_rawDesc = []byte{
	0x0a, 0x23, 0x61, 0x70, 0x69, 0x2f, 0x78, 0x6e, 0x61, 0x70, 0x2f, 0x76, 0x31, 0x2f, 0x78, 0x6e,
	0x61, 0x70, 0x5f, 0x70, 0x64, 0x75, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x07, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x1a, 0x16,
	0x78, 0x6e, 0x61, 0x70, 0x2f, 0x76, 0x31, 0x2f, 0x78, 0x6e, 0x61, 0x70, 0x5f, 0x69, 0x65, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x22, 0x78, 0x6e, 0x61, 0x70, 0x2f, 0x76, 0x31, 0x2f,
	0x78, 0x6e, 0x61, 0x70, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x64, 0x61, 0x74, 0x61, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x78, 0x6e, 0x61, 0x70,
	0x2f, 0x76, 0x31, 0x2f, 0x78, 0x6e, 0x61, 0x70, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x78, 0x6e, 0x61, 0x70, 0x2f,
	0x76, 0x31, 0x2f, 0x78, 0x6e, 0x61, 0x70, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1a, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x65, 0x2f, 0x76, 0x31, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x12, 0x61, 0x73, 0x6e, 0x31, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x73, 0x6e,
	0x31, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0x98, 0x0b, 0x0a, 0x17, 0x48, 0x61, 0x6e, 0x64, 0x6f, 0x76, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x45, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x61, 0x0a, 0x1e, 0x69, 0x64, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x6e, 0x67,
	0x5f, 0x72, 0x61, 0x6e, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x75, 0x65, 0x78, 0x6e, 0x5f, 0x61, 0x70,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e,
	0x76, 0x31, 0x2e, 0x4e, 0x67, 0x52, 0x41, 0x6e, 0x6e, 0x6f, 0x64, 0x65, 0x55, 0x65, 0x78, 0x6e,
	0x41, 0x70, 0x69, 0x64, 0x48, 0x00, 0x52, 0x1b, 0x69, 0x64, 0x2d, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x4e, 0x47, 0x2d, 0x52, 0x41, 0x4e, 0x6e, 0x6f, 0x64, 0x65, 0x55, 0x45, 0x58, 0x6e, 0x41,
	0x50, 0x49, 0x44, 0x12, 0x2c, 0x0a, 0x08, 0x69, 0x64, 0x5f, 0x63, 0x61, 0x75, 0x73, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x61, 0x75, 0x73, 0x65, 0x48, 0x00, 0x52, 0x08, 0x69, 0x64, 0x2d, 0x43, 0x61, 0x75, 0x73,
	0x65, 0x12, 0x4d, 0x0a, 0x18, 0x69, 0x64, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x63,
	0x65, 0x6c, 0x6c, 0x5f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x43, 0x47, 0x69, 0x48, 0x00, 0x52, 0x15, 0x69, 0x64, 0x2d, 0x74, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x43, 0x65, 0x6c, 0x6c, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x49, 0x44,
	0x12, 0x2c, 0x0a, 0x08, 0x69, 0x64, 0x5f, 0x67, 0x75, 0x61, 0x6d, 0x69, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x75, 0x61,
	0x6d, 0x69, 0x48, 0x00, 0x52, 0x08, 0x69, 0x64, 0x2d, 0x47, 0x55, 0x41, 0x4d, 0x49, 0x12, 0x61,
	0x0a, 0x1b, 0x69, 0x64, 0x5f, 0x75, 0x65, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x69,
	0x6e, 0x66, 0x6f, 0x5f, 0x68, 0x6f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x65,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x6f, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x19, 0x69, 0x64, 0x2d, 0x55, 0x45, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x78, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x4f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x4b, 0x0a, 0x13, 0x69, 0x64, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x65, 0x5f, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x65, 0x41, 0x63,
	0x74, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x12, 0x69, 0x64, 0x2d, 0x54,
	0x72, 0x61, 0x63, 0x65, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x42,
	0x0a, 0x10, 0x69, 0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x65, 0x64, 0x5f, 0x69, 0x6d, 0x65, 0x69,
	0x73, 0x76, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e,
	0x76, 0x31, 0x2e, 0x4d, 0x61, 0x73, 0x6b, 0x65, 0x64, 0x49, 0x6d, 0x65, 0x69, 0x73, 0x76, 0x48,
	0x00, 0x52, 0x0f, 0x69, 0x64, 0x2d, 0x4d, 0x61, 0x73, 0x6b, 0x65, 0x64, 0x49, 0x4d, 0x45, 0x49,
	0x53, 0x56, 0x12, 0x5a, 0x0a, 0x18, 0x69, 0x64, 0x5f, 0x75, 0x65, 0x68, 0x69, 0x73, 0x74, 0x6f,
	0x72, 0x79, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x55,
	0x65, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x17, 0x69, 0x64, 0x2d, 0x55, 0x45, 0x48, 0x69, 0x73, 0x74,
	0x6f, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x6d,
	0x0a, 0x20, 0x69, 0x64, 0x5f, 0x75, 0x65, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x72,
	0x65, 0x66, 0x5f, 0x61, 0x74, 0x5f, 0x73, 0x6e, 0x5f, 0x68, 0x6f, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e,
	0x76, 0x31, 0x2e, 0x55, 0x65, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x65, 0x66, 0x41,
	0x74, 0x53, 0x6e, 0x48, 0x4f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x1d,
	0x69, 0x64, 0x2d, 0x55, 0x45, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x65, 0x66, 0x41,
	0x74, 0x53, 0x4e, 0x2d, 0x48, 0x4f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x52, 0x0a,
	0x15, 0x69, 0x64, 0x5f, 0x63, 0x68, 0x6f, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x71, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x78,
	0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x6f, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x48, 0x00, 0x52, 0x15, 0x69, 0x64, 0x2d, 0x43,
	0x48, 0x4f, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x52, 0x65,
	0x71, 0x12, 0x64, 0x0a, 0x1c, 0x69, 0x64, 0x5f, 0x6e, 0x72, 0x76, 0x32, 0x5f, 0x78, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65,
	0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76,
	0x31, 0x2e, 0x4e, 0x72, 0x76, 0x32, 0x58, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x41,
	0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x48, 0x00, 0x52, 0x1a, 0x69, 0x64, 0x2d,
	0x4e, 0x52, 0x56, 0x32, 0x58, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x41, 0x75, 0x74,
	0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x12, 0x67, 0x0a, 0x1d, 0x69, 0x64, 0x5f, 0x6c, 0x74,
	0x65, 0x76, 0x32, 0x5f, 0x78, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x5f, 0x61, 0x75,
	0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x74, 0x65, 0x76, 0x32, 0x58, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65,
	0x64, 0x48, 0x00, 0x52, 0x1b, 0x69, 0x64, 0x2d, 0x4c, 0x54, 0x45, 0x56, 0x32, 0x58, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64,
	0x12, 0x4f, 0x0a, 0x15, 0x69, 0x64, 0x5f, 0x70, 0x63, 0x35, 0x5f, 0x71, 0x6f, 0x5f, 0x73, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x63, 0x35, 0x51, 0x6f, 0x53,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x48, 0x00, 0x52, 0x13, 0x69, 0x64,
	0x2d, 0x50, 0x43, 0x35, 0x51, 0x6f, 0x53, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72,
	0x73, 0x12, 0x57, 0x0a, 0x17, 0x69, 0x64, 0x5f, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x6f, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x48, 0x00, 0x52, 0x16, 0x69, 0x64, 0x2d, 0x4d, 0x6f, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x49,
	0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x78, 0x0a, 0x24, 0x69, 0x64,
	0x5f, 0x75, 0x65, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x74, 0x68, 0x65, 0x5f,
	0x75, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e,
	0x76, 0x31, 0x2e, 0x55, 0x65, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x72, 0x6f, 0x6d, 0x54, 0x68, 0x65, 0x55, 0x65,
	0x48, 0x00, 0x52, 0x20, 0x69, 0x64, 0x2d, 0x55, 0x45, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79,
	0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x72, 0x6f, 0x6d, 0x54,
	0x68, 0x65, 0x55, 0x45, 0x12, 0x51, 0x0a, 0x15, 0x69, 0x64, 0x5f, 0x69, 0x61, 0x62, 0x6e, 0x6f,
	0x64, 0x65, 0x5f, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x61,
	0x62, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48,
	0x00, 0x52, 0x14, 0x69, 0x64, 0x2d, 0x49, 0x41, 0x42, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x6e, 0x64,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x16, 0x0a, 0x14, 0x68, 0x61, 0x6e, 0x64, 0x6f,
	0x76, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x65, 0x73, 0x22,
	0xae, 0x01, 0x0a, 0x12, 0x48, 0x61, 0x6e, 0x64, 0x6f, 0x76, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x49, 0x45, 0x73, 0x12, 0x26, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x49, 0x65, 0x49, 0x44, 0x52, 0x03, 0x26, 0x69, 0x64, 0x12, 0x37,
	0x0a, 0x0b, 0x63, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72,
	0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x0c, 0x26, 0x63, 0x72, 0x69, 0x74,
	0x69, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x37, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31,
	0x2e, 0x48, 0x61, 0x6e, 0x64, 0x6f, 0x76, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x49, 0x45, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x26, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x22, 0x51, 0x0a, 0x0f, 0x48, 0x61, 0x6e, 0x64, 0x6f, 0x76, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x3e, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f,
	0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x78, 0x6e, 0x61, 0x70,
	0x2e, 0x76, 0x31, 0x2e, 0x48, 0x61, 0x6e, 0x64, 0x6f, 0x76, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x49, 0x45, 0x73, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x49, 0x45, 0x73, 0x22, 0x98, 0x05, 0x0a, 0x25, 0x55, 0x65, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78,
	0x74, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x6f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x45, 0x78,
	0x74, 0x49, 0x65, 0x73, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x93, 0x01,
	0x0a, 0x2d, 0x69, 0x64, 0x5f, 0x66, 0x69, 0x76, 0x65, 0x5f, 0x67, 0x63, 0x6d, 0x6f, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x5f, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e,
	0x46, 0x69, 0x76, 0x65, 0x47, 0x63, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x65,
	0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e,
	0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x48, 0x00, 0x52, 0x29, 0x69, 0x64, 0x2d, 0x46, 0x69, 0x76,
	0x65, 0x47, 0x43, 0x4d, 0x6f, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x74, 0x72,
	0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69,
	0x6e, 0x65, 0x72, 0x12, 0x8a, 0x01, 0x0a, 0x2a, 0x69, 0x64, 0x5f, 0x6e, 0x72, 0x75, 0x65, 0x73,
	0x69, 0x64, 0x65, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74,
	0x65, 0x5f, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x5f, 0x62, 0x69, 0x74, 0x5f, 0x72, 0x61,
	0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e,
	0x76, 0x31, 0x2e, 0x4e, 0x72, 0x75, 0x65, 0x73, 0x69, 0x64, 0x65, 0x6c, 0x69, 0x6e, 0x6b, 0x41,
	0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x42,
	0x69, 0x74, 0x52, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x26, 0x69, 0x64, 0x2d, 0x4e, 0x52, 0x55,
	0x45, 0x53, 0x69, 0x64, 0x65, 0x6c, 0x69, 0x6e, 0x6b, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61,
	0x74, 0x65, 0x4d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x42, 0x69, 0x74, 0x52, 0x61, 0x74, 0x65,
	0x12, 0x8d, 0x01, 0x0a, 0x2b, 0x69, 0x64, 0x5f, 0x6c, 0x74, 0x65, 0x75, 0x65, 0x73, 0x69, 0x64,
	0x65, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x5f,
	0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x5f, 0x62, 0x69, 0x74, 0x5f, 0x72, 0x61, 0x74, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31,
	0x2e, 0x4c, 0x74, 0x65, 0x75, 0x65, 0x73, 0x69, 0x64, 0x65, 0x6c, 0x69, 0x6e, 0x6b, 0x41, 0x67,
	0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x42, 0x69,
	0x74, 0x52, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x27, 0x69, 0x64, 0x2d, 0x4c, 0x54, 0x45, 0x55,
	0x45, 0x53, 0x69, 0x64, 0x65, 0x6c, 0x69, 0x6e, 0x6b, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61,
	0x74, 0x65, 0x4d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x42, 0x69, 0x74, 0x52, 0x61, 0x74, 0x65,
	0x12, 0x3e, 0x0a, 0x0e, 0x69, 0x64, 0x5f, 0x6d, 0x64, 0x74, 0x70, 0x6c, 0x6d, 0x6e, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e,
	0x76, 0x31, 0x2e, 0x4d, 0x64, 0x74, 0x70, 0x6c, 0x6d, 0x6e, 0x6c, 0x69, 0x73, 0x74, 0x48, 0x00,
	0x52, 0x0e, 0x69, 0x64, 0x2d, 0x4d, 0x44, 0x54, 0x50, 0x4c, 0x4d, 0x4e, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x58, 0x0a, 0x18, 0x69, 0x64, 0x5f, 0x75, 0x65, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x5f, 0x63,
	0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x65, 0x72,
	0x61, 0x64, 0x69, 0x6f, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x49, 0x64,
	0x48, 0x00, 0x52, 0x16, 0x69, 0x64, 0x2d, 0x55, 0x45, 0x52, 0x61, 0x64, 0x69, 0x6f, 0x43, 0x61,
	0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x49, 0x44, 0x42, 0x22, 0x0a, 0x20, 0x75, 0x65,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x68, 0x6f, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x65, 0x78, 0x74, 0x5f, 0x69, 0x65, 0x73, 0x22, 0xce,
	0x01, 0x0a, 0x1c, 0x55, 0x65, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x49, 0x6e, 0x66, 0x6f,
	0x48, 0x6f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x12,
	0x26, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x78, 0x6e,
	0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x49, 0x65,
	0x49, 0x44, 0x52, 0x03, 0x26, 0x69, 0x64, 0x12, 0x37, 0x0a, 0x0b, 0x63, 0x72, 0x69, 0x74, 0x69,
	0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x78,
	0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x69,
	0x74, 0x79, 0x52, 0x0c, 0x26, 0x63, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79,
	0x12, 0x4d, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x65,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x6f, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x26, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22,
	0x82, 0x08, 0x0a, 0x16, 0x55, 0x65, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x49, 0x6e, 0x66,
	0x6f, 0x48, 0x6f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x42, 0x0a, 0x11, 0x6e, 0x67,
	0x5f, 0x63, 0x5f, 0x75, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e,
	0x41, 0x6d, 0x66, 0x55, 0x45, 0x4e, 0x47, 0x61, 0x70, 0x49, 0x44, 0x52, 0x11, 0x6e, 0x67, 0x2d,
	0x63, 0x2d, 0x55, 0x45, 0x2d, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x54,
	0x0a, 0x12, 0x63, 0x70, 0x5f, 0x74, 0x6e, 0x6c, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x78, 0x6e, 0x61,
	0x70, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x70, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74,
	0x4c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x12, 0x63, 0x70, 0x2d, 0x54, 0x4e, 0x4c, 0x2d, 0x69, 0x6e, 0x66, 0x6f, 0x2d, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x12, 0x59, 0x0a, 0x18, 0x75, 0x65, 0x5f, 0x73, 0x65, 0x63, 0x75, 0x72,
	0x69, 0x74, 0x79, 0x5f, 0x63, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31,
	0x2e, 0x55, 0x65, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x43, 0x61, 0x70, 0x61, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x52, 0x16, 0x75, 0x65, 0x53, 0x65, 0x63, 0x75, 0x72,
	0x69, 0x74, 0x79, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12,
	0x51, 0x0a, 0x14, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x6e, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x73, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69,
	0x74, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x13, 0x73,
	0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x70, 0x0a, 0x29, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x5f, 0x74, 0x6f, 0x5f, 0x72,
	0x61, 0x74, 0x5f, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x73, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e,
	0x52, 0x66, 0x73, 0x70, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x48, 0x00, 0x52, 0x24, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x54, 0x6f, 0x52, 0x61, 0x74, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79,
	0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74,
	0x79, 0x88, 0x01, 0x01, 0x12, 0x3c, 0x0a, 0x07, 0x75, 0x65, 0x5f, 0x61, 0x6d, 0x62, 0x72, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e,
	0x55, 0x65, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x78, 0x69, 0x6d,
	0x75, 0x6d, 0x42, 0x69, 0x74, 0x52, 0x61, 0x74, 0x65, 0x52, 0x07, 0x75, 0x65, 0x2d, 0x41, 0x4d,
	0x42, 0x52, 0x12, 0x7c, 0x0a, 0x26, 0x70, 0x64, 0x75, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x5f, 0x74, 0x6f, 0x5f, 0x62,
	0x65, 0x5f, 0x73, 0x65, 0x74, 0x75, 0x70, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x29, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x64, 0x75,
	0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73,
	0x54, 0x6f, 0x42, 0x65, 0x53, 0x65, 0x74, 0x75, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x21, 0x70,
	0x64, 0x75, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x73, 0x54, 0x6f, 0x42, 0x65, 0x53, 0x65, 0x74, 0x75, 0x70, 0x2d, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x20, 0x0a, 0x0b, 0x72, 0x72, 0x63, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x72, 0x72, 0x63, 0x2d, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x12, 0x70, 0x0a, 0x1e, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x78, 0x6e, 0x61,
	0x70, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x48, 0x01, 0x52, 0x1c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x88, 0x01, 0x01, 0x12, 0x37, 0x0a, 0x03, 0x6d, 0x72, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x6f, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c,
	0x69, 0x73, 0x74, 0x48, 0x02, 0x52, 0x03, 0x6d, 0x72, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x4c, 0x0a,
	0x0e, 0x69, 0x5f, 0x65, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e,
	0x55, 0x65, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x6f, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x52, 0x0d, 0x69, 0x45,
	0x2d, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x2c, 0x0a, 0x2a, 0x5f,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x5f, 0x74, 0x6f, 0x5f, 0x72, 0x61, 0x74, 0x5f, 0x66, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x42, 0x21, 0x0a, 0x1f, 0x5f, 0x6c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67,
	0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x06, 0x0a, 0x04,
	0x5f, 0x6d, 0x72, 0x6c, 0x22, 0x4f, 0x0a, 0x1f, 0x55, 0x65, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78,
	0x74, 0x52, 0x65, 0x66, 0x41, 0x74, 0x53, 0x6e, 0x48, 0x4f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x90, 0x02, 0x0a, 0x19, 0x55, 0x65, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x78, 0x74, 0x52, 0x65, 0x66, 0x41, 0x74, 0x53, 0x6e, 0x48, 0x4f, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x4d, 0x0a, 0x14, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x5f, 0x6e, 0x67,
	0x5f, 0x72, 0x61, 0x6e, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6c, 0x6f, 0x62,
	0x61, 0x6c, 0x4e, 0x67, 0x52, 0x41, 0x6e, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x44, 0x52, 0x13, 0x67,
	0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x4e, 0x47, 0x2d, 0x52, 0x41, 0x4e, 0x4e, 0x6f, 0x64, 0x65, 0x2d,
	0x49, 0x44, 0x12, 0x53, 0x0a, 0x18, 0x73, 0x5f, 0x6e, 0x5f, 0x6e, 0x67, 0x5f, 0x72, 0x61, 0x6e,
	0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x75, 0x65, 0x78, 0x6e, 0x5f, 0x61, 0x70, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x4e,
	0x67, 0x52, 0x41, 0x6e, 0x6e, 0x6f, 0x64, 0x65, 0x55, 0x65, 0x78, 0x6e, 0x41, 0x70, 0x69, 0x64,
	0x52, 0x15, 0x73, 0x4e, 0x2d, 0x4e, 0x47, 0x2d, 0x52, 0x41, 0x4e, 0x6e, 0x6f, 0x64, 0x65, 0x55,
	0x45, 0x58, 0x6e, 0x41, 0x50, 0x49, 0x44, 0x12, 0x4f, 0x0a, 0x0e, 0x69, 0x5f, 0x65, 0x5f, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x28, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x65, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x78, 0x74, 0x52, 0x65, 0x66, 0x41, 0x74, 0x53, 0x6e, 0x48, 0x4f, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x52, 0x0d, 0x69, 0x45, 0x2d, 0x45, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xc6, 0x08, 0x0a, 0x22, 0x48, 0x61, 0x6e,
	0x64, 0x6f, 0x76, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x41, 0x63, 0x6b, 0x6e,
	0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x49, 0x45, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x61, 0x0a, 0x1e, 0x69, 0x64, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x6e, 0x67, 0x5f,
	0x72, 0x61, 0x6e, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x75, 0x65, 0x78, 0x6e, 0x5f, 0x61, 0x70, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76,
	0x31, 0x2e, 0x4e, 0x67, 0x52, 0x41, 0x6e, 0x6e, 0x6f, 0x64, 0x65, 0x55, 0x65, 0x78, 0x6e, 0x41,
	0x70, 0x69, 0x64, 0x48, 0x00, 0x52, 0x1b, 0x69, 0x64, 0x2d, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x4e, 0x47, 0x2d, 0x52, 0x41, 0x4e, 0x6e, 0x6f, 0x64, 0x65, 0x55, 0x45, 0x58, 0x6e, 0x41, 0x50,
	0x49, 0x44, 0x12, 0x61, 0x0a, 0x1e, 0x69, 0x64, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f,
	0x6e, 0x67, 0x5f, 0x72, 0x61, 0x6e, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x75, 0x65, 0x78, 0x6e, 0x5f,
	0x61, 0x70, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x78, 0x6e, 0x61,
	0x70, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x67, 0x52, 0x41, 0x6e, 0x6e, 0x6f, 0x64, 0x65, 0x55, 0x65,
	0x78, 0x6e, 0x41, 0x70, 0x69, 0x64, 0x48, 0x00, 0x52, 0x1b, 0x69, 0x64, 0x2d, 0x74, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x4e, 0x47, 0x2d, 0x52, 0x41, 0x4e, 0x6e, 0x6f, 0x64, 0x65, 0x55, 0x45, 0x58,
	0x6e, 0x41, 0x50, 0x49, 0x44, 0x12, 0x7e, 0x0a, 0x25, 0x69, 0x64, 0x5f, 0x70, 0x64, 0x75, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73,
	0x5f, 0x61, 0x64, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x50,
	0x64, 0x75, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x73, 0x41, 0x64, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x00,
	0x52, 0x23, 0x69, 0x64, 0x2d, 0x50, 0x44, 0x55, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x41, 0x64, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64,
	0x2d, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x88, 0x01, 0x0a, 0x29, 0x69, 0x64, 0x5f, 0x70, 0x64, 0x75,
	0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x73, 0x5f, 0x6e, 0x6f, 0x74, 0x5f, 0x61, 0x64, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x78, 0x6e, 0x61, 0x70,
	0x2e, 0x76, 0x31, 0x2e, 0x50, 0x64, 0x75, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x4e, 0x6f, 0x74, 0x41, 0x64, 0x6d, 0x69, 0x74, 0x74,
	0x65, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x00, 0x52, 0x26, 0x69, 0x64, 0x2d, 0x50, 0x44, 0x55,
	0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73,
	0x4e, 0x6f, 0x74, 0x41, 0x64, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x2d, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x62, 0x0a, 0x2d, 0x69, 0x64, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x32, 0x5f, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x6e, 0x67, 0x5f, 0x72, 0x61, 0x6e, 0x6e, 0x6f, 0x64, 0x65,
	0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65,
	0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x29, 0x69, 0x64, 0x2d, 0x54, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x32, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e, 0x47, 0x2d, 0x52, 0x41,
	0x4e, 0x6e, 0x6f, 0x64, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x43, 0x6f, 0x6e, 0x74, 0x61,
	0x69, 0x6e, 0x65, 0x72, 0x12, 0x61, 0x0a, 0x1b, 0x69, 0x64, 0x5f, 0x75, 0x65, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x78, 0x74, 0x5f, 0x6b, 0x65, 0x70, 0x74, 0x5f, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61,
	0x74, 0x6f, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x78, 0x6e, 0x61, 0x70,
	0x2e, 0x76, 0x31, 0x2e, 0x55, 0x65, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x4b, 0x65, 0x70,
	0x74, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x19, 0x69, 0x64,
	0x2d, 0x55, 0x45, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x4b, 0x65, 0x70, 0x74, 0x49, 0x6e,
	0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x60, 0x0a, 0x1a, 0x69, 0x64, 0x5f, 0x63, 0x72,
	0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f,
	0x73, 0x74, 0x69, 0x63, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x78, 0x6e,
	0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x69, 0x74,
	0x79, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x73, 0x48, 0x00, 0x52, 0x19,
	0x69, 0x64, 0x2d, 0x43, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x44, 0x69,
	0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x50, 0x0a, 0x19, 0x69, 0x64, 0x5f,
	0x64, 0x72, 0x62, 0x73, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64,
	0x5f, 0x74, 0x6f, 0x5f, 0x6d, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x78,
	0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x72, 0x62, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x00,
	0x52, 0x19, 0x69, 0x64, 0x2d, 0x44, 0x52, 0x42, 0x73, 0x2d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x65, 0x72, 0x72, 0x65, 0x64, 0x2d, 0x74, 0x6f, 0x2d, 0x4d, 0x4e, 0x12, 0x5c, 0x0a, 0x19, 0x69,
	0x64, 0x5f, 0x64, 0x61, 0x70, 0x73, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x69,
	0x6e, 0x66, 0x6f, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x70, 0x73, 0x72, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x00, 0x52,
	0x18, 0x69, 0x64, 0x2d, 0x44, 0x41, 0x50, 0x53, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x2d, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x52, 0x0a, 0x15, 0x69, 0x64, 0x5f,
	0x63, 0x68, 0x6f, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61,
	0x63, 0x6b, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x68, 0x6f, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x41, 0x63, 0x6b, 0x48, 0x00, 0x52, 0x15, 0x69, 0x64, 0x2d, 0x43, 0x48, 0x4f, 0x69, 0x6e,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x41, 0x63, 0x6b, 0x42, 0x22, 0x0a,
	0x20, 0x68, 0x61, 0x6e, 0x64, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x5f, 0x61, 0x63, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x5f, 0x69, 0x65,
	0x73, 0x22, 0xc4, 0x01, 0x0a, 0x1d, 0x48, 0x61, 0x6e, 0x64, 0x6f, 0x76, 0x65, 0x72, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x41, 0x63, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65,
	0x49, 0x45, 0x73, 0x12, 0x26, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x49, 0x65, 0x49, 0x44, 0x52, 0x03, 0x26, 0x69, 0x64, 0x12, 0x37, 0x0a, 0x0b, 0x63,
	0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x14, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x69, 0x74, 0x69,
	0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x0c, 0x26, 0x63, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61,
	0x6c, 0x69, 0x74, 0x79, 0x12, 0x42, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x61,
	0x6e, 0x64, 0x6f, 0x76, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x41, 0x63, 0x6b,
	0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x49, 0x45, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x06, 0x26, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x67, 0x0a, 0x1a, 0x48, 0x61, 0x6e, 0x64,
	0x6f, 0x76, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x41, 0x63, 0x6b, 0x6e, 0x6f,
	0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x12, 0x49, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x5f, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x78,
	0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x61, 0x6e, 0x64, 0x6f, 0x76, 0x65, 0x72, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x41, 0x63, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67,
	0x65, 0x49, 0x45, 0x73, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x49, 0x45,
	0x73, 0x22, 0x9d, 0x03, 0x0a, 0x22, 0x48, 0x61, 0x6e, 0x64, 0x6f, 0x76, 0x65, 0x72, 0x50, 0x72,
	0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65,
	0x49, 0x45, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x61, 0x0a, 0x1e, 0x69, 0x64, 0x5f, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x6e, 0x67, 0x5f, 0x72, 0x61, 0x6e, 0x6e, 0x6f, 0x64, 0x65,
	0x5f, 0x75, 0x65, 0x78, 0x6e, 0x5f, 0x61, 0x70, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x67, 0x52, 0x41, 0x6e,
	0x6e, 0x6f, 0x64, 0x65, 0x55, 0x65, 0x78, 0x6e, 0x41, 0x70, 0x69, 0x64, 0x48, 0x00, 0x52, 0x1b,
	0x69, 0x64, 0x2d, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e, 0x47, 0x2d, 0x52, 0x41, 0x4e, 0x6e,
	0x6f, 0x64, 0x65, 0x55, 0x45, 0x58, 0x6e, 0x41, 0x50, 0x49, 0x44, 0x12, 0x2c, 0x0a, 0x08, 0x69,
	0x64, 0x5f, 0x63, 0x61, 0x75, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x61, 0x75, 0x73, 0x65, 0x48, 0x00, 0x52,
	0x08, 0x69, 0x64, 0x2d, 0x43, 0x61, 0x75, 0x73, 0x65, 0x12, 0x60, 0x0a, 0x1a, 0x69, 0x64, 0x5f,
	0x63, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x64, 0x69, 0x61, 0x67,
	0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c,
	0x69, 0x74, 0x79, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x73, 0x48, 0x00,
	0x52, 0x19, 0x69, 0x64, 0x2d, 0x43, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79,
	0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x60, 0x0a, 0x22, 0x69,
	0x64, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x5f, 0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x5f, 0x69,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76,
	0x31, 0x2e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x43, 0x47, 0x69, 0x48, 0x00, 0x52, 0x1e, 0x69,
	0x64, 0x2d, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x54, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x43, 0x65, 0x6c, 0x6c, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x49, 0x44, 0x42, 0x22, 0x0a,
	0x20, 0x68, 0x61, 0x6e, 0x64, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x65, 0x70, 0x61, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x5f, 0x69, 0x65,
	0x73, 0x22, 0xc4, 0x01, 0x0a, 0x1d, 0x48, 0x61, 0x6e, 0x64, 0x6f, 0x76, 0x65, 0x72, 0x50, 0x72,
	0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65,
	0x49, 0x45, 0x73, 0x12, 0x26, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x49, 0x65, 0x49, 0x44, 0x52, 0x03, 0x26, 0x69, 0x64, 0x12, 0x37, 0x0a, 0x0b, 0x63,
	0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x14, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x69, 0x74, 0x69,
	0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x0c, 0x26, 0x63, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61,
	0x6c, 0x69, 0x74, 0x79, 0x12, 0x42, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x61,
	0x6e, 0x64, 0x6f, 0x76, 0x65, 0x72, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x49, 0x45, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x06, 0x26, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x67, 0x0a, 0x1a, 0x48, 0x61, 0x6e, 0x64,
	0x6f, 0x76, 0x65, 0x72, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46,
	0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x12, 0x49, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x5f, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x78,
	0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x61, 0x6e, 0x64, 0x6f, 0x76, 0x65, 0x72, 0x50,
	0x72, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72,
	0x65, 0x49, 0x45, 0x73, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x49, 0x45,
	0x73, 0x22, 0xfc, 0x02, 0x0a, 0x18, 0x53, 0x6e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x49, 0x45, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x61,
	0x0a, 0x1e, 0x69, 0x64, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x6e, 0x67, 0x5f, 0x72,
	0x61, 0x6e, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x75, 0x65, 0x78, 0x6e, 0x5f, 0x61, 0x70, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31,
	0x2e, 0x4e, 0x67, 0x52, 0x41, 0x6e, 0x6e, 0x6f, 0x64, 0x65, 0x55, 0x65, 0x78, 0x6e, 0x41, 0x70,
	0x69, 0x64, 0x48, 0x00, 0x52, 0x1b, 0x69, 0x64, 0x2d, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e,
	0x47, 0x2d, 0x52, 0x41, 0x4e, 0x6e, 0x6f, 0x64, 0x65, 0x55, 0x45, 0x58, 0x6e, 0x41, 0x50, 0x49,
	0x44, 0x12, 0x61, 0x0a, 0x1e, 0x69, 0x64, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x6e,
	0x67, 0x5f, 0x72, 0x61, 0x6e, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x75, 0x65, 0x78, 0x6e, 0x5f, 0x61,
	0x70, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x78, 0x6e, 0x61, 0x70,
	0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x67, 0x52, 0x41, 0x6e, 0x6e, 0x6f, 0x64, 0x65, 0x55, 0x65, 0x78,
	0x6e, 0x41, 0x70, 0x69, 0x64, 0x48, 0x00, 0x52, 0x1b, 0x69, 0x64, 0x2d, 0x74, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x4e, 0x47, 0x2d, 0x52, 0x41, 0x4e, 0x6e, 0x6f, 0x64, 0x65, 0x55, 0x45, 0x58, 0x6e,
	0x41, 0x50, 0x49, 0x44, 0x12, 0x80, 0x01, 0x0a, 0x27, 0x69, 0x64, 0x5f, 0x64, 0x72, 0x62, 0x73,
	0x5f, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x74, 0x6f, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31,
	0x2e, 0x44, 0x72, 0x62, 0x73, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x54, 0x6f, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74,
	0x48, 0x00, 0x52, 0x23, 0x69, 0x64, 0x2d, 0x44, 0x52, 0x42, 0x73, 0x53, 0x75, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x54, 0x6f, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x65, 0x72, 0x2d, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x17, 0x0a, 0x15, 0x73, 0x6e, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x69, 0x65, 0x73,
	0x22, 0xb0, 0x01, 0x0a, 0x13, 0x53, 0x6e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x65, 0x72, 0x49, 0x45, 0x73, 0x12, 0x26, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x49, 0x65, 0x49, 0x44, 0x52, 0x03, 0x26, 0x69, 0x64,
	0x12, 0x37, 0x0a, 0x0b, 0x63, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x0c, 0x26, 0x63, 0x72,
	0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x38, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x6e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x65, 0x72, 0x49, 0x45, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x26, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x22, 0x53, 0x0a, 0x10, 0x53, 0x6e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x12, 0x3f, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x5f, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x49, 0x45, 0x73, 0x52, 0x0b, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x49, 0x45, 0x73, 0x22, 0xf9, 0x01, 0x0a, 0x18, 0x55, 0x65, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x49, 0x45, 0x73,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x61, 0x0a, 0x1e, 0x69, 0x64, 0x5f, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x5f, 0x6e, 0x67, 0x5f, 0x72, 0x61, 0x6e, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x75, 0x65,
	0x78, 0x6e, 0x5f, 0x61, 0x70, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x67, 0x52, 0x41, 0x6e, 0x6e, 0x6f, 0x64,
	0x65, 0x55, 0x65, 0x78, 0x6e, 0x41, 0x70, 0x69, 0x64, 0x48, 0x00, 0x52, 0x1b, 0x69, 0x64, 0x2d,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e, 0x47, 0x2d, 0x52, 0x41, 0x4e, 0x6e, 0x6f, 0x64, 0x65,
	0x55, 0x45, 0x58, 0x6e, 0x41, 0x50, 0x49, 0x44, 0x12, 0x61, 0x0a, 0x1e, 0x69, 0x64, 0x5f, 0x74,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x6e, 0x67, 0x5f, 0x72, 0x61, 0x6e, 0x6e, 0x6f, 0x64, 0x65,
	0x5f, 0x75, 0x65, 0x78, 0x6e, 0x5f, 0x61, 0x70, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x67, 0x52, 0x41, 0x6e,
	0x6e, 0x6f, 0x64, 0x65, 0x55, 0x65, 0x78, 0x6e, 0x41, 0x70, 0x69, 0x64, 0x48, 0x00, 0x52, 0x1b,
	0x69, 0x64, 0x2d, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x4e, 0x47, 0x2d, 0x52, 0x41, 0x4e, 0x6e,
	0x6f, 0x64, 0x65, 0x55, 0x45, 0x58, 0x6e, 0x41, 0x50, 0x49, 0x44, 0x42, 0x17, 0x0a, 0x15, 0x75,
	0x65, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65,
	0x5f, 0x69, 0x65, 0x73, 0x22, 0xb0, 0x01, 0x0a, 0x13, 0x55, 0x65, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x49, 0x45, 0x73, 0x12, 0x26, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e,
	0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x49, 0x65, 0x49, 0x44, 0x52,
	0x03, 0x26, 0x69, 0x64, 0x12, 0x37, 0x0a, 0x0b, 0x63, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c,
	0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x78, 0x6e, 0x61, 0x70,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x52,
	0x0c, 0x26, 0x63, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x38, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x78,
	0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x65, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74,
	0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x49, 0x45, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x06, 0x26, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x53, 0x0a, 0x10, 0x55, 0x65, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x78, 0x74, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x12, 0x3f, 0x0a, 0x0c, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x65, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x49, 0x45, 0x73, 0x52,
	0x0b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x49, 0x45, 0x73, 0x22, 0xf9, 0x02, 0x0a,
	0x16, 0x48, 0x61, 0x6e, 0x64, 0x6f, 0x76, 0x65, 0x72, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x49,
	0x45, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x61, 0x0a, 0x1e, 0x69, 0x64, 0x5f, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x5f, 0x6e, 0x67, 0x5f, 0x72, 0x61, 0x6e, 0x6e, 0x6f, 0x64, 0x65, 0x5f,
	0x75, 0x65, 0x78, 0x6e, 0x5f, 0x61, 0x70, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x67, 0x52, 0x41, 0x6e, 0x6e,
	0x6f, 0x64, 0x65, 0x55, 0x65, 0x78, 0x6e, 0x41, 0x70, 0x69, 0x64, 0x48, 0x00, 0x52, 0x1b, 0x69,
	0x64, 0x2d, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e, 0x47, 0x2d, 0x52, 0x41, 0x4e, 0x6e, 0x6f,
	0x64, 0x65, 0x55, 0x45, 0x58, 0x6e, 0x41, 0x50, 0x49, 0x44, 0x12, 0x61, 0x0a, 0x1e, 0x69, 0x64,
	0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x6e, 0x67, 0x5f, 0x72, 0x61, 0x6e, 0x6e, 0x6f,
	0x64, 0x65, 0x5f, 0x75, 0x65, 0x78, 0x6e, 0x5f, 0x61, 0x70, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x67, 0x52,
	0x41, 0x6e, 0x6e, 0x6f, 0x64, 0x65, 0x55, 0x65, 0x78, 0x6e, 0x41, 0x70, 0x69, 0x64, 0x48, 0x00,
	0x52, 0x1b, 0x69, 0x64, 0x2d, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x4e, 0x47, 0x2d, 0x52, 0x41,
	0x4e, 0x6e, 0x6f, 0x64, 0x65, 0x55, 0x45, 0x58, 0x6e, 0x41, 0x50, 0x49, 0x44, 0x12, 0x2c, 0x0a,
	0x08, 0x69, 0x64, 0x5f, 0x63, 0x61, 0x75, 0x73, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0e, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x61, 0x75, 0x73, 0x65, 0x48,
	0x00, 0x52, 0x08, 0x69, 0x64, 0x2d, 0x43, 0x61, 0x75, 0x73, 0x65, 0x12, 0x54, 0x0a, 0x19, 0x69,
	0x64, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x63, 0x65, 0x6c, 0x6c, 0x73, 0x5f, 0x74,
	0x6f, 0x5f, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x43,
	0x65, 0x6c, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x00, 0x52, 0x16, 0x69, 0x64, 0x2d, 0x74, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x43, 0x65, 0x6c, 0x6c, 0x73, 0x54, 0x6f, 0x43, 0x61, 0x6e, 0x63, 0x65,
	0x6c, 0x42, 0x15, 0x0a, 0x13, 0x68, 0x61, 0x6e, 0x64, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x63, 0x61,
	0x6e, 0x63, 0x65, 0x6c, 0x5f, 0x69, 0x65, 0x73, 0x22, 0xac, 0x01, 0x0a, 0x11, 0x48, 0x61, 0x6e,
	0x64, 0x6f, 0x76, 0x65, 0x72, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x49, 0x45, 0x73, 0x12, 0x26,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x78, 0x6e, 0x61,
	0x70, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x49, 0x65, 0x49,
	0x44, 0x52, 0x03, 0x26, 0x69, 0x64, 0x12, 0x37, 0x0a, 0x0b, 0x63, 0x72, 0x69, 0x74, 0x69, 0x63,
	0x61, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x78, 0x6e,
	0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x69, 0x74,
	0x79, 0x52, 0x0c, 0x26, 0x63, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x12,
	0x36, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x61, 0x6e, 0x64, 0x6f, 0x76, 0x65,
	0x72, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x49, 0x45, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x06, 0x26, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x4f, 0x0a, 0x0e, 0x48, 0x61, 0x6e, 0x64, 0x6f,
	0x76, 0x65, 0x72, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x12, 0x3d, 0x0a, 0x0c, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x61, 0x6e, 0x64, 0x6f, 0x76,
	0x65, 0x72, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x49, 0x45, 0x73, 0x52, 0x0b, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x49, 0x45, 0x73, 0x22, 0xd9, 0x02, 0x0a, 0x17, 0x48, 0x61, 0x6e,
	0x64, 0x6f, 0x76, 0x65, 0x72, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x49, 0x45, 0x73, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x61, 0x0a, 0x1e, 0x69, 0x64, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x5f, 0x6e, 0x67, 0x5f, 0x72, 0x61, 0x6e, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x75, 0x65, 0x78,
	0x6e, 0x5f, 0x61, 0x70, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x78,
	0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x67, 0x52, 0x41, 0x6e, 0x6e, 0x6f, 0x64, 0x65,
	0x55, 0x65, 0x78, 0x6e, 0x41, 0x70, 0x69, 0x64, 0x48, 0x00, 0x52, 0x1b, 0x69, 0x64, 0x2d, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e, 0x47, 0x2d, 0x52, 0x41, 0x4e, 0x6e, 0x6f, 0x64, 0x65, 0x55,
	0x45, 0x58, 0x6e, 0x41, 0x50, 0x49, 0x44, 0x12, 0x61, 0x0a, 0x1e, 0x69, 0x64, 0x5f, 0x74, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x5f, 0x6e, 0x67, 0x5f, 0x72, 0x61, 0x6e, 0x6e, 0x6f, 0x64, 0x65, 0x5f,
	0x75, 0x65, 0x78, 0x6e, 0x5f, 0x61, 0x70, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x67, 0x52, 0x41, 0x6e, 0x6e,
	0x6f, 0x64, 0x65, 0x55, 0x65, 0x78, 0x6e, 0x41, 0x70, 0x69, 0x64, 0x48, 0x00, 0x52, 0x1b, 0x69,
	0x64, 0x2d, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x4e, 0x47, 0x2d, 0x52, 0x41, 0x4e, 0x6e, 0x6f,
	0x64, 0x65, 0x55, 0x45, 0x58, 0x6e, 0x41, 0x50, 0x49, 0x44, 0x12, 0x60, 0x0a, 0x22, 0x69, 0x64,
	0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x5f, 0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x5f, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31,
	0x2e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x43, 0x47, 0x69, 0x48, 0x00, 0x52, 0x1e, 0x69, 0x64,
	0x2d, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x43, 0x65, 0x6c, 0x6c, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x49, 0x44, 0x42, 0x16, 0x0a, 0x14,
	0x68, 0x61, 0x6e, 0x64, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x5f, 0x69, 0x65, 0x73, 0x22, 0xae, 0x01, 0x0a, 0x12, 0x48, 0x61, 0x6e, 0x64, 0x6f, 0x76, 0x65,
	0x72, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x49, 0x45, 0x73, 0x12, 0x26, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76,
	0x31, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x49, 0x65, 0x49, 0x44, 0x52, 0x03,
	0x26, 0x69, 0x64, 0x12, 0x37, 0x0a, 0x0b, 0x63, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x69,
	0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x0c,
	0x26, 0x63, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x37, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x78, 0x6e,
	0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x61, 0x6e, 0x64, 0x6f, 0x76, 0x65, 0x72, 0x53, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x49, 0x45, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x26,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x51, 0x0a, 0x0f, 0x48, 0x61, 0x6e, 0x64, 0x6f, 0x76, 0x65,
	0x72, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x3e, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x61, 0x6e, 0x64, 0x6f, 0x76, 0x65,
	0x72, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x49, 0x45, 0x73, 0x52, 0x0b, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x49, 0x45, 0x73, 0x22, 0x90, 0x03, 0x0a, 0x21, 0x43, 0x6f, 0x6e,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x48, 0x61, 0x6e, 0x64, 0x6f, 0x76, 0x65, 0x72,
	0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x49, 0x45, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x61,
	0x0a, 0x1e, 0x69, 0x64, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x6e, 0x67, 0x5f, 0x72,
	0x61, 0x6e, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x75, 0x65, 0x78, 0x6e, 0x5f, 0x61, 0x70, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31,
	0x2e, 0x4e, 0x67, 0x52, 0x41, 0x6e, 0x6e, 0x6f, 0x64, 0x65, 0x55, 0x65, 0x78, 0x6e, 0x41, 0x70,
	0x69, 0x64, 0x48, 0x00, 0x52, 0x1b, 0x69, 0x64, 0x2d, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e,
	0x47, 0x2d, 0x52, 0x41, 0x4e, 0x6e, 0x6f, 0x64, 0x65, 0x55, 0x45, 0x58, 0x6e, 0x41, 0x50, 0x49,
	0x44, 0x12, 0x61, 0x0a, 0x1e, 0x69, 0x64, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x6e,
	0x67, 0x5f, 0x72, 0x61, 0x6e, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x75, 0x65, 0x78, 0x6e, 0x5f, 0x61,
	0x70, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x78, 0x6e, 0x61, 0x70,
	0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x67, 0x52, 0x41, 0x6e, 0x6e, 0x6f, 0x64, 0x65, 0x55, 0x65, 0x78,
	0x6e, 0x41, 0x70, 0x69, 0x64, 0x48, 0x00, 0x52, 0x1b, 0x69, 0x64, 0x2d, 0x74, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x4e, 0x47, 0x2d, 0x52, 0x41, 0x4e, 0x6e, 0x6f, 0x64, 0x65, 0x55, 0x45, 0x58, 0x6e,
	0x41, 0x50, 0x49, 0x44, 0x12, 0x2c, 0x0a, 0x08, 0x69, 0x64, 0x5f, 0x63, 0x61, 0x75, 0x73, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x61, 0x75, 0x73, 0x65, 0x48, 0x00, 0x52, 0x08, 0x69, 0x64, 0x2d, 0x43, 0x61, 0x75,
	0x73, 0x65, 0x12, 0x54, 0x0a, 0x19, 0x69, 0x64, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f,
	0x63, 0x65, 0x6c, 0x6c, 0x73, 0x5f, 0x74, 0x6f, 0x5f, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e,
	0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x43, 0x65, 0x6c, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x00,
	0x52, 0x16, 0x69, 0x64, 0x2d, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x43, 0x65, 0x6c, 0x6c, 0x73,
	0x54, 0x6f, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x42, 0x21, 0x0a, 0x1f, 0x63, 0x6f, 0x6e, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x68, 0x61, 0x6e, 0x64, 0x6f, 0x76, 0x65, 0x72,
	0x5f, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x5f, 0x69, 0x65, 0x73, 0x22, 0xc2, 0x01, 0x0a, 0x1c,
	0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x48, 0x61, 0x6e, 0x64, 0x6f,
	0x76, 0x65, 0x72, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x49, 0x45, 0x73, 0x12, 0x26, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e,
	0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x49, 0x65, 0x49, 0x44, 0x52,
	0x03, 0x26, 0x69, 0x64, 0x12, 0x37, 0x0a, 0x0b, 0x63, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c,
	0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x78, 0x6e, 0x61, 0x70,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x52,
	0x0c, 0x26, 0x63, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x41, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x78,
	0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x61, 0x6c, 0x48, 0x61, 0x6e, 0x64, 0x6f, 0x76, 0x65, 0x72, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c,
	0x49, 0x45, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x26, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x22, 0x65, 0x0a, 0x19, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x48,
	0x61, 0x6e, 0x64, 0x6f, 0x76, 0x65, 0x72, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x12, 0x48, 0x0a,
	0x0c, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f,
	0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x48, 0x61, 0x6e, 0x64, 0x6f, 0x76, 0x65,
	0x72, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x49, 0x45, 0x73, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x49, 0x45, 0x73, 0x22, 0xd0, 0x02, 0x0a, 0x1b, 0x45, 0x61, 0x72, 0x6c,
	0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x49,
	0x45, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x61, 0x0a, 0x1e, 0x69, 0x64, 0x5f, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x5f, 0x6e, 0x67, 0x5f, 0x72, 0x61, 0x6e, 0x6e, 0x6f, 0x64, 0x65, 0x5f,
	0x75, 0x65, 0x78, 0x6e, 0x5f, 0x61, 0x70, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x67, 0x52, 0x41, 0x6e, 0x6e,
	0x6f, 0x64, 0x65, 0x55, 0x65, 0x78, 0x6e, 0x41, 0x70, 0x69, 0x64, 0x48, 0x00, 0x52, 0x1b, 0x69,
	0x64, 0x2d, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e, 0x47, 0x2d, 0x52, 0x41, 0x4e, 0x6e, 0x6f,
	0x64, 0x65, 0x55, 0x45, 0x58, 0x6e, 0x41, 0x50, 0x49, 0x44, 0x12, 0x61, 0x0a, 0x1e, 0x69, 0x64,
	0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x6e, 0x67, 0x5f, 0x72, 0x61, 0x6e, 0x6e, 0x6f,
	0x64, 0x65, 0x5f, 0x75, 0x65, 0x78, 0x6e, 0x5f, 0x61, 0x70, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x67, 0x52,
	0x41, 0x6e, 0x6e, 0x6f, 0x64, 0x65, 0x55, 0x65, 0x78, 0x6e, 0x41, 0x70, 0x69, 0x64, 0x48, 0x00,
	0x52, 0x1b, 0x69, 0x64, 0x2d, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x4e, 0x47, 0x2d, 0x52, 0x41,
	0x4e, 0x6e, 0x6f, 0x64, 0x65, 0x55, 0x45, 0x58, 0x6e, 0x41, 0x50, 0x49, 0x44, 0x12, 0x4e, 0x0a,
	0x12, 0x69, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x5f, 0x73, 0x74,
	0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x78, 0x6e, 0x61, 0x70,
	0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x53, 0x74, 0x61,
	0x67, 0x65, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x48, 0x00, 0x52, 0x11, 0x69, 0x64, 0x2d, 0x70,
	0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x53, 0x74, 0x61, 0x67, 0x65, 0x42, 0x1b, 0x0a,
	0x19, 0x65, 0x61, 0x72, 0x6c, 0x79, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x69, 0x65, 0x73, 0x22, 0xb6, 0x01, 0x0a, 0x16, 0x45,
	0x61, 0x72, 0x6c, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x65, 0x72, 0x49, 0x45, 0x73, 0x12, 0x26, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x49, 0x65, 0x49, 0x44, 0x52, 0x03, 0x26, 0x69, 0x64, 0x12, 0x37, 0x0a,
	0x0b, 0x63, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x14, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x69,
	0x74, 0x69, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x0c, 0x26, 0x63, 0x72, 0x69, 0x74, 0x69,
	0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x3b, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e,
	0x45, 0x61, 0x72, 0x6c, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x65, 0x72, 0x49, 0x45, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x26, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x22, 0x59, 0x0a, 0x13, 0x45, 0x61, 0x72, 0x6c, 0x79, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x12, 0x42, 0x0a, 0x0c, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x61, 0x72, 0x6c, 0x79,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x49, 0x45,
	0x73, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x49, 0x45, 0x73, 0x22, 0x4a,
	0x0a, 0x1a, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x53, 0x74, 0x61, 0x67, 0x65,
	0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x83, 0x02, 0x0a, 0x14, 0x50,
	0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x53, 0x74, 0x61, 0x67, 0x65, 0x43, 0x68, 0x6f,
	0x69, 0x63, 0x65, 0x12, 0x3f, 0x0a, 0x0e, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x64, 0x6c, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x78, 0x6e,
	0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x72, 0x73, 0x74, 0x44, 0x6c, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x48, 0x00, 0x52, 0x0e, 0x66, 0x69, 0x72, 0x73, 0x74, 0x2d, 0x64, 0x6c, 0x2d, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3d, 0x0a, 0x0d, 0x64, 0x6c, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x61,
	0x72, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x78, 0x6e,
	0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x6c, 0x64, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x69,
	0x6e, 0x67, 0x48, 0x00, 0x52, 0x0d, 0x64, 0x6c, 0x2d, 0x64, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64,
	0x69, 0x6e, 0x67, 0x12, 0x51, 0x0a, 0x10, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x5f, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e,
	0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72,
	0x65, 0x53, 0x74, 0x61, 0x67, 0x65, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x45, 0x78, 0x74, 0x49,
	0x65, 0x73, 0x48, 0x00, 0x52, 0x10, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x2d, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x18, 0x0a, 0x16, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x64,
	0x75, 0x72, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65,
	0x22, 0x42, 0x0a, 0x12, 0x46, 0x69, 0x72, 0x73, 0x74, 0x44, 0x6c, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x22, 0xd1, 0x01, 0x0a, 0x0c, 0x46, 0x69, 0x72, 0x73, 0x74, 0x44, 0x6c,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x7f, 0x0a, 0x26, 0x64, 0x5f, 0x72, 0x62, 0x73, 0x5f, 0x73,
	0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x74, 0x6f, 0x5f, 0x65, 0x61, 0x72, 0x6c, 0x79, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e,
	0x44, 0x72, 0x62, 0x73, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x54, 0x6f, 0x45, 0x61, 0x72,
	0x6c, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x20, 0x64, 0x52, 0x42, 0x73, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x54, 0x6f, 0x45, 0x61, 0x72, 0x6c, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x12, 0x40, 0x0a, 0x0d, 0x69, 0x5f, 0x65, 0x5f, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x72, 0x73, 0x74, 0x44, 0x6c, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x52, 0x0c, 0x69, 0x45, 0x2d, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x42, 0x0a, 0x12, 0x44, 0x6c, 0x64, 0x69,
	0x73, 0x63, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x12, 0x2c,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xba, 0x01, 0x0a,
	0x0c, 0x44, 0x6c, 0x64, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x68, 0x0a,
	0x1d, 0x64, 0x5f, 0x72, 0x62, 0x73, 0x5f, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x74,
	0x6f, 0x5f, 0x64, 0x6c, 0x64, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x44,
	0x72, 0x62, 0x73, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x54, 0x6f, 0x44, 0x6c, 0x64, 0x69,
	0x73, 0x63, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x19, 0x64, 0x52,
	0x42, 0x73, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x54, 0x6f, 0x44, 0x4c, 0x44, 0x69, 0x73,
	0x63, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x40, 0x0a, 0x0d, 0x69, 0x5f, 0x65, 0x5f, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x6c, 0x64, 0x69, 0x73, 0x63, 0x61,
	0x72, 0x64, 0x69, 0x6e, 0x67, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x52, 0x0c, 0x69, 0x45, 0x2d,
	0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xa2, 0x07, 0x0a, 0x11, 0x52, 0x61,
	0x6e, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x49, 0x45, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x5b, 0x0a, 0x19, 0x69, 0x64, 0x5f, 0x75, 0x65, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x65, 0x69,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x48, 0x00, 0x52, 0x17, 0x69, 0x64, 0x2d, 0x55, 0x45, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x57, 0x0a, 0x17,
	0x69, 0x64, 0x5f, 0x75, 0x65, 0x72, 0x61, 0x6e, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x5f, 0x69,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x65, 0x72, 0x61, 0x6e, 0x70, 0x61, 0x67,
	0x69, 0x6e, 0x67, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x48, 0x00, 0x52, 0x16, 0x69,
	0x64, 0x2d, 0x55, 0x45, 0x52, 0x41, 0x4e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x39, 0x0a, 0x0d, 0x69, 0x64, 0x5f, 0x70, 0x61, 0x67, 0x69,
	0x6e, 0x67, 0x5f, 0x64, 0x72, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x78,
	0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x44, 0x72, 0x78,
	0x48, 0x00, 0x52, 0x0c, 0x69, 0x64, 0x2d, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x44, 0x52, 0x58,
	0x12, 0x45, 0x0a, 0x11, 0x69, 0x64, 0x5f, 0x72, 0x61, 0x6e, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x67,
	0x5f, 0x61, 0x72, 0x65, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x78, 0x6e,
	0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x61, 0x6e, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x41,
	0x72, 0x65, 0x61, 0x48, 0x00, 0x52, 0x10, 0x69, 0x64, 0x2d, 0x52, 0x41, 0x4e, 0x50, 0x61, 0x67,
	0x69, 0x6e, 0x67, 0x41, 0x72, 0x65, 0x61, 0x12, 0x48, 0x0a, 0x12, 0x69, 0x64, 0x5f, 0x70, 0x61,
	0x67, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61,
	0x67, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x48, 0x00, 0x52, 0x11,
	0x69, 0x64, 0x2d, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74,
	0x79, 0x12, 0x6e, 0x0a, 0x20, 0x69, 0x64, 0x5f, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x72, 0x61, 0x6e, 0x70,
	0x61, 0x67, 0x69, 0x6e, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x78, 0x6e,
	0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x44, 0x61, 0x74, 0x61, 0x46, 0x6f, 0x72, 0x52, 0x61, 0x6e, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x67,
	0x48, 0x00, 0x52, 0x1d, 0x69, 0x64, 0x2d, 0x41, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x44, 0x61, 0x74, 0x61, 0x46, 0x6f, 0x72, 0x52, 0x41, 0x4e, 0x50, 0x61, 0x67, 0x69, 0x6e,
	0x67, 0x12, 0x6e, 0x0a, 0x20, 0x69, 0x64, 0x5f, 0x75, 0x65, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x5f,
	0x63, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x70,
	0x61, 0x67, 0x69, 0x6e, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x78, 0x6e,
	0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x65, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x43, 0x61, 0x70,
	0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x46, 0x6f, 0x72, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x67,
	0x48, 0x00, 0x52, 0x1d, 0x69, 0x64, 0x2d, 0x55, 0x45, 0x52, 0x61, 0x64, 0x69, 0x6f, 0x43, 0x61,
	0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x46, 0x6f, 0x72, 0x50, 0x61, 0x67, 0x69, 0x6e,
	0x67, 0x12, 0x74, 0x0a, 0x22, 0x69, 0x64, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64,
	0x5f, 0x75, 0x65, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e,
	0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64,
	0x55, 0x65, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x1f, 0x69, 0x64, 0x2d, 0x45, 0x78, 0x74, 0x65, 0x6e,
	0x64, 0x65, 0x64, 0x55, 0x45, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x5d, 0x0a, 0x19, 0x69, 0x64, 0x5f, 0x70, 0x61,
	0x67, 0x69, 0x6e, 0x67, 0x65, 0x5f, 0x64, 0x72, 0x78, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x78, 0x6e, 0x61,
	0x70, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x65, 0x44, 0x72, 0x78, 0x69,
	0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x18, 0x69, 0x64,
	0x2d, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x65, 0x44, 0x52, 0x58, 0x49, 0x6e, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x45, 0x0a, 0x11, 0x69, 0x64, 0x5f, 0x75, 0x65, 0x73,
	0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x5f, 0x64, 0x72, 0x78, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x16, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x65, 0x73, 0x70,
	0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x44, 0x72, 0x78, 0x48, 0x00, 0x52, 0x10, 0x69, 0x64, 0x2d,
	0x55, 0x45, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x44, 0x52, 0x58, 0x42, 0x0f, 0x0a,
	0x0d, 0x72, 0x61, 0x6e, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x65, 0x73, 0x22, 0xa2,
	0x01, 0x0a, 0x0c, 0x52, 0x61, 0x6e, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x49, 0x45, 0x73, 0x12,
	0x26, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x78, 0x6e,
	0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x49, 0x65,
	0x49, 0x44, 0x52, 0x03, 0x26, 0x69, 0x64, 0x12, 0x37, 0x0a, 0x0b, 0x63, 0x72, 0x69, 0x74, 0x69,
	0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x78,
	0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x69,
	0x74, 0x79, 0x52, 0x0c, 0x26, 0x63, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79,
	0x12, 0x31, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x61, 0x6e, 0x70, 0x61, 0x67,
	0x69, 0x6e, 0x67, 0x49, 0x45, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x26, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x22, 0x45, 0x0a, 0x09, 0x52, 0x61, 0x6e, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x67,
	0x12, 0x38, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x69, 0x65, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31,
	0x2e, 0x52, 0x61, 0x6e, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x49, 0x45, 0x73, 0x52, 0x0b, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x49, 0x45, 0x73, 0x22, 0xb9, 0x03, 0x0a, 0x20, 0x52,
	0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x55, 0x65, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x45, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x5b, 0x0a, 0x1b, 0x69, 0x64, 0x5f, 0x6e, 0x65, 0x77, 0x5f, 0x6e, 0x67, 0x5f, 0x72, 0x61, 0x6e,
	0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x75, 0x65, 0x78, 0x6e, 0x5f, 0x61, 0x70, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x4e,
	0x67, 0x52, 0x41, 0x6e, 0x6e, 0x6f, 0x64, 0x65, 0x55, 0x65, 0x78, 0x6e, 0x41, 0x70, 0x69, 0x64,
	0x48, 0x00, 0x52, 0x18, 0x69, 0x64, 0x2d, 0x6e, 0x65, 0x77, 0x4e, 0x47, 0x2d, 0x52, 0x41, 0x4e,
	0x6e, 0x6f, 0x64, 0x65, 0x55, 0x45, 0x58, 0x6e, 0x41, 0x50, 0x49, 0x44, 0x12, 0x3f, 0x0a, 0x0f,
	0x69, 0x64, 0x5f, 0x75, 0x65, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e,
	0x55, 0x65, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x49, 0x64, 0x48, 0x00, 0x52, 0x0e, 0x69,
	0x64, 0x2d, 0x55, 0x45, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x49, 0x44, 0x12, 0x2b, 0x0a,
	0x08, 0x69, 0x64, 0x5f, 0x6d, 0x61, 0x63, 0x5f, 0x69, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0d, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x63, 0x49, 0x48, 0x00,
	0x52, 0x08, 0x69, 0x64, 0x2d, 0x4d, 0x41, 0x43, 0x2d, 0x49, 0x12, 0x5e, 0x0a, 0x1b, 0x69, 0x64,
	0x5f, 0x6e, 0x65, 0x77, 0x5f, 0x6e, 0x67, 0x5f, 0x72, 0x61, 0x6e, 0x5f, 0x63, 0x65, 0x6c, 0x6c,
	0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x67, 0x52, 0x41, 0x6e, 0x43,
	0x65, 0x6c, 0x6c, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x48, 0x00, 0x52, 0x1b, 0x69,
	0x64, 0x2d, 0x6e, 0x65, 0x77, 0x2d, 0x4e, 0x47, 0x2d, 0x52, 0x41, 0x4e, 0x2d, 0x43, 0x65, 0x6c,
	0x6c, 0x2d, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x48, 0x0a, 0x12, 0x69, 0x64,
	0x5f, 0x72, 0x72, 0x63, 0x72, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x5f, 0x63, 0x61, 0x75, 0x73, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31,
	0x2e, 0x52, 0x72, 0x63, 0x72, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x43, 0x61, 0x75, 0x73, 0x65, 0x48,
	0x00, 0x52, 0x11, 0x69, 0x64, 0x2d, 0x52, 0x52, 0x43, 0x52, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x43,
	0x61, 0x75, 0x73, 0x65, 0x42, 0x20, 0x0a, 0x1e, 0x72, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65,
	0x5f, 0x75, 0x65, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x5f, 0x69, 0x65, 0x73, 0x22, 0xc0, 0x01, 0x0a, 0x1b, 0x52, 0x65, 0x74, 0x72, 0x69,
	0x65, 0x76, 0x65, 0x55, 0x65, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x49, 0x45, 0x73, 0x12, 0x26, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x49, 0x65, 0x49, 0x44, 0x52, 0x03, 0x26, 0x69, 0x64, 0x12, 0x37,
	0x0a, 0x0b, 0x63, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72,
	0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x0c, 0x26, 0x63, 0x72, 0x69, 0x74,
	0x69, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x40, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31,
	0x2e, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x55, 0x65, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x45, 0x73, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x06, 0x26, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x63, 0x0a, 0x18, 0x52, 0x65, 0x74,
	0x72, 0x69, 0x65, 0x76, 0x65, 0x55, 0x65, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x47, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x5f, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x78, 0x6e,
	0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x55, 0x65,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x45,
	0x73, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x49, 0x45, 0x73, 0x22, 0xc0,
	0x0a, 0x0a, 0x21, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x55, 0x65, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x78, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x49, 0x45, 0x73, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x5b, 0x0a, 0x1b, 0x69, 0x64, 0x5f, 0x6e, 0x65, 0x77, 0x5f, 0x6e,
	0x67, 0x5f, 0x72, 0x61, 0x6e, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x75, 0x65, 0x78, 0x6e, 0x5f, 0x61,
	0x70, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x78, 0x6e, 0x61, 0x70,
	0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x67, 0x52, 0x41, 0x6e, 0x6e, 0x6f, 0x64, 0x65, 0x55, 0x65, 0x78,
	0x6e, 0x41, 0x70, 0x69, 0x64, 0x48, 0x00, 0x52, 0x18, 0x69, 0x64, 0x2d, 0x6e, 0x65, 0x77, 0x4e,
	0x47, 0x2d, 0x52, 0x41, 0x4e, 0x6e, 0x6f, 0x64, 0x65, 0x55, 0x45, 0x58, 0x6e, 0x41, 0x50, 0x49,
	0x44, 0x12, 0x5b, 0x0a, 0x1b, 0x69, 0x64, 0x5f, 0x6f, 0x6c, 0x64, 0x5f, 0x6e, 0x67, 0x5f, 0x72,
	0x61, 0x6e, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x75, 0x65, 0x78, 0x6e, 0x5f, 0x61, 0x70, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31,
	0x2e, 0x4e, 0x67, 0x52, 0x41, 0x6e, 0x6e, 0x6f, 0x64, 0x65, 0x55, 0x65, 0x78, 0x6e, 0x41, 0x70,
	0x69, 0x64, 0x48, 0x00, 0x52, 0x18, 0x69, 0x64, 0x2d, 0x6f, 0x6c, 0x64, 0x4e, 0x47, 0x2d, 0x52,
	0x41, 0x4e, 0x6e, 0x6f, 0x64, 0x65, 0x55, 0x45, 0x58, 0x6e, 0x41, 0x50, 0x49, 0x44, 0x12, 0x2c,
	0x0a, 0x08, 0x69, 0x64, 0x5f, 0x67, 0x75, 0x61, 0x6d, 0x69, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0e, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x75, 0x61, 0x6d, 0x69,
	0x48, 0x00, 0x52, 0x08, 0x69, 0x64, 0x2d, 0x47, 0x55, 0x41, 0x4d, 0x49, 0x12, 0x72, 0x0a, 0x22,
	0x69, 0x64, 0x5f, 0x75, 0x65, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x69, 0x6e, 0x66,
	0x6f, 0x5f, 0x72, 0x65, 0x74, 0x72, 0x5f, 0x75, 0x65, 0x63, 0x74, 0x78, 0x74, 0x5f, 0x72, 0x65,
	0x73, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e,
	0x76, 0x31, 0x2e, 0x55, 0x65, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x65, 0x74, 0x72, 0x55, 0x65, 0x63, 0x74, 0x78, 0x74, 0x52, 0x65, 0x73, 0x70, 0x48, 0x00,
	0x52, 0x1e, 0x69, 0x64, 0x2d, 0x55, 0x45, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x65, 0x74, 0x72, 0x55, 0x45, 0x43, 0x74, 0x78, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x4b, 0x0a, 0x13, 0x69, 0x64, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x65, 0x5f, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x65, 0x41, 0x63, 0x74,
	0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x12, 0x69, 0x64, 0x2d, 0x54, 0x72,
	0x61, 0x63, 0x65, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x42, 0x0a,
	0x10, 0x69, 0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x65, 0x64, 0x5f, 0x69, 0x6d, 0x65, 0x69, 0x73,
	0x76, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76,
	0x31, 0x2e, 0x4d, 0x61, 0x73, 0x6b, 0x65, 0x64, 0x49, 0x6d, 0x65, 0x69, 0x73, 0x76, 0x48, 0x00,
	0x52, 0x0f, 0x69, 0x64, 0x2d, 0x4d, 0x61, 0x73, 0x6b, 0x65, 0x64, 0x49, 0x4d, 0x45, 0x49, 0x53,
	0x56, 0x12, 0x73, 0x0a, 0x21, 0x69, 0x64, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x78,
	0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x1f, 0x69, 0x64, 0x2d, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x60, 0x0a, 0x1a, 0x69, 0x64, 0x5f, 0x63, 0x72, 0x69,
	0x74, 0x69, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73,
	0x74, 0x69, 0x63, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x78, 0x6e, 0x61,
	0x70, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79,
	0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x73, 0x48, 0x00, 0x52, 0x19, 0x69,
	0x64, 0x2d, 0x43, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x44, 0x69, 0x61,
	0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x64, 0x0a, 0x1c, 0x69, 0x64, 0x5f, 0x6e,
	0x72, 0x76, 0x32, 0x5f, 0x78, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x5f, 0x61, 0x75,
	0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x72, 0x76, 0x32, 0x58, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64,
	0x48, 0x00, 0x52, 0x1a, 0x69, 0x64, 0x2d, 0x4e, 0x52, 0x56, 0x32, 0x58, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x12, 0x67,
	0x0a, 0x1d, 0x69, 0x64, 0x5f, 0x6c, 0x74, 0x65, 0x76, 0x32, 0x5f, 0x78, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e,
	0x4c, 0x74, 0x65, 0x76, 0x32, 0x58, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x41, 0x75,
	0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x48, 0x00, 0x52, 0x1b, 0x69, 0x64, 0x2d, 0x4c,
	0x54, 0x45, 0x56, 0x32, 0x58, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x41, 0x75, 0x74,
	0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x12, 0x4f, 0x0a, 0x15, 0x69, 0x64, 0x5f, 0x70, 0x63,
	0x35, 0x5f, 0x71, 0x6f, 0x5f, 0x73, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31,
	0x2e, 0x50, 0x63, 0x35, 0x51, 0x6f, 0x53, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72,
	0x73, 0x48, 0x00, 0x52, 0x13, 0x69, 0x64, 0x2d, 0x50, 0x43, 0x35, 0x51, 0x6f, 0x53, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x5a, 0x0a, 0x18, 0x69, 0x64, 0x5f, 0x75,
	0x65, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x78, 0x6e, 0x61,
	0x70, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x65, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x6e,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x17, 0x69, 0x64, 0x2d,
	0x55, 0x45, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x78, 0x0a, 0x24, 0x69, 0x64, 0x5f, 0x75, 0x65, 0x68, 0x69, 0x73,
	0x74, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x74, 0x68, 0x65, 0x5f, 0x75, 0x65, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x26, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x65, 0x68,
	0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x46, 0x72, 0x6f, 0x6d, 0x54, 0x68, 0x65, 0x55, 0x65, 0x48, 0x00, 0x52, 0x20, 0x69, 0x64,
	0x2d, 0x55, 0x45, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x72, 0x6f, 0x6d, 0x54, 0x68, 0x65, 0x55, 0x45, 0x12, 0x3e,
	0x0a, 0x0e, 0x69, 0x64, 0x5f, 0x6d, 0x64, 0x74, 0x70, 0x6c, 0x6d, 0x6e, 0x6c, 0x69, 0x73, 0x74,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31,
	0x2e, 0x4d, 0x64, 0x74, 0x70, 0x6c, 0x6d, 0x6e, 0x6c, 0x69, 0x73, 0x74, 0x48, 0x00, 0x52, 0x0e,
	0x69, 0x64, 0x2d, 0x4d, 0x44, 0x54, 0x50, 0x4c, 0x4d, 0x4e, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x21,
	0x0a, 0x1f, 0x72, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x5f, 0x75, 0x65, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x78, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x69, 0x65,
	0x73, 0x22, 0xc2, 0x01, 0x0a, 0x1c, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x55, 0x65,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x49,
	0x45, 0x73, 0x12, 0x26, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x49, 0x65, 0x49, 0x44, 0x52, 0x03, 0x26, 0x69, 0x64, 0x12, 0x37, 0x0a, 0x0b, 0x63, 0x72,
	0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x14, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x69, 0x74, 0x69, 0x63,
	0x61, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x0c, 0x26, 0x63, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c,
	0x69, 0x74, 0x79, 0x12, 0x41, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x74,
	0x72, 0x69, 0x65, 0x76, 0x65, 0x55, 0x65, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x49, 0x45, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06,
	0x26, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x65, 0x0a, 0x19, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65,
	0x76, 0x65, 0x55, 0x65, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x48, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f,
	0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x78, 0x6e, 0x61, 0x70,
	0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x55, 0x65, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x49, 0x45, 0x73,
	0x52, 0x0b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x49, 0x45, 0x73, 0x22, 0x8b, 0x03,
	0x0a, 0x20, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x55, 0x65, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x78, 0x74, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x49, 0x45, 0x73, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x5b, 0x0a, 0x1b, 0x69, 0x64, 0x5f, 0x6e, 0x65, 0x77, 0x5f, 0x6e, 0x67, 0x5f,
	0x72, 0x61, 0x6e, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x75, 0x65, 0x78, 0x6e, 0x5f, 0x61, 0x70, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76,
	0x31, 0x2e, 0x4e, 0x67, 0x52, 0x41, 0x6e, 0x6e, 0x6f, 0x64, 0x65, 0x55, 0x65, 0x78, 0x6e, 0x41,
	0x70, 0x69, 0x64, 0x48, 0x00, 0x52, 0x18, 0x69, 0x64, 0x2d, 0x6e, 0x65, 0x77, 0x4e, 0x47, 0x2d,
	0x52, 0x41, 0x4e, 0x6e, 0x6f, 0x64, 0x65, 0x55, 0x45, 0x58, 0x6e, 0x41, 0x50, 0x49, 0x44, 0x12,
	0x58, 0x0a, 0x28, 0x69, 0x64, 0x5f, 0x6f, 0x6c, 0x64, 0x74, 0x6f, 0x5f, 0x6e, 0x65, 0x77, 0x5f,
	0x6e, 0x67, 0x5f, 0x72, 0x61, 0x6e, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6d,
	0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x00, 0x52, 0x24, 0x69, 0x64, 0x2d, 0x4f, 0x6c, 0x64, 0x74, 0x6f, 0x4e, 0x65, 0x77,
	0x4e, 0x47, 0x2d, 0x52, 0x41, 0x4e, 0x6e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6d, 0x65,
	0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x12, 0x2c, 0x0a, 0x08, 0x69, 0x64, 0x5f,
	0x63, 0x61, 0x75, 0x73, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x78, 0x6e,
	0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x61, 0x75, 0x73, 0x65, 0x48, 0x00, 0x52, 0x08, 0x69,
	0x64, 0x2d, 0x43, 0x61, 0x75, 0x73, 0x65, 0x12, 0x60, 0x0a, 0x1a, 0x69, 0x64, 0x5f, 0x63, 0x72,
	0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f,
	0x73, 0x74, 0x69, 0x63, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x78, 0x6e,
	0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x69, 0x74,
	0x79, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x73, 0x48, 0x00, 0x52, 0x19,
	0x69, 0x64, 0x2d, 0x43, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x44, 0x69,
	0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x73, 0x42, 0x20, 0x0a, 0x1e, 0x72, 0x65, 0x74,
	0x72, 0x69, 0x65, 0x76, 0x65, 0x5f, 0x75, 0x65, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x5f,
	0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x5f, 0x69, 0x65, 0x73, 0x22, 0xc0, 0x01, 0x0a, 0x1b,
	0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x55, 0x65, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78,
	0x74, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x49, 0x45, 0x73, 0x12, 0x26, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76,
	0x31, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x49, 0x65, 0x49, 0x44, 0x52, 0x03,
	0x26, 0x69, 0x64, 0x12, 0x37, 0x0a, 0x0b, 0x63, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x69,
	0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x0c,
	0x26, 0x63, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x40, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x78, 0x6e,
	0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x55, 0x65,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x49, 0x45,
	0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x26, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x63,
	0x0a, 0x18, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x55, 0x65, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x78, 0x74, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x12, 0x47, 0x0a, 0x0c, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x24, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x74, 0x72, 0x69,
	0x65, 0x76, 0x65, 0x55, 0x65, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x46, 0x61, 0x69, 0x6c,
	0x75, 0x72, 0x65, 0x49, 0x45, 0x73, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x49, 0x45, 0x73, 0x22, 0xbd, 0x04, 0x0a, 0x1c, 0x58, 0x6e, 0x55, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x45, 0x73, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x5b, 0x0a, 0x1b, 0x69, 0x64, 0x5f, 0x6e, 0x65, 0x77, 0x5f, 0x6e,
	0x67, 0x5f, 0x72, 0x61, 0x6e, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x75, 0x65, 0x78, 0x6e, 0x5f, 0x61,
	0x70, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x78, 0x6e, 0x61, 0x70,
	0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x67, 0x52, 0x41, 0x6e, 0x6e, 0x6f, 0x64, 0x65, 0x55, 0x65, 0x78,
	0x6e, 0x41, 0x70, 0x69, 0x64, 0x48, 0x00, 0x52, 0x18, 0x69, 0x64, 0x2d, 0x6e, 0x65, 0x77, 0x4e,
	0x47, 0x2d, 0x52, 0x41, 0x4e, 0x6e, 0x6f, 0x64, 0x65, 0x55, 0x45, 0x58, 0x6e, 0x41, 0x50, 0x49,
	0x44, 0x12, 0x5b, 0x0a, 0x1b, 0x69, 0x64, 0x5f, 0x6f, 0x6c, 0x64, 0x5f, 0x6e, 0x67, 0x5f, 0x72,
	0x61, 0x6e, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x75, 0x65, 0x78, 0x6e, 0x5f, 0x61, 0x70, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31,
	0x2e, 0x4e, 0x67, 0x52, 0x41, 0x6e, 0x6e, 0x6f, 0x64, 0x65, 0x55, 0x65, 0x78, 0x6e, 0x41, 0x70,
	0x69, 0x64, 0x48, 0x00, 0x52, 0x18, 0x69, 0x64, 0x2d, 0x6f, 0x6c, 0x64, 0x4e, 0x47, 0x2d, 0x52,
	0x41, 0x4e, 0x6e, 0x6f, 0x64, 0x65, 0x55, 0x45, 0x58, 0x6e, 0x41, 0x50, 0x49, 0x44, 0x12, 0x7f,
	0x0a, 0x26, 0x69, 0x64, 0x5f, 0x78, 0x6e, 0x5f, 0x75, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x70, 0x65, 0x72, 0x5f, 0x70, 0x64, 0x75, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28,
	0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x58, 0x6e, 0x55, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x70, 0x65, 0x72, 0x50, 0x64, 0x75, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x00, 0x52, 0x23, 0x69, 0x64, 0x2d, 0x58,
	0x6e, 0x55, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x70, 0x65, 0x72,
	0x50, 0x44, 0x55, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2d, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x51, 0x0a, 0x15, 0x69, 0x64, 0x5f, 0x63, 0x68, 0x6f, 0x5f, 0x6d, 0x72, 0x64, 0x63, 0x5f, 0x69,
	0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19,
	0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x6f, 0x4d, 0x52, 0x64, 0x63,
	0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x15, 0x69, 0x64, 0x2d,
	0x43, 0x48, 0x4f, 0x2d, 0x4d, 0x52, 0x44, 0x43, 0x2d, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74,
	0x6f, 0x72, 0x12, 0x71, 0x0a, 0x21, 0x69, 0x64, 0x5f, 0x63, 0x68, 0x6f, 0x5f, 0x6d, 0x72, 0x64,
	0x63, 0x5f, 0x65, 0x61, 0x72, 0x6c, 0x79, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x66, 0x6f, 0x72,
	0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e,
	0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x6f, 0x4d, 0x52, 0x64, 0x63, 0x45,
	0x61, 0x72, 0x6c, 0x79, 0x44, 0x61, 0x74, 0x61, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69,
	0x6e, 0x67, 0x48, 0x00, 0x52, 0x1f, 0x69, 0x64, 0x2d, 0x43, 0x48, 0x4f, 0x2d, 0x4d, 0x52, 0x44,
	0x43, 0x2d, 0x45, 0x61, 0x72, 0x6c, 0x79, 0x44, 0x61, 0x74, 0x61, 0x46, 0x6f, 0x72, 0x77, 0x61,
	0x72, 0x64, 0x69, 0x6e, 0x67, 0x42, 0x1c, 0x0a, 0x1a, 0x78, 0x6e, 0x5f, 0x75, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x5f, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x65, 0x73, 0x22, 0xb8, 0x01, 0x0a, 0x17, 0x58, 0x6e, 0x55, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x45, 0x73, 0x12,
	0x26, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x78, 0x6e,
	0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x49, 0x65,
	0x49, 0x44, 0x52, 0x03, 0x26, 0x69, 0x64, 0x12, 0x37, 0x0a, 0x0b, 0x63, 0x72, 0x69, 0x74, 0x69,
	0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x78,
	0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x69,
	0x74, 0x79, 0x52, 0x0c, 0x26, 0x63, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79,
	0x12, 0x3c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x25, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x58, 0x6e, 0x55, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x45,
	0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x26, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x5b,
	0x0a, 0x14, 0x58, 0x6e, 0x55, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x49, 0x6e, 0x64, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x43, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x5f, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x78,
	0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x58, 0x6e, 0x55, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x45, 0x73, 0x52, 0x0b,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x49, 0x45, 0x73, 0x22, 0xbb, 0x13, 0x0a, 0x1c,
	0x53, 0x6e, 0x6f, 0x64, 0x65, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x49, 0x45, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x58, 0x0a, 0x19,
	0x69, 0x64, 0x5f, 0x6d, 0x5f, 0x6e, 0x67, 0x5f, 0x72, 0x61, 0x6e, 0x6e, 0x6f, 0x64, 0x65, 0x5f,
	0x75, 0x65, 0x78, 0x6e, 0x5f, 0x61, 0x70, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x67, 0x52, 0x41, 0x6e, 0x6e,
	0x6f, 0x64, 0x65, 0x55, 0x65, 0x78, 0x6e, 0x41, 0x70, 0x69, 0x64, 0x48, 0x00, 0x52, 0x17, 0x69,
	0x64, 0x2d, 0x4d, 0x2d, 0x4e, 0x47, 0x2d, 0x52, 0x41, 0x4e, 0x6e, 0x6f, 0x64, 0x65, 0x55, 0x45,
	0x58, 0x6e, 0x41, 0x50, 0x49, 0x44, 0x12, 0x60, 0x0a, 0x1a, 0x69, 0x64, 0x5f, 0x75, 0x65, 0x73,
	0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x63, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x69, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x78, 0x6e, 0x61,
	0x70, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x65, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x43,
	0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x48, 0x00, 0x52, 0x19, 0x69,
	0x64, 0x2d, 0x55, 0x45, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x43, 0x61, 0x70, 0x61,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x63, 0x0a, 0x1c, 0x69, 0x64, 0x5f, 0x73,
	0x5f, 0x6e, 0x67, 0x5f, 0x72, 0x61, 0x6e, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x73, 0x65, 0x63, 0x75,
	0x72, 0x69, 0x74, 0x79, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x4e, 0x47, 0x52, 0x41, 0x6e, 0x6e,
	0x6f, 0x64, 0x65, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x4b, 0x65, 0x79, 0x48, 0x00,
	0x52, 0x1b, 0x69, 0x64, 0x2d, 0x73, 0x2d, 0x6e, 0x67, 0x2d, 0x52, 0x41, 0x4e, 0x6e, 0x6f, 0x64,
	0x65, 0x2d, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x4b, 0x65, 0x79, 0x12, 0x5d, 0x0a,
	0x17, 0x69, 0x64, 0x5f, 0x73, 0x5f, 0x6e, 0x67, 0x5f, 0x72, 0x61, 0x6e, 0x6e, 0x6f, 0x64, 0x65,
	0x5f, 0x75, 0x65, 0x5f, 0x61, 0x6d, 0x62, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x65, 0x61, 0x67, 0x67, 0x72, 0x65,
	0x67, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x42, 0x69, 0x74, 0x52, 0x61,
	0x74, 0x65, 0x48, 0x00, 0x52, 0x16, 0x69, 0x64, 0x2d, 0x53, 0x2d, 0x4e, 0x47, 0x2d, 0x52, 0x41,
	0x4e, 0x6e, 0x6f, 0x64, 0x65, 0x55, 0x45, 0x2d, 0x41, 0x4d, 0x42, 0x52, 0x12, 0x42, 0x0a, 0x10,
	0x69, 0x64, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x70, 0x6c, 0x6d, 0x6e,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31,
	0x2e, 0x50, 0x6c, 0x6d, 0x6e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x48, 0x00, 0x52,
	0x0f, 0x69, 0x64, 0x2d, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x50, 0x4c, 0x4d, 0x4e,
	0x12, 0x64, 0x0a, 0x1c, 0x69, 0x64, 0x5f, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f,
	0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31,
	0x2e, 0x4d, 0x6f, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x00, 0x52, 0x1a, 0x69, 0x64, 0x2d, 0x4d,
	0x6f, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x6b, 0x0a, 0x28, 0x69, 0x64, 0x5f, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x5f, 0x74, 0x6f, 0x5f, 0x72, 0x61, 0x74, 0x5f, 0x66, 0x72, 0x65, 0x71, 0x75, 0x5f,
	0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69,
	0x74, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e,
	0x76, 0x31, 0x2e, 0x52, 0x66, 0x73, 0x70, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x48, 0x00, 0x52, 0x23,
	0x69, 0x64, 0x2d, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x54, 0x6f, 0x52, 0x61, 0x74, 0x46, 0x72, 0x65,
	0x71, 0x75, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x69, 0x6f, 0x72,
	0x69, 0x74, 0x79, 0x12, 0x6d, 0x0a, 0x21, 0x69, 0x64, 0x5f, 0x70, 0x64, 0x75, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x6f, 0x5f, 0x62, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x65, 0x64,
	0x5f, 0x61, 0x64, 0x64, 0x5f, 0x72, 0x65, 0x71, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x64, 0x75, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x42, 0x65, 0x41, 0x64, 0x64, 0x65, 0x64, 0x41, 0x64, 0x64, 0x52,
	0x65, 0x71, 0x48, 0x00, 0x52, 0x1c, 0x69, 0x64, 0x2d, 0x50, 0x44, 0x55, 0x53, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x42, 0x65, 0x41, 0x64, 0x64, 0x65, 0x64, 0x41, 0x64, 0x64, 0x52,
	0x65, 0x71, 0x12, 0x36, 0x0a, 0x15, 0x69, 0x64, 0x5f, 0x6d, 0x6e, 0x5f, 0x74, 0x6f, 0x5f, 0x73,
	0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x00, 0x52, 0x15, 0x69, 0x64, 0x2d, 0x4d, 0x4e, 0x2d, 0x74, 0x6f, 0x2d, 0x53, 0x4e,
	0x2d, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x12, 0x58, 0x0a, 0x19, 0x69, 0x64,
	0x5f, 0x73, 0x5f, 0x6e, 0x67, 0x5f, 0x72, 0x61, 0x6e, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x75, 0x65,
	0x78, 0x6e, 0x5f, 0x61, 0x70, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x67, 0x52, 0x41, 0x6e, 0x6e, 0x6f, 0x64,
	0x65, 0x55, 0x65, 0x78, 0x6e, 0x41, 0x70, 0x69, 0x64, 0x48, 0x00, 0x52, 0x17, 0x69, 0x64, 0x2d,
	0x53, 0x2d, 0x4e, 0x47, 0x2d, 0x52, 0x41, 0x4e, 0x6e, 0x6f, 0x64, 0x65, 0x55, 0x45, 0x58, 0x6e,
	0x41, 0x50, 0x49, 0x44, 0x12, 0x57, 0x0a, 0x17, 0x69, 0x64, 0x5f, 0x65, 0x78, 0x70, 0x65, 0x63,
	0x74, 0x65, 0x64, 0x5f, 0x75, 0x65, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x75, 0x72, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e,
	0x45, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x55, 0x65, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69,
	0x6f, 0x75, 0x72, 0x48, 0x00, 0x52, 0x16, 0x69, 0x64, 0x2d, 0x45, 0x78, 0x70, 0x65, 0x63, 0x74,
	0x65, 0x64, 0x55, 0x45, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x75, 0x72, 0x12, 0x4f, 0x0a,
	0x16, 0x69, 0x64, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x73, 0x70,
	0x6c, 0x69, 0x74, 0x5f, 0x73, 0x72, 0x62, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e,
	0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x53, 0x72, 0x62,
	0x73, 0x54, 0x79, 0x70, 0x65, 0x73, 0x48, 0x00, 0x52, 0x14, 0x69, 0x64, 0x2d, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x53, 0x52, 0x42, 0x12, 0x3d,
	0x0a, 0x0b, 0x69, 0x64, 0x5f, 0x70, 0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6c,
	0x6f, 0x62, 0x61, 0x6c, 0x4e, 0x67, 0x52, 0x41, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x49, 0x44, 0x48,
	0x00, 0x52, 0x0a, 0x69, 0x64, 0x2d, 0x50, 0x43, 0x65, 0x6c, 0x6c, 0x49, 0x44, 0x12, 0x71, 0x0a,
	0x21, 0x69, 0x64, 0x5f, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x61, 0x63, 0x74, 0x5f,
	0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x65, 0x76,
	0x65, 0x6c, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e,
	0x76, 0x31, 0x2e, 0x44, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x41, 0x63, 0x74, 0x4e, 0x6f, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x48, 0x00,
	0x52, 0x1e, 0x69, 0x64, 0x2d, 0x44, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x41, 0x63, 0x74, 0x4e,
	0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x65, 0x76, 0x65, 0x6c,
	0x12, 0x43, 0x0a, 0x13, 0x69, 0x64, 0x5f, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65,
	0x5f, 0x64, 0x72, 0x62, 0x69, 0x64, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e,
	0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x72, 0x62, 0x4c, 0x69, 0x73, 0x74, 0x48,
	0x00, 0x52, 0x12, 0x69, 0x64, 0x2d, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x44,
	0x52, 0x42, 0x49, 0x44, 0x73, 0x12, 0x5f, 0x0a, 0x22, 0x69, 0x64, 0x5f, 0x73, 0x5f, 0x6e, 0x67,
	0x5f, 0x72, 0x61, 0x6e, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x69, 0x70, 0x64,
	0x61, 0x74, 0x61, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x75, 0x6c, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x10, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x69, 0x74, 0x52,
	0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x1f, 0x69, 0x64, 0x2d, 0x53, 0x2d, 0x4e, 0x47, 0x2d, 0x52,
	0x41, 0x4e, 0x6e, 0x6f, 0x64, 0x65, 0x4d, 0x61, 0x78, 0x49, 0x50, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x61, 0x74, 0x65, 0x2d, 0x55, 0x4c, 0x12, 0x5f, 0x0a, 0x22, 0x69, 0x64, 0x5f, 0x73, 0x5f, 0x6e,
	0x67, 0x5f, 0x72, 0x61, 0x6e, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x69, 0x70,
	0x64, 0x61, 0x74, 0x61, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x64, 0x6c, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x10, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x69, 0x74,
	0x52, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x1f, 0x69, 0x64, 0x2d, 0x53, 0x2d, 0x4e, 0x47, 0x2d,
	0x52, 0x41, 0x4e, 0x6e, 0x6f, 0x64, 0x65, 0x4d, 0x61, 0x78, 0x49, 0x50, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x61, 0x74, 0x65, 0x2d, 0x44, 0x4c, 0x12, 0x79, 0x0a, 0x23, 0x69, 0x64, 0x5f, 0x6c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x73, 0x6e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x12,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x4c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x6e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x48, 0x00, 0x52,
	0x21, 0x69, 0x64, 0x2d, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x4e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69,
	0x6e, 0x67, 0x12, 0x77, 0x0a, 0x23, 0x69, 0x64, 0x5f, 0x6d, 0x72, 0x5f, 0x64, 0x63, 0x5f, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x25, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x72, 0x44, 0x43, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x21, 0x69, 0x64, 0x2d, 0x4d, 0x52, 0x2d,
	0x44, 0x43, 0x2d, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x6f, 0x6f, 0x72, 0x64,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x42, 0x0a, 0x10, 0x69,
	0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x65, 0x64, 0x5f, 0x69, 0x6d, 0x65, 0x69, 0x73, 0x76, 0x18,
	0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e,
	0x4d, 0x61, 0x73, 0x6b, 0x65, 0x64, 0x49, 0x6d, 0x65, 0x69, 0x73, 0x76, 0x48, 0x00, 0x52, 0x0f,
	0x69, 0x64, 0x2d, 0x4d, 0x61, 0x73, 0x6b, 0x65, 0x64, 0x49, 0x4d, 0x45, 0x49, 0x53, 0x56, 0x12,
	0x4d, 0x0a, 0x14, 0x69, 0x64, 0x5f, 0x6e, 0x65, 0x5f, 0x64, 0x63, 0x5f, 0x74, 0x64, 0x6d, 0x5f,
	0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x65, 0x44, 0x43, 0x54, 0x44, 0x6d, 0x50,
	0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x48, 0x00, 0x52, 0x14, 0x69, 0x64, 0x2d, 0x4e, 0x45, 0x2d,
	0x44, 0x43, 0x2d, 0x54, 0x44, 0x4d, 0x2d, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x12, 0x7b,
	0x0a, 0x24, 0x69, 0x64, 0x5f, 0x73, 0x5f, 0x6e, 0x67, 0x5f, 0x72, 0x61, 0x6e, 0x6e, 0x6f, 0x64,
	0x65, 0x5f, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x72, 0x69, 0x67, 0x67,
	0x65, 0x72, 0x5f, 0x69, 0x6e, 0x64, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x78,
	0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x4e, 0x47, 0x52, 0x41, 0x6e, 0x6e, 0x6f, 0x64,
	0x65, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72,
	0x49, 0x6e, 0x64, 0x48, 0x00, 0x52, 0x24, 0x69, 0x64, 0x2d, 0x53, 0x2d, 0x4e, 0x47, 0x2d, 0x52,
	0x41, 0x4e, 0x6e, 0x6f, 0x64, 0x65, 0x2d, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2d,
	0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x2d, 0x49, 0x6e, 0x64, 0x12, 0x4b, 0x0a, 0x13, 0x69,
	0x64, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x65, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e,
	0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x65, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x48, 0x00, 0x52, 0x12, 0x69, 0x64, 0x2d, 0x54, 0x72, 0x61, 0x63, 0x65, 0x41, 0x63,
	0x74, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x7e, 0x0a, 0x26, 0x69, 0x64, 0x5f, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x66, 0x61, 0x73, 0x74, 0x5f, 0x6d, 0x63,
	0x67, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x76, 0x69, 0x61, 0x5f, 0x73, 0x72,
	0x62, 0x33, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x28, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e,
	0x76, 0x31, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x46, 0x61, 0x73, 0x74,
	0x4d, 0x63, 0x67, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x56, 0x69, 0x61, 0x53, 0x72,
	0x62, 0x33, 0x48, 0x00, 0x52, 0x22, 0x69, 0x64, 0x2d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x65, 0x64, 0x46, 0x61, 0x73, 0x74, 0x4d, 0x43, 0x47, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72,
	0x79, 0x56, 0x69, 0x61, 0x53, 0x52, 0x42, 0x33, 0x12, 0x58, 0x0a, 0x18, 0x69, 0x64, 0x5f, 0x75,
	0x65, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x5f, 0x63, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x79, 0x5f, 0x69, 0x64, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x78, 0x6e, 0x61,
	0x70, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x65, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x43, 0x61, 0x70, 0x61,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x49, 0x64, 0x48, 0x00, 0x52, 0x16, 0x69, 0x64, 0x2d, 0x55,
	0x45, 0x52, 0x61, 0x64, 0x69, 0x6f, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x49, 0x44, 0x12, 0x57, 0x0a, 0x18, 0x69, 0x64, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f,
	0x6e, 0x67, 0x5f, 0x72, 0x61, 0x6e, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x1a,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x4e, 0x67, 0x52, 0x41, 0x6e, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x44,
	0x48, 0x00, 0x52, 0x17, 0x69, 0x64, 0x2d, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e, 0x47, 0x2d,
	0x52, 0x41, 0x4e, 0x2d, 0x6e, 0x6f, 0x64, 0x65, 0x2d, 0x49, 0x44, 0x42, 0x1c, 0x0a, 0x1a, 0x73,
	0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x65, 0x73, 0x22, 0xb8, 0x01, 0x0a, 0x17, 0x53, 0x6e,
	0x6f, 0x64, 0x65, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x49, 0x45, 0x73, 0x12, 0x26, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x49, 0x65, 0x49, 0x44, 0x52, 0x03, 0x26, 0x69, 0x64, 0x12, 0x37, 0x0a,
	0x0b, 0x63, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x14, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x69,
	0x74, 0x69, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x0c, 0x26, 0x63, 0x72, 0x69, 0x74, 0x69,
	0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x3c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x6e, 0x6f, 0x64, 0x65, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x49, 0x45, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x26, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x22, 0x5b, 0x0a, 0x14, 0x53, 0x6e, 0x6f, 0x64, 0x65, 0x41, 0x64, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x43, 0x0a, 0x0c,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6e, 0x6f,
	0x64, 0x65, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x49, 0x45, 0x73, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x49, 0x45,
	0x73, 0x22, 0x66, 0x0a, 0x19, 0x50, 0x64, 0x75, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54,
	0x6f, 0x42, 0x65, 0x41, 0x64, 0x64, 0x65, 0x64, 0x41, 0x64, 0x64, 0x52, 0x65, 0x71, 0x12, 0x49,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e,
	0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x64, 0x75, 0x73, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x54, 0x6f, 0x42, 0x65, 0x41, 0x64, 0x64, 0x65, 0x64, 0x41, 0x64, 0x64, 0x52, 0x65,
	0x71, 0x49, 0x74, 0x65, 0x6d, 0x42, 0x0b, 0xfa, 0x42, 0x08, 0x92, 0x01, 0x05, 0x08, 0x01, 0x10,
	0x80, 0x02, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x53, 0x0a, 0x23, 0x50, 0x64, 0x75,
	0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x42, 0x65, 0x41, 0x64, 0x64, 0x65, 0x64,
	0x41, 0x64, 0x64, 0x52, 0x65, 0x71, 0x49, 0x74, 0x65, 0x6d, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73,
	0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xb1,
	0x04, 0x0a, 0x1d, 0x50, 0x64, 0x75, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x42,
	0x65, 0x41, 0x64, 0x64, 0x65, 0x64, 0x41, 0x64, 0x64, 0x52, 0x65, 0x71, 0x49, 0x74, 0x65, 0x6d,
	0x12, 0x3b, 0x0a, 0x0e, 0x70, 0x64, 0x75, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e,
	0x76, 0x31, 0x2e, 0x50, 0x64, 0x75, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x52,
	0x0c, 0x70, 0x64, 0x75, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x29, 0x0a,
	0x07, 0x73, 0x5f, 0x6e, 0x73, 0x73, 0x61, 0x69, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f,
	0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x4e, 0x53, 0x73, 0x61, 0x69, 0x52,
	0x07, 0x73, 0x2d, 0x4e, 0x53, 0x53, 0x41, 0x49, 0x12, 0x5f, 0x0a, 0x13, 0x73, 0x5f, 0x6e, 0x5f,
	0x70, 0x64, 0x75, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x6d, 0x62, 0x72, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e,
	0x50, 0x64, 0x75, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67,
	0x61, 0x74, 0x65, 0x4d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x42, 0x69, 0x74, 0x52, 0x61, 0x74,
	0x65, 0x48, 0x00, 0x52, 0x11, 0x73, 0x4e, 0x2d, 0x50, 0x44, 0x55, 0x53, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x41, 0x4d, 0x42, 0x52, 0x88, 0x01, 0x01, 0x12, 0x5b, 0x0a, 0x0d, 0x73, 0x6e, 0x5f,
	0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x30, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x64, 0x75, 0x73, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x65, 0x74,
	0x75, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x53, 0x4e, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74,
	0x65, 0x64, 0x48, 0x01, 0x52, 0x0d, 0x73, 0x6e, 0x2d, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61,
	0x74, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x5b, 0x0a, 0x0d, 0x6d, 0x6e, 0x5f, 0x74, 0x65, 0x72,
	0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e,
	0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x64, 0x75, 0x73, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x65, 0x74, 0x75, 0x70, 0x49,
	0x6e, 0x66, 0x6f, 0x4d, 0x4e, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x48,
	0x02, 0x52, 0x0d, 0x6d, 0x6e, 0x2d, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64,
	0x88, 0x01, 0x01, 0x12, 0x51, 0x0a, 0x0d, 0x69, 0x5f, 0x65, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x78, 0x6e, 0x61,
	0x70, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x64, 0x75, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54,
	0x6f, 0x42, 0x65, 0x41, 0x64, 0x64, 0x65, 0x64, 0x41, 0x64, 0x64, 0x52, 0x65, 0x71, 0x49, 0x74,
	0x65, 0x6d, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x52, 0x0c, 0x69, 0x45, 0x2d, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x73, 0x5f, 0x6e, 0x5f, 0x70,
	0x64, 0x75, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x6d, 0x62, 0x72, 0x42, 0x10,
	0x0a, 0x0e, 0x5f, 0x73, 0x6e, 0x5f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64,
	0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x6d, 0x6e, 0x5f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74,
	0x65, 0x64, 0x22, 0x9c, 0x0a, 0x0a, 0x27, 0x53, 0x6e, 0x6f, 0x64, 0x65, 0x41, 0x64, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x41, 0x63, 0x6b, 0x6e, 0x6f,
	0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x49, 0x45, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x58,
	0x0a, 0x19, 0x69, 0x64, 0x5f, 0x6d, 0x5f, 0x6e, 0x67, 0x5f, 0x72, 0x61, 0x6e, 0x6e, 0x6f, 0x64,
	0x65, 0x5f, 0x75, 0x65, 0x78, 0x6e, 0x5f, 0x61, 0x70, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x67, 0x52, 0x41,
	0x6e, 0x6e, 0x6f, 0x64, 0x65, 0x55, 0x65, 0x78, 0x6e, 0x41, 0x70, 0x69, 0x64, 0x48, 0x00, 0x52,
	0x17, 0x69, 0x64, 0x2d, 0x4d, 0x2d, 0x4e, 0x47, 0x2d, 0x52, 0x41, 0x4e, 0x6e, 0x6f, 0x64, 0x65,
	0x55, 0x45, 0x58, 0x6e, 0x41, 0x50, 0x49, 0x44, 0x12, 0x58, 0x0a, 0x19, 0x69, 0x64, 0x5f, 0x73,
	0x5f, 0x6e, 0x67, 0x5f, 0x72, 0x61, 0x6e, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x75, 0x65, 0x78, 0x6e,
	0x5f, 0x61, 0x70, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x78, 0x6e,
	0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x67, 0x52, 0x41, 0x6e, 0x6e, 0x6f, 0x64, 0x65, 0x55,
	0x65, 0x78, 0x6e, 0x41, 0x70, 0x69, 0x64, 0x48, 0x00, 0x52, 0x17, 0x69, 0x64, 0x2d, 0x53, 0x2d,
	0x4e, 0x47, 0x2d, 0x52, 0x41, 0x4e, 0x6e, 0x6f, 0x64, 0x65, 0x55, 0x45, 0x58, 0x6e, 0x41, 0x50,
	0x49, 0x44, 0x12, 0x82, 0x01, 0x0a, 0x28, 0x69, 0x64, 0x5f, 0x70, 0x64, 0x75, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x64, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x64,
	0x64, 0x65, 0x64, 0x5f, 0x61, 0x64, 0x64, 0x5f, 0x72, 0x65, 0x71, 0x5f, 0x61, 0x63, 0x6b, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e,
	0x50, 0x64, 0x75, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x41, 0x64, 0x6d, 0x69, 0x74, 0x74,
	0x65, 0x64, 0x41, 0x64, 0x64, 0x65, 0x64, 0x41, 0x64, 0x64, 0x52, 0x65, 0x71, 0x41, 0x63, 0x6b,
	0x48, 0x00, 0x52, 0x23, 0x69, 0x64, 0x2d, 0x50, 0x44, 0x55, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x41, 0x64, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x41, 0x64, 0x64, 0x65, 0x64, 0x41, 0x64,
	0x64, 0x52, 0x65, 0x71, 0x41, 0x63, 0x6b, 0x12, 0x7c, 0x0a, 0x26, 0x69, 0x64, 0x5f, 0x70, 0x64,
	0x75, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x6f, 0x74, 0x5f, 0x61, 0x64, 0x6d,
	0x69, 0x74, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x64, 0x64, 0x5f, 0x72, 0x65, 0x71, 0x5f, 0x61, 0x63,
	0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76,
	0x31, 0x2e, 0x50, 0x64, 0x75, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4e, 0x6f, 0x74, 0x41,
	0x64, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x41, 0x64, 0x64, 0x52, 0x65, 0x71, 0x41, 0x63, 0x6b,
	0x48, 0x00, 0x52, 0x21, 0x69, 0x64, 0x2d, 0x50, 0x44, 0x55, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x4e, 0x6f, 0x74, 0x41, 0x64, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x41, 0x64, 0x64, 0x52,
	0x65, 0x71, 0x41, 0x63, 0x6b, 0x12, 0x36, 0x0a, 0x15, 0x69, 0x64, 0x5f, 0x73, 0x6e, 0x5f, 0x74,
	0x6f, 0x5f, 0x6d, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x15, 0x69, 0x64, 0x2d, 0x53, 0x4e, 0x2d, 0x74, 0x6f,
	0x2d, 0x4d, 0x4e, 0x2d, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x12, 0x4d, 0x0a,
	0x15, 0x69, 0x64, 0x5f, 0x61, 0x64, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x5f, 0x73, 0x70, 0x6c,
	0x69, 0x74, 0x5f, 0x73, 0x72, 0x62, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x78,
	0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x53, 0x72, 0x62, 0x73,
	0x54, 0x79, 0x70, 0x65, 0x73, 0x48, 0x00, 0x52, 0x13, 0x69, 0x64, 0x2d, 0x61, 0x64, 0x6d, 0x69,
	0x74, 0x74, 0x65, 0x64, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x53, 0x52, 0x42, 0x12, 0x57, 0x0a, 0x17,
	0x69, 0x64, 0x5f, 0x72, 0x72, 0x63, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x69, 0x6e, 0x64,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e,
	0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x72, 0x63, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x16, 0x69,
	0x64, 0x2d, 0x52, 0x52, 0x43, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49, 0x6e, 0x64, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x60, 0x0a, 0x1a, 0x69, 0x64, 0x5f, 0x63, 0x72, 0x69, 0x74,
	0x69, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74,
	0x69, 0x63, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x78, 0x6e, 0x61, 0x70,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x44,
	0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x73, 0x48, 0x00, 0x52, 0x19, 0x69, 0x64,
	0x2d, 0x43, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x44, 0x69, 0x61, 0x67,
	0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x52, 0x0a, 0x1a, 0x69, 0x64, 0x5f, 0x6c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x73, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x78, 0x6e,
	0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x43, 0x47, 0x69, 0x48,
	0x00, 0x52, 0x18, 0x69, 0x64, 0x2d, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x4e, 0x12, 0x77, 0x0a, 0x23, 0x69,
	0x64, 0x5f, 0x6d, 0x72, 0x5f, 0x64, 0x63, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e,
	0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e,
	0x76, 0x31, 0x2e, 0x4d, 0x72, 0x44, 0x43, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43,
	0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x48,
	0x00, 0x52, 0x21, 0x69, 0x64, 0x2d, 0x4d, 0x52, 0x2d, 0x44, 0x43, 0x2d, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x7e, 0x0a, 0x26, 0x69, 0x64, 0x5f, 0x61, 0x76, 0x61, 0x69, 0x6c,
	0x61, 0x62, 0x6c, 0x65, 0x5f, 0x66, 0x61, 0x73, 0x74, 0x5f, 0x6d, 0x63, 0x67, 0x72, 0x65, 0x63,
	0x6f, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x76, 0x69, 0x61, 0x5f, 0x73, 0x72, 0x62, 0x33, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x28, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x41,
	0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x46, 0x61, 0x73, 0x74, 0x4d, 0x63, 0x67, 0x72,
	0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x56, 0x69, 0x61, 0x53, 0x72, 0x62, 0x33, 0x48, 0x00,
	0x52, 0x22, 0x69, 0x64, 0x2d, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x46, 0x61,
	0x73, 0x74, 0x4d, 0x43, 0x47, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x56, 0x69, 0x61,
	0x53, 0x52, 0x42, 0x33, 0x12, 0x80, 0x01, 0x0a, 0x26, 0x69, 0x64, 0x5f, 0x64, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x5f, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x61,
	0x74, 0x68, 0x5f, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x29, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e,
	0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67,
	0x50, 0x61, 0x74, 0x68, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x48, 0x00, 0x52, 0x23, 0x69, 0x64, 0x2d, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x46, 0x6f, 0x72,
	0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x74, 0x68, 0x41, 0x76, 0x61, 0x69, 0x6c,
	0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x42, 0x28, 0x0a, 0x26, 0x73, 0x6e, 0x6f, 0x64, 0x65,
	0x5f, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x5f, 0x61, 0x63, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x5f, 0x69, 0x65,
	0x73, 0x22, 0xce, 0x01, 0x0a, 0x22, 0x53, 0x6e, 0x6f, 0x64, 0x65, 0x41, 0x64, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x41, 0x63, 0x6b, 0x6e, 0x6f, 0x77,
	0x6c, 0x65, 0x64, 0x67, 0x65, 0x49, 0x45, 0x73, 0x12, 0x26, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x49, 0x65, 0x49, 0x44, 0x52, 0x03, 0x26, 0x69, 0x64,
	0x12, 0x37, 0x0a, 0x0b, 0x63, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x0c, 0x26, 0x63, 0x72,
	0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x47, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x6e, 0x6f, 0x64, 0x65, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x41, 0x63, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64,
	0x67, 0x65, 0x49, 0x45, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x26, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x22, 0x71, 0x0a, 0x1f, 0x53, 0x6e, 0x6f, 0x64, 0x65, 0x41, 0x64, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x41, 0x63, 0x6b, 0x6e, 0x6f, 0x77,
	0x6c, 0x65, 0x64, 0x67, 0x65, 0x12, 0x4e, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x5f, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x78, 0x6e,
	0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6e, 0x6f, 0x64, 0x65, 0x41, 0x64, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x41, 0x63, 0x6b, 0x6e, 0x6f, 0x77,
	0x6c, 0x65, 0x64, 0x67, 0x65, 0x49, 0x45, 0x73, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x49, 0x45, 0x73, 0x22, 0x74, 0x0a, 0x20, 0x50, 0x64, 0x75, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x41, 0x64, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x41, 0x64, 0x64, 0x65, 0x64,
	0x41, 0x64, 0x64, 0x52, 0x65, 0x71, 0x41, 0x63, 0x6b, 0x12, 0x50, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e,
	0x76, 0x31, 0x2e, 0x50, 0x64, 0x75, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x41, 0x64, 0x6d,
	0x69, 0x74, 0x74, 0x65, 0x64, 0x41, 0x64, 0x64, 0x65, 0x64, 0x41, 0x64, 0x64, 0x52, 0x65, 0x71,
	0x41, 0x63, 0x6b, 0x49, 0x74, 0x65, 0x6d, 0x42, 0x0b, 0xfa, 0x42, 0x08, 0x92, 0x01, 0x05, 0x08,
	0x01, 0x10, 0x80, 0x02, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x5a, 0x0a, 0x2a, 0x50,
	0x64, 0x75, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x41, 0x64, 0x6d, 0x69, 0x74, 0x74, 0x65,
	0x64, 0x41, 0x64, 0x64, 0x65, 0x64, 0x41, 0x64, 0x64, 0x52, 0x65, 0x71, 0x41, 0x63, 0x6b, 0x49,
	0x74, 0x65, 0x6d, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xab, 0x03, 0x0a, 0x24, 0x50, 0x64, 0x75, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x41, 0x64, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x41, 0x64,
	0x64, 0x65, 0x64, 0x41, 0x64, 0x64, 0x52, 0x65, 0x71, 0x41, 0x63, 0x6b, 0x49, 0x74, 0x65, 0x6d,
	0x12, 0x3b, 0x0a, 0x0e, 0x70, 0x64, 0x75, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e,
	0x76, 0x31, 0x2e, 0x50, 0x64, 0x75, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x52,
	0x0c, 0x70, 0x64, 0x75, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x63, 0x0a,
	0x0d, 0x73, 0x6e, 0x5f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x50,
	0x64, 0x75, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x53, 0x65, 0x74, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x53, 0x4e, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x48, 0x00,
	0x52, 0x0d, 0x73, 0x6e, 0x2d, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x88,
	0x01, 0x01, 0x12, 0x63, 0x0a, 0x0d, 0x6d, 0x6e, 0x5f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61,
	0x74, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x78, 0x6e, 0x61, 0x70,
	0x2e, 0x76, 0x31, 0x2e, 0x50, 0x64, 0x75, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x65, 0x74, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x4d, 0x4e, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61,
	0x74, 0x65, 0x64, 0x48, 0x01, 0x52, 0x0d, 0x6d, 0x6e, 0x2d, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e,
	0x61, 0x74, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x58, 0x0a, 0x0d, 0x69, 0x5f, 0x65, 0x5f, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33,
	0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x64, 0x75, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x41, 0x64, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x41, 0x64, 0x64, 0x65, 0x64,
	0x41, 0x64, 0x64, 0x52, 0x65, 0x71, 0x41, 0x63, 0x6b, 0x49, 0x74, 0x65, 0x6d, 0x45, 0x78, 0x74,
	0x49, 0x65, 0x73, 0x52, 0x0c, 0x69, 0x45, 0x2d, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x73, 0x6e, 0x5f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61,
	0x74, 0x65, 0x64, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x6d, 0x6e, 0x5f, 0x74, 0x65, 0x72, 0x6d, 0x69,
	0x6e, 0x61, 0x74, 0x65, 0x64, 0x22, 0x54, 0x0a, 0x24, 0x50, 0x64, 0x75, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x4e, 0x6f, 0x74, 0x41, 0x64, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x41, 0x64,
	0x64, 0x52, 0x65, 0x71, 0x41, 0x63, 0x6b, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x12, 0x2c, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x8e, 0x04, 0x0a, 0x1e,
	0x50, 0x64, 0x75, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4e, 0x6f, 0x74, 0x41, 0x64, 0x6d,
	0x69, 0x74, 0x74, 0x65, 0x64, 0x41, 0x64, 0x64, 0x52, 0x65, 0x71, 0x41, 0x63, 0x6b, 0x12, 0x96,
	0x01, 0x0a, 0x2f, 0x70, 0x64, 0x75, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x5f, 0x6e, 0x6f, 0x74, 0x5f, 0x61, 0x64, 0x6d,
	0x69, 0x74, 0x74, 0x65, 0x64, 0x5f, 0x73, 0x6e, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74,
	0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e,
	0x76, 0x31, 0x2e, 0x50, 0x64, 0x75, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x4e, 0x6f, 0x74, 0x41, 0x64, 0x6d, 0x69, 0x74, 0x74, 0x65,
	0x64, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x00, 0x52, 0x2b, 0x70, 0x64, 0x75, 0x53, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x4e, 0x6f, 0x74, 0x41,
	0x64, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x2d, 0x53, 0x4e, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e,
	0x61, 0x74, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x96, 0x01, 0x0a, 0x2f, 0x70, 0x64, 0x75, 0x5f,
	0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x73, 0x5f, 0x6e, 0x6f, 0x74, 0x5f, 0x61, 0x64, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x5f, 0x6d,
	0x6e, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2b, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x64, 0x75, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x4e,
	0x6f, 0x74, 0x41, 0x64, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x01,
	0x52, 0x2b, 0x70, 0x64, 0x75, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x73, 0x4e, 0x6f, 0x74, 0x41, 0x64, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64,
	0x2d, 0x4d, 0x4e, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x88, 0x01, 0x01,
	0x12, 0x52, 0x0a, 0x0d, 0x69, 0x5f, 0x65, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76,
	0x31, 0x2e, 0x50, 0x64, 0x75, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4e, 0x6f, 0x74, 0x41,
	0x64, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x41, 0x64, 0x64, 0x52, 0x65, 0x71, 0x41, 0x63, 0x6b,
	0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x52, 0x0c, 0x69, 0x45, 0x2d, 0x45, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x42, 0x32, 0x0a, 0x30, 0x5f, 0x70, 0x64, 0x75, 0x5f, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x5f, 0x6e,
	0x6f, 0x74, 0x5f, 0x61, 0x64, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x5f, 0x73, 0x6e, 0x74, 0x65,
	0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x42, 0x32, 0x0a, 0x30, 0x5f, 0x70, 0x64, 0x75,
	0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x73, 0x5f, 0x6e, 0x6f, 0x74, 0x5f, 0x61, 0x64, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x5f,
	0x6d, 0x6e, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x22, 0x8d, 0x03, 0x0a,
	0x22, 0x53, 0x6e, 0x6f, 0x64, 0x65, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x45, 0x73, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x58, 0x0a, 0x19, 0x69, 0x64, 0x5f, 0x6d, 0x5f, 0x6e, 0x67, 0x5f, 0x72,
	0x61, 0x6e, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x75, 0x65, 0x78, 0x6e, 0x5f, 0x61, 0x70, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31,
	0x2e, 0x4e, 0x67, 0x52, 0x41, 0x6e, 0x6e, 0x6f, 0x64, 0x65, 0x55, 0x65, 0x78, 0x6e, 0x41, 0x70,
	0x69, 0x64, 0x48, 0x00, 0x52, 0x17, 0x69, 0x64, 0x2d, 0x4d, 0x2d, 0x4e, 0x47, 0x2d, 0x52, 0x41,
	0x4e, 0x6e, 0x6f, 0x64, 0x65, 0x55, 0x45, 0x58, 0x6e, 0x41, 0x50, 0x49, 0x44, 0x12, 0x58, 0x0a,
	0x19, 0x69, 0x64, 0x5f, 0x73, 0x5f, 0x6e, 0x67, 0x5f, 0x72, 0x61, 0x6e, 0x6e, 0x6f, 0x64, 0x65,
	0x5f, 0x75, 0x65, 0x78, 0x6e, 0x5f, 0x61, 0x70, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x67, 0x52, 0x41, 0x6e,
	0x6e, 0x6f, 0x64, 0x65, 0x55, 0x65, 0x78, 0x6e, 0x41, 0x70, 0x69, 0x64, 0x48, 0x00, 0x52, 0x17,
	0x69, 0x64, 0x2d, 0x53, 0x2d, 0x4e, 0x47, 0x2d, 0x52, 0x41, 0x4e, 0x6e, 0x6f, 0x64, 0x65, 0x55,
	0x45, 0x58, 0x6e, 0x41, 0x50, 0x49, 0x44, 0x12, 0x2c, 0x0a, 0x08, 0x69, 0x64, 0x5f, 0x63, 0x61,
	0x75, 0x73, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x78, 0x6e, 0x61, 0x70,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x61, 0x75, 0x73, 0x65, 0x48, 0x00, 0x52, 0x08, 0x69, 0x64, 0x2d,
	0x43, 0x61, 0x75, 0x73, 0x65, 0x12, 0x60, 0x0a, 0x1a, 0x69, 0x64, 0x5f, 0x63, 0x72, 0x69, 0x74,
	0x69, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74,
	0x69, 0x63, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x78, 0x6e, 0x61, 0x70,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x44,
	0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x73, 0x48, 0x00, 0x52, 0x19, 0x69, 0x64,
	0x2d, 0x43, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x44, 0x69, 0x61, 0x67,
	0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x73, 0x42, 0x23, 0x0a, 0x21, 0x73, 0x6e, 0x6f, 0x64, 0x65,
	0x5f, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x5f, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x65, 0x73, 0x22, 0xc4, 0x01, 0x0a,
	0x1d, 0x53, 0x6e, 0x6f, 0x64, 0x65, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x45, 0x73, 0x12, 0x26,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x78, 0x6e, 0x61,
	0x70, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x49, 0x65, 0x49,
	0x44, 0x52, 0x03, 0x26, 0x69, 0x64, 0x12, 0x37, 0x0a, 0x0b, 0x63, 0x72, 0x69, 0x74, 0x69, 0x63,
	0x61, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x78, 0x6e,
	0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x69, 0x74,
	0x79, 0x52, 0x0c, 0x26, 0x63, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x12,
	0x42, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b,
	0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6e, 0x6f, 0x64, 0x65, 0x41, 0x64,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x6a,
	0x65, 0x63, 0x74, 0x49, 0x45, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x26, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x22, 0x67, 0x0a, 0x1a, 0x53, 0x6e, 0x6f, 0x64, 0x65, 0x41, 0x64, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x6a, 0x65, 0x63,
	0x74, 0x12, 0x49, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x69, 0x65,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x6e, 0x6f, 0x64, 0x65, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x45, 0x73, 0x52,
	0x0b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x49, 0x45, 0x73, 0x22, 0xe8, 0x02, 0x0a,
	0x24, 0x53, 0x6e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x49, 0x45, 0x73,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x58, 0x0a, 0x19, 0x69, 0x64, 0x5f, 0x6d, 0x5f, 0x6e, 0x67,
	0x5f, 0x72, 0x61, 0x6e, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x75, 0x65, 0x78, 0x6e, 0x5f, 0x61, 0x70,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e,
	0x76, 0x31, 0x2e, 0x4e, 0x67, 0x52, 0x41, 0x6e, 0x6e, 0x6f, 0x64, 0x65, 0x55, 0x65, 0x78, 0x6e,
	0x41, 0x70, 0x69, 0x64, 0x48, 0x00, 0x52, 0x17, 0x69, 0x64, 0x2d, 0x4d, 0x2d, 0x4e, 0x47, 0x2d,
	0x52, 0x41, 0x4e, 0x6e, 0x6f, 0x64, 0x65, 0x55, 0x45, 0x58, 0x6e, 0x41, 0x50, 0x49, 0x44, 0x12,
	0x58, 0x0a, 0x19, 0x69, 0x64, 0x5f, 0x73, 0x5f, 0x6e, 0x67, 0x5f, 0x72, 0x61, 0x6e, 0x6e, 0x6f,
	0x64, 0x65, 0x5f, 0x75, 0x65, 0x78, 0x6e, 0x5f, 0x61, 0x70, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x67, 0x52,
	0x41, 0x6e, 0x6e, 0x6f, 0x64, 0x65, 0x55, 0x65, 0x78, 0x6e, 0x41, 0x70, 0x69, 0x64, 0x48, 0x00,
	0x52, 0x17, 0x69, 0x64, 0x2d, 0x53, 0x2d, 0x4e, 0x47, 0x2d, 0x52, 0x41, 0x4e, 0x6e, 0x6f, 0x64,
	0x65, 0x55, 0x45, 0x58, 0x6e, 0x41, 0x50, 0x49, 0x44, 0x12, 0x66, 0x0a, 0x1d, 0x69, 0x64, 0x5f,
	0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x72, 0x65,
	0x63, 0x6f, 0x6e, 0x66, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x20, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x63, 0x6f, 0x6e, 0x66, 0x43, 0x6f, 0x6d,
	0x70, 0x6c, 0x48, 0x00, 0x52, 0x1b, 0x69, 0x64, 0x2d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x2d, 0x52, 0x65, 0x63, 0x6f, 0x6e, 0x66, 0x43, 0x6f, 0x6d, 0x70,
	0x6c, 0x42, 0x24, 0x0a, 0x22, 0x73, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c,
	0x65, 0x74, 0x65, 0x5f, 0x69, 0x65, 0x73, 0x22, 0xc8, 0x01, 0x0a, 0x1f, 0x53, 0x6e, 0x6f, 0x64,
	0x65, 0x52, 0x65, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x49, 0x45, 0x73, 0x12, 0x26, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76,
	0x31, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x49, 0x65, 0x49, 0x44, 0x52, 0x03,
	0x26, 0x69, 0x64, 0x12, 0x37, 0x0a, 0x0b, 0x63, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x69,
	0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x0c,
	0x26, 0x63, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x44, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x78, 0x6e,
	0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65,
	0x74, 0x65, 0x49, 0x45, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x26, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x22, 0x6b, 0x0a, 0x1c, 0x53, 0x6e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65,
	0x74, 0x65, 0x12, 0x4b, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x69,
	0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x6e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x49,
	0x45, 0x73, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x49, 0x45, 0x73, 0x22,
	0x4d, 0x0a, 0x1d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x65, 0x63, 0x6f, 0x6e, 0x66, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73,
	0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xd1,
	0x01, 0x0a, 0x17, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x65, 0x63, 0x6f, 0x6e, 0x66, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x12, 0x67, 0x0a, 0x1d, 0x72, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x72, 0x65, 0x63, 0x6f,
	0x6e, 0x66, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x23, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x6e, 0x66, 0x43, 0x6f,
	0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x1b, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x2d, 0x52, 0x65, 0x63, 0x6f, 0x6e, 0x66, 0x43, 0x6f, 0x6d, 0x70, 0x6c,
	0x65, 0x74, 0x65, 0x12, 0x4d, 0x0a, 0x0e, 0x69, 0x5f, 0x65, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x78, 0x6e,
	0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x65, 0x63, 0x6f, 0x6e, 0x66, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x45, 0x78, 0x74,
	0x49, 0x65, 0x73, 0x52, 0x0d, 0x69, 0x45, 0x2d, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x22, 0x50, 0x0a, 0x20, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x6e, 0x66, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65,
	0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x22, 0x9a, 0x03, 0x0a, 0x1a, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x6e, 0x66, 0x43, 0x6f, 0x6d, 0x70, 0x6c,
	0x65, 0x74, 0x65, 0x12, 0x7b, 0x0a, 0x22, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x66, 0x75, 0x6c, 0x6c,
	0x79, 0x5f, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x29, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x66, 0x75,
	0x6c, 0x6c, 0x79, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x48, 0x00, 0x52, 0x22, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x73, 0x75, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x66, 0x75, 0x6c, 0x6c, 0x79, 0x2d, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64,
	0x12, 0x84, 0x01, 0x0a, 0x26, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x5f, 0x6d,
	0x5f, 0x6e, 0x67, 0x5f, 0x72, 0x61, 0x6e, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2a, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x65,
	0x64, 0x62, 0x79, 0x4d, 0x4e, 0x47, 0x52, 0x41, 0x6e, 0x6e, 0x6f, 0x64, 0x65, 0x48, 0x00, 0x52,
	0x26, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x72,
	0x65, 0x6a, 0x65, 0x63, 0x74, 0x65, 0x64, 0x2d, 0x62, 0x79, 0x2d, 0x4d, 0x2d, 0x4e, 0x47, 0x2d,
	0x52, 0x41, 0x4e, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x57, 0x0a, 0x10, 0x63, 0x68, 0x6f, 0x69, 0x63,
	0x65, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x29, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x6e, 0x66, 0x43, 0x6f,
	0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x48, 0x00, 0x52, 0x10,
	0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x2d, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x42, 0x1f, 0x0a, 0x1d, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x6e, 0x66, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74,
	0x65, 0x22, 0x56, 0x0a, 0x26, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x66, 0x75, 0x6c, 0x6c, 0x79, 0x61, 0x70,
	0x70, 0x6c, 0x69, 0x65, 0x64, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x82, 0x02, 0x0a, 0x20, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x75, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x66, 0x75, 0x6c, 0x6c, 0x79, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x12, 0x5b,
	0x0a, 0x26, 0x6d, 0x5f, 0x6e, 0x67, 0x5f, 0x72, 0x61, 0x6e, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x74,
	0x6f, 0x5f, 0x73, 0x5f, 0x6e, 0x67, 0x5f, 0x72, 0x61, 0x6e, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x63,
	0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00,
	0x52, 0x26, 0x6d, 0x2d, 0x4e, 0x47, 0x2d, 0x52, 0x41, 0x4e, 0x4e, 0x6f, 0x64, 0x65, 0x2d, 0x74,
	0x6f, 0x2d, 0x53, 0x2d, 0x4e, 0x47, 0x2d, 0x52, 0x41, 0x4e, 0x4e, 0x6f, 0x64, 0x65, 0x2d, 0x43,
	0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x56, 0x0a, 0x0e, 0x69,
	0x5f, 0x65, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x75, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x66, 0x75, 0x6c, 0x6c, 0x79, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x45, 0x78,
	0x74, 0x49, 0x65, 0x73, 0x52, 0x0d, 0x69, 0x45, 0x2d, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x73, 0x42, 0x29, 0x0a, 0x27, 0x5f, 0x6d, 0x5f, 0x6e, 0x67, 0x5f, 0x72, 0x61, 0x6e,
	0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x74, 0x6f, 0x5f, 0x73, 0x5f, 0x6e, 0x67, 0x5f, 0x72, 0x61, 0x6e,
	0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x22, 0x57,
	0x0a, 0x27, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x72,
	0x65, 0x6a, 0x65, 0x63, 0x74, 0x65, 0x64, 0x62, 0x79, 0x4d, 0x4e, 0x47, 0x52, 0x41, 0x6e, 0x6e,
	0x6f, 0x64, 0x65, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xaa, 0x02, 0x0a, 0x21, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x65,
	0x64, 0x62, 0x79, 0x4d, 0x4e, 0x47, 0x52, 0x41, 0x6e, 0x6e, 0x6f, 0x64, 0x65, 0x12, 0x24, 0x0a,
	0x05, 0x63, 0x61, 0x75, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x78,
	0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x61, 0x75, 0x73, 0x65, 0x52, 0x05, 0x63, 0x61,
	0x75, 0x73, 0x65, 0x12, 0x5b, 0x0a, 0x26, 0x6d, 0x5f, 0x6e, 0x67, 0x5f, 0x72, 0x61, 0x6e, 0x6e,
	0x6f, 0x64, 0x65, 0x5f, 0x74, 0x6f, 0x5f, 0x73, 0x5f, 0x6e, 0x67, 0x5f, 0x72, 0x61, 0x6e, 0x6e,
	0x6f, 0x64, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x26, 0x6d, 0x2d, 0x4e, 0x47, 0x2d, 0x52, 0x41, 0x4e, 0x4e,
	0x6f, 0x64, 0x65, 0x2d, 0x74, 0x6f, 0x2d, 0x53, 0x2d, 0x4e, 0x47, 0x2d, 0x52, 0x41, 0x4e, 0x4e,
	0x6f, 0x64, 0x65, 0x2d, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x88, 0x01, 0x01,
	0x12, 0x57, 0x0a, 0x0e, 0x69, 0x5f, 0x65, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x65, 0x64, 0x62, 0x79, 0x4d, 0x4e, 0x47, 0x52, 0x41, 0x6e,
	0x6e, 0x6f, 0x64, 0x65, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x52, 0x0d, 0x69, 0x45, 0x2d, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x29, 0x0a, 0x27, 0x5f, 0x6d, 0x5f,
	0x6e, 0x67, 0x5f, 0x72, 0x61, 0x6e, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x74, 0x6f, 0x5f, 0x73, 0x5f,
	0x6e, 0x67, 0x5f, 0x72, 0x61, 0x6e, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61,
	0x69, 0x6e, 0x65, 0x72, 0x22, 0x80, 0x11, 0x0a, 0x20, 0x53, 0x6e, 0x6f, 0x64, 0x65, 0x4d, 0x6f,
	0x64, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x49, 0x45, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x58, 0x0a, 0x19, 0x69, 0x64, 0x5f,
	0x6d, 0x5f, 0x6e, 0x67, 0x5f, 0x72, 0x61, 0x6e, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x75, 0x65, 0x78,
	0x6e, 0x5f, 0x61, 0x70, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x78,
	0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x67, 0x52, 0x41, 0x6e, 0x6e, 0x6f, 0x64, 0x65,
	0x55, 0x65, 0x78, 0x6e, 0x41, 0x70, 0x69, 0x64, 0x48, 0x00, 0x52, 0x17, 0x69, 0x64, 0x2d, 0x4d,
	0x2d, 0x4e, 0x47, 0x2d, 0x52, 0x41, 0x4e, 0x6e, 0x6f, 0x64, 0x65, 0x55, 0x45, 0x58, 0x6e, 0x41,
	0x50, 0x49, 0x44, 0x12, 0x58, 0x0a, 0x19, 0x69, 0x64, 0x5f, 0x73, 0x5f, 0x6e, 0x67, 0x5f, 0x72,
	0x61, 0x6e, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x75, 0x65, 0x78, 0x6e, 0x5f, 0x61, 0x70, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31,
	0x2e, 0x4e, 0x67, 0x52, 0x41, 0x6e, 0x6e, 0x6f, 0x64, 0x65, 0x55, 0x65, 0x78, 0x6e, 0x41, 0x70,
	0x69, 0x64, 0x48, 0x00, 0x52, 0x17, 0x69, 0x64, 0x2d, 0x53, 0x2d, 0x4e, 0x47, 0x2d, 0x52, 0x41,
	0x4e, 0x6e, 0x6f, 0x64, 0x65, 0x55, 0x45, 0x58, 0x6e, 0x41, 0x50, 0x49, 0x44, 0x12, 0x2c, 0x0a,
	0x08, 0x69, 0x64, 0x5f, 0x63, 0x61, 0x75, 0x73, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0e, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x61, 0x75, 0x73, 0x65, 0x48,
	0x00, 0x52, 0x08, 0x69, 0x64, 0x2d, 0x43, 0x61, 0x75, 0x73, 0x65, 0x12, 0x5a, 0x0a, 0x18, 0x69,
	0x64, 0x5f, 0x70, 0x64, 0x63, 0x70, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x69, 0x6e, 0x64,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x64, 0x63, 0x70, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x17,
	0x69, 0x64, 0x2d, 0x50, 0x44, 0x43, 0x50, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x6e, 0x64,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x42, 0x0a, 0x10, 0x69, 0x64, 0x5f, 0x73, 0x65,
	0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x70, 0x6c, 0x6d, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6c, 0x6d, 0x6e,
	0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x48, 0x00, 0x52, 0x0f, 0x69, 0x64, 0x2d, 0x73,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x50, 0x4c, 0x4d, 0x4e, 0x12, 0x64, 0x0a, 0x1c, 0x69,
	0x64, 0x5f, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x72, 0x65, 0x73, 0x74, 0x72,
	0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x6f, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c,
	0x69, 0x73, 0x74, 0x48, 0x00, 0x52, 0x1a, 0x69, 0x64, 0x2d, 0x4d, 0x6f, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x79, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x5d, 0x0a, 0x19, 0x69, 0x64, 0x5f, 0x73, 0x63, 0x67, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x63, 0x67, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x48, 0x00, 0x52, 0x18, 0x69, 0x64, 0x2d, 0x53, 0x43, 0x47, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x12, 0x6c, 0x0a, 0x1f, 0x69, 0x64, 0x5f, 0x75, 0x65, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74,
	0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x73, 0x6e, 0x6d, 0x6f, 0x64, 0x5f, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x78, 0x6e, 0x61, 0x70,
	0x2e, 0x76, 0x31, 0x2e, 0x55, 0x65, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x49, 0x6e, 0x66,
	0x6f, 0x53, 0x4e, 0x6d, 0x6f, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52,
	0x1d, 0x69, 0x64, 0x2d, 0x55, 0x45, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x49, 0x6e, 0x66,
	0x6f, 0x2d, 0x53, 0x4e, 0x4d, 0x6f, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x36,
	0x0a, 0x15, 0x69, 0x64, 0x5f, 0x6d, 0x6e, 0x5f, 0x74, 0x6f, 0x5f, 0x73, 0x6e, 0x5f, 0x63, 0x6f,
	0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52,
	0x15, 0x69, 0x64, 0x2d, 0x4d, 0x4e, 0x2d, 0x74, 0x6f, 0x2d, 0x53, 0x4e, 0x2d, 0x43, 0x6f, 0x6e,
	0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x12, 0x4f, 0x0a, 0x16, 0x69, 0x64, 0x5f, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x5f, 0x73, 0x72, 0x62,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x53, 0x72, 0x62, 0x73, 0x54, 0x79, 0x70, 0x65, 0x73, 0x48,
	0x00, 0x52, 0x14, 0x69, 0x64, 0x2d, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x53,
	0x70, 0x6c, 0x69, 0x74, 0x53, 0x52, 0x42, 0x12, 0x5d, 0x0a, 0x1d, 0x69, 0x64, 0x5f, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x5f, 0x73, 0x72,
	0x62, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17,
	0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x53, 0x72,
	0x62, 0x73, 0x54, 0x79, 0x70, 0x65, 0x73, 0x48, 0x00, 0x52, 0x1b, 0x69, 0x64, 0x2d, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x53, 0x52, 0x42, 0x72,
	0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x12, 0x71, 0x0a, 0x21, 0x69, 0x64, 0x5f, 0x64, 0x65, 0x73,
	0x69, 0x72, 0x65, 0x64, 0x5f, 0x61, 0x63, 0x74, 0x5f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x24, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x73, 0x69,
	0x72, 0x65, 0x64, 0x41, 0x63, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x48, 0x00, 0x52, 0x1e, 0x69, 0x64, 0x2d, 0x44, 0x65,
	0x73, 0x69, 0x72, 0x65, 0x64, 0x41, 0x63, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x45, 0x0a, 0x14, 0x69, 0x64, 0x5f,
	0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x64, 0x72, 0x62, 0x69, 0x64,
	0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76,
	0x31, 0x2e, 0x44, 0x72, 0x62, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x00, 0x52, 0x13, 0x69, 0x64, 0x2d,
	0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x44, 0x52, 0x42, 0x49, 0x44, 0x73,
	0x12, 0x5f, 0x0a, 0x22, 0x69, 0x64, 0x5f, 0x73, 0x5f, 0x6e, 0x67, 0x5f, 0x72, 0x61, 0x6e, 0x6e,
	0x6f, 0x64, 0x65, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x69, 0x70, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x72,
	0x61, 0x74, 0x65, 0x5f, 0x75, 0x6c, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x78,
	0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x69, 0x74, 0x52, 0x61, 0x74, 0x65, 0x48, 0x00,
	0x52, 0x1f, 0x69, 0x64, 0x2d, 0x53, 0x2d, 0x4e, 0x47, 0x2d, 0x52, 0x41, 0x4e, 0x6e, 0x6f, 0x64,
	0x65, 0x4d, 0x61, 0x78, 0x49, 0x50, 0x44, 0x61, 0x74, 0x61, 0x52, 0x61, 0x74, 0x65, 0x2d, 0x55,
	0x4c, 0x12, 0x5f, 0x0a, 0x22, 0x69, 0x64, 0x5f, 0x73, 0x5f, 0x6e, 0x67, 0x5f, 0x72, 0x61, 0x6e,
	0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x69, 0x70, 0x64, 0x61, 0x74, 0x61, 0x5f,
	0x72, 0x61, 0x74, 0x65, 0x5f, 0x64, 0x6c, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e,
	0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x69, 0x74, 0x52, 0x61, 0x74, 0x65, 0x48,
	0x00, 0x52, 0x1f, 0x69, 0x64, 0x2d, 0x53, 0x2d, 0x4e, 0x47, 0x2d, 0x52, 0x41, 0x4e, 0x6e, 0x6f,
	0x64, 0x65, 0x4d, 0x61, 0x78, 0x49, 0x50, 0x44, 0x61, 0x74, 0x61, 0x52, 0x61, 0x74, 0x65, 0x2d,
	0x44, 0x4c, 0x12, 0x79, 0x0a, 0x23, 0x69, 0x64, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x6e,
	0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x27, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x6e, 0x72,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x48, 0x00, 0x52, 0x21, 0x69, 0x64, 0x2d, 0x4c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x4e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x77, 0x0a,
	0x23, 0x69, 0x64, 0x5f, 0x6d, 0x72, 0x5f, 0x64, 0x63, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x6e, 0x66, 0x6f, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x78, 0x6e, 0x61,
	0x70, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x72, 0x44, 0x43, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66,
	0x6f, 0x48, 0x00, 0x52, 0x21, 0x69, 0x64, 0x2d, 0x4d, 0x52, 0x2d, 0x44, 0x43, 0x2d, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x3d, 0x0a, 0x0b, 0x69, 0x64, 0x5f, 0x70, 0x63, 0x65,
	0x6c, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x78, 0x6e,
	0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x4e, 0x67, 0x52, 0x41,
	0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x49, 0x44, 0x48, 0x00, 0x52, 0x0a, 0x69, 0x64, 0x2d, 0x50, 0x43,
	0x65, 0x6c, 0x6c, 0x49, 0x44, 0x12, 0x4d, 0x0a, 0x14, 0x69, 0x64, 0x5f, 0x6e, 0x65, 0x5f, 0x64,
	0x63, 0x5f, 0x74, 0x64, 0x6d, 0x5f, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x18, 0x13, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x65,
	0x44, 0x43, 0x54, 0x44, 0x6d, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x48, 0x00, 0x52, 0x14,
	0x69, 0x64, 0x2d, 0x4e, 0x45, 0x2d, 0x44, 0x43, 0x2d, 0x54, 0x44, 0x4d, 0x2d, 0x50, 0x61, 0x74,
	0x74, 0x65, 0x72, 0x6e, 0x12, 0x7e, 0x0a, 0x26, 0x69, 0x64, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x65, 0x64, 0x5f, 0x66, 0x61, 0x73, 0x74, 0x5f, 0x6d, 0x63, 0x67, 0x72, 0x65, 0x63,
	0x6f, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x76, 0x69, 0x61, 0x5f, 0x73, 0x72, 0x62, 0x33, 0x18, 0x14,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x28, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x46, 0x61, 0x73, 0x74, 0x4d, 0x63, 0x67, 0x72,
	0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x56, 0x69, 0x61, 0x53, 0x72, 0x62, 0x33, 0x48, 0x00,
	0x52, 0x22, 0x69, 0x64, 0x2d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x46, 0x61,
	0x73, 0x74, 0x4d, 0x43, 0x47, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x56, 0x69, 0x61,
	0x53, 0x52, 0x42, 0x33, 0x12, 0x94, 0x01, 0x0a, 0x2e, 0x69, 0x64, 0x5f, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x66, 0x61, 0x73, 0x74, 0x5f, 0x6d, 0x63, 0x67, 0x72, 0x65,
	0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x76, 0x69, 0x61, 0x5f, 0x73, 0x72, 0x62, 0x33, 0x5f,
	0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2f, 0x2e,
	0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65,
	0x64, 0x46, 0x61, 0x73, 0x74, 0x4d, 0x63, 0x67, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79,
	0x56, 0x69, 0x61, 0x53, 0x72, 0x62, 0x33, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x48, 0x00,
	0x52, 0x29, 0x69, 0x64, 0x2d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x46, 0x61,
	0x73, 0x74, 0x4d, 0x43, 0x47, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x56, 0x69, 0x61,
	0x53, 0x52, 0x42, 0x33, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x12, 0x3e, 0x0a, 0x0e, 0x69,
	0x64, 0x5f, 0x73, 0x6e, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x65, 0x64, 0x18, 0x16, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6e,
	0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x65, 0x64, 0x48, 0x00, 0x52, 0x0e, 0x69, 0x64, 0x2d,
	0x53, 0x4e, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x65, 0x64, 0x12, 0x48, 0x0a, 0x11, 0x69,
	0x64, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x4e, 0x67, 0x52, 0x41, 0x6e, 0x6e, 0x6f, 0x64, 0x65,
	0x49, 0x44, 0x48, 0x00, 0x52, 0x0f, 0x69, 0x64, 0x2d, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x4e,
	0x6f, 0x64, 0x65, 0x49, 0x44, 0x42, 0x20, 0x0a, 0x1e, 0x73, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x6d,
	0x6f, 0x64, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x5f, 0x69, 0x65, 0x73, 0x22, 0xc0, 0x01, 0x0a, 0x1b, 0x53, 0x6e, 0x6f, 0x64,
	0x65, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x49, 0x45, 0x73, 0x12, 0x26, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x49, 0x65, 0x49, 0x44, 0x52, 0x03, 0x26, 0x69, 0x64, 0x12,
	0x37, 0x0a, 0x0b, 0x63, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x0c, 0x26, 0x63, 0x72, 0x69,
	0x74, 0x69, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x40, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x6e, 0x6f, 0x64, 0x65, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x45, 0x73, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x06, 0x26, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x63, 0x0a, 0x18, 0x53, 0x6e,
	0x6f, 0x64, 0x65, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x47, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x5f, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x78,
	0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6e, 0x6f, 0x64, 0x65, 0x4d, 0x6f, 0x64, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49,
	0x45, 0x73, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x49, 0x45, 0x73, 0x22,
	0x4f, 0x0a, 0x1f, 0x55, 0x65, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x49, 0x6e, 0x66, 0x6f,
	0x53, 0x4e, 0x6d, 0x6f, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x45, 0x78, 0x74, 0x49,
	0x65, 0x73, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x22, 0x97, 0x0a, 0x0a, 0x19, 0x55, 0x65, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x49, 0x6e,
	0x66, 0x6f, 0x53, 0x4e, 0x6d, 0x6f, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x5e,
	0x0a, 0x18, 0x75, 0x65, 0x5f, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x63, 0x61,
	0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x65, 0x73, 0x65, 0x63,
	0x75, 0x72, 0x69, 0x74, 0x79, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65,
	0x73, 0x48, 0x00, 0x52, 0x16, 0x75, 0x65, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x43,
	0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x88, 0x01, 0x01, 0x12, 0x60,
	0x0a, 0x19, 0x73, 0x5f, 0x6e, 0x67, 0x5f, 0x72, 0x61, 0x6e, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x73,
	0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x4e, 0x47, 0x52,
	0x41, 0x6e, 0x6e, 0x6f, 0x64, 0x65, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x4b, 0x65,
	0x79, 0x48, 0x01, 0x52, 0x18, 0x73, 0x2d, 0x6e, 0x67, 0x2d, 0x52, 0x41, 0x4e, 0x6e, 0x6f, 0x64,
	0x65, 0x2d, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x4b, 0x65, 0x79, 0x88, 0x01, 0x01,
	0x12, 0x5a, 0x0a, 0x14, 0x73, 0x5f, 0x6e, 0x67, 0x5f, 0x72, 0x61, 0x6e, 0x6e, 0x6f, 0x64, 0x65,
	0x5f, 0x75, 0x65, 0x5f, 0x61, 0x6d, 0x62, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x65, 0x61, 0x67, 0x67, 0x72, 0x65,
	0x67, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x42, 0x69, 0x74, 0x52, 0x61,
	0x74, 0x65, 0x48, 0x02, 0x52, 0x13, 0x73, 0x2d, 0x6e, 0x67, 0x2d, 0x52, 0x41, 0x4e, 0x6e, 0x6f,
	0x64, 0x65, 0x55, 0x45, 0x2d, 0x41, 0x4d, 0x42, 0x52, 0x88, 0x01, 0x01, 0x12, 0x70, 0x0a, 0x29,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x5f, 0x74, 0x6f, 0x5f, 0x72, 0x61, 0x74, 0x5f, 0x66, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x66, 0x73, 0x70, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x48, 0x03, 0x52, 0x24, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x54, 0x6f, 0x52, 0x61,
	0x74, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x88, 0x01, 0x01, 0x12, 0x78,
	0x0a, 0x22, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x70, 0x72,
	0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x78, 0x6e, 0x61,
	0x70, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x77, 0x65, 0x72, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x50,
	0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x48, 0x04, 0x52, 0x1e, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x4c, 0x61, 0x79, 0x65,
	0x72, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x88, 0x01, 0x01, 0x12, 0x79, 0x0a, 0x20, 0x70, 0x64, 0x75, 0x5f,
	0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x5f, 0x74, 0x6f, 0x5f, 0x62, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x64, 0x75,
	0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x54, 0x6f, 0x42, 0x65, 0x41, 0x64, 0x64, 0x65,
	0x64, 0x53, 0x4e, 0x6d, 0x6f, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4c, 0x69, 0x73,
	0x74, 0x48, 0x05, 0x52, 0x1b, 0x70, 0x64, 0x75, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x6f, 0x42, 0x65, 0x41, 0x64, 0x64, 0x65, 0x64,
	0x88, 0x01, 0x01, 0x12, 0x82, 0x01, 0x0a, 0x23, 0x70, 0x64, 0x75, 0x5f, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x74, 0x6f, 0x5f,
	0x62, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x30, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x64, 0x75, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x54, 0x6f, 0x42, 0x65, 0x4d, 0x6f, 0x64, 0x69, 0x66,
	0x69, 0x65, 0x64, 0x53, 0x4e, 0x6d, 0x6f, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4c,
	0x69, 0x73, 0x74, 0x48, 0x06, 0x52, 0x1e, 0x70, 0x64, 0x75, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x6f, 0x42, 0x65, 0x4d, 0x6f, 0x64,
	0x69, 0x66, 0x69, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x82, 0x01, 0x0a, 0x23, 0x70, 0x64, 0x75,
	0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x5f, 0x74, 0x6f, 0x5f, 0x62, 0x65, 0x5f, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x64,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31,
	0x2e, 0x50, 0x64, 0x75, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x54, 0x6f, 0x42, 0x65,
	0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x64, 0x53, 0x4e, 0x6d, 0x6f, 0x64, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x07, 0x52, 0x1e, 0x70, 0x64, 0x75, 0x53,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x6f,
	0x42, 0x65, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x4d, 0x0a,
	0x0d, 0x69, 0x5f, 0x65, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x09,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x55,
	0x65, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x53, 0x4e, 0x6d, 0x6f,
	0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x52, 0x0c,
	0x69, 0x45, 0x2d, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x1b, 0x0a, 0x19,
	0x5f, 0x75, 0x65, 0x5f, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x63, 0x61, 0x70,
	0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x42, 0x1c, 0x0a, 0x1a, 0x5f, 0x73, 0x5f,
	0x6e, 0x67, 0x5f, 0x72, 0x61, 0x6e, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x73, 0x65, 0x63, 0x75, 0x72,
	0x69, 0x74, 0x79, 0x5f, 0x6b, 0x65, 0x79, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x73, 0x5f, 0x6e, 0x67,
	0x5f, 0x72, 0x61, 0x6e, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x75, 0x65, 0x5f, 0x61, 0x6d, 0x62, 0x72,
	0x42, 0x2c, 0x0a, 0x2a, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x5f, 0x74, 0x6f, 0x5f, 0x72, 0x61,
	0x74, 0x5f, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x73, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x42, 0x25,
	0x0a, 0x23, 0x5f, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x70,
	0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x42, 0x23, 0x0a, 0x21, 0x5f, 0x70, 0x64, 0x75, 0x5f, 0x73, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x74,
	0x6f, 0x5f, 0x62, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x65, 0x64, 0x42, 0x26, 0x0a, 0x24, 0x5f, 0x70,
	0x64, 0x75, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x5f, 0x74, 0x6f, 0x5f, 0x62, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69,
	0x65, 0x64, 0x42, 0x26, 0x0a, 0x24, 0x5f, 0x70, 0x64, 0x75, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x74, 0x6f, 0x5f, 0x62,
	0x65, 0x5f, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x64, 0x22, 0x78, 0x0a, 0x24, 0x50, 0x64,
	0x75, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x54, 0x6f, 0x42, 0x65, 0x41, 0x64, 0x64,
	0x65, 0x64, 0x53, 0x4e, 0x6d, 0x6f, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x50, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x2d, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x64, 0x75, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x54, 0x6f, 0x42, 0x65, 0x41, 0x64, 0x64, 0x65, 0x64,
	0x53, 0x4e, 0x6d, 0x6f, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x74, 0x65, 0x6d,
	0x42, 0x0b, 0xfa, 0x42, 0x08, 0x92, 0x01, 0x05, 0x08, 0x01, 0x10, 0x80, 0x02, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x22, 0x5a, 0x0a, 0x2a, 0x50, 0x64, 0x75, 0x73, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x73, 0x54, 0x6f, 0x42, 0x65, 0x41, 0x64, 0x64, 0x65, 0x64, 0x53, 0x4e, 0x6d, 0x6f,
	0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x45, 0x78, 0x74, 0x49,
	0x65, 0x73, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x22, 0xbf, 0x04, 0x0a, 0x24, 0x50, 0x64, 0x75, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x54, 0x6f, 0x42, 0x65, 0x41, 0x64, 0x64, 0x65, 0x64, 0x53, 0x4e, 0x6d, 0x6f, 0x64, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x3b, 0x0a, 0x0e, 0x70, 0x64, 0x75,
	0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x64, 0x75, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x52, 0x0c, 0x70, 0x64, 0x75, 0x53, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x29, 0x0a, 0x07, 0x73, 0x5f, 0x6e, 0x73, 0x73, 0x61,
	0x69, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x4e, 0x53, 0x73, 0x61, 0x69, 0x52, 0x07, 0x73, 0x2d, 0x4e, 0x53, 0x53, 0x41,
	0x49, 0x12, 0x5f, 0x0a, 0x13, 0x73, 0x5f, 0x6e, 0x5f, 0x70, 0x64, 0x75, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x6d, 0x62, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a,
	0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x64, 0x75, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x78, 0x69,
	0x6d, 0x75, 0x6d, 0x42, 0x69, 0x74, 0x52, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x11, 0x73, 0x4e,
	0x2d, 0x50, 0x44, 0x55, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x41, 0x4d, 0x42, 0x52, 0x88,
	0x01, 0x01, 0x12, 0x5b, 0x0a, 0x0d, 0x73, 0x6e, 0x5f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61,
	0x74, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x78, 0x6e, 0x61, 0x70,
	0x2e, 0x76, 0x31, 0x2e, 0x50, 0x64, 0x75, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x65, 0x74, 0x75, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x53,
	0x4e, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x48, 0x01, 0x52, 0x0d, 0x73,
	0x6e, 0x2d, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12,
	0x5b, 0x0a, 0x0d, 0x6d, 0x6e, 0x5f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31,
	0x2e, 0x50, 0x64, 0x75, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x53, 0x65, 0x74, 0x75, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x4d, 0x4e, 0x74, 0x65,
	0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x48, 0x02, 0x52, 0x0d, 0x6d, 0x6e, 0x2d, 0x74,
	0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x58, 0x0a, 0x0d,
	0x69, 0x5f, 0x65, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x64,
	0x75, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x54, 0x6f, 0x42, 0x65, 0x41, 0x64, 0x64,
	0x65, 0x64, 0x53, 0x4e, 0x6d, 0x6f, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x74,
	0x65, 0x6d, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x52, 0x0c, 0x69, 0x45, 0x2d, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x73, 0x5f, 0x6e, 0x5f, 0x70,
	0x64, 0x75, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x6d, 0x62, 0x72, 0x42, 0x10,
	0x0a, 0x0e, 0x5f, 0x73, 0x6e, 0x5f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64,
	0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x6d, 0x6e, 0x5f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74,
	0x65, 0x64, 0x22, 0x7e, 0x0a, 0x27, 0x50, 0x64, 0x75, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x73, 0x54, 0x6f, 0x42, 0x65, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x53, 0x4e, 0x6d,
	0x6f, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x53, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x78,
	0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x64, 0x75, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x54, 0x6f, 0x42, 0x65, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x53, 0x4e,
	0x6d, 0x6f, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x42, 0x0b,
	0xfa, 0x42, 0x08, 0x92, 0x01, 0x05, 0x08, 0x01, 0x10, 0x80, 0x02, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x22, 0xac, 0x02, 0x0a, 0x36, 0x50, 0x64, 0x75, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x54, 0x6f, 0x42, 0x65, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x53, 0x4e,
	0x6d, 0x6f, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x45, 0x78,
	0x74, 0x49, 0x65, 0x73, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x31, 0x0a,
	0x0a, 0x69, 0x64, 0x5f, 0x73, 0x5f, 0x6e, 0x73, 0x73, 0x61, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0f, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x4e, 0x53, 0x73,
	0x61, 0x69, 0x48, 0x00, 0x52, 0x0a, 0x69, 0x64, 0x2d, 0x53, 0x2d, 0x4e, 0x53, 0x53, 0x41, 0x49,
	0x12, 0x85, 0x01, 0x0a, 0x2b, 0x69, 0x64, 0x5f, 0x70, 0x64, 0x75, 0x73, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x5f, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x75, 0x65, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x75, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31,
	0x2e, 0x45, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x55, 0x65, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x79, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x75, 0x72, 0x48, 0x00, 0x52, 0x28,
	0x69, 0x64, 0x2d, 0x50, 0x44, 0x55, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x70,
	0x65, 0x63, 0x74, 0x65, 0x64, 0x55, 0x45, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x42,
	0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x75, 0x72, 0x42, 0x37, 0x0a, 0x35, 0x70, 0x64, 0x75, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x74, 0x6f, 0x5f, 0x62, 0x65, 0x5f, 0x6d, 0x6f,
	0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x5f, 0x73, 0x6e, 0x6d, 0x6f, 0x64, 0x5f, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x65, 0x78, 0x74, 0x5f, 0x69, 0x65,
	0x73, 0x22, 0xf0, 0x01, 0x0a, 0x2d, 0x50, 0x64, 0x75, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x73, 0x54, 0x6f, 0x42, 0x65, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x53, 0x4e, 0x6d,
	0x6f, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x45, 0x78, 0x74,
	0x49, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x49, 0x65, 0x49, 0x44, 0x52, 0x03, 0x26, 0x69, 0x64, 0x12, 0x37, 0x0a, 0x0b, 0x63,
	0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x14, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x69, 0x74, 0x69,
	0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x0c, 0x26, 0x63, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61,
	0x6c, 0x69, 0x74, 0x79, 0x12, 0x5e, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76,
	0x31, 0x2e, 0x50, 0x64, 0x75, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x54, 0x6f, 0x42,
	0x65, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x53, 0x4e, 0x6d, 0x6f, 0x64, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x26, 0x45, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x22, 0xa8, 0x04, 0x0a, 0x27, 0x50, 0x64, 0x75, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x54, 0x6f, 0x42, 0x65, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64,
	0x53, 0x4e, 0x6d, 0x6f, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x74, 0x65, 0x6d,
	0x12, 0x3b, 0x0a, 0x0e, 0x70, 0x64, 0x75, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e,
	0x76, 0x31, 0x2e, 0x50, 0x64, 0x75, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x52,
	0x0c, 0x70, 0x64, 0x75, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x5f, 0x0a,
	0x13, 0x73, 0x5f, 0x6e, 0x5f, 0x70, 0x64, 0x75, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f,
	0x61, 0x6d, 0x62, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x78, 0x6e, 0x61,
	0x70, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x64, 0x75, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x41,
	0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x42,
	0x69, 0x74, 0x52, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x11, 0x73, 0x4e, 0x2d, 0x50, 0x44, 0x55,
	0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x41, 0x4d, 0x42, 0x52, 0x88, 0x01, 0x01, 0x12, 0x62,
	0x0a, 0x0d, 0x73, 0x6e, 0x5f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e,
	0x50, 0x64, 0x75, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e,
	0x66, 0x6f, 0x53, 0x4e, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x48, 0x01,
	0x52, 0x0d, 0x73, 0x6e, 0x2d, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x88,
	0x01, 0x01, 0x12, 0x62, 0x0a, 0x0d, 0x6d, 0x6e, 0x5f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61,
	0x74, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x78, 0x6e, 0x61, 0x70,
	0x2e, 0x76, 0x31, 0x2e, 0x50, 0x64, 0x75, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x4d, 0x4e, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74,
	0x65, 0x64, 0x48, 0x02, 0x52, 0x0d, 0x6d, 0x6e, 0x2d, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61,
	0x74, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x5b, 0x0a, 0x0d, 0x69, 0x5f, 0x65, 0x5f, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x36, 0x2e,
	0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x64, 0x75, 0x73, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x73, 0x54, 0x6f, 0x42, 0x65, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x53,
	0x4e, 0x6d, 0x6f, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x45,
	0x78, 0x74, 0x49, 0x65, 0x73, 0x52, 0x0c, 0x69, 0x45, 0x2d, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x73, 0x5f, 0x6e, 0x5f, 0x70, 0x64, 0x75, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x6d, 0x62, 0x72, 0x42, 0x10, 0x0a, 0x0e, 0x5f,
	0x73, 0x6e, 0x5f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x42, 0x10, 0x0a,
	0x0e, 0x5f, 0x6d, 0x6e, 0x5f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x22,
	0x5d, 0x0a, 0x2d, 0x50, 0x64, 0x75, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x54, 0x6f,
	0x42, 0x65, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x64, 0x53, 0x4e, 0x6d, 0x6f, 0x64, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73,
	0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xee,
	0x01, 0x0a, 0x27, 0x50, 0x64, 0x75, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x54, 0x6f,
	0x42, 0x65, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x64, 0x53, 0x4e, 0x6d, 0x6f, 0x64, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x51, 0x0a, 0x10, 0x70, 0x64,
	0x75, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x50,
	0x64, 0x75, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x77, 0x69, 0x74,
	0x68, 0x43, 0x61, 0x75, 0x73, 0x65, 0x48, 0x00, 0x52, 0x10, 0x70, 0x64, 0x75, 0x2d, 0x73, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2d, 0x6c, 0x69, 0x73, 0x74, 0x88, 0x01, 0x01, 0x12, 0x5b, 0x0a,
	0x0d, 0x69, 0x5f, 0x65, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x50,
	0x64, 0x75, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x54, 0x6f, 0x42, 0x65, 0x52, 0x65,
	0x6c, 0x65, 0x61, 0x73, 0x65, 0x64, 0x53, 0x4e, 0x6d, 0x6f, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x52, 0x0c, 0x69, 0x45,
	0x2d, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x70,
	0x64, 0x75, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x22,
	0x97, 0x0d, 0x0a, 0x2b, 0x53, 0x6e, 0x6f, 0x64, 0x65, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x41, 0x63, 0x6b, 0x6e,
	0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x49, 0x45, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x58, 0x0a, 0x19, 0x69, 0x64, 0x5f, 0x6d, 0x5f, 0x6e, 0x67, 0x5f, 0x72, 0x61, 0x6e, 0x6e, 0x6f,
	0x64, 0x65, 0x5f, 0x75, 0x65, 0x78, 0x6e, 0x5f, 0x61, 0x70, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x67, 0x52,
	0x41, 0x6e, 0x6e, 0x6f, 0x64, 0x65, 0x55, 0x65, 0x78, 0x6e, 0x41, 0x70, 0x69, 0x64, 0x48, 0x00,
	0x52, 0x17, 0x69, 0x64, 0x2d, 0x4d, 0x2d, 0x4e, 0x47, 0x2d, 0x52, 0x41, 0x4e, 0x6e, 0x6f, 0x64,
	0x65, 0x55, 0x45, 0x58, 0x6e, 0x41, 0x50, 0x49, 0x44, 0x12, 0x58, 0x0a, 0x19, 0x69, 0x64, 0x5f,
	0x73, 0x5f, 0x6e, 0x67, 0x5f, 0x72, 0x61, 0x6e, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x75, 0x65, 0x78,
	0x6e, 0x5f, 0x61, 0x70, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x78,
	0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x67, 0x52, 0x41, 0x6e, 0x6e, 0x6f, 0x64, 0x65,
	0x55, 0x65, 0x78, 0x6e, 0x41, 0x70, 0x69, 0x64, 0x48, 0x00, 0x52, 0x17, 0x69, 0x64, 0x2d, 0x53,
	0x2d, 0x4e, 0x47, 0x2d, 0x52, 0x41, 0x4e, 0x6e, 0x6f, 0x64, 0x65, 0x55, 0x45, 0x58, 0x6e, 0x41,
	0x50, 0x49, 0x44, 0x12, 0x7e, 0x0a, 0x25, 0x69, 0x64, 0x5f, 0x70, 0x64, 0x75, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x64, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x5f, 0x73, 0x6e,
	0x6d, 0x6f, 0x64, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x28, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x64, 0x75,
	0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x41, 0x64, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x53,
	0x4e, 0x6d, 0x6f, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x23,
	0x69, 0x64, 0x2d, 0x50, 0x44, 0x55, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x41, 0x64, 0x6d,
	0x69, 0x74, 0x74, 0x65, 0x64, 0x2d, 0x53, 0x4e, 0x4d, 0x6f, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x88, 0x01, 0x0a, 0x29, 0x69, 0x64, 0x5f, 0x70, 0x64, 0x75, 0x73, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x6f, 0x74, 0x5f, 0x61, 0x64, 0x6d, 0x69, 0x74, 0x74,
	0x65, 0x64, 0x5f, 0x73, 0x6e, 0x6d, 0x6f, 0x64, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76,
	0x31, 0x2e, 0x50, 0x64, 0x75, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4e, 0x6f, 0x74, 0x41,
	0x64, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x53, 0x4e, 0x6d, 0x6f, 0x64, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x26, 0x69, 0x64, 0x2d, 0x50, 0x44, 0x55, 0x53, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4e, 0x6f, 0x74, 0x41, 0x64, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64,
	0x2d, 0x53, 0x4e, 0x4d, 0x6f, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x36,
	0x0a, 0x15, 0x69, 0x64, 0x5f, 0x73, 0x6e, 0x5f, 0x74, 0x6f, 0x5f, 0x6d, 0x6e, 0x5f, 0x63, 0x6f,
	0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52,
	0x15, 0x69, 0x64, 0x2d, 0x53, 0x4e, 0x2d, 0x74, 0x6f, 0x2d, 0x4d, 0x4e, 0x2d, 0x43, 0x6f, 0x6e,
	0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x12, 0x4d, 0x0a, 0x15, 0x69, 0x64, 0x5f, 0x61, 0x64, 0x6d,
	0x69, 0x74, 0x74, 0x65, 0x64, 0x5f, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x5f, 0x73, 0x72, 0x62, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x70, 0x6c, 0x69, 0x74, 0x53, 0x72, 0x62, 0x73, 0x54, 0x79, 0x70, 0x65, 0x73, 0x48, 0x00,
	0x52, 0x13, 0x69, 0x64, 0x2d, 0x61, 0x64, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x53, 0x70, 0x6c,
	0x69, 0x74, 0x53, 0x52, 0x42, 0x12, 0x5b, 0x0a, 0x1c, 0x69, 0x64, 0x5f, 0x61, 0x64, 0x6d, 0x69,
	0x74, 0x74, 0x65, 0x64, 0x5f, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x5f, 0x73, 0x72, 0x62, 0x72, 0x65,
	0x6c, 0x65, 0x61, 0x73, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x78, 0x6e,
	0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x53, 0x72, 0x62, 0x73, 0x54,
	0x79, 0x70, 0x65, 0x73, 0x48, 0x00, 0x52, 0x1a, 0x69, 0x64, 0x2d, 0x61, 0x64, 0x6d, 0x69, 0x74,
	0x74, 0x65, 0x64, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x53, 0x52, 0x42, 0x72, 0x65, 0x6c, 0x65, 0x61,
	0x73, 0x65, 0x12, 0x60, 0x0a, 0x1a, 0x69, 0x64, 0x5f, 0x63, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61,
	0x6c, 0x69, 0x74, 0x79, 0x5f, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x73,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x44, 0x69, 0x61, 0x67,
	0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x73, 0x48, 0x00, 0x52, 0x19, 0x69, 0x64, 0x2d, 0x43, 0x72,
	0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73,
	0x74, 0x69, 0x63, 0x73, 0x12, 0x52, 0x0a, 0x1a, 0x69, 0x64, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x73, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e,
	0x76, 0x31, 0x2e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x43, 0x47, 0x69, 0x48, 0x00, 0x52, 0x18,
	0x69, 0x64, 0x2d, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x4e, 0x12, 0x77, 0x0a, 0x23, 0x69, 0x64, 0x5f, 0x6d,
	0x72, 0x5f, 0x64, 0x63, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x63, 0x6f,
	0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e,
	0x4d, 0x72, 0x44, 0x43, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x6f, 0x6f, 0x72,
	0x64, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x21,
	0x69, 0x64, 0x2d, 0x4d, 0x52, 0x2d, 0x44, 0x43, 0x2d, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x91, 0x01, 0x0a, 0x2c, 0x69, 0x64, 0x5f, 0x70, 0x64, 0x75, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64,
	0x69, 0x6e, 0x67, 0x5f, 0x73, 0x6e, 0x6d, 0x6f, 0x64, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e,
	0x76, 0x31, 0x2e, 0x50, 0x64, 0x75, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74,
	0x61, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x4e, 0x6d, 0x6f, 0x64,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x29, 0x69, 0x64, 0x2d, 0x50,
	0x44, 0x55, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x46, 0x6f, 0x72,
	0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x2d, 0x53, 0x4e, 0x4d, 0x6f, 0x64, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x57, 0x0a, 0x17, 0x69, 0x64, 0x5f, 0x72, 0x72, 0x63, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31,
	0x2e, 0x52, 0x72, 0x63, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x16, 0x69, 0x64, 0x2d, 0x52, 0x52, 0x43, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x7e,
	0x0a, 0x26, 0x69, 0x64, 0x5f, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x66,
	0x61, 0x73, 0x74, 0x5f, 0x6d, 0x63, 0x67, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x5f,
	0x76, 0x69, 0x61, 0x5f, 0x73, 0x72, 0x62, 0x33, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x28,
	0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62,
	0x6c, 0x65, 0x46, 0x61, 0x73, 0x74, 0x4d, 0x63, 0x67, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72,
	0x79, 0x56, 0x69, 0x61, 0x53, 0x72, 0x62, 0x33, 0x48, 0x00, 0x52, 0x22, 0x69, 0x64, 0x2d, 0x41,
	0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x46, 0x61, 0x73, 0x74, 0x4d, 0x43, 0x47, 0x52,
	0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x56, 0x69, 0x61, 0x53, 0x52, 0x42, 0x33, 0x12, 0x78,
	0x0a, 0x24, 0x69, 0x64, 0x5f, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x66, 0x61, 0x73,
	0x74, 0x5f, 0x6d, 0x63, 0x67, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x76, 0x69,
	0x61, 0x5f, 0x73, 0x72, 0x62, 0x33, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x78,
	0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x46, 0x61,
	0x73, 0x74, 0x4d, 0x63, 0x67, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x56, 0x69, 0x61,
	0x53, 0x72, 0x62, 0x33, 0x48, 0x00, 0x52, 0x20, 0x69, 0x64, 0x2d, 0x52, 0x65, 0x6c, 0x65, 0x61,
	0x73, 0x65, 0x46, 0x61, 0x73, 0x74, 0x4d, 0x43, 0x47, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72,
	0x79, 0x56, 0x69, 0x61, 0x53, 0x52, 0x42, 0x33, 0x12, 0x80, 0x01, 0x0a, 0x26, 0x69, 0x64, 0x5f,
	0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x5f, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e,
	0x67, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x29, 0x2e, 0x78, 0x6e, 0x61, 0x70,
	0x2e, 0x76, 0x31, 0x2e, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72,
	0x64, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x74, 0x68, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x48, 0x00, 0x52, 0x23, 0x69, 0x64, 0x2d, 0x44, 0x69, 0x72, 0x65, 0x63,
	0x74, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x74, 0x68, 0x41,
	0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x42, 0x2c, 0x0a, 0x2a, 0x73,
	0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x61, 0x63, 0x6b, 0x6e, 0x6f, 0x77,
	0x6c, 0x65, 0x64, 0x67, 0x65, 0x5f, 0x69, 0x65, 0x73, 0x22, 0xd6, 0x01, 0x0a, 0x26, 0x53, 0x6e,
	0x6f, 0x64, 0x65, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x41, 0x63, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67,
	0x65, 0x49, 0x45, 0x73, 0x12, 0x26, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x49, 0x65, 0x49, 0x44, 0x52, 0x03, 0x26, 0x69, 0x64, 0x12, 0x37, 0x0a, 0x0b,
	0x63, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x14, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x69, 0x74,
	0x69, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x0c, 0x26, 0x63, 0x72, 0x69, 0x74, 0x69, 0x63,
	0x61, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x4b, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x6e, 0x6f, 0x64, 0x65, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x41, 0x63, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64,
	0x67, 0x65, 0x49, 0x45, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x26, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x22, 0x79, 0x0a, 0x23, 0x53, 0x6e, 0x6f, 0x64, 0x65, 0x4d, 0x6f, 0x64, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x41, 0x63,
	0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x12, 0x52, 0x0a, 0x0c, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2f, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6e, 0x6f, 0x64, 0x65, 0x4d,
	0x6f, 0x64, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x41, 0x63, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x49, 0x45, 0x73,
	0x52, 0x0b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x49, 0x45, 0x73, 0x22, 0x55, 0x0a,
	0x25, 0x50, 0x64, 0x75, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x41, 0x64, 0x6d, 0x69, 0x74,
	0x74, 0x65, 0x64, 0x53, 0x4e, 0x6d, 0x6f, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x22, 0xd4, 0x05, 0x0a, 0x1f, 0x50, 0x64, 0x75, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x41, 0x64, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x53, 0x4e, 0x6d, 0x6f, 0x64,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x90, 0x01, 0x0a, 0x2a, 0x70, 0x64, 0x75,
	0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x73, 0x5f, 0x61, 0x64, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x6f, 0x5f, 0x62,
	0x65, 0x5f, 0x61, 0x64, 0x64, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e,
	0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x64, 0x75, 0x73, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x41, 0x64, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x54, 0x6f, 0x42, 0x65, 0x41, 0x64,
	0x64, 0x65, 0x64, 0x53, 0x6e, 0x6d, 0x6f, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x48, 0x00, 0x52, 0x24, 0x70, 0x64, 0x75, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x41, 0x64, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x54,
	0x6f, 0x42, 0x65, 0x41, 0x64, 0x64, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x99, 0x01, 0x0a, 0x2d,
	0x70, 0x64, 0x75, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x73, 0x5f, 0x61, 0x64, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x5f, 0x74,
	0x6f, 0x5f, 0x62, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x64,
	0x75, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x41, 0x64, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64,
	0x54, 0x6f, 0x42, 0x65, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x53, 0x6e, 0x6d, 0x6f,
	0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x01, 0x52, 0x27, 0x70, 0x64, 0x75,
	0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73,
	0x41, 0x64, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x54, 0x6f, 0x42, 0x65, 0x4d, 0x6f, 0x64, 0x69,
	0x66, 0x69, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x99, 0x01, 0x0a, 0x2d, 0x70, 0x64, 0x75, 0x5f,
	0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x73, 0x5f, 0x61, 0x64, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x6f, 0x5f, 0x62, 0x65,
	0x5f, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x34, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x64, 0x75, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x41, 0x64, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x54, 0x6f, 0x42, 0x65,
	0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x64, 0x53, 0x6e, 0x6d, 0x6f, 0x64, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x02, 0x52, 0x27, 0x70, 0x64, 0x75, 0x53, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x41, 0x64, 0x6d, 0x69,
	0x74, 0x74, 0x65, 0x64, 0x54, 0x6f, 0x42, 0x65, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x64,
	0x88, 0x01, 0x01, 0x12, 0x53, 0x0a, 0x0d, 0x69, 0x5f, 0x65, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x78, 0x6e, 0x61,
	0x70, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x64, 0x75, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x41,
	0x64, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x53, 0x4e, 0x6d, 0x6f, 0x64, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x52, 0x0c, 0x69, 0x45, 0x2d, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x2d, 0x0a, 0x2b, 0x5f, 0x70, 0x64, 0x75,
	0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x73, 0x5f, 0x61, 0x64, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x6f, 0x5f, 0x62,
	0x65, 0x5f, 0x61, 0x64, 0x64, 0x65, 0x64, 0x42, 0x30, 0x0a, 0x2e, 0x5f, 0x70, 0x64, 0x75, 0x5f,
	0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x73, 0x5f, 0x61, 0x64, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x6f, 0x5f, 0x62, 0x65,
	0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x42, 0x30, 0x0a, 0x2e, 0x5f, 0x70, 0x64,
	0x75, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x73, 0x5f, 0x61, 0x64, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x6f, 0x5f,
	0x62, 0x65, 0x5f, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x64, 0x22, 0x84, 0x01, 0x0a, 0x28,
	0x50, 0x64, 0x75, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x41, 0x64, 0x6d, 0x69, 0x74, 0x74,
	0x65, 0x64, 0x54, 0x6f, 0x42, 0x65, 0x41, 0x64, 0x64, 0x65, 0x64, 0x53, 0x6e, 0x6d, 0x6f, 0x64,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x58, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76,
	0x31, 0x2e, 0x50, 0x64, 0x75, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x41, 0x64, 0x6d, 0x69,
	0x74, 0x74, 0x65, 0x64, 0x54, 0x6f, 0x42, 0x65, 0x41, 0x64, 0x64, 0x65, 0x64, 0x53, 0x6e, 0x6d,
	0x6f, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x42, 0x0b,
	0xfa, 0x42, 0x08, 0x92, 0x01, 0x05, 0x08, 0x01, 0x10, 0x80, 0x02, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x22, 0x62, 0x0a, 0x32, 0x50, 0x64, 0x75, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x41, 0x64, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x54, 0x6f, 0x42, 0x65, 0x41, 0x64, 0x64, 0x65,
	0x64, 0x53, 0x6e, 0x6d, 0x6f, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x49, 0x74,
	0x65, 0x6d, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xbb, 0x03, 0x0a, 0x2c, 0x50, 0x64, 0x75, 0x73, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x41, 0x64, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x54, 0x6f, 0x42,
	0x65, 0x41, 0x64, 0x64, 0x65, 0x64, 0x53, 0x6e, 0x6d, 0x6f, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x3b, 0x0a, 0x0e, 0x70, 0x64, 0x75, 0x5f, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x64, 0x75, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x52, 0x0c, 0x70, 0x64, 0x75, 0x53, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x12, 0x63, 0x0a, 0x0d, 0x73, 0x6e, 0x5f, 0x74, 0x65, 0x72, 0x6d, 0x69,
	0x6e, 0x61, 0x74, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x78, 0x6e,
	0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x64, 0x75, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x65, 0x74, 0x75, 0x70, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x53, 0x4e, 0x74, 0x65, 0x72, 0x6d, 0x69,
	0x6e, 0x61, 0x74, 0x65, 0x64, 0x48, 0x00, 0x52, 0x0d, 0x73, 0x6e, 0x2d, 0x74, 0x65, 0x72, 0x6d,
	0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x63, 0x0a, 0x0d, 0x6d, 0x6e, 0x5f,
	0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x38, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x64, 0x75, 0x73, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x65, 0x74,
	0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x4d, 0x4e,
	0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x48, 0x01, 0x52, 0x0d, 0x6d, 0x6e,
	0x2d, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x60,
	0x0a, 0x0d, 0x69, 0x5f, 0x65, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e,
	0x50, 0x64, 0x75, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x41, 0x64, 0x6d, 0x69, 0x74, 0x74,
	0x65, 0x64, 0x54, 0x6f, 0x42, 0x65, 0x41, 0x64, 0x64, 0x65, 0x64, 0x53, 0x6e, 0x6d, 0x6f, 0x64,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x45, 0x78, 0x74, 0x49,
	0x65, 0x73, 0x52, 0x0c, 0x69, 0x45, 0x2d, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x73, 0x6e, 0x5f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74,
	0x65, 0x64, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x6d, 0x6e, 0x5f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e,
	0x61, 0x74, 0x65, 0x64, 0x22, 0x8a, 0x01, 0x0a, 0x2b, 0x50, 0x64, 0x75, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x41, 0x64, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x54, 0x6f, 0x42, 0x65, 0x4d,
	0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x53, 0x6e, 0x6d, 0x6f, 0x64, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5b, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x64,
	0x75, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x41, 0x64, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64,
	0x54, 0x6f, 0x42, 0x65, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x53, 0x6e, 0x6d, 0x6f,
	0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x42, 0x0b, 0xfa,
	0x42, 0x08, 0x92, 0x01, 0x05, 0x08, 0x01, 0x10, 0x80, 0x02, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x22, 0x65, 0x0a, 0x35, 0x50, 0x64, 0x75, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x41,
	0x64, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x54, 0x6f, 0x42, 0x65, 0x4d, 0x6f, 0x64, 0x69, 0x66,
	0x69, 0x65, 0x64, 0x53, 0x6e, 0x6d, 0x6f, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x49, 0x74, 0x65, 0x6d, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xcf, 0x03, 0x0a, 0x2f, 0x50, 0x64, 0x75,
	0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x41, 0x64, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x54,
	0x6f, 0x42, 0x65, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x53, 0x6e, 0x6d, 0x6f, 0x64,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x3b, 0x0a, 0x0e,
	0x70, 0x64, 0x75, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x50,
	0x64, 0x75, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x52, 0x0c, 0x70, 0x64, 0x75,
	0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x6a, 0x0a, 0x0d, 0x73, 0x6e, 0x5f,
	0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x3f, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x64, 0x75, 0x73, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x6f, 0x64,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x53, 0x4e, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65,
	0x64, 0x48, 0x00, 0x52, 0x0d, 0x73, 0x6e, 0x2d, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74,
	0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x6a, 0x0a, 0x0d, 0x6d, 0x6e, 0x5f, 0x74, 0x65, 0x72, 0x6d,
	0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x78,
	0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x64, 0x75, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x4d, 0x4e, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x48, 0x01, 0x52,
	0x0d, 0x6d, 0x6e, 0x2d, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x88, 0x01,
	0x01, 0x12, 0x63, 0x0a, 0x0d, 0x69, 0x5f, 0x65, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e,
	0x76, 0x31, 0x2e, 0x50, 0x64, 0x75, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x41, 0x64, 0x6d,
	0x69, 0x74, 0x74, 0x65, 0x64, 0x54, 0x6f, 0x42, 0x65, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65,
	0x64, 0x53, 0x6e, 0x6d, 0x6f, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x49, 0x74,
	0x65, 0x6d, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x52, 0x0c, 0x69, 0x45, 0x2d, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x73, 0x6e, 0x5f, 0x74, 0x65,
	0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x6d, 0x6e, 0x5f,
	0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x22, 0x61, 0x0a, 0x31, 0x50, 0x64,
	0x75, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x41, 0x64, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64,
	0x54, 0x6f, 0x42, 0x65, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x64, 0x53, 0x6e, 0x6d, 0x6f,
	0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x12,
	0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xdc, 0x02,
	0x0a, 0x2b, 0x50, 0x64, 0x75, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x41, 0x64, 0x6d, 0x69,
	0x74, 0x74, 0x65, 0x64, 0x54, 0x6f, 0x42, 0x65, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x64,
	0x53, 0x6e, 0x6d, 0x6f, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5b, 0x0a,
	0x0d, 0x73, 0x6e, 0x5f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x50,
	0x64, 0x75, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x77, 0x69, 0x74,
	0x68, 0x44, 0x61, 0x74, 0x61, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x0d, 0x73, 0x6e, 0x2d, 0x74, 0x65, 0x72,
	0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x4b, 0x0a, 0x0d, 0x6d, 0x6e,
	0x5f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x64, 0x75, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x77, 0x69, 0x74, 0x68, 0x43, 0x61,
	0x75, 0x73, 0x65, 0x48, 0x01, 0x52, 0x0d, 0x6d, 0x6e, 0x2d, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e,
	0x61, 0x74, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x5f, 0x0a, 0x0d, 0x69, 0x5f, 0x65, 0x5f, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3a,
	0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x64, 0x75, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x41, 0x64, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x54, 0x6f, 0x42, 0x65, 0x52,
	0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x64, 0x53, 0x6e, 0x6d, 0x6f, 0x64, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x52, 0x0c, 0x69, 0x45, 0x2d, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x73, 0x6e, 0x5f,
	0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x6d,
	0x6e, 0x5f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x22, 0x58, 0x0a, 0x28,
	0x50, 0x64, 0x75, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4e, 0x6f, 0x74, 0x41, 0x64, 0x6d,
	0x69, 0x74, 0x74, 0x65, 0x64, 0x53, 0x4e, 0x6d, 0x6f, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xdb, 0x01, 0x0a, 0x22, 0x50, 0x64, 0x75, 0x73, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4e, 0x6f, 0x74, 0x41, 0x64, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64,
	0x53, 0x4e, 0x6d, 0x6f, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x48, 0x0a,
	0x10, 0x70, 0x64, 0x75, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76,
	0x31, 0x2e, 0x50, 0x64, 0x75, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74,
	0x48, 0x00, 0x52, 0x10, 0x70, 0x64, 0x75, 0x2d, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2d,
	0x4c, 0x69, 0x73, 0x74, 0x88, 0x01, 0x01, 0x12, 0x56, 0x0a, 0x0d, 0x69, 0x5f, 0x65, 0x5f, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31,
	0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x64, 0x75, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x4e, 0x6f, 0x74, 0x41, 0x64, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x53, 0x4e,
	0x6d, 0x6f, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x45, 0x78, 0x74, 0x49, 0x65,
	0x73, 0x52, 0x0c, 0x69, 0x45, 0x2d, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x42,
	0x13, 0x0a, 0x11, 0x5f, 0x70, 0x64, 0x75, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x22, 0x5b, 0x0a, 0x2b, 0x50, 0x64, 0x75, 0x73, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67,
	0x53, 0x4e, 0x6d, 0x6f, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x45, 0x78, 0x74,
	0x49, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x22, 0xdc, 0x01, 0x0a, 0x25, 0x50, 0x64, 0x75, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x44, 0x61, 0x74, 0x61, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x4e,
	0x6d, 0x6f, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x56, 0x0a, 0x0d, 0x73,
	0x6e, 0x5f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x30, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x64, 0x75,
	0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x77, 0x69, 0x74, 0x68, 0x44,
	0x61, 0x74, 0x61, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x52, 0x0d, 0x73, 0x6e, 0x2d, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61,
	0x74, 0x65, 0x64, 0x12, 0x5b, 0x0a, 0x0e, 0x69, 0x5f, 0x65, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x78, 0x6e,
	0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x64, 0x75, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x44, 0x61, 0x74, 0x61, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x4e,
	0x6d, 0x6f, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x45, 0x78, 0x74, 0x49, 0x65,
	0x73, 0x52, 0x0d, 0x69, 0x45, 0x2d, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x22, 0x95, 0x03, 0x0a, 0x26, 0x53, 0x6e, 0x6f, 0x64, 0x65, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x6a,
	0x65, 0x63, 0x74, 0x49, 0x45, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x58, 0x0a, 0x19, 0x69,
	0x64, 0x5f, 0x6d, 0x5f, 0x6e, 0x67, 0x5f, 0x72, 0x61, 0x6e, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x75,
	0x65, 0x78, 0x6e, 0x5f, 0x61, 0x70, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x67, 0x52, 0x41, 0x6e, 0x6e, 0x6f,
	0x64, 0x65, 0x55, 0x65, 0x78, 0x6e, 0x41, 0x70, 0x69, 0x64, 0x48, 0x00, 0x52, 0x17, 0x69, 0x64,
	0x2d, 0x4d, 0x2d, 0x4e, 0x47, 0x2d, 0x52, 0x41, 0x4e, 0x6e, 0x6f, 0x64, 0x65, 0x55, 0x45, 0x58,
	0x6e, 0x41, 0x50, 0x49, 0x44, 0x12, 0x58, 0x0a, 0x19, 0x69, 0x64, 0x5f, 0x73, 0x5f, 0x6e, 0x67,
	0x5f, 0x72, 0x61, 0x6e, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x75, 0x65, 0x78, 0x6e, 0x5f, 0x61, 0x70,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e,
	0x76, 0x31, 0x2e, 0x4e, 0x67, 0x52, 0x41, 0x6e, 0x6e, 0x6f, 0x64, 0x65, 0x55, 0x65, 0x78, 0x6e,
	0x41, 0x70, 0x69, 0x64, 0x48, 0x00, 0x52, 0x17, 0x69, 0x64, 0x2d, 0x53, 0x2d, 0x4e, 0x47, 0x2d,
	0x52, 0x41, 0x4e, 0x6e, 0x6f, 0x64, 0x65, 0x55, 0x45, 0x58, 0x6e, 0x41, 0x50, 0x49, 0x44, 0x12,
	0x2c, 0x0a, 0x08, 0x69, 0x64, 0x5f, 0x63, 0x61, 0x75, 0x73, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0e, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x61, 0x75, 0x73,
	0x65, 0x48, 0x00, 0x52, 0x08, 0x69, 0x64, 0x2d, 0x43, 0x61, 0x75, 0x73, 0x65, 0x12, 0x60, 0x0a,
	0x1a, 0x69, 0x64, 0x5f, 0x63, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x5f,
	0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x69, 0x74,
	0x69, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69,
	0x63, 0x73, 0x48, 0x00, 0x52, 0x19, 0x69, 0x64, 0x2d, 0x43, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61,
	0x6c, 0x69, 0x74, 0x79, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x73, 0x42,
	0x27, 0x0a, 0x25, 0x73, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x72, 0x65,
	0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x65, 0x73, 0x22, 0xcc, 0x01, 0x0a, 0x21, 0x53, 0x6e, 0x6f,
	0x64, 0x65, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x45, 0x73, 0x12, 0x26,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x78, 0x6e, 0x61,
	0x70, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x49, 0x65, 0x49,
	0x44, 0x52, 0x03, 0x26, 0x69, 0x64, 0x12, 0x37, 0x0a, 0x0b, 0x63, 0x72, 0x69, 0x74, 0x69, 0x63,
	0x61, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x78, 0x6e,
	0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x69, 0x74,
	0x79, 0x52, 0x0c, 0x26, 0x63, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x12,
	0x46, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f,
	0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6e, 0x6f, 0x64, 0x65, 0x4d, 0x6f,
	0x64, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x45, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x06, 0x26, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x6f, 0x0a, 0x1e, 0x53, 0x6e, 0x6f, 0x64, 0x65,
	0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x4d, 0x0a, 0x0c, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2a, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6e, 0x6f, 0x64, 0x65, 0x4d,
	0x6f, 0x64, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x45, 0x73, 0x52, 0x0b, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x49, 0x45, 0x73, 0x22, 0xcf, 0x0b, 0x0a, 0x21, 0x53, 0x6e, 0x6f,
	0x64, 0x65, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x49, 0x45, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x58,
	0x0a, 0x19, 0x69, 0x64, 0x5f, 0x6d, 0x5f, 0x6e, 0x67, 0x5f, 0x72, 0x61, 0x6e, 0x6e, 0x6f, 0x64,
	0x65, 0x5f, 0x75, 0x65, 0x78, 0x6e, 0x5f, 0x61, 0x70, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x67, 0x52, 0x41,
	0x6e, 0x6e, 0x6f, 0x64, 0x65, 0x55, 0x65, 0x78, 0x6e, 0x41, 0x70, 0x69, 0x64, 0x48, 0x00, 0x52,
	0x17, 0x69, 0x64, 0x2d, 0x4d, 0x2d, 0x4e, 0x47, 0x2d, 0x52, 0x41, 0x4e, 0x6e, 0x6f, 0x64, 0x65,
	0x55, 0x45, 0x58, 0x6e, 0x41, 0x50, 0x49, 0x44, 0x12, 0x58, 0x0a, 0x19, 0x69, 0x64, 0x5f, 0x73,
	0x5f, 0x6e, 0x67, 0x5f, 0x72, 0x61, 0x6e, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x75, 0x65, 0x78, 0x6e,
	0x5f, 0x61, 0x70, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x78, 0x6e,
	0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x67, 0x52, 0x41, 0x6e, 0x6e, 0x6f, 0x64, 0x65, 0x55,
	0x65, 0x78, 0x6e, 0x41, 0x70, 0x69, 0x64, 0x48, 0x00, 0x52, 0x17, 0x69, 0x64, 0x2d, 0x53, 0x2d,
	0x4e, 0x47, 0x2d, 0x52, 0x41, 0x4e, 0x6e, 0x6f, 0x64, 0x65, 0x55, 0x45, 0x58, 0x6e, 0x41, 0x50,
	0x49, 0x44, 0x12, 0x2c, 0x0a, 0x08, 0x69, 0x64, 0x5f, 0x63, 0x61, 0x75, 0x73, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x61, 0x75, 0x73, 0x65, 0x48, 0x00, 0x52, 0x08, 0x69, 0x64, 0x2d, 0x43, 0x61, 0x75, 0x73, 0x65,
	0x12, 0x5a, 0x0a, 0x18, 0x69, 0x64, 0x5f, 0x70, 0x64, 0x63, 0x70, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x5f, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x64, 0x63,
	0x70, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x48, 0x00, 0x52, 0x17, 0x69, 0x64, 0x2d, 0x50, 0x44, 0x43, 0x50, 0x43, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x8b, 0x01, 0x0a,
	0x2b, 0x69, 0x64, 0x5f, 0x70, 0x64, 0x75, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x74,
	0x6f, 0x5f, 0x62, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x5f, 0x73, 0x6e,
	0x6d, 0x6f, 0x64, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x64, 0x75,
	0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x42, 0x65, 0x4d, 0x6f, 0x64, 0x69, 0x66,
	0x69, 0x65, 0x64, 0x53, 0x6e, 0x6d, 0x6f, 0x64, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64,
	0x48, 0x00, 0x52, 0x26, 0x69, 0x64, 0x2d, 0x50, 0x44, 0x55, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x54, 0x6f, 0x42, 0x65, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x53, 0x4e, 0x4d,
	0x6f, 0x64, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x12, 0x8b, 0x01, 0x0a, 0x2b, 0x69,
	0x64, 0x5f, 0x70, 0x64, 0x75, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x6f, 0x5f,
	0x62, 0x65, 0x5f, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x64, 0x5f, 0x73, 0x6e, 0x6d, 0x6f,
	0x64, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2c, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x64, 0x75, 0x73, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x42, 0x65, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65,
	0x64, 0x53, 0x6e, 0x6d, 0x6f, 0x64, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x48, 0x00,
	0x52, 0x26, 0x69, 0x64, 0x2d, 0x50, 0x44, 0x55, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54,
	0x6f, 0x42, 0x65, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x64, 0x53, 0x4e, 0x4d, 0x6f, 0x64,
	0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x12, 0x36, 0x0a, 0x15, 0x69, 0x64, 0x5f, 0x73,
	0x6e, 0x5f, 0x74, 0x6f, 0x5f, 0x6d, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65,
	0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x15, 0x69, 0x64, 0x2d, 0x53, 0x4e,
	0x2d, 0x74, 0x6f, 0x2d, 0x4d, 0x4e, 0x2d, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72,
	0x12, 0x3b, 0x0a, 0x0f, 0x69, 0x64, 0x5f, 0x73, 0x70, 0x61, 0x72, 0x65, 0x5f, 0x64, 0x72, 0x62,
	0x69, 0x64, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x78, 0x6e, 0x61, 0x70,
	0x2e, 0x76, 0x31, 0x2e, 0x44, 0x72, 0x62, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x00, 0x52, 0x0e, 0x69,
	0x64, 0x2d, 0x53, 0x70, 0x61, 0x72, 0x65, 0x44, 0x52, 0x42, 0x49, 0x44, 0x73, 0x12, 0x55, 0x0a,
	0x1c, 0x69, 0x64, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x5f, 0x6f, 0x66, 0x5f, 0x64, 0x72, 0x62, 0x69, 0x64, 0x73, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x72,
	0x62, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x48, 0x00, 0x52, 0x19, 0x69, 0x64, 0x2d, 0x52, 0x65,
	0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x44, 0x52,
	0x42, 0x49, 0x44, 0x73, 0x12, 0x52, 0x0a, 0x1a, 0x69, 0x64, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x73, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e,
	0x76, 0x31, 0x2e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x43, 0x47, 0x69, 0x48, 0x00, 0x52, 0x18,
	0x69, 0x64, 0x2d, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x4e, 0x12, 0x77, 0x0a, 0x23, 0x69, 0x64, 0x5f, 0x6d,
	0x72, 0x5f, 0x64, 0x63, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x63, 0x6f,
	0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e,
	0x4d, 0x72, 0x44, 0x43, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x6f, 0x6f, 0x72,
	0x64, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x21,
	0x69, 0x64, 0x2d, 0x4d, 0x52, 0x2d, 0x44, 0x43, 0x2d, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x57, 0x0a, 0x17, 0x69, 0x64, 0x5f, 0x72, 0x72, 0x63, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x5f, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x72, 0x63,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x48, 0x00, 0x52, 0x16, 0x69, 0x64, 0x2d, 0x52, 0x52, 0x43, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x7e, 0x0a, 0x26, 0x69, 0x64,
	0x5f, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x66, 0x61, 0x73, 0x74, 0x5f,
	0x6d, 0x63, 0x67, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x76, 0x69, 0x61, 0x5f,
	0x73, 0x72, 0x62, 0x33, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x28, 0x2e, 0x78, 0x6e, 0x61,
	0x70, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x46, 0x61,
	0x73, 0x74, 0x4d, 0x63, 0x67, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x56, 0x69, 0x61,
	0x53, 0x72, 0x62, 0x33, 0x48, 0x00, 0x52, 0x22, 0x69, 0x64, 0x2d, 0x41, 0x76, 0x61, 0x69, 0x6c,
	0x61, 0x62, 0x6c, 0x65, 0x46, 0x61, 0x73, 0x74, 0x4d, 0x43, 0x47, 0x52, 0x65, 0x63, 0x6f, 0x76,
	0x65, 0x72, 0x79, 0x56, 0x69, 0x61, 0x53, 0x52, 0x42, 0x33, 0x12, 0x78, 0x0a, 0x24, 0x69, 0x64,
	0x5f, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x66, 0x61, 0x73, 0x74, 0x5f, 0x6d, 0x63,
	0x67, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x76, 0x69, 0x61, 0x5f, 0x73, 0x72,
	0x62, 0x33, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e,
	0x76, 0x31, 0x2e, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x46, 0x61, 0x73, 0x74, 0x4d, 0x63,
	0x67, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x56, 0x69, 0x61, 0x53, 0x72, 0x62, 0x33,
	0x48, 0x00, 0x52, 0x20, 0x69, 0x64, 0x2d, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x46, 0x61,
	0x73, 0x74, 0x4d, 0x43, 0x47, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x56, 0x69, 0x61,
	0x53, 0x52, 0x42, 0x33, 0x12, 0x41, 0x0a, 0x0f, 0x69, 0x64, 0x5f, 0x73, 0x63, 0x67, 0x69, 0x6e,
	0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e,
	0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x63, 0x67, 0x69, 0x6e, 0x64, 0x69, 0x63,
	0x61, 0x74, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x0f, 0x69, 0x64, 0x2d, 0x53, 0x43, 0x47, 0x49, 0x6e,
	0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x42, 0x21, 0x0a, 0x1f, 0x73, 0x6e, 0x6f, 0x64, 0x65,
	0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65,
	0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x69, 0x65, 0x73, 0x22, 0xc2, 0x01, 0x0a, 0x1c, 0x53,
	0x6e, 0x6f, 0x64, 0x65, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x49, 0x45, 0x73, 0x12, 0x26, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76,
	0x31, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x49, 0x65, 0x49, 0x44, 0x52, 0x03,
	0x26, 0x69, 0x64, 0x12, 0x37, 0x0a, 0x0b, 0x63, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x69,
	0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x0c,
	0x26, 0x63, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x41, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x78, 0x6e,
	0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6e, 0x6f, 0x64, 0x65, 0x4d, 0x6f, 0x64, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x49,
	0x45, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x26, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22,
	0x65, 0x0a, 0x19, 0x53, 0x6e, 0x6f, 0x64, 0x65, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x12, 0x48, 0x0a, 0x0c,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x25, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6e, 0x6f,
	0x64, 0x65, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x49, 0x45, 0x73, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x49, 0x45, 0x73, 0x22, 0x7a, 0x0a, 0x23, 0x50, 0x64, 0x75, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x42, 0x65, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64,
	0x53, 0x6e, 0x6d, 0x6f, 0x64, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x12, 0x53, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x78,
	0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x64, 0x75, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x54, 0x6f, 0x42, 0x65, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x53, 0x6e, 0x6d,
	0x6f, 0x64, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x42, 0x0b,
	0xfa, 0x42, 0x08, 0x92, 0x01, 0x05, 0x08, 0x01, 0x10, 0x80, 0x02, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x22, 0x5d, 0x0a, 0x2d, 0x50, 0x64, 0x75, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x54, 0x6f, 0x42, 0x65, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x53, 0x6e, 0x6d, 0x6f,
	0x64, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x45, 0x78, 0x74,
	0x49, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x22, 0xa3, 0x03, 0x0a, 0x27, 0x50, 0x64, 0x75, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x54, 0x6f, 0x42, 0x65, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x53, 0x6e, 0x6d, 0x6f,
	0x64, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x3b, 0x0a,
	0x0e, 0x70, 0x64, 0x75, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e,
	0x50, 0x64, 0x75, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x52, 0x0c, 0x70, 0x64,
	0x75, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x5c, 0x0a, 0x0d, 0x73, 0x6e,
	0x5f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x31, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x64, 0x75, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x6f,
	0x64, 0x52, 0x71, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x53, 0x4e, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e,
	0x61, 0x74, 0x65, 0x64, 0x48, 0x00, 0x52, 0x0d, 0x73, 0x6e, 0x2d, 0x74, 0x65, 0x72, 0x6d, 0x69,
	0x6e, 0x61, 0x74, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x5c, 0x0a, 0x0d, 0x6d, 0x6e, 0x5f, 0x74,
	0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x31, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x64, 0x75, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x6f, 0x64, 0x52,
	0x71, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x4d, 0x4e, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74,
	0x65, 0x64, 0x48, 0x01, 0x52, 0x0d, 0x6d, 0x6e, 0x2d, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61,
	0x74, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x5b, 0x0a, 0x0d, 0x69, 0x5f, 0x65, 0x5f, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x36, 0x2e,
	0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x64, 0x75, 0x73, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x54, 0x6f, 0x42, 0x65, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x53, 0x6e,
	0x6d, 0x6f, 0x64, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x45,
	0x78, 0x74, 0x49, 0x65, 0x73, 0x52, 0x0c, 0x69, 0x45, 0x2d, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x73, 0x6e, 0x5f, 0x74, 0x65, 0x72, 0x6d, 0x69,
	0x6e, 0x61, 0x74, 0x65, 0x64, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x6d, 0x6e, 0x5f, 0x74, 0x65, 0x72,
	0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x22, 0x59, 0x0a, 0x29, 0x50, 0x64, 0x75, 0x73, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x42, 0x65, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65,
	0x64, 0x53, 0x6e, 0x6d, 0x6f, 0x64, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x45, 0x78,
	0x74, 0x49, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x22, 0xcc, 0x02, 0x0a, 0x23, 0x50, 0x64, 0x75, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x54, 0x6f, 0x42, 0x65, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x64, 0x53, 0x6e, 0x6d,
	0x6f, 0x64, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x12, 0x5b, 0x0a, 0x0d, 0x73, 0x6e,
	0x5f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x30, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x64, 0x75, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x77, 0x69, 0x74, 0x68, 0x44, 0x61,
	0x74, 0x61, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x0d, 0x73, 0x6e, 0x2d, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e,
	0x61, 0x74, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x4b, 0x0a, 0x0d, 0x6d, 0x6e, 0x5f, 0x74, 0x65,
	0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x64, 0x75, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x77, 0x69, 0x74, 0x68, 0x43, 0x61, 0x75, 0x73, 0x65,
	0x48, 0x01, 0x52, 0x0d, 0x6d, 0x6e, 0x2d, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65,
	0x64, 0x88, 0x01, 0x01, 0x12, 0x57, 0x0a, 0x0d, 0x69, 0x5f, 0x65, 0x5f, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x78, 0x6e,
	0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x64, 0x75, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x54, 0x6f, 0x42, 0x65, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x64, 0x53, 0x6e, 0x6d, 0x6f,
	0x64, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x52,
	0x0c, 0x69, 0x45, 0x2d, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x10, 0x0a,
	0x0e, 0x5f, 0x73, 0x6e, 0x5f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x42,
	0x10, 0x0a, 0x0e, 0x5f, 0x6d, 0x6e, 0x5f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65,
	0x64, 0x22, 0xd5, 0x06, 0x0a, 0x20, 0x53, 0x6e, 0x6f, 0x64, 0x65, 0x4d, 0x6f, 0x64, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x49, 0x45,
	0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x58, 0x0a, 0x19, 0x69, 0x64, 0x5f, 0x6d, 0x5f, 0x6e,
	0x67, 0x5f, 0x72, 0x61, 0x6e, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x75, 0x65, 0x78, 0x6e, 0x5f, 0x61,
	0x70, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x78, 0x6e, 0x61, 0x70,
	0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x67, 0x52, 0x41, 0x6e, 0x6e, 0x6f, 0x64, 0x65, 0x55, 0x65, 0x78,
	0x6e, 0x41, 0x70, 0x69, 0x64, 0x48, 0x00, 0x52, 0x17, 0x69, 0x64, 0x2d, 0x4d, 0x2d, 0x4e, 0x47,
	0x2d, 0x52, 0x41, 0x4e, 0x6e, 0x6f, 0x64, 0x65, 0x55, 0x45, 0x58, 0x6e, 0x41, 0x50, 0x49, 0x44,
	0x12, 0x58, 0x0a, 0x19, 0x69, 0x64, 0x5f, 0x73, 0x5f, 0x6e, 0x67, 0x5f, 0x72, 0x61, 0x6e, 0x6e,
	0x6f, 0x64, 0x65, 0x5f, 0x75, 0x65, 0x78, 0x6e, 0x5f, 0x61, 0x70, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x67,
	0x52, 0x41, 0x6e, 0x6e, 0x6f, 0x64, 0x65, 0x55, 0x65, 0x78, 0x6e, 0x41, 0x70, 0x69, 0x64, 0x48,
	0x00, 0x52, 0x17, 0x69, 0x64, 0x2d, 0x53, 0x2d, 0x4e, 0x47, 0x2d, 0x52, 0x41, 0x4e, 0x6e, 0x6f,
	0x64, 0x65, 0x55, 0x45, 0x58, 0x6e, 0x41, 0x50, 0x49, 0x44, 0x12, 0x84, 0x01, 0x0a, 0x28, 0x69,
	0x64, 0x5f, 0x70, 0x64, 0x75, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x64, 0x6d,
	0x69, 0x74, 0x74, 0x65, 0x64, 0x5f, 0x6d, 0x6f, 0x64, 0x5f, 0x73, 0x6e, 0x6d, 0x6f, 0x64, 0x5f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e,
	0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x64, 0x75, 0x73, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x41, 0x64, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x4d, 0x6f, 0x64, 0x53, 0x6e, 0x6d,
	0x6f, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x48, 0x00, 0x52, 0x24, 0x69, 0x64, 0x2d,
	0x50, 0x44, 0x55, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x41, 0x64, 0x6d, 0x69, 0x74, 0x74,
	0x65, 0x64, 0x4d, 0x6f, 0x64, 0x53, 0x4e, 0x4d, 0x6f, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72,
	0x6d, 0x12, 0x7a, 0x0a, 0x24, 0x69, 0x64, 0x5f, 0x70, 0x64, 0x75, 0x73, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x64, 0x5f, 0x73, 0x6e, 0x6d, 0x6f,
	0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x27, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x64, 0x75, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x64, 0x53, 0x6e, 0x6d, 0x6f,
	0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x48, 0x00, 0x52, 0x21, 0x69, 0x64, 0x2d, 0x50,
	0x44, 0x55, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65,
	0x64, 0x53, 0x4e, 0x4d, 0x6f, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x12, 0x36, 0x0a,
	0x15, 0x69, 0x64, 0x5f, 0x6d, 0x6e, 0x5f, 0x74, 0x6f, 0x5f, 0x73, 0x6e, 0x5f, 0x63, 0x6f, 0x6e,
	0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x15,
	0x69, 0x64, 0x2d, 0x4d, 0x4e, 0x2d, 0x74, 0x6f, 0x2d, 0x53, 0x4e, 0x2d, 0x43, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x65, 0x72, 0x12, 0x45, 0x0a, 0x14, 0x69, 0x64, 0x5f, 0x61, 0x64, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x64, 0x72, 0x62, 0x69, 0x64, 0x73, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x72,
	0x62, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x00, 0x52, 0x13, 0x69, 0x64, 0x2d, 0x41, 0x64, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x44, 0x52, 0x42, 0x49, 0x44, 0x73, 0x12, 0x60, 0x0a, 0x1a,
	0x69, 0x64, 0x5f, 0x63, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x64,
	0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x69, 0x74, 0x69,
	0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63,
	0x73, 0x48, 0x00, 0x52, 0x19, 0x69, 0x64, 0x2d, 0x43, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c,
	0x69, 0x74, 0x79, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x77,
	0x0a, 0x23, 0x69, 0x64, 0x5f, 0x6d, 0x72, 0x5f, 0x64, 0x63, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x78, 0x6e,
	0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x72, 0x44, 0x43, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e,
	0x66, 0x6f, 0x48, 0x00, 0x52, 0x21, 0x69, 0x64, 0x2d, 0x4d, 0x52, 0x2d, 0x44, 0x43, 0x2d, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x20, 0x0a, 0x1e, 0x73, 0x6e, 0x6f, 0x64, 0x65,
	0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x72, 0x6d, 0x5f, 0x69, 0x65, 0x73, 0x22, 0xc0, 0x01, 0x0a, 0x1b, 0x53, 0x6e,
	0x6f, 0x64, 0x65, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x49, 0x45, 0x73, 0x12, 0x26, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x49, 0x65, 0x49, 0x44, 0x52, 0x03, 0x26, 0x69,
	0x64, 0x12, 0x37, 0x0a, 0x0b, 0x63, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x0c, 0x26, 0x63,
	0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x40, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x78, 0x6e, 0x61, 0x70,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6e, 0x6f, 0x64, 0x65, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x49, 0x45, 0x73, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x26, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x63, 0x0a, 0x18,
	0x53, 0x6e, 0x6f, 0x64, 0x65, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x12, 0x47, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24,
	0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6e, 0x6f, 0x64, 0x65, 0x4d, 0x6f,
	0x64, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72,
	0x6d, 0x49, 0x45, 0x73, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x49, 0x45,
	0x73, 0x22, 0x76, 0x0a, 0x21, 0x50, 0x64, 0x75, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x41,
	0x64, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x4d, 0x6f, 0x64, 0x53, 0x6e, 0x6d, 0x6f, 0x64, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x12, 0x51, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e,
	0x50, 0x64, 0x75, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x41, 0x64, 0x6d, 0x69, 0x74, 0x74,
	0x65, 0x64, 0x4d, 0x6f, 0x64, 0x53, 0x6e, 0x6d, 0x6f, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72,
	0x6d, 0x49, 0x74, 0x65, 0x6d, 0x42, 0x0b, 0xfa, 0x42, 0x08, 0x92, 0x01, 0x05, 0x08, 0x01, 0x10,
	0x80, 0x02, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x5b, 0x0a, 0x2b, 0x50, 0x64, 0x75,
	0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x41, 0x64, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x4d,
	0x6f, 0x64, 0x53, 0x6e, 0x6d, 0x6f, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x49, 0x74,
	0x65, 0x6d, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xa7, 0x03, 0x0a, 0x25, 0x50, 0x64, 0x75, 0x73, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x41, 0x64, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x4d, 0x6f, 0x64,
	0x53, 0x6e, 0x6d, 0x6f, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x49, 0x74, 0x65, 0x6d,
	0x12, 0x3b, 0x0a, 0x0e, 0x70, 0x64, 0x75, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e,
	0x76, 0x31, 0x2e, 0x50, 0x64, 0x75, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x52,
	0x0c, 0x70, 0x64, 0x75, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x60, 0x0a,
	0x0d, 0x73, 0x6e, 0x5f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x50,
	0x64, 0x75, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x4d, 0x6f, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x53,
	0x4e, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x48, 0x00, 0x52, 0x0d, 0x73,
	0x6e, 0x2d, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12,
	0x60, 0x0a, 0x0d, 0x6d, 0x6e, 0x5f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31,
	0x2e, 0x50, 0x64, 0x75, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x4d, 0x6f, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x49, 0x6e, 0x66,
	0x6f, 0x4d, 0x4e, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x48, 0x01, 0x52,
	0x0d, 0x6d, 0x6e, 0x2d, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x88, 0x01,
	0x01, 0x12, 0x59, 0x0a, 0x0d, 0x69, 0x5f, 0x65, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e,
	0x76, 0x31, 0x2e, 0x50, 0x64, 0x75, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x41, 0x64, 0x6d,
	0x69, 0x74, 0x74, 0x65, 0x64, 0x4d, 0x6f, 0x64, 0x53, 0x6e, 0x6d, 0x6f, 0x64, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x72, 0x6d, 0x49, 0x74, 0x65, 0x6d, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x52, 0x0c,
	0x69, 0x45, 0x2d, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x10, 0x0a, 0x0e,
	0x5f, 0x73, 0x6e, 0x5f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x42, 0x10,
	0x0a, 0x0e, 0x5f, 0x6d, 0x6e, 0x5f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64,
	0x22, 0x60, 0x0a, 0x30, 0x50, 0x64, 0x75, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x41, 0x64,
	0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x54, 0x6f, 0x42, 0x65, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73,
	0x65, 0x64, 0x53, 0x6e, 0x6d, 0x6f, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x45, 0x78,
	0x74, 0x49, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x22, 0xc8, 0x02, 0x0a, 0x1e, 0x50, 0x64, 0x75, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x64, 0x53, 0x6e, 0x6d, 0x6f, 0x64, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x72, 0x6d, 0x12, 0x5e, 0x0a, 0x0d, 0x73, 0x6e, 0x5f, 0x74, 0x65, 0x72, 0x6d,
	0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x78,
	0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x64, 0x75, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x4c, 0x69, 0x73, 0x74, 0x77, 0x69, 0x74, 0x68, 0x44, 0x61, 0x74, 0x61, 0x46, 0x6f, 0x72,
	0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x46, 0x72, 0x6f, 0x6d, 0x54, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x48, 0x00, 0x52, 0x0d, 0x73, 0x6e, 0x2d, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74,
	0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x42, 0x0a, 0x0d, 0x6d, 0x6e, 0x5f, 0x74, 0x65, 0x72, 0x6d,
	0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x78,
	0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x64, 0x75, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x01, 0x52, 0x0d, 0x6d, 0x6e, 0x2d, 0x74, 0x65, 0x72, 0x6d,
	0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x5e, 0x0a, 0x0d, 0x69, 0x5f, 0x65,
	0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x39, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x64, 0x75, 0x73, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x41, 0x64, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x54, 0x6f, 0x42,
	0x65, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x64, 0x53, 0x6e, 0x6d, 0x6f, 0x64, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x72, 0x6d, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x52, 0x0c, 0x69, 0x45, 0x2d,
	0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x73, 0x6e,
	0x5f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x42, 0x10, 0x0a, 0x0e, 0x5f,
	0x6d, 0x6e, 0x5f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x22, 0xbe, 0x03,
	0x0a, 0x1f, 0x53, 0x6e, 0x6f, 0x64, 0x65, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x66, 0x75, 0x73, 0x65, 0x49, 0x45, 0x73, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x58, 0x0a, 0x19, 0x69, 0x64, 0x5f, 0x6d, 0x5f, 0x6e, 0x67, 0x5f, 0x72, 0x61, 0x6e,
	0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x75, 0x65, 0x78, 0x6e, 0x5f, 0x61, 0x70, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x4e,
	0x67, 0x52, 0x41, 0x6e, 0x6e, 0x6f, 0x64, 0x65, 0x55, 0x65, 0x78, 0x6e, 0x41, 0x70, 0x69, 0x64,
	0x48, 0x00, 0x52, 0x17, 0x69, 0x64, 0x2d, 0x4d, 0x2d, 0x4e, 0x47, 0x2d, 0x52, 0x41, 0x4e, 0x6e,
	0x6f, 0x64, 0x65, 0x55, 0x45, 0x58, 0x6e, 0x41, 0x50, 0x49, 0x44, 0x12, 0x58, 0x0a, 0x19, 0x69,
	0x64, 0x5f, 0x73, 0x5f, 0x6e, 0x67, 0x5f, 0x72, 0x61, 0x6e, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x75,
	0x65, 0x78, 0x6e, 0x5f, 0x61, 0x70, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x67, 0x52, 0x41, 0x6e, 0x6e, 0x6f,
	0x64, 0x65, 0x55, 0x65, 0x78, 0x6e, 0x41, 0x70, 0x69, 0x64, 0x48, 0x00, 0x52, 0x17, 0x69, 0x64,
	0x2d, 0x53, 0x2d, 0x4e, 0x47, 0x2d, 0x52, 0x41, 0x4e, 0x6e, 0x6f, 0x64, 0x65, 0x55, 0x45, 0x58,
	0x6e, 0x41, 0x50, 0x49, 0x44, 0x12, 0x2c, 0x0a, 0x08, 0x69, 0x64, 0x5f, 0x63, 0x61, 0x75, 0x73,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x61, 0x75, 0x73, 0x65, 0x48, 0x00, 0x52, 0x08, 0x69, 0x64, 0x2d, 0x43, 0x61,
	0x75, 0x73, 0x65, 0x12, 0x36, 0x0a, 0x15, 0x69, 0x64, 0x5f, 0x6d, 0x6e, 0x5f, 0x74, 0x6f, 0x5f,
	0x73, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x00, 0x52, 0x15, 0x69, 0x64, 0x2d, 0x4d, 0x4e, 0x2d, 0x74, 0x6f, 0x2d, 0x53,
	0x4e, 0x2d, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x12, 0x60, 0x0a, 0x1a, 0x69,
	0x64, 0x5f, 0x63, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x64, 0x69,
	0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x69, 0x74, 0x69, 0x63,
	0x61, 0x6c, 0x69, 0x74, 0x79, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x73,
	0x48, 0x00, 0x52, 0x19, 0x69, 0x64, 0x2d, 0x43, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x69,
	0x74, 0x79, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x73, 0x42, 0x1f, 0x0a,
	0x1d, 0x73, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x66, 0x75, 0x73, 0x65, 0x5f, 0x69, 0x65, 0x73, 0x22, 0xbe,
	0x01, 0x0a, 0x1a, 0x53, 0x6e, 0x6f, 0x64, 0x65, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x66, 0x75, 0x73, 0x65, 0x49, 0x45, 0x73, 0x12, 0x26, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x78, 0x6e, 0x61, 0x70,
	0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x49, 0x65, 0x49, 0x44,
	0x52, 0x03, 0x26, 0x69, 0x64, 0x12, 0x37, 0x0a, 0x0b, 0x63, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61,
	0x6c, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x78, 0x6e, 0x61,
	0x70, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79,
	0x52, 0x0c, 0x26, 0x63, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x3f,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e,
	0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6e, 0x6f, 0x64, 0x65, 0x4d, 0x6f, 0x64,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x66, 0x75, 0x73, 0x65, 0x49,
	0x45, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x26, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22,
	0x61, 0x0a, 0x17, 0x53, 0x6e, 0x6f, 0x64, 0x65, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x66, 0x75, 0x73, 0x65, 0x12, 0x46, 0x0a, 0x0c, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x23, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6e, 0x6f, 0x64, 0x65,
	0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x66, 0x75,
	0x73, 0x65, 0x49, 0x45, 0x73, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x49,
	0x45, 0x73, 0x22, 0xfd, 0x04, 0x0a, 0x1b, 0x53, 0x6e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x6c, 0x65,
	0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x45, 0x73, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x58, 0x0a, 0x19, 0x69, 0x64, 0x5f, 0x6d, 0x5f, 0x6e, 0x67, 0x5f, 0x72, 0x61,
	0x6e, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x75, 0x65, 0x78, 0x6e, 0x5f, 0x61, 0x70, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e,
	0x4e, 0x67, 0x52, 0x41, 0x6e, 0x6e, 0x6f, 0x64, 0x65, 0x55, 0x65, 0x78, 0x6e, 0x41, 0x70, 0x69,
	0x64, 0x48, 0x00, 0x52, 0x17, 0x69, 0x64, 0x2d, 0x4d, 0x2d, 0x4e, 0x47, 0x2d, 0x52, 0x41, 0x4e,
	0x6e, 0x6f, 0x64, 0x65, 0x55, 0x45, 0x58, 0x6e, 0x41, 0x50, 0x49, 0x44, 0x12, 0x58, 0x0a, 0x19,
	0x69, 0x64, 0x5f, 0x73, 0x5f, 0x6e, 0x67, 0x5f, 0x72, 0x61, 0x6e, 0x6e, 0x6f, 0x64, 0x65, 0x5f,
	0x75, 0x65, 0x78, 0x6e, 0x5f, 0x61, 0x70, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x67, 0x52, 0x41, 0x6e, 0x6e,
	0x6f, 0x64, 0x65, 0x55, 0x65, 0x78, 0x6e, 0x41, 0x70, 0x69, 0x64, 0x48, 0x00, 0x52, 0x17, 0x69,
	0x64, 0x2d, 0x53, 0x2d, 0x4e, 0x47, 0x2d, 0x52, 0x41, 0x4e, 0x6e, 0x6f, 0x64, 0x65, 0x55, 0x45,
	0x58, 0x6e, 0x41, 0x50, 0x49, 0x44, 0x12, 0x2c, 0x0a, 0x08, 0x69, 0x64, 0x5f, 0x63, 0x61, 0x75,
	0x73, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x61, 0x75, 0x73, 0x65, 0x48, 0x00, 0x52, 0x08, 0x69, 0x64, 0x2d, 0x43,
	0x61, 0x75, 0x73, 0x65, 0x12, 0x72, 0x0a, 0x24, 0x69, 0x64, 0x5f, 0x70, 0x64, 0x75, 0x73, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x6f, 0x5f, 0x62, 0x65, 0x5f, 0x72, 0x65, 0x6c, 0x65,
	0x61, 0x73, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x6c, 0x5f, 0x72, 0x65, 0x71, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x64, 0x75,
	0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x77, 0x69, 0x74, 0x68, 0x43,
	0x61, 0x75, 0x73, 0x65, 0x48, 0x00, 0x52, 0x20, 0x69, 0x64, 0x2d, 0x50, 0x44, 0x55, 0x53, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x42, 0x65, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65,
	0x64, 0x2d, 0x52, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x12, 0x61, 0x0a, 0x1b, 0x69, 0x64, 0x5f, 0x75,
	0x65, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x6b, 0x65, 0x70, 0x74, 0x5f, 0x69, 0x6e,
	0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e,
	0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x65, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78,
	0x74, 0x4b, 0x65, 0x70, 0x74, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x48, 0x00,
	0x52, 0x19, 0x69, 0x64, 0x2d, 0x55, 0x45, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x4b, 0x65,
	0x70, 0x74, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x36, 0x0a, 0x15, 0x69,
	0x64, 0x5f, 0x6d, 0x6e, 0x5f, 0x74, 0x6f, 0x5f, 0x73, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61,
	0x69, 0x6e, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x15, 0x69, 0x64,
	0x2d, 0x4d, 0x4e, 0x2d, 0x74, 0x6f, 0x2d, 0x53, 0x4e, 0x2d, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69,
	0x6e, 0x65, 0x72, 0x12, 0x50, 0x0a, 0x19, 0x69, 0x64, 0x5f, 0x64, 0x72, 0x62, 0x73, 0x5f, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x5f, 0x74, 0x6f, 0x5f, 0x6d, 0x6e,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31,
	0x2e, 0x44, 0x72, 0x62, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x00, 0x52, 0x19, 0x69, 0x64, 0x2d, 0x44,
	0x52, 0x42, 0x73, 0x2d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x2d,
	0x74, 0x6f, 0x2d, 0x4d, 0x4e, 0x42, 0x1b, 0x0a, 0x19, 0x73, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x72,
	0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69,
	0x65, 0x73, 0x22, 0xb6, 0x01, 0x0a, 0x16, 0x53, 0x6e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x6c, 0x65,
	0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x45, 0x73, 0x12, 0x26, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x78, 0x6e, 0x61, 0x70,
	0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x49, 0x65, 0x49, 0x44,
	0x52, 0x03, 0x26, 0x69, 0x64, 0x12, 0x37, 0x0a, 0x0b, 0x63, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61,
	0x6c, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x78, 0x6e, 0x61,
	0x70, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79,
	0x52, 0x0c, 0x26, 0x63, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x3b,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e,
	0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x6c,
	0x65, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x45, 0x73, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x06, 0x26, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x59, 0x0a, 0x13, 0x53,
	0x6e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x42, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x69,
	0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x6e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x45, 0x73, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x49, 0x45, 0x73, 0x22, 0xef, 0x03, 0x0a, 0x26, 0x53, 0x6e, 0x6f, 0x64, 0x65,
	0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x41, 0x63,
	0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x49, 0x45, 0x73, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x58, 0x0a, 0x19, 0x69, 0x64, 0x5f, 0x6d, 0x5f, 0x6e, 0x67, 0x5f, 0x72, 0x61, 0x6e,
	0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x75, 0x65, 0x78, 0x6e, 0x5f, 0x61, 0x70, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x4e,
	0x67, 0x52, 0x41, 0x6e, 0x6e, 0x6f, 0x64, 0x65, 0x55, 0x65, 0x78, 0x6e, 0x41, 0x70, 0x69, 0x64,
	0x48, 0x00, 0x52, 0x17, 0x69, 0x64, 0x2d, 0x4d, 0x2d, 0x4e, 0x47, 0x2d, 0x52, 0x41, 0x4e, 0x6e,
	0x6f, 0x64, 0x65, 0x55, 0x45, 0x58, 0x6e, 0x41, 0x50, 0x49, 0x44, 0x12, 0x58, 0x0a, 0x19, 0x69,
	0x64, 0x5f, 0x73, 0x5f, 0x6e, 0x67, 0x5f, 0x72, 0x61, 0x6e, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x75,
	0x65, 0x78, 0x6e, 0x5f, 0x61, 0x70, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x67, 0x52, 0x41, 0x6e, 0x6e, 0x6f,
	0x64, 0x65, 0x55, 0x65, 0x78, 0x6e, 0x41, 0x70, 0x69, 0x64, 0x48, 0x00, 0x52, 0x17, 0x69, 0x64,
	0x2d, 0x53, 0x2d, 0x4e, 0x47, 0x2d, 0x52, 0x41, 0x4e, 0x6e, 0x6f, 0x64, 0x65, 0x55, 0x45, 0x58,
	0x6e, 0x41, 0x50, 0x49, 0x44, 0x12, 0x85, 0x01, 0x0a, 0x28, 0x69, 0x64, 0x5f, 0x70, 0x64, 0x75,
	0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x6f, 0x5f, 0x62, 0x65, 0x5f, 0x72, 0x65,
	0x6c, 0x65, 0x61, 0x73, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x6c, 0x5f, 0x72, 0x65, 0x71, 0x5f, 0x61,
	0x63, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e,
	0x76, 0x31, 0x2e, 0x50, 0x64, 0x75, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x42,
	0x65, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x6c,
	0x52, 0x65, 0x71, 0x41, 0x63, 0x6b, 0x48, 0x00, 0x52, 0x23, 0x69, 0x64, 0x2d, 0x50, 0x44, 0x55,
	0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x42, 0x65, 0x52, 0x65, 0x6c, 0x65, 0x61,
	0x73, 0x65, 0x64, 0x2d, 0x52, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x41, 0x63, 0x6b, 0x12, 0x60, 0x0a,
	0x1a, 0x69, 0x64, 0x5f, 0x63, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x5f,
	0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x69, 0x74,
	0x69, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69,
	0x63, 0x73, 0x48, 0x00, 0x52, 0x19, 0x69, 0x64, 0x2d, 0x43, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61,
	0x6c, 0x69, 0x74, 0x79, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x73, 0x42,
	0x27, 0x0a, 0x25, 0x73, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65,
	0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x61, 0x63, 0x6b, 0x6e, 0x6f, 0x77, 0x6c,
	0x65, 0x64, 0x67, 0x65, 0x5f, 0x69, 0x65, 0x73, 0x22, 0xcc, 0x01, 0x0a, 0x21, 0x53, 0x6e, 0x6f,
	0x64, 0x65, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x41, 0x63, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x49, 0x45, 0x73, 0x12, 0x26,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x78, 0x6e, 0x61,
	0x70, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x49, 0x65, 0x49,
	0x44, 0x52, 0x03, 0x26, 0x69, 0x64, 0x12, 0x37, 0x0a, 0x0b, 0x63, 0x72, 0x69, 0x74, 0x69, 0x63,
	0x61, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x78, 0x6e,
	0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x69, 0x74,
	0x79, 0x52, 0x0c, 0x26, 0x63, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x12,
	0x46, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f,
	0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6e, 0x6f, 0x64, 0x65, 0x52, 0x65,
	0x6c, 0x65, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x41, 0x63, 0x6b, 0x6e,
	0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x49, 0x45, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x06, 0x26, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x6f, 0x0a, 0x1e, 0x53, 0x6e, 0x6f, 0x64, 0x65,
	0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x41, 0x63,
	0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x12, 0x4d, 0x0a, 0x0c, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2a, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6e, 0x6f, 0x64, 0x65, 0x52,
	0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x41, 0x63, 0x6b,
	0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x49, 0x45, 0x73, 0x52, 0x0b, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x49, 0x45, 0x73, 0x22, 0x59, 0x0a, 0x29, 0x50, 0x64, 0x75, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x42, 0x65, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73,
	0x65, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x41, 0x63, 0x6b, 0x45,
	0x78, 0x74, 0x49, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x22, 0xcb, 0x02, 0x0a, 0x23, 0x50, 0x64, 0x75, 0x73, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x54, 0x6f, 0x42, 0x65, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x64, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x41, 0x63, 0x6b, 0x12, 0x96, 0x01, 0x0a, 0x2d,
	0x70, 0x64, 0x75, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x74, 0x6f, 0x5f,
	0x62, 0x65, 0x5f, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x5f, 0x73, 0x6e, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x64,
	0x75, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x77, 0x69, 0x74, 0x68,
	0x44, 0x61, 0x74, 0x61, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x28, 0x70, 0x64, 0x75, 0x53, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x54, 0x6f, 0x42, 0x65, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x64,
	0x4c, 0x69, 0x73, 0x74, 0x2d, 0x53, 0x4e, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65,
	0x64, 0x88, 0x01, 0x01, 0x12, 0x59, 0x0a, 0x0e, 0x69, 0x5f, 0x65, 0x5f, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x78,
	0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x64, 0x75, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x54, 0x6f, 0x42, 0x65, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x64, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x41, 0x63, 0x6b, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73,
	0x52, 0x0d, 0x69, 0x45, 0x2d, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x42,
	0x30, 0x0a, 0x2e, 0x5f, 0x70, 0x64, 0x75, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x5f, 0x74, 0x6f, 0x5f, 0x62, 0x65, 0x5f, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x64, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x5f, 0x73, 0x6e, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65,
	0x64, 0x22, 0xfc, 0x02, 0x0a, 0x1a, 0x53, 0x6e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x6c, 0x65, 0x61,
	0x73, 0x65, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x45, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x58, 0x0a, 0x19, 0x69, 0x64, 0x5f, 0x6d, 0x5f, 0x6e, 0x67, 0x5f, 0x72, 0x61, 0x6e, 0x6e,
	0x6f, 0x64, 0x65, 0x5f, 0x75, 0x65, 0x78, 0x6e, 0x5f, 0x61, 0x70, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x67,
	0x52, 0x41, 0x6e, 0x6e, 0x6f, 0x64, 0x65, 0x55, 0x65, 0x78, 0x6e, 0x41, 0x70, 0x69, 0x64, 0x48,
	0x00, 0x52, 0x17, 0x69, 0x64, 0x2d, 0x4d, 0x2d, 0x4e, 0x47, 0x2d, 0x52, 0x41, 0x4e, 0x6e, 0x6f,
	0x64, 0x65, 0x55, 0x45, 0x58, 0x6e, 0x41, 0x50, 0x49, 0x44, 0x12, 0x58, 0x0a, 0x19, 0x69, 0x64,
	0x5f, 0x73, 0x5f, 0x6e, 0x67, 0x5f, 0x72, 0x61, 0x6e, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x75, 0x65,
	0x78, 0x6e, 0x5f, 0x61, 0x70, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x67, 0x52, 0x41, 0x6e, 0x6e, 0x6f, 0x64,
	0x65, 0x55, 0x65, 0x78, 0x6e, 0x41, 0x70, 0x69, 0x64, 0x48, 0x00, 0x52, 0x17, 0x69, 0x64, 0x2d,
	0x53, 0x2d, 0x4e, 0x47, 0x2d, 0x52, 0x41, 0x4e, 0x6e, 0x6f, 0x64, 0x65, 0x55, 0x45, 0x58, 0x6e,
	0x41, 0x50, 0x49, 0x44, 0x12, 0x2c, 0x0a, 0x08, 0x69, 0x64, 0x5f, 0x63, 0x61, 0x75, 0x73, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x61, 0x75, 0x73, 0x65, 0x48, 0x00, 0x52, 0x08, 0x69, 0x64, 0x2d, 0x43, 0x61, 0x75,
	0x73, 0x65, 0x12, 0x60, 0x0a, 0x1a, 0x69, 0x64, 0x5f, 0x63, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61,
	0x6c, 0x69, 0x74, 0x79, 0x5f, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x73,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x44, 0x69, 0x61, 0x67,
	0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x73, 0x48, 0x00, 0x52, 0x19, 0x69, 0x64, 0x2d, 0x43, 0x72,
	0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73,
	0x74, 0x69, 0x63, 0x73, 0x42, 0x1a, 0x0a, 0x18, 0x73, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x72, 0x65,
	0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x65, 0x73,
	0x22, 0xb4, 0x01, 0x0a, 0x15, 0x53, 0x6e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73,
	0x65, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x45, 0x73, 0x12, 0x26, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31,
	0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x49, 0x65, 0x49, 0x44, 0x52, 0x03, 0x26,
	0x69, 0x64, 0x12, 0x37, 0x0a, 0x0b, 0x63, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x69, 0x74,
	0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x0c, 0x26,
	0x63, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x3a, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x78, 0x6e, 0x61,
	0x70, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73,
	0x65, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x45, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x06, 0x26, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x57, 0x0a, 0x12, 0x53, 0x6e, 0x6f, 0x64, 0x65,
	0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x41, 0x0a,
	0x0c, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6e,
	0x6f, 0x64, 0x65, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74,
	0x49, 0x45, 0x73, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x49, 0x45, 0x73,
	0x22, 0xdd, 0x03, 0x0a, 0x1c, 0x53, 0x6e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x49, 0x45, 0x73, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x58, 0x0a, 0x19, 0x69, 0x64, 0x5f, 0x6d, 0x5f, 0x6e, 0x67, 0x5f, 0x72, 0x61, 0x6e,
	0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x75, 0x65, 0x78, 0x6e, 0x5f, 0x61, 0x70, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x4e,
	0x67, 0x52, 0x41, 0x6e, 0x6e, 0x6f, 0x64, 0x65, 0x55, 0x65, 0x78, 0x6e, 0x41, 0x70, 0x69, 0x64,
	0x48, 0x00, 0x52, 0x17, 0x69, 0x64, 0x2d, 0x4d, 0x2d, 0x4e, 0x47, 0x2d, 0x52, 0x41, 0x4e, 0x6e,
	0x6f, 0x64, 0x65, 0x55, 0x45, 0x58, 0x6e, 0x41, 0x50, 0x49, 0x44, 0x12, 0x58, 0x0a, 0x19, 0x69,
	0x64, 0x5f, 0x73, 0x5f, 0x6e, 0x67, 0x5f, 0x72, 0x61, 0x6e, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x75,
	0x65, 0x78, 0x6e, 0x5f, 0x61, 0x70, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x67, 0x52, 0x41, 0x6e, 0x6e, 0x6f,
	0x64, 0x65, 0x55, 0x65, 0x78, 0x6e, 0x41, 0x70, 0x69, 0x64, 0x48, 0x00, 0x52, 0x17, 0x69, 0x64,
	0x2d, 0x53, 0x2d, 0x4e, 0x47, 0x2d, 0x52, 0x41, 0x4e, 0x6e, 0x6f, 0x64, 0x65, 0x55, 0x45, 0x58,
	0x6e, 0x41, 0x50, 0x49, 0x44, 0x12, 0x84, 0x01, 0x0a, 0x29, 0x69, 0x64, 0x5f, 0x70, 0x64, 0x75,
	0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x6f, 0x5f, 0x62, 0x65, 0x5f, 0x72, 0x65,
	0x6c, 0x65, 0x61, 0x73, 0x65, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x6c, 0x5f,
	0x72, 0x71, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x78, 0x6e, 0x61, 0x70,
	0x2e, 0x76, 0x31, 0x2e, 0x50, 0x64, 0x75, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x6f,
	0x42, 0x65, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x6c, 0x52, 0x71, 0x64, 0x48, 0x00, 0x52, 0x24, 0x69, 0x64, 0x2d, 0x50, 0x44, 0x55, 0x53, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x42, 0x65, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65,
	0x64, 0x4c, 0x69, 0x73, 0x74, 0x2d, 0x52, 0x65, 0x6c, 0x52, 0x71, 0x64, 0x12, 0x2c, 0x0a, 0x08,
	0x69, 0x64, 0x5f, 0x63, 0x61, 0x75, 0x73, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e,
	0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x61, 0x75, 0x73, 0x65, 0x48, 0x00,
	0x52, 0x08, 0x69, 0x64, 0x2d, 0x43, 0x61, 0x75, 0x73, 0x65, 0x12, 0x36, 0x0a, 0x15, 0x69, 0x64,
	0x5f, 0x73, 0x6e, 0x5f, 0x74, 0x6f, 0x5f, 0x6d, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69,
	0x6e, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x15, 0x69, 0x64, 0x2d,
	0x53, 0x4e, 0x2d, 0x74, 0x6f, 0x2d, 0x4d, 0x4e, 0x2d, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x65, 0x72, 0x42, 0x1c, 0x0a, 0x1a, 0x73, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x72, 0x65, 0x6c, 0x65,
	0x61, 0x73, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x69, 0x65, 0x73,
	0x22, 0xb8, 0x01, 0x0a, 0x17, 0x53, 0x6e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x49, 0x45, 0x73, 0x12, 0x26, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e,
	0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x49, 0x65, 0x49, 0x44, 0x52,
	0x03, 0x26, 0x69, 0x64, 0x12, 0x37, 0x0a, 0x0b, 0x63, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c,
	0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x78, 0x6e, 0x61, 0x70,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x52,
	0x0c, 0x26, 0x63, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x3c, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x78,
	0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x6c, 0x65,
	0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x49, 0x45, 0x73, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x06, 0x26, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x5b, 0x0a, 0x14, 0x53,
	0x6e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x69,
	0x72, 0x65, 0x64, 0x12, 0x43, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f,
	0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x78, 0x6e, 0x61, 0x70,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x49, 0x45, 0x73, 0x52, 0x0b, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x49, 0x45, 0x73, 0x22, 0x56, 0x0a, 0x26, 0x50, 0x64, 0x75, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x42, 0x65, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73,
	0x65, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x6c, 0x52, 0x71, 0x64, 0x45, 0x78, 0x74, 0x49,
	0x65, 0x73, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x22, 0xc5, 0x02, 0x0a, 0x20, 0x50, 0x64, 0x75, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54,
	0x6f, 0x42, 0x65, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x6c, 0x52, 0x71, 0x64, 0x12, 0x96, 0x01, 0x0a, 0x2d, 0x70, 0x64, 0x75, 0x5f, 0x73, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x74, 0x6f, 0x5f, 0x62, 0x65, 0x5f, 0x72, 0x65, 0x6c,
	0x65, 0x61, 0x73, 0x65, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x73, 0x6e, 0x74, 0x65, 0x72,
	0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e,
	0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x64, 0x75, 0x73, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x77, 0x69, 0x74, 0x68, 0x44, 0x61, 0x74, 0x61, 0x46, 0x6f,
	0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48,
	0x00, 0x52, 0x28, 0x70, 0x64, 0x75, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x54, 0x6f,
	0x42, 0x65, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x2d, 0x53,
	0x4e, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x56,
	0x0a, 0x0e, 0x69, 0x5f, 0x65, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31,
	0x2e, 0x50, 0x64, 0x75, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x42, 0x65, 0x52,
	0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x6c, 0x52, 0x71,
	0x64, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x52, 0x0d, 0x69, 0x45, 0x2d, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x30, 0x0a, 0x2e, 0x5f, 0x70, 0x64, 0x75, 0x5f, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x74, 0x6f, 0x5f, 0x62, 0x65, 0x5f, 0x72, 0x65,
	0x6c, 0x65, 0x61, 0x73, 0x65, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x73, 0x6e, 0x74, 0x65,
	0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x22, 0xcb, 0x03, 0x0a, 0x1b, 0x53, 0x6e, 0x6f,
	0x64, 0x65, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d,
	0x49, 0x45, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x58, 0x0a, 0x19, 0x69, 0x64, 0x5f, 0x6d,
	0x5f, 0x6e, 0x67, 0x5f, 0x72, 0x61, 0x6e, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x75, 0x65, 0x78, 0x6e,
	0x5f, 0x61, 0x70, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x78, 0x6e,
	0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x67, 0x52, 0x41, 0x6e, 0x6e, 0x6f, 0x64, 0x65, 0x55,
	0x65, 0x78, 0x6e, 0x41, 0x70, 0x69, 0x64, 0x48, 0x00, 0x52, 0x17, 0x69, 0x64, 0x2d, 0x4d, 0x2d,
	0x4e, 0x47, 0x2d, 0x52, 0x41, 0x4e, 0x6e, 0x6f, 0x64, 0x65, 0x55, 0x45, 0x58, 0x6e, 0x41, 0x50,
	0x49, 0x44, 0x12, 0x58, 0x0a, 0x19, 0x69, 0x64, 0x5f, 0x73, 0x5f, 0x6e, 0x67, 0x5f, 0x72, 0x61,
	0x6e, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x75, 0x65, 0x78, 0x6e, 0x5f, 0x61, 0x70, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e,
	0x4e, 0x67, 0x52, 0x41, 0x6e, 0x6e, 0x6f, 0x64, 0x65, 0x55, 0x65, 0x78, 0x6e, 0x41, 0x70, 0x69,
	0x64, 0x48, 0x00, 0x52, 0x17, 0x69, 0x64, 0x2d, 0x53, 0x2d, 0x4e, 0x47, 0x2d, 0x52, 0x41, 0x4e,
	0x6e, 0x6f, 0x64, 0x65, 0x55, 0x45, 0x58, 0x6e, 0x41, 0x50, 0x49, 0x44, 0x12, 0x79, 0x0a, 0x24,
	0x69, 0x64, 0x5f, 0x70, 0x64, 0x75, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65,
	0x6c, 0x65, 0x61, 0x73, 0x65, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x6c, 0x5f,
	0x63, 0x6f, 0x6e, 0x66, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x78, 0x6e, 0x61,
	0x70, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x64, 0x75, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x6c, 0x43, 0x6f,
	0x6e, 0x66, 0x48, 0x00, 0x52, 0x21, 0x69, 0x64, 0x2d, 0x50, 0x44, 0x55, 0x53, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x2d,
	0x52, 0x65, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x12, 0x60, 0x0a, 0x1a, 0x69, 0x64, 0x5f, 0x63, 0x72,
	0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f,
	0x73, 0x74, 0x69, 0x63, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x78, 0x6e,
	0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x69, 0x74,
	0x79, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x73, 0x48, 0x00, 0x52, 0x19,
	0x69, 0x64, 0x2d, 0x43, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x44, 0x69,
	0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x73, 0x42, 0x1b, 0x0a, 0x19, 0x73, 0x6e, 0x6f,
	0x64, 0x65, 0x5f, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x72, 0x6d, 0x5f, 0x69, 0x65, 0x73, 0x22, 0xb6, 0x01, 0x0a, 0x16, 0x53, 0x6e, 0x6f, 0x64, 0x65,
	0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x49, 0x45,
	0x73, 0x12, 0x26, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x49, 0x65, 0x49, 0x44, 0x52, 0x03, 0x26, 0x69, 0x64, 0x12, 0x37, 0x0a, 0x0b, 0x63, 0x72, 0x69,
	0x74, 0x69, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14,
	0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61,
	0x6c, 0x69, 0x74, 0x79, 0x52, 0x0c, 0x26, 0x63, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x69,
	0x74, 0x79, 0x12, 0x3b, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x24, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6e, 0x6f, 0x64,
	0x65, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x49,
	0x45, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x26, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22,
	0x59, 0x0a, 0x13, 0x53, 0x6e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x12, 0x42, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x5f, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x78,
	0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x6c, 0x65,
	0x61, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x49, 0x45, 0x73, 0x52, 0x0b, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x49, 0x45, 0x73, 0x22, 0x53, 0x0a, 0x23, 0x50, 0x64,
	0x75, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x64,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x45, 0x78, 0x74, 0x49, 0x65,
	0x73, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22,
	0xb2, 0x02, 0x0a, 0x1d, 0x50, 0x64, 0x75, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x6c, 0x65, 0x61, 0x73, 0x65, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x6c, 0x43, 0x6f, 0x6e,
	0x66, 0x12, 0x8f, 0x01, 0x0a, 0x27, 0x70, 0x64, 0x75, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x5f, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x5f, 0x73, 0x6e, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x64,
	0x75, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x77, 0x69, 0x74, 0x68,
	0x44, 0x61, 0x74, 0x61, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x46, 0x72,
	0x6f, 0x6d, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x48, 0x00, 0x52, 0x24, 0x70, 0x64, 0x75, 0x53,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x64, 0x4c,
	0x69, 0x73, 0x74, 0x2d, 0x53, 0x4e, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64,
	0x88, 0x01, 0x01, 0x12, 0x53, 0x0a, 0x0e, 0x69, 0x5f, 0x65, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x78, 0x6e,
	0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x64, 0x75, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x6c, 0x43,
	0x6f, 0x6e, 0x66, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x52, 0x0d, 0x69, 0x45, 0x2d, 0x45, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x2a, 0x0a, 0x28, 0x5f, 0x70, 0x64, 0x75,
	0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73,
	0x65, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x73, 0x6e, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e,
	0x61, 0x74, 0x65, 0x64, 0x22, 0xf4, 0x02, 0x0a, 0x20, 0x53, 0x6e, 0x6f, 0x64, 0x65, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x65, 0x72, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x49, 0x45, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x58, 0x0a, 0x19, 0x69, 0x64, 0x5f,
	0x6d, 0x5f, 0x6e, 0x67, 0x5f, 0x72, 0x61, 0x6e, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x75, 0x65, 0x78,
	0x6e, 0x5f, 0x61, 0x70, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x78,
	0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x67, 0x52, 0x41, 0x6e, 0x6e, 0x6f, 0x64, 0x65,
	0x55, 0x65, 0x78, 0x6e, 0x41, 0x70, 0x69, 0x64, 0x48, 0x00, 0x52, 0x17, 0x69, 0x64, 0x2d, 0x4d,
	0x2d, 0x4e, 0x47, 0x2d, 0x52, 0x41, 0x4e, 0x6e, 0x6f, 0x64, 0x65, 0x55, 0x45, 0x58, 0x6e, 0x41,
	0x50, 0x49, 0x44, 0x12, 0x58, 0x0a, 0x19, 0x69, 0x64, 0x5f, 0x73, 0x5f, 0x6e, 0x67, 0x5f, 0x72,
	0x61, 0x6e, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x75, 0x65, 0x78, 0x6e, 0x5f, 0x61, 0x70, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31,
	0x2e, 0x4e, 0x67, 0x52, 0x41, 0x6e, 0x6e, 0x6f, 0x64, 0x65, 0x55, 0x65, 0x78, 0x6e, 0x41, 0x70,
	0x69, 0x64, 0x48, 0x00, 0x52, 0x17, 0x69, 0x64, 0x2d, 0x53, 0x2d, 0x4e, 0x47, 0x2d, 0x52, 0x41,
	0x4e, 0x6e, 0x6f, 0x64, 0x65, 0x55, 0x45, 0x58, 0x6e, 0x41, 0x50, 0x49, 0x44, 0x12, 0x79, 0x0a,
	0x23, 0x69, 0x64, 0x5f, 0x62, 0x65, 0x61, 0x72, 0x65, 0x72, 0x73, 0x5f, 0x73, 0x75, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x5f, 0x74, 0x6f, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x5f, 0x63,
	0x68, 0x65, 0x63, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x78, 0x6e, 0x61,
	0x70, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x65, 0x61, 0x72, 0x65, 0x72, 0x73, 0x53, 0x75, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x54, 0x6f, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x00, 0x52, 0x1f, 0x69, 0x64, 0x2d, 0x42, 0x65, 0x61, 0x72,
	0x65, 0x72, 0x73, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x54, 0x6f, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x65, 0x72, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x42, 0x21, 0x0a, 0x1f, 0x73, 0x6e, 0x6f, 0x64,
	0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x65, 0x73, 0x22, 0xc0, 0x01, 0x0a, 0x1b,
	0x53, 0x6e, 0x6f, 0x64, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x45, 0x73, 0x12, 0x26, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76,
	0x31, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x49, 0x65, 0x49, 0x44, 0x52, 0x03,
	0x26, 0x69, 0x64, 0x12, 0x37, 0x0a, 0x0b, 0x63, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x69,
	0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x0c,
	0x26, 0x63, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x40, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x78, 0x6e,
	0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6e, 0x6f, 0x64, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x65, 0x72, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x45,
	0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x26, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x63,
	0x0a, 0x18, 0x53, 0x6e, 0x6f, 0x64, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x47, 0x0a, 0x0c, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x24, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6e, 0x6f, 0x64, 0x65,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x49, 0x45, 0x73, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x49, 0x45, 0x73, 0x22, 0x6f, 0x0a, 0x20, 0x42, 0x65, 0x61, 0x72, 0x65, 0x72, 0x73, 0x53, 0x75,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x54, 0x6f, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x4b, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31,
	0x2e, 0x42, 0x65, 0x61, 0x72, 0x65, 0x72, 0x73, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x54,
	0x6f, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x49, 0x74, 0x65,
	0x6d, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x92, 0x01, 0x04, 0x08, 0x01, 0x10, 0x20, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x22, 0x56, 0x0a, 0x26, 0x42, 0x65, 0x61, 0x72, 0x65, 0x72, 0x73, 0x53,
	0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x54, 0x6f, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x49, 0x74, 0x65, 0x6d, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x12, 0x2c,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xda, 0x01, 0x0a,
	0x20, 0x42, 0x65, 0x61, 0x72, 0x65, 0x72, 0x73, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x54,
	0x6f, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x49, 0x74, 0x65,
	0x6d, 0x12, 0x26, 0x0a, 0x06, 0x64, 0x72, 0x62, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0e, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x72, 0x62, 0x49,
	0x44, 0x52, 0x06, 0x64, 0x72, 0x62, 0x2d, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x6c, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x75, 0x6c, 0x2d,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x6c, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x64, 0x6c, 0x2d, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x56, 0x0a, 0x0e, 0x69, 0x5f, 0x65, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x78, 0x6e, 0x61, 0x70,
	0x2e, 0x76, 0x31, 0x2e, 0x42, 0x65, 0x61, 0x72, 0x65, 0x72, 0x73, 0x53, 0x75, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x54, 0x6f, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x49, 0x74, 0x65, 0x6d, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x52, 0x0d, 0x69, 0x45, 0x2d, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xad, 0x04, 0x0a, 0x1b, 0x53, 0x6e,
	0x6f, 0x64, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65,
	0x64, 0x49, 0x45, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x58, 0x0a, 0x19, 0x69, 0x64, 0x5f,
	0x6d, 0x5f, 0x6e, 0x67, 0x5f, 0x72, 0x61, 0x6e, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x75, 0x65, 0x78,
	0x6e, 0x5f, 0x61, 0x70, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x78,
	0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x67, 0x52, 0x41, 0x6e, 0x6e, 0x6f, 0x64, 0x65,
	0x55, 0x65, 0x78, 0x6e, 0x41, 0x70, 0x69, 0x64, 0x48, 0x00, 0x52, 0x17, 0x69, 0x64, 0x2d, 0x4d,
	0x2d, 0x4e, 0x47, 0x2d, 0x52, 0x41, 0x4e, 0x6e, 0x6f, 0x64, 0x65, 0x55, 0x45, 0x58, 0x6e, 0x41,
	0x50, 0x49, 0x44, 0x12, 0x58, 0x0a, 0x19, 0x69, 0x64, 0x5f, 0x73, 0x5f, 0x6e, 0x67, 0x5f, 0x72,
	0x61, 0x6e, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x75, 0x65, 0x78, 0x6e, 0x5f, 0x61, 0x70, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31,
	0x2e, 0x4e, 0x67, 0x52, 0x41, 0x6e, 0x6e, 0x6f, 0x64, 0x65, 0x55, 0x65, 0x78, 0x6e, 0x41, 0x70,
	0x69, 0x64, 0x48, 0x00, 0x52, 0x17, 0x69, 0x64, 0x2d, 0x53, 0x2d, 0x4e, 0x47, 0x2d, 0x52, 0x41,
	0x4e, 0x6e, 0x6f, 0x64, 0x65, 0x55, 0x45, 0x58, 0x6e, 0x41, 0x50, 0x49, 0x44, 0x12, 0x59, 0x0a,
	0x19, 0x69, 0x64, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x73, 0x5f, 0x6e, 0x67, 0x5f,
	0x72, 0x61, 0x6e, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61,
	0x6c, 0x4e, 0x67, 0x52, 0x41, 0x6e, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x44, 0x48, 0x00, 0x52, 0x18,
	0x69, 0x64, 0x2d, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x2d, 0x53, 0x2d, 0x4e, 0x47, 0x2d, 0x52,
	0x41, 0x4e, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x44, 0x12, 0x2c, 0x0a, 0x08, 0x69, 0x64, 0x5f, 0x63,
	0x61, 0x75, 0x73, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x78, 0x6e, 0x61,
	0x70, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x61, 0x75, 0x73, 0x65, 0x48, 0x00, 0x52, 0x08, 0x69, 0x64,
	0x2d, 0x43, 0x61, 0x75, 0x73, 0x65, 0x12, 0x7c, 0x0a, 0x24, 0x69, 0x64, 0x5f, 0x70, 0x64, 0x75,
	0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x6e, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x5f, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x50,
	0x64, 0x75, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x4e, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x00, 0x52,
	0x23, 0x69, 0x64, 0x2d, 0x50, 0x44, 0x55, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2d, 0x53,
	0x4e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x2d,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x36, 0x0a, 0x15, 0x69, 0x64, 0x5f, 0x73, 0x6e, 0x5f, 0x74, 0x6f,
	0x5f, 0x6d, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x15, 0x69, 0x64, 0x2d, 0x53, 0x4e, 0x2d, 0x74, 0x6f, 0x2d,
	0x4d, 0x4e, 0x2d, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x42, 0x1b, 0x0a, 0x19,
	0x73, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x72, 0x65, 0x71,
	0x75, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x69, 0x65, 0x73, 0x22, 0xb6, 0x01, 0x0a, 0x16, 0x53, 0x6e,
	0x6f, 0x64, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65,
	0x64, 0x49, 0x45, 0x73, 0x12, 0x26, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x49, 0x65, 0x49, 0x44, 0x52, 0x03, 0x26, 0x69, 0x64, 0x12, 0x37, 0x0a, 0x0b,
	0x63, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x14, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x69, 0x74,
	0x69, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x0c, 0x26, 0x63, 0x72, 0x69, 0x74, 0x69, 0x63,
	0x61, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x3b, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x6e, 0x6f, 0x64, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72,
	0x65, 0x64, 0x49, 0x45, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x26, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x22, 0x59, 0x0a, 0x13, 0x53, 0x6e, 0x6f, 0x64, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x12, 0x42, 0x0a, 0x0c, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6e, 0x6f, 0x64, 0x65, 0x43,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x49, 0x45, 0x73,
	0x52, 0x0b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x49, 0x45, 0x73, 0x22, 0x6c, 0x0a,
	0x1e, 0x50, 0x64, 0x75, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x4e, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x4a, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27,
	0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x64, 0x75, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x53, 0x4e, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x69,
	0x72, 0x65, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x42, 0x0b, 0xfa, 0x42, 0x08, 0x92, 0x01, 0x05, 0x08,
	0x01, 0x10, 0x80, 0x02, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x54, 0x0a, 0x24, 0x50,
	0x64, 0x75, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x4e, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x45, 0x78, 0x74,
	0x49, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x22, 0xa1, 0x03, 0x0a, 0x1e, 0x50, 0x64, 0x75, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x53, 0x4e, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64,
	0x49, 0x74, 0x65, 0x6d, 0x12, 0x3b, 0x0a, 0x0e, 0x70, 0x64, 0x75, 0x5f, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x78,
	0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x64, 0x75, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x49, 0x44, 0x52, 0x0c, 0x70, 0x64, 0x75, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x12, 0x64, 0x0a, 0x0d, 0x73, 0x6e, 0x5f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74,
	0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e,
	0x76, 0x31, 0x2e, 0x50, 0x64, 0x75, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x69,
	0x72, 0x65, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x53, 0x4e, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61,
	0x74, 0x65, 0x64, 0x48, 0x00, 0x52, 0x0d, 0x73, 0x6e, 0x2d, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e,
	0x61, 0x74, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x64, 0x0a, 0x0d, 0x6d, 0x6e, 0x5f, 0x74, 0x65,
	0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39,
	0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x64, 0x75, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x4d, 0x4e, 0x74,
	0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x48, 0x01, 0x52, 0x0d, 0x6d, 0x6e, 0x2d,
	0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x52, 0x0a,
	0x0d, 0x69, 0x5f, 0x65, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x50,
	0x64, 0x75, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x4e, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x45, 0x78, 0x74,
	0x49, 0x65, 0x73, 0x52, 0x0c, 0x69, 0x45, 0x2d, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x73, 0x6e, 0x5f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61,
	0x74, 0x65, 0x64, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x6d, 0x6e, 0x5f, 0x74, 0x65, 0x72, 0x6d, 0x69,
	0x6e, 0x61, 0x74, 0x65, 0x64, 0x22, 0xc9, 0x03, 0x0a, 0x1a, 0x53, 0x6e, 0x6f, 0x64, 0x65, 0x43,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x49, 0x45, 0x73, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x58, 0x0a, 0x19, 0x69, 0x64, 0x5f, 0x6d, 0x5f, 0x6e, 0x67, 0x5f,
	0x72, 0x61, 0x6e, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x75, 0x65, 0x78, 0x6e, 0x5f, 0x61, 0x70, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76,
	0x31, 0x2e, 0x4e, 0x67, 0x52, 0x41, 0x6e, 0x6e, 0x6f, 0x64, 0x65, 0x55, 0x65, 0x78, 0x6e, 0x41,
	0x70, 0x69, 0x64, 0x48, 0x00, 0x52, 0x17, 0x69, 0x64, 0x2d, 0x4d, 0x2d, 0x4e, 0x47, 0x2d, 0x52,
	0x41, 0x4e, 0x6e, 0x6f, 0x64, 0x65, 0x55, 0x45, 0x58, 0x6e, 0x41, 0x50, 0x49, 0x44, 0x12, 0x58,
	0x0a, 0x19, 0x69, 0x64, 0x5f, 0x73, 0x5f, 0x6e, 0x67, 0x5f, 0x72, 0x61, 0x6e, 0x6e, 0x6f, 0x64,
	0x65, 0x5f, 0x75, 0x65, 0x78, 0x6e, 0x5f, 0x61, 0x70, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x67, 0x52, 0x41,
	0x6e, 0x6e, 0x6f, 0x64, 0x65, 0x55, 0x65, 0x78, 0x6e, 0x41, 0x70, 0x69, 0x64, 0x48, 0x00, 0x52,
	0x17, 0x69, 0x64, 0x2d, 0x53, 0x2d, 0x4e, 0x47, 0x2d, 0x52, 0x41, 0x4e, 0x6e, 0x6f, 0x64, 0x65,
	0x55, 0x45, 0x58, 0x6e, 0x41, 0x50, 0x49, 0x44, 0x12, 0x79, 0x0a, 0x23, 0x69, 0x64, 0x5f, 0x70,
	0x64, 0x75, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x6e, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e,
	0x50, 0x64, 0x75, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x4e, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x00, 0x52,
	0x22, 0x69, 0x64, 0x2d, 0x50, 0x44, 0x55, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2d, 0x53,
	0x4e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x2d, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x60, 0x0a, 0x1a, 0x69, 0x64, 0x5f, 0x63, 0x72, 0x69, 0x74, 0x69, 0x63,
	0x61, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63,
	0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x44, 0x69, 0x61,
	0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x73, 0x48, 0x00, 0x52, 0x19, 0x69, 0x64, 0x2d, 0x43,
	0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f,
	0x73, 0x74, 0x69, 0x63, 0x73, 0x42, 0x1a, 0x0a, 0x18, 0x73, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x5f, 0x69, 0x65,
	0x73, 0x22, 0xb4, 0x01, 0x0a, 0x15, 0x53, 0x6e, 0x6f, 0x64, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x49, 0x45, 0x73, 0x12, 0x26, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76,
	0x31, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x49, 0x65, 0x49, 0x44, 0x52, 0x03,
	0x26, 0x69, 0x64, 0x12, 0x37, 0x0a, 0x0b, 0x63, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x69,
	0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x0c,
	0x26, 0x63, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x3a, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x78, 0x6e,
	0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6e, 0x6f, 0x64, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x49, 0x45, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x06, 0x26, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x57, 0x0a, 0x12, 0x53, 0x6e, 0x6f, 0x64,
	0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x12, 0x41,
	0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x69, 0x65, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x6e, 0x6f, 0x64, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72,
	0x6d, 0x49, 0x45, 0x73, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x49, 0x45,
	0x73, 0x22, 0x6a, 0x0a, 0x1d, 0x50, 0x64, 0x75, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53,
	0x4e, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x49, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x26, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x64, 0x75, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x4e, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x72, 0x6d, 0x49, 0x74, 0x65, 0x6d, 0x42, 0x0b, 0xfa, 0x42, 0x08, 0x92, 0x01,
	0x05, 0x08, 0x01, 0x10, 0x80, 0x02, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x53, 0x0a,
	0x23, 0x50, 0x64, 0x75, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x4e, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x49, 0x74, 0x65, 0x6d, 0x45, 0x78,
	0x74, 0x49, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x22, 0x9d, 0x03, 0x0a, 0x1d, 0x50, 0x64, 0x75, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x53, 0x4e, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d,
	0x49, 0x74, 0x65, 0x6d, 0x12, 0x3b, 0x0a, 0x0e, 0x70, 0x64, 0x75, 0x5f, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x78,
	0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x64, 0x75, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x49, 0x44, 0x52, 0x0c, 0x70, 0x64, 0x75, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x12, 0x63, 0x0a, 0x0d, 0x73, 0x6e, 0x5f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74,
	0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e,
	0x76, 0x31, 0x2e, 0x50, 0x64, 0x75, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x72, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x53, 0x4e, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74,
	0x65, 0x64, 0x48, 0x00, 0x52, 0x0d, 0x73, 0x6e, 0x2d, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61,
	0x74, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x63, 0x0a, 0x0d, 0x6d, 0x6e, 0x5f, 0x74, 0x65, 0x72,
	0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e,
	0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x64, 0x75, 0x73, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x4d, 0x4e, 0x74, 0x65, 0x72,
	0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x48, 0x01, 0x52, 0x0d, 0x6d, 0x6e, 0x2d, 0x74, 0x65,
	0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x51, 0x0a, 0x0d, 0x69,
	0x5f, 0x65, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x64, 0x75,
	0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x4e, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x49, 0x74, 0x65, 0x6d, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73,
	0x52, 0x0c, 0x69, 0x45, 0x2d, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x10,
	0x0a, 0x0e, 0x5f, 0x73, 0x6e, 0x5f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64,
	0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x6d, 0x6e, 0x5f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74,
	0x65, 0x64, 0x22, 0xfa, 0x02, 0x0a, 0x19, 0x53, 0x6e, 0x6f, 0x64, 0x65, 0x43, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x52, 0x65, 0x66, 0x75, 0x73, 0x65, 0x49, 0x45, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x58, 0x0a, 0x19, 0x69, 0x64, 0x5f, 0x6d, 0x5f, 0x6e, 0x67, 0x5f, 0x72, 0x61, 0x6e, 0x6e,
	0x6f, 0x64, 0x65, 0x5f, 0x75, 0x65, 0x78, 0x6e, 0x5f, 0x61, 0x70, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x67,
	0x52, 0x41, 0x6e, 0x6e, 0x6f, 0x64, 0x65, 0x55, 0x65, 0x78, 0x6e, 0x41, 0x70, 0x69, 0x64, 0x48,
	0x00, 0x52, 0x17, 0x69, 0x64, 0x2d, 0x4d, 0x2d, 0x4e, 0x47, 0x2d, 0x52, 0x41, 0x4e, 0x6e, 0x6f,
	0x64, 0x65, 0x55, 0x45, 0x58, 0x6e, 0x41, 0x50, 0x49, 0x44, 0x12, 0x58, 0x0a, 0x19, 0x69, 0x64,
	0x5f, 0x73, 0x5f, 0x6e, 0x67, 0x5f, 0x72, 0x61, 0x6e, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x75, 0x65,
	0x78, 0x6e, 0x5f, 0x61, 0x70, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x67, 0x52, 0x41, 0x6e, 0x6e, 0x6f, 0x64,
	0x65, 0x55, 0x65, 0x78, 0x6e, 0x41, 0x70, 0x69, 0x64, 0x48, 0x00, 0x52, 0x17, 0x69, 0x64, 0x2d,
	0x53, 0x2d, 0x4e, 0x47, 0x2d, 0x52, 0x41, 0x4e, 0x6e, 0x6f, 0x64, 0x65, 0x55, 0x45, 0x58, 0x6e,
	0x41, 0x50, 0x49, 0x44, 0x12, 0x2c, 0x0a, 0x08, 0x69, 0x64, 0x5f, 0x63, 0x61, 0x75, 0x73, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x61, 0x75, 0x73, 0x65, 0x48, 0x00, 0x52, 0x08, 0x69, 0x64, 0x2d, 0x43, 0x61, 0x75,
	0x73, 0x65, 0x12, 0x60, 0x0a, 0x1a, 0x69, 0x64, 0x5f, 0x63, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61,
	0x6c, 0x69, 0x74, 0x79, 0x5f, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x73,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x44, 0x69, 0x61, 0x67,
	0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x73, 0x48, 0x00, 0x52, 0x19, 0x69, 0x64, 0x2d, 0x43, 0x72,
	0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73,
	0x74, 0x69, 0x63, 0x73, 0x42, 0x19, 0x0a, 0x17, 0x73, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x75, 0x73, 0x65, 0x5f, 0x69, 0x65, 0x73, 0x22,
	0xb2, 0x01, 0x0a, 0x14, 0x53, 0x6e, 0x6f, 0x64, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52,
	0x65, 0x66, 0x75, 0x73, 0x65, 0x49, 0x45, 0x73, 0x12, 0x26, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x49, 0x65, 0x49, 0x44, 0x52, 0x03, 0x26, 0x69, 0x64,
	0x12, 0x37, 0x0a, 0x0b, 0x63, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x0c, 0x26, 0x63, 0x72,
	0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x39, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x6e, 0x6f, 0x64, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65,
	0x66, 0x75, 0x73, 0x65, 0x49, 0x45, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x26, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x22, 0x55, 0x0a, 0x11, 0x53, 0x6e, 0x6f, 0x64, 0x65, 0x43, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x52, 0x65, 0x66, 0x75, 0x73, 0x65, 0x12, 0x40, 0x0a, 0x0c, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6e, 0x6f, 0x64, 0x65, 0x43,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x66, 0x75, 0x73, 0x65, 0x49, 0x45, 0x73, 0x52, 0x0b,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x49, 0x45, 0x73, 0x22, 0x92, 0x05, 0x0a, 0x13,
	0x52, 0x72, 0x63, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x49, 0x45, 0x73, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x58, 0x0a, 0x19, 0x69, 0x64, 0x5f, 0x6d, 0x5f, 0x6e, 0x67, 0x5f, 0x72,
	0x61, 0x6e, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x75, 0x65, 0x78, 0x6e, 0x5f, 0x61, 0x70, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31,
	0x2e, 0x4e, 0x67, 0x52, 0x41, 0x6e, 0x6e, 0x6f, 0x64, 0x65, 0x55, 0x65, 0x78, 0x6e, 0x41, 0x70,
	0x69, 0x64, 0x48, 0x00, 0x52, 0x17, 0x69, 0x64, 0x2d, 0x4d, 0x2d, 0x4e, 0x47, 0x2d, 0x52, 0x41,
	0x4e, 0x6e, 0x6f, 0x64, 0x65, 0x55, 0x45, 0x58, 0x6e, 0x41, 0x50, 0x49, 0x44, 0x12, 0x58, 0x0a,
	0x19, 0x69, 0x64, 0x5f, 0x73, 0x5f, 0x6e, 0x67, 0x5f, 0x72, 0x61, 0x6e, 0x6e, 0x6f, 0x64, 0x65,
	0x5f, 0x75, 0x65, 0x78, 0x6e, 0x5f, 0x61, 0x70, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x67, 0x52, 0x41, 0x6e,
	0x6e, 0x6f, 0x64, 0x65, 0x55, 0x65, 0x78, 0x6e, 0x41, 0x70, 0x69, 0x64, 0x48, 0x00, 0x52, 0x17,
	0x69, 0x64, 0x2d, 0x53, 0x2d, 0x4e, 0x47, 0x2d, 0x52, 0x41, 0x4e, 0x6e, 0x6f, 0x64, 0x65, 0x55,
	0x45, 0x58, 0x6e, 0x41, 0x50, 0x49, 0x44, 0x12, 0x59, 0x0a, 0x18, 0x69, 0x64, 0x5f, 0x73, 0x70,
	0x6c, 0x69, 0x74, 0x5f, 0x73, 0x72, 0x62, 0x5f, 0x72, 0x72, 0x63, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x78, 0x6e, 0x61, 0x70,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x53, 0x72, 0x62, 0x52, 0x52, 0x63, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x48, 0x00, 0x52, 0x17, 0x69, 0x64, 0x2d, 0x53, 0x70,
	0x6c, 0x69, 0x74, 0x53, 0x52, 0x42, 0x2d, 0x52, 0x52, 0x43, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x65, 0x72, 0x12, 0x57, 0x0a, 0x17, 0x69, 0x64, 0x5f, 0x75, 0x65, 0x72, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x5f, 0x72, 0x72, 0x63, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x65,
	0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x72, 0x63, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x48, 0x00, 0x52, 0x16, 0x69, 0x64, 0x2d, 0x55, 0x45, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x52, 0x52, 0x43, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x12, 0x7f, 0x0a, 0x28, 0x69,
	0x64, 0x5f, 0x66, 0x61, 0x73, 0x74, 0x5f, 0x6d, 0x63, 0x67, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65,
	0x72, 0x79, 0x5f, 0x72, 0x72, 0x63, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x73,
	0x6e, 0x5f, 0x74, 0x6f, 0x5f, 0x6d, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e,
	0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x61, 0x73, 0x74, 0x4d, 0x63, 0x67, 0x72,
	0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x52, 0x72, 0x63, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x65, 0x72, 0x48, 0x00, 0x52, 0x26, 0x69, 0x64, 0x2d, 0x46, 0x61, 0x73, 0x74, 0x4d, 0x43, 0x47,
	0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x52, 0x52, 0x43, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x65, 0x72, 0x2d, 0x53, 0x4e, 0x2d, 0x74, 0x6f, 0x2d, 0x4d, 0x4e, 0x12, 0x7f, 0x0a, 0x28,
	0x69, 0x64, 0x5f, 0x66, 0x61, 0x73, 0x74, 0x5f, 0x6d, 0x63, 0x67, 0x72, 0x65, 0x63, 0x6f, 0x76,
	0x65, 0x72, 0x79, 0x5f, 0x72, 0x72, 0x63, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f,
	0x6d, 0x6e, 0x5f, 0x74, 0x6f, 0x5f, 0x73, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23,
	0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x61, 0x73, 0x74, 0x4d, 0x63, 0x67,
	0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x52, 0x72, 0x63, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x65, 0x72, 0x48, 0x00, 0x52, 0x26, 0x69, 0x64, 0x2d, 0x46, 0x61, 0x73, 0x74, 0x4d, 0x43,
	0x47, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x52, 0x52, 0x43, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x65, 0x72, 0x2d, 0x4d, 0x4e, 0x2d, 0x74, 0x6f, 0x2d, 0x53, 0x4e, 0x42, 0x11, 0x0a,
	0x0f, 0x72, 0x72, 0x63, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x69, 0x65, 0x73,
	0x22, 0xa6, 0x01, 0x0a, 0x0e, 0x52, 0x72, 0x63, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72,
	0x49, 0x45, 0x73, 0x12, 0x26, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x49, 0x65, 0x49, 0x44, 0x52, 0x03, 0x26, 0x69, 0x64, 0x12, 0x37, 0x0a, 0x0b, 0x63,
	0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x14, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x69, 0x74, 0x69,
	0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x0c, 0x26, 0x63, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61,
	0x6c, 0x69, 0x74, 0x79, 0x12, 0x33, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x72,
	0x63, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x49, 0x45, 0x73, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x06, 0x26, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x49, 0x0a, 0x0b, 0x52, 0x72, 0x63,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x12, 0x3a, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x72, 0x63, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x65, 0x72, 0x49, 0x45, 0x73, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x49, 0x45, 0x73, 0x22, 0x49, 0x0a, 0x19, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x53, 0x72, 0x62,
	0x52, 0x52, 0x63, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x45, 0x78, 0x74, 0x49, 0x65,
	0x73, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22,
	0xb7, 0x02, 0x0a, 0x13, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x53, 0x72, 0x62, 0x52, 0x52, 0x63, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x12, 0x28, 0x0a, 0x0d, 0x72, 0x72, 0x63, 0x5f, 0x63,
	0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00,
	0x52, 0x0c, 0x72, 0x72, 0x63, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x88, 0x01,
	0x01, 0x12, 0x3e, 0x0a, 0x08, 0x73, 0x72, 0x62, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x72,
	0x62, 0x54, 0x79, 0x70, 0x65, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x53, 0x72, 0x62, 0x72, 0x72, 0x63,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x52, 0x07, 0x73, 0x72, 0x62, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x45, 0x0a, 0x0f, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x78, 0x6e, 0x61,
	0x70, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x48, 0x01, 0x52, 0x0e, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01, 0x01, 0x12, 0x49, 0x0a, 0x0e, 0x69, 0x5f, 0x65, 0x5f,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x22, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x70, 0x6c, 0x69, 0x74,
	0x53, 0x72, 0x62, 0x52, 0x52, 0x63, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x45, 0x78,
	0x74, 0x49, 0x65, 0x73, 0x52, 0x0d, 0x69, 0x45, 0x2d, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x73, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x72, 0x72, 0x63, 0x5f, 0x63, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x65, 0x72, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65,
	0x72, 0x79, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x49, 0x0a, 0x19, 0x55, 0x65, 0x72,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x72, 0x63, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72,
	0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x22, 0x85, 0x01, 0x0a, 0x13, 0x55, 0x65, 0x72, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x52, 0x72, 0x63, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x12, 0x23, 0x0a, 0x0d,
	0x72, 0x72, 0x63, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x0c, 0x72, 0x72, 0x63, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65,
	0x72, 0x12, 0x49, 0x0a, 0x0e, 0x69, 0x5f, 0x65, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x78, 0x6e, 0x61, 0x70,
	0x2e, 0x76, 0x31, 0x2e, 0x55, 0x65, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x72, 0x63, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x52, 0x0d, 0x69,
	0x45, 0x2d, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x50, 0x0a, 0x20,
	0x46, 0x61, 0x73, 0x74, 0x4d, 0x63, 0x67, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x52,
	0x72, 0x63, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73,
	0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x93,
	0x01, 0x0a, 0x1a, 0x46, 0x61, 0x73, 0x74, 0x4d, 0x63, 0x67, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65,
	0x72, 0x79, 0x52, 0x72, 0x63, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x12, 0x23, 0x0a,
	0x0d, 0x72, 0x72, 0x63, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c, 0x72, 0x72, 0x63, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x65, 0x72, 0x12, 0x50, 0x0a, 0x0e, 0x69, 0x5f, 0x65, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x78, 0x6e, 0x61,
	0x70, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x61, 0x73, 0x74, 0x4d, 0x63, 0x67, 0x72, 0x65, 0x63, 0x6f,
	0x76, 0x65, 0x72, 0x79, 0x52, 0x72, 0x63, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x45,
	0x78, 0x74, 0x49, 0x65, 0x73, 0x52, 0x0d, 0x69, 0x45, 0x2d, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x22, 0xfb, 0x02, 0x0a, 0x25, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x49, 0x6e, 0x64, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x45, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x58,
	0x0a, 0x19, 0x69, 0x64, 0x5f, 0x6d, 0x5f, 0x6e, 0x67, 0x5f, 0x72, 0x61, 0x6e, 0x6e, 0x6f, 0x64,
	0x65, 0x5f, 0x75, 0x65, 0x78, 0x6e, 0x5f, 0x61, 0x70, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x67, 0x52, 0x41,
	0x6e, 0x6e, 0x6f, 0x64, 0x65, 0x55, 0x65, 0x78, 0x6e, 0x41, 0x70, 0x69, 0x64, 0x48, 0x00, 0x52,
	0x17, 0x69, 0x64, 0x2d, 0x4d, 0x2d, 0x4e, 0x47, 0x2d, 0x52, 0x41, 0x4e, 0x6e, 0x6f, 0x64, 0x65,
	0x55, 0x45, 0x58, 0x6e, 0x41, 0x50, 0x49, 0x44, 0x12, 0x58, 0x0a, 0x19, 0x69, 0x64, 0x5f, 0x73,
	0x5f, 0x6e, 0x67, 0x5f, 0x72, 0x61, 0x6e, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x75, 0x65, 0x78, 0x6e,
	0x5f, 0x61, 0x70, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x78, 0x6e,
	0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x67, 0x52, 0x41, 0x6e, 0x6e, 0x6f, 0x64, 0x65, 0x55,
	0x65, 0x78, 0x6e, 0x41, 0x70, 0x69, 0x64, 0x48, 0x00, 0x52, 0x17, 0x69, 0x64, 0x2d, 0x53, 0x2d,
	0x4e, 0x47, 0x2d, 0x52, 0x41, 0x4e, 0x6e, 0x6f, 0x64, 0x65, 0x55, 0x45, 0x58, 0x6e, 0x41, 0x50,
	0x49, 0x44, 0x12, 0x77, 0x0a, 0x23, 0x69, 0x64, 0x5f, 0x70, 0x64, 0x75, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x5f, 0x6e, 0x6f,
	0x74, 0x69, 0x66, 0x79, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x26, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x64, 0x75, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x4e, 0x6f, 0x74,
	0x69, 0x66, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x00, 0x52, 0x20, 0x69, 0x64, 0x2d, 0x50, 0x44,
	0x55, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x73, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x25, 0x0a, 0x23, 0x6e,
	0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x5f, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x65, 0x73, 0x22, 0xca, 0x01, 0x0a, 0x20, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x45, 0x73, 0x12, 0x26, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x49, 0x65, 0x49, 0x44, 0x52, 0x03, 0x26, 0x69, 0x64, 0x12,
	0x37, 0x0a, 0x0b, 0x63, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x0c, 0x26, 0x63, 0x72, 0x69,
	0x74, 0x69, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x45, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76,
	0x31, 0x2e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x45, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x26, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22,
	0x6d, 0x0a, 0x1d, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x4c, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x69, 0x65, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31,
	0x2e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x45,
	0x73, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x49, 0x45, 0x73, 0x22, 0x6a,
	0x0a, 0x1d, 0x50, 0x64, 0x75, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x73, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x49, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26,
	0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x64, 0x75, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x4e, 0x6f, 0x74, 0x69,
	0x66, 0x79, 0x49, 0x74, 0x65, 0x6d, 0x42, 0x0b, 0xfa, 0x42, 0x08, 0x92, 0x01, 0x05, 0x08, 0x01,
	0x10, 0x80, 0x02, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x53, 0x0a, 0x23, 0x50, 0x64,
	0x75, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x73, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x49, 0x74, 0x65, 0x6d, 0x45, 0x78, 0x74, 0x49, 0x65,
	0x73, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22,
	0xb6, 0x02, 0x0a, 0x1d, 0x50, 0x64, 0x75, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x49, 0x74, 0x65,
	0x6d, 0x12, 0x3b, 0x0a, 0x0e, 0x70, 0x64, 0x75, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x78, 0x6e, 0x61, 0x70,
	0x2e, 0x76, 0x31, 0x2e, 0x50, 0x64, 0x75, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44,
	0x52, 0x0c, 0x70, 0x64, 0x75, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x82,
	0x01, 0x0a, 0x25, 0x71, 0x6f, 0x73, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x5f, 0x6e, 0x6f, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x5f,
	0x69, 0x6e, 0x64, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31,
	0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x6f, 0x53, 0x66, 0x6c, 0x6f, 0x77,
	0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x20, 0x71, 0x6f, 0x73, 0x46, 0x6c, 0x6f, 0x77, 0x73, 0x4e, 0x6f, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x49, 0x6e, 0x64, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x53, 0x0a, 0x0e, 0x69, 0x5f, 0x65, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x78, 0x6e,
	0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x64, 0x75, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x49,
	0x74, 0x65, 0x6d, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x52, 0x0d, 0x69, 0x45, 0x2d, 0x45, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xcf, 0x04, 0x0a, 0x1c, 0x41, 0x63, 0x74,
	0x69, 0x76, 0x69, 0x74, 0x79, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x45, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x58, 0x0a, 0x19, 0x69, 0x64, 0x5f,
	0x6d, 0x5f, 0x6e, 0x67, 0x5f, 0x72, 0x61, 0x6e, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x75, 0x65, 0x78,
	0x6e, 0x5f, 0x61, 0x70, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x78,
	0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x67, 0x52, 0x41, 0x6e, 0x6e, 0x6f, 0x64, 0x65,
	0x55, 0x65, 0x78, 0x6e, 0x41, 0x70, 0x69, 0x64, 0x48, 0x00, 0x52, 0x17, 0x69, 0x64, 0x2d, 0x4d,
	0x2d, 0x4e, 0x47, 0x2d, 0x52, 0x41, 0x4e, 0x6e, 0x6f, 0x64, 0x65, 0x55, 0x45, 0x58, 0x6e, 0x41,
	0x50, 0x49, 0x44, 0x12, 0x58, 0x0a, 0x19, 0x69, 0x64, 0x5f, 0x73, 0x5f, 0x6e, 0x67, 0x5f, 0x72,
	0x61, 0x6e, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x75, 0x65, 0x78, 0x6e, 0x5f, 0x61, 0x70, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31,
	0x2e, 0x4e, 0x67, 0x52, 0x41, 0x6e, 0x6e, 0x6f, 0x64, 0x65, 0x55, 0x65, 0x78, 0x6e, 0x41, 0x70,
	0x69, 0x64, 0x48, 0x00, 0x52, 0x17, 0x69, 0x64, 0x2d, 0x53, 0x2d, 0x4e, 0x47, 0x2d, 0x52, 0x41,
	0x4e, 0x6e, 0x6f, 0x64, 0x65, 0x55, 0x45, 0x58, 0x6e, 0x41, 0x50, 0x49, 0x44, 0x12, 0x7b, 0x0a,
	0x25, 0x69, 0x64, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x5f, 0x74,
	0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f,
	0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x78,
	0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x50, 0x6c, 0x61, 0x6e, 0x65,
	0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x48, 0x00, 0x52, 0x21, 0x69, 0x64, 0x2d, 0x55, 0x73, 0x65, 0x72,
	0x50, 0x6c, 0x61, 0x6e, 0x65, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x41, 0x63, 0x74, 0x69,
	0x76, 0x69, 0x74, 0x79, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x90, 0x01, 0x0a, 0x2c, 0x69,
	0x64, 0x5f, 0x70, 0x64, 0x75, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f,
	0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2e, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x64, 0x75, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x41,
	0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x4c, 0x69, 0x73,
	0x74, 0x48, 0x00, 0x52, 0x28, 0x69, 0x64, 0x2d, 0x50, 0x44, 0x55, 0x53, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x79, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x4e, 0x0a,
	0x14, 0x69, 0x64, 0x5f, 0x72, 0x61, 0x6e, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x5f, 0x66, 0x61,
	0x69, 0x6c, 0x75, 0x72, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x78, 0x6e,
	0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x61, 0x6e, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x46,
	0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x48, 0x00, 0x52, 0x13, 0x69, 0x64, 0x2d, 0x52, 0x41, 0x4e,
	0x50, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x42, 0x1b, 0x0a,
	0x19, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x65, 0x73, 0x22, 0xb8, 0x01, 0x0a, 0x17, 0x41,
	0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x45, 0x73, 0x12, 0x26, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x49, 0x65, 0x49, 0x44, 0x52, 0x03, 0x26, 0x69, 0x64, 0x12, 0x37,
	0x0a, 0x0b, 0x63, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72,
	0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x0c, 0x26, 0x63, 0x72, 0x69, 0x74,
	0x69, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x3c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31,
	0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x45, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x26,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x5b, 0x0a, 0x14, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74,
	0x79, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x43, 0x0a,
	0x0c, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x63,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x45, 0x73, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x49,
	0x45, 0x73, 0x22, 0x7a, 0x0a, 0x25, 0x50, 0x64, 0x75, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74,
	0x79, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x51, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x78, 0x6e, 0x61,
	0x70, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x64, 0x75, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79,
	0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x49, 0x74, 0x65, 0x6d, 0x42, 0x0b, 0xfa, 0x42, 0x08, 0x92,
	0x01, 0x05, 0x08, 0x01, 0x10, 0x80, 0x02, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x5b,
	0x0a, 0x2b, 0x50, 0x64, 0x75, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x4e, 0x6f, 0x74,
	0x69, 0x66, 0x79, 0x49, 0x74, 0x65, 0x6d, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x12, 0x2c, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xf4, 0x03, 0x0a, 0x25,
	0x50, 0x64, 0x75, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x4e, 0x6f, 0x74, 0x69, 0x66,
	0x79, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x3b, 0x0a, 0x0e, 0x70, 0x64, 0x75, 0x5f, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x64, 0x75, 0x73, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x49, 0x44, 0x52, 0x0c, 0x70, 0x64, 0x75, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x12, 0x79, 0x0a, 0x22, 0x70, 0x64, 0x75, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x75, 0x70, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27,
	0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x50, 0x6c, 0x61,
	0x6e, 0x65, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74,
	0x79, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x48, 0x00, 0x52, 0x1f, 0x70, 0x64, 0x75, 0x53, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x55, 0x50, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x69, 0x74, 0x79, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x88, 0x01, 0x01, 0x12, 0x6c, 0x0a,
	0x1e, 0x71, 0x6f, 0x73, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x79, 0x5f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e,
	0x51, 0x6f, 0x53, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79,
	0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x01, 0x52, 0x1a, 0x71, 0x6f,
	0x73, 0x46, 0x6c, 0x6f, 0x77, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x4e, 0x6f,
	0x74, 0x69, 0x66, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x88, 0x01, 0x01, 0x12, 0x5b, 0x0a, 0x0e, 0x69,
	0x5f, 0x65, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x64,
	0x75, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x49,
	0x74, 0x65, 0x6d, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x52, 0x0d, 0x69, 0x45, 0x2d, 0x45, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x25, 0x0a, 0x23, 0x5f, 0x70, 0x64, 0x75,
	0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x75,
	0x70, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x42,
	0x21, 0x0a, 0x1f, 0x5f, 0x71, 0x6f, 0x73, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x5f, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x22, 0x63, 0x0a, 0x1a, 0x51, 0x6f, 0x53, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x41, 0x63,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x45, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x23, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x6f, 0x53, 0x66, 0x6c, 0x6f,
	0x77, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79,
	0x49, 0x74, 0x65, 0x6d, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x92, 0x01, 0x04, 0x08, 0x01, 0x10, 0x40,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x50, 0x0a, 0x20, 0x51, 0x6f, 0x53, 0x66, 0x6c,
	0x6f, 0x77, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x4e, 0x6f, 0x74, 0x69, 0x66,
	0x79, 0x49, 0x74, 0x65, 0x6d, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xb0, 0x02, 0x0a, 0x1a, 0x51, 0x6f,
	0x53, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x4e, 0x6f,
	0x74, 0x69, 0x66, 0x79, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x4a, 0x0a, 0x13, 0x71, 0x6f, 0x73, 0x5f,
	0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e,
	0x51, 0x6f, 0x53, 0x66, 0x6c, 0x6f, 0x77, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x52, 0x11, 0x71, 0x6f, 0x73, 0x46, 0x6c, 0x6f, 0x77, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x12, 0x74, 0x0a, 0x22, 0x70, 0x64, 0x75, 0x5f, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x75, 0x70, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x69, 0x74, 0x79, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x27, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x50,
	0x6c, 0x61, 0x6e, 0x65, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x41, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x79, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x1f, 0x70, 0x64, 0x75, 0x53, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x55, 0x50, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x69, 0x74, 0x79, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x50, 0x0a, 0x0e, 0x69, 0x5f,
	0x65, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x29, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x6f, 0x53,
	0x66, 0x6c, 0x6f, 0x77, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x4e, 0x6f, 0x74,
	0x69, 0x66, 0x79, 0x49, 0x74, 0x65, 0x6d, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x52, 0x0d, 0x69,
	0x45, 0x2d, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x9b, 0x09, 0x0a,
	0x16, 0x58, 0x6e, 0x53, 0x65, 0x74, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49,
	0x45, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x57, 0x0a, 0x18, 0x69, 0x64, 0x5f, 0x67, 0x6c,
	0x6f, 0x62, 0x61, 0x6c, 0x5f, 0x6e, 0x67, 0x5f, 0x72, 0x61, 0x6e, 0x5f, 0x6e, 0x6f, 0x64, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x78, 0x6e, 0x61, 0x70,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x4e, 0x67, 0x52, 0x41, 0x6e, 0x6e,
	0x6f, 0x64, 0x65, 0x49, 0x44, 0x48, 0x00, 0x52, 0x17, 0x69, 0x64, 0x2d, 0x47, 0x6c, 0x6f, 0x62,
	0x61, 0x6c, 0x4e, 0x47, 0x2d, 0x52, 0x41, 0x4e, 0x2d, 0x6e, 0x6f, 0x64, 0x65, 0x2d, 0x49, 0x44,
	0x12, 0x49, 0x0a, 0x12, 0x69, 0x64, 0x5f, 0x74, 0x61, 0x69, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72,
	0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x78,
	0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x69, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72,
	0x74, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x00, 0x52, 0x12, 0x69, 0x64, 0x2d, 0x54, 0x41, 0x49, 0x53,
	0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x2d, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x5d, 0x0a, 0x19, 0x69,
	0x64, 0x5f, 0x61, 0x6d, 0x66, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x6d, 0x66, 0x52, 0x65, 0x67, 0x69,
	0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52,
	0x19, 0x69, 0x64, 0x2d, 0x41, 0x4d, 0x46, 0x2d, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x2d, 0x49,
	0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x58, 0x0a, 0x1a, 0x69, 0x64,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x6f, 0x66, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x5f,
	0x63, 0x65, 0x6c, 0x6c, 0x73, 0x5f, 0x6e, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x64, 0x43,
	0x65, 0x6c, 0x6c, 0x73, 0x4e, 0x52, 0x48, 0x00, 0x52, 0x1a, 0x69, 0x64, 0x2d, 0x4c, 0x69, 0x73,
	0x74, 0x2d, 0x6f, 0x66, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x2d, 0x63, 0x65, 0x6c, 0x6c,
	0x73, 0x2d, 0x4e, 0x52, 0x12, 0x63, 0x0a, 0x1e, 0x69, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f,
	0x6f, 0x66, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x5f, 0x63, 0x65, 0x6c, 0x6c, 0x73, 0x5f,
	0x65, 0x5f, 0x75, 0x74, 0x72, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x78,
	0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x64, 0x43, 0x65, 0x6c,
	0x6c, 0x73, 0x45, 0x55, 0x54, 0x72, 0x61, 0x48, 0x00, 0x52, 0x1e, 0x69, 0x64, 0x2d, 0x4c, 0x69,
	0x73, 0x74, 0x2d, 0x6f, 0x66, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x2d, 0x63, 0x65, 0x6c,
	0x6c, 0x73, 0x2d, 0x45, 0x2d, 0x55, 0x54, 0x52, 0x41, 0x12, 0x70, 0x0a, 0x20, 0x69, 0x64, 0x5f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x5f, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49,
	0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x1e, 0x69, 0x64, 0x2d,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x5a, 0x0a, 0x18, 0x69,
	0x64, 0x5f, 0x74, 0x6e, 0x6c, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x6e, 0x6c, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x17,
	0x69, 0x64, 0x2d, 0x54, 0x4e, 0x4c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x61, 0x0a, 0x1c, 0x69, 0x64, 0x5f, 0x70, 0x61,
	0x72, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x69, 0x6e, 0x64, 0x69, 0x63,
	0x61, 0x74, 0x6f, 0x72, 0x5f, 0x6e, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e,
	0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x4c,
	0x69, 0x73, 0x74, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x1a,
	0x69, 0x64, 0x2d, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e,
	0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x2d, 0x4e, 0x52, 0x12, 0x80, 0x01, 0x0a, 0x27, 0x69,
	0x64, 0x5f, 0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x63, 0x61, 0x70, 0x61, 0x63,
	0x69, 0x74, 0x79, 0x5f, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69,
	0x6e, 0x66, 0x6f, 0x5f, 0x6e, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x78,
	0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x41, 0x6e, 0x64, 0x43, 0x61,
	0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x41, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x4e, 0x52, 0x48, 0x00, 0x52, 0x23, 0x69, 0x64, 0x2d, 0x43, 0x65, 0x6c,
	0x6c, 0x41, 0x6e, 0x64, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x41, 0x73, 0x73, 0x69,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x2d, 0x4e, 0x52, 0x12, 0x67, 0x0a,
	0x1f, 0x69, 0x64, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x5f, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x65, 0x75, 0x74, 0x72, 0x61,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31,
	0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x64, 0x69,
	0x63, 0x61, 0x74, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x1d, 0x69, 0x64, 0x2d, 0x50, 0x61, 0x72, 0x74,
	0x69, 0x61, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72,
	0x2d, 0x45, 0x55, 0x54, 0x52, 0x41, 0x12, 0x89, 0x01, 0x0a, 0x2a, 0x69, 0x64, 0x5f, 0x63, 0x65,
	0x6c, 0x6c, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x5f,
	0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f,
	0x65, 0x75, 0x74, 0x72, 0x61, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x78, 0x6e,
	0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x41, 0x6e, 0x64, 0x43, 0x61, 0x70,
	0x61, 0x63, 0x69, 0x74, 0x79, 0x41, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x45, 0x55, 0x74, 0x72, 0x61, 0x48, 0x00, 0x52, 0x26, 0x69, 0x64, 0x2d, 0x43,
	0x65, 0x6c, 0x6c, 0x41, 0x6e, 0x64, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x41, 0x73,
	0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x2d, 0x45, 0x55, 0x54,
	0x52, 0x41, 0x42, 0x16, 0x0a, 0x14, 0x78, 0x6e, 0x5f, 0x73, 0x65, 0x74, 0x75, 0x70, 0x5f, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x65, 0x73, 0x22, 0x95, 0x01, 0x0a, 0x11, 0x58,
	0x6e, 0x53, 0x65, 0x74, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x45, 0x73,
	0x12, 0x0f, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x26, 0x69,
	0x64, 0x12, 0x37, 0x0a, 0x0b, 0x63, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x0c, 0x26, 0x63,
	0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x36, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x78, 0x6e, 0x61, 0x70,
	0x2e, 0x76, 0x31, 0x2e, 0x58, 0x6e, 0x53, 0x65, 0x74, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x49, 0x45, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x26, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x22, 0x4f, 0x0a, 0x0e, 0x58, 0x6e, 0x53, 0x65, 0x74, 0x75, 0x70, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x3d, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x5f, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x78, 0x6e, 0x61,
	0x70, 0x2e, 0x76, 0x31, 0x2e, 0x58, 0x6e, 0x53, 0x65, 0x74, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x49, 0x45, 0x73, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x49, 0x45, 0x73, 0x22, 0xff, 0x09, 0x0a, 0x17, 0x58, 0x6e, 0x53, 0x65, 0x74, 0x75, 0x70, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x49, 0x45, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x57, 0x0a, 0x18, 0x69, 0x64, 0x5f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x5f, 0x6e, 0x67, 0x5f,
	0x72, 0x61, 0x6e, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6c, 0x6f, 0x62,
	0x61, 0x6c, 0x4e, 0x67, 0x52, 0x41, 0x6e, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x44, 0x48, 0x00, 0x52,
	0x17, 0x69, 0x64, 0x2d, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x4e, 0x47, 0x2d, 0x52, 0x41, 0x4e,
	0x2d, 0x6e, 0x6f, 0x64, 0x65, 0x2d, 0x49, 0x44, 0x12, 0x49, 0x0a, 0x12, 0x69, 0x64, 0x5f, 0x74,
	0x61, 0x69, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x54,
	0x61, 0x69, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x00, 0x52,
	0x12, 0x69, 0x64, 0x2d, 0x54, 0x41, 0x49, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x2d, 0x6c,
	0x69, 0x73, 0x74, 0x12, 0x58, 0x0a, 0x1a, 0x69, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x6f,
	0x66, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x5f, 0x63, 0x65, 0x6c, 0x6c, 0x73, 0x5f, 0x6e,
	0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x64, 0x43, 0x65, 0x6c, 0x6c, 0x73, 0x4e, 0x52, 0x48,
	0x00, 0x52, 0x1a, 0x69, 0x64, 0x2d, 0x4c, 0x69, 0x73, 0x74, 0x2d, 0x6f, 0x66, 0x2d, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x64, 0x2d, 0x63, 0x65, 0x6c, 0x6c, 0x73, 0x2d, 0x4e, 0x52, 0x12, 0x63, 0x0a,
	0x1e, 0x69, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x6f, 0x66, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x64, 0x5f, 0x63, 0x65, 0x6c, 0x6c, 0x73, 0x5f, 0x65, 0x5f, 0x75, 0x74, 0x72, 0x61, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x64, 0x43, 0x65, 0x6c, 0x6c, 0x73, 0x45, 0x55, 0x54, 0x72, 0x61,
	0x48, 0x00, 0x52, 0x1e, 0x69, 0x64, 0x2d, 0x4c, 0x69, 0x73, 0x74, 0x2d, 0x6f, 0x66, 0x2d, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x64, 0x2d, 0x63, 0x65, 0x6c, 0x6c, 0x73, 0x2d, 0x45, 0x2d, 0x55, 0x54,
	0x52, 0x41, 0x12, 0x60, 0x0a, 0x1a, 0x69, 0x64, 0x5f, 0x63, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61,
	0x6c, 0x69, 0x74, 0x79, 0x5f, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x73,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x44, 0x69, 0x61, 0x67,
	0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x73, 0x48, 0x00, 0x52, 0x19, 0x69, 0x64, 0x2d, 0x43, 0x72,
	0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73,
	0x74, 0x69, 0x63, 0x73, 0x12, 0x5d, 0x0a, 0x19, 0x69, 0x64, 0x5f, 0x61, 0x6d, 0x66, 0x5f, 0x72,
	0x65, 0x67, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76,
	0x31, 0x2e, 0x41, 0x6d, 0x66, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x19, 0x69, 0x64, 0x2d, 0x41, 0x4d, 0x46,
	0x2d, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x2d, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x70, 0x0a, 0x20, 0x69, 0x64, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x6e, 0x64,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e,
	0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x1e, 0x69, 0x64, 0x2d, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x6e, 0x64, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x5a, 0x0a, 0x18, 0x69, 0x64, 0x5f, 0x74, 0x6e, 0x6c, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x66,
	0x6f, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76,
	0x31, 0x2e, 0x54, 0x6e, 0x6c, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x17, 0x69, 0x64, 0x2d, 0x54, 0x4e, 0x4c,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x61, 0x0a, 0x1c, 0x69, 0x64, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x5f, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x6e,
	0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76,
	0x31, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x64,
	0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x1a, 0x69, 0x64, 0x2d, 0x50, 0x61, 0x72,
	0x74, 0x69, 0x61, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f,
	0x72, 0x2d, 0x4e, 0x52, 0x12, 0x80, 0x01, 0x0a, 0x27, 0x69, 0x64, 0x5f, 0x63, 0x65, 0x6c, 0x6c,
	0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x5f, 0x61, 0x73,
	0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x6e, 0x72,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x41, 0x6e, 0x64, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79,
	0x41, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x4e, 0x52,
	0x48, 0x00, 0x52, 0x23, 0x69, 0x64, 0x2d, 0x43, 0x65, 0x6c, 0x6c, 0x41, 0x6e, 0x64, 0x43, 0x61,
	0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x41, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x2d, 0x4e, 0x52, 0x12, 0x67, 0x0a, 0x1f, 0x69, 0x64, 0x5f, 0x70, 0x61,
	0x72, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x69, 0x6e, 0x64, 0x69, 0x63,
	0x61, 0x74, 0x6f, 0x72, 0x5f, 0x65, 0x75, 0x74, 0x72, 0x61, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x1d, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69,
	0x61, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x48,
	0x00, 0x52, 0x1d, 0x69, 0x64, 0x2d, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x4c, 0x69, 0x73,
	0x74, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x2d, 0x45, 0x55, 0x54, 0x52, 0x41,
	0x12, 0x89, 0x01, 0x0a, 0x2a, 0x69, 0x64, 0x5f, 0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x61, 0x6e, 0x64,
	0x5f, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x5f, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x65, 0x75, 0x74, 0x72, 0x61, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x65, 0x6c, 0x6c, 0x41, 0x6e, 0x64, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x41,
	0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x45, 0x55, 0x74,
	0x72, 0x61, 0x48, 0x00, 0x52, 0x26, 0x69, 0x64, 0x2d, 0x43, 0x65, 0x6c, 0x6c, 0x41, 0x6e, 0x64,
	0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x41, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x2d, 0x45, 0x55, 0x54, 0x52, 0x41, 0x42, 0x17, 0x0a, 0x15,
	0x78, 0x6e, 0x5f, 0x73, 0x65, 0x74, 0x75, 0x70, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x5f, 0x69, 0x65, 0x73, 0x22, 0xae, 0x01, 0x0a, 0x12, 0x58, 0x6e, 0x53, 0x65, 0x74, 0x75,
	0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x49, 0x45, 0x73, 0x12, 0x26, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e,
	0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x49, 0x65, 0x49, 0x44, 0x52,
	0x03, 0x26, 0x69, 0x64, 0x12, 0x37, 0x0a, 0x0b, 0x63, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c,
	0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x78, 0x6e, 0x61, 0x70,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x52,
	0x0c, 0x26, 0x63, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x37, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x78,
	0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x58, 0x6e, 0x53, 0x65, 0x74, 0x75, 0x70, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x49, 0x45, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06,
	0x26, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x51, 0x0a, 0x0f, 0x58, 0x6e, 0x53, 0x65, 0x74, 0x75,
	0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3e, 0x0a, 0x0c, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x58, 0x6e, 0x53, 0x65, 0x74, 0x75,
	0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x49, 0x45, 0x73, 0x52, 0x0b, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x49, 0x45, 0x73, 0x22, 0xe3, 0x03, 0x0a, 0x16, 0x58, 0x6e,
	0x53, 0x65, 0x74, 0x75, 0x70, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x49, 0x45, 0x73, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x2c, 0x0a, 0x08, 0x69, 0x64, 0x5f, 0x63, 0x61, 0x75, 0x73, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x61, 0x75, 0x73, 0x65, 0x48, 0x00, 0x52, 0x08, 0x69, 0x64, 0x2d, 0x43, 0x61, 0x75,
	0x73, 0x65, 0x12, 0x3d, 0x0a, 0x0f, 0x69, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x74, 0x6f,
	0x5f, 0x77, 0x61, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x78, 0x6e,
	0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x54, 0x6f, 0x57, 0x61, 0x69, 0x74,
	0x48, 0x00, 0x52, 0x0d, 0x69, 0x64, 0x2d, 0x54, 0x69, 0x6d, 0x65, 0x54, 0x6f, 0x57, 0x61, 0x69,
	0x74, 0x12, 0x60, 0x0a, 0x1a, 0x69, 0x64, 0x5f, 0x63, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c,
	0x69, 0x74, 0x79, 0x5f, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x44, 0x69, 0x61, 0x67, 0x6e,
	0x6f, 0x73, 0x74, 0x69, 0x63, 0x73, 0x48, 0x00, 0x52, 0x19, 0x69, 0x64, 0x2d, 0x43, 0x72, 0x69,
	0x74, 0x69, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74,
	0x69, 0x63, 0x73, 0x12, 0x70, 0x0a, 0x20, 0x69, 0x64, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x6e, 0x64,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e,
	0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x1e, 0x69, 0x64, 0x2d, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x6e, 0x64, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x70, 0x0a, 0x20, 0x69, 0x64, 0x5f, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x6e, 0x6f, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x24, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x4f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x7a, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x1e, 0x69, 0x64, 0x2d, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x4f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x7a, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x16, 0x0a, 0x14, 0x78, 0x6e, 0x5f, 0x73, 0x65,
	0x74, 0x75, 0x70, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x5f, 0x69, 0x65, 0x73, 0x22,
	0xac, 0x01, 0x0a, 0x11, 0x58, 0x6e, 0x53, 0x65, 0x74, 0x75, 0x70, 0x46, 0x61, 0x69, 0x6c, 0x75,
	0x72, 0x65, 0x49, 0x45, 0x73, 0x12, 0x26, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x49, 0x65, 0x49, 0x44, 0x52, 0x03, 0x26, 0x69, 0x64, 0x12, 0x37, 0x0a,
	0x0b, 0x63, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x14, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x69,
	0x74, 0x69, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x0c, 0x26, 0x63, 0x72, 0x69, 0x74, 0x69,
	0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x36, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e,
	0x58, 0x6e, 0x53, 0x65, 0x74, 0x75, 0x70, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x49, 0x45,
	0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x26, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x4f,
	0x0a, 0x0e, 0x58, 0x6e, 0x53, 0x65, 0x74, 0x75, 0x70, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65,
	0x12, 0x3d, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x69, 0x65, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31,
	0x2e, 0x58, 0x6e, 0x53, 0x65, 0x74, 0x75, 0x70, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x49,
	0x45, 0x73, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x49, 0x45, 0x73, 0x22,
	0xad, 0x08, 0x0a, 0x24, 0x4e, 0x67, 0x72, 0x61, 0x6e, 0x6e, 0x6f, 0x64, 0x65, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x49, 0x45, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x49, 0x0a, 0x12, 0x69, 0x64, 0x5f, 0x74,
	0x61, 0x69, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x54,
	0x61, 0x69, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x00, 0x52,
	0x12, 0x69, 0x64, 0x2d, 0x54, 0x41, 0x49, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x2d, 0x6c,
	0x69, 0x73, 0x74, 0x12, 0x96, 0x01, 0x0a, 0x2e, 0x69, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f,
	0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x78,
	0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61,
	0x74, 0x69, 0x6e, 0x67, 0x4e, 0x6f, 0x64, 0x65, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x48, 0x00,
	0x52, 0x2a, 0x69, 0x64, 0x2d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x69,
	0x6e, 0x67, 0x4e, 0x6f, 0x64, 0x65, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x12, 0x4a, 0x0a, 0x13,
	0x69, 0x64, 0x5f, 0x74, 0x6e, 0x6c, 0x61, 0x5f, 0x74, 0x6f, 0x5f, 0x61, 0x64, 0x64, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x78, 0x6e, 0x61, 0x70,
	0x2e, 0x76, 0x31, 0x2e, 0x54, 0x6e, 0x6c, 0x61, 0x54, 0x6f, 0x41, 0x64, 0x64, 0x4c, 0x69, 0x73,
	0x74, 0x48, 0x00, 0x52, 0x13, 0x69, 0x64, 0x2d, 0x54, 0x4e, 0x4c, 0x41, 0x2d, 0x54, 0x6f, 0x2d,
	0x41, 0x64, 0x64, 0x2d, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x53, 0x0a, 0x16, 0x69, 0x64, 0x5f, 0x74,
	0x6e, 0x6c, 0x61, 0x5f, 0x74, 0x6f, 0x5f, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e,
	0x76, 0x31, 0x2e, 0x54, 0x6e, 0x6c, 0x61, 0x54, 0x6f, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x4c,
	0x69, 0x73, 0x74, 0x48, 0x00, 0x52, 0x16, 0x69, 0x64, 0x2d, 0x54, 0x4e, 0x4c, 0x41, 0x2d, 0x54,
	0x6f, 0x2d, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x2d, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x53, 0x0a,
	0x16, 0x69, 0x64, 0x5f, 0x74, 0x6e, 0x6c, 0x61, 0x5f, 0x74, 0x6f, 0x5f, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x6e, 0x6c, 0x61, 0x54, 0x6f, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x00, 0x52, 0x16, 0x69, 0x64, 0x2d, 0x54,
	0x4e, 0x4c, 0x41, 0x2d, 0x54, 0x6f, 0x2d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x2d, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x57, 0x0a, 0x18, 0x69, 0x64, 0x5f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x5f,
	0x6e, 0x67, 0x5f, 0x72, 0x61, 0x6e, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x4e, 0x67, 0x52, 0x41, 0x6e, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x44,
	0x48, 0x00, 0x52, 0x17, 0x69, 0x64, 0x2d, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x4e, 0x47, 0x2d,
	0x52, 0x41, 0x4e, 0x2d, 0x6e, 0x6f, 0x64, 0x65, 0x2d, 0x49, 0x44, 0x12, 0x6b, 0x0a, 0x20, 0x69,
	0x64, 0x5f, 0x61, 0x6d, 0x66, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x6f, 0x5f, 0x61, 0x64, 0x64, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e,
	0x41, 0x6d, 0x66, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x20, 0x69, 0x64, 0x2d, 0x41, 0x4d, 0x46, 0x2d, 0x52,
	0x65, 0x67, 0x69, 0x6f, 0x6e, 0x2d, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2d, 0x54, 0x6f, 0x2d, 0x41, 0x64, 0x64, 0x12, 0x71, 0x0a, 0x23, 0x69, 0x64, 0x5f, 0x61,
	0x6d, 0x66, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x6f, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e,
	0x41, 0x6d, 0x66, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x23, 0x69, 0x64, 0x2d, 0x41, 0x4d, 0x46, 0x2d, 0x52,
	0x65, 0x67, 0x69, 0x6f, 0x6e, 0x2d, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2d, 0x54, 0x6f, 0x2d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x70, 0x0a, 0x20, 0x69,
	0x64, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x1e, 0x69,
	0x64, 0x2d, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x5a, 0x0a,
	0x18, 0x69, 0x64, 0x5f, 0x74, 0x6e, 0x6c, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x6e, 0x6c, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00,
	0x52, 0x17, 0x69, 0x64, 0x2d, 0x54, 0x4e, 0x4c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x24, 0x0a, 0x22, 0x6e, 0x67, 0x72,
	0x61, 0x6e, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x65, 0x73, 0x22,
	0xc8, 0x01, 0x0a, 0x1f, 0x4e, 0x67, 0x72, 0x61, 0x6e, 0x6e, 0x6f, 0x64, 0x65, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x49, 0x45, 0x73, 0x12, 0x26, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x49, 0x65, 0x49, 0x44, 0x52, 0x03, 0x26, 0x69, 0x64, 0x12, 0x37, 0x0a, 0x0b, 0x63,
	0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x14, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x69, 0x74, 0x69,
	0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x0c, 0x26, 0x63, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61,
	0x6c, 0x69, 0x74, 0x79, 0x12, 0x44, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x67,
	0x72, 0x61, 0x6e, 0x6e, 0x6f, 0x64, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x45, 0x73, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x06, 0x26, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x6b, 0x0a, 0x1c, 0x4e, 0x67,
	0x72, 0x61, 0x6e, 0x6e, 0x6f, 0x64, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x4b, 0x0a, 0x0c, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x28, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x67, 0x72, 0x61, 0x6e,
	0x6e, 0x6f, 0x64, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x45, 0x73, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x49, 0x45, 0x73, 0x22, 0xe4, 0x02, 0x0a, 0x1b, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x67,
	0x4e, 0x62, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x61, 0x0a, 0x1c, 0x69, 0x64, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x64, 0x5f, 0x63, 0x65, 0x6c, 0x6c, 0x73, 0x5f, 0x74, 0x6f, 0x5f, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x5f, 0x6e, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x64, 0x43, 0x65,
	0x6c, 0x6c, 0x73, 0x54, 0x6f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x52, 0x48, 0x00, 0x52,
	0x19, 0x69, 0x64, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x43, 0x65, 0x6c, 0x6c, 0x73, 0x54,
	0x6f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x2d, 0x4e, 0x52, 0x12, 0x5d, 0x0a, 0x1a, 0x69, 0x64,
	0x5f, 0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x6e, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x41, 0x73, 0x73,
	0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x4e, 0x52, 0x48, 0x00, 0x52,
	0x18, 0x69, 0x64, 0x2d, 0x63, 0x65, 0x6c, 0x6c, 0x41, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x2d, 0x4e, 0x52, 0x12, 0x66, 0x0a, 0x1d, 0x69, 0x64, 0x5f,
	0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f,
	0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x65, 0x75, 0x74, 0x72, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x20, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x41,
	0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x45, 0x55, 0x74,
	0x72, 0x61, 0x48, 0x00, 0x52, 0x1b, 0x69, 0x64, 0x2d, 0x63, 0x65, 0x6c, 0x6c, 0x41, 0x73, 0x73,
	0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x2d, 0x45, 0x55, 0x54, 0x52,
	0x41, 0x42, 0x1b, 0x0a, 0x19, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x67, 0x5f, 0x6e, 0x62, 0x22, 0xb6,
	0x01, 0x0a, 0x16, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x67, 0x4e, 0x62, 0x12, 0x26, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x49, 0x65, 0x49, 0x44, 0x52, 0x03, 0x26, 0x69,
	0x64, 0x12, 0x37, 0x0a, 0x0b, 0x63, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x0c, 0x26, 0x63,
	0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x3b, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x78, 0x6e, 0x61, 0x70,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x67, 0x4e, 0x62, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x06, 0x26, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xf4, 0x02, 0x0a, 0x1d, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x6e,
	0x67, 0x65, 0x4e, 0x62, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x6c, 0x0a, 0x20, 0x69, 0x64, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x5f, 0x63, 0x65, 0x6c, 0x6c, 0x73, 0x5f, 0x74, 0x6f, 0x5f,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x65, 0x5f, 0x75, 0x74, 0x72, 0x61, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x64, 0x43, 0x65, 0x6c, 0x6c, 0x73, 0x54, 0x6f, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x45, 0x55, 0x54, 0x72, 0x61, 0x48, 0x00, 0x52, 0x1d, 0x69, 0x64, 0x2d, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x64, 0x43, 0x65, 0x6c, 0x6c, 0x73, 0x54, 0x6f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x2d, 0x45, 0x2d, 0x55, 0x54, 0x52, 0x41, 0x12, 0x5d, 0x0a, 0x1a, 0x69, 0x64, 0x5f, 0x63, 0x65,
	0x6c, 0x6c, 0x5f, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x6e,
	0x66, 0x6f, 0x5f, 0x6e, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x78, 0x6e,
	0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x41, 0x73, 0x73, 0x69, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x4e, 0x52, 0x48, 0x00, 0x52, 0x18, 0x69, 0x64,
	0x2d, 0x63, 0x65, 0x6c, 0x6c, 0x41, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x2d, 0x4e, 0x52, 0x12, 0x66, 0x0a, 0x1d, 0x69, 0x64, 0x5f, 0x63, 0x65, 0x6c,
	0x6c, 0x5f, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x6e, 0x66,
	0x6f, 0x5f, 0x65, 0x75, 0x74, 0x72, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x41, 0x73, 0x73, 0x69,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x45, 0x55, 0x74, 0x72, 0x61, 0x48,
	0x00, 0x52, 0x1b, 0x69, 0x64, 0x2d, 0x63, 0x65, 0x6c, 0x6c, 0x41, 0x73, 0x73, 0x69, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x2d, 0x45, 0x55, 0x54, 0x52, 0x41, 0x42, 0x1e,
	0x0a, 0x1c, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6e, 0x67, 0x5f, 0x65, 0x5f, 0x6e, 0x62, 0x22, 0xba,
	0x01, 0x0a, 0x18, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x6e, 0x67, 0x65, 0x4e, 0x62, 0x12, 0x26, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76,
	0x31, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x49, 0x65, 0x49, 0x44, 0x52, 0x03,
	0x26, 0x69, 0x64, 0x12, 0x37, 0x0a, 0x0b, 0x63, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x69,
	0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x0c,
	0x26, 0x63, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x3d, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x78, 0x6e,
	0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x6e, 0x67, 0x65, 0x4e, 0x62, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x06, 0x26, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x5d, 0x0a, 0x2d, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x64, 0x43, 0x65, 0x6c, 0x6c, 0x73, 0x54, 0x6f, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x4e, 0x6f, 0x64, 0x65,
	0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xb2, 0x02, 0x0a, 0x27, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x4e, 0x6f, 0x64, 0x65,
	0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x12, 0x34, 0x0a, 0x04, 0x67, 0x5f, 0x6e, 0x62, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x67, 0x4e, 0x62, 0x48, 0x00, 0x52, 0x03, 0x67, 0x4e, 0x42, 0x12, 0x3c, 0x0a, 0x07,
	0x6e, 0x67, 0x5f, 0x65, 0x5f, 0x6e, 0x62, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x6e, 0x67, 0x65, 0x4e, 0x62,
	0x48, 0x00, 0x52, 0x06, 0x6e, 0x67, 0x2d, 0x65, 0x4e, 0x42, 0x12, 0x64, 0x0a, 0x10, 0x63, 0x68,
	0x6f, 0x69, 0x63, 0x65, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x64, 0x43, 0x65, 0x6c, 0x6c, 0x73, 0x54, 0x6f, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x4e, 0x6f, 0x64, 0x65,
	0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x48, 0x00, 0x52, 0x10,
	0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x2d, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x42, 0x2d, 0x0a, 0x2b, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74,
	0x69, 0x6e, 0x67, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x22,
	0xcb, 0x05, 0x0a, 0x2f, 0x4e, 0x67, 0x72, 0x61, 0x6e, 0x6e, 0x6f, 0x64, 0x65, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x41, 0x63, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x49, 0x45, 0x73, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x85, 0x01, 0x0a, 0x29, 0x69, 0x64, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x61, 0x63,
	0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76,
	0x31, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x4e, 0x6f, 0x64, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x41, 0x63, 0x6b, 0x48, 0x00, 0x52, 0x24, 0x69, 0x64, 0x2d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x64, 0x69, 0x6e, 0x67, 0x4e, 0x6f, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x63, 0x6b, 0x12, 0x48, 0x0a, 0x12, 0x69,
	0x64, 0x5f, 0x74, 0x6e, 0x6c, 0x61, 0x5f, 0x73, 0x65, 0x74, 0x75, 0x70, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76,
	0x31, 0x2e, 0x54, 0x6e, 0x6c, 0x61, 0x53, 0x65, 0x74, 0x75, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x48,
	0x00, 0x52, 0x12, 0x69, 0x64, 0x2d, 0x54, 0x4e, 0x4c, 0x41, 0x2d, 0x53, 0x65, 0x74, 0x75, 0x70,
	0x2d, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x64, 0x0a, 0x1c, 0x69, 0x64, 0x5f, 0x74, 0x6e, 0x6c, 0x61,
	0x5f, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x5f, 0x74, 0x6f, 0x5f, 0x73, 0x65, 0x74, 0x75, 0x70,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x78, 0x6e,
	0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x6e, 0x6c, 0x61, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64,
	0x54, 0x6f, 0x53, 0x65, 0x74, 0x75, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x00, 0x52, 0x1c, 0x69,
	0x64, 0x2d, 0x54, 0x4e, 0x4c, 0x41, 0x2d, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x2d, 0x54, 0x6f,
	0x2d, 0x53, 0x65, 0x74, 0x75, 0x70, 0x2d, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x60, 0x0a, 0x1a, 0x69,
	0x64, 0x5f, 0x63, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x64, 0x69,
	0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x69, 0x74, 0x69, 0x63,
	0x61, 0x6c, 0x69, 0x74, 0x79, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x73,
	0x48, 0x00, 0x52, 0x19, 0x69, 0x64, 0x2d, 0x43, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x69,
	0x74, 0x79, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x70, 0x0a,
	0x20, 0x69, 0x64, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76,
	0x31, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52,
	0x1e, 0x69, 0x64, 0x2d, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x49, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x5a, 0x0a, 0x18, 0x69, 0x64, 0x5f, 0x74, 0x6e, 0x6c, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x6e, 0x6c, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f,
	0x48, 0x00, 0x52, 0x17, 0x69, 0x64, 0x2d, 0x54, 0x4e, 0x4c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x30, 0x0a, 0x2e, 0x6e,
	0x67, 0x72, 0x61, 0x6e, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x61, 0x63,
	0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x5f, 0x69, 0x65, 0x73, 0x22, 0xde, 0x01,
	0x0a, 0x2a, 0x4e, 0x67, 0x72, 0x61, 0x6e, 0x6e, 0x6f, 0x64, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x63,
	0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x49, 0x45, 0x73, 0x12, 0x26, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e,
	0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x49, 0x65, 0x49, 0x44, 0x52,
	0x03, 0x26, 0x69, 0x64, 0x12, 0x37, 0x0a, 0x0b, 0x63, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c,
	0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x78, 0x6e, 0x61, 0x70,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x52,
	0x0c, 0x26, 0x63, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x4f, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x78,
	0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x67, 0x72, 0x61, 0x6e, 0x6e, 0x6f, 0x64, 0x65,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x41, 0x63, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x49, 0x45,
	0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x26, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x81,
	0x01, 0x0a, 0x27, 0x4e, 0x67, 0x72, 0x61, 0x6e, 0x6e, 0x6f, 0x64, 0x65, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41,
	0x63, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x12, 0x56, 0x0a, 0x0c, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x33, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x67, 0x72, 0x61, 0x6e,
	0x6e, 0x6f, 0x64, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x63, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64,
	0x67, 0x65, 0x49, 0x45, 0x73, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x49,
	0x45, 0x73, 0x22, 0x57, 0x0a, 0x27, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x64, 0x69, 0x6e, 0x67,
	0x4e, 0x6f, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x41, 0x63, 0x6b, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x12, 0x2c, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xbd, 0x02, 0x0a, 0x21,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x4e, 0x6f, 0x64, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x63,
	0x6b, 0x12, 0x4a, 0x0a, 0x07, 0x6e, 0x67, 0x5f, 0x65, 0x5f, 0x6e, 0x62, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x4e, 0x6f, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x63, 0x6b, 0x6e, 0x67,
	0x65, 0x4e, 0x62, 0x48, 0x00, 0x52, 0x06, 0x6e, 0x67, 0x2d, 0x65, 0x4e, 0x42, 0x12, 0x42, 0x0a,
	0x04, 0x67, 0x5f, 0x6e, 0x62, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x78, 0x6e,
	0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x64, 0x69, 0x6e, 0x67,
	0x4e, 0x6f, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x41, 0x63, 0x6b, 0x67, 0x4e, 0x62, 0x48, 0x00, 0x52, 0x03, 0x67, 0x4e,
	0x42, 0x12, 0x5e, 0x0a, 0x10, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x5f, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x78, 0x6e,
	0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x64, 0x69, 0x6e, 0x67,
	0x4e, 0x6f, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x41, 0x63, 0x6b, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x48, 0x00, 0x52,
	0x10, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x2d, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x42, 0x28, 0x0a, 0x26, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f,
	0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x61, 0x63, 0x6b, 0x22, 0xcb, 0x03, 0x0a, 0x35,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x4e, 0x6f, 0x64, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x63,
	0x6b, 0x6e, 0x67, 0x65, 0x4e, 0x62, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x63, 0x0a, 0x1e, 0x69, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x5f, 0x6f, 0x66, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x5f, 0x63, 0x65, 0x6c, 0x6c, 0x73,
	0x5f, 0x65, 0x5f, 0x75, 0x74, 0x72, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x64, 0x43, 0x65,
	0x6c, 0x6c, 0x73, 0x45, 0x55, 0x54, 0x72, 0x61, 0x48, 0x00, 0x52, 0x1e, 0x69, 0x64, 0x2d, 0x4c,
	0x69, 0x73, 0x74, 0x2d, 0x6f, 0x66, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x2d, 0x63, 0x65,
	0x6c, 0x6c, 0x73, 0x2d, 0x45, 0x2d, 0x55, 0x54, 0x52, 0x41, 0x12, 0x67, 0x0a, 0x1f, 0x69, 0x64,
	0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x69, 0x6e,
	0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x65, 0x75, 0x74, 0x72, 0x61, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61,
	0x72, 0x74, 0x69, 0x61, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74,
	0x6f, 0x72, 0x48, 0x00, 0x52, 0x1d, 0x69, 0x64, 0x2d, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c,
	0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x2d, 0x45, 0x55,
	0x54, 0x52, 0x41, 0x12, 0x89, 0x01, 0x0a, 0x2a, 0x69, 0x64, 0x5f, 0x63, 0x65, 0x6c, 0x6c, 0x5f,
	0x61, 0x6e, 0x64, 0x5f, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x5f, 0x61, 0x73, 0x73,
	0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x65, 0x75, 0x74,
	0x72, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x41, 0x6e, 0x64, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69,
	0x74, 0x79, 0x41, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x45, 0x55, 0x74, 0x72, 0x61, 0x48, 0x00, 0x52, 0x26, 0x69, 0x64, 0x2d, 0x43, 0x65, 0x6c, 0x6c,
	0x41, 0x6e, 0x64, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x41, 0x73, 0x73, 0x69, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x2d, 0x45, 0x55, 0x54, 0x52, 0x41, 0x42,
	0x38, 0x0a, 0x36, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x6e, 0x6f,
	0x64, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x61, 0x63, 0x6b, 0x5f, 0x6e, 0x67, 0x5f, 0x65, 0x5f, 0x6e,
	0x62, 0x5f, 0x65, 0x78, 0x74, 0x5f, 0x69, 0x65, 0x73, 0x22, 0xee, 0x01, 0x0a, 0x2c, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x4e, 0x6f, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x63, 0x6b, 0x6e,
	0x67, 0x65, 0x4e, 0x62, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31,
	0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x49, 0x65, 0x49, 0x44, 0x52, 0x03, 0x26,
	0x69, 0x64, 0x12, 0x37, 0x0a, 0x0b, 0x63, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x69, 0x74,
	0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x0c, 0x26,
	0x63, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x5d, 0x0a, 0x09, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3e,
	0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x64,
	0x69, 0x6e, 0x67, 0x4e, 0x6f, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x63, 0x6b, 0x6e, 0x67, 0x65, 0x4e, 0x62, 0x45,
	0x78, 0x74, 0x49, 0x65, 0x73, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0a,
	0x26, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x84, 0x01, 0x0a, 0x26, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x4e, 0x6f, 0x64, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x63, 0x6b,
	0x6e, 0x67, 0x65, 0x4e, 0x62, 0x12, 0x5a, 0x0a, 0x0d, 0x69, 0x5f, 0x65, 0x5f, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x78,
	0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x64, 0x69, 0x6e,
	0x67, 0x4e, 0x6f, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x63, 0x6b, 0x6e, 0x67, 0x65, 0x4e, 0x62, 0x45, 0x78, 0x74,
	0x49, 0x65, 0x73, 0x52, 0x0c, 0x69, 0x45, 0x2d, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x22, 0xd2, 0x02, 0x0a, 0x33, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x64, 0x69, 0x6e, 0x67,
	0x4e, 0x6f, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x41, 0x63, 0x6b, 0x67, 0x4e, 0x62, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73,
	0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x61, 0x0a, 0x1c, 0x69, 0x64, 0x5f,
	0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x69, 0x6e, 0x64,
	0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x6e, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x1d, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61,
	0x6c, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x48, 0x00,
	0x52, 0x1a, 0x69, 0x64, 0x2d, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x4c, 0x69, 0x73, 0x74,
	0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x2d, 0x4e, 0x52, 0x12, 0x80, 0x01, 0x0a,
	0x27, 0x69, 0x64, 0x5f, 0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x63, 0x61, 0x70,
	0x61, 0x63, 0x69, 0x74, 0x79, 0x5f, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x6e, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28,
	0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x41, 0x6e, 0x64,
	0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x41, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x4e, 0x52, 0x48, 0x00, 0x52, 0x23, 0x69, 0x64, 0x2d, 0x43,
	0x65, 0x6c, 0x6c, 0x41, 0x6e, 0x64, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x41, 0x73,
	0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x2d, 0x4e, 0x52, 0x42,
	0x35, 0x0a, 0x33, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x6e, 0x6f,
	0x64, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x61, 0x63, 0x6b, 0x5f, 0x67, 0x5f, 0x6e, 0x62, 0x5f, 0x65,
	0x78, 0x74, 0x5f, 0x69, 0x65, 0x73, 0x22, 0xea, 0x01, 0x0a, 0x2a, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x64, 0x69, 0x6e, 0x67, 0x4e, 0x6f, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x63, 0x6b, 0x67, 0x4e, 0x62, 0x45,
	0x78, 0x74, 0x49, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x49, 0x65, 0x49, 0x44, 0x52, 0x03, 0x26, 0x69, 0x64, 0x12, 0x37, 0x0a,
	0x0b, 0x63, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x14, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x69,
	0x74, 0x69, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x0c, 0x26, 0x63, 0x72, 0x69, 0x74, 0x69,
	0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x5b, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x78, 0x6e, 0x61, 0x70,
	0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x4e, 0x6f,
	0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x41, 0x63, 0x6b, 0x67, 0x4e, 0x62, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x45, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x26, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x22, 0xdb, 0x01, 0x0a, 0x24, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x64, 0x69,
	0x6e, 0x67, 0x4e, 0x6f, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x63, 0x6b, 0x67, 0x4e, 0x62, 0x12, 0x45, 0x0a, 0x0f,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x5f, 0x6e, 0x72, 0x5f, 0x63, 0x65, 0x6c, 0x6c, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x64, 0x43, 0x65, 0x6c, 0x6c, 0x73, 0x4e, 0x52, 0x48, 0x00, 0x52,
	0x0f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x2d, 0x4e, 0x52, 0x2d, 0x43, 0x65, 0x6c, 0x6c, 0x73,
	0x88, 0x01, 0x01, 0x12, 0x58, 0x0a, 0x0d, 0x69, 0x5f, 0x65, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x78, 0x6e, 0x61,
	0x70, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x4e,
	0x6f, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x41, 0x63, 0x6b, 0x67, 0x4e, 0x62, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x52,
	0x0c, 0x69, 0x45, 0x2d, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x12, 0x0a,
	0x10, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x5f, 0x6e, 0x72, 0x5f, 0x63, 0x65, 0x6c, 0x6c,
	0x73, 0x22, 0x9c, 0x03, 0x0a, 0x2b, 0x4e, 0x67, 0x72, 0x61, 0x6e, 0x6e, 0x6f, 0x64, 0x65, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x49, 0x45, 0x73, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x2c, 0x0a, 0x08, 0x69, 0x64, 0x5f, 0x63, 0x61, 0x75, 0x73, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x61,
	0x75, 0x73, 0x65, 0x48, 0x00, 0x52, 0x08, 0x69, 0x64, 0x2d, 0x43, 0x61, 0x75, 0x73, 0x65, 0x12,
	0x3d, 0x0a, 0x0f, 0x69, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x74, 0x6f, 0x5f, 0x77, 0x61,
	0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e,
	0x76, 0x31, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x54, 0x6f, 0x57, 0x61, 0x69, 0x74, 0x48, 0x00, 0x52,
	0x0d, 0x69, 0x64, 0x2d, 0x54, 0x69, 0x6d, 0x65, 0x54, 0x6f, 0x57, 0x61, 0x69, 0x74, 0x12, 0x60,
	0x0a, 0x1a, 0x69, 0x64, 0x5f, 0x63, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79,
	0x5f, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x69,
	0x74, 0x69, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74,
	0x69, 0x63, 0x73, 0x48, 0x00, 0x52, 0x19, 0x69, 0x64, 0x2d, 0x43, 0x72, 0x69, 0x74, 0x69, 0x63,
	0x61, 0x6c, 0x69, 0x74, 0x79, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x73,
	0x12, 0x70, 0x0a, 0x20, 0x69, 0x64, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x78, 0x6e, 0x61,
	0x70, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x49, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x48, 0x00, 0x52, 0x1e, 0x69, 0x64, 0x2d, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x42, 0x2c, 0x0a, 0x2a, 0x6e, 0x67, 0x72, 0x61, 0x6e, 0x6e, 0x6f, 0x64, 0x65, 0x5f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x5f, 0x69, 0x65, 0x73,
	0x22, 0xd6, 0x01, 0x0a, 0x26, 0x4e, 0x67, 0x72, 0x61, 0x6e, 0x6e, 0x6f, 0x64, 0x65, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x49, 0x45, 0x73, 0x12, 0x26, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76,
	0x31, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x49, 0x65, 0x49, 0x44, 0x52, 0x03,
	0x26, 0x69, 0x64, 0x12, 0x37, 0x0a, 0x0b, 0x63, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x69,
	0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x0c,
	0x26, 0x63, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x4b, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x78, 0x6e,
	0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x67, 0x72, 0x61, 0x6e, 0x6e, 0x6f, 0x64, 0x65, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x49, 0x45, 0x73, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x06, 0x26, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x79, 0x0a, 0x23, 0x4e, 0x67, 0x72,
	0x61, 0x6e, 0x6e, 0x6f, 0x64, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65,
	0x12, 0x52, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x69, 0x65, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31,
	0x2e, 0x4e, 0x67, 0x72, 0x61, 0x6e, 0x6e, 0x6f, 0x64, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x61, 0x69,
	0x6c, 0x75, 0x72, 0x65, 0x49, 0x45, 0x73, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x49, 0x45, 0x73, 0x22, 0xee, 0x02, 0x0a, 0x2e, 0x45, 0x55, 0x54, 0x72, 0x61, 0x4e, 0x52,
	0x43, 0x65, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x6f, 0x6f, 0x72,
	0x64, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49,
	0x45, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x95, 0x01, 0x0a, 0x2e, 0x69, 0x64, 0x5f, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x63, 0x6f, 0x6f,
	0x72, 0x64, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2f, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x69, 0x74, 0x69,
	0x61, 0x74, 0x69, 0x6e, 0x67, 0x4e, 0x6f, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x48, 0x00, 0x52, 0x2a, 0x69, 0x64, 0x2d, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x69,
	0x6e, 0x67, 0x4e, 0x6f, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x2d, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x70, 0x0a, 0x20, 0x69, 0x64, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x78, 0x6e, 0x61, 0x70,
	0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x49, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48,
	0x00, 0x52, 0x1e, 0x69, 0x64, 0x2d, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x42, 0x32, 0x0a, 0x30, 0x65, 0x5f, 0x75, 0x74, 0x72, 0x61, 0x5f, 0x6e, 0x72, 0x5f, 0x63,
	0x65, 0x6c, 0x6c, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x63, 0x6f, 0x6f,
	0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x5f, 0x69, 0x65, 0x73, 0x22, 0xdc, 0x01, 0x0a, 0x29, 0x45, 0x55, 0x54, 0x72, 0x61, 0x4e,
	0x52, 0x43, 0x65, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x6f, 0x6f,
	0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x49, 0x45, 0x73, 0x12, 0x26, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x49, 0x65, 0x49, 0x44, 0x52, 0x03, 0x26, 0x69, 0x64, 0x12, 0x37, 0x0a, 0x0b, 0x63,
	0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x14, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x69, 0x74, 0x69,
	0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x0c, 0x26, 0x63, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61,
	0x6c, 0x69, 0x74, 0x79, 0x12, 0x4e, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x55,
	0x54, 0x72, 0x61, 0x4e, 0x52, 0x43, 0x65, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x49, 0x45, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x26, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x22, 0x7f, 0x0a, 0x26, 0x45, 0x55, 0x54, 0x72, 0x61, 0x4e, 0x52, 0x43,
	0x65, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x6f, 0x6f, 0x72, 0x64,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x55,
	0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x69, 0x65, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x45,
	0x55, 0x54, 0x72, 0x61, 0x4e, 0x52, 0x43, 0x65, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x45, 0x73, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x49, 0x45, 0x73, 0x22, 0x5c, 0x0a, 0x2c, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74,
	0x69, 0x6e, 0x67, 0x4e, 0x6f, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x45,
	0x78, 0x74, 0x49, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x22, 0xc4, 0x02, 0x0a, 0x26, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x69,
	0x6e, 0x67, 0x4e, 0x6f, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x46,
	0x0a, 0x07, 0x6e, 0x67, 0x5f, 0x65, 0x5f, 0x6e, 0x62, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2b, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x6e, 0x67,
	0x65, 0x4e, 0x62, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x65, 0x64, 0x48, 0x00, 0x52, 0x06,
	0x6e, 0x67, 0x2d, 0x65, 0x4e, 0x42, 0x12, 0x3e, 0x0a, 0x04, 0x67, 0x5f, 0x6e, 0x62, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x67, 0x4e, 0x62, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x65, 0x64, 0x48,
	0x00, 0x52, 0x03, 0x67, 0x4e, 0x42, 0x12, 0x63, 0x0a, 0x10, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65,
	0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x35, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x69, 0x74, 0x69,
	0x61, 0x74, 0x69, 0x6e, 0x67, 0x4e, 0x6f, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x48, 0x00, 0x52, 0x10, 0x63, 0x68, 0x6f, 0x69, 0x63,
	0x65, 0x2d, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x2d, 0x0a, 0x2b, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x63, 0x6f, 0x6f,
	0x72, 0x64, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x58, 0x0a, 0x28, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x6e, 0x67, 0x65, 0x4e, 0x62, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x65, 0x64,
	0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x22, 0x9b, 0x03, 0x0a, 0x22, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x6e, 0x67, 0x65,
	0x4e, 0x62, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x65, 0x64, 0x12, 0x6f, 0x0a, 0x20, 0x64,
	0x61, 0x74, 0x61, 0x5f, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x5f, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e,
	0x44, 0x61, 0x74, 0x61, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x1d, 0x64,
	0x61, 0x74, 0x61, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x5a, 0x0a, 0x19,
	0x73, 0x70, 0x65, 0x63, 0x74, 0x72, 0x75, 0x6d, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67,
	0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x74, 0x72,
	0x75, 0x6d, 0x53, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64,
	0x52, 0x16, 0x73, 0x70, 0x65, 0x63, 0x74, 0x72, 0x75, 0x6d, 0x53, 0x68, 0x61, 0x72, 0x69, 0x6e,
	0x67, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x12, 0x4e, 0x0a, 0x12, 0x6c, 0x69, 0x73, 0x74,
	0x6f, 0x66, 0x5f, 0x65, 0x5f, 0x75, 0x74, 0x72, 0x61, 0x63, 0x65, 0x6c, 0x6c, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x45,
	0x55, 0x54, 0x72, 0x61, 0x43, 0x47, 0x69, 0x42, 0x0c, 0xfa, 0x42, 0x09, 0x92, 0x01, 0x06, 0x08,
	0x01, 0x10, 0x80, 0x80, 0x01, 0x52, 0x11, 0x6c, 0x69, 0x73, 0x74, 0x6f, 0x66, 0x45, 0x2d, 0x55,
	0x54, 0x52, 0x41, 0x43, 0x65, 0x6c, 0x6c, 0x73, 0x12, 0x58, 0x0a, 0x0e, 0x69, 0x5f, 0x65, 0x5f,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x31, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x6e,
	0x67, 0x65, 0x4e, 0x62, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x65, 0x64, 0x45, 0x78, 0x74,
	0x49, 0x65, 0x73, 0x52, 0x0d, 0x69, 0x45, 0x2d, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x22, 0x56, 0x0a, 0x26, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x6f,
	0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x67, 0x4e, 0x62, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x61, 0x74, 0x65, 0x64, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xdc, 0x03, 0x0a, 0x20, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x67, 0x4e, 0x62, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x65, 0x64, 0x12,
	0x6f, 0x0a, 0x20, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x5f,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x78, 0x6e, 0x61, 0x70,
	0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x1d, 0x64, 0x61, 0x74, 0x61, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x4e, 0x0a, 0x12, 0x6c, 0x69, 0x73, 0x74, 0x6f, 0x66, 0x5f, 0x65, 0x5f, 0x75, 0x74, 0x72,
	0x61, 0x63, 0x65, 0x6c, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x78,
	0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x55, 0x54, 0x72, 0x61, 0x43, 0x47, 0x69, 0x42,
	0x0c, 0xfa, 0x42, 0x09, 0x92, 0x01, 0x06, 0x08, 0x01, 0x10, 0x80, 0x80, 0x01, 0x52, 0x11, 0x6c,
	0x69, 0x73, 0x74, 0x6f, 0x66, 0x45, 0x2d, 0x55, 0x54, 0x52, 0x41, 0x43, 0x65, 0x6c, 0x6c, 0x73,
	0x12, 0x5a, 0x0a, 0x19, 0x73, 0x70, 0x65, 0x63, 0x74, 0x72, 0x75, 0x6d, 0x5f, 0x73, 0x68, 0x61,
	0x72, 0x69, 0x6e, 0x67, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x70,
	0x65, 0x63, 0x74, 0x72, 0x75, 0x6d, 0x53, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x49, 0x64, 0x52, 0x16, 0x73, 0x70, 0x65, 0x63, 0x74, 0x72, 0x75, 0x6d, 0x53, 0x68,
	0x61, 0x72, 0x69, 0x6e, 0x67, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x12, 0x43, 0x0a, 0x0e,
	0x6c, 0x69, 0x73, 0x74, 0x6f, 0x66, 0x5f, 0x6e, 0x72, 0x63, 0x65, 0x6c, 0x6c, 0x73, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x4e,
	0x72, 0x43, 0x47, 0x69, 0x42, 0x0c, 0xfa, 0x42, 0x09, 0x92, 0x01, 0x06, 0x08, 0x01, 0x10, 0x80,
	0x80, 0x01, 0x52, 0x0d, 0x6c, 0x69, 0x73, 0x74, 0x6f, 0x66, 0x4e, 0x52, 0x43, 0x65, 0x6c, 0x6c,
	0x73, 0x12, 0x56, 0x0a, 0x0e, 0x69, 0x5f, 0x65, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x78, 0x6e, 0x61, 0x70,
	0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x6f, 0x6f, 0x72,
	0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x67, 0x4e, 0x62, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x61, 0x74, 0x65, 0x64, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x52, 0x0d, 0x69, 0x45, 0x2d, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xf3, 0x02, 0x0a, 0x2f, 0x45, 0x55,
	0x54, 0x72, 0x61, 0x4e, 0x52, 0x43, 0x65, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x49, 0x45, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x98, 0x01,
	0x0a, 0x2f, 0x69, 0x64, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f,
	0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76,
	0x31, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x4e, 0x6f, 0x64, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x6f, 0x6f, 0x72,
	0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x2b, 0x69, 0x64, 0x2d,
	0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x4e, 0x6f, 0x64, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x2d, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x6f, 0x6f, 0x72, 0x64,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x70, 0x0a, 0x20, 0x69, 0x64, 0x5f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x5f, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x6e,
	0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x1e, 0x69, 0x64, 0x2d, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x33, 0x0a, 0x31, 0x65, 0x5f,
	0x75, 0x74, 0x72, 0x61, 0x5f, 0x6e, 0x72, 0x5f, 0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x69, 0x65, 0x73, 0x22,
	0xde, 0x01, 0x0a, 0x2a, 0x45, 0x55, 0x54, 0x72, 0x61, 0x4e, 0x52, 0x43, 0x65, 0x6c, 0x6c, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x49, 0x45, 0x73, 0x12, 0x26,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x78, 0x6e, 0x61,
	0x70, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x49, 0x65, 0x49,
	0x44, 0x52, 0x03, 0x26, 0x69, 0x64, 0x12, 0x37, 0x0a, 0x0b, 0x63, 0x72, 0x69, 0x74, 0x69, 0x63,
	0x61, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x78, 0x6e,
	0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x69, 0x74,
	0x79, 0x52, 0x0c, 0x26, 0x63, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x12,
	0x4f, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38,
	0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x55, 0x54, 0x72, 0x61, 0x4e, 0x52,
	0x43, 0x65, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x6f, 0x6f, 0x72,
	0x64, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x49, 0x45, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x26, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x22, 0x81, 0x01, 0x0a, 0x27, 0x45, 0x55, 0x54, 0x72, 0x61, 0x4e, 0x52, 0x43, 0x65, 0x6c, 0x6c,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x56, 0x0a, 0x0c,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x33, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x55, 0x54,
	0x72, 0x61, 0x4e, 0x52, 0x43, 0x65, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x43, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x49, 0x45, 0x73, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x49, 0x45, 0x73, 0x22, 0x5d, 0x0a, 0x2d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x64, 0x69,
	0x6e, 0x67, 0x4e, 0x6f, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x45,
	0x78, 0x74, 0x49, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x22, 0xc9, 0x02, 0x0a, 0x27, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x64, 0x69,
	0x6e, 0x67, 0x4e, 0x6f, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x47, 0x0a, 0x07, 0x6e, 0x67, 0x5f, 0x65, 0x5f, 0x6e, 0x62, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2c, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x6e, 0x67, 0x65, 0x4e, 0x62, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x65, 0x64, 0x48, 0x00,
	0x52, 0x06, 0x6e, 0x67, 0x2d, 0x65, 0x4e, 0x42, 0x12, 0x3f, 0x0a, 0x04, 0x67, 0x5f, 0x6e, 0x62,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31,
	0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x67, 0x4e, 0x62, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74,
	0x65, 0x64, 0x48, 0x00, 0x52, 0x03, 0x67, 0x4e, 0x42, 0x12, 0x64, 0x0a, 0x10, 0x63, 0x68, 0x6f,
	0x69, 0x63, 0x65, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x4e, 0x6f, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x48, 0x00, 0x52, 0x10, 0x63,
	0x68, 0x6f, 0x69, 0x63, 0x65, 0x2d, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x42,
	0x2e, 0x0a, 0x2c, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x6e, 0x6f,
	0x64, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x59, 0x0a, 0x29, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x6f, 0x6f, 0x72, 0x64,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x67, 0x65, 0x4e, 0x62, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x61, 0x74, 0x65, 0x64, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x9d, 0x03, 0x0a, 0x23, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x67, 0x65, 0x4e, 0x62, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74,
	0x65, 0x64, 0x12, 0x6f, 0x0a, 0x20, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x74, 0x72, 0x61, 0x66, 0x66,
	0x69, 0x63, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x6e, 0x64, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x78,
	0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x54, 0x72, 0x61, 0x66, 0x66,
	0x69, 0x63, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x1d, 0x64, 0x61, 0x74, 0x61, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69,
	0x63, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x5a, 0x0a, 0x19, 0x73, 0x70, 0x65, 0x63, 0x74, 0x72, 0x75, 0x6d, 0x5f,
	0x73, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x70, 0x65, 0x63, 0x74, 0x72, 0x75, 0x6d, 0x53, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x52, 0x16, 0x73, 0x70, 0x65, 0x63, 0x74, 0x72, 0x75,
	0x6d, 0x53, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x12,
	0x4e, 0x0a, 0x12, 0x6c, 0x69, 0x73, 0x74, 0x6f, 0x66, 0x5f, 0x65, 0x5f, 0x75, 0x74, 0x72, 0x61,
	0x63, 0x65, 0x6c, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x78, 0x6e,
	0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x55, 0x54, 0x72, 0x61, 0x43, 0x47, 0x69, 0x42, 0x0c,
	0xfa, 0x42, 0x09, 0x92, 0x01, 0x06, 0x08, 0x01, 0x10, 0x80, 0x80, 0x01, 0x52, 0x11, 0x6c, 0x69,
	0x73, 0x74, 0x6f, 0x66, 0x45, 0x2d, 0x55, 0x54, 0x52, 0x41, 0x43, 0x65, 0x6c, 0x6c, 0x73, 0x12,
	0x59, 0x0a, 0x0e, 0x69, 0x5f, 0x65, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76,
	0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x67, 0x65, 0x4e, 0x62, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x61, 0x74, 0x65, 0x64, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x52, 0x0d, 0x69, 0x45, 0x2d,
	0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x57, 0x0a, 0x27, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x67, 0x4e, 0x62, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x65, 0x64, 0x45,
	0x78, 0x74, 0x49, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x22, 0x8e, 0x03, 0x0a, 0x21, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x43, 0x6f, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x67, 0x4e, 0x62,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x65, 0x64, 0x12, 0x6f, 0x0a, 0x20, 0x64, 0x61, 0x74,
	0x61, 0x5f, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x5f, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61,
	0x74, 0x61, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x1d, 0x64, 0x61, 0x74,
	0x61, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x5a, 0x0a, 0x19, 0x73, 0x70,
	0x65, 0x63, 0x74, 0x72, 0x75, 0x6d, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x74, 0x72, 0x75, 0x6d,
	0x53, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x52, 0x16,
	0x73, 0x70, 0x65, 0x63, 0x74, 0x72, 0x75, 0x6d, 0x53, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x12, 0x43, 0x0a, 0x0e, 0x6c, 0x69, 0x73, 0x74, 0x6f, 0x66,
	0x5f, 0x6e, 0x72, 0x63, 0x65, 0x6c, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e,
	0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x72, 0x43, 0x47, 0x69, 0x42, 0x0c,
	0xfa, 0x42, 0x09, 0x92, 0x01, 0x06, 0x08, 0x01, 0x10, 0x80, 0x80, 0x01, 0x52, 0x0d, 0x6c, 0x69,
	0x73, 0x74, 0x6f, 0x66, 0x4e, 0x52, 0x43, 0x65, 0x6c, 0x6c, 0x73, 0x12, 0x57, 0x0a, 0x0e, 0x69,
	0x5f, 0x65, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x67, 0x4e, 0x62, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x65, 0x64, 0x45,
	0x78, 0x74, 0x49, 0x65, 0x73, 0x52, 0x0d, 0x69, 0x45, 0x2d, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x22, 0x98, 0x03, 0x0a, 0x23, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61,
	0x72, 0x79, 0x52, 0x61, 0x74, 0x64, 0x61, 0x74, 0x61, 0x55, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x49, 0x45, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x58, 0x0a, 0x19,
	0x69, 0x64, 0x5f, 0x6d, 0x5f, 0x6e, 0x67, 0x5f, 0x72, 0x61, 0x6e, 0x6e, 0x6f, 0x64, 0x65, 0x5f,
	0x75, 0x65, 0x78, 0x6e, 0x5f, 0x61, 0x70, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x67, 0x52, 0x41, 0x6e, 0x6e,
	0x6f, 0x64, 0x65, 0x55, 0x65, 0x78, 0x6e, 0x41, 0x70, 0x69, 0x64, 0x48, 0x00, 0x52, 0x17, 0x69,
	0x64, 0x2d, 0x4d, 0x2d, 0x4e, 0x47, 0x2d, 0x52, 0x41, 0x4e, 0x6e, 0x6f, 0x64, 0x65, 0x55, 0x45,
	0x58, 0x6e, 0x41, 0x50, 0x49, 0x44, 0x12, 0x58, 0x0a, 0x19, 0x69, 0x64, 0x5f, 0x73, 0x5f, 0x6e,
	0x67, 0x5f, 0x72, 0x61, 0x6e, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x75, 0x65, 0x78, 0x6e, 0x5f, 0x61,
	0x70, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x78, 0x6e, 0x61, 0x70,
	0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x67, 0x52, 0x41, 0x6e, 0x6e, 0x6f, 0x64, 0x65, 0x55, 0x65, 0x78,
	0x6e, 0x41, 0x70, 0x69, 0x64, 0x48, 0x00, 0x52, 0x17, 0x69, 0x64, 0x2d, 0x53, 0x2d, 0x4e, 0x47,
	0x2d, 0x52, 0x41, 0x4e, 0x6e, 0x6f, 0x64, 0x65, 0x55, 0x45, 0x58, 0x6e, 0x41, 0x50, 0x49, 0x44,
	0x12, 0x96, 0x01, 0x0a, 0x2e, 0x69, 0x64, 0x5f, 0x70, 0x64, 0x75, 0x73, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x73, 0x65, 0x63, 0x6f,
	0x6e, 0x64, 0x61, 0x72, 0x79, 0x5f, 0x72, 0x61, 0x74, 0x75, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x78, 0x6e, 0x61, 0x70,
	0x2e, 0x76, 0x31, 0x2e, 0x50, 0x64, 0x75, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x52,
	0x61, 0x74, 0x75, 0x73, 0x61, 0x67, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x00, 0x52, 0x2a, 0x69,
	0x64, 0x2d, 0x50, 0x44, 0x55, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x52, 0x41, 0x54,
	0x55, 0x73, 0x61, 0x67, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x24, 0x0a, 0x22, 0x73, 0x65, 0x63,
	0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x5f, 0x72, 0x61, 0x74, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x75,
	0x73, 0x61, 0x67, 0x65, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x69, 0x65, 0x73, 0x22,
	0xc6, 0x01, 0x0a, 0x1e, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x52, 0x61, 0x74,
	0x64, 0x61, 0x74, 0x61, 0x55, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x49,
	0x45, 0x73, 0x12, 0x26, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x49, 0x65, 0x49, 0x44, 0x52, 0x03, 0x26, 0x69, 0x64, 0x12, 0x37, 0x0a, 0x0b, 0x63, 0x72,
	0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x14, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x69, 0x74, 0x69, 0x63,
	0x61, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x0c, 0x26, 0x63, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c,
	0x69, 0x74, 0x79, 0x12, 0x43, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x63,
	0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x52, 0x61, 0x74, 0x64, 0x61, 0x74, 0x61, 0x55, 0x73, 0x61,
	0x67, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x45, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x06, 0x26, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x69, 0x0a, 0x1b, 0x53, 0x65, 0x63, 0x6f,
	0x6e, 0x64, 0x61, 0x72, 0x79, 0x52, 0x61, 0x74, 0x64, 0x61, 0x74, 0x61, 0x55, 0x73, 0x61, 0x67,
	0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x4a, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x5f, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e,
	0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72,
	0x79, 0x52, 0x61, 0x74, 0x64, 0x61, 0x74, 0x61, 0x55, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x49, 0x45, 0x73, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x49, 0x45, 0x73, 0x22, 0xd2, 0x02, 0x0a, 0x18, 0x58, 0x6e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x61,
	0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x45, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x57, 0x0a, 0x18, 0x69, 0x64, 0x5f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x5f, 0x6e, 0x67,
	0x5f, 0x72, 0x61, 0x6e, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6c, 0x6f,
	0x62, 0x61, 0x6c, 0x4e, 0x67, 0x52, 0x41, 0x6e, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x44, 0x48, 0x00,
	0x52, 0x17, 0x69, 0x64, 0x2d, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x4e, 0x47, 0x2d, 0x52, 0x41,
	0x4e, 0x2d, 0x6e, 0x6f, 0x64, 0x65, 0x2d, 0x49, 0x44, 0x12, 0x51, 0x0a, 0x17, 0x69, 0x64, 0x5f,
	0x78, 0x6e, 0x5f, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x61, 0x6c, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73,
	0x68, 0x6f, 0x6c, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x78, 0x6e, 0x61,
	0x70, 0x2e, 0x76, 0x31, 0x2e, 0x58, 0x6e, 0x42, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x74, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x15, 0x69, 0x64, 0x2d, 0x58, 0x6e, 0x52, 0x65, 0x6d, 0x6f,
	0x76, 0x61, 0x6c, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x70, 0x0a, 0x20,
	0x69, 0x64, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31,
	0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x1e,
	0x69, 0x64, 0x2d, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x49, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x18,
	0x0a, 0x16, 0x78, 0x6e, 0x5f, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x65, 0x73, 0x22, 0xb0, 0x01, 0x0a, 0x13, 0x58, 0x6e, 0x52,
	0x65, 0x6d, 0x6f, 0x76, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x45, 0x73,
	0x12, 0x26, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x78,
	0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x49,
	0x65, 0x49, 0x44, 0x52, 0x03, 0x26, 0x69, 0x64, 0x12, 0x37, 0x0a, 0x0b, 0x63, 0x72, 0x69, 0x74,
	0x69, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e,
	0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c,
	0x69, 0x74, 0x79, 0x52, 0x0c, 0x26, 0x63, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x69, 0x74,
	0x79, 0x12, 0x38, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x58, 0x6e, 0x52, 0x65, 0x6d,
	0x6f, 0x76, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x45, 0x73, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x06, 0x26, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x53, 0x0a, 0x10, 0x58,
	0x6e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x3f, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x69, 0x65, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e,
	0x58, 0x6e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x49, 0x45, 0x73, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x49, 0x45, 0x73,
	0x22, 0xe3, 0x02, 0x0a, 0x19, 0x58, 0x6e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x61, 0x6c, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x49, 0x45, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x57,
	0x0a, 0x18, 0x69, 0x64, 0x5f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x5f, 0x6e, 0x67, 0x5f, 0x72,
	0x61, 0x6e, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61,
	0x6c, 0x4e, 0x67, 0x52, 0x41, 0x6e, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x44, 0x48, 0x00, 0x52, 0x17,
	0x69, 0x64, 0x2d, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x4e, 0x47, 0x2d, 0x52, 0x41, 0x4e, 0x2d,
	0x6e, 0x6f, 0x64, 0x65, 0x2d, 0x49, 0x44, 0x12, 0x60, 0x0a, 0x1a, 0x69, 0x64, 0x5f, 0x63, 0x72,
	0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f,
	0x73, 0x74, 0x69, 0x63, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x78, 0x6e,
	0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x69, 0x74,
	0x79, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x73, 0x48, 0x00, 0x52, 0x19,
	0x69, 0x64, 0x2d, 0x43, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x44, 0x69,
	0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x70, 0x0a, 0x20, 0x69, 0x64, 0x5f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x5f, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49,
	0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x1e, 0x69, 0x64, 0x2d,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x19, 0x0a, 0x17, 0x78,
	0x6e, 0x5f, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x5f, 0x69, 0x65, 0x73, 0x22, 0xb2, 0x01, 0x0a, 0x14, 0x58, 0x6e, 0x52, 0x65, 0x6d,
	0x6f, 0x76, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x49, 0x45, 0x73, 0x12,
	0x26, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x78, 0x6e,
	0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x49, 0x65,
	0x49, 0x44, 0x52, 0x03, 0x26, 0x69, 0x64, 0x12, 0x37, 0x0a, 0x0b, 0x63, 0x72, 0x69, 0x74, 0x69,
	0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x78,
	0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x69,
	0x74, 0x79, 0x52, 0x0c, 0x26, 0x63, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79,
	0x12, 0x39, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x58, 0x6e, 0x52, 0x65, 0x6d, 0x6f,
	0x76, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x49, 0x45, 0x73, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x06, 0x26, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x55, 0x0a, 0x11, 0x58,
	0x6e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x40, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x69, 0x65, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31,
	0x2e, 0x58, 0x6e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x49, 0x45, 0x73, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x49,
	0x45, 0x73, 0x22, 0xb6, 0x02, 0x0a, 0x18, 0x58, 0x6e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x61, 0x6c,
	0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x49, 0x45, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x2c, 0x0a, 0x08, 0x69, 0x64, 0x5f, 0x63, 0x61, 0x75, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0e, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x61, 0x75, 0x73,
	0x65, 0x48, 0x00, 0x52, 0x08, 0x69, 0x64, 0x2d, 0x43, 0x61, 0x75, 0x73, 0x65, 0x12, 0x60, 0x0a,
	0x1a, 0x69, 0x64, 0x5f, 0x63, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x5f,
	0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x69, 0x74,
	0x69, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69,
	0x63, 0x73, 0x48, 0x00, 0x52, 0x19, 0x69, 0x64, 0x2d, 0x43, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61,
	0x6c, 0x69, 0x74, 0x79, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12,
	0x70, 0x0a, 0x20, 0x69, 0x64, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x78, 0x6e, 0x61, 0x70,
	0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x49, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48,
	0x00, 0x52, 0x1e, 0x69, 0x64, 0x2d, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x42, 0x18, 0x0a, 0x16, 0x78, 0x6e, 0x5f, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x61, 0x6c, 0x5f,
	0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x5f, 0x69, 0x65, 0x73, 0x22, 0xb0, 0x01, 0x0a, 0x13,
	0x58, 0x6e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x61, 0x6c, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65,
	0x49, 0x45, 0x73, 0x12, 0x26, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x49, 0x65, 0x49, 0x44, 0x52, 0x03, 0x26, 0x69, 0x64, 0x12, 0x37, 0x0a, 0x0b, 0x63,
	0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x14, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x69, 0x74, 0x69,
	0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x0c, 0x26, 0x63, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61,
	0x6c, 0x69, 0x74, 0x79, 0x12, 0x38, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x58, 0x6e,
	0x52, 0x65, 0x6d, 0x6f, 0x76, 0x61, 0x6c, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x49, 0x45,
	0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x26, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x53,
	0x0a, 0x10, 0x58, 0x6e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x61, 0x6c, 0x46, 0x61, 0x69, 0x6c, 0x75,
	0x72, 0x65, 0x12, 0x3f, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x69,
	0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e,
	0x76, 0x31, 0x2e, 0x58, 0x6e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x61, 0x6c, 0x46, 0x61, 0x69, 0x6c,
	0x75, 0x72, 0x65, 0x49, 0x45, 0x73, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x49, 0x45, 0x73, 0x22, 0x8a, 0x03, 0x0a, 0x1d, 0x43, 0x65, 0x6c, 0x6c, 0x41, 0x63, 0x74, 0x69,
	0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x45, 0x73,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x5f, 0x0a, 0x1b, 0x69, 0x64, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x64, 0x5f, 0x63, 0x65, 0x6c, 0x6c, 0x73, 0x5f, 0x74, 0x6f, 0x5f, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x78, 0x6e, 0x61,
	0x70, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x64, 0x43, 0x65, 0x6c, 0x6c, 0x73,
	0x54, 0x6f, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x18, 0x69, 0x64,
	0x2d, 0x53, 0x65, 0x72, 0x76, 0x65, 0x64, 0x43, 0x65, 0x6c, 0x6c, 0x73, 0x54, 0x6f, 0x41, 0x63,
	0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x12, 0x77, 0x0a, 0x23, 0x69, 0x64, 0x5f, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x66, 0x6f, 0x72, 0x5f, 0x63, 0x65,
	0x6c, 0x6c, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x63,
	0x74, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x66, 0x6f, 0x72, 0x43, 0x65, 0x6c,
	0x6c, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x20, 0x69,
	0x64, 0x2d, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x66, 0x6f,
	0x72, 0x43, 0x65, 0x6c, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x70, 0x0a, 0x20, 0x69, 0x64, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x78, 0x6e, 0x61, 0x70,
	0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x49, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48,
	0x00, 0x52, 0x1e, 0x69, 0x64, 0x2d, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x42, 0x1d, 0x0a, 0x1b, 0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x65, 0x73,
	0x22, 0xba, 0x01, 0x0a, 0x18, 0x43, 0x65, 0x6c, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x45, 0x73, 0x12, 0x26, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x78, 0x6e, 0x61, 0x70,
	0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x49, 0x65, 0x49, 0x44,
	0x52, 0x03, 0x26, 0x69, 0x64, 0x12, 0x37, 0x0a, 0x0b, 0x63, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61,
	0x6c, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x78, 0x6e, 0x61,
	0x70, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79,
	0x52, 0x0c, 0x26, 0x63, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x3d,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e,
	0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x41, 0x63, 0x74, 0x69,
	0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x45, 0x73,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x26, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x5d, 0x0a,
	0x15, 0x43, 0x65, 0x6c, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x44, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x5f, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x78,
	0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x76,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x45, 0x73, 0x52,
	0x0b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x49, 0x45, 0x73, 0x22, 0x58, 0x0a, 0x1c,
	0x4e, 0x72, 0x63, 0x65, 0x6c, 0x6c, 0x73, 0x53, 0x65, 0x72, 0x76, 0x65, 0x64, 0x43, 0x65, 0x6c,
	0x6c, 0x73, 0x54, 0x6f, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x12, 0x38, 0x0a, 0x08,
	0x6e, 0x72, 0x5f, 0x63, 0x65, 0x6c, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e,
	0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x72, 0x43, 0x47, 0x69, 0x42, 0x0c,
	0xfa, 0x42, 0x09, 0x92, 0x01, 0x06, 0x08, 0x01, 0x10, 0x80, 0x80, 0x01, 0x52, 0x08, 0x6e, 0x72,
	0x2d, 0x63, 0x65, 0x6c, 0x6c, 0x73, 0x22, 0x66, 0x0a, 0x1f, 0x45, 0x75, 0x74, 0x72, 0x61, 0x63,
	0x65, 0x6c, 0x6c, 0x73, 0x53, 0x65, 0x72, 0x76, 0x65, 0x64, 0x43, 0x65, 0x6c, 0x6c, 0x73, 0x54,
	0x6f, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x12, 0x43, 0x0a, 0x0c, 0x65, 0x5f, 0x75,
	0x74, 0x72, 0x61, 0x5f, 0x63, 0x65, 0x6c, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x11, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x55, 0x54, 0x72, 0x61, 0x43,
	0x47, 0x69, 0x42, 0x0c, 0xfa, 0x42, 0x09, 0x92, 0x01, 0x06, 0x08, 0x01, 0x10, 0x80, 0x80, 0x01,
	0x52, 0x0c, 0x65, 0x2d, 0x75, 0x74, 0x72, 0x61, 0x2d, 0x63, 0x65, 0x6c, 0x6c, 0x73, 0x22, 0x4b,
	0x0a, 0x1b, 0x53, 0x65, 0x72, 0x76, 0x65, 0x64, 0x43, 0x65, 0x6c, 0x6c, 0x73, 0x54, 0x6f, 0x41,
	0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x12, 0x2c, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x9c, 0x02, 0x0a, 0x15,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x64, 0x43, 0x65, 0x6c, 0x6c, 0x73, 0x54, 0x6f, 0x41, 0x63, 0x74,
	0x69, 0x76, 0x61, 0x74, 0x65, 0x12, 0x43, 0x0a, 0x08, 0x6e, 0x72, 0x5f, 0x63, 0x65, 0x6c, 0x6c,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76,
	0x31, 0x2e, 0x4e, 0x72, 0x63, 0x65, 0x6c, 0x6c, 0x73, 0x53, 0x65, 0x72, 0x76, 0x65, 0x64, 0x43,
	0x65, 0x6c, 0x6c, 0x73, 0x54, 0x6f, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x48, 0x00,
	0x52, 0x08, 0x6e, 0x72, 0x2d, 0x63, 0x65, 0x6c, 0x6c, 0x73, 0x12, 0x4e, 0x0a, 0x0c, 0x65, 0x5f,
	0x75, 0x74, 0x72, 0x61, 0x5f, 0x63, 0x65, 0x6c, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x28, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x75, 0x74, 0x72, 0x61,
	0x63, 0x65, 0x6c, 0x6c, 0x73, 0x53, 0x65, 0x72, 0x76, 0x65, 0x64, 0x43, 0x65, 0x6c, 0x6c, 0x73,
	0x54, 0x6f, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x0c, 0x65, 0x2d,
	0x75, 0x74, 0x72, 0x61, 0x2d, 0x63, 0x65, 0x6c, 0x6c, 0x73, 0x12, 0x52, 0x0a, 0x10, 0x63, 0x68,
	0x6f, 0x69, 0x63, 0x65, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x64, 0x43, 0x65, 0x6c, 0x6c, 0x73, 0x54, 0x6f, 0x41, 0x63, 0x74, 0x69,
	0x76, 0x61, 0x74, 0x65, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x48, 0x00, 0x52, 0x10, 0x63, 0x68,
	0x6f, 0x69, 0x63, 0x65, 0x2d, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x1a,
	0x0a, 0x18, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x5f, 0x63, 0x65, 0x6c, 0x6c, 0x73, 0x5f, 0x74,
	0x6f, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x22, 0xea, 0x03, 0x0a, 0x1e, 0x43,
	0x65, 0x6c, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x49, 0x45, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x5b, 0x0a,
	0x19, 0x69, 0x64, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x64, 0x5f, 0x63, 0x65, 0x6c, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76,
	0x61, 0x74, 0x65, 0x64, 0x53, 0x65, 0x72, 0x76, 0x65, 0x64, 0x43, 0x65, 0x6c, 0x6c, 0x73, 0x48,
	0x00, 0x52, 0x17, 0x69, 0x64, 0x2d, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x64, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x64, 0x43, 0x65, 0x6c, 0x6c, 0x73, 0x12, 0x77, 0x0a, 0x23, 0x69, 0x64,
	0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x66, 0x6f,
	0x72, 0x5f, 0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76,
	0x31, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x66, 0x6f,
	0x72, 0x43, 0x65, 0x6c, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48,
	0x00, 0x52, 0x20, 0x69, 0x64, 0x2d, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x44, 0x66, 0x6f, 0x72, 0x43, 0x65, 0x6c, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x60, 0x0a, 0x1a, 0x69, 0x64, 0x5f, 0x63, 0x72, 0x69, 0x74, 0x69, 0x63,
	0x61, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x44, 0x69, 0x61,
	0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x73, 0x48, 0x00, 0x52, 0x19, 0x69, 0x64, 0x2d, 0x43,
	0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f,
	0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x70, 0x0a, 0x20, 0x69, 0x64, 0x5f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69,
	0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x24, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x6e, 0x64, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x1e, 0x69, 0x64, 0x2d, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x6e, 0x64,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x1e, 0x0a, 0x1c, 0x63, 0x65, 0x6c, 0x6c, 0x5f,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x5f, 0x69, 0x65, 0x73, 0x22, 0xbc, 0x01, 0x0a, 0x19, 0x43, 0x65, 0x6c, 0x6c,
	0x41, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x49, 0x45, 0x73, 0x12, 0x26, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x49, 0x65, 0x49, 0x44, 0x52, 0x03, 0x26, 0x69, 0x64, 0x12, 0x37, 0x0a,
	0x0b, 0x63, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x14, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x69,
	0x74, 0x69, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x0c, 0x26, 0x63, 0x72, 0x69, 0x74, 0x69,
	0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x3e, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x65, 0x6c, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x49, 0x45, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06,
	0x26, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x5f, 0x0a, 0x16, 0x43, 0x65, 0x6c, 0x6c, 0x41, 0x63,
	0x74, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x45, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x69, 0x65, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x49, 0x45, 0x73, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x49, 0x45, 0x73, 0x22, 0x57, 0x0a, 0x1b, 0x4e, 0x72, 0x63, 0x65, 0x6c,
	0x6c, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x64, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x64, 0x43, 0x65, 0x6c, 0x6c, 0x73, 0x12, 0x38, 0x0a, 0x08, 0x6e, 0x72, 0x5f, 0x63, 0x65, 0x6c,
	0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e,
	0x76, 0x31, 0x2e, 0x4e, 0x72, 0x43, 0x47, 0x69, 0x42, 0x0c, 0xfa, 0x42, 0x09, 0x92, 0x01, 0x06,
	0x08, 0x01, 0x10, 0x80, 0x80, 0x01, 0x52, 0x08, 0x6e, 0x72, 0x2d, 0x63, 0x65, 0x6c, 0x6c, 0x73,
	0x22, 0x65, 0x0a, 0x1e, 0x45, 0x75, 0x74, 0x72, 0x61, 0x63, 0x65, 0x6c, 0x6c, 0x73, 0x41, 0x63,
	0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x64, 0x53, 0x65, 0x72, 0x76, 0x65, 0x64, 0x43, 0x65, 0x6c,
	0x6c, 0x73, 0x12, 0x43, 0x0a, 0x0c, 0x65, 0x5f, 0x75, 0x74, 0x72, 0x61, 0x5f, 0x63, 0x65, 0x6c,
	0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e,
	0x76, 0x31, 0x2e, 0x45, 0x55, 0x54, 0x72, 0x61, 0x43, 0x47, 0x69, 0x42, 0x0c, 0xfa, 0x42, 0x09,
	0x92, 0x01, 0x06, 0x08, 0x01, 0x10, 0x80, 0x80, 0x01, 0x52, 0x0c, 0x65, 0x2d, 0x75, 0x74, 0x72,
	0x61, 0x2d, 0x63, 0x65, 0x6c, 0x6c, 0x73, 0x22, 0x4a, 0x0a, 0x1a, 0x41, 0x63, 0x74, 0x69, 0x76,
	0x61, 0x74, 0x65, 0x64, 0x53, 0x65, 0x72, 0x76, 0x65, 0x64, 0x43, 0x65, 0x6c, 0x6c, 0x73, 0x45,
	0x78, 0x74, 0x49, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x22, 0x96, 0x02, 0x0a, 0x14, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65,
	0x64, 0x53, 0x65, 0x72, 0x76, 0x65, 0x64, 0x43, 0x65, 0x6c, 0x6c, 0x73, 0x12, 0x42, 0x0a, 0x08,
	0x6e, 0x72, 0x5f, 0x63, 0x65, 0x6c, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24,
	0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x72, 0x63, 0x65, 0x6c, 0x6c, 0x73,
	0x41, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x64, 0x53, 0x65, 0x72, 0x76, 0x65, 0x64, 0x43,
	0x65, 0x6c, 0x6c, 0x73, 0x48, 0x00, 0x52, 0x08, 0x6e, 0x72, 0x2d, 0x63, 0x65, 0x6c, 0x6c, 0x73,
	0x12, 0x4d, 0x0a, 0x0c, 0x65, 0x5f, 0x75, 0x74, 0x72, 0x61, 0x5f, 0x63, 0x65, 0x6c, 0x6c, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31,
	0x2e, 0x45, 0x75, 0x74, 0x72, 0x61, 0x63, 0x65, 0x6c, 0x6c, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76,
	0x61, 0x74, 0x65, 0x64, 0x53, 0x65, 0x72, 0x76, 0x65, 0x64, 0x43, 0x65, 0x6c, 0x6c, 0x73, 0x48,
	0x00, 0x52, 0x0c, 0x65, 0x2d, 0x75, 0x74, 0x72, 0x61, 0x2d, 0x63, 0x65, 0x6c, 0x6c, 0x73, 0x12,
	0x51, 0x0a, 0x10, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x78, 0x6e, 0x61, 0x70,
	0x2e, 0x76, 0x31, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x64, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x64, 0x43, 0x65, 0x6c, 0x6c, 0x73, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x48, 0x00,
	0x52, 0x10, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x2d, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x42, 0x18, 0x0a, 0x16, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x5f, 0x63, 0x65, 0x6c, 0x6c, 0x73, 0x22, 0xb9, 0x03, 0x0a,
	0x1d, 0x43, 0x65, 0x6c, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46,
	0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x49, 0x45, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x77,
	0x0a, 0x23, 0x69, 0x64, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x66, 0x6f, 0x72, 0x5f, 0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x78, 0x6e,
	0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x66, 0x6f, 0x72, 0x43, 0x65, 0x6c, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x20, 0x69, 0x64, 0x2d, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x66, 0x6f, 0x72, 0x43, 0x65, 0x6c, 0x6c, 0x41, 0x63, 0x74,
	0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2c, 0x0a, 0x08, 0x69, 0x64, 0x5f, 0x63, 0x61,
	0x75, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x78, 0x6e, 0x61, 0x70,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x61, 0x75, 0x73, 0x65, 0x48, 0x00, 0x52, 0x08, 0x69, 0x64, 0x2d,
	0x43, 0x61, 0x75, 0x73, 0x65, 0x12, 0x60, 0x0a, 0x1a, 0x69, 0x64, 0x5f, 0x63, 0x72, 0x69, 0x74,
	0x69, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74,
	0x69, 0x63, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x78, 0x6e, 0x61, 0x70,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x44,
	0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x73, 0x48, 0x00, 0x52, 0x19, 0x69, 0x64,
	0x2d, 0x43, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x44, 0x69, 0x61, 0x67,
	0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x70, 0x0a, 0x20, 0x69, 0x64, 0x5f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x5f, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x24, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x6e, 0x64,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x1e, 0x69, 0x64, 0x2d, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49,
	0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x1d, 0x0a, 0x1b, 0x63, 0x65, 0x6c,
	0x6c, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x61, 0x69,
	0x6c, 0x75, 0x72, 0x65, 0x5f, 0x69, 0x65, 0x73, 0x22, 0xba, 0x01, 0x0a, 0x18, 0x43, 0x65, 0x6c,
	0x6c, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x61, 0x69, 0x6c, 0x75,
	0x72, 0x65, 0x49, 0x45, 0x73, 0x12, 0x26, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x49, 0x65, 0x49, 0x44, 0x52, 0x03, 0x26, 0x69, 0x64, 0x12, 0x37, 0x0a,
	0x0b, 0x63, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x14, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x69,
	0x74, 0x69, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x0c, 0x26, 0x63, 0x72, 0x69, 0x74, 0x69,
	0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x3d, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x65, 0x6c, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x61,
	0x69, 0x6c, 0x75, 0x72, 0x65, 0x49, 0x45, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x26,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x5d, 0x0a, 0x15, 0x43, 0x65, 0x6c, 0x6c, 0x41, 0x63, 0x74,
	0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x12, 0x44,
	0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x69, 0x65, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x65, 0x6c, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x61, 0x69,
	0x6c, 0x75, 0x72, 0x65, 0x49, 0x45, 0x73, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x49, 0x45, 0x73, 0x22, 0xa9, 0x02, 0x0a, 0x14, 0x52, 0x65, 0x73, 0x65, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x45, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x5c, 0x0a,
	0x1a, 0x69, 0x64, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x74, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x65,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x48, 0x00, 0x52, 0x17, 0x69, 0x64, 0x2d, 0x52, 0x65, 0x73, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2c, 0x0a, 0x08, 0x69,
	0x64, 0x5f, 0x63, 0x61, 0x75, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x61, 0x75, 0x73, 0x65, 0x48, 0x00, 0x52,
	0x08, 0x69, 0x64, 0x2d, 0x43, 0x61, 0x75, 0x73, 0x65, 0x12, 0x70, 0x0a, 0x20, 0x69, 0x64, 0x5f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x5f, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49,
	0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x1e, 0x69, 0x64, 0x2d,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x13, 0x0a, 0x11, 0x72,
	0x65, 0x73, 0x65, 0x74, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x65, 0x73,
	0x22, 0xa8, 0x01, 0x0a, 0x0f, 0x52, 0x65, 0x73, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x49, 0x45, 0x73, 0x12, 0x26, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x49, 0x65, 0x49, 0x44, 0x52, 0x03, 0x26, 0x69, 0x64, 0x12, 0x37, 0x0a, 0x0b,
	0x63, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x14, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x69, 0x74,
	0x69, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x0c, 0x26, 0x63, 0x72, 0x69, 0x74, 0x69, 0x63,
	0x61, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x34, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x52,
	0x65, 0x73, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x45, 0x73, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x06, 0x26, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x4b, 0x0a, 0x0c, 0x52,
	0x65, 0x73, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3b, 0x0a, 0x0c, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x65,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x45, 0x73, 0x52, 0x0b, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x49, 0x45, 0x73, 0x22, 0xe2, 0x02, 0x0a, 0x15, 0x52, 0x65, 0x73,
	0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x49, 0x45, 0x73, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x5f, 0x0a, 0x1b, 0x69, 0x64, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x74, 0x5f, 0x72,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x69, 0x6e, 0x66,
	0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76,
	0x31, 0x2e, 0x52, 0x65, 0x73, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x18, 0x69, 0x64, 0x2d, 0x52, 0x65,
	0x73, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x54, 0x79, 0x70, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x60, 0x0a, 0x1a, 0x69, 0x64, 0x5f, 0x63, 0x72, 0x69, 0x74, 0x69, 0x63,
	0x61, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x44, 0x69, 0x61,
	0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x73, 0x48, 0x00, 0x52, 0x19, 0x69, 0x64, 0x2d, 0x43,
	0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f,
	0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x70, 0x0a, 0x20, 0x69, 0x64, 0x5f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69,
	0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x24, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x6e, 0x64, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x1e, 0x69, 0x64, 0x2d, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x6e, 0x64,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x14, 0x0a, 0x12, 0x72, 0x65, 0x73, 0x65, 0x74,
	0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x69, 0x65, 0x73, 0x22, 0xaa, 0x01,
	0x0a, 0x10, 0x52, 0x65, 0x73, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x49,
	0x45, 0x73, 0x12, 0x26, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x49, 0x65, 0x49, 0x44, 0x52, 0x03, 0x26, 0x69, 0x64, 0x12, 0x37, 0x0a, 0x0b, 0x63, 0x72,
	0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x14, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x69, 0x74, 0x69, 0x63,
	0x61, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x0c, 0x26, 0x63, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c,
	0x69, 0x74, 0x79, 0x12, 0x35, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73,
	0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x49, 0x45, 0x73, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x06, 0x26, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x4d, 0x0a, 0x0d, 0x52, 0x65,
	0x73, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3c, 0x0a, 0x0c, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x65,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x49, 0x45, 0x73, 0x52, 0x0b, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x49, 0x45, 0x73, 0x22, 0xed, 0x03, 0x0a, 0x17, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x45, 0x73,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x5b, 0x0a, 0x1b, 0x69, 0x64, 0x5f, 0x6f, 0x6c, 0x64, 0x5f,
	0x6e, 0x67, 0x5f, 0x72, 0x61, 0x6e, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x75, 0x65, 0x78, 0x6e, 0x5f,
	0x61, 0x70, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x78, 0x6e, 0x61,
	0x70, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x67, 0x52, 0x41, 0x6e, 0x6e, 0x6f, 0x64, 0x65, 0x55, 0x65,
	0x78, 0x6e, 0x41, 0x70, 0x69, 0x64, 0x48, 0x00, 0x52, 0x18, 0x69, 0x64, 0x2d, 0x6f, 0x6c, 0x64,
	0x4e, 0x47, 0x2d, 0x52, 0x41, 0x4e, 0x6e, 0x6f, 0x64, 0x65, 0x55, 0x45, 0x58, 0x6e, 0x41, 0x50,
	0x49, 0x44, 0x12, 0x5b, 0x0a, 0x1b, 0x69, 0x64, 0x5f, 0x6e, 0x65, 0x77, 0x5f, 0x6e, 0x67, 0x5f,
	0x72, 0x61, 0x6e, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x75, 0x65, 0x78, 0x6e, 0x5f, 0x61, 0x70, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76,
	0x31, 0x2e, 0x4e, 0x67, 0x52, 0x41, 0x6e, 0x6e, 0x6f, 0x64, 0x65, 0x55, 0x65, 0x78, 0x6e, 0x41,
	0x70, 0x69, 0x64, 0x48, 0x00, 0x52, 0x18, 0x69, 0x64, 0x2d, 0x6e, 0x65, 0x77, 0x4e, 0x47, 0x2d,
	0x52, 0x41, 0x4e, 0x6e, 0x6f, 0x64, 0x65, 0x55, 0x45, 0x58, 0x6e, 0x41, 0x50, 0x49, 0x44, 0x12,
	0x2c, 0x0a, 0x08, 0x69, 0x64, 0x5f, 0x63, 0x61, 0x75, 0x73, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0e, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x61, 0x75, 0x73,
	0x65, 0x48, 0x00, 0x52, 0x08, 0x69, 0x64, 0x2d, 0x43, 0x61, 0x75, 0x73, 0x65, 0x12, 0x60, 0x0a,
	0x1a, 0x69, 0x64, 0x5f, 0x63, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x5f,
	0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x69, 0x74,
	0x69, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69,
	0x63, 0x73, 0x48, 0x00, 0x52, 0x19, 0x69, 0x64, 0x2d, 0x43, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61,
	0x6c, 0x69, 0x74, 0x79, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12,
	0x70, 0x0a, 0x20, 0x69, 0x64, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x78, 0x6e, 0x61, 0x70,
	0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x49, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48,
	0x00, 0x52, 0x1e, 0x69, 0x64, 0x2d, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x42, 0x16, 0x0a, 0x14, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x69, 0x6e, 0x64, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x65, 0x73, 0x22, 0xae, 0x01, 0x0a, 0x12, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x45, 0x73,
	0x12, 0x26, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x78,
	0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x49,
	0x65, 0x49, 0x44, 0x52, 0x03, 0x26, 0x69, 0x64, 0x12, 0x37, 0x0a, 0x0b, 0x63, 0x72, 0x69, 0x74,
	0x69, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e,
	0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c,
	0x69, 0x74, 0x79, 0x52, 0x0c, 0x26, 0x63, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x69, 0x74,
	0x79, 0x12, 0x37, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x20, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x45, 0x73, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x06, 0x26, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x51, 0x0a, 0x0f, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3e, 0x0a,
	0x0c, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x45, 0x73,
	0x52, 0x0b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x49, 0x45, 0x73, 0x22, 0x41, 0x0a,
	0x11, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49,
	0x45, 0x73, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x22, 0x4d, 0x0a, 0x0e, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x65,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76,
	0x31, 0x2e, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x49, 0x45, 0x73, 0x52, 0x0a, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x49, 0x45, 0x73, 0x22,
	0xa8, 0x02, 0x0a, 0x12, 0x54, 0x72, 0x61, 0x63, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x49, 0x65,
	0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x58, 0x0a, 0x19, 0x69, 0x64, 0x5f, 0x6d, 0x5f, 0x6e,
	0x67, 0x5f, 0x72, 0x61, 0x6e, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x75, 0x65, 0x78, 0x6e, 0x5f, 0x61,
	0x70, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x78, 0x6e, 0x61, 0x70,
	0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x67, 0x52, 0x41, 0x6e, 0x6e, 0x6f, 0x64, 0x65, 0x55, 0x65, 0x78,
	0x6e, 0x41, 0x70, 0x69, 0x64, 0x48, 0x00, 0x52, 0x17, 0x69, 0x64, 0x2d, 0x4d, 0x2d, 0x4e, 0x47,
	0x2d, 0x52, 0x41, 0x4e, 0x6e, 0x6f, 0x64, 0x65, 0x55, 0x45, 0x58, 0x6e, 0x41, 0x50, 0x49, 0x44,
	0x12, 0x58, 0x0a, 0x19, 0x69, 0x64, 0x5f, 0x73, 0x5f, 0x6e, 0x67, 0x5f, 0x72, 0x61, 0x6e, 0x6e,
	0x6f, 0x64, 0x65, 0x5f, 0x75, 0x65, 0x78, 0x6e, 0x5f, 0x61, 0x70, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x67,
	0x52, 0x41, 0x6e, 0x6e, 0x6f, 0x64, 0x65, 0x55, 0x65, 0x78, 0x6e, 0x41, 0x70, 0x69, 0x64, 0x48,
	0x00, 0x52, 0x17, 0x69, 0x64, 0x2d, 0x53, 0x2d, 0x4e, 0x47, 0x2d, 0x52, 0x41, 0x4e, 0x6e, 0x6f,
	0x64, 0x65, 0x55, 0x45, 0x58, 0x6e, 0x41, 0x50, 0x49, 0x44, 0x12, 0x4b, 0x0a, 0x13, 0x69, 0x64,
	0x5f, 0x74, 0x72, 0x61, 0x63, 0x65, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76,
	0x31, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x65, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x48, 0x00, 0x52, 0x12, 0x69, 0x64, 0x2d, 0x54, 0x72, 0x61, 0x63, 0x65, 0x41, 0x63, 0x74,
	0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x11, 0x0a, 0x0f, 0x74, 0x72, 0x61, 0x63, 0x65,
	0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x69, 0x65, 0x73, 0x22, 0xa4, 0x01, 0x0a, 0x0d, 0x54,
	0x72, 0x61, 0x63, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x49, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e,
	0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x49, 0x65, 0x49, 0x44, 0x52,
	0x03, 0x26, 0x69, 0x64, 0x12, 0x37, 0x0a, 0x0b, 0x63, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c,
	0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x78, 0x6e, 0x61, 0x70,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x52,
	0x0c, 0x26, 0x63, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x32, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x78,
	0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x65, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x49, 0x65, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x26, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x22, 0x47, 0x0a, 0x0a, 0x54, 0x72, 0x61, 0x63, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12,
	0x39, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x69, 0x65, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e,
	0x54, 0x72, 0x61, 0x63, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x49, 0x65, 0x73, 0x52, 0x0b, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x49, 0x45, 0x73, 0x22, 0xab, 0x02, 0x0a, 0x17, 0x44,
	0x65, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x63, 0x65, 0x49, 0x65,
	0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x58, 0x0a, 0x19, 0x69, 0x64, 0x5f, 0x6d, 0x5f, 0x6e,
	0x67, 0x5f, 0x72, 0x61, 0x6e, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x75, 0x65, 0x78, 0x6e, 0x5f, 0x61,
	0x70, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x78, 0x6e, 0x61, 0x70,
	0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x67, 0x52, 0x41, 0x6e, 0x6e, 0x6f, 0x64, 0x65, 0x55, 0x65, 0x78,
	0x6e, 0x41, 0x70, 0x69, 0x64, 0x48, 0x00, 0x52, 0x17, 0x69, 0x64, 0x2d, 0x4d, 0x2d, 0x4e, 0x47,
	0x2d, 0x52, 0x41, 0x4e, 0x6e, 0x6f, 0x64, 0x65, 0x55, 0x45, 0x58, 0x6e, 0x41, 0x50, 0x49, 0x44,
	0x12, 0x58, 0x0a, 0x19, 0x69, 0x64, 0x5f, 0x73, 0x5f, 0x6e, 0x67, 0x5f, 0x72, 0x61, 0x6e, 0x6e,
	0x6f, 0x64, 0x65, 0x5f, 0x75, 0x65, 0x78, 0x6e, 0x5f, 0x61, 0x70, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x67,
	0x52, 0x41, 0x6e, 0x6e, 0x6f, 0x64, 0x65, 0x55, 0x65, 0x78, 0x6e, 0x41, 0x70, 0x69, 0x64, 0x48,
	0x00, 0x52, 0x17, 0x69, 0x64, 0x2d, 0x53, 0x2d, 0x4e, 0x47, 0x2d, 0x52, 0x41, 0x4e, 0x6e, 0x6f,
	0x64, 0x65, 0x55, 0x45, 0x58, 0x6e, 0x41, 0x50, 0x49, 0x44, 0x12, 0x44, 0x0a, 0x11, 0x69, 0x64,
	0x5f, 0x6e, 0x67, 0x5f, 0x72, 0x61, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e,
	0x4e, 0x67, 0x52, 0x41, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x65, 0x49, 0x64, 0x48, 0x00, 0x52, 0x10,
	0x69, 0x64, 0x2d, 0x4e, 0x47, 0x2d, 0x52, 0x41, 0x4e, 0x54, 0x72, 0x61, 0x63, 0x65, 0x49, 0x44,
	0x42, 0x16, 0x0a, 0x14, 0x64, 0x65, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x74,
	0x72, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x65, 0x73, 0x22, 0xae, 0x01, 0x0a, 0x12, 0x44, 0x65, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x63, 0x65, 0x49, 0x65, 0x73, 0x12,
	0x26, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x78, 0x6e,
	0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x49, 0x65,
	0x49, 0x44, 0x52, 0x03, 0x26, 0x69, 0x64, 0x12, 0x37, 0x0a, 0x0b, 0x63, 0x72, 0x69, 0x74, 0x69,
	0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x78,
	0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x69,
	0x74, 0x79, 0x52, 0x0c, 0x26, 0x63, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79,
	0x12, 0x37, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x20, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x63, 0x65, 0x49, 0x65, 0x73, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x06, 0x26, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x51, 0x0a, 0x0f, 0x44, 0x65, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x63, 0x65, 0x12, 0x3e, 0x0a, 0x0c,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x63, 0x65, 0x49, 0x65, 0x73, 0x52,
	0x0b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x49, 0x45, 0x73, 0x22, 0x44, 0x0a, 0x14,
	0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x45, 0x73, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x22, 0x55, 0x0a, 0x11, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x49, 0x6e, 0x64,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x40, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x5f, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x49,
	0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x45, 0x73, 0x52, 0x0b, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x49, 0x45, 0x73, 0x22, 0x87, 0x06, 0x0a, 0x16, 0x48, 0x61,
	0x6e, 0x64, 0x6f, 0x76, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x45, 0x73, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x55, 0x0a, 0x17, 0x69, 0x64, 0x5f, 0x68, 0x61, 0x6e, 0x64, 0x6f,
	0x76, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e,
	0x48, 0x61, 0x6e, 0x64, 0x6f, 0x76, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x48, 0x00, 0x52, 0x15, 0x69, 0x64, 0x2d, 0x48, 0x61, 0x6e, 0x64, 0x6f, 0x76, 0x65,
	0x72, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3d, 0x0a, 0x11, 0x69,
	0x64, 0x5f, 0x68, 0x61, 0x6e, 0x64, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x63, 0x61, 0x75, 0x73, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x61, 0x75, 0x73, 0x65, 0x48, 0x00, 0x52, 0x10, 0x69, 0x64, 0x2d, 0x48, 0x61, 0x6e,
	0x64, 0x6f, 0x76, 0x65, 0x72, 0x43, 0x61, 0x75, 0x73, 0x65, 0x12, 0x4a, 0x0a, 0x12, 0x69, 0x64,
	0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x63, 0x67, 0x69,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x4e, 0x67, 0x52, 0x41, 0x6e, 0x63, 0x65, 0x6c, 0x6c,
	0x49, 0x44, 0x48, 0x00, 0x52, 0x10, 0x69, 0x64, 0x2d, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43,
	0x65, 0x6c, 0x6c, 0x43, 0x47, 0x49, 0x12, 0x4a, 0x0a, 0x12, 0x69, 0x64, 0x5f, 0x74, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x5f, 0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x63, 0x67, 0x69, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6c, 0x6f,
	0x62, 0x61, 0x6c, 0x4e, 0x67, 0x52, 0x41, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x49, 0x44, 0x48, 0x00,
	0x52, 0x10, 0x69, 0x64, 0x2d, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x43, 0x65, 0x6c, 0x6c, 0x43,
	0x47, 0x49, 0x12, 0x58, 0x0a, 0x1c, 0x69, 0x64, 0x5f, 0x72, 0x65, 0x5f, 0x65, 0x73, 0x74, 0x61,
	0x62, 0x6c, 0x69, 0x73, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x63,
	0x67, 0x69, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x43, 0x65, 0x6c, 0x6c, 0x49, 0x44, 0x48,
	0x00, 0x52, 0x19, 0x69, 0x64, 0x2d, 0x52, 0x65, 0x45, 0x73, 0x74, 0x61, 0x62, 0x6c, 0x69, 0x73,
	0x68, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x65, 0x6c, 0x6c, 0x43, 0x47, 0x49, 0x12, 0x55, 0x0a, 0x17,
	0x69, 0x64, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x63, 0x65, 0x6c, 0x6c, 0x69, 0x6e,
	0x5f, 0x65, 0x75, 0x74, 0x72, 0x61, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x43, 0x65,
	0x6c, 0x6c, 0x69, 0x6e, 0x45, 0x75, 0x74, 0x72, 0x61, 0x6e, 0x48, 0x00, 0x52, 0x15, 0x69, 0x64,
	0x2d, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x43, 0x65, 0x6c, 0x6c, 0x69, 0x6e, 0x45, 0x55, 0x54,
	0x52, 0x41, 0x4e, 0x12, 0x42, 0x0a, 0x14, 0x69, 0x64, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x5f, 0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x63, 0x72, 0x6e, 0x74, 0x69, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0e, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x52, 0x4e, 0x74,
	0x69, 0x48, 0x00, 0x52, 0x12, 0x69, 0x64, 0x2d, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x65,
	0x6c, 0x6c, 0x43, 0x52, 0x4e, 0x54, 0x49, 0x12, 0x57, 0x0a, 0x17, 0x69, 0x64, 0x5f, 0x6d, 0x6f,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e,
	0x76, 0x31, 0x2e, 0x4d, 0x6f, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x16, 0x69, 0x64, 0x2d, 0x4d, 0x6f, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x5a, 0x0a, 0x18, 0x69, 0x64, 0x5f, 0x75, 0x65, 0x72, 0x6c, 0x66, 0x72, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x65, 0x72,
	0x6c, 0x66, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65,
	0x72, 0x48, 0x00, 0x52, 0x17, 0x69, 0x64, 0x2d, 0x55, 0x45, 0x52, 0x4c, 0x46, 0x52, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x42, 0x15, 0x0a, 0x13,
	0x68, 0x61, 0x6e, 0x64, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f,
	0x69, 0x65, 0x73, 0x22, 0xac, 0x01, 0x0a, 0x11, 0x48, 0x61, 0x6e, 0x64, 0x6f, 0x76, 0x65, 0x72,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x45, 0x73, 0x12, 0x26, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x49, 0x65, 0x49, 0x44, 0x52, 0x03, 0x26, 0x69,
	0x64, 0x12, 0x37, 0x0a, 0x0b, 0x63, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x0c, 0x26, 0x63,
	0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x36, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x78, 0x6e, 0x61, 0x70,
	0x2e, 0x76, 0x31, 0x2e, 0x48, 0x61, 0x6e, 0x64, 0x6f, 0x76, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x49, 0x45, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x26, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x22, 0x4f, 0x0a, 0x0e, 0x48, 0x61, 0x6e, 0x64, 0x6f, 0x76, 0x65, 0x72, 0x52, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x12, 0x3d, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x5f, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x78, 0x6e, 0x61,
	0x70, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x61, 0x6e, 0x64, 0x6f, 0x76, 0x65, 0x72, 0x52, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x49, 0x45, 0x73, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x49, 0x45, 0x73, 0x22, 0xd7, 0x04, 0x0a, 0x1d, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x45, 0x73,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x5e, 0x0a, 0x1d, 0x69, 0x64, 0x5f, 0x6e, 0x67, 0x72, 0x61,
	0x6e, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x31, 0x5f, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x78,
	0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x49, 0x44, 0x48, 0x00, 0x52, 0x1d, 0x69, 0x64, 0x2d, 0x4e, 0x47, 0x52, 0x41, 0x4e,
	0x2d, 0x4e, 0x6f, 0x64, 0x65, 0x31, 0x2d, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x2d, 0x49, 0x44, 0x12, 0x5e, 0x0a, 0x1d, 0x69, 0x64, 0x5f, 0x6e, 0x67, 0x72, 0x61,
	0x6e, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x32, 0x5f, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x78,
	0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x49, 0x44, 0x48, 0x00, 0x52, 0x1d, 0x69, 0x64, 0x2d, 0x4e, 0x47, 0x52, 0x41, 0x4e,
	0x2d, 0x4e, 0x6f, 0x64, 0x65, 0x32, 0x2d, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x2d, 0x49, 0x44, 0x12, 0x57, 0x0a, 0x17, 0x69, 0x64, 0x5f, 0x72, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31,
	0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x16, 0x69, 0x64, 0x2d, 0x52, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x5d,
	0x0a, 0x19, 0x69, 0x64, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x72,
	0x61, 0x63, 0x74, 0x65, 0x72, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x69, 0x73, 0x74, 0x69, 0x63,
	0x73, 0x48, 0x00, 0x52, 0x18, 0x69, 0x64, 0x2d, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x68,
	0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x43, 0x0a,
	0x11, 0x69, 0x64, 0x5f, 0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x74, 0x6f, 0x5f, 0x72, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x54, 0x6f, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x48,
	0x00, 0x52, 0x0f, 0x69, 0x64, 0x2d, 0x43, 0x65, 0x6c, 0x6c, 0x54, 0x6f, 0x52, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x12, 0x5a, 0x0a, 0x18, 0x69, 0x64, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69,
	0x6e, 0x67, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x69, 0x63, 0x69, 0x74, 0x79, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x69, 0x63,
	0x69, 0x74, 0x79, 0x48, 0x00, 0x52, 0x17, 0x69, 0x64, 0x2d, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x69, 0x6e, 0x67, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x69, 0x63, 0x69, 0x74, 0x79, 0x42, 0x1d,
	0x0a, 0x1b, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x65, 0x73, 0x22, 0xba, 0x01,
	0x0a, 0x18, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x45, 0x73, 0x12, 0x26, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31,
	0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x49, 0x65, 0x49, 0x44, 0x52, 0x03, 0x26,
	0x69, 0x64, 0x12, 0x37, 0x0a, 0x0b, 0x63, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x69, 0x74,
	0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x0c, 0x26,
	0x63, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x3d, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x78, 0x6e, 0x61,
	0x70, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x45, 0x73, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x06, 0x26, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x5d, 0x0a, 0x15, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x44, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f,
	0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x78, 0x6e, 0x61, 0x70,
	0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x45, 0x73, 0x52, 0x0b, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x49, 0x45, 0x73, 0x22, 0xe2, 0x02, 0x0a, 0x1e, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x49, 0x45, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x5e, 0x0a, 0x1d,
	0x69, 0x64, 0x5f, 0x6e, 0x67, 0x72, 0x61, 0x6e, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x31, 0x5f, 0x6d,
	0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65,
	0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x48, 0x00, 0x52, 0x1d, 0x69,
	0x64, 0x2d, 0x4e, 0x47, 0x52, 0x41, 0x4e, 0x2d, 0x4e, 0x6f, 0x64, 0x65, 0x31, 0x2d, 0x4d, 0x65,
	0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2d, 0x49, 0x44, 0x12, 0x5e, 0x0a, 0x1d,
	0x69, 0x64, 0x5f, 0x6e, 0x67, 0x72, 0x61, 0x6e, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x32, 0x5f, 0x6d,
	0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65,
	0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x48, 0x00, 0x52, 0x1d, 0x69,
	0x64, 0x2d, 0x4e, 0x47, 0x52, 0x41, 0x4e, 0x2d, 0x4e, 0x6f, 0x64, 0x65, 0x32, 0x2d, 0x4d, 0x65,
	0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2d, 0x49, 0x44, 0x12, 0x60, 0x0a, 0x1a,
	0x69, 0x64, 0x5f, 0x63, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x64,
	0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x69, 0x74, 0x69,
	0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63,
	0x73, 0x48, 0x00, 0x52, 0x19, 0x69, 0x64, 0x2d, 0x43, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c,
	0x69, 0x74, 0x79, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x73, 0x42, 0x1e,
	0x0a, 0x1c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x69, 0x65, 0x73, 0x22, 0xbc,
	0x01, 0x0a, 0x19, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x49, 0x45, 0x73, 0x12, 0x26, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e,
	0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x49, 0x65, 0x49, 0x44, 0x52,
	0x03, 0x26, 0x69, 0x64, 0x12, 0x37, 0x0a, 0x0b, 0x63, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c,
	0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x78, 0x6e, 0x61, 0x70,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x52,
	0x0c, 0x26, 0x63, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x3e, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x78,
	0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x49, 0x45, 0x73,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x26, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x5f, 0x0a,
	0x16, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x45, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x5f, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e,
	0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x49, 0x45,
	0x73, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x49, 0x45, 0x73, 0x22, 0x8e,
	0x03, 0x0a, 0x1d, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x49, 0x45, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x5e, 0x0a, 0x1d, 0x69, 0x64, 0x5f, 0x6e, 0x67, 0x72, 0x61, 0x6e, 0x5f, 0x6e, 0x6f, 0x64,
	0x65, 0x31, 0x5f, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76,
	0x31, 0x2e, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x48,
	0x00, 0x52, 0x1d, 0x69, 0x64, 0x2d, 0x4e, 0x47, 0x52, 0x41, 0x4e, 0x2d, 0x4e, 0x6f, 0x64, 0x65,
	0x31, 0x2d, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2d, 0x49, 0x44,
	0x12, 0x5e, 0x0a, 0x1d, 0x69, 0x64, 0x5f, 0x6e, 0x67, 0x72, 0x61, 0x6e, 0x5f, 0x6e, 0x6f, 0x64,
	0x65, 0x32, 0x5f, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76,
	0x31, 0x2e, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x48,
	0x00, 0x52, 0x1d, 0x69, 0x64, 0x2d, 0x4e, 0x47, 0x52, 0x41, 0x4e, 0x2d, 0x4e, 0x6f, 0x64, 0x65,
	0x32, 0x2d, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2d, 0x49, 0x44,
	0x12, 0x2c, 0x0a, 0x08, 0x69, 0x64, 0x5f, 0x63, 0x61, 0x75, 0x73, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x61, 0x75,
	0x73, 0x65, 0x48, 0x00, 0x52, 0x08, 0x69, 0x64, 0x2d, 0x43, 0x61, 0x75, 0x73, 0x65, 0x12, 0x60,
	0x0a, 0x1a, 0x69, 0x64, 0x5f, 0x63, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79,
	0x5f, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x73, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x69,
	0x74, 0x69, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74,
	0x69, 0x63, 0x73, 0x48, 0x00, 0x52, 0x19, 0x69, 0x64, 0x2d, 0x43, 0x72, 0x69, 0x74, 0x69, 0x63,
	0x61, 0x6c, 0x69, 0x74, 0x79, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x73,
	0x42, 0x1d, 0x0a, 0x1b, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x5f, 0x69, 0x65, 0x73, 0x22,
	0xba, 0x01, 0x0a, 0x18, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x49, 0x45, 0x73, 0x12, 0x26, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e,
	0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x49, 0x65, 0x49, 0x44, 0x52,
	0x03, 0x26, 0x69, 0x64, 0x12, 0x37, 0x0a, 0x0b, 0x63, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c,
	0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x78, 0x6e, 0x61, 0x70,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x52,
	0x0c, 0x26, 0x63, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x3d, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x78,
	0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x49, 0x45, 0x73, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x26, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x5d, 0x0a, 0x15,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x46, 0x61,
	0x69, 0x6c, 0x75, 0x72, 0x65, 0x12, 0x44, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x5f, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x78, 0x6e,
	0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x49, 0x45, 0x73, 0x52, 0x0b,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x49, 0x45, 0x73, 0x22, 0xdc, 0x02, 0x0a, 0x1c,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x49, 0x45, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x5e, 0x0a, 0x1d,
	0x69, 0x64, 0x5f, 0x6e, 0x67, 0x72, 0x61, 0x6e, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x31, 0x5f, 0x6d,
	0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65,
	0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x48, 0x00, 0x52, 0x1d, 0x69,
	0x64, 0x2d, 0x4e, 0x47, 0x52, 0x41, 0x4e, 0x2d, 0x4e, 0x6f, 0x64, 0x65, 0x31, 0x2d, 0x4d, 0x65,
	0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2d, 0x49, 0x44, 0x12, 0x5e, 0x0a, 0x1d,
	0x69, 0x64, 0x5f, 0x6e, 0x67, 0x72, 0x61, 0x6e, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x32, 0x5f, 0x6d,
	0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65,
	0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x48, 0x00, 0x52, 0x1d, 0x69,
	0x64, 0x2d, 0x4e, 0x47, 0x52, 0x41, 0x4e, 0x2d, 0x4e, 0x6f, 0x64, 0x65, 0x32, 0x2d, 0x4d, 0x65,
	0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2d, 0x49, 0x44, 0x12, 0x5e, 0x0a, 0x1a,
	0x69, 0x64, 0x5f, 0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x4d,
	0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x48, 0x00, 0x52, 0x18, 0x69, 0x64, 0x2d, 0x43, 0x65, 0x6c, 0x6c, 0x4d, 0x65, 0x61, 0x73, 0x75,
	0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x42, 0x1c, 0x0a, 0x1a,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x65, 0x73, 0x22, 0xb8, 0x01, 0x0a, 0x17, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x49, 0x45, 0x73, 0x12, 0x26, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x49, 0x65, 0x49, 0x44, 0x52, 0x03, 0x26, 0x69, 0x64, 0x12, 0x37,
	0x0a, 0x0b, 0x63, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72,
	0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x0c, 0x26, 0x63, 0x72, 0x69, 0x74,
	0x69, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x3c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31,
	0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x45, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x26,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x5b, 0x0a, 0x14, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x43, 0x0a,
	0x0c, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x49, 0x45, 0x73, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x49,
	0x45, 0x73, 0x22, 0x96, 0x04, 0x0a, 0x1d, 0x4d, 0x6f, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x43,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x45, 0x73, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x52, 0x0a, 0x16, 0x69, 0x64, 0x5f, 0x6e, 0x67, 0x5f, 0x72, 0x61,
	0x6e, 0x6e, 0x6f, 0x64, 0x65, 0x31, 0x5f, 0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x4e, 0x67, 0x52, 0x41, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x49, 0x44,
	0x48, 0x00, 0x52, 0x14, 0x69, 0x64, 0x2d, 0x4e, 0x47, 0x2d, 0x52, 0x41, 0x4e, 0x6e, 0x6f, 0x64,
	0x65, 0x31, 0x43, 0x65, 0x6c, 0x6c, 0x49, 0x44, 0x12, 0x52, 0x0a, 0x16, 0x69, 0x64, 0x5f, 0x6e,
	0x67, 0x5f, 0x72, 0x61, 0x6e, 0x6e, 0x6f, 0x64, 0x65, 0x32, 0x5f, 0x63, 0x65, 0x6c, 0x6c, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x4e, 0x67, 0x52, 0x41, 0x6e, 0x63, 0x65,
	0x6c, 0x6c, 0x49, 0x44, 0x48, 0x00, 0x52, 0x14, 0x69, 0x64, 0x2d, 0x4e, 0x47, 0x2d, 0x52, 0x41,
	0x4e, 0x6e, 0x6f, 0x64, 0x65, 0x32, 0x43, 0x65, 0x6c, 0x6c, 0x49, 0x44, 0x12, 0x76, 0x0a, 0x22,
	0x69, 0x64, 0x5f, 0x6e, 0x67, 0x5f, 0x72, 0x61, 0x6e, 0x6e, 0x6f, 0x64, 0x65, 0x31, 0x5f, 0x6d,
	0x6f, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65,
	0x72, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e,
	0x76, 0x31, 0x2e, 0x4d, 0x6f, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x65, 0x74, 0x65, 0x72, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x48, 0x00, 0x52, 0x20, 0x69, 0x64, 0x2d, 0x4e, 0x47, 0x2d, 0x52, 0x41, 0x4e, 0x6e, 0x6f, 0x64,
	0x65, 0x31, 0x4d, 0x6f, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65,
	0x74, 0x65, 0x72, 0x73, 0x12, 0x87, 0x01, 0x0a, 0x2b, 0x69, 0x64, 0x5f, 0x6e, 0x67, 0x5f, 0x72,
	0x61, 0x6e, 0x6e, 0x6f, 0x64, 0x65, 0x32, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x64,
	0x5f, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65,
	0x74, 0x65, 0x72, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x78, 0x6e, 0x61,
	0x70, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x6f, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x48, 0x00, 0x52, 0x28, 0x69, 0x64, 0x2d, 0x4e, 0x47, 0x2d, 0x52, 0x41, 0x4e, 0x6e,
	0x6f, 0x64, 0x65, 0x32, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x64, 0x4d, 0x6f, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x2c,
	0x0a, 0x08, 0x69, 0x64, 0x5f, 0x63, 0x61, 0x75, 0x73, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0e, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x61, 0x75, 0x73, 0x65,
	0x48, 0x00, 0x52, 0x08, 0x69, 0x64, 0x2d, 0x43, 0x61, 0x75, 0x73, 0x65, 0x42, 0x1d, 0x0a, 0x1b,
	0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x65, 0x73, 0x22, 0xba, 0x01, 0x0a, 0x18,
	0x4d, 0x6f, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x45, 0x73, 0x12, 0x26, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x49, 0x65, 0x49, 0x44, 0x52, 0x03, 0x26, 0x69, 0x64,
	0x12, 0x37, 0x0a, 0x0b, 0x63, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x0c, 0x26, 0x63, 0x72,
	0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x3d, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e,
	0x76, 0x31, 0x2e, 0x4d, 0x6f, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x43, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x45, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x06, 0x26, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x5d, 0x0a, 0x15, 0x4d, 0x6f, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x44, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x69, 0x65,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76,
	0x31, 0x2e, 0x4d, 0x6f, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x45, 0x73, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x49, 0x45, 0x73, 0x22, 0xd0, 0x02, 0x0a, 0x21, 0x4d, 0x6f, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x41, 0x63, 0x6b, 0x6e, 0x6f, 0x77,
	0x6c, 0x65, 0x64, 0x67, 0x65, 0x49, 0x45, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x52, 0x0a,
	0x16, 0x69, 0x64, 0x5f, 0x6e, 0x67, 0x5f, 0x72, 0x61, 0x6e, 0x6e, 0x6f, 0x64, 0x65, 0x31, 0x5f,
	0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x4e, 0x67,
	0x52, 0x41, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x49, 0x44, 0x48, 0x00, 0x52, 0x14, 0x69, 0x64, 0x2d,
	0x4e, 0x47, 0x2d, 0x52, 0x41, 0x4e, 0x6e, 0x6f, 0x64, 0x65, 0x31, 0x43, 0x65, 0x6c, 0x6c, 0x49,
	0x44, 0x12, 0x52, 0x0a, 0x16, 0x69, 0x64, 0x5f, 0x6e, 0x67, 0x5f, 0x72, 0x61, 0x6e, 0x6e, 0x6f,
	0x64, 0x65, 0x32, 0x5f, 0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6c, 0x6f, 0x62,
	0x61, 0x6c, 0x4e, 0x67, 0x52, 0x41, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x49, 0x44, 0x48, 0x00, 0x52,
	0x14, 0x69, 0x64, 0x2d, 0x4e, 0x47, 0x2d, 0x52, 0x41, 0x4e, 0x6e, 0x6f, 0x64, 0x65, 0x32, 0x43,
	0x65, 0x6c, 0x6c, 0x49, 0x44, 0x12, 0x60, 0x0a, 0x1a, 0x69, 0x64, 0x5f, 0x63, 0x72, 0x69, 0x74,
	0x69, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74,
	0x69, 0x63, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x78, 0x6e, 0x61, 0x70,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x44,
	0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x73, 0x48, 0x00, 0x52, 0x19, 0x69, 0x64,
	0x2d, 0x43, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x44, 0x69, 0x61, 0x67,
	0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x73, 0x42, 0x21, 0x0a, 0x1f, 0x6d, 0x6f, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x61, 0x63, 0x6b, 0x6e, 0x6f,
	0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x5f, 0x69, 0x65, 0x73, 0x22, 0xc2, 0x01, 0x0a, 0x1c, 0x4d,
	0x6f, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x41, 0x63, 0x6b,
	0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x49, 0x45, 0x73, 0x12, 0x26, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76,
	0x31, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x49, 0x65, 0x49, 0x44, 0x52, 0x03,
	0x26, 0x69, 0x64, 0x12, 0x37, 0x0a, 0x0b, 0x63, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x69,
	0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x0c,
	0x26, 0x63, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x41, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x78, 0x6e,
	0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x6f, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x43, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x41, 0x63, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x49,
	0x45, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x26, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22,
	0x65, 0x0a, 0x19, 0x4d, 0x6f, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x43, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x41, 0x63, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x12, 0x48, 0x0a, 0x0c,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x25, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x6f, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x41, 0x63, 0x6b, 0x6e, 0x6f,
	0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x49, 0x45, 0x73, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x49, 0x45, 0x73, 0x22, 0x82, 0x04, 0x0a, 0x1d, 0x4d, 0x6f, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65,
	0x49, 0x45, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x52, 0x0a, 0x16, 0x69, 0x64, 0x5f, 0x6e,
	0x67, 0x5f, 0x72, 0x61, 0x6e, 0x6e, 0x6f, 0x64, 0x65, 0x31, 0x5f, 0x63, 0x65, 0x6c, 0x6c, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x4e, 0x67, 0x52, 0x41, 0x6e, 0x63, 0x65,
	0x6c, 0x6c, 0x49, 0x44, 0x48, 0x00, 0x52, 0x14, 0x69, 0x64, 0x2d, 0x4e, 0x47, 0x2d, 0x52, 0x41,
	0x4e, 0x6e, 0x6f, 0x64, 0x65, 0x31, 0x43, 0x65, 0x6c, 0x6c, 0x49, 0x44, 0x12, 0x52, 0x0a, 0x16,
	0x69, 0x64, 0x5f, 0x6e, 0x67, 0x5f, 0x72, 0x61, 0x6e, 0x6e, 0x6f, 0x64, 0x65, 0x32, 0x5f, 0x63,
	0x65, 0x6c, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x78,
	0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x4e, 0x67, 0x52,
	0x41, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x49, 0x44, 0x48, 0x00, 0x52, 0x14, 0x69, 0x64, 0x2d, 0x4e,
	0x47, 0x2d, 0x52, 0x41, 0x4e, 0x6e, 0x6f, 0x64, 0x65, 0x32, 0x43, 0x65, 0x6c, 0x6c, 0x49, 0x44,
	0x12, 0x2c, 0x0a, 0x08, 0x69, 0x64, 0x5f, 0x63, 0x61, 0x75, 0x73, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x61, 0x75,
	0x73, 0x65, 0x48, 0x00, 0x52, 0x08, 0x69, 0x64, 0x2d, 0x43, 0x61, 0x75, 0x73, 0x65, 0x12, 0x89,
	0x01, 0x0a, 0x29, 0x69, 0x64, 0x5f, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x6f, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x4d,
	0x6f, 0x64, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x61, 0x6e, 0x67, 0x65,
	0x48, 0x00, 0x52, 0x26, 0x69, 0x64, 0x2d, 0x4d, 0x6f, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x60, 0x0a, 0x1a, 0x69, 0x64,
	0x5f, 0x63, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x64, 0x69, 0x61,
	0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61,
	0x6c, 0x69, 0x74, 0x79, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x73, 0x48,
	0x00, 0x52, 0x19, 0x69, 0x64, 0x2d, 0x43, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x69, 0x74,
	0x79, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x73, 0x42, 0x1d, 0x0a, 0x1b,
	0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f,
	0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x5f, 0x69, 0x65, 0x73, 0x22, 0xba, 0x01, 0x0a, 0x18,
	0x4d, 0x6f, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x46, 0x61,
	0x69, 0x6c, 0x75, 0x72, 0x65, 0x49, 0x45, 0x73, 0x12, 0x26, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x49, 0x65, 0x49, 0x44, 0x52, 0x03, 0x26, 0x69, 0x64,
	0x12, 0x37, 0x0a, 0x0b, 0x63, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x0c, 0x26, 0x63, 0x72,
	0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x3d, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e,
	0x76, 0x31, 0x2e, 0x4d, 0x6f, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x43, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x49, 0x45, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x06, 0x26, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x5d, 0x0a, 0x15, 0x4d, 0x6f, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72,
	0x65, 0x12, 0x44, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x69, 0x65,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76,
	0x31, 0x2e, 0x4d, 0x6f, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x49, 0x45, 0x73, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x49, 0x45, 0x73, 0x22, 0x4e, 0x0a, 0x1e, 0x41, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x41, 0x6e, 0x64, 0x4d, 0x6f, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x64, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x45, 0x73, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x69, 0x0a, 0x1b, 0x41, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x41, 0x6e, 0x64, 0x4d, 0x6f, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x64, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4a, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x5f, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x78,
	0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x41, 0x6e, 0x64,
	0x4d, 0x6f, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x45, 0x73, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x49,
	0x45, 0x73, 0x2a, 0x4f, 0x0a, 0x1f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x46,
	0x61, 0x73, 0x74, 0x4d, 0x63, 0x67, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x56, 0x69,
	0x61, 0x53, 0x72, 0x62, 0x33, 0x12, 0x2c, 0x0a, 0x28, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54,
	0x45, 0x44, 0x5f, 0x46, 0x41, 0x53, 0x54, 0x5f, 0x4d, 0x43, 0x47, 0x52, 0x45, 0x43, 0x4f, 0x56,
	0x45, 0x52, 0x59, 0x5f, 0x56, 0x49, 0x41, 0x5f, 0x53, 0x52, 0x42, 0x33, 0x5f, 0x54, 0x52, 0x55,
	0x45, 0x10, 0x00, 0x2a, 0x4f, 0x0a, 0x1f, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65,
	0x46, 0x61, 0x73, 0x74, 0x4d, 0x63, 0x67, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x56,
	0x69, 0x61, 0x53, 0x72, 0x62, 0x33, 0x12, 0x2c, 0x0a, 0x28, 0x41, 0x56, 0x41, 0x49, 0x4c, 0x41,
	0x42, 0x4c, 0x45, 0x5f, 0x46, 0x41, 0x53, 0x54, 0x5f, 0x4d, 0x43, 0x47, 0x52, 0x45, 0x43, 0x4f,
	0x56, 0x45, 0x52, 0x59, 0x5f, 0x56, 0x49, 0x41, 0x5f, 0x53, 0x52, 0x42, 0x33, 0x5f, 0x54, 0x52,
	0x55, 0x45, 0x10, 0x00, 0x2a, 0x5e, 0x0a, 0x26, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65,
	0x64, 0x46, 0x61, 0x73, 0x74, 0x4d, 0x63, 0x67, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79,
	0x56, 0x69, 0x61, 0x53, 0x72, 0x62, 0x33, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x12, 0x34,
	0x0a, 0x30, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x45, 0x44, 0x5f, 0x46, 0x41, 0x53, 0x54,
	0x5f, 0x4d, 0x43, 0x47, 0x52, 0x45, 0x43, 0x4f, 0x56, 0x45, 0x52, 0x59, 0x5f, 0x56, 0x49, 0x41,
	0x5f, 0x53, 0x52, 0x42, 0x33, 0x5f, 0x52, 0x45, 0x4c, 0x45, 0x41, 0x53, 0x45, 0x5f, 0x54, 0x52,
	0x55, 0x45, 0x10, 0x00, 0x2a, 0x4b, 0x0a, 0x1d, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x46,
	0x61, 0x73, 0x74, 0x4d, 0x63, 0x67, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x56, 0x69,
	0x61, 0x53, 0x72, 0x62, 0x33, 0x12, 0x2a, 0x0a, 0x26, 0x52, 0x45, 0x4c, 0x45, 0x41, 0x53, 0x45,
	0x5f, 0x46, 0x41, 0x53, 0x54, 0x5f, 0x4d, 0x43, 0x47, 0x52, 0x45, 0x43, 0x4f, 0x56, 0x45, 0x52,
	0x59, 0x5f, 0x56, 0x49, 0x41, 0x5f, 0x53, 0x52, 0x42, 0x33, 0x5f, 0x54, 0x52, 0x55, 0x45, 0x10,
	0x00, 0x2a, 0x6c, 0x0a, 0x1a, 0x53, 0x72, 0x62, 0x54, 0x79, 0x70, 0x65, 0x53, 0x70, 0x6c, 0x69,
	0x74, 0x53, 0x72, 0x62, 0x72, 0x72, 0x63, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x12,
	0x26, 0x0a, 0x22, 0x53, 0x52, 0x42, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x50, 0x4c, 0x49,
	0x54, 0x5f, 0x53, 0x52, 0x42, 0x52, 0x52, 0x43, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x46, 0x45, 0x52,
	0x5f, 0x53, 0x52, 0x42, 0x31, 0x10, 0x00, 0x12, 0x26, 0x0a, 0x22, 0x53, 0x52, 0x42, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x53, 0x50, 0x4c, 0x49, 0x54, 0x5f, 0x53, 0x52, 0x42, 0x52, 0x52, 0x43,
	0x54, 0x52, 0x41, 0x4e, 0x53, 0x46, 0x45, 0x52, 0x5f, 0x53, 0x52, 0x42, 0x32, 0x10, 0x01, 0x42,
	0x51, 0x5a, 0x4f, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6f, 0x6e,
	0x6f, 0x73, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2f, 0x6f, 0x6e, 0x6f, 0x73, 0x2d, 0x65,
	0x32, 0x74, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x78, 0x6e, 0x61, 0x70, 0x2f, 0x76, 0x31, 0x2f, 0x78,
	0x6e, 0x61, 0x70, 0x2d, 0x70, 0x64, 0x75, 0x2d, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73,
	0x3b, 0x78, 0x6e, 0x61, 0x70, 0x70, 0x64, 0x75, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73,
	0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_api_xnap_v1_xnap_pdu_contents_proto_rawDescOnce sync.Once
	file_api_xnap_v1_xnap_pdu_contents_proto_rawDescData = file_api_xnap_v1_xnap_pdu_contents_proto_rawDesc
)

func file_api_xnap_v1_xnap_pdu_contents_proto_rawDescGZIP() []byte {
	file_api_xnap_v1_xnap_pdu_contents_proto_rawDescOnce.Do(func() {
		file_api_xnap_v1_xnap_pdu_contents_proto_rawDescData = protoimpl.X.CompressGZIP(file_api_xnap_v1_xnap_pdu_contents_proto_rawDescData)
	})
	return file_api_xnap_v1_xnap_pdu_contents_proto_rawDescData
}

var file_api_xnap_v1_xnap_pdu_contents_proto_enumTypes = make([]protoimpl.EnumInfo, 5)
var file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes = make([]protoimpl.MessageInfo, 324)
var file_api_xnap_v1_xnap_pdu_contents_proto_goTypes = []interface{}{
	(RequestedFastMcgrecoveryViaSrb3)(0),                                    // 0: xnap.v1.RequestedFastMcgrecoveryViaSrb3
	(AvailableFastMcgrecoveryViaSrb3)(0),                                    // 1: xnap.v1.AvailableFastMcgrecoveryViaSrb3
	(RequestedFastMcgrecoveryViaSrb3Release)(0),                             // 2: xnap.v1.RequestedFastMcgrecoveryViaSrb3Release
	(ReleaseFastMcgrecoveryViaSrb3)(0),                                      // 3: xnap.v1.ReleaseFastMcgrecoveryViaSrb3
	(SrbTypeSplitSrbrrctransfer)(0),                                         // 4: xnap.v1.SrbTypeSplitSrbrrctransfer
	(*HandoverRequestIEsValue)(nil),                                         // 5: xnap.v1.HandoverRequestIEsValue
	(*HandoverRequestIEs)(nil),                                              // 6: xnap.v1.HandoverRequestIEs
	(*HandoverRequest)(nil),                                                 // 7: xnap.v1.HandoverRequest
	(*UecontextInfoHorequestExtIesExtension)(nil),                           // 8: xnap.v1.UecontextInfoHorequestExtIesExtension
	(*UecontextInfoHorequestExtIes)(nil),                                    // 9: xnap.v1.UecontextInfoHorequestExtIes
	(*UecontextInfoHorequest)(nil),                                          // 10: xnap.v1.UecontextInfoHorequest
	(*UecontextRefAtSnHOrequestExtIes)(nil),                                 // 11: xnap.v1.UecontextRefAtSnHOrequestExtIes
	(*UecontextRefAtSnHOrequest)(nil),                                       // 12: xnap.v1.UecontextRefAtSnHOrequest
	(*HandoverRequestAcknowledgeIEsValue)(nil),                              // 13: xnap.v1.HandoverRequestAcknowledgeIEsValue
	(*HandoverRequestAcknowledgeIEs)(nil),                                   // 14: xnap.v1.HandoverRequestAcknowledgeIEs
	(*HandoverRequestAcknowledge)(nil),                                      // 15: xnap.v1.HandoverRequestAcknowledge
	(*HandoverPreparationFailureIEsValue)(nil),                              // 16: xnap.v1.HandoverPreparationFailureIEsValue
	(*HandoverPreparationFailureIEs)(nil),                                   // 17: xnap.v1.HandoverPreparationFailureIEs
	(*HandoverPreparationFailure)(nil),                                      // 18: xnap.v1.HandoverPreparationFailure
	(*SnstatusTransferIEsValue)(nil),                                        // 19: xnap.v1.SnstatusTransferIEsValue
	(*SnstatusTransferIEs)(nil),                                             // 20: xnap.v1.SnstatusTransferIEs
	(*SnstatusTransfer)(nil),                                                // 21: xnap.v1.SnstatusTransfer
	(*UecontextReleaseIEsValue)(nil),                                        // 22: xnap.v1.UecontextReleaseIEsValue
	(*UecontextReleaseIEs)(nil),                                             // 23: xnap.v1.UecontextReleaseIEs
	(*UecontextRelease)(nil),                                                // 24: xnap.v1.UecontextRelease
	(*HandoverCancelIEsValue)(nil),                                          // 25: xnap.v1.HandoverCancelIEsValue
	(*HandoverCancelIEs)(nil),                                               // 26: xnap.v1.HandoverCancelIEs
	(*HandoverCancel)(nil),                                                  // 27: xnap.v1.HandoverCancel
	(*HandoverSuccessIEsValue)(nil),                                         // 28: xnap.v1.HandoverSuccessIEsValue
	(*HandoverSuccessIEs)(nil),                                              // 29: xnap.v1.HandoverSuccessIEs
	(*HandoverSuccess)(nil),                                                 // 30: xnap.v1.HandoverSuccess
	(*ConditionalHandoverCancelIEsValue)(nil),                               // 31: xnap.v1.ConditionalHandoverCancelIEsValue
	(*ConditionalHandoverCancelIEs)(nil),                                    // 32: xnap.v1.ConditionalHandoverCancelIEs
	(*ConditionalHandoverCancel)(nil),                                       // 33: xnap.v1.ConditionalHandoverCancel
	(*EarlyStatusTransferIEsValue)(nil),                                     // 34: xnap.v1.EarlyStatusTransferIEsValue
	(*EarlyStatusTransferIEs)(nil),                                          // 35: xnap.v1.EarlyStatusTransferIEs
	(*EarlyStatusTransfer)(nil),                                             // 36: xnap.v1.EarlyStatusTransfer
	(*ProcedureStageChoiceExtIes)(nil),                                      // 37: xnap.v1.ProcedureStageChoiceExtIes
	(*ProcedureStageChoice)(nil),                                            // 38: xnap.v1.ProcedureStageChoice
	(*FirstDlcountExtIes)(nil),                                              // 39: xnap.v1.FirstDlcountExtIes
	(*FirstDlcount)(nil),                                                    // 40: xnap.v1.FirstDlcount
	(*DldiscardingExtIes)(nil),                                              // 41: xnap.v1.DldiscardingExtIes
	(*Dldiscarding)(nil),                                                    // 42: xnap.v1.Dldiscarding
	(*RanpagingIEsValue)(nil),                                               // 43: xnap.v1.RanpagingIEsValue
	(*RanpagingIEs)(nil),                                                    // 44: xnap.v1.RanpagingIEs
	(*Ranpaging)(nil),                                                       // 45: xnap.v1.Ranpaging
	(*RetrieveUecontextRequestIEsValue)(nil),                                // 46: xnap.v1.RetrieveUecontextRequestIEsValue
	(*RetrieveUecontextRequestIEs)(nil),                                     // 47: xnap.v1.RetrieveUecontextRequestIEs
	(*RetrieveUecontextRequest)(nil),                                        // 48: xnap.v1.RetrieveUecontextRequest
	(*RetrieveUecontextResponseIEsValue)(nil),                               // 49: xnap.v1.RetrieveUecontextResponseIEsValue
	(*RetrieveUecontextResponseIEs)(nil),                                    // 50: xnap.v1.RetrieveUecontextResponseIEs
	(*RetrieveUecontextResponse)(nil),                                       // 51: xnap.v1.RetrieveUecontextResponse
	(*RetrieveUecontextFailureIEsValue)(nil),                                // 52: xnap.v1.RetrieveUecontextFailureIEsValue
	(*RetrieveUecontextFailureIEs)(nil),                                     // 53: xnap.v1.RetrieveUecontextFailureIEs
	(*RetrieveUecontextFailure)(nil),                                        // 54: xnap.v1.RetrieveUecontextFailure
	(*XnUaddressIndicationIEsValue)(nil),                                    // 55: xnap.v1.XnUaddressIndicationIEsValue
	(*XnUaddressIndicationIEs)(nil),                                         // 56: xnap.v1.XnUaddressIndicationIEs
	(*XnUaddressIndication)(nil),                                            // 57: xnap.v1.XnUaddressIndication
	(*SnodeAdditionRequestIEsValue)(nil),                                    // 58: xnap.v1.SnodeAdditionRequestIEsValue
	(*SnodeAdditionRequestIEs)(nil),                                         // 59: xnap.v1.SnodeAdditionRequestIEs
	(*SnodeAdditionRequest)(nil),                                            // 60: xnap.v1.SnodeAdditionRequest
	(*PdusessionToBeAddedAddReq)(nil),                                       // 61: xnap.v1.PdusessionToBeAddedAddReq
	(*PdusessionToBeAddedAddReqItemExtIes)(nil),                             // 62: xnap.v1.PdusessionToBeAddedAddReqItemExtIes
	(*PdusessionToBeAddedAddReqItem)(nil),                                   // 63: xnap.v1.PdusessionToBeAddedAddReqItem
	(*SnodeAdditionRequestAcknowledgeIEsValue)(nil),                         // 64: xnap.v1.SnodeAdditionRequestAcknowledgeIEsValue
	(*SnodeAdditionRequestAcknowledgeIEs)(nil),                              // 65: xnap.v1.SnodeAdditionRequestAcknowledgeIEs
	(*SnodeAdditionRequestAcknowledge)(nil),                                 // 66: xnap.v1.SnodeAdditionRequestAcknowledge
	(*PdusessionAdmittedAddedAddReqAck)(nil),                                // 67: xnap.v1.PdusessionAdmittedAddedAddReqAck
	(*PdusessionAdmittedAddedAddReqAckItemExtIes)(nil),                      // 68: xnap.v1.PdusessionAdmittedAddedAddReqAckItemExtIes
	(*PdusessionAdmittedAddedAddReqAckItem)(nil),                            // 69: xnap.v1.PdusessionAdmittedAddedAddReqAckItem
	(*PdusessionNotAdmittedAddReqAckExtIes)(nil),                            // 70: xnap.v1.PdusessionNotAdmittedAddReqAckExtIes
	(*PdusessionNotAdmittedAddReqAck)(nil),                                  // 71: xnap.v1.PdusessionNotAdmittedAddReqAck
	(*SnodeAdditionRequestRejectIEsValue)(nil),                              // 72: xnap.v1.SnodeAdditionRequestRejectIEsValue
	(*SnodeAdditionRequestRejectIEs)(nil),                                   // 73: xnap.v1.SnodeAdditionRequestRejectIEs
	(*SnodeAdditionRequestReject)(nil),                                      // 74: xnap.v1.SnodeAdditionRequestReject
	(*SnodeReconfigurationCompleteIEsValue)(nil),                            // 75: xnap.v1.SnodeReconfigurationCompleteIEsValue
	(*SnodeReconfigurationCompleteIEs)(nil),                                 // 76: xnap.v1.SnodeReconfigurationCompleteIEs
	(*SnodeReconfigurationComplete)(nil),                                    // 77: xnap.v1.SnodeReconfigurationComplete
	(*ResponseInfoReconfComplExtIes)(nil),                                   // 78: xnap.v1.ResponseInfoReconfComplExtIes
	(*ResponseInfoReconfCompl)(nil),                                         // 79: xnap.v1.ResponseInfoReconfCompl
	(*ResponseTypeReconfCompleteExtIes)(nil),                                // 80: xnap.v1.ResponseTypeReconfCompleteExtIes
	(*ResponseTypeReconfComplete)(nil),                                      // 81: xnap.v1.ResponseTypeReconfComplete
	(*ConfigurationsuccessfullyappliedExtIes)(nil),                          // 82: xnap.v1.ConfigurationsuccessfullyappliedExtIes
	(*Configurationsuccessfullyapplied)(nil),                                // 83: xnap.v1.Configurationsuccessfullyapplied
	(*ConfigurationrejectedbyMNGRAnnodeExtIes)(nil),                         // 84: xnap.v1.ConfigurationrejectedbyMNGRAnnodeExtIes
	(*ConfigurationrejectedbyMNGRAnnode)(nil),                               // 85: xnap.v1.ConfigurationrejectedbyMNGRAnnode
	(*SnodeModificationRequestIEsValue)(nil),                                // 86: xnap.v1.SnodeModificationRequestIEsValue
	(*SnodeModificationRequestIEs)(nil),                                     // 87: xnap.v1.SnodeModificationRequestIEs
	(*SnodeModificationRequest)(nil),                                        // 88: xnap.v1.SnodeModificationRequest
	(*UecontextInfoSNmodRequestExtIes)(nil),                                 // 89: xnap.v1.UecontextInfoSNmodRequestExtIes
	(*UecontextInfoSNmodRequest)(nil),                                       // 90: xnap.v1.UecontextInfoSNmodRequest
	(*PdusessionsToBeAddedSNmodRequestList)(nil),                            // 91: xnap.v1.PdusessionsToBeAddedSNmodRequestList
	(*PdusessionsToBeAddedSNmodRequestItemExtIes)(nil),                      // 92: xnap.v1.PdusessionsToBeAddedSNmodRequestItemExtIes
	(*PdusessionsToBeAddedSNmodRequestItem)(nil),                            // 93: xnap.v1.PdusessionsToBeAddedSNmodRequestItem
	(*PdusessionsToBeModifiedSNmodRequestList)(nil),                         // 94: xnap.v1.PdusessionsToBeModifiedSNmodRequestList
	(*PdusessionsToBeModifiedSNmodRequestItemExtIesExtension)(nil),          // 95: xnap.v1.PdusessionsToBeModifiedSNmodRequestItemExtIesExtension
	(*PdusessionsToBeModifiedSNmodRequestItemExtIes)(nil),                   // 96: xnap.v1.PdusessionsToBeModifiedSNmodRequestItemExtIes
	(*PdusessionsToBeModifiedSNmodRequestItem)(nil),                         // 97: xnap.v1.PdusessionsToBeModifiedSNmodRequestItem
	(*PdusessionsToBeReleasedSNmodRequestListExtIes)(nil),                   // 98: xnap.v1.PdusessionsToBeReleasedSNmodRequestListExtIes
	(*PdusessionsToBeReleasedSNmodRequestList)(nil),                         // 99: xnap.v1.PdusessionsToBeReleasedSNmodRequestList
	(*SnodeModificationRequestAcknowledgeIEsValue)(nil),                     // 100: xnap.v1.SnodeModificationRequestAcknowledgeIEsValue
	(*SnodeModificationRequestAcknowledgeIEs)(nil),                          // 101: xnap.v1.SnodeModificationRequestAcknowledgeIEs
	(*SnodeModificationRequestAcknowledge)(nil),                             // 102: xnap.v1.SnodeModificationRequestAcknowledge
	(*PdusessionAdmittedSNmodResponseExtIes)(nil),                           // 103: xnap.v1.PdusessionAdmittedSNmodResponseExtIes
	(*PdusessionAdmittedSNmodResponse)(nil),                                 // 104: xnap.v1.PdusessionAdmittedSNmodResponse
	(*PdusessionAdmittedToBeAddedSnmodResponse)(nil),                        // 105: xnap.v1.PdusessionAdmittedToBeAddedSnmodResponse
	(*PdusessionAdmittedToBeAddedSnmodResponseItemExtIes)(nil),              // 106: xnap.v1.PdusessionAdmittedToBeAddedSnmodResponseItemExtIes
	(*PdusessionAdmittedToBeAddedSnmodResponseItem)(nil),                    // 107: xnap.v1.PdusessionAdmittedToBeAddedSnmodResponseItem
	(*PdusessionAdmittedToBeModifiedSnmodResponse)(nil),                     // 108: xnap.v1.PdusessionAdmittedToBeModifiedSnmodResponse
	(*PdusessionAdmittedToBeModifiedSnmodResponseItemExtIes)(nil),           // 109: xnap.v1.PdusessionAdmittedToBeModifiedSnmodResponseItemExtIes
	(*PdusessionAdmittedToBeModifiedSnmodResponseItem)(nil),                 // 110: xnap.v1.PdusessionAdmittedToBeModifiedSnmodResponseItem
	(*PdusessionAdmittedToBeReleasedSnmodResponseExtIes)(nil),               // 111: xnap.v1.PdusessionAdmittedToBeReleasedSnmodResponseExtIes
	(*PdusessionAdmittedToBeReleasedSnmodResponse)(nil),                     // 112: xnap.v1.PdusessionAdmittedToBeReleasedSnmodResponse
	(*PdusessionNotAdmittedSNmodResponseExtIes)(nil),                        // 113: xnap.v1.PdusessionNotAdmittedSNmodResponseExtIes
	(*PdusessionNotAdmittedSNmodResponse)(nil),                              // 114: xnap.v1.PdusessionNotAdmittedSNmodResponse
	(*PdusessionDataForwardingSNmodResponseExtIes)(nil),                     // 115: xnap.v1.PdusessionDataForwardingSNmodResponseExtIes
	(*PdusessionDataForwardingSNmodResponse)(nil),                           // 116: xnap.v1.PdusessionDataForwardingSNmodResponse
	(*SnodeModificationRequestRejectIEsValue)(nil),                          // 117: xnap.v1.SnodeModificationRequestRejectIEsValue
	(*SnodeModificationRequestRejectIEs)(nil),                               // 118: xnap.v1.SnodeModificationRequestRejectIEs
	(*SnodeModificationRequestReject)(nil),                                  // 119: xnap.v1.SnodeModificationRequestReject
	(*SnodeModificationRequiredIEsValue)(nil),                               // 120: xnap.v1.SnodeModificationRequiredIEsValue
	(*SnodeModificationRequiredIEs)(nil),                                    // 121: xnap.v1.SnodeModificationRequiredIEs
	(*SnodeModificationRequired)(nil),                                       // 122: xnap.v1.SnodeModificationRequired
	(*PdusessionToBeModifiedSnmodRequired)(nil),                             // 123: xnap.v1.PdusessionToBeModifiedSnmodRequired
	(*PdusessionToBeModifiedSnmodRequiredItemExtIes)(nil),                   // 124: xnap.v1.PdusessionToBeModifiedSnmodRequiredItemExtIes
	(*PdusessionToBeModifiedSnmodRequiredItem)(nil),                         // 125: xnap.v1.PdusessionToBeModifiedSnmodRequiredItem
	(*PdusessionToBeReleasedSnmodRequiredExtIes)(nil),                       // 126: xnap.v1.PdusessionToBeReleasedSnmodRequiredExtIes
	(*PdusessionToBeReleasedSnmodRequired)(nil),                             // 127: xnap.v1.PdusessionToBeReleasedSnmodRequired
	(*SnodeModificationConfirmIEsValue)(nil),                                // 128: xnap.v1.SnodeModificationConfirmIEsValue
	(*SnodeModificationConfirmIEs)(nil),                                     // 129: xnap.v1.SnodeModificationConfirmIEs
	(*SnodeModificationConfirm)(nil),                                        // 130: xnap.v1.SnodeModificationConfirm
	(*PdusessionAdmittedModSnmodConfirm)(nil),                               // 131: xnap.v1.PdusessionAdmittedModSnmodConfirm
	(*PdusessionAdmittedModSnmodConfirmItemExtIes)(nil),                     // 132: xnap.v1.PdusessionAdmittedModSnmodConfirmItemExtIes
	(*PdusessionAdmittedModSnmodConfirmItem)(nil),                           // 133: xnap.v1.PdusessionAdmittedModSnmodConfirmItem
	(*PdusessionAdmittedToBeReleasedSnmodConfirmExtIes)(nil),                // 134: xnap.v1.PdusessionAdmittedToBeReleasedSnmodConfirmExtIes
	(*PdusessionReleasedSnmodConfirm)(nil),                                  // 135: xnap.v1.PdusessionReleasedSnmodConfirm
	(*SnodeModificationRefuseIEsValue)(nil),                                 // 136: xnap.v1.SnodeModificationRefuseIEsValue
	(*SnodeModificationRefuseIEs)(nil),                                      // 137: xnap.v1.SnodeModificationRefuseIEs
	(*SnodeModificationRefuse)(nil),                                         // 138: xnap.v1.SnodeModificationRefuse
	(*SnodeReleaseRequestIEsValue)(nil),                                     // 139: xnap.v1.SnodeReleaseRequestIEsValue
	(*SnodeReleaseRequestIEs)(nil),                                          // 140: xnap.v1.SnodeReleaseRequestIEs
	(*SnodeReleaseRequest)(nil),                                             // 141: xnap.v1.SnodeReleaseRequest
	(*SnodeReleaseRequestAcknowledgeIEsValue)(nil),                          // 142: xnap.v1.SnodeReleaseRequestAcknowledgeIEsValue
	(*SnodeReleaseRequestAcknowledgeIEs)(nil),                               // 143: xnap.v1.SnodeReleaseRequestAcknowledgeIEs
	(*SnodeReleaseRequestAcknowledge)(nil),                                  // 144: xnap.v1.SnodeReleaseRequestAcknowledge
	(*PdusessionToBeReleasedListRelReqAckExtIes)(nil),                       // 145: xnap.v1.PdusessionToBeReleasedListRelReqAckExtIes
	(*PdusessionToBeReleasedListRelReqAck)(nil),                             // 146: xnap.v1.PdusessionToBeReleasedListRelReqAck
	(*SnodeReleaseRejectIEsValue)(nil),                                      // 147: xnap.v1.SnodeReleaseRejectIEsValue
	(*SnodeReleaseRejectIEs)(nil),                                           // 148: xnap.v1.SnodeReleaseRejectIEs
	(*SnodeReleaseReject)(nil),                                              // 149: xnap.v1.SnodeReleaseReject
	(*SnodeReleaseRequiredIEsValue)(nil),                                    // 150: xnap.v1.SnodeReleaseRequiredIEsValue
	(*SnodeReleaseRequiredIEs)(nil),                                         // 151: xnap.v1.SnodeReleaseRequiredIEs
	(*SnodeReleaseRequired)(nil),                                            // 152: xnap.v1.SnodeReleaseRequired
	(*PdusessionToBeReleasedListRelRqdExtIes)(nil),                          // 153: xnap.v1.PdusessionToBeReleasedListRelRqdExtIes
	(*PdusessionToBeReleasedListRelRqd)(nil),                                // 154: xnap.v1.PdusessionToBeReleasedListRelRqd
	(*SnodeReleaseConfirmIEsValue)(nil),                                     // 155: xnap.v1.SnodeReleaseConfirmIEsValue
	(*SnodeReleaseConfirmIEs)(nil),                                          // 156: xnap.v1.SnodeReleaseConfirmIEs
	(*SnodeReleaseConfirm)(nil),                                             // 157: xnap.v1.SnodeReleaseConfirm
	(*PdusessionReleasedListRelConfExtIes)(nil),                             // 158: xnap.v1.PdusessionReleasedListRelConfExtIes
	(*PdusessionReleasedListRelConf)(nil),                                   // 159: xnap.v1.PdusessionReleasedListRelConf
	(*SnodeCounterCheckRequestIEsValue)(nil),                                // 160: xnap.v1.SnodeCounterCheckRequestIEsValue
	(*SnodeCounterCheckRequestIEs)(nil),                                     // 161: xnap.v1.SnodeCounterCheckRequestIEs
	(*SnodeCounterCheckRequest)(nil),                                        // 162: xnap.v1.SnodeCounterCheckRequest
	(*BearersSubjectToCounterCheckList)(nil),                                // 163: xnap.v1.BearersSubjectToCounterCheckList
	(*BearersSubjectToCounterCheckItemExtIes)(nil),                          // 164: xnap.v1.BearersSubjectToCounterCheckItemExtIes
	(*BearersSubjectToCounterCheckItem)(nil),                                // 165: xnap.v1.BearersSubjectToCounterCheckItem
	(*SnodeChangeRequiredIEsValue)(nil),                                     // 166: xnap.v1.SnodeChangeRequiredIEsValue
	(*SnodeChangeRequiredIEs)(nil),                                          // 167: xnap.v1.SnodeChangeRequiredIEs
	(*SnodeChangeRequired)(nil),                                             // 168: xnap.v1.SnodeChangeRequired
	(*PdusessionSNchangeRequiredList)(nil),                                  // 169: xnap.v1.PdusessionSNchangeRequiredList
	(*PdusessionSNchangeRequiredItemExtIes)(nil),                            // 170: xnap.v1.PdusessionSNchangeRequiredItemExtIes
	(*PdusessionSNchangeRequiredItem)(nil),                                  // 171: xnap.v1.PdusessionSNchangeRequiredItem
	(*SnodeChangeConfirmIEsValue)(nil),                                      // 172: xnap.v1.SnodeChangeConfirmIEsValue
	(*SnodeChangeConfirmIEs)(nil),                                           // 173: xnap.v1.SnodeChangeConfirmIEs
	(*SnodeChangeConfirm)(nil),                                              // 174: xnap.v1.SnodeChangeConfirm
	(*PdusessionSNchangeConfirmList)(nil),                                   // 175: xnap.v1.PdusessionSNchangeConfirmList
	(*PdusessionSNchangeConfirmItemExtIes)(nil),                             // 176: xnap.v1.PdusessionSNchangeConfirmItemExtIes
	(*PdusessionSNchangeConfirmItem)(nil),                                   // 177: xnap.v1.PdusessionSNchangeConfirmItem
	(*SnodeChangeRefuseIEsValue)(nil),                                       // 178: xnap.v1.SnodeChangeRefuseIEsValue
	(*SnodeChangeRefuseIEs)(nil),                                            // 179: xnap.v1.SnodeChangeRefuseIEs
	(*SnodeChangeRefuse)(nil),                                               // 180: xnap.v1.SnodeChangeRefuse
	(*RrctransferIEsValue)(nil),                                             // 181: xnap.v1.RrctransferIEsValue
	(*RrctransferIEs)(nil),                                                  // 182: xnap.v1.RrctransferIEs
	(*Rrctransfer)(nil),                                                     // 183: xnap.v1.Rrctransfer
	(*SplitSrbRRctransferExtIes)(nil),                                       // 184: xnap.v1.SplitSrbRRctransferExtIes
	(*SplitSrbRRctransfer)(nil),                                             // 185: xnap.v1.SplitSrbRRctransfer
	(*UereportRrctransferExtIes)(nil),                                       // 186: xnap.v1.UereportRrctransferExtIes
	(*UereportRrctransfer)(nil),                                             // 187: xnap.v1.UereportRrctransfer
	(*FastMcgrecoveryRrctransferExtIes)(nil),                                // 188: xnap.v1.FastMcgrecoveryRrctransferExtIes
	(*FastMcgrecoveryRrctransfer)(nil),                                      // 189: xnap.v1.FastMcgrecoveryRrctransfer
	(*NotificationControlIndicationIEsValue)(nil),                           // 190: xnap.v1.NotificationControlIndicationIEsValue
	(*NotificationControlIndicationIEs)(nil),                                // 191: xnap.v1.NotificationControlIndicationIEs
	(*NotificationControlIndication)(nil),                                   // 192: xnap.v1.NotificationControlIndication
	(*PdusessionResourcesNotifyList)(nil),                                   // 193: xnap.v1.PdusessionResourcesNotifyList
	(*PdusessionResourcesNotifyItemExtIes)(nil),                             // 194: xnap.v1.PdusessionResourcesNotifyItemExtIes
	(*PdusessionResourcesNotifyItem)(nil),                                   // 195: xnap.v1.PdusessionResourcesNotifyItem
	(*ActivityNotificationIEsValue)(nil),                                    // 196: xnap.v1.ActivityNotificationIEsValue
	(*ActivityNotificationIEs)(nil),                                         // 197: xnap.v1.ActivityNotificationIEs
	(*ActivityNotification)(nil),                                            // 198: xnap.v1.ActivityNotification
	(*PdusessionResourcesActivityNotifyList)(nil),                           // 199: xnap.v1.PdusessionResourcesActivityNotifyList
	(*PdusessionResourcesActivityNotifyItemExtIes)(nil),                     // 200: xnap.v1.PdusessionResourcesActivityNotifyItemExtIes
	(*PdusessionResourcesActivityNotifyItem)(nil),                           // 201: xnap.v1.PdusessionResourcesActivityNotifyItem
	(*QoSflowsActivityNotifyList)(nil),                                      // 202: xnap.v1.QoSflowsActivityNotifyList
	(*QoSflowsActivityNotifyItemExtIes)(nil),                                // 203: xnap.v1.QoSflowsActivityNotifyItemExtIes
	(*QoSflowsActivityNotifyItem)(nil),                                      // 204: xnap.v1.QoSflowsActivityNotifyItem
	(*XnSetupRequestIEsValue)(nil),                                          // 205: xnap.v1.XnSetupRequestIEsValue
	(*XnSetupRequestIEs)(nil),                                               // 206: xnap.v1.XnSetupRequestIEs
	(*XnSetupRequest)(nil),                                                  // 207: xnap.v1.XnSetupRequest
	(*XnSetupResponseIEsValue)(nil),                                         // 208: xnap.v1.XnSetupResponseIEsValue
	(*XnSetupResponseIEs)(nil),                                              // 209: xnap.v1.XnSetupResponseIEs
	(*XnSetupResponse)(nil),                                                 // 210: xnap.v1.XnSetupResponse
	(*XnSetupFailureIEsValue)(nil),                                          // 211: xnap.v1.XnSetupFailureIEsValue
	(*XnSetupFailureIEs)(nil),                                               // 212: xnap.v1.XnSetupFailureIEs
	(*XnSetupFailure)(nil),                                                  // 213: xnap.v1.XnSetupFailure
	(*NgrannodeConfigurationUpdateIEsValue)(nil),                            // 214: xnap.v1.NgrannodeConfigurationUpdateIEsValue
	(*NgrannodeConfigurationUpdateIEs)(nil),                                 // 215: xnap.v1.NgrannodeConfigurationUpdateIEs
	(*NgrannodeConfigurationUpdate)(nil),                                    // 216: xnap.v1.NgrannodeConfigurationUpdate
	(*ConfigurationUpdategNbValue)(nil),                                     // 217: xnap.v1.ConfigurationUpdategNbValue
	(*ConfigurationUpdategNb)(nil),                                          // 218: xnap.v1.ConfigurationUpdategNb
	(*ConfigurationUpdatengeNbValue)(nil),                                   // 219: xnap.v1.ConfigurationUpdatengeNbValue
	(*ConfigurationUpdatengeNb)(nil),                                        // 220: xnap.v1.ConfigurationUpdatengeNb
	(*ServedCellsToUpdateInitiatingNodeChoiceExtIes)(nil),                   // 221: xnap.v1.ServedCellsToUpdateInitiatingNodeChoiceExtIes
	(*ConfigurationUpdateInitiatingNodeChoice)(nil),                         // 222: xnap.v1.ConfigurationUpdateInitiatingNodeChoice
	(*NgrannodeConfigurationUpdateAcknowledgeIEsValue)(nil),                 // 223: xnap.v1.NgrannodeConfigurationUpdateAcknowledgeIEsValue
	(*NgrannodeConfigurationUpdateAcknowledgeIEs)(nil),                      // 224: xnap.v1.NgrannodeConfigurationUpdateAcknowledgeIEs
	(*NgrannodeConfigurationUpdateAcknowledge)(nil),                         // 225: xnap.v1.NgrannodeConfigurationUpdateAcknowledge
	(*RespondingNodeTypeConfigUpdateAckExtIes)(nil),                         // 226: xnap.v1.RespondingNodeTypeConfigUpdateAckExtIes
	(*RespondingNodeTypeConfigUpdateAck)(nil),                               // 227: xnap.v1.RespondingNodeTypeConfigUpdateAck
	(*RespondingNodeTypeConfigUpdateAckngeNbExtIesExtension)(nil),           // 228: xnap.v1.RespondingNodeTypeConfigUpdateAckngeNbExtIesExtension
	(*RespondingNodeTypeConfigUpdateAckngeNbExtIes)(nil),                    // 229: xnap.v1.RespondingNodeTypeConfigUpdateAckngeNbExtIes
	(*RespondingNodeTypeConfigUpdateAckngeNb)(nil),                          // 230: xnap.v1.RespondingNodeTypeConfigUpdateAckngeNb
	(*RespondingNodeTypeConfigUpdateAckgNbExtIesExtension)(nil),             // 231: xnap.v1.RespondingNodeTypeConfigUpdateAckgNbExtIesExtension
	(*RespondingNodeTypeConfigUpdateAckgNbExtIes)(nil),                      // 232: xnap.v1.RespondingNodeTypeConfigUpdateAckgNbExtIes
	(*RespondingNodeTypeConfigUpdateAckgNb)(nil),                            // 233: xnap.v1.RespondingNodeTypeConfigUpdateAckgNb
	(*NgrannodeConfigurationUpdateFailureIEsValue)(nil),                     // 234: xnap.v1.NgrannodeConfigurationUpdateFailureIEsValue
	(*NgrannodeConfigurationUpdateFailureIEs)(nil),                          // 235: xnap.v1.NgrannodeConfigurationUpdateFailureIEs
	(*NgrannodeConfigurationUpdateFailure)(nil),                             // 236: xnap.v1.NgrannodeConfigurationUpdateFailure
	(*EUTraNRCellResourceCoordinationRequestIEsValue)(nil),                  // 237: xnap.v1.EUTraNRCellResourceCoordinationRequestIEsValue
	(*EUTraNRCellResourceCoordinationRequestIEs)(nil),                       // 238: xnap.v1.EUTraNRCellResourceCoordinationRequestIEs
	(*EUTraNRCellResourceCoordinationRequest)(nil),                          // 239: xnap.v1.EUTraNRCellResourceCoordinationRequest
	(*InitiatingNodeTypeResourceCoordRequestExtIes)(nil),                    // 240: xnap.v1.InitiatingNodeTypeResourceCoordRequestExtIes
	(*InitiatingNodeTypeResourceCoordRequest)(nil),                          // 241: xnap.v1.InitiatingNodeTypeResourceCoordRequest
	(*ResourceCoordRequestngeNbinitiatedExtIes)(nil),                        // 242: xnap.v1.ResourceCoordRequestngeNbinitiatedExtIes
	(*ResourceCoordRequestngeNbinitiated)(nil),                              // 243: xnap.v1.ResourceCoordRequestngeNbinitiated
	(*ResourceCoordRequestgNbinitiatedExtIes)(nil),                          // 244: xnap.v1.ResourceCoordRequestgNbinitiatedExtIes
	(*ResourceCoordRequestgNbinitiated)(nil),                                // 245: xnap.v1.ResourceCoordRequestgNbinitiated
	(*EUTraNRCellResourceCoordinationResponseIEsValue)(nil),                 // 246: xnap.v1.EUTraNRCellResourceCoordinationResponseIEsValue
	(*EUTraNRCellResourceCoordinationResponseIEs)(nil),                      // 247: xnap.v1.EUTraNRCellResourceCoordinationResponseIEs
	(*EUTraNRCellResourceCoordinationResponse)(nil),                         // 248: xnap.v1.EUTraNRCellResourceCoordinationResponse
	(*RespondingNodeTypeResourceCoordResponseExtIes)(nil),                   // 249: xnap.v1.RespondingNodeTypeResourceCoordResponseExtIes
	(*RespondingNodeTypeResourceCoordResponse)(nil),                         // 250: xnap.v1.RespondingNodeTypeResourceCoordResponse
	(*ResourceCoordResponsengeNbinitiatedExtIes)(nil),                       // 251: xnap.v1.ResourceCoordResponsengeNbinitiatedExtIes
	(*ResourceCoordResponsengeNbinitiated)(nil),                             // 252: xnap.v1.ResourceCoordResponsengeNbinitiated
	(*ResourceCoordResponsegNbinitiatedExtIes)(nil),                         // 253: xnap.v1.ResourceCoordResponsegNbinitiatedExtIes
	(*ResourceCoordResponsegNbinitiated)(nil),                               // 254: xnap.v1.ResourceCoordResponsegNbinitiated
	(*SecondaryRatdataUsageReportIEsValue)(nil),                             // 255: xnap.v1.SecondaryRatdataUsageReportIEsValue
	(*SecondaryRatdataUsageReportIEs)(nil),                                  // 256: xnap.v1.SecondaryRatdataUsageReportIEs
	(*SecondaryRatdataUsageReport)(nil),                                     // 257: xnap.v1.SecondaryRatdataUsageReport
	(*XnRemovalRequestIEsValue)(nil),                                        // 258: xnap.v1.XnRemovalRequestIEsValue
	(*XnRemovalRequestIEs)(nil),                                             // 259: xnap.v1.XnRemovalRequestIEs
	(*XnRemovalRequest)(nil),                                                // 260: xnap.v1.XnRemovalRequest
	(*XnRemovalResponseIEsValue)(nil),                                       // 261: xnap.v1.XnRemovalResponseIEsValue
	(*XnRemovalResponseIEs)(nil),                                            // 262: xnap.v1.XnRemovalResponseIEs
	(*XnRemovalResponse)(nil),                                               // 263: xnap.v1.XnRemovalResponse
	(*XnRemovalFailureIEsValue)(nil),                                        // 264: xnap.v1.XnRemovalFailureIEsValue
	(*XnRemovalFailureIEs)(nil),                                             // 265: xnap.v1.XnRemovalFailureIEs
	(*XnRemovalFailure)(nil),                                                // 266: xnap.v1.XnRemovalFailure
	(*CellActivationRequestIEsValue)(nil),                                   // 267: xnap.v1.CellActivationRequestIEsValue
	(*CellActivationRequestIEs)(nil),                                        // 268: xnap.v1.CellActivationRequestIEs
	(*CellActivationRequest)(nil),                                           // 269: xnap.v1.CellActivationRequest
	(*NrcellsServedCellsToActivate)(nil),                                    // 270: xnap.v1.NrcellsServedCellsToActivate
	(*EutracellsServedCellsToActivate)(nil),                                 // 271: xnap.v1.EutracellsServedCellsToActivate
	(*ServedCellsToActivateExtIes)(nil),                                     // 272: xnap.v1.ServedCellsToActivateExtIes
	(*ServedCellsToActivate)(nil),                                           // 273: xnap.v1.ServedCellsToActivate
	(*CellActivationResponseIEsValue)(nil),                                  // 274: xnap.v1.CellActivationResponseIEsValue
	(*CellActivationResponseIEs)(nil),                                       // 275: xnap.v1.CellActivationResponseIEs
	(*CellActivationResponse)(nil),                                          // 276: xnap.v1.CellActivationResponse
	(*NrcellsActivatedServedCells)(nil),                                     // 277: xnap.v1.NrcellsActivatedServedCells
	(*EutracellsActivatedServedCells)(nil),                                  // 278: xnap.v1.EutracellsActivatedServedCells
	(*ActivatedServedCellsExtIes)(nil),                                      // 279: xnap.v1.ActivatedServedCellsExtIes
	(*ActivatedServedCells)(nil),                                            // 280: xnap.v1.ActivatedServedCells
	(*CellActivationFailureIEsValue)(nil),                                   // 281: xnap.v1.CellActivationFailureIEsValue
	(*CellActivationFailureIEs)(nil),                                        // 282: xnap.v1.CellActivationFailureIEs
	(*CellActivationFailure)(nil),                                           // 283: xnap.v1.CellActivationFailure
	(*ResetRequestIEsValue)(nil),                                            // 284: xnap.v1.ResetRequestIEsValue
	(*ResetRequestIEs)(nil),                                                 // 285: xnap.v1.ResetRequestIEs
	(*ResetRequest)(nil),                                                    // 286: xnap.v1.ResetRequest
	(*ResetResponseIEsValue)(nil),                                           // 287: xnap.v1.ResetResponseIEsValue
	(*ResetResponseIEs)(nil),                                                // 288: xnap.v1.ResetResponseIEs
	(*ResetResponse)(nil),                                                   // 289: xnap.v1.ResetResponse
	(*ErrorIndicationIEsValue)(nil),                                         // 290: xnap.v1.ErrorIndicationIEsValue
	(*ErrorIndicationIEs)(nil),                                              // 291: xnap.v1.ErrorIndicationIEs
	(*ErrorIndication)(nil),                                                 // 292: xnap.v1.ErrorIndication
	(*PrivateMessageIEs)(nil),                                               // 293: xnap.v1.PrivateMessageIEs
	(*PrivateMessage)(nil),                                                  // 294: xnap.v1.PrivateMessage
	(*TraceStartIesValue)(nil),                                              // 295: xnap.v1.TraceStartIesValue
	(*TraceStartIes)(nil),                                                   // 296: xnap.v1.TraceStartIes
	(*TraceStart)(nil),                                                      // 297: xnap.v1.TraceStart
	(*DeactivateTraceIesValue)(nil),                                         // 298: xnap.v1.DeactivateTraceIesValue
	(*DeactivateTraceIes)(nil),                                              // 299: xnap.v1.DeactivateTraceIes
	(*DeactivateTrace)(nil),                                                 // 300: xnap.v1.DeactivateTrace
	(*FailureIndicationIEs)(nil),                                            // 301: xnap.v1.FailureIndicationIEs
	(*FailureIndication)(nil),                                               // 302: xnap.v1.FailureIndication
	(*HandoverReportIEsValue)(nil),                                          // 303: xnap.v1.HandoverReportIEsValue
	(*HandoverReportIEs)(nil),                                               // 304: xnap.v1.HandoverReportIEs
	(*HandoverReport)(nil),                                                  // 305: xnap.v1.HandoverReport
	(*ResourceStatusRequestIEsValue)(nil),                                   // 306: xnap.v1.ResourceStatusRequestIEsValue
	(*ResourceStatusRequestIEs)(nil),                                        // 307: xnap.v1.ResourceStatusRequestIEs
	(*ResourceStatusRequest)(nil),                                           // 308: xnap.v1.ResourceStatusRequest
	(*ResourceStatusResponseIEsValue)(nil),                                  // 309: xnap.v1.ResourceStatusResponseIEsValue
	(*ResourceStatusResponseIEs)(nil),                                       // 310: xnap.v1.ResourceStatusResponseIEs
	(*ResourceStatusResponse)(nil),                                          // 311: xnap.v1.ResourceStatusResponse
	(*ResourceStatusFailureIEsValue)(nil),                                   // 312: xnap.v1.ResourceStatusFailureIEsValue
	(*ResourceStatusFailureIEs)(nil),                                        // 313: xnap.v1.ResourceStatusFailureIEs
	(*ResourceStatusFailure)(nil),                                           // 314: xnap.v1.ResourceStatusFailure
	(*ResourceStatusUpdateIEsValue)(nil),                                    // 315: xnap.v1.ResourceStatusUpdateIEsValue
	(*ResourceStatusUpdateIEs)(nil),                                         // 316: xnap.v1.ResourceStatusUpdateIEs
	(*ResourceStatusUpdate)(nil),                                            // 317: xnap.v1.ResourceStatusUpdate
	(*MobilityChangeRequestIEsValue)(nil),                                   // 318: xnap.v1.MobilityChangeRequestIEsValue
	(*MobilityChangeRequestIEs)(nil),                                        // 319: xnap.v1.MobilityChangeRequestIEs
	(*MobilityChangeRequest)(nil),                                           // 320: xnap.v1.MobilityChangeRequest
	(*MobilityChangeAcknowledgeIEsValue)(nil),                               // 321: xnap.v1.MobilityChangeAcknowledgeIEsValue
	(*MobilityChangeAcknowledgeIEs)(nil),                                    // 322: xnap.v1.MobilityChangeAcknowledgeIEs
	(*MobilityChangeAcknowledge)(nil),                                       // 323: xnap.v1.MobilityChangeAcknowledge
	(*MobilityChangeFailureIEsValue)(nil),                                   // 324: xnap.v1.MobilityChangeFailureIEsValue
	(*MobilityChangeFailureIEs)(nil),                                        // 325: xnap.v1.MobilityChangeFailureIEs
	(*MobilityChangeFailure)(nil),                                           // 326: xnap.v1.MobilityChangeFailure
	(*AccessAndMobilityIndicationIEs)(nil),                                  // 327: xnap.v1.AccessAndMobilityIndicationIEs
	(*AccessAndMobilityIndication)(nil),                                     // 328: xnap.v1.AccessAndMobilityIndication
	(*xnap_ies.NgRAnnodeUexnApid)(nil),                                      // 329: xnap.v1.NgRAnnodeUexnApid
	(*xnap_ies.Cause)(nil),                                                  // 330: xnap.v1.Cause
	(*xnap_ies.TargetCGi)(nil),                                              // 331: xnap.v1.TargetCGi
	(*xnap_ies.Guami)(nil),                                                  // 332: xnap.v1.Guami
	(*xnap_ies.TraceActivation)(nil),                                        // 333: xnap.v1.TraceActivation
	(*xnap_ies.MaskedImeisv)(nil),                                           // 334: xnap.v1.MaskedImeisv
	(*xnap_ies.UehistoryInformation)(nil),                                   // 335: xnap.v1.UehistoryInformation
	(*xnap_ies.ChoinformationReq)(nil),                                      // 336: xnap.v1.ChoinformationReq
	(*xnap_ies.Nrv2XservicesAuthorized)(nil),                                // 337: xnap.v1.Nrv2XservicesAuthorized
	(*xnap_ies.Ltev2XservicesAuthorized)(nil),                               // 338: xnap.v1.Ltev2XservicesAuthorized
	(*xnap_ies.Pc5QoSparameters)(nil),                                       // 339: xnap.v1.Pc5QoSparameters
	(*xnap_ies.MobilityInformation)(nil),                                    // 340: xnap.v1.MobilityInformation
	(*xnap_ies.UehistoryInformationFromTheUe)(nil),                          // 341: xnap.v1.UehistoryInformationFromTheUe
	(xnap_ies.IabnodeIndication)(0),                                         // 342: xnap.v1.IabnodeIndication
	(*xnap_commondatatypes.ProtocolIeID)(nil),                               // 343: xnap.v1.ProtocolIeID
	(xnap_commondatatypes.Criticality)(0),                                   // 344: xnap.v1.Criticality
	(*xnap_ies.FiveGcmobilityRestrictionListContainer)(nil),                 // 345: xnap.v1.FiveGcmobilityRestrictionListContainer
	(*xnap_ies.NruesidelinkAggregateMaximumBitRate)(nil),                    // 346: xnap.v1.NruesidelinkAggregateMaximumBitRate
	(*xnap_ies.LteuesidelinkAggregateMaximumBitRate)(nil),                   // 347: xnap.v1.LteuesidelinkAggregateMaximumBitRate
	(*xnap_ies.Mdtplmnlist)(nil),                                            // 348: xnap.v1.Mdtplmnlist
	(*xnap_ies.UeradioCapabilityId)(nil),                                    // 349: xnap.v1.UeradioCapabilityId
	(*xnap_ies.AmfUENGapID)(nil),                                            // 350: xnap.v1.AmfUENGapID
	(*xnap_ies.CptransportLayerInformation)(nil),                            // 351: xnap.v1.CptransportLayerInformation
	(*xnap_ies.UesecurityCapabilities)(nil),                                 // 352: xnap.v1.UesecurityCapabilities
	(*xnap_ies.AsSecurityInformation)(nil),                                  // 353: xnap.v1.AsSecurityInformation
	(*xnap_ies.RfspIndex)(nil),                                              // 354: xnap.v1.RfspIndex
	(*xnap_ies.UeaggregateMaximumBitRate)(nil),                              // 355: xnap.v1.UeaggregateMaximumBitRate
	(*xnap_ies.PdusessionResourcesToBeSetupList)(nil),                       // 356: xnap.v1.PdusessionResourcesToBeSetupList
	(*xnap_ies.LocationReportingInformation)(nil),                           // 357: xnap.v1.LocationReportingInformation
	(*xnap_ies.MobilityRestrictionList)(nil),                                // 358: xnap.v1.MobilityRestrictionList
	(*emptypb.Empty)(nil),                                                   // 359: google.protobuf.Empty
	(*xnap_ies.GlobalNgRAnnodeID)(nil),                                      // 360: xnap.v1.GlobalNgRAnnodeID
	(*xnap_ies.PdusessionResourcesAdmittedList)(nil),                        // 361: xnap.v1.PdusessionResourcesAdmittedList
	(*xnap_ies.PdusessionResourcesNotAdmittedList)(nil),                     // 362: xnap.v1.PdusessionResourcesNotAdmittedList
	(xnap_ies.UecontextKeptIndicator)(0),                                    // 363: xnap.v1.UecontextKeptIndicator
	(*xnap_ies.CriticalityDiagnostics)(nil),                                 // 364: xnap.v1.CriticalityDiagnostics
	(*xnap_ies.DrbList)(nil),                                                // 365: xnap.v1.DrbList
	(*xnap_ies.DapsresponseInfoList)(nil),                                   // 366: xnap.v1.DapsresponseInfoList
	(*xnap_ies.ChoinformationAck)(nil),                                      // 367: xnap.v1.ChoinformationAck
	(*xnap_ies.DrbsSubjectToStatusTransferList)(nil),                        // 368: xnap.v1.DrbsSubjectToStatusTransferList
	(*xnap_ies.TargetCellList)(nil),                                         // 369: xnap.v1.TargetCellList
	(*xnap_ies.DrbsSubjectToEarlyStatusTransferList)(nil),                   // 370: xnap.v1.DrbsSubjectToEarlyStatusTransferList
	(*xnap_ies.DrbsSubjectToDldiscardingList)(nil),                          // 371: xnap.v1.DrbsSubjectToDldiscardingList
	(*xnap_ies.UeidentityIndexValue)(nil),                                   // 372: xnap.v1.UeidentityIndexValue
	(*xnap_ies.UeranpagingIdentity)(nil),                                    // 373: xnap.v1.UeranpagingIdentity
	(xnap_ies.PagingDrx)(0),                                                 // 374: xnap.v1.PagingDrx
	(*xnap_ies.RanpagingArea)(nil),                                          // 375: xnap.v1.RanpagingArea
	(xnap_ies.PagingPriority)(0),                                            // 376: xnap.v1.PagingPriority
	(*xnap_ies.AssistanceDataForRanpaging)(nil),                             // 377: xnap.v1.AssistanceDataForRanpaging
	(*xnap_ies.UeradioCapabilityForPaging)(nil),                             // 378: xnap.v1.UeradioCapabilityForPaging
	(*xnap_ies.ExtendedUeidentityIndexValue)(nil),                           // 379: xnap.v1.ExtendedUeidentityIndexValue
	(*xnap_ies.PagingeDrxinformation)(nil),                                  // 380: xnap.v1.PagingeDrxinformation
	(xnap_ies.UespecificDrx)(0),                                             // 381: xnap.v1.UespecificDrx
	(*xnap_ies.UecontextId)(nil),                                            // 382: xnap.v1.UecontextId
	(*xnap_ies.MacI)(nil),                                                   // 383: xnap.v1.MacI
	(*xnap_ies.NgRAnCellIdentity)(nil),                                      // 384: xnap.v1.NgRAnCellIdentity
	(xnap_ies.RrcresumeCause)(0),                                            // 385: xnap.v1.RrcresumeCause
	(*xnap_ies.UecontextInfoRetrUectxtResp)(nil),                            // 386: xnap.v1.UecontextInfoRetrUectxtResp
	(*xnap_ies.XnUaddressInfoperPdusessionList)(nil),                        // 387: xnap.v1.XnUaddressInfoperPdusessionList
	(xnap_ies.ChoMRdcIndicator)(0),                                          // 388: xnap.v1.ChoMRdcIndicator
	(xnap_ies.ChoMRdcEarlyDataForwarding)(0),                                // 389: xnap.v1.ChoMRdcEarlyDataForwarding
	(*xnap_ies.SNGRAnnodeSecurityKey)(nil),                                  // 390: xnap.v1.SNGRAnnodeSecurityKey
	(*xnap_ies.PlmnIdentity)(nil),                                           // 391: xnap.v1.PlmnIdentity
	(*xnap_ies.ExpectedUebehaviour)(nil),                                    // 392: xnap.v1.ExpectedUebehaviour
	(xnap_ies.SplitSrbsTypes)(0),                                            // 393: xnap.v1.SplitSrbsTypes
	(*xnap_ies.GlobalNgRAncellID)(nil),                                      // 394: xnap.v1.GlobalNgRAncellID
	(xnap_ies.DesiredActNotificationLevel)(0),                               // 395: xnap.v1.DesiredActNotificationLevel
	(*xnap_ies.BitRate)(nil),                                                // 396: xnap.v1.BitRate
	(xnap_ies.LocationInformationSnreporting)(0),                            // 397: xnap.v1.LocationInformationSnreporting
	(*xnap_ies.MrDCResourceCoordinationInfo)(nil),                           // 398: xnap.v1.MrDCResourceCoordinationInfo
	(*xnap_ies.NeDCTDmPattern)(nil),                                         // 399: xnap.v1.NeDCTDmPattern
	(xnap_ies.SNGRAnnodeAdditionTriggerInd)(0),                              // 400: xnap.v1.SNGRAnnodeAdditionTriggerInd
	(*xnap_ies.PdusessionID)(nil),                                           // 401: xnap.v1.PdusessionID
	(*xnap_ies.SNSsai)(nil),                                                 // 402: xnap.v1.SNSsai
	(*xnap_ies.PdusessionAggregateMaximumBitRate)(nil),                      // 403: xnap.v1.PdusessionAggregateMaximumBitRate
	(*xnap_ies.PdusessionResourceSetupInfoSNterminated)(nil),                // 404: xnap.v1.PdusessionResourceSetupInfoSNterminated
	(*xnap_ies.PdusessionResourceSetupInfoMNterminated)(nil),                // 405: xnap.v1.PdusessionResourceSetupInfoMNterminated
	(xnap_ies.RrcconfigIndication)(0),                                       // 406: xnap.v1.RrcconfigIndication
	(xnap_ies.DirectForwardingPathAvailability)(0),                          // 407: xnap.v1.DirectForwardingPathAvailability
	(*xnap_ies.PdusessionResourceSetupResponseInfoSNterminated)(nil),        // 408: xnap.v1.PdusessionResourceSetupResponseInfoSNterminated
	(*xnap_ies.PdusessionResourceSetupResponseInfoMNterminated)(nil),        // 409: xnap.v1.PdusessionResourceSetupResponseInfoMNterminated
	(*xnap_ies.PdcpchangeIndication)(nil),                                   // 410: xnap.v1.PdcpchangeIndication
	(xnap_ies.ScgconfigurationQuery)(0),                                     // 411: xnap.v1.ScgconfigurationQuery
	(xnap_ies.Sntriggered)(0),                                               // 412: xnap.v1.Sntriggered
	(xnap_ies.LowerLayerPresenceStatusChange)(0),                            // 413: xnap.v1.LowerLayerPresenceStatusChange
	(*xnap_ies.ExpectedUeactivityBehaviour)(nil),                            // 414: xnap.v1.ExpectedUeactivityBehaviour
	(*xnap_ies.PdusessionResourceModificationInfoSNterminated)(nil),         // 415: xnap.v1.PdusessionResourceModificationInfoSNterminated
	(*xnap_ies.PdusessionResourceModificationInfoMNterminated)(nil),         // 416: xnap.v1.PdusessionResourceModificationInfoMNterminated
	(*xnap_ies.PdusessionListwithCause)(nil),                                // 417: xnap.v1.PdusessionListwithCause
	(*xnap_ies.PdusessionResourceModificationResponseInfoSNterminated)(nil), // 418: xnap.v1.PdusessionResourceModificationResponseInfoSNterminated
	(*xnap_ies.PdusessionResourceModificationResponseInfoMNterminated)(nil), // 419: xnap.v1.PdusessionResourceModificationResponseInfoMNterminated
	(*xnap_ies.PdusessionListwithDataForwardingRequest)(nil),                // 420: xnap.v1.PdusessionListwithDataForwardingRequest
	(*xnap_ies.PdusessionList)(nil),                                         // 421: xnap.v1.PdusessionList
	(*xnap_ies.DrbNumber)(nil),                                              // 422: xnap.v1.DrbNumber
	(xnap_ies.Scgindicator)(0),                                              // 423: xnap.v1.Scgindicator
	(*xnap_ies.PdusessionResourceModRqdInfoSNterminated)(nil),               // 424: xnap.v1.PdusessionResourceModRqdInfoSNterminated
	(*xnap_ies.PdusessionResourceModRqdInfoMNterminated)(nil),               // 425: xnap.v1.PdusessionResourceModRqdInfoMNterminated
	(*xnap_ies.PdusessionResourceModConfirmInfoSNterminated)(nil),           // 426: xnap.v1.PdusessionResourceModConfirmInfoSNterminated
	(*xnap_ies.PdusessionResourceModConfirmInfoMNterminated)(nil),           // 427: xnap.v1.PdusessionResourceModConfirmInfoMNterminated
	(*xnap_ies.PdusessionListwithDataForwardingFromTarget)(nil),             // 428: xnap.v1.PdusessionListwithDataForwardingFromTarget
	(*xnap_ies.DrbID)(nil),                                                  // 429: xnap.v1.DrbID
	(*xnap_ies.PdusessionResourceChangeRequiredInfoSNterminated)(nil),       // 430: xnap.v1.PdusessionResourceChangeRequiredInfoSNterminated
	(*xnap_ies.PdusessionResourceChangeRequiredInfoMNterminated)(nil),       // 431: xnap.v1.PdusessionResourceChangeRequiredInfoMNterminated
	(*xnap_ies.PdusessionResourceChangeConfirmInfoSNterminated)(nil),        // 432: xnap.v1.PdusessionResourceChangeConfirmInfoSNterminated
	(*xnap_ies.PdusessionResourceChangeConfirmInfoMNterminated)(nil),        // 433: xnap.v1.PdusessionResourceChangeConfirmInfoMNterminated
	(*xnap_ies.DeliveryStatus)(nil),                                         // 434: xnap.v1.DeliveryStatus
	(*xnap_ies.QoSflowNotificationControlIndicationInfo)(nil),               // 435: xnap.v1.QoSflowNotificationControlIndicationInfo
	(xnap_ies.UserPlaneTrafficActivityReport)(0),                            // 436: xnap.v1.UserPlaneTrafficActivityReport
	(xnap_ies.RanpagingFailure)(0),                                          // 437: xnap.v1.RanpagingFailure
	(*xnap_ies.QoSflowIdentifier)(nil),                                      // 438: xnap.v1.QoSflowIdentifier
	(*xnap_ies.TaisupportList)(nil),                                         // 439: xnap.v1.TaisupportList
	(*xnap_ies.AmfRegionInformation)(nil),                                   // 440: xnap.v1.AmfRegionInformation
	(*xnap_ies.ServedCellsNR)(nil),                                          // 441: xnap.v1.ServedCellsNR
	(*xnap_ies.ServedCellsEUTra)(nil),                                       // 442: xnap.v1.ServedCellsEUTra
	(*xnap_ies.InterfaceInstanceIndication)(nil),                            // 443: xnap.v1.InterfaceInstanceIndication
	(*xnap_ies.TnlconfigurationInfo)(nil),                                   // 444: xnap.v1.TnlconfigurationInfo
	(xnap_ies.PartialListIndicator)(0),                                      // 445: xnap.v1.PartialListIndicator
	(*xnap_ies.CellAndCapacityAssistanceInfoNR)(nil),                        // 446: xnap.v1.CellAndCapacityAssistanceInfoNR
	(*xnap_ies.CellAndCapacityAssistanceInfoEUtra)(nil),                     // 447: xnap.v1.CellAndCapacityAssistanceInfoEUtra
	(xnap_ies.TimeToWait)(0),                                                // 448: xnap.v1.TimeToWait
	(*xnap_ies.MessageOversizeNotification)(nil),                            // 449: xnap.v1.MessageOversizeNotification
	(*xnap_ies.TnlaToAddList)(nil),                                          // 450: xnap.v1.TnlaToAddList
	(*xnap_ies.TnlaToRemoveList)(nil),                                       // 451: xnap.v1.TnlaToRemoveList
	(*xnap_ies.TnlaToUpdateList)(nil),                                       // 452: xnap.v1.TnlaToUpdateList
	(*xnap_ies.ServedCellsToUpdateNR)(nil),                                  // 453: xnap.v1.ServedCellsToUpdateNR
	(*xnap_ies.CellAssistanceInfoNR)(nil),                                   // 454: xnap.v1.CellAssistanceInfoNR
	(*xnap_ies.CellAssistanceInfoEUtra)(nil),                                // 455: xnap.v1.CellAssistanceInfoEUtra
	(*xnap_ies.ServedCellsToUpdateEUTra)(nil),                               // 456: xnap.v1.ServedCellsToUpdateEUTra
	(*xnap_ies.TnlaSetupList)(nil),                                          // 457: xnap.v1.TnlaSetupList
	(*xnap_ies.TnlaFailedToSetupList)(nil),                                  // 458: xnap.v1.TnlaFailedToSetupList
	(*xnap_ies.DataTrafficResourceIndication)(nil),                          // 459: xnap.v1.DataTrafficResourceIndication
	(*xnap_ies.SpectrumSharingGroupId)(nil),                                 // 460: xnap.v1.SpectrumSharingGroupId
	(*xnap_ies.EUTraCGi)(nil),                                               // 461: xnap.v1.EUTraCGi
	(*xnap_ies.NrCGi)(nil),                                                  // 462: xnap.v1.NrCGi
	(*xnap_ies.PdusessionResourceSecondaryRatusageList)(nil),                // 463: xnap.v1.PdusessionResourceSecondaryRatusageList
	(*xnap_ies.XnBenefitValue)(nil),                                         // 464: xnap.v1.XnBenefitValue
	(*xnap_ies.ActivationIdforCellActivation)(nil),                          // 465: xnap.v1.ActivationIdforCellActivation
	(*xnap_ies.ResetRequestTypeInfo)(nil),                                   // 466: xnap.v1.ResetRequestTypeInfo
	(*xnap_ies.ResetResponseTypeInfo)(nil),                                  // 467: xnap.v1.ResetResponseTypeInfo
	(*xnap_ies.NgRAntraceId)(nil),                                           // 468: xnap.v1.NgRAntraceId
	(xnap_ies.HandoverReportType)(0),                                        // 469: xnap.v1.HandoverReportType
	(*xnap_ies.GlobalCellID)(nil),                                           // 470: xnap.v1.GlobalCellID
	(*xnap_ies.TargetCellinEutran)(nil),                                     // 471: xnap.v1.TargetCellinEutran
	(*xnap_ies.CRNti)(nil),                                                  // 472: xnap.v1.CRNti
	(*xnap_ies.UerlfreportContainer)(nil),                                   // 473: xnap.v1.UerlfreportContainer
	(*xnap_ies.MeasurementID)(nil),                                          // 474: xnap.v1.MeasurementID
	(xnap_ies.RegistrationRequest)(0),                                       // 475: xnap.v1.RegistrationRequest
	(*xnap_ies.ReportCharacteristics)(nil),                                  // 476: xnap.v1.ReportCharacteristics
	(*xnap_ies.CellToReport)(nil),                                           // 477: xnap.v1.CellToReport
	(xnap_ies.ReportingPeriodicity)(0),                                      // 478: xnap.v1.ReportingPeriodicity
	(*xnap_ies.CellMeasurementResult)(nil),                                  // 479: xnap.v1.CellMeasurementResult
	(*xnap_ies.MobilityParametersInformation)(nil),                          // 480: xnap.v1.MobilityParametersInformation
	(*xnap_ies.MobilityParametersModificationRange)(nil),                    // 481: xnap.v1.MobilityParametersModificationRange
}
var file_api_xnap_v1_xnap_pdu_contents_proto_depIdxs = []int32{
	329, // 0: xnap.v1.HandoverRequestIEsValue.id_source_ng_rannode_uexn_apid:type_name -> xnap.v1.NgRAnnodeUexnApid
	330, // 1: xnap.v1.HandoverRequestIEsValue.id_cause:type_name -> xnap.v1.Cause
	331, // 2: xnap.v1.HandoverRequestIEsValue.id_target_cell_global_id:type_name -> xnap.v1.TargetCGi
	332, // 3: xnap.v1.HandoverRequestIEsValue.id_guami:type_name -> xnap.v1.Guami
	10,  // 4: xnap.v1.HandoverRequestIEsValue.id_uecontext_info_horequest:type_name -> xnap.v1.UecontextInfoHorequest
	333, // 5: xnap.v1.HandoverRequestIEsValue.id_trace_activation:type_name -> xnap.v1.TraceActivation
	334, // 6: xnap.v1.HandoverRequestIEsValue.id_masked_imeisv:type_name -> xnap.v1.MaskedImeisv
	335, // 7: xnap.v1.HandoverRequestIEsValue.id_uehistory_information:type_name -> xnap.v1.UehistoryInformation
	12,  // 8: xnap.v1.HandoverRequestIEsValue.id_uecontext_ref_at_sn_horequest:type_name -> xnap.v1.UecontextRefAtSnHOrequest
	336, // 9: xnap.v1.HandoverRequestIEsValue.id_choinformation_req:type_name -> xnap.v1.ChoinformationReq
	337, // 10: xnap.v1.HandoverRequestIEsValue.id_nrv2_xservices_authorized:type_name -> xnap.v1.Nrv2XservicesAuthorized
	338, // 11: xnap.v1.HandoverRequestIEsValue.id_ltev2_xservices_authorized:type_name -> xnap.v1.Ltev2XservicesAuthorized
	339, // 12: xnap.v1.HandoverRequestIEsValue.id_pc5_qo_sparameters:type_name -> xnap.v1.Pc5QoSparameters
	340, // 13: xnap.v1.HandoverRequestIEsValue.id_mobility_information:type_name -> xnap.v1.MobilityInformation
	341, // 14: xnap.v1.HandoverRequestIEsValue.id_uehistory_information_from_the_ue:type_name -> xnap.v1.UehistoryInformationFromTheUe
	342, // 15: xnap.v1.HandoverRequestIEsValue.id_iabnode_indication:type_name -> xnap.v1.IabnodeIndication
	343, // 16: xnap.v1.HandoverRequestIEs.id:type_name -> xnap.v1.ProtocolIeID
	344, // 17: xnap.v1.HandoverRequestIEs.criticality:type_name -> xnap.v1.Criticality
	5,   // 18: xnap.v1.HandoverRequestIEs.value:type_name -> xnap.v1.HandoverRequestIEsValue
	6,   // 19: xnap.v1.HandoverRequest.protocol_ies:type_name -> xnap.v1.HandoverRequestIEs
	345, // 20: xnap.v1.UecontextInfoHorequestExtIesExtension.id_five_gcmobility_restriction_list_container:type_name -> xnap.v1.FiveGcmobilityRestrictionListContainer
	346, // 21: xnap.v1.UecontextInfoHorequestExtIesExtension.id_nruesidelink_aggregate_maximum_bit_rate:type_name -> xnap.v1.NruesidelinkAggregateMaximumBitRate
	347, // 22: xnap.v1.UecontextInfoHorequestExtIesExtension.id_lteuesidelink_aggregate_maximum_bit_rate:type_name -> xnap.v1.LteuesidelinkAggregateMaximumBitRate
	348, // 23: xnap.v1.UecontextInfoHorequestExtIesExtension.id_mdtplmnlist:type_name -> xnap.v1.Mdtplmnlist
	349, // 24: xnap.v1.UecontextInfoHorequestExtIesExtension.id_ueradio_capability_id:type_name -> xnap.v1.UeradioCapabilityId
	343, // 25: xnap.v1.UecontextInfoHorequestExtIes.id:type_name -> xnap.v1.ProtocolIeID
	344, // 26: xnap.v1.UecontextInfoHorequestExtIes.criticality:type_name -> xnap.v1.Criticality
	8,   // 27: xnap.v1.UecontextInfoHorequestExtIes.extension:type_name -> xnap.v1.UecontextInfoHorequestExtIesExtension
	350, // 28: xnap.v1.UecontextInfoHorequest.ng_c_ue_reference:type_name -> xnap.v1.AmfUENGapID
	351, // 29: xnap.v1.UecontextInfoHorequest.cp_tnl_info_source:type_name -> xnap.v1.CptransportLayerInformation
	352, // 30: xnap.v1.UecontextInfoHorequest.ue_security_capabilities:type_name -> xnap.v1.UesecurityCapabilities
	353, // 31: xnap.v1.UecontextInfoHorequest.security_information:type_name -> xnap.v1.AsSecurityInformation
	354, // 32: xnap.v1.UecontextInfoHorequest.index_to_rat_frequency_selection_priority:type_name -> xnap.v1.RfspIndex
	355, // 33: xnap.v1.UecontextInfoHorequest.ue_ambr:type_name -> xnap.v1.UeaggregateMaximumBitRate
	356, // 34: xnap.v1.UecontextInfoHorequest.pdu_session_resources_to_be_setup_list:type_name -> xnap.v1.PdusessionResourcesToBeSetupList
	357, // 35: xnap.v1.UecontextInfoHorequest.location_reporting_information:type_name -> xnap.v1.LocationReportingInformation
	358, // 36: xnap.v1.UecontextInfoHorequest.mrl:type_name -> xnap.v1.MobilityRestrictionList
	9,   // 37: xnap.v1.UecontextInfoHorequest.i_e_extensions:type_name -> xnap.v1.UecontextInfoHorequestExtIes
	359, // 38: xnap.v1.UecontextRefAtSnHOrequestExtIes.value:type_name -> google.protobuf.Empty
	360, // 39: xnap.v1.UecontextRefAtSnHOrequest.global_ng_rannode_id:type_name -> xnap.v1.GlobalNgRAnnodeID
	329, // 40: xnap.v1.UecontextRefAtSnHOrequest.s_n_ng_rannode_uexn_apid:type_name -> xnap.v1.NgRAnnodeUexnApid
	11,  // 41: xnap.v1.UecontextRefAtSnHOrequest.i_e_extensions:type_name -> xnap.v1.UecontextRefAtSnHOrequestExtIes
	329, // 42: xnap.v1.HandoverRequestAcknowledgeIEsValue.id_source_ng_rannode_uexn_apid:type_name -> xnap.v1.NgRAnnodeUexnApid
	329, // 43: xnap.v1.HandoverRequestAcknowledgeIEsValue.id_target_ng_rannode_uexn_apid:type_name -> xnap.v1.NgRAnnodeUexnApid
	361, // 44: xnap.v1.HandoverRequestAcknowledgeIEsValue.id_pdusession_resources_admitted_list:type_name -> xnap.v1.PdusessionResourcesAdmittedList
	362, // 45: xnap.v1.HandoverRequestAcknowledgeIEsValue.id_pdusession_resources_not_admitted_list:type_name -> xnap.v1.PdusessionResourcesNotAdmittedList
	363, // 46: xnap.v1.HandoverRequestAcknowledgeIEsValue.id_uecontext_kept_indicator:type_name -> xnap.v1.UecontextKeptIndicator
	364, // 47: xnap.v1.HandoverRequestAcknowledgeIEsValue.id_criticality_diagnostics:type_name -> xnap.v1.CriticalityDiagnostics
	365, // 48: xnap.v1.HandoverRequestAcknowledgeIEsValue.id_drbs_transferred_to_mn:type_name -> xnap.v1.DrbList
	366, // 49: xnap.v1.HandoverRequestAcknowledgeIEsValue.id_dapsresponse_info_list:type_name -> xnap.v1.DapsresponseInfoList
	367, // 50: xnap.v1.HandoverRequestAcknowledgeIEsValue.id_choinformation_ack:type_name -> xnap.v1.ChoinformationAck
	343, // 51: xnap.v1.HandoverRequestAcknowledgeIEs.id:type_name -> xnap.v1.ProtocolIeID
	344, // 52: xnap.v1.HandoverRequestAcknowledgeIEs.criticality:type_name -> xnap.v1.Criticality
	13,  // 53: xnap.v1.HandoverRequestAcknowledgeIEs.value:type_name -> xnap.v1.HandoverRequestAcknowledgeIEsValue
	14,  // 54: xnap.v1.HandoverRequestAcknowledge.protocol_ies:type_name -> xnap.v1.HandoverRequestAcknowledgeIEs
	329, // 55: xnap.v1.HandoverPreparationFailureIEsValue.id_source_ng_rannode_uexn_apid:type_name -> xnap.v1.NgRAnnodeUexnApid
	330, // 56: xnap.v1.HandoverPreparationFailureIEsValue.id_cause:type_name -> xnap.v1.Cause
	364, // 57: xnap.v1.HandoverPreparationFailureIEsValue.id_criticality_diagnostics:type_name -> xnap.v1.CriticalityDiagnostics
	331, // 58: xnap.v1.HandoverPreparationFailureIEsValue.id_requested_target_cell_global_id:type_name -> xnap.v1.TargetCGi
	343, // 59: xnap.v1.HandoverPreparationFailureIEs.id:type_name -> xnap.v1.ProtocolIeID
	344, // 60: xnap.v1.HandoverPreparationFailureIEs.criticality:type_name -> xnap.v1.Criticality
	16,  // 61: xnap.v1.HandoverPreparationFailureIEs.value:type_name -> xnap.v1.HandoverPreparationFailureIEsValue
	17,  // 62: xnap.v1.HandoverPreparationFailure.protocol_ies:type_name -> xnap.v1.HandoverPreparationFailureIEs
	329, // 63: xnap.v1.SnstatusTransferIEsValue.id_source_ng_rannode_uexn_apid:type_name -> xnap.v1.NgRAnnodeUexnApid
	329, // 64: xnap.v1.SnstatusTransferIEsValue.id_target_ng_rannode_uexn_apid:type_name -> xnap.v1.NgRAnnodeUexnApid
	368, // 65: xnap.v1.SnstatusTransferIEsValue.id_drbs_subject_to_status_transfer_list:type_name -> xnap.v1.DrbsSubjectToStatusTransferList
	343, // 66: xnap.v1.SnstatusTransferIEs.id:type_name -> xnap.v1.ProtocolIeID
	344, // 67: xnap.v1.SnstatusTransferIEs.criticality:type_name -> xnap.v1.Criticality
	19,  // 68: xnap.v1.SnstatusTransferIEs.value:type_name -> xnap.v1.SnstatusTransferIEsValue
	20,  // 69: xnap.v1.SnstatusTransfer.protocol_ies:type_name -> xnap.v1.SnstatusTransferIEs
	329, // 70: xnap.v1.UecontextReleaseIEsValue.id_source_ng_rannode_uexn_apid:type_name -> xnap.v1.NgRAnnodeUexnApid
	329, // 71: xnap.v1.UecontextReleaseIEsValue.id_target_ng_rannode_uexn_apid:type_name -> xnap.v1.NgRAnnodeUexnApid
	343, // 72: xnap.v1.UecontextReleaseIEs.id:type_name -> xnap.v1.ProtocolIeID
	344, // 73: xnap.v1.UecontextReleaseIEs.criticality:type_name -> xnap.v1.Criticality
	22,  // 74: xnap.v1.UecontextReleaseIEs.value:type_name -> xnap.v1.UecontextReleaseIEsValue
	23,  // 75: xnap.v1.UecontextRelease.protocol_ies:type_name -> xnap.v1.UecontextReleaseIEs
	329, // 76: xnap.v1.HandoverCancelIEsValue.id_source_ng_rannode_uexn_apid:type_name -> xnap.v1.NgRAnnodeUexnApid
	329, // 77: xnap.v1.HandoverCancelIEsValue.id_target_ng_rannode_uexn_apid:type_name -> xnap.v1.NgRAnnodeUexnApid
	330, // 78: xnap.v1.HandoverCancelIEsValue.id_cause:type_name -> xnap.v1.Cause
	369, // 79: xnap.v1.HandoverCancelIEsValue.id_target_cells_to_cancel:type_name -> xnap.v1.TargetCellList
	343, // 80: xnap.v1.HandoverCancelIEs.id:type_name -> xnap.v1.ProtocolIeID
	344, // 81: xnap.v1.HandoverCancelIEs.criticality:type_name -> xnap.v1.Criticality
	25,  // 82: xnap.v1.HandoverCancelIEs.value:type_name -> xnap.v1.HandoverCancelIEsValue
	26,  // 83: xnap.v1.HandoverCancel.protocol_ies:type_name -> xnap.v1.HandoverCancelIEs
	329, // 84: xnap.v1.HandoverSuccessIEsValue.id_source_ng_rannode_uexn_apid:type_name -> xnap.v1.NgRAnnodeUexnApid
	329, // 85: xnap.v1.HandoverSuccessIEsValue.id_target_ng_rannode_uexn_apid:type_name -> xnap.v1.NgRAnnodeUexnApid
	331, // 86: xnap.v1.HandoverSuccessIEsValue.id_requested_target_cell_global_id:type_name -> xnap.v1.TargetCGi
	343, // 87: xnap.v1.HandoverSuccessIEs.id:type_name -> xnap.v1.ProtocolIeID
	344, // 88: xnap.v1.HandoverSuccessIEs.criticality:type_name -> xnap.v1.Criticality
	28,  // 89: xnap.v1.HandoverSuccessIEs.value:type_name -> xnap.v1.HandoverSuccessIEsValue
	29,  // 90: xnap.v1.HandoverSuccess.protocol_ies:type_name -> xnap.v1.HandoverSuccessIEs
	329, // 91: xnap.v1.ConditionalHandoverCancelIEsValue.id_source_ng_rannode_uexn_apid:type_name -> xnap.v1.NgRAnnodeUexnApid
	329, // 92: xnap.v1.ConditionalHandoverCancelIEsValue.id_target_ng_rannode_uexn_apid:type_name -> xnap.v1.NgRAnnodeUexnApid
	330, // 93: xnap.v1.ConditionalHandoverCancelIEsValue.id_cause:type_name -> xnap.v1.Cause
	369, // 94: xnap.v1.ConditionalHandoverCancelIEsValue.id_target_cells_to_cancel:type_name -> xnap.v1.TargetCellList
	343, // 95: xnap.v1.ConditionalHandoverCancelIEs.id:type_name -> xnap.v1.ProtocolIeID
	344, // 96: xnap.v1.ConditionalHandoverCancelIEs.criticality:type_name -> xnap.v1.Criticality
	31,  // 97: xnap.v1.ConditionalHandoverCancelIEs.value:type_name -> xnap.v1.ConditionalHandoverCancelIEsValue
	32,  // 98: xnap.v1.ConditionalHandoverCancel.protocol_ies:type_name -> xnap.v1.ConditionalHandoverCancelIEs
	329, // 99: xnap.v1.EarlyStatusTransferIEsValue.id_source_ng_rannode_uexn_apid:type_name -> xnap.v1.NgRAnnodeUexnApid
	329, // 100: xnap.v1.EarlyStatusTransferIEsValue.id_target_ng_rannode_uexn_apid:type_name -> xnap.v1.NgRAnnodeUexnApid
	38,  // 101: xnap.v1.EarlyStatusTransferIEsValue.id_procedure_stage:type_name -> xnap.v1.ProcedureStageChoice
	343, // 102: xnap.v1.EarlyStatusTransferIEs.id:type_name -> xnap.v1.ProtocolIeID
	344, // 103: xnap.v1.EarlyStatusTransferIEs.criticality:type_name -> xnap.v1.Criticality
	34,  // 104: xnap.v1.EarlyStatusTransferIEs.value:type_name -> xnap.v1.EarlyStatusTransferIEsValue
	35,  // 105: xnap.v1.EarlyStatusTransfer.protocol_ies:type_name -> xnap.v1.EarlyStatusTransferIEs
	359, // 106: xnap.v1.ProcedureStageChoiceExtIes.value:type_name -> google.protobuf.Empty
	40,  // 107: xnap.v1.ProcedureStageChoice.first_dl_count:type_name -> xnap.v1.FirstDlcount
	42,  // 108: xnap.v1.ProcedureStageChoice.dl_discarding:type_name -> xnap.v1.Dldiscarding
	37,  // 109: xnap.v1.ProcedureStageChoice.choice_extension:type_name -> xnap.v1.ProcedureStageChoiceExtIes
	359, // 110: xnap.v1.FirstDlcountExtIes.value:type_name -> google.protobuf.Empty
	370, // 111: xnap.v1.FirstDlcount.d_rbs_subject_to_early_status_transfer:type_name -> xnap.v1.DrbsSubjectToEarlyStatusTransferList
	39,  // 112: xnap.v1.FirstDlcount.i_e_extension:type_name -> xnap.v1.FirstDlcountExtIes
	359, // 113: xnap.v1.DldiscardingExtIes.value:type_name -> google.protobuf.Empty
	371, // 114: xnap.v1.Dldiscarding.d_rbs_subject_to_dldiscarding:type_name -> xnap.v1.DrbsSubjectToDldiscardingList
	41,  // 115: xnap.v1.Dldiscarding.i_e_extension:type_name -> xnap.v1.DldiscardingExtIes
	372, // 116: xnap.v1.RanpagingIEsValue.id_ueidentity_index_value:type_name -> xnap.v1.UeidentityIndexValue
	373, // 117: xnap.v1.RanpagingIEsValue.id_ueranpaging_identity:type_name -> xnap.v1.UeranpagingIdentity
	374, // 118: xnap.v1.RanpagingIEsValue.id_paging_drx:type_name -> xnap.v1.PagingDrx
	375, // 119: xnap.v1.RanpagingIEsValue.id_ranpaging_area:type_name -> xnap.v1.RanpagingArea
	376, // 120: xnap.v1.RanpagingIEsValue.id_paging_priority:type_name -> xnap.v1.PagingPriority
	377, // 121: xnap.v1.RanpagingIEsValue.id_assistance_data_for_ranpaging:type_name -> xnap.v1.AssistanceDataForRanpaging
	378, // 122: xnap.v1.RanpagingIEsValue.id_ueradio_capability_for_paging:type_name -> xnap.v1.UeradioCapabilityForPaging
	379, // 123: xnap.v1.RanpagingIEsValue.id_extended_ueidentity_index_value:type_name -> xnap.v1.ExtendedUeidentityIndexValue
	380, // 124: xnap.v1.RanpagingIEsValue.id_paginge_drxinformation:type_name -> xnap.v1.PagingeDrxinformation
	381, // 125: xnap.v1.RanpagingIEsValue.id_uespecific_drx:type_name -> xnap.v1.UespecificDrx
	343, // 126: xnap.v1.RanpagingIEs.id:type_name -> xnap.v1.ProtocolIeID
	344, // 127: xnap.v1.RanpagingIEs.criticality:type_name -> xnap.v1.Criticality
	43,  // 128: xnap.v1.RanpagingIEs.value:type_name -> xnap.v1.RanpagingIEsValue
	44,  // 129: xnap.v1.Ranpaging.protocol_ies:type_name -> xnap.v1.RanpagingIEs
	329, // 130: xnap.v1.RetrieveUecontextRequestIEsValue.id_new_ng_rannode_uexn_apid:type_name -> xnap.v1.NgRAnnodeUexnApid
	382, // 131: xnap.v1.RetrieveUecontextRequestIEsValue.id_uecontext_id:type_name -> xnap.v1.UecontextId
	383, // 132: xnap.v1.RetrieveUecontextRequestIEsValue.id_mac_i:type_name -> xnap.v1.MacI
	384, // 133: xnap.v1.RetrieveUecontextRequestIEsValue.id_new_ng_ran_cell_identity:type_name -> xnap.v1.NgRAnCellIdentity
	385, // 134: xnap.v1.RetrieveUecontextRequestIEsValue.id_rrcresume_cause:type_name -> xnap.v1.RrcresumeCause
	343, // 135: xnap.v1.RetrieveUecontextRequestIEs.id:type_name -> xnap.v1.ProtocolIeID
	344, // 136: xnap.v1.RetrieveUecontextRequestIEs.criticality:type_name -> xnap.v1.Criticality
	46,  // 137: xnap.v1.RetrieveUecontextRequestIEs.value:type_name -> xnap.v1.RetrieveUecontextRequestIEsValue
	47,  // 138: xnap.v1.RetrieveUecontextRequest.protocol_ies:type_name -> xnap.v1.RetrieveUecontextRequestIEs
	329, // 139: xnap.v1.RetrieveUecontextResponseIEsValue.id_new_ng_rannode_uexn_apid:type_name -> xnap.v1.NgRAnnodeUexnApid
	329, // 140: xnap.v1.RetrieveUecontextResponseIEsValue.id_old_ng_rannode_uexn_apid:type_name -> xnap.v1.NgRAnnodeUexnApid
	332, // 141: xnap.v1.RetrieveUecontextResponseIEsValue.id_guami:type_name -> xnap.v1.Guami
	386, // 142: xnap.v1.RetrieveUecontextResponseIEsValue.id_uecontext_info_retr_uectxt_resp:type_name -> xnap.v1.UecontextInfoRetrUectxtResp
	333, // 143: xnap.v1.RetrieveUecontextResponseIEsValue.id_trace_activation:type_name -> xnap.v1.TraceActivation
	334, // 144: xnap.v1.RetrieveUecontextResponseIEsValue.id_masked_imeisv:type_name -> xnap.v1.MaskedImeisv
	357, // 145: xnap.v1.RetrieveUecontextResponseIEsValue.id_location_reporting_information:type_name -> xnap.v1.LocationReportingInformation
	364, // 146: xnap.v1.RetrieveUecontextResponseIEsValue.id_criticality_diagnostics:type_name -> xnap.v1.CriticalityDiagnostics
	337, // 147: xnap.v1.RetrieveUecontextResponseIEsValue.id_nrv2_xservices_authorized:type_name -> xnap.v1.Nrv2XservicesAuthorized
	338, // 148: xnap.v1.RetrieveUecontextResponseIEsValue.id_ltev2_xservices_authorized:type_name -> xnap.v1.Ltev2XservicesAuthorized
	339, // 149: xnap.v1.RetrieveUecontextResponseIEsValue.id_pc5_qo_sparameters:type_name -> xnap.v1.Pc5QoSparameters
	335, // 150: xnap.v1.RetrieveUecontextResponseIEsValue.id_uehistory_information:type_name -> xnap.v1.UehistoryInformation
	341, // 151: xnap.v1.RetrieveUecontextResponseIEsValue.id_uehistory_information_from_the_ue:type_name -> xnap.v1.UehistoryInformationFromTheUe
	348, // 152: xnap.v1.RetrieveUecontextResponseIEsValue.id_mdtplmnlist:type_name -> xnap.v1.Mdtplmnlist
	343, // 153: xnap.v1.RetrieveUecontextResponseIEs.id:type_name -> xnap.v1.ProtocolIeID
	344, // 154: xnap.v1.RetrieveUecontextResponseIEs.criticality:type_name -> xnap.v1.Criticality
	49,  // 155: xnap.v1.RetrieveUecontextResponseIEs.value:type_name -> xnap.v1.RetrieveUecontextResponseIEsValue
	50,  // 156: xnap.v1.RetrieveUecontextResponse.protocol_ies:type_name -> xnap.v1.RetrieveUecontextResponseIEs
	329, // 157: xnap.v1.RetrieveUecontextFailureIEsValue.id_new_ng_rannode_uexn_apid:type_name -> xnap.v1.NgRAnnodeUexnApid
	330, // 158: xnap.v1.RetrieveUecontextFailureIEsValue.id_cause:type_name -> xnap.v1.Cause
	364, // 159: xnap.v1.RetrieveUecontextFailureIEsValue.id_criticality_diagnostics:type_name -> xnap.v1.CriticalityDiagnostics
	343, // 160: xnap.v1.RetrieveUecontextFailureIEs.id:type_name -> xnap.v1.ProtocolIeID
	344, // 161: xnap.v1.RetrieveUecontextFailureIEs.criticality:type_name -> xnap.v1.Criticality
	52,  // 162: xnap.v1.RetrieveUecontextFailureIEs.value:type_name -> xnap.v1.RetrieveUecontextFailureIEsValue
	53,  // 163: xnap.v1.RetrieveUecontextFailure.protocol_ies:type_name -> xnap.v1.RetrieveUecontextFailureIEs
	329, // 164: xnap.v1.XnUaddressIndicationIEsValue.id_new_ng_rannode_uexn_apid:type_name -> xnap.v1.NgRAnnodeUexnApid
	329, // 165: xnap.v1.XnUaddressIndicationIEsValue.id_old_ng_rannode_uexn_apid:type_name -> xnap.v1.NgRAnnodeUexnApid
	387, // 166: xnap.v1.XnUaddressIndicationIEsValue.id_xn_uaddress_infoper_pdusession_list:type_name -> xnap.v1.XnUaddressInfoperPdusessionList
	388, // 167: xnap.v1.XnUaddressIndicationIEsValue.id_cho_mrdc_indicator:type_name -> xnap.v1.ChoMRdcIndicator
	389, // 168: xnap.v1.XnUaddressIndicationIEsValue.id_cho_mrdc_early_data_forwarding:type_name -> xnap.v1.ChoMRdcEarlyDataForwarding
	343, // 169: xnap.v1.XnUaddressIndicationIEs.id:type_name -> xnap.v1.ProtocolIeID
	344, // 170: xnap.v1.XnUaddressIndicationIEs.criticality:type_name -> xnap.v1.Criticality
	55,  // 171: xnap.v1.XnUaddressIndicationIEs.value:type_name -> xnap.v1.XnUaddressIndicationIEsValue
	56,  // 172: xnap.v1.XnUaddressIndication.protocol_ies:type_name -> xnap.v1.XnUaddressIndicationIEs
	329, // 173: xnap.v1.SnodeAdditionRequestIEsValue.id_m_ng_rannode_uexn_apid:type_name -> xnap.v1.NgRAnnodeUexnApid
	352, // 174: xnap.v1.SnodeAdditionRequestIEsValue.id_uesecurity_capabilities:type_name -> xnap.v1.UesecurityCapabilities
	390, // 175: xnap.v1.SnodeAdditionRequestIEsValue.id_s_ng_rannode_security_key:type_name -> xnap.v1.SNGRAnnodeSecurityKey
	355, // 176: xnap.v1.SnodeAdditionRequestIEsValue.id_s_ng_rannode_ue_ambr:type_name -> xnap.v1.UeaggregateMaximumBitRate
	391, // 177: xnap.v1.SnodeAdditionRequestIEsValue.id_selected_plmn:type_name -> xnap.v1.PlmnIdentity
	358, // 178: xnap.v1.SnodeAdditionRequestIEsValue.id_mobility_restriction_list:type_name -> xnap.v1.MobilityRestrictionList
	354, // 179: xnap.v1.SnodeAdditionRequestIEsValue.id_index_to_rat_frequ_selection_priority:type_name -> xnap.v1.RfspIndex
	61,  // 180: xnap.v1.SnodeAdditionRequestIEsValue.id_pdusession_to_be_added_add_req:type_name -> xnap.v1.PdusessionToBeAddedAddReq
	329, // 181: xnap.v1.SnodeAdditionRequestIEsValue.id_s_ng_rannode_uexn_apid:type_name -> xnap.v1.NgRAnnodeUexnApid
	392, // 182: xnap.v1.SnodeAdditionRequestIEsValue.id_expected_uebehaviour:type_name -> xnap.v1.ExpectedUebehaviour
	393, // 183: xnap.v1.SnodeAdditionRequestIEsValue.id_requested_split_srb:type_name -> xnap.v1.SplitSrbsTypes
	394, // 184: xnap.v1.SnodeAdditionRequestIEsValue.id_pcell_id:type_name -> xnap.v1.GlobalNgRAncellID
	395, // 185: xnap.v1.SnodeAdditionRequestIEsValue.id_desired_act_notification_level:type_name -> xnap.v1.DesiredActNotificationLevel
	365, // 186: xnap.v1.SnodeAdditionRequestIEsValue.id_available_drbids:type_name -> xnap.v1.DrbList
	396, // 187: xnap.v1.SnodeAdditionRequestIEsValue.id_s_ng_rannode_max_ipdata_rate_ul:type_name -> xnap.v1.BitRate
	396, // 188: xnap.v1.SnodeAdditionRequestIEsValue.id_s_ng_rannode_max_ipdata_rate_dl:type_name -> xnap.v1.BitRate
	397, // 189: xnap.v1.SnodeAdditionRequestIEsValue.id_location_information_snreporting:type_name -> xnap.v1.LocationInformationSnreporting
	398, // 190: xnap.v1.SnodeAdditionRequestIEsValue.id_mr_dc_resource_coordination_info:type_name -> xnap.v1.MrDCResourceCoordinationInfo
	334, // 191: xnap.v1.SnodeAdditionRequestIEsValue.id_masked_imeisv:type_name -> xnap.v1.MaskedImeisv
	399, // 192: xnap.v1.SnodeAdditionRequestIEsValue.id_ne_dc_tdm_pattern:type_name -> xnap.v1.NeDCTDmPattern
	400, // 193: xnap.v1.SnodeAdditionRequestIEsValue.id_s_ng_rannode_addition_trigger_ind:type_name -> xnap.v1.SNGRAnnodeAdditionTriggerInd
	333, // 194: xnap.v1.SnodeAdditionRequestIEsValue.id_trace_activation:type_name -> xnap.v1.TraceActivation
	0,   // 195: xnap.v1.SnodeAdditionRequestIEsValue.id_requested_fast_mcgrecovery_via_srb3:type_name -> xnap.v1.RequestedFastMcgrecoveryViaSrb3
	349, // 196: xnap.v1.SnodeAdditionRequestIEsValue.id_ueradio_capability_id:type_name -> xnap.v1.UeradioCapabilityId
	360, // 197: xnap.v1.SnodeAdditionRequestIEsValue.id_source_ng_ran_node_id:type_name -> xnap.v1.GlobalNgRAnnodeID
	343, // 198: xnap.v1.SnodeAdditionRequestIEs.id:type_name -> xnap.v1.ProtocolIeID
	344, // 199: xnap.v1.SnodeAdditionRequestIEs.criticality:type_name -> xnap.v1.Criticality
	58,  // 200: xnap.v1.SnodeAdditionRequestIEs.value:type_name -> xnap.v1.SnodeAdditionRequestIEsValue
	59,  // 201: xnap.v1.SnodeAdditionRequest.protocol_ies:type_name -> xnap.v1.SnodeAdditionRequestIEs
	63,  // 202: xnap.v1.PdusessionToBeAddedAddReq.value:type_name -> xnap.v1.PdusessionToBeAddedAddReqItem
	359, // 203: xnap.v1.PdusessionToBeAddedAddReqItemExtIes.value:type_name -> google.protobuf.Empty
	401, // 204: xnap.v1.PdusessionToBeAddedAddReqItem.pdu_session_id:type_name -> xnap.v1.PdusessionID
	402, // 205: xnap.v1.PdusessionToBeAddedAddReqItem.s_nssai:type_name -> xnap.v1.SNSsai
	403, // 206: xnap.v1.PdusessionToBeAddedAddReqItem.s_n_pdusession_ambr:type_name -> xnap.v1.PdusessionAggregateMaximumBitRate
	404, // 207: xnap.v1.PdusessionToBeAddedAddReqItem.sn_terminated:type_name -> xnap.v1.PdusessionResourceSetupInfoSNterminated
	405, // 208: xnap.v1.PdusessionToBeAddedAddReqItem.mn_terminated:type_name -> xnap.v1.PdusessionResourceSetupInfoMNterminated
	62,  // 209: xnap.v1.PdusessionToBeAddedAddReqItem.i_e_extension:type_name -> xnap.v1.PdusessionToBeAddedAddReqItemExtIes
	329, // 210: xnap.v1.SnodeAdditionRequestAcknowledgeIEsValue.id_m_ng_rannode_uexn_apid:type_name -> xnap.v1.NgRAnnodeUexnApid
	329, // 211: xnap.v1.SnodeAdditionRequestAcknowledgeIEsValue.id_s_ng_rannode_uexn_apid:type_name -> xnap.v1.NgRAnnodeUexnApid
	67,  // 212: xnap.v1.SnodeAdditionRequestAcknowledgeIEsValue.id_pdusession_admitted_added_add_req_ack:type_name -> xnap.v1.PdusessionAdmittedAddedAddReqAck
	71,  // 213: xnap.v1.SnodeAdditionRequestAcknowledgeIEsValue.id_pdusession_not_admitted_add_req_ack:type_name -> xnap.v1.PdusessionNotAdmittedAddReqAck
	393, // 214: xnap.v1.SnodeAdditionRequestAcknowledgeIEsValue.id_admitted_split_srb:type_name -> xnap.v1.SplitSrbsTypes
	406, // 215: xnap.v1.SnodeAdditionRequestAcknowledgeIEsValue.id_rrcconfig_indication:type_name -> xnap.v1.RrcconfigIndication
	364, // 216: xnap.v1.SnodeAdditionRequestAcknowledgeIEsValue.id_criticality_diagnostics:type_name -> xnap.v1.CriticalityDiagnostics
	331, // 217: xnap.v1.SnodeAdditionRequestAcknowledgeIEsValue.id_location_information_sn:type_name -> xnap.v1.TargetCGi
	398, // 218: xnap.v1.SnodeAdditionRequestAcknowledgeIEsValue.id_mr_dc_resource_coordination_info:type_name -> xnap.v1.MrDCResourceCoordinationInfo
	1,   // 219: xnap.v1.SnodeAdditionRequestAcknowledgeIEsValue.id_available_fast_mcgrecovery_via_srb3:type_name -> xnap.v1.AvailableFastMcgrecoveryViaSrb3
	407, // 220: xnap.v1.SnodeAdditionRequestAcknowledgeIEsValue.id_direct_forwarding_path_availability:type_name -> xnap.v1.DirectForwardingPathAvailability
	343, // 221: xnap.v1.SnodeAdditionRequestAcknowledgeIEs.id:type_name -> xnap.v1.ProtocolIeID
	344, // 222: xnap.v1.SnodeAdditionRequestAcknowledgeIEs.criticality:type_name -> xnap.v1.Criticality
	64,  // 223: xnap.v1.SnodeAdditionRequestAcknowledgeIEs.value:type_name -> xnap.v1.SnodeAdditionRequestAcknowledgeIEsValue
	65,  // 224: xnap.v1.SnodeAdditionRequestAcknowledge.protocol_ies:type_name -> xnap.v1.SnodeAdditionRequestAcknowledgeIEs
	69,  // 225: xnap.v1.PdusessionAdmittedAddedAddReqAck.value:type_name -> xnap.v1.PdusessionAdmittedAddedAddReqAckItem
	359, // 226: xnap.v1.PdusessionAdmittedAddedAddReqAckItemExtIes.value:type_name -> google.protobuf.Empty
	401, // 227: xnap.v1.PdusessionAdmittedAddedAddReqAckItem.pdu_session_id:type_name -> xnap.v1.PdusessionID
	408, // 228: xnap.v1.PdusessionAdmittedAddedAddReqAckItem.sn_terminated:type_name -> xnap.v1.PdusessionResourceSetupResponseInfoSNterminated
	409, // 229: xnap.v1.PdusessionAdmittedAddedAddReqAckItem.mn_terminated:type_name -> xnap.v1.PdusessionResourceSetupResponseInfoMNterminated
	68,  // 230: xnap.v1.PdusessionAdmittedAddedAddReqAckItem.i_e_extension:type_name -> xnap.v1.PdusessionAdmittedAddedAddReqAckItemExtIes
	359, // 231: xnap.v1.PdusessionNotAdmittedAddReqAckExtIes.value:type_name -> google.protobuf.Empty
	362, // 232: xnap.v1.PdusessionNotAdmittedAddReqAck.pdu_session_resources_not_admitted_snterminated:type_name -> xnap.v1.PdusessionResourcesNotAdmittedList
	362, // 233: xnap.v1.PdusessionNotAdmittedAddReqAck.pdu_session_resources_not_admitted_mnterminated:type_name -> xnap.v1.PdusessionResourcesNotAdmittedList
	70,  // 234: xnap.v1.PdusessionNotAdmittedAddReqAck.i_e_extension:type_name -> xnap.v1.PdusessionNotAdmittedAddReqAckExtIes
	329, // 235: xnap.v1.SnodeAdditionRequestRejectIEsValue.id_m_ng_rannode_uexn_apid:type_name -> xnap.v1.NgRAnnodeUexnApid
	329, // 236: xnap.v1.SnodeAdditionRequestRejectIEsValue.id_s_ng_rannode_uexn_apid:type_name -> xnap.v1.NgRAnnodeUexnApid
	330, // 237: xnap.v1.SnodeAdditionRequestRejectIEsValue.id_cause:type_name -> xnap.v1.Cause
	364, // 238: xnap.v1.SnodeAdditionRequestRejectIEsValue.id_criticality_diagnostics:type_name -> xnap.v1.CriticalityDiagnostics
	343, // 239: xnap.v1.SnodeAdditionRequestRejectIEs.id:type_name -> xnap.v1.ProtocolIeID
	344, // 240: xnap.v1.SnodeAdditionRequestRejectIEs.criticality:type_name -> xnap.v1.Criticality
	72,  // 241: xnap.v1.SnodeAdditionRequestRejectIEs.value:type_name -> xnap.v1.SnodeAdditionRequestRejectIEsValue
	73,  // 242: xnap.v1.SnodeAdditionRequestReject.protocol_ies:type_name -> xnap.v1.SnodeAdditionRequestRejectIEs
	329, // 243: xnap.v1.SnodeReconfigurationCompleteIEsValue.id_m_ng_rannode_uexn_apid:type_name -> xnap.v1.NgRAnnodeUexnApid
	329, // 244: xnap.v1.SnodeReconfigurationCompleteIEsValue.id_s_ng_rannode_uexn_apid:type_name -> xnap.v1.NgRAnnodeUexnApid
	79,  // 245: xnap.v1.SnodeReconfigurationCompleteIEsValue.id_response_info_reconf_compl:type_name -> xnap.v1.ResponseInfoReconfCompl
	343, // 246: xnap.v1.SnodeReconfigurationCompleteIEs.id:type_name -> xnap.v1.ProtocolIeID
	344, // 247: xnap.v1.SnodeReconfigurationCompleteIEs.criticality:type_name -> xnap.v1.Criticality
	75,  // 248: xnap.v1.SnodeReconfigurationCompleteIEs.value:type_name -> xnap.v1.SnodeReconfigurationCompleteIEsValue
	76,  // 249: xnap.v1.SnodeReconfigurationComplete.protocol_ies:type_name -> xnap.v1.SnodeReconfigurationCompleteIEs
	359, // 250: xnap.v1.ResponseInfoReconfComplExtIes.value:type_name -> google.protobuf.Empty
	81,  // 251: xnap.v1.ResponseInfoReconfCompl.response_type_reconf_complete:type_name -> xnap.v1.ResponseTypeReconfComplete
	78,  // 252: xnap.v1.ResponseInfoReconfCompl.i_e_extensions:type_name -> xnap.v1.ResponseInfoReconfComplExtIes
	359, // 253: xnap.v1.ResponseTypeReconfCompleteExtIes.value:type_name -> google.protobuf.Empty
	83,  // 254: xnap.v1.ResponseTypeReconfComplete.configuration_successfully_applied:type_name -> xnap.v1.Configurationsuccessfullyapplied
	85,  // 255: xnap.v1.ResponseTypeReconfComplete.configuration_rejected_by_m_ng_rannode:type_name -> xnap.v1.ConfigurationrejectedbyMNGRAnnode
	80,  // 256: xnap.v1.ResponseTypeReconfComplete.choice_extension:type_name -> xnap.v1.ResponseTypeReconfCompleteExtIes
	359, // 257: xnap.v1.ConfigurationsuccessfullyappliedExtIes.value:type_name -> google.protobuf.Empty
	82,  // 258: xnap.v1.Configurationsuccessfullyapplied.i_e_extensions:type_name -> xnap.v1.ConfigurationsuccessfullyappliedExtIes
	359, // 259: xnap.v1.ConfigurationrejectedbyMNGRAnnodeExtIes.value:type_name -> google.protobuf.Empty
	330, // 260: xnap.v1.ConfigurationrejectedbyMNGRAnnode.cause:type_name -> xnap.v1.Cause
	84,  // 261: xnap.v1.ConfigurationrejectedbyMNGRAnnode.i_e_extensions:type_name -> xnap.v1.ConfigurationrejectedbyMNGRAnnodeExtIes
	329, // 262: xnap.v1.SnodeModificationRequestIEsValue.id_m_ng_rannode_uexn_apid:type_name -> xnap.v1.NgRAnnodeUexnApid
	329, // 263: xnap.v1.SnodeModificationRequestIEsValue.id_s_ng_rannode_uexn_apid:type_name -> xnap.v1.NgRAnnodeUexnApid
	330, // 264: xnap.v1.SnodeModificationRequestIEsValue.id_cause:type_name -> xnap.v1.Cause
	410, // 265: xnap.v1.SnodeModificationRequestIEsValue.id_pdcpchange_indication:type_name -> xnap.v1.PdcpchangeIndication
	391, // 266: xnap.v1.SnodeModificationRequestIEsValue.id_selected_plmn:type_name -> xnap.v1.PlmnIdentity
	358, // 267: xnap.v1.SnodeModificationRequestIEsValue.id_mobility_restriction_list:type_name -> xnap.v1.MobilityRestrictionList
	411, // 268: xnap.v1.SnodeModificationRequestIEsValue.id_scgconfiguration_query:type_name -> xnap.v1.ScgconfigurationQuery
	90,  // 269: xnap.v1.SnodeModificationRequestIEsValue.id_uecontext_info_snmod_request:type_name -> xnap.v1.UecontextInfoSNmodRequest
	393, // 270: xnap.v1.SnodeModificationRequestIEsValue.id_requested_split_srb:type_name -> xnap.v1.SplitSrbsTypes
	393, // 271: xnap.v1.SnodeModificationRequestIEsValue.id_requested_split_srbrelease:type_name -> xnap.v1.SplitSrbsTypes
	395, // 272: xnap.v1.SnodeModificationRequestIEsValue.id_desired_act_notification_level:type_name -> xnap.v1.DesiredActNotificationLevel
	365, // 273: xnap.v1.SnodeModificationRequestIEsValue.id_additional_drbids:type_name -> xnap.v1.DrbList
	396, // 274: xnap.v1.SnodeModificationRequestIEsValue.id_s_ng_rannode_max_ipdata_rate_ul:type_name -> xnap.v1.BitRate
	396, // 275: xnap.v1.SnodeModificationRequestIEsValue.id_s_ng_rannode_max_ipdata_rate_dl:type_name -> xnap.v1.BitRate
	397, // 276: xnap.v1.SnodeModificationRequestIEsValue.id_location_information_snreporting:type_name -> xnap.v1.LocationInformationSnreporting
	398, // 277: xnap.v1.SnodeModificationRequestIEsValue.id_mr_dc_resource_coordination_info:type_name -> xnap.v1.MrDCResourceCoordinationInfo
	394, // 278: xnap.v1.SnodeModificationRequestIEsValue.id_pcell_id:type_name -> xnap.v1.GlobalNgRAncellID
	399, // 279: xnap.v1.SnodeModificationRequestIEsValue.id_ne_dc_tdm_pattern:type_name -> xnap.v1.NeDCTDmPattern
	0,   // 280: xnap.v1.SnodeModificationRequestIEsValue.id_requested_fast_mcgrecovery_via_srb3:type_name -> xnap.v1.RequestedFastMcgrecoveryViaSrb3
	2,   // 281: xnap.v1.SnodeModificationRequestIEsValue.id_requested_fast_mcgrecovery_via_srb3_release:type_name -> xnap.v1.RequestedFastMcgrecoveryViaSrb3Release
	412, // 282: xnap.v1.SnodeModificationRequestIEsValue.id_sntriggered:type_name -> xnap.v1.Sntriggered
	360, // 283: xnap.v1.SnodeModificationRequestIEsValue.id_target_node_id:type_name -> xnap.v1.GlobalNgRAnnodeID
	343, // 284: xnap.v1.SnodeModificationRequestIEs.id:type_name -> xnap.v1.ProtocolIeID
	344, // 285: xnap.v1.SnodeModificationRequestIEs.criticality:type_name -> xnap.v1.Criticality
	86,  // 286: xnap.v1.SnodeModificationRequestIEs.value:type_name -> xnap.v1.SnodeModificationRequestIEsValue
	87,  // 287: xnap.v1.SnodeModificationRequest.protocol_ies:type_name -> xnap.v1.SnodeModificationRequestIEs
	359, // 288: xnap.v1.UecontextInfoSNmodRequestExtIes.value:type_name -> google.protobuf.Empty
	352, // 289: xnap.v1.UecontextInfoSNmodRequest.ue_security_capabilities:type_name -> xnap.v1.UesecurityCapabilities
	390, // 290: xnap.v1.UecontextInfoSNmodRequest.s_ng_rannode_security_key:type_name -> xnap.v1.SNGRAnnodeSecurityKey
	355, // 291: xnap.v1.UecontextInfoSNmodRequest.s_ng_rannode_ue_ambr:type_name -> xnap.v1.UeaggregateMaximumBitRate
	354, // 292: xnap.v1.UecontextInfoSNmodRequest.index_to_rat_frequency_selection_priority:type_name -> xnap.v1.RfspIndex
	413, // 293: xnap.v1.UecontextInfoSNmodRequest.lower_layer_presence_status_change:type_name -> xnap.v1.LowerLayerPresenceStatusChange
	91,  // 294: xnap.v1.UecontextInfoSNmodRequest.pdu_session_resource_to_be_added:type_name -> xnap.v1.PdusessionsToBeAddedSNmodRequestList
	94,  // 295: xnap.v1.UecontextInfoSNmodRequest.pdu_session_resource_to_be_modified:type_name -> xnap.v1.PdusessionsToBeModifiedSNmodRequestList
	99,  // 296: xnap.v1.UecontextInfoSNmodRequest.pdu_session_resource_to_be_released:type_name -> xnap.v1.PdusessionsToBeReleasedSNmodRequestList
	89,  // 297: xnap.v1.UecontextInfoSNmodRequest.i_e_extension:type_name -> xnap.v1.UecontextInfoSNmodRequestExtIes
	93,  // 298: xnap.v1.PdusessionsToBeAddedSNmodRequestList.value:type_name -> xnap.v1.PdusessionsToBeAddedSNmodRequestItem
	359, // 299: xnap.v1.PdusessionsToBeAddedSNmodRequestItemExtIes.value:type_name -> google.protobuf.Empty
	401, // 300: xnap.v1.PdusessionsToBeAddedSNmodRequestItem.pdu_session_id:type_name -> xnap.v1.PdusessionID
	402, // 301: xnap.v1.PdusessionsToBeAddedSNmodRequestItem.s_nssai:type_name -> xnap.v1.SNSsai
	403, // 302: xnap.v1.PdusessionsToBeAddedSNmodRequestItem.s_n_pdusession_ambr:type_name -> xnap.v1.PdusessionAggregateMaximumBitRate
	404, // 303: xnap.v1.PdusessionsToBeAddedSNmodRequestItem.sn_terminated:type_name -> xnap.v1.PdusessionResourceSetupInfoSNterminated
	405, // 304: xnap.v1.PdusessionsToBeAddedSNmodRequestItem.mn_terminated:type_name -> xnap.v1.PdusessionResourceSetupInfoMNterminated
	92,  // 305: xnap.v1.PdusessionsToBeAddedSNmodRequestItem.i_e_extension:type_name -> xnap.v1.PdusessionsToBeAddedSNmodRequestItemExtIes
	97,  // 306: xnap.v1.PdusessionsToBeModifiedSNmodRequestList.value:type_name -> xnap.v1.PdusessionsToBeModifiedSNmodRequestItem
	402, // 307: xnap.v1.PdusessionsToBeModifiedSNmodRequestItemExtIesExtension.id_s_nssai:type_name -> xnap.v1.SNSsai
	414, // 308: xnap.v1.PdusessionsToBeModifiedSNmodRequestItemExtIesExtension.id_pdusession_expected_ueactivity_behaviour:type_name -> xnap.v1.ExpectedUeactivityBehaviour
	343, // 309: xnap.v1.PdusessionsToBeModifiedSNmodRequestItemExtIes.id:type_name -> xnap.v1.ProtocolIeID
	344, // 310: xnap.v1.PdusessionsToBeModifiedSNmodRequestItemExtIes.criticality:type_name -> xnap.v1.Criticality
	95,  // 311: xnap.v1.PdusessionsToBeModifiedSNmodRequestItemExtIes.extension:type_name -> xnap.v1.PdusessionsToBeModifiedSNmodRequestItemExtIesExtension
	401, // 312: xnap.v1.PdusessionsToBeModifiedSNmodRequestItem.pdu_session_id:type_name -> xnap.v1.PdusessionID
	403, // 313: xnap.v1.PdusessionsToBeModifiedSNmodRequestItem.s_n_pdusession_ambr:type_name -> xnap.v1.PdusessionAggregateMaximumBitRate
	415, // 314: xnap.v1.PdusessionsToBeModifiedSNmodRequestItem.sn_terminated:type_name -> xnap.v1.PdusessionResourceModificationInfoSNterminated
	416, // 315: xnap.v1.PdusessionsToBeModifiedSNmodRequestItem.mn_terminated:type_name -> xnap.v1.PdusessionResourceModificationInfoMNterminated
	96,  // 316: xnap.v1.PdusessionsToBeModifiedSNmodRequestItem.i_e_extension:type_name -> xnap.v1.PdusessionsToBeModifiedSNmodRequestItemExtIes
	359, // 317: xnap.v1.PdusessionsToBeReleasedSNmodRequestListExtIes.value:type_name -> google.protobuf.Empty
	417, // 318: xnap.v1.PdusessionsToBeReleasedSNmodRequestList.pdu_session_list:type_name -> xnap.v1.PdusessionListwithCause
	98,  // 319: xnap.v1.PdusessionsToBeReleasedSNmodRequestList.i_e_extension:type_name -> xnap.v1.PdusessionsToBeReleasedSNmodRequestListExtIes
	329, // 320: xnap.v1.SnodeModificationRequestAcknowledgeIEsValue.id_m_ng_rannode_uexn_apid:type_name -> xnap.v1.NgRAnnodeUexnApid
	329, // 321: xnap.v1.SnodeModificationRequestAcknowledgeIEsValue.id_s_ng_rannode_uexn_apid:type_name -> xnap.v1.NgRAnnodeUexnApid
	104, // 322: xnap.v1.SnodeModificationRequestAcknowledgeIEsValue.id_pdusession_admitted_snmod_response:type_name -> xnap.v1.PdusessionAdmittedSNmodResponse
	114, // 323: xnap.v1.SnodeModificationRequestAcknowledgeIEsValue.id_pdusession_not_admitted_snmod_response:type_name -> xnap.v1.PdusessionNotAdmittedSNmodResponse
	393, // 324: xnap.v1.SnodeModificationRequestAcknowledgeIEsValue.id_admitted_split_srb:type_name -> xnap.v1.SplitSrbsTypes
	393, // 325: xnap.v1.SnodeModificationRequestAcknowledgeIEsValue.id_admitted_split_srbrelease:type_name -> xnap.v1.SplitSrbsTypes
	364, // 326: xnap.v1.SnodeModificationRequestAcknowledgeIEsValue.id_criticality_diagnostics:type_name -> xnap.v1.CriticalityDiagnostics
	331, // 327: xnap.v1.SnodeModificationRequestAcknowledgeIEsValue.id_location_information_sn:type_name -> xnap.v1.TargetCGi
	398, // 328: xnap.v1.SnodeModificationRequestAcknowledgeIEsValue.id_mr_dc_resource_coordination_info:type_name -> xnap.v1.MrDCResourceCoordinationInfo
	116, // 329: xnap.v1.SnodeModificationRequestAcknowledgeIEsValue.id_pdusession_data_forwarding_snmod_response:type_name -> xnap.v1.PdusessionDataForwardingSNmodResponse
	406, // 330: xnap.v1.SnodeModificationRequestAcknowledgeIEsValue.id_rrcconfig_indication:type_name -> xnap.v1.RrcconfigIndication
	1,   // 331: xnap.v1.SnodeModificationRequestAcknowledgeIEsValue.id_available_fast_mcgrecovery_via_srb3:type_name -> xnap.v1.AvailableFastMcgrecoveryViaSrb3
	3,   // 332: xnap.v1.SnodeModificationRequestAcknowledgeIEsValue.id_release_fast_mcgrecovery_via_srb3:type_name -> xnap.v1.ReleaseFastMcgrecoveryViaSrb3
	407, // 333: xnap.v1.SnodeModificationRequestAcknowledgeIEsValue.id_direct_forwarding_path_availability:type_name -> xnap.v1.DirectForwardingPathAvailability
	343, // 334: xnap.v1.SnodeModificationRequestAcknowledgeIEs.id:type_name -> xnap.v1.ProtocolIeID
	344, // 335: xnap.v1.SnodeModificationRequestAcknowledgeIEs.criticality:type_name -> xnap.v1.Criticality
	100, // 336: xnap.v1.SnodeModificationRequestAcknowledgeIEs.value:type_name -> xnap.v1.SnodeModificationRequestAcknowledgeIEsValue
	101, // 337: xnap.v1.SnodeModificationRequestAcknowledge.protocol_ies:type_name -> xnap.v1.SnodeModificationRequestAcknowledgeIEs
	359, // 338: xnap.v1.PdusessionAdmittedSNmodResponseExtIes.value:type_name -> google.protobuf.Empty
	105, // 339: xnap.v1.PdusessionAdmittedSNmodResponse.pdu_session_resources_admitted_to_be_added:type_name -> xnap.v1.PdusessionAdmittedToBeAddedSnmodResponse
	108, // 340: xnap.v1.PdusessionAdmittedSNmodResponse.pdu_session_resources_admitted_to_be_modified:type_name -> xnap.v1.PdusessionAdmittedToBeModifiedSnmodResponse
	112, // 341: xnap.v1.PdusessionAdmittedSNmodResponse.pdu_session_resources_admitted_to_be_released:type_name -> xnap.v1.PdusessionAdmittedToBeReleasedSnmodResponse
	103, // 342: xnap.v1.PdusessionAdmittedSNmodResponse.i_e_extension:type_name -> xnap.v1.PdusessionAdmittedSNmodResponseExtIes
	107, // 343: xnap.v1.PdusessionAdmittedToBeAddedSnmodResponse.value:type_name -> xnap.v1.PdusessionAdmittedToBeAddedSnmodResponseItem
	359, // 344: xnap.v1.PdusessionAdmittedToBeAddedSnmodResponseItemExtIes.value:type_name -> google.protobuf.Empty
	401, // 345: xnap.v1.PdusessionAdmittedToBeAddedSnmodResponseItem.pdu_session_id:type_name -> xnap.v1.PdusessionID
	408, // 346: xnap.v1.PdusessionAdmittedToBeAddedSnmodResponseItem.sn_terminated:type_name -> xnap.v1.PdusessionResourceSetupResponseInfoSNterminated
	409, // 347: xnap.v1.PdusessionAdmittedToBeAddedSnmodResponseItem.mn_terminated:type_name -> xnap.v1.PdusessionResourceSetupResponseInfoMNterminated
	106, // 348: xnap.v1.PdusessionAdmittedToBeAddedSnmodResponseItem.i_e_extension:type_name -> xnap.v1.PdusessionAdmittedToBeAddedSnmodResponseItemExtIes
	110, // 349: xnap.v1.PdusessionAdmittedToBeModifiedSnmodResponse.value:type_name -> xnap.v1.PdusessionAdmittedToBeModifiedSnmodResponseItem
	359, // 350: xnap.v1.PdusessionAdmittedToBeModifiedSnmodResponseItemExtIes.value:type_name -> google.protobuf.Empty
	401, // 351: xnap.v1.PdusessionAdmittedToBeModifiedSnmodResponseItem.pdu_session_id:type_name -> xnap.v1.PdusessionID
	418, // 352: xnap.v1.PdusessionAdmittedToBeModifiedSnmodResponseItem.sn_terminated:type_name -> xnap.v1.PdusessionResourceModificationResponseInfoSNterminated
	419, // 353: xnap.v1.PdusessionAdmittedToBeModifiedSnmodResponseItem.mn_terminated:type_name -> xnap.v1.PdusessionResourceModificationResponseInfoMNterminated
	109, // 354: xnap.v1.PdusessionAdmittedToBeModifiedSnmodResponseItem.i_e_extension:type_name -> xnap.v1.PdusessionAdmittedToBeModifiedSnmodResponseItemExtIes
	359, // 355: xnap.v1.PdusessionAdmittedToBeReleasedSnmodResponseExtIes.value:type_name -> google.protobuf.Empty
	420, // 356: xnap.v1.PdusessionAdmittedToBeReleasedSnmodResponse.sn_terminated:type_name -> xnap.v1.PdusessionListwithDataForwardingRequest
	417, // 357: xnap.v1.PdusessionAdmittedToBeReleasedSnmodResponse.mn_terminated:type_name -> xnap.v1.PdusessionListwithCause
	111, // 358: xnap.v1.PdusessionAdmittedToBeReleasedSnmodResponse.i_e_extension:type_name -> xnap.v1.PdusessionAdmittedToBeReleasedSnmodResponseExtIes
	359, // 359: xnap.v1.PdusessionNotAdmittedSNmodResponseExtIes.value:type_name -> google.protobuf.Empty
	421, // 360: xnap.v1.PdusessionNotAdmittedSNmodResponse.pdu_session_list:type_name -> xnap.v1.PdusessionList
	113, // 361: xnap.v1.PdusessionNotAdmittedSNmodResponse.i_e_extension:type_name -> xnap.v1.PdusessionNotAdmittedSNmodResponseExtIes
	359, // 362: xnap.v1.PdusessionDataForwardingSNmodResponseExtIes.value:type_name -> google.protobuf.Empty
	420, // 363: xnap.v1.PdusessionDataForwardingSNmodResponse.sn_terminated:type_name -> xnap.v1.PdusessionListwithDataForwardingRequest
	115, // 364: xnap.v1.PdusessionDataForwardingSNmodResponse.i_e_extensions:type_name -> xnap.v1.PdusessionDataForwardingSNmodResponseExtIes
	329, // 365: xnap.v1.SnodeModificationRequestRejectIEsValue.id_m_ng_rannode_uexn_apid:type_name -> xnap.v1.NgRAnnodeUexnApid
	329, // 366: xnap.v1.SnodeModificationRequestRejectIEsValue.id_s_ng_rannode_uexn_apid:type_name -> xnap.v1.NgRAnnodeUexnApid
	330, // 367: xnap.v1.SnodeModificationRequestRejectIEsValue.id_cause:type_name -> xnap.v1.Cause
	364, // 368: xnap.v1.SnodeModificationRequestRejectIEsValue.id_criticality_diagnostics:type_name -> xnap.v1.CriticalityDiagnostics
	343, // 369: xnap.v1.SnodeModificationRequestRejectIEs.id:type_name -> xnap.v1.ProtocolIeID
	344, // 370: xnap.v1.SnodeModificationRequestRejectIEs.criticality:type_name -> xnap.v1.Criticality
	117, // 371: xnap.v1.SnodeModificationRequestRejectIEs.value:type_name -> xnap.v1.SnodeModificationRequestRejectIEsValue
	118, // 372: xnap.v1.SnodeModificationRequestReject.protocol_ies:type_name -> xnap.v1.SnodeModificationRequestRejectIEs
	329, // 373: xnap.v1.SnodeModificationRequiredIEsValue.id_m_ng_rannode_uexn_apid:type_name -> xnap.v1.NgRAnnodeUexnApid
	329, // 374: xnap.v1.SnodeModificationRequiredIEsValue.id_s_ng_rannode_uexn_apid:type_name -> xnap.v1.NgRAnnodeUexnApid
	330, // 375: xnap.v1.SnodeModificationRequiredIEsValue.id_cause:type_name -> xnap.v1.Cause
	410, // 376: xnap.v1.SnodeModificationRequiredIEsValue.id_pdcpchange_indication:type_name -> xnap.v1.PdcpchangeIndication
	123, // 377: xnap.v1.SnodeModificationRequiredIEsValue.id_pdusession_to_be_modified_snmod_required:type_name -> xnap.v1.PdusessionToBeModifiedSnmodRequired
	127, // 378: xnap.v1.SnodeModificationRequiredIEsValue.id_pdusession_to_be_released_snmod_required:type_name -> xnap.v1.PdusessionToBeReleasedSnmodRequired
	365, // 379: xnap.v1.SnodeModificationRequiredIEsValue.id_spare_drbids:type_name -> xnap.v1.DrbList
	422, // 380: xnap.v1.SnodeModificationRequiredIEsValue.id_required_number_of_drbids:type_name -> xnap.v1.DrbNumber
	331, // 381: xnap.v1.SnodeModificationRequiredIEsValue.id_location_information_sn:type_name -> xnap.v1.TargetCGi
	398, // 382: xnap.v1.SnodeModificationRequiredIEsValue.id_mr_dc_resource_coordination_info:type_name -> xnap.v1.MrDCResourceCoordinationInfo
	406, // 383: xnap.v1.SnodeModificationRequiredIEsValue.id_rrcconfig_indication:type_name -> xnap.v1.RrcconfigIndication
	1,   // 384: xnap.v1.SnodeModificationRequiredIEsValue.id_available_fast_mcgrecovery_via_srb3:type_name -> xnap.v1.AvailableFastMcgrecoveryViaSrb3
	3,   // 385: xnap.v1.SnodeModificationRequiredIEsValue.id_release_fast_mcgrecovery_via_srb3:type_name -> xnap.v1.ReleaseFastMcgrecoveryViaSrb3
	423, // 386: xnap.v1.SnodeModificationRequiredIEsValue.id_scgindicator:type_name -> xnap.v1.Scgindicator
	343, // 387: xnap.v1.SnodeModificationRequiredIEs.id:type_name -> xnap.v1.ProtocolIeID
	344, // 388: xnap.v1.SnodeModificationRequiredIEs.criticality:type_name -> xnap.v1.Criticality
	120, // 389: xnap.v1.SnodeModificationRequiredIEs.value:type_name -> xnap.v1.SnodeModificationRequiredIEsValue
	121, // 390: xnap.v1.SnodeModificationRequired.protocol_ies:type_name -> xnap.v1.SnodeModificationRequiredIEs
	125, // 391: xnap.v1.PdusessionToBeModifiedSnmodRequired.value:type_name -> xnap.v1.PdusessionToBeModifiedSnmodRequiredItem
	359, // 392: xnap.v1.PdusessionToBeModifiedSnmodRequiredItemExtIes.value:type_name -> google.protobuf.Empty
	401, // 393: xnap.v1.PdusessionToBeModifiedSnmodRequiredItem.pdu_session_id:type_name -> xnap.v1.PdusessionID
	424, // 394: xnap.v1.PdusessionToBeModifiedSnmodRequiredItem.sn_terminated:type_name -> xnap.v1.PdusessionResourceModRqdInfoSNterminated
	425, // 395: xnap.v1.PdusessionToBeModifiedSnmodRequiredItem.mn_terminated:type_name -> xnap.v1.PdusessionResourceModRqdInfoMNterminated
	124, // 396: xnap.v1.PdusessionToBeModifiedSnmodRequiredItem.i_e_extension:type_name -> xnap.v1.PdusessionToBeModifiedSnmodRequiredItemExtIes
	359, // 397: xnap.v1.PdusessionToBeReleasedSnmodRequiredExtIes.value:type_name -> google.protobuf.Empty
	420, // 398: xnap.v1.PdusessionToBeReleasedSnmodRequired.sn_terminated:type_name -> xnap.v1.PdusessionListwithDataForwardingRequest
	417, // 399: xnap.v1.PdusessionToBeReleasedSnmodRequired.mn_terminated:type_name -> xnap.v1.PdusessionListwithCause
	126, // 400: xnap.v1.PdusessionToBeReleasedSnmodRequired.i_e_extension:type_name -> xnap.v1.PdusessionToBeReleasedSnmodRequiredExtIes
	329, // 401: xnap.v1.SnodeModificationConfirmIEsValue.id_m_ng_rannode_uexn_apid:type_name -> xnap.v1.NgRAnnodeUexnApid
	329, // 402: xnap.v1.SnodeModificationConfirmIEsValue.id_s_ng_rannode_uexn_apid:type_name -> xnap.v1.NgRAnnodeUexnApid
	131, // 403: xnap.v1.SnodeModificationConfirmIEsValue.id_pdusession_admitted_mod_snmod_confirm:type_name -> xnap.v1.PdusessionAdmittedModSnmodConfirm
	135, // 404: xnap.v1.SnodeModificationConfirmIEsValue.id_pdusession_released_snmod_confirm:type_name -> xnap.v1.PdusessionReleasedSnmodConfirm
	365, // 405: xnap.v1.SnodeModificationConfirmIEsValue.id_additional_drbids:type_name -> xnap.v1.DrbList
	364, // 406: xnap.v1.SnodeModificationConfirmIEsValue.id_criticality_diagnostics:type_name -> xnap.v1.CriticalityDiagnostics
	398, // 407: xnap.v1.SnodeModificationConfirmIEsValue.id_mr_dc_resource_coordination_info:type_name -> xnap.v1.MrDCResourceCoordinationInfo
	343, // 408: xnap.v1.SnodeModificationConfirmIEs.id:type_name -> xnap.v1.ProtocolIeID
	344, // 409: xnap.v1.SnodeModificationConfirmIEs.criticality:type_name -> xnap.v1.Criticality
	128, // 410: xnap.v1.SnodeModificationConfirmIEs.value:type_name -> xnap.v1.SnodeModificationConfirmIEsValue
	129, // 411: xnap.v1.SnodeModificationConfirm.protocol_ies:type_name -> xnap.v1.SnodeModificationConfirmIEs
	133, // 412: xnap.v1.PdusessionAdmittedModSnmodConfirm.value:type_name -> xnap.v1.PdusessionAdmittedModSnmodConfirmItem
	359, // 413: xnap.v1.PdusessionAdmittedModSnmodConfirmItemExtIes.value:type_name -> google.protobuf.Empty
	401, // 414: xnap.v1.PdusessionAdmittedModSnmodConfirmItem.pdu_session_id:type_name -> xnap.v1.PdusessionID
	426, // 415: xnap.v1.PdusessionAdmittedModSnmodConfirmItem.sn_terminated:type_name -> xnap.v1.PdusessionResourceModConfirmInfoSNterminated
	427, // 416: xnap.v1.PdusessionAdmittedModSnmodConfirmItem.mn_terminated:type_name -> xnap.v1.PdusessionResourceModConfirmInfoMNterminated
	132, // 417: xnap.v1.PdusessionAdmittedModSnmodConfirmItem.i_e_extension:type_name -> xnap.v1.PdusessionAdmittedModSnmodConfirmItemExtIes
	359, // 418: xnap.v1.PdusessionAdmittedToBeReleasedSnmodConfirmExtIes.value:type_name -> google.protobuf.Empty
	428, // 419: xnap.v1.PdusessionReleasedSnmodConfirm.sn_terminated:type_name -> xnap.v1.PdusessionListwithDataForwardingFromTarget
	421, // 420: xnap.v1.PdusessionReleasedSnmodConfirm.mn_terminated:type_name -> xnap.v1.PdusessionList
	134, // 421: xnap.v1.PdusessionReleasedSnmodConfirm.i_e_extension:type_name -> xnap.v1.PdusessionAdmittedToBeReleasedSnmodConfirmExtIes
	329, // 422: xnap.v1.SnodeModificationRefuseIEsValue.id_m_ng_rannode_uexn_apid:type_name -> xnap.v1.NgRAnnodeUexnApid
	329, // 423: xnap.v1.SnodeModificationRefuseIEsValue.id_s_ng_rannode_uexn_apid:type_name -> xnap.v1.NgRAnnodeUexnApid
	330, // 424: xnap.v1.SnodeModificationRefuseIEsValue.id_cause:type_name -> xnap.v1.Cause
	364, // 425: xnap.v1.SnodeModificationRefuseIEsValue.id_criticality_diagnostics:type_name -> xnap.v1.CriticalityDiagnostics
	343, // 426: xnap.v1.SnodeModificationRefuseIEs.id:type_name -> xnap.v1.ProtocolIeID
	344, // 427: xnap.v1.SnodeModificationRefuseIEs.criticality:type_name -> xnap.v1.Criticality
	136, // 428: xnap.v1.SnodeModificationRefuseIEs.value:type_name -> xnap.v1.SnodeModificationRefuseIEsValue
	137, // 429: xnap.v1.SnodeModificationRefuse.protocol_ies:type_name -> xnap.v1.SnodeModificationRefuseIEs
	329, // 430: xnap.v1.SnodeReleaseRequestIEsValue.id_m_ng_rannode_uexn_apid:type_name -> xnap.v1.NgRAnnodeUexnApid
	329, // 431: xnap.v1.SnodeReleaseRequestIEsValue.id_s_ng_rannode_uexn_apid:type_name -> xnap.v1.NgRAnnodeUexnApid
	330, // 432: xnap.v1.SnodeReleaseRequestIEsValue.id_cause:type_name -> xnap.v1.Cause
	417, // 433: xnap.v1.SnodeReleaseRequestIEsValue.id_pdusession_to_be_released_rel_req:type_name -> xnap.v1.PdusessionListwithCause
	363, // 434: xnap.v1.SnodeReleaseRequestIEsValue.id_uecontext_kept_indicator:type_name -> xnap.v1.UecontextKeptIndicator
	365, // 435: xnap.v1.SnodeReleaseRequestIEsValue.id_drbs_transferred_to_mn:type_name -> xnap.v1.DrbList
	343, // 436: xnap.v1.SnodeReleaseRequestIEs.id:type_name -> xnap.v1.ProtocolIeID
	344, // 437: xnap.v1.SnodeReleaseRequestIEs.criticality:type_name -> xnap.v1.Criticality
	139, // 438: xnap.v1.SnodeReleaseRequestIEs.value:type_name -> xnap.v1.SnodeReleaseRequestIEsValue
	140, // 439: xnap.v1.SnodeReleaseRequest.protocol_ies:type_name -> xnap.v1.SnodeReleaseRequestIEs
	329, // 440: xnap.v1.SnodeReleaseRequestAcknowledgeIEsValue.id_m_ng_rannode_uexn_apid:type_name -> xnap.v1.NgRAnnodeUexnApid
	329, // 441: xnap.v1.SnodeReleaseRequestAcknowledgeIEsValue.id_s_ng_rannode_uexn_apid:type_name -> xnap.v1.NgRAnnodeUexnApid
	146, // 442: xnap.v1.SnodeReleaseRequestAcknowledgeIEsValue.id_pdusession_to_be_released_rel_req_ack:type_name -> xnap.v1.PdusessionToBeReleasedListRelReqAck
	364, // 443: xnap.v1.SnodeReleaseRequestAcknowledgeIEsValue.id_criticality_diagnostics:type_name -> xnap.v1.CriticalityDiagnostics
	343, // 444: xnap.v1.SnodeReleaseRequestAcknowledgeIEs.id:type_name -> xnap.v1.ProtocolIeID
	344, // 445: xnap.v1.SnodeReleaseRequestAcknowledgeIEs.criticality:type_name -> xnap.v1.Criticality
	142, // 446: xnap.v1.SnodeReleaseRequestAcknowledgeIEs.value:type_name -> xnap.v1.SnodeReleaseRequestAcknowledgeIEsValue
	143, // 447: xnap.v1.SnodeReleaseRequestAcknowledge.protocol_ies:type_name -> xnap.v1.SnodeReleaseRequestAcknowledgeIEs
	359, // 448: xnap.v1.PdusessionToBeReleasedListRelReqAckExtIes.value:type_name -> google.protobuf.Empty
	420, // 449: xnap.v1.PdusessionToBeReleasedListRelReqAck.pdu_sessions_to_be_released_list_snterminated:type_name -> xnap.v1.PdusessionListwithDataForwardingRequest
	145, // 450: xnap.v1.PdusessionToBeReleasedListRelReqAck.i_e_extensions:type_name -> xnap.v1.PdusessionToBeReleasedListRelReqAckExtIes
	329, // 451: xnap.v1.SnodeReleaseRejectIEsValue.id_m_ng_rannode_uexn_apid:type_name -> xnap.v1.NgRAnnodeUexnApid
	329, // 452: xnap.v1.SnodeReleaseRejectIEsValue.id_s_ng_rannode_uexn_apid:type_name -> xnap.v1.NgRAnnodeUexnApid
	330, // 453: xnap.v1.SnodeReleaseRejectIEsValue.id_cause:type_name -> xnap.v1.Cause
	364, // 454: xnap.v1.SnodeReleaseRejectIEsValue.id_criticality_diagnostics:type_name -> xnap.v1.CriticalityDiagnostics
	343, // 455: xnap.v1.SnodeReleaseRejectIEs.id:type_name -> xnap.v1.ProtocolIeID
	344, // 456: xnap.v1.SnodeReleaseRejectIEs.criticality:type_name -> xnap.v1.Criticality
	147, // 457: xnap.v1.SnodeReleaseRejectIEs.value:type_name -> xnap.v1.SnodeReleaseRejectIEsValue
	148, // 458: xnap.v1.SnodeReleaseReject.protocol_ies:type_name -> xnap.v1.SnodeReleaseRejectIEs
	329, // 459: xnap.v1.SnodeReleaseRequiredIEsValue.id_m_ng_rannode_uexn_apid:type_name -> xnap.v1.NgRAnnodeUexnApid
	329, // 460: xnap.v1.SnodeReleaseRequiredIEsValue.id_s_ng_rannode_uexn_apid:type_name -> xnap.v1.NgRAnnodeUexnApid
	154, // 461: xnap.v1.SnodeReleaseRequiredIEsValue.id_pdusession_to_be_released_list_rel_rqd:type_name -> xnap.v1.PdusessionToBeReleasedListRelRqd
	330, // 462: xnap.v1.SnodeReleaseRequiredIEsValue.id_cause:type_name -> xnap.v1.Cause
	343, // 463: xnap.v1.SnodeReleaseRequiredIEs.id:type_name -> xnap.v1.ProtocolIeID
	344, // 464: xnap.v1.SnodeReleaseRequiredIEs.criticality:type_name -> xnap.v1.Criticality
	150, // 465: xnap.v1.SnodeReleaseRequiredIEs.value:type_name -> xnap.v1.SnodeReleaseRequiredIEsValue
	151, // 466: xnap.v1.SnodeReleaseRequired.protocol_ies:type_name -> xnap.v1.SnodeReleaseRequiredIEs
	359, // 467: xnap.v1.PdusessionToBeReleasedListRelRqdExtIes.value:type_name -> google.protobuf.Empty
	420, // 468: xnap.v1.PdusessionToBeReleasedListRelRqd.pdu_sessions_to_be_released_list_snterminated:type_name -> xnap.v1.PdusessionListwithDataForwardingRequest
	153, // 469: xnap.v1.PdusessionToBeReleasedListRelRqd.i_e_extensions:type_name -> xnap.v1.PdusessionToBeReleasedListRelRqdExtIes
	329, // 470: xnap.v1.SnodeReleaseConfirmIEsValue.id_m_ng_rannode_uexn_apid:type_name -> xnap.v1.NgRAnnodeUexnApid
	329, // 471: xnap.v1.SnodeReleaseConfirmIEsValue.id_s_ng_rannode_uexn_apid:type_name -> xnap.v1.NgRAnnodeUexnApid
	159, // 472: xnap.v1.SnodeReleaseConfirmIEsValue.id_pdusession_released_list_rel_conf:type_name -> xnap.v1.PdusessionReleasedListRelConf
	364, // 473: xnap.v1.SnodeReleaseConfirmIEsValue.id_criticality_diagnostics:type_name -> xnap.v1.CriticalityDiagnostics
	343, // 474: xnap.v1.SnodeReleaseConfirmIEs.id:type_name -> xnap.v1.ProtocolIeID
	344, // 475: xnap.v1.SnodeReleaseConfirmIEs.criticality:type_name -> xnap.v1.Criticality
	155, // 476: xnap.v1.SnodeReleaseConfirmIEs.value:type_name -> xnap.v1.SnodeReleaseConfirmIEsValue
	156, // 477: xnap.v1.SnodeReleaseConfirm.protocol_ies:type_name -> xnap.v1.SnodeReleaseConfirmIEs
	359, // 478: xnap.v1.PdusessionReleasedListRelConfExtIes.value:type_name -> google.protobuf.Empty
	428, // 479: xnap.v1.PdusessionReleasedListRelConf.pdu_sessions_released_list_snterminated:type_name -> xnap.v1.PdusessionListwithDataForwardingFromTarget
	158, // 480: xnap.v1.PdusessionReleasedListRelConf.i_e_extensions:type_name -> xnap.v1.PdusessionReleasedListRelConfExtIes
	329, // 481: xnap.v1.SnodeCounterCheckRequestIEsValue.id_m_ng_rannode_uexn_apid:type_name -> xnap.v1.NgRAnnodeUexnApid
	329, // 482: xnap.v1.SnodeCounterCheckRequestIEsValue.id_s_ng_rannode_uexn_apid:type_name -> xnap.v1.NgRAnnodeUexnApid
	163, // 483: xnap.v1.SnodeCounterCheckRequestIEsValue.id_bearers_subject_to_counter_check:type_name -> xnap.v1.BearersSubjectToCounterCheckList
	343, // 484: xnap.v1.SnodeCounterCheckRequestIEs.id:type_name -> xnap.v1.ProtocolIeID
	344, // 485: xnap.v1.SnodeCounterCheckRequestIEs.criticality:type_name -> xnap.v1.Criticality
	160, // 486: xnap.v1.SnodeCounterCheckRequestIEs.value:type_name -> xnap.v1.SnodeCounterCheckRequestIEsValue
	161, // 487: xnap.v1.SnodeCounterCheckRequest.protocol_ies:type_name -> xnap.v1.SnodeCounterCheckRequestIEs
	165, // 488: xnap.v1.BearersSubjectToCounterCheckList.value:type_name -> xnap.v1.BearersSubjectToCounterCheckItem
	359, // 489: xnap.v1.BearersSubjectToCounterCheckItemExtIes.value:type_name -> google.protobuf.Empty
	429, // 490: xnap.v1.BearersSubjectToCounterCheckItem.drb_id:type_name -> xnap.v1.DrbID
	164, // 491: xnap.v1.BearersSubjectToCounterCheckItem.i_e_extensions:type_name -> xnap.v1.BearersSubjectToCounterCheckItemExtIes
	329, // 492: xnap.v1.SnodeChangeRequiredIEsValue.id_m_ng_rannode_uexn_apid:type_name -> xnap.v1.NgRAnnodeUexnApid
	329, // 493: xnap.v1.SnodeChangeRequiredIEsValue.id_s_ng_rannode_uexn_apid:type_name -> xnap.v1.NgRAnnodeUexnApid
	360, // 494: xnap.v1.SnodeChangeRequiredIEsValue.id_target_s_ng_rannode_id:type_name -> xnap.v1.GlobalNgRAnnodeID
	330, // 495: xnap.v1.SnodeChangeRequiredIEsValue.id_cause:type_name -> xnap.v1.Cause
	169, // 496: xnap.v1.SnodeChangeRequiredIEsValue.id_pdusession_snchange_required_list:type_name -> xnap.v1.PdusessionSNchangeRequiredList
	343, // 497: xnap.v1.SnodeChangeRequiredIEs.id:type_name -> xnap.v1.ProtocolIeID
	344, // 498: xnap.v1.SnodeChangeRequiredIEs.criticality:type_name -> xnap.v1.Criticality
	166, // 499: xnap.v1.SnodeChangeRequiredIEs.value:type_name -> xnap.v1.SnodeChangeRequiredIEsValue
	167, // 500: xnap.v1.SnodeChangeRequired.protocol_ies:type_name -> xnap.v1.SnodeChangeRequiredIEs
	171, // 501: xnap.v1.PdusessionSNchangeRequiredList.value:type_name -> xnap.v1.PdusessionSNchangeRequiredItem
	359, // 502: xnap.v1.PdusessionSNchangeRequiredItemExtIes.value:type_name -> google.protobuf.Empty
	401, // 503: xnap.v1.PdusessionSNchangeRequiredItem.pdu_session_id:type_name -> xnap.v1.PdusessionID
	430, // 504: xnap.v1.PdusessionSNchangeRequiredItem.sn_terminated:type_name -> xnap.v1.PdusessionResourceChangeRequiredInfoSNterminated
	431, // 505: xnap.v1.PdusessionSNchangeRequiredItem.mn_terminated:type_name -> xnap.v1.PdusessionResourceChangeRequiredInfoMNterminated
	170, // 506: xnap.v1.PdusessionSNchangeRequiredItem.i_e_extension:type_name -> xnap.v1.PdusessionSNchangeRequiredItemExtIes
	329, // 507: xnap.v1.SnodeChangeConfirmIEsValue.id_m_ng_rannode_uexn_apid:type_name -> xnap.v1.NgRAnnodeUexnApid
	329, // 508: xnap.v1.SnodeChangeConfirmIEsValue.id_s_ng_rannode_uexn_apid:type_name -> xnap.v1.NgRAnnodeUexnApid
	175, // 509: xnap.v1.SnodeChangeConfirmIEsValue.id_pdusession_snchange_confirm_list:type_name -> xnap.v1.PdusessionSNchangeConfirmList
	364, // 510: xnap.v1.SnodeChangeConfirmIEsValue.id_criticality_diagnostics:type_name -> xnap.v1.CriticalityDiagnostics
	343, // 511: xnap.v1.SnodeChangeConfirmIEs.id:type_name -> xnap.v1.ProtocolIeID
	344, // 512: xnap.v1.SnodeChangeConfirmIEs.criticality:type_name -> xnap.v1.Criticality
	172, // 513: xnap.v1.SnodeChangeConfirmIEs.value:type_name -> xnap.v1.SnodeChangeConfirmIEsValue
	173, // 514: xnap.v1.SnodeChangeConfirm.protocol_ies:type_name -> xnap.v1.SnodeChangeConfirmIEs
	177, // 515: xnap.v1.PdusessionSNchangeConfirmList.value:type_name -> xnap.v1.PdusessionSNchangeConfirmItem
	359, // 516: xnap.v1.PdusessionSNchangeConfirmItemExtIes.value:type_name -> google.protobuf.Empty
	401, // 517: xnap.v1.PdusessionSNchangeConfirmItem.pdu_session_id:type_name -> xnap.v1.PdusessionID
	432, // 518: xnap.v1.PdusessionSNchangeConfirmItem.sn_terminated:type_name -> xnap.v1.PdusessionResourceChangeConfirmInfoSNterminated
	433, // 519: xnap.v1.PdusessionSNchangeConfirmItem.mn_terminated:type_name -> xnap.v1.PdusessionResourceChangeConfirmInfoMNterminated
	176, // 520: xnap.v1.PdusessionSNchangeConfirmItem.i_e_extension:type_name -> xnap.v1.PdusessionSNchangeConfirmItemExtIes
	329, // 521: xnap.v1.SnodeChangeRefuseIEsValue.id_m_ng_rannode_uexn_apid:type_name -> xnap.v1.NgRAnnodeUexnApid
	329, // 522: xnap.v1.SnodeChangeRefuseIEsValue.id_s_ng_rannode_uexn_apid:type_name -> xnap.v1.NgRAnnodeUexnApid
	330, // 523: xnap.v1.SnodeChangeRefuseIEsValue.id_cause:type_name -> xnap.v1.Cause
	364, // 524: xnap.v1.SnodeChangeRefuseIEsValue.id_criticality_diagnostics:type_name -> xnap.v1.CriticalityDiagnostics
	343, // 525: xnap.v1.SnodeChangeRefuseIEs.id:type_name -> xnap.v1.ProtocolIeID
	344, // 526: xnap.v1.SnodeChangeRefuseIEs.criticality:type_name -> xnap.v1.Criticality
	178, // 527: xnap.v1.SnodeChangeRefuseIEs.value:type_name -> xnap.v1.SnodeChangeRefuseIEsValue
	179, // 528: xnap.v1.SnodeChangeRefuse.protocol_ies:type_name -> xnap.v1.SnodeChangeRefuseIEs
	329, // 529: xnap.v1.RrctransferIEsValue.id_m_ng_rannode_uexn_apid:type_name -> xnap.v1.NgRAnnodeUexnApid
	329, // 530: xnap.v1.RrctransferIEsValue.id_s_ng_rannode_uexn_apid:type_name -> xnap.v1.NgRAnnodeUexnApid
	185, // 531: xnap.v1.RrctransferIEsValue.id_split_srb_rrctransfer:type_name -> xnap.v1.SplitSrbRRctransfer
	187, // 532: xnap.v1.RrctransferIEsValue.id_uereport_rrctransfer:type_name -> xnap.v1.UereportRrctransfer
	189, // 533: xnap.v1.RrctransferIEsValue.id_fast_mcgrecovery_rrctransfer_sn_to_mn:type_name -> xnap.v1.FastMcgrecoveryRrctransfer
	189, // 534: xnap.v1.RrctransferIEsValue.id_fast_mcgrecovery_rrctransfer_mn_to_sn:type_name -> xnap.v1.FastMcgrecoveryRrctransfer
	343, // 535: xnap.v1.RrctransferIEs.id:type_name -> xnap.v1.ProtocolIeID
	344, // 536: xnap.v1.RrctransferIEs.criticality:type_name -> xnap.v1.Criticality
	181, // 537: xnap.v1.RrctransferIEs.value:type_name -> xnap.v1.RrctransferIEsValue
	182, // 538: xnap.v1.Rrctransfer.protocol_ies:type_name -> xnap.v1.RrctransferIEs
	359, // 539: xnap.v1.SplitSrbRRctransferExtIes.value:type_name -> google.protobuf.Empty
	4,   // 540: xnap.v1.SplitSrbRRctransfer.srb_type:type_name -> xnap.v1.SrbTypeSplitSrbrrctransfer
	434, // 541: xnap.v1.SplitSrbRRctransfer.delivery_status:type_name -> xnap.v1.DeliveryStatus
	184, // 542: xnap.v1.SplitSrbRRctransfer.i_e_extensions:type_name -> xnap.v1.SplitSrbRRctransferExtIes
	359, // 543: xnap.v1.UereportRrctransferExtIes.value:type_name -> google.protobuf.Empty
	186, // 544: xnap.v1.UereportRrctransfer.i_e_extensions:type_name -> xnap.v1.UereportRrctransferExtIes
	359, // 545: xnap.v1.FastMcgrecoveryRrctransferExtIes.value:type_name -> google.protobuf.Empty
	188, // 546: xnap.v1.FastMcgrecoveryRrctransfer.i_e_extensions:type_name -> xnap.v1.FastMcgrecoveryRrctransferExtIes
	329, // 547: xnap.v1.NotificationControlIndicationIEsValue.id_m_ng_rannode_uexn_apid:type_name -> xnap.v1.NgRAnnodeUexnApid
	329, // 548: xnap.v1.NotificationControlIndicationIEsValue.id_s_ng_rannode_uexn_apid:type_name -> xnap.v1.NgRAnnodeUexnApid
	193, // 549: xnap.v1.NotificationControlIndicationIEsValue.id_pdusession_resources_notify_list:type_name -> xnap.v1.PdusessionResourcesNotifyList
	343, // 550: xnap.v1.NotificationControlIndicationIEs.id:type_name -> xnap.v1.ProtocolIeID
	344, // 551: xnap.v1.NotificationControlIndicationIEs.criticality:type_name -> xnap.v1.Criticality
	190, // 552: xnap.v1.NotificationControlIndicationIEs.value:type_name -> xnap.v1.NotificationControlIndicationIEsValue
	191, // 553: xnap.v1.NotificationControlIndication.protocol_ies:type_name -> xnap.v1.NotificationControlIndicationIEs
	195, // 554: xnap.v1.PdusessionResourcesNotifyList.value:type_name -> xnap.v1.PdusessionResourcesNotifyItem
	359, // 555: xnap.v1.PdusessionResourcesNotifyItemExtIes.value:type_name -> google.protobuf.Empty
	401, // 556: xnap.v1.PdusessionResourcesNotifyItem.pdu_session_id:type_name -> xnap.v1.PdusessionID
	435, // 557: xnap.v1.PdusessionResourcesNotifyItem.qos_flows_notification_contr_ind_info:type_name -> xnap.v1.QoSflowNotificationControlIndicationInfo
	194, // 558: xnap.v1.PdusessionResourcesNotifyItem.i_e_extensions:type_name -> xnap.v1.PdusessionResourcesNotifyItemExtIes
	329, // 559: xnap.v1.ActivityNotificationIEsValue.id_m_ng_rannode_uexn_apid:type_name -> xnap.v1.NgRAnnodeUexnApid
	329, // 560: xnap.v1.ActivityNotificationIEsValue.id_s_ng_rannode_uexn_apid:type_name -> xnap.v1.NgRAnnodeUexnApid
	436, // 561: xnap.v1.ActivityNotificationIEsValue.id_user_plane_traffic_activity_report:type_name -> xnap.v1.UserPlaneTrafficActivityReport
	199, // 562: xnap.v1.ActivityNotificationIEsValue.id_pdusession_resources_activity_notify_list:type_name -> xnap.v1.PdusessionResourcesActivityNotifyList
	437, // 563: xnap.v1.ActivityNotificationIEsValue.id_ranpaging_failure:type_name -> xnap.v1.RanpagingFailure
	343, // 564: xnap.v1.ActivityNotificationIEs.id:type_name -> xnap.v1.ProtocolIeID
	344, // 565: xnap.v1.ActivityNotificationIEs.criticality:type_name -> xnap.v1.Criticality
	196, // 566: xnap.v1.ActivityNotificationIEs.value:type_name -> xnap.v1.ActivityNotificationIEsValue
	197, // 567: xnap.v1.ActivityNotification.protocol_ies:type_name -> xnap.v1.ActivityNotificationIEs
	201, // 568: xnap.v1.PdusessionResourcesActivityNotifyList.value:type_name -> xnap.v1.PdusessionResourcesActivityNotifyItem
	359, // 569: xnap.v1.PdusessionResourcesActivityNotifyItemExtIes.value:type_name -> google.protobuf.Empty
	401, // 570: xnap.v1.PdusessionResourcesActivityNotifyItem.pdu_session_id:type_name -> xnap.v1.PdusessionID
	436, // 571: xnap.v1.PdusessionResourcesActivityNotifyItem.pdu_session_level_upactivityreport:type_name -> xnap.v1.UserPlaneTrafficActivityReport
	202, // 572: xnap.v1.PdusessionResourcesActivityNotifyItem.qos_flows_activity_notify_list:type_name -> xnap.v1.QoSflowsActivityNotifyList
	200, // 573: xnap.v1.PdusessionResourcesActivityNotifyItem.i_e_extensions:type_name -> xnap.v1.PdusessionResourcesActivityNotifyItemExtIes
	204, // 574: xnap.v1.QoSflowsActivityNotifyList.value:type_name -> xnap.v1.QoSflowsActivityNotifyItem
	359, // 575: xnap.v1.QoSflowsActivityNotifyItemExtIes.value:type_name -> google.protobuf.Empty
	438, // 576: xnap.v1.QoSflowsActivityNotifyItem.qos_flow_identifier:type_name -> xnap.v1.QoSflowIdentifier
	436, // 577: xnap.v1.QoSflowsActivityNotifyItem.pdu_session_level_upactivityreport:type_name -> xnap.v1.UserPlaneTrafficActivityReport
	203, // 578: xnap.v1.QoSflowsActivityNotifyItem.i_e_extensions:type_name -> xnap.v1.QoSflowsActivityNotifyItemExtIes
	360, // 579: xnap.v1.XnSetupRequestIEsValue.id_global_ng_ran_node_id:type_name -> xnap.v1.GlobalNgRAnnodeID
	439, // 580: xnap.v1.XnSetupRequestIEsValue.id_taisupport_list:type_name -> xnap.v1.TaisupportList
	440, // 581: xnap.v1.XnSetupRequestIEsValue.id_amf_region_information:type_name -> xnap.v1.AmfRegionInformation
	441, // 582: xnap.v1.XnSetupRequestIEsValue.id_list_of_served_cells_nr:type_name -> xnap.v1.ServedCellsNR
	442, // 583: xnap.v1.XnSetupRequestIEsValue.id_list_of_served_cells_e_utra:type_name -> xnap.v1.ServedCellsEUTra
	443, // 584: xnap.v1.XnSetupRequestIEsValue.id_interface_instance_indication:type_name -> xnap.v1.InterfaceInstanceIndication
	444, // 585: xnap.v1.XnSetupRequestIEsValue.id_tnlconfiguration_info:type_name -> xnap.v1.TnlconfigurationInfo
	445, // 586: xnap.v1.XnSetupRequestIEsValue.id_partial_list_indicator_nr:type_name -> xnap.v1.PartialListIndicator
	446, // 587: xnap.v1.XnSetupRequestIEsValue.id_cell_and_capacity_assistance_info_nr:type_name -> xnap.v1.CellAndCapacityAssistanceInfoNR
	445, // 588: xnap.v1.XnSetupRequestIEsValue.id_partial_list_indicator_eutra:type_name -> xnap.v1.PartialListIndicator
	447, // 589: xnap.v1.XnSetupRequestIEsValue.id_cell_and_capacity_assistance_info_eutra:type_name -> xnap.v1.CellAndCapacityAssistanceInfoEUtra
	344, // 590: xnap.v1.XnSetupRequestIEs.criticality:type_name -> xnap.v1.Criticality
	205, // 591: xnap.v1.XnSetupRequestIEs.value:type_name -> xnap.v1.XnSetupRequestIEsValue
	206, // 592: xnap.v1.XnSetupRequest.protocol_ies:type_name -> xnap.v1.XnSetupRequestIEs
	360, // 593: xnap.v1.XnSetupResponseIEsValue.id_global_ng_ran_node_id:type_name -> xnap.v1.GlobalNgRAnnodeID
	439, // 594: xnap.v1.XnSetupResponseIEsValue.id_taisupport_list:type_name -> xnap.v1.TaisupportList
	441, // 595: xnap.v1.XnSetupResponseIEsValue.id_list_of_served_cells_nr:type_name -> xnap.v1.ServedCellsNR
	442, // 596: xnap.v1.XnSetupResponseIEsValue.id_list_of_served_cells_e_utra:type_name -> xnap.v1.ServedCellsEUTra
	364, // 597: xnap.v1.XnSetupResponseIEsValue.id_criticality_diagnostics:type_name -> xnap.v1.CriticalityDiagnostics
	440, // 598: xnap.v1.XnSetupResponseIEsValue.id_amf_region_information:type_name -> xnap.v1.AmfRegionInformation
	443, // 599: xnap.v1.XnSetupResponseIEsValue.id_interface_instance_indication:type_name -> xnap.v1.InterfaceInstanceIndication
	444, // 600: xnap.v1.XnSetupResponseIEsValue.id_tnlconfiguration_info:type_name -> xnap.v1.TnlconfigurationInfo
	445, // 601: xnap.v1.XnSetupResponseIEsValue.id_partial_list_indicator_nr:type_name -> xnap.v1.PartialListIndicator
	446, // 602: xnap.v1.XnSetupResponseIEsValue.id_cell_and_capacity_assistance_info_nr:type_name -> xnap.v1.CellAndCapacityAssistanceInfoNR
	445, // 603: xnap.v1.XnSetupResponseIEsValue.id_partial_list_indicator_eutra:type_name -> xnap.v1.PartialListIndicator
	447, // 604: xnap.v1.XnSetupResponseIEsValue.id_cell_and_capacity_assistance_info_eutra:type_name -> xnap.v1.CellAndCapacityAssistanceInfoEUtra
	343, // 605: xnap.v1.XnSetupResponseIEs.id:type_name -> xnap.v1.ProtocolIeID
	344, // 606: xnap.v1.XnSetupResponseIEs.criticality:type_name -> xnap.v1.Criticality
	208, // 607: xnap.v1.XnSetupResponseIEs.value:type_name -> xnap.v1.XnSetupResponseIEsValue
	209, // 608: xnap.v1.XnSetupResponse.protocol_ies:type_name -> xnap.v1.XnSetupResponseIEs
	330, // 609: xnap.v1.XnSetupFailureIEsValue.id_cause:type_name -> xnap.v1.Cause
	448, // 610: xnap.v1.XnSetupFailureIEsValue.id_time_to_wait:type_name -> xnap.v1.TimeToWait
	364, // 611: xnap.v1.XnSetupFailureIEsValue.id_criticality_diagnostics:type_name -> xnap.v1.CriticalityDiagnostics
	443, // 612: xnap.v1.XnSetupFailureIEsValue.id_interface_instance_indication:type_name -> xnap.v1.InterfaceInstanceIndication
	449, // 613: xnap.v1.XnSetupFailureIEsValue.id_message_oversize_notification:type_name -> xnap.v1.MessageOversizeNotification
	343, // 614: xnap.v1.XnSetupFailureIEs.id:type_name -> xnap.v1.ProtocolIeID
	344, // 615: xnap.v1.XnSetupFailureIEs.criticality:type_name -> xnap.v1.Criticality
	211, // 616: xnap.v1.XnSetupFailureIEs.value:type_name -> xnap.v1.XnSetupFailureIEsValue
	212, // 617: xnap.v1.XnSetupFailure.protocol_ies:type_name -> xnap.v1.XnSetupFailureIEs
	439, // 618: xnap.v1.NgrannodeConfigurationUpdateIEsValue.id_taisupport_list:type_name -> xnap.v1.TaisupportList
	222, // 619: xnap.v1.NgrannodeConfigurationUpdateIEsValue.id_configuration_update_initiating_node_choice:type_name -> xnap.v1.ConfigurationUpdateInitiatingNodeChoice
	450, // 620: xnap.v1.NgrannodeConfigurationUpdateIEsValue.id_tnla_to_add_list:type_name -> xnap.v1.TnlaToAddList
	451, // 621: xnap.v1.NgrannodeConfigurationUpdateIEsValue.id_tnla_to_remove_list:type_name -> xnap.v1.TnlaToRemoveList
	452, // 622: xnap.v1.NgrannodeConfigurationUpdateIEsValue.id_tnla_to_update_list:type_name -> xnap.v1.TnlaToUpdateList
	360, // 623: xnap.v1.NgrannodeConfigurationUpdateIEsValue.id_global_ng_ran_node_id:type_name -> xnap.v1.GlobalNgRAnnodeID
	440, // 624: xnap.v1.NgrannodeConfigurationUpdateIEsValue.id_amf_region_information_to_add:type_name -> xnap.v1.AmfRegionInformation
	440, // 625: xnap.v1.NgrannodeConfigurationUpdateIEsValue.id_amf_region_information_to_delete:type_name -> xnap.v1.AmfRegionInformation
	443, // 626: xnap.v1.NgrannodeConfigurationUpdateIEsValue.id_interface_instance_indication:type_name -> xnap.v1.InterfaceInstanceIndication
	444, // 627: xnap.v1.NgrannodeConfigurationUpdateIEsValue.id_tnlconfiguration_info:type_name -> xnap.v1.TnlconfigurationInfo
	343, // 628: xnap.v1.NgrannodeConfigurationUpdateIEs.id:type_name -> xnap.v1.ProtocolIeID
	344, // 629: xnap.v1.NgrannodeConfigurationUpdateIEs.criticality:type_name -> xnap.v1.Criticality
	214, // 630: xnap.v1.NgrannodeConfigurationUpdateIEs.value:type_name -> xnap.v1.NgrannodeConfigurationUpdateIEsValue
	215, // 631: xnap.v1.NgrannodeConfigurationUpdate.protocol_ies:type_name -> xnap.v1.NgrannodeConfigurationUpdateIEs
	453, // 632: xnap.v1.ConfigurationUpdategNbValue.id_served_cells_to_update_nr:type_name -> xnap.v1.ServedCellsToUpdateNR
	454, // 633: xnap.v1.ConfigurationUpdategNbValue.id_cell_assistance_info_nr:type_name -> xnap.v1.CellAssistanceInfoNR
	455, // 634: xnap.v1.ConfigurationUpdategNbValue.id_cell_assistance_info_eutra:type_name -> xnap.v1.CellAssistanceInfoEUtra
	343, // 635: xnap.v1.ConfigurationUpdategNb.id:type_name -> xnap.v1.ProtocolIeID
	344, // 636: xnap.v1.ConfigurationUpdategNb.criticality:type_name -> xnap.v1.Criticality
	217, // 637: xnap.v1.ConfigurationUpdategNb.value:type_name -> xnap.v1.ConfigurationUpdategNbValue
	456, // 638: xnap.v1.ConfigurationUpdatengeNbValue.id_served_cells_to_update_e_utra:type_name -> xnap.v1.ServedCellsToUpdateEUTra
	454, // 639: xnap.v1.ConfigurationUpdatengeNbValue.id_cell_assistance_info_nr:type_name -> xnap.v1.CellAssistanceInfoNR
	455, // 640: xnap.v1.ConfigurationUpdatengeNbValue.id_cell_assistance_info_eutra:type_name -> xnap.v1.CellAssistanceInfoEUtra
	343, // 641: xnap.v1.ConfigurationUpdatengeNb.id:type_name -> xnap.v1.ProtocolIeID
	344, // 642: xnap.v1.ConfigurationUpdatengeNb.criticality:type_name -> xnap.v1.Criticality
	219, // 643: xnap.v1.ConfigurationUpdatengeNb.value:type_name -> xnap.v1.ConfigurationUpdatengeNbValue
	359, // 644: xnap.v1.ServedCellsToUpdateInitiatingNodeChoiceExtIes.value:type_name -> google.protobuf.Empty
	218, // 645: xnap.v1.ConfigurationUpdateInitiatingNodeChoice.g_nb:type_name -> xnap.v1.ConfigurationUpdategNb
	220, // 646: xnap.v1.ConfigurationUpdateInitiatingNodeChoice.ng_e_nb:type_name -> xnap.v1.ConfigurationUpdatengeNb
	221, // 647: xnap.v1.ConfigurationUpdateInitiatingNodeChoice.choice_extension:type_name -> xnap.v1.ServedCellsToUpdateInitiatingNodeChoiceExtIes
	227, // 648: xnap.v1.NgrannodeConfigurationUpdateAcknowledgeIEsValue.id_responding_node_type_config_update_ack:type_name -> xnap.v1.RespondingNodeTypeConfigUpdateAck
	457, // 649: xnap.v1.NgrannodeConfigurationUpdateAcknowledgeIEsValue.id_tnla_setup_list:type_name -> xnap.v1.TnlaSetupList
	458, // 650: xnap.v1.NgrannodeConfigurationUpdateAcknowledgeIEsValue.id_tnla_failed_to_setup_list:type_name -> xnap.v1.TnlaFailedToSetupList
	364, // 651: xnap.v1.NgrannodeConfigurationUpdateAcknowledgeIEsValue.id_criticality_diagnostics:type_name -> xnap.v1.CriticalityDiagnostics
	443, // 652: xnap.v1.NgrannodeConfigurationUpdateAcknowledgeIEsValue.id_interface_instance_indication:type_name -> xnap.v1.InterfaceInstanceIndication
	444, // 653: xnap.v1.NgrannodeConfigurationUpdateAcknowledgeIEsValue.id_tnlconfiguration_info:type_name -> xnap.v1.TnlconfigurationInfo
	343, // 654: xnap.v1.NgrannodeConfigurationUpdateAcknowledgeIEs.id:type_name -> xnap.v1.ProtocolIeID
	344, // 655: xnap.v1.NgrannodeConfigurationUpdateAcknowledgeIEs.criticality:type_name -> xnap.v1.Criticality
	223, // 656: xnap.v1.NgrannodeConfigurationUpdateAcknowledgeIEs.value:type_name -> xnap.v1.NgrannodeConfigurationUpdateAcknowledgeIEsValue
	224, // 657: xnap.v1.NgrannodeConfigurationUpdateAcknowledge.protocol_ies:type_name -> xnap.v1.NgrannodeConfigurationUpdateAcknowledgeIEs
	359, // 658: xnap.v1.RespondingNodeTypeConfigUpdateAckExtIes.value:type_name -> google.protobuf.Empty
	230, // 659: xnap.v1.RespondingNodeTypeConfigUpdateAck.ng_e_nb:type_name -> xnap.v1.RespondingNodeTypeConfigUpdateAckngeNb
	233, // 660: xnap.v1.RespondingNodeTypeConfigUpdateAck.g_nb:type_name -> xnap.v1.RespondingNodeTypeConfigUpdateAckgNb
	226, // 661: xnap.v1.RespondingNodeTypeConfigUpdateAck.choice_extension:type_name -> xnap.v1.RespondingNodeTypeConfigUpdateAckExtIes
	442, // 662: xnap.v1.RespondingNodeTypeConfigUpdateAckngeNbExtIesExtension.id_list_of_served_cells_e_utra:type_name -> xnap.v1.ServedCellsEUTra
	445, // 663: xnap.v1.RespondingNodeTypeConfigUpdateAckngeNbExtIesExtension.id_partial_list_indicator_eutra:type_name -> xnap.v1.PartialListIndicator
	447, // 664: xnap.v1.RespondingNodeTypeConfigUpdateAckngeNbExtIesExtension.id_cell_and_capacity_assistance_info_eutra:type_name -> xnap.v1.CellAndCapacityAssistanceInfoEUtra
	343, // 665: xnap.v1.RespondingNodeTypeConfigUpdateAckngeNbExtIes.id:type_name -> xnap.v1.ProtocolIeID
	344, // 666: xnap.v1.RespondingNodeTypeConfigUpdateAckngeNbExtIes.criticality:type_name -> xnap.v1.Criticality
	228, // 667: xnap.v1.RespondingNodeTypeConfigUpdateAckngeNbExtIes.extension:type_name -> xnap.v1.RespondingNodeTypeConfigUpdateAckngeNbExtIesExtension
	229, // 668: xnap.v1.RespondingNodeTypeConfigUpdateAckngeNb.i_e_extension:type_name -> xnap.v1.RespondingNodeTypeConfigUpdateAckngeNbExtIes
	445, // 669: xnap.v1.RespondingNodeTypeConfigUpdateAckgNbExtIesExtension.id_partial_list_indicator_nr:type_name -> xnap.v1.PartialListIndicator
	446, // 670: xnap.v1.RespondingNodeTypeConfigUpdateAckgNbExtIesExtension.id_cell_and_capacity_assistance_info_nr:type_name -> xnap.v1.CellAndCapacityAssistanceInfoNR
	343, // 671: xnap.v1.RespondingNodeTypeConfigUpdateAckgNbExtIes.id:type_name -> xnap.v1.ProtocolIeID
	344, // 672: xnap.v1.RespondingNodeTypeConfigUpdateAckgNbExtIes.criticality:type_name -> xnap.v1.Criticality
	231, // 673: xnap.v1.RespondingNodeTypeConfigUpdateAckgNbExtIes.extension:type_name -> xnap.v1.RespondingNodeTypeConfigUpdateAckgNbExtIesExtension
	441, // 674: xnap.v1.RespondingNodeTypeConfigUpdateAckgNb.served_nr_cells:type_name -> xnap.v1.ServedCellsNR
	232, // 675: xnap.v1.RespondingNodeTypeConfigUpdateAckgNb.i_e_extension:type_name -> xnap.v1.RespondingNodeTypeConfigUpdateAckgNbExtIes
	330, // 676: xnap.v1.NgrannodeConfigurationUpdateFailureIEsValue.id_cause:type_name -> xnap.v1.Cause
	448, // 677: xnap.v1.NgrannodeConfigurationUpdateFailureIEsValue.id_time_to_wait:type_name -> xnap.v1.TimeToWait
	364, // 678: xnap.v1.NgrannodeConfigurationUpdateFailureIEsValue.id_criticality_diagnostics:type_name -> xnap.v1.CriticalityDiagnostics
	443, // 679: xnap.v1.NgrannodeConfigurationUpdateFailureIEsValue.id_interface_instance_indication:type_name -> xnap.v1.InterfaceInstanceIndication
	343, // 680: xnap.v1.NgrannodeConfigurationUpdateFailureIEs.id:type_name -> xnap.v1.ProtocolIeID
	344, // 681: xnap.v1.NgrannodeConfigurationUpdateFailureIEs.criticality:type_name -> xnap.v1.Criticality
	234, // 682: xnap.v1.NgrannodeConfigurationUpdateFailureIEs.value:type_name -> xnap.v1.NgrannodeConfigurationUpdateFailureIEsValue
	235, // 683: xnap.v1.NgrannodeConfigurationUpdateFailure.protocol_ies:type_name -> xnap.v1.NgrannodeConfigurationUpdateFailureIEs
	241, // 684: xnap.v1.EUTraNRCellResourceCoordinationRequestIEsValue.id_initiating_node_type_resource_coord_request:type_name -> xnap.v1.InitiatingNodeTypeResourceCoordRequest
	443, // 685: xnap.v1.EUTraNRCellResourceCoordinationRequestIEsValue.id_interface_instance_indication:type_name -> xnap.v1.InterfaceInstanceIndication
	343, // 686: xnap.v1.EUTraNRCellResourceCoordinationRequestIEs.id:type_name -> xnap.v1.ProtocolIeID
	344, // 687: xnap.v1.EUTraNRCellResourceCoordinationRequestIEs.criticality:type_name -> xnap.v1.Criticality
	237, // 688: xnap.v1.EUTraNRCellResourceCoordinationRequestIEs.value:type_name -> xnap.v1.EUTraNRCellResourceCoordinationRequestIEsValue
	238, // 689: xnap.v1.EUTraNRCellResourceCoordinationRequest.protocol_ies:type_name -> xnap.v1.EUTraNRCellResourceCoordinationRequestIEs
	359, // 690: xnap.v1.InitiatingNodeTypeResourceCoordRequestExtIes.value:type_name -> google.protobuf.Empty
	243, // 691: xnap.v1.InitiatingNodeTypeResourceCoordRequest.ng_e_nb:type_name -> xnap.v1.ResourceCoordRequestngeNbinitiated
	245, // 692: xnap.v1.InitiatingNodeTypeResourceCoordRequest.g_nb:type_name -> xnap.v1.ResourceCoordRequestgNbinitiated
	240, // 693: xnap.v1.InitiatingNodeTypeResourceCoordRequest.choice_extension:type_name -> xnap.v1.InitiatingNodeTypeResourceCoordRequestExtIes
	359, // 694: xnap.v1.ResourceCoordRequestngeNbinitiatedExtIes.value:type_name -> google.protobuf.Empty
	459, // 695: xnap.v1.ResourceCoordRequestngeNbinitiated.data_traffic_resource_indication:type_name -> xnap.v1.DataTrafficResourceIndication
	460, // 696: xnap.v1.ResourceCoordRequestngeNbinitiated.spectrum_sharing_group_id:type_name -> xnap.v1.SpectrumSharingGroupId
	461, // 697: xnap.v1.ResourceCoordRequestngeNbinitiated.listof_e_utracells:type_name -> xnap.v1.EUTraCGi
	242, // 698: xnap.v1.ResourceCoordRequestngeNbinitiated.i_e_extensions:type_name -> xnap.v1.ResourceCoordRequestngeNbinitiatedExtIes
	359, // 699: xnap.v1.ResourceCoordRequestgNbinitiatedExtIes.value:type_name -> google.protobuf.Empty
	459, // 700: xnap.v1.ResourceCoordRequestgNbinitiated.data_traffic_resource_indication:type_name -> xnap.v1.DataTrafficResourceIndication
	461, // 701: xnap.v1.ResourceCoordRequestgNbinitiated.listof_e_utracells:type_name -> xnap.v1.EUTraCGi
	460, // 702: xnap.v1.ResourceCoordRequestgNbinitiated.spectrum_sharing_group_id:type_name -> xnap.v1.SpectrumSharingGroupId
	462, // 703: xnap.v1.ResourceCoordRequestgNbinitiated.listof_nrcells:type_name -> xnap.v1.NrCGi
	244, // 704: xnap.v1.ResourceCoordRequestgNbinitiated.i_e_extensions:type_name -> xnap.v1.ResourceCoordRequestgNbinitiatedExtIes
	250, // 705: xnap.v1.EUTraNRCellResourceCoordinationResponseIEsValue.id_responding_node_type_resource_coord_response:type_name -> xnap.v1.RespondingNodeTypeResourceCoordResponse
	443, // 706: xnap.v1.EUTraNRCellResourceCoordinationResponseIEsValue.id_interface_instance_indication:type_name -> xnap.v1.InterfaceInstanceIndication
	343, // 707: xnap.v1.EUTraNRCellResourceCoordinationResponseIEs.id:type_name -> xnap.v1.ProtocolIeID
	344, // 708: xnap.v1.EUTraNRCellResourceCoordinationResponseIEs.criticality:type_name -> xnap.v1.Criticality
	246, // 709: xnap.v1.EUTraNRCellResourceCoordinationResponseIEs.value:type_name -> xnap.v1.EUTraNRCellResourceCoordinationResponseIEsValue
	247, // 710: xnap.v1.EUTraNRCellResourceCoordinationResponse.protocol_ies:type_name -> xnap.v1.EUTraNRCellResourceCoordinationResponseIEs
	359, // 711: xnap.v1.RespondingNodeTypeResourceCoordResponseExtIes.value:type_name -> google.protobuf.Empty
	252, // 712: xnap.v1.RespondingNodeTypeResourceCoordResponse.ng_e_nb:type_name -> xnap.v1.ResourceCoordResponsengeNbinitiated
	254, // 713: xnap.v1.RespondingNodeTypeResourceCoordResponse.g_nb:type_name -> xnap.v1.ResourceCoordResponsegNbinitiated
	249, // 714: xnap.v1.RespondingNodeTypeResourceCoordResponse.choice_extension:type_name -> xnap.v1.RespondingNodeTypeResourceCoordResponseExtIes
	359, // 715: xnap.v1.ResourceCoordResponsengeNbinitiatedExtIes.value:type_name -> google.protobuf.Empty
	459, // 716: xnap.v1.ResourceCoordResponsengeNbinitiated.data_traffic_resource_indication:type_name -> xnap.v1.DataTrafficResourceIndication
	460, // 717: xnap.v1.ResourceCoordResponsengeNbinitiated.spectrum_sharing_group_id:type_name -> xnap.v1.SpectrumSharingGroupId
	461, // 718: xnap.v1.ResourceCoordResponsengeNbinitiated.listof_e_utracells:type_name -> xnap.v1.EUTraCGi
	251, // 719: xnap.v1.ResourceCoordResponsengeNbinitiated.i_e_extensions:type_name -> xnap.v1.ResourceCoordResponsengeNbinitiatedExtIes
	359, // 720: xnap.v1.ResourceCoordResponsegNbinitiatedExtIes.value:type_name -> google.protobuf.Empty
	459, // 721: xnap.v1.ResourceCoordResponsegNbinitiated.data_traffic_resource_indication:type_name -> xnap.v1.DataTrafficResourceIndication
	460, // 722: xnap.v1.ResourceCoordResponsegNbinitiated.spectrum_sharing_group_id:type_name -> xnap.v1.SpectrumSharingGroupId
	462, // 723: xnap.v1.ResourceCoordResponsegNbinitiated.listof_nrcells:type_name -> xnap.v1.NrCGi
	253, // 724: xnap.v1.ResourceCoordResponsegNbinitiated.i_e_extensions:type_name -> xnap.v1.ResourceCoordResponsegNbinitiatedExtIes
	329, // 725: xnap.v1.SecondaryRatdataUsageReportIEsValue.id_m_ng_rannode_uexn_apid:type_name -> xnap.v1.NgRAnnodeUexnApid
	329, // 726: xnap.v1.SecondaryRatdataUsageReportIEsValue.id_s_ng_rannode_uexn_apid:type_name -> xnap.v1.NgRAnnodeUexnApid
	463, // 727: xnap.v1.SecondaryRatdataUsageReportIEsValue.id_pdusession_resource_secondary_ratusage_list:type_name -> xnap.v1.PdusessionResourceSecondaryRatusageList
	343, // 728: xnap.v1.SecondaryRatdataUsageReportIEs.id:type_name -> xnap.v1.ProtocolIeID
	344, // 729: xnap.v1.SecondaryRatdataUsageReportIEs.criticality:type_name -> xnap.v1.Criticality
	255, // 730: xnap.v1.SecondaryRatdataUsageReportIEs.value:type_name -> xnap.v1.SecondaryRatdataUsageReportIEsValue
	256, // 731: xnap.v1.SecondaryRatdataUsageReport.protocol_ies:type_name -> xnap.v1.SecondaryRatdataUsageReportIEs
	360, // 732: xnap.v1.XnRemovalRequestIEsValue.id_global_ng_ran_node_id:type_name -> xnap.v1.GlobalNgRAnnodeID
	464, // 733: xnap.v1.XnRemovalRequestIEsValue.id_xn_removal_threshold:type_name -> xnap.v1.XnBenefitValue
	443, // 734: xnap.v1.XnRemovalRequestIEsValue.id_interface_instance_indication:type_name -> xnap.v1.InterfaceInstanceIndication
	343, // 735: xnap.v1.XnRemovalRequestIEs.id:type_name -> xnap.v1.ProtocolIeID
	344, // 736: xnap.v1.XnRemovalRequestIEs.criticality:type_name -> xnap.v1.Criticality
	258, // 737: xnap.v1.XnRemovalRequestIEs.value:type_name -> xnap.v1.XnRemovalRequestIEsValue
	259, // 738: xnap.v1.XnRemovalRequest.protocol_ies:type_name -> xnap.v1.XnRemovalRequestIEs
	360, // 739: xnap.v1.XnRemovalResponseIEsValue.id_global_ng_ran_node_id:type_name -> xnap.v1.GlobalNgRAnnodeID
	364, // 740: xnap.v1.XnRemovalResponseIEsValue.id_criticality_diagnostics:type_name -> xnap.v1.CriticalityDiagnostics
	443, // 741: xnap.v1.XnRemovalResponseIEsValue.id_interface_instance_indication:type_name -> xnap.v1.InterfaceInstanceIndication
	343, // 742: xnap.v1.XnRemovalResponseIEs.id:type_name -> xnap.v1.ProtocolIeID
	344, // 743: xnap.v1.XnRemovalResponseIEs.criticality:type_name -> xnap.v1.Criticality
	261, // 744: xnap.v1.XnRemovalResponseIEs.value:type_name -> xnap.v1.XnRemovalResponseIEsValue
	262, // 745: xnap.v1.XnRemovalResponse.protocol_ies:type_name -> xnap.v1.XnRemovalResponseIEs
	330, // 746: xnap.v1.XnRemovalFailureIEsValue.id_cause:type_name -> xnap.v1.Cause
	364, // 747: xnap.v1.XnRemovalFailureIEsValue.id_criticality_diagnostics:type_name -> xnap.v1.CriticalityDiagnostics
	443, // 748: xnap.v1.XnRemovalFailureIEsValue.id_interface_instance_indication:type_name -> xnap.v1.InterfaceInstanceIndication
	343, // 749: xnap.v1.XnRemovalFailureIEs.id:type_name -> xnap.v1.ProtocolIeID
	344, // 750: xnap.v1.XnRemovalFailureIEs.criticality:type_name -> xnap.v1.Criticality
	264, // 751: xnap.v1.XnRemovalFailureIEs.value:type_name -> xnap.v1.XnRemovalFailureIEsValue
	265, // 752: xnap.v1.XnRemovalFailure.protocol_ies:type_name -> xnap.v1.XnRemovalFailureIEs
	273, // 753: xnap.v1.CellActivationRequestIEsValue.id_served_cells_to_activate:type_name -> xnap.v1.ServedCellsToActivate
	465, // 754: xnap.v1.CellActivationRequestIEsValue.id_activation_idfor_cell_activation:type_name -> xnap.v1.ActivationIdforCellActivation
	443, // 755: xnap.v1.CellActivationRequestIEsValue.id_interface_instance_indication:type_name -> xnap.v1.InterfaceInstanceIndication
	343, // 756: xnap.v1.CellActivationRequestIEs.id:type_name -> xnap.v1.ProtocolIeID
	344, // 757: xnap.v1.CellActivationRequestIEs.criticality:type_name -> xnap.v1.Criticality
	267, // 758: xnap.v1.CellActivationRequestIEs.value:type_name -> xnap.v1.CellActivationRequestIEsValue
	268, // 759: xnap.v1.CellActivationRequest.protocol_ies:type_name -> xnap.v1.CellActivationRequestIEs
	462, // 760: xnap.v1.NrcellsServedCellsToActivate.nr_cells:type_name -> xnap.v1.NrCGi
	461, // 761: xnap.v1.EutracellsServedCellsToActivate.e_utra_cells:type_name -> xnap.v1.EUTraCGi
	359, // 762: xnap.v1.ServedCellsToActivateExtIes.value:type_name -> google.protobuf.Empty
	270, // 763: xnap.v1.ServedCellsToActivate.nr_cells:type_name -> xnap.v1.NrcellsServedCellsToActivate
	271, // 764: xnap.v1.ServedCellsToActivate.e_utra_cells:type_name -> xnap.v1.EutracellsServedCellsToActivate
	272, // 765: xnap.v1.ServedCellsToActivate.choice_extension:type_name -> xnap.v1.ServedCellsToActivateExtIes
	280, // 766: xnap.v1.CellActivationResponseIEsValue.id_activated_served_cells:type_name -> xnap.v1.ActivatedServedCells
	465, // 767: xnap.v1.CellActivationResponseIEsValue.id_activation_idfor_cell_activation:type_name -> xnap.v1.ActivationIdforCellActivation
	364, // 768: xnap.v1.CellActivationResponseIEsValue.id_criticality_diagnostics:type_name -> xnap.v1.CriticalityDiagnostics
	443, // 769: xnap.v1.CellActivationResponseIEsValue.id_interface_instance_indication:type_name -> xnap.v1.InterfaceInstanceIndication
	343, // 770: xnap.v1.CellActivationResponseIEs.id:type_name -> xnap.v1.ProtocolIeID
	344, // 771: xnap.v1.CellActivationResponseIEs.criticality:type_name -> xnap.v1.Criticality
	274, // 772: xnap.v1.CellActivationResponseIEs.value:type_name -> xnap.v1.CellActivationResponseIEsValue
	275, // 773: xnap.v1.CellActivationResponse.protocol_ies:type_name -> xnap.v1.CellActivationResponseIEs
	462, // 774: xnap.v1.NrcellsActivatedServedCells.nr_cells:type_name -> xnap.v1.NrCGi
	461, // 775: xnap.v1.EutracellsActivatedServedCells.e_utra_cells:type_name -> xnap.v1.EUTraCGi
	359, // 776: xnap.v1.ActivatedServedCellsExtIes.value:type_name -> google.protobuf.Empty
	277, // 777: xnap.v1.ActivatedServedCells.nr_cells:type_name -> xnap.v1.NrcellsActivatedServedCells
	278, // 778: xnap.v1.ActivatedServedCells.e_utra_cells:type_name -> xnap.v1.EutracellsActivatedServedCells
	279, // 779: xnap.v1.ActivatedServedCells.choice_extension:type_name -> xnap.v1.ActivatedServedCellsExtIes
	465, // 780: xnap.v1.CellActivationFailureIEsValue.id_activation_idfor_cell_activation:type_name -> xnap.v1.ActivationIdforCellActivation
	330, // 781: xnap.v1.CellActivationFailureIEsValue.id_cause:type_name -> xnap.v1.Cause
	364, // 782: xnap.v1.CellActivationFailureIEsValue.id_criticality_diagnostics:type_name -> xnap.v1.CriticalityDiagnostics
	443, // 783: xnap.v1.CellActivationFailureIEsValue.id_interface_instance_indication:type_name -> xnap.v1.InterfaceInstanceIndication
	343, // 784: xnap.v1.CellActivationFailureIEs.id:type_name -> xnap.v1.ProtocolIeID
	344, // 785: xnap.v1.CellActivationFailureIEs.criticality:type_name -> xnap.v1.Criticality
	281, // 786: xnap.v1.CellActivationFailureIEs.value:type_name -> xnap.v1.CellActivationFailureIEsValue
	282, // 787: xnap.v1.CellActivationFailure.protocol_ies:type_name -> xnap.v1.CellActivationFailureIEs
	466, // 788: xnap.v1.ResetRequestIEsValue.id_reset_request_type_info:type_name -> xnap.v1.ResetRequestTypeInfo
	330, // 789: xnap.v1.ResetRequestIEsValue.id_cause:type_name -> xnap.v1.Cause
	443, // 790: xnap.v1.ResetRequestIEsValue.id_interface_instance_indication:type_name -> xnap.v1.InterfaceInstanceIndication
	343, // 791: xnap.v1.ResetRequestIEs.id:type_name -> xnap.v1.ProtocolIeID
	344, // 792: xnap.v1.ResetRequestIEs.criticality:type_name -> xnap.v1.Criticality
	284, // 793: xnap.v1.ResetRequestIEs.value:type_name -> xnap.v1.ResetRequestIEsValue
	285, // 794: xnap.v1.ResetRequest.protocol_ies:type_name -> xnap.v1.ResetRequestIEs
	467, // 795: xnap.v1.ResetResponseIEsValue.id_reset_response_type_info:type_name -> xnap.v1.ResetResponseTypeInfo
	364, // 796: xnap.v1.ResetResponseIEsValue.id_criticality_diagnostics:type_name -> xnap.v1.CriticalityDiagnostics
	443, // 797: xnap.v1.ResetResponseIEsValue.id_interface_instance_indication:type_name -> xnap.v1.InterfaceInstanceIndication
	343, // 798: xnap.v1.ResetResponseIEs.id:type_name -> xnap.v1.ProtocolIeID
	344, // 799: xnap.v1.ResetResponseIEs.criticality:type_name -> xnap.v1.Criticality
	287, // 800: xnap.v1.ResetResponseIEs.value:type_name -> xnap.v1.ResetResponseIEsValue
	288, // 801: xnap.v1.ResetResponse.protocol_ies:type_name -> xnap.v1.ResetResponseIEs
	329, // 802: xnap.v1.ErrorIndicationIEsValue.id_old_ng_rannode_uexn_apid:type_name -> xnap.v1.NgRAnnodeUexnApid
	329, // 803: xnap.v1.ErrorIndicationIEsValue.id_new_ng_rannode_uexn_apid:type_name -> xnap.v1.NgRAnnodeUexnApid
	330, // 804: xnap.v1.ErrorIndicationIEsValue.id_cause:type_name -> xnap.v1.Cause
	364, // 805: xnap.v1.ErrorIndicationIEsValue.id_criticality_diagnostics:type_name -> xnap.v1.CriticalityDiagnostics
	443, // 806: xnap.v1.ErrorIndicationIEsValue.id_interface_instance_indication:type_name -> xnap.v1.InterfaceInstanceIndication
	343, // 807: xnap.v1.ErrorIndicationIEs.id:type_name -> xnap.v1.ProtocolIeID
	344, // 808: xnap.v1.ErrorIndicationIEs.criticality:type_name -> xnap.v1.Criticality
	290, // 809: xnap.v1.ErrorIndicationIEs.value:type_name -> xnap.v1.ErrorIndicationIEsValue
	291, // 810: xnap.v1.ErrorIndication.protocol_ies:type_name -> xnap.v1.ErrorIndicationIEs
	359, // 811: xnap.v1.PrivateMessageIEs.value:type_name -> google.protobuf.Empty
	293, // 812: xnap.v1.PrivateMessage.private_ies:type_name -> xnap.v1.PrivateMessageIEs
	329, // 813: xnap.v1.TraceStartIesValue.id_m_ng_rannode_uexn_apid:type_name -> xnap.v1.NgRAnnodeUexnApid
	329, // 814: xnap.v1.TraceStartIesValue.id_s_ng_rannode_uexn_apid:type_name -> xnap.v1.NgRAnnodeUexnApid
	333, // 815: xnap.v1.TraceStartIesValue.id_trace_activation:type_name -> xnap.v1.TraceActivation
	343, // 816: xnap.v1.TraceStartIes.id:type_name -> xnap.v1.ProtocolIeID
	344, // 817: xnap.v1.TraceStartIes.criticality:type_name -> xnap.v1.Criticality
	295, // 818: xnap.v1.TraceStartIes.value:type_name -> xnap.v1.TraceStartIesValue
	296, // 819: xnap.v1.TraceStart.protocol_ies:type_name -> xnap.v1.TraceStartIes
	329, // 820: xnap.v1.DeactivateTraceIesValue.id_m_ng_rannode_uexn_apid:type_name -> xnap.v1.NgRAnnodeUexnApid
	329, // 821: xnap.v1.DeactivateTraceIesValue.id_s_ng_rannode_uexn_apid:type_name -> xnap.v1.NgRAnnodeUexnApid
	468, // 822: xnap.v1.DeactivateTraceIesValue.id_ng_rantrace_id:type_name -> xnap.v1.NgRAntraceId
	343, // 823: xnap.v1.DeactivateTraceIes.id:type_name -> xnap.v1.ProtocolIeID
	344, // 824: xnap.v1.DeactivateTraceIes.criticality:type_name -> xnap.v1.Criticality
	298, // 825: xnap.v1.DeactivateTraceIes.value:type_name -> xnap.v1.DeactivateTraceIesValue
	299, // 826: xnap.v1.DeactivateTrace.protocol_ies:type_name -> xnap.v1.DeactivateTraceIes
	359, // 827: xnap.v1.FailureIndicationIEs.value:type_name -> google.protobuf.Empty
	301, // 828: xnap.v1.FailureIndication.protocol_ies:type_name -> xnap.v1.FailureIndicationIEs
	469, // 829: xnap.v1.HandoverReportIEsValue.id_handover_report_type:type_name -> xnap.v1.HandoverReportType
	330, // 830: xnap.v1.HandoverReportIEsValue.id_handover_cause:type_name -> xnap.v1.Cause
	394, // 831: xnap.v1.HandoverReportIEsValue.id_source_cell_cgi:type_name -> xnap.v1.GlobalNgRAncellID
	394, // 832: xnap.v1.HandoverReportIEsValue.id_target_cell_cgi:type_name -> xnap.v1.GlobalNgRAncellID
	470, // 833: xnap.v1.HandoverReportIEsValue.id_re_establishment_cell_cgi:type_name -> xnap.v1.GlobalCellID
	471, // 834: xnap.v1.HandoverReportIEsValue.id_target_cellin_eutran:type_name -> xnap.v1.TargetCellinEutran
	472, // 835: xnap.v1.HandoverReportIEsValue.id_source_cell_crnti:type_name -> xnap.v1.CRNti
	340, // 836: xnap.v1.HandoverReportIEsValue.id_mobility_information:type_name -> xnap.v1.MobilityInformation
	473, // 837: xnap.v1.HandoverReportIEsValue.id_uerlfreport_container:type_name -> xnap.v1.UerlfreportContainer
	343, // 838: xnap.v1.HandoverReportIEs.id:type_name -> xnap.v1.ProtocolIeID
	344, // 839: xnap.v1.HandoverReportIEs.criticality:type_name -> xnap.v1.Criticality
	303, // 840: xnap.v1.HandoverReportIEs.value:type_name -> xnap.v1.HandoverReportIEsValue
	304, // 841: xnap.v1.HandoverReport.protocol_ies:type_name -> xnap.v1.HandoverReportIEs
	474, // 842: xnap.v1.ResourceStatusRequestIEsValue.id_ngran_node1_measurement_id:type_name -> xnap.v1.MeasurementID
	474, // 843: xnap.v1.ResourceStatusRequestIEsValue.id_ngran_node2_measurement_id:type_name -> xnap.v1.MeasurementID
	475, // 844: xnap.v1.ResourceStatusRequestIEsValue.id_registration_request:type_name -> xnap.v1.RegistrationRequest
	476, // 845: xnap.v1.ResourceStatusRequestIEsValue.id_report_characteristics:type_name -> xnap.v1.ReportCharacteristics
	477, // 846: xnap.v1.ResourceStatusRequestIEsValue.id_cell_to_report:type_name -> xnap.v1.CellToReport
	478, // 847: xnap.v1.ResourceStatusRequestIEsValue.id_reporting_periodicity:type_name -> xnap.v1.ReportingPeriodicity
	343, // 848: xnap.v1.ResourceStatusRequestIEs.id:type_name -> xnap.v1.ProtocolIeID
	344, // 849: xnap.v1.ResourceStatusRequestIEs.criticality:type_name -> xnap.v1.Criticality
	306, // 850: xnap.v1.ResourceStatusRequestIEs.value:type_name -> xnap.v1.ResourceStatusRequestIEsValue
	307, // 851: xnap.v1.ResourceStatusRequest.protocol_ies:type_name -> xnap.v1.ResourceStatusRequestIEs
	474, // 852: xnap.v1.ResourceStatusResponseIEsValue.id_ngran_node1_measurement_id:type_name -> xnap.v1.MeasurementID
	474, // 853: xnap.v1.ResourceStatusResponseIEsValue.id_ngran_node2_measurement_id:type_name -> xnap.v1.MeasurementID
	364, // 854: xnap.v1.ResourceStatusResponseIEsValue.id_criticality_diagnostics:type_name -> xnap.v1.CriticalityDiagnostics
	343, // 855: xnap.v1.ResourceStatusResponseIEs.id:type_name -> xnap.v1.ProtocolIeID
	344, // 856: xnap.v1.ResourceStatusResponseIEs.criticality:type_name -> xnap.v1.Criticality
	309, // 857: xnap.v1.ResourceStatusResponseIEs.value:type_name -> xnap.v1.ResourceStatusResponseIEsValue
	310, // 858: xnap.v1.ResourceStatusResponse.protocol_ies:type_name -> xnap.v1.ResourceStatusResponseIEs
	474, // 859: xnap.v1.ResourceStatusFailureIEsValue.id_ngran_node1_measurement_id:type_name -> xnap.v1.MeasurementID
	474, // 860: xnap.v1.ResourceStatusFailureIEsValue.id_ngran_node2_measurement_id:type_name -> xnap.v1.MeasurementID
	330, // 861: xnap.v1.ResourceStatusFailureIEsValue.id_cause:type_name -> xnap.v1.Cause
	364, // 862: xnap.v1.ResourceStatusFailureIEsValue.id_criticality_diagnostics:type_name -> xnap.v1.CriticalityDiagnostics
	343, // 863: xnap.v1.ResourceStatusFailureIEs.id:type_name -> xnap.v1.ProtocolIeID
	344, // 864: xnap.v1.ResourceStatusFailureIEs.criticality:type_name -> xnap.v1.Criticality
	312, // 865: xnap.v1.ResourceStatusFailureIEs.value:type_name -> xnap.v1.ResourceStatusFailureIEsValue
	313, // 866: xnap.v1.ResourceStatusFailure.protocol_ies:type_name -> xnap.v1.ResourceStatusFailureIEs
	474, // 867: xnap.v1.ResourceStatusUpdateIEsValue.id_ngran_node1_measurement_id:type_name -> xnap.v1.MeasurementID
	474, // 868: xnap.v1.ResourceStatusUpdateIEsValue.id_ngran_node2_measurement_id:type_name -> xnap.v1.MeasurementID
	479, // 869: xnap.v1.ResourceStatusUpdateIEsValue.id_cell_measurement_result:type_name -> xnap.v1.CellMeasurementResult
	343, // 870: xnap.v1.ResourceStatusUpdateIEs.id:type_name -> xnap.v1.ProtocolIeID
	344, // 871: xnap.v1.ResourceStatusUpdateIEs.criticality:type_name -> xnap.v1.Criticality
	315, // 872: xnap.v1.ResourceStatusUpdateIEs.value:type_name -> xnap.v1.ResourceStatusUpdateIEsValue
	316, // 873: xnap.v1.ResourceStatusUpdate.protocol_ies:type_name -> xnap.v1.ResourceStatusUpdateIEs
	394, // 874: xnap.v1.MobilityChangeRequestIEsValue.id_ng_rannode1_cell_id:type_name -> xnap.v1.GlobalNgRAncellID
	394, // 875: xnap.v1.MobilityChangeRequestIEsValue.id_ng_rannode2_cell_id:type_name -> xnap.v1.GlobalNgRAncellID
	480, // 876: xnap.v1.MobilityChangeRequestIEsValue.id_ng_rannode1_mobility_parameters:type_name -> xnap.v1.MobilityParametersInformation
	480, // 877: xnap.v1.MobilityChangeRequestIEsValue.id_ng_rannode2_proposed_mobility_parameters:type_name -> xnap.v1.MobilityParametersInformation
	330, // 878: xnap.v1.MobilityChangeRequestIEsValue.id_cause:type_name -> xnap.v1.Cause
	343, // 879: xnap.v1.MobilityChangeRequestIEs.id:type_name -> xnap.v1.ProtocolIeID
	344, // 880: xnap.v1.MobilityChangeRequestIEs.criticality:type_name -> xnap.v1.Criticality
	318, // 881: xnap.v1.MobilityChangeRequestIEs.value:type_name -> xnap.v1.MobilityChangeRequestIEsValue
	319, // 882: xnap.v1.MobilityChangeRequest.protocol_ies:type_name -> xnap.v1.MobilityChangeRequestIEs
	394, // 883: xnap.v1.MobilityChangeAcknowledgeIEsValue.id_ng_rannode1_cell_id:type_name -> xnap.v1.GlobalNgRAncellID
	394, // 884: xnap.v1.MobilityChangeAcknowledgeIEsValue.id_ng_rannode2_cell_id:type_name -> xnap.v1.GlobalNgRAncellID
	364, // 885: xnap.v1.MobilityChangeAcknowledgeIEsValue.id_criticality_diagnostics:type_name -> xnap.v1.CriticalityDiagnostics
	343, // 886: xnap.v1.MobilityChangeAcknowledgeIEs.id:type_name -> xnap.v1.ProtocolIeID
	344, // 887: xnap.v1.MobilityChangeAcknowledgeIEs.criticality:type_name -> xnap.v1.Criticality
	321, // 888: xnap.v1.MobilityChangeAcknowledgeIEs.value:type_name -> xnap.v1.MobilityChangeAcknowledgeIEsValue
	322, // 889: xnap.v1.MobilityChangeAcknowledge.protocol_ies:type_name -> xnap.v1.MobilityChangeAcknowledgeIEs
	394, // 890: xnap.v1.MobilityChangeFailureIEsValue.id_ng_rannode1_cell_id:type_name -> xnap.v1.GlobalNgRAncellID
	394, // 891: xnap.v1.MobilityChangeFailureIEsValue.id_ng_rannode2_cell_id:type_name -> xnap.v1.GlobalNgRAncellID
	330, // 892: xnap.v1.MobilityChangeFailureIEsValue.id_cause:type_name -> xnap.v1.Cause
	481, // 893: xnap.v1.MobilityChangeFailureIEsValue.id_mobility_parameters_modification_range:type_name -> xnap.v1.MobilityParametersModificationRange
	364, // 894: xnap.v1.MobilityChangeFailureIEsValue.id_criticality_diagnostics:type_name -> xnap.v1.CriticalityDiagnostics
	343, // 895: xnap.v1.MobilityChangeFailureIEs.id:type_name -> xnap.v1.ProtocolIeID
	344, // 896: xnap.v1.MobilityChangeFailureIEs.criticality:type_name -> xnap.v1.Criticality
	324, // 897: xnap.v1.MobilityChangeFailureIEs.value:type_name -> xnap.v1.MobilityChangeFailureIEsValue
	325, // 898: xnap.v1.MobilityChangeFailure.protocol_ies:type_name -> xnap.v1.MobilityChangeFailureIEs
	359, // 899: xnap.v1.AccessAndMobilityIndicationIEs.value:type_name -> google.protobuf.Empty
	327, // 900: xnap.v1.AccessAndMobilityIndication.protocol_ies:type_name -> xnap.v1.AccessAndMobilityIndicationIEs
	901, // [901:901] is the sub-list for method output_type
	901, // [901:901] is the sub-list for method input_type
	901, // [901:901] is the sub-list for extension type_name
	901, // [901:901] is the sub-list for extension extendee
	0,   // [0:901] is the sub-list for field type_name
}

func init() { file_api_xnap_v1_xnap_pdu_contents_proto_init() }
func file_api_xnap_v1_xnap_pdu_contents_proto_init() {
	if File_api_xnap_v1_xnap_pdu_contents_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HandoverRequestIEsValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HandoverRequestIEs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HandoverRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UecontextInfoHorequestExtIesExtension); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UecontextInfoHorequestExtIes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UecontextInfoHorequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UecontextRefAtSnHOrequestExtIes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UecontextRefAtSnHOrequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HandoverRequestAcknowledgeIEsValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HandoverRequestAcknowledgeIEs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HandoverRequestAcknowledge); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HandoverPreparationFailureIEsValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HandoverPreparationFailureIEs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HandoverPreparationFailure); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SnstatusTransferIEsValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SnstatusTransferIEs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SnstatusTransfer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UecontextReleaseIEsValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UecontextReleaseIEs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UecontextRelease); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HandoverCancelIEsValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HandoverCancelIEs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HandoverCancel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HandoverSuccessIEsValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HandoverSuccessIEs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HandoverSuccess); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConditionalHandoverCancelIEsValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConditionalHandoverCancelIEs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConditionalHandoverCancel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EarlyStatusTransferIEsValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EarlyStatusTransferIEs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EarlyStatusTransfer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProcedureStageChoiceExtIes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProcedureStageChoice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FirstDlcountExtIes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FirstDlcount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DldiscardingExtIes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Dldiscarding); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RanpagingIEsValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RanpagingIEs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ranpaging); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RetrieveUecontextRequestIEsValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RetrieveUecontextRequestIEs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RetrieveUecontextRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RetrieveUecontextResponseIEsValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RetrieveUecontextResponseIEs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RetrieveUecontextResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RetrieveUecontextFailureIEsValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RetrieveUecontextFailureIEs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RetrieveUecontextFailure); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*XnUaddressIndicationIEsValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*XnUaddressIndicationIEs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*XnUaddressIndication); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SnodeAdditionRequestIEsValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SnodeAdditionRequestIEs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SnodeAdditionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PdusessionToBeAddedAddReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PdusessionToBeAddedAddReqItemExtIes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PdusessionToBeAddedAddReqItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SnodeAdditionRequestAcknowledgeIEsValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SnodeAdditionRequestAcknowledgeIEs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SnodeAdditionRequestAcknowledge); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PdusessionAdmittedAddedAddReqAck); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PdusessionAdmittedAddedAddReqAckItemExtIes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PdusessionAdmittedAddedAddReqAckItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PdusessionNotAdmittedAddReqAckExtIes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PdusessionNotAdmittedAddReqAck); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SnodeAdditionRequestRejectIEsValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SnodeAdditionRequestRejectIEs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SnodeAdditionRequestReject); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SnodeReconfigurationCompleteIEsValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SnodeReconfigurationCompleteIEs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SnodeReconfigurationComplete); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResponseInfoReconfComplExtIes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[74].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResponseInfoReconfCompl); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[75].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResponseTypeReconfCompleteExtIes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[76].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResponseTypeReconfComplete); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[77].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigurationsuccessfullyappliedExtIes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[78].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Configurationsuccessfullyapplied); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[79].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigurationrejectedbyMNGRAnnodeExtIes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[80].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigurationrejectedbyMNGRAnnode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[81].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SnodeModificationRequestIEsValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[82].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SnodeModificationRequestIEs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[83].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SnodeModificationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[84].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UecontextInfoSNmodRequestExtIes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[85].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UecontextInfoSNmodRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[86].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PdusessionsToBeAddedSNmodRequestList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[87].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PdusessionsToBeAddedSNmodRequestItemExtIes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[88].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PdusessionsToBeAddedSNmodRequestItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[89].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PdusessionsToBeModifiedSNmodRequestList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[90].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PdusessionsToBeModifiedSNmodRequestItemExtIesExtension); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[91].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PdusessionsToBeModifiedSNmodRequestItemExtIes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[92].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PdusessionsToBeModifiedSNmodRequestItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[93].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PdusessionsToBeReleasedSNmodRequestListExtIes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[94].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PdusessionsToBeReleasedSNmodRequestList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[95].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SnodeModificationRequestAcknowledgeIEsValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[96].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SnodeModificationRequestAcknowledgeIEs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[97].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SnodeModificationRequestAcknowledge); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[98].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PdusessionAdmittedSNmodResponseExtIes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[99].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PdusessionAdmittedSNmodResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[100].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PdusessionAdmittedToBeAddedSnmodResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[101].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PdusessionAdmittedToBeAddedSnmodResponseItemExtIes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[102].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PdusessionAdmittedToBeAddedSnmodResponseItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[103].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PdusessionAdmittedToBeModifiedSnmodResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[104].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PdusessionAdmittedToBeModifiedSnmodResponseItemExtIes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[105].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PdusessionAdmittedToBeModifiedSnmodResponseItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[106].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PdusessionAdmittedToBeReleasedSnmodResponseExtIes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[107].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PdusessionAdmittedToBeReleasedSnmodResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[108].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PdusessionNotAdmittedSNmodResponseExtIes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[109].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PdusessionNotAdmittedSNmodResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[110].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PdusessionDataForwardingSNmodResponseExtIes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[111].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PdusessionDataForwardingSNmodResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[112].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SnodeModificationRequestRejectIEsValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[113].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SnodeModificationRequestRejectIEs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[114].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SnodeModificationRequestReject); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[115].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SnodeModificationRequiredIEsValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[116].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SnodeModificationRequiredIEs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[117].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SnodeModificationRequired); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[118].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PdusessionToBeModifiedSnmodRequired); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[119].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PdusessionToBeModifiedSnmodRequiredItemExtIes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[120].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PdusessionToBeModifiedSnmodRequiredItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[121].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PdusessionToBeReleasedSnmodRequiredExtIes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[122].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PdusessionToBeReleasedSnmodRequired); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[123].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SnodeModificationConfirmIEsValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[124].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SnodeModificationConfirmIEs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[125].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SnodeModificationConfirm); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[126].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PdusessionAdmittedModSnmodConfirm); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[127].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PdusessionAdmittedModSnmodConfirmItemExtIes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[128].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PdusessionAdmittedModSnmodConfirmItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[129].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PdusessionAdmittedToBeReleasedSnmodConfirmExtIes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[130].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PdusessionReleasedSnmodConfirm); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[131].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SnodeModificationRefuseIEsValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[132].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SnodeModificationRefuseIEs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[133].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SnodeModificationRefuse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[134].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SnodeReleaseRequestIEsValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[135].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SnodeReleaseRequestIEs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[136].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SnodeReleaseRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[137].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SnodeReleaseRequestAcknowledgeIEsValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[138].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SnodeReleaseRequestAcknowledgeIEs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[139].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SnodeReleaseRequestAcknowledge); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[140].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PdusessionToBeReleasedListRelReqAckExtIes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[141].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PdusessionToBeReleasedListRelReqAck); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[142].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SnodeReleaseRejectIEsValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[143].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SnodeReleaseRejectIEs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[144].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SnodeReleaseReject); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[145].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SnodeReleaseRequiredIEsValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[146].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SnodeReleaseRequiredIEs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[147].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SnodeReleaseRequired); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[148].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PdusessionToBeReleasedListRelRqdExtIes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[149].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PdusessionToBeReleasedListRelRqd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[150].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SnodeReleaseConfirmIEsValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[151].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SnodeReleaseConfirmIEs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[152].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SnodeReleaseConfirm); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[153].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PdusessionReleasedListRelConfExtIes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[154].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PdusessionReleasedListRelConf); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[155].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SnodeCounterCheckRequestIEsValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[156].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SnodeCounterCheckRequestIEs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[157].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SnodeCounterCheckRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[158].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BearersSubjectToCounterCheckList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[159].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BearersSubjectToCounterCheckItemExtIes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[160].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BearersSubjectToCounterCheckItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[161].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SnodeChangeRequiredIEsValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[162].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SnodeChangeRequiredIEs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[163].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SnodeChangeRequired); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[164].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PdusessionSNchangeRequiredList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[165].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PdusessionSNchangeRequiredItemExtIes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[166].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PdusessionSNchangeRequiredItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[167].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SnodeChangeConfirmIEsValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[168].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SnodeChangeConfirmIEs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[169].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SnodeChangeConfirm); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[170].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PdusessionSNchangeConfirmList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[171].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PdusessionSNchangeConfirmItemExtIes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[172].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PdusessionSNchangeConfirmItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[173].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SnodeChangeRefuseIEsValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[174].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SnodeChangeRefuseIEs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[175].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SnodeChangeRefuse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[176].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RrctransferIEsValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[177].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RrctransferIEs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[178].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Rrctransfer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[179].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SplitSrbRRctransferExtIes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[180].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SplitSrbRRctransfer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[181].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UereportRrctransferExtIes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[182].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UereportRrctransfer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[183].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FastMcgrecoveryRrctransferExtIes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[184].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FastMcgrecoveryRrctransfer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[185].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NotificationControlIndicationIEsValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[186].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NotificationControlIndicationIEs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[187].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NotificationControlIndication); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[188].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PdusessionResourcesNotifyList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[189].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PdusessionResourcesNotifyItemExtIes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[190].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PdusessionResourcesNotifyItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[191].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActivityNotificationIEsValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[192].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActivityNotificationIEs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[193].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActivityNotification); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[194].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PdusessionResourcesActivityNotifyList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[195].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PdusessionResourcesActivityNotifyItemExtIes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[196].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PdusessionResourcesActivityNotifyItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[197].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QoSflowsActivityNotifyList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[198].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QoSflowsActivityNotifyItemExtIes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[199].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QoSflowsActivityNotifyItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[200].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*XnSetupRequestIEsValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[201].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*XnSetupRequestIEs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[202].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*XnSetupRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[203].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*XnSetupResponseIEsValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[204].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*XnSetupResponseIEs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[205].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*XnSetupResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[206].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*XnSetupFailureIEsValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[207].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*XnSetupFailureIEs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[208].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*XnSetupFailure); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[209].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NgrannodeConfigurationUpdateIEsValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[210].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NgrannodeConfigurationUpdateIEs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[211].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NgrannodeConfigurationUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[212].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigurationUpdategNbValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[213].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigurationUpdategNb); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[214].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigurationUpdatengeNbValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[215].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigurationUpdatengeNb); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[216].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServedCellsToUpdateInitiatingNodeChoiceExtIes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[217].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigurationUpdateInitiatingNodeChoice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[218].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NgrannodeConfigurationUpdateAcknowledgeIEsValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[219].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NgrannodeConfigurationUpdateAcknowledgeIEs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[220].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NgrannodeConfigurationUpdateAcknowledge); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[221].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RespondingNodeTypeConfigUpdateAckExtIes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[222].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RespondingNodeTypeConfigUpdateAck); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[223].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RespondingNodeTypeConfigUpdateAckngeNbExtIesExtension); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[224].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RespondingNodeTypeConfigUpdateAckngeNbExtIes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[225].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RespondingNodeTypeConfigUpdateAckngeNb); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[226].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RespondingNodeTypeConfigUpdateAckgNbExtIesExtension); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[227].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RespondingNodeTypeConfigUpdateAckgNbExtIes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[228].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RespondingNodeTypeConfigUpdateAckgNb); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[229].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NgrannodeConfigurationUpdateFailureIEsValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[230].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NgrannodeConfigurationUpdateFailureIEs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[231].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NgrannodeConfigurationUpdateFailure); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[232].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EUTraNRCellResourceCoordinationRequestIEsValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[233].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EUTraNRCellResourceCoordinationRequestIEs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[234].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EUTraNRCellResourceCoordinationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[235].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InitiatingNodeTypeResourceCoordRequestExtIes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[236].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InitiatingNodeTypeResourceCoordRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[237].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResourceCoordRequestngeNbinitiatedExtIes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[238].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResourceCoordRequestngeNbinitiated); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[239].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResourceCoordRequestgNbinitiatedExtIes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[240].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResourceCoordRequestgNbinitiated); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[241].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EUTraNRCellResourceCoordinationResponseIEsValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[242].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EUTraNRCellResourceCoordinationResponseIEs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[243].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EUTraNRCellResourceCoordinationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[244].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RespondingNodeTypeResourceCoordResponseExtIes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[245].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RespondingNodeTypeResourceCoordResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[246].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResourceCoordResponsengeNbinitiatedExtIes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[247].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResourceCoordResponsengeNbinitiated); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[248].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResourceCoordResponsegNbinitiatedExtIes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[249].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResourceCoordResponsegNbinitiated); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[250].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SecondaryRatdataUsageReportIEsValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[251].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SecondaryRatdataUsageReportIEs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[252].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SecondaryRatdataUsageReport); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[253].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*XnRemovalRequestIEsValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[254].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*XnRemovalRequestIEs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[255].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*XnRemovalRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[256].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*XnRemovalResponseIEsValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[257].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*XnRemovalResponseIEs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[258].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*XnRemovalResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[259].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*XnRemovalFailureIEsValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[260].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*XnRemovalFailureIEs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[261].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*XnRemovalFailure); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[262].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CellActivationRequestIEsValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[263].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CellActivationRequestIEs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[264].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CellActivationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[265].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NrcellsServedCellsToActivate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[266].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EutracellsServedCellsToActivate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[267].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServedCellsToActivateExtIes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[268].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServedCellsToActivate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[269].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CellActivationResponseIEsValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[270].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CellActivationResponseIEs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[271].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CellActivationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[272].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NrcellsActivatedServedCells); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[273].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EutracellsActivatedServedCells); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[274].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActivatedServedCellsExtIes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[275].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActivatedServedCells); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[276].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CellActivationFailureIEsValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[277].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CellActivationFailureIEs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[278].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CellActivationFailure); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[279].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResetRequestIEsValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[280].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResetRequestIEs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[281].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[282].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResetResponseIEsValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[283].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResetResponseIEs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[284].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[285].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ErrorIndicationIEsValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[286].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ErrorIndicationIEs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[287].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ErrorIndication); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[288].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PrivateMessageIEs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[289].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PrivateMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[290].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TraceStartIesValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[291].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TraceStartIes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[292].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TraceStart); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[293].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeactivateTraceIesValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[294].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeactivateTraceIes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[295].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeactivateTrace); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[296].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FailureIndicationIEs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[297].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FailureIndication); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[298].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HandoverReportIEsValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[299].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HandoverReportIEs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[300].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HandoverReport); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[301].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResourceStatusRequestIEsValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[302].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResourceStatusRequestIEs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[303].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResourceStatusRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[304].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResourceStatusResponseIEsValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[305].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResourceStatusResponseIEs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[306].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResourceStatusResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[307].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResourceStatusFailureIEsValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[308].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResourceStatusFailureIEs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[309].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResourceStatusFailure); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[310].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResourceStatusUpdateIEsValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[311].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResourceStatusUpdateIEs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[312].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResourceStatusUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[313].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MobilityChangeRequestIEsValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[314].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MobilityChangeRequestIEs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[315].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MobilityChangeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[316].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MobilityChangeAcknowledgeIEsValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[317].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MobilityChangeAcknowledgeIEs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[318].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MobilityChangeAcknowledge); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[319].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MobilityChangeFailureIEsValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[320].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MobilityChangeFailureIEs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[321].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MobilityChangeFailure); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[322].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessAndMobilityIndicationIEs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[323].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessAndMobilityIndication); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*HandoverRequestIEsValue_IdSourceNgRannodeUexnApid)(nil),
		(*HandoverRequestIEsValue_IdCause)(nil),
		(*HandoverRequestIEsValue_IdTargetCellGlobalId)(nil),
		(*HandoverRequestIEsValue_IdGuami)(nil),
		(*HandoverRequestIEsValue_IdUecontextInfoHorequest)(nil),
		(*HandoverRequestIEsValue_IdTraceActivation)(nil),
		(*HandoverRequestIEsValue_IdMaskedImeisv)(nil),
		(*HandoverRequestIEsValue_IdUehistoryInformation)(nil),
		(*HandoverRequestIEsValue_IdUecontextRefAtSnHorequest)(nil),
		(*HandoverRequestIEsValue_IdChoinformationReq)(nil),
		(*HandoverRequestIEsValue_IdNrv2XservicesAuthorized)(nil),
		(*HandoverRequestIEsValue_IdLtev2XservicesAuthorized)(nil),
		(*HandoverRequestIEsValue_IdPc5QoSparameters)(nil),
		(*HandoverRequestIEsValue_IdMobilityInformation)(nil),
		(*HandoverRequestIEsValue_IdUehistoryInformationFromTheUe)(nil),
		(*HandoverRequestIEsValue_IdIabnodeIndication)(nil),
	}
	file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[3].OneofWrappers = []interface{}{
		(*UecontextInfoHorequestExtIesExtension_IdFiveGcmobilityRestrictionListContainer)(nil),
		(*UecontextInfoHorequestExtIesExtension_IdNruesidelinkAggregateMaximumBitRate)(nil),
		(*UecontextInfoHorequestExtIesExtension_IdLteuesidelinkAggregateMaximumBitRate)(nil),
		(*UecontextInfoHorequestExtIesExtension_IdMdtplmnlist)(nil),
		(*UecontextInfoHorequestExtIesExtension_IdUeradioCapabilityId)(nil),
	}
	file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[5].OneofWrappers = []interface{}{}
	file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[8].OneofWrappers = []interface{}{
		(*HandoverRequestAcknowledgeIEsValue_IdSourceNgRannodeUexnApid)(nil),
		(*HandoverRequestAcknowledgeIEsValue_IdTargetNgRannodeUexnApid)(nil),
		(*HandoverRequestAcknowledgeIEsValue_IdPdusessionResourcesAdmittedList)(nil),
		(*HandoverRequestAcknowledgeIEsValue_IdPdusessionResourcesNotAdmittedList)(nil),
		(*HandoverRequestAcknowledgeIEsValue_IdTarget2SourceNgRannodeTranspContainer)(nil),
		(*HandoverRequestAcknowledgeIEsValue_IdUecontextKeptIndicator)(nil),
		(*HandoverRequestAcknowledgeIEsValue_IdCriticalityDiagnostics)(nil),
		(*HandoverRequestAcknowledgeIEsValue_IdDrbsTransferredToMn)(nil),
		(*HandoverRequestAcknowledgeIEsValue_IdDapsresponseInfoList)(nil),
		(*HandoverRequestAcknowledgeIEsValue_IdChoinformationAck)(nil),
	}
	file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[11].OneofWrappers = []interface{}{
		(*HandoverPreparationFailureIEsValue_IdSourceNgRannodeUexnApid)(nil),
		(*HandoverPreparationFailureIEsValue_IdCause)(nil),
		(*HandoverPreparationFailureIEsValue_IdCriticalityDiagnostics)(nil),
		(*HandoverPreparationFailureIEsValue_IdRequestedTargetCellGlobalId)(nil),
	}
	file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[14].OneofWrappers = []interface{}{
		(*SnstatusTransferIEsValue_IdSourceNgRannodeUexnApid)(nil),
		(*SnstatusTransferIEsValue_IdTargetNgRannodeUexnApid)(nil),
		(*SnstatusTransferIEsValue_IdDrbsSubjectToStatusTransferList)(nil),
	}
	file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[17].OneofWrappers = []interface{}{
		(*UecontextReleaseIEsValue_IdSourceNgRannodeUexnApid)(nil),
		(*UecontextReleaseIEsValue_IdTargetNgRannodeUexnApid)(nil),
	}
	file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[20].OneofWrappers = []interface{}{
		(*HandoverCancelIEsValue_IdSourceNgRannodeUexnApid)(nil),
		(*HandoverCancelIEsValue_IdTargetNgRannodeUexnApid)(nil),
		(*HandoverCancelIEsValue_IdCause)(nil),
		(*HandoverCancelIEsValue_IdTargetCellsToCancel)(nil),
	}
	file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[23].OneofWrappers = []interface{}{
		(*HandoverSuccessIEsValue_IdSourceNgRannodeUexnApid)(nil),
		(*HandoverSuccessIEsValue_IdTargetNgRannodeUexnApid)(nil),
		(*HandoverSuccessIEsValue_IdRequestedTargetCellGlobalId)(nil),
	}
	file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[26].OneofWrappers = []interface{}{
		(*ConditionalHandoverCancelIEsValue_IdSourceNgRannodeUexnApid)(nil),
		(*ConditionalHandoverCancelIEsValue_IdTargetNgRannodeUexnApid)(nil),
		(*ConditionalHandoverCancelIEsValue_IdCause)(nil),
		(*ConditionalHandoverCancelIEsValue_IdTargetCellsToCancel)(nil),
	}
	file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[29].OneofWrappers = []interface{}{
		(*EarlyStatusTransferIEsValue_IdSourceNgRannodeUexnApid)(nil),
		(*EarlyStatusTransferIEsValue_IdTargetNgRannodeUexnApid)(nil),
		(*EarlyStatusTransferIEsValue_IdProcedureStage)(nil),
	}
	file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[33].OneofWrappers = []interface{}{
		(*ProcedureStageChoice_FirstDlCount)(nil),
		(*ProcedureStageChoice_DlDiscarding)(nil),
		(*ProcedureStageChoice_ChoiceExtension)(nil),
	}
	file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[38].OneofWrappers = []interface{}{
		(*RanpagingIEsValue_IdUeidentityIndexValue)(nil),
		(*RanpagingIEsValue_IdUeranpagingIdentity)(nil),
		(*RanpagingIEsValue_IdPagingDrx)(nil),
		(*RanpagingIEsValue_IdRanpagingArea)(nil),
		(*RanpagingIEsValue_IdPagingPriority)(nil),
		(*RanpagingIEsValue_IdAssistanceDataForRanpaging)(nil),
		(*RanpagingIEsValue_IdUeradioCapabilityForPaging)(nil),
		(*RanpagingIEsValue_IdExtendedUeidentityIndexValue)(nil),
		(*RanpagingIEsValue_IdPagingeDrxinformation)(nil),
		(*RanpagingIEsValue_IdUespecificDrx)(nil),
	}
	file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[41].OneofWrappers = []interface{}{
		(*RetrieveUecontextRequestIEsValue_IdNewNgRannodeUexnApid)(nil),
		(*RetrieveUecontextRequestIEsValue_IdUecontextId)(nil),
		(*RetrieveUecontextRequestIEsValue_IdMacI)(nil),
		(*RetrieveUecontextRequestIEsValue_IdNewNgRanCellIdentity)(nil),
		(*RetrieveUecontextRequestIEsValue_IdRrcresumeCause)(nil),
	}
	file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[44].OneofWrappers = []interface{}{
		(*RetrieveUecontextResponseIEsValue_IdNewNgRannodeUexnApid)(nil),
		(*RetrieveUecontextResponseIEsValue_IdOldNgRannodeUexnApid)(nil),
		(*RetrieveUecontextResponseIEsValue_IdGuami)(nil),
		(*RetrieveUecontextResponseIEsValue_IdUecontextInfoRetrUectxtResp)(nil),
		(*RetrieveUecontextResponseIEsValue_IdTraceActivation)(nil),
		(*RetrieveUecontextResponseIEsValue_IdMaskedImeisv)(nil),
		(*RetrieveUecontextResponseIEsValue_IdLocationReportingInformation)(nil),
		(*RetrieveUecontextResponseIEsValue_IdCriticalityDiagnostics)(nil),
		(*RetrieveUecontextResponseIEsValue_IdNrv2XservicesAuthorized)(nil),
		(*RetrieveUecontextResponseIEsValue_IdLtev2XservicesAuthorized)(nil),
		(*RetrieveUecontextResponseIEsValue_IdPc5QoSparameters)(nil),
		(*RetrieveUecontextResponseIEsValue_IdUehistoryInformation)(nil),
		(*RetrieveUecontextResponseIEsValue_IdUehistoryInformationFromTheUe)(nil),
		(*RetrieveUecontextResponseIEsValue_IdMdtplmnlist)(nil),
	}
	file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[47].OneofWrappers = []interface{}{
		(*RetrieveUecontextFailureIEsValue_IdNewNgRannodeUexnApid)(nil),
		(*RetrieveUecontextFailureIEsValue_IdOldtoNewNgRannodeResumeContainer)(nil),
		(*RetrieveUecontextFailureIEsValue_IdCause)(nil),
		(*RetrieveUecontextFailureIEsValue_IdCriticalityDiagnostics)(nil),
	}
	file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[50].OneofWrappers = []interface{}{
		(*XnUaddressIndicationIEsValue_IdNewNgRannodeUexnApid)(nil),
		(*XnUaddressIndicationIEsValue_IdOldNgRannodeUexnApid)(nil),
		(*XnUaddressIndicationIEsValue_IdXnUaddressInfoperPdusessionList)(nil),
		(*XnUaddressIndicationIEsValue_IdChoMrdcIndicator)(nil),
		(*XnUaddressIndicationIEsValue_IdChoMrdcEarlyDataForwarding)(nil),
	}
	file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[53].OneofWrappers = []interface{}{
		(*SnodeAdditionRequestIEsValue_IdMNgRannodeUexnApid)(nil),
		(*SnodeAdditionRequestIEsValue_IdUesecurityCapabilities)(nil),
		(*SnodeAdditionRequestIEsValue_IdSNgRannodeSecurityKey)(nil),
		(*SnodeAdditionRequestIEsValue_IdSNgRannodeUeAmbr)(nil),
		(*SnodeAdditionRequestIEsValue_IdSelectedPlmn)(nil),
		(*SnodeAdditionRequestIEsValue_IdMobilityRestrictionList)(nil),
		(*SnodeAdditionRequestIEsValue_IdIndexToRatFrequSelectionPriority)(nil),
		(*SnodeAdditionRequestIEsValue_IdPdusessionToBeAddedAddReq)(nil),
		(*SnodeAdditionRequestIEsValue_IdMnToSnContainer)(nil),
		(*SnodeAdditionRequestIEsValue_IdSNgRannodeUexnApid)(nil),
		(*SnodeAdditionRequestIEsValue_IdExpectedUebehaviour)(nil),
		(*SnodeAdditionRequestIEsValue_IdRequestedSplitSrb)(nil),
		(*SnodeAdditionRequestIEsValue_IdPcellId)(nil),
		(*SnodeAdditionRequestIEsValue_IdDesiredActNotificationLevel)(nil),
		(*SnodeAdditionRequestIEsValue_IdAvailableDrbids)(nil),
		(*SnodeAdditionRequestIEsValue_IdSNgRannodeMaxIpdataRateUl)(nil),
		(*SnodeAdditionRequestIEsValue_IdSNgRannodeMaxIpdataRateDl)(nil),
		(*SnodeAdditionRequestIEsValue_IdLocationInformationSnreporting)(nil),
		(*SnodeAdditionRequestIEsValue_IdMrDcResourceCoordinationInfo)(nil),
		(*SnodeAdditionRequestIEsValue_IdMaskedImeisv)(nil),
		(*SnodeAdditionRequestIEsValue_IdNeDcTdmPattern)(nil),
		(*SnodeAdditionRequestIEsValue_IdSNgRannodeAdditionTriggerInd)(nil),
		(*SnodeAdditionRequestIEsValue_IdTraceActivation)(nil),
		(*SnodeAdditionRequestIEsValue_IdRequestedFastMcgrecoveryViaSrb3)(nil),
		(*SnodeAdditionRequestIEsValue_IdUeradioCapabilityId)(nil),
		(*SnodeAdditionRequestIEsValue_IdSourceNgRanNodeId)(nil),
	}
	file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[58].OneofWrappers = []interface{}{}
	file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[59].OneofWrappers = []interface{}{
		(*SnodeAdditionRequestAcknowledgeIEsValue_IdMNgRannodeUexnApid)(nil),
		(*SnodeAdditionRequestAcknowledgeIEsValue_IdSNgRannodeUexnApid)(nil),
		(*SnodeAdditionRequestAcknowledgeIEsValue_IdPdusessionAdmittedAddedAddReqAck)(nil),
		(*SnodeAdditionRequestAcknowledgeIEsValue_IdPdusessionNotAdmittedAddReqAck)(nil),
		(*SnodeAdditionRequestAcknowledgeIEsValue_IdSnToMnContainer)(nil),
		(*SnodeAdditionRequestAcknowledgeIEsValue_IdAdmittedSplitSrb)(nil),
		(*SnodeAdditionRequestAcknowledgeIEsValue_IdRrcconfigIndication)(nil),
		(*SnodeAdditionRequestAcknowledgeIEsValue_IdCriticalityDiagnostics)(nil),
		(*SnodeAdditionRequestAcknowledgeIEsValue_IdLocationInformationSn)(nil),
		(*SnodeAdditionRequestAcknowledgeIEsValue_IdMrDcResourceCoordinationInfo)(nil),
		(*SnodeAdditionRequestAcknowledgeIEsValue_IdAvailableFastMcgrecoveryViaSrb3)(nil),
		(*SnodeAdditionRequestAcknowledgeIEsValue_IdDirectForwardingPathAvailability)(nil),
	}
	file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[64].OneofWrappers = []interface{}{}
	file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[66].OneofWrappers = []interface{}{}
	file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[67].OneofWrappers = []interface{}{
		(*SnodeAdditionRequestRejectIEsValue_IdMNgRannodeUexnApid)(nil),
		(*SnodeAdditionRequestRejectIEsValue_IdSNgRannodeUexnApid)(nil),
		(*SnodeAdditionRequestRejectIEsValue_IdCause)(nil),
		(*SnodeAdditionRequestRejectIEsValue_IdCriticalityDiagnostics)(nil),
	}
	file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[70].OneofWrappers = []interface{}{
		(*SnodeReconfigurationCompleteIEsValue_IdMNgRannodeUexnApid)(nil),
		(*SnodeReconfigurationCompleteIEsValue_IdSNgRannodeUexnApid)(nil),
		(*SnodeReconfigurationCompleteIEsValue_IdResponseInfoReconfCompl)(nil),
	}
	file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[76].OneofWrappers = []interface{}{
		(*ResponseTypeReconfComplete_ConfigurationSuccessfullyApplied)(nil),
		(*ResponseTypeReconfComplete_ConfigurationRejectedByMNgRannode)(nil),
		(*ResponseTypeReconfComplete_ChoiceExtension)(nil),
	}
	file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[78].OneofWrappers = []interface{}{}
	file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[80].OneofWrappers = []interface{}{}
	file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[81].OneofWrappers = []interface{}{
		(*SnodeModificationRequestIEsValue_IdMNgRannodeUexnApid)(nil),
		(*SnodeModificationRequestIEsValue_IdSNgRannodeUexnApid)(nil),
		(*SnodeModificationRequestIEsValue_IdCause)(nil),
		(*SnodeModificationRequestIEsValue_IdPdcpchangeIndication)(nil),
		(*SnodeModificationRequestIEsValue_IdSelectedPlmn)(nil),
		(*SnodeModificationRequestIEsValue_IdMobilityRestrictionList)(nil),
		(*SnodeModificationRequestIEsValue_IdScgconfigurationQuery)(nil),
		(*SnodeModificationRequestIEsValue_IdUecontextInfoSnmodRequest)(nil),
		(*SnodeModificationRequestIEsValue_IdMnToSnContainer)(nil),
		(*SnodeModificationRequestIEsValue_IdRequestedSplitSrb)(nil),
		(*SnodeModificationRequestIEsValue_IdRequestedSplitSrbrelease)(nil),
		(*SnodeModificationRequestIEsValue_IdDesiredActNotificationLevel)(nil),
		(*SnodeModificationRequestIEsValue_IdAdditionalDrbids)(nil),
		(*SnodeModificationRequestIEsValue_IdSNgRannodeMaxIpdataRateUl)(nil),
		(*SnodeModificationRequestIEsValue_IdSNgRannodeMaxIpdataRateDl)(nil),
		(*SnodeModificationRequestIEsValue_IdLocationInformationSnreporting)(nil),
		(*SnodeModificationRequestIEsValue_IdMrDcResourceCoordinationInfo)(nil),
		(*SnodeModificationRequestIEsValue_IdPcellId)(nil),
		(*SnodeModificationRequestIEsValue_IdNeDcTdmPattern)(nil),
		(*SnodeModificationRequestIEsValue_IdRequestedFastMcgrecoveryViaSrb3)(nil),
		(*SnodeModificationRequestIEsValue_IdRequestedFastMcgrecoveryViaSrb3Release)(nil),
		(*SnodeModificationRequestIEsValue_IdSntriggered)(nil),
		(*SnodeModificationRequestIEsValue_IdTargetNodeId)(nil),
	}
	file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[85].OneofWrappers = []interface{}{}
	file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[88].OneofWrappers = []interface{}{}
	file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[90].OneofWrappers = []interface{}{
		(*PdusessionsToBeModifiedSNmodRequestItemExtIesExtension_IdSNssai)(nil),
		(*PdusessionsToBeModifiedSNmodRequestItemExtIesExtension_IdPdusessionExpectedUeactivityBehaviour)(nil),
	}
	file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[92].OneofWrappers = []interface{}{}
	file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[94].OneofWrappers = []interface{}{}
	file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[95].OneofWrappers = []interface{}{
		(*SnodeModificationRequestAcknowledgeIEsValue_IdMNgRannodeUexnApid)(nil),
		(*SnodeModificationRequestAcknowledgeIEsValue_IdSNgRannodeUexnApid)(nil),
		(*SnodeModificationRequestAcknowledgeIEsValue_IdPdusessionAdmittedSnmodResponse)(nil),
		(*SnodeModificationRequestAcknowledgeIEsValue_IdPdusessionNotAdmittedSnmodResponse)(nil),
		(*SnodeModificationRequestAcknowledgeIEsValue_IdSnToMnContainer)(nil),
		(*SnodeModificationRequestAcknowledgeIEsValue_IdAdmittedSplitSrb)(nil),
		(*SnodeModificationRequestAcknowledgeIEsValue_IdAdmittedSplitSrbrelease)(nil),
		(*SnodeModificationRequestAcknowledgeIEsValue_IdCriticalityDiagnostics)(nil),
		(*SnodeModificationRequestAcknowledgeIEsValue_IdLocationInformationSn)(nil),
		(*SnodeModificationRequestAcknowledgeIEsValue_IdMrDcResourceCoordinationInfo)(nil),
		(*SnodeModificationRequestAcknowledgeIEsValue_IdPdusessionDataForwardingSnmodResponse)(nil),
		(*SnodeModificationRequestAcknowledgeIEsValue_IdRrcconfigIndication)(nil),
		(*SnodeModificationRequestAcknowledgeIEsValue_IdAvailableFastMcgrecoveryViaSrb3)(nil),
		(*SnodeModificationRequestAcknowledgeIEsValue_IdReleaseFastMcgrecoveryViaSrb3)(nil),
		(*SnodeModificationRequestAcknowledgeIEsValue_IdDirectForwardingPathAvailability)(nil),
	}
	file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[99].OneofWrappers = []interface{}{}
	file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[102].OneofWrappers = []interface{}{}
	file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[105].OneofWrappers = []interface{}{}
	file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[107].OneofWrappers = []interface{}{}
	file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[109].OneofWrappers = []interface{}{}
	file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[112].OneofWrappers = []interface{}{
		(*SnodeModificationRequestRejectIEsValue_IdMNgRannodeUexnApid)(nil),
		(*SnodeModificationRequestRejectIEsValue_IdSNgRannodeUexnApid)(nil),
		(*SnodeModificationRequestRejectIEsValue_IdCause)(nil),
		(*SnodeModificationRequestRejectIEsValue_IdCriticalityDiagnostics)(nil),
	}
	file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[115].OneofWrappers = []interface{}{
		(*SnodeModificationRequiredIEsValue_IdMNgRannodeUexnApid)(nil),
		(*SnodeModificationRequiredIEsValue_IdSNgRannodeUexnApid)(nil),
		(*SnodeModificationRequiredIEsValue_IdCause)(nil),
		(*SnodeModificationRequiredIEsValue_IdPdcpchangeIndication)(nil),
		(*SnodeModificationRequiredIEsValue_IdPdusessionToBeModifiedSnmodRequired)(nil),
		(*SnodeModificationRequiredIEsValue_IdPdusessionToBeReleasedSnmodRequired)(nil),
		(*SnodeModificationRequiredIEsValue_IdSnToMnContainer)(nil),
		(*SnodeModificationRequiredIEsValue_IdSpareDrbids)(nil),
		(*SnodeModificationRequiredIEsValue_IdRequiredNumberOfDrbids)(nil),
		(*SnodeModificationRequiredIEsValue_IdLocationInformationSn)(nil),
		(*SnodeModificationRequiredIEsValue_IdMrDcResourceCoordinationInfo)(nil),
		(*SnodeModificationRequiredIEsValue_IdRrcconfigIndication)(nil),
		(*SnodeModificationRequiredIEsValue_IdAvailableFastMcgrecoveryViaSrb3)(nil),
		(*SnodeModificationRequiredIEsValue_IdReleaseFastMcgrecoveryViaSrb3)(nil),
		(*SnodeModificationRequiredIEsValue_IdScgindicator)(nil),
	}
	file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[120].OneofWrappers = []interface{}{}
	file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[122].OneofWrappers = []interface{}{}
	file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[123].OneofWrappers = []interface{}{
		(*SnodeModificationConfirmIEsValue_IdMNgRannodeUexnApid)(nil),
		(*SnodeModificationConfirmIEsValue_IdSNgRannodeUexnApid)(nil),
		(*SnodeModificationConfirmIEsValue_IdPdusessionAdmittedModSnmodConfirm)(nil),
		(*SnodeModificationConfirmIEsValue_IdPdusessionReleasedSnmodConfirm)(nil),
		(*SnodeModificationConfirmIEsValue_IdMnToSnContainer)(nil),
		(*SnodeModificationConfirmIEsValue_IdAdditionalDrbids)(nil),
		(*SnodeModificationConfirmIEsValue_IdCriticalityDiagnostics)(nil),
		(*SnodeModificationConfirmIEsValue_IdMrDcResourceCoordinationInfo)(nil),
	}
	file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[128].OneofWrappers = []interface{}{}
	file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[130].OneofWrappers = []interface{}{}
	file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[131].OneofWrappers = []interface{}{
		(*SnodeModificationRefuseIEsValue_IdMNgRannodeUexnApid)(nil),
		(*SnodeModificationRefuseIEsValue_IdSNgRannodeUexnApid)(nil),
		(*SnodeModificationRefuseIEsValue_IdCause)(nil),
		(*SnodeModificationRefuseIEsValue_IdMnToSnContainer)(nil),
		(*SnodeModificationRefuseIEsValue_IdCriticalityDiagnostics)(nil),
	}
	file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[134].OneofWrappers = []interface{}{
		(*SnodeReleaseRequestIEsValue_IdMNgRannodeUexnApid)(nil),
		(*SnodeReleaseRequestIEsValue_IdSNgRannodeUexnApid)(nil),
		(*SnodeReleaseRequestIEsValue_IdCause)(nil),
		(*SnodeReleaseRequestIEsValue_IdPdusessionToBeReleasedRelReq)(nil),
		(*SnodeReleaseRequestIEsValue_IdUecontextKeptIndicator)(nil),
		(*SnodeReleaseRequestIEsValue_IdMnToSnContainer)(nil),
		(*SnodeReleaseRequestIEsValue_IdDrbsTransferredToMn)(nil),
	}
	file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[137].OneofWrappers = []interface{}{
		(*SnodeReleaseRequestAcknowledgeIEsValue_IdMNgRannodeUexnApid)(nil),
		(*SnodeReleaseRequestAcknowledgeIEsValue_IdSNgRannodeUexnApid)(nil),
		(*SnodeReleaseRequestAcknowledgeIEsValue_IdPdusessionToBeReleasedRelReqAck)(nil),
		(*SnodeReleaseRequestAcknowledgeIEsValue_IdCriticalityDiagnostics)(nil),
	}
	file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[141].OneofWrappers = []interface{}{}
	file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[142].OneofWrappers = []interface{}{
		(*SnodeReleaseRejectIEsValue_IdMNgRannodeUexnApid)(nil),
		(*SnodeReleaseRejectIEsValue_IdSNgRannodeUexnApid)(nil),
		(*SnodeReleaseRejectIEsValue_IdCause)(nil),
		(*SnodeReleaseRejectIEsValue_IdCriticalityDiagnostics)(nil),
	}
	file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[145].OneofWrappers = []interface{}{
		(*SnodeReleaseRequiredIEsValue_IdMNgRannodeUexnApid)(nil),
		(*SnodeReleaseRequiredIEsValue_IdSNgRannodeUexnApid)(nil),
		(*SnodeReleaseRequiredIEsValue_IdPdusessionToBeReleasedListRelRqd)(nil),
		(*SnodeReleaseRequiredIEsValue_IdCause)(nil),
		(*SnodeReleaseRequiredIEsValue_IdSnToMnContainer)(nil),
	}
	file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[149].OneofWrappers = []interface{}{}
	file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[150].OneofWrappers = []interface{}{
		(*SnodeReleaseConfirmIEsValue_IdMNgRannodeUexnApid)(nil),
		(*SnodeReleaseConfirmIEsValue_IdSNgRannodeUexnApid)(nil),
		(*SnodeReleaseConfirmIEsValue_IdPdusessionReleasedListRelConf)(nil),
		(*SnodeReleaseConfirmIEsValue_IdCriticalityDiagnostics)(nil),
	}
	file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[154].OneofWrappers = []interface{}{}
	file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[155].OneofWrappers = []interface{}{
		(*SnodeCounterCheckRequestIEsValue_IdMNgRannodeUexnApid)(nil),
		(*SnodeCounterCheckRequestIEsValue_IdSNgRannodeUexnApid)(nil),
		(*SnodeCounterCheckRequestIEsValue_IdBearersSubjectToCounterCheck)(nil),
	}
	file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[161].OneofWrappers = []interface{}{
		(*SnodeChangeRequiredIEsValue_IdMNgRannodeUexnApid)(nil),
		(*SnodeChangeRequiredIEsValue_IdSNgRannodeUexnApid)(nil),
		(*SnodeChangeRequiredIEsValue_IdTargetSNgRannodeId)(nil),
		(*SnodeChangeRequiredIEsValue_IdCause)(nil),
		(*SnodeChangeRequiredIEsValue_IdPdusessionSnchangeRequiredList)(nil),
		(*SnodeChangeRequiredIEsValue_IdSnToMnContainer)(nil),
	}
	file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[166].OneofWrappers = []interface{}{}
	file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[167].OneofWrappers = []interface{}{
		(*SnodeChangeConfirmIEsValue_IdMNgRannodeUexnApid)(nil),
		(*SnodeChangeConfirmIEsValue_IdSNgRannodeUexnApid)(nil),
		(*SnodeChangeConfirmIEsValue_IdPdusessionSnchangeConfirmList)(nil),
		(*SnodeChangeConfirmIEsValue_IdCriticalityDiagnostics)(nil),
	}
	file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[172].OneofWrappers = []interface{}{}
	file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[173].OneofWrappers = []interface{}{
		(*SnodeChangeRefuseIEsValue_IdMNgRannodeUexnApid)(nil),
		(*SnodeChangeRefuseIEsValue_IdSNgRannodeUexnApid)(nil),
		(*SnodeChangeRefuseIEsValue_IdCause)(nil),
		(*SnodeChangeRefuseIEsValue_IdCriticalityDiagnostics)(nil),
	}
	file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[176].OneofWrappers = []interface{}{
		(*RrctransferIEsValue_IdMNgRannodeUexnApid)(nil),
		(*RrctransferIEsValue_IdSNgRannodeUexnApid)(nil),
		(*RrctransferIEsValue_IdSplitSrbRrctransfer)(nil),
		(*RrctransferIEsValue_IdUereportRrctransfer)(nil),
		(*RrctransferIEsValue_IdFastMcgrecoveryRrctransferSnToMn)(nil),
		(*RrctransferIEsValue_IdFastMcgrecoveryRrctransferMnToSn)(nil),
	}
	file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[180].OneofWrappers = []interface{}{}
	file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[185].OneofWrappers = []interface{}{
		(*NotificationControlIndicationIEsValue_IdMNgRannodeUexnApid)(nil),
		(*NotificationControlIndicationIEsValue_IdSNgRannodeUexnApid)(nil),
		(*NotificationControlIndicationIEsValue_IdPdusessionResourcesNotifyList)(nil),
	}
	file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[191].OneofWrappers = []interface{}{
		(*ActivityNotificationIEsValue_IdMNgRannodeUexnApid)(nil),
		(*ActivityNotificationIEsValue_IdSNgRannodeUexnApid)(nil),
		(*ActivityNotificationIEsValue_IdUserPlaneTrafficActivityReport)(nil),
		(*ActivityNotificationIEsValue_IdPdusessionResourcesActivityNotifyList)(nil),
		(*ActivityNotificationIEsValue_IdRanpagingFailure)(nil),
	}
	file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[196].OneofWrappers = []interface{}{}
	file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[200].OneofWrappers = []interface{}{
		(*XnSetupRequestIEsValue_IdGlobalNgRanNodeId)(nil),
		(*XnSetupRequestIEsValue_IdTaisupportList)(nil),
		(*XnSetupRequestIEsValue_IdAmfRegionInformation)(nil),
		(*XnSetupRequestIEsValue_IdListOfServedCellsNr)(nil),
		(*XnSetupRequestIEsValue_IdListOfServedCellsEUtra)(nil),
		(*XnSetupRequestIEsValue_IdInterfaceInstanceIndication)(nil),
		(*XnSetupRequestIEsValue_IdTnlconfigurationInfo)(nil),
		(*XnSetupRequestIEsValue_IdPartialListIndicatorNr)(nil),
		(*XnSetupRequestIEsValue_IdCellAndCapacityAssistanceInfoNr)(nil),
		(*XnSetupRequestIEsValue_IdPartialListIndicatorEutra)(nil),
		(*XnSetupRequestIEsValue_IdCellAndCapacityAssistanceInfoEutra)(nil),
	}
	file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[203].OneofWrappers = []interface{}{
		(*XnSetupResponseIEsValue_IdGlobalNgRanNodeId)(nil),
		(*XnSetupResponseIEsValue_IdTaisupportList)(nil),
		(*XnSetupResponseIEsValue_IdListOfServedCellsNr)(nil),
		(*XnSetupResponseIEsValue_IdListOfServedCellsEUtra)(nil),
		(*XnSetupResponseIEsValue_IdCriticalityDiagnostics)(nil),
		(*XnSetupResponseIEsValue_IdAmfRegionInformation)(nil),
		(*XnSetupResponseIEsValue_IdInterfaceInstanceIndication)(nil),
		(*XnSetupResponseIEsValue_IdTnlconfigurationInfo)(nil),
		(*XnSetupResponseIEsValue_IdPartialListIndicatorNr)(nil),
		(*XnSetupResponseIEsValue_IdCellAndCapacityAssistanceInfoNr)(nil),
		(*XnSetupResponseIEsValue_IdPartialListIndicatorEutra)(nil),
		(*XnSetupResponseIEsValue_IdCellAndCapacityAssistanceInfoEutra)(nil),
	}
	file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[206].OneofWrappers = []interface{}{
		(*XnSetupFailureIEsValue_IdCause)(nil),
		(*XnSetupFailureIEsValue_IdTimeToWait)(nil),
		(*XnSetupFailureIEsValue_IdCriticalityDiagnostics)(nil),
		(*XnSetupFailureIEsValue_IdInterfaceInstanceIndication)(nil),
		(*XnSetupFailureIEsValue_IdMessageOversizeNotification)(nil),
	}
	file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[209].OneofWrappers = []interface{}{
		(*NgrannodeConfigurationUpdateIEsValue_IdTaisupportList)(nil),
		(*NgrannodeConfigurationUpdateIEsValue_IdConfigurationUpdateInitiatingNodeChoice)(nil),
		(*NgrannodeConfigurationUpdateIEsValue_IdTnlaToAddList)(nil),
		(*NgrannodeConfigurationUpdateIEsValue_IdTnlaToRemoveList)(nil),
		(*NgrannodeConfigurationUpdateIEsValue_IdTnlaToUpdateList)(nil),
		(*NgrannodeConfigurationUpdateIEsValue_IdGlobalNgRanNodeId)(nil),
		(*NgrannodeConfigurationUpdateIEsValue_IdAmfRegionInformationToAdd)(nil),
		(*NgrannodeConfigurationUpdateIEsValue_IdAmfRegionInformationToDelete)(nil),
		(*NgrannodeConfigurationUpdateIEsValue_IdInterfaceInstanceIndication)(nil),
		(*NgrannodeConfigurationUpdateIEsValue_IdTnlconfigurationInfo)(nil),
	}
	file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[212].OneofWrappers = []interface{}{
		(*ConfigurationUpdategNbValue_IdServedCellsToUpdateNr)(nil),
		(*ConfigurationUpdategNbValue_IdCellAssistanceInfoNr)(nil),
		(*ConfigurationUpdategNbValue_IdCellAssistanceInfoEutra)(nil),
	}
	file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[214].OneofWrappers = []interface{}{
		(*ConfigurationUpdatengeNbValue_IdServedCellsToUpdateEUtra)(nil),
		(*ConfigurationUpdatengeNbValue_IdCellAssistanceInfoNr)(nil),
		(*ConfigurationUpdatengeNbValue_IdCellAssistanceInfoEutra)(nil),
	}
	file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[217].OneofWrappers = []interface{}{
		(*ConfigurationUpdateInitiatingNodeChoice_GNb)(nil),
		(*ConfigurationUpdateInitiatingNodeChoice_NgENb)(nil),
		(*ConfigurationUpdateInitiatingNodeChoice_ChoiceExtension)(nil),
	}
	file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[218].OneofWrappers = []interface{}{
		(*NgrannodeConfigurationUpdateAcknowledgeIEsValue_IdRespondingNodeTypeConfigUpdateAck)(nil),
		(*NgrannodeConfigurationUpdateAcknowledgeIEsValue_IdTnlaSetupList)(nil),
		(*NgrannodeConfigurationUpdateAcknowledgeIEsValue_IdTnlaFailedToSetupList)(nil),
		(*NgrannodeConfigurationUpdateAcknowledgeIEsValue_IdCriticalityDiagnostics)(nil),
		(*NgrannodeConfigurationUpdateAcknowledgeIEsValue_IdInterfaceInstanceIndication)(nil),
		(*NgrannodeConfigurationUpdateAcknowledgeIEsValue_IdTnlconfigurationInfo)(nil),
	}
	file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[222].OneofWrappers = []interface{}{
		(*RespondingNodeTypeConfigUpdateAck_NgENb)(nil),
		(*RespondingNodeTypeConfigUpdateAck_GNb)(nil),
		(*RespondingNodeTypeConfigUpdateAck_ChoiceExtension)(nil),
	}
	file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[223].OneofWrappers = []interface{}{
		(*RespondingNodeTypeConfigUpdateAckngeNbExtIesExtension_IdListOfServedCellsEUtra)(nil),
		(*RespondingNodeTypeConfigUpdateAckngeNbExtIesExtension_IdPartialListIndicatorEutra)(nil),
		(*RespondingNodeTypeConfigUpdateAckngeNbExtIesExtension_IdCellAndCapacityAssistanceInfoEutra)(nil),
	}
	file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[226].OneofWrappers = []interface{}{
		(*RespondingNodeTypeConfigUpdateAckgNbExtIesExtension_IdPartialListIndicatorNr)(nil),
		(*RespondingNodeTypeConfigUpdateAckgNbExtIesExtension_IdCellAndCapacityAssistanceInfoNr)(nil),
	}
	file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[228].OneofWrappers = []interface{}{}
	file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[229].OneofWrappers = []interface{}{
		(*NgrannodeConfigurationUpdateFailureIEsValue_IdCause)(nil),
		(*NgrannodeConfigurationUpdateFailureIEsValue_IdTimeToWait)(nil),
		(*NgrannodeConfigurationUpdateFailureIEsValue_IdCriticalityDiagnostics)(nil),
		(*NgrannodeConfigurationUpdateFailureIEsValue_IdInterfaceInstanceIndication)(nil),
	}
	file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[232].OneofWrappers = []interface{}{
		(*EUTraNRCellResourceCoordinationRequestIEsValue_IdInitiatingNodeTypeResourceCoordRequest)(nil),
		(*EUTraNRCellResourceCoordinationRequestIEsValue_IdInterfaceInstanceIndication)(nil),
	}
	file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[236].OneofWrappers = []interface{}{
		(*InitiatingNodeTypeResourceCoordRequest_NgENb)(nil),
		(*InitiatingNodeTypeResourceCoordRequest_GNb)(nil),
		(*InitiatingNodeTypeResourceCoordRequest_ChoiceExtension)(nil),
	}
	file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[241].OneofWrappers = []interface{}{
		(*EUTraNRCellResourceCoordinationResponseIEsValue_IdRespondingNodeTypeResourceCoordResponse)(nil),
		(*EUTraNRCellResourceCoordinationResponseIEsValue_IdInterfaceInstanceIndication)(nil),
	}
	file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[245].OneofWrappers = []interface{}{
		(*RespondingNodeTypeResourceCoordResponse_NgENb)(nil),
		(*RespondingNodeTypeResourceCoordResponse_GNb)(nil),
		(*RespondingNodeTypeResourceCoordResponse_ChoiceExtension)(nil),
	}
	file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[250].OneofWrappers = []interface{}{
		(*SecondaryRatdataUsageReportIEsValue_IdMNgRannodeUexnApid)(nil),
		(*SecondaryRatdataUsageReportIEsValue_IdSNgRannodeUexnApid)(nil),
		(*SecondaryRatdataUsageReportIEsValue_IdPdusessionResourceSecondaryRatusageList)(nil),
	}
	file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[253].OneofWrappers = []interface{}{
		(*XnRemovalRequestIEsValue_IdGlobalNgRanNodeId)(nil),
		(*XnRemovalRequestIEsValue_IdXnRemovalThreshold)(nil),
		(*XnRemovalRequestIEsValue_IdInterfaceInstanceIndication)(nil),
	}
	file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[256].OneofWrappers = []interface{}{
		(*XnRemovalResponseIEsValue_IdGlobalNgRanNodeId)(nil),
		(*XnRemovalResponseIEsValue_IdCriticalityDiagnostics)(nil),
		(*XnRemovalResponseIEsValue_IdInterfaceInstanceIndication)(nil),
	}
	file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[259].OneofWrappers = []interface{}{
		(*XnRemovalFailureIEsValue_IdCause)(nil),
		(*XnRemovalFailureIEsValue_IdCriticalityDiagnostics)(nil),
		(*XnRemovalFailureIEsValue_IdInterfaceInstanceIndication)(nil),
	}
	file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[262].OneofWrappers = []interface{}{
		(*CellActivationRequestIEsValue_IdServedCellsToActivate)(nil),
		(*CellActivationRequestIEsValue_IdActivationIdforCellActivation)(nil),
		(*CellActivationRequestIEsValue_IdInterfaceInstanceIndication)(nil),
	}
	file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[268].OneofWrappers = []interface{}{
		(*ServedCellsToActivate_NrCells)(nil),
		(*ServedCellsToActivate_EUtraCells)(nil),
		(*ServedCellsToActivate_ChoiceExtension)(nil),
	}
	file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[269].OneofWrappers = []interface{}{
		(*CellActivationResponseIEsValue_IdActivatedServedCells)(nil),
		(*CellActivationResponseIEsValue_IdActivationIdforCellActivation)(nil),
		(*CellActivationResponseIEsValue_IdCriticalityDiagnostics)(nil),
		(*CellActivationResponseIEsValue_IdInterfaceInstanceIndication)(nil),
	}
	file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[275].OneofWrappers = []interface{}{
		(*ActivatedServedCells_NrCells)(nil),
		(*ActivatedServedCells_EUtraCells)(nil),
		(*ActivatedServedCells_ChoiceExtension)(nil),
	}
	file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[276].OneofWrappers = []interface{}{
		(*CellActivationFailureIEsValue_IdActivationIdforCellActivation)(nil),
		(*CellActivationFailureIEsValue_IdCause)(nil),
		(*CellActivationFailureIEsValue_IdCriticalityDiagnostics)(nil),
		(*CellActivationFailureIEsValue_IdInterfaceInstanceIndication)(nil),
	}
	file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[279].OneofWrappers = []interface{}{
		(*ResetRequestIEsValue_IdResetRequestTypeInfo)(nil),
		(*ResetRequestIEsValue_IdCause)(nil),
		(*ResetRequestIEsValue_IdInterfaceInstanceIndication)(nil),
	}
	file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[282].OneofWrappers = []interface{}{
		(*ResetResponseIEsValue_IdResetResponseTypeInfo)(nil),
		(*ResetResponseIEsValue_IdCriticalityDiagnostics)(nil),
		(*ResetResponseIEsValue_IdInterfaceInstanceIndication)(nil),
	}
	file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[285].OneofWrappers = []interface{}{
		(*ErrorIndicationIEsValue_IdOldNgRannodeUexnApid)(nil),
		(*ErrorIndicationIEsValue_IdNewNgRannodeUexnApid)(nil),
		(*ErrorIndicationIEsValue_IdCause)(nil),
		(*ErrorIndicationIEsValue_IdCriticalityDiagnostics)(nil),
		(*ErrorIndicationIEsValue_IdInterfaceInstanceIndication)(nil),
	}
	file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[290].OneofWrappers = []interface{}{
		(*TraceStartIesValue_IdMNgRannodeUexnApid)(nil),
		(*TraceStartIesValue_IdSNgRannodeUexnApid)(nil),
		(*TraceStartIesValue_IdTraceActivation)(nil),
	}
	file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[293].OneofWrappers = []interface{}{
		(*DeactivateTraceIesValue_IdMNgRannodeUexnApid)(nil),
		(*DeactivateTraceIesValue_IdSNgRannodeUexnApid)(nil),
		(*DeactivateTraceIesValue_IdNgRantraceId)(nil),
	}
	file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[298].OneofWrappers = []interface{}{
		(*HandoverReportIEsValue_IdHandoverReportType)(nil),
		(*HandoverReportIEsValue_IdHandoverCause)(nil),
		(*HandoverReportIEsValue_IdSourceCellCgi)(nil),
		(*HandoverReportIEsValue_IdTargetCellCgi)(nil),
		(*HandoverReportIEsValue_IdReEstablishmentCellCgi)(nil),
		(*HandoverReportIEsValue_IdTargetCellinEutran)(nil),
		(*HandoverReportIEsValue_IdSourceCellCrnti)(nil),
		(*HandoverReportIEsValue_IdMobilityInformation)(nil),
		(*HandoverReportIEsValue_IdUerlfreportContainer)(nil),
	}
	file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[301].OneofWrappers = []interface{}{
		(*ResourceStatusRequestIEsValue_IdNgranNode1MeasurementId)(nil),
		(*ResourceStatusRequestIEsValue_IdNgranNode2MeasurementId)(nil),
		(*ResourceStatusRequestIEsValue_IdRegistrationRequest)(nil),
		(*ResourceStatusRequestIEsValue_IdReportCharacteristics)(nil),
		(*ResourceStatusRequestIEsValue_IdCellToReport)(nil),
		(*ResourceStatusRequestIEsValue_IdReportingPeriodicity)(nil),
	}
	file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[304].OneofWrappers = []interface{}{
		(*ResourceStatusResponseIEsValue_IdNgranNode1MeasurementId)(nil),
		(*ResourceStatusResponseIEsValue_IdNgranNode2MeasurementId)(nil),
		(*ResourceStatusResponseIEsValue_IdCriticalityDiagnostics)(nil),
	}
	file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[307].OneofWrappers = []interface{}{
		(*ResourceStatusFailureIEsValue_IdNgranNode1MeasurementId)(nil),
		(*ResourceStatusFailureIEsValue_IdNgranNode2MeasurementId)(nil),
		(*ResourceStatusFailureIEsValue_IdCause)(nil),
		(*ResourceStatusFailureIEsValue_IdCriticalityDiagnostics)(nil),
	}
	file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[310].OneofWrappers = []interface{}{
		(*ResourceStatusUpdateIEsValue_IdNgranNode1MeasurementId)(nil),
		(*ResourceStatusUpdateIEsValue_IdNgranNode2MeasurementId)(nil),
		(*ResourceStatusUpdateIEsValue_IdCellMeasurementResult)(nil),
	}
	file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[313].OneofWrappers = []interface{}{
		(*MobilityChangeRequestIEsValue_IdNgRannode1CellId)(nil),
		(*MobilityChangeRequestIEsValue_IdNgRannode2CellId)(nil),
		(*MobilityChangeRequestIEsValue_IdNgRannode1MobilityParameters)(nil),
		(*MobilityChangeRequestIEsValue_IdNgRannode2ProposedMobilityParameters)(nil),
		(*MobilityChangeRequestIEsValue_IdCause)(nil),
	}
	file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[316].OneofWrappers = []interface{}{
		(*MobilityChangeAcknowledgeIEsValue_IdNgRannode1CellId)(nil),
		(*MobilityChangeAcknowledgeIEsValue_IdNgRannode2CellId)(nil),
		(*MobilityChangeAcknowledgeIEsValue_IdCriticalityDiagnostics)(nil),
	}
	file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes[319].OneofWrappers = []interface{}{
		(*MobilityChangeFailureIEsValue_IdNgRannode1CellId)(nil),
		(*MobilityChangeFailureIEsValue_IdNgRannode2CellId)(nil),
		(*MobilityChangeFailureIEsValue_IdCause)(nil),
		(*MobilityChangeFailureIEsValue_IdMobilityParametersModificationRange)(nil),
		(*MobilityChangeFailureIEsValue_IdCriticalityDiagnostics)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_api_xnap_v1_xnap_pdu_contents_proto_rawDesc,
			NumEnums:      5,
			NumMessages:   324,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_api_xnap_v1_xnap_pdu_contents_proto_goTypes,
		DependencyIndexes: file_api_xnap_v1_xnap_pdu_contents_proto_depIdxs,
		EnumInfos:         file_api_xnap_v1_xnap_pdu_contents_proto_enumTypes,
		MessageInfos:      file_api_xnap_v1_xnap_pdu_contents_proto_msgTypes,
	}.Build()
	File_api_xnap_v1_xnap_pdu_contents_proto = out.File
	file_api_xnap_v1_xnap_pdu_contents_proto_rawDesc = nil
	file_api_xnap_v1_xnap_pdu_contents_proto_goTypes = nil
	file_api_xnap_v1_xnap_pdu_contents_proto_depIdxs = nil
}
