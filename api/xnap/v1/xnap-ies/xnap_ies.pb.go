//
//SPDX-FileCopyrightText: 2022-present Intel Corporation
//
//SPDX-License-Identifier: Apache-2.0

////////////////////// xnap-ies.proto //////////////////////
// Protobuf generated from /xnap_v1.asn1 by asn1c-0.9.29
// XnAP-IEs { itu-t(0) identified-organization(4) etsi(0) mobileDomain(0) ngran-access(22) modules(3) xnap(2) version1(1) xnap-IEs(2) }

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1-devel
// 	protoc        v3.19.4
// source: api/xnap/v1/xnap_ies.proto

package xnapiesv1

import (
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	xnap_commondatatypes "github.com/onosproject/onos-e2t/api/xnap/v1/xnap-commondatatypes"
	_ "github.com/onosproject/onos-e2t/api/xnap/v1/xnap-constants"
	_ "github.com/onosproject/onos-e2t/api/xnap/v1/xnap-containers"
	asn1 "github.com/onosproject/onos-lib-go/api/asn1/v1/asn1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// enumerated from xnap_v1.asn1:3206
type AdditionLocationInformation int32

const (
	AdditionLocationInformation_ADDITION_LOCATION_INFORMATION_INCLUDE_PSCELL AdditionLocationInformation = 0
)

// Enum value maps for AdditionLocationInformation.
var (
	AdditionLocationInformation_name = map[int32]string{
		0: "ADDITION_LOCATION_INFORMATION_INCLUDE_PSCELL",
	}
	AdditionLocationInformation_value = map[string]int32{
		"ADDITION_LOCATION_INFORMATION_INCLUDE_PSCELL": 0,
	}
)

func (x AdditionLocationInformation) Enum() *AdditionLocationInformation {
	p := new(AdditionLocationInformation)
	*p = x
	return p
}

func (x AdditionLocationInformation) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AdditionLocationInformation) Descriptor() protoreflect.EnumDescriptor {
	return file_api_xnap_v1_xnap_ies_proto_enumTypes[0].Descriptor()
}

func (AdditionLocationInformation) Type() protoreflect.EnumType {
	return &file_api_xnap_v1_xnap_ies_proto_enumTypes[0]
}

func (x AdditionLocationInformation) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AdditionLocationInformation.Descriptor instead.
func (AdditionLocationInformation) EnumDescriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{0}
}

// enumerated from xnap_v1.asn1:3238
type PreemptioncapabilityAllocationandRetentionPriority int32

const (
	PreemptioncapabilityAllocationandRetentionPriority_PREEMPTIONCAPABILITY_ALLOCATIONAND_RETENTION_PRIORITY_SHALL_NOT_TRIGGER_PREEMPTDAT_DION PreemptioncapabilityAllocationandRetentionPriority = 0
	PreemptioncapabilityAllocationandRetentionPriority_PREEMPTIONCAPABILITY_ALLOCATIONAND_RETENTION_PRIORITY_MAY_TRIGGER_PREEMPTION            PreemptioncapabilityAllocationandRetentionPriority = 1
)

// Enum value maps for PreemptioncapabilityAllocationandRetentionPriority.
var (
	PreemptioncapabilityAllocationandRetentionPriority_name = map[int32]string{
		0: "PREEMPTIONCAPABILITY_ALLOCATIONAND_RETENTION_PRIORITY_SHALL_NOT_TRIGGER_PREEMPTDAT_DION",
		1: "PREEMPTIONCAPABILITY_ALLOCATIONAND_RETENTION_PRIORITY_MAY_TRIGGER_PREEMPTION",
	}
	PreemptioncapabilityAllocationandRetentionPriority_value = map[string]int32{
		"PREEMPTIONCAPABILITY_ALLOCATIONAND_RETENTION_PRIORITY_SHALL_NOT_TRIGGER_PREEMPTDAT_DION": 0,
		"PREEMPTIONCAPABILITY_ALLOCATIONAND_RETENTION_PRIORITY_MAY_TRIGGER_PREEMPTION":            1,
	}
)

func (x PreemptioncapabilityAllocationandRetentionPriority) Enum() *PreemptioncapabilityAllocationandRetentionPriority {
	p := new(PreemptioncapabilityAllocationandRetentionPriority)
	*p = x
	return p
}

func (x PreemptioncapabilityAllocationandRetentionPriority) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PreemptioncapabilityAllocationandRetentionPriority) Descriptor() protoreflect.EnumDescriptor {
	return file_api_xnap_v1_xnap_ies_proto_enumTypes[1].Descriptor()
}

func (PreemptioncapabilityAllocationandRetentionPriority) Type() protoreflect.EnumType {
	return &file_api_xnap_v1_xnap_ies_proto_enumTypes[1]
}

func (x PreemptioncapabilityAllocationandRetentionPriority) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PreemptioncapabilityAllocationandRetentionPriority.Descriptor instead.
func (PreemptioncapabilityAllocationandRetentionPriority) EnumDescriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{1}
}

// enumerated from xnap_v1.asn1:3239
type PreemptionvulnerabilityAllocationandRetentionPriority int32

const (
	PreemptionvulnerabilityAllocationandRetentionPriority_PREEMPTIONVULNERABILITY_ALLOCATIONAND_RETENTION_PRIORITY_NOT_PREEMPTABLE PreemptionvulnerabilityAllocationandRetentionPriority = 0
	PreemptionvulnerabilityAllocationandRetentionPriority_PREEMPTIONVULNERABILITY_ALLOCATIONAND_RETENTION_PRIORITY_PREEMPTABLE     PreemptionvulnerabilityAllocationandRetentionPriority = 1
)

// Enum value maps for PreemptionvulnerabilityAllocationandRetentionPriority.
var (
	PreemptionvulnerabilityAllocationandRetentionPriority_name = map[int32]string{
		0: "PREEMPTIONVULNERABILITY_ALLOCATIONAND_RETENTION_PRIORITY_NOT_PREEMPTABLE",
		1: "PREEMPTIONVULNERABILITY_ALLOCATIONAND_RETENTION_PRIORITY_PREEMPTABLE",
	}
	PreemptionvulnerabilityAllocationandRetentionPriority_value = map[string]int32{
		"PREEMPTIONVULNERABILITY_ALLOCATIONAND_RETENTION_PRIORITY_NOT_PREEMPTABLE": 0,
		"PREEMPTIONVULNERABILITY_ALLOCATIONAND_RETENTION_PRIORITY_PREEMPTABLE":     1,
	}
)

func (x PreemptionvulnerabilityAllocationandRetentionPriority) Enum() *PreemptionvulnerabilityAllocationandRetentionPriority {
	p := new(PreemptionvulnerabilityAllocationandRetentionPriority)
	*p = x
	return p
}

func (x PreemptionvulnerabilityAllocationandRetentionPriority) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PreemptionvulnerabilityAllocationandRetentionPriority) Descriptor() protoreflect.EnumDescriptor {
	return file_api_xnap_v1_xnap_ies_proto_enumTypes[2].Descriptor()
}

func (PreemptionvulnerabilityAllocationandRetentionPriority) Type() protoreflect.EnumType {
	return &file_api_xnap_v1_xnap_ies_proto_enumTypes[2]
}

func (x PreemptionvulnerabilityAllocationandRetentionPriority) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PreemptionvulnerabilityAllocationandRetentionPriority.Descriptor instead.
func (PreemptionvulnerabilityAllocationandRetentionPriority) EnumDescriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{2}
}

// enumerated from xnap_v1.asn1:3381
type BtrssiBluetoothMeasurementConfiguration int32

const (
	BtrssiBluetoothMeasurementConfiguration_BTRSSI_BLUETOOTH_MEASUREMENT_CONFIGURATION_TRUE BtrssiBluetoothMeasurementConfiguration = 0
)

// Enum value maps for BtrssiBluetoothMeasurementConfiguration.
var (
	BtrssiBluetoothMeasurementConfiguration_name = map[int32]string{
		0: "BTRSSI_BLUETOOTH_MEASUREMENT_CONFIGURATION_TRUE",
	}
	BtrssiBluetoothMeasurementConfiguration_value = map[string]int32{
		"BTRSSI_BLUETOOTH_MEASUREMENT_CONFIGURATION_TRUE": 0,
	}
)

func (x BtrssiBluetoothMeasurementConfiguration) Enum() *BtrssiBluetoothMeasurementConfiguration {
	p := new(BtrssiBluetoothMeasurementConfiguration)
	*p = x
	return p
}

func (x BtrssiBluetoothMeasurementConfiguration) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BtrssiBluetoothMeasurementConfiguration) Descriptor() protoreflect.EnumDescriptor {
	return file_api_xnap_v1_xnap_ies_proto_enumTypes[3].Descriptor()
}

func (BtrssiBluetoothMeasurementConfiguration) Type() protoreflect.EnumType {
	return &file_api_xnap_v1_xnap_ies_proto_enumTypes[3]
}

func (x BtrssiBluetoothMeasurementConfiguration) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BtrssiBluetoothMeasurementConfiguration.Descriptor instead.
func (BtrssiBluetoothMeasurementConfiguration) EnumDescriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{3}
}

// enumerated from xnap_v1.asn1:3392
type BluetoothMeasConfig int32

const (
	BluetoothMeasConfig_BLUETOOTH_MEAS_CONFIG_SETUP BluetoothMeasConfig = 0
)

// Enum value maps for BluetoothMeasConfig.
var (
	BluetoothMeasConfig_name = map[int32]string{
		0: "BLUETOOTH_MEAS_CONFIG_SETUP",
	}
	BluetoothMeasConfig_value = map[string]int32{
		"BLUETOOTH_MEAS_CONFIG_SETUP": 0,
	}
)

func (x BluetoothMeasConfig) Enum() *BluetoothMeasConfig {
	p := new(BluetoothMeasConfig)
	*p = x
	return p
}

func (x BluetoothMeasConfig) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BluetoothMeasConfig) Descriptor() protoreflect.EnumDescriptor {
	return file_api_xnap_v1_xnap_ies_proto_enumTypes[4].Descriptor()
}

func (BluetoothMeasConfig) Type() protoreflect.EnumType {
	return &file_api_xnap_v1_xnap_ies_proto_enumTypes[4]
}

func (x BluetoothMeasConfig) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BluetoothMeasConfig.Descriptor instead.
func (BluetoothMeasConfig) EnumDescriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{4}
}

// enumerated from xnap_v1.asn1:3542
type CauseRadioNetworkLayer int32

const (
	CauseRadioNetworkLayer_CAUSE_RADIO_NETWORK_LAYER_CELL_NOT_AVAILABLE                                              CauseRadioNetworkLayer = 0
	CauseRadioNetworkLayer_CAUSE_RADIO_NETWORK_LAYER_HANDOVER_DESIRABLE_FOR_RADIO_REASONS                            CauseRadioNetworkLayer = 1
	CauseRadioNetworkLayer_CAUSE_RADIO_NETWORK_LAYER_HANDOVER_TARGET_NOT_ALLOWED                                     CauseRadioNetworkLayer = 2
	CauseRadioNetworkLayer_CAUSE_RADIO_NETWORK_LAYER_INVALID_AMF_SET_ID                                              CauseRadioNetworkLayer = 3
	CauseRadioNetworkLayer_CAUSE_RADIO_NETWORK_LAYER_NO_RADIO_RESOURCES_AVAILABLE_IN_TARGET_CELL                     CauseRadioNetworkLayer = 4
	CauseRadioNetworkLayer_CAUSE_RADIO_NETWORK_LAYER_PARTIAL_HANDOVER                                                CauseRadioNetworkLayer = 5
	CauseRadioNetworkLayer_CAUSE_RADIO_NETWORK_LAYER_REDUCE_LOAD_IN_SERVING_CELL                                     CauseRadioNetworkLayer = 6
	CauseRadioNetworkLayer_CAUSE_RADIO_NETWORK_LAYER_RESOURCE_OPTIMISATION_HANDOVER                                  CauseRadioNetworkLayer = 7
	CauseRadioNetworkLayer_CAUSE_RADIO_NETWORK_LAYER_TIME_CRITICAL_HANDOVER                                          CauseRadioNetworkLayer = 8
	CauseRadioNetworkLayer_CAUSE_RADIO_NETWORK_LAYER_T_XN_RELOCOVERALL_EXPIRY                                        CauseRadioNetworkLayer = 9
	CauseRadioNetworkLayer_CAUSE_RADIO_NETWORK_LAYER_T_XN_RELOCPREP_EXPIRY                                           CauseRadioNetworkLayer = 10
	CauseRadioNetworkLayer_CAUSE_RADIO_NETWORK_LAYER_UNKNOWN_GUAMI_ID                                                CauseRadioNetworkLayer = 11
	CauseRadioNetworkLayer_CAUSE_RADIO_NETWORK_LAYER_UNKNOWN_LOCAL_NG_RAN_NODE_UE_XN_AP_ID                           CauseRadioNetworkLayer = 12
	CauseRadioNetworkLayer_CAUSE_RADIO_NETWORK_LAYER_INCONSISTENT_REMOTE_NG_RAN_NODE_UE_XN_AP_ID                     CauseRadioNetworkLayer = 13
	CauseRadioNetworkLayer_CAUSE_RADIO_NETWORK_LAYER_ENCRYPTION_AND_OR_INTEGRITY_PROTECTION_ALGORITHMS_NOT_SUPPORTED CauseRadioNetworkLayer = 14
	CauseRadioNetworkLayer_CAUSE_RADIO_NETWORK_LAYER_PROTECTION_ALGORITHMS_NOT_SUPPORTED                             CauseRadioNetworkLayer = 15
	CauseRadioNetworkLayer_CAUSE_RADIO_NETWORK_LAYER_MULTIPLE_PDU_SESSION_ID_INSTANCES                               CauseRadioNetworkLayer = 16
	CauseRadioNetworkLayer_CAUSE_RADIO_NETWORK_LAYER_UNKNOWN_PDU_SESSION_ID                                          CauseRadioNetworkLayer = 17
	CauseRadioNetworkLayer_CAUSE_RADIO_NETWORK_LAYER_UNKNOWN_QO_S_FLOW_ID                                            CauseRadioNetworkLayer = 18
	CauseRadioNetworkLayer_CAUSE_RADIO_NETWORK_LAYER_MULTIPLE_QO_S_FLOW_ID_INSTANCES                                 CauseRadioNetworkLayer = 19
	CauseRadioNetworkLayer_CAUSE_RADIO_NETWORK_LAYER_SWITCH_OFF_ONGOING                                              CauseRadioNetworkLayer = 20
	CauseRadioNetworkLayer_CAUSE_RADIO_NETWORK_LAYER_NOT_SUPPORTED_5_QI_VALUE                                        CauseRadioNetworkLayer = 21
	CauseRadioNetworkLayer_CAUSE_RADIO_NETWORK_LAYER_T_XN_DCOVERALL_EXPIRY                                           CauseRadioNetworkLayer = 22
	CauseRadioNetworkLayer_CAUSE_RADIO_NETWORK_LAYER_T_XN_DCPREP_EXPIRY                                              CauseRadioNetworkLayer = 23
	CauseRadioNetworkLayer_CAUSE_RADIO_NETWORK_LAYER_ACTION_DESIRABLE_FOR_RADIO_REASONS                              CauseRadioNetworkLayer = 24
	CauseRadioNetworkLayer_CAUSE_RADIO_NETWORK_LAYER_REDUCE_LOAD                                                     CauseRadioNetworkLayer = 25
	CauseRadioNetworkLayer_CAUSE_RADIO_NETWORK_LAYER_RESOURCE_OPTIMISATION                                           CauseRadioNetworkLayer = 26
	CauseRadioNetworkLayer_CAUSE_RADIO_NETWORK_LAYER_TIME_CRITICAL_ACTION                                            CauseRadioNetworkLayer = 27
	CauseRadioNetworkLayer_CAUSE_RADIO_NETWORK_LAYER_TARGET_NOT_ALLOWED                                              CauseRadioNetworkLayer = 28
	CauseRadioNetworkLayer_CAUSE_RADIO_NETWORK_LAYER_NO_RADIO_RESOURCES_AVAILABLE                                    CauseRadioNetworkLayer = 29
	CauseRadioNetworkLayer_CAUSE_RADIO_NETWORK_LAYER_INVALID_QO_S_COMBINATION                                        CauseRadioNetworkLayer = 30
	CauseRadioNetworkLayer_CAUSE_RADIO_NETWORK_LAYER_ENCRYPTION_ALGORITHMS_NOT_SUPPORTED                             CauseRadioNetworkLayer = 31
	CauseRadioNetworkLayer_CAUSE_RADIO_NETWORK_LAYER_PROCEDURE_CANCELLED                                             CauseRadioNetworkLayer = 32
	CauseRadioNetworkLayer_CAUSE_RADIO_NETWORK_LAYER_R_RM_PURPOSE                                                    CauseRadioNetworkLayer = 33
	CauseRadioNetworkLayer_CAUSE_RADIO_NETWORK_LAYER_IMPROVE_USER_BIT_RATE                                           CauseRadioNetworkLayer = 34
	CauseRadioNetworkLayer_CAUSE_RADIO_NETWORK_LAYER_USER_INACTIVITY                                                 CauseRadioNetworkLayer = 35
	CauseRadioNetworkLayer_CAUSE_RADIO_NETWORK_LAYER_RADIO_CONNECTION_WITH_UE_LOST                                   CauseRadioNetworkLayer = 36
	CauseRadioNetworkLayer_CAUSE_RADIO_NETWORK_LAYER_FAILURE_IN_THE_RADIO_INTERFACE_PROCEDURE                        CauseRadioNetworkLayer = 37
	CauseRadioNetworkLayer_CAUSE_RADIO_NETWORK_LAYER_BEARER_OPTION_NOT_SUPPORTED                                     CauseRadioNetworkLayer = 38
	CauseRadioNetworkLayer_CAUSE_RADIO_NETWORK_LAYER_UP_INTEGRITY_PROTECTION_NOT_POSSIBLE                            CauseRadioNetworkLayer = 39
	CauseRadioNetworkLayer_CAUSE_RADIO_NETWORK_LAYER_UP_CONFIDENTIALITY_PROTECTION_NOT_POSSIBLE                      CauseRadioNetworkLayer = 40
	CauseRadioNetworkLayer_CAUSE_RADIO_NETWORK_LAYER_RESOURCES_NOT_AVAILABLE_FOR_THE_SLICE_S                         CauseRadioNetworkLayer = 41
	CauseRadioNetworkLayer_CAUSE_RADIO_NETWORK_LAYER_UE_MAX_IP_DATA_RATE_REASON                                      CauseRadioNetworkLayer = 42
	CauseRadioNetworkLayer_CAUSE_RADIO_NETWORK_LAYER_C_P_INTEGRITY_PROTECTION_FAILURE                                CauseRadioNetworkLayer = 43
	CauseRadioNetworkLayer_CAUSE_RADIO_NETWORK_LAYER_U_P_INTEGRITY_PROTECTION_FAILURE                                CauseRadioNetworkLayer = 44
	CauseRadioNetworkLayer_CAUSE_RADIO_NETWORK_LAYER_SLICE_NOT_SUPPORTED_BY_NG_RAN                                   CauseRadioNetworkLayer = 45
	CauseRadioNetworkLayer_CAUSE_RADIO_NETWORK_LAYER_M_N_MOBILITY                                                    CauseRadioNetworkLayer = 46
	CauseRadioNetworkLayer_CAUSE_RADIO_NETWORK_LAYER_S_N_MOBILITY                                                    CauseRadioNetworkLayer = 47
	CauseRadioNetworkLayer_CAUSE_RADIO_NETWORK_LAYER_COUNT_REACHES_MAX_VALUE                                         CauseRadioNetworkLayer = 48
	CauseRadioNetworkLayer_CAUSE_RADIO_NETWORK_LAYER_UNKNOWN_OLD_NG_RAN_NODE_UE_XN_AP_ID                             CauseRadioNetworkLayer = 49
	CauseRadioNetworkLayer_CAUSE_RADIO_NETWORK_LAYER_P_DCP_OVERLOAD                                                  CauseRadioNetworkLayer = 50
	CauseRadioNetworkLayer_CAUSE_RADIO_NETWORK_LAYER_DRB_ID_NOT_AVAILABLE                                            CauseRadioNetworkLayer = 51
	CauseRadioNetworkLayer_CAUSE_RADIO_NETWORK_LAYER_UNSPECIFIED                                                     CauseRadioNetworkLayer = 52
	CauseRadioNetworkLayer_CAUSE_RADIO_NETWORK_LAYER_UE_CONTEXT_ID_NOT_KNOWN                                         CauseRadioNetworkLayer = 53
	CauseRadioNetworkLayer_CAUSE_RADIO_NETWORK_LAYER_NON_RELOCATION_OF_CONTEXT                                       CauseRadioNetworkLayer = 54
	CauseRadioNetworkLayer_CAUSE_RADIO_NETWORK_LAYER_CHO_CPC_RESOURCES_TOBECHANGED                                   CauseRadioNetworkLayer = 55
	CauseRadioNetworkLayer_CAUSE_RADIO_NETWORK_LAYER_R_SN_NOT_AVAILABLE_FOR_THE_UP                                   CauseRadioNetworkLayer = 56
	CauseRadioNetworkLayer_CAUSE_RADIO_NETWORK_LAYER_NPN_ACCESS_DENIED                                               CauseRadioNetworkLayer = 57
	CauseRadioNetworkLayer_CAUSE_RADIO_NETWORK_LAYER_REPORT_CHARACTERISTICS_EMPTY                                    CauseRadioNetworkLayer = 58
	CauseRadioNetworkLayer_CAUSE_RADIO_NETWORK_LAYER_EXISTING_MEASUREMENT_ID                                         CauseRadioNetworkLayer = 59
	CauseRadioNetworkLayer_CAUSE_RADIO_NETWORK_LAYER_MEASUREMENT_TEMPORARILY_NOT_AVAILABLE                           CauseRadioNetworkLayer = 60
	CauseRadioNetworkLayer_CAUSE_RADIO_NETWORK_LAYER_MEASUREMENT_NOT_SUPPORTED_FOR_THE_OBJECT                        CauseRadioNetworkLayer = 61
	CauseRadioNetworkLayer_CAUSE_RADIO_NETWORK_LAYER_UE_POWER_SAVING                                                 CauseRadioNetworkLayer = 62
	CauseRadioNetworkLayer_CAUSE_RADIO_NETWORK_LAYER_UNKNOWN_NG_RAN_NODE2_MEASUREMENT_ID                             CauseRadioNetworkLayer = 63
	CauseRadioNetworkLayer_CAUSE_RADIO_NETWORK_LAYER_INSUFFICIENT_UE_CAPABILITIES                                    CauseRadioNetworkLayer = 64
	CauseRadioNetworkLayer_CAUSE_RADIO_NETWORK_LAYER_NORMAL_RELEASE                                                  CauseRadioNetworkLayer = 65
	CauseRadioNetworkLayer_CAUSE_RADIO_NETWORK_LAYER_VALUE_OUT_OF_ALLOWED_RANGE                                      CauseRadioNetworkLayer = 66
)

// Enum value maps for CauseRadioNetworkLayer.
var (
	CauseRadioNetworkLayer_name = map[int32]string{
		0:  "CAUSE_RADIO_NETWORK_LAYER_CELL_NOT_AVAILABLE",
		1:  "CAUSE_RADIO_NETWORK_LAYER_HANDOVER_DESIRABLE_FOR_RADIO_REASONS",
		2:  "CAUSE_RADIO_NETWORK_LAYER_HANDOVER_TARGET_NOT_ALLOWED",
		3:  "CAUSE_RADIO_NETWORK_LAYER_INVALID_AMF_SET_ID",
		4:  "CAUSE_RADIO_NETWORK_LAYER_NO_RADIO_RESOURCES_AVAILABLE_IN_TARGET_CELL",
		5:  "CAUSE_RADIO_NETWORK_LAYER_PARTIAL_HANDOVER",
		6:  "CAUSE_RADIO_NETWORK_LAYER_REDUCE_LOAD_IN_SERVING_CELL",
		7:  "CAUSE_RADIO_NETWORK_LAYER_RESOURCE_OPTIMISATION_HANDOVER",
		8:  "CAUSE_RADIO_NETWORK_LAYER_TIME_CRITICAL_HANDOVER",
		9:  "CAUSE_RADIO_NETWORK_LAYER_T_XN_RELOCOVERALL_EXPIRY",
		10: "CAUSE_RADIO_NETWORK_LAYER_T_XN_RELOCPREP_EXPIRY",
		11: "CAUSE_RADIO_NETWORK_LAYER_UNKNOWN_GUAMI_ID",
		12: "CAUSE_RADIO_NETWORK_LAYER_UNKNOWN_LOCAL_NG_RAN_NODE_UE_XN_AP_ID",
		13: "CAUSE_RADIO_NETWORK_LAYER_INCONSISTENT_REMOTE_NG_RAN_NODE_UE_XN_AP_ID",
		14: "CAUSE_RADIO_NETWORK_LAYER_ENCRYPTION_AND_OR_INTEGRITY_PROTECTION_ALGORITHMS_NOT_SUPPORTED",
		15: "CAUSE_RADIO_NETWORK_LAYER_PROTECTION_ALGORITHMS_NOT_SUPPORTED",
		16: "CAUSE_RADIO_NETWORK_LAYER_MULTIPLE_PDU_SESSION_ID_INSTANCES",
		17: "CAUSE_RADIO_NETWORK_LAYER_UNKNOWN_PDU_SESSION_ID",
		18: "CAUSE_RADIO_NETWORK_LAYER_UNKNOWN_QO_S_FLOW_ID",
		19: "CAUSE_RADIO_NETWORK_LAYER_MULTIPLE_QO_S_FLOW_ID_INSTANCES",
		20: "CAUSE_RADIO_NETWORK_LAYER_SWITCH_OFF_ONGOING",
		21: "CAUSE_RADIO_NETWORK_LAYER_NOT_SUPPORTED_5_QI_VALUE",
		22: "CAUSE_RADIO_NETWORK_LAYER_T_XN_DCOVERALL_EXPIRY",
		23: "CAUSE_RADIO_NETWORK_LAYER_T_XN_DCPREP_EXPIRY",
		24: "CAUSE_RADIO_NETWORK_LAYER_ACTION_DESIRABLE_FOR_RADIO_REASONS",
		25: "CAUSE_RADIO_NETWORK_LAYER_REDUCE_LOAD",
		26: "CAUSE_RADIO_NETWORK_LAYER_RESOURCE_OPTIMISATION",
		27: "CAUSE_RADIO_NETWORK_LAYER_TIME_CRITICAL_ACTION",
		28: "CAUSE_RADIO_NETWORK_LAYER_TARGET_NOT_ALLOWED",
		29: "CAUSE_RADIO_NETWORK_LAYER_NO_RADIO_RESOURCES_AVAILABLE",
		30: "CAUSE_RADIO_NETWORK_LAYER_INVALID_QO_S_COMBINATION",
		31: "CAUSE_RADIO_NETWORK_LAYER_ENCRYPTION_ALGORITHMS_NOT_SUPPORTED",
		32: "CAUSE_RADIO_NETWORK_LAYER_PROCEDURE_CANCELLED",
		33: "CAUSE_RADIO_NETWORK_LAYER_R_RM_PURPOSE",
		34: "CAUSE_RADIO_NETWORK_LAYER_IMPROVE_USER_BIT_RATE",
		35: "CAUSE_RADIO_NETWORK_LAYER_USER_INACTIVITY",
		36: "CAUSE_RADIO_NETWORK_LAYER_RADIO_CONNECTION_WITH_UE_LOST",
		37: "CAUSE_RADIO_NETWORK_LAYER_FAILURE_IN_THE_RADIO_INTERFACE_PROCEDURE",
		38: "CAUSE_RADIO_NETWORK_LAYER_BEARER_OPTION_NOT_SUPPORTED",
		39: "CAUSE_RADIO_NETWORK_LAYER_UP_INTEGRITY_PROTECTION_NOT_POSSIBLE",
		40: "CAUSE_RADIO_NETWORK_LAYER_UP_CONFIDENTIALITY_PROTECTION_NOT_POSSIBLE",
		41: "CAUSE_RADIO_NETWORK_LAYER_RESOURCES_NOT_AVAILABLE_FOR_THE_SLICE_S",
		42: "CAUSE_RADIO_NETWORK_LAYER_UE_MAX_IP_DATA_RATE_REASON",
		43: "CAUSE_RADIO_NETWORK_LAYER_C_P_INTEGRITY_PROTECTION_FAILURE",
		44: "CAUSE_RADIO_NETWORK_LAYER_U_P_INTEGRITY_PROTECTION_FAILURE",
		45: "CAUSE_RADIO_NETWORK_LAYER_SLICE_NOT_SUPPORTED_BY_NG_RAN",
		46: "CAUSE_RADIO_NETWORK_LAYER_M_N_MOBILITY",
		47: "CAUSE_RADIO_NETWORK_LAYER_S_N_MOBILITY",
		48: "CAUSE_RADIO_NETWORK_LAYER_COUNT_REACHES_MAX_VALUE",
		49: "CAUSE_RADIO_NETWORK_LAYER_UNKNOWN_OLD_NG_RAN_NODE_UE_XN_AP_ID",
		50: "CAUSE_RADIO_NETWORK_LAYER_P_DCP_OVERLOAD",
		51: "CAUSE_RADIO_NETWORK_LAYER_DRB_ID_NOT_AVAILABLE",
		52: "CAUSE_RADIO_NETWORK_LAYER_UNSPECIFIED",
		53: "CAUSE_RADIO_NETWORK_LAYER_UE_CONTEXT_ID_NOT_KNOWN",
		54: "CAUSE_RADIO_NETWORK_LAYER_NON_RELOCATION_OF_CONTEXT",
		55: "CAUSE_RADIO_NETWORK_LAYER_CHO_CPC_RESOURCES_TOBECHANGED",
		56: "CAUSE_RADIO_NETWORK_LAYER_R_SN_NOT_AVAILABLE_FOR_THE_UP",
		57: "CAUSE_RADIO_NETWORK_LAYER_NPN_ACCESS_DENIED",
		58: "CAUSE_RADIO_NETWORK_LAYER_REPORT_CHARACTERISTICS_EMPTY",
		59: "CAUSE_RADIO_NETWORK_LAYER_EXISTING_MEASUREMENT_ID",
		60: "CAUSE_RADIO_NETWORK_LAYER_MEASUREMENT_TEMPORARILY_NOT_AVAILABLE",
		61: "CAUSE_RADIO_NETWORK_LAYER_MEASUREMENT_NOT_SUPPORTED_FOR_THE_OBJECT",
		62: "CAUSE_RADIO_NETWORK_LAYER_UE_POWER_SAVING",
		63: "CAUSE_RADIO_NETWORK_LAYER_UNKNOWN_NG_RAN_NODE2_MEASUREMENT_ID",
		64: "CAUSE_RADIO_NETWORK_LAYER_INSUFFICIENT_UE_CAPABILITIES",
		65: "CAUSE_RADIO_NETWORK_LAYER_NORMAL_RELEASE",
		66: "CAUSE_RADIO_NETWORK_LAYER_VALUE_OUT_OF_ALLOWED_RANGE",
	}
	CauseRadioNetworkLayer_value = map[string]int32{
		"CAUSE_RADIO_NETWORK_LAYER_CELL_NOT_AVAILABLE":                                              0,
		"CAUSE_RADIO_NETWORK_LAYER_HANDOVER_DESIRABLE_FOR_RADIO_REASONS":                            1,
		"CAUSE_RADIO_NETWORK_LAYER_HANDOVER_TARGET_NOT_ALLOWED":                                     2,
		"CAUSE_RADIO_NETWORK_LAYER_INVALID_AMF_SET_ID":                                              3,
		"CAUSE_RADIO_NETWORK_LAYER_NO_RADIO_RESOURCES_AVAILABLE_IN_TARGET_CELL":                     4,
		"CAUSE_RADIO_NETWORK_LAYER_PARTIAL_HANDOVER":                                                5,
		"CAUSE_RADIO_NETWORK_LAYER_REDUCE_LOAD_IN_SERVING_CELL":                                     6,
		"CAUSE_RADIO_NETWORK_LAYER_RESOURCE_OPTIMISATION_HANDOVER":                                  7,
		"CAUSE_RADIO_NETWORK_LAYER_TIME_CRITICAL_HANDOVER":                                          8,
		"CAUSE_RADIO_NETWORK_LAYER_T_XN_RELOCOVERALL_EXPIRY":                                        9,
		"CAUSE_RADIO_NETWORK_LAYER_T_XN_RELOCPREP_EXPIRY":                                           10,
		"CAUSE_RADIO_NETWORK_LAYER_UNKNOWN_GUAMI_ID":                                                11,
		"CAUSE_RADIO_NETWORK_LAYER_UNKNOWN_LOCAL_NG_RAN_NODE_UE_XN_AP_ID":                           12,
		"CAUSE_RADIO_NETWORK_LAYER_INCONSISTENT_REMOTE_NG_RAN_NODE_UE_XN_AP_ID":                     13,
		"CAUSE_RADIO_NETWORK_LAYER_ENCRYPTION_AND_OR_INTEGRITY_PROTECTION_ALGORITHMS_NOT_SUPPORTED": 14,
		"CAUSE_RADIO_NETWORK_LAYER_PROTECTION_ALGORITHMS_NOT_SUPPORTED":                             15,
		"CAUSE_RADIO_NETWORK_LAYER_MULTIPLE_PDU_SESSION_ID_INSTANCES":                               16,
		"CAUSE_RADIO_NETWORK_LAYER_UNKNOWN_PDU_SESSION_ID":                                          17,
		"CAUSE_RADIO_NETWORK_LAYER_UNKNOWN_QO_S_FLOW_ID":                                            18,
		"CAUSE_RADIO_NETWORK_LAYER_MULTIPLE_QO_S_FLOW_ID_INSTANCES":                                 19,
		"CAUSE_RADIO_NETWORK_LAYER_SWITCH_OFF_ONGOING":                                              20,
		"CAUSE_RADIO_NETWORK_LAYER_NOT_SUPPORTED_5_QI_VALUE":                                        21,
		"CAUSE_RADIO_NETWORK_LAYER_T_XN_DCOVERALL_EXPIRY":                                           22,
		"CAUSE_RADIO_NETWORK_LAYER_T_XN_DCPREP_EXPIRY":                                              23,
		"CAUSE_RADIO_NETWORK_LAYER_ACTION_DESIRABLE_FOR_RADIO_REASONS":                              24,
		"CAUSE_RADIO_NETWORK_LAYER_REDUCE_LOAD":                                                     25,
		"CAUSE_RADIO_NETWORK_LAYER_RESOURCE_OPTIMISATION":                                           26,
		"CAUSE_RADIO_NETWORK_LAYER_TIME_CRITICAL_ACTION":                                            27,
		"CAUSE_RADIO_NETWORK_LAYER_TARGET_NOT_ALLOWED":                                              28,
		"CAUSE_RADIO_NETWORK_LAYER_NO_RADIO_RESOURCES_AVAILABLE":                                    29,
		"CAUSE_RADIO_NETWORK_LAYER_INVALID_QO_S_COMBINATION":                                        30,
		"CAUSE_RADIO_NETWORK_LAYER_ENCRYPTION_ALGORITHMS_NOT_SUPPORTED":                             31,
		"CAUSE_RADIO_NETWORK_LAYER_PROCEDURE_CANCELLED":                                             32,
		"CAUSE_RADIO_NETWORK_LAYER_R_RM_PURPOSE":                                                    33,
		"CAUSE_RADIO_NETWORK_LAYER_IMPROVE_USER_BIT_RATE":                                           34,
		"CAUSE_RADIO_NETWORK_LAYER_USER_INACTIVITY":                                                 35,
		"CAUSE_RADIO_NETWORK_LAYER_RADIO_CONNECTION_WITH_UE_LOST":                                   36,
		"CAUSE_RADIO_NETWORK_LAYER_FAILURE_IN_THE_RADIO_INTERFACE_PROCEDURE":                        37,
		"CAUSE_RADIO_NETWORK_LAYER_BEARER_OPTION_NOT_SUPPORTED":                                     38,
		"CAUSE_RADIO_NETWORK_LAYER_UP_INTEGRITY_PROTECTION_NOT_POSSIBLE":                            39,
		"CAUSE_RADIO_NETWORK_LAYER_UP_CONFIDENTIALITY_PROTECTION_NOT_POSSIBLE":                      40,
		"CAUSE_RADIO_NETWORK_LAYER_RESOURCES_NOT_AVAILABLE_FOR_THE_SLICE_S":                         41,
		"CAUSE_RADIO_NETWORK_LAYER_UE_MAX_IP_DATA_RATE_REASON":                                      42,
		"CAUSE_RADIO_NETWORK_LAYER_C_P_INTEGRITY_PROTECTION_FAILURE":                                43,
		"CAUSE_RADIO_NETWORK_LAYER_U_P_INTEGRITY_PROTECTION_FAILURE":                                44,
		"CAUSE_RADIO_NETWORK_LAYER_SLICE_NOT_SUPPORTED_BY_NG_RAN":                                   45,
		"CAUSE_RADIO_NETWORK_LAYER_M_N_MOBILITY":                                                    46,
		"CAUSE_RADIO_NETWORK_LAYER_S_N_MOBILITY":                                                    47,
		"CAUSE_RADIO_NETWORK_LAYER_COUNT_REACHES_MAX_VALUE":                                         48,
		"CAUSE_RADIO_NETWORK_LAYER_UNKNOWN_OLD_NG_RAN_NODE_UE_XN_AP_ID":                             49,
		"CAUSE_RADIO_NETWORK_LAYER_P_DCP_OVERLOAD":                                                  50,
		"CAUSE_RADIO_NETWORK_LAYER_DRB_ID_NOT_AVAILABLE":                                            51,
		"CAUSE_RADIO_NETWORK_LAYER_UNSPECIFIED":                                                     52,
		"CAUSE_RADIO_NETWORK_LAYER_UE_CONTEXT_ID_NOT_KNOWN":                                         53,
		"CAUSE_RADIO_NETWORK_LAYER_NON_RELOCATION_OF_CONTEXT":                                       54,
		"CAUSE_RADIO_NETWORK_LAYER_CHO_CPC_RESOURCES_TOBECHANGED":                                   55,
		"CAUSE_RADIO_NETWORK_LAYER_R_SN_NOT_AVAILABLE_FOR_THE_UP":                                   56,
		"CAUSE_RADIO_NETWORK_LAYER_NPN_ACCESS_DENIED":                                               57,
		"CAUSE_RADIO_NETWORK_LAYER_REPORT_CHARACTERISTICS_EMPTY":                                    58,
		"CAUSE_RADIO_NETWORK_LAYER_EXISTING_MEASUREMENT_ID":                                         59,
		"CAUSE_RADIO_NETWORK_LAYER_MEASUREMENT_TEMPORARILY_NOT_AVAILABLE":                           60,
		"CAUSE_RADIO_NETWORK_LAYER_MEASUREMENT_NOT_SUPPORTED_FOR_THE_OBJECT":                        61,
		"CAUSE_RADIO_NETWORK_LAYER_UE_POWER_SAVING":                                                 62,
		"CAUSE_RADIO_NETWORK_LAYER_UNKNOWN_NG_RAN_NODE2_MEASUREMENT_ID":                             63,
		"CAUSE_RADIO_NETWORK_LAYER_INSUFFICIENT_UE_CAPABILITIES":                                    64,
		"CAUSE_RADIO_NETWORK_LAYER_NORMAL_RELEASE":                                                  65,
		"CAUSE_RADIO_NETWORK_LAYER_VALUE_OUT_OF_ALLOWED_RANGE":                                      66,
	}
)

func (x CauseRadioNetworkLayer) Enum() *CauseRadioNetworkLayer {
	p := new(CauseRadioNetworkLayer)
	*p = x
	return p
}

func (x CauseRadioNetworkLayer) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CauseRadioNetworkLayer) Descriptor() protoreflect.EnumDescriptor {
	return file_api_xnap_v1_xnap_ies_proto_enumTypes[5].Descriptor()
}

func (CauseRadioNetworkLayer) Type() protoreflect.EnumType {
	return &file_api_xnap_v1_xnap_ies_proto_enumTypes[5]
}

func (x CauseRadioNetworkLayer) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CauseRadioNetworkLayer.Descriptor instead.
func (CauseRadioNetworkLayer) EnumDescriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{5}
}

// enumerated from xnap_v1.asn1:3613
type CauseTransportLayer int32

const (
	CauseTransportLayer_CAUSE_TRANSPORT_LAYER_TRANSPORT_RESOURCE_UNAVAILABLE CauseTransportLayer = 0
	CauseTransportLayer_CAUSE_TRANSPORT_LAYER_UNSPECIFIED                    CauseTransportLayer = 1
)

// Enum value maps for CauseTransportLayer.
var (
	CauseTransportLayer_name = map[int32]string{
		0: "CAUSE_TRANSPORT_LAYER_TRANSPORT_RESOURCE_UNAVAILABLE",
		1: "CAUSE_TRANSPORT_LAYER_UNSPECIFIED",
	}
	CauseTransportLayer_value = map[string]int32{
		"CAUSE_TRANSPORT_LAYER_TRANSPORT_RESOURCE_UNAVAILABLE": 0,
		"CAUSE_TRANSPORT_LAYER_UNSPECIFIED":                    1,
	}
)

func (x CauseTransportLayer) Enum() *CauseTransportLayer {
	p := new(CauseTransportLayer)
	*p = x
	return p
}

func (x CauseTransportLayer) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CauseTransportLayer) Descriptor() protoreflect.EnumDescriptor {
	return file_api_xnap_v1_xnap_ies_proto_enumTypes[6].Descriptor()
}

func (CauseTransportLayer) Type() protoreflect.EnumType {
	return &file_api_xnap_v1_xnap_ies_proto_enumTypes[6]
}

func (x CauseTransportLayer) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CauseTransportLayer.Descriptor instead.
func (CauseTransportLayer) EnumDescriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{6}
}

// enumerated from xnap_v1.asn1:3619
type CauseProtocol int32

const (
	CauseProtocol_CAUSE_PROTOCOL_TRANSFER_SYNTAX_ERROR                             CauseProtocol = 0
	CauseProtocol_CAUSE_PROTOCOL_ABSTRACT_SYNTAX_ERROR_REJECT                      CauseProtocol = 1
	CauseProtocol_CAUSE_PROTOCOL_ABSTRACT_SYNTAX_ERROR_IGNORE_AND_NOTIFY           CauseProtocol = 2
	CauseProtocol_CAUSE_PROTOCOL_MESSAGE_NOT_COMPATIBLE_WITH_RECEIVER_STATE        CauseProtocol = 3
	CauseProtocol_CAUSE_PROTOCOL_SEMANTIC_ERROR                                    CauseProtocol = 4
	CauseProtocol_CAUSE_PROTOCOL_ABSTRACT_SYNTAX_ERROR_FALSELY_CONSTRUCTED_MESSAGE CauseProtocol = 5
	CauseProtocol_CAUSE_PROTOCOL_UNSPECIFIED                                       CauseProtocol = 6
)

// Enum value maps for CauseProtocol.
var (
	CauseProtocol_name = map[int32]string{
		0: "CAUSE_PROTOCOL_TRANSFER_SYNTAX_ERROR",
		1: "CAUSE_PROTOCOL_ABSTRACT_SYNTAX_ERROR_REJECT",
		2: "CAUSE_PROTOCOL_ABSTRACT_SYNTAX_ERROR_IGNORE_AND_NOTIFY",
		3: "CAUSE_PROTOCOL_MESSAGE_NOT_COMPATIBLE_WITH_RECEIVER_STATE",
		4: "CAUSE_PROTOCOL_SEMANTIC_ERROR",
		5: "CAUSE_PROTOCOL_ABSTRACT_SYNTAX_ERROR_FALSELY_CONSTRUCTED_MESSAGE",
		6: "CAUSE_PROTOCOL_UNSPECIFIED",
	}
	CauseProtocol_value = map[string]int32{
		"CAUSE_PROTOCOL_TRANSFER_SYNTAX_ERROR":                             0,
		"CAUSE_PROTOCOL_ABSTRACT_SYNTAX_ERROR_REJECT":                      1,
		"CAUSE_PROTOCOL_ABSTRACT_SYNTAX_ERROR_IGNORE_AND_NOTIFY":           2,
		"CAUSE_PROTOCOL_MESSAGE_NOT_COMPATIBLE_WITH_RECEIVER_STATE":        3,
		"CAUSE_PROTOCOL_SEMANTIC_ERROR":                                    4,
		"CAUSE_PROTOCOL_ABSTRACT_SYNTAX_ERROR_FALSELY_CONSTRUCTED_MESSAGE": 5,
		"CAUSE_PROTOCOL_UNSPECIFIED":                                       6,
	}
)

func (x CauseProtocol) Enum() *CauseProtocol {
	p := new(CauseProtocol)
	*p = x
	return p
}

func (x CauseProtocol) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CauseProtocol) Descriptor() protoreflect.EnumDescriptor {
	return file_api_xnap_v1_xnap_ies_proto_enumTypes[7].Descriptor()
}

func (CauseProtocol) Type() protoreflect.EnumType {
	return &file_api_xnap_v1_xnap_ies_proto_enumTypes[7]
}

func (x CauseProtocol) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CauseProtocol.Descriptor instead.
func (CauseProtocol) EnumDescriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{7}
}

// enumerated from xnap_v1.asn1:3630
type CauseMisc int32

const (
	CauseMisc_CAUSE_MISC_CONTROL_PROCESSING_OVERLOAD                CauseMisc = 0
	CauseMisc_CAUSE_MISC_HARDWARE_FAILURE                           CauseMisc = 1
	CauseMisc_CAUSE_MISC_O_AND_M_INTERVENTION                       CauseMisc = 2
	CauseMisc_CAUSE_MISC_NOT_ENOUGH_USER_PLANE_PROCESSING_RESOURCES CauseMisc = 3
	CauseMisc_CAUSE_MISC_UNSPECIFIED                                CauseMisc = 4
)

// Enum value maps for CauseMisc.
var (
	CauseMisc_name = map[int32]string{
		0: "CAUSE_MISC_CONTROL_PROCESSING_OVERLOAD",
		1: "CAUSE_MISC_HARDWARE_FAILURE",
		2: "CAUSE_MISC_O_AND_M_INTERVENTION",
		3: "CAUSE_MISC_NOT_ENOUGH_USER_PLANE_PROCESSING_RESOURCES",
		4: "CAUSE_MISC_UNSPECIFIED",
	}
	CauseMisc_value = map[string]int32{
		"CAUSE_MISC_CONTROL_PROCESSING_OVERLOAD":                0,
		"CAUSE_MISC_HARDWARE_FAILURE":                           1,
		"CAUSE_MISC_O_AND_M_INTERVENTION":                       2,
		"CAUSE_MISC_NOT_ENOUGH_USER_PLANE_PROCESSING_RESOURCES": 3,
		"CAUSE_MISC_UNSPECIFIED":                                4,
	}
)

func (x CauseMisc) Enum() *CauseMisc {
	p := new(CauseMisc)
	*p = x
	return p
}

func (x CauseMisc) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CauseMisc) Descriptor() protoreflect.EnumDescriptor {
	return file_api_xnap_v1_xnap_ies_proto_enumTypes[8].Descriptor()
}

func (CauseMisc) Type() protoreflect.EnumType {
	return &file_api_xnap_v1_xnap_ies_proto_enumTypes[8]
}

func (x CauseMisc) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CauseMisc.Descriptor instead.
func (CauseMisc) EnumDescriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{8}
}

// enumerated from xnap_v1.asn1:3640
type FullListCellAssistanceInfoNr int32

const (
	FullListCellAssistanceInfoNr_FULL_LIST_CELL_ASSISTANCE_INFO_NR_ALL_SERVED_CELLS_NR FullListCellAssistanceInfoNr = 0
)

// Enum value maps for FullListCellAssistanceInfoNr.
var (
	FullListCellAssistanceInfoNr_name = map[int32]string{
		0: "FULL_LIST_CELL_ASSISTANCE_INFO_NR_ALL_SERVED_CELLS_NR",
	}
	FullListCellAssistanceInfoNr_value = map[string]int32{
		"FULL_LIST_CELL_ASSISTANCE_INFO_NR_ALL_SERVED_CELLS_NR": 0,
	}
)

func (x FullListCellAssistanceInfoNr) Enum() *FullListCellAssistanceInfoNr {
	p := new(FullListCellAssistanceInfoNr)
	*p = x
	return p
}

func (x FullListCellAssistanceInfoNr) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FullListCellAssistanceInfoNr) Descriptor() protoreflect.EnumDescriptor {
	return file_api_xnap_v1_xnap_ies_proto_enumTypes[9].Descriptor()
}

func (FullListCellAssistanceInfoNr) Type() protoreflect.EnumType {
	return &file_api_xnap_v1_xnap_ies_proto_enumTypes[9]
}

func (x FullListCellAssistanceInfoNr) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FullListCellAssistanceInfoNr.Descriptor instead.
func (FullListCellAssistanceInfoNr) EnumDescriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{9}
}

// enumerated from xnap_v1.asn1:3675
type FullListCellAssistanceInfoEutra int32

const (
	FullListCellAssistanceInfoEutra_FULL_LIST_CELL_ASSISTANCE_INFO_EUTRA_ALL_SERVED_CELLS_E_UTRA FullListCellAssistanceInfoEutra = 0
)

// Enum value maps for FullListCellAssistanceInfoEutra.
var (
	FullListCellAssistanceInfoEutra_name = map[int32]string{
		0: "FULL_LIST_CELL_ASSISTANCE_INFO_EUTRA_ALL_SERVED_CELLS_E_UTRA",
	}
	FullListCellAssistanceInfoEutra_value = map[string]int32{
		"FULL_LIST_CELL_ASSISTANCE_INFO_EUTRA_ALL_SERVED_CELLS_E_UTRA": 0,
	}
)

func (x FullListCellAssistanceInfoEutra) Enum() *FullListCellAssistanceInfoEutra {
	p := new(FullListCellAssistanceInfoEutra)
	*p = x
	return p
}

func (x FullListCellAssistanceInfoEutra) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FullListCellAssistanceInfoEutra) Descriptor() protoreflect.EnumDescriptor {
	return file_api_xnap_v1_xnap_ies_proto_enumTypes[10].Descriptor()
}

func (FullListCellAssistanceInfoEutra) Type() protoreflect.EnumType {
	return &file_api_xnap_v1_xnap_ies_proto_enumTypes[10]
}

func (x FullListCellAssistanceInfoEutra) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FullListCellAssistanceInfoEutra.Descriptor instead.
func (FullListCellAssistanceInfoEutra) EnumDescriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{10}
}

// enumerated from xnap_v1.asn1:3783
type ChoMRdcEarlyDataForwarding int32

const (
	ChoMRdcEarlyDataForwarding_CHO_MRDC_EARLY_DATA_FORWARDING_STOP ChoMRdcEarlyDataForwarding = 0
)

// Enum value maps for ChoMRdcEarlyDataForwarding.
var (
	ChoMRdcEarlyDataForwarding_name = map[int32]string{
		0: "CHO_MRDC_EARLY_DATA_FORWARDING_STOP",
	}
	ChoMRdcEarlyDataForwarding_value = map[string]int32{
		"CHO_MRDC_EARLY_DATA_FORWARDING_STOP": 0,
	}
)

func (x ChoMRdcEarlyDataForwarding) Enum() *ChoMRdcEarlyDataForwarding {
	p := new(ChoMRdcEarlyDataForwarding)
	*p = x
	return p
}

func (x ChoMRdcEarlyDataForwarding) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ChoMRdcEarlyDataForwarding) Descriptor() protoreflect.EnumDescriptor {
	return file_api_xnap_v1_xnap_ies_proto_enumTypes[11].Descriptor()
}

func (ChoMRdcEarlyDataForwarding) Type() protoreflect.EnumType {
	return &file_api_xnap_v1_xnap_ies_proto_enumTypes[11]
}

func (x ChoMRdcEarlyDataForwarding) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ChoMRdcEarlyDataForwarding.Descriptor instead.
func (ChoMRdcEarlyDataForwarding) EnumDescriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{11}
}

// enumerated from xnap_v1.asn1:3785
type ChoMRdcIndicator int32

const (
	ChoMRdcIndicator_CHO_MRDC_INDICATOR_TRUE ChoMRdcIndicator = 0
)

// Enum value maps for ChoMRdcIndicator.
var (
	ChoMRdcIndicator_name = map[int32]string{
		0: "CHO_MRDC_INDICATOR_TRUE",
	}
	ChoMRdcIndicator_value = map[string]int32{
		"CHO_MRDC_INDICATOR_TRUE": 0,
	}
)

func (x ChoMRdcIndicator) Enum() *ChoMRdcIndicator {
	p := new(ChoMRdcIndicator)
	*p = x
	return p
}

func (x ChoMRdcIndicator) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ChoMRdcIndicator) Descriptor() protoreflect.EnumDescriptor {
	return file_api_xnap_v1_xnap_ies_proto_enumTypes[12].Descriptor()
}

func (ChoMRdcIndicator) Type() protoreflect.EnumType {
	return &file_api_xnap_v1_xnap_ies_proto_enumTypes[12]
}

func (x ChoMRdcIndicator) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ChoMRdcIndicator.Descriptor instead.
func (ChoMRdcIndicator) EnumDescriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{12}
}

// enumerated from xnap_v1.asn1:3789
type Chotrigger int32

const (
	Chotrigger_CHOTRIGGER_CHO_INITIATION Chotrigger = 0
	Chotrigger_CHOTRIGGER_CHO_REPLACE    Chotrigger = 1
)

// Enum value maps for Chotrigger.
var (
	Chotrigger_name = map[int32]string{
		0: "CHOTRIGGER_CHO_INITIATION",
		1: "CHOTRIGGER_CHO_REPLACE",
	}
	Chotrigger_value = map[string]int32{
		"CHOTRIGGER_CHO_INITIATION": 0,
		"CHOTRIGGER_CHO_REPLACE":    1,
	}
)

func (x Chotrigger) Enum() *Chotrigger {
	p := new(Chotrigger)
	*p = x
	return p
}

func (x Chotrigger) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Chotrigger) Descriptor() protoreflect.EnumDescriptor {
	return file_api_xnap_v1_xnap_ies_proto_enumTypes[13].Descriptor()
}

func (Chotrigger) Type() protoreflect.EnumType {
	return &file_api_xnap_v1_xnap_ies_proto_enumTypes[13]
}

func (x Chotrigger) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Chotrigger.Descriptor instead.
func (Chotrigger) EnumDescriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{13}
}

// enumerated from xnap_v1.asn1:3824
type ConfiguredTacindication int32

const (
	ConfiguredTacindication_CONFIGURED_TACINDICATION_TRUE ConfiguredTacindication = 0
)

// Enum value maps for ConfiguredTacindication.
var (
	ConfiguredTacindication_name = map[int32]string{
		0: "CONFIGURED_TACINDICATION_TRUE",
	}
	ConfiguredTacindication_value = map[string]int32{
		"CONFIGURED_TACINDICATION_TRUE": 0,
	}
)

func (x ConfiguredTacindication) Enum() *ConfiguredTacindication {
	p := new(ConfiguredTacindication)
	*p = x
	return p
}

func (x ConfiguredTacindication) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ConfiguredTacindication) Descriptor() protoreflect.EnumDescriptor {
	return file_api_xnap_v1_xnap_ies_proto_enumTypes[14].Descriptor()
}

func (ConfiguredTacindication) Type() protoreflect.EnumType {
	return &file_api_xnap_v1_xnap_ies_proto_enumTypes[14]
}

func (x ConfiguredTacindication) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ConfiguredTacindication.Descriptor instead.
func (ConfiguredTacindication) EnumDescriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{14}
}

// enumerated from xnap_v1.asn1:3830
type EndcsupportConnectivitySupport int32

const (
	EndcsupportConnectivitySupport_E_NDCSUPPORT_CONNECTIVITY_SUPPORT_SUPPORTED     EndcsupportConnectivitySupport = 0
	EndcsupportConnectivitySupport_E_NDCSUPPORT_CONNECTIVITY_SUPPORT_NOT_SUPPORTED EndcsupportConnectivitySupport = 1
)

// Enum value maps for EndcsupportConnectivitySupport.
var (
	EndcsupportConnectivitySupport_name = map[int32]string{
		0: "E_NDCSUPPORT_CONNECTIVITY_SUPPORT_SUPPORTED",
		1: "E_NDCSUPPORT_CONNECTIVITY_SUPPORT_NOT_SUPPORTED",
	}
	EndcsupportConnectivitySupport_value = map[string]int32{
		"E_NDCSUPPORT_CONNECTIVITY_SUPPORT_SUPPORTED":     0,
		"E_NDCSUPPORT_CONNECTIVITY_SUPPORT_NOT_SUPPORTED": 1,
	}
)

func (x EndcsupportConnectivitySupport) Enum() *EndcsupportConnectivitySupport {
	p := new(EndcsupportConnectivitySupport)
	*p = x
	return p
}

func (x EndcsupportConnectivitySupport) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EndcsupportConnectivitySupport) Descriptor() protoreflect.EnumDescriptor {
	return file_api_xnap_v1_xnap_ies_proto_enumTypes[15].Descriptor()
}

func (EndcsupportConnectivitySupport) Type() protoreflect.EnumType {
	return &file_api_xnap_v1_xnap_ies_proto_enumTypes[15]
}

func (x EndcsupportConnectivitySupport) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EndcsupportConnectivitySupport.Descriptor instead.
func (EndcsupportConnectivitySupport) EnumDescriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{15}
}

// enumerated from xnap_v1.asn1:3906
type CyclicPrefixEUTraDL int32

const (
	CyclicPrefixEUTraDL_CYCLIC_PREFIX_E_UTRA_DL_NORMAL   CyclicPrefixEUTraDL = 0
	CyclicPrefixEUTraDL_CYCLIC_PREFIX_E_UTRA_DL_EXTENDED CyclicPrefixEUTraDL = 1
)

// Enum value maps for CyclicPrefixEUTraDL.
var (
	CyclicPrefixEUTraDL_name = map[int32]string{
		0: "CYCLIC_PREFIX_E_UTRA_DL_NORMAL",
		1: "CYCLIC_PREFIX_E_UTRA_DL_EXTENDED",
	}
	CyclicPrefixEUTraDL_value = map[string]int32{
		"CYCLIC_PREFIX_E_UTRA_DL_NORMAL":   0,
		"CYCLIC_PREFIX_E_UTRA_DL_EXTENDED": 1,
	}
)

func (x CyclicPrefixEUTraDL) Enum() *CyclicPrefixEUTraDL {
	p := new(CyclicPrefixEUTraDL)
	*p = x
	return p
}

func (x CyclicPrefixEUTraDL) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CyclicPrefixEUTraDL) Descriptor() protoreflect.EnumDescriptor {
	return file_api_xnap_v1_xnap_ies_proto_enumTypes[16].Descriptor()
}

func (CyclicPrefixEUTraDL) Type() protoreflect.EnumType {
	return &file_api_xnap_v1_xnap_ies_proto_enumTypes[16]
}

func (x CyclicPrefixEUTraDL) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CyclicPrefixEUTraDL.Descriptor instead.
func (CyclicPrefixEUTraDL) EnumDescriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{16}
}

// enumerated from xnap_v1.asn1:3913
type CyclicPrefixEUTraUL int32

const (
	CyclicPrefixEUTraUL_CYCLIC_PREFIX_E_UTRA_UL_NORMAL   CyclicPrefixEUTraUL = 0
	CyclicPrefixEUTraUL_CYCLIC_PREFIX_E_UTRA_UL_EXTENDED CyclicPrefixEUTraUL = 1
)

// Enum value maps for CyclicPrefixEUTraUL.
var (
	CyclicPrefixEUTraUL_name = map[int32]string{
		0: "CYCLIC_PREFIX_E_UTRA_UL_NORMAL",
		1: "CYCLIC_PREFIX_E_UTRA_UL_EXTENDED",
	}
	CyclicPrefixEUTraUL_value = map[string]int32{
		"CYCLIC_PREFIX_E_UTRA_UL_NORMAL":   0,
		"CYCLIC_PREFIX_E_UTRA_UL_EXTENDED": 1,
	}
)

func (x CyclicPrefixEUTraUL) Enum() *CyclicPrefixEUTraUL {
	p := new(CyclicPrefixEUTraUL)
	*p = x
	return p
}

func (x CyclicPrefixEUTraUL) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CyclicPrefixEUTraUL) Descriptor() protoreflect.EnumDescriptor {
	return file_api_xnap_v1_xnap_ies_proto_enumTypes[17].Descriptor()
}

func (CyclicPrefixEUTraUL) Type() protoreflect.EnumType {
	return &file_api_xnap_v1_xnap_ies_proto_enumTypes[17]
}

func (x CyclicPrefixEUTraUL) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CyclicPrefixEUTraUL.Descriptor instead.
func (CyclicPrefixEUTraUL) EnumDescriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{17}
}

// enumerated from xnap_v1.asn1:3919
type CsiRStransmissionIndication int32

const (
	CsiRStransmissionIndication_CSI_RSTRANSMISSION_INDICATION_ACTIVATED   CsiRStransmissionIndication = 0
	CsiRStransmissionIndication_CSI_RSTRANSMISSION_INDICATION_DEACTIVATED CsiRStransmissionIndication = 1
)

// Enum value maps for CsiRStransmissionIndication.
var (
	CsiRStransmissionIndication_name = map[int32]string{
		0: "CSI_RSTRANSMISSION_INDICATION_ACTIVATED",
		1: "CSI_RSTRANSMISSION_INDICATION_DEACTIVATED",
	}
	CsiRStransmissionIndication_value = map[string]int32{
		"CSI_RSTRANSMISSION_INDICATION_ACTIVATED":   0,
		"CSI_RSTRANSMISSION_INDICATION_DEACTIVATED": 1,
	}
)

func (x CsiRStransmissionIndication) Enum() *CsiRStransmissionIndication {
	p := new(CsiRStransmissionIndication)
	*p = x
	return p
}

func (x CsiRStransmissionIndication) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CsiRStransmissionIndication) Descriptor() protoreflect.EnumDescriptor {
	return file_api_xnap_v1_xnap_ies_proto_enumTypes[18].Descriptor()
}

func (CsiRStransmissionIndication) Type() protoreflect.EnumType {
	return &file_api_xnap_v1_xnap_ies_proto_enumTypes[18]
}

func (x CsiRStransmissionIndication) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CsiRStransmissionIndication.Descriptor instead.
func (CsiRStransmissionIndication) EnumDescriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{18}
}

// enumerated from xnap_v1.asn1:3945
type DataForwardingAccepted int32

const (
	DataForwardingAccepted_DATA_FORWARDING_ACCEPTED_DATA_FORWARDING_ACCEPTED DataForwardingAccepted = 0
)

// Enum value maps for DataForwardingAccepted.
var (
	DataForwardingAccepted_name = map[int32]string{
		0: "DATA_FORWARDING_ACCEPTED_DATA_FORWARDING_ACCEPTED",
	}
	DataForwardingAccepted_value = map[string]int32{
		"DATA_FORWARDING_ACCEPTED_DATA_FORWARDING_ACCEPTED": 0,
	}
)

func (x DataForwardingAccepted) Enum() *DataForwardingAccepted {
	p := new(DataForwardingAccepted)
	*p = x
	return p
}

func (x DataForwardingAccepted) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DataForwardingAccepted) Descriptor() protoreflect.EnumDescriptor {
	return file_api_xnap_v1_xnap_ies_proto_enumTypes[19].Descriptor()
}

func (DataForwardingAccepted) Type() protoreflect.EnumType {
	return &file_api_xnap_v1_xnap_ies_proto_enumTypes[19]
}

func (x DataForwardingAccepted) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DataForwardingAccepted.Descriptor instead.
func (DataForwardingAccepted) EnumDescriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{19}
}

// enumerated from xnap_v1.asn1:4071
type DapsIndicatorDapsrequestInfo int32

const (
	DapsIndicatorDapsrequestInfo_DAPS_INDICATOR_DAPSREQUEST_INFO_DAPS_HO_REQUIRED DapsIndicatorDapsrequestInfo = 0
)

// Enum value maps for DapsIndicatorDapsrequestInfo.
var (
	DapsIndicatorDapsrequestInfo_name = map[int32]string{
		0: "DAPS_INDICATOR_DAPSREQUEST_INFO_DAPS_HO_REQUIRED",
	}
	DapsIndicatorDapsrequestInfo_value = map[string]int32{
		"DAPS_INDICATOR_DAPSREQUEST_INFO_DAPS_HO_REQUIRED": 0,
	}
)

func (x DapsIndicatorDapsrequestInfo) Enum() *DapsIndicatorDapsrequestInfo {
	p := new(DapsIndicatorDapsrequestInfo)
	*p = x
	return p
}

func (x DapsIndicatorDapsrequestInfo) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DapsIndicatorDapsrequestInfo) Descriptor() protoreflect.EnumDescriptor {
	return file_api_xnap_v1_xnap_ies_proto_enumTypes[20].Descriptor()
}

func (DapsIndicatorDapsrequestInfo) Type() protoreflect.EnumType {
	return &file_api_xnap_v1_xnap_ies_proto_enumTypes[20]
}

func (x DapsIndicatorDapsrequestInfo) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DapsIndicatorDapsrequestInfo.Descriptor instead.
func (DapsIndicatorDapsrequestInfo) EnumDescriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{20}
}

// enumerated from xnap_v1.asn1:4085
type DapsResponseIndicatorDapsresponseInfoItem int32

const (
	DapsResponseIndicatorDapsresponseInfoItem_DAPS_RESPONSE_INDICATOR_DAPSRESPONSE_INFO_ITEM_DAPS_HO_ACCEPTED     DapsResponseIndicatorDapsresponseInfoItem = 0
	DapsResponseIndicatorDapsresponseInfoItem_DAPS_RESPONSE_INDICATOR_DAPSRESPONSE_INFO_ITEM_DAPS_HO_NOT_ACCEPTED DapsResponseIndicatorDapsresponseInfoItem = 1
)

// Enum value maps for DapsResponseIndicatorDapsresponseInfoItem.
var (
	DapsResponseIndicatorDapsresponseInfoItem_name = map[int32]string{
		0: "DAPS_RESPONSE_INDICATOR_DAPSRESPONSE_INFO_ITEM_DAPS_HO_ACCEPTED",
		1: "DAPS_RESPONSE_INDICATOR_DAPSRESPONSE_INFO_ITEM_DAPS_HO_NOT_ACCEPTED",
	}
	DapsResponseIndicatorDapsresponseInfoItem_value = map[string]int32{
		"DAPS_RESPONSE_INDICATOR_DAPSRESPONSE_INFO_ITEM_DAPS_HO_ACCEPTED":     0,
		"DAPS_RESPONSE_INDICATOR_DAPSRESPONSE_INFO_ITEM_DAPS_HO_NOT_ACCEPTED": 1,
	}
)

func (x DapsResponseIndicatorDapsresponseInfoItem) Enum() *DapsResponseIndicatorDapsresponseInfoItem {
	p := new(DapsResponseIndicatorDapsresponseInfoItem)
	*p = x
	return p
}

func (x DapsResponseIndicatorDapsresponseInfoItem) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DapsResponseIndicatorDapsresponseInfoItem) Descriptor() protoreflect.EnumDescriptor {
	return file_api_xnap_v1_xnap_ies_proto_enumTypes[21].Descriptor()
}

func (DapsResponseIndicatorDapsresponseInfoItem) Type() protoreflect.EnumType {
	return &file_api_xnap_v1_xnap_ies_proto_enumTypes[21]
}

func (x DapsResponseIndicatorDapsresponseInfoItem) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DapsResponseIndicatorDapsresponseInfoItem.Descriptor instead.
func (DapsResponseIndicatorDapsresponseInfoItem) EnumDescriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{21}
}

// enumerated from xnap_v1.asn1:4098
type DesiredActNotificationLevel int32

const (
	DesiredActNotificationLevel_DESIRED_ACT_NOTIFICATION_LEVEL_NONE        DesiredActNotificationLevel = 0
	DesiredActNotificationLevel_DESIRED_ACT_NOTIFICATION_LEVEL_QOS_FLOW    DesiredActNotificationLevel = 1
	DesiredActNotificationLevel_DESIRED_ACT_NOTIFICATION_LEVEL_PDU_SESSION DesiredActNotificationLevel = 2
	DesiredActNotificationLevel_DESIRED_ACT_NOTIFICATION_LEVEL_UE_LEVEL    DesiredActNotificationLevel = 3
)

// Enum value maps for DesiredActNotificationLevel.
var (
	DesiredActNotificationLevel_name = map[int32]string{
		0: "DESIRED_ACT_NOTIFICATION_LEVEL_NONE",
		1: "DESIRED_ACT_NOTIFICATION_LEVEL_QOS_FLOW",
		2: "DESIRED_ACT_NOTIFICATION_LEVEL_PDU_SESSION",
		3: "DESIRED_ACT_NOTIFICATION_LEVEL_UE_LEVEL",
	}
	DesiredActNotificationLevel_value = map[string]int32{
		"DESIRED_ACT_NOTIFICATION_LEVEL_NONE":        0,
		"DESIRED_ACT_NOTIFICATION_LEVEL_QOS_FLOW":    1,
		"DESIRED_ACT_NOTIFICATION_LEVEL_PDU_SESSION": 2,
		"DESIRED_ACT_NOTIFICATION_LEVEL_UE_LEVEL":    3,
	}
)

func (x DesiredActNotificationLevel) Enum() *DesiredActNotificationLevel {
	p := new(DesiredActNotificationLevel)
	*p = x
	return p
}

func (x DesiredActNotificationLevel) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DesiredActNotificationLevel) Descriptor() protoreflect.EnumDescriptor {
	return file_api_xnap_v1_xnap_ies_proto_enumTypes[22].Descriptor()
}

func (DesiredActNotificationLevel) Type() protoreflect.EnumType {
	return &file_api_xnap_v1_xnap_ies_proto_enumTypes[22]
}

func (x DesiredActNotificationLevel) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DesiredActNotificationLevel.Descriptor instead.
func (DesiredActNotificationLevel) EnumDescriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{22}
}

// enumerated from xnap_v1.asn1:4100
type DefaultDrbAllowed int32

const (
	DefaultDrbAllowed_DEFAULT_DRB_ALLOWED_TRUE  DefaultDrbAllowed = 0
	DefaultDrbAllowed_DEFAULT_DRB_ALLOWED_FALSE DefaultDrbAllowed = 1
)

// Enum value maps for DefaultDrbAllowed.
var (
	DefaultDrbAllowed_name = map[int32]string{
		0: "DEFAULT_DRB_ALLOWED_TRUE",
		1: "DEFAULT_DRB_ALLOWED_FALSE",
	}
	DefaultDrbAllowed_value = map[string]int32{
		"DEFAULT_DRB_ALLOWED_TRUE":  0,
		"DEFAULT_DRB_ALLOWED_FALSE": 1,
	}
)

func (x DefaultDrbAllowed) Enum() *DefaultDrbAllowed {
	p := new(DefaultDrbAllowed)
	*p = x
	return p
}

func (x DefaultDrbAllowed) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DefaultDrbAllowed) Descriptor() protoreflect.EnumDescriptor {
	return file_api_xnap_v1_xnap_ies_proto_enumTypes[23].Descriptor()
}

func (DefaultDrbAllowed) Type() protoreflect.EnumType {
	return &file_api_xnap_v1_xnap_ies_proto_enumTypes[23]
}

func (x DefaultDrbAllowed) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DefaultDrbAllowed.Descriptor instead.
func (DefaultDrbAllowed) EnumDescriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{23}
}

// enumerated from xnap_v1.asn1:4102
type DirectForwardingPathAvailability int32

const (
	DirectForwardingPathAvailability_DIRECT_FORWARDING_PATH_AVAILABILITY_DIRECT_PATH_AVAILABLE DirectForwardingPathAvailability = 0
)

// Enum value maps for DirectForwardingPathAvailability.
var (
	DirectForwardingPathAvailability_name = map[int32]string{
		0: "DIRECT_FORWARDING_PATH_AVAILABILITY_DIRECT_PATH_AVAILABLE",
	}
	DirectForwardingPathAvailability_value = map[string]int32{
		"DIRECT_FORWARDING_PATH_AVAILABILITY_DIRECT_PATH_AVAILABLE": 0,
	}
)

func (x DirectForwardingPathAvailability) Enum() *DirectForwardingPathAvailability {
	p := new(DirectForwardingPathAvailability)
	*p = x
	return p
}

func (x DirectForwardingPathAvailability) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DirectForwardingPathAvailability) Descriptor() protoreflect.EnumDescriptor {
	return file_api_xnap_v1_xnap_ies_proto_enumTypes[24].Descriptor()
}

func (DirectForwardingPathAvailability) Type() protoreflect.EnumType {
	return &file_api_xnap_v1_xnap_ies_proto_enumTypes[24]
}

func (x DirectForwardingPathAvailability) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DirectForwardingPathAvailability.Descriptor instead.
func (DirectForwardingPathAvailability) EnumDescriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{24}
}

// enumerated from xnap_v1.asn1:4116
type Dlforwarding int32

const (
	Dlforwarding_DLFORWARDING_DL_FORWARDING_PROPOSED Dlforwarding = 0
)

// Enum value maps for Dlforwarding.
var (
	Dlforwarding_name = map[int32]string{
		0: "DLFORWARDING_DL_FORWARDING_PROPOSED",
	}
	Dlforwarding_value = map[string]int32{
		"DLFORWARDING_DL_FORWARDING_PROPOSED": 0,
	}
)

func (x Dlforwarding) Enum() *Dlforwarding {
	p := new(Dlforwarding)
	*p = x
	return p
}

func (x Dlforwarding) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Dlforwarding) Descriptor() protoreflect.EnumDescriptor {
	return file_api_xnap_v1_xnap_ies_proto_enumTypes[25].Descriptor()
}

func (Dlforwarding) Type() protoreflect.EnumType {
	return &file_api_xnap_v1_xnap_ies_proto_enumTypes[25]
}

func (x Dlforwarding) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Dlforwarding.Descriptor instead.
func (Dlforwarding) EnumDescriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{25}
}

// enumerated from xnap_v1.asn1:4247
type DuplicationActivation int32

const (
	DuplicationActivation_DUPLICATION_ACTIVATION_ACTIVE   DuplicationActivation = 0
	DuplicationActivation_DUPLICATION_ACTIVATION_INACTIVE DuplicationActivation = 1
)

// Enum value maps for DuplicationActivation.
var (
	DuplicationActivation_name = map[int32]string{
		0: "DUPLICATION_ACTIVATION_ACTIVE",
		1: "DUPLICATION_ACTIVATION_INACTIVE",
	}
	DuplicationActivation_value = map[string]int32{
		"DUPLICATION_ACTIVATION_ACTIVE":   0,
		"DUPLICATION_ACTIVATION_INACTIVE": 1,
	}
)

func (x DuplicationActivation) Enum() *DuplicationActivation {
	p := new(DuplicationActivation)
	*p = x
	return p
}

func (x DuplicationActivation) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DuplicationActivation) Descriptor() protoreflect.EnumDescriptor {
	return file_api_xnap_v1_xnap_ies_proto_enumTypes[26].Descriptor()
}

func (DuplicationActivation) Type() protoreflect.EnumType {
	return &file_api_xnap_v1_xnap_ies_proto_enumTypes[26]
}

func (x DuplicationActivation) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DuplicationActivation.Descriptor instead.
func (DuplicationActivation) EnumDescriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{26}
}

// enumerated from xnap_v1.asn1:4255
type DelayCriticalDynamic5Qidescriptor int32

const (
	DelayCriticalDynamic5Qidescriptor_DELAY_CRITICAL_DYNAMIC5_QIDESCRIPTOR_DELAY_CRITICAL     DelayCriticalDynamic5Qidescriptor = 0
	DelayCriticalDynamic5Qidescriptor_DELAY_CRITICAL_DYNAMIC5_QIDESCRIPTOR_NON_DELAY_CRITICAL DelayCriticalDynamic5Qidescriptor = 1
)

// Enum value maps for DelayCriticalDynamic5Qidescriptor.
var (
	DelayCriticalDynamic5Qidescriptor_name = map[int32]string{
		0: "DELAY_CRITICAL_DYNAMIC5_QIDESCRIPTOR_DELAY_CRITICAL",
		1: "DELAY_CRITICAL_DYNAMIC5_QIDESCRIPTOR_NON_DELAY_CRITICAL",
	}
	DelayCriticalDynamic5Qidescriptor_value = map[string]int32{
		"DELAY_CRITICAL_DYNAMIC5_QIDESCRIPTOR_DELAY_CRITICAL":     0,
		"DELAY_CRITICAL_DYNAMIC5_QIDESCRIPTOR_NON_DELAY_CRITICAL": 1,
	}
)

func (x DelayCriticalDynamic5Qidescriptor) Enum() *DelayCriticalDynamic5Qidescriptor {
	p := new(DelayCriticalDynamic5Qidescriptor)
	*p = x
	return p
}

func (x DelayCriticalDynamic5Qidescriptor) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DelayCriticalDynamic5Qidescriptor) Descriptor() protoreflect.EnumDescriptor {
	return file_api_xnap_v1_xnap_ies_proto_enumTypes[27].Descriptor()
}

func (DelayCriticalDynamic5Qidescriptor) Type() protoreflect.EnumType {
	return &file_api_xnap_v1_xnap_ies_proto_enumTypes[27]
}

func (x DelayCriticalDynamic5Qidescriptor) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DelayCriticalDynamic5Qidescriptor.Descriptor instead.
func (DelayCriticalDynamic5Qidescriptor) EnumDescriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{27}
}

// enumerated from xnap_v1.asn1:4308
type HighSpeedFlagEutraprachconfiguration int32

const (
	HighSpeedFlagEutraprachconfiguration_HIGH_SPEED_FLAG_EUTRAPRACHCONFIGURATION_TRUE  HighSpeedFlagEutraprachconfiguration = 0
	HighSpeedFlagEutraprachconfiguration_HIGH_SPEED_FLAG_EUTRAPRACHCONFIGURATION_FALSE HighSpeedFlagEutraprachconfiguration = 1
)

// Enum value maps for HighSpeedFlagEutraprachconfiguration.
var (
	HighSpeedFlagEutraprachconfiguration_name = map[int32]string{
		0: "HIGH_SPEED_FLAG_EUTRAPRACHCONFIGURATION_TRUE",
		1: "HIGH_SPEED_FLAG_EUTRAPRACHCONFIGURATION_FALSE",
	}
	HighSpeedFlagEutraprachconfiguration_value = map[string]int32{
		"HIGH_SPEED_FLAG_EUTRAPRACHCONFIGURATION_TRUE":  0,
		"HIGH_SPEED_FLAG_EUTRAPRACHCONFIGURATION_FALSE": 1,
	}
)

func (x HighSpeedFlagEutraprachconfiguration) Enum() *HighSpeedFlagEutraprachconfiguration {
	p := new(HighSpeedFlagEutraprachconfiguration)
	*p = x
	return p
}

func (x HighSpeedFlagEutraprachconfiguration) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HighSpeedFlagEutraprachconfiguration) Descriptor() protoreflect.EnumDescriptor {
	return file_api_xnap_v1_xnap_ies_proto_enumTypes[28].Descriptor()
}

func (HighSpeedFlagEutraprachconfiguration) Type() protoreflect.EnumType {
	return &file_api_xnap_v1_xnap_ies_proto_enumTypes[28]
}

func (x HighSpeedFlagEutraprachconfiguration) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use HighSpeedFlagEutraprachconfiguration.Descriptor instead.
func (HighSpeedFlagEutraprachconfiguration) EnumDescriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{28}
}

// enumerated from xnap_v1.asn1:4321
type EUTratransmissionBandwidth int32

const (
	EUTratransmissionBandwidth_E_UTRATRANSMISSION_BANDWIDTH_BW6   EUTratransmissionBandwidth = 0
	EUTratransmissionBandwidth_E_UTRATRANSMISSION_BANDWIDTH_BW15  EUTratransmissionBandwidth = 1
	EUTratransmissionBandwidth_E_UTRATRANSMISSION_BANDWIDTH_BW25  EUTratransmissionBandwidth = 2
	EUTratransmissionBandwidth_E_UTRATRANSMISSION_BANDWIDTH_BW50  EUTratransmissionBandwidth = 3
	EUTratransmissionBandwidth_E_UTRATRANSMISSION_BANDWIDTH_BW75  EUTratransmissionBandwidth = 4
	EUTratransmissionBandwidth_E_UTRATRANSMISSION_BANDWIDTH_BW100 EUTratransmissionBandwidth = 5
	EUTratransmissionBandwidth_E_UTRATRANSMISSION_BANDWIDTH_BW1   EUTratransmissionBandwidth = 6
)

// Enum value maps for EUTratransmissionBandwidth.
var (
	EUTratransmissionBandwidth_name = map[int32]string{
		0: "E_UTRATRANSMISSION_BANDWIDTH_BW6",
		1: "E_UTRATRANSMISSION_BANDWIDTH_BW15",
		2: "E_UTRATRANSMISSION_BANDWIDTH_BW25",
		3: "E_UTRATRANSMISSION_BANDWIDTH_BW50",
		4: "E_UTRATRANSMISSION_BANDWIDTH_BW75",
		5: "E_UTRATRANSMISSION_BANDWIDTH_BW100",
		6: "E_UTRATRANSMISSION_BANDWIDTH_BW1",
	}
	EUTratransmissionBandwidth_value = map[string]int32{
		"E_UTRATRANSMISSION_BANDWIDTH_BW6":   0,
		"E_UTRATRANSMISSION_BANDWIDTH_BW15":  1,
		"E_UTRATRANSMISSION_BANDWIDTH_BW25":  2,
		"E_UTRATRANSMISSION_BANDWIDTH_BW50":  3,
		"E_UTRATRANSMISSION_BANDWIDTH_BW75":  4,
		"E_UTRATRANSMISSION_BANDWIDTH_BW100": 5,
		"E_UTRATRANSMISSION_BANDWIDTH_BW1":   6,
	}
)

func (x EUTratransmissionBandwidth) Enum() *EUTratransmissionBandwidth {
	p := new(EUTratransmissionBandwidth)
	*p = x
	return p
}

func (x EUTratransmissionBandwidth) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EUTratransmissionBandwidth) Descriptor() protoreflect.EnumDescriptor {
	return file_api_xnap_v1_xnap_ies_proto_enumTypes[29].Descriptor()
}

func (EUTratransmissionBandwidth) Type() protoreflect.EnumType {
	return &file_api_xnap_v1_xnap_ies_proto_enumTypes[29]
}

func (x EUTratransmissionBandwidth) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EUTratransmissionBandwidth.Descriptor instead.
func (EUTratransmissionBandwidth) EnumDescriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{29}
}

// enumerated from xnap_v1.asn1:4345
type EventType int32

const (
	EventType_EVENT_TYPE_REPORT_UPON_CHANGE_OF_SERVING_CELL                            EventType = 0
	EventType_EVENT_TYPE_REPORT_UE_MOVING_PRESENCE_INTO_OR_OUT_OF_THE_AREA_OF_INTEREST EventType = 1
	EventType_EVENT_TYPE_REPORT_UPON_CHANGE_OF_SERVING_CELL_AND_AREA_OF_INTEREST       EventType = 2
)

// Enum value maps for EventType.
var (
	EventType_name = map[int32]string{
		0: "EVENT_TYPE_REPORT_UPON_CHANGE_OF_SERVING_CELL",
		1: "EVENT_TYPE_REPORT_UE_MOVING_PRESENCE_INTO_OR_OUT_OF_THE_AREA_OF_INTEREST",
		2: "EVENT_TYPE_REPORT_UPON_CHANGE_OF_SERVING_CELL_AND_AREA_OF_INTEREST",
	}
	EventType_value = map[string]int32{
		"EVENT_TYPE_REPORT_UPON_CHANGE_OF_SERVING_CELL":                            0,
		"EVENT_TYPE_REPORT_UE_MOVING_PRESENCE_INTO_OR_OUT_OF_THE_AREA_OF_INTEREST": 1,
		"EVENT_TYPE_REPORT_UPON_CHANGE_OF_SERVING_CELL_AND_AREA_OF_INTEREST":       2,
	}
)

func (x EventType) Enum() *EventType {
	p := new(EventType)
	*p = x
	return p
}

func (x EventType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EventType) Descriptor() protoreflect.EnumDescriptor {
	return file_api_xnap_v1_xnap_ies_proto_enumTypes[30].Descriptor()
}

func (EventType) Type() protoreflect.EnumType {
	return &file_api_xnap_v1_xnap_ies_proto_enumTypes[30]
}

func (x EventType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EventType.Descriptor instead.
func (EventType) EnumDescriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{30}
}

// enumerated from xnap_v1.asn1:4353
type OutOfCoverageEventTypeTrigger int32

const (
	OutOfCoverageEventTypeTrigger_OUT_OF_COVERAGE_EVENT_TYPE_TRIGGER_TRUE OutOfCoverageEventTypeTrigger = 0
)

// Enum value maps for OutOfCoverageEventTypeTrigger.
var (
	OutOfCoverageEventTypeTrigger_name = map[int32]string{
		0: "OUT_OF_COVERAGE_EVENT_TYPE_TRIGGER_TRUE",
	}
	OutOfCoverageEventTypeTrigger_value = map[string]int32{
		"OUT_OF_COVERAGE_EVENT_TYPE_TRIGGER_TRUE": 0,
	}
)

func (x OutOfCoverageEventTypeTrigger) Enum() *OutOfCoverageEventTypeTrigger {
	p := new(OutOfCoverageEventTypeTrigger)
	*p = x
	return p
}

func (x OutOfCoverageEventTypeTrigger) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OutOfCoverageEventTypeTrigger) Descriptor() protoreflect.EnumDescriptor {
	return file_api_xnap_v1_xnap_ies_proto_enumTypes[31].Descriptor()
}

func (OutOfCoverageEventTypeTrigger) Type() protoreflect.EnumType {
	return &file_api_xnap_v1_xnap_ies_proto_enumTypes[31]
}

func (x OutOfCoverageEventTypeTrigger) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OutOfCoverageEventTypeTrigger.Descriptor instead.
func (OutOfCoverageEventTypeTrigger) EnumDescriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{31}
}

// enumerated from xnap_v1.asn1:4383
type ExpectedHointerval int32

const (
	ExpectedHointerval_EXPECTED_HOINTERVAL_SEC15     ExpectedHointerval = 0
	ExpectedHointerval_EXPECTED_HOINTERVAL_SEC30     ExpectedHointerval = 1
	ExpectedHointerval_EXPECTED_HOINTERVAL_SEC60     ExpectedHointerval = 2
	ExpectedHointerval_EXPECTED_HOINTERVAL_SEC90     ExpectedHointerval = 3
	ExpectedHointerval_EXPECTED_HOINTERVAL_SEC120    ExpectedHointerval = 4
	ExpectedHointerval_EXPECTED_HOINTERVAL_SEC180    ExpectedHointerval = 5
	ExpectedHointerval_EXPECTED_HOINTERVAL_LONG_TIME ExpectedHointerval = 6
)

// Enum value maps for ExpectedHointerval.
var (
	ExpectedHointerval_name = map[int32]string{
		0: "EXPECTED_HOINTERVAL_SEC15",
		1: "EXPECTED_HOINTERVAL_SEC30",
		2: "EXPECTED_HOINTERVAL_SEC60",
		3: "EXPECTED_HOINTERVAL_SEC90",
		4: "EXPECTED_HOINTERVAL_SEC120",
		5: "EXPECTED_HOINTERVAL_SEC180",
		6: "EXPECTED_HOINTERVAL_LONG_TIME",
	}
	ExpectedHointerval_value = map[string]int32{
		"EXPECTED_HOINTERVAL_SEC15":     0,
		"EXPECTED_HOINTERVAL_SEC30":     1,
		"EXPECTED_HOINTERVAL_SEC60":     2,
		"EXPECTED_HOINTERVAL_SEC90":     3,
		"EXPECTED_HOINTERVAL_SEC120":    4,
		"EXPECTED_HOINTERVAL_SEC180":    5,
		"EXPECTED_HOINTERVAL_LONG_TIME": 6,
	}
)

func (x ExpectedHointerval) Enum() *ExpectedHointerval {
	p := new(ExpectedHointerval)
	*p = x
	return p
}

func (x ExpectedHointerval) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ExpectedHointerval) Descriptor() protoreflect.EnumDescriptor {
	return file_api_xnap_v1_xnap_ies_proto_enumTypes[32].Descriptor()
}

func (ExpectedHointerval) Type() protoreflect.EnumType {
	return &file_api_xnap_v1_xnap_ies_proto_enumTypes[32]
}

func (x ExpectedHointerval) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ExpectedHointerval.Descriptor instead.
func (ExpectedHointerval) EnumDescriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{32}
}

// enumerated from xnap_v1.asn1:4415
type ExpectedUemobility int32

const (
	ExpectedUemobility_EXPECTED_UEMOBILITY_STATIONARY ExpectedUemobility = 0
	ExpectedUemobility_EXPECTED_UEMOBILITY_MOBILE     ExpectedUemobility = 1
)

// Enum value maps for ExpectedUemobility.
var (
	ExpectedUemobility_name = map[int32]string{
		0: "EXPECTED_UEMOBILITY_STATIONARY",
		1: "EXPECTED_UEMOBILITY_MOBILE",
	}
	ExpectedUemobility_value = map[string]int32{
		"EXPECTED_UEMOBILITY_STATIONARY": 0,
		"EXPECTED_UEMOBILITY_MOBILE":     1,
	}
)

func (x ExpectedUemobility) Enum() *ExpectedUemobility {
	p := new(ExpectedUemobility)
	*p = x
	return p
}

func (x ExpectedUemobility) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ExpectedUemobility) Descriptor() protoreflect.EnumDescriptor {
	return file_api_xnap_v1_xnap_ies_proto_enumTypes[33].Descriptor()
}

func (ExpectedUemobility) Type() protoreflect.EnumType {
	return &file_api_xnap_v1_xnap_ies_proto_enumTypes[33]
}

func (x ExpectedUemobility) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ExpectedUemobility.Descriptor instead.
func (ExpectedUemobility) EnumDescriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{33}
}

// enumerated from xnap_v1.asn1:4434
type SourceOfUeactivityBehaviourInformation int32

const (
	SourceOfUeactivityBehaviourInformation_SOURCE_OF_UEACTIVITY_BEHAVIOUR_INFORMATION_SUBSCRIPTION_INFORMATION SourceOfUeactivityBehaviourInformation = 0
	SourceOfUeactivityBehaviourInformation_SOURCE_OF_UEACTIVITY_BEHAVIOUR_INFORMATION_STATISTICS               SourceOfUeactivityBehaviourInformation = 1
)

// Enum value maps for SourceOfUeactivityBehaviourInformation.
var (
	SourceOfUeactivityBehaviourInformation_name = map[int32]string{
		0: "SOURCE_OF_UEACTIVITY_BEHAVIOUR_INFORMATION_SUBSCRIPTION_INFORMATION",
		1: "SOURCE_OF_UEACTIVITY_BEHAVIOUR_INFORMATION_STATISTICS",
	}
	SourceOfUeactivityBehaviourInformation_value = map[string]int32{
		"SOURCE_OF_UEACTIVITY_BEHAVIOUR_INFORMATION_SUBSCRIPTION_INFORMATION": 0,
		"SOURCE_OF_UEACTIVITY_BEHAVIOUR_INFORMATION_STATISTICS":               1,
	}
)

func (x SourceOfUeactivityBehaviourInformation) Enum() *SourceOfUeactivityBehaviourInformation {
	p := new(SourceOfUeactivityBehaviourInformation)
	*p = x
	return p
}

func (x SourceOfUeactivityBehaviourInformation) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SourceOfUeactivityBehaviourInformation) Descriptor() protoreflect.EnumDescriptor {
	return file_api_xnap_v1_xnap_ies_proto_enumTypes[34].Descriptor()
}

func (SourceOfUeactivityBehaviourInformation) Type() protoreflect.EnumType {
	return &file_api_xnap_v1_xnap_ies_proto_enumTypes[34]
}

func (x SourceOfUeactivityBehaviourInformation) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SourceOfUeactivityBehaviourInformation.Descriptor instead.
func (SourceOfUeactivityBehaviourInformation) EnumDescriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{34}
}

// enumerated from xnap_v1.asn1:4491
type FrequencyShift7P5Khz int32

const (
	FrequencyShift7P5Khz_FREQUENCY_SHIFT7P5KHZ_FALSE FrequencyShift7P5Khz = 0
	FrequencyShift7P5Khz_FREQUENCY_SHIFT7P5KHZ_TRUE  FrequencyShift7P5Khz = 1
)

// Enum value maps for FrequencyShift7P5Khz.
var (
	FrequencyShift7P5Khz_name = map[int32]string{
		0: "FREQUENCY_SHIFT7P5KHZ_FALSE",
		1: "FREQUENCY_SHIFT7P5KHZ_TRUE",
	}
	FrequencyShift7P5Khz_value = map[string]int32{
		"FREQUENCY_SHIFT7P5KHZ_FALSE": 0,
		"FREQUENCY_SHIFT7P5KHZ_TRUE":  1,
	}
)

func (x FrequencyShift7P5Khz) Enum() *FrequencyShift7P5Khz {
	p := new(FrequencyShift7P5Khz)
	*p = x
	return p
}

func (x FrequencyShift7P5Khz) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FrequencyShift7P5Khz) Descriptor() protoreflect.EnumDescriptor {
	return file_api_xnap_v1_xnap_ies_proto_enumTypes[35].Descriptor()
}

func (FrequencyShift7P5Khz) Type() protoreflect.EnumType {
	return &file_api_xnap_v1_xnap_ies_proto_enumTypes[35]
}

func (x FrequencyShift7P5Khz) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FrequencyShift7P5Khz.Descriptor instead.
func (FrequencyShift7P5Khz) EnumDescriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{35}
}

// enumerated from xnap_v1.asn1:4501
type NotificationControlGbrqoSflowInfo int32

const (
	NotificationControlGbrqoSflowInfo_NOTIFICATION_CONTROL_GBRQO_SFLOW_INFO_NOTIFICATION_REQUESTED NotificationControlGbrqoSflowInfo = 0
)

// Enum value maps for NotificationControlGbrqoSflowInfo.
var (
	NotificationControlGbrqoSflowInfo_name = map[int32]string{
		0: "NOTIFICATION_CONTROL_GBRQO_SFLOW_INFO_NOTIFICATION_REQUESTED",
	}
	NotificationControlGbrqoSflowInfo_value = map[string]int32{
		"NOTIFICATION_CONTROL_GBRQO_SFLOW_INFO_NOTIFICATION_REQUESTED": 0,
	}
)

func (x NotificationControlGbrqoSflowInfo) Enum() *NotificationControlGbrqoSflowInfo {
	p := new(NotificationControlGbrqoSflowInfo)
	*p = x
	return p
}

func (x NotificationControlGbrqoSflowInfo) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NotificationControlGbrqoSflowInfo) Descriptor() protoreflect.EnumDescriptor {
	return file_api_xnap_v1_xnap_ies_proto_enumTypes[36].Descriptor()
}

func (NotificationControlGbrqoSflowInfo) Type() protoreflect.EnumType {
	return &file_api_xnap_v1_xnap_ies_proto_enumTypes[36]
}

func (x NotificationControlGbrqoSflowInfo) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NotificationControlGbrqoSflowInfo.Descriptor instead.
func (NotificationControlGbrqoSflowInfo) EnumDescriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{36}
}

// enumerated from xnap_v1.asn1:4636
type HandoverReportType int32

const (
	HandoverReportType_HANDOVER_REPORT_TYPE_HO_TOO_EARLY        HandoverReportType = 0
	HandoverReportType_HANDOVER_REPORT_TYPE_HO_TO_WRONG_CELL    HandoverReportType = 1
	HandoverReportType_HANDOVER_REPORT_TYPE_INTERSYSTEMPINGPONG HandoverReportType = 2
)

// Enum value maps for HandoverReportType.
var (
	HandoverReportType_name = map[int32]string{
		0: "HANDOVER_REPORT_TYPE_HO_TOO_EARLY",
		1: "HANDOVER_REPORT_TYPE_HO_TO_WRONG_CELL",
		2: "HANDOVER_REPORT_TYPE_INTERSYSTEMPINGPONG",
	}
	HandoverReportType_value = map[string]int32{
		"HANDOVER_REPORT_TYPE_HO_TOO_EARLY":        0,
		"HANDOVER_REPORT_TYPE_HO_TO_WRONG_CELL":    1,
		"HANDOVER_REPORT_TYPE_INTERSYSTEMPINGPONG": 2,
	}
)

func (x HandoverReportType) Enum() *HandoverReportType {
	p := new(HandoverReportType)
	*p = x
	return p
}

func (x HandoverReportType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HandoverReportType) Descriptor() protoreflect.EnumDescriptor {
	return file_api_xnap_v1_xnap_ies_proto_enumTypes[37].Descriptor()
}

func (HandoverReportType) Type() protoreflect.EnumType {
	return &file_api_xnap_v1_xnap_ies_proto_enumTypes[37]
}

func (x HandoverReportType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use HandoverReportType.Descriptor instead.
func (HandoverReportType) EnumDescriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{37}
}

// enumerated from xnap_v1.asn1:4647
type IabnodeIndication int32

const (
	IabnodeIndication_IABNODE_INDICATION_TRUE IabnodeIndication = 0
)

// Enum value maps for IabnodeIndication.
var (
	IabnodeIndication_name = map[int32]string{
		0: "IABNODE_INDICATION_TRUE",
	}
	IabnodeIndication_value = map[string]int32{
		"IABNODE_INDICATION_TRUE": 0,
	}
)

func (x IabnodeIndication) Enum() *IabnodeIndication {
	p := new(IabnodeIndication)
	*p = x
	return p
}

func (x IabnodeIndication) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IabnodeIndication) Descriptor() protoreflect.EnumDescriptor {
	return file_api_xnap_v1_xnap_ies_proto_enumTypes[38].Descriptor()
}

func (IabnodeIndication) Type() protoreflect.EnumType {
	return &file_api_xnap_v1_xnap_ies_proto_enumTypes[38]
}

func (x IabnodeIndication) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use IabnodeIndication.Descriptor instead.
func (IabnodeIndication) EnumDescriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{38}
}

// enumerated from xnap_v1.asn1:4742
type Linkstolog int32

const (
	Linkstolog_LINKS_TO_LOG_UPLINK                   Linkstolog = 0
	Linkstolog_LINKS_TO_LOG_DOWNLINK                 Linkstolog = 1
	Linkstolog_LINKS_TO_LOG_BOTH_UPLINK_AND_DOWNLINK Linkstolog = 2
)

// Enum value maps for Linkstolog.
var (
	Linkstolog_name = map[int32]string{
		0: "LINKS_TO_LOG_UPLINK",
		1: "LINKS_TO_LOG_DOWNLINK",
		2: "LINKS_TO_LOG_BOTH_UPLINK_AND_DOWNLINK",
	}
	Linkstolog_value = map[string]int32{
		"LINKS_TO_LOG_UPLINK":                   0,
		"LINKS_TO_LOG_DOWNLINK":                 1,
		"LINKS_TO_LOG_BOTH_UPLINK_AND_DOWNLINK": 2,
	}
)

func (x Linkstolog) Enum() *Linkstolog {
	p := new(Linkstolog)
	*p = x
	return p
}

func (x Linkstolog) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Linkstolog) Descriptor() protoreflect.EnumDescriptor {
	return file_api_xnap_v1_xnap_ies_proto_enumTypes[39].Descriptor()
}

func (Linkstolog) Type() protoreflect.EnumType {
	return &file_api_xnap_v1_xnap_ies_proto_enumTypes[39]
}

func (x Linkstolog) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Linkstolog.Descriptor instead.
func (Linkstolog) EnumDescriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{39}
}

// enumerated from xnap_v1.asn1:4786
type LocationInformationSnreporting int32

const (
	LocationInformationSnreporting_LOCATION_INFORMATION_SNREPORTING_P_SCELL LocationInformationSnreporting = 0
)

// Enum value maps for LocationInformationSnreporting.
var (
	LocationInformationSnreporting_name = map[int32]string{
		0: "LOCATION_INFORMATION_SNREPORTING_P_SCELL",
	}
	LocationInformationSnreporting_value = map[string]int32{
		"LOCATION_INFORMATION_SNREPORTING_P_SCELL": 0,
	}
)

func (x LocationInformationSnreporting) Enum() *LocationInformationSnreporting {
	p := new(LocationInformationSnreporting)
	*p = x
	return p
}

func (x LocationInformationSnreporting) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LocationInformationSnreporting) Descriptor() protoreflect.EnumDescriptor {
	return file_api_xnap_v1_xnap_ies_proto_enumTypes[40].Descriptor()
}

func (LocationInformationSnreporting) Type() protoreflect.EnumType {
	return &file_api_xnap_v1_xnap_ies_proto_enumTypes[40]
}

func (x LocationInformationSnreporting) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LocationInformationSnreporting.Descriptor instead.
func (LocationInformationSnreporting) EnumDescriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{40}
}

// enumerated from xnap_v1.asn1:4842
type LoggingInterval int32

const (
	LoggingInterval_LOGGING_INTERVAL_MS320   LoggingInterval = 0
	LoggingInterval_LOGGING_INTERVAL_MS640   LoggingInterval = 1
	LoggingInterval_LOGGING_INTERVAL_MS1280  LoggingInterval = 2
	LoggingInterval_LOGGING_INTERVAL_MS2560  LoggingInterval = 3
	LoggingInterval_LOGGING_INTERVAL_MS5120  LoggingInterval = 4
	LoggingInterval_LOGGING_INTERVAL_MS10240 LoggingInterval = 5
	LoggingInterval_LOGGING_INTERVAL_MS20480 LoggingInterval = 6
	LoggingInterval_LOGGING_INTERVAL_MS30720 LoggingInterval = 7
	LoggingInterval_LOGGING_INTERVAL_MS40960 LoggingInterval = 8
	LoggingInterval_LOGGING_INTERVAL_MS61440 LoggingInterval = 9
)

// Enum value maps for LoggingInterval.
var (
	LoggingInterval_name = map[int32]string{
		0: "LOGGING_INTERVAL_MS320",
		1: "LOGGING_INTERVAL_MS640",
		2: "LOGGING_INTERVAL_MS1280",
		3: "LOGGING_INTERVAL_MS2560",
		4: "LOGGING_INTERVAL_MS5120",
		5: "LOGGING_INTERVAL_MS10240",
		6: "LOGGING_INTERVAL_MS20480",
		7: "LOGGING_INTERVAL_MS30720",
		8: "LOGGING_INTERVAL_MS40960",
		9: "LOGGING_INTERVAL_MS61440",
	}
	LoggingInterval_value = map[string]int32{
		"LOGGING_INTERVAL_MS320":   0,
		"LOGGING_INTERVAL_MS640":   1,
		"LOGGING_INTERVAL_MS1280":  2,
		"LOGGING_INTERVAL_MS2560":  3,
		"LOGGING_INTERVAL_MS5120":  4,
		"LOGGING_INTERVAL_MS10240": 5,
		"LOGGING_INTERVAL_MS20480": 6,
		"LOGGING_INTERVAL_MS30720": 7,
		"LOGGING_INTERVAL_MS40960": 8,
		"LOGGING_INTERVAL_MS61440": 9,
	}
)

func (x LoggingInterval) Enum() *LoggingInterval {
	p := new(LoggingInterval)
	*p = x
	return p
}

func (x LoggingInterval) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LoggingInterval) Descriptor() protoreflect.EnumDescriptor {
	return file_api_xnap_v1_xnap_ies_proto_enumTypes[41].Descriptor()
}

func (LoggingInterval) Type() protoreflect.EnumType {
	return &file_api_xnap_v1_xnap_ies_proto_enumTypes[41]
}

func (x LoggingInterval) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LoggingInterval.Descriptor instead.
func (LoggingInterval) EnumDescriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{41}
}

// enumerated from xnap_v1.asn1:4844
type LoggingDuration int32

const (
	LoggingDuration_LOGGING_DURATION_M10  LoggingDuration = 0
	LoggingDuration_LOGGING_DURATION_M20  LoggingDuration = 1
	LoggingDuration_LOGGING_DURATION_M40  LoggingDuration = 2
	LoggingDuration_LOGGING_DURATION_M60  LoggingDuration = 3
	LoggingDuration_LOGGING_DURATION_M90  LoggingDuration = 4
	LoggingDuration_LOGGING_DURATION_M120 LoggingDuration = 5
)

// Enum value maps for LoggingDuration.
var (
	LoggingDuration_name = map[int32]string{
		0: "LOGGING_DURATION_M10",
		1: "LOGGING_DURATION_M20",
		2: "LOGGING_DURATION_M40",
		3: "LOGGING_DURATION_M60",
		4: "LOGGING_DURATION_M90",
		5: "LOGGING_DURATION_M120",
	}
	LoggingDuration_value = map[string]int32{
		"LOGGING_DURATION_M10":  0,
		"LOGGING_DURATION_M20":  1,
		"LOGGING_DURATION_M40":  2,
		"LOGGING_DURATION_M60":  3,
		"LOGGING_DURATION_M90":  4,
		"LOGGING_DURATION_M120": 5,
	}
)

func (x LoggingDuration) Enum() *LoggingDuration {
	p := new(LoggingDuration)
	*p = x
	return p
}

func (x LoggingDuration) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LoggingDuration) Descriptor() protoreflect.EnumDescriptor {
	return file_api_xnap_v1_xnap_ies_proto_enumTypes[42].Descriptor()
}

func (LoggingDuration) Type() protoreflect.EnumType {
	return &file_api_xnap_v1_xnap_ies_proto_enumTypes[42]
}

func (x LoggingDuration) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LoggingDuration.Descriptor instead.
func (LoggingDuration) EnumDescriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{42}
}

// enumerated from xnap_v1.asn1:4847
type LowerLayerPresenceStatusChange int32

const (
	LowerLayerPresenceStatusChange_LOWER_LAYER_PRESENCE_STATUS_CHANGE_RELEASE_LOWER_LAYERS      LowerLayerPresenceStatusChange = 0
	LowerLayerPresenceStatusChange_LOWER_LAYER_PRESENCE_STATUS_CHANGE_RE_ESTABLISH_LOWER_LAYERS LowerLayerPresenceStatusChange = 1
	LowerLayerPresenceStatusChange_LOWER_LAYER_PRESENCE_STATUS_CHANGE_SUSPEND_LOWER_LAYERS      LowerLayerPresenceStatusChange = 2
	LowerLayerPresenceStatusChange_LOWER_LAYER_PRESENCE_STATUS_CHANGE_RESUME_LOWER_LAYERS       LowerLayerPresenceStatusChange = 3
)

// Enum value maps for LowerLayerPresenceStatusChange.
var (
	LowerLayerPresenceStatusChange_name = map[int32]string{
		0: "LOWER_LAYER_PRESENCE_STATUS_CHANGE_RELEASE_LOWER_LAYERS",
		1: "LOWER_LAYER_PRESENCE_STATUS_CHANGE_RE_ESTABLISH_LOWER_LAYERS",
		2: "LOWER_LAYER_PRESENCE_STATUS_CHANGE_SUSPEND_LOWER_LAYERS",
		3: "LOWER_LAYER_PRESENCE_STATUS_CHANGE_RESUME_LOWER_LAYERS",
	}
	LowerLayerPresenceStatusChange_value = map[string]int32{
		"LOWER_LAYER_PRESENCE_STATUS_CHANGE_RELEASE_LOWER_LAYERS":      0,
		"LOWER_LAYER_PRESENCE_STATUS_CHANGE_RE_ESTABLISH_LOWER_LAYERS": 1,
		"LOWER_LAYER_PRESENCE_STATUS_CHANGE_SUSPEND_LOWER_LAYERS":      2,
		"LOWER_LAYER_PRESENCE_STATUS_CHANGE_RESUME_LOWER_LAYERS":       3,
	}
)

func (x LowerLayerPresenceStatusChange) Enum() *LowerLayerPresenceStatusChange {
	p := new(LowerLayerPresenceStatusChange)
	*p = x
	return p
}

func (x LowerLayerPresenceStatusChange) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LowerLayerPresenceStatusChange) Descriptor() protoreflect.EnumDescriptor {
	return file_api_xnap_v1_xnap_ies_proto_enumTypes[43].Descriptor()
}

func (LowerLayerPresenceStatusChange) Type() protoreflect.EnumType {
	return &file_api_xnap_v1_xnap_ies_proto_enumTypes[43]
}

func (x LowerLayerPresenceStatusChange) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LowerLayerPresenceStatusChange.Descriptor instead.
func (LowerLayerPresenceStatusChange) EnumDescriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{43}
}

// enumerated from xnap_v1.asn1:4908
type M1ReportingTrigger int32

const (
	M1ReportingTrigger_M1_REPORTING_TRIGGER_PERIODIC                  M1ReportingTrigger = 0
	M1ReportingTrigger_M1_REPORTING_TRIGGER_A2EVENTTRIGGERED          M1ReportingTrigger = 1
	M1ReportingTrigger_M1_REPORTING_TRIGGER_A2EVENTTRIGGERED_PERIODIC M1ReportingTrigger = 2
)

// Enum value maps for M1ReportingTrigger.
var (
	M1ReportingTrigger_name = map[int32]string{
		0: "M1_REPORTING_TRIGGER_PERIODIC",
		1: "M1_REPORTING_TRIGGER_A2EVENTTRIGGERED",
		2: "M1_REPORTING_TRIGGER_A2EVENTTRIGGERED_PERIODIC",
	}
	M1ReportingTrigger_value = map[string]int32{
		"M1_REPORTING_TRIGGER_PERIODIC":                  0,
		"M1_REPORTING_TRIGGER_A2EVENTTRIGGERED":          1,
		"M1_REPORTING_TRIGGER_A2EVENTTRIGGERED_PERIODIC": 2,
	}
)

func (x M1ReportingTrigger) Enum() *M1ReportingTrigger {
	p := new(M1ReportingTrigger)
	*p = x
	return p
}

func (x M1ReportingTrigger) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (M1ReportingTrigger) Descriptor() protoreflect.EnumDescriptor {
	return file_api_xnap_v1_xnap_ies_proto_enumTypes[44].Descriptor()
}

func (M1ReportingTrigger) Type() protoreflect.EnumType {
	return &file_api_xnap_v1_xnap_ies_proto_enumTypes[44]
}

func (x M1ReportingTrigger) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use M1ReportingTrigger.Descriptor instead.
func (M1ReportingTrigger) EnumDescriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{44}
}

// enumerated from xnap_v1.asn1:4938
type M4Period int32

const (
	M4Period_M4PERIOD_MS1024  M4Period = 0
	M4Period_M4PERIOD_MS2048  M4Period = 1
	M4Period_M4PERIOD_MS5120  M4Period = 2
	M4Period_M4PERIOD_MS10240 M4Period = 3
	M4Period_M4PERIOD_MIN1    M4Period = 4
)

// Enum value maps for M4Period.
var (
	M4Period_name = map[int32]string{
		0: "M4PERIOD_MS1024",
		1: "M4PERIOD_MS2048",
		2: "M4PERIOD_MS5120",
		3: "M4PERIOD_MS10240",
		4: "M4PERIOD_MIN1",
	}
	M4Period_value = map[string]int32{
		"M4PERIOD_MS1024":  0,
		"M4PERIOD_MS2048":  1,
		"M4PERIOD_MS5120":  2,
		"M4PERIOD_MS10240": 3,
		"M4PERIOD_MIN1":    4,
	}
)

func (x M4Period) Enum() *M4Period {
	p := new(M4Period)
	*p = x
	return p
}

func (x M4Period) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (M4Period) Descriptor() protoreflect.EnumDescriptor {
	return file_api_xnap_v1_xnap_ies_proto_enumTypes[45].Descriptor()
}

func (M4Period) Type() protoreflect.EnumType {
	return &file_api_xnap_v1_xnap_ies_proto_enumTypes[45]
}

func (x M4Period) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use M4Period.Descriptor instead.
func (M4Period) EnumDescriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{45}
}

// enumerated from xnap_v1.asn1:4951
type M5Period int32

const (
	M5Period_M5PERIOD_MS1024  M5Period = 0
	M5Period_M5PERIOD_MS2048  M5Period = 1
	M5Period_M5PERIOD_MS5120  M5Period = 2
	M5Period_M5PERIOD_MS10240 M5Period = 3
	M5Period_M5PERIOD_MIN1    M5Period = 4
)

// Enum value maps for M5Period.
var (
	M5Period_name = map[int32]string{
		0: "M5PERIOD_MS1024",
		1: "M5PERIOD_MS2048",
		2: "M5PERIOD_MS5120",
		3: "M5PERIOD_MS10240",
		4: "M5PERIOD_MIN1",
	}
	M5Period_value = map[string]int32{
		"M5PERIOD_MS1024":  0,
		"M5PERIOD_MS2048":  1,
		"M5PERIOD_MS5120":  2,
		"M5PERIOD_MS10240": 3,
		"M5PERIOD_MIN1":    4,
	}
)

func (x M5Period) Enum() *M5Period {
	p := new(M5Period)
	*p = x
	return p
}

func (x M5Period) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (M5Period) Descriptor() protoreflect.EnumDescriptor {
	return file_api_xnap_v1_xnap_ies_proto_enumTypes[46].Descriptor()
}

func (M5Period) Type() protoreflect.EnumType {
	return &file_api_xnap_v1_xnap_ies_proto_enumTypes[46]
}

func (x M5Period) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use M5Period.Descriptor instead.
func (M5Period) EnumDescriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{46}
}

// enumerated from xnap_v1.asn1:4964
type M6ReportInterval int32

const (
	M6ReportInterval_M6REPORT_INTERVAL_MS120   M6ReportInterval = 0
	M6ReportInterval_M6REPORT_INTERVAL_MS240   M6ReportInterval = 1
	M6ReportInterval_M6REPORT_INTERVAL_MS480   M6ReportInterval = 2
	M6ReportInterval_M6REPORT_INTERVAL_MS640   M6ReportInterval = 3
	M6ReportInterval_M6REPORT_INTERVAL_MS1024  M6ReportInterval = 4
	M6ReportInterval_M6REPORT_INTERVAL_MS2048  M6ReportInterval = 5
	M6ReportInterval_M6REPORT_INTERVAL_MS5120  M6ReportInterval = 6
	M6ReportInterval_M6REPORT_INTERVAL_MS10240 M6ReportInterval = 7
	M6ReportInterval_M6REPORT_INTERVAL_MS20480 M6ReportInterval = 8
	M6ReportInterval_M6REPORT_INTERVAL_MS40960 M6ReportInterval = 9
	M6ReportInterval_M6REPORT_INTERVAL_MIN1    M6ReportInterval = 10
	M6ReportInterval_M6REPORT_INTERVAL_MIN6    M6ReportInterval = 11
	M6ReportInterval_M6REPORT_INTERVAL_MIN12   M6ReportInterval = 12
	M6ReportInterval_M6REPORT_INTERVAL_MIN30   M6ReportInterval = 13
)

// Enum value maps for M6ReportInterval.
var (
	M6ReportInterval_name = map[int32]string{
		0:  "M6REPORT_INTERVAL_MS120",
		1:  "M6REPORT_INTERVAL_MS240",
		2:  "M6REPORT_INTERVAL_MS480",
		3:  "M6REPORT_INTERVAL_MS640",
		4:  "M6REPORT_INTERVAL_MS1024",
		5:  "M6REPORT_INTERVAL_MS2048",
		6:  "M6REPORT_INTERVAL_MS5120",
		7:  "M6REPORT_INTERVAL_MS10240",
		8:  "M6REPORT_INTERVAL_MS20480",
		9:  "M6REPORT_INTERVAL_MS40960",
		10: "M6REPORT_INTERVAL_MIN1",
		11: "M6REPORT_INTERVAL_MIN6",
		12: "M6REPORT_INTERVAL_MIN12",
		13: "M6REPORT_INTERVAL_MIN30",
	}
	M6ReportInterval_value = map[string]int32{
		"M6REPORT_INTERVAL_MS120":   0,
		"M6REPORT_INTERVAL_MS240":   1,
		"M6REPORT_INTERVAL_MS480":   2,
		"M6REPORT_INTERVAL_MS640":   3,
		"M6REPORT_INTERVAL_MS1024":  4,
		"M6REPORT_INTERVAL_MS2048":  5,
		"M6REPORT_INTERVAL_MS5120":  6,
		"M6REPORT_INTERVAL_MS10240": 7,
		"M6REPORT_INTERVAL_MS20480": 8,
		"M6REPORT_INTERVAL_MS40960": 9,
		"M6REPORT_INTERVAL_MIN1":    10,
		"M6REPORT_INTERVAL_MIN6":    11,
		"M6REPORT_INTERVAL_MIN12":   12,
		"M6REPORT_INTERVAL_MIN30":   13,
	}
)

func (x M6ReportInterval) Enum() *M6ReportInterval {
	p := new(M6ReportInterval)
	*p = x
	return p
}

func (x M6ReportInterval) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (M6ReportInterval) Descriptor() protoreflect.EnumDescriptor {
	return file_api_xnap_v1_xnap_ies_proto_enumTypes[47].Descriptor()
}

func (M6ReportInterval) Type() protoreflect.EnumType {
	return &file_api_xnap_v1_xnap_ies_proto_enumTypes[47]
}

func (x M6ReportInterval) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use M6ReportInterval.Descriptor instead.
func (M6ReportInterval) EnumDescriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{47}
}

// enumerated from xnap_v1.asn1:5005
type MaxIprate int32

const (
	MaxIprate_MAX_IPRATE_BITRATE64KBS MaxIprate = 0
	MaxIprate_MAX_IPRATE_MAX_UERATE   MaxIprate = 1
)

// Enum value maps for MaxIprate.
var (
	MaxIprate_name = map[int32]string{
		0: "MAX_IPRATE_BITRATE64KBS",
		1: "MAX_IPRATE_MAX_UERATE",
	}
	MaxIprate_value = map[string]int32{
		"MAX_IPRATE_BITRATE64KBS": 0,
		"MAX_IPRATE_MAX_UERATE":   1,
	}
)

func (x MaxIprate) Enum() *MaxIprate {
	p := new(MaxIprate)
	*p = x
	return p
}

func (x MaxIprate) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MaxIprate) Descriptor() protoreflect.EnumDescriptor {
	return file_api_xnap_v1_xnap_ies_proto_enumTypes[48].Descriptor()
}

func (MaxIprate) Type() protoreflect.EnumType {
	return &file_api_xnap_v1_xnap_ies_proto_enumTypes[48]
}

func (x MaxIprate) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MaxIprate.Descriptor instead.
func (MaxIprate) EnumDescriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{48}
}

// enumerated from xnap_v1.asn1:5029
type RadioframeAllocationPeriodMbsfnsubframeInfoEutraitem int32

const (
	RadioframeAllocationPeriodMbsfnsubframeInfoEutraitem_RADIOFRAME_ALLOCATION_PERIOD_MBSFNSUBFRAME_INFO_EUTRAITEM_N1  RadioframeAllocationPeriodMbsfnsubframeInfoEutraitem = 0
	RadioframeAllocationPeriodMbsfnsubframeInfoEutraitem_RADIOFRAME_ALLOCATION_PERIOD_MBSFNSUBFRAME_INFO_EUTRAITEM_N2  RadioframeAllocationPeriodMbsfnsubframeInfoEutraitem = 1
	RadioframeAllocationPeriodMbsfnsubframeInfoEutraitem_RADIOFRAME_ALLOCATION_PERIOD_MBSFNSUBFRAME_INFO_EUTRAITEM_N4  RadioframeAllocationPeriodMbsfnsubframeInfoEutraitem = 2
	RadioframeAllocationPeriodMbsfnsubframeInfoEutraitem_RADIOFRAME_ALLOCATION_PERIOD_MBSFNSUBFRAME_INFO_EUTRAITEM_N8  RadioframeAllocationPeriodMbsfnsubframeInfoEutraitem = 3
	RadioframeAllocationPeriodMbsfnsubframeInfoEutraitem_RADIOFRAME_ALLOCATION_PERIOD_MBSFNSUBFRAME_INFO_EUTRAITEM_N16 RadioframeAllocationPeriodMbsfnsubframeInfoEutraitem = 4
	RadioframeAllocationPeriodMbsfnsubframeInfoEutraitem_RADIOFRAME_ALLOCATION_PERIOD_MBSFNSUBFRAME_INFO_EUTRAITEM_N32 RadioframeAllocationPeriodMbsfnsubframeInfoEutraitem = 5
)

// Enum value maps for RadioframeAllocationPeriodMbsfnsubframeInfoEutraitem.
var (
	RadioframeAllocationPeriodMbsfnsubframeInfoEutraitem_name = map[int32]string{
		0: "RADIOFRAME_ALLOCATION_PERIOD_MBSFNSUBFRAME_INFO_EUTRAITEM_N1",
		1: "RADIOFRAME_ALLOCATION_PERIOD_MBSFNSUBFRAME_INFO_EUTRAITEM_N2",
		2: "RADIOFRAME_ALLOCATION_PERIOD_MBSFNSUBFRAME_INFO_EUTRAITEM_N4",
		3: "RADIOFRAME_ALLOCATION_PERIOD_MBSFNSUBFRAME_INFO_EUTRAITEM_N8",
		4: "RADIOFRAME_ALLOCATION_PERIOD_MBSFNSUBFRAME_INFO_EUTRAITEM_N16",
		5: "RADIOFRAME_ALLOCATION_PERIOD_MBSFNSUBFRAME_INFO_EUTRAITEM_N32",
	}
	RadioframeAllocationPeriodMbsfnsubframeInfoEutraitem_value = map[string]int32{
		"RADIOFRAME_ALLOCATION_PERIOD_MBSFNSUBFRAME_INFO_EUTRAITEM_N1":  0,
		"RADIOFRAME_ALLOCATION_PERIOD_MBSFNSUBFRAME_INFO_EUTRAITEM_N2":  1,
		"RADIOFRAME_ALLOCATION_PERIOD_MBSFNSUBFRAME_INFO_EUTRAITEM_N4":  2,
		"RADIOFRAME_ALLOCATION_PERIOD_MBSFNSUBFRAME_INFO_EUTRAITEM_N8":  3,
		"RADIOFRAME_ALLOCATION_PERIOD_MBSFNSUBFRAME_INFO_EUTRAITEM_N16": 4,
		"RADIOFRAME_ALLOCATION_PERIOD_MBSFNSUBFRAME_INFO_EUTRAITEM_N32": 5,
	}
)

func (x RadioframeAllocationPeriodMbsfnsubframeInfoEutraitem) Enum() *RadioframeAllocationPeriodMbsfnsubframeInfoEutraitem {
	p := new(RadioframeAllocationPeriodMbsfnsubframeInfoEutraitem)
	*p = x
	return p
}

func (x RadioframeAllocationPeriodMbsfnsubframeInfoEutraitem) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RadioframeAllocationPeriodMbsfnsubframeInfoEutraitem) Descriptor() protoreflect.EnumDescriptor {
	return file_api_xnap_v1_xnap_ies_proto_enumTypes[49].Descriptor()
}

func (RadioframeAllocationPeriodMbsfnsubframeInfoEutraitem) Type() protoreflect.EnumType {
	return &file_api_xnap_v1_xnap_ies_proto_enumTypes[49]
}

func (x RadioframeAllocationPeriodMbsfnsubframeInfoEutraitem) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RadioframeAllocationPeriodMbsfnsubframeInfoEutraitem.Descriptor instead.
func (RadioframeAllocationPeriodMbsfnsubframeInfoEutraitem) EnumDescriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{49}
}

// enumerated from xnap_v1.asn1:5041
type MdtActivation int32

const (
	MdtActivation_MDT_ACTIVATION_IMMEDIATE_MDT_ONLY      MdtActivation = 0
	MdtActivation_MDT_ACTIVATION_IMMEDIATE_MDT_AND_TRACE MdtActivation = 1
	MdtActivation_MDT_ACTIVATION_LOGGED_MDT_ONLY         MdtActivation = 2
)

// Enum value maps for MdtActivation.
var (
	MdtActivation_name = map[int32]string{
		0: "MDT_ACTIVATION_IMMEDIATE_MDT_ONLY",
		1: "MDT_ACTIVATION_IMMEDIATE_MDT_AND_TRACE",
		2: "MDT_ACTIVATION_LOGGED_MDT_ONLY",
	}
	MdtActivation_value = map[string]int32{
		"MDT_ACTIVATION_IMMEDIATE_MDT_ONLY":      0,
		"MDT_ACTIVATION_IMMEDIATE_MDT_AND_TRACE": 1,
		"MDT_ACTIVATION_LOGGED_MDT_ONLY":         2,
	}
)

func (x MdtActivation) Enum() *MdtActivation {
	p := new(MdtActivation)
	*p = x
	return p
}

func (x MdtActivation) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MdtActivation) Descriptor() protoreflect.EnumDescriptor {
	return file_api_xnap_v1_xnap_ies_proto_enumTypes[50].Descriptor()
}

func (MdtActivation) Type() protoreflect.EnumType {
	return &file_api_xnap_v1_xnap_ies_proto_enumTypes[50]
}

func (x MdtActivation) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MdtActivation.Descriptor instead.
func (MdtActivation) EnumDescriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{50}
}

// enumerated from xnap_v1.asn1:5166
type CnTypeCntypeRestrictionsForEquivalentItem int32

const (
	CnTypeCntypeRestrictionsForEquivalentItem_CN_TYPE_CNTYPE_RESTRICTIONS_FOR_EQUIVALENT_ITEM_EPC_FORBIDDEN     CnTypeCntypeRestrictionsForEquivalentItem = 0
	CnTypeCntypeRestrictionsForEquivalentItem_CN_TYPE_CNTYPE_RESTRICTIONS_FOR_EQUIVALENT_ITEM_FIVE_GC_FORBIDDEN CnTypeCntypeRestrictionsForEquivalentItem = 1
)

// Enum value maps for CnTypeCntypeRestrictionsForEquivalentItem.
var (
	CnTypeCntypeRestrictionsForEquivalentItem_name = map[int32]string{
		0: "CN_TYPE_CNTYPE_RESTRICTIONS_FOR_EQUIVALENT_ITEM_EPC_FORBIDDEN",
		1: "CN_TYPE_CNTYPE_RESTRICTIONS_FOR_EQUIVALENT_ITEM_FIVE_GC_FORBIDDEN",
	}
	CnTypeCntypeRestrictionsForEquivalentItem_value = map[string]int32{
		"CN_TYPE_CNTYPE_RESTRICTIONS_FOR_EQUIVALENT_ITEM_EPC_FORBIDDEN":     0,
		"CN_TYPE_CNTYPE_RESTRICTIONS_FOR_EQUIVALENT_ITEM_FIVE_GC_FORBIDDEN": 1,
	}
)

func (x CnTypeCntypeRestrictionsForEquivalentItem) Enum() *CnTypeCntypeRestrictionsForEquivalentItem {
	p := new(CnTypeCntypeRestrictionsForEquivalentItem)
	*p = x
	return p
}

func (x CnTypeCntypeRestrictionsForEquivalentItem) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CnTypeCntypeRestrictionsForEquivalentItem) Descriptor() protoreflect.EnumDescriptor {
	return file_api_xnap_v1_xnap_ies_proto_enumTypes[51].Descriptor()
}

func (CnTypeCntypeRestrictionsForEquivalentItem) Type() protoreflect.EnumType {
	return &file_api_xnap_v1_xnap_ies_proto_enumTypes[51]
}

func (x CnTypeCntypeRestrictionsForEquivalentItem) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CnTypeCntypeRestrictionsForEquivalentItem.Descriptor instead.
func (CnTypeCntypeRestrictionsForEquivalentItem) EnumDescriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{51}
}

// enumerated from xnap_v1.asn1:5176
type CntypeRestrictionsForServing int32

const (
	CntypeRestrictionsForServing_CNTYPE_RESTRICTIONS_FOR_SERVING_EPC_FORBIDDEN CntypeRestrictionsForServing = 0
)

// Enum value maps for CntypeRestrictionsForServing.
var (
	CntypeRestrictionsForServing_name = map[int32]string{
		0: "CNTYPE_RESTRICTIONS_FOR_SERVING_EPC_FORBIDDEN",
	}
	CntypeRestrictionsForServing_value = map[string]int32{
		"CNTYPE_RESTRICTIONS_FOR_SERVING_EPC_FORBIDDEN": 0,
	}
)

func (x CntypeRestrictionsForServing) Enum() *CntypeRestrictionsForServing {
	p := new(CntypeRestrictionsForServing)
	*p = x
	return p
}

func (x CntypeRestrictionsForServing) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CntypeRestrictionsForServing) Descriptor() protoreflect.EnumDescriptor {
	return file_api_xnap_v1_xnap_ies_proto_enumTypes[52].Descriptor()
}

func (CntypeRestrictionsForServing) Type() protoreflect.EnumType {
	return &file_api_xnap_v1_xnap_ies_proto_enumTypes[52]
}

func (x CntypeRestrictionsForServing) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CntypeRestrictionsForServing.Descriptor instead.
func (CntypeRestrictionsForServing) EnumDescriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{52}
}

// enumerated from xnap_v1.asn1:5258
type EUTraCoordinationAssistanceInfo int32

const (
	EUTraCoordinationAssistanceInfo_E_UTRA_COORDINATION_ASSISTANCE_INFO_COORDINATION_NOT_REQUIRED EUTraCoordinationAssistanceInfo = 0
)

// Enum value maps for EUTraCoordinationAssistanceInfo.
var (
	EUTraCoordinationAssistanceInfo_name = map[int32]string{
		0: "E_UTRA_COORDINATION_ASSISTANCE_INFO_COORDINATION_NOT_REQUIRED",
	}
	EUTraCoordinationAssistanceInfo_value = map[string]int32{
		"E_UTRA_COORDINATION_ASSISTANCE_INFO_COORDINATION_NOT_REQUIRED": 0,
	}
)

func (x EUTraCoordinationAssistanceInfo) Enum() *EUTraCoordinationAssistanceInfo {
	p := new(EUTraCoordinationAssistanceInfo)
	*p = x
	return p
}

func (x EUTraCoordinationAssistanceInfo) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EUTraCoordinationAssistanceInfo) Descriptor() protoreflect.EnumDescriptor {
	return file_api_xnap_v1_xnap_ies_proto_enumTypes[53].Descriptor()
}

func (EUTraCoordinationAssistanceInfo) Type() protoreflect.EnumType {
	return &file_api_xnap_v1_xnap_ies_proto_enumTypes[53]
}

func (x EUTraCoordinationAssistanceInfo) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EUTraCoordinationAssistanceInfo.Descriptor instead.
func (EUTraCoordinationAssistanceInfo) EnumDescriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{53}
}

// enumerated from xnap_v1.asn1:5275
type NrCoordinationAssistanceInfo int32

const (
	NrCoordinationAssistanceInfo_NR_COORDINATION_ASSISTANCE_INFO_COORDINATION_NOT_REQUIRED NrCoordinationAssistanceInfo = 0
)

// Enum value maps for NrCoordinationAssistanceInfo.
var (
	NrCoordinationAssistanceInfo_name = map[int32]string{
		0: "NR_COORDINATION_ASSISTANCE_INFO_COORDINATION_NOT_REQUIRED",
	}
	NrCoordinationAssistanceInfo_value = map[string]int32{
		"NR_COORDINATION_ASSISTANCE_INFO_COORDINATION_NOT_REQUIRED": 0,
	}
)

func (x NrCoordinationAssistanceInfo) Enum() *NrCoordinationAssistanceInfo {
	p := new(NrCoordinationAssistanceInfo)
	*p = x
	return p
}

func (x NrCoordinationAssistanceInfo) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NrCoordinationAssistanceInfo) Descriptor() protoreflect.EnumDescriptor {
	return file_api_xnap_v1_xnap_ies_proto_enumTypes[54].Descriptor()
}

func (NrCoordinationAssistanceInfo) Type() protoreflect.EnumType {
	return &file_api_xnap_v1_xnap_ies_proto_enumTypes[54]
}

func (x NrCoordinationAssistanceInfo) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NrCoordinationAssistanceInfo.Descriptor instead.
func (NrCoordinationAssistanceInfo) EnumDescriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{54}
}

// enumerated from xnap_v1.asn1:5292
type NbioTULDLAlignmentOffset int32

const (
	NbioTULDLAlignmentOffset_NBIO_T_UL_DL_ALIGNMENT_OFFSET_KHZ_7DOT5       NbioTULDLAlignmentOffset = 0
	NbioTULDLAlignmentOffset_NBIO_T_UL_DL_ALIGNMENT_OFFSET_KHZ0            NbioTULDLAlignmentOffset = 1
	NbioTULDLAlignmentOffset_NBIO_T_UL_DL_ALIGNMENT_OFFSET_KHZ7DOT5_SECOND NbioTULDLAlignmentOffset = 2
)

// Enum value maps for NbioTULDLAlignmentOffset.
var (
	NbioTULDLAlignmentOffset_name = map[int32]string{
		0: "NBIO_T_UL_DL_ALIGNMENT_OFFSET_KHZ_7DOT5",
		1: "NBIO_T_UL_DL_ALIGNMENT_OFFSET_KHZ0",
		2: "NBIO_T_UL_DL_ALIGNMENT_OFFSET_KHZ7DOT5_SECOND",
	}
	NbioTULDLAlignmentOffset_value = map[string]int32{
		"NBIO_T_UL_DL_ALIGNMENT_OFFSET_KHZ_7DOT5":       0,
		"NBIO_T_UL_DL_ALIGNMENT_OFFSET_KHZ0":            1,
		"NBIO_T_UL_DL_ALIGNMENT_OFFSET_KHZ7DOT5_SECOND": 2,
	}
)

func (x NbioTULDLAlignmentOffset) Enum() *NbioTULDLAlignmentOffset {
	p := new(NbioTULDLAlignmentOffset)
	*p = x
	return p
}

func (x NbioTULDLAlignmentOffset) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NbioTULDLAlignmentOffset) Descriptor() protoreflect.EnumDescriptor {
	return file_api_xnap_v1_xnap_ies_proto_enumTypes[55].Descriptor()
}

func (NbioTULDLAlignmentOffset) Type() protoreflect.EnumType {
	return &file_api_xnap_v1_xnap_ies_proto_enumTypes[55]
}

func (x NbioTULDLAlignmentOffset) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NbioTULDLAlignmentOffset.Descriptor instead.
func (NbioTULDLAlignmentOffset) EnumDescriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{55}
}

// enumerated from xnap_v1.asn1:5298
type SubframeAssignmentNedctdmpattern int32

const (
	SubframeAssignmentNedctdmpattern_SUBFRAME_ASSIGNMENT_NEDCTDMPATTERN_SA0 SubframeAssignmentNedctdmpattern = 0
	SubframeAssignmentNedctdmpattern_SUBFRAME_ASSIGNMENT_NEDCTDMPATTERN_SA1 SubframeAssignmentNedctdmpattern = 1
	SubframeAssignmentNedctdmpattern_SUBFRAME_ASSIGNMENT_NEDCTDMPATTERN_SA2 SubframeAssignmentNedctdmpattern = 2
	SubframeAssignmentNedctdmpattern_SUBFRAME_ASSIGNMENT_NEDCTDMPATTERN_SA3 SubframeAssignmentNedctdmpattern = 3
	SubframeAssignmentNedctdmpattern_SUBFRAME_ASSIGNMENT_NEDCTDMPATTERN_SA4 SubframeAssignmentNedctdmpattern = 4
	SubframeAssignmentNedctdmpattern_SUBFRAME_ASSIGNMENT_NEDCTDMPATTERN_SA5 SubframeAssignmentNedctdmpattern = 5
	SubframeAssignmentNedctdmpattern_SUBFRAME_ASSIGNMENT_NEDCTDMPATTERN_SA6 SubframeAssignmentNedctdmpattern = 6
)

// Enum value maps for SubframeAssignmentNedctdmpattern.
var (
	SubframeAssignmentNedctdmpattern_name = map[int32]string{
		0: "SUBFRAME_ASSIGNMENT_NEDCTDMPATTERN_SA0",
		1: "SUBFRAME_ASSIGNMENT_NEDCTDMPATTERN_SA1",
		2: "SUBFRAME_ASSIGNMENT_NEDCTDMPATTERN_SA2",
		3: "SUBFRAME_ASSIGNMENT_NEDCTDMPATTERN_SA3",
		4: "SUBFRAME_ASSIGNMENT_NEDCTDMPATTERN_SA4",
		5: "SUBFRAME_ASSIGNMENT_NEDCTDMPATTERN_SA5",
		6: "SUBFRAME_ASSIGNMENT_NEDCTDMPATTERN_SA6",
	}
	SubframeAssignmentNedctdmpattern_value = map[string]int32{
		"SUBFRAME_ASSIGNMENT_NEDCTDMPATTERN_SA0": 0,
		"SUBFRAME_ASSIGNMENT_NEDCTDMPATTERN_SA1": 1,
		"SUBFRAME_ASSIGNMENT_NEDCTDMPATTERN_SA2": 2,
		"SUBFRAME_ASSIGNMENT_NEDCTDMPATTERN_SA3": 3,
		"SUBFRAME_ASSIGNMENT_NEDCTDMPATTERN_SA4": 4,
		"SUBFRAME_ASSIGNMENT_NEDCTDMPATTERN_SA5": 5,
		"SUBFRAME_ASSIGNMENT_NEDCTDMPATTERN_SA6": 6,
	}
)

func (x SubframeAssignmentNedctdmpattern) Enum() *SubframeAssignmentNedctdmpattern {
	p := new(SubframeAssignmentNedctdmpattern)
	*p = x
	return p
}

func (x SubframeAssignmentNedctdmpattern) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SubframeAssignmentNedctdmpattern) Descriptor() protoreflect.EnumDescriptor {
	return file_api_xnap_v1_xnap_ies_proto_enumTypes[56].Descriptor()
}

func (SubframeAssignmentNedctdmpattern) Type() protoreflect.EnumType {
	return &file_api_xnap_v1_xnap_ies_proto_enumTypes[56]
}

func (x SubframeAssignmentNedctdmpattern) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SubframeAssignmentNedctdmpattern.Descriptor instead.
func (SubframeAssignmentNedctdmpattern) EnumDescriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{56}
}

// enumerated from xnap_v1.asn1:5631
type NprachCPLength int32

const (
	NprachCPLength_NPRACH_CP_LENGTH_US66DOT7  NprachCPLength = 0
	NprachCPLength_NPRACH_CP_LENGTH_US266DOT7 NprachCPLength = 1
)

// Enum value maps for NprachCPLength.
var (
	NprachCPLength_name = map[int32]string{
		0: "NPRACH_CP_LENGTH_US66DOT7",
		1: "NPRACH_CP_LENGTH_US266DOT7",
	}
	NprachCPLength_value = map[string]int32{
		"NPRACH_CP_LENGTH_US66DOT7":  0,
		"NPRACH_CP_LENGTH_US266DOT7": 1,
	}
)

func (x NprachCPLength) Enum() *NprachCPLength {
	p := new(NprachCPLength)
	*p = x
	return p
}

func (x NprachCPLength) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NprachCPLength) Descriptor() protoreflect.EnumDescriptor {
	return file_api_xnap_v1_xnap_ies_proto_enumTypes[57].Descriptor()
}

func (NprachCPLength) Type() protoreflect.EnumType {
	return &file_api_xnap_v1_xnap_ies_proto_enumTypes[57]
}

func (x NprachCPLength) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NprachCPLength.Descriptor instead.
func (NprachCPLength) EnumDescriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{57}
}

// enumerated from xnap_v1.asn1:5636
type NprachpreambleFormat int32

const (
	NprachpreambleFormat_NPRACH_PREAMBLE_FORMAT_FMT0  NprachpreambleFormat = 0
	NprachpreambleFormat_NPRACH_PREAMBLE_FORMAT_FMT1  NprachpreambleFormat = 1
	NprachpreambleFormat_NPRACH_PREAMBLE_FORMAT_FMT2  NprachpreambleFormat = 2
	NprachpreambleFormat_NPRACH_PREAMBLE_FORMAT_FMT0A NprachpreambleFormat = 3
	NprachpreambleFormat_NPRACH_PREAMBLE_FORMAT_FMT1A NprachpreambleFormat = 4
)

// Enum value maps for NprachpreambleFormat.
var (
	NprachpreambleFormat_name = map[int32]string{
		0: "NPRACH_PREAMBLE_FORMAT_FMT0",
		1: "NPRACH_PREAMBLE_FORMAT_FMT1",
		2: "NPRACH_PREAMBLE_FORMAT_FMT2",
		3: "NPRACH_PREAMBLE_FORMAT_FMT0A",
		4: "NPRACH_PREAMBLE_FORMAT_FMT1A",
	}
	NprachpreambleFormat_value = map[string]int32{
		"NPRACH_PREAMBLE_FORMAT_FMT0":  0,
		"NPRACH_PREAMBLE_FORMAT_FMT1":  1,
		"NPRACH_PREAMBLE_FORMAT_FMT2":  2,
		"NPRACH_PREAMBLE_FORMAT_FMT0A": 3,
		"NPRACH_PREAMBLE_FORMAT_FMT1A": 4,
	}
)

func (x NprachpreambleFormat) Enum() *NprachpreambleFormat {
	p := new(NprachpreambleFormat)
	*p = x
	return p
}

func (x NprachpreambleFormat) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NprachpreambleFormat) Descriptor() protoreflect.EnumDescriptor {
	return file_api_xnap_v1_xnap_ies_proto_enumTypes[58].Descriptor()
}

func (NprachpreambleFormat) Type() protoreflect.EnumType {
	return &file_api_xnap_v1_xnap_ies_proto_enumTypes[58]
}

func (x NprachpreambleFormat) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NprachpreambleFormat.Descriptor instead.
func (NprachpreambleFormat) EnumDescriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{58}
}

// enumerated from xnap_v1.asn1:5667
type NrcyclicPrefix int32

const (
	NrcyclicPrefix_NRCYCLIC_PREFIX_NORMAL   NrcyclicPrefix = 0
	NrcyclicPrefix_NRCYCLIC_PREFIX_EXTENDED NrcyclicPrefix = 1
)

// Enum value maps for NrcyclicPrefix.
var (
	NrcyclicPrefix_name = map[int32]string{
		0: "NRCYCLIC_PREFIX_NORMAL",
		1: "NRCYCLIC_PREFIX_EXTENDED",
	}
	NrcyclicPrefix_value = map[string]int32{
		"NRCYCLIC_PREFIX_NORMAL":   0,
		"NRCYCLIC_PREFIX_EXTENDED": 1,
	}
)

func (x NrcyclicPrefix) Enum() *NrcyclicPrefix {
	p := new(NrcyclicPrefix)
	*p = x
	return p
}

func (x NrcyclicPrefix) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NrcyclicPrefix) Descriptor() protoreflect.EnumDescriptor {
	return file_api_xnap_v1_xnap_ies_proto_enumTypes[59].Descriptor()
}

func (NrcyclicPrefix) Type() protoreflect.EnumType {
	return &file_api_xnap_v1_xnap_ies_proto_enumTypes[59]
}

func (x NrcyclicPrefix) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NrcyclicPrefix.Descriptor instead.
func (NrcyclicPrefix) EnumDescriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{59}
}

// enumerated from xnap_v1.asn1:5669
type NrdlULtransmissionPeriodicity int32

const (
	NrdlULtransmissionPeriodicity_NRDL_ULTRANSMISSION_PERIODICITY_MS0P5   NrdlULtransmissionPeriodicity = 0
	NrdlULtransmissionPeriodicity_NRDL_ULTRANSMISSION_PERIODICITY_MS0P625 NrdlULtransmissionPeriodicity = 1
	NrdlULtransmissionPeriodicity_NRDL_ULTRANSMISSION_PERIODICITY_MS1     NrdlULtransmissionPeriodicity = 2
	NrdlULtransmissionPeriodicity_NRDL_ULTRANSMISSION_PERIODICITY_MS1P25  NrdlULtransmissionPeriodicity = 3
	NrdlULtransmissionPeriodicity_NRDL_ULTRANSMISSION_PERIODICITY_MS2     NrdlULtransmissionPeriodicity = 4
	NrdlULtransmissionPeriodicity_NRDL_ULTRANSMISSION_PERIODICITY_MS2P5   NrdlULtransmissionPeriodicity = 5
	NrdlULtransmissionPeriodicity_NRDL_ULTRANSMISSION_PERIODICITY_MS3     NrdlULtransmissionPeriodicity = 6
	NrdlULtransmissionPeriodicity_NRDL_ULTRANSMISSION_PERIODICITY_MS4     NrdlULtransmissionPeriodicity = 7
	NrdlULtransmissionPeriodicity_NRDL_ULTRANSMISSION_PERIODICITY_MS5     NrdlULtransmissionPeriodicity = 8
	NrdlULtransmissionPeriodicity_NRDL_ULTRANSMISSION_PERIODICITY_MS10    NrdlULtransmissionPeriodicity = 9
	NrdlULtransmissionPeriodicity_NRDL_ULTRANSMISSION_PERIODICITY_MS20    NrdlULtransmissionPeriodicity = 10
	NrdlULtransmissionPeriodicity_NRDL_ULTRANSMISSION_PERIODICITY_MS40    NrdlULtransmissionPeriodicity = 11
	NrdlULtransmissionPeriodicity_NRDL_ULTRANSMISSION_PERIODICITY_MS60    NrdlULtransmissionPeriodicity = 12
	NrdlULtransmissionPeriodicity_NRDL_ULTRANSMISSION_PERIODICITY_MS80    NrdlULtransmissionPeriodicity = 13
	NrdlULtransmissionPeriodicity_NRDL_ULTRANSMISSION_PERIODICITY_MS100   NrdlULtransmissionPeriodicity = 14
	NrdlULtransmissionPeriodicity_NRDL_ULTRANSMISSION_PERIODICITY_MS120   NrdlULtransmissionPeriodicity = 15
	NrdlULtransmissionPeriodicity_NRDL_ULTRANSMISSION_PERIODICITY_MS140   NrdlULtransmissionPeriodicity = 16
	NrdlULtransmissionPeriodicity_NRDL_ULTRANSMISSION_PERIODICITY_MS160   NrdlULtransmissionPeriodicity = 17
)

// Enum value maps for NrdlULtransmissionPeriodicity.
var (
	NrdlULtransmissionPeriodicity_name = map[int32]string{
		0:  "NRDL_ULTRANSMISSION_PERIODICITY_MS0P5",
		1:  "NRDL_ULTRANSMISSION_PERIODICITY_MS0P625",
		2:  "NRDL_ULTRANSMISSION_PERIODICITY_MS1",
		3:  "NRDL_ULTRANSMISSION_PERIODICITY_MS1P25",
		4:  "NRDL_ULTRANSMISSION_PERIODICITY_MS2",
		5:  "NRDL_ULTRANSMISSION_PERIODICITY_MS2P5",
		6:  "NRDL_ULTRANSMISSION_PERIODICITY_MS3",
		7:  "NRDL_ULTRANSMISSION_PERIODICITY_MS4",
		8:  "NRDL_ULTRANSMISSION_PERIODICITY_MS5",
		9:  "NRDL_ULTRANSMISSION_PERIODICITY_MS10",
		10: "NRDL_ULTRANSMISSION_PERIODICITY_MS20",
		11: "NRDL_ULTRANSMISSION_PERIODICITY_MS40",
		12: "NRDL_ULTRANSMISSION_PERIODICITY_MS60",
		13: "NRDL_ULTRANSMISSION_PERIODICITY_MS80",
		14: "NRDL_ULTRANSMISSION_PERIODICITY_MS100",
		15: "NRDL_ULTRANSMISSION_PERIODICITY_MS120",
		16: "NRDL_ULTRANSMISSION_PERIODICITY_MS140",
		17: "NRDL_ULTRANSMISSION_PERIODICITY_MS160",
	}
	NrdlULtransmissionPeriodicity_value = map[string]int32{
		"NRDL_ULTRANSMISSION_PERIODICITY_MS0P5":   0,
		"NRDL_ULTRANSMISSION_PERIODICITY_MS0P625": 1,
		"NRDL_ULTRANSMISSION_PERIODICITY_MS1":     2,
		"NRDL_ULTRANSMISSION_PERIODICITY_MS1P25":  3,
		"NRDL_ULTRANSMISSION_PERIODICITY_MS2":     4,
		"NRDL_ULTRANSMISSION_PERIODICITY_MS2P5":   5,
		"NRDL_ULTRANSMISSION_PERIODICITY_MS3":     6,
		"NRDL_ULTRANSMISSION_PERIODICITY_MS4":     7,
		"NRDL_ULTRANSMISSION_PERIODICITY_MS5":     8,
		"NRDL_ULTRANSMISSION_PERIODICITY_MS10":    9,
		"NRDL_ULTRANSMISSION_PERIODICITY_MS20":    10,
		"NRDL_ULTRANSMISSION_PERIODICITY_MS40":    11,
		"NRDL_ULTRANSMISSION_PERIODICITY_MS60":    12,
		"NRDL_ULTRANSMISSION_PERIODICITY_MS80":    13,
		"NRDL_ULTRANSMISSION_PERIODICITY_MS100":   14,
		"NRDL_ULTRANSMISSION_PERIODICITY_MS120":   15,
		"NRDL_ULTRANSMISSION_PERIODICITY_MS140":   16,
		"NRDL_ULTRANSMISSION_PERIODICITY_MS160":   17,
	}
)

func (x NrdlULtransmissionPeriodicity) Enum() *NrdlULtransmissionPeriodicity {
	p := new(NrdlULtransmissionPeriodicity)
	*p = x
	return p
}

func (x NrdlULtransmissionPeriodicity) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NrdlULtransmissionPeriodicity) Descriptor() protoreflect.EnumDescriptor {
	return file_api_xnap_v1_xnap_ies_proto_enumTypes[60].Descriptor()
}

func (NrdlULtransmissionPeriodicity) Type() protoreflect.EnumType {
	return &file_api_xnap_v1_xnap_ies_proto_enumTypes[60]
}

func (x NrdlULtransmissionPeriodicity) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NrdlULtransmissionPeriodicity.Descriptor instead.
func (NrdlULtransmissionPeriodicity) EnumDescriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{60}
}

// enumerated from xnap_v1.asn1:5745
type Nrnrb int32

const (
	Nrnrb_NRNRB_NRB11  Nrnrb = 0
	Nrnrb_NRNRB_NRB18  Nrnrb = 1
	Nrnrb_NRNRB_NRB24  Nrnrb = 2
	Nrnrb_NRNRB_NRB25  Nrnrb = 3
	Nrnrb_NRNRB_NRB31  Nrnrb = 4
	Nrnrb_NRNRB_NRB32  Nrnrb = 5
	Nrnrb_NRNRB_NRB38  Nrnrb = 6
	Nrnrb_NRNRB_NRB51  Nrnrb = 7
	Nrnrb_NRNRB_NRB52  Nrnrb = 8
	Nrnrb_NRNRB_NRB65  Nrnrb = 9
	Nrnrb_NRNRB_NRB66  Nrnrb = 10
	Nrnrb_NRNRB_NRB78  Nrnrb = 11
	Nrnrb_NRNRB_NRB79  Nrnrb = 12
	Nrnrb_NRNRB_NRB93  Nrnrb = 13
	Nrnrb_NRNRB_NRB106 Nrnrb = 14
	Nrnrb_NRNRB_NRB107 Nrnrb = 15
	Nrnrb_NRNRB_NRB121 Nrnrb = 16
	Nrnrb_NRNRB_NRB132 Nrnrb = 17
	Nrnrb_NRNRB_NRB133 Nrnrb = 18
	Nrnrb_NRNRB_NRB135 Nrnrb = 19
	Nrnrb_NRNRB_NRB160 Nrnrb = 20
	Nrnrb_NRNRB_NRB162 Nrnrb = 21
	Nrnrb_NRNRB_NRB189 Nrnrb = 22
	Nrnrb_NRNRB_NRB216 Nrnrb = 23
	Nrnrb_NRNRB_NRB217 Nrnrb = 24
	Nrnrb_NRNRB_NRB245 Nrnrb = 25
	Nrnrb_NRNRB_NRB264 Nrnrb = 26
	Nrnrb_NRNRB_NRB270 Nrnrb = 27
	Nrnrb_NRNRB_NRB273 Nrnrb = 28
)

// Enum value maps for Nrnrb.
var (
	Nrnrb_name = map[int32]string{
		0:  "NRNRB_NRB11",
		1:  "NRNRB_NRB18",
		2:  "NRNRB_NRB24",
		3:  "NRNRB_NRB25",
		4:  "NRNRB_NRB31",
		5:  "NRNRB_NRB32",
		6:  "NRNRB_NRB38",
		7:  "NRNRB_NRB51",
		8:  "NRNRB_NRB52",
		9:  "NRNRB_NRB65",
		10: "NRNRB_NRB66",
		11: "NRNRB_NRB78",
		12: "NRNRB_NRB79",
		13: "NRNRB_NRB93",
		14: "NRNRB_NRB106",
		15: "NRNRB_NRB107",
		16: "NRNRB_NRB121",
		17: "NRNRB_NRB132",
		18: "NRNRB_NRB133",
		19: "NRNRB_NRB135",
		20: "NRNRB_NRB160",
		21: "NRNRB_NRB162",
		22: "NRNRB_NRB189",
		23: "NRNRB_NRB216",
		24: "NRNRB_NRB217",
		25: "NRNRB_NRB245",
		26: "NRNRB_NRB264",
		27: "NRNRB_NRB270",
		28: "NRNRB_NRB273",
	}
	Nrnrb_value = map[string]int32{
		"NRNRB_NRB11":  0,
		"NRNRB_NRB18":  1,
		"NRNRB_NRB24":  2,
		"NRNRB_NRB25":  3,
		"NRNRB_NRB31":  4,
		"NRNRB_NRB32":  5,
		"NRNRB_NRB38":  6,
		"NRNRB_NRB51":  7,
		"NRNRB_NRB52":  8,
		"NRNRB_NRB65":  9,
		"NRNRB_NRB66":  10,
		"NRNRB_NRB78":  11,
		"NRNRB_NRB79":  12,
		"NRNRB_NRB93":  13,
		"NRNRB_NRB106": 14,
		"NRNRB_NRB107": 15,
		"NRNRB_NRB121": 16,
		"NRNRB_NRB132": 17,
		"NRNRB_NRB133": 18,
		"NRNRB_NRB135": 19,
		"NRNRB_NRB160": 20,
		"NRNRB_NRB162": 21,
		"NRNRB_NRB189": 22,
		"NRNRB_NRB216": 23,
		"NRNRB_NRB217": 24,
		"NRNRB_NRB245": 25,
		"NRNRB_NRB264": 26,
		"NRNRB_NRB270": 27,
		"NRNRB_NRB273": 28,
	}
)

func (x Nrnrb) Enum() *Nrnrb {
	p := new(Nrnrb)
	*p = x
	return p
}

func (x Nrnrb) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Nrnrb) Descriptor() protoreflect.EnumDescriptor {
	return file_api_xnap_v1_xnap_ies_proto_enumTypes[61].Descriptor()
}

func (Nrnrb) Type() protoreflect.EnumType {
	return &file_api_xnap_v1_xnap_ies_proto_enumTypes[61]
}

func (x Nrnrb) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Nrnrb.Descriptor instead.
func (Nrnrb) EnumDescriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{61}
}

// enumerated from xnap_v1.asn1:5749
type Nrscs int32

const (
	Nrscs_NRSCS_SCS15  Nrscs = 0
	Nrscs_NRSCS_SCS30  Nrscs = 1
	Nrscs_NRSCS_SCS60  Nrscs = 2
	Nrscs_NRSCS_SCS120 Nrscs = 3
)

// Enum value maps for Nrscs.
var (
	Nrscs_name = map[int32]string{
		0: "NRSCS_SCS15",
		1: "NRSCS_SCS30",
		2: "NRSCS_SCS60",
		3: "NRSCS_SCS120",
	}
	Nrscs_value = map[string]int32{
		"NRSCS_SCS15":  0,
		"NRSCS_SCS30":  1,
		"NRSCS_SCS60":  2,
		"NRSCS_SCS120": 3,
	}
)

func (x Nrscs) Enum() *Nrscs {
	p := new(Nrscs)
	*p = x
	return p
}

func (x Nrscs) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Nrscs) Descriptor() protoreflect.EnumDescriptor {
	return file_api_xnap_v1_xnap_ies_proto_enumTypes[62].Descriptor()
}

func (Nrscs) Type() protoreflect.EnumType {
	return &file_api_xnap_v1_xnap_ies_proto_enumTypes[62]
}

func (x Nrscs) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Nrscs.Descriptor instead.
func (Nrscs) EnumDescriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{62}
}

// enumerated from xnap_v1.asn1:5764
type NumberOfAntennaPortsEUTra int32

const (
	NumberOfAntennaPortsEUTra_NUMBER_OF_ANTENNA_PORTS_E_UTRA_AN1 NumberOfAntennaPortsEUTra = 0
	NumberOfAntennaPortsEUTra_NUMBER_OF_ANTENNA_PORTS_E_UTRA_AN2 NumberOfAntennaPortsEUTra = 1
	NumberOfAntennaPortsEUTra_NUMBER_OF_ANTENNA_PORTS_E_UTRA_AN4 NumberOfAntennaPortsEUTra = 2
)

// Enum value maps for NumberOfAntennaPortsEUTra.
var (
	NumberOfAntennaPortsEUTra_name = map[int32]string{
		0: "NUMBER_OF_ANTENNA_PORTS_E_UTRA_AN1",
		1: "NUMBER_OF_ANTENNA_PORTS_E_UTRA_AN2",
		2: "NUMBER_OF_ANTENNA_PORTS_E_UTRA_AN4",
	}
	NumberOfAntennaPortsEUTra_value = map[string]int32{
		"NUMBER_OF_ANTENNA_PORTS_E_UTRA_AN1": 0,
		"NUMBER_OF_ANTENNA_PORTS_E_UTRA_AN2": 1,
		"NUMBER_OF_ANTENNA_PORTS_E_UTRA_AN4": 2,
	}
)

func (x NumberOfAntennaPortsEUTra) Enum() *NumberOfAntennaPortsEUTra {
	p := new(NumberOfAntennaPortsEUTra)
	*p = x
	return p
}

func (x NumberOfAntennaPortsEUTra) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NumberOfAntennaPortsEUTra) Descriptor() protoreflect.EnumDescriptor {
	return file_api_xnap_v1_xnap_ies_proto_enumTypes[63].Descriptor()
}

func (NumberOfAntennaPortsEUTra) Type() protoreflect.EnumType {
	return &file_api_xnap_v1_xnap_ies_proto_enumTypes[63]
}

func (x NumberOfAntennaPortsEUTra) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NumberOfAntennaPortsEUTra.Descriptor instead.
func (NumberOfAntennaPortsEUTra) EnumDescriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{63}
}

// enumerated from xnap_v1.asn1:5768
type NonGbrresourcesOffered int32

const (
	NonGbrresourcesOffered_NON_GBRRESOURCES_OFFERED_TRUE NonGbrresourcesOffered = 0
)

// Enum value maps for NonGbrresourcesOffered.
var (
	NonGbrresourcesOffered_name = map[int32]string{
		0: "NON_GBRRESOURCES_OFFERED_TRUE",
	}
	NonGbrresourcesOffered_value = map[string]int32{
		"NON_GBRRESOURCES_OFFERED_TRUE": 0,
	}
)

func (x NonGbrresourcesOffered) Enum() *NonGbrresourcesOffered {
	p := new(NonGbrresourcesOffered)
	*p = x
	return p
}

func (x NonGbrresourcesOffered) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NonGbrresourcesOffered) Descriptor() protoreflect.EnumDescriptor {
	return file_api_xnap_v1_xnap_ies_proto_enumTypes[64].Descriptor()
}

func (NonGbrresourcesOffered) Type() protoreflect.EnumType {
	return &file_api_xnap_v1_xnap_ies_proto_enumTypes[64]
}

func (x NonGbrresourcesOffered) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NonGbrresourcesOffered.Descriptor instead.
func (NonGbrresourcesOffered) EnumDescriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{64}
}

// enumerated from xnap_v1.asn1:5799
type OffsetOfNbiotChannelNumberToEarfcn int32

const (
	OffsetOfNbiotChannelNumberToEarfcn_OFFSET_OF_NBIOT_CHANNEL_NUMBER_TO_EARFCN_MINUS_TEN            OffsetOfNbiotChannelNumberToEarfcn = 0
	OffsetOfNbiotChannelNumberToEarfcn_OFFSET_OF_NBIOT_CHANNEL_NUMBER_TO_EARFCN_MINUS_NINE           OffsetOfNbiotChannelNumberToEarfcn = 1
	OffsetOfNbiotChannelNumberToEarfcn_OFFSET_OF_NBIOT_CHANNEL_NUMBER_TO_EARFCN_MINUS_EIGHT_DOT_FIVE OffsetOfNbiotChannelNumberToEarfcn = 2
	OffsetOfNbiotChannelNumberToEarfcn_OFFSET_OF_NBIOT_CHANNEL_NUMBER_TO_EARFCN_MINUS_EIGHT          OffsetOfNbiotChannelNumberToEarfcn = 3
	OffsetOfNbiotChannelNumberToEarfcn_OFFSET_OF_NBIOT_CHANNEL_NUMBER_TO_EARFCN_MINUS_SEVEN          OffsetOfNbiotChannelNumberToEarfcn = 4
	OffsetOfNbiotChannelNumberToEarfcn_OFFSET_OF_NBIOT_CHANNEL_NUMBER_TO_EARFCN_MINUS_SIX            OffsetOfNbiotChannelNumberToEarfcn = 5
	OffsetOfNbiotChannelNumberToEarfcn_OFFSET_OF_NBIOT_CHANNEL_NUMBER_TO_EARFCN_MINUS_FIVE           OffsetOfNbiotChannelNumberToEarfcn = 6
	OffsetOfNbiotChannelNumberToEarfcn_OFFSET_OF_NBIOT_CHANNEL_NUMBER_TO_EARFCN_MINUS_FOUR_DOT_FIVE  OffsetOfNbiotChannelNumberToEarfcn = 7
	OffsetOfNbiotChannelNumberToEarfcn_OFFSET_OF_NBIOT_CHANNEL_NUMBER_TO_EARFCN_MINUS_FOUR           OffsetOfNbiotChannelNumberToEarfcn = 8
	OffsetOfNbiotChannelNumberToEarfcn_OFFSET_OF_NBIOT_CHANNEL_NUMBER_TO_EARFCN_MINUS_THREE          OffsetOfNbiotChannelNumberToEarfcn = 9
	OffsetOfNbiotChannelNumberToEarfcn_OFFSET_OF_NBIOT_CHANNEL_NUMBER_TO_EARFCN_MINUS_TWO            OffsetOfNbiotChannelNumberToEarfcn = 10
	OffsetOfNbiotChannelNumberToEarfcn_OFFSET_OF_NBIOT_CHANNEL_NUMBER_TO_EARFCN_MINUS_ONE            OffsetOfNbiotChannelNumberToEarfcn = 11
	OffsetOfNbiotChannelNumberToEarfcn_OFFSET_OF_NBIOT_CHANNEL_NUMBER_TO_EARFCN_MINUS_ZERO_DOT_FIVE  OffsetOfNbiotChannelNumberToEarfcn = 12
	OffsetOfNbiotChannelNumberToEarfcn_OFFSET_OF_NBIOT_CHANNEL_NUMBER_TO_EARFCN_ZERO                 OffsetOfNbiotChannelNumberToEarfcn = 13
	OffsetOfNbiotChannelNumberToEarfcn_OFFSET_OF_NBIOT_CHANNEL_NUMBER_TO_EARFCN_ONE                  OffsetOfNbiotChannelNumberToEarfcn = 14
	OffsetOfNbiotChannelNumberToEarfcn_OFFSET_OF_NBIOT_CHANNEL_NUMBER_TO_EARFCN_TWO                  OffsetOfNbiotChannelNumberToEarfcn = 15
	OffsetOfNbiotChannelNumberToEarfcn_OFFSET_OF_NBIOT_CHANNEL_NUMBER_TO_EARFCN_THREE                OffsetOfNbiotChannelNumberToEarfcn = 16
	OffsetOfNbiotChannelNumberToEarfcn_OFFSET_OF_NBIOT_CHANNEL_NUMBER_TO_EARFCN_THREE_DOT_FIVE       OffsetOfNbiotChannelNumberToEarfcn = 17
	OffsetOfNbiotChannelNumberToEarfcn_OFFSET_OF_NBIOT_CHANNEL_NUMBER_TO_EARFCN_FOUR                 OffsetOfNbiotChannelNumberToEarfcn = 18
	OffsetOfNbiotChannelNumberToEarfcn_OFFSET_OF_NBIOT_CHANNEL_NUMBER_TO_EARFCN_FIVE                 OffsetOfNbiotChannelNumberToEarfcn = 19
	OffsetOfNbiotChannelNumberToEarfcn_OFFSET_OF_NBIOT_CHANNEL_NUMBER_TO_EARFCN_SIX                  OffsetOfNbiotChannelNumberToEarfcn = 20
	OffsetOfNbiotChannelNumberToEarfcn_OFFSET_OF_NBIOT_CHANNEL_NUMBER_TO_EARFCN_SEVEN                OffsetOfNbiotChannelNumberToEarfcn = 21
	OffsetOfNbiotChannelNumberToEarfcn_OFFSET_OF_NBIOT_CHANNEL_NUMBER_TO_EARFCN_SEVEN_DOT_FIVE       OffsetOfNbiotChannelNumberToEarfcn = 22
	OffsetOfNbiotChannelNumberToEarfcn_OFFSET_OF_NBIOT_CHANNEL_NUMBER_TO_EARFCN_EIGHT                OffsetOfNbiotChannelNumberToEarfcn = 23
	OffsetOfNbiotChannelNumberToEarfcn_OFFSET_OF_NBIOT_CHANNEL_NUMBER_TO_EARFCN_NINE                 OffsetOfNbiotChannelNumberToEarfcn = 24
)

// Enum value maps for OffsetOfNbiotChannelNumberToEarfcn.
var (
	OffsetOfNbiotChannelNumberToEarfcn_name = map[int32]string{
		0:  "OFFSET_OF_NBIOT_CHANNEL_NUMBER_TO_EARFCN_MINUS_TEN",
		1:  "OFFSET_OF_NBIOT_CHANNEL_NUMBER_TO_EARFCN_MINUS_NINE",
		2:  "OFFSET_OF_NBIOT_CHANNEL_NUMBER_TO_EARFCN_MINUS_EIGHT_DOT_FIVE",
		3:  "OFFSET_OF_NBIOT_CHANNEL_NUMBER_TO_EARFCN_MINUS_EIGHT",
		4:  "OFFSET_OF_NBIOT_CHANNEL_NUMBER_TO_EARFCN_MINUS_SEVEN",
		5:  "OFFSET_OF_NBIOT_CHANNEL_NUMBER_TO_EARFCN_MINUS_SIX",
		6:  "OFFSET_OF_NBIOT_CHANNEL_NUMBER_TO_EARFCN_MINUS_FIVE",
		7:  "OFFSET_OF_NBIOT_CHANNEL_NUMBER_TO_EARFCN_MINUS_FOUR_DOT_FIVE",
		8:  "OFFSET_OF_NBIOT_CHANNEL_NUMBER_TO_EARFCN_MINUS_FOUR",
		9:  "OFFSET_OF_NBIOT_CHANNEL_NUMBER_TO_EARFCN_MINUS_THREE",
		10: "OFFSET_OF_NBIOT_CHANNEL_NUMBER_TO_EARFCN_MINUS_TWO",
		11: "OFFSET_OF_NBIOT_CHANNEL_NUMBER_TO_EARFCN_MINUS_ONE",
		12: "OFFSET_OF_NBIOT_CHANNEL_NUMBER_TO_EARFCN_MINUS_ZERO_DOT_FIVE",
		13: "OFFSET_OF_NBIOT_CHANNEL_NUMBER_TO_EARFCN_ZERO",
		14: "OFFSET_OF_NBIOT_CHANNEL_NUMBER_TO_EARFCN_ONE",
		15: "OFFSET_OF_NBIOT_CHANNEL_NUMBER_TO_EARFCN_TWO",
		16: "OFFSET_OF_NBIOT_CHANNEL_NUMBER_TO_EARFCN_THREE",
		17: "OFFSET_OF_NBIOT_CHANNEL_NUMBER_TO_EARFCN_THREE_DOT_FIVE",
		18: "OFFSET_OF_NBIOT_CHANNEL_NUMBER_TO_EARFCN_FOUR",
		19: "OFFSET_OF_NBIOT_CHANNEL_NUMBER_TO_EARFCN_FIVE",
		20: "OFFSET_OF_NBIOT_CHANNEL_NUMBER_TO_EARFCN_SIX",
		21: "OFFSET_OF_NBIOT_CHANNEL_NUMBER_TO_EARFCN_SEVEN",
		22: "OFFSET_OF_NBIOT_CHANNEL_NUMBER_TO_EARFCN_SEVEN_DOT_FIVE",
		23: "OFFSET_OF_NBIOT_CHANNEL_NUMBER_TO_EARFCN_EIGHT",
		24: "OFFSET_OF_NBIOT_CHANNEL_NUMBER_TO_EARFCN_NINE",
	}
	OffsetOfNbiotChannelNumberToEarfcn_value = map[string]int32{
		"OFFSET_OF_NBIOT_CHANNEL_NUMBER_TO_EARFCN_MINUS_TEN":            0,
		"OFFSET_OF_NBIOT_CHANNEL_NUMBER_TO_EARFCN_MINUS_NINE":           1,
		"OFFSET_OF_NBIOT_CHANNEL_NUMBER_TO_EARFCN_MINUS_EIGHT_DOT_FIVE": 2,
		"OFFSET_OF_NBIOT_CHANNEL_NUMBER_TO_EARFCN_MINUS_EIGHT":          3,
		"OFFSET_OF_NBIOT_CHANNEL_NUMBER_TO_EARFCN_MINUS_SEVEN":          4,
		"OFFSET_OF_NBIOT_CHANNEL_NUMBER_TO_EARFCN_MINUS_SIX":            5,
		"OFFSET_OF_NBIOT_CHANNEL_NUMBER_TO_EARFCN_MINUS_FIVE":           6,
		"OFFSET_OF_NBIOT_CHANNEL_NUMBER_TO_EARFCN_MINUS_FOUR_DOT_FIVE":  7,
		"OFFSET_OF_NBIOT_CHANNEL_NUMBER_TO_EARFCN_MINUS_FOUR":           8,
		"OFFSET_OF_NBIOT_CHANNEL_NUMBER_TO_EARFCN_MINUS_THREE":          9,
		"OFFSET_OF_NBIOT_CHANNEL_NUMBER_TO_EARFCN_MINUS_TWO":            10,
		"OFFSET_OF_NBIOT_CHANNEL_NUMBER_TO_EARFCN_MINUS_ONE":            11,
		"OFFSET_OF_NBIOT_CHANNEL_NUMBER_TO_EARFCN_MINUS_ZERO_DOT_FIVE":  12,
		"OFFSET_OF_NBIOT_CHANNEL_NUMBER_TO_EARFCN_ZERO":                 13,
		"OFFSET_OF_NBIOT_CHANNEL_NUMBER_TO_EARFCN_ONE":                  14,
		"OFFSET_OF_NBIOT_CHANNEL_NUMBER_TO_EARFCN_TWO":                  15,
		"OFFSET_OF_NBIOT_CHANNEL_NUMBER_TO_EARFCN_THREE":                16,
		"OFFSET_OF_NBIOT_CHANNEL_NUMBER_TO_EARFCN_THREE_DOT_FIVE":       17,
		"OFFSET_OF_NBIOT_CHANNEL_NUMBER_TO_EARFCN_FOUR":                 18,
		"OFFSET_OF_NBIOT_CHANNEL_NUMBER_TO_EARFCN_FIVE":                 19,
		"OFFSET_OF_NBIOT_CHANNEL_NUMBER_TO_EARFCN_SIX":                  20,
		"OFFSET_OF_NBIOT_CHANNEL_NUMBER_TO_EARFCN_SEVEN":                21,
		"OFFSET_OF_NBIOT_CHANNEL_NUMBER_TO_EARFCN_SEVEN_DOT_FIVE":       22,
		"OFFSET_OF_NBIOT_CHANNEL_NUMBER_TO_EARFCN_EIGHT":                23,
		"OFFSET_OF_NBIOT_CHANNEL_NUMBER_TO_EARFCN_NINE":                 24,
	}
)

func (x OffsetOfNbiotChannelNumberToEarfcn) Enum() *OffsetOfNbiotChannelNumberToEarfcn {
	p := new(OffsetOfNbiotChannelNumberToEarfcn)
	*p = x
	return p
}

func (x OffsetOfNbiotChannelNumberToEarfcn) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OffsetOfNbiotChannelNumberToEarfcn) Descriptor() protoreflect.EnumDescriptor {
	return file_api_xnap_v1_xnap_ies_proto_enumTypes[65].Descriptor()
}

func (OffsetOfNbiotChannelNumberToEarfcn) Type() protoreflect.EnumType {
	return &file_api_xnap_v1_xnap_ies_proto_enumTypes[65]
}

func (x OffsetOfNbiotChannelNumberToEarfcn) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OffsetOfNbiotChannelNumberToEarfcn.Descriptor instead.
func (OffsetOfNbiotChannelNumberToEarfcn) EnumDescriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{65}
}

// enumerated from xnap_v1.asn1:5845
type PedestrianUe int32

const (
	PedestrianUe_PEDESTRIAN_UE_AUTHORIZED     PedestrianUe = 0
	PedestrianUe_PEDESTRIAN_UE_NOT_AUTHORIZED PedestrianUe = 1
)

// Enum value maps for PedestrianUe.
var (
	PedestrianUe_name = map[int32]string{
		0: "PEDESTRIAN_UE_AUTHORIZED",
		1: "PEDESTRIAN_UE_NOT_AUTHORIZED",
	}
	PedestrianUe_value = map[string]int32{
		"PEDESTRIAN_UE_AUTHORIZED":     0,
		"PEDESTRIAN_UE_NOT_AUTHORIZED": 1,
	}
)

func (x PedestrianUe) Enum() *PedestrianUe {
	p := new(PedestrianUe)
	*p = x
	return p
}

func (x PedestrianUe) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PedestrianUe) Descriptor() protoreflect.EnumDescriptor {
	return file_api_xnap_v1_xnap_ies_proto_enumTypes[66].Descriptor()
}

func (PedestrianUe) Type() protoreflect.EnumType {
	return &file_api_xnap_v1_xnap_ies_proto_enumTypes[66]
}

func (x PedestrianUe) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PedestrianUe.Descriptor instead.
func (PedestrianUe) EnumDescriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{66}
}

// enumerated from xnap_v1.asn1:5859
type PagingDrx int32

const (
	PagingDrx_PAGING_DRX_V32   PagingDrx = 0
	PagingDrx_PAGING_DRX_V64   PagingDrx = 1
	PagingDrx_PAGING_DRX_V128  PagingDrx = 2
	PagingDrx_PAGING_DRX_V256  PagingDrx = 3
	PagingDrx_PAGING_DRX_V512  PagingDrx = 4
	PagingDrx_PAGING_DRX_V1024 PagingDrx = 5
)

// Enum value maps for PagingDrx.
var (
	PagingDrx_name = map[int32]string{
		0: "PAGING_DRX_V32",
		1: "PAGING_DRX_V64",
		2: "PAGING_DRX_V128",
		3: "PAGING_DRX_V256",
		4: "PAGING_DRX_V512",
		5: "PAGING_DRX_V1024",
	}
	PagingDrx_value = map[string]int32{
		"PAGING_DRX_V32":   0,
		"PAGING_DRX_V64":   1,
		"PAGING_DRX_V128":  2,
		"PAGING_DRX_V256":  3,
		"PAGING_DRX_V512":  4,
		"PAGING_DRX_V1024": 5,
	}
)

func (x PagingDrx) Enum() *PagingDrx {
	p := new(PagingDrx)
	*p = x
	return p
}

func (x PagingDrx) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PagingDrx) Descriptor() protoreflect.EnumDescriptor {
	return file_api_xnap_v1_xnap_ies_proto_enumTypes[67].Descriptor()
}

func (PagingDrx) Type() protoreflect.EnumType {
	return &file_api_xnap_v1_xnap_ies_proto_enumTypes[67]
}

func (x PagingDrx) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PagingDrx.Descriptor instead.
func (PagingDrx) EnumDescriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{67}
}

// enumerated from xnap_v1.asn1:5881
type PagingeDrxCycle int32

const (
	PagingeDrxCycle_PAGING_E_DRX_CYCLE_HFHALF PagingeDrxCycle = 0
	PagingeDrxCycle_PAGING_E_DRX_CYCLE_HF1    PagingeDrxCycle = 1
	PagingeDrxCycle_PAGING_E_DRX_CYCLE_HF2    PagingeDrxCycle = 2
	PagingeDrxCycle_PAGING_E_DRX_CYCLE_HF4    PagingeDrxCycle = 3
	PagingeDrxCycle_PAGING_E_DRX_CYCLE_HF6    PagingeDrxCycle = 4
	PagingeDrxCycle_PAGING_E_DRX_CYCLE_HF8    PagingeDrxCycle = 5
	PagingeDrxCycle_PAGING_E_DRX_CYCLE_HF10   PagingeDrxCycle = 6
	PagingeDrxCycle_PAGING_E_DRX_CYCLE_HF12   PagingeDrxCycle = 7
	PagingeDrxCycle_PAGING_E_DRX_CYCLE_HF14   PagingeDrxCycle = 8
	PagingeDrxCycle_PAGING_E_DRX_CYCLE_HF16   PagingeDrxCycle = 9
	PagingeDrxCycle_PAGING_E_DRX_CYCLE_HF32   PagingeDrxCycle = 10
	PagingeDrxCycle_PAGING_E_DRX_CYCLE_HF64   PagingeDrxCycle = 11
	PagingeDrxCycle_PAGING_E_DRX_CYCLE_HF128  PagingeDrxCycle = 12
	PagingeDrxCycle_PAGING_E_DRX_CYCLE_HF256  PagingeDrxCycle = 13
)

// Enum value maps for PagingeDrxCycle.
var (
	PagingeDrxCycle_name = map[int32]string{
		0:  "PAGING_E_DRX_CYCLE_HFHALF",
		1:  "PAGING_E_DRX_CYCLE_HF1",
		2:  "PAGING_E_DRX_CYCLE_HF2",
		3:  "PAGING_E_DRX_CYCLE_HF4",
		4:  "PAGING_E_DRX_CYCLE_HF6",
		5:  "PAGING_E_DRX_CYCLE_HF8",
		6:  "PAGING_E_DRX_CYCLE_HF10",
		7:  "PAGING_E_DRX_CYCLE_HF12",
		8:  "PAGING_E_DRX_CYCLE_HF14",
		9:  "PAGING_E_DRX_CYCLE_HF16",
		10: "PAGING_E_DRX_CYCLE_HF32",
		11: "PAGING_E_DRX_CYCLE_HF64",
		12: "PAGING_E_DRX_CYCLE_HF128",
		13: "PAGING_E_DRX_CYCLE_HF256",
	}
	PagingeDrxCycle_value = map[string]int32{
		"PAGING_E_DRX_CYCLE_HFHALF": 0,
		"PAGING_E_DRX_CYCLE_HF1":    1,
		"PAGING_E_DRX_CYCLE_HF2":    2,
		"PAGING_E_DRX_CYCLE_HF4":    3,
		"PAGING_E_DRX_CYCLE_HF6":    4,
		"PAGING_E_DRX_CYCLE_HF8":    5,
		"PAGING_E_DRX_CYCLE_HF10":   6,
		"PAGING_E_DRX_CYCLE_HF12":   7,
		"PAGING_E_DRX_CYCLE_HF14":   8,
		"PAGING_E_DRX_CYCLE_HF16":   9,
		"PAGING_E_DRX_CYCLE_HF32":   10,
		"PAGING_E_DRX_CYCLE_HF64":   11,
		"PAGING_E_DRX_CYCLE_HF128":  12,
		"PAGING_E_DRX_CYCLE_HF256":  13,
	}
)

func (x PagingeDrxCycle) Enum() *PagingeDrxCycle {
	p := new(PagingeDrxCycle)
	*p = x
	return p
}

func (x PagingeDrxCycle) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PagingeDrxCycle) Descriptor() protoreflect.EnumDescriptor {
	return file_api_xnap_v1_xnap_ies_proto_enumTypes[68].Descriptor()
}

func (PagingeDrxCycle) Type() protoreflect.EnumType {
	return &file_api_xnap_v1_xnap_ies_proto_enumTypes[68]
}

func (x PagingeDrxCycle) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PagingeDrxCycle.Descriptor instead.
func (PagingeDrxCycle) EnumDescriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{68}
}

// enumerated from xnap_v1.asn1:5889
type PagingTimeWindow int32

const (
	PagingTimeWindow_PAGING_TIME_WINDOW_S1  PagingTimeWindow = 0
	PagingTimeWindow_PAGING_TIME_WINDOW_S2  PagingTimeWindow = 1
	PagingTimeWindow_PAGING_TIME_WINDOW_S3  PagingTimeWindow = 2
	PagingTimeWindow_PAGING_TIME_WINDOW_S4  PagingTimeWindow = 3
	PagingTimeWindow_PAGING_TIME_WINDOW_S5  PagingTimeWindow = 4
	PagingTimeWindow_PAGING_TIME_WINDOW_S6  PagingTimeWindow = 5
	PagingTimeWindow_PAGING_TIME_WINDOW_S7  PagingTimeWindow = 6
	PagingTimeWindow_PAGING_TIME_WINDOW_S8  PagingTimeWindow = 7
	PagingTimeWindow_PAGING_TIME_WINDOW_S9  PagingTimeWindow = 8
	PagingTimeWindow_PAGING_TIME_WINDOW_S10 PagingTimeWindow = 9
	PagingTimeWindow_PAGING_TIME_WINDOW_S11 PagingTimeWindow = 10
	PagingTimeWindow_PAGING_TIME_WINDOW_S12 PagingTimeWindow = 11
	PagingTimeWindow_PAGING_TIME_WINDOW_S13 PagingTimeWindow = 12
	PagingTimeWindow_PAGING_TIME_WINDOW_S14 PagingTimeWindow = 13
	PagingTimeWindow_PAGING_TIME_WINDOW_S15 PagingTimeWindow = 14
	PagingTimeWindow_PAGING_TIME_WINDOW_S16 PagingTimeWindow = 15
)

// Enum value maps for PagingTimeWindow.
var (
	PagingTimeWindow_name = map[int32]string{
		0:  "PAGING_TIME_WINDOW_S1",
		1:  "PAGING_TIME_WINDOW_S2",
		2:  "PAGING_TIME_WINDOW_S3",
		3:  "PAGING_TIME_WINDOW_S4",
		4:  "PAGING_TIME_WINDOW_S5",
		5:  "PAGING_TIME_WINDOW_S6",
		6:  "PAGING_TIME_WINDOW_S7",
		7:  "PAGING_TIME_WINDOW_S8",
		8:  "PAGING_TIME_WINDOW_S9",
		9:  "PAGING_TIME_WINDOW_S10",
		10: "PAGING_TIME_WINDOW_S11",
		11: "PAGING_TIME_WINDOW_S12",
		12: "PAGING_TIME_WINDOW_S13",
		13: "PAGING_TIME_WINDOW_S14",
		14: "PAGING_TIME_WINDOW_S15",
		15: "PAGING_TIME_WINDOW_S16",
	}
	PagingTimeWindow_value = map[string]int32{
		"PAGING_TIME_WINDOW_S1":  0,
		"PAGING_TIME_WINDOW_S2":  1,
		"PAGING_TIME_WINDOW_S3":  2,
		"PAGING_TIME_WINDOW_S4":  3,
		"PAGING_TIME_WINDOW_S5":  4,
		"PAGING_TIME_WINDOW_S6":  5,
		"PAGING_TIME_WINDOW_S7":  6,
		"PAGING_TIME_WINDOW_S8":  7,
		"PAGING_TIME_WINDOW_S9":  8,
		"PAGING_TIME_WINDOW_S10": 9,
		"PAGING_TIME_WINDOW_S11": 10,
		"PAGING_TIME_WINDOW_S12": 11,
		"PAGING_TIME_WINDOW_S13": 12,
		"PAGING_TIME_WINDOW_S14": 13,
		"PAGING_TIME_WINDOW_S15": 14,
		"PAGING_TIME_WINDOW_S16": 15,
	}
)

func (x PagingTimeWindow) Enum() *PagingTimeWindow {
	p := new(PagingTimeWindow)
	*p = x
	return p
}

func (x PagingTimeWindow) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PagingTimeWindow) Descriptor() protoreflect.EnumDescriptor {
	return file_api_xnap_v1_xnap_ies_proto_enumTypes[69].Descriptor()
}

func (PagingTimeWindow) Type() protoreflect.EnumType {
	return &file_api_xnap_v1_xnap_ies_proto_enumTypes[69]
}

func (x PagingTimeWindow) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PagingTimeWindow.Descriptor instead.
func (PagingTimeWindow) EnumDescriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{69}
}

// enumerated from xnap_v1.asn1:5897
type PagingPriority int32

const (
	PagingPriority_PAGING_PRIORITY_PRIOLEVEL1 PagingPriority = 0
	PagingPriority_PAGING_PRIORITY_PRIOLEVEL2 PagingPriority = 1
	PagingPriority_PAGING_PRIORITY_PRIOLEVEL3 PagingPriority = 2
	PagingPriority_PAGING_PRIORITY_PRIOLEVEL4 PagingPriority = 3
	PagingPriority_PAGING_PRIORITY_PRIOLEVEL5 PagingPriority = 4
	PagingPriority_PAGING_PRIORITY_PRIOLEVEL6 PagingPriority = 5
	PagingPriority_PAGING_PRIORITY_PRIOLEVEL7 PagingPriority = 6
	PagingPriority_PAGING_PRIORITY_PRIOLEVEL8 PagingPriority = 7
)

// Enum value maps for PagingPriority.
var (
	PagingPriority_name = map[int32]string{
		0: "PAGING_PRIORITY_PRIOLEVEL1",
		1: "PAGING_PRIORITY_PRIOLEVEL2",
		2: "PAGING_PRIORITY_PRIOLEVEL3",
		3: "PAGING_PRIORITY_PRIOLEVEL4",
		4: "PAGING_PRIORITY_PRIOLEVEL5",
		5: "PAGING_PRIORITY_PRIOLEVEL6",
		6: "PAGING_PRIORITY_PRIOLEVEL7",
		7: "PAGING_PRIORITY_PRIOLEVEL8",
	}
	PagingPriority_value = map[string]int32{
		"PAGING_PRIORITY_PRIOLEVEL1": 0,
		"PAGING_PRIORITY_PRIOLEVEL2": 1,
		"PAGING_PRIORITY_PRIOLEVEL3": 2,
		"PAGING_PRIORITY_PRIOLEVEL4": 3,
		"PAGING_PRIORITY_PRIOLEVEL5": 4,
		"PAGING_PRIORITY_PRIOLEVEL6": 5,
		"PAGING_PRIORITY_PRIOLEVEL7": 6,
		"PAGING_PRIORITY_PRIOLEVEL8": 7,
	}
)

func (x PagingPriority) Enum() *PagingPriority {
	p := new(PagingPriority)
	*p = x
	return p
}

func (x PagingPriority) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PagingPriority) Descriptor() protoreflect.EnumDescriptor {
	return file_api_xnap_v1_xnap_ies_proto_enumTypes[70].Descriptor()
}

func (PagingPriority) Type() protoreflect.EnumType {
	return &file_api_xnap_v1_xnap_ies_proto_enumTypes[70]
}

func (x PagingPriority) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PagingPriority.Descriptor instead.
func (PagingPriority) EnumDescriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{70}
}

// enumerated from xnap_v1.asn1:5908
type PartialListIndicator int32

const (
	PartialListIndicator_PARTIAL_LIST_INDICATOR_PARTIAL PartialListIndicator = 0
)

// Enum value maps for PartialListIndicator.
var (
	PartialListIndicator_name = map[int32]string{
		0: "PARTIAL_LIST_INDICATOR_PARTIAL",
	}
	PartialListIndicator_value = map[string]int32{
		"PARTIAL_LIST_INDICATOR_PARTIAL": 0,
	}
)

func (x PartialListIndicator) Enum() *PartialListIndicator {
	p := new(PartialListIndicator)
	*p = x
	return p
}

func (x PartialListIndicator) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PartialListIndicator) Descriptor() protoreflect.EnumDescriptor {
	return file_api_xnap_v1_xnap_ies_proto_enumTypes[71].Descriptor()
}

func (PartialListIndicator) Type() protoreflect.EnumType {
	return &file_api_xnap_v1_xnap_ies_proto_enumTypes[71]
}

func (x PartialListIndicator) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PartialListIndicator.Descriptor instead.
func (PartialListIndicator) EnumDescriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{71}
}

// enumerated from xnap_v1.asn1:5950
type FromSngrannodePdcpchangeIndication int32

const (
	FromSngrannodePdcpchangeIndication_FROM_SNGRANNODE_PDCPCHANGE_INDICATION_S_NG_RAN_NODE_KEY_UPDATE_REQUIRED FromSngrannodePdcpchangeIndication = 0
	FromSngrannodePdcpchangeIndication_FROM_SNGRANNODE_PDCPCHANGE_INDICATION_PDCP_DATA_RECOVERY_REQUIRED       FromSngrannodePdcpchangeIndication = 1
)

// Enum value maps for FromSngrannodePdcpchangeIndication.
var (
	FromSngrannodePdcpchangeIndication_name = map[int32]string{
		0: "FROM_SNGRANNODE_PDCPCHANGE_INDICATION_S_NG_RAN_NODE_KEY_UPDATE_REQUIRED",
		1: "FROM_SNGRANNODE_PDCPCHANGE_INDICATION_PDCP_DATA_RECOVERY_REQUIRED",
	}
	FromSngrannodePdcpchangeIndication_value = map[string]int32{
		"FROM_SNGRANNODE_PDCPCHANGE_INDICATION_S_NG_RAN_NODE_KEY_UPDATE_REQUIRED": 0,
		"FROM_SNGRANNODE_PDCPCHANGE_INDICATION_PDCP_DATA_RECOVERY_REQUIRED":       1,
	}
)

func (x FromSngrannodePdcpchangeIndication) Enum() *FromSngrannodePdcpchangeIndication {
	p := new(FromSngrannodePdcpchangeIndication)
	*p = x
	return p
}

func (x FromSngrannodePdcpchangeIndication) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FromSngrannodePdcpchangeIndication) Descriptor() protoreflect.EnumDescriptor {
	return file_api_xnap_v1_xnap_ies_proto_enumTypes[72].Descriptor()
}

func (FromSngrannodePdcpchangeIndication) Type() protoreflect.EnumType {
	return &file_api_xnap_v1_xnap_ies_proto_enumTypes[72]
}

func (x FromSngrannodePdcpchangeIndication) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FromSngrannodePdcpchangeIndication.Descriptor instead.
func (FromSngrannodePdcpchangeIndication) EnumDescriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{72}
}

// enumerated from xnap_v1.asn1:5951
type FromMngrannodePdcpchangeIndication int32

const (
	FromMngrannodePdcpchangeIndication_FROM_MNGRANNODE_PDCPCHANGE_INDICATION_PDCP_DATA_RECOVERY_REQUIRED FromMngrannodePdcpchangeIndication = 0
)

// Enum value maps for FromMngrannodePdcpchangeIndication.
var (
	FromMngrannodePdcpchangeIndication_name = map[int32]string{
		0: "FROM_MNGRANNODE_PDCPCHANGE_INDICATION_PDCP_DATA_RECOVERY_REQUIRED",
	}
	FromMngrannodePdcpchangeIndication_value = map[string]int32{
		"FROM_MNGRANNODE_PDCPCHANGE_INDICATION_PDCP_DATA_RECOVERY_REQUIRED": 0,
	}
)

func (x FromMngrannodePdcpchangeIndication) Enum() *FromMngrannodePdcpchangeIndication {
	p := new(FromMngrannodePdcpchangeIndication)
	*p = x
	return p
}

func (x FromMngrannodePdcpchangeIndication) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FromMngrannodePdcpchangeIndication) Descriptor() protoreflect.EnumDescriptor {
	return file_api_xnap_v1_xnap_ies_proto_enumTypes[73].Descriptor()
}

func (FromMngrannodePdcpchangeIndication) Type() protoreflect.EnumType {
	return &file_api_xnap_v1_xnap_ies_proto_enumTypes[73]
}

func (x FromMngrannodePdcpchangeIndication) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FromMngrannodePdcpchangeIndication.Descriptor instead.
func (FromMngrannodePdcpchangeIndication) EnumDescriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{73}
}

// enumerated from xnap_v1.asn1:5961
type PdcpduplicationConfiguration int32

const (
	PdcpduplicationConfiguration_PDCPDUPLICATION_CONFIGURATION_CONFIGURED    PdcpduplicationConfiguration = 0
	PdcpduplicationConfiguration_PDCPDUPLICATION_CONFIGURATION_DE_CONFIGURED PdcpduplicationConfiguration = 1
)

// Enum value maps for PdcpduplicationConfiguration.
var (
	PdcpduplicationConfiguration_name = map[int32]string{
		0: "PDCPDUPLICATION_CONFIGURATION_CONFIGURED",
		1: "PDCPDUPLICATION_CONFIGURATION_DE_CONFIGURED",
	}
	PdcpduplicationConfiguration_value = map[string]int32{
		"PDCPDUPLICATION_CONFIGURATION_CONFIGURED":    0,
		"PDCPDUPLICATION_CONFIGURATION_DE_CONFIGURED": 1,
	}
)

func (x PdcpduplicationConfiguration) Enum() *PdcpduplicationConfiguration {
	p := new(PdcpduplicationConfiguration)
	*p = x
	return p
}

func (x PdcpduplicationConfiguration) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PdcpduplicationConfiguration) Descriptor() protoreflect.EnumDescriptor {
	return file_api_xnap_v1_xnap_ies_proto_enumTypes[74].Descriptor()
}

func (PdcpduplicationConfiguration) Type() protoreflect.EnumType {
	return &file_api_xnap_v1_xnap_ies_proto_enumTypes[74]
}

func (x PdcpduplicationConfiguration) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PdcpduplicationConfiguration.Descriptor instead.
func (PdcpduplicationConfiguration) EnumDescriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{74}
}

// enumerated from xnap_v1.asn1:5968
type UlPdcpsnlengthPdcpsnlength int32

const (
	UlPdcpsnlengthPdcpsnlength_UL_PDCPSNLENGTH_PDCPSNLENGTH_V12BITS UlPdcpsnlengthPdcpsnlength = 0
	UlPdcpsnlengthPdcpsnlength_UL_PDCPSNLENGTH_PDCPSNLENGTH_V18BITS UlPdcpsnlengthPdcpsnlength = 1
)

// Enum value maps for UlPdcpsnlengthPdcpsnlength.
var (
	UlPdcpsnlengthPdcpsnlength_name = map[int32]string{
		0: "UL_PDCPSNLENGTH_PDCPSNLENGTH_V12BITS",
		1: "UL_PDCPSNLENGTH_PDCPSNLENGTH_V18BITS",
	}
	UlPdcpsnlengthPdcpsnlength_value = map[string]int32{
		"UL_PDCPSNLENGTH_PDCPSNLENGTH_V12BITS": 0,
		"UL_PDCPSNLENGTH_PDCPSNLENGTH_V18BITS": 1,
	}
)

func (x UlPdcpsnlengthPdcpsnlength) Enum() *UlPdcpsnlengthPdcpsnlength {
	p := new(UlPdcpsnlengthPdcpsnlength)
	*p = x
	return p
}

func (x UlPdcpsnlengthPdcpsnlength) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UlPdcpsnlengthPdcpsnlength) Descriptor() protoreflect.EnumDescriptor {
	return file_api_xnap_v1_xnap_ies_proto_enumTypes[75].Descriptor()
}

func (UlPdcpsnlengthPdcpsnlength) Type() protoreflect.EnumType {
	return &file_api_xnap_v1_xnap_ies_proto_enumTypes[75]
}

func (x UlPdcpsnlengthPdcpsnlength) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UlPdcpsnlengthPdcpsnlength.Descriptor instead.
func (UlPdcpsnlengthPdcpsnlength) EnumDescriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{75}
}

// enumerated from xnap_v1.asn1:5969
type DlPdcpsnlengthPdcpsnlength int32

const (
	DlPdcpsnlengthPdcpsnlength_DL_PDCPSNLENGTH_PDCPSNLENGTH_V12BITS DlPdcpsnlengthPdcpsnlength = 0
	DlPdcpsnlengthPdcpsnlength_DL_PDCPSNLENGTH_PDCPSNLENGTH_V18BITS DlPdcpsnlengthPdcpsnlength = 1
)

// Enum value maps for DlPdcpsnlengthPdcpsnlength.
var (
	DlPdcpsnlengthPdcpsnlength_name = map[int32]string{
		0: "DL_PDCPSNLENGTH_PDCPSNLENGTH_V12BITS",
		1: "DL_PDCPSNLENGTH_PDCPSNLENGTH_V18BITS",
	}
	DlPdcpsnlengthPdcpsnlength_value = map[string]int32{
		"DL_PDCPSNLENGTH_PDCPSNLENGTH_V12BITS": 0,
		"DL_PDCPSNLENGTH_PDCPSNLENGTH_V18BITS": 1,
	}
)

func (x DlPdcpsnlengthPdcpsnlength) Enum() *DlPdcpsnlengthPdcpsnlength {
	p := new(DlPdcpsnlengthPdcpsnlength)
	*p = x
	return p
}

func (x DlPdcpsnlengthPdcpsnlength) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DlPdcpsnlengthPdcpsnlength) Descriptor() protoreflect.EnumDescriptor {
	return file_api_xnap_v1_xnap_ies_proto_enumTypes[76].Descriptor()
}

func (DlPdcpsnlengthPdcpsnlength) Type() protoreflect.EnumType {
	return &file_api_xnap_v1_xnap_ies_proto_enumTypes[76]
}

func (x DlPdcpsnlengthPdcpsnlength) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DlPdcpsnlengthPdcpsnlength.Descriptor instead.
func (DlPdcpsnlengthPdcpsnlength) EnumDescriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{76}
}

// enumerated from xnap_v1.asn1:6072
type DlngutnlinformationUnchangedPdusessionResourceAdmittedInfo int32

const (
	DlngutnlinformationUnchangedPdusessionResourceAdmittedInfo_D_LNGUTNLINFORMATION_UNCHANGED_PDUSESSION_RESOURCE_ADMITTED_INFO_TRUE DlngutnlinformationUnchangedPdusessionResourceAdmittedInfo = 0
)

// Enum value maps for DlngutnlinformationUnchangedPdusessionResourceAdmittedInfo.
var (
	DlngutnlinformationUnchangedPdusessionResourceAdmittedInfo_name = map[int32]string{
		0: "D_LNGUTNLINFORMATION_UNCHANGED_PDUSESSION_RESOURCE_ADMITTED_INFO_TRUE",
	}
	DlngutnlinformationUnchangedPdusessionResourceAdmittedInfo_value = map[string]int32{
		"D_LNGUTNLINFORMATION_UNCHANGED_PDUSESSION_RESOURCE_ADMITTED_INFO_TRUE": 0,
	}
)

func (x DlngutnlinformationUnchangedPdusessionResourceAdmittedInfo) Enum() *DlngutnlinformationUnchangedPdusessionResourceAdmittedInfo {
	p := new(DlngutnlinformationUnchangedPdusessionResourceAdmittedInfo)
	*p = x
	return p
}

func (x DlngutnlinformationUnchangedPdusessionResourceAdmittedInfo) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DlngutnlinformationUnchangedPdusessionResourceAdmittedInfo) Descriptor() protoreflect.EnumDescriptor {
	return file_api_xnap_v1_xnap_ies_proto_enumTypes[77].Descriptor()
}

func (DlngutnlinformationUnchangedPdusessionResourceAdmittedInfo) Type() protoreflect.EnumType {
	return &file_api_xnap_v1_xnap_ies_proto_enumTypes[77]
}

func (x DlngutnlinformationUnchangedPdusessionResourceAdmittedInfo) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DlngutnlinformationUnchangedPdusessionResourceAdmittedInfo.Descriptor instead.
func (DlngutnlinformationUnchangedPdusessionResourceAdmittedInfo) EnumDescriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{77}
}

// enumerated from xnap_v1.asn1:6856
type RattypePdusessionUsageReport int32

const (
	RattypePdusessionUsageReport_R_ATTYPE_PDUSESSION_USAGE_REPORT_NR                RattypePdusessionUsageReport = 0
	RattypePdusessionUsageReport_R_ATTYPE_PDUSESSION_USAGE_REPORT_EUTRA             RattypePdusessionUsageReport = 1
	RattypePdusessionUsageReport_R_ATTYPE_PDUSESSION_USAGE_REPORT_NR_UNLICENSED     RattypePdusessionUsageReport = 2
	RattypePdusessionUsageReport_R_ATTYPE_PDUSESSION_USAGE_REPORT_E_UTRA_UNLICENSED RattypePdusessionUsageReport = 3
)

// Enum value maps for RattypePdusessionUsageReport.
var (
	RattypePdusessionUsageReport_name = map[int32]string{
		0: "R_ATTYPE_PDUSESSION_USAGE_REPORT_NR",
		1: "R_ATTYPE_PDUSESSION_USAGE_REPORT_EUTRA",
		2: "R_ATTYPE_PDUSESSION_USAGE_REPORT_NR_UNLICENSED",
		3: "R_ATTYPE_PDUSESSION_USAGE_REPORT_E_UTRA_UNLICENSED",
	}
	RattypePdusessionUsageReport_value = map[string]int32{
		"R_ATTYPE_PDUSESSION_USAGE_REPORT_NR":                0,
		"R_ATTYPE_PDUSESSION_USAGE_REPORT_EUTRA":             1,
		"R_ATTYPE_PDUSESSION_USAGE_REPORT_NR_UNLICENSED":     2,
		"R_ATTYPE_PDUSESSION_USAGE_REPORT_E_UTRA_UNLICENSED": 3,
	}
)

func (x RattypePdusessionUsageReport) Enum() *RattypePdusessionUsageReport {
	p := new(RattypePdusessionUsageReport)
	*p = x
	return p
}

func (x RattypePdusessionUsageReport) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RattypePdusessionUsageReport) Descriptor() protoreflect.EnumDescriptor {
	return file_api_xnap_v1_xnap_ies_proto_enumTypes[78].Descriptor()
}

func (RattypePdusessionUsageReport) Type() protoreflect.EnumType {
	return &file_api_xnap_v1_xnap_ies_proto_enumTypes[78]
}

func (x RattypePdusessionUsageReport) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RattypePdusessionUsageReport.Descriptor instead.
func (RattypePdusessionUsageReport) EnumDescriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{78}
}

// enumerated from xnap_v1.asn1:6866
type PdusessionType int32

const (
	PdusessionType_PDUSESSION_TYPE_IPV4         PdusessionType = 0
	PdusessionType_PDUSESSION_TYPE_IPV6         PdusessionType = 1
	PdusessionType_PDUSESSION_TYPE_IPV4V6       PdusessionType = 2
	PdusessionType_PDUSESSION_TYPE_ETHERNET     PdusessionType = 3
	PdusessionType_PDUSESSION_TYPE_UNSTRUCTURED PdusessionType = 4
)

// Enum value maps for PdusessionType.
var (
	PdusessionType_name = map[int32]string{
		0: "PDUSESSION_TYPE_IPV4",
		1: "PDUSESSION_TYPE_IPV6",
		2: "PDUSESSION_TYPE_IPV4V6",
		3: "PDUSESSION_TYPE_ETHERNET",
		4: "PDUSESSION_TYPE_UNSTRUCTURED",
	}
	PdusessionType_value = map[string]int32{
		"PDUSESSION_TYPE_IPV4":         0,
		"PDUSESSION_TYPE_IPV6":         1,
		"PDUSESSION_TYPE_IPV4V6":       2,
		"PDUSESSION_TYPE_ETHERNET":     3,
		"PDUSESSION_TYPE_UNSTRUCTURED": 4,
	}
)

func (x PdusessionType) Enum() *PdusessionType {
	p := new(PdusessionType)
	*p = x
	return p
}

func (x PdusessionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PdusessionType) Descriptor() protoreflect.EnumDescriptor {
	return file_api_xnap_v1_xnap_ies_proto_enumTypes[79].Descriptor()
}

func (PdusessionType) Type() protoreflect.EnumType {
	return &file_api_xnap_v1_xnap_ies_proto_enumTypes[79]
}

func (x PdusessionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PdusessionType.Descriptor instead.
func (PdusessionType) EnumDescriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{79}
}

// enumerated from xnap_v1.asn1:6889
type PniNPnRestrictedInformation int32

const (
	PniNPnRestrictedInformation_PNI_NPN_RESTRICTED_INFORMATION_RESTRICED      PniNPnRestrictedInformation = 0
	PniNPnRestrictedInformation_PNI_NPN_RESTRICTED_INFORMATION_NOT_RESTRICTED PniNPnRestrictedInformation = 1
)

// Enum value maps for PniNPnRestrictedInformation.
var (
	PniNPnRestrictedInformation_name = map[int32]string{
		0: "PNI_NPN_RESTRICTED_INFORMATION_RESTRICED",
		1: "PNI_NPN_RESTRICTED_INFORMATION_NOT_RESTRICTED",
	}
	PniNPnRestrictedInformation_value = map[string]int32{
		"PNI_NPN_RESTRICTED_INFORMATION_RESTRICED":      0,
		"PNI_NPN_RESTRICTED_INFORMATION_NOT_RESTRICTED": 1,
	}
)

func (x PniNPnRestrictedInformation) Enum() *PniNPnRestrictedInformation {
	p := new(PniNPnRestrictedInformation)
	*p = x
	return p
}

func (x PniNPnRestrictedInformation) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PniNPnRestrictedInformation) Descriptor() protoreflect.EnumDescriptor {
	return file_api_xnap_v1_xnap_ies_proto_enumTypes[80].Descriptor()
}

func (PniNPnRestrictedInformation) Type() protoreflect.EnumType {
	return &file_api_xnap_v1_xnap_ies_proto_enumTypes[80]
}

func (x PniNPnRestrictedInformation) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PniNPnRestrictedInformation.Descriptor instead.
func (PniNPnRestrictedInformation) EnumDescriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{80}
}

// enumerated from xnap_v1.asn1:6912
type ResourceTypeProtectedEutraresourceItem int32

const (
	ResourceTypeProtectedEutraresourceItem_RESOURCE_TYPE_PROTECTED_EUTRARESOURCE_ITEM_DOWNLINKNON_CRS ResourceTypeProtectedEutraresourceItem = 0
	ResourceTypeProtectedEutraresourceItem_RESOURCE_TYPE_PROTECTED_EUTRARESOURCE_ITEM_C_RS            ResourceTypeProtectedEutraresourceItem = 1
	ResourceTypeProtectedEutraresourceItem_RESOURCE_TYPE_PROTECTED_EUTRARESOURCE_ITEM_UPLINK          ResourceTypeProtectedEutraresourceItem = 2
)

// Enum value maps for ResourceTypeProtectedEutraresourceItem.
var (
	ResourceTypeProtectedEutraresourceItem_name = map[int32]string{
		0: "RESOURCE_TYPE_PROTECTED_EUTRARESOURCE_ITEM_DOWNLINKNON_CRS",
		1: "RESOURCE_TYPE_PROTECTED_EUTRARESOURCE_ITEM_C_RS",
		2: "RESOURCE_TYPE_PROTECTED_EUTRARESOURCE_ITEM_UPLINK",
	}
	ResourceTypeProtectedEutraresourceItem_value = map[string]int32{
		"RESOURCE_TYPE_PROTECTED_EUTRARESOURCE_ITEM_DOWNLINKNON_CRS": 0,
		"RESOURCE_TYPE_PROTECTED_EUTRARESOURCE_ITEM_C_RS":            1,
		"RESOURCE_TYPE_PROTECTED_EUTRARESOURCE_ITEM_UPLINK":          2,
	}
)

func (x ResourceTypeProtectedEutraresourceItem) Enum() *ResourceTypeProtectedEutraresourceItem {
	p := new(ResourceTypeProtectedEutraresourceItem)
	*p = x
	return p
}

func (x ResourceTypeProtectedEutraresourceItem) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ResourceTypeProtectedEutraresourceItem) Descriptor() protoreflect.EnumDescriptor {
	return file_api_xnap_v1_xnap_ies_proto_enumTypes[81].Descriptor()
}

func (ResourceTypeProtectedEutraresourceItem) Type() protoreflect.EnumType {
	return &file_api_xnap_v1_xnap_ies_proto_enumTypes[81]
}

func (x ResourceTypeProtectedEutraresourceItem) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ResourceTypeProtectedEutraresourceItem.Descriptor instead.
func (ResourceTypeProtectedEutraresourceItem) EnumDescriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{81}
}

// enumerated from xnap_v1.asn1:6959
type AdditionalQoSflowInfoQoSflowLevelQoSparameters int32

const (
	AdditionalQoSflowInfoQoSflowLevelQoSparameters_ADDITIONAL_QO_SFLOW_INFO_QO_SFLOW_LEVEL_QO_SPARAMETERS_MORE_LIKELY AdditionalQoSflowInfoQoSflowLevelQoSparameters = 0
)

// Enum value maps for AdditionalQoSflowInfoQoSflowLevelQoSparameters.
var (
	AdditionalQoSflowInfoQoSflowLevelQoSparameters_name = map[int32]string{
		0: "ADDITIONAL_QO_SFLOW_INFO_QO_SFLOW_LEVEL_QO_SPARAMETERS_MORE_LIKELY",
	}
	AdditionalQoSflowInfoQoSflowLevelQoSparameters_value = map[string]int32{
		"ADDITIONAL_QO_SFLOW_INFO_QO_SFLOW_LEVEL_QO_SPARAMETERS_MORE_LIKELY": 0,
	}
)

func (x AdditionalQoSflowInfoQoSflowLevelQoSparameters) Enum() *AdditionalQoSflowInfoQoSflowLevelQoSparameters {
	p := new(AdditionalQoSflowInfoQoSflowLevelQoSparameters)
	*p = x
	return p
}

func (x AdditionalQoSflowInfoQoSflowLevelQoSparameters) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AdditionalQoSflowInfoQoSflowLevelQoSparameters) Descriptor() protoreflect.EnumDescriptor {
	return file_api_xnap_v1_xnap_ies_proto_enumTypes[82].Descriptor()
}

func (AdditionalQoSflowInfoQoSflowLevelQoSparameters) Type() protoreflect.EnumType {
	return &file_api_xnap_v1_xnap_ies_proto_enumTypes[82]
}

func (x AdditionalQoSflowInfoQoSflowLevelQoSparameters) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AdditionalQoSflowInfoQoSflowLevelQoSparameters.Descriptor instead.
func (AdditionalQoSflowInfoQoSflowLevelQoSparameters) EnumDescriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{82}
}

// enumerated from xnap_v1.asn1:6973
type QoSflowMappingIndication int32

const (
	QoSflowMappingIndication_QO_SFLOW_MAPPING_INDICATION_UL QoSflowMappingIndication = 0
	QoSflowMappingIndication_QO_SFLOW_MAPPING_INDICATION_DL QoSflowMappingIndication = 1
)

// Enum value maps for QoSflowMappingIndication.
var (
	QoSflowMappingIndication_name = map[int32]string{
		0: "QO_SFLOW_MAPPING_INDICATION_UL",
		1: "QO_SFLOW_MAPPING_INDICATION_DL",
	}
	QoSflowMappingIndication_value = map[string]int32{
		"QO_SFLOW_MAPPING_INDICATION_UL": 0,
		"QO_SFLOW_MAPPING_INDICATION_DL": 1,
	}
)

func (x QoSflowMappingIndication) Enum() *QoSflowMappingIndication {
	p := new(QoSflowMappingIndication)
	*p = x
	return p
}

func (x QoSflowMappingIndication) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (QoSflowMappingIndication) Descriptor() protoreflect.EnumDescriptor {
	return file_api_xnap_v1_xnap_ies_proto_enumTypes[83].Descriptor()
}

func (QoSflowMappingIndication) Type() protoreflect.EnumType {
	return &file_api_xnap_v1_xnap_ies_proto_enumTypes[83]
}

func (x QoSflowMappingIndication) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use QoSflowMappingIndication.Descriptor instead.
func (QoSflowMappingIndication) EnumDescriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{83}
}

// enumerated from xnap_v1.asn1:6983
type NotificationInformationQoSflowNotifyItem int32

const (
	NotificationInformationQoSflowNotifyItem_NOTIFICATION_INFORMATION_QO_SFLOW_NOTIFY_ITEM_FULFILLED     NotificationInformationQoSflowNotifyItem = 0
	NotificationInformationQoSflowNotifyItem_NOTIFICATION_INFORMATION_QO_SFLOW_NOTIFY_ITEM_NOT_FULFILLED NotificationInformationQoSflowNotifyItem = 1
)

// Enum value maps for NotificationInformationQoSflowNotifyItem.
var (
	NotificationInformationQoSflowNotifyItem_name = map[int32]string{
		0: "NOTIFICATION_INFORMATION_QO_SFLOW_NOTIFY_ITEM_FULFILLED",
		1: "NOTIFICATION_INFORMATION_QO_SFLOW_NOTIFY_ITEM_NOT_FULFILLED",
	}
	NotificationInformationQoSflowNotifyItem_value = map[string]int32{
		"NOTIFICATION_INFORMATION_QO_SFLOW_NOTIFY_ITEM_FULFILLED":     0,
		"NOTIFICATION_INFORMATION_QO_SFLOW_NOTIFY_ITEM_NOT_FULFILLED": 1,
	}
)

func (x NotificationInformationQoSflowNotifyItem) Enum() *NotificationInformationQoSflowNotifyItem {
	p := new(NotificationInformationQoSflowNotifyItem)
	*p = x
	return p
}

func (x NotificationInformationQoSflowNotifyItem) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NotificationInformationQoSflowNotifyItem) Descriptor() protoreflect.EnumDescriptor {
	return file_api_xnap_v1_xnap_ies_proto_enumTypes[84].Descriptor()
}

func (NotificationInformationQoSflowNotifyItem) Type() protoreflect.EnumType {
	return &file_api_xnap_v1_xnap_ies_proto_enumTypes[84]
}

func (x NotificationInformationQoSflowNotifyItem) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NotificationInformationQoSflowNotifyItem.Descriptor instead.
func (NotificationInformationQoSflowNotifyItem) EnumDescriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{84}
}

// enumerated from xnap_v1.asn1:7070
type RattypeQoSflowsUsageReportItem int32

const (
	RattypeQoSflowsUsageReportItem_R_ATTYPE_QO_SFLOWS_USAGE_REPORT_ITEM_NR                RattypeQoSflowsUsageReportItem = 0
	RattypeQoSflowsUsageReportItem_R_ATTYPE_QO_SFLOWS_USAGE_REPORT_ITEM_EUTRA             RattypeQoSflowsUsageReportItem = 1
	RattypeQoSflowsUsageReportItem_R_ATTYPE_QO_SFLOWS_USAGE_REPORT_ITEM_NR_UNLICENSED     RattypeQoSflowsUsageReportItem = 2
	RattypeQoSflowsUsageReportItem_R_ATTYPE_QO_SFLOWS_USAGE_REPORT_ITEM_E_UTRA_UNLICENSED RattypeQoSflowsUsageReportItem = 3
)

// Enum value maps for RattypeQoSflowsUsageReportItem.
var (
	RattypeQoSflowsUsageReportItem_name = map[int32]string{
		0: "R_ATTYPE_QO_SFLOWS_USAGE_REPORT_ITEM_NR",
		1: "R_ATTYPE_QO_SFLOWS_USAGE_REPORT_ITEM_EUTRA",
		2: "R_ATTYPE_QO_SFLOWS_USAGE_REPORT_ITEM_NR_UNLICENSED",
		3: "R_ATTYPE_QO_SFLOWS_USAGE_REPORT_ITEM_E_UTRA_UNLICENSED",
	}
	RattypeQoSflowsUsageReportItem_value = map[string]int32{
		"R_ATTYPE_QO_SFLOWS_USAGE_REPORT_ITEM_NR":                0,
		"R_ATTYPE_QO_SFLOWS_USAGE_REPORT_ITEM_EUTRA":             1,
		"R_ATTYPE_QO_SFLOWS_USAGE_REPORT_ITEM_NR_UNLICENSED":     2,
		"R_ATTYPE_QO_SFLOWS_USAGE_REPORT_ITEM_E_UTRA_UNLICENSED": 3,
	}
)

func (x RattypeQoSflowsUsageReportItem) Enum() *RattypeQoSflowsUsageReportItem {
	p := new(RattypeQoSflowsUsageReportItem)
	*p = x
	return p
}

func (x RattypeQoSflowsUsageReportItem) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RattypeQoSflowsUsageReportItem) Descriptor() protoreflect.EnumDescriptor {
	return file_api_xnap_v1_xnap_ies_proto_enumTypes[85].Descriptor()
}

func (RattypeQoSflowsUsageReportItem) Type() protoreflect.EnumType {
	return &file_api_xnap_v1_xnap_ies_proto_enumTypes[85]
}

func (x RattypeQoSflowsUsageReportItem) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RattypeQoSflowsUsageReportItem.Descriptor instead.
func (RattypeQoSflowsUsageReportItem) EnumDescriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{85}
}

// enumerated from xnap_v1.asn1:7080
type QosMonitoringRequest int32

const (
	QosMonitoringRequest_QOS_MONITORING_REQUEST_UL   QosMonitoringRequest = 0
	QosMonitoringRequest_QOS_MONITORING_REQUEST_DL   QosMonitoringRequest = 1
	QosMonitoringRequest_QOS_MONITORING_REQUEST_BOTH QosMonitoringRequest = 2
)

// Enum value maps for QosMonitoringRequest.
var (
	QosMonitoringRequest_name = map[int32]string{
		0: "QOS_MONITORING_REQUEST_UL",
		1: "QOS_MONITORING_REQUEST_DL",
		2: "QOS_MONITORING_REQUEST_BOTH",
	}
	QosMonitoringRequest_value = map[string]int32{
		"QOS_MONITORING_REQUEST_UL":   0,
		"QOS_MONITORING_REQUEST_DL":   1,
		"QOS_MONITORING_REQUEST_BOTH": 2,
	}
)

func (x QosMonitoringRequest) Enum() *QosMonitoringRequest {
	p := new(QosMonitoringRequest)
	*p = x
	return p
}

func (x QosMonitoringRequest) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (QosMonitoringRequest) Descriptor() protoreflect.EnumDescriptor {
	return file_api_xnap_v1_xnap_ies_proto_enumTypes[86].Descriptor()
}

func (QosMonitoringRequest) Type() protoreflect.EnumType {
	return &file_api_xnap_v1_xnap_ies_proto_enumTypes[86]
}

func (x QosMonitoringRequest) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use QosMonitoringRequest.Descriptor instead.
func (QosMonitoringRequest) EnumDescriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{86}
}

// enumerated from xnap_v1.asn1:7081
type QoSmonitoringDisabled int32

const (
	QoSmonitoringDisabled_QO_SMONITORING_DISABLED_TRUE QoSmonitoringDisabled = 0
)

// Enum value maps for QoSmonitoringDisabled.
var (
	QoSmonitoringDisabled_name = map[int32]string{
		0: "QO_SMONITORING_DISABLED_TRUE",
	}
	QoSmonitoringDisabled_value = map[string]int32{
		"QO_SMONITORING_DISABLED_TRUE": 0,
	}
)

func (x QoSmonitoringDisabled) Enum() *QoSmonitoringDisabled {
	p := new(QoSmonitoringDisabled)
	*p = x
	return p
}

func (x QoSmonitoringDisabled) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (QoSmonitoringDisabled) Descriptor() protoreflect.EnumDescriptor {
	return file_api_xnap_v1_xnap_ies_proto_enumTypes[87].Descriptor()
}

func (QoSmonitoringDisabled) Type() protoreflect.EnumType {
	return &file_api_xnap_v1_xnap_ies_proto_enumTypes[87]
}

func (x QoSmonitoringDisabled) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use QoSmonitoringDisabled.Descriptor instead.
func (QoSmonitoringDisabled) EnumDescriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{87}
}

// enumerated from xnap_v1.asn1:7129
type Range int32

const (
	Range_RANGE_M50   Range = 0
	Range_RANGE_M80   Range = 1
	Range_RANGE_M180  Range = 2
	Range_RANGE_M200  Range = 3
	Range_RANGE_M350  Range = 4
	Range_RANGE_M400  Range = 5
	Range_RANGE_M500  Range = 6
	Range_RANGE_M700  Range = 7
	Range_RANGE_M1000 Range = 8
)

// Enum value maps for Range.
var (
	Range_name = map[int32]string{
		0: "RANGE_M50",
		1: "RANGE_M80",
		2: "RANGE_M180",
		3: "RANGE_M200",
		4: "RANGE_M350",
		5: "RANGE_M400",
		6: "RANGE_M500",
		7: "RANGE_M700",
		8: "RANGE_M1000",
	}
	Range_value = map[string]int32{
		"RANGE_M50":   0,
		"RANGE_M80":   1,
		"RANGE_M180":  2,
		"RANGE_M200":  3,
		"RANGE_M350":  4,
		"RANGE_M400":  5,
		"RANGE_M500":  6,
		"RANGE_M700":  7,
		"RANGE_M1000": 8,
	}
)

func (x Range) Enum() *Range {
	p := new(Range)
	*p = x
	return p
}

func (x Range) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Range) Descriptor() protoreflect.EnumDescriptor {
	return file_api_xnap_v1_xnap_ies_proto_enumTypes[88].Descriptor()
}

func (Range) Type() protoreflect.EnumType {
	return &file_api_xnap_v1_xnap_ies_proto_enumTypes[88]
}

func (x Range) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Range.Descriptor instead.
func (Range) EnumDescriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{88}
}

// enumerated from xnap_v1.asn1:7156
type NextPagingAreaScopeRanpagingAttemptInfo int32

const (
	NextPagingAreaScopeRanpagingAttemptInfo_NEXT_PAGING_AREA_SCOPE_RANPAGING_ATTEMPT_INFO_SAME    NextPagingAreaScopeRanpagingAttemptInfo = 0
	NextPagingAreaScopeRanpagingAttemptInfo_NEXT_PAGING_AREA_SCOPE_RANPAGING_ATTEMPT_INFO_CHANGED NextPagingAreaScopeRanpagingAttemptInfo = 1
)

// Enum value maps for NextPagingAreaScopeRanpagingAttemptInfo.
var (
	NextPagingAreaScopeRanpagingAttemptInfo_name = map[int32]string{
		0: "NEXT_PAGING_AREA_SCOPE_RANPAGING_ATTEMPT_INFO_SAME",
		1: "NEXT_PAGING_AREA_SCOPE_RANPAGING_ATTEMPT_INFO_CHANGED",
	}
	NextPagingAreaScopeRanpagingAttemptInfo_value = map[string]int32{
		"NEXT_PAGING_AREA_SCOPE_RANPAGING_ATTEMPT_INFO_SAME":    0,
		"NEXT_PAGING_AREA_SCOPE_RANPAGING_ATTEMPT_INFO_CHANGED": 1,
	}
)

func (x NextPagingAreaScopeRanpagingAttemptInfo) Enum() *NextPagingAreaScopeRanpagingAttemptInfo {
	p := new(NextPagingAreaScopeRanpagingAttemptInfo)
	*p = x
	return p
}

func (x NextPagingAreaScopeRanpagingAttemptInfo) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NextPagingAreaScopeRanpagingAttemptInfo) Descriptor() protoreflect.EnumDescriptor {
	return file_api_xnap_v1_xnap_ies_proto_enumTypes[89].Descriptor()
}

func (NextPagingAreaScopeRanpagingAttemptInfo) Type() protoreflect.EnumType {
	return &file_api_xnap_v1_xnap_ies_proto_enumTypes[89]
}

func (x NextPagingAreaScopeRanpagingAttemptInfo) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NextPagingAreaScopeRanpagingAttemptInfo.Descriptor instead.
func (NextPagingAreaScopeRanpagingAttemptInfo) EnumDescriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{89}
}

// enumerated from xnap_v1.asn1:7166
type RanpagingFailure int32

const (
	RanpagingFailure_RANPAGING_FAILURE_TRUE RanpagingFailure = 0
)

// Enum value maps for RanpagingFailure.
var (
	RanpagingFailure_name = map[int32]string{
		0: "RANPAGING_FAILURE_TRUE",
	}
	RanpagingFailure_value = map[string]int32{
		"RANPAGING_FAILURE_TRUE": 0,
	}
)

func (x RanpagingFailure) Enum() *RanpagingFailure {
	p := new(RanpagingFailure)
	*p = x
	return p
}

func (x RanpagingFailure) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RanpagingFailure) Descriptor() protoreflect.EnumDescriptor {
	return file_api_xnap_v1_xnap_ies_proto_enumTypes[90].Descriptor()
}

func (RanpagingFailure) Type() protoreflect.EnumType {
	return &file_api_xnap_v1_xnap_ies_proto_enumTypes[90]
}

func (x RanpagingFailure) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RanpagingFailure.Descriptor instead.
func (RanpagingFailure) EnumDescriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{90}
}

// enumerated from xnap_v1.asn1:7170
type RedundantQoSflowIndicator int32

const (
	RedundantQoSflowIndicator_REDUNDANT_QO_SFLOW_INDICATOR_TRUE  RedundantQoSflowIndicator = 0
	RedundantQoSflowIndicator_REDUNDANT_QO_SFLOW_INDICATOR_FALSE RedundantQoSflowIndicator = 1
)

// Enum value maps for RedundantQoSflowIndicator.
var (
	RedundantQoSflowIndicator_name = map[int32]string{
		0: "REDUNDANT_QO_SFLOW_INDICATOR_TRUE",
		1: "REDUNDANT_QO_SFLOW_INDICATOR_FALSE",
	}
	RedundantQoSflowIndicator_value = map[string]int32{
		"REDUNDANT_QO_SFLOW_INDICATOR_TRUE":  0,
		"REDUNDANT_QO_SFLOW_INDICATOR_FALSE": 1,
	}
)

func (x RedundantQoSflowIndicator) Enum() *RedundantQoSflowIndicator {
	p := new(RedundantQoSflowIndicator)
	*p = x
	return p
}

func (x RedundantQoSflowIndicator) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RedundantQoSflowIndicator) Descriptor() protoreflect.EnumDescriptor {
	return file_api_xnap_v1_xnap_ies_proto_enumTypes[91].Descriptor()
}

func (RedundantQoSflowIndicator) Type() protoreflect.EnumType {
	return &file_api_xnap_v1_xnap_ies_proto_enumTypes[91]
}

func (x RedundantQoSflowIndicator) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RedundantQoSflowIndicator.Descriptor instead.
func (RedundantQoSflowIndicator) EnumDescriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{91}
}

// enumerated from xnap_v1.asn1:7182
type Rsn int32

const (
	Rsn_RSN_V1 Rsn = 0
	Rsn_RSN_V2 Rsn = 1
)

// Enum value maps for Rsn.
var (
	Rsn_name = map[int32]string{
		0: "RSN_V1",
		1: "RSN_V2",
	}
	Rsn_value = map[string]int32{
		"RSN_V1": 0,
		"RSN_V2": 1,
	}
)

func (x Rsn) Enum() *Rsn {
	p := new(Rsn)
	*p = x
	return p
}

func (x Rsn) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Rsn) Descriptor() protoreflect.EnumDescriptor {
	return file_api_xnap_v1_xnap_ies_proto_enumTypes[92].Descriptor()
}

func (Rsn) Type() protoreflect.EnumType {
	return &file_api_xnap_v1_xnap_ies_proto_enumTypes[92]
}

func (x Rsn) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Rsn.Descriptor instead.
func (Rsn) EnumDescriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{92}
}

// enumerated from xnap_v1.asn1:7187
type ReflectiveQoSattribute int32

const (
	ReflectiveQoSattribute_REFLECTIVE_QO_SATTRIBUTE_SUBJECT_TO_REFLECTIVE_QO_S ReflectiveQoSattribute = 0
)

// Enum value maps for ReflectiveQoSattribute.
var (
	ReflectiveQoSattribute_name = map[int32]string{
		0: "REFLECTIVE_QO_SATTRIBUTE_SUBJECT_TO_REFLECTIVE_QO_S",
	}
	ReflectiveQoSattribute_value = map[string]int32{
		"REFLECTIVE_QO_SATTRIBUTE_SUBJECT_TO_REFLECTIVE_QO_S": 0,
	}
)

func (x ReflectiveQoSattribute) Enum() *ReflectiveQoSattribute {
	p := new(ReflectiveQoSattribute)
	*p = x
	return p
}

func (x ReflectiveQoSattribute) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ReflectiveQoSattribute) Descriptor() protoreflect.EnumDescriptor {
	return file_api_xnap_v1_xnap_ies_proto_enumTypes[93].Descriptor()
}

func (ReflectiveQoSattribute) Type() protoreflect.EnumType {
	return &file_api_xnap_v1_xnap_ies_proto_enumTypes[93]
}

func (x ReflectiveQoSattribute) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ReflectiveQoSattribute.Descriptor instead.
func (ReflectiveQoSattribute) EnumDescriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{93}
}

// enumerated from xnap_v1.asn1:7189
type ReportAmountMdt int32

const (
	ReportAmountMdt_REPORT_AMOUNT_MDT_R1       ReportAmountMdt = 0
	ReportAmountMdt_REPORT_AMOUNT_MDT_R2       ReportAmountMdt = 1
	ReportAmountMdt_REPORT_AMOUNT_MDT_R4       ReportAmountMdt = 2
	ReportAmountMdt_REPORT_AMOUNT_MDT_R8       ReportAmountMdt = 3
	ReportAmountMdt_REPORT_AMOUNT_MDT_R16      ReportAmountMdt = 4
	ReportAmountMdt_REPORT_AMOUNT_MDT_R32      ReportAmountMdt = 5
	ReportAmountMdt_REPORT_AMOUNT_MDT_R64      ReportAmountMdt = 6
	ReportAmountMdt_REPORT_AMOUNT_MDT_INFINITY ReportAmountMdt = 7
)

// Enum value maps for ReportAmountMdt.
var (
	ReportAmountMdt_name = map[int32]string{
		0: "REPORT_AMOUNT_MDT_R1",
		1: "REPORT_AMOUNT_MDT_R2",
		2: "REPORT_AMOUNT_MDT_R4",
		3: "REPORT_AMOUNT_MDT_R8",
		4: "REPORT_AMOUNT_MDT_R16",
		5: "REPORT_AMOUNT_MDT_R32",
		6: "REPORT_AMOUNT_MDT_R64",
		7: "REPORT_AMOUNT_MDT_INFINITY",
	}
	ReportAmountMdt_value = map[string]int32{
		"REPORT_AMOUNT_MDT_R1":       0,
		"REPORT_AMOUNT_MDT_R2":       1,
		"REPORT_AMOUNT_MDT_R4":       2,
		"REPORT_AMOUNT_MDT_R8":       3,
		"REPORT_AMOUNT_MDT_R16":      4,
		"REPORT_AMOUNT_MDT_R32":      5,
		"REPORT_AMOUNT_MDT_R64":      6,
		"REPORT_AMOUNT_MDT_INFINITY": 7,
	}
)

func (x ReportAmountMdt) Enum() *ReportAmountMdt {
	p := new(ReportAmountMdt)
	*p = x
	return p
}

func (x ReportAmountMdt) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ReportAmountMdt) Descriptor() protoreflect.EnumDescriptor {
	return file_api_xnap_v1_xnap_ies_proto_enumTypes[94].Descriptor()
}

func (ReportAmountMdt) Type() protoreflect.EnumType {
	return &file_api_xnap_v1_xnap_ies_proto_enumTypes[94]
}

func (x ReportAmountMdt) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ReportAmountMdt.Descriptor instead.
func (ReportAmountMdt) EnumDescriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{94}
}

// enumerated from xnap_v1.asn1:7193
type ReportArea int32

const (
	ReportArea_REPORT_AREA_CELL ReportArea = 0
)

// Enum value maps for ReportArea.
var (
	ReportArea_name = map[int32]string{
		0: "REPORT_AREA_CELL",
	}
	ReportArea_value = map[string]int32{
		"REPORT_AREA_CELL": 0,
	}
)

func (x ReportArea) Enum() *ReportArea {
	p := new(ReportArea)
	*p = x
	return p
}

func (x ReportArea) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ReportArea) Descriptor() protoreflect.EnumDescriptor {
	return file_api_xnap_v1_xnap_ies_proto_enumTypes[95].Descriptor()
}

func (ReportArea) Type() protoreflect.EnumType {
	return &file_api_xnap_v1_xnap_ies_proto_enumTypes[95]
}

func (x ReportArea) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ReportArea.Descriptor instead.
func (ReportArea) EnumDescriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{95}
}

// enumerated from xnap_v1.asn1:7197
type ReportIntervalMdt int32

const (
	ReportIntervalMdt_REPORT_INTERVAL_MDT_MS120   ReportIntervalMdt = 0
	ReportIntervalMdt_REPORT_INTERVAL_MDT_MS240   ReportIntervalMdt = 1
	ReportIntervalMdt_REPORT_INTERVAL_MDT_MS480   ReportIntervalMdt = 2
	ReportIntervalMdt_REPORT_INTERVAL_MDT_MS640   ReportIntervalMdt = 3
	ReportIntervalMdt_REPORT_INTERVAL_MDT_MS1024  ReportIntervalMdt = 4
	ReportIntervalMdt_REPORT_INTERVAL_MDT_MS2048  ReportIntervalMdt = 5
	ReportIntervalMdt_REPORT_INTERVAL_MDT_MS5120  ReportIntervalMdt = 6
	ReportIntervalMdt_REPORT_INTERVAL_MDT_MS10240 ReportIntervalMdt = 7
	ReportIntervalMdt_REPORT_INTERVAL_MDT_MIN1    ReportIntervalMdt = 8
	ReportIntervalMdt_REPORT_INTERVAL_MDT_MIN6    ReportIntervalMdt = 9
	ReportIntervalMdt_REPORT_INTERVAL_MDT_MIN12   ReportIntervalMdt = 10
	ReportIntervalMdt_REPORT_INTERVAL_MDT_MIN30   ReportIntervalMdt = 11
	ReportIntervalMdt_REPORT_INTERVAL_MDT_MIN60   ReportIntervalMdt = 12
)

// Enum value maps for ReportIntervalMdt.
var (
	ReportIntervalMdt_name = map[int32]string{
		0:  "REPORT_INTERVAL_MDT_MS120",
		1:  "REPORT_INTERVAL_MDT_MS240",
		2:  "REPORT_INTERVAL_MDT_MS480",
		3:  "REPORT_INTERVAL_MDT_MS640",
		4:  "REPORT_INTERVAL_MDT_MS1024",
		5:  "REPORT_INTERVAL_MDT_MS2048",
		6:  "REPORT_INTERVAL_MDT_MS5120",
		7:  "REPORT_INTERVAL_MDT_MS10240",
		8:  "REPORT_INTERVAL_MDT_MIN1",
		9:  "REPORT_INTERVAL_MDT_MIN6",
		10: "REPORT_INTERVAL_MDT_MIN12",
		11: "REPORT_INTERVAL_MDT_MIN30",
		12: "REPORT_INTERVAL_MDT_MIN60",
	}
	ReportIntervalMdt_value = map[string]int32{
		"REPORT_INTERVAL_MDT_MS120":   0,
		"REPORT_INTERVAL_MDT_MS240":   1,
		"REPORT_INTERVAL_MDT_MS480":   2,
		"REPORT_INTERVAL_MDT_MS640":   3,
		"REPORT_INTERVAL_MDT_MS1024":  4,
		"REPORT_INTERVAL_MDT_MS2048":  5,
		"REPORT_INTERVAL_MDT_MS5120":  6,
		"REPORT_INTERVAL_MDT_MS10240": 7,
		"REPORT_INTERVAL_MDT_MIN1":    8,
		"REPORT_INTERVAL_MDT_MIN6":    9,
		"REPORT_INTERVAL_MDT_MIN12":   10,
		"REPORT_INTERVAL_MDT_MIN30":   11,
		"REPORT_INTERVAL_MDT_MIN60":   12,
	}
)

func (x ReportIntervalMdt) Enum() *ReportIntervalMdt {
	p := new(ReportIntervalMdt)
	*p = x
	return p
}

func (x ReportIntervalMdt) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ReportIntervalMdt) Descriptor() protoreflect.EnumDescriptor {
	return file_api_xnap_v1_xnap_ies_proto_enumTypes[96].Descriptor()
}

func (ReportIntervalMdt) Type() protoreflect.EnumType {
	return &file_api_xnap_v1_xnap_ies_proto_enumTypes[96]
}

func (x ReportIntervalMdt) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ReportIntervalMdt.Descriptor instead.
func (ReportIntervalMdt) EnumDescriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{96}
}

// enumerated from xnap_v1.asn1:7207
type ExtendedReportIntervalMdt int32

const (
	ExtendedReportIntervalMdt_EXTENDED_REPORT_INTERVAL_MDT_MS20480 ExtendedReportIntervalMdt = 0
	ExtendedReportIntervalMdt_EXTENDED_REPORT_INTERVAL_MDT_MS40960 ExtendedReportIntervalMdt = 1
)

// Enum value maps for ExtendedReportIntervalMdt.
var (
	ExtendedReportIntervalMdt_name = map[int32]string{
		0: "EXTENDED_REPORT_INTERVAL_MDT_MS20480",
		1: "EXTENDED_REPORT_INTERVAL_MDT_MS40960",
	}
	ExtendedReportIntervalMdt_value = map[string]int32{
		"EXTENDED_REPORT_INTERVAL_MDT_MS20480": 0,
		"EXTENDED_REPORT_INTERVAL_MDT_MS40960": 1,
	}
)

func (x ExtendedReportIntervalMdt) Enum() *ExtendedReportIntervalMdt {
	p := new(ExtendedReportIntervalMdt)
	*p = x
	return p
}

func (x ExtendedReportIntervalMdt) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ExtendedReportIntervalMdt) Descriptor() protoreflect.EnumDescriptor {
	return file_api_xnap_v1_xnap_ies_proto_enumTypes[97].Descriptor()
}

func (ExtendedReportIntervalMdt) Type() protoreflect.EnumType {
	return &file_api_xnap_v1_xnap_ies_proto_enumTypes[97]
}

func (x ExtendedReportIntervalMdt) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ExtendedReportIntervalMdt.Descriptor instead.
func (ExtendedReportIntervalMdt) EnumDescriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{97}
}

// enumerated from xnap_v1.asn1:7217
type ReportingPeriodicity int32

const (
	ReportingPeriodicity_REPORTING_PERIODICITY_HALF_THOUSAND_MS ReportingPeriodicity = 0
	ReportingPeriodicity_REPORTING_PERIODICITY_ONE_THOUSAND_MS  ReportingPeriodicity = 1
	ReportingPeriodicity_REPORTING_PERIODICITY_TWO_THOUSAND_MS  ReportingPeriodicity = 2
	ReportingPeriodicity_REPORTING_PERIODICITY_FIVE_THOUSAND_MS ReportingPeriodicity = 3
	ReportingPeriodicity_REPORTING_PERIODICITY_TEN_THOUSAND_MS  ReportingPeriodicity = 4
)

// Enum value maps for ReportingPeriodicity.
var (
	ReportingPeriodicity_name = map[int32]string{
		0: "REPORTING_PERIODICITY_HALF_THOUSAND_MS",
		1: "REPORTING_PERIODICITY_ONE_THOUSAND_MS",
		2: "REPORTING_PERIODICITY_TWO_THOUSAND_MS",
		3: "REPORTING_PERIODICITY_FIVE_THOUSAND_MS",
		4: "REPORTING_PERIODICITY_TEN_THOUSAND_MS",
	}
	ReportingPeriodicity_value = map[string]int32{
		"REPORTING_PERIODICITY_HALF_THOUSAND_MS": 0,
		"REPORTING_PERIODICITY_ONE_THOUSAND_MS":  1,
		"REPORTING_PERIODICITY_TWO_THOUSAND_MS":  2,
		"REPORTING_PERIODICITY_FIVE_THOUSAND_MS": 3,
		"REPORTING_PERIODICITY_TEN_THOUSAND_MS":  4,
	}
)

func (x ReportingPeriodicity) Enum() *ReportingPeriodicity {
	p := new(ReportingPeriodicity)
	*p = x
	return p
}

func (x ReportingPeriodicity) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ReportingPeriodicity) Descriptor() protoreflect.EnumDescriptor {
	return file_api_xnap_v1_xnap_ies_proto_enumTypes[98].Descriptor()
}

func (ReportingPeriodicity) Type() protoreflect.EnumType {
	return &file_api_xnap_v1_xnap_ies_proto_enumTypes[98]
}

func (x ReportingPeriodicity) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ReportingPeriodicity.Descriptor instead.
func (ReportingPeriodicity) EnumDescriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{98}
}

// enumerated from xnap_v1.asn1:7226
type RegistrationRequest int32

const (
	RegistrationRequest_REGISTRATION_REQUEST_START RegistrationRequest = 0
	RegistrationRequest_REGISTRATION_REQUEST_STOP  RegistrationRequest = 1
	RegistrationRequest_REGISTRATION_REQUEST_ADD   RegistrationRequest = 2
)

// Enum value maps for RegistrationRequest.
var (
	RegistrationRequest_name = map[int32]string{
		0: "REGISTRATION_REQUEST_START",
		1: "REGISTRATION_REQUEST_STOP",
		2: "REGISTRATION_REQUEST_ADD",
	}
	RegistrationRequest_value = map[string]int32{
		"REGISTRATION_REQUEST_START": 0,
		"REGISTRATION_REQUEST_STOP":  1,
		"REGISTRATION_REQUEST_ADD":   2,
	}
)

func (x RegistrationRequest) Enum() *RegistrationRequest {
	p := new(RegistrationRequest)
	*p = x
	return p
}

func (x RegistrationRequest) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RegistrationRequest) Descriptor() protoreflect.EnumDescriptor {
	return file_api_xnap_v1_xnap_ies_proto_enumTypes[99].Descriptor()
}

func (RegistrationRequest) Type() protoreflect.EnumType {
	return &file_api_xnap_v1_xnap_ies_proto_enumTypes[99]
}

func (x RegistrationRequest) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RegistrationRequest.Descriptor instead.
func (RegistrationRequest) EnumDescriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{99}
}

// enumerated from xnap_v1.asn1:7232
type SubframeTypeReservedSubframePattern int32

const (
	SubframeTypeReservedSubframePattern_SUBFRAME_TYPE_RESERVED_SUBFRAME_PATTERN_MBSFN     SubframeTypeReservedSubframePattern = 0
	SubframeTypeReservedSubframePattern_SUBFRAME_TYPE_RESERVED_SUBFRAME_PATTERN_NON_MBSFN SubframeTypeReservedSubframePattern = 1
)

// Enum value maps for SubframeTypeReservedSubframePattern.
var (
	SubframeTypeReservedSubframePattern_name = map[int32]string{
		0: "SUBFRAME_TYPE_RESERVED_SUBFRAME_PATTERN_MBSFN",
		1: "SUBFRAME_TYPE_RESERVED_SUBFRAME_PATTERN_NON_MBSFN",
	}
	SubframeTypeReservedSubframePattern_value = map[string]int32{
		"SUBFRAME_TYPE_RESERVED_SUBFRAME_PATTERN_MBSFN":     0,
		"SUBFRAME_TYPE_RESERVED_SUBFRAME_PATTERN_NON_MBSFN": 1,
	}
)

func (x SubframeTypeReservedSubframePattern) Enum() *SubframeTypeReservedSubframePattern {
	p := new(SubframeTypeReservedSubframePattern)
	*p = x
	return p
}

func (x SubframeTypeReservedSubframePattern) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SubframeTypeReservedSubframePattern) Descriptor() protoreflect.EnumDescriptor {
	return file_api_xnap_v1_xnap_ies_proto_enumTypes[100].Descriptor()
}

func (SubframeTypeReservedSubframePattern) Type() protoreflect.EnumType {
	return &file_api_xnap_v1_xnap_ies_proto_enumTypes[100]
}

func (x SubframeTypeReservedSubframePattern) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SubframeTypeReservedSubframePattern.Descriptor instead.
func (SubframeTypeReservedSubframePattern) EnumDescriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{100}
}

// enumerated from xnap_v1.asn1:7332
type Rlcmode int32

const (
	Rlcmode_RLCMODE_RLC_AM                   Rlcmode = 0
	Rlcmode_RLCMODE_RLC_UM_BIDIRECTIONAL     Rlcmode = 1
	Rlcmode_RLCMODE_RLC_UM_UNIDIRECTIONAL_UL Rlcmode = 2
	Rlcmode_RLCMODE_RLC_UM_UNIDIRECTIONAL_DL Rlcmode = 3
)

// Enum value maps for Rlcmode.
var (
	Rlcmode_name = map[int32]string{
		0: "RLCMODE_RLC_AM",
		1: "RLCMODE_RLC_UM_BIDIRECTIONAL",
		2: "RLCMODE_RLC_UM_UNIDIRECTIONAL_UL",
		3: "RLCMODE_RLC_UM_UNIDIRECTIONAL_DL",
	}
	Rlcmode_value = map[string]int32{
		"RLCMODE_RLC_AM":                   0,
		"RLCMODE_RLC_UM_BIDIRECTIONAL":     1,
		"RLCMODE_RLC_UM_UNIDIRECTIONAL_UL": 2,
		"RLCMODE_RLC_UM_UNIDIRECTIONAL_DL": 3,
	}
)

func (x Rlcmode) Enum() *Rlcmode {
	p := new(Rlcmode)
	*p = x
	return p
}

func (x Rlcmode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Rlcmode) Descriptor() protoreflect.EnumDescriptor {
	return file_api_xnap_v1_xnap_ies_proto_enumTypes[101].Descriptor()
}

func (Rlcmode) Type() protoreflect.EnumType {
	return &file_api_xnap_v1_xnap_ies_proto_enumTypes[101]
}

func (x Rlcmode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Rlcmode.Descriptor instead.
func (Rlcmode) EnumDescriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{101}
}

// enumerated from xnap_v1.asn1:7352
type RlcprimaryIndicatorRlcduplicationInformation int32

const (
	RlcprimaryIndicatorRlcduplicationInformation_R_LCPRIMARY_INDICATOR_RLCDUPLICATION_INFORMATION_TRUE  RlcprimaryIndicatorRlcduplicationInformation = 0
	RlcprimaryIndicatorRlcduplicationInformation_R_LCPRIMARY_INDICATOR_RLCDUPLICATION_INFORMATION_FALSE RlcprimaryIndicatorRlcduplicationInformation = 1
)

// Enum value maps for RlcprimaryIndicatorRlcduplicationInformation.
var (
	RlcprimaryIndicatorRlcduplicationInformation_name = map[int32]string{
		0: "R_LCPRIMARY_INDICATOR_RLCDUPLICATION_INFORMATION_TRUE",
		1: "R_LCPRIMARY_INDICATOR_RLCDUPLICATION_INFORMATION_FALSE",
	}
	RlcprimaryIndicatorRlcduplicationInformation_value = map[string]int32{
		"R_LCPRIMARY_INDICATOR_RLCDUPLICATION_INFORMATION_TRUE":  0,
		"R_LCPRIMARY_INDICATOR_RLCDUPLICATION_INFORMATION_FALSE": 1,
	}
)

func (x RlcprimaryIndicatorRlcduplicationInformation) Enum() *RlcprimaryIndicatorRlcduplicationInformation {
	p := new(RlcprimaryIndicatorRlcduplicationInformation)
	*p = x
	return p
}

func (x RlcprimaryIndicatorRlcduplicationInformation) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RlcprimaryIndicatorRlcduplicationInformation) Descriptor() protoreflect.EnumDescriptor {
	return file_api_xnap_v1_xnap_ies_proto_enumTypes[102].Descriptor()
}

func (RlcprimaryIndicatorRlcduplicationInformation) Type() protoreflect.EnumType {
	return &file_api_xnap_v1_xnap_ies_proto_enumTypes[102]
}

func (x RlcprimaryIndicatorRlcduplicationInformation) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RlcprimaryIndicatorRlcduplicationInformation.Descriptor instead.
func (RlcprimaryIndicatorRlcduplicationInformation) EnumDescriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{102}
}

// enumerated from xnap_v1.asn1:7363
type DuplicationStateRlcduplicationStateItem int32

const (
	DuplicationStateRlcduplicationStateItem_DUPLICATION_STATE_RLCDUPLICATION_STATE_ITEM_ACTIVE   DuplicationStateRlcduplicationStateItem = 0
	DuplicationStateRlcduplicationStateItem_DUPLICATION_STATE_RLCDUPLICATION_STATE_ITEM_INACTIVE DuplicationStateRlcduplicationStateItem = 1
)

// Enum value maps for DuplicationStateRlcduplicationStateItem.
var (
	DuplicationStateRlcduplicationStateItem_name = map[int32]string{
		0: "DUPLICATION_STATE_RLCDUPLICATION_STATE_ITEM_ACTIVE",
		1: "DUPLICATION_STATE_RLCDUPLICATION_STATE_ITEM_INACTIVE",
	}
	DuplicationStateRlcduplicationStateItem_value = map[string]int32{
		"DUPLICATION_STATE_RLCDUPLICATION_STATE_ITEM_ACTIVE":   0,
		"DUPLICATION_STATE_RLCDUPLICATION_STATE_ITEM_INACTIVE": 1,
	}
)

func (x DuplicationStateRlcduplicationStateItem) Enum() *DuplicationStateRlcduplicationStateItem {
	p := new(DuplicationStateRlcduplicationStateItem)
	*p = x
	return p
}

func (x DuplicationStateRlcduplicationStateItem) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DuplicationStateRlcduplicationStateItem) Descriptor() protoreflect.EnumDescriptor {
	return file_api_xnap_v1_xnap_ies_proto_enumTypes[103].Descriptor()
}

func (DuplicationStateRlcduplicationStateItem) Type() protoreflect.EnumType {
	return &file_api_xnap_v1_xnap_ies_proto_enumTypes[103]
}

func (x DuplicationStateRlcduplicationStateItem) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DuplicationStateRlcduplicationStateItem.Descriptor instead.
func (DuplicationStateRlcduplicationStateItem) EnumDescriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{103}
}

// enumerated from xnap_v1.asn1:7373
type ReestablishmentIndication int32

const (
	ReestablishmentIndication_REESTABLISHMENT_INDICATION_REESTABLISHED ReestablishmentIndication = 0
)

// Enum value maps for ReestablishmentIndication.
var (
	ReestablishmentIndication_name = map[int32]string{
		0: "REESTABLISHMENT_INDICATION_REESTABLISHED",
	}
	ReestablishmentIndication_value = map[string]int32{
		"REESTABLISHMENT_INDICATION_REESTABLISHED": 0,
	}
)

func (x ReestablishmentIndication) Enum() *ReestablishmentIndication {
	p := new(ReestablishmentIndication)
	*p = x
	return p
}

func (x ReestablishmentIndication) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ReestablishmentIndication) Descriptor() protoreflect.EnumDescriptor {
	return file_api_xnap_v1_xnap_ies_proto_enumTypes[104].Descriptor()
}

func (ReestablishmentIndication) Type() protoreflect.EnumType {
	return &file_api_xnap_v1_xnap_ies_proto_enumTypes[104]
}

func (x ReestablishmentIndication) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ReestablishmentIndication.Descriptor instead.
func (ReestablishmentIndication) EnumDescriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{104}
}

// enumerated from xnap_v1.asn1:7382
type RrcconfigIndication int32

const (
	RrcconfigIndication_RRCCONFIG_INDICATION_FULL_CONFIG  RrcconfigIndication = 0
	RrcconfigIndication_RRCCONFIG_INDICATION_DELTA_CONFIG RrcconfigIndication = 1
)

// Enum value maps for RrcconfigIndication.
var (
	RrcconfigIndication_name = map[int32]string{
		0: "RRCCONFIG_INDICATION_FULL_CONFIG",
		1: "RRCCONFIG_INDICATION_DELTA_CONFIG",
	}
	RrcconfigIndication_value = map[string]int32{
		"RRCCONFIG_INDICATION_FULL_CONFIG":  0,
		"RRCCONFIG_INDICATION_DELTA_CONFIG": 1,
	}
)

func (x RrcconfigIndication) Enum() *RrcconfigIndication {
	p := new(RrcconfigIndication)
	*p = x
	return p
}

func (x RrcconfigIndication) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RrcconfigIndication) Descriptor() protoreflect.EnumDescriptor {
	return file_api_xnap_v1_xnap_ies_proto_enumTypes[105].Descriptor()
}

func (RrcconfigIndication) Type() protoreflect.EnumType {
	return &file_api_xnap_v1_xnap_ies_proto_enumTypes[105]
}

func (x RrcconfigIndication) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RrcconfigIndication.Descriptor instead.
func (RrcconfigIndication) EnumDescriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{105}
}

// enumerated from xnap_v1.asn1:7399
type RrcconnReestabIndicator int32

const (
	RrcconnReestabIndicator_RRCCONN_REESTAB_INDICATOR_RECONFIGURATION_FAILURE RrcconnReestabIndicator = 0
	RrcconnReestabIndicator_RRCCONN_REESTAB_INDICATOR_HANDOVER_FAILURE        RrcconnReestabIndicator = 1
	RrcconnReestabIndicator_RRCCONN_REESTAB_INDICATOR_OTHER_FAILURE           RrcconnReestabIndicator = 2
)

// Enum value maps for RrcconnReestabIndicator.
var (
	RrcconnReestabIndicator_name = map[int32]string{
		0: "RRCCONN_REESTAB_INDICATOR_RECONFIGURATION_FAILURE",
		1: "RRCCONN_REESTAB_INDICATOR_HANDOVER_FAILURE",
		2: "RRCCONN_REESTAB_INDICATOR_OTHER_FAILURE",
	}
	RrcconnReestabIndicator_value = map[string]int32{
		"RRCCONN_REESTAB_INDICATOR_RECONFIGURATION_FAILURE": 0,
		"RRCCONN_REESTAB_INDICATOR_HANDOVER_FAILURE":        1,
		"RRCCONN_REESTAB_INDICATOR_OTHER_FAILURE":           2,
	}
)

func (x RrcconnReestabIndicator) Enum() *RrcconnReestabIndicator {
	p := new(RrcconnReestabIndicator)
	*p = x
	return p
}

func (x RrcconnReestabIndicator) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RrcconnReestabIndicator) Descriptor() protoreflect.EnumDescriptor {
	return file_api_xnap_v1_xnap_ies_proto_enumTypes[106].Descriptor()
}

func (RrcconnReestabIndicator) Type() protoreflect.EnumType {
	return &file_api_xnap_v1_xnap_ies_proto_enumTypes[106]
}

func (x RrcconnReestabIndicator) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RrcconnReestabIndicator.Descriptor instead.
func (RrcconnReestabIndicator) EnumDescriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{106}
}

// enumerated from xnap_v1.asn1:7477
type RrcresumeCause int32

const (
	RrcresumeCause_RRCRESUME_CAUSE_RNA_UPDATE RrcresumeCause = 0
)

// Enum value maps for RrcresumeCause.
var (
	RrcresumeCause_name = map[int32]string{
		0: "RRCRESUME_CAUSE_RNA_UPDATE",
	}
	RrcresumeCause_value = map[string]int32{
		"RRCRESUME_CAUSE_RNA_UPDATE": 0,
	}
)

func (x RrcresumeCause) Enum() *RrcresumeCause {
	p := new(RrcresumeCause)
	*p = x
	return p
}

func (x RrcresumeCause) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RrcresumeCause) Descriptor() protoreflect.EnumDescriptor {
	return file_api_xnap_v1_xnap_ies_proto_enumTypes[107].Descriptor()
}

func (RrcresumeCause) Type() protoreflect.EnumType {
	return &file_api_xnap_v1_xnap_ies_proto_enumTypes[107]
}

func (x RrcresumeCause) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RrcresumeCause.Descriptor instead.
func (RrcresumeCause) EnumDescriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{107}
}

// enumerated from xnap_v1.asn1:7496
type ScgconfigurationQuery int32

const (
	ScgconfigurationQuery_SCGCONFIGURATION_QUERY_TRUE ScgconfigurationQuery = 0
)

// Enum value maps for ScgconfigurationQuery.
var (
	ScgconfigurationQuery_name = map[int32]string{
		0: "SCGCONFIGURATION_QUERY_TRUE",
	}
	ScgconfigurationQuery_value = map[string]int32{
		"SCGCONFIGURATION_QUERY_TRUE": 0,
	}
)

func (x ScgconfigurationQuery) Enum() *ScgconfigurationQuery {
	p := new(ScgconfigurationQuery)
	*p = x
	return p
}

func (x ScgconfigurationQuery) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ScgconfigurationQuery) Descriptor() protoreflect.EnumDescriptor {
	return file_api_xnap_v1_xnap_ies_proto_enumTypes[108].Descriptor()
}

func (ScgconfigurationQuery) Type() protoreflect.EnumType {
	return &file_api_xnap_v1_xnap_ies_proto_enumTypes[108]
}

func (x ScgconfigurationQuery) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ScgconfigurationQuery.Descriptor instead.
func (ScgconfigurationQuery) EnumDescriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{108}
}

// enumerated from xnap_v1.asn1:7498
type Scgindicator int32

const (
	Scgindicator_SCGINDICATOR_RELEASED Scgindicator = 0
)

// Enum value maps for Scgindicator.
var (
	Scgindicator_name = map[int32]string{
		0: "SCGINDICATOR_RELEASED",
	}
	Scgindicator_value = map[string]int32{
		"SCGINDICATOR_RELEASED": 0,
	}
)

func (x Scgindicator) Enum() *Scgindicator {
	p := new(Scgindicator)
	*p = x
	return p
}

func (x Scgindicator) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Scgindicator) Descriptor() protoreflect.EnumDescriptor {
	return file_api_xnap_v1_xnap_ies_proto_enumTypes[109].Descriptor()
}

func (Scgindicator) Type() protoreflect.EnumType {
	return &file_api_xnap_v1_xnap_ies_proto_enumTypes[109]
}

func (x Scgindicator) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Scgindicator.Descriptor instead.
func (Scgindicator) EnumDescriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{109}
}

// enumerated from xnap_v1.asn1:7512
type IntegrityProtectionIndicationSecurityIndication int32

const (
	IntegrityProtectionIndicationSecurityIndication_INTEGRITY_PROTECTION_INDICATION_SECURITY_INDICATION_REQUIRED   IntegrityProtectionIndicationSecurityIndication = 0
	IntegrityProtectionIndicationSecurityIndication_INTEGRITY_PROTECTION_INDICATION_SECURITY_INDICATION_PREFERRED  IntegrityProtectionIndicationSecurityIndication = 1
	IntegrityProtectionIndicationSecurityIndication_INTEGRITY_PROTECTION_INDICATION_SECURITY_INDICATION_NOT_NEEDED IntegrityProtectionIndicationSecurityIndication = 2
)

// Enum value maps for IntegrityProtectionIndicationSecurityIndication.
var (
	IntegrityProtectionIndicationSecurityIndication_name = map[int32]string{
		0: "INTEGRITY_PROTECTION_INDICATION_SECURITY_INDICATION_REQUIRED",
		1: "INTEGRITY_PROTECTION_INDICATION_SECURITY_INDICATION_PREFERRED",
		2: "INTEGRITY_PROTECTION_INDICATION_SECURITY_INDICATION_NOT_NEEDED",
	}
	IntegrityProtectionIndicationSecurityIndication_value = map[string]int32{
		"INTEGRITY_PROTECTION_INDICATION_SECURITY_INDICATION_REQUIRED":   0,
		"INTEGRITY_PROTECTION_INDICATION_SECURITY_INDICATION_PREFERRED":  1,
		"INTEGRITY_PROTECTION_INDICATION_SECURITY_INDICATION_NOT_NEEDED": 2,
	}
)

func (x IntegrityProtectionIndicationSecurityIndication) Enum() *IntegrityProtectionIndicationSecurityIndication {
	p := new(IntegrityProtectionIndicationSecurityIndication)
	*p = x
	return p
}

func (x IntegrityProtectionIndicationSecurityIndication) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IntegrityProtectionIndicationSecurityIndication) Descriptor() protoreflect.EnumDescriptor {
	return file_api_xnap_v1_xnap_ies_proto_enumTypes[110].Descriptor()
}

func (IntegrityProtectionIndicationSecurityIndication) Type() protoreflect.EnumType {
	return &file_api_xnap_v1_xnap_ies_proto_enumTypes[110]
}

func (x IntegrityProtectionIndicationSecurityIndication) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use IntegrityProtectionIndicationSecurityIndication.Descriptor instead.
func (IntegrityProtectionIndicationSecurityIndication) EnumDescriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{110}
}

// enumerated from xnap_v1.asn1:7513
type ConfidentialityProtectionIndicationSecurityIndication int32

const (
	ConfidentialityProtectionIndicationSecurityIndication_CONFIDENTIALITY_PROTECTION_INDICATION_SECURITY_INDICATION_REQUIRED   ConfidentialityProtectionIndicationSecurityIndication = 0
	ConfidentialityProtectionIndicationSecurityIndication_CONFIDENTIALITY_PROTECTION_INDICATION_SECURITY_INDICATION_PREFERRED  ConfidentialityProtectionIndicationSecurityIndication = 1
	ConfidentialityProtectionIndicationSecurityIndication_CONFIDENTIALITY_PROTECTION_INDICATION_SECURITY_INDICATION_NOT_NEEDED ConfidentialityProtectionIndicationSecurityIndication = 2
)

// Enum value maps for ConfidentialityProtectionIndicationSecurityIndication.
var (
	ConfidentialityProtectionIndicationSecurityIndication_name = map[int32]string{
		0: "CONFIDENTIALITY_PROTECTION_INDICATION_SECURITY_INDICATION_REQUIRED",
		1: "CONFIDENTIALITY_PROTECTION_INDICATION_SECURITY_INDICATION_PREFERRED",
		2: "CONFIDENTIALITY_PROTECTION_INDICATION_SECURITY_INDICATION_NOT_NEEDED",
	}
	ConfidentialityProtectionIndicationSecurityIndication_value = map[string]int32{
		"CONFIDENTIALITY_PROTECTION_INDICATION_SECURITY_INDICATION_REQUIRED":   0,
		"CONFIDENTIALITY_PROTECTION_INDICATION_SECURITY_INDICATION_PREFERRED":  1,
		"CONFIDENTIALITY_PROTECTION_INDICATION_SECURITY_INDICATION_NOT_NEEDED": 2,
	}
)

func (x ConfidentialityProtectionIndicationSecurityIndication) Enum() *ConfidentialityProtectionIndicationSecurityIndication {
	p := new(ConfidentialityProtectionIndicationSecurityIndication)
	*p = x
	return p
}

func (x ConfidentialityProtectionIndicationSecurityIndication) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ConfidentialityProtectionIndicationSecurityIndication) Descriptor() protoreflect.EnumDescriptor {
	return file_api_xnap_v1_xnap_ies_proto_enumTypes[111].Descriptor()
}

func (ConfidentialityProtectionIndicationSecurityIndication) Type() protoreflect.EnumType {
	return &file_api_xnap_v1_xnap_ies_proto_enumTypes[111]
}

func (x ConfidentialityProtectionIndicationSecurityIndication) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ConfidentialityProtectionIndicationSecurityIndication.Descriptor instead.
func (ConfidentialityProtectionIndicationSecurityIndication) EnumDescriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{111}
}

// enumerated from xnap_v1.asn1:7526
type IntegrityProtectionResultSecurityResult int32

const (
	IntegrityProtectionResultSecurityResult_INTEGRITY_PROTECTION_RESULT_SECURITY_RESULT_PERFORMED     IntegrityProtectionResultSecurityResult = 0
	IntegrityProtectionResultSecurityResult_INTEGRITY_PROTECTION_RESULT_SECURITY_RESULT_NOT_PERFORMED IntegrityProtectionResultSecurityResult = 1
)

// Enum value maps for IntegrityProtectionResultSecurityResult.
var (
	IntegrityProtectionResultSecurityResult_name = map[int32]string{
		0: "INTEGRITY_PROTECTION_RESULT_SECURITY_RESULT_PERFORMED",
		1: "INTEGRITY_PROTECTION_RESULT_SECURITY_RESULT_NOT_PERFORMED",
	}
	IntegrityProtectionResultSecurityResult_value = map[string]int32{
		"INTEGRITY_PROTECTION_RESULT_SECURITY_RESULT_PERFORMED":     0,
		"INTEGRITY_PROTECTION_RESULT_SECURITY_RESULT_NOT_PERFORMED": 1,
	}
)

func (x IntegrityProtectionResultSecurityResult) Enum() *IntegrityProtectionResultSecurityResult {
	p := new(IntegrityProtectionResultSecurityResult)
	*p = x
	return p
}

func (x IntegrityProtectionResultSecurityResult) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IntegrityProtectionResultSecurityResult) Descriptor() protoreflect.EnumDescriptor {
	return file_api_xnap_v1_xnap_ies_proto_enumTypes[112].Descriptor()
}

func (IntegrityProtectionResultSecurityResult) Type() protoreflect.EnumType {
	return &file_api_xnap_v1_xnap_ies_proto_enumTypes[112]
}

func (x IntegrityProtectionResultSecurityResult) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use IntegrityProtectionResultSecurityResult.Descriptor instead.
func (IntegrityProtectionResultSecurityResult) EnumDescriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{112}
}

// enumerated from xnap_v1.asn1:7527
type ConfidentialityProtectionResultSecurityResult int32

const (
	ConfidentialityProtectionResultSecurityResult_CONFIDENTIALITY_PROTECTION_RESULT_SECURITY_RESULT_PERFORMED     ConfidentialityProtectionResultSecurityResult = 0
	ConfidentialityProtectionResultSecurityResult_CONFIDENTIALITY_PROTECTION_RESULT_SECURITY_RESULT_NOT_PERFORMED ConfidentialityProtectionResultSecurityResult = 1
)

// Enum value maps for ConfidentialityProtectionResultSecurityResult.
var (
	ConfidentialityProtectionResultSecurityResult_name = map[int32]string{
		0: "CONFIDENTIALITY_PROTECTION_RESULT_SECURITY_RESULT_PERFORMED",
		1: "CONFIDENTIALITY_PROTECTION_RESULT_SECURITY_RESULT_NOT_PERFORMED",
	}
	ConfidentialityProtectionResultSecurityResult_value = map[string]int32{
		"CONFIDENTIALITY_PROTECTION_RESULT_SECURITY_RESULT_PERFORMED":     0,
		"CONFIDENTIALITY_PROTECTION_RESULT_SECURITY_RESULT_NOT_PERFORMED": 1,
	}
)

func (x ConfidentialityProtectionResultSecurityResult) Enum() *ConfidentialityProtectionResultSecurityResult {
	p := new(ConfidentialityProtectionResultSecurityResult)
	*p = x
	return p
}

func (x ConfidentialityProtectionResultSecurityResult) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ConfidentialityProtectionResultSecurityResult) Descriptor() protoreflect.EnumDescriptor {
	return file_api_xnap_v1_xnap_ies_proto_enumTypes[113].Descriptor()
}

func (ConfidentialityProtectionResultSecurityResult) Type() protoreflect.EnumType {
	return &file_api_xnap_v1_xnap_ies_proto_enumTypes[113]
}

func (x ConfidentialityProtectionResultSecurityResult) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ConfidentialityProtectionResultSecurityResult.Descriptor instead.
func (ConfidentialityProtectionResultSecurityResult) EnumDescriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{113}
}

// enumerated from xnap_v1.asn1:7549
type SensorMeasConfig int32

const (
	SensorMeasConfig_SENSOR_MEAS_CONFIG_SETUP SensorMeasConfig = 0
)

// Enum value maps for SensorMeasConfig.
var (
	SensorMeasConfig_name = map[int32]string{
		0: "SENSOR_MEAS_CONFIG_SETUP",
	}
	SensorMeasConfig_value = map[string]int32{
		"SENSOR_MEAS_CONFIG_SETUP": 0,
	}
)

func (x SensorMeasConfig) Enum() *SensorMeasConfig {
	p := new(SensorMeasConfig)
	*p = x
	return p
}

func (x SensorMeasConfig) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SensorMeasConfig) Descriptor() protoreflect.EnumDescriptor {
	return file_api_xnap_v1_xnap_ies_proto_enumTypes[114].Descriptor()
}

func (SensorMeasConfig) Type() protoreflect.EnumType {
	return &file_api_xnap_v1_xnap_ies_proto_enumTypes[114]
}

func (x SensorMeasConfig) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SensorMeasConfig.Descriptor instead.
func (SensorMeasConfig) EnumDescriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{114}
}

// enumerated from xnap_v1.asn1:7552
type UncompensatedBarometricConfigSensorName int32

const (
	UncompensatedBarometricConfigSensorName_UNCOMPENSATED_BAROMETRIC_CONFIG_SENSOR_NAME_TRUE UncompensatedBarometricConfigSensorName = 0
)

// Enum value maps for UncompensatedBarometricConfigSensorName.
var (
	UncompensatedBarometricConfigSensorName_name = map[int32]string{
		0: "UNCOMPENSATED_BAROMETRIC_CONFIG_SENSOR_NAME_TRUE",
	}
	UncompensatedBarometricConfigSensorName_value = map[string]int32{
		"UNCOMPENSATED_BAROMETRIC_CONFIG_SENSOR_NAME_TRUE": 0,
	}
)

func (x UncompensatedBarometricConfigSensorName) Enum() *UncompensatedBarometricConfigSensorName {
	p := new(UncompensatedBarometricConfigSensorName)
	*p = x
	return p
}

func (x UncompensatedBarometricConfigSensorName) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UncompensatedBarometricConfigSensorName) Descriptor() protoreflect.EnumDescriptor {
	return file_api_xnap_v1_xnap_ies_proto_enumTypes[115].Descriptor()
}

func (UncompensatedBarometricConfigSensorName) Type() protoreflect.EnumType {
	return &file_api_xnap_v1_xnap_ies_proto_enumTypes[115]
}

func (x UncompensatedBarometricConfigSensorName) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UncompensatedBarometricConfigSensorName.Descriptor instead.
func (UncompensatedBarometricConfigSensorName) EnumDescriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{115}
}

// enumerated from xnap_v1.asn1:7553
type UeSpeedConfigSensorName int32

const (
	UeSpeedConfigSensorName_UE_SPEED_CONFIG_SENSOR_NAME_TRUE UeSpeedConfigSensorName = 0
)

// Enum value maps for UeSpeedConfigSensorName.
var (
	UeSpeedConfigSensorName_name = map[int32]string{
		0: "UE_SPEED_CONFIG_SENSOR_NAME_TRUE",
	}
	UeSpeedConfigSensorName_value = map[string]int32{
		"UE_SPEED_CONFIG_SENSOR_NAME_TRUE": 0,
	}
)

func (x UeSpeedConfigSensorName) Enum() *UeSpeedConfigSensorName {
	p := new(UeSpeedConfigSensorName)
	*p = x
	return p
}

func (x UeSpeedConfigSensorName) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UeSpeedConfigSensorName) Descriptor() protoreflect.EnumDescriptor {
	return file_api_xnap_v1_xnap_ies_proto_enumTypes[116].Descriptor()
}

func (UeSpeedConfigSensorName) Type() protoreflect.EnumType {
	return &file_api_xnap_v1_xnap_ies_proto_enumTypes[116]
}

func (x UeSpeedConfigSensorName) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UeSpeedConfigSensorName.Descriptor instead.
func (UeSpeedConfigSensorName) EnumDescriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{116}
}

// enumerated from xnap_v1.asn1:7554
type UeOrientationConfigSensorName int32

const (
	UeOrientationConfigSensorName_UE_ORIENTATION_CONFIG_SENSOR_NAME_TRUE UeOrientationConfigSensorName = 0
)

// Enum value maps for UeOrientationConfigSensorName.
var (
	UeOrientationConfigSensorName_name = map[int32]string{
		0: "UE_ORIENTATION_CONFIG_SENSOR_NAME_TRUE",
	}
	UeOrientationConfigSensorName_value = map[string]int32{
		"UE_ORIENTATION_CONFIG_SENSOR_NAME_TRUE": 0,
	}
)

func (x UeOrientationConfigSensorName) Enum() *UeOrientationConfigSensorName {
	p := new(UeOrientationConfigSensorName)
	*p = x
	return p
}

func (x UeOrientationConfigSensorName) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UeOrientationConfigSensorName) Descriptor() protoreflect.EnumDescriptor {
	return file_api_xnap_v1_xnap_ies_proto_enumTypes[117].Descriptor()
}

func (UeOrientationConfigSensorName) Type() protoreflect.EnumType {
	return &file_api_xnap_v1_xnap_ies_proto_enumTypes[117]
}

func (x UeOrientationConfigSensorName) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UeOrientationConfigSensorName.Descriptor instead.
func (UeOrientationConfigSensorName) EnumDescriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{117}
}

// enumerated from xnap_v1.asn1:7578
type FreqBandIndicatorPriorityServedCellInformationEutra int32

const (
	FreqBandIndicatorPriorityServedCellInformationEutra_FREQ_BAND_INDICATOR_PRIORITY_SERVED_CELL_INFORMATION_EUTRA_NOT_BROADCAST FreqBandIndicatorPriorityServedCellInformationEutra = 0
	FreqBandIndicatorPriorityServedCellInformationEutra_FREQ_BAND_INDICATOR_PRIORITY_SERVED_CELL_INFORMATION_EUTRA_BROADCAST     FreqBandIndicatorPriorityServedCellInformationEutra = 1
)

// Enum value maps for FreqBandIndicatorPriorityServedCellInformationEutra.
var (
	FreqBandIndicatorPriorityServedCellInformationEutra_name = map[int32]string{
		0: "FREQ_BAND_INDICATOR_PRIORITY_SERVED_CELL_INFORMATION_EUTRA_NOT_BROADCAST",
		1: "FREQ_BAND_INDICATOR_PRIORITY_SERVED_CELL_INFORMATION_EUTRA_BROADCAST",
	}
	FreqBandIndicatorPriorityServedCellInformationEutra_value = map[string]int32{
		"FREQ_BAND_INDICATOR_PRIORITY_SERVED_CELL_INFORMATION_EUTRA_NOT_BROADCAST": 0,
		"FREQ_BAND_INDICATOR_PRIORITY_SERVED_CELL_INFORMATION_EUTRA_BROADCAST":     1,
	}
)

func (x FreqBandIndicatorPriorityServedCellInformationEutra) Enum() *FreqBandIndicatorPriorityServedCellInformationEutra {
	p := new(FreqBandIndicatorPriorityServedCellInformationEutra)
	*p = x
	return p
}

func (x FreqBandIndicatorPriorityServedCellInformationEutra) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FreqBandIndicatorPriorityServedCellInformationEutra) Descriptor() protoreflect.EnumDescriptor {
	return file_api_xnap_v1_xnap_ies_proto_enumTypes[118].Descriptor()
}

func (FreqBandIndicatorPriorityServedCellInformationEutra) Type() protoreflect.EnumType {
	return &file_api_xnap_v1_xnap_ies_proto_enumTypes[118]
}

func (x FreqBandIndicatorPriorityServedCellInformationEutra) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FreqBandIndicatorPriorityServedCellInformationEutra.Descriptor instead.
func (FreqBandIndicatorPriorityServedCellInformationEutra) EnumDescriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{118}
}

// enumerated from xnap_v1.asn1:7579
type BandwidthReducedSiservedCellInformationEutra int32

const (
	BandwidthReducedSiservedCellInformationEutra_BANDWIDTH_REDUCED_SISERVED_CELL_INFORMATION_EUTRA_SCHEDULED BandwidthReducedSiservedCellInformationEutra = 0
)

// Enum value maps for BandwidthReducedSiservedCellInformationEutra.
var (
	BandwidthReducedSiservedCellInformationEutra_name = map[int32]string{
		0: "BANDWIDTH_REDUCED_SISERVED_CELL_INFORMATION_EUTRA_SCHEDULED",
	}
	BandwidthReducedSiservedCellInformationEutra_value = map[string]int32{
		"BANDWIDTH_REDUCED_SISERVED_CELL_INFORMATION_EUTRA_SCHEDULED": 0,
	}
)

func (x BandwidthReducedSiservedCellInformationEutra) Enum() *BandwidthReducedSiservedCellInformationEutra {
	p := new(BandwidthReducedSiservedCellInformationEutra)
	*p = x
	return p
}

func (x BandwidthReducedSiservedCellInformationEutra) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BandwidthReducedSiservedCellInformationEutra) Descriptor() protoreflect.EnumDescriptor {
	return file_api_xnap_v1_xnap_ies_proto_enumTypes[119].Descriptor()
}

func (BandwidthReducedSiservedCellInformationEutra) Type() protoreflect.EnumType {
	return &file_api_xnap_v1_xnap_ies_proto_enumTypes[119]
}

func (x BandwidthReducedSiservedCellInformationEutra) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BandwidthReducedSiservedCellInformationEutra.Descriptor instead.
func (BandwidthReducedSiservedCellInformationEutra) EnumDescriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{119}
}

// enumerated from xnap_v1.asn1:7633
type SubframeAssignmnetServedCellInformationEutratddinfo int32

const (
	SubframeAssignmnetServedCellInformationEutratddinfo_SUBFRAME_ASSIGNMNET_SERVED_CELL_INFORMATION_EUTRATDDINFO_SA0 SubframeAssignmnetServedCellInformationEutratddinfo = 0
	SubframeAssignmnetServedCellInformationEutratddinfo_SUBFRAME_ASSIGNMNET_SERVED_CELL_INFORMATION_EUTRATDDINFO_SA1 SubframeAssignmnetServedCellInformationEutratddinfo = 1
	SubframeAssignmnetServedCellInformationEutratddinfo_SUBFRAME_ASSIGNMNET_SERVED_CELL_INFORMATION_EUTRATDDINFO_SA2 SubframeAssignmnetServedCellInformationEutratddinfo = 2
	SubframeAssignmnetServedCellInformationEutratddinfo_SUBFRAME_ASSIGNMNET_SERVED_CELL_INFORMATION_EUTRATDDINFO_SA3 SubframeAssignmnetServedCellInformationEutratddinfo = 3
	SubframeAssignmnetServedCellInformationEutratddinfo_SUBFRAME_ASSIGNMNET_SERVED_CELL_INFORMATION_EUTRATDDINFO_SA4 SubframeAssignmnetServedCellInformationEutratddinfo = 4
	SubframeAssignmnetServedCellInformationEutratddinfo_SUBFRAME_ASSIGNMNET_SERVED_CELL_INFORMATION_EUTRATDDINFO_SA5 SubframeAssignmnetServedCellInformationEutratddinfo = 5
	SubframeAssignmnetServedCellInformationEutratddinfo_SUBFRAME_ASSIGNMNET_SERVED_CELL_INFORMATION_EUTRATDDINFO_SA6 SubframeAssignmnetServedCellInformationEutratddinfo = 6
)

// Enum value maps for SubframeAssignmnetServedCellInformationEutratddinfo.
var (
	SubframeAssignmnetServedCellInformationEutratddinfo_name = map[int32]string{
		0: "SUBFRAME_ASSIGNMNET_SERVED_CELL_INFORMATION_EUTRATDDINFO_SA0",
		1: "SUBFRAME_ASSIGNMNET_SERVED_CELL_INFORMATION_EUTRATDDINFO_SA1",
		2: "SUBFRAME_ASSIGNMNET_SERVED_CELL_INFORMATION_EUTRATDDINFO_SA2",
		3: "SUBFRAME_ASSIGNMNET_SERVED_CELL_INFORMATION_EUTRATDDINFO_SA3",
		4: "SUBFRAME_ASSIGNMNET_SERVED_CELL_INFORMATION_EUTRATDDINFO_SA4",
		5: "SUBFRAME_ASSIGNMNET_SERVED_CELL_INFORMATION_EUTRATDDINFO_SA5",
		6: "SUBFRAME_ASSIGNMNET_SERVED_CELL_INFORMATION_EUTRATDDINFO_SA6",
	}
	SubframeAssignmnetServedCellInformationEutratddinfo_value = map[string]int32{
		"SUBFRAME_ASSIGNMNET_SERVED_CELL_INFORMATION_EUTRATDDINFO_SA0": 0,
		"SUBFRAME_ASSIGNMNET_SERVED_CELL_INFORMATION_EUTRATDDINFO_SA1": 1,
		"SUBFRAME_ASSIGNMNET_SERVED_CELL_INFORMATION_EUTRATDDINFO_SA2": 2,
		"SUBFRAME_ASSIGNMNET_SERVED_CELL_INFORMATION_EUTRATDDINFO_SA3": 3,
		"SUBFRAME_ASSIGNMNET_SERVED_CELL_INFORMATION_EUTRATDDINFO_SA4": 4,
		"SUBFRAME_ASSIGNMNET_SERVED_CELL_INFORMATION_EUTRATDDINFO_SA5": 5,
		"SUBFRAME_ASSIGNMNET_SERVED_CELL_INFORMATION_EUTRATDDINFO_SA6": 6,
	}
)

func (x SubframeAssignmnetServedCellInformationEutratddinfo) Enum() *SubframeAssignmnetServedCellInformationEutratddinfo {
	p := new(SubframeAssignmnetServedCellInformationEutratddinfo)
	*p = x
	return p
}

func (x SubframeAssignmnetServedCellInformationEutratddinfo) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SubframeAssignmnetServedCellInformationEutratddinfo) Descriptor() protoreflect.EnumDescriptor {
	return file_api_xnap_v1_xnap_ies_proto_enumTypes[120].Descriptor()
}

func (SubframeAssignmnetServedCellInformationEutratddinfo) Type() protoreflect.EnumType {
	return &file_api_xnap_v1_xnap_ies_proto_enumTypes[120]
}

func (x SubframeAssignmnetServedCellInformationEutratddinfo) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SubframeAssignmnetServedCellInformationEutratddinfo.Descriptor instead.
func (SubframeAssignmnetServedCellInformationEutratddinfo) EnumDescriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{120}
}

// enumerated from xnap_v1.asn1:7682
type DeactivationindicationServedCellsToModifyEutraitem int32

const (
	DeactivationindicationServedCellsToModifyEutraitem_DEACTIVATIONINDICATION_SERVED_CELLS_TO_MODIFY_EUTRAITEM_DEACTIVATED DeactivationindicationServedCellsToModifyEutraitem = 0
)

// Enum value maps for DeactivationindicationServedCellsToModifyEutraitem.
var (
	DeactivationindicationServedCellsToModifyEutraitem_name = map[int32]string{
		0: "DEACTIVATIONINDICATION_SERVED_CELLS_TO_MODIFY_EUTRAITEM_DEACTIVATED",
	}
	DeactivationindicationServedCellsToModifyEutraitem_value = map[string]int32{
		"DEACTIVATIONINDICATION_SERVED_CELLS_TO_MODIFY_EUTRAITEM_DEACTIVATED": 0,
	}
)

func (x DeactivationindicationServedCellsToModifyEutraitem) Enum() *DeactivationindicationServedCellsToModifyEutraitem {
	p := new(DeactivationindicationServedCellsToModifyEutraitem)
	*p = x
	return p
}

func (x DeactivationindicationServedCellsToModifyEutraitem) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DeactivationindicationServedCellsToModifyEutraitem) Descriptor() protoreflect.EnumDescriptor {
	return file_api_xnap_v1_xnap_ies_proto_enumTypes[121].Descriptor()
}

func (DeactivationindicationServedCellsToModifyEutraitem) Type() protoreflect.EnumType {
	return &file_api_xnap_v1_xnap_ies_proto_enumTypes[121]
}

func (x DeactivationindicationServedCellsToModifyEutraitem) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DeactivationindicationServedCellsToModifyEutraitem.Descriptor instead.
func (DeactivationindicationServedCellsToModifyEutraitem) EnumDescriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{121}
}

// enumerated from xnap_v1.asn1:7752
type DeactivationindicationServedCellsToModifyNritem int32

const (
	DeactivationindicationServedCellsToModifyNritem_DEACTIVATIONINDICATION_SERVED_CELLS_TO_MODIFY_NRITEM_DEACTIVATED DeactivationindicationServedCellsToModifyNritem = 0
)

// Enum value maps for DeactivationindicationServedCellsToModifyNritem.
var (
	DeactivationindicationServedCellsToModifyNritem_name = map[int32]string{
		0: "DEACTIVATIONINDICATION_SERVED_CELLS_TO_MODIFY_NRITEM_DEACTIVATED",
	}
	DeactivationindicationServedCellsToModifyNritem_value = map[string]int32{
		"DEACTIVATIONINDICATION_SERVED_CELLS_TO_MODIFY_NRITEM_DEACTIVATED": 0,
	}
)

func (x DeactivationindicationServedCellsToModifyNritem) Enum() *DeactivationindicationServedCellsToModifyNritem {
	p := new(DeactivationindicationServedCellsToModifyNritem)
	*p = x
	return p
}

func (x DeactivationindicationServedCellsToModifyNritem) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DeactivationindicationServedCellsToModifyNritem) Descriptor() protoreflect.EnumDescriptor {
	return file_api_xnap_v1_xnap_ies_proto_enumTypes[122].Descriptor()
}

func (DeactivationindicationServedCellsToModifyNritem) Type() protoreflect.EnumType {
	return &file_api_xnap_v1_xnap_ies_proto_enumTypes[122]
}

func (x DeactivationindicationServedCellsToModifyNritem) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DeactivationindicationServedCellsToModifyNritem.Descriptor instead.
func (DeactivationindicationServedCellsToModifyNritem) EnumDescriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{122}
}

// enumerated from xnap_v1.asn1:7917
type SNGRAnnodeAdditionTriggerInd int32

const (
	SNGRAnnodeAdditionTriggerInd_S_NG_RANNODE_ADDITION_TRIGGER_IND_SN_CHANGE   SNGRAnnodeAdditionTriggerInd = 0
	SNGRAnnodeAdditionTriggerInd_S_NG_RANNODE_ADDITION_TRIGGER_IND_INTER_MN_HO SNGRAnnodeAdditionTriggerInd = 1
	SNGRAnnodeAdditionTriggerInd_S_NG_RANNODE_ADDITION_TRIGGER_IND_INTRA_MN_HO SNGRAnnodeAdditionTriggerInd = 2
)

// Enum value maps for SNGRAnnodeAdditionTriggerInd.
var (
	SNGRAnnodeAdditionTriggerInd_name = map[int32]string{
		0: "S_NG_RANNODE_ADDITION_TRIGGER_IND_SN_CHANGE",
		1: "S_NG_RANNODE_ADDITION_TRIGGER_IND_INTER_MN_HO",
		2: "S_NG_RANNODE_ADDITION_TRIGGER_IND_INTRA_MN_HO",
	}
	SNGRAnnodeAdditionTriggerInd_value = map[string]int32{
		"S_NG_RANNODE_ADDITION_TRIGGER_IND_SN_CHANGE":   0,
		"S_NG_RANNODE_ADDITION_TRIGGER_IND_INTER_MN_HO": 1,
		"S_NG_RANNODE_ADDITION_TRIGGER_IND_INTRA_MN_HO": 2,
	}
)

func (x SNGRAnnodeAdditionTriggerInd) Enum() *SNGRAnnodeAdditionTriggerInd {
	p := new(SNGRAnnodeAdditionTriggerInd)
	*p = x
	return p
}

func (x SNGRAnnodeAdditionTriggerInd) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SNGRAnnodeAdditionTriggerInd) Descriptor() protoreflect.EnumDescriptor {
	return file_api_xnap_v1_xnap_ies_proto_enumTypes[123].Descriptor()
}

func (SNGRAnnodeAdditionTriggerInd) Type() protoreflect.EnumType {
	return &file_api_xnap_v1_xnap_ies_proto_enumTypes[123]
}

func (x SNGRAnnodeAdditionTriggerInd) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SNGRAnnodeAdditionTriggerInd.Descriptor instead.
func (SNGRAnnodeAdditionTriggerInd) EnumDescriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{123}
}

// enumerated from xnap_v1.asn1:7935
type Sntriggered int32

const (
	Sntriggered_SNTRIGGERED_TRUE Sntriggered = 0
)

// Enum value maps for Sntriggered.
var (
	Sntriggered_name = map[int32]string{
		0: "SNTRIGGERED_TRUE",
	}
	Sntriggered_value = map[string]int32{
		"SNTRIGGERED_TRUE": 0,
	}
)

func (x Sntriggered) Enum() *Sntriggered {
	p := new(Sntriggered)
	*p = x
	return p
}

func (x Sntriggered) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Sntriggered) Descriptor() protoreflect.EnumDescriptor {
	return file_api_xnap_v1_xnap_ies_proto_enumTypes[124].Descriptor()
}

func (Sntriggered) Type() protoreflect.EnumType {
	return &file_api_xnap_v1_xnap_ies_proto_enumTypes[124]
}

func (x Sntriggered) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Sntriggered.Descriptor instead.
func (Sntriggered) EnumDescriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{124}
}

// enumerated from xnap_v1.asn1:7953
type SpecialSubframePatternsEUTra int32

const (
	SpecialSubframePatternsEUTra_SPECIAL_SUBFRAME_PATTERNS_E_UTRA_SSP0  SpecialSubframePatternsEUTra = 0
	SpecialSubframePatternsEUTra_SPECIAL_SUBFRAME_PATTERNS_E_UTRA_SSP1  SpecialSubframePatternsEUTra = 1
	SpecialSubframePatternsEUTra_SPECIAL_SUBFRAME_PATTERNS_E_UTRA_SSP2  SpecialSubframePatternsEUTra = 2
	SpecialSubframePatternsEUTra_SPECIAL_SUBFRAME_PATTERNS_E_UTRA_SSP3  SpecialSubframePatternsEUTra = 3
	SpecialSubframePatternsEUTra_SPECIAL_SUBFRAME_PATTERNS_E_UTRA_SSP4  SpecialSubframePatternsEUTra = 4
	SpecialSubframePatternsEUTra_SPECIAL_SUBFRAME_PATTERNS_E_UTRA_SSP5  SpecialSubframePatternsEUTra = 5
	SpecialSubframePatternsEUTra_SPECIAL_SUBFRAME_PATTERNS_E_UTRA_SSP6  SpecialSubframePatternsEUTra = 6
	SpecialSubframePatternsEUTra_SPECIAL_SUBFRAME_PATTERNS_E_UTRA_SSP7  SpecialSubframePatternsEUTra = 7
	SpecialSubframePatternsEUTra_SPECIAL_SUBFRAME_PATTERNS_E_UTRA_SSP8  SpecialSubframePatternsEUTra = 8
	SpecialSubframePatternsEUTra_SPECIAL_SUBFRAME_PATTERNS_E_UTRA_SSP9  SpecialSubframePatternsEUTra = 9
	SpecialSubframePatternsEUTra_SPECIAL_SUBFRAME_PATTERNS_E_UTRA_SSP10 SpecialSubframePatternsEUTra = 10
)

// Enum value maps for SpecialSubframePatternsEUTra.
var (
	SpecialSubframePatternsEUTra_name = map[int32]string{
		0:  "SPECIAL_SUBFRAME_PATTERNS_E_UTRA_SSP0",
		1:  "SPECIAL_SUBFRAME_PATTERNS_E_UTRA_SSP1",
		2:  "SPECIAL_SUBFRAME_PATTERNS_E_UTRA_SSP2",
		3:  "SPECIAL_SUBFRAME_PATTERNS_E_UTRA_SSP3",
		4:  "SPECIAL_SUBFRAME_PATTERNS_E_UTRA_SSP4",
		5:  "SPECIAL_SUBFRAME_PATTERNS_E_UTRA_SSP5",
		6:  "SPECIAL_SUBFRAME_PATTERNS_E_UTRA_SSP6",
		7:  "SPECIAL_SUBFRAME_PATTERNS_E_UTRA_SSP7",
		8:  "SPECIAL_SUBFRAME_PATTERNS_E_UTRA_SSP8",
		9:  "SPECIAL_SUBFRAME_PATTERNS_E_UTRA_SSP9",
		10: "SPECIAL_SUBFRAME_PATTERNS_E_UTRA_SSP10",
	}
	SpecialSubframePatternsEUTra_value = map[string]int32{
		"SPECIAL_SUBFRAME_PATTERNS_E_UTRA_SSP0":  0,
		"SPECIAL_SUBFRAME_PATTERNS_E_UTRA_SSP1":  1,
		"SPECIAL_SUBFRAME_PATTERNS_E_UTRA_SSP2":  2,
		"SPECIAL_SUBFRAME_PATTERNS_E_UTRA_SSP3":  3,
		"SPECIAL_SUBFRAME_PATTERNS_E_UTRA_SSP4":  4,
		"SPECIAL_SUBFRAME_PATTERNS_E_UTRA_SSP5":  5,
		"SPECIAL_SUBFRAME_PATTERNS_E_UTRA_SSP6":  6,
		"SPECIAL_SUBFRAME_PATTERNS_E_UTRA_SSP7":  7,
		"SPECIAL_SUBFRAME_PATTERNS_E_UTRA_SSP8":  8,
		"SPECIAL_SUBFRAME_PATTERNS_E_UTRA_SSP9":  9,
		"SPECIAL_SUBFRAME_PATTERNS_E_UTRA_SSP10": 10,
	}
)

func (x SpecialSubframePatternsEUTra) Enum() *SpecialSubframePatternsEUTra {
	p := new(SpecialSubframePatternsEUTra)
	*p = x
	return p
}

func (x SpecialSubframePatternsEUTra) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SpecialSubframePatternsEUTra) Descriptor() protoreflect.EnumDescriptor {
	return file_api_xnap_v1_xnap_ies_proto_enumTypes[125].Descriptor()
}

func (SpecialSubframePatternsEUTra) Type() protoreflect.EnumType {
	return &file_api_xnap_v1_xnap_ies_proto_enumTypes[125]
}

func (x SpecialSubframePatternsEUTra) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SpecialSubframePatternsEUTra.Descriptor instead.
func (SpecialSubframePatternsEUTra) EnumDescriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{125}
}

// enumerated from xnap_v1.asn1:7971
type SplitSessionIndicator int32

const (
	SplitSessionIndicator_SPLIT_SESSION_INDICATOR_SPLIT SplitSessionIndicator = 0
)

// Enum value maps for SplitSessionIndicator.
var (
	SplitSessionIndicator_name = map[int32]string{
		0: "SPLIT_SESSION_INDICATOR_SPLIT",
	}
	SplitSessionIndicator_value = map[string]int32{
		"SPLIT_SESSION_INDICATOR_SPLIT": 0,
	}
)

func (x SplitSessionIndicator) Enum() *SplitSessionIndicator {
	p := new(SplitSessionIndicator)
	*p = x
	return p
}

func (x SplitSessionIndicator) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SplitSessionIndicator) Descriptor() protoreflect.EnumDescriptor {
	return file_api_xnap_v1_xnap_ies_proto_enumTypes[126].Descriptor()
}

func (SplitSessionIndicator) Type() protoreflect.EnumType {
	return &file_api_xnap_v1_xnap_ies_proto_enumTypes[126]
}

func (x SplitSessionIndicator) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SplitSessionIndicator.Descriptor instead.
func (SplitSessionIndicator) EnumDescriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{126}
}

// enumerated from xnap_v1.asn1:7975
type SplitSrbsTypes int32

const (
	SplitSrbsTypes_SPLIT_SRBS_TYPES_SRB1     SplitSrbsTypes = 0
	SplitSrbsTypes_SPLIT_SRBS_TYPES_SRB2     SplitSrbsTypes = 1
	SplitSrbsTypes_SPLIT_SRBS_TYPES_SRB1AND2 SplitSrbsTypes = 2
)

// Enum value maps for SplitSrbsTypes.
var (
	SplitSrbsTypes_name = map[int32]string{
		0: "SPLIT_SRBS_TYPES_SRB1",
		1: "SPLIT_SRBS_TYPES_SRB2",
		2: "SPLIT_SRBS_TYPES_SRB1AND2",
	}
	SplitSrbsTypes_value = map[string]int32{
		"SPLIT_SRBS_TYPES_SRB1":     0,
		"SPLIT_SRBS_TYPES_SRB2":     1,
		"SPLIT_SRBS_TYPES_SRB1AND2": 2,
	}
)

func (x SplitSrbsTypes) Enum() *SplitSrbsTypes {
	p := new(SplitSrbsTypes)
	*p = x
	return p
}

func (x SplitSrbsTypes) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SplitSrbsTypes) Descriptor() protoreflect.EnumDescriptor {
	return file_api_xnap_v1_xnap_ies_proto_enumTypes[127].Descriptor()
}

func (SplitSrbsTypes) Type() protoreflect.EnumType {
	return &file_api_xnap_v1_xnap_ies_proto_enumTypes[127]
}

func (x SplitSrbsTypes) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SplitSrbsTypes.Descriptor instead.
func (SplitSrbsTypes) EnumDescriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{127}
}

// enumerated from xnap_v1.asn1:8203
type TimeToTrigger int32

const (
	TimeToTrigger_TIME_TO_TRIGGER_MS0    TimeToTrigger = 0
	TimeToTrigger_TIME_TO_TRIGGER_MS40   TimeToTrigger = 1
	TimeToTrigger_TIME_TO_TRIGGER_MS64   TimeToTrigger = 2
	TimeToTrigger_TIME_TO_TRIGGER_MS80   TimeToTrigger = 3
	TimeToTrigger_TIME_TO_TRIGGER_MS100  TimeToTrigger = 4
	TimeToTrigger_TIME_TO_TRIGGER_MS128  TimeToTrigger = 5
	TimeToTrigger_TIME_TO_TRIGGER_MS160  TimeToTrigger = 6
	TimeToTrigger_TIME_TO_TRIGGER_MS256  TimeToTrigger = 7
	TimeToTrigger_TIME_TO_TRIGGER_MS320  TimeToTrigger = 8
	TimeToTrigger_TIME_TO_TRIGGER_MS480  TimeToTrigger = 9
	TimeToTrigger_TIME_TO_TRIGGER_MS512  TimeToTrigger = 10
	TimeToTrigger_TIME_TO_TRIGGER_MS640  TimeToTrigger = 11
	TimeToTrigger_TIME_TO_TRIGGER_MS1024 TimeToTrigger = 12
	TimeToTrigger_TIME_TO_TRIGGER_MS1280 TimeToTrigger = 13
	TimeToTrigger_TIME_TO_TRIGGER_MS2560 TimeToTrigger = 14
	TimeToTrigger_TIME_TO_TRIGGER_MS5120 TimeToTrigger = 15
)

// Enum value maps for TimeToTrigger.
var (
	TimeToTrigger_name = map[int32]string{
		0:  "TIME_TO_TRIGGER_MS0",
		1:  "TIME_TO_TRIGGER_MS40",
		2:  "TIME_TO_TRIGGER_MS64",
		3:  "TIME_TO_TRIGGER_MS80",
		4:  "TIME_TO_TRIGGER_MS100",
		5:  "TIME_TO_TRIGGER_MS128",
		6:  "TIME_TO_TRIGGER_MS160",
		7:  "TIME_TO_TRIGGER_MS256",
		8:  "TIME_TO_TRIGGER_MS320",
		9:  "TIME_TO_TRIGGER_MS480",
		10: "TIME_TO_TRIGGER_MS512",
		11: "TIME_TO_TRIGGER_MS640",
		12: "TIME_TO_TRIGGER_MS1024",
		13: "TIME_TO_TRIGGER_MS1280",
		14: "TIME_TO_TRIGGER_MS2560",
		15: "TIME_TO_TRIGGER_MS5120",
	}
	TimeToTrigger_value = map[string]int32{
		"TIME_TO_TRIGGER_MS0":    0,
		"TIME_TO_TRIGGER_MS40":   1,
		"TIME_TO_TRIGGER_MS64":   2,
		"TIME_TO_TRIGGER_MS80":   3,
		"TIME_TO_TRIGGER_MS100":  4,
		"TIME_TO_TRIGGER_MS128":  5,
		"TIME_TO_TRIGGER_MS160":  6,
		"TIME_TO_TRIGGER_MS256":  7,
		"TIME_TO_TRIGGER_MS320":  8,
		"TIME_TO_TRIGGER_MS480":  9,
		"TIME_TO_TRIGGER_MS512":  10,
		"TIME_TO_TRIGGER_MS640":  11,
		"TIME_TO_TRIGGER_MS1024": 12,
		"TIME_TO_TRIGGER_MS1280": 13,
		"TIME_TO_TRIGGER_MS2560": 14,
		"TIME_TO_TRIGGER_MS5120": 15,
	}
)

func (x TimeToTrigger) Enum() *TimeToTrigger {
	p := new(TimeToTrigger)
	*p = x
	return p
}

func (x TimeToTrigger) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TimeToTrigger) Descriptor() protoreflect.EnumDescriptor {
	return file_api_xnap_v1_xnap_ies_proto_enumTypes[128].Descriptor()
}

func (TimeToTrigger) Type() protoreflect.EnumType {
	return &file_api_xnap_v1_xnap_ies_proto_enumTypes[128]
}

func (x TimeToTrigger) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TimeToTrigger.Descriptor instead.
func (TimeToTrigger) EnumDescriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{128}
}

// enumerated from xnap_v1.asn1:8207
type TimeToWait int32

const (
	TimeToWait_TIME_TO_WAIT_V1S  TimeToWait = 0
	TimeToWait_TIME_TO_WAIT_V2S  TimeToWait = 1
	TimeToWait_TIME_TO_WAIT_V5S  TimeToWait = 2
	TimeToWait_TIME_TO_WAIT_V10S TimeToWait = 3
	TimeToWait_TIME_TO_WAIT_V20S TimeToWait = 4
	TimeToWait_TIME_TO_WAIT_V60S TimeToWait = 5
)

// Enum value maps for TimeToWait.
var (
	TimeToWait_name = map[int32]string{
		0: "TIME_TO_WAIT_V1S",
		1: "TIME_TO_WAIT_V2S",
		2: "TIME_TO_WAIT_V5S",
		3: "TIME_TO_WAIT_V10S",
		4: "TIME_TO_WAIT_V20S",
		5: "TIME_TO_WAIT_V60S",
	}
	TimeToWait_value = map[string]int32{
		"TIME_TO_WAIT_V1S":  0,
		"TIME_TO_WAIT_V2S":  1,
		"TIME_TO_WAIT_V5S":  2,
		"TIME_TO_WAIT_V10S": 3,
		"TIME_TO_WAIT_V20S": 4,
		"TIME_TO_WAIT_V60S": 5,
	}
)

func (x TimeToWait) Enum() *TimeToWait {
	p := new(TimeToWait)
	*p = x
	return p
}

func (x TimeToWait) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TimeToWait) Descriptor() protoreflect.EnumDescriptor {
	return file_api_xnap_v1_xnap_ies_proto_enumTypes[129].Descriptor()
}

func (TimeToWait) Type() protoreflect.EnumType {
	return &file_api_xnap_v1_xnap_ies_proto_enumTypes[129]
}

func (x TimeToWait) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TimeToWait.Descriptor instead.
func (TimeToWait) EnumDescriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{129}
}

// enumerated from xnap_v1.asn1:8291
type TnlassociationUsage int32

const (
	TnlassociationUsage_TNLASSOCIATION_USAGE_UE     TnlassociationUsage = 0
	TnlassociationUsage_TNLASSOCIATION_USAGE_NON_UE TnlassociationUsage = 1
	TnlassociationUsage_TNLASSOCIATION_USAGE_BOTH   TnlassociationUsage = 2
)

// Enum value maps for TnlassociationUsage.
var (
	TnlassociationUsage_name = map[int32]string{
		0: "TNLASSOCIATION_USAGE_UE",
		1: "TNLASSOCIATION_USAGE_NON_UE",
		2: "TNLASSOCIATION_USAGE_BOTH",
	}
	TnlassociationUsage_value = map[string]int32{
		"TNLASSOCIATION_USAGE_UE":     0,
		"TNLASSOCIATION_USAGE_NON_UE": 1,
		"TNLASSOCIATION_USAGE_BOTH":   2,
	}
)

func (x TnlassociationUsage) Enum() *TnlassociationUsage {
	p := new(TnlassociationUsage)
	*p = x
	return p
}

func (x TnlassociationUsage) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TnlassociationUsage) Descriptor() protoreflect.EnumDescriptor {
	return file_api_xnap_v1_xnap_ies_proto_enumTypes[130].Descriptor()
}

func (TnlassociationUsage) Type() protoreflect.EnumType {
	return &file_api_xnap_v1_xnap_ies_proto_enumTypes[130]
}

func (x TnlassociationUsage) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TnlassociationUsage.Descriptor instead.
func (TnlassociationUsage) EnumDescriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{130}
}

// enumerated from xnap_v1.asn1:8319
type TraceDepth int32

const (
	TraceDepth_TRACE_DEPTH_MINIMUM                                   TraceDepth = 0
	TraceDepth_TRACE_DEPTH_MEDIUM                                    TraceDepth = 1
	TraceDepth_TRACE_DEPTH_MAXIMUM                                   TraceDepth = 2
	TraceDepth_TRACE_DEPTH_MINIMUM_WITHOUT_VENDOR_SPECIFIC_EXTENSION TraceDepth = 3
	TraceDepth_TRACE_DEPTH_MEDIUM_WITHOUT_VENDOR_SPECIFIC_EXTENSION  TraceDepth = 4
	TraceDepth_TRACE_DEPTH_MAXIMUM_WITHOUT_VENDOR_SPECIFIC_EXTENSION TraceDepth = 5
)

// Enum value maps for TraceDepth.
var (
	TraceDepth_name = map[int32]string{
		0: "TRACE_DEPTH_MINIMUM",
		1: "TRACE_DEPTH_MEDIUM",
		2: "TRACE_DEPTH_MAXIMUM",
		3: "TRACE_DEPTH_MINIMUM_WITHOUT_VENDOR_SPECIFIC_EXTENSION",
		4: "TRACE_DEPTH_MEDIUM_WITHOUT_VENDOR_SPECIFIC_EXTENSION",
		5: "TRACE_DEPTH_MAXIMUM_WITHOUT_VENDOR_SPECIFIC_EXTENSION",
	}
	TraceDepth_value = map[string]int32{
		"TRACE_DEPTH_MINIMUM": 0,
		"TRACE_DEPTH_MEDIUM":  1,
		"TRACE_DEPTH_MAXIMUM": 2,
		"TRACE_DEPTH_MINIMUM_WITHOUT_VENDOR_SPECIFIC_EXTENSION": 3,
		"TRACE_DEPTH_MEDIUM_WITHOUT_VENDOR_SPECIFIC_EXTENSION":  4,
		"TRACE_DEPTH_MAXIMUM_WITHOUT_VENDOR_SPECIFIC_EXTENSION": 5,
	}
)

func (x TraceDepth) Enum() *TraceDepth {
	p := new(TraceDepth)
	*p = x
	return p
}

func (x TraceDepth) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TraceDepth) Descriptor() protoreflect.EnumDescriptor {
	return file_api_xnap_v1_xnap_ies_proto_enumTypes[131].Descriptor()
}

func (TraceDepth) Type() protoreflect.EnumType {
	return &file_api_xnap_v1_xnap_ies_proto_enumTypes[131]
}

func (x TraceDepth) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TraceDepth.Descriptor instead.
func (TraceDepth) EnumDescriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{131}
}

// enumerated from xnap_v1.asn1:8353
type TypeOfError int32

const (
	TypeOfError_TYPE_OF_ERROR_NOT_UNDERSTOOD TypeOfError = 0
	TypeOfError_TYPE_OF_ERROR_MISSING        TypeOfError = 1
)

// Enum value maps for TypeOfError.
var (
	TypeOfError_name = map[int32]string{
		0: "TYPE_OF_ERROR_NOT_UNDERSTOOD",
		1: "TYPE_OF_ERROR_MISSING",
	}
	TypeOfError_value = map[string]int32{
		"TYPE_OF_ERROR_NOT_UNDERSTOOD": 0,
		"TYPE_OF_ERROR_MISSING":        1,
	}
)

func (x TypeOfError) Enum() *TypeOfError {
	p := new(TypeOfError)
	*p = x
	return p
}

func (x TypeOfError) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TypeOfError) Descriptor() protoreflect.EnumDescriptor {
	return file_api_xnap_v1_xnap_ies_proto_enumTypes[132].Descriptor()
}

func (TypeOfError) Type() protoreflect.EnumType {
	return &file_api_xnap_v1_xnap_ies_proto_enumTypes[132]
}

func (x TypeOfError) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TypeOfError.Descriptor instead.
func (TypeOfError) EnumDescriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{132}
}

// enumerated from xnap_v1.asn1:8374
type UecontextKeptIndicator int32

const (
	UecontextKeptIndicator_UECONTEXT_KEPT_INDICATOR_TRUE UecontextKeptIndicator = 0
)

// Enum value maps for UecontextKeptIndicator.
var (
	UecontextKeptIndicator_name = map[int32]string{
		0: "UECONTEXT_KEPT_INDICATOR_TRUE",
	}
	UecontextKeptIndicator_value = map[string]int32{
		"UECONTEXT_KEPT_INDICATOR_TRUE": 0,
	}
)

func (x UecontextKeptIndicator) Enum() *UecontextKeptIndicator {
	p := new(UecontextKeptIndicator)
	*p = x
	return p
}

func (x UecontextKeptIndicator) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UecontextKeptIndicator) Descriptor() protoreflect.EnumDescriptor {
	return file_api_xnap_v1_xnap_ies_proto_enumTypes[133].Descriptor()
}

func (UecontextKeptIndicator) Type() protoreflect.EnumType {
	return &file_api_xnap_v1_xnap_ies_proto_enumTypes[133]
}

func (x UecontextKeptIndicator) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UecontextKeptIndicator.Descriptor instead.
func (UecontextKeptIndicator) EnumDescriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{133}
}

// enumerated from xnap_v1.asn1:8523
type UespecificDrx int32

const (
	UespecificDrx_UESPECIFIC_DRX_V32  UespecificDrx = 0
	UespecificDrx_UESPECIFIC_DRX_V64  UespecificDrx = 1
	UespecificDrx_UESPECIFIC_DRX_V128 UespecificDrx = 2
	UespecificDrx_UESPECIFIC_DRX_V256 UespecificDrx = 3
)

// Enum value maps for UespecificDrx.
var (
	UespecificDrx_name = map[int32]string{
		0: "UESPECIFIC_DRX_V32",
		1: "UESPECIFIC_DRX_V64",
		2: "UESPECIFIC_DRX_V128",
		3: "UESPECIFIC_DRX_V256",
	}
	UespecificDrx_value = map[string]int32{
		"UESPECIFIC_DRX_V32":  0,
		"UESPECIFIC_DRX_V64":  1,
		"UESPECIFIC_DRX_V128": 2,
		"UESPECIFIC_DRX_V256": 3,
	}
)

func (x UespecificDrx) Enum() *UespecificDrx {
	p := new(UespecificDrx)
	*p = x
	return p
}

func (x UespecificDrx) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UespecificDrx) Descriptor() protoreflect.EnumDescriptor {
	return file_api_xnap_v1_xnap_ies_proto_enumTypes[134].Descriptor()
}

func (UespecificDrx) Type() protoreflect.EnumType {
	return &file_api_xnap_v1_xnap_ies_proto_enumTypes[134]
}

func (x UespecificDrx) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UespecificDrx.Descriptor instead.
func (UespecificDrx) EnumDescriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{134}
}

// enumerated from xnap_v1.asn1:8540
type UlUEConfiguration int32

const (
	UlUEConfiguration_UL_UE_CONFIGURATION_NO_DATA UlUEConfiguration = 0
	UlUEConfiguration_UL_UE_CONFIGURATION_SHARED  UlUEConfiguration = 1
	UlUEConfiguration_UL_UE_CONFIGURATION_ONLY    UlUEConfiguration = 2
)

// Enum value maps for UlUEConfiguration.
var (
	UlUEConfiguration_name = map[int32]string{
		0: "UL_UE_CONFIGURATION_NO_DATA",
		1: "UL_UE_CONFIGURATION_SHARED",
		2: "UL_UE_CONFIGURATION_ONLY",
	}
	UlUEConfiguration_value = map[string]int32{
		"UL_UE_CONFIGURATION_NO_DATA": 0,
		"UL_UE_CONFIGURATION_SHARED":  1,
		"UL_UE_CONFIGURATION_ONLY":    2,
	}
)

func (x UlUEConfiguration) Enum() *UlUEConfiguration {
	p := new(UlUEConfiguration)
	*p = x
	return p
}

func (x UlUEConfiguration) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UlUEConfiguration) Descriptor() protoreflect.EnumDescriptor {
	return file_api_xnap_v1_xnap_ies_proto_enumTypes[135].Descriptor()
}

func (UlUEConfiguration) Type() protoreflect.EnumType {
	return &file_api_xnap_v1_xnap_ies_proto_enumTypes[135]
}

func (x UlUEConfiguration) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UlUEConfiguration.Descriptor instead.
func (UlUEConfiguration) EnumDescriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{135}
}

// enumerated from xnap_v1.asn1:8542
type Ulforwarding int32

const (
	Ulforwarding_ULFORWARDING_UL_FORWARDING_PROPOSED Ulforwarding = 0
)

// Enum value maps for Ulforwarding.
var (
	Ulforwarding_name = map[int32]string{
		0: "ULFORWARDING_UL_FORWARDING_PROPOSED",
	}
	Ulforwarding_value = map[string]int32{
		"ULFORWARDING_UL_FORWARDING_PROPOSED": 0,
	}
)

func (x Ulforwarding) Enum() *Ulforwarding {
	p := new(Ulforwarding)
	*p = x
	return p
}

func (x Ulforwarding) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ulforwarding) Descriptor() protoreflect.EnumDescriptor {
	return file_api_xnap_v1_xnap_ies_proto_enumTypes[136].Descriptor()
}

func (Ulforwarding) Type() protoreflect.EnumType {
	return &file_api_xnap_v1_xnap_ies_proto_enumTypes[136]
}

func (x Ulforwarding) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ulforwarding.Descriptor instead.
func (Ulforwarding) EnumDescriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{136}
}

// enumerated from xnap_v1.asn1:8544
type UlforwardingProposal int32

const (
	UlforwardingProposal_ULFORWARDING_PROPOSAL_UL_FORWARDING_PROPOSED UlforwardingProposal = 0
)

// Enum value maps for UlforwardingProposal.
var (
	UlforwardingProposal_name = map[int32]string{
		0: "ULFORWARDING_PROPOSAL_UL_FORWARDING_PROPOSED",
	}
	UlforwardingProposal_value = map[string]int32{
		"ULFORWARDING_PROPOSAL_UL_FORWARDING_PROPOSED": 0,
	}
)

func (x UlforwardingProposal) Enum() *UlforwardingProposal {
	p := new(UlforwardingProposal)
	*p = x
	return p
}

func (x UlforwardingProposal) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UlforwardingProposal) Descriptor() protoreflect.EnumDescriptor {
	return file_api_xnap_v1_xnap_ies_proto_enumTypes[137].Descriptor()
}

func (UlforwardingProposal) Type() protoreflect.EnumType {
	return &file_api_xnap_v1_xnap_ies_proto_enumTypes[137]
}

func (x UlforwardingProposal) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UlforwardingProposal.Descriptor instead.
func (UlforwardingProposal) EnumDescriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{137}
}

// enumerated from xnap_v1.asn1:8581
type UserPlaneTrafficActivityReport int32

const (
	UserPlaneTrafficActivityReport_USER_PLANE_TRAFFIC_ACTIVITY_REPORT_INACTIVE     UserPlaneTrafficActivityReport = 0
	UserPlaneTrafficActivityReport_USER_PLANE_TRAFFIC_ACTIVITY_REPORT_RE_ACTIVATED UserPlaneTrafficActivityReport = 1
)

// Enum value maps for UserPlaneTrafficActivityReport.
var (
	UserPlaneTrafficActivityReport_name = map[int32]string{
		0: "USER_PLANE_TRAFFIC_ACTIVITY_REPORT_INACTIVE",
		1: "USER_PLANE_TRAFFIC_ACTIVITY_REPORT_RE_ACTIVATED",
	}
	UserPlaneTrafficActivityReport_value = map[string]int32{
		"USER_PLANE_TRAFFIC_ACTIVITY_REPORT_INACTIVE":     0,
		"USER_PLANE_TRAFFIC_ACTIVITY_REPORT_RE_ACTIVATED": 1,
	}
)

func (x UserPlaneTrafficActivityReport) Enum() *UserPlaneTrafficActivityReport {
	p := new(UserPlaneTrafficActivityReport)
	*p = x
	return p
}

func (x UserPlaneTrafficActivityReport) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UserPlaneTrafficActivityReport) Descriptor() protoreflect.EnumDescriptor {
	return file_api_xnap_v1_xnap_ies_proto_enumTypes[138].Descriptor()
}

func (UserPlaneTrafficActivityReport) Type() protoreflect.EnumType {
	return &file_api_xnap_v1_xnap_ies_proto_enumTypes[138]
}

func (x UserPlaneTrafficActivityReport) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UserPlaneTrafficActivityReport.Descriptor instead.
func (UserPlaneTrafficActivityReport) EnumDescriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{138}
}

// enumerated from xnap_v1.asn1:8588
type VehicleUe int32

const (
	VehicleUe_VEHICLE_UE_AUTHORIZED     VehicleUe = 0
	VehicleUe_VEHICLE_UE_NOT_AUTHORIZED VehicleUe = 1
)

// Enum value maps for VehicleUe.
var (
	VehicleUe_name = map[int32]string{
		0: "VEHICLE_UE_AUTHORIZED",
		1: "VEHICLE_UE_NOT_AUTHORIZED",
	}
	VehicleUe_value = map[string]int32{
		"VEHICLE_UE_AUTHORIZED":     0,
		"VEHICLE_UE_NOT_AUTHORIZED": 1,
	}
)

func (x VehicleUe) Enum() *VehicleUe {
	p := new(VehicleUe)
	*p = x
	return p
}

func (x VehicleUe) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (VehicleUe) Descriptor() protoreflect.EnumDescriptor {
	return file_api_xnap_v1_xnap_ies_proto_enumTypes[139].Descriptor()
}

func (VehicleUe) Type() protoreflect.EnumType {
	return &file_api_xnap_v1_xnap_ies_proto_enumTypes[139]
}

func (x VehicleUe) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use VehicleUe.Descriptor instead.
func (VehicleUe) EnumDescriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{139}
}

// enumerated from xnap_v1.asn1:8613
type WlanrssiWlanmeasurementConfiguration int32

const (
	WlanrssiWlanmeasurementConfiguration_WLANRSSI_WLANMEASUREMENT_CONFIGURATION_TRUE WlanrssiWlanmeasurementConfiguration = 0
)

// Enum value maps for WlanrssiWlanmeasurementConfiguration.
var (
	WlanrssiWlanmeasurementConfiguration_name = map[int32]string{
		0: "WLANRSSI_WLANMEASUREMENT_CONFIGURATION_TRUE",
	}
	WlanrssiWlanmeasurementConfiguration_value = map[string]int32{
		"WLANRSSI_WLANMEASUREMENT_CONFIGURATION_TRUE": 0,
	}
)

func (x WlanrssiWlanmeasurementConfiguration) Enum() *WlanrssiWlanmeasurementConfiguration {
	p := new(WlanrssiWlanmeasurementConfiguration)
	*p = x
	return p
}

func (x WlanrssiWlanmeasurementConfiguration) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (WlanrssiWlanmeasurementConfiguration) Descriptor() protoreflect.EnumDescriptor {
	return file_api_xnap_v1_xnap_ies_proto_enumTypes[140].Descriptor()
}

func (WlanrssiWlanmeasurementConfiguration) Type() protoreflect.EnumType {
	return &file_api_xnap_v1_xnap_ies_proto_enumTypes[140]
}

func (x WlanrssiWlanmeasurementConfiguration) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use WlanrssiWlanmeasurementConfiguration.Descriptor instead.
func (WlanrssiWlanmeasurementConfiguration) EnumDescriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{140}
}

// enumerated from xnap_v1.asn1:8614
type WlanrttWlanmeasurementConfiguration int32

const (
	WlanrttWlanmeasurementConfiguration_WLANRTT_WLANMEASUREMENT_CONFIGURATION_TRUE WlanrttWlanmeasurementConfiguration = 0
)

// Enum value maps for WlanrttWlanmeasurementConfiguration.
var (
	WlanrttWlanmeasurementConfiguration_name = map[int32]string{
		0: "WLANRTT_WLANMEASUREMENT_CONFIGURATION_TRUE",
	}
	WlanrttWlanmeasurementConfiguration_value = map[string]int32{
		"WLANRTT_WLANMEASUREMENT_CONFIGURATION_TRUE": 0,
	}
)

func (x WlanrttWlanmeasurementConfiguration) Enum() *WlanrttWlanmeasurementConfiguration {
	p := new(WlanrttWlanmeasurementConfiguration)
	*p = x
	return p
}

func (x WlanrttWlanmeasurementConfiguration) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (WlanrttWlanmeasurementConfiguration) Descriptor() protoreflect.EnumDescriptor {
	return file_api_xnap_v1_xnap_ies_proto_enumTypes[141].Descriptor()
}

func (WlanrttWlanmeasurementConfiguration) Type() protoreflect.EnumType {
	return &file_api_xnap_v1_xnap_ies_proto_enumTypes[141]
}

func (x WlanrttWlanmeasurementConfiguration) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use WlanrttWlanmeasurementConfiguration.Descriptor instead.
func (WlanrttWlanmeasurementConfiguration) EnumDescriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{141}
}

// enumerated from xnap_v1.asn1:8625
type WlanmeasConfig int32

const (
	WlanmeasConfig_WLANMEAS_CONFIG_SETUP WlanmeasConfig = 0
)

// Enum value maps for WlanmeasConfig.
var (
	WlanmeasConfig_name = map[int32]string{
		0: "WLANMEAS_CONFIG_SETUP",
	}
	WlanmeasConfig_value = map[string]int32{
		"WLANMEAS_CONFIG_SETUP": 0,
	}
)

func (x WlanmeasConfig) Enum() *WlanmeasConfig {
	p := new(WlanmeasConfig)
	*p = x
	return p
}

func (x WlanmeasConfig) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (WlanmeasConfig) Descriptor() protoreflect.EnumDescriptor {
	return file_api_xnap_v1_xnap_ies_proto_enumTypes[142].Descriptor()
}

func (WlanmeasConfig) Type() protoreflect.EnumType {
	return &file_api_xnap_v1_xnap_ies_proto_enumTypes[142]
}

func (x WlanmeasConfig) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use WlanmeasConfig.Descriptor instead.
func (WlanmeasConfig) EnumDescriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{142}
}

// sequence from xnap_v1.asn1:3211
// {Additional-PDCP-Duplication-TNL-List}
type AdditionalPDcpDuplicationTNlList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"valueExt,sizeLB:1,sizeUB:2,"
	Value []*AdditionalPDcpDuplicationTNlItem `protobuf:"bytes,1,rep,name=value,proto3" json:"value,omitempty" aper:"valueExt,sizeLB:1,sizeUB:2,"`
}

func (x *AdditionalPDcpDuplicationTNlList) Reset() {
	*x = AdditionalPDcpDuplicationTNlList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdditionalPDcpDuplicationTNlList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdditionalPDcpDuplicationTNlList) ProtoMessage() {}

func (x *AdditionalPDcpDuplicationTNlList) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdditionalPDcpDuplicationTNlList.ProtoReflect.Descriptor instead.
func (*AdditionalPDcpDuplicationTNlList) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{0}
}

func (x *AdditionalPDcpDuplicationTNlList) GetValue() []*AdditionalPDcpDuplicationTNlItem {
	if x != nil {
		return x.Value
	}
	return nil
}

// value set from xnap_v1.asn1:3216
// {Additional-PDCP-Duplication-TNL-ExtIEs}
type AdditionalPDcpDuplicationTNlExtIes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *emptypb.Empty `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *AdditionalPDcpDuplicationTNlExtIes) Reset() {
	*x = AdditionalPDcpDuplicationTNlExtIes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdditionalPDcpDuplicationTNlExtIes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdditionalPDcpDuplicationTNlExtIes) ProtoMessage() {}

func (x *AdditionalPDcpDuplicationTNlExtIes) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdditionalPDcpDuplicationTNlExtIes.ProtoReflect.Descriptor instead.
func (*AdditionalPDcpDuplicationTNlExtIes) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{1}
}

func (x *AdditionalPDcpDuplicationTNlExtIes) GetValue() *emptypb.Empty {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:3212
// @inject_tag: aper:"valueExt"
// {Additional-PDCP-Duplication-TNL-Item}
type AdditionalPDcpDuplicationTNlItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AdditionalPdcpDuplicationUpTnlInformation *UptransportLayerInformation `protobuf:"bytes,1,opt,name=additional_pdcp_duplication_up_tnl_information,json=additional-PDCP-Duplication-UP-TNL-Information,proto3" json:"additional_pdcp_duplication_up_tnl_information,omitempty"`
	// @inject_tag: aper:"optional,sizeLB:1,"
	IEExtensions []*AdditionalPDcpDuplicationTNlExtIes `protobuf:"bytes,2,rep,name=i_e_extensions,json=iE-Extensions,proto3" json:"i_e_extensions,omitempty" aper:"optional,sizeLB:1,"`
}

func (x *AdditionalPDcpDuplicationTNlItem) Reset() {
	*x = AdditionalPDcpDuplicationTNlItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdditionalPDcpDuplicationTNlItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdditionalPDcpDuplicationTNlItem) ProtoMessage() {}

func (x *AdditionalPDcpDuplicationTNlItem) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdditionalPDcpDuplicationTNlItem.ProtoReflect.Descriptor instead.
func (*AdditionalPDcpDuplicationTNlItem) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{2}
}

func (x *AdditionalPDcpDuplicationTNlItem) GetAdditionalPdcpDuplicationUpTnlInformation() *UptransportLayerInformation {
	if x != nil {
		return x.AdditionalPdcpDuplicationUpTnlInformation
	}
	return nil
}

func (x *AdditionalPDcpDuplicationTNlItem) GetIEExtensions() []*AdditionalPDcpDuplicationTNlExtIes {
	if x != nil {
		return x.IEExtensions
	}
	return nil
}

// value set from xnap_v1.asn1:3226
// {Additional-UL-NG-U-TNLatUPF-Item-ExtIEs}
type AdditionalULNGUTNlatUpfItemExtIes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *emptypb.Empty `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *AdditionalULNGUTNlatUpfItemExtIes) Reset() {
	*x = AdditionalULNGUTNlatUpfItemExtIes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdditionalULNGUTNlatUpfItemExtIes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdditionalULNGUTNlatUpfItemExtIes) ProtoMessage() {}

func (x *AdditionalULNGUTNlatUpfItemExtIes) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdditionalULNGUTNlatUpfItemExtIes.ProtoReflect.Descriptor instead.
func (*AdditionalULNGUTNlatUpfItemExtIes) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{3}
}

func (x *AdditionalULNGUTNlatUpfItemExtIes) GetValue() *emptypb.Empty {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:3221
// @inject_tag: aper:"valueExt"
// {Additional-UL-NG-U-TNLatUPF-Item}
type AdditionalULNGUTNlatUpfItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AdditionalUlNgUTnlatUpf *UptransportLayerInformation `protobuf:"bytes,1,opt,name=additional_ul_ng_u_tnlat_upf,json=additional-UL-NG-U-TNLatUPF,proto3" json:"additional_ul_ng_u_tnlat_upf,omitempty"`
	// @inject_tag: aper:"optional,sizeLB:1,"
	IEExtensions []*AdditionalULNGUTNlatUpfItemExtIes `protobuf:"bytes,2,rep,name=i_e_extensions,json=iE-Extensions,proto3" json:"i_e_extensions,omitempty" aper:"optional,sizeLB:1,"`
}

func (x *AdditionalULNGUTNlatUpfItem) Reset() {
	*x = AdditionalULNGUTNlatUpfItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdditionalULNGUTNlatUpfItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdditionalULNGUTNlatUpfItem) ProtoMessage() {}

func (x *AdditionalULNGUTNlatUpfItem) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdditionalULNGUTNlatUpfItem.ProtoReflect.Descriptor instead.
func (*AdditionalULNGUTNlatUpfItem) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{4}
}

func (x *AdditionalULNGUTNlatUpfItem) GetAdditionalUlNgUTnlatUpf() *UptransportLayerInformation {
	if x != nil {
		return x.AdditionalUlNgUTnlatUpf
	}
	return nil
}

func (x *AdditionalULNGUTNlatUpfItem) GetIEExtensions() []*AdditionalULNGUTNlatUpfItemExtIes {
	if x != nil {
		return x.IEExtensions
	}
	return nil
}

// sequence from xnap_v1.asn1:3233
// {Additional-UL-NG-U-TNLatUPF-List}
type AdditionalULNGUTNlatUpfList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"valueExt,sizeLB:1,sizeUB:3,"
	Value []*AdditionalULNGUTNlatUpfItem `protobuf:"bytes,1,rep,name=value,proto3" json:"value,omitempty" aper:"valueExt,sizeLB:1,sizeUB:3,"`
}

func (x *AdditionalULNGUTNlatUpfList) Reset() {
	*x = AdditionalULNGUTNlatUpfList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdditionalULNGUTNlatUpfList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdditionalULNGUTNlatUpfList) ProtoMessage() {}

func (x *AdditionalULNGUTNlatUpfList) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdditionalULNGUTNlatUpfList.ProtoReflect.Descriptor instead.
func (*AdditionalULNGUTNlatUpfList) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{5}
}

func (x *AdditionalULNGUTNlatUpfList) GetValue() []*AdditionalULNGUTNlatUpfItem {
	if x != nil {
		return x.Value
	}
	return nil
}

// range of Integer from xnap_v1.asn1:3233
// {ActivationIDforCellActivation}
type ActivationIdforCellActivation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"valueLB:0,valueUB:255,"
	Value int32 `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty" aper:"valueLB:0,valueUB:255,"`
}

func (x *ActivationIdforCellActivation) Reset() {
	*x = ActivationIdforCellActivation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActivationIdforCellActivation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActivationIdforCellActivation) ProtoMessage() {}

func (x *ActivationIdforCellActivation) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActivationIdforCellActivation.ProtoReflect.Descriptor instead.
func (*ActivationIdforCellActivation) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{6}
}

func (x *ActivationIdforCellActivation) GetValue() int32 {
	if x != nil {
		return x.Value
	}
	return 0
}

// value set from xnap_v1.asn1:3244
// {AllocationandRetentionPriority-ExtIEs}
type AllocationandRetentionPriorityExtIes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *emptypb.Empty `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *AllocationandRetentionPriorityExtIes) Reset() {
	*x = AllocationandRetentionPriorityExtIes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AllocationandRetentionPriorityExtIes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AllocationandRetentionPriorityExtIes) ProtoMessage() {}

func (x *AllocationandRetentionPriorityExtIes) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AllocationandRetentionPriorityExtIes.ProtoReflect.Descriptor instead.
func (*AllocationandRetentionPriorityExtIes) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{7}
}

func (x *AllocationandRetentionPriorityExtIes) GetValue() *emptypb.Empty {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:3237
// @inject_tag: aper:"valueExt"
// {AllocationandRetentionPriority}
type AllocationandRetentionPriority struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"valueExt,valueLB:0,valueUB:15,"
	PriorityLevel int32 `protobuf:"varint,1,opt,name=priority_level,json=priorityLevel,proto3" json:"priority_level,omitempty" aper:"valueExt,valueLB:0,valueUB:15,"`
	// @inject_tag: aper:"valueExt,valueLB:0,valueUB:1,"
	PreEmptionCapability PreemptioncapabilityAllocationandRetentionPriority `protobuf:"varint,2,opt,name=pre_emption_capability,json=pre-emption-capability,proto3,enum=xnap.v1.PreemptioncapabilityAllocationandRetentionPriority" json:"pre_emption_capability,omitempty" aper:"valueExt,valueLB:0,valueUB:1,"`
	// @inject_tag: aper:"valueExt,valueLB:0,valueUB:1,"
	PreEmptionVulnerability PreemptionvulnerabilityAllocationandRetentionPriority `protobuf:"varint,3,opt,name=pre_emption_vulnerability,json=pre-emption-vulnerability,proto3,enum=xnap.v1.PreemptionvulnerabilityAllocationandRetentionPriority" json:"pre_emption_vulnerability,omitempty" aper:"valueExt,valueLB:0,valueUB:1,"`
	// @inject_tag: aper:"optional,sizeLB:1,"
	IEExtensions []*AllocationandRetentionPriorityExtIes `protobuf:"bytes,4,rep,name=i_e_extensions,json=iE-Extensions,proto3" json:"i_e_extensions,omitempty" aper:"optional,sizeLB:1,"`
}

func (x *AllocationandRetentionPriority) Reset() {
	*x = AllocationandRetentionPriority{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AllocationandRetentionPriority) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AllocationandRetentionPriority) ProtoMessage() {}

func (x *AllocationandRetentionPriority) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AllocationandRetentionPriority.ProtoReflect.Descriptor instead.
func (*AllocationandRetentionPriority) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{8}
}

func (x *AllocationandRetentionPriority) GetPriorityLevel() int32 {
	if x != nil {
		return x.PriorityLevel
	}
	return 0
}

func (x *AllocationandRetentionPriority) GetPreEmptionCapability() PreemptioncapabilityAllocationandRetentionPriority {
	if x != nil {
		return x.PreEmptionCapability
	}
	return PreemptioncapabilityAllocationandRetentionPriority_PREEMPTIONCAPABILITY_ALLOCATIONAND_RETENTION_PRIORITY_SHALL_NOT_TRIGGER_PREEMPTDAT_DION
}

func (x *AllocationandRetentionPriority) GetPreEmptionVulnerability() PreemptionvulnerabilityAllocationandRetentionPriority {
	if x != nil {
		return x.PreEmptionVulnerability
	}
	return PreemptionvulnerabilityAllocationandRetentionPriority_PREEMPTIONVULNERABILITY_ALLOCATIONAND_RETENTION_PRIORITY_NOT_PREEMPTABLE
}

func (x *AllocationandRetentionPriority) GetIEExtensions() []*AllocationandRetentionPriorityExtIes {
	if x != nil {
		return x.IEExtensions
	}
	return nil
}

// range of Integer from xnap_v1.asn1:3249
// {ActivationSFN}
type ActivationSfn struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"valueLB:0,valueUB:1023,"
	Value int32 `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty" aper:"valueLB:0,valueUB:1023,"`
}

func (x *ActivationSfn) Reset() {
	*x = ActivationSfn{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActivationSfn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActivationSfn) ProtoMessage() {}

func (x *ActivationSfn) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActivationSfn.ProtoReflect.Descriptor instead.
func (*ActivationSfn) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{9}
}

func (x *ActivationSfn) GetValue() int32 {
	if x != nil {
		return x.Value
	}
	return 0
}

// sequence from xnap_v1.asn1:3253
// {AllowedCAG-ID-List-perPLMN}
type AllowedCagIDListperPlmn struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"sizeLB:1,sizeUB:256,"
	Value []*CagIdentifier `protobuf:"bytes,1,rep,name=value,proto3" json:"value,omitempty" aper:"sizeLB:1,sizeUB:256,"`
}

func (x *AllowedCagIDListperPlmn) Reset() {
	*x = AllowedCagIDListperPlmn{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AllowedCagIDListperPlmn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AllowedCagIDListperPlmn) ProtoMessage() {}

func (x *AllowedCagIDListperPlmn) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AllowedCagIDListperPlmn.ProtoReflect.Descriptor instead.
func (*AllowedCagIDListperPlmn) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{10}
}

func (x *AllowedCagIDListperPlmn) GetValue() []*CagIdentifier {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:3255
// {AllowedPNI-NPN-ID-List}
type AllowedPniNPnIDList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"valueExt,sizeLB:1,sizeUB:16,"
	Value []*AllowedPniNPnIDItem `protobuf:"bytes,1,rep,name=value,proto3" json:"value,omitempty" aper:"valueExt,sizeLB:1,sizeUB:16,"`
}

func (x *AllowedPniNPnIDList) Reset() {
	*x = AllowedPniNPnIDList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AllowedPniNPnIDList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AllowedPniNPnIDList) ProtoMessage() {}

func (x *AllowedPniNPnIDList) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AllowedPniNPnIDList.ProtoReflect.Descriptor instead.
func (*AllowedPniNPnIDList) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{11}
}

func (x *AllowedPniNPnIDList) GetValue() []*AllowedPniNPnIDItem {
	if x != nil {
		return x.Value
	}
	return nil
}

// value set from xnap_v1.asn1:3263
// {AllowedPNI-NPN-ID-Item-ExtIEs}
type AllowedPniNPnIDItemExtIes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *emptypb.Empty `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *AllowedPniNPnIDItemExtIes) Reset() {
	*x = AllowedPniNPnIDItemExtIes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AllowedPniNPnIDItemExtIes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AllowedPniNPnIDItemExtIes) ProtoMessage() {}

func (x *AllowedPniNPnIDItemExtIes) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AllowedPniNPnIDItemExtIes.ProtoReflect.Descriptor instead.
func (*AllowedPniNPnIDItemExtIes) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{12}
}

func (x *AllowedPniNPnIDItemExtIes) GetValue() *emptypb.Empty {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:3256
// @inject_tag: aper:"valueExt"
// {AllowedPNI-NPN-ID-Item}
type AllowedPniNPnIDItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlmnId *PlmnIdentity `protobuf:"bytes,1,opt,name=plmn_id,json=plmn-id,proto3" json:"plmn_id,omitempty"`
	// @inject_tag: aper:"valueExt,valueLB:0,valueUB:1,"
	PniNpnRestrictedInformation PniNPnRestrictedInformation `protobuf:"varint,2,opt,name=pni_npn_restricted_information,json=pni-npn-restricted-information,proto3,enum=xnap.v1.PniNPnRestrictedInformation" json:"pni_npn_restricted_information,omitempty" aper:"valueExt,valueLB:0,valueUB:1,"`
	AllowedCagIdListPerPlmn     *AllowedCagIDListperPlmn    `protobuf:"bytes,3,opt,name=allowed_cag_id_list_per_plmn,json=allowed-CAG-id-list-per-plmn,proto3" json:"allowed_cag_id_list_per_plmn,omitempty"`
	// @inject_tag: aper:"optional,sizeLB:1,"
	IEExtensions []*AllowedPniNPnIDItemExtIes `protobuf:"bytes,4,rep,name=i_e_extensions,json=iE-Extensions,proto3" json:"i_e_extensions,omitempty" aper:"optional,sizeLB:1,"`
}

func (x *AllowedPniNPnIDItem) Reset() {
	*x = AllowedPniNPnIDItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AllowedPniNPnIDItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AllowedPniNPnIDItem) ProtoMessage() {}

func (x *AllowedPniNPnIDItem) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AllowedPniNPnIDItem.ProtoReflect.Descriptor instead.
func (*AllowedPniNPnIDItem) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{13}
}

func (x *AllowedPniNPnIDItem) GetPlmnId() *PlmnIdentity {
	if x != nil {
		return x.PlmnId
	}
	return nil
}

func (x *AllowedPniNPnIDItem) GetPniNpnRestrictedInformation() PniNPnRestrictedInformation {
	if x != nil {
		return x.PniNpnRestrictedInformation
	}
	return PniNPnRestrictedInformation_PNI_NPN_RESTRICTED_INFORMATION_RESTRICED
}

func (x *AllowedPniNPnIDItem) GetAllowedCagIdListPerPlmn() *AllowedCagIDListperPlmn {
	if x != nil {
		return x.AllowedCagIdListPerPlmn
	}
	return nil
}

func (x *AllowedPniNPnIDItem) GetIEExtensions() []*AllowedPniNPnIDItemExtIes {
	if x != nil {
		return x.IEExtensions
	}
	return nil
}

// sequence from xnap_v1.asn1:3269
// {AlternativeQoSParaSetList}
type AlternativeQoSparaSetList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"valueExt,sizeLB:1,sizeUB:8,"
	Value []*AlternativeQoSparaSetItem `protobuf:"bytes,1,rep,name=value,proto3" json:"value,omitempty" aper:"valueExt,sizeLB:1,sizeUB:8,"`
}

func (x *AlternativeQoSparaSetList) Reset() {
	*x = AlternativeQoSparaSetList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AlternativeQoSparaSetList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AlternativeQoSparaSetList) ProtoMessage() {}

func (x *AlternativeQoSparaSetList) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AlternativeQoSparaSetList.ProtoReflect.Descriptor instead.
func (*AlternativeQoSparaSetList) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{14}
}

func (x *AlternativeQoSparaSetList) GetValue() []*AlternativeQoSparaSetItem {
	if x != nil {
		return x.Value
	}
	return nil
}

// value set from xnap_v1.asn1:3279
// {AlternativeQoSParaSetItem-ExtIEs}
type AlternativeQoSparaSetItemExtIes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *emptypb.Empty `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *AlternativeQoSparaSetItemExtIes) Reset() {
	*x = AlternativeQoSparaSetItemExtIes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AlternativeQoSparaSetItemExtIes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AlternativeQoSparaSetItemExtIes) ProtoMessage() {}

func (x *AlternativeQoSparaSetItemExtIes) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AlternativeQoSparaSetItemExtIes.ProtoReflect.Descriptor instead.
func (*AlternativeQoSparaSetItemExtIes) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{15}
}

func (x *AlternativeQoSparaSetItemExtIes) GetValue() *emptypb.Empty {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:3270
// @inject_tag: aper:"valueExt"
// {AlternativeQoSParaSetItem}
type AlternativeQoSparaSetItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AlternativeQoSparaSetIndex *QoSparaSetIndex `protobuf:"bytes,1,opt,name=alternative_qo_spara_set_index,json=alternativeQoSParaSetIndex,proto3" json:"alternative_qo_spara_set_index,omitempty"`
	// @inject_tag: aper:"optional,"
	GuaranteedFlowBitRateDl *BitRate `protobuf:"bytes,2,opt,name=guaranteed_flow_bit_rate_dl,json=guaranteedFlowBitRateDL,proto3,oneof" json:"guaranteed_flow_bit_rate_dl,omitempty" aper:"optional,"`
	// @inject_tag: aper:"optional,"
	GuaranteedFlowBitRateUl *BitRate `protobuf:"bytes,3,opt,name=guaranteed_flow_bit_rate_ul,json=guaranteedFlowBitRateUL,proto3,oneof" json:"guaranteed_flow_bit_rate_ul,omitempty" aper:"optional,"`
	// @inject_tag: aper:"optional,"
	PacketDelayBudget *PacketDelayBudget `protobuf:"bytes,4,opt,name=packet_delay_budget,json=packetDelayBudget,proto3,oneof" json:"packet_delay_budget,omitempty" aper:"optional,"`
	// @inject_tag: aper:"optional,valueExt,"
	PacketErrorRate *PacketErrorRate `protobuf:"bytes,5,opt,name=packet_error_rate,json=packetErrorRate,proto3,oneof" json:"packet_error_rate,omitempty" aper:"optional,valueExt,"`
	// @inject_tag: aper:"optional,sizeLB:1,"
	IEExtensions []*AlternativeQoSparaSetItemExtIes `protobuf:"bytes,6,rep,name=i_e_extensions,json=iE-Extensions,proto3" json:"i_e_extensions,omitempty" aper:"optional,sizeLB:1,"`
}

func (x *AlternativeQoSparaSetItem) Reset() {
	*x = AlternativeQoSparaSetItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AlternativeQoSparaSetItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AlternativeQoSparaSetItem) ProtoMessage() {}

func (x *AlternativeQoSparaSetItem) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AlternativeQoSparaSetItem.ProtoReflect.Descriptor instead.
func (*AlternativeQoSparaSetItem) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{16}
}

func (x *AlternativeQoSparaSetItem) GetAlternativeQoSparaSetIndex() *QoSparaSetIndex {
	if x != nil {
		return x.AlternativeQoSparaSetIndex
	}
	return nil
}

func (x *AlternativeQoSparaSetItem) GetGuaranteedFlowBitRateDl() *BitRate {
	if x != nil {
		return x.GuaranteedFlowBitRateDl
	}
	return nil
}

func (x *AlternativeQoSparaSetItem) GetGuaranteedFlowBitRateUl() *BitRate {
	if x != nil {
		return x.GuaranteedFlowBitRateUl
	}
	return nil
}

func (x *AlternativeQoSparaSetItem) GetPacketDelayBudget() *PacketDelayBudget {
	if x != nil {
		return x.PacketDelayBudget
	}
	return nil
}

func (x *AlternativeQoSparaSetItem) GetPacketErrorRate() *PacketErrorRate {
	if x != nil {
		return x.PacketErrorRate
	}
	return nil
}

func (x *AlternativeQoSparaSetItem) GetIEExtensions() []*AlternativeQoSparaSetItemExtIes {
	if x != nil {
		return x.IEExtensions
	}
	return nil
}

// sequence from xnap_v1.asn1:3286
// {AMF-Region-Information}
type AmfRegionInformation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"valueExt,sizeLB:1,sizeUB:16,"
	Value []*GlobalAmfRegionInformation `protobuf:"bytes,1,rep,name=value,proto3" json:"value,omitempty" aper:"valueExt,sizeLB:1,sizeUB:16,"`
}

func (x *AmfRegionInformation) Reset() {
	*x = AmfRegionInformation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AmfRegionInformation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AmfRegionInformation) ProtoMessage() {}

func (x *AmfRegionInformation) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AmfRegionInformation.ProtoReflect.Descriptor instead.
func (*AmfRegionInformation) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{17}
}

func (x *AmfRegionInformation) GetValue() []*GlobalAmfRegionInformation {
	if x != nil {
		return x.Value
	}
	return nil
}

// value set from xnap_v1.asn1:3293
// {GlobalAMF-Region-Information-ExtIEs}
type GlobalAmfRegionInformationExtIes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *emptypb.Empty `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *GlobalAmfRegionInformationExtIes) Reset() {
	*x = GlobalAmfRegionInformationExtIes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GlobalAmfRegionInformationExtIes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GlobalAmfRegionInformationExtIes) ProtoMessage() {}

func (x *GlobalAmfRegionInformationExtIes) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GlobalAmfRegionInformationExtIes.ProtoReflect.Descriptor instead.
func (*GlobalAmfRegionInformationExtIes) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{18}
}

func (x *GlobalAmfRegionInformationExtIes) GetValue() *emptypb.Empty {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:3287
// @inject_tag: aper:"valueExt"
// {GlobalAMF-Region-Information}
type GlobalAmfRegionInformation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlmnId *PlmnIdentity `protobuf:"bytes,1,opt,name=plmn_id,json=plmn-ID,proto3" json:"plmn_id,omitempty"`
	// @inject_tag: aper:"sizeLB:8,sizeUB:8,"
	AmfRegionId *asn1.BitString `protobuf:"bytes,2,opt,name=amf_region_id,json=amf-region-id,proto3" json:"amf_region_id,omitempty" aper:"sizeLB:8,sizeUB:8,"`
	// @inject_tag: aper:"optional,sizeLB:1,sizeUB:65535,valueExt"
	IEExtensions []*GlobalAmfRegionInformationExtIes `protobuf:"bytes,3,rep,name=i_e_extensions,json=iE-Extensions,proto3" json:"i_e_extensions,omitempty" aper:"optional,sizeLB:1,sizeUB:65535,valueExt"`
}

func (x *GlobalAmfRegionInformation) Reset() {
	*x = GlobalAmfRegionInformation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GlobalAmfRegionInformation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GlobalAmfRegionInformation) ProtoMessage() {}

func (x *GlobalAmfRegionInformation) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GlobalAmfRegionInformation.ProtoReflect.Descriptor instead.
func (*GlobalAmfRegionInformation) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{19}
}

func (x *GlobalAmfRegionInformation) GetPlmnId() *PlmnIdentity {
	if x != nil {
		return x.PlmnId
	}
	return nil
}

func (x *GlobalAmfRegionInformation) GetAmfRegionId() *asn1.BitString {
	if x != nil {
		return x.AmfRegionId
	}
	return nil
}

func (x *GlobalAmfRegionInformation) GetIEExtensions() []*GlobalAmfRegionInformationExtIes {
	if x != nil {
		return x.IEExtensions
	}
	return nil
}

// range of Integer from xnap_v1.asn1:3298
// {AMF-UE-NGAP-ID}
type AmfUENGapID struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"valueLB:0,valueUB:1099511627775,"
	Value int64 `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty" aper:"valueLB:0,valueUB:1099511627775,"`
}

func (x *AmfUENGapID) Reset() {
	*x = AmfUENGapID{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AmfUENGapID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AmfUENGapID) ProtoMessage() {}

func (x *AmfUENGapID) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AmfUENGapID.ProtoReflect.Descriptor instead.
func (*AmfUENGapID) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{20}
}

func (x *AmfUENGapID) GetValue() int64 {
	if x != nil {
		return x.Value
	}
	return 0
}

// sequence from xnap_v1.asn1:3303
// {AreaOfInterestInformation}
type AreaOfInterestInformation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"valueExt,sizeLB:1,sizeUB:64,"
	Value []*AreaOfInterestItem `protobuf:"bytes,1,rep,name=value,proto3" json:"value,omitempty" aper:"valueExt,sizeLB:1,sizeUB:64,"`
}

func (x *AreaOfInterestInformation) Reset() {
	*x = AreaOfInterestInformation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AreaOfInterestInformation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AreaOfInterestInformation) ProtoMessage() {}

func (x *AreaOfInterestInformation) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AreaOfInterestInformation.ProtoReflect.Descriptor instead.
func (*AreaOfInterestInformation) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{21}
}

func (x *AreaOfInterestInformation) GetValue() []*AreaOfInterestItem {
	if x != nil {
		return x.Value
	}
	return nil
}

// value set from xnap_v1.asn1:3312
// {AreaOfInterest-Item-ExtIEs}
type AreaOfInterestItemExtIes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *emptypb.Empty `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *AreaOfInterestItemExtIes) Reset() {
	*x = AreaOfInterestItemExtIes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AreaOfInterestItemExtIes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AreaOfInterestItemExtIes) ProtoMessage() {}

func (x *AreaOfInterestItemExtIes) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AreaOfInterestItemExtIes.ProtoReflect.Descriptor instead.
func (*AreaOfInterestItemExtIes) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{22}
}

func (x *AreaOfInterestItemExtIes) GetValue() *emptypb.Empty {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:3304
// @inject_tag: aper:"valueExt"
// {AreaOfInterest-Item}
type AreaOfInterestItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"optional,"
	ListOfTaisinAoI *ListOfTaisinAoI `protobuf:"bytes,1,opt,name=list_of_taisin_ao_i,json=listOfTAIsinAoI,proto3,oneof" json:"list_of_taisin_ao_i,omitempty" aper:"optional,"`
	// @inject_tag: aper:"optional,"
	ListOfCellsinAoI *ListOfCells `protobuf:"bytes,2,opt,name=list_of_cellsin_ao_i,json=listOfCellsinAoI,proto3,oneof" json:"list_of_cellsin_ao_i,omitempty" aper:"optional,"`
	// @inject_tag: aper:"optional,"
	ListOfRannodesinAoI *ListOfRannodesinAoI `protobuf:"bytes,3,opt,name=list_of_rannodesin_ao_i,json=listOfRANNodesinAoI,proto3,oneof" json:"list_of_rannodesin_ao_i,omitempty" aper:"optional,"`
	RequestReferenceId  *RequestReferenceId  `protobuf:"bytes,4,opt,name=request_reference_id,json=requestReferenceID,proto3" json:"request_reference_id,omitempty"`
	// @inject_tag: aper:"optional,sizeLB:1,"
	IEExtensions []*AreaOfInterestItemExtIes `protobuf:"bytes,5,rep,name=i_e_extensions,json=iE-Extensions,proto3" json:"i_e_extensions,omitempty" aper:"optional,sizeLB:1,"`
}

func (x *AreaOfInterestItem) Reset() {
	*x = AreaOfInterestItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AreaOfInterestItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AreaOfInterestItem) ProtoMessage() {}

func (x *AreaOfInterestItem) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AreaOfInterestItem.ProtoReflect.Descriptor instead.
func (*AreaOfInterestItem) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{23}
}

func (x *AreaOfInterestItem) GetListOfTaisinAoI() *ListOfTaisinAoI {
	if x != nil {
		return x.ListOfTaisinAoI
	}
	return nil
}

func (x *AreaOfInterestItem) GetListOfCellsinAoI() *ListOfCells {
	if x != nil {
		return x.ListOfCellsinAoI
	}
	return nil
}

func (x *AreaOfInterestItem) GetListOfRannodesinAoI() *ListOfRannodesinAoI {
	if x != nil {
		return x.ListOfRannodesinAoI
	}
	return nil
}

func (x *AreaOfInterestItem) GetRequestReferenceId() *RequestReferenceId {
	if x != nil {
		return x.RequestReferenceId
	}
	return nil
}

func (x *AreaOfInterestItem) GetIEExtensions() []*AreaOfInterestItemExtIes {
	if x != nil {
		return x.IEExtensions
	}
	return nil
}

// sequence from xnap_v1.asn1:3318
// @inject_tag: aper:"choiceExt"
// {AreaScopeOfMDT-NR}
type AreaScopeOfMdtNR struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// choice from xnap_v1.asn1:3318
	//
	// Types that are assignable to AreaScopeOfMdtNr:
	//	*AreaScopeOfMdtNR_CellBased
	//	*AreaScopeOfMdtNR_TAbased
	//	*AreaScopeOfMdtNR_TAibased
	AreaScopeOfMdtNr isAreaScopeOfMdtNR_AreaScopeOfMdtNr `protobuf_oneof:"area_scope_of_mdt_nr"`
}

func (x *AreaScopeOfMdtNR) Reset() {
	*x = AreaScopeOfMdtNR{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AreaScopeOfMdtNR) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AreaScopeOfMdtNR) ProtoMessage() {}

func (x *AreaScopeOfMdtNR) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AreaScopeOfMdtNR.ProtoReflect.Descriptor instead.
func (*AreaScopeOfMdtNR) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{24}
}

func (m *AreaScopeOfMdtNR) GetAreaScopeOfMdtNr() isAreaScopeOfMdtNR_AreaScopeOfMdtNr {
	if m != nil {
		return m.AreaScopeOfMdtNr
	}
	return nil
}

func (x *AreaScopeOfMdtNR) GetCellBased() *CellBasedMdtNR {
	if x, ok := x.GetAreaScopeOfMdtNr().(*AreaScopeOfMdtNR_CellBased); ok {
		return x.CellBased
	}
	return nil
}

func (x *AreaScopeOfMdtNR) GetTAbased() *TabasedMdt {
	if x, ok := x.GetAreaScopeOfMdtNr().(*AreaScopeOfMdtNR_TAbased); ok {
		return x.TAbased
	}
	return nil
}

func (x *AreaScopeOfMdtNR) GetTAibased() *TaibasedMdt {
	if x, ok := x.GetAreaScopeOfMdtNr().(*AreaScopeOfMdtNR_TAibased); ok {
		return x.TAibased
	}
	return nil
}

type isAreaScopeOfMdtNR_AreaScopeOfMdtNr interface {
	isAreaScopeOfMdtNR_AreaScopeOfMdtNr()
}

type AreaScopeOfMdtNR_CellBased struct {
	// @inject_tag: aper:"choiceIdx:1,valueExt,"
	CellBased *CellBasedMdtNR `protobuf:"bytes,1,opt,name=cell_based,json=cellBased,proto3,oneof" aper:"choiceIdx:1,valueExt,"`
}

type AreaScopeOfMdtNR_TAbased struct {
	// @inject_tag: aper:"choiceIdx:2,valueExt,"
	TAbased *TabasedMdt `protobuf:"bytes,2,opt,name=t_abased,json=tABased,proto3,oneof" aper:"choiceIdx:2,valueExt,"`
}

type AreaScopeOfMdtNR_TAibased struct {
	// @inject_tag: aper:"choiceIdx:3,valueExt,"
	TAibased *TaibasedMdt `protobuf:"bytes,3,opt,name=t_aibased,json=tAIBased,proto3,oneof" aper:"choiceIdx:3,valueExt,"`
}

func (*AreaScopeOfMdtNR_CellBased) isAreaScopeOfMdtNR_AreaScopeOfMdtNr() {}

func (*AreaScopeOfMdtNR_TAbased) isAreaScopeOfMdtNR_AreaScopeOfMdtNr() {}

func (*AreaScopeOfMdtNR_TAibased) isAreaScopeOfMdtNR_AreaScopeOfMdtNr() {}

// sequence from xnap_v1.asn1:3324
// @inject_tag: aper:"choiceExt"
// {AreaScopeOfMDT-EUTRA}
type AreaScopeOfMdtEUtra struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// choice from xnap_v1.asn1:3324
	//
	// Types that are assignable to AreaScopeOfMdtEutra:
	//	*AreaScopeOfMdtEUtra_CellBased
	//	*AreaScopeOfMdtEUtra_TAbased
	//	*AreaScopeOfMdtEUtra_TAibased
	AreaScopeOfMdtEutra isAreaScopeOfMdtEUtra_AreaScopeOfMdtEutra `protobuf_oneof:"area_scope_of_mdt_eutra"`
}

func (x *AreaScopeOfMdtEUtra) Reset() {
	*x = AreaScopeOfMdtEUtra{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AreaScopeOfMdtEUtra) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AreaScopeOfMdtEUtra) ProtoMessage() {}

func (x *AreaScopeOfMdtEUtra) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AreaScopeOfMdtEUtra.ProtoReflect.Descriptor instead.
func (*AreaScopeOfMdtEUtra) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{25}
}

func (m *AreaScopeOfMdtEUtra) GetAreaScopeOfMdtEutra() isAreaScopeOfMdtEUtra_AreaScopeOfMdtEutra {
	if m != nil {
		return m.AreaScopeOfMdtEutra
	}
	return nil
}

func (x *AreaScopeOfMdtEUtra) GetCellBased() *CellBasedMdtEUtra {
	if x, ok := x.GetAreaScopeOfMdtEutra().(*AreaScopeOfMdtEUtra_CellBased); ok {
		return x.CellBased
	}
	return nil
}

func (x *AreaScopeOfMdtEUtra) GetTAbased() *TabasedMdt {
	if x, ok := x.GetAreaScopeOfMdtEutra().(*AreaScopeOfMdtEUtra_TAbased); ok {
		return x.TAbased
	}
	return nil
}

func (x *AreaScopeOfMdtEUtra) GetTAibased() *TaibasedMdt {
	if x, ok := x.GetAreaScopeOfMdtEutra().(*AreaScopeOfMdtEUtra_TAibased); ok {
		return x.TAibased
	}
	return nil
}

type isAreaScopeOfMdtEUtra_AreaScopeOfMdtEutra interface {
	isAreaScopeOfMdtEUtra_AreaScopeOfMdtEutra()
}

type AreaScopeOfMdtEUtra_CellBased struct {
	// @inject_tag: aper:"choiceIdx:1,valueExt,"
	CellBased *CellBasedMdtEUtra `protobuf:"bytes,1,opt,name=cell_based,json=cellBased,proto3,oneof" aper:"choiceIdx:1,valueExt,"`
}

type AreaScopeOfMdtEUtra_TAbased struct {
	// @inject_tag: aper:"choiceIdx:2,valueExt,"
	TAbased *TabasedMdt `protobuf:"bytes,2,opt,name=t_abased,json=tABased,proto3,oneof" aper:"choiceIdx:2,valueExt,"`
}

type AreaScopeOfMdtEUtra_TAibased struct {
	// @inject_tag: aper:"choiceIdx:3,valueExt,"
	TAibased *TaibasedMdt `protobuf:"bytes,3,opt,name=t_aibased,json=tAIBased,proto3,oneof" aper:"choiceIdx:3,valueExt,"`
}

func (*AreaScopeOfMdtEUtra_CellBased) isAreaScopeOfMdtEUtra_AreaScopeOfMdtEutra() {}

func (*AreaScopeOfMdtEUtra_TAbased) isAreaScopeOfMdtEUtra_AreaScopeOfMdtEutra() {}

func (*AreaScopeOfMdtEUtra_TAibased) isAreaScopeOfMdtEUtra_AreaScopeOfMdtEutra() {}

// sequence from xnap_v1.asn1:3332
// {AreaScopeOfNeighCellsList}
type AreaScopeOfNeighCellsList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"valueExt,sizeLB:1,sizeUB:8,"
	Value []*AreaScopeOfNeighCellsItem `protobuf:"bytes,1,rep,name=value,proto3" json:"value,omitempty" aper:"valueExt,sizeLB:1,sizeUB:8,"`
}

func (x *AreaScopeOfNeighCellsList) Reset() {
	*x = AreaScopeOfNeighCellsList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AreaScopeOfNeighCellsList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AreaScopeOfNeighCellsList) ProtoMessage() {}

func (x *AreaScopeOfNeighCellsList) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AreaScopeOfNeighCellsList.ProtoReflect.Descriptor instead.
func (*AreaScopeOfNeighCellsList) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{26}
}

func (x *AreaScopeOfNeighCellsList) GetValue() []*AreaScopeOfNeighCellsItem {
	if x != nil {
		return x.Value
	}
	return nil
}

// value set from xnap_v1.asn1:3339
// {AreaScopeOfNeighCellsItem-ExtIEs}
type AreaScopeOfNeighCellsItemExtIes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *emptypb.Empty `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *AreaScopeOfNeighCellsItemExtIes) Reset() {
	*x = AreaScopeOfNeighCellsItemExtIes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AreaScopeOfNeighCellsItemExtIes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AreaScopeOfNeighCellsItemExtIes) ProtoMessage() {}

func (x *AreaScopeOfNeighCellsItemExtIes) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AreaScopeOfNeighCellsItemExtIes.ProtoReflect.Descriptor instead.
func (*AreaScopeOfNeighCellsItemExtIes) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{27}
}

func (x *AreaScopeOfNeighCellsItemExtIes) GetValue() *emptypb.Empty {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:3333
// @inject_tag: aper:"valueExt"
// {AreaScopeOfNeighCellsItem}
type AreaScopeOfNeighCellsItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"valueExt,"
	NrFrequencyInfo *NrfrequencyInfo `protobuf:"bytes,1,opt,name=nr_frequency_info,json=nrFrequencyInfo,proto3" json:"nr_frequency_info,omitempty" aper:"valueExt,"`
	// @inject_tag: aper:"optional,"
	PciListForMdt *PcilistForMdt `protobuf:"bytes,2,opt,name=pci_list_for_mdt,json=pciListForMDT,proto3,oneof" json:"pci_list_for_mdt,omitempty" aper:"optional,"`
	// @inject_tag: aper:"optional,sizeLB:1,"
	IEExtensions []*AreaScopeOfNeighCellsItemExtIes `protobuf:"bytes,3,rep,name=i_e_extensions,json=iE-Extensions,proto3" json:"i_e_extensions,omitempty" aper:"optional,sizeLB:1,"`
}

func (x *AreaScopeOfNeighCellsItem) Reset() {
	*x = AreaScopeOfNeighCellsItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AreaScopeOfNeighCellsItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AreaScopeOfNeighCellsItem) ProtoMessage() {}

func (x *AreaScopeOfNeighCellsItem) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AreaScopeOfNeighCellsItem.ProtoReflect.Descriptor instead.
func (*AreaScopeOfNeighCellsItem) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{28}
}

func (x *AreaScopeOfNeighCellsItem) GetNrFrequencyInfo() *NrfrequencyInfo {
	if x != nil {
		return x.NrFrequencyInfo
	}
	return nil
}

func (x *AreaScopeOfNeighCellsItem) GetPciListForMdt() *PcilistForMdt {
	if x != nil {
		return x.PciListForMdt
	}
	return nil
}

func (x *AreaScopeOfNeighCellsItem) GetIEExtensions() []*AreaScopeOfNeighCellsItemExtIes {
	if x != nil {
		return x.IEExtensions
	}
	return nil
}

// value set from xnap_v1.asn1:3350
// {AS-SecurityInformation-ExtIEs}
type AsSecurityInformationExtIes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *emptypb.Empty `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *AsSecurityInformationExtIes) Reset() {
	*x = AsSecurityInformationExtIes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AsSecurityInformationExtIes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AsSecurityInformationExtIes) ProtoMessage() {}

func (x *AsSecurityInformationExtIes) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AsSecurityInformationExtIes.ProtoReflect.Descriptor instead.
func (*AsSecurityInformationExtIes) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{29}
}

func (x *AsSecurityInformationExtIes) GetValue() *emptypb.Empty {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:3344
// @inject_tag: aper:"valueExt"
// {AS-SecurityInformation}
type AsSecurityInformation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"sizeLB:256,sizeUB:256,"
	KeyNgRanStar *asn1.BitString `protobuf:"bytes,1,opt,name=key_ng_ran_star,json=key-NG-RAN-Star,proto3" json:"key_ng_ran_star,omitempty" aper:"sizeLB:256,sizeUB:256,"`
	// @inject_tag: aper:"valueLB:0,valueUB:7,"
	Ncc int32 `protobuf:"varint,2,opt,name=ncc,proto3" json:"ncc,omitempty" aper:"valueLB:0,valueUB:7,"`
	// @inject_tag: aper:"optional,sizeLB:1,"
	IEExtensions []*AsSecurityInformationExtIes `protobuf:"bytes,3,rep,name=i_e_extensions,json=iE-Extensions,proto3" json:"i_e_extensions,omitempty" aper:"optional,sizeLB:1,"`
}

func (x *AsSecurityInformation) Reset() {
	*x = AsSecurityInformation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AsSecurityInformation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AsSecurityInformation) ProtoMessage() {}

func (x *AsSecurityInformation) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AsSecurityInformation.ProtoReflect.Descriptor instead.
func (*AsSecurityInformation) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{30}
}

func (x *AsSecurityInformation) GetKeyNgRanStar() *asn1.BitString {
	if x != nil {
		return x.KeyNgRanStar
	}
	return nil
}

func (x *AsSecurityInformation) GetNcc() int32 {
	if x != nil {
		return x.Ncc
	}
	return 0
}

func (x *AsSecurityInformation) GetIEExtensions() []*AsSecurityInformationExtIes {
	if x != nil {
		return x.IEExtensions
	}
	return nil
}

// value set from xnap_v1.asn1:3361
// {AssistanceDataForRANPaging-ExtIEs}
type AssistanceDataForRanpagingExtIes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *emptypb.Empty `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *AssistanceDataForRanpagingExtIes) Reset() {
	*x = AssistanceDataForRanpagingExtIes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssistanceDataForRanpagingExtIes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssistanceDataForRanpagingExtIes) ProtoMessage() {}

func (x *AssistanceDataForRanpagingExtIes) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssistanceDataForRanpagingExtIes.ProtoReflect.Descriptor instead.
func (*AssistanceDataForRanpagingExtIes) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{31}
}

func (x *AssistanceDataForRanpagingExtIes) GetValue() *emptypb.Empty {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:3356
// @inject_tag: aper:"valueExt"
// {AssistanceDataForRANPaging}
type AssistanceDataForRanpaging struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"optional,valueExt,"
	RanPagingAttemptInfo *RanpagingAttemptInfo `protobuf:"bytes,1,opt,name=ran_paging_attempt_info,json=ran-paging-attempt-info,proto3,oneof" json:"ran_paging_attempt_info,omitempty" aper:"optional,valueExt,"`
	// @inject_tag: aper:"optional,sizeLB:1,"
	IEExtensions []*AssistanceDataForRanpagingExtIes `protobuf:"bytes,2,rep,name=i_e_extensions,json=iE-Extensions,proto3" json:"i_e_extensions,omitempty" aper:"optional,sizeLB:1,"`
}

func (x *AssistanceDataForRanpaging) Reset() {
	*x = AssistanceDataForRanpaging{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssistanceDataForRanpaging) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssistanceDataForRanpaging) ProtoMessage() {}

func (x *AssistanceDataForRanpaging) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssistanceDataForRanpaging.ProtoReflect.Descriptor instead.
func (*AssistanceDataForRanpaging) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{32}
}

func (x *AssistanceDataForRanpaging) GetRanPagingAttemptInfo() *RanpagingAttemptInfo {
	if x != nil {
		return x.RanPagingAttemptInfo
	}
	return nil
}

func (x *AssistanceDataForRanpaging) GetIEExtensions() []*AssistanceDataForRanpagingExtIes {
	if x != nil {
		return x.IEExtensions
	}
	return nil
}

// range of Integer from xnap_v1.asn1:3367
// {AvailableCapacity}
type AvailableCapacity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"valueExt,valueLB:1,valueUB:100,"
	Value int32 `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty" aper:"valueExt,valueLB:1,valueUB:100,"`
}

func (x *AvailableCapacity) Reset() {
	*x = AvailableCapacity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AvailableCapacity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AvailableCapacity) ProtoMessage() {}

func (x *AvailableCapacity) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AvailableCapacity.ProtoReflect.Descriptor instead.
func (*AvailableCapacity) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{33}
}

func (x *AvailableCapacity) GetValue() int32 {
	if x != nil {
		return x.Value
	}
	return 0
}

// range of Integer from xnap_v1.asn1:3370
// {AvailableRRCConnectionCapacityValue}
type AvailableRrcconnectionCapacityValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"valueLB:0,valueUB:100,"
	Value int32 `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty" aper:"valueLB:0,valueUB:100,"`
}

func (x *AvailableRrcconnectionCapacityValue) Reset() {
	*x = AvailableRrcconnectionCapacityValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AvailableRrcconnectionCapacityValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AvailableRrcconnectionCapacityValue) ProtoMessage() {}

func (x *AvailableRrcconnectionCapacityValue) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AvailableRrcconnectionCapacityValue.ProtoReflect.Descriptor instead.
func (*AvailableRrcconnectionCapacityValue) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{34}
}

func (x *AvailableRrcconnectionCapacityValue) GetValue() int32 {
	if x != nil {
		return x.Value
	}
	return 0
}

// range of Integer from xnap_v1.asn1:3373
// {AveragingWindow}
type AveragingWindow struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"valueExt,valueLB:0,valueUB:4095,"
	Value int32 `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty" aper:"valueExt,valueLB:0,valueUB:4095,"`
}

func (x *AveragingWindow) Reset() {
	*x = AveragingWindow{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AveragingWindow) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AveragingWindow) ProtoMessage() {}

func (x *AveragingWindow) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AveragingWindow.ProtoReflect.Descriptor instead.
func (*AveragingWindow) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{35}
}

func (x *AveragingWindow) GetValue() int32 {
	if x != nil {
		return x.Value
	}
	return 0
}

// value set from xnap_v1.asn1:3386
// {BluetoothMeasurementConfiguration-ExtIEs}
type BluetoothMeasurementConfigurationExtIes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *emptypb.Empty `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *BluetoothMeasurementConfigurationExtIes) Reset() {
	*x = BluetoothMeasurementConfigurationExtIes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BluetoothMeasurementConfigurationExtIes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BluetoothMeasurementConfigurationExtIes) ProtoMessage() {}

func (x *BluetoothMeasurementConfigurationExtIes) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BluetoothMeasurementConfigurationExtIes.ProtoReflect.Descriptor instead.
func (*BluetoothMeasurementConfigurationExtIes) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{36}
}

func (x *BluetoothMeasurementConfigurationExtIes) GetValue() *emptypb.Empty {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:3379
// @inject_tag: aper:"valueExt"
// {BluetoothMeasurementConfiguration}
type BluetoothMeasurementConfiguration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"valueExt,valueLB:0,valueUB:0,"
	BluetoothMeasConfig BluetoothMeasConfig `protobuf:"varint,1,opt,name=bluetooth_meas_config,json=bluetoothMeasConfig,proto3,enum=xnap.v1.BluetoothMeasConfig" json:"bluetooth_meas_config,omitempty" aper:"valueExt,valueLB:0,valueUB:0,"`
	// @inject_tag: aper:"optional,"
	BluetoothMeasConfigNameList *BluetoothMeasConfigNameList `protobuf:"bytes,2,opt,name=bluetooth_meas_config_name_list,json=bluetoothMeasConfigNameList,proto3,oneof" json:"bluetooth_meas_config_name_list,omitempty" aper:"optional,"`
	// @inject_tag: aper:"optional,valueExt,valueLB:0,valueUB:0,"
	BtRssi *BtrssiBluetoothMeasurementConfiguration `protobuf:"varint,3,opt,name=bt_rssi,json=bt-rssi,proto3,enum=xnap.v1.BtrssiBluetoothMeasurementConfiguration,oneof" json:"bt_rssi,omitempty" aper:"optional,valueExt,valueLB:0,valueUB:0,"`
	// @inject_tag: aper:"optional,sizeLB:1,"
	IEExtensions []*BluetoothMeasurementConfigurationExtIes `protobuf:"bytes,4,rep,name=i_e_extensions,json=iE-Extensions,proto3" json:"i_e_extensions,omitempty" aper:"optional,sizeLB:1,"`
}

func (x *BluetoothMeasurementConfiguration) Reset() {
	*x = BluetoothMeasurementConfiguration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BluetoothMeasurementConfiguration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BluetoothMeasurementConfiguration) ProtoMessage() {}

func (x *BluetoothMeasurementConfiguration) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BluetoothMeasurementConfiguration.ProtoReflect.Descriptor instead.
func (*BluetoothMeasurementConfiguration) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{37}
}

func (x *BluetoothMeasurementConfiguration) GetBluetoothMeasConfig() BluetoothMeasConfig {
	if x != nil {
		return x.BluetoothMeasConfig
	}
	return BluetoothMeasConfig_BLUETOOTH_MEAS_CONFIG_SETUP
}

func (x *BluetoothMeasurementConfiguration) GetBluetoothMeasConfigNameList() *BluetoothMeasConfigNameList {
	if x != nil {
		return x.BluetoothMeasConfigNameList
	}
	return nil
}

func (x *BluetoothMeasurementConfiguration) GetBtRssi() BtrssiBluetoothMeasurementConfiguration {
	if x != nil && x.BtRssi != nil {
		return *x.BtRssi
	}
	return BtrssiBluetoothMeasurementConfiguration_BTRSSI_BLUETOOTH_MEASUREMENT_CONFIGURATION_TRUE
}

func (x *BluetoothMeasurementConfiguration) GetIEExtensions() []*BluetoothMeasurementConfigurationExtIes {
	if x != nil {
		return x.IEExtensions
	}
	return nil
}

// sequence from xnap_v1.asn1:3392
// {BluetoothMeasConfigNameList}
type BluetoothMeasConfigNameList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"sizeLB:1,sizeUB:4,"
	Value []*BluetoothName `protobuf:"bytes,1,rep,name=value,proto3" json:"value,omitempty" aper:"sizeLB:1,sizeUB:4,"`
}

func (x *BluetoothMeasConfigNameList) Reset() {
	*x = BluetoothMeasConfigNameList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BluetoothMeasConfigNameList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BluetoothMeasConfigNameList) ProtoMessage() {}

func (x *BluetoothMeasConfigNameList) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BluetoothMeasConfigNameList.ProtoReflect.Descriptor instead.
func (*BluetoothMeasConfigNameList) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{38}
}

func (x *BluetoothMeasConfigNameList) GetValue() []*BluetoothName {
	if x != nil {
		return x.Value
	}
	return nil
}

// range of Integer from xnap_v1.asn1:3394
// {BluetoothName}
type BluetoothName struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"sizeLB:1,sizeUB:248,"
	Value []byte `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty" aper:"sizeLB:1,sizeUB:248,"`
}

func (x *BluetoothName) Reset() {
	*x = BluetoothName{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BluetoothName) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BluetoothName) ProtoMessage() {}

func (x *BluetoothName) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BluetoothName.ProtoReflect.Descriptor instead.
func (*BluetoothName) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{39}
}

func (x *BluetoothName) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:3399
// {BPLMN-ID-Info-EUTRA}
type BplmnIDInfoEUtra struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"valueExt,sizeLB:1,sizeUB:6,"
	Value []*BplmnIDInfoEUtraItem `protobuf:"bytes,1,rep,name=value,proto3" json:"value,omitempty" aper:"valueExt,sizeLB:1,sizeUB:6,"`
}

func (x *BplmnIDInfoEUtra) Reset() {
	*x = BplmnIDInfoEUtra{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BplmnIDInfoEUtra) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BplmnIDInfoEUtra) ProtoMessage() {}

func (x *BplmnIDInfoEUtra) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BplmnIDInfoEUtra.ProtoReflect.Descriptor instead.
func (*BplmnIDInfoEUtra) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{40}
}

func (x *BplmnIDInfoEUtra) GetValue() []*BplmnIDInfoEUtraItem {
	if x != nil {
		return x.Value
	}
	return nil
}

// value set from xnap_v1.asn1:3408
// {BPLMN-ID-Info-EUTRA-Item-ExtIEs}
type BplmnIDInfoEUtraItemExtIes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *emptypb.Empty `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *BplmnIDInfoEUtraItemExtIes) Reset() {
	*x = BplmnIDInfoEUtraItemExtIes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BplmnIDInfoEUtraItemExtIes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BplmnIDInfoEUtraItemExtIes) ProtoMessage() {}

func (x *BplmnIDInfoEUtraItemExtIes) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BplmnIDInfoEUtraItemExtIes.ProtoReflect.Descriptor instead.
func (*BplmnIDInfoEUtraItemExtIes) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{41}
}

func (x *BplmnIDInfoEUtraItemExtIes) GetValue() *emptypb.Empty {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:3400
// @inject_tag: aper:"valueExt"
// {BPLMN-ID-Info-EUTRA-Item}
type BplmnIDInfoEUtraItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BroadcastPlmns *BroadcastEutraplmns `protobuf:"bytes,1,opt,name=broadcast_plmns,json=broadcastPLMNs,proto3" json:"broadcast_plmns,omitempty"`
	Tac            *Tac                 `protobuf:"bytes,2,opt,name=tac,proto3" json:"tac,omitempty"`
	EUtraCi        *EUTraCellIdentity   `protobuf:"bytes,3,opt,name=e_utra_ci,json=e-utraCI,proto3" json:"e_utra_ci,omitempty"`
	// @inject_tag: aper:"optional,"
	Ranac *Ranac `protobuf:"bytes,4,opt,name=ranac,proto3,oneof" json:"ranac,omitempty" aper:"optional,"`
	// @inject_tag: aper:"optional,sizeLB:1,"
	IEExtension []*BplmnIDInfoEUtraItemExtIes `protobuf:"bytes,5,rep,name=i_e_extension,json=iE-Extension,proto3" json:"i_e_extension,omitempty" aper:"optional,sizeLB:1,"`
}

func (x *BplmnIDInfoEUtraItem) Reset() {
	*x = BplmnIDInfoEUtraItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BplmnIDInfoEUtraItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BplmnIDInfoEUtraItem) ProtoMessage() {}

func (x *BplmnIDInfoEUtraItem) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BplmnIDInfoEUtraItem.ProtoReflect.Descriptor instead.
func (*BplmnIDInfoEUtraItem) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{42}
}

func (x *BplmnIDInfoEUtraItem) GetBroadcastPlmns() *BroadcastEutraplmns {
	if x != nil {
		return x.BroadcastPlmns
	}
	return nil
}

func (x *BplmnIDInfoEUtraItem) GetTac() *Tac {
	if x != nil {
		return x.Tac
	}
	return nil
}

func (x *BplmnIDInfoEUtraItem) GetEUtraCi() *EUTraCellIdentity {
	if x != nil {
		return x.EUtraCi
	}
	return nil
}

func (x *BplmnIDInfoEUtraItem) GetRanac() *Ranac {
	if x != nil {
		return x.Ranac
	}
	return nil
}

func (x *BplmnIDInfoEUtraItem) GetIEExtension() []*BplmnIDInfoEUtraItemExtIes {
	if x != nil {
		return x.IEExtension
	}
	return nil
}

// sequence from xnap_v1.asn1:3414
// {BPLMN-ID-Info-NR}
type BplmnIDInfoNR struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"valueExt,sizeLB:1,sizeUB:12,"
	Value []*BplmnIDInfoNRItem `protobuf:"bytes,1,rep,name=value,proto3" json:"value,omitempty" aper:"valueExt,sizeLB:1,sizeUB:12,"`
}

func (x *BplmnIDInfoNR) Reset() {
	*x = BplmnIDInfoNR{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BplmnIDInfoNR) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BplmnIDInfoNR) ProtoMessage() {}

func (x *BplmnIDInfoNR) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BplmnIDInfoNR.ProtoReflect.Descriptor instead.
func (*BplmnIDInfoNR) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{43}
}

func (x *BplmnIDInfoNR) GetValue() []*BplmnIDInfoNRItem {
	if x != nil {
		return x.Value
	}
	return nil
}

// value set from xnap_v1.asn1:3423
// {BPLMN-ID-Info-NR-Item-ExtIEs&Extension}
type BplmnIDInfoNRItemExtIesExtension struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// value set translated as choice from xnap_v1.asn1:3423
	//
	// Types that are assignable to BplmnIdInfoNrItemExtIes:
	//	*BplmnIDInfoNRItemExtIesExtension_IdConfiguredTacindication
	//	*BplmnIDInfoNRItemExtIesExtension_IdNpnBroadcastInformation
	BplmnIdInfoNrItemExtIes isBplmnIDInfoNRItemExtIesExtension_BplmnIdInfoNrItemExtIes `protobuf_oneof:"bplmn_id_info_nr_item_ext_ies"`
}

func (x *BplmnIDInfoNRItemExtIesExtension) Reset() {
	*x = BplmnIDInfoNRItemExtIesExtension{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BplmnIDInfoNRItemExtIesExtension) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BplmnIDInfoNRItemExtIesExtension) ProtoMessage() {}

func (x *BplmnIDInfoNRItemExtIesExtension) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BplmnIDInfoNRItemExtIesExtension.ProtoReflect.Descriptor instead.
func (*BplmnIDInfoNRItemExtIesExtension) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{44}
}

func (m *BplmnIDInfoNRItemExtIesExtension) GetBplmnIdInfoNrItemExtIes() isBplmnIDInfoNRItemExtIesExtension_BplmnIdInfoNrItemExtIes {
	if m != nil {
		return m.BplmnIdInfoNrItemExtIes
	}
	return nil
}

func (x *BplmnIDInfoNRItemExtIesExtension) GetIdConfiguredTacindication() ConfiguredTacindication {
	if x, ok := x.GetBplmnIdInfoNrItemExtIes().(*BplmnIDInfoNRItemExtIesExtension_IdConfiguredTacindication); ok {
		return x.IdConfiguredTacindication
	}
	return ConfiguredTacindication_CONFIGURED_TACINDICATION_TRUE
}

func (x *BplmnIDInfoNRItemExtIesExtension) GetIdNpnBroadcastInformation() *NpnBroadcastInformation {
	if x, ok := x.GetBplmnIdInfoNrItemExtIes().(*BplmnIDInfoNRItemExtIesExtension_IdNpnBroadcastInformation); ok {
		return x.IdNpnBroadcastInformation
	}
	return nil
}

type isBplmnIDInfoNRItemExtIesExtension_BplmnIdInfoNrItemExtIes interface {
	isBplmnIDInfoNRItemExtIesExtension_BplmnIdInfoNrItemExtIes()
}

type BplmnIDInfoNRItemExtIesExtension_IdConfiguredTacindication struct {
	// @inject_tag: aper:"choiceIdx:1,valueExt,valueLB:0,valueUB:0,"
	IdConfiguredTacindication ConfiguredTacindication `protobuf:"varint,1,opt,name=id_configured_tacindication,json=id-ConfiguredTACIndication,proto3,enum=xnap.v1.ConfiguredTacindication,oneof" aper:"choiceIdx:1,valueExt,valueLB:0,valueUB:0,"`
}

type BplmnIDInfoNRItemExtIesExtension_IdNpnBroadcastInformation struct {
	// @inject_tag: aper:"choiceIdx:2,"
	IdNpnBroadcastInformation *NpnBroadcastInformation `protobuf:"bytes,2,opt,name=id_npn_broadcast_information,json=id-NPN-Broadcast-Information,proto3,oneof" aper:"choiceIdx:2,"`
}

func (*BplmnIDInfoNRItemExtIesExtension_IdConfiguredTacindication) isBplmnIDInfoNRItemExtIesExtension_BplmnIdInfoNrItemExtIes() {
}

func (*BplmnIDInfoNRItemExtIesExtension_IdNpnBroadcastInformation) isBplmnIDInfoNRItemExtIesExtension_BplmnIdInfoNrItemExtIes() {
}

// concrete instance(s) of class XNAP-PROTOCOL-EXTENSION from xnap_v1.asn1:3423
// @inject_tag: aper:"valueExt"
// {BPLMN-ID-Info-NR-Item-ExtIEs}
type BplmnIDInfoNRItemExtIes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"unique,"
	Id *xnap_commondatatypes.ProtocolIeID `protobuf:"bytes,1,opt,name=id,json=&id,proto3" json:"id,omitempty" aper:"unique,"`
	// @inject_tag: aper:"valueLB:0,valueUB:2,"
	Criticality xnap_commondatatypes.Criticality `protobuf:"varint,2,opt,name=criticality,json=&criticality,proto3,enum=xnap.v1.Criticality" json:"criticality,omitempty" aper:"valueLB:0,valueUB:2,"`
	// @inject_tag: aper:"canonicalOrder,"
	Extension *BplmnIDInfoNRItemExtIesExtension `protobuf:"bytes,3,opt,name=extension,json=&Extension,proto3" json:"extension,omitempty" aper:"canonicalOrder,"`
}

func (x *BplmnIDInfoNRItemExtIes) Reset() {
	*x = BplmnIDInfoNRItemExtIes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BplmnIDInfoNRItemExtIes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BplmnIDInfoNRItemExtIes) ProtoMessage() {}

func (x *BplmnIDInfoNRItemExtIes) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BplmnIDInfoNRItemExtIes.ProtoReflect.Descriptor instead.
func (*BplmnIDInfoNRItemExtIes) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{45}
}

func (x *BplmnIDInfoNRItemExtIes) GetId() *xnap_commondatatypes.ProtocolIeID {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *BplmnIDInfoNRItemExtIes) GetCriticality() xnap_commondatatypes.Criticality {
	if x != nil {
		return x.Criticality
	}
	return xnap_commondatatypes.Criticality(0)
}

func (x *BplmnIDInfoNRItemExtIes) GetExtension() *BplmnIDInfoNRItemExtIesExtension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// sequence from xnap_v1.asn1:3415
// @inject_tag: aper:"valueExt"
// {BPLMN-ID-Info-NR-Item}
type BplmnIDInfoNRItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BroadcastPlmns *BroadcastPlmns `protobuf:"bytes,1,opt,name=broadcast_plmns,json=broadcastPLMNs,proto3" json:"broadcast_plmns,omitempty"`
	Tac            *Tac            `protobuf:"bytes,2,opt,name=tac,proto3" json:"tac,omitempty"`
	NrCi           *NrCellIdentity `protobuf:"bytes,3,opt,name=nr_ci,json=nr-CI,proto3" json:"nr_ci,omitempty"`
	// @inject_tag: aper:"optional,"
	Ranac *Ranac `protobuf:"bytes,4,opt,name=ranac,proto3,oneof" json:"ranac,omitempty" aper:"optional,"`
	// @inject_tag: aper:"optional,sizeLB:1,"
	IEExtension []*BplmnIDInfoNRItemExtIes `protobuf:"bytes,5,rep,name=i_e_extension,json=iE-Extension,proto3" json:"i_e_extension,omitempty" aper:"optional,sizeLB:1,"`
}

func (x *BplmnIDInfoNRItem) Reset() {
	*x = BplmnIDInfoNRItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BplmnIDInfoNRItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BplmnIDInfoNRItem) ProtoMessage() {}

func (x *BplmnIDInfoNRItem) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BplmnIDInfoNRItem.ProtoReflect.Descriptor instead.
func (*BplmnIDInfoNRItem) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{46}
}

func (x *BplmnIDInfoNRItem) GetBroadcastPlmns() *BroadcastPlmns {
	if x != nil {
		return x.BroadcastPlmns
	}
	return nil
}

func (x *BplmnIDInfoNRItem) GetTac() *Tac {
	if x != nil {
		return x.Tac
	}
	return nil
}

func (x *BplmnIDInfoNRItem) GetNrCi() *NrCellIdentity {
	if x != nil {
		return x.NrCi
	}
	return nil
}

func (x *BplmnIDInfoNRItem) GetRanac() *Ranac {
	if x != nil {
		return x.Ranac
	}
	return nil
}

func (x *BplmnIDInfoNRItem) GetIEExtension() []*BplmnIDInfoNRItemExtIes {
	if x != nil {
		return x.IEExtension
	}
	return nil
}

// range of Integer from xnap_v1.asn1:3429
// {BitRate}
type BitRate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"valueExt,valueLB:0,valueUB:4000000000000,"
	Value int64 `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty" aper:"valueExt,valueLB:0,valueUB:4000000000000,"`
}

func (x *BitRate) Reset() {
	*x = BitRate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BitRate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BitRate) ProtoMessage() {}

func (x *BitRate) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BitRate.ProtoReflect.Descriptor instead.
func (*BitRate) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{47}
}

func (x *BitRate) GetValue() int64 {
	if x != nil {
		return x.Value
	}
	return 0
}

// sequence from xnap_v1.asn1:3435
// {BroadcastCAG-Identifier-List}
type BroadcastCagIdentifierList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"valueExt,sizeLB:1,sizeUB:12,"
	Value []*BroadcastCagIdentifierItem `protobuf:"bytes,1,rep,name=value,proto3" json:"value,omitempty" aper:"valueExt,sizeLB:1,sizeUB:12,"`
}

func (x *BroadcastCagIdentifierList) Reset() {
	*x = BroadcastCagIdentifierList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BroadcastCagIdentifierList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BroadcastCagIdentifierList) ProtoMessage() {}

func (x *BroadcastCagIdentifierList) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BroadcastCagIdentifierList.ProtoReflect.Descriptor instead.
func (*BroadcastCagIdentifierList) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{48}
}

func (x *BroadcastCagIdentifierList) GetValue() []*BroadcastCagIdentifierItem {
	if x != nil {
		return x.Value
	}
	return nil
}

// value set from xnap_v1.asn1:3441
// {BroadcastCAG-Identifier-Item-ExtIEs}
type BroadcastCagIdentifierItemExtIes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *emptypb.Empty `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *BroadcastCagIdentifierItemExtIes) Reset() {
	*x = BroadcastCagIdentifierItemExtIes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BroadcastCagIdentifierItemExtIes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BroadcastCagIdentifierItemExtIes) ProtoMessage() {}

func (x *BroadcastCagIdentifierItemExtIes) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BroadcastCagIdentifierItemExtIes.ProtoReflect.Descriptor instead.
func (*BroadcastCagIdentifierItemExtIes) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{49}
}

func (x *BroadcastCagIdentifierItemExtIes) GetValue() *emptypb.Empty {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:3436
// @inject_tag: aper:"valueExt"
// {BroadcastCAG-Identifier-Item}
type BroadcastCagIdentifierItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CagIdentifier *CagIdentifier `protobuf:"bytes,1,opt,name=cag_identifier,json=cag-Identifier,proto3" json:"cag_identifier,omitempty"`
	// @inject_tag: aper:"optional,sizeLB:1,"
	IEExtension []*BroadcastCagIdentifierItemExtIes `protobuf:"bytes,2,rep,name=i_e_extension,json=iE-Extension,proto3" json:"i_e_extension,omitempty" aper:"optional,sizeLB:1,"`
}

func (x *BroadcastCagIdentifierItem) Reset() {
	*x = BroadcastCagIdentifierItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BroadcastCagIdentifierItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BroadcastCagIdentifierItem) ProtoMessage() {}

func (x *BroadcastCagIdentifierItem) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BroadcastCagIdentifierItem.ProtoReflect.Descriptor instead.
func (*BroadcastCagIdentifierItem) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{50}
}

func (x *BroadcastCagIdentifierItem) GetCagIdentifier() *CagIdentifier {
	if x != nil {
		return x.CagIdentifier
	}
	return nil
}

func (x *BroadcastCagIdentifierItem) GetIEExtension() []*BroadcastCagIdentifierItemExtIes {
	if x != nil {
		return x.IEExtension
	}
	return nil
}

// sequence from xnap_v1.asn1:3448
// {BroadcastNID-List}
type BroadcastNidList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"valueExt,sizeLB:1,sizeUB:12,"
	Value []*BroadcastNidItem `protobuf:"bytes,1,rep,name=value,proto3" json:"value,omitempty" aper:"valueExt,sizeLB:1,sizeUB:12,"`
}

func (x *BroadcastNidList) Reset() {
	*x = BroadcastNidList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BroadcastNidList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BroadcastNidList) ProtoMessage() {}

func (x *BroadcastNidList) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BroadcastNidList.ProtoReflect.Descriptor instead.
func (*BroadcastNidList) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{51}
}

func (x *BroadcastNidList) GetValue() []*BroadcastNidItem {
	if x != nil {
		return x.Value
	}
	return nil
}

// value set from xnap_v1.asn1:3454
// {BroadcastNID-Item-ExtIEs}
type BroadcastNidItemExtIes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *emptypb.Empty `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *BroadcastNidItemExtIes) Reset() {
	*x = BroadcastNidItemExtIes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BroadcastNidItemExtIes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BroadcastNidItemExtIes) ProtoMessage() {}

func (x *BroadcastNidItemExtIes) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BroadcastNidItemExtIes.ProtoReflect.Descriptor instead.
func (*BroadcastNidItemExtIes) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{52}
}

func (x *BroadcastNidItemExtIes) GetValue() *emptypb.Empty {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:3449
// @inject_tag: aper:"valueExt"
// {BroadcastNID-Item}
type BroadcastNidItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Nid *Nid `protobuf:"bytes,1,opt,name=nid,proto3" json:"nid,omitempty"`
	// @inject_tag: aper:"optional,sizeLB:1,"
	IEExtension []*BroadcastNidItemExtIes `protobuf:"bytes,2,rep,name=i_e_extension,json=iE-Extension,proto3" json:"i_e_extension,omitempty" aper:"optional,sizeLB:1,"`
}

func (x *BroadcastNidItem) Reset() {
	*x = BroadcastNidItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BroadcastNidItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BroadcastNidItem) ProtoMessage() {}

func (x *BroadcastNidItem) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BroadcastNidItem.ProtoReflect.Descriptor instead.
func (*BroadcastNidItem) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{53}
}

func (x *BroadcastNidItem) GetNid() *Nid {
	if x != nil {
		return x.Nid
	}
	return nil
}

func (x *BroadcastNidItem) GetIEExtension() []*BroadcastNidItemExtIes {
	if x != nil {
		return x.IEExtension
	}
	return nil
}

// sequence from xnap_v1.asn1:3460
// {BroadcastPLMNs}
type BroadcastPlmns struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"sizeLB:1,sizeUB:12,"
	Value []*PlmnIdentity `protobuf:"bytes,1,rep,name=value,proto3" json:"value,omitempty" aper:"sizeLB:1,sizeUB:12,"`
}

func (x *BroadcastPlmns) Reset() {
	*x = BroadcastPlmns{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BroadcastPlmns) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BroadcastPlmns) ProtoMessage() {}

func (x *BroadcastPlmns) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BroadcastPlmns.ProtoReflect.Descriptor instead.
func (*BroadcastPlmns) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{54}
}

func (x *BroadcastPlmns) GetValue() []*PlmnIdentity {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:3463
// {BroadcastEUTRAPLMNs}
type BroadcastEutraplmns struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"sizeLB:1,sizeUB:6,"
	Value []*PlmnIdentity `protobuf:"bytes,1,rep,name=value,proto3" json:"value,omitempty" aper:"sizeLB:1,sizeUB:6,"`
}

func (x *BroadcastEutraplmns) Reset() {
	*x = BroadcastEutraplmns{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BroadcastEutraplmns) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BroadcastEutraplmns) ProtoMessage() {}

func (x *BroadcastEutraplmns) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BroadcastEutraplmns.ProtoReflect.Descriptor instead.
func (*BroadcastEutraplmns) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{55}
}

func (x *BroadcastEutraplmns) GetValue() []*PlmnIdentity {
	if x != nil {
		return x.Value
	}
	return nil
}

// value set from xnap_v1.asn1:3470
// {BroadcastPLMNinTAISupport-Item-ExtIEs&Extension}
type BroadcastPlmninTaisupportItemExtIesExtension struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// value set translated as choice from xnap_v1.asn1:3470
	//
	// Types that are assignable to BroadcastPlmninTaisupportItemExtIes:
	//	*BroadcastPlmninTaisupportItemExtIesExtension_IdNpnSupport
	//	*BroadcastPlmninTaisupportItemExtIesExtension_IdExtendedTaisliceSupportList
	BroadcastPlmninTaisupportItemExtIes isBroadcastPlmninTaisupportItemExtIesExtension_BroadcastPlmninTaisupportItemExtIes `protobuf_oneof:"broadcast_plmnin_taisupport_item_ext_ies"`
}

func (x *BroadcastPlmninTaisupportItemExtIesExtension) Reset() {
	*x = BroadcastPlmninTaisupportItemExtIesExtension{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BroadcastPlmninTaisupportItemExtIesExtension) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BroadcastPlmninTaisupportItemExtIesExtension) ProtoMessage() {}

func (x *BroadcastPlmninTaisupportItemExtIesExtension) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BroadcastPlmninTaisupportItemExtIesExtension.ProtoReflect.Descriptor instead.
func (*BroadcastPlmninTaisupportItemExtIesExtension) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{56}
}

func (m *BroadcastPlmninTaisupportItemExtIesExtension) GetBroadcastPlmninTaisupportItemExtIes() isBroadcastPlmninTaisupportItemExtIesExtension_BroadcastPlmninTaisupportItemExtIes {
	if m != nil {
		return m.BroadcastPlmninTaisupportItemExtIes
	}
	return nil
}

func (x *BroadcastPlmninTaisupportItemExtIesExtension) GetIdNpnSupport() *NpnSupport {
	if x, ok := x.GetBroadcastPlmninTaisupportItemExtIes().(*BroadcastPlmninTaisupportItemExtIesExtension_IdNpnSupport); ok {
		return x.IdNpnSupport
	}
	return nil
}

func (x *BroadcastPlmninTaisupportItemExtIesExtension) GetIdExtendedTaisliceSupportList() *ExtendedSliceSupportList {
	if x, ok := x.GetBroadcastPlmninTaisupportItemExtIes().(*BroadcastPlmninTaisupportItemExtIesExtension_IdExtendedTaisliceSupportList); ok {
		return x.IdExtendedTaisliceSupportList
	}
	return nil
}

type isBroadcastPlmninTaisupportItemExtIesExtension_BroadcastPlmninTaisupportItemExtIes interface {
	isBroadcastPlmninTaisupportItemExtIesExtension_BroadcastPlmninTaisupportItemExtIes()
}

type BroadcastPlmninTaisupportItemExtIesExtension_IdNpnSupport struct {
	// @inject_tag: aper:"choiceIdx:1,"
	IdNpnSupport *NpnSupport `protobuf:"bytes,1,opt,name=id_npn_support,json=id-NPN-Support,proto3,oneof" aper:"choiceIdx:1,"`
}

type BroadcastPlmninTaisupportItemExtIesExtension_IdExtendedTaisliceSupportList struct {
	// @inject_tag: aper:"choiceIdx:2,"
	IdExtendedTaisliceSupportList *ExtendedSliceSupportList `protobuf:"bytes,2,opt,name=id_extended_taislice_support_list,json=id-ExtendedTAISliceSupportList,proto3,oneof" aper:"choiceIdx:2,"`
}

func (*BroadcastPlmninTaisupportItemExtIesExtension_IdNpnSupport) isBroadcastPlmninTaisupportItemExtIesExtension_BroadcastPlmninTaisupportItemExtIes() {
}

func (*BroadcastPlmninTaisupportItemExtIesExtension_IdExtendedTaisliceSupportList) isBroadcastPlmninTaisupportItemExtIesExtension_BroadcastPlmninTaisupportItemExtIes() {
}

// concrete instance(s) of class XNAP-PROTOCOL-EXTENSION from xnap_v1.asn1:3470
// @inject_tag: aper:"valueExt"
// {BroadcastPLMNinTAISupport-Item-ExtIEs}
type BroadcastPlmninTaisupportItemExtIes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"unique,"
	Id *xnap_commondatatypes.ProtocolIeID `protobuf:"bytes,1,opt,name=id,json=&id,proto3" json:"id,omitempty" aper:"unique,"`
	// @inject_tag: aper:"valueLB:0,valueUB:2,"
	Criticality xnap_commondatatypes.Criticality `protobuf:"varint,2,opt,name=criticality,json=&criticality,proto3,enum=xnap.v1.Criticality" json:"criticality,omitempty" aper:"valueLB:0,valueUB:2,"`
	// @inject_tag: aper:"canonicalOrder,"
	Extension *BroadcastPlmninTaisupportItemExtIesExtension `protobuf:"bytes,3,opt,name=extension,json=&Extension,proto3" json:"extension,omitempty" aper:"canonicalOrder,"`
}

func (x *BroadcastPlmninTaisupportItemExtIes) Reset() {
	*x = BroadcastPlmninTaisupportItemExtIes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BroadcastPlmninTaisupportItemExtIes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BroadcastPlmninTaisupportItemExtIes) ProtoMessage() {}

func (x *BroadcastPlmninTaisupportItemExtIes) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BroadcastPlmninTaisupportItemExtIes.ProtoReflect.Descriptor instead.
func (*BroadcastPlmninTaisupportItemExtIes) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{57}
}

func (x *BroadcastPlmninTaisupportItemExtIes) GetId() *xnap_commondatatypes.ProtocolIeID {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *BroadcastPlmninTaisupportItemExtIes) GetCriticality() xnap_commondatatypes.Criticality {
	if x != nil {
		return x.Criticality
	}
	return xnap_commondatatypes.Criticality(0)
}

func (x *BroadcastPlmninTaisupportItemExtIes) GetExtension() *BroadcastPlmninTaisupportItemExtIesExtension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// sequence from xnap_v1.asn1:3464
// @inject_tag: aper:"valueExt"
// {BroadcastPLMNinTAISupport-Item}
type BroadcastPlmninTaisupportItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlmnId              *PlmnIdentity     `protobuf:"bytes,1,opt,name=plmn_id,json=plmn-id,proto3" json:"plmn_id,omitempty"`
	TAisliceSupportList *SliceSupportList `protobuf:"bytes,2,opt,name=t_aislice_support_list,json=tAISliceSupport-List,proto3" json:"t_aislice_support_list,omitempty"`
	// @inject_tag: aper:"optional,sizeLB:1,sizeUB:65535,valueExt"
	IEExtension []*BroadcastPlmninTaisupportItemExtIes `protobuf:"bytes,3,rep,name=i_e_extension,json=iE-Extension,proto3" json:"i_e_extension,omitempty" aper:"optional,sizeLB:1,sizeUB:65535,valueExt"`
}

func (x *BroadcastPlmninTaisupportItem) Reset() {
	*x = BroadcastPlmninTaisupportItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BroadcastPlmninTaisupportItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BroadcastPlmninTaisupportItem) ProtoMessage() {}

func (x *BroadcastPlmninTaisupportItem) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BroadcastPlmninTaisupportItem.ProtoReflect.Descriptor instead.
func (*BroadcastPlmninTaisupportItem) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{58}
}

func (x *BroadcastPlmninTaisupportItem) GetPlmnId() *PlmnIdentity {
	if x != nil {
		return x.PlmnId
	}
	return nil
}

func (x *BroadcastPlmninTaisupportItem) GetTAisliceSupportList() *SliceSupportList {
	if x != nil {
		return x.TAisliceSupportList
	}
	return nil
}

func (x *BroadcastPlmninTaisupportItem) GetIEExtension() []*BroadcastPlmninTaisupportItemExtIes {
	if x != nil {
		return x.IEExtension
	}
	return nil
}

// sequence from xnap_v1.asn1:3479
// {BroadcastPNI-NPN-ID-Information}
type BroadcastPniNPnIDInformation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"valueExt,sizeLB:1,sizeUB:12,"
	Value []*BroadcastPniNPnIDInformationItem `protobuf:"bytes,1,rep,name=value,proto3" json:"value,omitempty" aper:"valueExt,sizeLB:1,sizeUB:12,"`
}

func (x *BroadcastPniNPnIDInformation) Reset() {
	*x = BroadcastPniNPnIDInformation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BroadcastPniNPnIDInformation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BroadcastPniNPnIDInformation) ProtoMessage() {}

func (x *BroadcastPniNPnIDInformation) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BroadcastPniNPnIDInformation.ProtoReflect.Descriptor instead.
func (*BroadcastPniNPnIDInformation) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{59}
}

func (x *BroadcastPniNPnIDInformation) GetValue() []*BroadcastPniNPnIDInformationItem {
	if x != nil {
		return x.Value
	}
	return nil
}

// value set from xnap_v1.asn1:3487
// {BroadcastPNI-NPN-ID-Information-Item-ExtIEs}
type BroadcastPniNPnIDInformationItemExtIes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *emptypb.Empty `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *BroadcastPniNPnIDInformationItemExtIes) Reset() {
	*x = BroadcastPniNPnIDInformationItemExtIes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BroadcastPniNPnIDInformationItemExtIes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BroadcastPniNPnIDInformationItemExtIes) ProtoMessage() {}

func (x *BroadcastPniNPnIDInformationItemExtIes) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BroadcastPniNPnIDInformationItemExtIes.ProtoReflect.Descriptor instead.
func (*BroadcastPniNPnIDInformationItemExtIes) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{60}
}

func (x *BroadcastPniNPnIDInformationItemExtIes) GetValue() *emptypb.Empty {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:3480
// @inject_tag: aper:"valueExt"
// {BroadcastPNI-NPN-ID-Information-Item}
type BroadcastPniNPnIDInformationItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlmnId                     *PlmnIdentity               `protobuf:"bytes,1,opt,name=plmn_id,json=plmn-id,proto3" json:"plmn_id,omitempty"`
	BroadcastCagIdentifierList *BroadcastCagIdentifierList `protobuf:"bytes,2,opt,name=broadcast_cag_identifier_list,json=broadcastCAG-Identifier-List,proto3" json:"broadcast_cag_identifier_list,omitempty"`
	// @inject_tag: aper:"optional,sizeLB:1,"
	IEExtension []*BroadcastPniNPnIDInformationItemExtIes `protobuf:"bytes,3,rep,name=i_e_extension,json=iE-Extension,proto3" json:"i_e_extension,omitempty" aper:"optional,sizeLB:1,"`
}

func (x *BroadcastPniNPnIDInformationItem) Reset() {
	*x = BroadcastPniNPnIDInformationItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BroadcastPniNPnIDInformationItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BroadcastPniNPnIDInformationItem) ProtoMessage() {}

func (x *BroadcastPniNPnIDInformationItem) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BroadcastPniNPnIDInformationItem.ProtoReflect.Descriptor instead.
func (*BroadcastPniNPnIDInformationItem) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{61}
}

func (x *BroadcastPniNPnIDInformationItem) GetPlmnId() *PlmnIdentity {
	if x != nil {
		return x.PlmnId
	}
	return nil
}

func (x *BroadcastPniNPnIDInformationItem) GetBroadcastCagIdentifierList() *BroadcastCagIdentifierList {
	if x != nil {
		return x.BroadcastCagIdentifierList
	}
	return nil
}

func (x *BroadcastPniNPnIDInformationItem) GetIEExtension() []*BroadcastPniNPnIDInformationItemExtIes {
	if x != nil {
		return x.IEExtension
	}
	return nil
}

// sequence from xnap_v1.asn1:3495
// {BroadcastSNPNID-List}
type BroadcastSnpnidList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"valueExt,sizeLB:1,sizeUB:12,"
	Value []*BroadcastSnpnid `protobuf:"bytes,1,rep,name=value,proto3" json:"value,omitempty" aper:"valueExt,sizeLB:1,sizeUB:12,"`
}

func (x *BroadcastSnpnidList) Reset() {
	*x = BroadcastSnpnidList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BroadcastSnpnidList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BroadcastSnpnidList) ProtoMessage() {}

func (x *BroadcastSnpnidList) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BroadcastSnpnidList.ProtoReflect.Descriptor instead.
func (*BroadcastSnpnidList) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{62}
}

func (x *BroadcastSnpnidList) GetValue() []*BroadcastSnpnid {
	if x != nil {
		return x.Value
	}
	return nil
}

// value set from xnap_v1.asn1:3502
// {BroadcastSNPNID-ExtIEs}
type BroadcastSnpnidExtIes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *emptypb.Empty `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *BroadcastSnpnidExtIes) Reset() {
	*x = BroadcastSnpnidExtIes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BroadcastSnpnidExtIes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BroadcastSnpnidExtIes) ProtoMessage() {}

func (x *BroadcastSnpnidExtIes) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BroadcastSnpnidExtIes.ProtoReflect.Descriptor instead.
func (*BroadcastSnpnidExtIes) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{63}
}

func (x *BroadcastSnpnidExtIes) GetValue() *emptypb.Empty {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:3496
// @inject_tag: aper:"valueExt"
// {BroadcastSNPNID}
type BroadcastSnpnid struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlmnId           *PlmnIdentity     `protobuf:"bytes,1,opt,name=plmn_id,json=plmn-id,proto3" json:"plmn_id,omitempty"`
	BroadcastNidList *BroadcastNidList `protobuf:"bytes,2,opt,name=broadcast_nid_list,json=broadcastNID-List,proto3" json:"broadcast_nid_list,omitempty"`
	// @inject_tag: aper:"optional,sizeLB:1,"
	IEExtension []*BroadcastSnpnidExtIes `protobuf:"bytes,3,rep,name=i_e_extension,json=iE-Extension,proto3" json:"i_e_extension,omitempty" aper:"optional,sizeLB:1,"`
}

func (x *BroadcastSnpnid) Reset() {
	*x = BroadcastSnpnid{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BroadcastSnpnid) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BroadcastSnpnid) ProtoMessage() {}

func (x *BroadcastSnpnid) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BroadcastSnpnid.ProtoReflect.Descriptor instead.
func (*BroadcastSnpnid) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{64}
}

func (x *BroadcastSnpnid) GetPlmnId() *PlmnIdentity {
	if x != nil {
		return x.PlmnId
	}
	return nil
}

func (x *BroadcastSnpnid) GetBroadcastNidList() *BroadcastNidList {
	if x != nil {
		return x.BroadcastNidList
	}
	return nil
}

func (x *BroadcastSnpnid) GetIEExtension() []*BroadcastSnpnidExtIes {
	if x != nil {
		return x.IEExtension
	}
	return nil
}

// range of Integer from xnap_v1.asn1:3510
// {CAG-Identifier}
type CagIdentifier struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"sizeLB:32,sizeUB:32,"
	Value *asn1.BitString `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty" aper:"sizeLB:32,sizeUB:32,"`
}

func (x *CagIdentifier) Reset() {
	*x = CagIdentifier{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CagIdentifier) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CagIdentifier) ProtoMessage() {}

func (x *CagIdentifier) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CagIdentifier.ProtoReflect.Descriptor instead.
func (*CagIdentifier) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{65}
}

func (x *CagIdentifier) GetValue() *asn1.BitString {
	if x != nil {
		return x.Value
	}
	return nil
}

// range of Integer from xnap_v1.asn1:3513
// {CapacityValue}
type CapacityValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"valueLB:0,valueUB:100,"
	Value int32 `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty" aper:"valueLB:0,valueUB:100,"`
}

func (x *CapacityValue) Reset() {
	*x = CapacityValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CapacityValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CapacityValue) ProtoMessage() {}

func (x *CapacityValue) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CapacityValue.ProtoReflect.Descriptor instead.
func (*CapacityValue) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{66}
}

func (x *CapacityValue) GetValue() int32 {
	if x != nil {
		return x.Value
	}
	return 0
}

// value set from xnap_v1.asn1:3524
// {CapacityValueInfo-ExtIEs}
type CapacityValueInfoExtIes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *emptypb.Empty `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *CapacityValueInfoExtIes) Reset() {
	*x = CapacityValueInfoExtIes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CapacityValueInfoExtIes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CapacityValueInfoExtIes) ProtoMessage() {}

func (x *CapacityValueInfoExtIes) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CapacityValueInfoExtIes.ProtoReflect.Descriptor instead.
func (*CapacityValueInfoExtIes) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{67}
}

func (x *CapacityValueInfoExtIes) GetValue() *emptypb.Empty {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:3518
// @inject_tag: aper:"valueExt"
// {CapacityValueInfo}
type CapacityValueInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CapacityValue *CapacityValue `protobuf:"bytes,1,opt,name=capacity_value,json=capacityValue,proto3" json:"capacity_value,omitempty"`
	// @inject_tag: aper:"optional,"
	SsbAreaCapacityValueList *SsbareaCapacityValueList `protobuf:"bytes,2,opt,name=ssb_area_capacity_value_list,json=ssbAreaCapacityValueList,proto3,oneof" json:"ssb_area_capacity_value_list,omitempty" aper:"optional,"`
	// @inject_tag: aper:"optional,sizeLB:1,"
	IEExtension []*CapacityValueInfoExtIes `protobuf:"bytes,3,rep,name=i_e_extension,json=iE-Extension,proto3" json:"i_e_extension,omitempty" aper:"optional,sizeLB:1,"`
}

func (x *CapacityValueInfo) Reset() {
	*x = CapacityValueInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CapacityValueInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CapacityValueInfo) ProtoMessage() {}

func (x *CapacityValueInfo) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CapacityValueInfo.ProtoReflect.Descriptor instead.
func (*CapacityValueInfo) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{68}
}

func (x *CapacityValueInfo) GetCapacityValue() *CapacityValue {
	if x != nil {
		return x.CapacityValue
	}
	return nil
}

func (x *CapacityValueInfo) GetSsbAreaCapacityValueList() *SsbareaCapacityValueList {
	if x != nil {
		return x.SsbAreaCapacityValueList
	}
	return nil
}

func (x *CapacityValueInfo) GetIEExtension() []*CapacityValueInfoExtIes {
	if x != nil {
		return x.IEExtension
	}
	return nil
}

// value set from xnap_v1.asn1:3537
// {Cause-ExtIEs}
type CauseExtIes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *emptypb.Empty `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *CauseExtIes) Reset() {
	*x = CauseExtIes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CauseExtIes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CauseExtIes) ProtoMessage() {}

func (x *CauseExtIes) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CauseExtIes.ProtoReflect.Descriptor instead.
func (*CauseExtIes) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{69}
}

func (x *CauseExtIes) GetValue() *emptypb.Empty {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:3530
// {Cause}
type Cause struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// choice from xnap_v1.asn1:3530
	//
	// Types that are assignable to Cause:
	//	*Cause_RadioNetwork
	//	*Cause_Transport
	//	*Cause_Protocol
	//	*Cause_Misc
	//	*Cause_ChoiceExtension
	Cause isCause_Cause `protobuf_oneof:"cause"`
}

func (x *Cause) Reset() {
	*x = Cause{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Cause) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Cause) ProtoMessage() {}

func (x *Cause) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Cause.ProtoReflect.Descriptor instead.
func (*Cause) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{70}
}

func (m *Cause) GetCause() isCause_Cause {
	if m != nil {
		return m.Cause
	}
	return nil
}

func (x *Cause) GetRadioNetwork() CauseRadioNetworkLayer {
	if x, ok := x.GetCause().(*Cause_RadioNetwork); ok {
		return x.RadioNetwork
	}
	return CauseRadioNetworkLayer_CAUSE_RADIO_NETWORK_LAYER_CELL_NOT_AVAILABLE
}

func (x *Cause) GetTransport() CauseTransportLayer {
	if x, ok := x.GetCause().(*Cause_Transport); ok {
		return x.Transport
	}
	return CauseTransportLayer_CAUSE_TRANSPORT_LAYER_TRANSPORT_RESOURCE_UNAVAILABLE
}

func (x *Cause) GetProtocol() CauseProtocol {
	if x, ok := x.GetCause().(*Cause_Protocol); ok {
		return x.Protocol
	}
	return CauseProtocol_CAUSE_PROTOCOL_TRANSFER_SYNTAX_ERROR
}

func (x *Cause) GetMisc() CauseMisc {
	if x, ok := x.GetCause().(*Cause_Misc); ok {
		return x.Misc
	}
	return CauseMisc_CAUSE_MISC_CONTROL_PROCESSING_OVERLOAD
}

func (x *Cause) GetChoiceExtension() *CauseExtIes {
	if x, ok := x.GetCause().(*Cause_ChoiceExtension); ok {
		return x.ChoiceExtension
	}
	return nil
}

type isCause_Cause interface {
	isCause_Cause()
}

type Cause_RadioNetwork struct {
	// @inject_tag: aper:"choiceIdx:1,valueExt,valueLB:0,valueUB:52,"
	RadioNetwork CauseRadioNetworkLayer `protobuf:"varint,1,opt,name=radio_network,json=radioNetwork,proto3,enum=xnap.v1.CauseRadioNetworkLayer,oneof" aper:"choiceIdx:1,valueExt,valueLB:0,valueUB:52,"`
}

type Cause_Transport struct {
	// @inject_tag: aper:"choiceIdx:2,valueExt,valueLB:0,valueUB:1,"
	Transport CauseTransportLayer `protobuf:"varint,2,opt,name=transport,proto3,enum=xnap.v1.CauseTransportLayer,oneof" aper:"choiceIdx:2,valueExt,valueLB:0,valueUB:1,"`
}

type Cause_Protocol struct {
	// @inject_tag: aper:"choiceIdx:3,valueExt,valueLB:0,valueUB:6,"
	Protocol CauseProtocol `protobuf:"varint,3,opt,name=protocol,proto3,enum=xnap.v1.CauseProtocol,oneof" aper:"choiceIdx:3,valueExt,valueLB:0,valueUB:6,"`
}

type Cause_Misc struct {
	// @inject_tag: aper:"choiceIdx:4,valueExt,valueLB:0,valueUB:4,"
	Misc CauseMisc `protobuf:"varint,4,opt,name=misc,proto3,enum=xnap.v1.CauseMisc,oneof" aper:"choiceIdx:4,valueExt,valueLB:0,valueUB:4,"`
}

type Cause_ChoiceExtension struct {
	// @inject_tag: aper:"choiceIdx:5,"
	ChoiceExtension *CauseExtIes `protobuf:"bytes,5,opt,name=choice_extension,json=choice-extension,proto3,oneof" aper:"choiceIdx:5,"`
}

func (*Cause_RadioNetwork) isCause_Cause() {}

func (*Cause_Transport) isCause_Cause() {}

func (*Cause_Protocol) isCause_Cause() {}

func (*Cause_Misc) isCause_Cause() {}

func (*Cause_ChoiceExtension) isCause_Cause() {}

// repeated from xnap_v1.asn1:3639
// {limitedNR-ListCellAssistanceInfo-NR}
type LimitedNrListCellAssistanceInfoNR struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"sizeLB:1,sizeUB:16384,"
	LimitedNrList []*NrCGi `protobuf:"bytes,1,rep,name=limited_nr_list,json=limitedNR-List,proto3" json:"limited_nr_list,omitempty" aper:"sizeLB:1,sizeUB:16384,"`
}

func (x *LimitedNrListCellAssistanceInfoNR) Reset() {
	*x = LimitedNrListCellAssistanceInfoNR{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LimitedNrListCellAssistanceInfoNR) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LimitedNrListCellAssistanceInfoNR) ProtoMessage() {}

func (x *LimitedNrListCellAssistanceInfoNR) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LimitedNrListCellAssistanceInfoNR.ProtoReflect.Descriptor instead.
func (*LimitedNrListCellAssistanceInfoNR) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{71}
}

func (x *LimitedNrListCellAssistanceInfoNR) GetLimitedNrList() []*NrCGi {
	if x != nil {
		return x.LimitedNrList
	}
	return nil
}

// value set from xnap_v1.asn1:3644
// {CellAssistanceInfo-NR-ExtIEs}
type CellAssistanceInfoNRExtIes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *emptypb.Empty `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *CellAssistanceInfoNRExtIes) Reset() {
	*x = CellAssistanceInfoNRExtIes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CellAssistanceInfoNRExtIes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CellAssistanceInfoNRExtIes) ProtoMessage() {}

func (x *CellAssistanceInfoNRExtIes) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CellAssistanceInfoNRExtIes.ProtoReflect.Descriptor instead.
func (*CellAssistanceInfoNRExtIes) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{72}
}

func (x *CellAssistanceInfoNRExtIes) GetValue() *emptypb.Empty {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:3639
// {CellAssistanceInfo-NR}
type CellAssistanceInfoNR struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// choice from xnap_v1.asn1:3639
	//
	// Types that are assignable to CellAssistanceInfoNr:
	//	*CellAssistanceInfoNR_LimitedNrList
	//	*CellAssistanceInfoNR_FullList
	//	*CellAssistanceInfoNR_ChoiceExtension
	CellAssistanceInfoNr isCellAssistanceInfoNR_CellAssistanceInfoNr `protobuf_oneof:"cell_assistance_info_nr"`
}

func (x *CellAssistanceInfoNR) Reset() {
	*x = CellAssistanceInfoNR{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CellAssistanceInfoNR) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CellAssistanceInfoNR) ProtoMessage() {}

func (x *CellAssistanceInfoNR) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CellAssistanceInfoNR.ProtoReflect.Descriptor instead.
func (*CellAssistanceInfoNR) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{73}
}

func (m *CellAssistanceInfoNR) GetCellAssistanceInfoNr() isCellAssistanceInfoNR_CellAssistanceInfoNr {
	if m != nil {
		return m.CellAssistanceInfoNr
	}
	return nil
}

func (x *CellAssistanceInfoNR) GetLimitedNrList() *LimitedNrListCellAssistanceInfoNR {
	if x, ok := x.GetCellAssistanceInfoNr().(*CellAssistanceInfoNR_LimitedNrList); ok {
		return x.LimitedNrList
	}
	return nil
}

func (x *CellAssistanceInfoNR) GetFullList() FullListCellAssistanceInfoNr {
	if x, ok := x.GetCellAssistanceInfoNr().(*CellAssistanceInfoNR_FullList); ok {
		return x.FullList
	}
	return FullListCellAssistanceInfoNr_FULL_LIST_CELL_ASSISTANCE_INFO_NR_ALL_SERVED_CELLS_NR
}

func (x *CellAssistanceInfoNR) GetChoiceExtension() *CellAssistanceInfoNRExtIes {
	if x, ok := x.GetCellAssistanceInfoNr().(*CellAssistanceInfoNR_ChoiceExtension); ok {
		return x.ChoiceExtension
	}
	return nil
}

type isCellAssistanceInfoNR_CellAssistanceInfoNr interface {
	isCellAssistanceInfoNR_CellAssistanceInfoNr()
}

type CellAssistanceInfoNR_LimitedNrList struct {
	// @inject_tag: aper:"choiceIdx:1,"
	LimitedNrList *LimitedNrListCellAssistanceInfoNR `protobuf:"bytes,1,opt,name=limited_nr_list,json=limitedNR-List,proto3,oneof" aper:"choiceIdx:1,"`
}

type CellAssistanceInfoNR_FullList struct {
	// @inject_tag: aper:"choiceIdx:2,valueExt,valueLB:0,valueUB:0,"
	FullList FullListCellAssistanceInfoNr `protobuf:"varint,2,opt,name=full_list,json=full-List,proto3,enum=xnap.v1.FullListCellAssistanceInfoNr,oneof" aper:"choiceIdx:2,valueExt,valueLB:0,valueUB:0,"`
}

type CellAssistanceInfoNR_ChoiceExtension struct {
	// @inject_tag: aper:"choiceIdx:3,"
	ChoiceExtension *CellAssistanceInfoNRExtIes `protobuf:"bytes,3,opt,name=choice_extension,json=choice-extension,proto3,oneof" aper:"choiceIdx:3,"`
}

func (*CellAssistanceInfoNR_LimitedNrList) isCellAssistanceInfoNR_CellAssistanceInfoNr() {}

func (*CellAssistanceInfoNR_FullList) isCellAssistanceInfoNR_CellAssistanceInfoNr() {}

func (*CellAssistanceInfoNR_ChoiceExtension) isCellAssistanceInfoNR_CellAssistanceInfoNr() {}

// value set from xnap_v1.asn1:3656
// {CellAndCapacityAssistanceInfo-NR-ExtIEs}
type CellAndCapacityAssistanceInfoNRExtIes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *emptypb.Empty `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *CellAndCapacityAssistanceInfoNRExtIes) Reset() {
	*x = CellAndCapacityAssistanceInfoNRExtIes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CellAndCapacityAssistanceInfoNRExtIes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CellAndCapacityAssistanceInfoNRExtIes) ProtoMessage() {}

func (x *CellAndCapacityAssistanceInfoNRExtIes) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CellAndCapacityAssistanceInfoNRExtIes.ProtoReflect.Descriptor instead.
func (*CellAndCapacityAssistanceInfoNRExtIes) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{74}
}

func (x *CellAndCapacityAssistanceInfoNRExtIes) GetValue() *emptypb.Empty {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:3649
// @inject_tag: aper:"valueExt"
// {CellAndCapacityAssistanceInfo-NR}
type CellAndCapacityAssistanceInfoNR struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"optional,"
	MaximumCellListSize *MaximumCellListSize `protobuf:"bytes,1,opt,name=maximum_cell_list_size,json=maximumCellListSize,proto3,oneof" json:"maximum_cell_list_size,omitempty" aper:"optional,"`
	// @inject_tag: aper:"optional,"
	CellAssistanceInfoNr *CellAssistanceInfoNR `protobuf:"bytes,2,opt,name=cell_assistance_info_nr,json=cellAssistanceInfo-NR,proto3,oneof" json:"cell_assistance_info_nr,omitempty" aper:"optional,"`
	// @inject_tag: aper:"optional,sizeLB:1,"
	IEExtensions []*CellAndCapacityAssistanceInfoNRExtIes `protobuf:"bytes,3,rep,name=i_e_extensions,json=iE-Extensions,proto3" json:"i_e_extensions,omitempty" aper:"optional,sizeLB:1,"`
}

func (x *CellAndCapacityAssistanceInfoNR) Reset() {
	*x = CellAndCapacityAssistanceInfoNR{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CellAndCapacityAssistanceInfoNR) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CellAndCapacityAssistanceInfoNR) ProtoMessage() {}

func (x *CellAndCapacityAssistanceInfoNR) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CellAndCapacityAssistanceInfoNR.ProtoReflect.Descriptor instead.
func (*CellAndCapacityAssistanceInfoNR) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{75}
}

func (x *CellAndCapacityAssistanceInfoNR) GetMaximumCellListSize() *MaximumCellListSize {
	if x != nil {
		return x.MaximumCellListSize
	}
	return nil
}

func (x *CellAndCapacityAssistanceInfoNR) GetCellAssistanceInfoNr() *CellAssistanceInfoNR {
	if x != nil {
		return x.CellAssistanceInfoNr
	}
	return nil
}

func (x *CellAndCapacityAssistanceInfoNR) GetIEExtensions() []*CellAndCapacityAssistanceInfoNRExtIes {
	if x != nil {
		return x.IEExtensions
	}
	return nil
}

// value set from xnap_v1.asn1:3668
// {CellAndCapacityAssistanceInfo-EUTRA-ExtIEs}
type CellAndCapacityAssistanceInfoEUtraExtIes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *emptypb.Empty `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *CellAndCapacityAssistanceInfoEUtraExtIes) Reset() {
	*x = CellAndCapacityAssistanceInfoEUtraExtIes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CellAndCapacityAssistanceInfoEUtraExtIes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CellAndCapacityAssistanceInfoEUtraExtIes) ProtoMessage() {}

func (x *CellAndCapacityAssistanceInfoEUtraExtIes) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CellAndCapacityAssistanceInfoEUtraExtIes.ProtoReflect.Descriptor instead.
func (*CellAndCapacityAssistanceInfoEUtraExtIes) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{76}
}

func (x *CellAndCapacityAssistanceInfoEUtraExtIes) GetValue() *emptypb.Empty {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:3661
// @inject_tag: aper:"valueExt"
// {CellAndCapacityAssistanceInfo-EUTRA}
type CellAndCapacityAssistanceInfoEUtra struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"optional,"
	MaximumCellListSize *MaximumCellListSize `protobuf:"bytes,1,opt,name=maximum_cell_list_size,json=maximumCellListSize,proto3,oneof" json:"maximum_cell_list_size,omitempty" aper:"optional,"`
	// @inject_tag: aper:"optional,"
	CellAssistanceInfoEutra *CellAssistanceInfoEUtra `protobuf:"bytes,2,opt,name=cell_assistance_info_eutra,json=cellAssistanceInfo-EUTRA,proto3,oneof" json:"cell_assistance_info_eutra,omitempty" aper:"optional,"`
	// @inject_tag: aper:"optional,sizeLB:1,"
	IEExtensions []*CellAndCapacityAssistanceInfoEUtraExtIes `protobuf:"bytes,3,rep,name=i_e_extensions,json=iE-Extensions,proto3" json:"i_e_extensions,omitempty" aper:"optional,sizeLB:1,"`
}

func (x *CellAndCapacityAssistanceInfoEUtra) Reset() {
	*x = CellAndCapacityAssistanceInfoEUtra{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CellAndCapacityAssistanceInfoEUtra) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CellAndCapacityAssistanceInfoEUtra) ProtoMessage() {}

func (x *CellAndCapacityAssistanceInfoEUtra) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CellAndCapacityAssistanceInfoEUtra.ProtoReflect.Descriptor instead.
func (*CellAndCapacityAssistanceInfoEUtra) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{77}
}

func (x *CellAndCapacityAssistanceInfoEUtra) GetMaximumCellListSize() *MaximumCellListSize {
	if x != nil {
		return x.MaximumCellListSize
	}
	return nil
}

func (x *CellAndCapacityAssistanceInfoEUtra) GetCellAssistanceInfoEutra() *CellAssistanceInfoEUtra {
	if x != nil {
		return x.CellAssistanceInfoEutra
	}
	return nil
}

func (x *CellAndCapacityAssistanceInfoEUtra) GetIEExtensions() []*CellAndCapacityAssistanceInfoEUtraExtIes {
	if x != nil {
		return x.IEExtensions
	}
	return nil
}

// repeated from xnap_v1.asn1:3674
// {limitedEUTRA-ListCellAssistanceInfo-EUTRA}
type LimitedEutraListCellAssistanceInfoEUtra struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"sizeLB:1,sizeUB:16384,"
	LimitedEutraList []*EUTraCGi `protobuf:"bytes,1,rep,name=limited_eutra_list,json=limitedEUTRA-List,proto3" json:"limited_eutra_list,omitempty" aper:"sizeLB:1,sizeUB:16384,"`
}

func (x *LimitedEutraListCellAssistanceInfoEUtra) Reset() {
	*x = LimitedEutraListCellAssistanceInfoEUtra{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[78]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LimitedEutraListCellAssistanceInfoEUtra) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LimitedEutraListCellAssistanceInfoEUtra) ProtoMessage() {}

func (x *LimitedEutraListCellAssistanceInfoEUtra) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[78]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LimitedEutraListCellAssistanceInfoEUtra.ProtoReflect.Descriptor instead.
func (*LimitedEutraListCellAssistanceInfoEUtra) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{78}
}

func (x *LimitedEutraListCellAssistanceInfoEUtra) GetLimitedEutraList() []*EUTraCGi {
	if x != nil {
		return x.LimitedEutraList
	}
	return nil
}

// value set from xnap_v1.asn1:3679
// {CellAssistanceInfo-EUTRA-ExtIEs}
type CellAssistanceInfoEUtraExtIes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *emptypb.Empty `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *CellAssistanceInfoEUtraExtIes) Reset() {
	*x = CellAssistanceInfoEUtraExtIes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[79]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CellAssistanceInfoEUtraExtIes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CellAssistanceInfoEUtraExtIes) ProtoMessage() {}

func (x *CellAssistanceInfoEUtraExtIes) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[79]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CellAssistanceInfoEUtraExtIes.ProtoReflect.Descriptor instead.
func (*CellAssistanceInfoEUtraExtIes) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{79}
}

func (x *CellAssistanceInfoEUtraExtIes) GetValue() *emptypb.Empty {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:3674
// {CellAssistanceInfo-EUTRA}
type CellAssistanceInfoEUtra struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// choice from xnap_v1.asn1:3674
	//
	// Types that are assignable to CellAssistanceInfoEutra:
	//	*CellAssistanceInfoEUtra_LimitedEutraList
	//	*CellAssistanceInfoEUtra_FullList
	//	*CellAssistanceInfoEUtra_ChoiceExtension
	CellAssistanceInfoEutra isCellAssistanceInfoEUtra_CellAssistanceInfoEutra `protobuf_oneof:"cell_assistance_info_eutra"`
}

func (x *CellAssistanceInfoEUtra) Reset() {
	*x = CellAssistanceInfoEUtra{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[80]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CellAssistanceInfoEUtra) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CellAssistanceInfoEUtra) ProtoMessage() {}

func (x *CellAssistanceInfoEUtra) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[80]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CellAssistanceInfoEUtra.ProtoReflect.Descriptor instead.
func (*CellAssistanceInfoEUtra) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{80}
}

func (m *CellAssistanceInfoEUtra) GetCellAssistanceInfoEutra() isCellAssistanceInfoEUtra_CellAssistanceInfoEutra {
	if m != nil {
		return m.CellAssistanceInfoEutra
	}
	return nil
}

func (x *CellAssistanceInfoEUtra) GetLimitedEutraList() *LimitedEutraListCellAssistanceInfoEUtra {
	if x, ok := x.GetCellAssistanceInfoEutra().(*CellAssistanceInfoEUtra_LimitedEutraList); ok {
		return x.LimitedEutraList
	}
	return nil
}

func (x *CellAssistanceInfoEUtra) GetFullList() FullListCellAssistanceInfoEutra {
	if x, ok := x.GetCellAssistanceInfoEutra().(*CellAssistanceInfoEUtra_FullList); ok {
		return x.FullList
	}
	return FullListCellAssistanceInfoEutra_FULL_LIST_CELL_ASSISTANCE_INFO_EUTRA_ALL_SERVED_CELLS_E_UTRA
}

func (x *CellAssistanceInfoEUtra) GetChoiceExtension() *CellAssistanceInfoEUtraExtIes {
	if x, ok := x.GetCellAssistanceInfoEutra().(*CellAssistanceInfoEUtra_ChoiceExtension); ok {
		return x.ChoiceExtension
	}
	return nil
}

type isCellAssistanceInfoEUtra_CellAssistanceInfoEutra interface {
	isCellAssistanceInfoEUtra_CellAssistanceInfoEutra()
}

type CellAssistanceInfoEUtra_LimitedEutraList struct {
	// @inject_tag: aper:"choiceIdx:1,"
	LimitedEutraList *LimitedEutraListCellAssistanceInfoEUtra `protobuf:"bytes,1,opt,name=limited_eutra_list,json=limitedEUTRA-List,proto3,oneof" aper:"choiceIdx:1,"`
}

type CellAssistanceInfoEUtra_FullList struct {
	// @inject_tag: aper:"choiceIdx:2,valueExt,valueLB:0,valueUB:0,"
	FullList FullListCellAssistanceInfoEutra `protobuf:"varint,2,opt,name=full_list,json=full-List,proto3,enum=xnap.v1.FullListCellAssistanceInfoEutra,oneof" aper:"choiceIdx:2,valueExt,valueLB:0,valueUB:0,"`
}

type CellAssistanceInfoEUtra_ChoiceExtension struct {
	// @inject_tag: aper:"choiceIdx:3,"
	ChoiceExtension *CellAssistanceInfoEUtraExtIes `protobuf:"bytes,3,opt,name=choice_extension,json=choice-extension,proto3,oneof" aper:"choiceIdx:3,"`
}

func (*CellAssistanceInfoEUtra_LimitedEutraList) isCellAssistanceInfoEUtra_CellAssistanceInfoEutra() {
}

func (*CellAssistanceInfoEUtra_FullList) isCellAssistanceInfoEUtra_CellAssistanceInfoEutra() {}

func (*CellAssistanceInfoEUtra_ChoiceExtension) isCellAssistanceInfoEUtra_CellAssistanceInfoEutra() {}

// value set from xnap_v1.asn1:3689
// {CellBasedMDT-NR-ExtIEs}
type CellBasedMdtNRExtIes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *emptypb.Empty `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *CellBasedMdtNRExtIes) Reset() {
	*x = CellBasedMdtNRExtIes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[81]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CellBasedMdtNRExtIes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CellBasedMdtNRExtIes) ProtoMessage() {}

func (x *CellBasedMdtNRExtIes) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[81]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CellBasedMdtNRExtIes.ProtoReflect.Descriptor instead.
func (*CellBasedMdtNRExtIes) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{81}
}

func (x *CellBasedMdtNRExtIes) GetValue() *emptypb.Empty {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:3684
// @inject_tag: aper:"valueExt"
// {CellBasedMDT-NR}
type CellBasedMdtNR struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CellIdListforMdtNr *CellIdListforMdtNR `protobuf:"bytes,1,opt,name=cell_id_listfor_mdt_nr,json=cellIdListforMDT-NR,proto3" json:"cell_id_listfor_mdt_nr,omitempty"`
	// @inject_tag: aper:"optional,sizeLB:1,"
	IEExtensions []*CellBasedMdtNRExtIes `protobuf:"bytes,2,rep,name=i_e_extensions,json=iE-Extensions,proto3" json:"i_e_extensions,omitempty" aper:"optional,sizeLB:1,"`
}

func (x *CellBasedMdtNR) Reset() {
	*x = CellBasedMdtNR{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[82]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CellBasedMdtNR) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CellBasedMdtNR) ProtoMessage() {}

func (x *CellBasedMdtNR) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[82]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CellBasedMdtNR.ProtoReflect.Descriptor instead.
func (*CellBasedMdtNR) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{82}
}

func (x *CellBasedMdtNR) GetCellIdListforMdtNr() *CellIdListforMdtNR {
	if x != nil {
		return x.CellIdListforMdtNr
	}
	return nil
}

func (x *CellBasedMdtNR) GetIEExtensions() []*CellBasedMdtNRExtIes {
	if x != nil {
		return x.IEExtensions
	}
	return nil
}

// sequence from xnap_v1.asn1:3695
// {CellIdListforMDT-NR}
type CellIdListforMdtNR struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"valueExt,sizeLB:1,sizeUB:32,"
	Value []*NrCGi `protobuf:"bytes,1,rep,name=value,proto3" json:"value,omitempty" aper:"valueExt,sizeLB:1,sizeUB:32,"`
}

func (x *CellIdListforMdtNR) Reset() {
	*x = CellIdListforMdtNR{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[83]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CellIdListforMdtNR) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CellIdListforMdtNR) ProtoMessage() {}

func (x *CellIdListforMdtNR) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[83]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CellIdListforMdtNR.ProtoReflect.Descriptor instead.
func (*CellIdListforMdtNR) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{83}
}

func (x *CellIdListforMdtNR) GetValue() []*NrCGi {
	if x != nil {
		return x.Value
	}
	return nil
}

// value set from xnap_v1.asn1:3701
// {CellBasedMDT-EUTRA-ExtIEs}
type CellBasedMdtEUtraExtIes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *emptypb.Empty `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *CellBasedMdtEUtraExtIes) Reset() {
	*x = CellBasedMdtEUtraExtIes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[84]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CellBasedMdtEUtraExtIes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CellBasedMdtEUtraExtIes) ProtoMessage() {}

func (x *CellBasedMdtEUtraExtIes) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[84]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CellBasedMdtEUtraExtIes.ProtoReflect.Descriptor instead.
func (*CellBasedMdtEUtraExtIes) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{84}
}

func (x *CellBasedMdtEUtraExtIes) GetValue() *emptypb.Empty {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:3696
// @inject_tag: aper:"valueExt"
// {CellBasedMDT-EUTRA}
type CellBasedMdtEUtra struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CellIdListforMdtEutra *CellIdListforMdtEUtra `protobuf:"bytes,1,opt,name=cell_id_listfor_mdt_eutra,json=cellIdListforMDT-EUTRA,proto3" json:"cell_id_listfor_mdt_eutra,omitempty"`
	// @inject_tag: aper:"optional,sizeLB:1,"
	IEExtensions []*CellBasedMdtEUtraExtIes `protobuf:"bytes,2,rep,name=i_e_extensions,json=iE-Extensions,proto3" json:"i_e_extensions,omitempty" aper:"optional,sizeLB:1,"`
}

func (x *CellBasedMdtEUtra) Reset() {
	*x = CellBasedMdtEUtra{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[85]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CellBasedMdtEUtra) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CellBasedMdtEUtra) ProtoMessage() {}

func (x *CellBasedMdtEUtra) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[85]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CellBasedMdtEUtra.ProtoReflect.Descriptor instead.
func (*CellBasedMdtEUtra) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{85}
}

func (x *CellBasedMdtEUtra) GetCellIdListforMdtEutra() *CellIdListforMdtEUtra {
	if x != nil {
		return x.CellIdListforMdtEutra
	}
	return nil
}

func (x *CellBasedMdtEUtra) GetIEExtensions() []*CellBasedMdtEUtraExtIes {
	if x != nil {
		return x.IEExtensions
	}
	return nil
}

// sequence from xnap_v1.asn1:3707
// {CellIdListforMDT-EUTRA}
type CellIdListforMdtEUtra struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"valueExt,sizeLB:1,sizeUB:32,"
	Value []*EUTraCGi `protobuf:"bytes,1,rep,name=value,proto3" json:"value,omitempty" aper:"valueExt,sizeLB:1,sizeUB:32,"`
}

func (x *CellIdListforMdtEUtra) Reset() {
	*x = CellIdListforMdtEUtra{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[86]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CellIdListforMdtEUtra) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CellIdListforMdtEUtra) ProtoMessage() {}

func (x *CellIdListforMdtEUtra) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[86]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CellIdListforMdtEUtra.ProtoReflect.Descriptor instead.
func (*CellIdListforMdtEUtra) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{86}
}

func (x *CellIdListforMdtEUtra) GetValue() []*EUTraCGi {
	if x != nil {
		return x.Value
	}
	return nil
}

// range of Integer from xnap_v1.asn1:3707
// {CellCapacityClassValue}
type CellCapacityClassValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"valueExt,valueLB:1,valueUB:100,"
	Value int32 `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty" aper:"valueExt,valueLB:1,valueUB:100,"`
}

func (x *CellCapacityClassValue) Reset() {
	*x = CellCapacityClassValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[87]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CellCapacityClassValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CellCapacityClassValue) ProtoMessage() {}

func (x *CellCapacityClassValue) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[87]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CellCapacityClassValue.ProtoReflect.Descriptor instead.
func (*CellCapacityClassValue) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{87}
}

func (x *CellCapacityClassValue) GetValue() int32 {
	if x != nil {
		return x.Value
	}
	return 0
}

// range of Integer from xnap_v1.asn1:3710
// {CellGroupID}
type CellGroupId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"valueLB:0,valueUB:3,"
	Value int32 `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty" aper:"valueLB:0,valueUB:3,"`
}

func (x *CellGroupId) Reset() {
	*x = CellGroupId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[88]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CellGroupId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CellGroupId) ProtoMessage() {}

func (x *CellGroupId) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[88]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CellGroupId.ProtoReflect.Descriptor instead.
func (*CellGroupId) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{88}
}

func (x *CellGroupId) GetValue() int32 {
	if x != nil {
		return x.Value
	}
	return 0
}

// sequence from xnap_v1.asn1:3715
// {CellMeasurementResult}
type CellMeasurementResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"valueExt,sizeLB:1,sizeUB:16384,"
	Value []*CellMeasurementResultItem `protobuf:"bytes,1,rep,name=value,proto3" json:"value,omitempty" aper:"valueExt,sizeLB:1,sizeUB:16384,"`
}

func (x *CellMeasurementResult) Reset() {
	*x = CellMeasurementResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[89]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CellMeasurementResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CellMeasurementResult) ProtoMessage() {}

func (x *CellMeasurementResult) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[89]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CellMeasurementResult.ProtoReflect.Descriptor instead.
func (*CellMeasurementResult) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{89}
}

func (x *CellMeasurementResult) GetValue() []*CellMeasurementResultItem {
	if x != nil {
		return x.Value
	}
	return nil
}

// value set from xnap_v1.asn1:3728
// {CellMeasurementResult-Item-ExtIEs}
type CellMeasurementResultItemExtIes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *emptypb.Empty `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *CellMeasurementResultItemExtIes) Reset() {
	*x = CellMeasurementResultItemExtIes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[90]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CellMeasurementResultItemExtIes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CellMeasurementResultItemExtIes) ProtoMessage() {}

func (x *CellMeasurementResultItemExtIes) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[90]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CellMeasurementResultItemExtIes.ProtoReflect.Descriptor instead.
func (*CellMeasurementResultItemExtIes) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{90}
}

func (x *CellMeasurementResultItemExtIes) GetValue() *emptypb.Empty {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:3716
// @inject_tag: aper:"valueExt"
// {CellMeasurementResult-Item}
type CellMeasurementResultItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"valueExt,"
	CellId *GlobalNgRAncellID `protobuf:"bytes,1,opt,name=cell_id,json=cell-ID,proto3" json:"cell_id,omitempty" aper:"valueExt,"`
	// @inject_tag: aper:"optional,"
	RadioResourceStatus *RadioResourceStatus `protobuf:"bytes,2,opt,name=radio_resource_status,json=radioResourceStatus,proto3,oneof" json:"radio_resource_status,omitempty" aper:"optional,"`
	// @inject_tag: aper:"optional,valueExt,"
	TNlcapacityIndicator *TnlcapacityIndicator `protobuf:"bytes,3,opt,name=t_nlcapacity_indicator,json=tNLCapacityIndicator,proto3,oneof" json:"t_nlcapacity_indicator,omitempty" aper:"optional,valueExt,"`
	// @inject_tag: aper:"optional,valueExt,"
	CompositeAvailableCapacityGroup *CompositeAvailableCapacityGroup `protobuf:"bytes,4,opt,name=composite_available_capacity_group,json=compositeAvailableCapacityGroup,proto3,oneof" json:"composite_available_capacity_group,omitempty" aper:"optional,valueExt,"`
	// @inject_tag: aper:"optional,"
	SliceAvailableCapacity *SliceAvailableCapacity `protobuf:"bytes,5,opt,name=slice_available_capacity,json=sliceAvailableCapacity,proto3,oneof" json:"slice_available_capacity,omitempty" aper:"optional,"`
	// @inject_tag: aper:"optional,"
	NumberofActiveUes *NumberofActiveUes `protobuf:"bytes,6,opt,name=numberof_active_ues,json=numberofActiveUEs,proto3,oneof" json:"numberof_active_ues,omitempty" aper:"optional,"`
	// @inject_tag: aper:"optional,valueExt,"
	RRcconnections *Rrcconnections `protobuf:"bytes,7,opt,name=r_rcconnections,json=rRCConnections,proto3,oneof" json:"r_rcconnections,omitempty" aper:"optional,valueExt,"`
	// @inject_tag: aper:"optional,sizeLB:1,"
	IEExtensions []*CellMeasurementResultItemExtIes `protobuf:"bytes,8,rep,name=i_e_extensions,json=iE-Extensions,proto3" json:"i_e_extensions,omitempty" aper:"optional,sizeLB:1,"`
}

func (x *CellMeasurementResultItem) Reset() {
	*x = CellMeasurementResultItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[91]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CellMeasurementResultItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CellMeasurementResultItem) ProtoMessage() {}

func (x *CellMeasurementResultItem) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[91]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CellMeasurementResultItem.ProtoReflect.Descriptor instead.
func (*CellMeasurementResultItem) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{91}
}

func (x *CellMeasurementResultItem) GetCellId() *GlobalNgRAncellID {
	if x != nil {
		return x.CellId
	}
	return nil
}

func (x *CellMeasurementResultItem) GetRadioResourceStatus() *RadioResourceStatus {
	if x != nil {
		return x.RadioResourceStatus
	}
	return nil
}

func (x *CellMeasurementResultItem) GetTNlcapacityIndicator() *TnlcapacityIndicator {
	if x != nil {
		return x.TNlcapacityIndicator
	}
	return nil
}

func (x *CellMeasurementResultItem) GetCompositeAvailableCapacityGroup() *CompositeAvailableCapacityGroup {
	if x != nil {
		return x.CompositeAvailableCapacityGroup
	}
	return nil
}

func (x *CellMeasurementResultItem) GetSliceAvailableCapacity() *SliceAvailableCapacity {
	if x != nil {
		return x.SliceAvailableCapacity
	}
	return nil
}

func (x *CellMeasurementResultItem) GetNumberofActiveUes() *NumberofActiveUes {
	if x != nil {
		return x.NumberofActiveUes
	}
	return nil
}

func (x *CellMeasurementResultItem) GetRRcconnections() *Rrcconnections {
	if x != nil {
		return x.RRcconnections
	}
	return nil
}

func (x *CellMeasurementResultItem) GetIEExtensions() []*CellMeasurementResultItemExtIes {
	if x != nil {
		return x.IEExtensions
	}
	return nil
}

// sequence from xnap_v1.asn1:3735
// {CellToReport}
type CellToReport struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"valueExt,sizeLB:1,sizeUB:16384,"
	Value []*CellToReportItem `protobuf:"bytes,1,rep,name=value,proto3" json:"value,omitempty" aper:"valueExt,sizeLB:1,sizeUB:16384,"`
}

func (x *CellToReport) Reset() {
	*x = CellToReport{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[92]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CellToReport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CellToReport) ProtoMessage() {}

func (x *CellToReport) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[92]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CellToReport.ProtoReflect.Descriptor instead.
func (*CellToReport) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{92}
}

func (x *CellToReport) GetValue() []*CellToReportItem {
	if x != nil {
		return x.Value
	}
	return nil
}

// value set from xnap_v1.asn1:3744
// {CellToReport-Item-ExtIEs}
type CellToReportItemExtIes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *emptypb.Empty `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *CellToReportItemExtIes) Reset() {
	*x = CellToReportItemExtIes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[93]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CellToReportItemExtIes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CellToReportItemExtIes) ProtoMessage() {}

func (x *CellToReportItemExtIes) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[93]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CellToReportItemExtIes.ProtoReflect.Descriptor instead.
func (*CellToReportItemExtIes) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{93}
}

func (x *CellToReportItemExtIes) GetValue() *emptypb.Empty {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:3736
// @inject_tag: aper:"valueExt"
// {CellToReport-Item}
type CellToReportItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"valueExt,"
	CellId *GlobalNgRAncellID `protobuf:"bytes,1,opt,name=cell_id,json=cell-ID,proto3" json:"cell_id,omitempty" aper:"valueExt,"`
	// @inject_tag: aper:"optional,"
	SSbtoReportList *SsbtoReportList `protobuf:"bytes,2,opt,name=s_sbto_report_list,json=sSBToReport-List,proto3,oneof" json:"s_sbto_report_list,omitempty" aper:"optional,"`
	// @inject_tag: aper:"optional,"
	SliceToReportList *SliceToReportList `protobuf:"bytes,3,opt,name=slice_to_report_list,json=sliceToReport-List,proto3,oneof" json:"slice_to_report_list,omitempty" aper:"optional,"`
	// @inject_tag: aper:"optional,sizeLB:1,"
	IEExtensions []*CellToReportItemExtIes `protobuf:"bytes,4,rep,name=i_e_extensions,json=iE-Extensions,proto3" json:"i_e_extensions,omitempty" aper:"optional,sizeLB:1,"`
}

func (x *CellToReportItem) Reset() {
	*x = CellToReportItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[94]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CellToReportItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CellToReportItem) ProtoMessage() {}

func (x *CellToReportItem) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[94]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CellToReportItem.ProtoReflect.Descriptor instead.
func (*CellToReportItem) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{94}
}

func (x *CellToReportItem) GetCellId() *GlobalNgRAncellID {
	if x != nil {
		return x.CellId
	}
	return nil
}

func (x *CellToReportItem) GetSSbtoReportList() *SsbtoReportList {
	if x != nil {
		return x.SSbtoReportList
	}
	return nil
}

func (x *CellToReportItem) GetSliceToReportList() *SliceToReportList {
	if x != nil {
		return x.SliceToReportList
	}
	return nil
}

func (x *CellToReportItem) GetIEExtensions() []*CellToReportItemExtIes {
	if x != nil {
		return x.IEExtensions
	}
	return nil
}

// value set from xnap_v1.asn1:3756
// {Cell-Type-Choice-ExtIEs}
type CellTypeChoiceExtIes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *emptypb.Empty `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *CellTypeChoiceExtIes) Reset() {
	*x = CellTypeChoiceExtIes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[95]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CellTypeChoiceExtIes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CellTypeChoiceExtIes) ProtoMessage() {}

func (x *CellTypeChoiceExtIes) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[95]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CellTypeChoiceExtIes.ProtoReflect.Descriptor instead.
func (*CellTypeChoiceExtIes) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{95}
}

func (x *CellTypeChoiceExtIes) GetValue() *emptypb.Empty {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:3750
// {Cell-Type-Choice}
type CellTypeChoice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// choice from xnap_v1.asn1:3750
	//
	// Types that are assignable to CellTypeChoice:
	//	*CellTypeChoice_NgRanEUtra
	//	*CellTypeChoice_NgRanNr
	//	*CellTypeChoice_EUtran
	//	*CellTypeChoice_ChoiceExtension
	CellTypeChoice isCellTypeChoice_CellTypeChoice `protobuf_oneof:"cell_type_choice"`
}

func (x *CellTypeChoice) Reset() {
	*x = CellTypeChoice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[96]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CellTypeChoice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CellTypeChoice) ProtoMessage() {}

func (x *CellTypeChoice) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[96]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CellTypeChoice.ProtoReflect.Descriptor instead.
func (*CellTypeChoice) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{96}
}

func (m *CellTypeChoice) GetCellTypeChoice() isCellTypeChoice_CellTypeChoice {
	if m != nil {
		return m.CellTypeChoice
	}
	return nil
}

func (x *CellTypeChoice) GetNgRanEUtra() *EUTraCellIdentity {
	if x, ok := x.GetCellTypeChoice().(*CellTypeChoice_NgRanEUtra); ok {
		return x.NgRanEUtra
	}
	return nil
}

func (x *CellTypeChoice) GetNgRanNr() *NrCellIdentity {
	if x, ok := x.GetCellTypeChoice().(*CellTypeChoice_NgRanNr); ok {
		return x.NgRanNr
	}
	return nil
}

func (x *CellTypeChoice) GetEUtran() *EUTraCellIdentity {
	if x, ok := x.GetCellTypeChoice().(*CellTypeChoice_EUtran); ok {
		return x.EUtran
	}
	return nil
}

func (x *CellTypeChoice) GetChoiceExtension() *CellTypeChoiceExtIes {
	if x, ok := x.GetCellTypeChoice().(*CellTypeChoice_ChoiceExtension); ok {
		return x.ChoiceExtension
	}
	return nil
}

type isCellTypeChoice_CellTypeChoice interface {
	isCellTypeChoice_CellTypeChoice()
}

type CellTypeChoice_NgRanEUtra struct {
	// @inject_tag: aper:"choiceIdx:1,"
	NgRanEUtra *EUTraCellIdentity `protobuf:"bytes,1,opt,name=ng_ran_e_utra,json=ng-ran-e-utra,proto3,oneof" aper:"choiceIdx:1,"`
}

type CellTypeChoice_NgRanNr struct {
	// @inject_tag: aper:"choiceIdx:2,"
	NgRanNr *NrCellIdentity `protobuf:"bytes,2,opt,name=ng_ran_nr,json=ng-ran-nr,proto3,oneof" aper:"choiceIdx:2,"`
}

type CellTypeChoice_EUtran struct {
	// @inject_tag: aper:"choiceIdx:3,"
	EUtran *EUTraCellIdentity `protobuf:"bytes,3,opt,name=e_utran,json=e-utran,proto3,oneof" aper:"choiceIdx:3,"`
}

type CellTypeChoice_ChoiceExtension struct {
	// @inject_tag: aper:"choiceIdx:4,"
	ChoiceExtension *CellTypeChoiceExtIes `protobuf:"bytes,4,opt,name=choice_extension,json=choice-extension,proto3,oneof" aper:"choiceIdx:4,"`
}

func (*CellTypeChoice_NgRanEUtra) isCellTypeChoice_CellTypeChoice() {}

func (*CellTypeChoice_NgRanNr) isCellTypeChoice_CellTypeChoice() {}

func (*CellTypeChoice_EUtran) isCellTypeChoice_CellTypeChoice() {}

func (*CellTypeChoice_ChoiceExtension) isCellTypeChoice_CellTypeChoice() {}

// value set from xnap_v1.asn1:3768
// {CompositeAvailableCapacityGroup-ExtIEs}
type CompositeAvailableCapacityGroupExtIes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *emptypb.Empty `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *CompositeAvailableCapacityGroupExtIes) Reset() {
	*x = CompositeAvailableCapacityGroupExtIes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[97]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CompositeAvailableCapacityGroupExtIes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompositeAvailableCapacityGroupExtIes) ProtoMessage() {}

func (x *CompositeAvailableCapacityGroupExtIes) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[97]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompositeAvailableCapacityGroupExtIes.ProtoReflect.Descriptor instead.
func (*CompositeAvailableCapacityGroupExtIes) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{97}
}

func (x *CompositeAvailableCapacityGroupExtIes) GetValue() *emptypb.Empty {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:3762
// @inject_tag: aper:"valueExt"
// {CompositeAvailableCapacityGroup}
type CompositeAvailableCapacityGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"valueExt,"
	CompositeAvailableCapacityDownlink *CompositeAvailableCapacity `protobuf:"bytes,1,opt,name=composite_available_capacity_downlink,json=compositeAvailableCapacityDownlink,proto3" json:"composite_available_capacity_downlink,omitempty" aper:"valueExt,"`
	// @inject_tag: aper:"valueExt,"
	CompositeAvailableCapacityUplink *CompositeAvailableCapacity `protobuf:"bytes,2,opt,name=composite_available_capacity_uplink,json=compositeAvailableCapacityUplink,proto3" json:"composite_available_capacity_uplink,omitempty" aper:"valueExt,"`
	// @inject_tag: aper:"optional,sizeLB:1,"
	IEExtensions []*CompositeAvailableCapacityGroupExtIes `protobuf:"bytes,3,rep,name=i_e_extensions,json=iE-Extensions,proto3" json:"i_e_extensions,omitempty" aper:"optional,sizeLB:1,"`
}

func (x *CompositeAvailableCapacityGroup) Reset() {
	*x = CompositeAvailableCapacityGroup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[98]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CompositeAvailableCapacityGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompositeAvailableCapacityGroup) ProtoMessage() {}

func (x *CompositeAvailableCapacityGroup) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[98]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompositeAvailableCapacityGroup.ProtoReflect.Descriptor instead.
func (*CompositeAvailableCapacityGroup) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{98}
}

func (x *CompositeAvailableCapacityGroup) GetCompositeAvailableCapacityDownlink() *CompositeAvailableCapacity {
	if x != nil {
		return x.CompositeAvailableCapacityDownlink
	}
	return nil
}

func (x *CompositeAvailableCapacityGroup) GetCompositeAvailableCapacityUplink() *CompositeAvailableCapacity {
	if x != nil {
		return x.CompositeAvailableCapacityUplink
	}
	return nil
}

func (x *CompositeAvailableCapacityGroup) GetIEExtensions() []*CompositeAvailableCapacityGroupExtIes {
	if x != nil {
		return x.IEExtensions
	}
	return nil
}

// value set from xnap_v1.asn1:3779
// {CompositeAvailableCapacity-ExtIEs}
type CompositeAvailableCapacityExtIes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *emptypb.Empty `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *CompositeAvailableCapacityExtIes) Reset() {
	*x = CompositeAvailableCapacityExtIes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[99]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CompositeAvailableCapacityExtIes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompositeAvailableCapacityExtIes) ProtoMessage() {}

func (x *CompositeAvailableCapacityExtIes) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[99]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompositeAvailableCapacityExtIes.ProtoReflect.Descriptor instead.
func (*CompositeAvailableCapacityExtIes) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{99}
}

func (x *CompositeAvailableCapacityExtIes) GetValue() *emptypb.Empty {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:3773
// @inject_tag: aper:"valueExt"
// {CompositeAvailableCapacity}
type CompositeAvailableCapacity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"optional,"
	CellCapacityClassValue *CellCapacityClassValue `protobuf:"bytes,1,opt,name=cell_capacity_class_value,json=cellCapacityClassValue,proto3,oneof" json:"cell_capacity_class_value,omitempty" aper:"optional,"`
	// @inject_tag: aper:"valueExt,"
	CapacityValueInfo *CapacityValueInfo `protobuf:"bytes,2,opt,name=capacity_value_info,json=capacityValueInfo,proto3" json:"capacity_value_info,omitempty" aper:"valueExt,"`
	// @inject_tag: aper:"optional,sizeLB:1,"
	IEExtensions []*CompositeAvailableCapacityExtIes `protobuf:"bytes,3,rep,name=i_e_extensions,json=iE-Extensions,proto3" json:"i_e_extensions,omitempty" aper:"optional,sizeLB:1,"`
}

func (x *CompositeAvailableCapacity) Reset() {
	*x = CompositeAvailableCapacity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[100]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CompositeAvailableCapacity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompositeAvailableCapacity) ProtoMessage() {}

func (x *CompositeAvailableCapacity) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[100]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompositeAvailableCapacity.ProtoReflect.Descriptor instead.
func (*CompositeAvailableCapacity) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{100}
}

func (x *CompositeAvailableCapacity) GetCellCapacityClassValue() *CellCapacityClassValue {
	if x != nil {
		return x.CellCapacityClassValue
	}
	return nil
}

func (x *CompositeAvailableCapacity) GetCapacityValueInfo() *CapacityValueInfo {
	if x != nil {
		return x.CapacityValueInfo
	}
	return nil
}

func (x *CompositeAvailableCapacity) GetIEExtensions() []*CompositeAvailableCapacityExtIes {
	if x != nil {
		return x.IEExtensions
	}
	return nil
}

// value set from xnap_v1.asn1:3803
// {CHOinformation-Req-ExtIEs}
type ChoinformationReqExtIes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *emptypb.Empty `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *ChoinformationReqExtIes) Reset() {
	*x = ChoinformationReqExtIes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[101]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChoinformationReqExtIes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChoinformationReqExtIes) ProtoMessage() {}

func (x *ChoinformationReqExtIes) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[101]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChoinformationReqExtIes.ProtoReflect.Descriptor instead.
func (*ChoinformationReqExtIes) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{101}
}

func (x *ChoinformationReqExtIes) GetValue() *emptypb.Empty {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:3795
// @inject_tag: aper:"valueExt"
// {CHOinformation-Req}
type ChoinformationReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"valueExt,valueLB:0,valueUB:1,"
	ChoTrigger Chotrigger `protobuf:"varint,1,opt,name=cho_trigger,json=cho-trigger,proto3,enum=xnap.v1.Chotrigger" json:"cho_trigger,omitempty" aper:"valueExt,valueLB:0,valueUB:1,"`
	// @inject_tag: aper:"optional,"
	TargetNgRannodeUexnApid *NgRAnnodeUexnApid `protobuf:"bytes,2,opt,name=target_ng_rannode_uexn_apid,json=targetNG-RANnodeUEXnAPID,proto3,oneof" json:"target_ng_rannode_uexn_apid,omitempty" aper:"optional,"`
	// @inject_tag: aper:"optional,"
	CHoEstimatedArrivalProbability *ChoProbability `protobuf:"bytes,3,opt,name=c_ho_estimated_arrival_probability,json=cHO-EstimatedArrivalProbability,proto3,oneof" json:"c_ho_estimated_arrival_probability,omitempty" aper:"optional,"`
	// @inject_tag: aper:"optional,sizeLB:1,"
	IEExtensions []*ChoinformationReqExtIes `protobuf:"bytes,4,rep,name=i_e_extensions,json=iE-Extensions,proto3" json:"i_e_extensions,omitempty" aper:"optional,sizeLB:1,"`
}

func (x *ChoinformationReq) Reset() {
	*x = ChoinformationReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[102]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChoinformationReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChoinformationReq) ProtoMessage() {}

func (x *ChoinformationReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[102]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChoinformationReq.ProtoReflect.Descriptor instead.
func (*ChoinformationReq) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{102}
}

func (x *ChoinformationReq) GetChoTrigger() Chotrigger {
	if x != nil {
		return x.ChoTrigger
	}
	return Chotrigger_CHOTRIGGER_CHO_INITIATION
}

func (x *ChoinformationReq) GetTargetNgRannodeUexnApid() *NgRAnnodeUexnApid {
	if x != nil {
		return x.TargetNgRannodeUexnApid
	}
	return nil
}

func (x *ChoinformationReq) GetCHoEstimatedArrivalProbability() *ChoProbability {
	if x != nil {
		return x.CHoEstimatedArrivalProbability
	}
	return nil
}

func (x *ChoinformationReq) GetIEExtensions() []*ChoinformationReqExtIes {
	if x != nil {
		return x.IEExtensions
	}
	return nil
}

// value set from xnap_v1.asn1:3815
// {CHOinformation-Ack-ExtIEs}
type ChoinformationAckExtIes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *emptypb.Empty `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *ChoinformationAckExtIes) Reset() {
	*x = ChoinformationAckExtIes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[103]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChoinformationAckExtIes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChoinformationAckExtIes) ProtoMessage() {}

func (x *ChoinformationAckExtIes) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[103]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChoinformationAckExtIes.ProtoReflect.Descriptor instead.
func (*ChoinformationAckExtIes) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{103}
}

func (x *ChoinformationAckExtIes) GetValue() *emptypb.Empty {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:3809
// @inject_tag: aper:"valueExt"
// {CHOinformation-Ack}
type ChoinformationAck struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestedTargetCellGlobalId *TargetCGi `protobuf:"bytes,1,opt,name=requested_target_cell_global_id,json=requestedTargetCellGlobalID,proto3" json:"requested_target_cell_global_id,omitempty"`
	// @inject_tag: aper:"optional,"
	MaxChooperations *MaxChopreparations `protobuf:"bytes,2,opt,name=max_chooperations,json=maxCHOoperations,proto3,oneof" json:"max_chooperations,omitempty" aper:"optional,"`
	// @inject_tag: aper:"optional,sizeLB:1,"
	IEExtensions []*ChoinformationAckExtIes `protobuf:"bytes,3,rep,name=i_e_extensions,json=iE-Extensions,proto3" json:"i_e_extensions,omitempty" aper:"optional,sizeLB:1,"`
}

func (x *ChoinformationAck) Reset() {
	*x = ChoinformationAck{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[104]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChoinformationAck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChoinformationAck) ProtoMessage() {}

func (x *ChoinformationAck) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[104]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChoinformationAck.ProtoReflect.Descriptor instead.
func (*ChoinformationAck) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{104}
}

func (x *ChoinformationAck) GetRequestedTargetCellGlobalId() *TargetCGi {
	if x != nil {
		return x.RequestedTargetCellGlobalId
	}
	return nil
}

func (x *ChoinformationAck) GetMaxChooperations() *MaxChopreparations {
	if x != nil {
		return x.MaxChooperations
	}
	return nil
}

func (x *ChoinformationAck) GetIEExtensions() []*ChoinformationAckExtIes {
	if x != nil {
		return x.IEExtensions
	}
	return nil
}

// range of Integer from xnap_v1.asn1:3820
// {CHO-Probability}
type ChoProbability struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"valueLB:1,valueUB:100,"
	Value int32 `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty" aper:"valueLB:1,valueUB:100,"`
}

func (x *ChoProbability) Reset() {
	*x = ChoProbability{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[105]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChoProbability) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChoProbability) ProtoMessage() {}

func (x *ChoProbability) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[105]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChoProbability.ProtoReflect.Descriptor instead.
func (*ChoProbability) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{105}
}

func (x *ChoProbability) GetValue() int32 {
	if x != nil {
		return x.Value
	}
	return 0
}

// value set from xnap_v1.asn1:3835
// {Connectivity-Support-ExtIEs}
type ConnectivitySupportExtIes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *emptypb.Empty `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *ConnectivitySupportExtIes) Reset() {
	*x = ConnectivitySupportExtIes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[106]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConnectivitySupportExtIes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConnectivitySupportExtIes) ProtoMessage() {}

func (x *ConnectivitySupportExtIes) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[106]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConnectivitySupportExtIes.ProtoReflect.Descriptor instead.
func (*ConnectivitySupportExtIes) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{106}
}

func (x *ConnectivitySupportExtIes) GetValue() *emptypb.Empty {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:3830
// @inject_tag: aper:"valueExt"
// {Connectivity-Support}
type ConnectivitySupport struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"valueExt,valueLB:0,valueUB:1,"
	ENdcSupport EndcsupportConnectivitySupport `protobuf:"varint,1,opt,name=e_ndc_support,json=eNDC-Support,proto3,enum=xnap.v1.EndcsupportConnectivitySupport" json:"e_ndc_support,omitempty" aper:"valueExt,valueLB:0,valueUB:1,"`
	// @inject_tag: aper:"optional,sizeLB:1,sizeUB:65535,valueExt"
	IEExtensions []*ConnectivitySupportExtIes `protobuf:"bytes,2,rep,name=i_e_extensions,json=iE-Extensions,proto3" json:"i_e_extensions,omitempty" aper:"optional,sizeLB:1,sizeUB:65535,valueExt"`
}

func (x *ConnectivitySupport) Reset() {
	*x = ConnectivitySupport{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[107]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConnectivitySupport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConnectivitySupport) ProtoMessage() {}

func (x *ConnectivitySupport) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[107]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConnectivitySupport.ProtoReflect.Descriptor instead.
func (*ConnectivitySupport) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{107}
}

func (x *ConnectivitySupport) GetENdcSupport() EndcsupportConnectivitySupport {
	if x != nil {
		return x.ENdcSupport
	}
	return EndcsupportConnectivitySupport_E_NDCSUPPORT_CONNECTIVITY_SUPPORT_SUPPORTED
}

func (x *ConnectivitySupport) GetIEExtensions() []*ConnectivitySupportExtIes {
	if x != nil {
		return x.IEExtensions
	}
	return nil
}

// value set from xnap_v1.asn1:3847
// {COUNT-PDCP-SN12-ExtIEs}
type CountPDcpSN12ExtIes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *emptypb.Empty `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *CountPDcpSN12ExtIes) Reset() {
	*x = CountPDcpSN12ExtIes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[108]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CountPDcpSN12ExtIes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CountPDcpSN12ExtIes) ProtoMessage() {}

func (x *CountPDcpSN12ExtIes) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[108]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CountPDcpSN12ExtIes.ProtoReflect.Descriptor instead.
func (*CountPDcpSN12ExtIes) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{108}
}

func (x *CountPDcpSN12ExtIes) GetValue() *emptypb.Empty {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:3841
// @inject_tag: aper:"valueExt"
// {COUNT-PDCP-SN12}
type CountPDcpSN12 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"valueLB:0,valueUB:4095,"
	PdcpSn12 int32 `protobuf:"varint,1,opt,name=pdcp_sn12,json=pdcp-SN12,proto3" json:"pdcp_sn12,omitempty" aper:"valueLB:0,valueUB:4095,"`
	// @inject_tag: aper:"valueLB:0,valueUB:1048575,"
	HfnPdcpSn12 int32 `protobuf:"varint,2,opt,name=hfn_pdcp_sn12,json=hfn-PDCP-SN12,proto3" json:"hfn_pdcp_sn12,omitempty" aper:"valueLB:0,valueUB:1048575,"`
	// @inject_tag: aper:"optional,sizeLB:1,"
	IEExtensions []*CountPDcpSN12ExtIes `protobuf:"bytes,3,rep,name=i_e_extensions,json=iE-Extensions,proto3" json:"i_e_extensions,omitempty" aper:"optional,sizeLB:1,"`
}

func (x *CountPDcpSN12) Reset() {
	*x = CountPDcpSN12{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[109]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CountPDcpSN12) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CountPDcpSN12) ProtoMessage() {}

func (x *CountPDcpSN12) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[109]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CountPDcpSN12.ProtoReflect.Descriptor instead.
func (*CountPDcpSN12) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{109}
}

func (x *CountPDcpSN12) GetPdcpSn12() int32 {
	if x != nil {
		return x.PdcpSn12
	}
	return 0
}

func (x *CountPDcpSN12) GetHfnPdcpSn12() int32 {
	if x != nil {
		return x.HfnPdcpSn12
	}
	return 0
}

func (x *CountPDcpSN12) GetIEExtensions() []*CountPDcpSN12ExtIes {
	if x != nil {
		return x.IEExtensions
	}
	return nil
}

// value set from xnap_v1.asn1:3859
// {COUNT-PDCP-SN18-ExtIEs}
type CountPDcpSN18ExtIes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *emptypb.Empty `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *CountPDcpSN18ExtIes) Reset() {
	*x = CountPDcpSN18ExtIes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[110]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CountPDcpSN18ExtIes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CountPDcpSN18ExtIes) ProtoMessage() {}

func (x *CountPDcpSN18ExtIes) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[110]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CountPDcpSN18ExtIes.ProtoReflect.Descriptor instead.
func (*CountPDcpSN18ExtIes) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{110}
}

func (x *CountPDcpSN18ExtIes) GetValue() *emptypb.Empty {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:3853
// @inject_tag: aper:"valueExt"
// {COUNT-PDCP-SN18}
type CountPDcpSN18 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"valueLB:0,valueUB:262143,"
	PdcpSn18 int32 `protobuf:"varint,1,opt,name=pdcp_sn18,json=pdcp-SN18,proto3" json:"pdcp_sn18,omitempty" aper:"valueLB:0,valueUB:262143,"`
	// @inject_tag: aper:"valueLB:0,valueUB:16383,"
	HfnPdcpSn18 int32 `protobuf:"varint,2,opt,name=hfn_pdcp_sn18,json=hfn-PDCP-SN18,proto3" json:"hfn_pdcp_sn18,omitempty" aper:"valueLB:0,valueUB:16383,"`
	// @inject_tag: aper:"optional,sizeLB:1,"
	IEExtensions []*CountPDcpSN18ExtIes `protobuf:"bytes,3,rep,name=i_e_extensions,json=iE-Extensions,proto3" json:"i_e_extensions,omitempty" aper:"optional,sizeLB:1,"`
}

func (x *CountPDcpSN18) Reset() {
	*x = CountPDcpSN18{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[111]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CountPDcpSN18) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CountPDcpSN18) ProtoMessage() {}

func (x *CountPDcpSN18) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[111]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CountPDcpSN18.ProtoReflect.Descriptor instead.
func (*CountPDcpSN18) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{111}
}

func (x *CountPDcpSN18) GetPdcpSn18() int32 {
	if x != nil {
		return x.PdcpSn18
	}
	return 0
}

func (x *CountPDcpSN18) GetHfnPdcpSn18() int32 {
	if x != nil {
		return x.HfnPdcpSn18
	}
	return 0
}

func (x *CountPDcpSN18) GetIEExtensions() []*CountPDcpSN18ExtIes {
	if x != nil {
		return x.IEExtensions
	}
	return nil
}

// value set from xnap_v1.asn1:3869
// {CPTransportLayerInformation-ExtIEs}
type CptransportLayerInformationExtIes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *emptypb.Empty `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *CptransportLayerInformationExtIes) Reset() {
	*x = CptransportLayerInformationExtIes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[112]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CptransportLayerInformationExtIes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CptransportLayerInformationExtIes) ProtoMessage() {}

func (x *CptransportLayerInformationExtIes) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[112]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CptransportLayerInformationExtIes.ProtoReflect.Descriptor instead.
func (*CptransportLayerInformationExtIes) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{112}
}

func (x *CptransportLayerInformationExtIes) GetValue() *emptypb.Empty {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:3865
// {CPTransportLayerInformation}
type CptransportLayerInformation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// choice from xnap_v1.asn1:3865
	//
	// Types that are assignable to CptransportLayerInformation:
	//	*CptransportLayerInformation_EndpointIpaddress
	//	*CptransportLayerInformation_ChoiceExtension
	CptransportLayerInformation isCptransportLayerInformation_CptransportLayerInformation `protobuf_oneof:"cptransport_layer_information"`
}

func (x *CptransportLayerInformation) Reset() {
	*x = CptransportLayerInformation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[113]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CptransportLayerInformation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CptransportLayerInformation) ProtoMessage() {}

func (x *CptransportLayerInformation) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[113]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CptransportLayerInformation.ProtoReflect.Descriptor instead.
func (*CptransportLayerInformation) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{113}
}

func (m *CptransportLayerInformation) GetCptransportLayerInformation() isCptransportLayerInformation_CptransportLayerInformation {
	if m != nil {
		return m.CptransportLayerInformation
	}
	return nil
}

func (x *CptransportLayerInformation) GetEndpointIpaddress() *TransportLayerAddress {
	if x, ok := x.GetCptransportLayerInformation().(*CptransportLayerInformation_EndpointIpaddress); ok {
		return x.EndpointIpaddress
	}
	return nil
}

func (x *CptransportLayerInformation) GetChoiceExtension() *CptransportLayerInformationExtIes {
	if x, ok := x.GetCptransportLayerInformation().(*CptransportLayerInformation_ChoiceExtension); ok {
		return x.ChoiceExtension
	}
	return nil
}

type isCptransportLayerInformation_CptransportLayerInformation interface {
	isCptransportLayerInformation_CptransportLayerInformation()
}

type CptransportLayerInformation_EndpointIpaddress struct {
	// @inject_tag: aper:"choiceIdx:1,"
	EndpointIpaddress *TransportLayerAddress `protobuf:"bytes,1,opt,name=endpoint_ipaddress,json=endpointIPAddress,proto3,oneof" aper:"choiceIdx:1,"`
}

type CptransportLayerInformation_ChoiceExtension struct {
	// @inject_tag: aper:"choiceIdx:2,"
	ChoiceExtension *CptransportLayerInformationExtIes `protobuf:"bytes,2,opt,name=choice_extension,json=choice-extension,proto3,oneof" aper:"choiceIdx:2,"`
}

func (*CptransportLayerInformation_EndpointIpaddress) isCptransportLayerInformation_CptransportLayerInformation() {
}

func (*CptransportLayerInformation_ChoiceExtension) isCptransportLayerInformation_CptransportLayerInformation() {
}

// value set from xnap_v1.asn1:3884
// {CriticalityDiagnostics-ExtIEs}
type CriticalityDiagnosticsExtIes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *emptypb.Empty `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *CriticalityDiagnosticsExtIes) Reset() {
	*x = CriticalityDiagnosticsExtIes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[114]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CriticalityDiagnosticsExtIes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CriticalityDiagnosticsExtIes) ProtoMessage() {}

func (x *CriticalityDiagnosticsExtIes) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[114]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CriticalityDiagnosticsExtIes.ProtoReflect.Descriptor instead.
func (*CriticalityDiagnosticsExtIes) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{114}
}

func (x *CriticalityDiagnosticsExtIes) GetValue() *emptypb.Empty {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:3876
// @inject_tag: aper:"valueExt"
// {CriticalityDiagnostics}
type CriticalityDiagnostics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"optional,"
	ProcedureCode *xnap_commondatatypes.ProcedureCode `protobuf:"bytes,1,opt,name=procedure_code,json=procedureCode,proto3,oneof" json:"procedure_code,omitempty" aper:"optional,"`
	// @inject_tag: aper:"optional,valueLB:0,valueUB:2,"
	TriggeringMessage *xnap_commondatatypes.TriggeringMessage `protobuf:"varint,2,opt,name=triggering_message,json=triggeringMessage,proto3,enum=xnap.v1.TriggeringMessage,oneof" json:"triggering_message,omitempty" aper:"optional,valueLB:0,valueUB:2,"`
	// @inject_tag: aper:"optional,valueLB:0,valueUB:2,"
	ProcedureCriticality *xnap_commondatatypes.Criticality `protobuf:"varint,3,opt,name=procedure_criticality,json=procedureCriticality,proto3,enum=xnap.v1.Criticality,oneof" json:"procedure_criticality,omitempty" aper:"optional,valueLB:0,valueUB:2,"`
	// @inject_tag: aper:"optional,"
	IEsCriticalityDiagnostics *CriticalityDiagnosticsIEList `protobuf:"bytes,4,opt,name=i_es_criticality_diagnostics,json=iEsCriticalityDiagnostics,proto3,oneof" json:"i_es_criticality_diagnostics,omitempty" aper:"optional,"`
	// @inject_tag: aper:"optional,sizeLB:1,"
	IEExtensions []*CriticalityDiagnosticsExtIes `protobuf:"bytes,5,rep,name=i_e_extensions,json=iE-Extensions,proto3" json:"i_e_extensions,omitempty" aper:"optional,sizeLB:1,"`
}

func (x *CriticalityDiagnostics) Reset() {
	*x = CriticalityDiagnostics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[115]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CriticalityDiagnostics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CriticalityDiagnostics) ProtoMessage() {}

func (x *CriticalityDiagnostics) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[115]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CriticalityDiagnostics.ProtoReflect.Descriptor instead.
func (*CriticalityDiagnostics) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{115}
}

func (x *CriticalityDiagnostics) GetProcedureCode() *xnap_commondatatypes.ProcedureCode {
	if x != nil {
		return x.ProcedureCode
	}
	return nil
}

func (x *CriticalityDiagnostics) GetTriggeringMessage() xnap_commondatatypes.TriggeringMessage {
	if x != nil && x.TriggeringMessage != nil {
		return *x.TriggeringMessage
	}
	return xnap_commondatatypes.TriggeringMessage(0)
}

func (x *CriticalityDiagnostics) GetProcedureCriticality() xnap_commondatatypes.Criticality {
	if x != nil && x.ProcedureCriticality != nil {
		return *x.ProcedureCriticality
	}
	return xnap_commondatatypes.Criticality(0)
}

func (x *CriticalityDiagnostics) GetIEsCriticalityDiagnostics() *CriticalityDiagnosticsIEList {
	if x != nil {
		return x.IEsCriticalityDiagnostics
	}
	return nil
}

func (x *CriticalityDiagnostics) GetIEExtensions() []*CriticalityDiagnosticsExtIes {
	if x != nil {
		return x.IEExtensions
	}
	return nil
}

// value set from xnap_v1.asn1:3897
// {CriticalityDiagnostics-IE-List-ExtIEs}
type CriticalityDiagnosticsIEListExtIes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *emptypb.Empty `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *CriticalityDiagnosticsIEListExtIes) Reset() {
	*x = CriticalityDiagnosticsIEListExtIes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[116]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CriticalityDiagnosticsIEListExtIes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CriticalityDiagnosticsIEListExtIes) ProtoMessage() {}

func (x *CriticalityDiagnosticsIEListExtIes) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[116]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CriticalityDiagnosticsIEListExtIes.ProtoReflect.Descriptor instead.
func (*CriticalityDiagnosticsIEListExtIes) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{116}
}

func (x *CriticalityDiagnosticsIEListExtIes) GetValue() *emptypb.Empty {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:3890
// @inject_tag: aper:"valueExt"
// {NestedCriticalityDiagnostics-IE-List}
type NestedCriticalityDiagnosticsIEList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"valueLB:0,valueUB:2,"
	IEcriticality xnap_commondatatypes.Criticality   `protobuf:"varint,1,opt,name=i_ecriticality,json=iECriticality,proto3,enum=xnap.v1.Criticality" json:"i_ecriticality,omitempty" aper:"valueLB:0,valueUB:2,"`
	IEId          *xnap_commondatatypes.ProtocolIeID `protobuf:"bytes,2,opt,name=i_e_id,json=iE-ID,proto3" json:"i_e_id,omitempty"`
	// @inject_tag: aper:"valueExt,valueLB:0,valueUB:1,"
	TypeOfError TypeOfError `protobuf:"varint,3,opt,name=type_of_error,json=typeOfError,proto3,enum=xnap.v1.TypeOfError" json:"type_of_error,omitempty" aper:"valueExt,valueLB:0,valueUB:1,"`
	// @inject_tag: aper:"optional,sizeLB:1,"
	IEExtensions []*CriticalityDiagnosticsIEListExtIes `protobuf:"bytes,4,rep,name=i_e_extensions,json=iE-Extensions,proto3" json:"i_e_extensions,omitempty" aper:"optional,sizeLB:1,"`
}

func (x *NestedCriticalityDiagnosticsIEList) Reset() {
	*x = NestedCriticalityDiagnosticsIEList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[117]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NestedCriticalityDiagnosticsIEList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NestedCriticalityDiagnosticsIEList) ProtoMessage() {}

func (x *NestedCriticalityDiagnosticsIEList) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[117]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NestedCriticalityDiagnosticsIEList.ProtoReflect.Descriptor instead.
func (*NestedCriticalityDiagnosticsIEList) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{117}
}

func (x *NestedCriticalityDiagnosticsIEList) GetIEcriticality() xnap_commondatatypes.Criticality {
	if x != nil {
		return x.IEcriticality
	}
	return xnap_commondatatypes.Criticality(0)
}

func (x *NestedCriticalityDiagnosticsIEList) GetIEId() *xnap_commondatatypes.ProtocolIeID {
	if x != nil {
		return x.IEId
	}
	return nil
}

func (x *NestedCriticalityDiagnosticsIEList) GetTypeOfError() TypeOfError {
	if x != nil {
		return x.TypeOfError
	}
	return TypeOfError_TYPE_OF_ERROR_NOT_UNDERSTOOD
}

func (x *NestedCriticalityDiagnosticsIEList) GetIEExtensions() []*CriticalityDiagnosticsIEListExtIes {
	if x != nil {
		return x.IEExtensions
	}
	return nil
}

// sequence from xnap_v1.asn1:3895
// {CriticalityDiagnostics-IE-List}
type CriticalityDiagnosticsIEList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"valueExt,sizeLB:1,sizeUB:256,"
	Value []*NestedCriticalityDiagnosticsIEList `protobuf:"bytes,1,rep,name=value,proto3" json:"value,omitempty" aper:"valueExt,sizeLB:1,sizeUB:256,"`
}

func (x *CriticalityDiagnosticsIEList) Reset() {
	*x = CriticalityDiagnosticsIEList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[118]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CriticalityDiagnosticsIEList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CriticalityDiagnosticsIEList) ProtoMessage() {}

func (x *CriticalityDiagnosticsIEList) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[118]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CriticalityDiagnosticsIEList.ProtoReflect.Descriptor instead.
func (*CriticalityDiagnosticsIEList) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{118}
}

func (x *CriticalityDiagnosticsIEList) GetValue() []*NestedCriticalityDiagnosticsIEList {
	if x != nil {
		return x.Value
	}
	return nil
}

// range of Integer from xnap_v1.asn1:3902
// {C-RNTI}
type CRNti struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"sizeLB:16,sizeUB:16,"
	Value *asn1.BitString `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty" aper:"sizeLB:16,sizeUB:16,"`
}

func (x *CRNti) Reset() {
	*x = CRNti{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[119]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CRNti) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CRNti) ProtoMessage() {}

func (x *CRNti) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[119]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CRNti.ProtoReflect.Descriptor instead.
func (*CRNti) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{119}
}

func (x *CRNti) GetValue() *asn1.BitString {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:3930
// {XnUAddressInfoperPDUSession-List}
type XnUaddressInfoperPdusessionList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"valueExt,sizeLB:1,sizeUB:256,"
	Value []*XnUaddressInfoperPdusessionItem `protobuf:"bytes,1,rep,name=value,proto3" json:"value,omitempty" aper:"valueExt,sizeLB:1,sizeUB:256,"`
}

func (x *XnUaddressInfoperPdusessionList) Reset() {
	*x = XnUaddressInfoperPdusessionList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[120]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *XnUaddressInfoperPdusessionList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*XnUaddressInfoperPdusessionList) ProtoMessage() {}

func (x *XnUaddressInfoperPdusessionList) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[120]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use XnUaddressInfoperPdusessionList.ProtoReflect.Descriptor instead.
func (*XnUaddressInfoperPdusessionList) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{120}
}

func (x *XnUaddressInfoperPdusessionList) GetValue() []*XnUaddressInfoperPdusessionItem {
	if x != nil {
		return x.Value
	}
	return nil
}

// value set from xnap_v1.asn1:3938
// {XnUAddressInfoperPDUSession-Item-ExtIEs&Extension}
type XnUaddressInfoperPdusessionItemExtIesExtension struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// value set translated as choice from xnap_v1.asn1:3938
	//
	// Types that are assignable to XnUaddressInfoperPdusessionItemExtIes:
	//	*XnUaddressInfoperPdusessionItemExtIesExtension_IdSecondarydataForwardingInfoFromTargetList
	//	*XnUaddressInfoperPdusessionItemExtIesExtension_IdDrbIdsTakenintouse
	//	*XnUaddressInfoperPdusessionItemExtIesExtension_IdDataForwardingInfoFromTargetEUtrannode
	XnUaddressInfoperPdusessionItemExtIes isXnUaddressInfoperPdusessionItemExtIesExtension_XnUaddressInfoperPdusessionItemExtIes `protobuf_oneof:"xn_uaddress_infoper_pdusession_item_ext_ies"`
}

func (x *XnUaddressInfoperPdusessionItemExtIesExtension) Reset() {
	*x = XnUaddressInfoperPdusessionItemExtIesExtension{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[121]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *XnUaddressInfoperPdusessionItemExtIesExtension) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*XnUaddressInfoperPdusessionItemExtIesExtension) ProtoMessage() {}

func (x *XnUaddressInfoperPdusessionItemExtIesExtension) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[121]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use XnUaddressInfoperPdusessionItemExtIesExtension.ProtoReflect.Descriptor instead.
func (*XnUaddressInfoperPdusessionItemExtIesExtension) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{121}
}

func (m *XnUaddressInfoperPdusessionItemExtIesExtension) GetXnUaddressInfoperPdusessionItemExtIes() isXnUaddressInfoperPdusessionItemExtIesExtension_XnUaddressInfoperPdusessionItemExtIes {
	if m != nil {
		return m.XnUaddressInfoperPdusessionItemExtIes
	}
	return nil
}

func (x *XnUaddressInfoperPdusessionItemExtIesExtension) GetIdSecondarydataForwardingInfoFromTargetList() *SecondarydataForwardingInfoFromTargetList {
	if x, ok := x.GetXnUaddressInfoperPdusessionItemExtIes().(*XnUaddressInfoperPdusessionItemExtIesExtension_IdSecondarydataForwardingInfoFromTargetList); ok {
		return x.IdSecondarydataForwardingInfoFromTargetList
	}
	return nil
}

func (x *XnUaddressInfoperPdusessionItemExtIesExtension) GetIdDrbIdsTakenintouse() *DrbList {
	if x, ok := x.GetXnUaddressInfoperPdusessionItemExtIes().(*XnUaddressInfoperPdusessionItemExtIesExtension_IdDrbIdsTakenintouse); ok {
		return x.IdDrbIdsTakenintouse
	}
	return nil
}

func (x *XnUaddressInfoperPdusessionItemExtIesExtension) GetIdDataForwardingInfoFromTargetEUtrannode() *DataForwardingInfoFromTargetEUTrannode {
	if x, ok := x.GetXnUaddressInfoperPdusessionItemExtIes().(*XnUaddressInfoperPdusessionItemExtIesExtension_IdDataForwardingInfoFromTargetEUtrannode); ok {
		return x.IdDataForwardingInfoFromTargetEUtrannode
	}
	return nil
}

type isXnUaddressInfoperPdusessionItemExtIesExtension_XnUaddressInfoperPdusessionItemExtIes interface {
	isXnUaddressInfoperPdusessionItemExtIesExtension_XnUaddressInfoperPdusessionItemExtIes()
}

type XnUaddressInfoperPdusessionItemExtIesExtension_IdSecondarydataForwardingInfoFromTargetList struct {
	// @inject_tag: aper:"choiceIdx:1,"
	IdSecondarydataForwardingInfoFromTargetList *SecondarydataForwardingInfoFromTargetList `protobuf:"bytes,1,opt,name=id_secondarydata_forwarding_info_from_target_list,json=id-SecondarydataForwardingInfoFromTarget-List,proto3,oneof" aper:"choiceIdx:1,"`
}

type XnUaddressInfoperPdusessionItemExtIesExtension_IdDrbIdsTakenintouse struct {
	// @inject_tag: aper:"choiceIdx:2,"
	IdDrbIdsTakenintouse *DrbList `protobuf:"bytes,2,opt,name=id_drb_ids_takenintouse,json=id-DRB-IDs-takenintouse,proto3,oneof" aper:"choiceIdx:2,"`
}

type XnUaddressInfoperPdusessionItemExtIesExtension_IdDataForwardingInfoFromTargetEUtrannode struct {
	// @inject_tag: aper:"choiceIdx:3,valueExt,"
	IdDataForwardingInfoFromTargetEUtrannode *DataForwardingInfoFromTargetEUTrannode `protobuf:"bytes,3,opt,name=id_data_forwarding_info_from_target_e_utrannode,json=id-dataForwardingInfoFromTargetE-UTRANnode,proto3,oneof" aper:"choiceIdx:3,valueExt,"`
}

func (*XnUaddressInfoperPdusessionItemExtIesExtension_IdSecondarydataForwardingInfoFromTargetList) isXnUaddressInfoperPdusessionItemExtIesExtension_XnUaddressInfoperPdusessionItemExtIes() {
}

func (*XnUaddressInfoperPdusessionItemExtIesExtension_IdDrbIdsTakenintouse) isXnUaddressInfoperPdusessionItemExtIesExtension_XnUaddressInfoperPdusessionItemExtIes() {
}

func (*XnUaddressInfoperPdusessionItemExtIesExtension_IdDataForwardingInfoFromTargetEUtrannode) isXnUaddressInfoperPdusessionItemExtIesExtension_XnUaddressInfoperPdusessionItemExtIes() {
}

// concrete instance(s) of class XNAP-PROTOCOL-EXTENSION from xnap_v1.asn1:3938
// @inject_tag: aper:"valueExt"
// {XnUAddressInfoperPDUSession-Item-ExtIEs}
type XnUaddressInfoperPdusessionItemExtIes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"unique,"
	Id *xnap_commondatatypes.ProtocolIeID `protobuf:"bytes,1,opt,name=id,json=&id,proto3" json:"id,omitempty" aper:"unique,"`
	// @inject_tag: aper:"valueLB:0,valueUB:2,"
	Criticality xnap_commondatatypes.Criticality `protobuf:"varint,2,opt,name=criticality,json=&criticality,proto3,enum=xnap.v1.Criticality" json:"criticality,omitempty" aper:"valueLB:0,valueUB:2,"`
	// @inject_tag: aper:"canonicalOrder,"
	Extension *XnUaddressInfoperPdusessionItemExtIesExtension `protobuf:"bytes,3,opt,name=extension,json=&Extension,proto3" json:"extension,omitempty" aper:"canonicalOrder,"`
}

func (x *XnUaddressInfoperPdusessionItemExtIes) Reset() {
	*x = XnUaddressInfoperPdusessionItemExtIes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[122]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *XnUaddressInfoperPdusessionItemExtIes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*XnUaddressInfoperPdusessionItemExtIes) ProtoMessage() {}

func (x *XnUaddressInfoperPdusessionItemExtIes) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[122]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use XnUaddressInfoperPdusessionItemExtIes.ProtoReflect.Descriptor instead.
func (*XnUaddressInfoperPdusessionItemExtIes) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{122}
}

func (x *XnUaddressInfoperPdusessionItemExtIes) GetId() *xnap_commondatatypes.ProtocolIeID {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *XnUaddressInfoperPdusessionItemExtIes) GetCriticality() xnap_commondatatypes.Criticality {
	if x != nil {
		return x.Criticality
	}
	return xnap_commondatatypes.Criticality(0)
}

func (x *XnUaddressInfoperPdusessionItemExtIes) GetExtension() *XnUaddressInfoperPdusessionItemExtIesExtension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// sequence from xnap_v1.asn1:3931
// @inject_tag: aper:"valueExt"
// {XnUAddressInfoperPDUSession-Item}
type XnUaddressInfoperPdusessionItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PduSessionId *PdusessionID `protobuf:"bytes,1,opt,name=pdu_session_id,json=pduSession-ID,proto3" json:"pdu_session_id,omitempty"`
	// @inject_tag: aper:"optional,valueExt,"
	DataForwardingInfoFromTargetNgrannode *DataForwardingInfoFromTargetNgrannode `protobuf:"bytes,2,opt,name=data_forwarding_info_from_target_ngrannode,json=dataForwardingInfoFromTargetNGRANnode,proto3,oneof" json:"data_forwarding_info_from_target_ngrannode,omitempty" aper:"optional,valueExt,"`
	// @inject_tag: aper:"optional,valueExt,"
	PduSessionResourceSetupCompleteInfoSnterm *PdusessionResourceBearerSetupCompleteInfoSNterminated `protobuf:"bytes,3,opt,name=pdu_session_resource_setup_complete_info_snterm,json=pduSessionResourceSetupCompleteInfo-SNterm,proto3,oneof" json:"pdu_session_resource_setup_complete_info_snterm,omitempty" aper:"optional,valueExt,"`
	// @inject_tag: aper:"optional,sizeLB:1,"
	IEExtension []*XnUaddressInfoperPdusessionItemExtIes `protobuf:"bytes,4,rep,name=i_e_extension,json=iE-Extension,proto3" json:"i_e_extension,omitempty" aper:"optional,sizeLB:1,"`
}

func (x *XnUaddressInfoperPdusessionItem) Reset() {
	*x = XnUaddressInfoperPdusessionItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[123]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *XnUaddressInfoperPdusessionItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*XnUaddressInfoperPdusessionItem) ProtoMessage() {}

func (x *XnUaddressInfoperPdusessionItem) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[123]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use XnUaddressInfoperPdusessionItem.ProtoReflect.Descriptor instead.
func (*XnUaddressInfoperPdusessionItem) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{123}
}

func (x *XnUaddressInfoperPdusessionItem) GetPduSessionId() *PdusessionID {
	if x != nil {
		return x.PduSessionId
	}
	return nil
}

func (x *XnUaddressInfoperPdusessionItem) GetDataForwardingInfoFromTargetNgrannode() *DataForwardingInfoFromTargetNgrannode {
	if x != nil {
		return x.DataForwardingInfoFromTargetNgrannode
	}
	return nil
}

func (x *XnUaddressInfoperPdusessionItem) GetPduSessionResourceSetupCompleteInfoSnterm() *PdusessionResourceBearerSetupCompleteInfoSNterminated {
	if x != nil {
		return x.PduSessionResourceSetupCompleteInfoSnterm
	}
	return nil
}

func (x *XnUaddressInfoperPdusessionItem) GetIEExtension() []*XnUaddressInfoperPdusessionItemExtIes {
	if x != nil {
		return x.IEExtension
	}
	return nil
}

// value set from xnap_v1.asn1:3953
// {DataForwardingInfoFromTargetE-UTRANnode-ExtIEs}
type DataForwardingInfoFromTargetEUTrannodeExtIes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *emptypb.Empty `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *DataForwardingInfoFromTargetEUTrannodeExtIes) Reset() {
	*x = DataForwardingInfoFromTargetEUTrannodeExtIes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[124]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataForwardingInfoFromTargetEUTrannodeExtIes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataForwardingInfoFromTargetEUTrannodeExtIes) ProtoMessage() {}

func (x *DataForwardingInfoFromTargetEUTrannodeExtIes) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[124]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataForwardingInfoFromTargetEUTrannodeExtIes.ProtoReflect.Descriptor instead.
func (*DataForwardingInfoFromTargetEUTrannodeExtIes) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{124}
}

func (x *DataForwardingInfoFromTargetEUTrannodeExtIes) GetValue() *emptypb.Empty {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:3948
// @inject_tag: aper:"valueExt"
// {DataForwardingInfoFromTargetE-UTRANnode}
type DataForwardingInfoFromTargetEUTrannode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DataForwardingInfoFromTargetEUtrannodeList *DataForwardingInfoFromTargetEUTrannodeList `protobuf:"bytes,1,opt,name=data_forwarding_info_from_target_e_utrannode_list,json=dataForwardingInfoFromTargetE-UTRANnode-List,proto3" json:"data_forwarding_info_from_target_e_utrannode_list,omitempty"`
	// @inject_tag: aper:"optional,sizeLB:1,"
	IEExtension []*DataForwardingInfoFromTargetEUTrannodeExtIes `protobuf:"bytes,2,rep,name=i_e_extension,json=iE-Extension,proto3" json:"i_e_extension,omitempty" aper:"optional,sizeLB:1,"`
}

func (x *DataForwardingInfoFromTargetEUTrannode) Reset() {
	*x = DataForwardingInfoFromTargetEUTrannode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[125]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataForwardingInfoFromTargetEUTrannode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataForwardingInfoFromTargetEUTrannode) ProtoMessage() {}

func (x *DataForwardingInfoFromTargetEUTrannode) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[125]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataForwardingInfoFromTargetEUTrannode.ProtoReflect.Descriptor instead.
func (*DataForwardingInfoFromTargetEUTrannode) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{125}
}

func (x *DataForwardingInfoFromTargetEUTrannode) GetDataForwardingInfoFromTargetEUtrannodeList() *DataForwardingInfoFromTargetEUTrannodeList {
	if x != nil {
		return x.DataForwardingInfoFromTargetEUtrannodeList
	}
	return nil
}

func (x *DataForwardingInfoFromTargetEUTrannode) GetIEExtension() []*DataForwardingInfoFromTargetEUTrannodeExtIes {
	if x != nil {
		return x.IEExtension
	}
	return nil
}

// sequence from xnap_v1.asn1:3959
// {DataForwardingInfoFromTargetE-UTRANnode-List}
type DataForwardingInfoFromTargetEUTrannodeList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"valueExt,sizeLB:1,sizeUB:256,"
	Value []*DataForwardingInfoFromTargetEUTrannodeItem `protobuf:"bytes,1,rep,name=value,proto3" json:"value,omitempty" aper:"valueExt,sizeLB:1,sizeUB:256,"`
}

func (x *DataForwardingInfoFromTargetEUTrannodeList) Reset() {
	*x = DataForwardingInfoFromTargetEUTrannodeList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[126]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataForwardingInfoFromTargetEUTrannodeList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataForwardingInfoFromTargetEUTrannodeList) ProtoMessage() {}

func (x *DataForwardingInfoFromTargetEUTrannodeList) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[126]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataForwardingInfoFromTargetEUTrannodeList.ProtoReflect.Descriptor instead.
func (*DataForwardingInfoFromTargetEUTrannodeList) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{126}
}

func (x *DataForwardingInfoFromTargetEUTrannodeList) GetValue() []*DataForwardingInfoFromTargetEUTrannodeItem {
	if x != nil {
		return x.Value
	}
	return nil
}

// value set from xnap_v1.asn1:3966
// {DataForwardingInfoFromTargetE-UTRANnode-Item-ExtIEs}
type DataForwardingInfoFromTargetEUTrannodeItemExtIes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *emptypb.Empty `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *DataForwardingInfoFromTargetEUTrannodeItemExtIes) Reset() {
	*x = DataForwardingInfoFromTargetEUTrannodeItemExtIes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[127]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataForwardingInfoFromTargetEUTrannodeItemExtIes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataForwardingInfoFromTargetEUTrannodeItemExtIes) ProtoMessage() {}

func (x *DataForwardingInfoFromTargetEUTrannodeItemExtIes) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[127]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataForwardingInfoFromTargetEUTrannodeItemExtIes.ProtoReflect.Descriptor instead.
func (*DataForwardingInfoFromTargetEUTrannodeItemExtIes) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{127}
}

func (x *DataForwardingInfoFromTargetEUTrannodeItemExtIes) GetValue() *emptypb.Empty {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:3960
// @inject_tag: aper:"valueExt"
// {DataForwardingInfoFromTargetE-UTRANnode-Item}
type DataForwardingInfoFromTargetEUTrannodeItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DlForwardingUptnlinformation *UptransportLayerInformation `protobuf:"bytes,1,opt,name=dl_forwarding_uptnlinformation,json=dlForwardingUPTNLInformation,proto3" json:"dl_forwarding_uptnlinformation,omitempty"`
	QosFlowsToBeForwardedList    *QoSflowsToBeForwardedList   `protobuf:"bytes,2,opt,name=qos_flows_to_be_forwarded_list,json=qosFlowsToBeForwarded-List,proto3" json:"qos_flows_to_be_forwarded_list,omitempty"`
	// @inject_tag: aper:"optional,sizeLB:1,"
	IEExtension []*DataForwardingInfoFromTargetEUTrannodeItemExtIes `protobuf:"bytes,3,rep,name=i_e_extension,json=iE-Extension,proto3" json:"i_e_extension,omitempty" aper:"optional,sizeLB:1,"`
}

func (x *DataForwardingInfoFromTargetEUTrannodeItem) Reset() {
	*x = DataForwardingInfoFromTargetEUTrannodeItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[128]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataForwardingInfoFromTargetEUTrannodeItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataForwardingInfoFromTargetEUTrannodeItem) ProtoMessage() {}

func (x *DataForwardingInfoFromTargetEUTrannodeItem) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[128]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataForwardingInfoFromTargetEUTrannodeItem.ProtoReflect.Descriptor instead.
func (*DataForwardingInfoFromTargetEUTrannodeItem) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{128}
}

func (x *DataForwardingInfoFromTargetEUTrannodeItem) GetDlForwardingUptnlinformation() *UptransportLayerInformation {
	if x != nil {
		return x.DlForwardingUptnlinformation
	}
	return nil
}

func (x *DataForwardingInfoFromTargetEUTrannodeItem) GetQosFlowsToBeForwardedList() *QoSflowsToBeForwardedList {
	if x != nil {
		return x.QosFlowsToBeForwardedList
	}
	return nil
}

func (x *DataForwardingInfoFromTargetEUTrannodeItem) GetIEExtension() []*DataForwardingInfoFromTargetEUTrannodeItemExtIes {
	if x != nil {
		return x.IEExtension
	}
	return nil
}

// sequence from xnap_v1.asn1:3971
// {QoSFlowsToBeForwarded-List}
type QoSflowsToBeForwardedList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"valueExt,sizeLB:1,sizeUB:64,"
	Value []*QoSflowsToBeForwardedItem `protobuf:"bytes,1,rep,name=value,proto3" json:"value,omitempty" aper:"valueExt,sizeLB:1,sizeUB:64,"`
}

func (x *QoSflowsToBeForwardedList) Reset() {
	*x = QoSflowsToBeForwardedList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[129]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QoSflowsToBeForwardedList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QoSflowsToBeForwardedList) ProtoMessage() {}

func (x *QoSflowsToBeForwardedList) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[129]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QoSflowsToBeForwardedList.ProtoReflect.Descriptor instead.
func (*QoSflowsToBeForwardedList) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{129}
}

func (x *QoSflowsToBeForwardedList) GetValue() []*QoSflowsToBeForwardedItem {
	if x != nil {
		return x.Value
	}
	return nil
}

// value set from xnap_v1.asn1:3977
// {QoSFlowsToBeForwarded-Item-ExtIEs}
type QoSflowsToBeForwardedItemExtIes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *emptypb.Empty `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *QoSflowsToBeForwardedItemExtIes) Reset() {
	*x = QoSflowsToBeForwardedItemExtIes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[130]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QoSflowsToBeForwardedItemExtIes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QoSflowsToBeForwardedItemExtIes) ProtoMessage() {}

func (x *QoSflowsToBeForwardedItemExtIes) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[130]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QoSflowsToBeForwardedItemExtIes.ProtoReflect.Descriptor instead.
func (*QoSflowsToBeForwardedItemExtIes) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{130}
}

func (x *QoSflowsToBeForwardedItemExtIes) GetValue() *emptypb.Empty {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:3972
// @inject_tag: aper:"valueExt"
// {QoSFlowsToBeForwarded-Item}
type QoSflowsToBeForwardedItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	QosFlowIdentifier *QoSflowIdentifier `protobuf:"bytes,1,opt,name=qos_flow_identifier,json=qosFlowIdentifier,proto3" json:"qos_flow_identifier,omitempty"`
	// @inject_tag: aper:"optional,sizeLB:1,"
	IEExtension []*QoSflowsToBeForwardedItemExtIes `protobuf:"bytes,2,rep,name=i_e_extension,json=iE-Extension,proto3" json:"i_e_extension,omitempty" aper:"optional,sizeLB:1,"`
}

func (x *QoSflowsToBeForwardedItem) Reset() {
	*x = QoSflowsToBeForwardedItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[131]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QoSflowsToBeForwardedItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QoSflowsToBeForwardedItem) ProtoMessage() {}

func (x *QoSflowsToBeForwardedItem) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[131]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QoSflowsToBeForwardedItem.ProtoReflect.Descriptor instead.
func (*QoSflowsToBeForwardedItem) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{131}
}

func (x *QoSflowsToBeForwardedItem) GetQosFlowIdentifier() *QoSflowIdentifier {
	if x != nil {
		return x.QosFlowIdentifier
	}
	return nil
}

func (x *QoSflowsToBeForwardedItem) GetIEExtension() []*QoSflowsToBeForwardedItemExtIes {
	if x != nil {
		return x.IEExtension
	}
	return nil
}

// value set from xnap_v1.asn1:3991
// {DataForwardingInfoFromTargetNGRANnode-ExtIEs}
type DataForwardingInfoFromTargetNgrannodeExtIes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *emptypb.Empty `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *DataForwardingInfoFromTargetNgrannodeExtIes) Reset() {
	*x = DataForwardingInfoFromTargetNgrannodeExtIes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[132]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataForwardingInfoFromTargetNgrannodeExtIes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataForwardingInfoFromTargetNgrannodeExtIes) ProtoMessage() {}

func (x *DataForwardingInfoFromTargetNgrannodeExtIes) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[132]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataForwardingInfoFromTargetNgrannodeExtIes.ProtoReflect.Descriptor instead.
func (*DataForwardingInfoFromTargetNgrannodeExtIes) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{132}
}

func (x *DataForwardingInfoFromTargetNgrannodeExtIes) GetValue() *emptypb.Empty {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:3983
// @inject_tag: aper:"valueExt"
// {DataForwardingInfoFromTargetNGRANnode}
type DataForwardingInfoFromTargetNgrannode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	QosFlowsAcceptedForDataForwardingList *QoSflowsAcceptedToBeForwardedList `protobuf:"bytes,1,opt,name=qos_flows_accepted_for_data_forwarding_list,json=qosFlowsAcceptedForDataForwarding-List,proto3" json:"qos_flows_accepted_for_data_forwarding_list,omitempty"`
	// @inject_tag: aper:"optional,"
	PduSessionLevelDldataForwardingInfo *UptransportLayerInformation `protobuf:"bytes,2,opt,name=pdu_session_level_dldata_forwarding_info,json=pduSessionLevelDLDataForwardingInfo,proto3,oneof" json:"pdu_session_level_dldata_forwarding_info,omitempty" aper:"optional,"`
	// @inject_tag: aper:"optional,"
	PduSessionLevelUldataForwardingInfo *UptransportLayerInformation `protobuf:"bytes,3,opt,name=pdu_session_level_uldata_forwarding_info,json=pduSessionLevelULDataForwardingInfo,proto3,oneof" json:"pdu_session_level_uldata_forwarding_info,omitempty" aper:"optional,"`
	// @inject_tag: aper:"optional,"
	DataForwardingResponseDrbitemList *DataForwardingResponseDrbitemList `protobuf:"bytes,4,opt,name=data_forwarding_response_drbitem_list,json=dataForwardingResponseDRBItemList,proto3,oneof" json:"data_forwarding_response_drbitem_list,omitempty" aper:"optional,"`
	// @inject_tag: aper:"optional,sizeLB:1,"
	IEExtension []*DataForwardingInfoFromTargetNgrannodeExtIes `protobuf:"bytes,5,rep,name=i_e_extension,json=iE-Extension,proto3" json:"i_e_extension,omitempty" aper:"optional,sizeLB:1,"`
}

func (x *DataForwardingInfoFromTargetNgrannode) Reset() {
	*x = DataForwardingInfoFromTargetNgrannode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[133]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataForwardingInfoFromTargetNgrannode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataForwardingInfoFromTargetNgrannode) ProtoMessage() {}

func (x *DataForwardingInfoFromTargetNgrannode) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[133]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataForwardingInfoFromTargetNgrannode.ProtoReflect.Descriptor instead.
func (*DataForwardingInfoFromTargetNgrannode) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{133}
}

func (x *DataForwardingInfoFromTargetNgrannode) GetQosFlowsAcceptedForDataForwardingList() *QoSflowsAcceptedToBeForwardedList {
	if x != nil {
		return x.QosFlowsAcceptedForDataForwardingList
	}
	return nil
}

func (x *DataForwardingInfoFromTargetNgrannode) GetPduSessionLevelDldataForwardingInfo() *UptransportLayerInformation {
	if x != nil {
		return x.PduSessionLevelDldataForwardingInfo
	}
	return nil
}

func (x *DataForwardingInfoFromTargetNgrannode) GetPduSessionLevelUldataForwardingInfo() *UptransportLayerInformation {
	if x != nil {
		return x.PduSessionLevelUldataForwardingInfo
	}
	return nil
}

func (x *DataForwardingInfoFromTargetNgrannode) GetDataForwardingResponseDrbitemList() *DataForwardingResponseDrbitemList {
	if x != nil {
		return x.DataForwardingResponseDrbitemList
	}
	return nil
}

func (x *DataForwardingInfoFromTargetNgrannode) GetIEExtension() []*DataForwardingInfoFromTargetNgrannodeExtIes {
	if x != nil {
		return x.IEExtension
	}
	return nil
}

// sequence from xnap_v1.asn1:3998
// {QoSFLowsAcceptedToBeForwarded-List}
type QoSflowsAcceptedToBeForwardedList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"valueExt,sizeLB:1,sizeUB:64,"
	Value []*QoSflowsAcceptedToBeForwardedItem `protobuf:"bytes,1,rep,name=value,proto3" json:"value,omitempty" aper:"valueExt,sizeLB:1,sizeUB:64,"`
}

func (x *QoSflowsAcceptedToBeForwardedList) Reset() {
	*x = QoSflowsAcceptedToBeForwardedList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[134]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QoSflowsAcceptedToBeForwardedList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QoSflowsAcceptedToBeForwardedList) ProtoMessage() {}

func (x *QoSflowsAcceptedToBeForwardedList) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[134]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QoSflowsAcceptedToBeForwardedList.ProtoReflect.Descriptor instead.
func (*QoSflowsAcceptedToBeForwardedList) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{134}
}

func (x *QoSflowsAcceptedToBeForwardedList) GetValue() []*QoSflowsAcceptedToBeForwardedItem {
	if x != nil {
		return x.Value
	}
	return nil
}

// value set from xnap_v1.asn1:4004
// {QoSFLowsAcceptedToBeForwarded-Item-ExtIEs}
type QoSflowsAcceptedToBeForwardedItemExtIes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *emptypb.Empty `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *QoSflowsAcceptedToBeForwardedItemExtIes) Reset() {
	*x = QoSflowsAcceptedToBeForwardedItemExtIes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[135]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QoSflowsAcceptedToBeForwardedItemExtIes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QoSflowsAcceptedToBeForwardedItemExtIes) ProtoMessage() {}

func (x *QoSflowsAcceptedToBeForwardedItemExtIes) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[135]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QoSflowsAcceptedToBeForwardedItemExtIes.ProtoReflect.Descriptor instead.
func (*QoSflowsAcceptedToBeForwardedItemExtIes) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{135}
}

func (x *QoSflowsAcceptedToBeForwardedItemExtIes) GetValue() *emptypb.Empty {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:3999
// @inject_tag: aper:"valueExt"
// {QoSFLowsAcceptedToBeForwarded-Item}
type QoSflowsAcceptedToBeForwardedItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	QosFlowIdentifier *QoSflowIdentifier `protobuf:"bytes,1,opt,name=qos_flow_identifier,json=qosFlowIdentifier,proto3" json:"qos_flow_identifier,omitempty"`
	// @inject_tag: aper:"optional,sizeLB:1,"
	IEExtension []*QoSflowsAcceptedToBeForwardedItemExtIes `protobuf:"bytes,2,rep,name=i_e_extension,json=iE-Extension,proto3" json:"i_e_extension,omitempty" aper:"optional,sizeLB:1,"`
}

func (x *QoSflowsAcceptedToBeForwardedItem) Reset() {
	*x = QoSflowsAcceptedToBeForwardedItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[136]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QoSflowsAcceptedToBeForwardedItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QoSflowsAcceptedToBeForwardedItem) ProtoMessage() {}

func (x *QoSflowsAcceptedToBeForwardedItem) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[136]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QoSflowsAcceptedToBeForwardedItem.ProtoReflect.Descriptor instead.
func (*QoSflowsAcceptedToBeForwardedItem) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{136}
}

func (x *QoSflowsAcceptedToBeForwardedItem) GetQosFlowIdentifier() *QoSflowIdentifier {
	if x != nil {
		return x.QosFlowIdentifier
	}
	return nil
}

func (x *QoSflowsAcceptedToBeForwardedItem) GetIEExtension() []*QoSflowsAcceptedToBeForwardedItemExtIes {
	if x != nil {
		return x.IEExtension
	}
	return nil
}

// value set from xnap_v1.asn1:4016
// {DataforwardingandOffloadingInfofromSource-ExtIEs}
type DataforwardingandOffloadingInfofromSourceExtIes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *emptypb.Empty `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *DataforwardingandOffloadingInfofromSourceExtIes) Reset() {
	*x = DataforwardingandOffloadingInfofromSourceExtIes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[137]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataforwardingandOffloadingInfofromSourceExtIes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataforwardingandOffloadingInfofromSourceExtIes) ProtoMessage() {}

func (x *DataforwardingandOffloadingInfofromSourceExtIes) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[137]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataforwardingandOffloadingInfofromSourceExtIes.ProtoReflect.Descriptor instead.
func (*DataforwardingandOffloadingInfofromSourceExtIes) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{137}
}

func (x *DataforwardingandOffloadingInfofromSourceExtIes) GetValue() *emptypb.Empty {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:4010
// @inject_tag: aper:"valueExt"
// {DataforwardingandOffloadingInfofromSource}
type DataforwardingandOffloadingInfofromSource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	QosFlowsToBeForwarded *QoSflowsToBeForwardedList1 `protobuf:"bytes,1,opt,name=qos_flows_to_be_forwarded,json=qosFlowsToBeForwarded,proto3" json:"qos_flows_to_be_forwarded,omitempty"`
	// @inject_tag: aper:"optional,"
	SourceDrbtoQoSflowMapping *DrbtoQoSflowMappingList `protobuf:"bytes,2,opt,name=source_drbto_qo_sflow_mapping,json=sourceDRBtoQoSFlowMapping,proto3,oneof" json:"source_drbto_qo_sflow_mapping,omitempty" aper:"optional,"`
	// @inject_tag: aper:"optional,sizeLB:1,"
	IEExtension []*DataforwardingandOffloadingInfofromSourceExtIes `protobuf:"bytes,3,rep,name=i_e_extension,json=iE-Extension,proto3" json:"i_e_extension,omitempty" aper:"optional,sizeLB:1,"`
}

func (x *DataforwardingandOffloadingInfofromSource) Reset() {
	*x = DataforwardingandOffloadingInfofromSource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[138]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataforwardingandOffloadingInfofromSource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataforwardingandOffloadingInfofromSource) ProtoMessage() {}

func (x *DataforwardingandOffloadingInfofromSource) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[138]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataforwardingandOffloadingInfofromSource.ProtoReflect.Descriptor instead.
func (*DataforwardingandOffloadingInfofromSource) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{138}
}

func (x *DataforwardingandOffloadingInfofromSource) GetQosFlowsToBeForwarded() *QoSflowsToBeForwardedList1 {
	if x != nil {
		return x.QosFlowsToBeForwarded
	}
	return nil
}

func (x *DataforwardingandOffloadingInfofromSource) GetSourceDrbtoQoSflowMapping() *DrbtoQoSflowMappingList {
	if x != nil {
		return x.SourceDrbtoQoSflowMapping
	}
	return nil
}

func (x *DataforwardingandOffloadingInfofromSource) GetIEExtension() []*DataforwardingandOffloadingInfofromSourceExtIes {
	if x != nil {
		return x.IEExtension
	}
	return nil
}

// sequence from xnap_v1.asn1:4022
// {QoSFLowsToBeForwarded-List}
type QoSflowsToBeForwardedList1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"valueExt,sizeLB:1,sizeUB:64,"
	Value []*QoSflowsToBeForwardedItem1 `protobuf:"bytes,1,rep,name=value,proto3" json:"value,omitempty" aper:"valueExt,sizeLB:1,sizeUB:64,"`
}

func (x *QoSflowsToBeForwardedList1) Reset() {
	*x = QoSflowsToBeForwardedList1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[139]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QoSflowsToBeForwardedList1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QoSflowsToBeForwardedList1) ProtoMessage() {}

func (x *QoSflowsToBeForwardedList1) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[139]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QoSflowsToBeForwardedList1.ProtoReflect.Descriptor instead.
func (*QoSflowsToBeForwardedList1) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{139}
}

func (x *QoSflowsToBeForwardedList1) GetValue() []*QoSflowsToBeForwardedItem1 {
	if x != nil {
		return x.Value
	}
	return nil
}

// value set from xnap_v1.asn1:4030
// {QoSFLowsToBeForwarded-Item-ExtIEs&Extension}
type QoSflowsToBeForwardedItemExtIesExtension struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// value set translated as choice from xnap_v1.asn1:4030
	//
	// Types that are assignable to QoSflowsToBeForwardedItemExtIes:
	//	*QoSflowsToBeForwardedItemExtIesExtension_IdUlforwardingProposal
	//	*QoSflowsToBeForwardedItemExtIesExtension_IdSourceDlforwardingIpaddress
	//	*QoSflowsToBeForwardedItemExtIesExtension_IdSourceNodeDlforwardingIpaddress
	QoSflowsToBeForwardedItemExtIes isQoSflowsToBeForwardedItemExtIesExtension_QoSflowsToBeForwardedItemExtIes `protobuf_oneof:"qo_sflows_to_be_forwarded_item_ext_ies"`
}

func (x *QoSflowsToBeForwardedItemExtIesExtension) Reset() {
	*x = QoSflowsToBeForwardedItemExtIesExtension{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[140]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QoSflowsToBeForwardedItemExtIesExtension) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QoSflowsToBeForwardedItemExtIesExtension) ProtoMessage() {}

func (x *QoSflowsToBeForwardedItemExtIesExtension) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[140]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QoSflowsToBeForwardedItemExtIesExtension.ProtoReflect.Descriptor instead.
func (*QoSflowsToBeForwardedItemExtIesExtension) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{140}
}

func (m *QoSflowsToBeForwardedItemExtIesExtension) GetQoSflowsToBeForwardedItemExtIes() isQoSflowsToBeForwardedItemExtIesExtension_QoSflowsToBeForwardedItemExtIes {
	if m != nil {
		return m.QoSflowsToBeForwardedItemExtIes
	}
	return nil
}

func (x *QoSflowsToBeForwardedItemExtIesExtension) GetIdUlforwardingProposal() UlforwardingProposal {
	if x, ok := x.GetQoSflowsToBeForwardedItemExtIes().(*QoSflowsToBeForwardedItemExtIesExtension_IdUlforwardingProposal); ok {
		return x.IdUlforwardingProposal
	}
	return UlforwardingProposal_ULFORWARDING_PROPOSAL_UL_FORWARDING_PROPOSED
}

func (x *QoSflowsToBeForwardedItemExtIesExtension) GetIdSourceDlforwardingIpaddress() *TransportLayerAddress {
	if x, ok := x.GetQoSflowsToBeForwardedItemExtIes().(*QoSflowsToBeForwardedItemExtIesExtension_IdSourceDlforwardingIpaddress); ok {
		return x.IdSourceDlforwardingIpaddress
	}
	return nil
}

func (x *QoSflowsToBeForwardedItemExtIesExtension) GetIdSourceNodeDlforwardingIpaddress() *TransportLayerAddress {
	if x, ok := x.GetQoSflowsToBeForwardedItemExtIes().(*QoSflowsToBeForwardedItemExtIesExtension_IdSourceNodeDlforwardingIpaddress); ok {
		return x.IdSourceNodeDlforwardingIpaddress
	}
	return nil
}

type isQoSflowsToBeForwardedItemExtIesExtension_QoSflowsToBeForwardedItemExtIes interface {
	isQoSflowsToBeForwardedItemExtIesExtension_QoSflowsToBeForwardedItemExtIes()
}

type QoSflowsToBeForwardedItemExtIesExtension_IdUlforwardingProposal struct {
	// @inject_tag: aper:"choiceIdx:1,valueExt,valueLB:0,valueUB:0,"
	IdUlforwardingProposal UlforwardingProposal `protobuf:"varint,1,opt,name=id_ulforwarding_proposal,json=id-ULForwardingProposal,proto3,enum=xnap.v1.UlforwardingProposal,oneof" aper:"choiceIdx:1,valueExt,valueLB:0,valueUB:0,"`
}

type QoSflowsToBeForwardedItemExtIesExtension_IdSourceDlforwardingIpaddress struct {
	// @inject_tag: aper:"choiceIdx:2,"
	IdSourceDlforwardingIpaddress *TransportLayerAddress `protobuf:"bytes,2,opt,name=id_source_dlforwarding_ipaddress,json=id-SourceDLForwardingIPAddress,proto3,oneof" aper:"choiceIdx:2,"`
}

type QoSflowsToBeForwardedItemExtIesExtension_IdSourceNodeDlforwardingIpaddress struct {
	// @inject_tag: aper:"choiceIdx:3,"
	IdSourceNodeDlforwardingIpaddress *TransportLayerAddress `protobuf:"bytes,3,opt,name=id_source_node_dlforwarding_ipaddress,json=id-SourceNodeDLForwardingIPAddress,proto3,oneof" aper:"choiceIdx:3,"`
}

func (*QoSflowsToBeForwardedItemExtIesExtension_IdUlforwardingProposal) isQoSflowsToBeForwardedItemExtIesExtension_QoSflowsToBeForwardedItemExtIes() {
}

func (*QoSflowsToBeForwardedItemExtIesExtension_IdSourceDlforwardingIpaddress) isQoSflowsToBeForwardedItemExtIesExtension_QoSflowsToBeForwardedItemExtIes() {
}

func (*QoSflowsToBeForwardedItemExtIesExtension_IdSourceNodeDlforwardingIpaddress) isQoSflowsToBeForwardedItemExtIesExtension_QoSflowsToBeForwardedItemExtIes() {
}

// sequence from xnap_v1.asn1:4023
// @inject_tag: aper:"valueExt"
// {QoSFLowsToBeForwarded-Item}
type QoSflowsToBeForwardedItem1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	QosFlowIdentifier *QoSflowIdentifier `protobuf:"bytes,1,opt,name=qos_flow_identifier,json=qosFlowIdentifier,proto3" json:"qos_flow_identifier,omitempty"`
	// @inject_tag: aper:"valueExt,valueLB:0,valueUB:0,"
	DlDataforwarding Dlforwarding `protobuf:"varint,2,opt,name=dl_dataforwarding,json=dl-dataforwarding,proto3,enum=xnap.v1.Dlforwarding" json:"dl_dataforwarding,omitempty" aper:"valueExt,valueLB:0,valueUB:0,"`
	// @inject_tag: aper:"valueExt,valueLB:0,valueUB:0,"
	UlDataforwarding Ulforwarding `protobuf:"varint,3,opt,name=ul_dataforwarding,json=ul-dataforwarding,proto3,enum=xnap.v1.Ulforwarding" json:"ul_dataforwarding,omitempty" aper:"valueExt,valueLB:0,valueUB:0,"`
	// @inject_tag: aper:"optional,sizeLB:1,"
	IEExtension []*QoSflowsToBeForwardedItemExtIes `protobuf:"bytes,4,rep,name=i_e_extension,json=iE-Extension,proto3" json:"i_e_extension,omitempty" aper:"optional,sizeLB:1,"`
}

func (x *QoSflowsToBeForwardedItem1) Reset() {
	*x = QoSflowsToBeForwardedItem1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[141]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QoSflowsToBeForwardedItem1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QoSflowsToBeForwardedItem1) ProtoMessage() {}

func (x *QoSflowsToBeForwardedItem1) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[141]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QoSflowsToBeForwardedItem1.ProtoReflect.Descriptor instead.
func (*QoSflowsToBeForwardedItem1) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{141}
}

func (x *QoSflowsToBeForwardedItem1) GetQosFlowIdentifier() *QoSflowIdentifier {
	if x != nil {
		return x.QosFlowIdentifier
	}
	return nil
}

func (x *QoSflowsToBeForwardedItem1) GetDlDataforwarding() Dlforwarding {
	if x != nil {
		return x.DlDataforwarding
	}
	return Dlforwarding_DLFORWARDING_DL_FORWARDING_PROPOSED
}

func (x *QoSflowsToBeForwardedItem1) GetUlDataforwarding() Ulforwarding {
	if x != nil {
		return x.UlDataforwarding
	}
	return Ulforwarding_ULFORWARDING_UL_FORWARDING_PROPOSED
}

func (x *QoSflowsToBeForwardedItem1) GetIEExtension() []*QoSflowsToBeForwardedItemExtIes {
	if x != nil {
		return x.IEExtension
	}
	return nil
}

// sequence from xnap_v1.asn1:4041
// {DataForwardingResponseDRBItemList}
type DataForwardingResponseDrbitemList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"valueExt,sizeLB:1,sizeUB:32,"
	Value []*DataForwardingResponseDrbitem `protobuf:"bytes,1,rep,name=value,proto3" json:"value,omitempty" aper:"valueExt,sizeLB:1,sizeUB:32,"`
}

func (x *DataForwardingResponseDrbitemList) Reset() {
	*x = DataForwardingResponseDrbitemList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[142]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataForwardingResponseDrbitemList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataForwardingResponseDrbitemList) ProtoMessage() {}

func (x *DataForwardingResponseDrbitemList) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[142]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataForwardingResponseDrbitemList.ProtoReflect.Descriptor instead.
func (*DataForwardingResponseDrbitemList) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{142}
}

func (x *DataForwardingResponseDrbitemList) GetValue() []*DataForwardingResponseDrbitem {
	if x != nil {
		return x.Value
	}
	return nil
}

// value set from xnap_v1.asn1:4049
// {DataForwardingResponseDRBItem-ExtIEs}
type DataForwardingResponseDrbitemExtIes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *emptypb.Empty `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *DataForwardingResponseDrbitemExtIes) Reset() {
	*x = DataForwardingResponseDrbitemExtIes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[143]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataForwardingResponseDrbitemExtIes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataForwardingResponseDrbitemExtIes) ProtoMessage() {}

func (x *DataForwardingResponseDrbitemExtIes) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[143]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataForwardingResponseDrbitemExtIes.ProtoReflect.Descriptor instead.
func (*DataForwardingResponseDrbitemExtIes) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{143}
}

func (x *DataForwardingResponseDrbitemExtIes) GetValue() *emptypb.Empty {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:4042
// @inject_tag: aper:"valueExt"
// {DataForwardingResponseDRBItem}
type DataForwardingResponseDrbitem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DrbId *DrbID `protobuf:"bytes,1,opt,name=drb_id,json=drb-ID,proto3" json:"drb_id,omitempty"`
	// @inject_tag: aper:"optional,"
	DlForwardingUptnl *UptransportLayerInformation `protobuf:"bytes,2,opt,name=dl_forwarding_uptnl,json=dlForwardingUPTNL,proto3,oneof" json:"dl_forwarding_uptnl,omitempty" aper:"optional,"`
	// @inject_tag: aper:"optional,"
	UlForwardingUptnl *UptransportLayerInformation `protobuf:"bytes,3,opt,name=ul_forwarding_uptnl,json=ulForwardingUPTNL,proto3,oneof" json:"ul_forwarding_uptnl,omitempty" aper:"optional,"`
	// @inject_tag: aper:"optional,sizeLB:1,"
	IEExtension []*DataForwardingResponseDrbitemExtIes `protobuf:"bytes,4,rep,name=i_e_extension,json=iE-Extension,proto3" json:"i_e_extension,omitempty" aper:"optional,sizeLB:1,"`
}

func (x *DataForwardingResponseDrbitem) Reset() {
	*x = DataForwardingResponseDrbitem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[144]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataForwardingResponseDrbitem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataForwardingResponseDrbitem) ProtoMessage() {}

func (x *DataForwardingResponseDrbitem) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[144]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataForwardingResponseDrbitem.ProtoReflect.Descriptor instead.
func (*DataForwardingResponseDrbitem) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{144}
}

func (x *DataForwardingResponseDrbitem) GetDrbId() *DrbID {
	if x != nil {
		return x.DrbId
	}
	return nil
}

func (x *DataForwardingResponseDrbitem) GetDlForwardingUptnl() *UptransportLayerInformation {
	if x != nil {
		return x.DlForwardingUptnl
	}
	return nil
}

func (x *DataForwardingResponseDrbitem) GetUlForwardingUptnl() *UptransportLayerInformation {
	if x != nil {
		return x.UlForwardingUptnl
	}
	return nil
}

func (x *DataForwardingResponseDrbitem) GetIEExtension() []*DataForwardingResponseDrbitemExtIes {
	if x != nil {
		return x.IEExtension
	}
	return nil
}

// range of Integer from xnap_v1.asn1:4054
// {DataTrafficResources}
type DataTrafficResources struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"sizeLB:6,sizeUB:17600,"
	Value *asn1.BitString `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty" aper:"sizeLB:6,sizeUB:17600,"`
}

func (x *DataTrafficResources) Reset() {
	*x = DataTrafficResources{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[145]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataTrafficResources) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataTrafficResources) ProtoMessage() {}

func (x *DataTrafficResources) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[145]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataTrafficResources.ProtoReflect.Descriptor instead.
func (*DataTrafficResources) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{145}
}

func (x *DataTrafficResources) GetValue() *asn1.BitString {
	if x != nil {
		return x.Value
	}
	return nil
}

// value set from xnap_v1.asn1:4065
// {DataTrafficResourceIndication-ExtIEs}
type DataTrafficResourceIndicationExtIes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *emptypb.Empty `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *DataTrafficResourceIndicationExtIes) Reset() {
	*x = DataTrafficResourceIndicationExtIes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[146]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataTrafficResourceIndicationExtIes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataTrafficResourceIndicationExtIes) ProtoMessage() {}

func (x *DataTrafficResourceIndicationExtIes) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[146]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataTrafficResourceIndicationExtIes.ProtoReflect.Descriptor instead.
func (*DataTrafficResourceIndicationExtIes) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{146}
}

func (x *DataTrafficResourceIndicationExtIes) GetValue() *emptypb.Empty {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:4058
// @inject_tag: aper:"valueExt"
// {DataTrafficResourceIndication}
type DataTrafficResourceIndication struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActivationSfn      *ActivationSfn      `protobuf:"bytes,1,opt,name=activation_sfn,json=activationSFN,proto3" json:"activation_sfn,omitempty"`
	SharedResourceType *SharedResourceType `protobuf:"bytes,2,opt,name=shared_resource_type,json=sharedResourceType,proto3" json:"shared_resource_type,omitempty"`
	// @inject_tag: aper:"optional,valueExt,"
	ReservedSubframePattern *ReservedSubframePattern `protobuf:"bytes,3,opt,name=reserved_subframe_pattern,json=reservedSubframePattern,proto3,oneof" json:"reserved_subframe_pattern,omitempty" aper:"optional,valueExt,"`
	// @inject_tag: aper:"optional,sizeLB:1,"
	IEExtension []*DataTrafficResourceIndicationExtIes `protobuf:"bytes,4,rep,name=i_e_extension,json=iE-Extension,proto3" json:"i_e_extension,omitempty" aper:"optional,sizeLB:1,"`
}

func (x *DataTrafficResourceIndication) Reset() {
	*x = DataTrafficResourceIndication{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[147]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataTrafficResourceIndication) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataTrafficResourceIndication) ProtoMessage() {}

func (x *DataTrafficResourceIndication) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[147]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataTrafficResourceIndication.ProtoReflect.Descriptor instead.
func (*DataTrafficResourceIndication) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{147}
}

func (x *DataTrafficResourceIndication) GetActivationSfn() *ActivationSfn {
	if x != nil {
		return x.ActivationSfn
	}
	return nil
}

func (x *DataTrafficResourceIndication) GetSharedResourceType() *SharedResourceType {
	if x != nil {
		return x.SharedResourceType
	}
	return nil
}

func (x *DataTrafficResourceIndication) GetReservedSubframePattern() *ReservedSubframePattern {
	if x != nil {
		return x.ReservedSubframePattern
	}
	return nil
}

func (x *DataTrafficResourceIndication) GetIEExtension() []*DataTrafficResourceIndicationExtIes {
	if x != nil {
		return x.IEExtension
	}
	return nil
}

// value set from xnap_v1.asn1:4076
// {DAPSRequestInfo-ExtIEs}
type DapsrequestInfoExtIes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *emptypb.Empty `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *DapsrequestInfoExtIes) Reset() {
	*x = DapsrequestInfoExtIes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[148]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DapsrequestInfoExtIes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DapsrequestInfoExtIes) ProtoMessage() {}

func (x *DapsrequestInfoExtIes) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[148]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DapsrequestInfoExtIes.ProtoReflect.Descriptor instead.
func (*DapsrequestInfoExtIes) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{148}
}

func (x *DapsrequestInfoExtIes) GetValue() *emptypb.Empty {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:4071
// @inject_tag: aper:"valueExt"
// {DAPSRequestInfo}
type DapsrequestInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"valueExt,valueLB:0,valueUB:0,"
	DapsIndicator DapsIndicatorDapsrequestInfo `protobuf:"varint,1,opt,name=daps_indicator,json=dapsIndicator,proto3,enum=xnap.v1.DapsIndicatorDapsrequestInfo" json:"daps_indicator,omitempty" aper:"valueExt,valueLB:0,valueUB:0,"`
	// @inject_tag: aper:"optional,sizeLB:1,"
	IEExtensions []*DapsrequestInfoExtIes `protobuf:"bytes,2,rep,name=i_e_extensions,json=iE-Extensions,proto3" json:"i_e_extensions,omitempty" aper:"optional,sizeLB:1,"`
}

func (x *DapsrequestInfo) Reset() {
	*x = DapsrequestInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[149]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DapsrequestInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DapsrequestInfo) ProtoMessage() {}

func (x *DapsrequestInfo) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[149]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DapsrequestInfo.ProtoReflect.Descriptor instead.
func (*DapsrequestInfo) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{149}
}

func (x *DapsrequestInfo) GetDapsIndicator() DapsIndicatorDapsrequestInfo {
	if x != nil {
		return x.DapsIndicator
	}
	return DapsIndicatorDapsrequestInfo_DAPS_INDICATOR_DAPSREQUEST_INFO_DAPS_HO_REQUIRED
}

func (x *DapsrequestInfo) GetIEExtensions() []*DapsrequestInfoExtIes {
	if x != nil {
		return x.IEExtensions
	}
	return nil
}

// sequence from xnap_v1.asn1:4083
// {DAPSResponseInfo-List}
type DapsresponseInfoList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"valueExt,sizeLB:1,sizeUB:32,"
	Value []*DapsresponseInfoItem `protobuf:"bytes,1,rep,name=value,proto3" json:"value,omitempty" aper:"valueExt,sizeLB:1,sizeUB:32,"`
}

func (x *DapsresponseInfoList) Reset() {
	*x = DapsresponseInfoList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[150]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DapsresponseInfoList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DapsresponseInfoList) ProtoMessage() {}

func (x *DapsresponseInfoList) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[150]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DapsresponseInfoList.ProtoReflect.Descriptor instead.
func (*DapsresponseInfoList) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{150}
}

func (x *DapsresponseInfoList) GetValue() []*DapsresponseInfoItem {
	if x != nil {
		return x.Value
	}
	return nil
}

// value set from xnap_v1.asn1:4090
// {DAPSResponseInfo-Item-ExtIEs}
type DapsresponseInfoItemExtIes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *emptypb.Empty `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *DapsresponseInfoItemExtIes) Reset() {
	*x = DapsresponseInfoItemExtIes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[151]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DapsresponseInfoItemExtIes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DapsresponseInfoItemExtIes) ProtoMessage() {}

func (x *DapsresponseInfoItemExtIes) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[151]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DapsresponseInfoItemExtIes.ProtoReflect.Descriptor instead.
func (*DapsresponseInfoItemExtIes) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{151}
}

func (x *DapsresponseInfoItemExtIes) GetValue() *emptypb.Empty {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:4084
// @inject_tag: aper:"valueExt"
// {DAPSResponseInfo-Item}
type DapsresponseInfoItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DrbId *DrbID `protobuf:"bytes,1,opt,name=drb_id,json=drbID,proto3" json:"drb_id,omitempty"`
	// @inject_tag: aper:"valueExt,valueLB:0,valueUB:1,"
	DapsResponseIndicator DapsResponseIndicatorDapsresponseInfoItem `protobuf:"varint,2,opt,name=daps_response_indicator,json=dapsResponseIndicator,proto3,enum=xnap.v1.DapsResponseIndicatorDapsresponseInfoItem" json:"daps_response_indicator,omitempty" aper:"valueExt,valueLB:0,valueUB:1,"`
	// @inject_tag: aper:"optional,sizeLB:1,"
	IEExtensions []*DapsresponseInfoItemExtIes `protobuf:"bytes,3,rep,name=i_e_extensions,json=iE-Extensions,proto3" json:"i_e_extensions,omitempty" aper:"optional,sizeLB:1,"`
}

func (x *DapsresponseInfoItem) Reset() {
	*x = DapsresponseInfoItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[152]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DapsresponseInfoItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DapsresponseInfoItem) ProtoMessage() {}

func (x *DapsresponseInfoItem) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[152]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DapsresponseInfoItem.ProtoReflect.Descriptor instead.
func (*DapsresponseInfoItem) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{152}
}

func (x *DapsresponseInfoItem) GetDrbId() *DrbID {
	if x != nil {
		return x.DrbId
	}
	return nil
}

func (x *DapsresponseInfoItem) GetDapsResponseIndicator() DapsResponseIndicatorDapsresponseInfoItem {
	if x != nil {
		return x.DapsResponseIndicator
	}
	return DapsResponseIndicatorDapsresponseInfoItem_DAPS_RESPONSE_INDICATOR_DAPSRESPONSE_INFO_ITEM_DAPS_HO_ACCEPTED
}

func (x *DapsresponseInfoItem) GetIEExtensions() []*DapsresponseInfoItemExtIes {
	if x != nil {
		return x.IEExtensions
	}
	return nil
}

// range of Integer from xnap_v1.asn1:4095
// {DeliveryStatus}
type DeliveryStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"valueExt,valueLB:0,valueUB:4095,"
	Value int32 `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty" aper:"valueExt,valueLB:0,valueUB:4095,"`
}

func (x *DeliveryStatus) Reset() {
	*x = DeliveryStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[153]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeliveryStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeliveryStatus) ProtoMessage() {}

func (x *DeliveryStatus) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[153]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeliveryStatus.ProtoReflect.Descriptor instead.
func (*DeliveryStatus) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{153}
}

func (x *DeliveryStatus) GetValue() int32 {
	if x != nil {
		return x.Value
	}
	return 0
}

// value set from xnap_v1.asn1:4111
// {DLCountChoice-ExtIEs}
type DlcountChoiceExtIes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *emptypb.Empty `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *DlcountChoiceExtIes) Reset() {
	*x = DlcountChoiceExtIes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[154]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DlcountChoiceExtIes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DlcountChoiceExtIes) ProtoMessage() {}

func (x *DlcountChoiceExtIes) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[154]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DlcountChoiceExtIes.ProtoReflect.Descriptor instead.
func (*DlcountChoiceExtIes) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{154}
}

func (x *DlcountChoiceExtIes) GetValue() *emptypb.Empty {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:4106
// {DLCountChoice}
type DlcountChoice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// choice from xnap_v1.asn1:4106
	//
	// Types that are assignable to DlcountChoice:
	//	*DlcountChoice_Count12Bits
	//	*DlcountChoice_Count18Bits
	//	*DlcountChoice_ChoiceExtension
	DlcountChoice isDlcountChoice_DlcountChoice `protobuf_oneof:"dlcount_choice"`
}

func (x *DlcountChoice) Reset() {
	*x = DlcountChoice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[155]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DlcountChoice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DlcountChoice) ProtoMessage() {}

func (x *DlcountChoice) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[155]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DlcountChoice.ProtoReflect.Descriptor instead.
func (*DlcountChoice) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{155}
}

func (m *DlcountChoice) GetDlcountChoice() isDlcountChoice_DlcountChoice {
	if m != nil {
		return m.DlcountChoice
	}
	return nil
}

func (x *DlcountChoice) GetCount12Bits() *CountPDcpSN12 {
	if x, ok := x.GetDlcountChoice().(*DlcountChoice_Count12Bits); ok {
		return x.Count12Bits
	}
	return nil
}

func (x *DlcountChoice) GetCount18Bits() *CountPDcpSN18 {
	if x, ok := x.GetDlcountChoice().(*DlcountChoice_Count18Bits); ok {
		return x.Count18Bits
	}
	return nil
}

func (x *DlcountChoice) GetChoiceExtension() *DlcountChoiceExtIes {
	if x, ok := x.GetDlcountChoice().(*DlcountChoice_ChoiceExtension); ok {
		return x.ChoiceExtension
	}
	return nil
}

type isDlcountChoice_DlcountChoice interface {
	isDlcountChoice_DlcountChoice()
}

type DlcountChoice_Count12Bits struct {
	// @inject_tag: aper:"choiceIdx:1,valueExt,"
	Count12Bits *CountPDcpSN12 `protobuf:"bytes,1,opt,name=count12bits,proto3,oneof" aper:"choiceIdx:1,valueExt,"`
}

type DlcountChoice_Count18Bits struct {
	// @inject_tag: aper:"choiceIdx:2,valueExt,"
	Count18Bits *CountPDcpSN18 `protobuf:"bytes,2,opt,name=count18bits,proto3,oneof" aper:"choiceIdx:2,valueExt,"`
}

type DlcountChoice_ChoiceExtension struct {
	// @inject_tag: aper:"choiceIdx:3,"
	ChoiceExtension *DlcountChoiceExtIes `protobuf:"bytes,3,opt,name=choice_extension,json=choice-extension,proto3,oneof" aper:"choiceIdx:3,"`
}

func (*DlcountChoice_Count12Bits) isDlcountChoice_DlcountChoice() {}

func (*DlcountChoice_Count18Bits) isDlcountChoice_DlcountChoice() {}

func (*DlcountChoice_ChoiceExtension) isDlcountChoice_DlcountChoice() {}

// range of Integer from xnap_v1.asn1:4119
// {DL-GBR-PRB-usage}
type DlGBrPRbusage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"valueLB:0,valueUB:100,"
	Value int32 `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty" aper:"valueLB:0,valueUB:100,"`
}

func (x *DlGBrPRbusage) Reset() {
	*x = DlGBrPRbusage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[156]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DlGBrPRbusage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DlGBrPRbusage) ProtoMessage() {}

func (x *DlGBrPRbusage) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[156]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DlGBrPRbusage.ProtoReflect.Descriptor instead.
func (*DlGBrPRbusage) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{156}
}

func (x *DlGBrPRbusage) GetValue() int32 {
	if x != nil {
		return x.Value
	}
	return 0
}

// range of Integer from xnap_v1.asn1:4122
// {DL-non-GBR-PRB-usage}
type DlnonGBrPRbusage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"valueLB:0,valueUB:100,"
	Value int32 `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty" aper:"valueLB:0,valueUB:100,"`
}

func (x *DlnonGBrPRbusage) Reset() {
	*x = DlnonGBrPRbusage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[157]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DlnonGBrPRbusage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DlnonGBrPRbusage) ProtoMessage() {}

func (x *DlnonGBrPRbusage) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[157]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DlnonGBrPRbusage.ProtoReflect.Descriptor instead.
func (*DlnonGBrPRbusage) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{157}
}

func (x *DlnonGBrPRbusage) GetValue() int32 {
	if x != nil {
		return x.Value
	}
	return 0
}

// range of Integer from xnap_v1.asn1:4125
// {DL-Total-PRB-usage}
type DlTotalPRbusage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"valueLB:0,valueUB:100,"
	Value int32 `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty" aper:"valueLB:0,valueUB:100,"`
}

func (x *DlTotalPRbusage) Reset() {
	*x = DlTotalPRbusage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[158]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DlTotalPRbusage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DlTotalPRbusage) ProtoMessage() {}

func (x *DlTotalPRbusage) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[158]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DlTotalPRbusage.ProtoReflect.Descriptor instead.
func (*DlTotalPRbusage) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{158}
}

func (x *DlTotalPRbusage) GetValue() int32 {
	if x != nil {
		return x.Value
	}
	return 0
}

// range of Integer from xnap_v1.asn1:4128
// {DRB-ID}
type DrbID struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"valueExt,valueLB:1,valueUB:32,"
	Value int32 `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty" aper:"valueExt,valueLB:1,valueUB:32,"`
}

func (x *DrbID) Reset() {
	*x = DrbID{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[159]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DrbID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DrbID) ProtoMessage() {}

func (x *DrbID) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[159]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DrbID.ProtoReflect.Descriptor instead.
func (*DrbID) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{159}
}

func (x *DrbID) GetValue() int32 {
	if x != nil {
		return x.Value
	}
	return 0
}

// sequence from xnap_v1.asn1:4134
// {DRB-List}
type DrbList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"sizeLB:1,sizeUB:32,"
	Value []*DrbID `protobuf:"bytes,1,rep,name=value,proto3" json:"value,omitempty" aper:"sizeLB:1,sizeUB:32,"`
}

func (x *DrbList) Reset() {
	*x = DrbList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[160]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DrbList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DrbList) ProtoMessage() {}

func (x *DrbList) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[160]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DrbList.ProtoReflect.Descriptor instead.
func (*DrbList) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{160}
}

func (x *DrbList) GetValue() []*DrbID {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:4136
// {DRB-List-withCause}
type DrbListwithCause struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"valueExt,sizeLB:1,sizeUB:32,"
	Value []*DrbListwithCauseItem `protobuf:"bytes,1,rep,name=value,proto3" json:"value,omitempty" aper:"valueExt,sizeLB:1,sizeUB:32,"`
}

func (x *DrbListwithCause) Reset() {
	*x = DrbListwithCause{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[161]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DrbListwithCause) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DrbListwithCause) ProtoMessage() {}

func (x *DrbListwithCause) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[161]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DrbListwithCause.ProtoReflect.Descriptor instead.
func (*DrbListwithCause) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{161}
}

func (x *DrbListwithCause) GetValue() []*DrbListwithCauseItem {
	if x != nil {
		return x.Value
	}
	return nil
}

// value set from xnap_v1.asn1:4144
// {DRB-List-withCause-Item-ExtIEs}
type DrbListwithCauseItemExtIes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *emptypb.Empty `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *DrbListwithCauseItemExtIes) Reset() {
	*x = DrbListwithCauseItemExtIes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[162]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DrbListwithCauseItemExtIes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DrbListwithCauseItemExtIes) ProtoMessage() {}

func (x *DrbListwithCauseItemExtIes) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[162]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DrbListwithCauseItemExtIes.ProtoReflect.Descriptor instead.
func (*DrbListwithCauseItemExtIes) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{162}
}

func (x *DrbListwithCauseItemExtIes) GetValue() *emptypb.Empty {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:4137
// @inject_tag: aper:"valueExt"
// {DRB-List-withCause-Item}
type DrbListwithCauseItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DrbId *DrbID `protobuf:"bytes,1,opt,name=drb_id,json=drb-id,proto3" json:"drb_id,omitempty"`
	Cause *Cause `protobuf:"bytes,2,opt,name=cause,proto3" json:"cause,omitempty"`
	// @inject_tag: aper:"optional,valueExt,valueLB:0,valueUB:3,"
	RLcMode *Rlcmode `protobuf:"varint,3,opt,name=r_lc_mode,json=rLC-Mode,proto3,enum=xnap.v1.Rlcmode,oneof" json:"r_lc_mode,omitempty" aper:"optional,valueExt,valueLB:0,valueUB:3,"`
	// @inject_tag: aper:"optional,sizeLB:1,"
	IEExtension []*DrbListwithCauseItemExtIes `protobuf:"bytes,4,rep,name=i_e_extension,json=iE-Extension,proto3" json:"i_e_extension,omitempty" aper:"optional,sizeLB:1,"`
}

func (x *DrbListwithCauseItem) Reset() {
	*x = DrbListwithCauseItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[163]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DrbListwithCauseItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DrbListwithCauseItem) ProtoMessage() {}

func (x *DrbListwithCauseItem) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[163]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DrbListwithCauseItem.ProtoReflect.Descriptor instead.
func (*DrbListwithCauseItem) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{163}
}

func (x *DrbListwithCauseItem) GetDrbId() *DrbID {
	if x != nil {
		return x.DrbId
	}
	return nil
}

func (x *DrbListwithCauseItem) GetCause() *Cause {
	if x != nil {
		return x.Cause
	}
	return nil
}

func (x *DrbListwithCauseItem) GetRLcMode() Rlcmode {
	if x != nil && x.RLcMode != nil {
		return *x.RLcMode
	}
	return Rlcmode_RLCMODE_RLC_AM
}

func (x *DrbListwithCauseItem) GetIEExtension() []*DrbListwithCauseItemExtIes {
	if x != nil {
		return x.IEExtension
	}
	return nil
}

// range of Integer from xnap_v1.asn1:4149
// {DRB-Number}
type DrbNumber struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"valueExt,valueLB:1,valueUB:32,"
	Value int32 `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty" aper:"valueExt,valueLB:1,valueUB:32,"`
}

func (x *DrbNumber) Reset() {
	*x = DrbNumber{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[164]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DrbNumber) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DrbNumber) ProtoMessage() {}

func (x *DrbNumber) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[164]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DrbNumber.ProtoReflect.Descriptor instead.
func (*DrbNumber) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{164}
}

func (x *DrbNumber) GetValue() int32 {
	if x != nil {
		return x.Value
	}
	return 0
}

// sequence from xnap_v1.asn1:4154
// {DRBsSubjectToDLDiscarding-List}
type DrbsSubjectToDldiscardingList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"valueExt,sizeLB:1,sizeUB:32,"
	Value []*DrbsSubjectToDldiscardingItem `protobuf:"bytes,1,rep,name=value,proto3" json:"value,omitempty" aper:"valueExt,sizeLB:1,sizeUB:32,"`
}

func (x *DrbsSubjectToDldiscardingList) Reset() {
	*x = DrbsSubjectToDldiscardingList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[165]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DrbsSubjectToDldiscardingList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DrbsSubjectToDldiscardingList) ProtoMessage() {}

func (x *DrbsSubjectToDldiscardingList) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[165]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DrbsSubjectToDldiscardingList.ProtoReflect.Descriptor instead.
func (*DrbsSubjectToDldiscardingList) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{165}
}

func (x *DrbsSubjectToDldiscardingList) GetValue() []*DrbsSubjectToDldiscardingItem {
	if x != nil {
		return x.Value
	}
	return nil
}

// value set from xnap_v1.asn1:4161
// {DRBsSubjectToDLDiscarding-Item-ExtIEs}
type DrbsSubjectToDldiscardingItemExtIes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *emptypb.Empty `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *DrbsSubjectToDldiscardingItemExtIes) Reset() {
	*x = DrbsSubjectToDldiscardingItemExtIes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[166]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DrbsSubjectToDldiscardingItemExtIes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DrbsSubjectToDldiscardingItemExtIes) ProtoMessage() {}

func (x *DrbsSubjectToDldiscardingItemExtIes) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[166]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DrbsSubjectToDldiscardingItemExtIes.ProtoReflect.Descriptor instead.
func (*DrbsSubjectToDldiscardingItemExtIes) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{166}
}

func (x *DrbsSubjectToDldiscardingItemExtIes) GetValue() *emptypb.Empty {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:4155
// @inject_tag: aper:"valueExt"
// {DRBsSubjectToDLDiscarding-Item}
type DrbsSubjectToDldiscardingItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DrbId   *DrbID         `protobuf:"bytes,1,opt,name=drb_id,json=drbID,proto3" json:"drb_id,omitempty"`
	DlCount *DlcountChoice `protobuf:"bytes,2,opt,name=dl_count,json=dlCount,proto3" json:"dl_count,omitempty"`
	// @inject_tag: aper:"optional,sizeLB:1,"
	IEExtension []*DrbsSubjectToDldiscardingItemExtIes `protobuf:"bytes,3,rep,name=i_e_extension,json=iE-Extension,proto3" json:"i_e_extension,omitempty" aper:"optional,sizeLB:1,"`
}

func (x *DrbsSubjectToDldiscardingItem) Reset() {
	*x = DrbsSubjectToDldiscardingItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[167]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DrbsSubjectToDldiscardingItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DrbsSubjectToDldiscardingItem) ProtoMessage() {}

func (x *DrbsSubjectToDldiscardingItem) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[167]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DrbsSubjectToDldiscardingItem.ProtoReflect.Descriptor instead.
func (*DrbsSubjectToDldiscardingItem) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{167}
}

func (x *DrbsSubjectToDldiscardingItem) GetDrbId() *DrbID {
	if x != nil {
		return x.DrbId
	}
	return nil
}

func (x *DrbsSubjectToDldiscardingItem) GetDlCount() *DlcountChoice {
	if x != nil {
		return x.DlCount
	}
	return nil
}

func (x *DrbsSubjectToDldiscardingItem) GetIEExtension() []*DrbsSubjectToDldiscardingItemExtIes {
	if x != nil {
		return x.IEExtension
	}
	return nil
}

// sequence from xnap_v1.asn1:4168
// {DRBsSubjectToEarlyStatusTransfer-List}
type DrbsSubjectToEarlyStatusTransferList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"valueExt,sizeLB:1,sizeUB:32,"
	Value []*DrbsSubjectToEarlyStatusTransferItem `protobuf:"bytes,1,rep,name=value,proto3" json:"value,omitempty" aper:"valueExt,sizeLB:1,sizeUB:32,"`
}

func (x *DrbsSubjectToEarlyStatusTransferList) Reset() {
	*x = DrbsSubjectToEarlyStatusTransferList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[168]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DrbsSubjectToEarlyStatusTransferList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DrbsSubjectToEarlyStatusTransferList) ProtoMessage() {}

func (x *DrbsSubjectToEarlyStatusTransferList) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[168]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DrbsSubjectToEarlyStatusTransferList.ProtoReflect.Descriptor instead.
func (*DrbsSubjectToEarlyStatusTransferList) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{168}
}

func (x *DrbsSubjectToEarlyStatusTransferList) GetValue() []*DrbsSubjectToEarlyStatusTransferItem {
	if x != nil {
		return x.Value
	}
	return nil
}

// value set from xnap_v1.asn1:4175
// {DRBsSubjectToEarlyStatusTransfer-Item-ExtIEs}
type DrbsSubjectToEarlyStatusTransferItemExtIes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *emptypb.Empty `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *DrbsSubjectToEarlyStatusTransferItemExtIes) Reset() {
	*x = DrbsSubjectToEarlyStatusTransferItemExtIes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[169]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DrbsSubjectToEarlyStatusTransferItemExtIes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DrbsSubjectToEarlyStatusTransferItemExtIes) ProtoMessage() {}

func (x *DrbsSubjectToEarlyStatusTransferItemExtIes) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[169]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DrbsSubjectToEarlyStatusTransferItemExtIes.ProtoReflect.Descriptor instead.
func (*DrbsSubjectToEarlyStatusTransferItemExtIes) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{169}
}

func (x *DrbsSubjectToEarlyStatusTransferItemExtIes) GetValue() *emptypb.Empty {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:4169
// @inject_tag: aper:"valueExt"
// {DRBsSubjectToEarlyStatusTransfer-Item}
type DrbsSubjectToEarlyStatusTransferItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DrbId   *DrbID         `protobuf:"bytes,1,opt,name=drb_id,json=drbID,proto3" json:"drb_id,omitempty"`
	DlCount *DlcountChoice `protobuf:"bytes,2,opt,name=dl_count,json=dlCount,proto3" json:"dl_count,omitempty"`
	// @inject_tag: aper:"optional,sizeLB:1,"
	IEExtension []*DrbsSubjectToEarlyStatusTransferItemExtIes `protobuf:"bytes,3,rep,name=i_e_extension,json=iE-Extension,proto3" json:"i_e_extension,omitempty" aper:"optional,sizeLB:1,"`
}

func (x *DrbsSubjectToEarlyStatusTransferItem) Reset() {
	*x = DrbsSubjectToEarlyStatusTransferItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[170]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DrbsSubjectToEarlyStatusTransferItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DrbsSubjectToEarlyStatusTransferItem) ProtoMessage() {}

func (x *DrbsSubjectToEarlyStatusTransferItem) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[170]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DrbsSubjectToEarlyStatusTransferItem.ProtoReflect.Descriptor instead.
func (*DrbsSubjectToEarlyStatusTransferItem) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{170}
}

func (x *DrbsSubjectToEarlyStatusTransferItem) GetDrbId() *DrbID {
	if x != nil {
		return x.DrbId
	}
	return nil
}

func (x *DrbsSubjectToEarlyStatusTransferItem) GetDlCount() *DlcountChoice {
	if x != nil {
		return x.DlCount
	}
	return nil
}

func (x *DrbsSubjectToEarlyStatusTransferItem) GetIEExtension() []*DrbsSubjectToEarlyStatusTransferItemExtIes {
	if x != nil {
		return x.IEExtension
	}
	return nil
}

// sequence from xnap_v1.asn1:4182
// {DRBsSubjectToStatusTransfer-List}
type DrbsSubjectToStatusTransferList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"valueExt,sizeLB:1,sizeUB:32,"
	Value []*DrbsSubjectToStatusTransferItem `protobuf:"bytes,1,rep,name=value,proto3" json:"value,omitempty" aper:"valueExt,sizeLB:1,sizeUB:32,"`
}

func (x *DrbsSubjectToStatusTransferList) Reset() {
	*x = DrbsSubjectToStatusTransferList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[171]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DrbsSubjectToStatusTransferList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DrbsSubjectToStatusTransferList) ProtoMessage() {}

func (x *DrbsSubjectToStatusTransferList) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[171]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DrbsSubjectToStatusTransferList.ProtoReflect.Descriptor instead.
func (*DrbsSubjectToStatusTransferList) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{171}
}

func (x *DrbsSubjectToStatusTransferList) GetValue() []*DrbsSubjectToStatusTransferItem {
	if x != nil {
		return x.Value
	}
	return nil
}

// value set from xnap_v1.asn1:4190
// {DRBsSubjectToStatusTransfer-Item-ExtIEs}
type DrbsSubjectToStatusTransferItemExtIes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *emptypb.Empty `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *DrbsSubjectToStatusTransferItemExtIes) Reset() {
	*x = DrbsSubjectToStatusTransferItemExtIes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[172]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DrbsSubjectToStatusTransferItemExtIes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DrbsSubjectToStatusTransferItemExtIes) ProtoMessage() {}

func (x *DrbsSubjectToStatusTransferItemExtIes) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[172]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DrbsSubjectToStatusTransferItemExtIes.ProtoReflect.Descriptor instead.
func (*DrbsSubjectToStatusTransferItemExtIes) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{172}
}

func (x *DrbsSubjectToStatusTransferItemExtIes) GetValue() *emptypb.Empty {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:4183
// @inject_tag: aper:"valueExt"
// {DRBsSubjectToStatusTransfer-Item}
type DrbsSubjectToStatusTransferItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DrbId                *DrbID                    `protobuf:"bytes,1,opt,name=drb_id,json=drbID,proto3" json:"drb_id,omitempty"`
	PdcpStatusTransferUl *DrbbstatusTransferChoice `protobuf:"bytes,2,opt,name=pdcp_status_transfer_ul,json=pdcpStatusTransfer-UL,proto3" json:"pdcp_status_transfer_ul,omitempty"`
	PdcpStatusTransferDl *DrbbstatusTransferChoice `protobuf:"bytes,3,opt,name=pdcp_status_transfer_dl,json=pdcpStatusTransfer-DL,proto3" json:"pdcp_status_transfer_dl,omitempty"`
	// @inject_tag: aper:"optional,sizeLB:1,"
	IEExtension []*DrbsSubjectToStatusTransferItemExtIes `protobuf:"bytes,4,rep,name=i_e_extension,json=iE-Extension,proto3" json:"i_e_extension,omitempty" aper:"optional,sizeLB:1,"`
}

func (x *DrbsSubjectToStatusTransferItem) Reset() {
	*x = DrbsSubjectToStatusTransferItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[173]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DrbsSubjectToStatusTransferItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DrbsSubjectToStatusTransferItem) ProtoMessage() {}

func (x *DrbsSubjectToStatusTransferItem) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[173]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DrbsSubjectToStatusTransferItem.ProtoReflect.Descriptor instead.
func (*DrbsSubjectToStatusTransferItem) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{173}
}

func (x *DrbsSubjectToStatusTransferItem) GetDrbId() *DrbID {
	if x != nil {
		return x.DrbId
	}
	return nil
}

func (x *DrbsSubjectToStatusTransferItem) GetPdcpStatusTransferUl() *DrbbstatusTransferChoice {
	if x != nil {
		return x.PdcpStatusTransferUl
	}
	return nil
}

func (x *DrbsSubjectToStatusTransferItem) GetPdcpStatusTransferDl() *DrbbstatusTransferChoice {
	if x != nil {
		return x.PdcpStatusTransferDl
	}
	return nil
}

func (x *DrbsSubjectToStatusTransferItem) GetIEExtension() []*DrbsSubjectToStatusTransferItemExtIes {
	if x != nil {
		return x.IEExtension
	}
	return nil
}

// value set from xnap_v1.asn1:4202
// {DRBBStatusTransferChoice-ExtIEs}
type DrbbstatusTransferChoiceExtIes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *emptypb.Empty `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *DrbbstatusTransferChoiceExtIes) Reset() {
	*x = DrbbstatusTransferChoiceExtIes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[174]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DrbbstatusTransferChoiceExtIes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DrbbstatusTransferChoiceExtIes) ProtoMessage() {}

func (x *DrbbstatusTransferChoiceExtIes) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[174]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DrbbstatusTransferChoiceExtIes.ProtoReflect.Descriptor instead.
func (*DrbbstatusTransferChoiceExtIes) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{174}
}

func (x *DrbbstatusTransferChoiceExtIes) GetValue() *emptypb.Empty {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:4197
// {DRBBStatusTransferChoice}
type DrbbstatusTransferChoice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// choice from xnap_v1.asn1:4197
	//
	// Types that are assignable to DrbbstatusTransferChoice:
	//	*DrbbstatusTransferChoice_PdcpSn_12Bits
	//	*DrbbstatusTransferChoice_PdcpSn_18Bits
	//	*DrbbstatusTransferChoice_ChoiceExtension
	DrbbstatusTransferChoice isDrbbstatusTransferChoice_DrbbstatusTransferChoice `protobuf_oneof:"drbbstatus_transfer_choice"`
}

func (x *DrbbstatusTransferChoice) Reset() {
	*x = DrbbstatusTransferChoice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[175]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DrbbstatusTransferChoice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DrbbstatusTransferChoice) ProtoMessage() {}

func (x *DrbbstatusTransferChoice) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[175]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DrbbstatusTransferChoice.ProtoReflect.Descriptor instead.
func (*DrbbstatusTransferChoice) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{175}
}

func (m *DrbbstatusTransferChoice) GetDrbbstatusTransferChoice() isDrbbstatusTransferChoice_DrbbstatusTransferChoice {
	if m != nil {
		return m.DrbbstatusTransferChoice
	}
	return nil
}

func (x *DrbbstatusTransferChoice) GetPdcpSn_12Bits() *DrbbstatusTransfer12BitsSn {
	if x, ok := x.GetDrbbstatusTransferChoice().(*DrbbstatusTransferChoice_PdcpSn_12Bits); ok {
		return x.PdcpSn_12Bits
	}
	return nil
}

func (x *DrbbstatusTransferChoice) GetPdcpSn_18Bits() *DrbbstatusTransfer18BitsSn {
	if x, ok := x.GetDrbbstatusTransferChoice().(*DrbbstatusTransferChoice_PdcpSn_18Bits); ok {
		return x.PdcpSn_18Bits
	}
	return nil
}

func (x *DrbbstatusTransferChoice) GetChoiceExtension() *DrbbstatusTransferChoiceExtIes {
	if x, ok := x.GetDrbbstatusTransferChoice().(*DrbbstatusTransferChoice_ChoiceExtension); ok {
		return x.ChoiceExtension
	}
	return nil
}

type isDrbbstatusTransferChoice_DrbbstatusTransferChoice interface {
	isDrbbstatusTransferChoice_DrbbstatusTransferChoice()
}

type DrbbstatusTransferChoice_PdcpSn_12Bits struct {
	// @inject_tag: aper:"choiceIdx:1,valueExt,"
	PdcpSn_12Bits *DrbbstatusTransfer12BitsSn `protobuf:"bytes,1,opt,name=pdcp_sn_12bits,json=pdcp-sn-12bits,proto3,oneof" aper:"choiceIdx:1,valueExt,"`
}

type DrbbstatusTransferChoice_PdcpSn_18Bits struct {
	// @inject_tag: aper:"choiceIdx:2,valueExt,"
	PdcpSn_18Bits *DrbbstatusTransfer18BitsSn `protobuf:"bytes,2,opt,name=pdcp_sn_18bits,json=pdcp-sn-18bits,proto3,oneof" aper:"choiceIdx:2,valueExt,"`
}

type DrbbstatusTransferChoice_ChoiceExtension struct {
	// @inject_tag: aper:"choiceIdx:3,"
	ChoiceExtension *DrbbstatusTransferChoiceExtIes `protobuf:"bytes,3,opt,name=choice_extension,json=choice-extension,proto3,oneof" aper:"choiceIdx:3,"`
}

func (*DrbbstatusTransferChoice_PdcpSn_12Bits) isDrbbstatusTransferChoice_DrbbstatusTransferChoice() {
}

func (*DrbbstatusTransferChoice_PdcpSn_18Bits) isDrbbstatusTransferChoice_DrbbstatusTransferChoice() {
}

func (*DrbbstatusTransferChoice_ChoiceExtension) isDrbbstatusTransferChoice_DrbbstatusTransferChoice() {
}

// value set from xnap_v1.asn1:4214
// {DRBBStatusTransfer12bitsSN-ExtIEs}
type DrbbstatusTransfer12BitsSnExtIes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *emptypb.Empty `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *DrbbstatusTransfer12BitsSnExtIes) Reset() {
	*x = DrbbstatusTransfer12BitsSnExtIes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[176]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DrbbstatusTransfer12BitsSnExtIes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DrbbstatusTransfer12BitsSnExtIes) ProtoMessage() {}

func (x *DrbbstatusTransfer12BitsSnExtIes) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[176]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DrbbstatusTransfer12BitsSnExtIes.ProtoReflect.Descriptor instead.
func (*DrbbstatusTransfer12BitsSnExtIes) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{176}
}

func (x *DrbbstatusTransfer12BitsSnExtIes) GetValue() *emptypb.Empty {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:4208
// @inject_tag: aper:"valueExt"
// {DRBBStatusTransfer12bitsSN}
type DrbbstatusTransfer12BitsSn struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"optional,sizeLB:1,sizeUB:2048,"
	ReceiveStatusofPdcpsdu *asn1.BitString `protobuf:"bytes,1,opt,name=receive_statusof_pdcpsdu,json=receiveStatusofPDCPSDU,proto3,oneof" json:"receive_statusof_pdcpsdu,omitempty" aper:"optional,sizeLB:1,sizeUB:2048,"`
	// @inject_tag: aper:"valueExt,"
	COuntvalue *CountPDcpSN12 `protobuf:"bytes,2,opt,name=c_ountvalue,json=cOUNTValue,proto3" json:"c_ountvalue,omitempty" aper:"valueExt,"`
	// @inject_tag: aper:"optional,sizeLB:1,"
	IEExtension []*DrbbstatusTransfer12BitsSnExtIes `protobuf:"bytes,3,rep,name=i_e_extension,json=iE-Extension,proto3" json:"i_e_extension,omitempty" aper:"optional,sizeLB:1,"`
}

func (x *DrbbstatusTransfer12BitsSn) Reset() {
	*x = DrbbstatusTransfer12BitsSn{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[177]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DrbbstatusTransfer12BitsSn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DrbbstatusTransfer12BitsSn) ProtoMessage() {}

func (x *DrbbstatusTransfer12BitsSn) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[177]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DrbbstatusTransfer12BitsSn.ProtoReflect.Descriptor instead.
func (*DrbbstatusTransfer12BitsSn) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{177}
}

func (x *DrbbstatusTransfer12BitsSn) GetReceiveStatusofPdcpsdu() *asn1.BitString {
	if x != nil {
		return x.ReceiveStatusofPdcpsdu
	}
	return nil
}

func (x *DrbbstatusTransfer12BitsSn) GetCOuntvalue() *CountPDcpSN12 {
	if x != nil {
		return x.COuntvalue
	}
	return nil
}

func (x *DrbbstatusTransfer12BitsSn) GetIEExtension() []*DrbbstatusTransfer12BitsSnExtIes {
	if x != nil {
		return x.IEExtension
	}
	return nil
}

// value set from xnap_v1.asn1:4226
// {DRBBStatusTransfer18bitsSN-ExtIEs}
type DrbbstatusTransfer18BitsSnExtIes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *emptypb.Empty `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *DrbbstatusTransfer18BitsSnExtIes) Reset() {
	*x = DrbbstatusTransfer18BitsSnExtIes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[178]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DrbbstatusTransfer18BitsSnExtIes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DrbbstatusTransfer18BitsSnExtIes) ProtoMessage() {}

func (x *DrbbstatusTransfer18BitsSnExtIes) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[178]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DrbbstatusTransfer18BitsSnExtIes.ProtoReflect.Descriptor instead.
func (*DrbbstatusTransfer18BitsSnExtIes) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{178}
}

func (x *DrbbstatusTransfer18BitsSnExtIes) GetValue() *emptypb.Empty {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:4220
// @inject_tag: aper:"valueExt"
// {DRBBStatusTransfer18bitsSN}
type DrbbstatusTransfer18BitsSn struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"optional,sizeLB:1,sizeUB:131072,"
	ReceiveStatusofPdcpsdu *asn1.BitString `protobuf:"bytes,1,opt,name=receive_statusof_pdcpsdu,json=receiveStatusofPDCPSDU,proto3,oneof" json:"receive_statusof_pdcpsdu,omitempty" aper:"optional,sizeLB:1,sizeUB:131072,"`
	// @inject_tag: aper:"valueExt,"
	COuntvalue *CountPDcpSN18 `protobuf:"bytes,2,opt,name=c_ountvalue,json=cOUNTValue,proto3" json:"c_ountvalue,omitempty" aper:"valueExt,"`
	// @inject_tag: aper:"optional,sizeLB:1,"
	IEExtension []*DrbbstatusTransfer18BitsSnExtIes `protobuf:"bytes,3,rep,name=i_e_extension,json=iE-Extension,proto3" json:"i_e_extension,omitempty" aper:"optional,sizeLB:1,"`
}

func (x *DrbbstatusTransfer18BitsSn) Reset() {
	*x = DrbbstatusTransfer18BitsSn{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[179]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DrbbstatusTransfer18BitsSn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DrbbstatusTransfer18BitsSn) ProtoMessage() {}

func (x *DrbbstatusTransfer18BitsSn) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[179]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DrbbstatusTransfer18BitsSn.ProtoReflect.Descriptor instead.
func (*DrbbstatusTransfer18BitsSn) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{179}
}

func (x *DrbbstatusTransfer18BitsSn) GetReceiveStatusofPdcpsdu() *asn1.BitString {
	if x != nil {
		return x.ReceiveStatusofPdcpsdu
	}
	return nil
}

func (x *DrbbstatusTransfer18BitsSn) GetCOuntvalue() *CountPDcpSN18 {
	if x != nil {
		return x.COuntvalue
	}
	return nil
}

func (x *DrbbstatusTransfer18BitsSn) GetIEExtension() []*DrbbstatusTransfer18BitsSnExtIes {
	if x != nil {
		return x.IEExtension
	}
	return nil
}

// sequence from xnap_v1.asn1:4233
// {DRBToQoSFlowMapping-List}
type DrbtoQoSflowMappingList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"valueExt,sizeLB:1,sizeUB:32,"
	Value []*DrbtoQoSflowMappingItem `protobuf:"bytes,1,rep,name=value,proto3" json:"value,omitempty" aper:"valueExt,sizeLB:1,sizeUB:32,"`
}

func (x *DrbtoQoSflowMappingList) Reset() {
	*x = DrbtoQoSflowMappingList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[180]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DrbtoQoSflowMappingList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DrbtoQoSflowMappingList) ProtoMessage() {}

func (x *DrbtoQoSflowMappingList) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[180]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DrbtoQoSflowMappingList.ProtoReflect.Descriptor instead.
func (*DrbtoQoSflowMappingList) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{180}
}

func (x *DrbtoQoSflowMappingList) GetValue() []*DrbtoQoSflowMappingItem {
	if x != nil {
		return x.Value
	}
	return nil
}

// value set from xnap_v1.asn1:4241
// {DRBToQoSFlowMapping-Item-ExtIEs}
type DrbtoQoSflowMappingItemExtIes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *emptypb.Empty `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *DrbtoQoSflowMappingItemExtIes) Reset() {
	*x = DrbtoQoSflowMappingItemExtIes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[181]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DrbtoQoSflowMappingItemExtIes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DrbtoQoSflowMappingItemExtIes) ProtoMessage() {}

func (x *DrbtoQoSflowMappingItemExtIes) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[181]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DrbtoQoSflowMappingItemExtIes.ProtoReflect.Descriptor instead.
func (*DrbtoQoSflowMappingItemExtIes) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{181}
}

func (x *DrbtoQoSflowMappingItemExtIes) GetValue() *emptypb.Empty {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:4234
// @inject_tag: aper:"valueExt"
// {DRBToQoSFlowMapping-Item}
type DrbtoQoSflowMappingItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DrbId        *DrbID        `protobuf:"bytes,1,opt,name=drb_id,json=drb-ID,proto3" json:"drb_id,omitempty"`
	QosFlowsList *QoSflowsList `protobuf:"bytes,2,opt,name=qos_flows_list,json=qosFlows-List,proto3" json:"qos_flows_list,omitempty"`
	// @inject_tag: aper:"optional,valueExt,valueLB:0,valueUB:3,"
	RLcMode *Rlcmode `protobuf:"varint,3,opt,name=r_lc_mode,json=rLC-Mode,proto3,enum=xnap.v1.Rlcmode,oneof" json:"r_lc_mode,omitempty" aper:"optional,valueExt,valueLB:0,valueUB:3,"`
	// @inject_tag: aper:"optional,sizeLB:1,"
	IEExtension []*DrbtoQoSflowMappingItemExtIes `protobuf:"bytes,4,rep,name=i_e_extension,json=iE-Extension,proto3" json:"i_e_extension,omitempty" aper:"optional,sizeLB:1,"`
}

func (x *DrbtoQoSflowMappingItem) Reset() {
	*x = DrbtoQoSflowMappingItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[182]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DrbtoQoSflowMappingItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DrbtoQoSflowMappingItem) ProtoMessage() {}

func (x *DrbtoQoSflowMappingItem) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[182]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DrbtoQoSflowMappingItem.ProtoReflect.Descriptor instead.
func (*DrbtoQoSflowMappingItem) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{182}
}

func (x *DrbtoQoSflowMappingItem) GetDrbId() *DrbID {
	if x != nil {
		return x.DrbId
	}
	return nil
}

func (x *DrbtoQoSflowMappingItem) GetQosFlowsList() *QoSflowsList {
	if x != nil {
		return x.QosFlowsList
	}
	return nil
}

func (x *DrbtoQoSflowMappingItem) GetRLcMode() Rlcmode {
	if x != nil && x.RLcMode != nil {
		return *x.RLcMode
	}
	return Rlcmode_RLCMODE_RLC_AM
}

func (x *DrbtoQoSflowMappingItem) GetIEExtension() []*DrbtoQoSflowMappingItemExtIes {
	if x != nil {
		return x.IEExtension
	}
	return nil
}

// value set from xnap_v1.asn1:4264
// {Dynamic5QIDescriptor-ExtIEs&Extension}
type Dynamic5QidescriptorExtIesExtension struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// value set translated as choice from xnap_v1.asn1:4264
	//
	// Types that are assignable to Dynamic5QidescriptorExtIes:
	//	*Dynamic5QidescriptorExtIesExtension_IdExtendedPacketDelayBudget
	//	*Dynamic5QidescriptorExtIesExtension_IdCnpacketDelayBudgetDownlink
	//	*Dynamic5QidescriptorExtIesExtension_IdCnpacketDelayBudgetUplink
	Dynamic5QidescriptorExtIes isDynamic5QidescriptorExtIesExtension_Dynamic5QidescriptorExtIes `protobuf_oneof:"dynamic5_qidescriptor_ext_ies"`
}

func (x *Dynamic5QidescriptorExtIesExtension) Reset() {
	*x = Dynamic5QidescriptorExtIesExtension{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[183]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Dynamic5QidescriptorExtIesExtension) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Dynamic5QidescriptorExtIesExtension) ProtoMessage() {}

func (x *Dynamic5QidescriptorExtIesExtension) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[183]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Dynamic5QidescriptorExtIesExtension.ProtoReflect.Descriptor instead.
func (*Dynamic5QidescriptorExtIesExtension) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{183}
}

func (m *Dynamic5QidescriptorExtIesExtension) GetDynamic5QidescriptorExtIes() isDynamic5QidescriptorExtIesExtension_Dynamic5QidescriptorExtIes {
	if m != nil {
		return m.Dynamic5QidescriptorExtIes
	}
	return nil
}

func (x *Dynamic5QidescriptorExtIesExtension) GetIdExtendedPacketDelayBudget() *ExtendedPacketDelayBudget {
	if x, ok := x.GetDynamic5QidescriptorExtIes().(*Dynamic5QidescriptorExtIesExtension_IdExtendedPacketDelayBudget); ok {
		return x.IdExtendedPacketDelayBudget
	}
	return nil
}

func (x *Dynamic5QidescriptorExtIesExtension) GetIdCnpacketDelayBudgetDownlink() *ExtendedPacketDelayBudget {
	if x, ok := x.GetDynamic5QidescriptorExtIes().(*Dynamic5QidescriptorExtIesExtension_IdCnpacketDelayBudgetDownlink); ok {
		return x.IdCnpacketDelayBudgetDownlink
	}
	return nil
}

func (x *Dynamic5QidescriptorExtIesExtension) GetIdCnpacketDelayBudgetUplink() *ExtendedPacketDelayBudget {
	if x, ok := x.GetDynamic5QidescriptorExtIes().(*Dynamic5QidescriptorExtIesExtension_IdCnpacketDelayBudgetUplink); ok {
		return x.IdCnpacketDelayBudgetUplink
	}
	return nil
}

type isDynamic5QidescriptorExtIesExtension_Dynamic5QidescriptorExtIes interface {
	isDynamic5QidescriptorExtIesExtension_Dynamic5QidescriptorExtIes()
}

type Dynamic5QidescriptorExtIesExtension_IdExtendedPacketDelayBudget struct {
	// @inject_tag: aper:"choiceIdx:1,"
	IdExtendedPacketDelayBudget *ExtendedPacketDelayBudget `protobuf:"bytes,1,opt,name=id_extended_packet_delay_budget,json=id-ExtendedPacketDelayBudget,proto3,oneof" aper:"choiceIdx:1,"`
}

type Dynamic5QidescriptorExtIesExtension_IdCnpacketDelayBudgetDownlink struct {
	// @inject_tag: aper:"choiceIdx:2,"
	IdCnpacketDelayBudgetDownlink *ExtendedPacketDelayBudget `protobuf:"bytes,2,opt,name=id_cnpacket_delay_budget_downlink,json=id-CNPacketDelayBudgetDownlink,proto3,oneof" aper:"choiceIdx:2,"`
}

type Dynamic5QidescriptorExtIesExtension_IdCnpacketDelayBudgetUplink struct {
	// @inject_tag: aper:"choiceIdx:3,"
	IdCnpacketDelayBudgetUplink *ExtendedPacketDelayBudget `protobuf:"bytes,3,opt,name=id_cnpacket_delay_budget_uplink,json=id-CNPacketDelayBudgetUplink,proto3,oneof" aper:"choiceIdx:3,"`
}

func (*Dynamic5QidescriptorExtIesExtension_IdExtendedPacketDelayBudget) isDynamic5QidescriptorExtIesExtension_Dynamic5QidescriptorExtIes() {
}

func (*Dynamic5QidescriptorExtIesExtension_IdCnpacketDelayBudgetDownlink) isDynamic5QidescriptorExtIesExtension_Dynamic5QidescriptorExtIes() {
}

func (*Dynamic5QidescriptorExtIesExtension_IdCnpacketDelayBudgetUplink) isDynamic5QidescriptorExtIesExtension_Dynamic5QidescriptorExtIes() {
}

// concrete instance(s) of class XNAP-PROTOCOL-EXTENSION from xnap_v1.asn1:4264
// @inject_tag: aper:"valueExt"
// {Dynamic5QIDescriptor-ExtIEs}
type Dynamic5QidescriptorExtIes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"unique,"
	Id *xnap_commondatatypes.ProtocolIeID `protobuf:"bytes,1,opt,name=id,json=&id,proto3" json:"id,omitempty" aper:"unique,"`
	// @inject_tag: aper:"valueLB:0,valueUB:2,"
	Criticality xnap_commondatatypes.Criticality `protobuf:"varint,2,opt,name=criticality,json=&criticality,proto3,enum=xnap.v1.Criticality" json:"criticality,omitempty" aper:"valueLB:0,valueUB:2,"`
	// @inject_tag: aper:"canonicalOrder,"
	Extension *Dynamic5QidescriptorExtIesExtension `protobuf:"bytes,3,opt,name=extension,json=&Extension,proto3" json:"extension,omitempty" aper:"canonicalOrder,"`
}

func (x *Dynamic5QidescriptorExtIes) Reset() {
	*x = Dynamic5QidescriptorExtIes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[184]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Dynamic5QidescriptorExtIes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Dynamic5QidescriptorExtIes) ProtoMessage() {}

func (x *Dynamic5QidescriptorExtIes) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[184]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Dynamic5QidescriptorExtIes.ProtoReflect.Descriptor instead.
func (*Dynamic5QidescriptorExtIes) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{184}
}

func (x *Dynamic5QidescriptorExtIes) GetId() *xnap_commondatatypes.ProtocolIeID {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Dynamic5QidescriptorExtIes) GetCriticality() xnap_commondatatypes.Criticality {
	if x != nil {
		return x.Criticality
	}
	return xnap_commondatatypes.Criticality(0)
}

func (x *Dynamic5QidescriptorExtIes) GetExtension() *Dynamic5QidescriptorExtIesExtension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// sequence from xnap_v1.asn1:4251
// @inject_tag: aper:"valueExt"
// {Dynamic5QIDescriptor}
type Dynamic5Qidescriptor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PriorityLevelQoS  *PriorityLevelQoS  `protobuf:"bytes,1,opt,name=priority_level_qo_s,json=priorityLevelQoS,proto3" json:"priority_level_qo_s,omitempty"`
	PacketDelayBudget *PacketDelayBudget `protobuf:"bytes,2,opt,name=packet_delay_budget,json=packetDelayBudget,proto3" json:"packet_delay_budget,omitempty"`
	// @inject_tag: aper:"valueExt,"
	PacketErrorRate *PacketErrorRate `protobuf:"bytes,3,opt,name=packet_error_rate,json=packetErrorRate,proto3" json:"packet_error_rate,omitempty" aper:"valueExt,"`
	// @inject_tag: aper:"optional,"
	FiveQi *FiveQi `protobuf:"bytes,4,opt,name=five_qi,json=fiveQI,proto3,oneof" json:"five_qi,omitempty" aper:"optional,"`
	// @inject_tag: aper:"optional,valueExt,valueLB:0,valueUB:1,"
	DelayCritical *DelayCriticalDynamic5Qidescriptor `protobuf:"varint,5,opt,name=delay_critical,json=delayCritical,proto3,enum=xnap.v1.DelayCriticalDynamic5Qidescriptor,oneof" json:"delay_critical,omitempty" aper:"optional,valueExt,valueLB:0,valueUB:1,"`
	// @inject_tag: aper:"optional,"
	AveragingWindow *AveragingWindow `protobuf:"bytes,6,opt,name=averaging_window,json=averagingWindow,proto3,oneof" json:"averaging_window,omitempty" aper:"optional,"`
	// @inject_tag: aper:"optional,"
	MaximumDataBurstVolume *MaximumDataBurstVolume `protobuf:"bytes,7,opt,name=maximum_data_burst_volume,json=maximumDataBurstVolume,proto3,oneof" json:"maximum_data_burst_volume,omitempty" aper:"optional,"`
	// @inject_tag: aper:"optional,sizeLB:1,"
	IEExtension []*Dynamic5QidescriptorExtIes `protobuf:"bytes,8,rep,name=i_e_extension,json=iE-Extension,proto3" json:"i_e_extension,omitempty" aper:"optional,sizeLB:1,"`
}

func (x *Dynamic5Qidescriptor) Reset() {
	*x = Dynamic5Qidescriptor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[185]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Dynamic5Qidescriptor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Dynamic5Qidescriptor) ProtoMessage() {}

func (x *Dynamic5Qidescriptor) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[185]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Dynamic5Qidescriptor.ProtoReflect.Descriptor instead.
func (*Dynamic5Qidescriptor) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{185}
}

func (x *Dynamic5Qidescriptor) GetPriorityLevelQoS() *PriorityLevelQoS {
	if x != nil {
		return x.PriorityLevelQoS
	}
	return nil
}

func (x *Dynamic5Qidescriptor) GetPacketDelayBudget() *PacketDelayBudget {
	if x != nil {
		return x.PacketDelayBudget
	}
	return nil
}

func (x *Dynamic5Qidescriptor) GetPacketErrorRate() *PacketErrorRate {
	if x != nil {
		return x.PacketErrorRate
	}
	return nil
}

func (x *Dynamic5Qidescriptor) GetFiveQi() *FiveQi {
	if x != nil {
		return x.FiveQi
	}
	return nil
}

func (x *Dynamic5Qidescriptor) GetDelayCritical() DelayCriticalDynamic5Qidescriptor {
	if x != nil && x.DelayCritical != nil {
		return *x.DelayCritical
	}
	return DelayCriticalDynamic5Qidescriptor_DELAY_CRITICAL_DYNAMIC5_QIDESCRIPTOR_DELAY_CRITICAL
}

func (x *Dynamic5Qidescriptor) GetAveragingWindow() *AveragingWindow {
	if x != nil {
		return x.AveragingWindow
	}
	return nil
}

func (x *Dynamic5Qidescriptor) GetMaximumDataBurstVolume() *MaximumDataBurstVolume {
	if x != nil {
		return x.MaximumDataBurstVolume
	}
	return nil
}

func (x *Dynamic5Qidescriptor) GetIEExtension() []*Dynamic5QidescriptorExtIes {
	if x != nil {
		return x.IEExtension
	}
	return nil
}

// range of Integer from xnap_v1.asn1:4275
// {E-RAB-ID}
type ERAbID struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"valueExt,valueLB:0,valueUB:15,"
	Value int32 `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty" aper:"valueExt,valueLB:0,valueUB:15,"`
}

func (x *ERAbID) Reset() {
	*x = ERAbID{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[186]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ERAbID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ERAbID) ProtoMessage() {}

func (x *ERAbID) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[186]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ERAbID.ProtoReflect.Descriptor instead.
func (*ERAbID) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{186}
}

func (x *ERAbID) GetValue() int32 {
	if x != nil {
		return x.Value
	}
	return 0
}

// range of Integer from xnap_v1.asn1:4278
// {E-UTRAARFCN}
type EUTraarfcn struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"valueLB:0,valueUB:262143,"
	Value int32 `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty" aper:"valueLB:0,valueUB:262143,"`
}

func (x *EUTraarfcn) Reset() {
	*x = EUTraarfcn{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[187]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EUTraarfcn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EUTraarfcn) ProtoMessage() {}

func (x *EUTraarfcn) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[187]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EUTraarfcn.ProtoReflect.Descriptor instead.
func (*EUTraarfcn) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{187}
}

func (x *EUTraarfcn) GetValue() int32 {
	if x != nil {
		return x.Value
	}
	return 0
}

// range of Integer from xnap_v1.asn1:4281
// {E-UTRA-Cell-Identity}
type EUTraCellIdentity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"sizeLB:28,sizeUB:28,"
	Value *asn1.BitString `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty" aper:"sizeLB:28,sizeUB:28,"`
}

func (x *EUTraCellIdentity) Reset() {
	*x = EUTraCellIdentity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[188]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EUTraCellIdentity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EUTraCellIdentity) ProtoMessage() {}

func (x *EUTraCellIdentity) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[188]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EUTraCellIdentity.ProtoReflect.Descriptor instead.
func (*EUTraCellIdentity) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{188}
}

func (x *EUTraCellIdentity) GetValue() *asn1.BitString {
	if x != nil {
		return x.Value
	}
	return nil
}

// value set from xnap_v1.asn1:4291
// {E-UTRA-CGI-ExtIEs}
type EUTraCGiExtIes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *emptypb.Empty `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *EUTraCGiExtIes) Reset() {
	*x = EUTraCGiExtIes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[189]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EUTraCGiExtIes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EUTraCGiExtIes) ProtoMessage() {}

func (x *EUTraCGiExtIes) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[189]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EUTraCGiExtIes.ProtoReflect.Descriptor instead.
func (*EUTraCGiExtIes) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{189}
}

func (x *EUTraCGiExtIes) GetValue() *emptypb.Empty {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:4285
// @inject_tag: aper:"valueExt"
// {E-UTRA-CGI}
type EUTraCGi struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlmnId  *PlmnIdentity      `protobuf:"bytes,1,opt,name=plmn_id,json=plmn-id,proto3" json:"plmn_id,omitempty"`
	EUtraCi *EUTraCellIdentity `protobuf:"bytes,2,opt,name=e_utra_ci,json=e-utra-CI,proto3" json:"e_utra_ci,omitempty"`
	// @inject_tag: aper:"optional,sizeLB:1,sizeUB:65535,valueExt"
	IEExtension []*EUTraCGiExtIes `protobuf:"bytes,3,rep,name=i_e_extension,json=iE-Extension,proto3" json:"i_e_extension,omitempty" aper:"optional,sizeLB:1,sizeUB:65535,valueExt"`
}

func (x *EUTraCGi) Reset() {
	*x = EUTraCGi{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[190]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EUTraCGi) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EUTraCGi) ProtoMessage() {}

func (x *EUTraCGi) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[190]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EUTraCGi.ProtoReflect.Descriptor instead.
func (*EUTraCGi) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{190}
}

func (x *EUTraCGi) GetPlmnId() *PlmnIdentity {
	if x != nil {
		return x.PlmnId
	}
	return nil
}

func (x *EUTraCGi) GetEUtraCi() *EUTraCellIdentity {
	if x != nil {
		return x.EUtraCi
	}
	return nil
}

func (x *EUTraCGi) GetIEExtension() []*EUTraCGiExtIes {
	if x != nil {
		return x.IEExtension
	}
	return nil
}

// range of Integer from xnap_v1.asn1:4296
// {E-UTRAFrequencyBandIndicator}
type EUTrafrequencyBandIndicator struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"valueExt,valueLB:1,valueUB:256,"
	Value int32 `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty" aper:"valueExt,valueLB:1,valueUB:256,"`
}

func (x *EUTrafrequencyBandIndicator) Reset() {
	*x = EUTrafrequencyBandIndicator{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[191]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EUTrafrequencyBandIndicator) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EUTrafrequencyBandIndicator) ProtoMessage() {}

func (x *EUTrafrequencyBandIndicator) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[191]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EUTrafrequencyBandIndicator.ProtoReflect.Descriptor instead.
func (*EUTrafrequencyBandIndicator) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{191}
}

func (x *EUTrafrequencyBandIndicator) GetValue() int32 {
	if x != nil {
		return x.Value
	}
	return 0
}

// sequence from xnap_v1.asn1:4302
// {E-UTRAMultibandInfoList}
type EUTramultibandInfoList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"sizeLB:1,sizeUB:16,"
	Value []*EUTrafrequencyBandIndicator `protobuf:"bytes,1,rep,name=value,proto3" json:"value,omitempty" aper:"sizeLB:1,sizeUB:16,"`
}

func (x *EUTramultibandInfoList) Reset() {
	*x = EUTramultibandInfoList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[192]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EUTramultibandInfoList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EUTramultibandInfoList) ProtoMessage() {}

func (x *EUTramultibandInfoList) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[192]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EUTramultibandInfoList.ProtoReflect.Descriptor instead.
func (*EUTramultibandInfoList) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{192}
}

func (x *EUTramultibandInfoList) GetValue() []*EUTrafrequencyBandIndicator {
	if x != nil {
		return x.Value
	}
	return nil
}

// range of Integer from xnap_v1.asn1:4302
// {E-UTRAPCI}
type EUTrapci struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"valueExt,valueLB:0,valueUB:503,"
	Value int32 `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty" aper:"valueExt,valueLB:0,valueUB:503,"`
}

func (x *EUTrapci) Reset() {
	*x = EUTrapci{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[193]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EUTrapci) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EUTrapci) ProtoMessage() {}

func (x *EUTrapci) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[193]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EUTrapci.ProtoReflect.Descriptor instead.
func (*EUTrapci) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{193}
}

func (x *EUTrapci) GetValue() int32 {
	if x != nil {
		return x.Value
	}
	return 0
}

// value set from xnap_v1.asn1:4316
// {E-UTRAPRACHConfiguration-ExtIEs}
type EUTraprachconfigurationExtIes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *emptypb.Empty `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *EUTraprachconfigurationExtIes) Reset() {
	*x = EUTraprachconfigurationExtIes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[194]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EUTraprachconfigurationExtIes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EUTraprachconfigurationExtIes) ProtoMessage() {}

func (x *EUTraprachconfigurationExtIes) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[194]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EUTraprachconfigurationExtIes.ProtoReflect.Descriptor instead.
func (*EUTraprachconfigurationExtIes) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{194}
}

func (x *EUTraprachconfigurationExtIes) GetValue() *emptypb.Empty {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:4306
// @inject_tag: aper:"valueExt"
// {E-UTRAPRACHConfiguration}
type EUTraprachconfiguration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"valueLB:0,valueUB:837,"
	RootSequenceIndex int32 `protobuf:"varint,1,opt,name=root_sequence_index,json=rootSequenceIndex,proto3" json:"root_sequence_index,omitempty" aper:"valueLB:0,valueUB:837,"`
	// @inject_tag: aper:"valueLB:0,valueUB:15,"
	ZeroCorrelationIndex int32 `protobuf:"varint,2,opt,name=zero_correlation_index,json=zeroCorrelationIndex,proto3" json:"zero_correlation_index,omitempty" aper:"valueLB:0,valueUB:15,"`
	// @inject_tag: aper:"valueExt,valueLB:0,valueUB:1,"
	HighSpeedFlag HighSpeedFlagEutraprachconfiguration `protobuf:"varint,3,opt,name=high_speed_flag,json=highSpeedFlag,proto3,enum=xnap.v1.HighSpeedFlagEutraprachconfiguration" json:"high_speed_flag,omitempty" aper:"valueExt,valueLB:0,valueUB:1,"`
	// @inject_tag: aper:"valueLB:0,valueUB:94,"
	PrachFreqOffset int32 `protobuf:"varint,4,opt,name=prach_freq_offset,json=prach-FreqOffset,proto3" json:"prach_freq_offset,omitempty" aper:"valueLB:0,valueUB:94,"`
	// @inject_tag: aper:"optional,valueLB:0,valueUB:63,"
	PrachConfigIndex *int32 `protobuf:"varint,5,opt,name=prach_config_index,json=prach-ConfigIndex,proto3,oneof" json:"prach_config_index,omitempty" aper:"optional,valueLB:0,valueUB:63,"`
	// @inject_tag: aper:"optional,sizeLB:1,"
	IEExtensions []*EUTraprachconfigurationExtIes `protobuf:"bytes,6,rep,name=i_e_extensions,json=iE-Extensions,proto3" json:"i_e_extensions,omitempty" aper:"optional,sizeLB:1,"`
}

func (x *EUTraprachconfiguration) Reset() {
	*x = EUTraprachconfiguration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[195]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EUTraprachconfiguration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EUTraprachconfiguration) ProtoMessage() {}

func (x *EUTraprachconfiguration) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[195]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EUTraprachconfiguration.ProtoReflect.Descriptor instead.
func (*EUTraprachconfiguration) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{195}
}

func (x *EUTraprachconfiguration) GetRootSequenceIndex() int32 {
	if x != nil {
		return x.RootSequenceIndex
	}
	return 0
}

func (x *EUTraprachconfiguration) GetZeroCorrelationIndex() int32 {
	if x != nil {
		return x.ZeroCorrelationIndex
	}
	return 0
}

func (x *EUTraprachconfiguration) GetHighSpeedFlag() HighSpeedFlagEutraprachconfiguration {
	if x != nil {
		return x.HighSpeedFlag
	}
	return HighSpeedFlagEutraprachconfiguration_HIGH_SPEED_FLAG_EUTRAPRACHCONFIGURATION_TRUE
}

func (x *EUTraprachconfiguration) GetPrachFreqOffset() int32 {
	if x != nil {
		return x.PrachFreqOffset
	}
	return 0
}

func (x *EUTraprachconfiguration) GetPrachConfigIndex() int32 {
	if x != nil && x.PrachConfigIndex != nil {
		return *x.PrachConfigIndex
	}
	return 0
}

func (x *EUTraprachconfiguration) GetIEExtensions() []*EUTraprachconfigurationExtIes {
	if x != nil {
		return x.IEExtensions
	}
	return nil
}

// value set from xnap_v1.asn1:4329
// {EndpointIPAddressAndPort-ExtIEs}
type EndpointIpaddressAndPortExtIes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *emptypb.Empty `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *EndpointIpaddressAndPortExtIes) Reset() {
	*x = EndpointIpaddressAndPortExtIes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[196]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EndpointIpaddressAndPortExtIes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EndpointIpaddressAndPortExtIes) ProtoMessage() {}

func (x *EndpointIpaddressAndPortExtIes) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[196]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EndpointIpaddressAndPortExtIes.ProtoReflect.Descriptor instead.
func (*EndpointIpaddressAndPortExtIes) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{196}
}

func (x *EndpointIpaddressAndPortExtIes) GetValue() *emptypb.Empty {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:4324
// {EndpointIPAddressAndPort}
type EndpointIpaddressAndPort struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EndpointIpaddress *TransportLayerAddress `protobuf:"bytes,1,opt,name=endpoint_ipaddress,json=endpointIPAddress,proto3" json:"endpoint_ipaddress,omitempty"`
	PortNumber        *PortNumber            `protobuf:"bytes,2,opt,name=port_number,json=portNumber,proto3" json:"port_number,omitempty"`
	// @inject_tag: aper:"optional,sizeLB:1,"
	IEExtensions []*EndpointIpaddressAndPortExtIes `protobuf:"bytes,3,rep,name=i_e_extensions,json=iE-Extensions,proto3" json:"i_e_extensions,omitempty" aper:"optional,sizeLB:1,"`
}

func (x *EndpointIpaddressAndPort) Reset() {
	*x = EndpointIpaddressAndPort{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[197]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EndpointIpaddressAndPort) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EndpointIpaddressAndPort) ProtoMessage() {}

func (x *EndpointIpaddressAndPort) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[197]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EndpointIpaddressAndPort.ProtoReflect.Descriptor instead.
func (*EndpointIpaddressAndPort) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{197}
}

func (x *EndpointIpaddressAndPort) GetEndpointIpaddress() *TransportLayerAddress {
	if x != nil {
		return x.EndpointIpaddress
	}
	return nil
}

func (x *EndpointIpaddressAndPort) GetPortNumber() *PortNumber {
	if x != nil {
		return x.PortNumber
	}
	return nil
}

func (x *EndpointIpaddressAndPort) GetIEExtensions() []*EndpointIpaddressAndPortExtIes {
	if x != nil {
		return x.IEExtensions
	}
	return nil
}

// value set from xnap_v1.asn1:4340
// {EventTriggered-ExtIEs}
type EventTriggeredExtIes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *emptypb.Empty `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *EventTriggeredExtIes) Reset() {
	*x = EventTriggeredExtIes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[198]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventTriggeredExtIes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventTriggeredExtIes) ProtoMessage() {}

func (x *EventTriggeredExtIes) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[198]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventTriggeredExtIes.ProtoReflect.Descriptor instead.
func (*EventTriggeredExtIes) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{198}
}

func (x *EventTriggeredExtIes) GetValue() *emptypb.Empty {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:4335
// @inject_tag: aper:"valueExt"
// {EventTriggered}
type EventTriggered struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"valueExt,"
	LoggedEventTriggeredConfig *LoggedEventTriggeredConfig `protobuf:"bytes,1,opt,name=logged_event_triggered_config,json=loggedEventTriggeredConfig,proto3" json:"logged_event_triggered_config,omitempty" aper:"valueExt,"`
	// @inject_tag: aper:"optional,sizeLB:1,"
	IEExtensions []*EventTriggeredExtIes `protobuf:"bytes,2,rep,name=i_e_extensions,json=iE-Extensions,proto3" json:"i_e_extensions,omitempty" aper:"optional,sizeLB:1,"`
}

func (x *EventTriggered) Reset() {
	*x = EventTriggered{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[199]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventTriggered) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventTriggered) ProtoMessage() {}

func (x *EventTriggered) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[199]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventTriggered.ProtoReflect.Descriptor instead.
func (*EventTriggered) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{199}
}

func (x *EventTriggered) GetLoggedEventTriggeredConfig() *LoggedEventTriggeredConfig {
	if x != nil {
		return x.LoggedEventTriggeredConfig
	}
	return nil
}

func (x *EventTriggered) GetIEExtensions() []*EventTriggeredExtIes {
	if x != nil {
		return x.IEExtensions
	}
	return nil
}

// value set from xnap_v1.asn1:4358
// {EventTypeTrigger-ExtIEs}
type EventTypeTriggerExtIes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *emptypb.Empty `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *EventTypeTriggerExtIes) Reset() {
	*x = EventTypeTriggerExtIes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[200]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventTypeTriggerExtIes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventTypeTriggerExtIes) ProtoMessage() {}

func (x *EventTypeTriggerExtIes) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[200]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventTypeTriggerExtIes.ProtoReflect.Descriptor instead.
func (*EventTypeTriggerExtIes) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{200}
}

func (x *EventTypeTriggerExtIes) GetValue() *emptypb.Empty {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:4353
// {EventTypeTrigger}
type EventTypeTrigger struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// choice from xnap_v1.asn1:4353
	//
	// Types that are assignable to EventTypeTrigger:
	//	*EventTypeTrigger_OutOfCoverage
	//	*EventTypeTrigger_EventL1
	//	*EventTypeTrigger_ChoiceExtensions
	EventTypeTrigger isEventTypeTrigger_EventTypeTrigger `protobuf_oneof:"event_type_trigger"`
}

func (x *EventTypeTrigger) Reset() {
	*x = EventTypeTrigger{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[201]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventTypeTrigger) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventTypeTrigger) ProtoMessage() {}

func (x *EventTypeTrigger) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[201]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventTypeTrigger.ProtoReflect.Descriptor instead.
func (*EventTypeTrigger) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{201}
}

func (m *EventTypeTrigger) GetEventTypeTrigger() isEventTypeTrigger_EventTypeTrigger {
	if m != nil {
		return m.EventTypeTrigger
	}
	return nil
}

func (x *EventTypeTrigger) GetOutOfCoverage() OutOfCoverageEventTypeTrigger {
	if x, ok := x.GetEventTypeTrigger().(*EventTypeTrigger_OutOfCoverage); ok {
		return x.OutOfCoverage
	}
	return OutOfCoverageEventTypeTrigger_OUT_OF_COVERAGE_EVENT_TYPE_TRIGGER_TRUE
}

func (x *EventTypeTrigger) GetEventL1() *EventL1 {
	if x, ok := x.GetEventTypeTrigger().(*EventTypeTrigger_EventL1); ok {
		return x.EventL1
	}
	return nil
}

func (x *EventTypeTrigger) GetChoiceExtensions() *EventTypeTriggerExtIes {
	if x, ok := x.GetEventTypeTrigger().(*EventTypeTrigger_ChoiceExtensions); ok {
		return x.ChoiceExtensions
	}
	return nil
}

type isEventTypeTrigger_EventTypeTrigger interface {
	isEventTypeTrigger_EventTypeTrigger()
}

type EventTypeTrigger_OutOfCoverage struct {
	// @inject_tag: aper:"choiceIdx:1,valueExt,valueLB:0,valueUB:0,"
	OutOfCoverage OutOfCoverageEventTypeTrigger `protobuf:"varint,1,opt,name=out_of_coverage,json=outOfCoverage,proto3,enum=xnap.v1.OutOfCoverageEventTypeTrigger,oneof" aper:"choiceIdx:1,valueExt,valueLB:0,valueUB:0,"`
}

type EventTypeTrigger_EventL1 struct {
	// @inject_tag: aper:"choiceIdx:2,valueExt,"
	EventL1 *EventL1 `protobuf:"bytes,2,opt,name=event_l1,json=eventL1,proto3,oneof" aper:"choiceIdx:2,valueExt,"`
}

type EventTypeTrigger_ChoiceExtensions struct {
	// @inject_tag: aper:"choiceIdx:3,"
	ChoiceExtensions *EventTypeTriggerExtIes `protobuf:"bytes,3,opt,name=choice_extensions,json=choice-Extensions,proto3,oneof" aper:"choiceIdx:3,"`
}

func (*EventTypeTrigger_OutOfCoverage) isEventTypeTrigger_EventTypeTrigger() {}

func (*EventTypeTrigger_EventL1) isEventTypeTrigger_EventTypeTrigger() {}

func (*EventTypeTrigger_ChoiceExtensions) isEventTypeTrigger_EventTypeTrigger() {}

// value set from xnap_v1.asn1:4370
// {EventL1-ExtIEs}
type EventL1ExtIes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *emptypb.Empty `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *EventL1ExtIes) Reset() {
	*x = EventL1ExtIes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[202]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventL1ExtIes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventL1ExtIes) ProtoMessage() {}

func (x *EventL1ExtIes) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[202]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventL1ExtIes.ProtoReflect.Descriptor instead.
func (*EventL1ExtIes) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{202}
}

func (x *EventL1ExtIes) GetValue() *emptypb.Empty {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:4363
// @inject_tag: aper:"valueExt"
// {EventL1}
type EventL1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"choiceExt,"
	L1Threshold *MeasurementThresholdL1LoggedMdt `protobuf:"bytes,1,opt,name=l1_threshold,json=l1Threshold,proto3" json:"l1_threshold,omitempty" aper:"choiceExt,"`
	Hysteresis  *Hysteresis                      `protobuf:"bytes,2,opt,name=hysteresis,proto3" json:"hysteresis,omitempty"`
	// @inject_tag: aper:"valueLB:0,valueUB:15,"
	TimeToTrigger TimeToTrigger `protobuf:"varint,3,opt,name=time_to_trigger,json=timeToTrigger,proto3,enum=xnap.v1.TimeToTrigger" json:"time_to_trigger,omitempty" aper:"valueLB:0,valueUB:15,"`
	// @inject_tag: aper:"optional,sizeLB:1,"
	IEExtensions []*EventL1ExtIes `protobuf:"bytes,4,rep,name=i_e_extensions,json=iE-Extensions,proto3" json:"i_e_extensions,omitempty" aper:"optional,sizeLB:1,"`
}

func (x *EventL1) Reset() {
	*x = EventL1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[203]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventL1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventL1) ProtoMessage() {}

func (x *EventL1) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[203]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventL1.ProtoReflect.Descriptor instead.
func (*EventL1) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{203}
}

func (x *EventL1) GetL1Threshold() *MeasurementThresholdL1LoggedMdt {
	if x != nil {
		return x.L1Threshold
	}
	return nil
}

func (x *EventL1) GetHysteresis() *Hysteresis {
	if x != nil {
		return x.Hysteresis
	}
	return nil
}

func (x *EventL1) GetTimeToTrigger() TimeToTrigger {
	if x != nil {
		return x.TimeToTrigger
	}
	return TimeToTrigger_TIME_TO_TRIGGER_MS0
}

func (x *EventL1) GetIEExtensions() []*EventL1ExtIes {
	if x != nil {
		return x.IEExtensions
	}
	return nil
}

// sequence from xnap_v1.asn1:4375
// @inject_tag: aper:"choiceExt"
// {MeasurementThresholdL1LoggedMDT}
type MeasurementThresholdL1LoggedMdt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// choice from xnap_v1.asn1:4375
	//
	// Types that are assignable to MeasurementThresholdL1LoggedMdt:
	//	*MeasurementThresholdL1LoggedMdt_ThresholdRsrp
	//	*MeasurementThresholdL1LoggedMdt_ThresholdRsrq
	MeasurementThresholdL1LoggedMdt isMeasurementThresholdL1LoggedMdt_MeasurementThresholdL1LoggedMdt `protobuf_oneof:"measurement_threshold_l1_logged_mdt"`
}

func (x *MeasurementThresholdL1LoggedMdt) Reset() {
	*x = MeasurementThresholdL1LoggedMdt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[204]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MeasurementThresholdL1LoggedMdt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MeasurementThresholdL1LoggedMdt) ProtoMessage() {}

func (x *MeasurementThresholdL1LoggedMdt) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[204]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MeasurementThresholdL1LoggedMdt.ProtoReflect.Descriptor instead.
func (*MeasurementThresholdL1LoggedMdt) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{204}
}

func (m *MeasurementThresholdL1LoggedMdt) GetMeasurementThresholdL1LoggedMdt() isMeasurementThresholdL1LoggedMdt_MeasurementThresholdL1LoggedMdt {
	if m != nil {
		return m.MeasurementThresholdL1LoggedMdt
	}
	return nil
}

func (x *MeasurementThresholdL1LoggedMdt) GetThresholdRsrp() *ThresholdRSrp {
	if x, ok := x.GetMeasurementThresholdL1LoggedMdt().(*MeasurementThresholdL1LoggedMdt_ThresholdRsrp); ok {
		return x.ThresholdRsrp
	}
	return nil
}

func (x *MeasurementThresholdL1LoggedMdt) GetThresholdRsrq() *ThresholdRSrq {
	if x, ok := x.GetMeasurementThresholdL1LoggedMdt().(*MeasurementThresholdL1LoggedMdt_ThresholdRsrq); ok {
		return x.ThresholdRsrq
	}
	return nil
}

type isMeasurementThresholdL1LoggedMdt_MeasurementThresholdL1LoggedMdt interface {
	isMeasurementThresholdL1LoggedMdt_MeasurementThresholdL1LoggedMdt()
}

type MeasurementThresholdL1LoggedMdt_ThresholdRsrp struct {
	// @inject_tag: aper:"choiceIdx:1,"
	ThresholdRsrp *ThresholdRSrp `protobuf:"bytes,1,opt,name=threshold_rsrp,json=threshold-RSRP,proto3,oneof" aper:"choiceIdx:1,"`
}

type MeasurementThresholdL1LoggedMdt_ThresholdRsrq struct {
	// @inject_tag: aper:"choiceIdx:2,"
	ThresholdRsrq *ThresholdRSrq `protobuf:"bytes,2,opt,name=threshold_rsrq,json=threshold-RSRQ,proto3,oneof" aper:"choiceIdx:2,"`
}

func (*MeasurementThresholdL1LoggedMdt_ThresholdRsrp) isMeasurementThresholdL1LoggedMdt_MeasurementThresholdL1LoggedMdt() {
}

func (*MeasurementThresholdL1LoggedMdt_ThresholdRsrq) isMeasurementThresholdL1LoggedMdt_MeasurementThresholdL1LoggedMdt() {
}

// range of Integer from xnap_v1.asn1:4380
// {ExpectedActivityPeriod}
type ExpectedActivityPeriod struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"valueExt,valueLB:181,valueUB:181,"
	Value int32 `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty" aper:"valueExt,valueLB:181,valueUB:181,"`
}

func (x *ExpectedActivityPeriod) Reset() {
	*x = ExpectedActivityPeriod{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[205]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExpectedActivityPeriod) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExpectedActivityPeriod) ProtoMessage() {}

func (x *ExpectedActivityPeriod) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[205]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExpectedActivityPeriod.ProtoReflect.Descriptor instead.
func (*ExpectedActivityPeriod) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{205}
}

func (x *ExpectedActivityPeriod) GetValue() int32 {
	if x != nil {
		return x.Value
	}
	return 0
}

// range of Integer from xnap_v1.asn1:4387
// {ExpectedIdlePeriod}
type ExpectedIdlePeriod struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"valueExt,valueLB:181,valueUB:181,"
	Value int32 `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty" aper:"valueExt,valueLB:181,valueUB:181,"`
}

func (x *ExpectedIdlePeriod) Reset() {
	*x = ExpectedIdlePeriod{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[206]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExpectedIdlePeriod) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExpectedIdlePeriod) ProtoMessage() {}

func (x *ExpectedIdlePeriod) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[206]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExpectedIdlePeriod.ProtoReflect.Descriptor instead.
func (*ExpectedIdlePeriod) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{206}
}

func (x *ExpectedIdlePeriod) GetValue() int32 {
	if x != nil {
		return x.Value
	}
	return 0
}

// value set from xnap_v1.asn1:4397
// {ExpectedUEActivityBehaviour-ExtIEs}
type ExpectedUeactivityBehaviourExtIes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *emptypb.Empty `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *ExpectedUeactivityBehaviourExtIes) Reset() {
	*x = ExpectedUeactivityBehaviourExtIes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[207]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExpectedUeactivityBehaviourExtIes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExpectedUeactivityBehaviourExtIes) ProtoMessage() {}

func (x *ExpectedUeactivityBehaviourExtIes) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[207]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExpectedUeactivityBehaviourExtIes.ProtoReflect.Descriptor instead.
func (*ExpectedUeactivityBehaviourExtIes) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{207}
}

func (x *ExpectedUeactivityBehaviourExtIes) GetValue() *emptypb.Empty {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:4390
// @inject_tag: aper:"valueExt"
// {ExpectedUEActivityBehaviour}
type ExpectedUeactivityBehaviour struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"optional,"
	ExpectedActivityPeriod *ExpectedActivityPeriod `protobuf:"bytes,1,opt,name=expected_activity_period,json=expectedActivityPeriod,proto3,oneof" json:"expected_activity_period,omitempty" aper:"optional,"`
	// @inject_tag: aper:"optional,"
	ExpectedIdlePeriod *ExpectedIdlePeriod `protobuf:"bytes,2,opt,name=expected_idle_period,json=expectedIdlePeriod,proto3,oneof" json:"expected_idle_period,omitempty" aper:"optional,"`
	// @inject_tag: aper:"optional,valueExt,valueLB:0,valueUB:1,"
	SourceOfUeactivityBehaviourInformation *SourceOfUeactivityBehaviourInformation `protobuf:"varint,3,opt,name=source_of_ueactivity_behaviour_information,json=sourceOfUEActivityBehaviourInformation,proto3,enum=xnap.v1.SourceOfUeactivityBehaviourInformation,oneof" json:"source_of_ueactivity_behaviour_information,omitempty" aper:"optional,valueExt,valueLB:0,valueUB:1,"`
	// @inject_tag: aper:"optional,sizeLB:1,"
	IEExtensions []*ExpectedUeactivityBehaviourExtIes `protobuf:"bytes,4,rep,name=i_e_extensions,json=iE-Extensions,proto3" json:"i_e_extensions,omitempty" aper:"optional,sizeLB:1,"`
}

func (x *ExpectedUeactivityBehaviour) Reset() {
	*x = ExpectedUeactivityBehaviour{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[208]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExpectedUeactivityBehaviour) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExpectedUeactivityBehaviour) ProtoMessage() {}

func (x *ExpectedUeactivityBehaviour) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[208]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExpectedUeactivityBehaviour.ProtoReflect.Descriptor instead.
func (*ExpectedUeactivityBehaviour) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{208}
}

func (x *ExpectedUeactivityBehaviour) GetExpectedActivityPeriod() *ExpectedActivityPeriod {
	if x != nil {
		return x.ExpectedActivityPeriod
	}
	return nil
}

func (x *ExpectedUeactivityBehaviour) GetExpectedIdlePeriod() *ExpectedIdlePeriod {
	if x != nil {
		return x.ExpectedIdlePeriod
	}
	return nil
}

func (x *ExpectedUeactivityBehaviour) GetSourceOfUeactivityBehaviourInformation() SourceOfUeactivityBehaviourInformation {
	if x != nil && x.SourceOfUeactivityBehaviourInformation != nil {
		return *x.SourceOfUeactivityBehaviourInformation
	}
	return SourceOfUeactivityBehaviourInformation_SOURCE_OF_UEACTIVITY_BEHAVIOUR_INFORMATION_SUBSCRIPTION_INFORMATION
}

func (x *ExpectedUeactivityBehaviour) GetIEExtensions() []*ExpectedUeactivityBehaviourExtIes {
	if x != nil {
		return x.IEExtensions
	}
	return nil
}

// value set from xnap_v1.asn1:4410
// {ExpectedUEBehaviour-ExtIEs}
type ExpectedUebehaviourExtIes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *emptypb.Empty `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *ExpectedUebehaviourExtIes) Reset() {
	*x = ExpectedUebehaviourExtIes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[209]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExpectedUebehaviourExtIes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExpectedUebehaviourExtIes) ProtoMessage() {}

func (x *ExpectedUebehaviourExtIes) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[209]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExpectedUebehaviourExtIes.ProtoReflect.Descriptor instead.
func (*ExpectedUebehaviourExtIes) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{209}
}

func (x *ExpectedUebehaviourExtIes) GetValue() *emptypb.Empty {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:4402
// @inject_tag: aper:"valueExt"
// {ExpectedUEBehaviour}
type ExpectedUebehaviour struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"optional,valueExt,"
	ExpectedUeactivityBehaviour *ExpectedUeactivityBehaviour `protobuf:"bytes,1,opt,name=expected_ueactivity_behaviour,json=expectedUEActivityBehaviour,proto3,oneof" json:"expected_ueactivity_behaviour,omitempty" aper:"optional,valueExt,"`
	// @inject_tag: aper:"optional,valueExt,valueLB:0,valueUB:6,"
	ExpectedHointerval *ExpectedHointerval `protobuf:"varint,2,opt,name=expected_hointerval,json=expectedHOInterval,proto3,enum=xnap.v1.ExpectedHointerval,oneof" json:"expected_hointerval,omitempty" aper:"optional,valueExt,valueLB:0,valueUB:6,"`
	// @inject_tag: aper:"optional,valueExt,valueLB:0,valueUB:1,"
	ExpectedUemobility *ExpectedUemobility `protobuf:"varint,3,opt,name=expected_uemobility,json=expectedUEMobility,proto3,enum=xnap.v1.ExpectedUemobility,oneof" json:"expected_uemobility,omitempty" aper:"optional,valueExt,valueLB:0,valueUB:1,"`
	// @inject_tag: aper:"optional,"
	ExpectedUemovingTrajectory *ExpectedUemovingTrajectory `protobuf:"bytes,4,opt,name=expected_uemoving_trajectory,json=expectedUEMovingTrajectory,proto3,oneof" json:"expected_uemoving_trajectory,omitempty" aper:"optional,"`
	// @inject_tag: aper:"optional,sizeLB:1,"
	IEExtensions []*ExpectedUebehaviourExtIes `protobuf:"bytes,5,rep,name=i_e_extensions,json=iE-Extensions,proto3" json:"i_e_extensions,omitempty" aper:"optional,sizeLB:1,"`
}

func (x *ExpectedUebehaviour) Reset() {
	*x = ExpectedUebehaviour{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[210]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExpectedUebehaviour) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExpectedUebehaviour) ProtoMessage() {}

func (x *ExpectedUebehaviour) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[210]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExpectedUebehaviour.ProtoReflect.Descriptor instead.
func (*ExpectedUebehaviour) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{210}
}

func (x *ExpectedUebehaviour) GetExpectedUeactivityBehaviour() *ExpectedUeactivityBehaviour {
	if x != nil {
		return x.ExpectedUeactivityBehaviour
	}
	return nil
}

func (x *ExpectedUebehaviour) GetExpectedHointerval() ExpectedHointerval {
	if x != nil && x.ExpectedHointerval != nil {
		return *x.ExpectedHointerval
	}
	return ExpectedHointerval_EXPECTED_HOINTERVAL_SEC15
}

func (x *ExpectedUebehaviour) GetExpectedUemobility() ExpectedUemobility {
	if x != nil && x.ExpectedUemobility != nil {
		return *x.ExpectedUemobility
	}
	return ExpectedUemobility_EXPECTED_UEMOBILITY_STATIONARY
}

func (x *ExpectedUebehaviour) GetExpectedUemovingTrajectory() *ExpectedUemovingTrajectory {
	if x != nil {
		return x.ExpectedUemovingTrajectory
	}
	return nil
}

func (x *ExpectedUebehaviour) GetIEExtensions() []*ExpectedUebehaviourExtIes {
	if x != nil {
		return x.IEExtensions
	}
	return nil
}

// sequence from xnap_v1.asn1:4422
// {ExpectedUEMovingTrajectory}
type ExpectedUemovingTrajectory struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"valueExt,sizeLB:1,sizeUB:16,"
	Value []*ExpectedUemovingTrajectoryItem `protobuf:"bytes,1,rep,name=value,proto3" json:"value,omitempty" aper:"valueExt,sizeLB:1,sizeUB:16,"`
}

func (x *ExpectedUemovingTrajectory) Reset() {
	*x = ExpectedUemovingTrajectory{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[211]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExpectedUemovingTrajectory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExpectedUemovingTrajectory) ProtoMessage() {}

func (x *ExpectedUemovingTrajectory) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[211]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExpectedUemovingTrajectory.ProtoReflect.Descriptor instead.
func (*ExpectedUemovingTrajectory) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{211}
}

func (x *ExpectedUemovingTrajectory) GetValue() []*ExpectedUemovingTrajectoryItem {
	if x != nil {
		return x.Value
	}
	return nil
}

// value set from xnap_v1.asn1:4429
// {ExpectedUEMovingTrajectoryItem-ExtIEs}
type ExpectedUemovingTrajectoryItemExtIes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *emptypb.Empty `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *ExpectedUemovingTrajectoryItemExtIes) Reset() {
	*x = ExpectedUemovingTrajectoryItemExtIes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[212]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExpectedUemovingTrajectoryItemExtIes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExpectedUemovingTrajectoryItemExtIes) ProtoMessage() {}

func (x *ExpectedUemovingTrajectoryItemExtIes) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[212]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExpectedUemovingTrajectoryItemExtIes.ProtoReflect.Descriptor instead.
func (*ExpectedUemovingTrajectoryItemExtIes) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{212}
}

func (x *ExpectedUemovingTrajectoryItemExtIes) GetValue() *emptypb.Empty {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:4423
// @inject_tag: aper:"valueExt"
// {ExpectedUEMovingTrajectoryItem}
type ExpectedUemovingTrajectoryItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"valueExt,"
	NGranCgi *GlobalNgRAncellID `protobuf:"bytes,1,opt,name=n_gran_cgi,json=nGRAN-CGI,proto3" json:"n_gran_cgi,omitempty" aper:"valueExt,"`
	// @inject_tag: aper:"optional,valueLB:0,valueUB:4095,"
	TimeStayedInCell *int32 `protobuf:"varint,2,opt,name=time_stayed_in_cell,json=timeStayedInCell,proto3,oneof" json:"time_stayed_in_cell,omitempty" aper:"optional,valueLB:0,valueUB:4095,"`
	// @inject_tag: aper:"optional,sizeLB:1,"
	IEExtensions []*ExpectedUemovingTrajectoryItemExtIes `protobuf:"bytes,3,rep,name=i_e_extensions,json=iE-Extensions,proto3" json:"i_e_extensions,omitempty" aper:"optional,sizeLB:1,"`
}

func (x *ExpectedUemovingTrajectoryItem) Reset() {
	*x = ExpectedUemovingTrajectoryItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[213]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExpectedUemovingTrajectoryItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExpectedUemovingTrajectoryItem) ProtoMessage() {}

func (x *ExpectedUemovingTrajectoryItem) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[213]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExpectedUemovingTrajectoryItem.ProtoReflect.Descriptor instead.
func (*ExpectedUemovingTrajectoryItem) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{213}
}

func (x *ExpectedUemovingTrajectoryItem) GetNGranCgi() *GlobalNgRAncellID {
	if x != nil {
		return x.NGranCgi
	}
	return nil
}

func (x *ExpectedUemovingTrajectoryItem) GetTimeStayedInCell() int32 {
	if x != nil && x.TimeStayedInCell != nil {
		return *x.TimeStayedInCell
	}
	return 0
}

func (x *ExpectedUemovingTrajectoryItem) GetIEExtensions() []*ExpectedUemovingTrajectoryItemExtIes {
	if x != nil {
		return x.IEExtensions
	}
	return nil
}

// value set from xnap_v1.asn1:4446
// {ExtendedRATRestrictionInformation-ExtIEs}
type ExtendedRatrestrictionInformationExtIes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *emptypb.Empty `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *ExtendedRatrestrictionInformationExtIes) Reset() {
	*x = ExtendedRatrestrictionInformationExtIes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[214]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExtendedRatrestrictionInformationExtIes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExtendedRatrestrictionInformationExtIes) ProtoMessage() {}

func (x *ExtendedRatrestrictionInformationExtIes) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[214]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExtendedRatrestrictionInformationExtIes.ProtoReflect.Descriptor instead.
func (*ExtendedRatrestrictionInformationExtIes) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{214}
}

func (x *ExtendedRatrestrictionInformationExtIes) GetValue() *emptypb.Empty {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:4440
// @inject_tag: aper:"valueExt"
// {ExtendedRATRestrictionInformation}
type ExtendedRatrestrictionInformation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"sizeExt,sizeLB:8,sizeUB:8,"
	PrimaryRatrestriction *asn1.BitString `protobuf:"bytes,1,opt,name=primary_ratrestriction,json=primaryRATRestriction,proto3" json:"primary_ratrestriction,omitempty" aper:"sizeExt,sizeLB:8,sizeUB:8,"`
	// @inject_tag: aper:"sizeExt,sizeLB:8,sizeUB:8,"
	SecondaryRatrestriction *asn1.BitString `protobuf:"bytes,2,opt,name=secondary_ratrestriction,json=secondaryRATRestriction,proto3" json:"secondary_ratrestriction,omitempty" aper:"sizeExt,sizeLB:8,sizeUB:8,"`
	// @inject_tag: aper:"optional,sizeLB:1,"
	IEExtensions []*ExtendedRatrestrictionInformationExtIes `protobuf:"bytes,3,rep,name=i_e_extensions,json=iE-Extensions,proto3" json:"i_e_extensions,omitempty" aper:"optional,sizeLB:1,"`
}

func (x *ExtendedRatrestrictionInformation) Reset() {
	*x = ExtendedRatrestrictionInformation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[215]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExtendedRatrestrictionInformation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExtendedRatrestrictionInformation) ProtoMessage() {}

func (x *ExtendedRatrestrictionInformation) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[215]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExtendedRatrestrictionInformation.ProtoReflect.Descriptor instead.
func (*ExtendedRatrestrictionInformation) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{215}
}

func (x *ExtendedRatrestrictionInformation) GetPrimaryRatrestriction() *asn1.BitString {
	if x != nil {
		return x.PrimaryRatrestriction
	}
	return nil
}

func (x *ExtendedRatrestrictionInformation) GetSecondaryRatrestriction() *asn1.BitString {
	if x != nil {
		return x.SecondaryRatrestriction
	}
	return nil
}

func (x *ExtendedRatrestrictionInformation) GetIEExtensions() []*ExtendedRatrestrictionInformationExtIes {
	if x != nil {
		return x.IEExtensions
	}
	return nil
}

// range of Integer from xnap_v1.asn1:4451
// {ExtendedPacketDelayBudget}
type ExtendedPacketDelayBudget struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"valueExt,valueLB:0,valueUB:65535,"
	Value int32 `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty" aper:"valueExt,valueLB:0,valueUB:65535,"`
}

func (x *ExtendedPacketDelayBudget) Reset() {
	*x = ExtendedPacketDelayBudget{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[216]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExtendedPacketDelayBudget) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExtendedPacketDelayBudget) ProtoMessage() {}

func (x *ExtendedPacketDelayBudget) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[216]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExtendedPacketDelayBudget.ProtoReflect.Descriptor instead.
func (*ExtendedPacketDelayBudget) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{216}
}

func (x *ExtendedPacketDelayBudget) GetValue() int32 {
	if x != nil {
		return x.Value
	}
	return 0
}

// sequence from xnap_v1.asn1:4455
// {ExtendedSliceSupportList}
type ExtendedSliceSupportList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"valueExt,sizeLB:1,sizeUB:65535,"
	Value []*SNSsai `protobuf:"bytes,1,rep,name=value,proto3" json:"value,omitempty" aper:"valueExt,sizeLB:1,sizeUB:65535,"`
}

func (x *ExtendedSliceSupportList) Reset() {
	*x = ExtendedSliceSupportList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[217]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExtendedSliceSupportList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExtendedSliceSupportList) ProtoMessage() {}

func (x *ExtendedSliceSupportList) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[217]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExtendedSliceSupportList.ProtoReflect.Descriptor instead.
func (*ExtendedSliceSupportList) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{217}
}

func (x *ExtendedSliceSupportList) GetValue() []*SNSsai {
	if x != nil {
		return x.Value
	}
	return nil
}

// range of Integer from xnap_v1.asn1:4455
// {ExtendedUEIdentityIndexValue}
type ExtendedUeidentityIndexValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"sizeLB:16,sizeUB:16,"
	Value *asn1.BitString `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty" aper:"sizeLB:16,sizeUB:16,"`
}

func (x *ExtendedUeidentityIndexValue) Reset() {
	*x = ExtendedUeidentityIndexValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[218]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExtendedUeidentityIndexValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExtendedUeidentityIndexValue) ProtoMessage() {}

func (x *ExtendedUeidentityIndexValue) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[218]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExtendedUeidentityIndexValue.ProtoReflect.Descriptor instead.
func (*ExtendedUeidentityIndexValue) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{218}
}

func (x *ExtendedUeidentityIndexValue) GetValue() *asn1.BitString {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:4459
// {ExtTLAs}
type ExtTlas struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"valueExt,sizeLB:1,sizeUB:16,"
	Value []*ExtTlaItem `protobuf:"bytes,1,rep,name=value,proto3" json:"value,omitempty" aper:"valueExt,sizeLB:1,sizeUB:16,"`
}

func (x *ExtTlas) Reset() {
	*x = ExtTlas{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[219]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExtTlas) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExtTlas) ProtoMessage() {}

func (x *ExtTlas) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[219]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExtTlas.ProtoReflect.Descriptor instead.
func (*ExtTlas) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{219}
}

func (x *ExtTlas) GetValue() []*ExtTlaItem {
	if x != nil {
		return x.Value
	}
	return nil
}

// value set from xnap_v1.asn1:4466
// {ExtTLA-Item-ExtIEs}
type ExtTlaItemExtIes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *emptypb.Empty `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *ExtTlaItemExtIes) Reset() {
	*x = ExtTlaItemExtIes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[220]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExtTlaItemExtIes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExtTlaItemExtIes) ProtoMessage() {}

func (x *ExtTlaItemExtIes) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[220]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExtTlaItemExtIes.ProtoReflect.Descriptor instead.
func (*ExtTlaItemExtIes) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{220}
}

func (x *ExtTlaItemExtIes) GetValue() *emptypb.Empty {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:4460
// @inject_tag: aper:"valueExt"
// {ExtTLA-Item}
type ExtTlaItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"optional,"
	IPsecTla *TransportLayerAddress `protobuf:"bytes,1,opt,name=i_psec_tla,json=iPsecTLA,proto3,oneof" json:"i_psec_tla,omitempty" aper:"optional,"`
	// @inject_tag: aper:"optional,"
	GTptransportLayerAddresses *Gtptlas `protobuf:"bytes,2,opt,name=g_tptransport_layer_addresses,json=gTPTransportLayerAddresses,proto3,oneof" json:"g_tptransport_layer_addresses,omitempty" aper:"optional,"`
	// @inject_tag: aper:"optional,sizeLB:1,"
	IEExtensions []*ExtTlaItemExtIes `protobuf:"bytes,3,rep,name=i_e_extensions,json=iE-Extensions,proto3" json:"i_e_extensions,omitempty" aper:"optional,sizeLB:1,"`
}

func (x *ExtTlaItem) Reset() {
	*x = ExtTlaItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[221]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExtTlaItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExtTlaItem) ProtoMessage() {}

func (x *ExtTlaItem) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[221]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExtTlaItem.ProtoReflect.Descriptor instead.
func (*ExtTlaItem) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{221}
}

func (x *ExtTlaItem) GetIPsecTla() *TransportLayerAddress {
	if x != nil {
		return x.IPsecTla
	}
	return nil
}

func (x *ExtTlaItem) GetGTptransportLayerAddresses() *Gtptlas {
	if x != nil {
		return x.GTptransportLayerAddresses
	}
	return nil
}

func (x *ExtTlaItem) GetIEExtensions() []*ExtTlaItemExtIes {
	if x != nil {
		return x.IEExtensions
	}
	return nil
}

// sequence from xnap_v1.asn1:4474
// {GTPTLAs}
type Gtptlas struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"valueExt,sizeLB:1,sizeUB:16,"
	Value []*GtptlaItem `protobuf:"bytes,1,rep,name=value,proto3" json:"value,omitempty" aper:"valueExt,sizeLB:1,sizeUB:16,"`
}

func (x *Gtptlas) Reset() {
	*x = Gtptlas{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[222]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Gtptlas) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Gtptlas) ProtoMessage() {}

func (x *Gtptlas) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[222]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Gtptlas.ProtoReflect.Descriptor instead.
func (*Gtptlas) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{222}
}

func (x *Gtptlas) GetValue() []*GtptlaItem {
	if x != nil {
		return x.Value
	}
	return nil
}

// value set from xnap_v1.asn1:4480
// {GTPTLA-Item-ExtIEs}
type GtptlaItemExtIes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *emptypb.Empty `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *GtptlaItemExtIes) Reset() {
	*x = GtptlaItemExtIes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[223]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GtptlaItemExtIes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GtptlaItemExtIes) ProtoMessage() {}

func (x *GtptlaItemExtIes) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[223]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GtptlaItemExtIes.ProtoReflect.Descriptor instead.
func (*GtptlaItemExtIes) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{223}
}

func (x *GtptlaItemExtIes) GetValue() *emptypb.Empty {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:4475
// @inject_tag: aper:"valueExt"
// {GTPTLA-Item}
type GtptlaItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GTptransportLayerAddresses *TransportLayerAddress `protobuf:"bytes,1,opt,name=g_tptransport_layer_addresses,json=gTPTransportLayerAddresses,proto3" json:"g_tptransport_layer_addresses,omitempty"`
	// @inject_tag: aper:"optional,sizeLB:1,"
	IEExtensions []*GtptlaItemExtIes `protobuf:"bytes,2,rep,name=i_e_extensions,json=iE-Extensions,proto3" json:"i_e_extensions,omitempty" aper:"optional,sizeLB:1,"`
}

func (x *GtptlaItem) Reset() {
	*x = GtptlaItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[224]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GtptlaItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GtptlaItem) ProtoMessage() {}

func (x *GtptlaItem) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[224]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GtptlaItem.ProtoReflect.Descriptor instead.
func (*GtptlaItem) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{224}
}

func (x *GtptlaItem) GetGTptransportLayerAddresses() *TransportLayerAddress {
	if x != nil {
		return x.GTptransportLayerAddresses
	}
	return nil
}

func (x *GtptlaItem) GetIEExtensions() []*GtptlaItemExtIes {
	if x != nil {
		return x.IEExtensions
	}
	return nil
}

// range of Integer from xnap_v1.asn1:4486
// {FiveGCMobilityRestrictionListContainer}
type FiveGcmobilityRestrictionListContainer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value []byte `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *FiveGcmobilityRestrictionListContainer) Reset() {
	*x = FiveGcmobilityRestrictionListContainer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[225]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FiveGcmobilityRestrictionListContainer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FiveGcmobilityRestrictionListContainer) ProtoMessage() {}

func (x *FiveGcmobilityRestrictionListContainer) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[225]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FiveGcmobilityRestrictionListContainer.ProtoReflect.Descriptor instead.
func (*FiveGcmobilityRestrictionListContainer) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{225}
}

func (x *FiveGcmobilityRestrictionListContainer) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

// range of Integer from xnap_v1.asn1:4489
// {FiveQI}
type FiveQi struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"valueExt,valueLB:0,valueUB:255,"
	Value int32 `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty" aper:"valueExt,valueLB:0,valueUB:255,"`
}

func (x *FiveQi) Reset() {
	*x = FiveQi{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[226]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FiveQi) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FiveQi) ProtoMessage() {}

func (x *FiveQi) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[226]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FiveQi.ProtoReflect.Descriptor instead.
func (*FiveQi) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{226}
}

func (x *FiveQi) GetValue() int32 {
	if x != nil {
		return x.Value
	}
	return 0
}

// value set from xnap_v1.asn1:4508
// {GBRQoSFlowInfo-ExtIEs}
type GbrqoSflowInfoExtIes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *emptypb.Empty `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *GbrqoSflowInfoExtIes) Reset() {
	*x = GbrqoSflowInfoExtIes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[227]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GbrqoSflowInfoExtIes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GbrqoSflowInfoExtIes) ProtoMessage() {}

func (x *GbrqoSflowInfoExtIes) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[227]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GbrqoSflowInfoExtIes.ProtoReflect.Descriptor instead.
func (*GbrqoSflowInfoExtIes) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{227}
}

func (x *GbrqoSflowInfoExtIes) GetValue() *emptypb.Empty {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:4497
// @inject_tag: aper:"valueExt"
// {GBRQoSFlowInfo}
type GbrqoSflowInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MaxFlowBitRateDl        *BitRate `protobuf:"bytes,1,opt,name=max_flow_bit_rate_dl,json=maxFlowBitRateDL,proto3" json:"max_flow_bit_rate_dl,omitempty"`
	MaxFlowBitRateUl        *BitRate `protobuf:"bytes,2,opt,name=max_flow_bit_rate_ul,json=maxFlowBitRateUL,proto3" json:"max_flow_bit_rate_ul,omitempty"`
	GuaranteedFlowBitRateDl *BitRate `protobuf:"bytes,3,opt,name=guaranteed_flow_bit_rate_dl,json=guaranteedFlowBitRateDL,proto3" json:"guaranteed_flow_bit_rate_dl,omitempty"`
	GuaranteedFlowBitRateUl *BitRate `protobuf:"bytes,4,opt,name=guaranteed_flow_bit_rate_ul,json=guaranteedFlowBitRateUL,proto3" json:"guaranteed_flow_bit_rate_ul,omitempty"`
	// @inject_tag: aper:"optional,valueExt,valueLB:0,valueUB:0,"
	NotificationControl *NotificationControlGbrqoSflowInfo `protobuf:"varint,5,opt,name=notification_control,json=notificationControl,proto3,enum=xnap.v1.NotificationControlGbrqoSflowInfo,oneof" json:"notification_control,omitempty" aper:"optional,valueExt,valueLB:0,valueUB:0,"`
	// @inject_tag: aper:"optional,"
	MaxPacketLossRateDl *PacketLossRate `protobuf:"bytes,6,opt,name=max_packet_loss_rate_dl,json=maxPacketLossRateDL,proto3,oneof" json:"max_packet_loss_rate_dl,omitempty" aper:"optional,"`
	// @inject_tag: aper:"optional,"
	MaxPacketLossRateUl *PacketLossRate `protobuf:"bytes,7,opt,name=max_packet_loss_rate_ul,json=maxPacketLossRateUL,proto3,oneof" json:"max_packet_loss_rate_ul,omitempty" aper:"optional,"`
	// @inject_tag: aper:"optional,sizeLB:1,"
	IEExtensions []*GbrqoSflowInfoExtIes `protobuf:"bytes,8,rep,name=i_e_extensions,json=iE-Extensions,proto3" json:"i_e_extensions,omitempty" aper:"optional,sizeLB:1,"`
}

func (x *GbrqoSflowInfo) Reset() {
	*x = GbrqoSflowInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[228]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GbrqoSflowInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GbrqoSflowInfo) ProtoMessage() {}

func (x *GbrqoSflowInfo) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[228]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GbrqoSflowInfo.ProtoReflect.Descriptor instead.
func (*GbrqoSflowInfo) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{228}
}

func (x *GbrqoSflowInfo) GetMaxFlowBitRateDl() *BitRate {
	if x != nil {
		return x.MaxFlowBitRateDl
	}
	return nil
}

func (x *GbrqoSflowInfo) GetMaxFlowBitRateUl() *BitRate {
	if x != nil {
		return x.MaxFlowBitRateUl
	}
	return nil
}

func (x *GbrqoSflowInfo) GetGuaranteedFlowBitRateDl() *BitRate {
	if x != nil {
		return x.GuaranteedFlowBitRateDl
	}
	return nil
}

func (x *GbrqoSflowInfo) GetGuaranteedFlowBitRateUl() *BitRate {
	if x != nil {
		return x.GuaranteedFlowBitRateUl
	}
	return nil
}

func (x *GbrqoSflowInfo) GetNotificationControl() NotificationControlGbrqoSflowInfo {
	if x != nil && x.NotificationControl != nil {
		return *x.NotificationControl
	}
	return NotificationControlGbrqoSflowInfo_NOTIFICATION_CONTROL_GBRQO_SFLOW_INFO_NOTIFICATION_REQUESTED
}

func (x *GbrqoSflowInfo) GetMaxPacketLossRateDl() *PacketLossRate {
	if x != nil {
		return x.MaxPacketLossRateDl
	}
	return nil
}

func (x *GbrqoSflowInfo) GetMaxPacketLossRateUl() *PacketLossRate {
	if x != nil {
		return x.MaxPacketLossRateUl
	}
	return nil
}

func (x *GbrqoSflowInfo) GetIEExtensions() []*GbrqoSflowInfoExtIes {
	if x != nil {
		return x.IEExtensions
	}
	return nil
}

// value set from xnap_v1.asn1:4520
// {GlobalgNB-ID-ExtIEs}
type GlobalgNbIDExtIes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *emptypb.Empty `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *GlobalgNbIDExtIes) Reset() {
	*x = GlobalgNbIDExtIes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[229]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GlobalgNbIDExtIes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GlobalgNbIDExtIes) ProtoMessage() {}

func (x *GlobalgNbIDExtIes) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[229]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GlobalgNbIDExtIes.ProtoReflect.Descriptor instead.
func (*GlobalgNbIDExtIes) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{229}
}

func (x *GlobalgNbIDExtIes) GetValue() *emptypb.Empty {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:4514
// @inject_tag: aper:"valueExt"
// {GlobalgNB-ID}
type GlobalgNbID struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlmnId *PlmnIdentity `protobuf:"bytes,1,opt,name=plmn_id,json=plmn-id,proto3" json:"plmn_id,omitempty"`
	GnbId  *GnbIDChoice  `protobuf:"bytes,2,opt,name=gnb_id,json=gnb-id,proto3" json:"gnb_id,omitempty"`
	// @inject_tag: aper:"optional,sizeLB:1,"
	IEExtensions []*GlobalgNbIDExtIes `protobuf:"bytes,3,rep,name=i_e_extensions,json=iE-Extensions,proto3" json:"i_e_extensions,omitempty" aper:"optional,sizeLB:1,"`
}

func (x *GlobalgNbID) Reset() {
	*x = GlobalgNbID{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[230]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GlobalgNbID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GlobalgNbID) ProtoMessage() {}

func (x *GlobalgNbID) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[230]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GlobalgNbID.ProtoReflect.Descriptor instead.
func (*GlobalgNbID) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{230}
}

func (x *GlobalgNbID) GetPlmnId() *PlmnIdentity {
	if x != nil {
		return x.PlmnId
	}
	return nil
}

func (x *GlobalgNbID) GetGnbId() *GnbIDChoice {
	if x != nil {
		return x.GnbId
	}
	return nil
}

func (x *GlobalgNbID) GetIEExtensions() []*GlobalgNbIDExtIes {
	if x != nil {
		return x.IEExtensions
	}
	return nil
}

// value set from xnap_v1.asn1:4530
// {GNB-ID-Choice-ExtIEs}
type GnbIDChoiceExtIes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *emptypb.Empty `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *GnbIDChoiceExtIes) Reset() {
	*x = GnbIDChoiceExtIes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[231]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GnbIDChoiceExtIes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GnbIDChoiceExtIes) ProtoMessage() {}

func (x *GnbIDChoiceExtIes) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[231]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GnbIDChoiceExtIes.ProtoReflect.Descriptor instead.
func (*GnbIDChoiceExtIes) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{231}
}

func (x *GnbIDChoiceExtIes) GetValue() *emptypb.Empty {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:4526
// {GNB-ID-Choice}
type GnbIDChoice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// choice from xnap_v1.asn1:4526
	//
	// Types that are assignable to GnbIdChoice:
	//	*GnbIDChoice_GnbId
	//	*GnbIDChoice_ChoiceExtension
	GnbIdChoice isGnbIDChoice_GnbIdChoice `protobuf_oneof:"gnb_id_choice"`
}

func (x *GnbIDChoice) Reset() {
	*x = GnbIDChoice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[232]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GnbIDChoice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GnbIDChoice) ProtoMessage() {}

func (x *GnbIDChoice) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[232]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GnbIDChoice.ProtoReflect.Descriptor instead.
func (*GnbIDChoice) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{232}
}

func (m *GnbIDChoice) GetGnbIdChoice() isGnbIDChoice_GnbIdChoice {
	if m != nil {
		return m.GnbIdChoice
	}
	return nil
}

func (x *GnbIDChoice) GetGnbId() *asn1.BitString {
	if x, ok := x.GetGnbIdChoice().(*GnbIDChoice_GnbId); ok {
		return x.GnbId
	}
	return nil
}

func (x *GnbIDChoice) GetChoiceExtension() *GnbIDChoiceExtIes {
	if x, ok := x.GetGnbIdChoice().(*GnbIDChoice_ChoiceExtension); ok {
		return x.ChoiceExtension
	}
	return nil
}

type isGnbIDChoice_GnbIdChoice interface {
	isGnbIDChoice_GnbIdChoice()
}

type GnbIDChoice_GnbId struct {
	// @inject_tag: aper:"choiceIdx:1,sizeLB:22,sizeUB:32,"
	GnbId *asn1.BitString `protobuf:"bytes,1,opt,name=gnb_id,json=gnb-ID,proto3,oneof" aper:"choiceIdx:1,sizeLB:22,sizeUB:32,"`
}

type GnbIDChoice_ChoiceExtension struct {
	// @inject_tag: aper:"choiceIdx:2,"
	ChoiceExtension *GnbIDChoiceExtIes `protobuf:"bytes,2,opt,name=choice_extension,json=choice-extension,proto3,oneof" aper:"choiceIdx:2,"`
}

func (*GnbIDChoice_GnbId) isGnbIDChoice_GnbIdChoice() {}

func (*GnbIDChoice_ChoiceExtension) isGnbIDChoice_GnbIdChoice() {}

// value set from xnap_v1.asn1:4541
// {GNB-RadioResourceStatus-ExtIEs}
type GnbRadioResourceStatusExtIes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *emptypb.Empty `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *GnbRadioResourceStatusExtIes) Reset() {
	*x = GnbRadioResourceStatusExtIes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[233]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GnbRadioResourceStatusExtIes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GnbRadioResourceStatusExtIes) ProtoMessage() {}

func (x *GnbRadioResourceStatusExtIes) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[233]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GnbRadioResourceStatusExtIes.ProtoReflect.Descriptor instead.
func (*GnbRadioResourceStatusExtIes) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{233}
}

func (x *GnbRadioResourceStatusExtIes) GetValue() *emptypb.Empty {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:4536
// @inject_tag: aper:"valueExt"
// {GNB-RadioResourceStatus}
type GnbRadioResourceStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SsbAreaRadioResourceStatusList *SsbareaRadioResourceStatusList `protobuf:"bytes,1,opt,name=ssb_area_radio_resource_status_list,json=ssbAreaRadioResourceStatus-List,proto3" json:"ssb_area_radio_resource_status_list,omitempty"`
	// @inject_tag: aper:"optional,sizeLB:1,"
	IEExtensions []*GnbRadioResourceStatusExtIes `protobuf:"bytes,2,rep,name=i_e_extensions,json=iE-Extensions,proto3" json:"i_e_extensions,omitempty" aper:"optional,sizeLB:1,"`
}

func (x *GnbRadioResourceStatus) Reset() {
	*x = GnbRadioResourceStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[234]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GnbRadioResourceStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GnbRadioResourceStatus) ProtoMessage() {}

func (x *GnbRadioResourceStatus) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[234]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GnbRadioResourceStatus.ProtoReflect.Descriptor instead.
func (*GnbRadioResourceStatus) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{234}
}

func (x *GnbRadioResourceStatus) GetSsbAreaRadioResourceStatusList() *SsbareaRadioResourceStatusList {
	if x != nil {
		return x.SsbAreaRadioResourceStatusList
	}
	return nil
}

func (x *GnbRadioResourceStatus) GetIEExtensions() []*GnbRadioResourceStatusExtIes {
	if x != nil {
		return x.IEExtensions
	}
	return nil
}

// value set from xnap_v1.asn1:4552
// {GlobalCell-ID-ExtIEs}
type GlobalCellIDExtIes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *emptypb.Empty `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *GlobalCellIDExtIes) Reset() {
	*x = GlobalCellIDExtIes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[235]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GlobalCellIDExtIes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GlobalCellIDExtIes) ProtoMessage() {}

func (x *GlobalCellIDExtIes) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[235]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GlobalCellIDExtIes.ProtoReflect.Descriptor instead.
func (*GlobalCellIDExtIes) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{235}
}

func (x *GlobalCellIDExtIes) GetValue() *emptypb.Empty {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:4546
// @inject_tag: aper:"valueExt"
// {GlobalCell-ID}
type GlobalCellID struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlmnId   *PlmnIdentity   `protobuf:"bytes,1,opt,name=plmn_id,json=plmn-id,proto3" json:"plmn_id,omitempty"`
	CellType *CellTypeChoice `protobuf:"bytes,2,opt,name=cell_type,json=cell-type,proto3" json:"cell_type,omitempty"`
	// @inject_tag: aper:"optional,sizeLB:1,"
	IEExtensions []*GlobalCellIDExtIes `protobuf:"bytes,3,rep,name=i_e_extensions,json=iE-Extensions,proto3" json:"i_e_extensions,omitempty" aper:"optional,sizeLB:1,"`
}

func (x *GlobalCellID) Reset() {
	*x = GlobalCellID{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[236]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GlobalCellID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GlobalCellID) ProtoMessage() {}

func (x *GlobalCellID) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[236]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GlobalCellID.ProtoReflect.Descriptor instead.
func (*GlobalCellID) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{236}
}

func (x *GlobalCellID) GetPlmnId() *PlmnIdentity {
	if x != nil {
		return x.PlmnId
	}
	return nil
}

func (x *GlobalCellID) GetCellType() *CellTypeChoice {
	if x != nil {
		return x.CellType
	}
	return nil
}

func (x *GlobalCellID) GetIEExtensions() []*GlobalCellIDExtIes {
	if x != nil {
		return x.IEExtensions
	}
	return nil
}

// value set from xnap_v1.asn1:4564
// {GlobaleNB-ID-ExtIEs}
type GlobaleNbIDExtIes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *emptypb.Empty `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *GlobaleNbIDExtIes) Reset() {
	*x = GlobaleNbIDExtIes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[237]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GlobaleNbIDExtIes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GlobaleNbIDExtIes) ProtoMessage() {}

func (x *GlobaleNbIDExtIes) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[237]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GlobaleNbIDExtIes.ProtoReflect.Descriptor instead.
func (*GlobaleNbIDExtIes) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{237}
}

func (x *GlobaleNbIDExtIes) GetValue() *emptypb.Empty {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:4558
// @inject_tag: aper:"valueExt"
// {GlobalngeNB-ID}
type GlobalngeNbID struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlmnId *PlmnIdentity `protobuf:"bytes,1,opt,name=plmn_id,json=plmn-id,proto3" json:"plmn_id,omitempty"`
	EnbId  *EnbIDChoice  `protobuf:"bytes,2,opt,name=enb_id,json=enb-id,proto3" json:"enb_id,omitempty"`
	// @inject_tag: aper:"optional,sizeLB:1,"
	IEExtensions []*GlobaleNbIDExtIes `protobuf:"bytes,3,rep,name=i_e_extensions,json=iE-Extensions,proto3" json:"i_e_extensions,omitempty" aper:"optional,sizeLB:1,"`
}

func (x *GlobalngeNbID) Reset() {
	*x = GlobalngeNbID{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[238]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GlobalngeNbID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GlobalngeNbID) ProtoMessage() {}

func (x *GlobalngeNbID) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[238]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GlobalngeNbID.ProtoReflect.Descriptor instead.
func (*GlobalngeNbID) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{238}
}

func (x *GlobalngeNbID) GetPlmnId() *PlmnIdentity {
	if x != nil {
		return x.PlmnId
	}
	return nil
}

func (x *GlobalngeNbID) GetEnbId() *EnbIDChoice {
	if x != nil {
		return x.EnbId
	}
	return nil
}

func (x *GlobalngeNbID) GetIEExtensions() []*GlobaleNbIDExtIes {
	if x != nil {
		return x.IEExtensions
	}
	return nil
}

// value set from xnap_v1.asn1:4576
// {ENB-ID-Choice-ExtIEs}
type EnbIDChoiceExtIes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *emptypb.Empty `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *EnbIDChoiceExtIes) Reset() {
	*x = EnbIDChoiceExtIes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[239]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnbIDChoiceExtIes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnbIDChoiceExtIes) ProtoMessage() {}

func (x *EnbIDChoiceExtIes) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[239]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnbIDChoiceExtIes.ProtoReflect.Descriptor instead.
func (*EnbIDChoiceExtIes) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{239}
}

func (x *EnbIDChoiceExtIes) GetValue() *emptypb.Empty {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:4570
// {ENB-ID-Choice}
type EnbIDChoice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// choice from xnap_v1.asn1:4570
	//
	// Types that are assignable to EnbIdChoice:
	//	*EnbIDChoice_EnbIdMacro
	//	*EnbIDChoice_EnbIdShortmacro
	//	*EnbIDChoice_EnbIdLongmacro
	//	*EnbIDChoice_ChoiceExtension
	EnbIdChoice isEnbIDChoice_EnbIdChoice `protobuf_oneof:"enb_id_choice"`
}

func (x *EnbIDChoice) Reset() {
	*x = EnbIDChoice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[240]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnbIDChoice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnbIDChoice) ProtoMessage() {}

func (x *EnbIDChoice) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[240]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnbIDChoice.ProtoReflect.Descriptor instead.
func (*EnbIDChoice) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{240}
}

func (m *EnbIDChoice) GetEnbIdChoice() isEnbIDChoice_EnbIdChoice {
	if m != nil {
		return m.EnbIdChoice
	}
	return nil
}

func (x *EnbIDChoice) GetEnbIdMacro() *asn1.BitString {
	if x, ok := x.GetEnbIdChoice().(*EnbIDChoice_EnbIdMacro); ok {
		return x.EnbIdMacro
	}
	return nil
}

func (x *EnbIDChoice) GetEnbIdShortmacro() *asn1.BitString {
	if x, ok := x.GetEnbIdChoice().(*EnbIDChoice_EnbIdShortmacro); ok {
		return x.EnbIdShortmacro
	}
	return nil
}

func (x *EnbIDChoice) GetEnbIdLongmacro() *asn1.BitString {
	if x, ok := x.GetEnbIdChoice().(*EnbIDChoice_EnbIdLongmacro); ok {
		return x.EnbIdLongmacro
	}
	return nil
}

func (x *EnbIDChoice) GetChoiceExtension() *EnbIDChoiceExtIes {
	if x, ok := x.GetEnbIdChoice().(*EnbIDChoice_ChoiceExtension); ok {
		return x.ChoiceExtension
	}
	return nil
}

type isEnbIDChoice_EnbIdChoice interface {
	isEnbIDChoice_EnbIdChoice()
}

type EnbIDChoice_EnbIdMacro struct {
	// @inject_tag: aper:"choiceIdx:1,sizeLB:20,sizeUB:20,"
	EnbIdMacro *asn1.BitString `protobuf:"bytes,1,opt,name=enb_id_macro,json=enb-ID-macro,proto3,oneof" aper:"choiceIdx:1,sizeLB:20,sizeUB:20,"`
}

type EnbIDChoice_EnbIdShortmacro struct {
	// @inject_tag: aper:"choiceIdx:2,sizeLB:18,sizeUB:18,"
	EnbIdShortmacro *asn1.BitString `protobuf:"bytes,2,opt,name=enb_id_shortmacro,json=enb-ID-shortmacro,proto3,oneof" aper:"choiceIdx:2,sizeLB:18,sizeUB:18,"`
}

type EnbIDChoice_EnbIdLongmacro struct {
	// @inject_tag: aper:"choiceIdx:3,sizeLB:21,sizeUB:21,"
	EnbIdLongmacro *asn1.BitString `protobuf:"bytes,3,opt,name=enb_id_longmacro,json=enb-ID-longmacro,proto3,oneof" aper:"choiceIdx:3,sizeLB:21,sizeUB:21,"`
}

type EnbIDChoice_ChoiceExtension struct {
	// @inject_tag: aper:"choiceIdx:4,"
	ChoiceExtension *EnbIDChoiceExtIes `protobuf:"bytes,4,opt,name=choice_extension,json=choice-extension,proto3,oneof" aper:"choiceIdx:4,"`
}

func (*EnbIDChoice_EnbIdMacro) isEnbIDChoice_EnbIdChoice() {}

func (*EnbIDChoice_EnbIdShortmacro) isEnbIDChoice_EnbIdChoice() {}

func (*EnbIDChoice_EnbIdLongmacro) isEnbIDChoice_EnbIdChoice() {}

func (*EnbIDChoice_ChoiceExtension) isEnbIDChoice_EnbIdChoice() {}

// value set from xnap_v1.asn1:4588
// {GlobalNG-RANCell-ID-ExtIEs}
type GlobalNgRAncellIDExtIes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *emptypb.Empty `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *GlobalNgRAncellIDExtIes) Reset() {
	*x = GlobalNgRAncellIDExtIes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[241]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GlobalNgRAncellIDExtIes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GlobalNgRAncellIDExtIes) ProtoMessage() {}

func (x *GlobalNgRAncellIDExtIes) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[241]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GlobalNgRAncellIDExtIes.ProtoReflect.Descriptor instead.
func (*GlobalNgRAncellIDExtIes) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{241}
}

func (x *GlobalNgRAncellIDExtIes) GetValue() *emptypb.Empty {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:4582
// @inject_tag: aper:"valueExt"
// {GlobalNG-RANCell-ID}
type GlobalNgRAncellID struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlmnId      *PlmnIdentity      `protobuf:"bytes,1,opt,name=plmn_id,json=plmn-id,proto3" json:"plmn_id,omitempty"`
	NgRanCellId *NgRAnCellIdentity `protobuf:"bytes,2,opt,name=ng_ran_cell_id,json=ng-RAN-Cell-id,proto3" json:"ng_ran_cell_id,omitempty"`
	// @inject_tag: aper:"optional,sizeLB:1,"
	IEExtensions []*GlobalNgRAncellIDExtIes `protobuf:"bytes,3,rep,name=i_e_extensions,json=iE-Extensions,proto3" json:"i_e_extensions,omitempty" aper:"optional,sizeLB:1,"`
}

func (x *GlobalNgRAncellID) Reset() {
	*x = GlobalNgRAncellID{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[242]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GlobalNgRAncellID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GlobalNgRAncellID) ProtoMessage() {}

func (x *GlobalNgRAncellID) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[242]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GlobalNgRAncellID.ProtoReflect.Descriptor instead.
func (*GlobalNgRAncellID) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{242}
}

func (x *GlobalNgRAncellID) GetPlmnId() *PlmnIdentity {
	if x != nil {
		return x.PlmnId
	}
	return nil
}

func (x *GlobalNgRAncellID) GetNgRanCellId() *NgRAnCellIdentity {
	if x != nil {
		return x.NgRanCellId
	}
	return nil
}

func (x *GlobalNgRAncellID) GetIEExtensions() []*GlobalNgRAncellIDExtIes {
	if x != nil {
		return x.IEExtensions
	}
	return nil
}

// value set from xnap_v1.asn1:4599
// {GlobalNG-RANNode-ID-ExtIEs}
type GlobalNgRAnnodeIDExtIes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *emptypb.Empty `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *GlobalNgRAnnodeIDExtIes) Reset() {
	*x = GlobalNgRAnnodeIDExtIes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[243]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GlobalNgRAnnodeIDExtIes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GlobalNgRAnnodeIDExtIes) ProtoMessage() {}

func (x *GlobalNgRAnnodeIDExtIes) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[243]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GlobalNgRAnnodeIDExtIes.ProtoReflect.Descriptor instead.
func (*GlobalNgRAnnodeIDExtIes) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{243}
}

func (x *GlobalNgRAnnodeIDExtIes) GetValue() *emptypb.Empty {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:4594
// {GlobalNG-RANNode-ID}
type GlobalNgRAnnodeID struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// choice from xnap_v1.asn1:4594
	//
	// Types that are assignable to GlobalNgRannodeId:
	//	*GlobalNgRAnnodeID_GNb
	//	*GlobalNgRAnnodeID_NgENb
	//	*GlobalNgRAnnodeID_ChoiceExtension
	GlobalNgRannodeId isGlobalNgRAnnodeID_GlobalNgRannodeId `protobuf_oneof:"global_ng_rannode_id"`
}

func (x *GlobalNgRAnnodeID) Reset() {
	*x = GlobalNgRAnnodeID{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[244]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GlobalNgRAnnodeID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GlobalNgRAnnodeID) ProtoMessage() {}

func (x *GlobalNgRAnnodeID) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[244]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GlobalNgRAnnodeID.ProtoReflect.Descriptor instead.
func (*GlobalNgRAnnodeID) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{244}
}

func (m *GlobalNgRAnnodeID) GetGlobalNgRannodeId() isGlobalNgRAnnodeID_GlobalNgRannodeId {
	if m != nil {
		return m.GlobalNgRannodeId
	}
	return nil
}

func (x *GlobalNgRAnnodeID) GetGNb() *GlobalgNbID {
	if x, ok := x.GetGlobalNgRannodeId().(*GlobalNgRAnnodeID_GNb); ok {
		return x.GNb
	}
	return nil
}

func (x *GlobalNgRAnnodeID) GetNgENb() *GlobalngeNbID {
	if x, ok := x.GetGlobalNgRannodeId().(*GlobalNgRAnnodeID_NgENb); ok {
		return x.NgENb
	}
	return nil
}

func (x *GlobalNgRAnnodeID) GetChoiceExtension() *GlobalNgRAnnodeIDExtIes {
	if x, ok := x.GetGlobalNgRannodeId().(*GlobalNgRAnnodeID_ChoiceExtension); ok {
		return x.ChoiceExtension
	}
	return nil
}

type isGlobalNgRAnnodeID_GlobalNgRannodeId interface {
	isGlobalNgRAnnodeID_GlobalNgRannodeId()
}

type GlobalNgRAnnodeID_GNb struct {
	// @inject_tag: aper:"choiceIdx:1,valueExt,"
	GNb *GlobalgNbID `protobuf:"bytes,1,opt,name=g_nb,json=gNB,proto3,oneof" aper:"choiceIdx:1,valueExt,"`
}

type GlobalNgRAnnodeID_NgENb struct {
	// @inject_tag: aper:"choiceIdx:2,valueExt,"
	NgENb *GlobalngeNbID `protobuf:"bytes,2,opt,name=ng_e_nb,json=ng-eNB,proto3,oneof" aper:"choiceIdx:2,valueExt,"`
}

type GlobalNgRAnnodeID_ChoiceExtension struct {
	// @inject_tag: aper:"choiceIdx:3,"
	ChoiceExtension *GlobalNgRAnnodeIDExtIes `protobuf:"bytes,3,opt,name=choice_extension,json=choice-extension,proto3,oneof" aper:"choiceIdx:3,"`
}

func (*GlobalNgRAnnodeID_GNb) isGlobalNgRAnnodeID_GlobalNgRannodeId() {}

func (*GlobalNgRAnnodeID_NgENb) isGlobalNgRAnnodeID_GlobalNgRannodeId() {}

func (*GlobalNgRAnnodeID_ChoiceExtension) isGlobalNgRAnnodeID_GlobalNgRannodeId() {}

// range of Integer from xnap_v1.asn1:4604
// {GTP-TEID}
type GtpTEid struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"sizeLB:4,sizeUB:4,"
	Value []byte `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty" aper:"sizeLB:4,sizeUB:4,"`
}

func (x *GtpTEid) Reset() {
	*x = GtpTEid{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[245]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GtpTEid) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GtpTEid) ProtoMessage() {}

func (x *GtpTEid) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[245]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GtpTEid.ProtoReflect.Descriptor instead.
func (*GtpTEid) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{245}
}

func (x *GtpTEid) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

// value set from xnap_v1.asn1:4614
// {GTPtunnelTransportLayerInformation-ExtIEs}
type GtptunnelTransportLayerInformationExtIes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *emptypb.Empty `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *GtptunnelTransportLayerInformationExtIes) Reset() {
	*x = GtptunnelTransportLayerInformationExtIes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[246]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GtptunnelTransportLayerInformationExtIes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GtptunnelTransportLayerInformationExtIes) ProtoMessage() {}

func (x *GtptunnelTransportLayerInformationExtIes) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[246]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GtptunnelTransportLayerInformationExtIes.ProtoReflect.Descriptor instead.
func (*GtptunnelTransportLayerInformationExtIes) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{246}
}

func (x *GtptunnelTransportLayerInformationExtIes) GetValue() *emptypb.Empty {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:4608
// @inject_tag: aper:"valueExt"
// {GTPtunnelTransportLayerInformation}
type GtptunnelTransportLayerInformation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TnlAddress *TransportLayerAddress `protobuf:"bytes,1,opt,name=tnl_address,json=tnl-address,proto3" json:"tnl_address,omitempty"`
	GtpTeid    *GtpTEid               `protobuf:"bytes,2,opt,name=gtp_teid,json=gtp-teid,proto3" json:"gtp_teid,omitempty"`
	// @inject_tag: aper:"optional,sizeLB:1,"
	IEExtensions []*GtptunnelTransportLayerInformationExtIes `protobuf:"bytes,3,rep,name=i_e_extensions,json=iE-Extensions,proto3" json:"i_e_extensions,omitempty" aper:"optional,sizeLB:1,"`
}

func (x *GtptunnelTransportLayerInformation) Reset() {
	*x = GtptunnelTransportLayerInformation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[247]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GtptunnelTransportLayerInformation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GtptunnelTransportLayerInformation) ProtoMessage() {}

func (x *GtptunnelTransportLayerInformation) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[247]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GtptunnelTransportLayerInformation.ProtoReflect.Descriptor instead.
func (*GtptunnelTransportLayerInformation) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{247}
}

func (x *GtptunnelTransportLayerInformation) GetTnlAddress() *TransportLayerAddress {
	if x != nil {
		return x.TnlAddress
	}
	return nil
}

func (x *GtptunnelTransportLayerInformation) GetGtpTeid() *GtpTEid {
	if x != nil {
		return x.GtpTeid
	}
	return nil
}

func (x *GtptunnelTransportLayerInformation) GetIEExtensions() []*GtptunnelTransportLayerInformationExtIes {
	if x != nil {
		return x.IEExtensions
	}
	return nil
}

// value set from xnap_v1.asn1:4628
// {GUAMI-ExtIEs}
type GuamiExtIes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *emptypb.Empty `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *GuamiExtIes) Reset() {
	*x = GuamiExtIes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[248]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GuamiExtIes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GuamiExtIes) ProtoMessage() {}

func (x *GuamiExtIes) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[248]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GuamiExtIes.ProtoReflect.Descriptor instead.
func (*GuamiExtIes) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{248}
}

func (x *GuamiExtIes) GetValue() *emptypb.Empty {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:4620
// @inject_tag: aper:"valueExt"
// {GUAMI}
type Guami struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlmnId *PlmnIdentity `protobuf:"bytes,1,opt,name=plmn_id,json=plmn-ID,proto3" json:"plmn_id,omitempty"`
	// @inject_tag: aper:"sizeLB:8,sizeUB:8,"
	AmfRegionId *asn1.BitString `protobuf:"bytes,2,opt,name=amf_region_id,json=amf-region-id,proto3" json:"amf_region_id,omitempty" aper:"sizeLB:8,sizeUB:8,"`
	// @inject_tag: aper:"sizeLB:10,sizeUB:10,"
	AmfSetId *asn1.BitString `protobuf:"bytes,3,opt,name=amf_set_id,json=amf-set-id,proto3" json:"amf_set_id,omitempty" aper:"sizeLB:10,sizeUB:10,"`
	// @inject_tag: aper:"sizeLB:6,sizeUB:6,"
	AmfPointer *asn1.BitString `protobuf:"bytes,4,opt,name=amf_pointer,json=amf-pointer,proto3" json:"amf_pointer,omitempty" aper:"sizeLB:6,sizeUB:6,"`
	// @inject_tag: aper:"optional,sizeLB:1,"
	IEExtensions []*GuamiExtIes `protobuf:"bytes,5,rep,name=i_e_extensions,json=iE-Extensions,proto3" json:"i_e_extensions,omitempty" aper:"optional,sizeLB:1,"`
}

func (x *Guami) Reset() {
	*x = Guami{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[249]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Guami) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Guami) ProtoMessage() {}

func (x *Guami) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[249]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Guami.ProtoReflect.Descriptor instead.
func (*Guami) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{249}
}

func (x *Guami) GetPlmnId() *PlmnIdentity {
	if x != nil {
		return x.PlmnId
	}
	return nil
}

func (x *Guami) GetAmfRegionId() *asn1.BitString {
	if x != nil {
		return x.AmfRegionId
	}
	return nil
}

func (x *Guami) GetAmfSetId() *asn1.BitString {
	if x != nil {
		return x.AmfSetId
	}
	return nil
}

func (x *Guami) GetAmfPointer() *asn1.BitString {
	if x != nil {
		return x.AmfPointer
	}
	return nil
}

func (x *Guami) GetIEExtensions() []*GuamiExtIes {
	if x != nil {
		return x.IEExtensions
	}
	return nil
}

// range of Integer from xnap_v1.asn1:4642
// {Hysteresis}
type Hysteresis struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"valueLB:0,valueUB:30,"
	Value int32 `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty" aper:"valueLB:0,valueUB:30,"`
}

func (x *Hysteresis) Reset() {
	*x = Hysteresis{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[250]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Hysteresis) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Hysteresis) ProtoMessage() {}

func (x *Hysteresis) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[250]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Hysteresis.ProtoReflect.Descriptor instead.
func (*Hysteresis) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{250}
}

func (x *Hysteresis) GetValue() int32 {
	if x != nil {
		return x.Value
	}
	return 0
}

// range of Integer from xnap_v1.asn1:4649
// {ImmediateMDT-EUTRA}
type ImmediateMdtEUtra struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value []byte `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *ImmediateMdtEUtra) Reset() {
	*x = ImmediateMdtEUtra{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[251]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImmediateMdtEUtra) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImmediateMdtEUtra) ProtoMessage() {}

func (x *ImmediateMdtEUtra) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[251]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImmediateMdtEUtra.ProtoReflect.Descriptor instead.
func (*ImmediateMdtEUtra) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{251}
}

func (x *ImmediateMdtEUtra) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

// value set from xnap_v1.asn1:4667
// {ImmediateMDT-NR-ExtIEs}
type ImmediateMdtNRExtIes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *emptypb.Empty `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *ImmediateMdtNRExtIes) Reset() {
	*x = ImmediateMdtNRExtIes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[252]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImmediateMdtNRExtIes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImmediateMdtNRExtIes) ProtoMessage() {}

func (x *ImmediateMdtNRExtIes) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[252]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImmediateMdtNRExtIes.ProtoReflect.Descriptor instead.
func (*ImmediateMdtNRExtIes) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{252}
}

func (x *ImmediateMdtNRExtIes) GetValue() *emptypb.Empty {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:4653
// @inject_tag: aper:"valueExt"
// {ImmediateMDT-NR}
type ImmediateMdtNR struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MeasurementsToActivate *MeasurementsToActivate `protobuf:"bytes,1,opt,name=measurements_to_activate,json=measurementsToActivate,proto3" json:"measurements_to_activate,omitempty"`
	// @inject_tag: aper:"optional,valueExt,"
	M1Configuration *M1Configuration `protobuf:"bytes,2,opt,name=m1_configuration,json=m1Configuration,proto3,oneof" json:"m1_configuration,omitempty" aper:"optional,valueExt,"`
	// @inject_tag: aper:"optional,valueExt,"
	M4Configuration *M4Configuration `protobuf:"bytes,3,opt,name=m4_configuration,json=m4Configuration,proto3,oneof" json:"m4_configuration,omitempty" aper:"optional,valueExt,"`
	// @inject_tag: aper:"optional,valueExt,"
	M5Configuration *M5Configuration `protobuf:"bytes,4,opt,name=m5_configuration,json=m5Configuration,proto3,oneof" json:"m5_configuration,omitempty" aper:"optional,valueExt,"`
	// @inject_tag: aper:"optional,"
	MDtLocationInfo *MdtLocationInfo `protobuf:"bytes,5,opt,name=m_dt_location_info,json=mDT-Location-Info,proto3,oneof" json:"m_dt_location_info,omitempty" aper:"optional,"`
	// @inject_tag: aper:"optional,valueExt,"
	M6Configuration *M6Configuration `protobuf:"bytes,6,opt,name=m6_configuration,json=m6Configuration,proto3,oneof" json:"m6_configuration,omitempty" aper:"optional,valueExt,"`
	// @inject_tag: aper:"optional,valueExt,"
	M7Configuration *M7Configuration `protobuf:"bytes,7,opt,name=m7_configuration,json=m7Configuration,proto3,oneof" json:"m7_configuration,omitempty" aper:"optional,valueExt,"`
	// @inject_tag: aper:"optional,valueExt,"
	BluetoothMeasurementConfiguration *BluetoothMeasurementConfiguration `protobuf:"bytes,8,opt,name=bluetooth_measurement_configuration,json=bluetoothMeasurementConfiguration,proto3,oneof" json:"bluetooth_measurement_configuration,omitempty" aper:"optional,valueExt,"`
	// @inject_tag: aper:"optional,valueExt,"
	WLanmeasurementConfiguration *WlanmeasurementConfiguration `protobuf:"bytes,9,opt,name=w_lanmeasurement_configuration,json=wLANMeasurementConfiguration,proto3,oneof" json:"w_lanmeasurement_configuration,omitempty" aper:"optional,valueExt,"`
	// @inject_tag: aper:"optional,valueExt,"
	SensorMeasurementConfiguration *SensorMeasurementConfiguration `protobuf:"bytes,10,opt,name=sensor_measurement_configuration,json=sensorMeasurementConfiguration,proto3,oneof" json:"sensor_measurement_configuration,omitempty" aper:"optional,valueExt,"`
	// @inject_tag: aper:"optional,sizeLB:1,"
	IEExtensions []*ImmediateMdtNRExtIes `protobuf:"bytes,11,rep,name=i_e_extensions,json=iE-Extensions,proto3" json:"i_e_extensions,omitempty" aper:"optional,sizeLB:1,"`
}

func (x *ImmediateMdtNR) Reset() {
	*x = ImmediateMdtNR{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[253]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImmediateMdtNR) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImmediateMdtNR) ProtoMessage() {}

func (x *ImmediateMdtNR) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[253]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImmediateMdtNR.ProtoReflect.Descriptor instead.
func (*ImmediateMdtNR) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{253}
}

func (x *ImmediateMdtNR) GetMeasurementsToActivate() *MeasurementsToActivate {
	if x != nil {
		return x.MeasurementsToActivate
	}
	return nil
}

func (x *ImmediateMdtNR) GetM1Configuration() *M1Configuration {
	if x != nil {
		return x.M1Configuration
	}
	return nil
}

func (x *ImmediateMdtNR) GetM4Configuration() *M4Configuration {
	if x != nil {
		return x.M4Configuration
	}
	return nil
}

func (x *ImmediateMdtNR) GetM5Configuration() *M5Configuration {
	if x != nil {
		return x.M5Configuration
	}
	return nil
}

func (x *ImmediateMdtNR) GetMDtLocationInfo() *MdtLocationInfo {
	if x != nil {
		return x.MDtLocationInfo
	}
	return nil
}

func (x *ImmediateMdtNR) GetM6Configuration() *M6Configuration {
	if x != nil {
		return x.M6Configuration
	}
	return nil
}

func (x *ImmediateMdtNR) GetM7Configuration() *M7Configuration {
	if x != nil {
		return x.M7Configuration
	}
	return nil
}

func (x *ImmediateMdtNR) GetBluetoothMeasurementConfiguration() *BluetoothMeasurementConfiguration {
	if x != nil {
		return x.BluetoothMeasurementConfiguration
	}
	return nil
}

func (x *ImmediateMdtNR) GetWLanmeasurementConfiguration() *WlanmeasurementConfiguration {
	if x != nil {
		return x.WLanmeasurementConfiguration
	}
	return nil
}

func (x *ImmediateMdtNR) GetSensorMeasurementConfiguration() *SensorMeasurementConfiguration {
	if x != nil {
		return x.SensorMeasurementConfiguration
	}
	return nil
}

func (x *ImmediateMdtNR) GetIEExtensions() []*ImmediateMdtNRExtIes {
	if x != nil {
		return x.IEExtensions
	}
	return nil
}

// value set from xnap_v1.asn1:4677
// {InitiatingCondition-FailureIndication-ExtIEs}
type InitiatingConditionFailureIndicationExtIes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *emptypb.Empty `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *InitiatingConditionFailureIndicationExtIes) Reset() {
	*x = InitiatingConditionFailureIndicationExtIes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[254]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InitiatingConditionFailureIndicationExtIes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InitiatingConditionFailureIndicationExtIes) ProtoMessage() {}

func (x *InitiatingConditionFailureIndicationExtIes) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[254]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InitiatingConditionFailureIndicationExtIes.ProtoReflect.Descriptor instead.
func (*InitiatingConditionFailureIndicationExtIes) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{254}
}

func (x *InitiatingConditionFailureIndicationExtIes) GetValue() *emptypb.Empty {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:4672
// {InitiatingCondition-FailureIndication}
type InitiatingConditionFailureIndication struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// choice from xnap_v1.asn1:4672
	//
	// Types that are assignable to InitiatingConditionFailureIndication:
	//	*InitiatingConditionFailureIndication_RRcreestab
	//	*InitiatingConditionFailureIndication_RRcsetup
	//	*InitiatingConditionFailureIndication_ChoiceExtension
	InitiatingConditionFailureIndication isInitiatingConditionFailureIndication_InitiatingConditionFailureIndication `protobuf_oneof:"initiating_condition_failure_indication"`
}

func (x *InitiatingConditionFailureIndication) Reset() {
	*x = InitiatingConditionFailureIndication{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[255]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InitiatingConditionFailureIndication) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InitiatingConditionFailureIndication) ProtoMessage() {}

func (x *InitiatingConditionFailureIndication) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[255]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InitiatingConditionFailureIndication.ProtoReflect.Descriptor instead.
func (*InitiatingConditionFailureIndication) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{255}
}

func (m *InitiatingConditionFailureIndication) GetInitiatingConditionFailureIndication() isInitiatingConditionFailureIndication_InitiatingConditionFailureIndication {
	if m != nil {
		return m.InitiatingConditionFailureIndication
	}
	return nil
}

func (x *InitiatingConditionFailureIndication) GetRRcreestab() *Rrcreestabinitiated {
	if x, ok := x.GetInitiatingConditionFailureIndication().(*InitiatingConditionFailureIndication_RRcreestab); ok {
		return x.RRcreestab
	}
	return nil
}

func (x *InitiatingConditionFailureIndication) GetRRcsetup() *Rrcsetupinitiated {
	if x, ok := x.GetInitiatingConditionFailureIndication().(*InitiatingConditionFailureIndication_RRcsetup); ok {
		return x.RRcsetup
	}
	return nil
}

func (x *InitiatingConditionFailureIndication) GetChoiceExtension() *InitiatingConditionFailureIndicationExtIes {
	if x, ok := x.GetInitiatingConditionFailureIndication().(*InitiatingConditionFailureIndication_ChoiceExtension); ok {
		return x.ChoiceExtension
	}
	return nil
}

type isInitiatingConditionFailureIndication_InitiatingConditionFailureIndication interface {
	isInitiatingConditionFailureIndication_InitiatingConditionFailureIndication()
}

type InitiatingConditionFailureIndication_RRcreestab struct {
	// @inject_tag: aper:"choiceIdx:1,valueExt,"
	RRcreestab *Rrcreestabinitiated `protobuf:"bytes,1,opt,name=r_rcreestab,json=rRCReestab,proto3,oneof" aper:"choiceIdx:1,valueExt,"`
}

type InitiatingConditionFailureIndication_RRcsetup struct {
	// @inject_tag: aper:"choiceIdx:2,valueExt,"
	RRcsetup *Rrcsetupinitiated `protobuf:"bytes,2,opt,name=r_rcsetup,json=rRCSetup,proto3,oneof" aper:"choiceIdx:2,valueExt,"`
}

type InitiatingConditionFailureIndication_ChoiceExtension struct {
	// @inject_tag: aper:"choiceIdx:3,"
	ChoiceExtension *InitiatingConditionFailureIndicationExtIes `protobuf:"bytes,3,opt,name=choice_extension,json=choice-extension,proto3,oneof" aper:"choiceIdx:3,"`
}

func (*InitiatingConditionFailureIndication_RRcreestab) isInitiatingConditionFailureIndication_InitiatingConditionFailureIndication() {
}

func (*InitiatingConditionFailureIndication_RRcsetup) isInitiatingConditionFailureIndication_InitiatingConditionFailureIndication() {
}

func (*InitiatingConditionFailureIndication_ChoiceExtension) isInitiatingConditionFailureIndication_InitiatingConditionFailureIndication() {
}

// value set from xnap_v1.asn1:4690
// {IntendedTDD-DL-ULConfiguration-NR-ExtIEs}
type IntendedTddDLULconfigurationNRExtIes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *emptypb.Empty `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *IntendedTddDLULconfigurationNRExtIes) Reset() {
	*x = IntendedTddDLULconfigurationNRExtIes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[256]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IntendedTddDLULconfigurationNRExtIes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IntendedTddDLULconfigurationNRExtIes) ProtoMessage() {}

func (x *IntendedTddDLULconfigurationNRExtIes) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[256]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IntendedTddDLULconfigurationNRExtIes.ProtoReflect.Descriptor instead.
func (*IntendedTddDLULconfigurationNRExtIes) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{256}
}

func (x *IntendedTddDLULconfigurationNRExtIes) GetValue() *emptypb.Empty {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:4682
// @inject_tag: aper:"valueExt"
// {IntendedTDD-DL-ULConfiguration-NR}
type IntendedTddDLULconfigurationNR struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"valueExt,valueLB:0,valueUB:3,"
	Nrscs Nrscs `protobuf:"varint,1,opt,name=nrscs,proto3,enum=xnap.v1.Nrscs" json:"nrscs,omitempty" aper:"valueExt,valueLB:0,valueUB:3,"`
	// @inject_tag: aper:"valueExt,valueLB:0,valueUB:1,"
	NrCyclicPrefix NrcyclicPrefix `protobuf:"varint,2,opt,name=nr_cyclic_prefix,json=nrCyclicPrefix,proto3,enum=xnap.v1.NrcyclicPrefix" json:"nr_cyclic_prefix,omitempty" aper:"valueExt,valueLB:0,valueUB:1,"`
	// @inject_tag: aper:"valueExt,valueLB:0,valueUB:17,"
	NrDlUltransmissionPeriodicity NrdlULtransmissionPeriodicity `protobuf:"varint,3,opt,name=nr_dl_ultransmission_periodicity,json=nrDL-ULTransmissionPeriodicity,proto3,enum=xnap.v1.NrdlULtransmissionPeriodicity" json:"nr_dl_ultransmission_periodicity,omitempty" aper:"valueExt,valueLB:0,valueUB:17,"`
	SlotConfigurationList         *SlotConfigurationList        `protobuf:"bytes,4,opt,name=slot_configuration_list,json=slotConfiguration-List,proto3" json:"slot_configuration_list,omitempty"`
	// @inject_tag: aper:"optional,sizeLB:1,"
	IEExtensions []*IntendedTddDLULconfigurationNRExtIes `protobuf:"bytes,5,rep,name=i_e_extensions,json=iE-Extensions,proto3" json:"i_e_extensions,omitempty" aper:"optional,sizeLB:1,"`
}

func (x *IntendedTddDLULconfigurationNR) Reset() {
	*x = IntendedTddDLULconfigurationNR{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[257]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IntendedTddDLULconfigurationNR) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IntendedTddDLULconfigurationNR) ProtoMessage() {}

func (x *IntendedTddDLULconfigurationNR) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[257]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IntendedTddDLULconfigurationNR.ProtoReflect.Descriptor instead.
func (*IntendedTddDLULconfigurationNR) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{257}
}

func (x *IntendedTddDLULconfigurationNR) GetNrscs() Nrscs {
	if x != nil {
		return x.Nrscs
	}
	return Nrscs_NRSCS_SCS15
}

func (x *IntendedTddDLULconfigurationNR) GetNrCyclicPrefix() NrcyclicPrefix {
	if x != nil {
		return x.NrCyclicPrefix
	}
	return NrcyclicPrefix_NRCYCLIC_PREFIX_NORMAL
}

func (x *IntendedTddDLULconfigurationNR) GetNrDlUltransmissionPeriodicity() NrdlULtransmissionPeriodicity {
	if x != nil {
		return x.NrDlUltransmissionPeriodicity
	}
	return NrdlULtransmissionPeriodicity_NRDL_ULTRANSMISSION_PERIODICITY_MS0P5
}

func (x *IntendedTddDLULconfigurationNR) GetSlotConfigurationList() *SlotConfigurationList {
	if x != nil {
		return x.SlotConfigurationList
	}
	return nil
}

func (x *IntendedTddDLULconfigurationNR) GetIEExtensions() []*IntendedTddDLULconfigurationNRExtIes {
	if x != nil {
		return x.IEExtensions
	}
	return nil
}

// range of Integer from xnap_v1.asn1:4694
// {InterfaceInstanceIndication}
type InterfaceInstanceIndication struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"valueExt,valueLB:0,valueUB:255,"
	Value int32 `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty" aper:"valueExt,valueLB:0,valueUB:255,"`
}

func (x *InterfaceInstanceIndication) Reset() {
	*x = InterfaceInstanceIndication{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[258]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InterfaceInstanceIndication) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InterfaceInstanceIndication) ProtoMessage() {}

func (x *InterfaceInstanceIndication) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[258]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InterfaceInstanceIndication.ProtoReflect.Descriptor instead.
func (*InterfaceInstanceIndication) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{258}
}

func (x *InterfaceInstanceIndication) GetValue() int32 {
	if x != nil {
		return x.Value
	}
	return 0
}

// range of Integer from xnap_v1.asn1:4696
// {InterfacesToTrace}
type InterfacesToTrace struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"sizeLB:8,sizeUB:8,"
	Value *asn1.BitString `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty" aper:"sizeLB:8,sizeUB:8,"`
}

func (x *InterfacesToTrace) Reset() {
	*x = InterfacesToTrace{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[259]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InterfacesToTrace) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InterfacesToTrace) ProtoMessage() {}

func (x *InterfacesToTrace) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[259]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InterfacesToTrace.ProtoReflect.Descriptor instead.
func (*InterfacesToTrace) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{259}
}

func (x *InterfacesToTrace) GetValue() *asn1.BitString {
	if x != nil {
		return x.Value
	}
	return nil
}

// value set from xnap_v1.asn1:4705
// {I-RNTI-ExtIEs}
type IRNtiExtIes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *emptypb.Empty `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *IRNtiExtIes) Reset() {
	*x = IRNtiExtIes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[260]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IRNtiExtIes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IRNtiExtIes) ProtoMessage() {}

func (x *IRNtiExtIes) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[260]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IRNtiExtIes.ProtoReflect.Descriptor instead.
func (*IRNtiExtIes) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{260}
}

func (x *IRNtiExtIes) GetValue() *emptypb.Empty {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:4700
// {I-RNTI}
type IRNti struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// choice from xnap_v1.asn1:4700
	//
	// Types that are assignable to IRnti:
	//	*IRNti_IRntiFull
	//	*IRNti_IRntiShort
	//	*IRNti_ChoiceExtension
	IRnti isIRNti_IRnti `protobuf_oneof:"i_rnti"`
}

func (x *IRNti) Reset() {
	*x = IRNti{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[261]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IRNti) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IRNti) ProtoMessage() {}

func (x *IRNti) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[261]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IRNti.ProtoReflect.Descriptor instead.
func (*IRNti) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{261}
}

func (m *IRNti) GetIRnti() isIRNti_IRnti {
	if m != nil {
		return m.IRnti
	}
	return nil
}

func (x *IRNti) GetIRntiFull() *asn1.BitString {
	if x, ok := x.GetIRnti().(*IRNti_IRntiFull); ok {
		return x.IRntiFull
	}
	return nil
}

func (x *IRNti) GetIRntiShort() *asn1.BitString {
	if x, ok := x.GetIRnti().(*IRNti_IRntiShort); ok {
		return x.IRntiShort
	}
	return nil
}

func (x *IRNti) GetChoiceExtension() *IRNtiExtIes {
	if x, ok := x.GetIRnti().(*IRNti_ChoiceExtension); ok {
		return x.ChoiceExtension
	}
	return nil
}

type isIRNti_IRnti interface {
	isIRNti_IRnti()
}

type IRNti_IRntiFull struct {
	// @inject_tag: aper:"choiceIdx:1,sizeLB:40,sizeUB:40,"
	IRntiFull *asn1.BitString `protobuf:"bytes,1,opt,name=i_rnti_full,json=i-RNTI-full,proto3,oneof" aper:"choiceIdx:1,sizeLB:40,sizeUB:40,"`
}

type IRNti_IRntiShort struct {
	// @inject_tag: aper:"choiceIdx:2,sizeLB:24,sizeUB:24,"
	IRntiShort *asn1.BitString `protobuf:"bytes,2,opt,name=i_rnti_short,json=i-RNTI-short,proto3,oneof" aper:"choiceIdx:2,sizeLB:24,sizeUB:24,"`
}

type IRNti_ChoiceExtension struct {
	// @inject_tag: aper:"choiceIdx:3,"
	ChoiceExtension *IRNtiExtIes `protobuf:"bytes,3,opt,name=choice_extension,json=choice-extension,proto3,oneof" aper:"choiceIdx:3,"`
}

func (*IRNti_IRntiFull) isIRNti_IRnti() {}

func (*IRNti_IRntiShort) isIRNti_IRnti() {}

func (*IRNti_ChoiceExtension) isIRNti_IRnti() {}

// value set from xnap_v1.asn1:4727
// {LastVisitedCell-Item-ExtIEs}
type LastVisitedCellItemExtIes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *emptypb.Empty `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *LastVisitedCellItemExtIes) Reset() {
	*x = LastVisitedCellItemExtIes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[262]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LastVisitedCellItemExtIes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LastVisitedCellItemExtIes) ProtoMessage() {}

func (x *LastVisitedCellItemExtIes) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[262]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LastVisitedCellItemExtIes.ProtoReflect.Descriptor instead.
func (*LastVisitedCellItemExtIes) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{262}
}

func (x *LastVisitedCellItemExtIes) GetValue() *emptypb.Empty {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:4720
// {LastVisitedCell-Item}
type LastVisitedCellItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// choice from xnap_v1.asn1:4720
	//
	// Types that are assignable to LastVisitedCellItem:
	//	*LastVisitedCellItem_NGRanCell
	//	*LastVisitedCellItem_EUtranCell
	//	*LastVisitedCellItem_UTranCell
	//	*LastVisitedCellItem_GEranCell
	//	*LastVisitedCellItem_ChoiceExtension
	LastVisitedCellItem isLastVisitedCellItem_LastVisitedCellItem `protobuf_oneof:"last_visited_cell_item"`
}

func (x *LastVisitedCellItem) Reset() {
	*x = LastVisitedCellItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[263]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LastVisitedCellItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LastVisitedCellItem) ProtoMessage() {}

func (x *LastVisitedCellItem) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[263]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LastVisitedCellItem.ProtoReflect.Descriptor instead.
func (*LastVisitedCellItem) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{263}
}

func (m *LastVisitedCellItem) GetLastVisitedCellItem() isLastVisitedCellItem_LastVisitedCellItem {
	if m != nil {
		return m.LastVisitedCellItem
	}
	return nil
}

func (x *LastVisitedCellItem) GetNGRanCell() *LastVisitedNgrancellInformation {
	if x, ok := x.GetLastVisitedCellItem().(*LastVisitedCellItem_NGRanCell); ok {
		return x.NGRanCell
	}
	return nil
}

func (x *LastVisitedCellItem) GetEUtranCell() *LastVisitedEutrancellInformation {
	if x, ok := x.GetLastVisitedCellItem().(*LastVisitedCellItem_EUtranCell); ok {
		return x.EUtranCell
	}
	return nil
}

func (x *LastVisitedCellItem) GetUTranCell() *LastVisitedUtrancellInformation {
	if x, ok := x.GetLastVisitedCellItem().(*LastVisitedCellItem_UTranCell); ok {
		return x.UTranCell
	}
	return nil
}

func (x *LastVisitedCellItem) GetGEranCell() *LastVisitedGerancellInformation {
	if x, ok := x.GetLastVisitedCellItem().(*LastVisitedCellItem_GEranCell); ok {
		return x.GEranCell
	}
	return nil
}

func (x *LastVisitedCellItem) GetChoiceExtension() *LastVisitedCellItemExtIes {
	if x, ok := x.GetLastVisitedCellItem().(*LastVisitedCellItem_ChoiceExtension); ok {
		return x.ChoiceExtension
	}
	return nil
}

type isLastVisitedCellItem_LastVisitedCellItem interface {
	isLastVisitedCellItem_LastVisitedCellItem()
}

type LastVisitedCellItem_NGRanCell struct {
	// @inject_tag: aper:"choiceIdx:1,"
	NGRanCell *LastVisitedNgrancellInformation `protobuf:"bytes,1,opt,name=n_g_ran_cell,json=nG-RAN-Cell,proto3,oneof" aper:"choiceIdx:1,"`
}

type LastVisitedCellItem_EUtranCell struct {
	// @inject_tag: aper:"choiceIdx:2,"
	EUtranCell *LastVisitedEutrancellInformation `protobuf:"bytes,2,opt,name=e_utran_cell,json=e-UTRAN-Cell,proto3,oneof" aper:"choiceIdx:2,"`
}

type LastVisitedCellItem_UTranCell struct {
	// @inject_tag: aper:"choiceIdx:3,"
	UTranCell *LastVisitedUtrancellInformation `protobuf:"bytes,3,opt,name=u_tran_cell,json=uTRAN-Cell,proto3,oneof" aper:"choiceIdx:3,"`
}

type LastVisitedCellItem_GEranCell struct {
	// @inject_tag: aper:"choiceIdx:4,"
	GEranCell *LastVisitedGerancellInformation `protobuf:"bytes,4,opt,name=g_eran_cell,json=gERAN-Cell,proto3,oneof" aper:"choiceIdx:4,"`
}

type LastVisitedCellItem_ChoiceExtension struct {
	// @inject_tag: aper:"choiceIdx:5,"
	ChoiceExtension *LastVisitedCellItemExtIes `protobuf:"bytes,5,opt,name=choice_extension,json=choice-extension,proto3,oneof" aper:"choiceIdx:5,"`
}

func (*LastVisitedCellItem_NGRanCell) isLastVisitedCellItem_LastVisitedCellItem() {}

func (*LastVisitedCellItem_EUtranCell) isLastVisitedCellItem_LastVisitedCellItem() {}

func (*LastVisitedCellItem_UTranCell) isLastVisitedCellItem_LastVisitedCellItem() {}

func (*LastVisitedCellItem_GEranCell) isLastVisitedCellItem_LastVisitedCellItem() {}

func (*LastVisitedCellItem_ChoiceExtension) isLastVisitedCellItem_LastVisitedCellItem() {}

// range of Integer from xnap_v1.asn1:4731
// {LastVisitedEUTRANCellInformation}
type LastVisitedEutrancellInformation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value []byte `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *LastVisitedEutrancellInformation) Reset() {
	*x = LastVisitedEutrancellInformation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[264]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LastVisitedEutrancellInformation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LastVisitedEutrancellInformation) ProtoMessage() {}

func (x *LastVisitedEutrancellInformation) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[264]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LastVisitedEutrancellInformation.ProtoReflect.Descriptor instead.
func (*LastVisitedEutrancellInformation) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{264}
}

func (x *LastVisitedEutrancellInformation) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

// range of Integer from xnap_v1.asn1:4733
// {LastVisitedGERANCellInformation}
type LastVisitedGerancellInformation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value []byte `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *LastVisitedGerancellInformation) Reset() {
	*x = LastVisitedGerancellInformation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[265]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LastVisitedGerancellInformation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LastVisitedGerancellInformation) ProtoMessage() {}

func (x *LastVisitedGerancellInformation) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[265]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LastVisitedGerancellInformation.ProtoReflect.Descriptor instead.
func (*LastVisitedGerancellInformation) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{265}
}

func (x *LastVisitedGerancellInformation) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

// range of Integer from xnap_v1.asn1:4735
// {LastVisitedNGRANCellInformation}
type LastVisitedNgrancellInformation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value []byte `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *LastVisitedNgrancellInformation) Reset() {
	*x = LastVisitedNgrancellInformation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[266]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LastVisitedNgrancellInformation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LastVisitedNgrancellInformation) ProtoMessage() {}

func (x *LastVisitedNgrancellInformation) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[266]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LastVisitedNgrancellInformation.ProtoReflect.Descriptor instead.
func (*LastVisitedNgrancellInformation) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{266}
}

func (x *LastVisitedNgrancellInformation) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

// range of Integer from xnap_v1.asn1:4737
// {LastVisitedUTRANCellInformation}
type LastVisitedUtrancellInformation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value []byte `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *LastVisitedUtrancellInformation) Reset() {
	*x = LastVisitedUtrancellInformation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[267]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LastVisitedUtrancellInformation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LastVisitedUtrancellInformation) ProtoMessage() {}

func (x *LastVisitedUtrancellInformation) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[267]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LastVisitedUtrancellInformation.ProtoReflect.Descriptor instead.
func (*LastVisitedUtrancellInformation) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{267}
}

func (x *LastVisitedUtrancellInformation) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

// range of Integer from xnap_v1.asn1:4740
// {LCID}
type Lcid struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"valueExt,valueLB:1,valueUB:32,"
	Value int32 `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty" aper:"valueExt,valueLB:1,valueUB:32,"`
}

func (x *Lcid) Reset() {
	*x = Lcid{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[268]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Lcid) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Lcid) ProtoMessage() {}

func (x *Lcid) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[268]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Lcid.ProtoReflect.Descriptor instead.
func (*Lcid) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{268}
}

func (x *Lcid) GetValue() int32 {
	if x != nil {
		return x.Value
	}
	return 0
}

// sequence from xnap_v1.asn1:4747
// {ListOfCells}
type ListOfCells struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"valueExt,sizeLB:1,sizeUB:256,"
	Value []*CellsinAoIItem `protobuf:"bytes,1,rep,name=value,proto3" json:"value,omitempty" aper:"valueExt,sizeLB:1,sizeUB:256,"`
}

func (x *ListOfCells) Reset() {
	*x = ListOfCells{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[269]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListOfCells) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListOfCells) ProtoMessage() {}

func (x *ListOfCells) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[269]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListOfCells.ProtoReflect.Descriptor instead.
func (*ListOfCells) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{269}
}

func (x *ListOfCells) GetValue() []*CellsinAoIItem {
	if x != nil {
		return x.Value
	}
	return nil
}

// value set from xnap_v1.asn1:4754
// {CellsinAoI-Item-ExtIEs}
type CellsinAoIItemExtIes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *emptypb.Empty `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *CellsinAoIItemExtIes) Reset() {
	*x = CellsinAoIItemExtIes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[270]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CellsinAoIItemExtIes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CellsinAoIItemExtIes) ProtoMessage() {}

func (x *CellsinAoIItemExtIes) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[270]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CellsinAoIItemExtIes.ProtoReflect.Descriptor instead.
func (*CellsinAoIItemExtIes) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{270}
}

func (x *CellsinAoIItemExtIes) GetValue() *emptypb.Empty {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:4748
// @inject_tag: aper:"valueExt"
// {CellsinAoI-Item}
type CellsinAoIItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PLmnIdentity *PlmnIdentity      `protobuf:"bytes,1,opt,name=p_lmn_identity,json=pLMN-Identity,proto3" json:"p_lmn_identity,omitempty"`
	NgRanCellId  *NgRAnCellIdentity `protobuf:"bytes,2,opt,name=ng_ran_cell_id,json=ng-ran-cell-id,proto3" json:"ng_ran_cell_id,omitempty"`
	// @inject_tag: aper:"optional,sizeLB:1,"
	IEExtensions []*CellsinAoIItemExtIes `protobuf:"bytes,3,rep,name=i_e_extensions,json=iE-Extensions,proto3" json:"i_e_extensions,omitempty" aper:"optional,sizeLB:1,"`
}

func (x *CellsinAoIItem) Reset() {
	*x = CellsinAoIItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[271]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CellsinAoIItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CellsinAoIItem) ProtoMessage() {}

func (x *CellsinAoIItem) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[271]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CellsinAoIItem.ProtoReflect.Descriptor instead.
func (*CellsinAoIItem) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{271}
}

func (x *CellsinAoIItem) GetPLmnIdentity() *PlmnIdentity {
	if x != nil {
		return x.PLmnIdentity
	}
	return nil
}

func (x *CellsinAoIItem) GetNgRanCellId() *NgRAnCellIdentity {
	if x != nil {
		return x.NgRanCellId
	}
	return nil
}

func (x *CellsinAoIItem) GetIEExtensions() []*CellsinAoIItemExtIes {
	if x != nil {
		return x.IEExtensions
	}
	return nil
}

// sequence from xnap_v1.asn1:4761
// {ListOfRANNodesinAoI}
type ListOfRannodesinAoI struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"valueExt,sizeLB:1,sizeUB:64,"
	Value []*GlobalNgRAnnodesinAoIItem `protobuf:"bytes,1,rep,name=value,proto3" json:"value,omitempty" aper:"valueExt,sizeLB:1,sizeUB:64,"`
}

func (x *ListOfRannodesinAoI) Reset() {
	*x = ListOfRannodesinAoI{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[272]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListOfRannodesinAoI) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListOfRannodesinAoI) ProtoMessage() {}

func (x *ListOfRannodesinAoI) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[272]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListOfRannodesinAoI.ProtoReflect.Descriptor instead.
func (*ListOfRannodesinAoI) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{272}
}

func (x *ListOfRannodesinAoI) GetValue() []*GlobalNgRAnnodesinAoIItem {
	if x != nil {
		return x.Value
	}
	return nil
}

// value set from xnap_v1.asn1:4767
// {GlobalNG-RANNodesinAoI-Item-ExtIEs}
type GlobalNgRAnnodesinAoIItemExtIes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *emptypb.Empty `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *GlobalNgRAnnodesinAoIItemExtIes) Reset() {
	*x = GlobalNgRAnnodesinAoIItemExtIes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[273]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GlobalNgRAnnodesinAoIItemExtIes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GlobalNgRAnnodesinAoIItemExtIes) ProtoMessage() {}

func (x *GlobalNgRAnnodesinAoIItemExtIes) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[273]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GlobalNgRAnnodesinAoIItemExtIes.ProtoReflect.Descriptor instead.
func (*GlobalNgRAnnodesinAoIItemExtIes) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{273}
}

func (x *GlobalNgRAnnodesinAoIItemExtIes) GetValue() *emptypb.Empty {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:4762
// @inject_tag: aper:"valueExt"
// {GlobalNG-RANNodesinAoI-Item}
type GlobalNgRAnnodesinAoIItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GlobalNgRanNodeId *GlobalNgRAnnodeID `protobuf:"bytes,1,opt,name=global_ng_ran_node_id,json=global-NG-RAN-Node-ID,proto3" json:"global_ng_ran_node_id,omitempty"`
	// @inject_tag: aper:"optional,sizeLB:1,"
	IEExtensions []*GlobalNgRAnnodesinAoIItemExtIes `protobuf:"bytes,2,rep,name=i_e_extensions,json=iE-Extensions,proto3" json:"i_e_extensions,omitempty" aper:"optional,sizeLB:1,"`
}

func (x *GlobalNgRAnnodesinAoIItem) Reset() {
	*x = GlobalNgRAnnodesinAoIItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[274]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GlobalNgRAnnodesinAoIItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GlobalNgRAnnodesinAoIItem) ProtoMessage() {}

func (x *GlobalNgRAnnodesinAoIItem) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[274]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GlobalNgRAnnodesinAoIItem.ProtoReflect.Descriptor instead.
func (*GlobalNgRAnnodesinAoIItem) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{274}
}

func (x *GlobalNgRAnnodesinAoIItem) GetGlobalNgRanNodeId() *GlobalNgRAnnodeID {
	if x != nil {
		return x.GlobalNgRanNodeId
	}
	return nil
}

func (x *GlobalNgRAnnodesinAoIItem) GetIEExtensions() []*GlobalNgRAnnodesinAoIItemExtIes {
	if x != nil {
		return x.IEExtensions
	}
	return nil
}

// sequence from xnap_v1.asn1:4774
// {ListOfTAIsinAoI}
type ListOfTaisinAoI struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"valueExt,sizeLB:1,sizeUB:16,"
	Value []*TaisinAoIItem `protobuf:"bytes,1,rep,name=value,proto3" json:"value,omitempty" aper:"valueExt,sizeLB:1,sizeUB:16,"`
}

func (x *ListOfTaisinAoI) Reset() {
	*x = ListOfTaisinAoI{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[275]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListOfTaisinAoI) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListOfTaisinAoI) ProtoMessage() {}

func (x *ListOfTaisinAoI) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[275]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListOfTaisinAoI.ProtoReflect.Descriptor instead.
func (*ListOfTaisinAoI) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{275}
}

func (x *ListOfTaisinAoI) GetValue() []*TaisinAoIItem {
	if x != nil {
		return x.Value
	}
	return nil
}

// value set from xnap_v1.asn1:4781
// {TAIsinAoI-Item-ExtIEs}
type TaisinAoIItemExtIes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *emptypb.Empty `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *TaisinAoIItemExtIes) Reset() {
	*x = TaisinAoIItemExtIes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[276]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaisinAoIItemExtIes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaisinAoIItemExtIes) ProtoMessage() {}

func (x *TaisinAoIItemExtIes) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[276]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaisinAoIItemExtIes.ProtoReflect.Descriptor instead.
func (*TaisinAoIItemExtIes) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{276}
}

func (x *TaisinAoIItemExtIes) GetValue() *emptypb.Empty {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:4775
// @inject_tag: aper:"valueExt"
// {TAIsinAoI-Item}
type TaisinAoIItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PLmnIdentity *PlmnIdentity `protobuf:"bytes,1,opt,name=p_lmn_identity,json=pLMN-Identity,proto3" json:"p_lmn_identity,omitempty"`
	TAc          *Tac          `protobuf:"bytes,2,opt,name=t_ac,json=tAC,proto3" json:"t_ac,omitempty"`
	// @inject_tag: aper:"optional,sizeLB:1,"
	IEExtensions []*TaisinAoIItemExtIes `protobuf:"bytes,3,rep,name=i_e_extensions,json=iE-Extensions,proto3" json:"i_e_extensions,omitempty" aper:"optional,sizeLB:1,"`
}

func (x *TaisinAoIItem) Reset() {
	*x = TaisinAoIItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[277]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaisinAoIItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaisinAoIItem) ProtoMessage() {}

func (x *TaisinAoIItem) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[277]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaisinAoIItem.ProtoReflect.Descriptor instead.
func (*TaisinAoIItem) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{277}
}

func (x *TaisinAoIItem) GetPLmnIdentity() *PlmnIdentity {
	if x != nil {
		return x.PLmnIdentity
	}
	return nil
}

func (x *TaisinAoIItem) GetTAc() *Tac {
	if x != nil {
		return x.TAc
	}
	return nil
}

func (x *TaisinAoIItem) GetIEExtensions() []*TaisinAoIItemExtIes {
	if x != nil {
		return x.IEExtensions
	}
	return nil
}

// value set from xnap_v1.asn1:4798
// {LocationReportingInformation-ExtIEs}
type LocationReportingInformationExtIes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *emptypb.Empty `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *LocationReportingInformationExtIes) Reset() {
	*x = LocationReportingInformationExtIes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[278]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LocationReportingInformationExtIes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LocationReportingInformationExtIes) ProtoMessage() {}

func (x *LocationReportingInformationExtIes) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[278]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LocationReportingInformationExtIes.ProtoReflect.Descriptor instead.
func (*LocationReportingInformationExtIes) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{278}
}

func (x *LocationReportingInformationExtIes) GetValue() *emptypb.Empty {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:4791
// @inject_tag: aper:"valueExt"
// {LocationReportingInformation}
type LocationReportingInformation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"valueExt,valueLB:0,valueUB:1,"
	EventType EventType `protobuf:"varint,1,opt,name=event_type,json=eventType,proto3,enum=xnap.v1.EventType" json:"event_type,omitempty" aper:"valueExt,valueLB:0,valueUB:1,"`
	// @inject_tag: aper:"valueExt,valueLB:0,valueUB:0,"
	ReportArea ReportArea `protobuf:"varint,2,opt,name=report_area,json=reportArea,proto3,enum=xnap.v1.ReportArea" json:"report_area,omitempty" aper:"valueExt,valueLB:0,valueUB:0,"`
	// @inject_tag: aper:"optional,"
	AreaOfInterest *AreaOfInterestInformation `protobuf:"bytes,3,opt,name=area_of_interest,json=areaOfInterest,proto3,oneof" json:"area_of_interest,omitempty" aper:"optional,"`
	// @inject_tag: aper:"optional,sizeLB:1,"
	IEExtensions []*LocationReportingInformationExtIes `protobuf:"bytes,4,rep,name=i_e_extensions,json=iE-Extensions,proto3" json:"i_e_extensions,omitempty" aper:"optional,sizeLB:1,"`
}

func (x *LocationReportingInformation) Reset() {
	*x = LocationReportingInformation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[279]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LocationReportingInformation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LocationReportingInformation) ProtoMessage() {}

func (x *LocationReportingInformation) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[279]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LocationReportingInformation.ProtoReflect.Descriptor instead.
func (*LocationReportingInformation) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{279}
}

func (x *LocationReportingInformation) GetEventType() EventType {
	if x != nil {
		return x.EventType
	}
	return EventType_EVENT_TYPE_REPORT_UPON_CHANGE_OF_SERVING_CELL
}

func (x *LocationReportingInformation) GetReportArea() ReportArea {
	if x != nil {
		return x.ReportArea
	}
	return ReportArea_REPORT_AREA_CELL
}

func (x *LocationReportingInformation) GetAreaOfInterest() *AreaOfInterestInformation {
	if x != nil {
		return x.AreaOfInterest
	}
	return nil
}

func (x *LocationReportingInformation) GetIEExtensions() []*LocationReportingInformationExtIes {
	if x != nil {
		return x.IEExtensions
	}
	return nil
}

// value set from xnap_v1.asn1:4813
// {LoggedMDT-EUTRA-ExtIEs}
type LoggedMdtEUtraExtIes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *emptypb.Empty `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *LoggedMdtEUtraExtIes) Reset() {
	*x = LoggedMdtEUtraExtIes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[280]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoggedMdtEUtraExtIes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoggedMdtEUtraExtIes) ProtoMessage() {}

func (x *LoggedMdtEUtraExtIes) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[280]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoggedMdtEUtraExtIes.ProtoReflect.Descriptor instead.
func (*LoggedMdtEUtraExtIes) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{280}
}

func (x *LoggedMdtEUtraExtIes) GetValue() *emptypb.Empty {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:4805
// @inject_tag: aper:"valueExt"
// {LoggedMDT-EUTRA}
type LoggedMdtEUtra struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"valueLB:0,valueUB:9,"
	LoggingInterval LoggingInterval `protobuf:"varint,1,opt,name=logging_interval,json=loggingInterval,proto3,enum=xnap.v1.LoggingInterval" json:"logging_interval,omitempty" aper:"valueLB:0,valueUB:9,"`
	// @inject_tag: aper:"valueLB:0,valueUB:5,"
	LoggingDuration LoggingDuration `protobuf:"varint,2,opt,name=logging_duration,json=loggingDuration,proto3,enum=xnap.v1.LoggingDuration" json:"logging_duration,omitempty" aper:"valueLB:0,valueUB:5,"`
	// @inject_tag: aper:"optional,valueExt,"
	BluetoothMeasurementConfiguration *BluetoothMeasurementConfiguration `protobuf:"bytes,3,opt,name=bluetooth_measurement_configuration,json=bluetoothMeasurementConfiguration,proto3,oneof" json:"bluetooth_measurement_configuration,omitempty" aper:"optional,valueExt,"`
	// @inject_tag: aper:"optional,valueExt,"
	WLanmeasurementConfiguration *WlanmeasurementConfiguration `protobuf:"bytes,4,opt,name=w_lanmeasurement_configuration,json=wLANMeasurementConfiguration,proto3,oneof" json:"w_lanmeasurement_configuration,omitempty" aper:"optional,valueExt,"`
	// @inject_tag: aper:"optional,sizeLB:1,"
	IEExtensions []*LoggedMdtEUtraExtIes `protobuf:"bytes,5,rep,name=i_e_extensions,json=iE-Extensions,proto3" json:"i_e_extensions,omitempty" aper:"optional,sizeLB:1,"`
}

func (x *LoggedMdtEUtra) Reset() {
	*x = LoggedMdtEUtra{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[281]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoggedMdtEUtra) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoggedMdtEUtra) ProtoMessage() {}

func (x *LoggedMdtEUtra) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[281]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoggedMdtEUtra.ProtoReflect.Descriptor instead.
func (*LoggedMdtEUtra) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{281}
}

func (x *LoggedMdtEUtra) GetLoggingInterval() LoggingInterval {
	if x != nil {
		return x.LoggingInterval
	}
	return LoggingInterval_LOGGING_INTERVAL_MS320
}

func (x *LoggedMdtEUtra) GetLoggingDuration() LoggingDuration {
	if x != nil {
		return x.LoggingDuration
	}
	return LoggingDuration_LOGGING_DURATION_M10
}

func (x *LoggedMdtEUtra) GetBluetoothMeasurementConfiguration() *BluetoothMeasurementConfiguration {
	if x != nil {
		return x.BluetoothMeasurementConfiguration
	}
	return nil
}

func (x *LoggedMdtEUtra) GetWLanmeasurementConfiguration() *WlanmeasurementConfiguration {
	if x != nil {
		return x.WLanmeasurementConfiguration
	}
	return nil
}

func (x *LoggedMdtEUtra) GetIEExtensions() []*LoggedMdtEUtraExtIes {
	if x != nil {
		return x.IEExtensions
	}
	return nil
}

// value set from xnap_v1.asn1:4823
// {LoggedEventTriggeredConfig-ExtIEs}
type LoggedEventTriggeredConfigExtIes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *emptypb.Empty `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *LoggedEventTriggeredConfigExtIes) Reset() {
	*x = LoggedEventTriggeredConfigExtIes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[282]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoggedEventTriggeredConfigExtIes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoggedEventTriggeredConfigExtIes) ProtoMessage() {}

func (x *LoggedEventTriggeredConfigExtIes) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[282]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoggedEventTriggeredConfigExtIes.ProtoReflect.Descriptor instead.
func (*LoggedEventTriggeredConfigExtIes) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{282}
}

func (x *LoggedEventTriggeredConfigExtIes) GetValue() *emptypb.Empty {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:4818
// @inject_tag: aper:"valueExt"
// {LoggedEventTriggeredConfig}
type LoggedEventTriggeredConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventTypeTrigger *EventTypeTrigger `protobuf:"bytes,1,opt,name=event_type_trigger,json=eventTypeTrigger,proto3" json:"event_type_trigger,omitempty"`
	// @inject_tag: aper:"optional,sizeLB:1,"
	IEExtensions []*LoggedEventTriggeredConfigExtIes `protobuf:"bytes,2,rep,name=i_e_extensions,json=iE-Extensions,proto3" json:"i_e_extensions,omitempty" aper:"optional,sizeLB:1,"`
}

func (x *LoggedEventTriggeredConfig) Reset() {
	*x = LoggedEventTriggeredConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[283]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoggedEventTriggeredConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoggedEventTriggeredConfig) ProtoMessage() {}

func (x *LoggedEventTriggeredConfig) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[283]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoggedEventTriggeredConfig.ProtoReflect.Descriptor instead.
func (*LoggedEventTriggeredConfig) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{283}
}

func (x *LoggedEventTriggeredConfig) GetEventTypeTrigger() *EventTypeTrigger {
	if x != nil {
		return x.EventTypeTrigger
	}
	return nil
}

func (x *LoggedEventTriggeredConfig) GetIEExtensions() []*LoggedEventTriggeredConfigExtIes {
	if x != nil {
		return x.IEExtensions
	}
	return nil
}

// value set from xnap_v1.asn1:4838
// {LoggedMDT-NR-ExtIEs}
type LoggedMdtNRExtIes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *emptypb.Empty `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *LoggedMdtNRExtIes) Reset() {
	*x = LoggedMdtNRExtIes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[284]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoggedMdtNRExtIes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoggedMdtNRExtIes) ProtoMessage() {}

func (x *LoggedMdtNRExtIes) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[284]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoggedMdtNRExtIes.ProtoReflect.Descriptor instead.
func (*LoggedMdtNRExtIes) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{284}
}

func (x *LoggedMdtNRExtIes) GetValue() *emptypb.Empty {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:4828
// @inject_tag: aper:"valueExt"
// {LoggedMDT-NR}
type LoggedMdtNR struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"valueLB:0,valueUB:9,"
	LoggingInterval LoggingInterval `protobuf:"varint,1,opt,name=logging_interval,json=loggingInterval,proto3,enum=xnap.v1.LoggingInterval" json:"logging_interval,omitempty" aper:"valueLB:0,valueUB:9,"`
	// @inject_tag: aper:"valueLB:0,valueUB:5,"
	LoggingDuration LoggingDuration `protobuf:"varint,2,opt,name=logging_duration,json=loggingDuration,proto3,enum=xnap.v1.LoggingDuration" json:"logging_duration,omitempty" aper:"valueLB:0,valueUB:5,"`
	// @inject_tag: aper:"choiceExt,"
	ReportType *ReportType `protobuf:"bytes,3,opt,name=report_type,json=reportType,proto3" json:"report_type,omitempty" aper:"choiceExt,"`
	// @inject_tag: aper:"optional,valueExt,"
	BluetoothMeasurementConfiguration *BluetoothMeasurementConfiguration `protobuf:"bytes,4,opt,name=bluetooth_measurement_configuration,json=bluetoothMeasurementConfiguration,proto3,oneof" json:"bluetooth_measurement_configuration,omitempty" aper:"optional,valueExt,"`
	// @inject_tag: aper:"optional,valueExt,"
	WLanmeasurementConfiguration *WlanmeasurementConfiguration `protobuf:"bytes,5,opt,name=w_lanmeasurement_configuration,json=wLANMeasurementConfiguration,proto3,oneof" json:"w_lanmeasurement_configuration,omitempty" aper:"optional,valueExt,"`
	// @inject_tag: aper:"optional,valueExt,"
	SensorMeasurementConfiguration *SensorMeasurementConfiguration `protobuf:"bytes,6,opt,name=sensor_measurement_configuration,json=sensorMeasurementConfiguration,proto3,oneof" json:"sensor_measurement_configuration,omitempty" aper:"optional,valueExt,"`
	// @inject_tag: aper:"optional,"
	AreaScopeOfNeighCellsList *AreaScopeOfNeighCellsList `protobuf:"bytes,7,opt,name=area_scope_of_neigh_cells_list,json=areaScopeOfNeighCellsList,proto3,oneof" json:"area_scope_of_neigh_cells_list,omitempty" aper:"optional,"`
	// @inject_tag: aper:"optional,sizeLB:1,"
	IEExtensions []*LoggedMdtNRExtIes `protobuf:"bytes,8,rep,name=i_e_extensions,json=iE-Extensions,proto3" json:"i_e_extensions,omitempty" aper:"optional,sizeLB:1,"`
}

func (x *LoggedMdtNR) Reset() {
	*x = LoggedMdtNR{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[285]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoggedMdtNR) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoggedMdtNR) ProtoMessage() {}

func (x *LoggedMdtNR) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[285]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoggedMdtNR.ProtoReflect.Descriptor instead.
func (*LoggedMdtNR) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{285}
}

func (x *LoggedMdtNR) GetLoggingInterval() LoggingInterval {
	if x != nil {
		return x.LoggingInterval
	}
	return LoggingInterval_LOGGING_INTERVAL_MS320
}

func (x *LoggedMdtNR) GetLoggingDuration() LoggingDuration {
	if x != nil {
		return x.LoggingDuration
	}
	return LoggingDuration_LOGGING_DURATION_M10
}

func (x *LoggedMdtNR) GetReportType() *ReportType {
	if x != nil {
		return x.ReportType
	}
	return nil
}

func (x *LoggedMdtNR) GetBluetoothMeasurementConfiguration() *BluetoothMeasurementConfiguration {
	if x != nil {
		return x.BluetoothMeasurementConfiguration
	}
	return nil
}

func (x *LoggedMdtNR) GetWLanmeasurementConfiguration() *WlanmeasurementConfiguration {
	if x != nil {
		return x.WLanmeasurementConfiguration
	}
	return nil
}

func (x *LoggedMdtNR) GetSensorMeasurementConfiguration() *SensorMeasurementConfiguration {
	if x != nil {
		return x.SensorMeasurementConfiguration
	}
	return nil
}

func (x *LoggedMdtNR) GetAreaScopeOfNeighCellsList() *AreaScopeOfNeighCellsList {
	if x != nil {
		return x.AreaScopeOfNeighCellsList
	}
	return nil
}

func (x *LoggedMdtNR) GetIEExtensions() []*LoggedMdtNRExtIes {
	if x != nil {
		return x.IEExtensions
	}
	return nil
}

// value set from xnap_v1.asn1:4861
// {LTEV2XServicesAuthorized-ExtIEs}
type Ltev2XservicesAuthorizedExtIes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *emptypb.Empty `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *Ltev2XservicesAuthorizedExtIes) Reset() {
	*x = Ltev2XservicesAuthorizedExtIes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[286]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ltev2XservicesAuthorizedExtIes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ltev2XservicesAuthorizedExtIes) ProtoMessage() {}

func (x *Ltev2XservicesAuthorizedExtIes) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[286]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ltev2XservicesAuthorizedExtIes.ProtoReflect.Descriptor instead.
func (*Ltev2XservicesAuthorizedExtIes) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{286}
}

func (x *Ltev2XservicesAuthorizedExtIes) GetValue() *emptypb.Empty {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:4855
// @inject_tag: aper:"valueExt"
// {LTEV2XServicesAuthorized}
type Ltev2XservicesAuthorized struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"optional,valueExt,valueLB:0,valueUB:1,"
	VehicleUe *VehicleUe `protobuf:"varint,1,opt,name=vehicle_ue,json=vehicleUE,proto3,enum=xnap.v1.VehicleUe,oneof" json:"vehicle_ue,omitempty" aper:"optional,valueExt,valueLB:0,valueUB:1,"`
	// @inject_tag: aper:"optional,valueExt,valueLB:0,valueUB:1,"
	PedestrianUe *PedestrianUe `protobuf:"varint,2,opt,name=pedestrian_ue,json=pedestrianUE,proto3,enum=xnap.v1.PedestrianUe,oneof" json:"pedestrian_ue,omitempty" aper:"optional,valueExt,valueLB:0,valueUB:1,"`
	// @inject_tag: aper:"optional,sizeLB:1,"
	IEExtensions []*Ltev2XservicesAuthorizedExtIes `protobuf:"bytes,3,rep,name=i_e_extensions,json=iE-Extensions,proto3" json:"i_e_extensions,omitempty" aper:"optional,sizeLB:1,"`
}

func (x *Ltev2XservicesAuthorized) Reset() {
	*x = Ltev2XservicesAuthorized{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[287]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ltev2XservicesAuthorized) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ltev2XservicesAuthorized) ProtoMessage() {}

func (x *Ltev2XservicesAuthorized) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[287]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ltev2XservicesAuthorized.ProtoReflect.Descriptor instead.
func (*Ltev2XservicesAuthorized) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{287}
}

func (x *Ltev2XservicesAuthorized) GetVehicleUe() VehicleUe {
	if x != nil && x.VehicleUe != nil {
		return *x.VehicleUe
	}
	return VehicleUe_VEHICLE_UE_AUTHORIZED
}

func (x *Ltev2XservicesAuthorized) GetPedestrianUe() PedestrianUe {
	if x != nil && x.PedestrianUe != nil {
		return *x.PedestrianUe
	}
	return PedestrianUe_PEDESTRIAN_UE_AUTHORIZED
}

func (x *Ltev2XservicesAuthorized) GetIEExtensions() []*Ltev2XservicesAuthorizedExtIes {
	if x != nil {
		return x.IEExtensions
	}
	return nil
}

// value set from xnap_v1.asn1:4872
// {LTEUESidelinkAggregateMaximumBitRate-ExtIEs}
type LteuesidelinkAggregateMaximumBitRateExtIes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *emptypb.Empty `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *LteuesidelinkAggregateMaximumBitRateExtIes) Reset() {
	*x = LteuesidelinkAggregateMaximumBitRateExtIes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[288]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LteuesidelinkAggregateMaximumBitRateExtIes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LteuesidelinkAggregateMaximumBitRateExtIes) ProtoMessage() {}

func (x *LteuesidelinkAggregateMaximumBitRateExtIes) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[288]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LteuesidelinkAggregateMaximumBitRateExtIes.ProtoReflect.Descriptor instead.
func (*LteuesidelinkAggregateMaximumBitRateExtIes) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{288}
}

func (x *LteuesidelinkAggregateMaximumBitRateExtIes) GetValue() *emptypb.Empty {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:4867
// @inject_tag: aper:"valueExt"
// {LTEUESidelinkAggregateMaximumBitRate}
type LteuesidelinkAggregateMaximumBitRate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UEsidelinkAggregateMaximumBitRate *BitRate `protobuf:"bytes,1,opt,name=u_esidelink_aggregate_maximum_bit_rate,json=uESidelinkAggregateMaximumBitRate,proto3" json:"u_esidelink_aggregate_maximum_bit_rate,omitempty"`
	// @inject_tag: aper:"optional,sizeLB:1,"
	IEExtensions []*LteuesidelinkAggregateMaximumBitRateExtIes `protobuf:"bytes,2,rep,name=i_e_extensions,json=iE-Extensions,proto3" json:"i_e_extensions,omitempty" aper:"optional,sizeLB:1,"`
}

func (x *LteuesidelinkAggregateMaximumBitRate) Reset() {
	*x = LteuesidelinkAggregateMaximumBitRate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[289]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LteuesidelinkAggregateMaximumBitRate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LteuesidelinkAggregateMaximumBitRate) ProtoMessage() {}

func (x *LteuesidelinkAggregateMaximumBitRate) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[289]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LteuesidelinkAggregateMaximumBitRate.ProtoReflect.Descriptor instead.
func (*LteuesidelinkAggregateMaximumBitRate) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{289}
}

func (x *LteuesidelinkAggregateMaximumBitRate) GetUEsidelinkAggregateMaximumBitRate() *BitRate {
	if x != nil {
		return x.UEsidelinkAggregateMaximumBitRate
	}
	return nil
}

func (x *LteuesidelinkAggregateMaximumBitRate) GetIEExtensions() []*LteuesidelinkAggregateMaximumBitRateExtIes {
	if x != nil {
		return x.IEExtensions
	}
	return nil
}

// value set from xnap_v1.asn1:4890
// {M1Configuration-ExtIEs}
type M1ConfigurationExtIes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *emptypb.Empty `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *M1ConfigurationExtIes) Reset() {
	*x = M1ConfigurationExtIes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[290]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *M1ConfigurationExtIes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*M1ConfigurationExtIes) ProtoMessage() {}

func (x *M1ConfigurationExtIes) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[290]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use M1ConfigurationExtIes.ProtoReflect.Descriptor instead.
func (*M1ConfigurationExtIes) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{290}
}

func (x *M1ConfigurationExtIes) GetValue() *emptypb.Empty {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:4881
// @inject_tag: aper:"valueExt"
// {M1Configuration}
type M1Configuration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"valueExt,valueLB:0,valueUB:2,"
	M1ReportingTrigger M1ReportingTrigger `protobuf:"varint,1,opt,name=m1reporting_trigger,json=m1reportingTrigger,proto3,enum=xnap.v1.M1ReportingTrigger" json:"m1reporting_trigger,omitempty" aper:"valueExt,valueLB:0,valueUB:2,"`
	// @inject_tag: aper:"optional,valueExt,"
	M1ThresholdeventA2 *M1ThresholdEventA2 `protobuf:"bytes,2,opt,name=m1thresholdevent_a2,json=m1thresholdeventA2,proto3,oneof" json:"m1thresholdevent_a2,omitempty" aper:"optional,valueExt,"`
	// @inject_tag: aper:"optional,valueExt,"
	M1PeriodicReporting *M1PeriodicReporting `protobuf:"bytes,3,opt,name=m1periodic_reporting,json=m1periodicReporting,proto3,oneof" json:"m1periodic_reporting,omitempty" aper:"optional,valueExt,"`
	// @inject_tag: aper:"optional,sizeLB:1,"
	IEExtensions []*M1ConfigurationExtIes `protobuf:"bytes,4,rep,name=i_e_extensions,json=iE-Extensions,proto3" json:"i_e_extensions,omitempty" aper:"optional,sizeLB:1,"`
}

func (x *M1Configuration) Reset() {
	*x = M1Configuration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[291]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *M1Configuration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*M1Configuration) ProtoMessage() {}

func (x *M1Configuration) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[291]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use M1Configuration.ProtoReflect.Descriptor instead.
func (*M1Configuration) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{291}
}

func (x *M1Configuration) GetM1ReportingTrigger() M1ReportingTrigger {
	if x != nil {
		return x.M1ReportingTrigger
	}
	return M1ReportingTrigger_M1_REPORTING_TRIGGER_PERIODIC
}

func (x *M1Configuration) GetM1ThresholdeventA2() *M1ThresholdEventA2 {
	if x != nil {
		return x.M1ThresholdeventA2
	}
	return nil
}

func (x *M1Configuration) GetM1PeriodicReporting() *M1PeriodicReporting {
	if x != nil {
		return x.M1PeriodicReporting
	}
	return nil
}

func (x *M1Configuration) GetIEExtensions() []*M1ConfigurationExtIes {
	if x != nil {
		return x.IEExtensions
	}
	return nil
}

// value set from xnap_v1.asn1:4902
// {M1PeriodicReporting-ExtIEs}
type M1PeriodicReportingExtIes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *emptypb.Empty `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *M1PeriodicReportingExtIes) Reset() {
	*x = M1PeriodicReportingExtIes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[292]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *M1PeriodicReportingExtIes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*M1PeriodicReportingExtIes) ProtoMessage() {}

func (x *M1PeriodicReportingExtIes) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[292]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use M1PeriodicReportingExtIes.ProtoReflect.Descriptor instead.
func (*M1PeriodicReportingExtIes) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{292}
}

func (x *M1PeriodicReportingExtIes) GetValue() *emptypb.Empty {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:4896
// @inject_tag: aper:"valueExt"
// {M1PeriodicReporting}
type M1PeriodicReporting struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"valueExt,valueLB:0,valueUB:12,"
	ReportInterval ReportIntervalMdt `protobuf:"varint,1,opt,name=report_interval,json=reportInterval,proto3,enum=xnap.v1.ReportIntervalMdt" json:"report_interval,omitempty" aper:"valueExt,valueLB:0,valueUB:12,"`
	// @inject_tag: aper:"valueExt,valueLB:0,valueUB:7,"
	ReportAmount ReportAmountMdt `protobuf:"varint,2,opt,name=report_amount,json=reportAmount,proto3,enum=xnap.v1.ReportAmountMdt" json:"report_amount,omitempty" aper:"valueExt,valueLB:0,valueUB:7,"`
	// @inject_tag: aper:"optional,sizeLB:1,"
	IEExtensions []*M1PeriodicReportingExtIes `protobuf:"bytes,3,rep,name=i_e_extensions,json=iE-Extensions,proto3" json:"i_e_extensions,omitempty" aper:"optional,sizeLB:1,"`
}

func (x *M1PeriodicReporting) Reset() {
	*x = M1PeriodicReporting{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[293]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *M1PeriodicReporting) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*M1PeriodicReporting) ProtoMessage() {}

func (x *M1PeriodicReporting) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[293]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use M1PeriodicReporting.ProtoReflect.Descriptor instead.
func (*M1PeriodicReporting) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{293}
}

func (x *M1PeriodicReporting) GetReportInterval() ReportIntervalMdt {
	if x != nil {
		return x.ReportInterval
	}
	return ReportIntervalMdt_REPORT_INTERVAL_MDT_MS120
}

func (x *M1PeriodicReporting) GetReportAmount() ReportAmountMdt {
	if x != nil {
		return x.ReportAmount
	}
	return ReportAmountMdt_REPORT_AMOUNT_MDT_R1
}

func (x *M1PeriodicReporting) GetIEExtensions() []*M1PeriodicReportingExtIes {
	if x != nil {
		return x.IEExtensions
	}
	return nil
}

// value set from xnap_v1.asn1:4921
// {M1ThresholdEventA2-ExtIEs}
type M1ThresholdEventA2ExtIes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *emptypb.Empty `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *M1ThresholdEventA2ExtIes) Reset() {
	*x = M1ThresholdEventA2ExtIes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[294]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *M1ThresholdEventA2ExtIes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*M1ThresholdEventA2ExtIes) ProtoMessage() {}

func (x *M1ThresholdEventA2ExtIes) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[294]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use M1ThresholdEventA2ExtIes.ProtoReflect.Descriptor instead.
func (*M1ThresholdEventA2ExtIes) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{294}
}

func (x *M1ThresholdEventA2ExtIes) GetValue() *emptypb.Empty {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:4916
// @inject_tag: aper:"valueExt"
// {M1ThresholdEventA2}
type M1ThresholdEventA2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MeasurementThreshold *MeasurementThresholdA2 `protobuf:"bytes,1,opt,name=measurement_threshold,json=measurementThreshold,proto3" json:"measurement_threshold,omitempty"`
	// @inject_tag: aper:"optional,sizeLB:1,"
	IEExtensions []*M1ThresholdEventA2ExtIes `protobuf:"bytes,2,rep,name=i_e_extensions,json=iE-Extensions,proto3" json:"i_e_extensions,omitempty" aper:"optional,sizeLB:1,"`
}

func (x *M1ThresholdEventA2) Reset() {
	*x = M1ThresholdEventA2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[295]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *M1ThresholdEventA2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*M1ThresholdEventA2) ProtoMessage() {}

func (x *M1ThresholdEventA2) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[295]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use M1ThresholdEventA2.ProtoReflect.Descriptor instead.
func (*M1ThresholdEventA2) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{295}
}

func (x *M1ThresholdEventA2) GetMeasurementThreshold() *MeasurementThresholdA2 {
	if x != nil {
		return x.MeasurementThreshold
	}
	return nil
}

func (x *M1ThresholdEventA2) GetIEExtensions() []*M1ThresholdEventA2ExtIes {
	if x != nil {
		return x.IEExtensions
	}
	return nil
}

// value set from xnap_v1.asn1:4934
// {M4Configuration-ExtIEs}
type M4ConfigurationExtIes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *emptypb.Empty `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *M4ConfigurationExtIes) Reset() {
	*x = M4ConfigurationExtIes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[296]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *M4ConfigurationExtIes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*M4ConfigurationExtIes) ProtoMessage() {}

func (x *M4ConfigurationExtIes) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[296]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use M4ConfigurationExtIes.ProtoReflect.Descriptor instead.
func (*M4ConfigurationExtIes) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{296}
}

func (x *M4ConfigurationExtIes) GetValue() *emptypb.Empty {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:4928
// @inject_tag: aper:"valueExt"
// {M4Configuration}
type M4Configuration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"valueExt,valueLB:0,valueUB:4,"
	M4Period M4Period `protobuf:"varint,1,opt,name=m4period,proto3,enum=xnap.v1.M4Period" json:"m4period,omitempty" aper:"valueExt,valueLB:0,valueUB:4,"`
	// @inject_tag: aper:"valueExt,valueLB:0,valueUB:2,"
	M4LinksToLog Linkstolog `protobuf:"varint,2,opt,name=m4_links_to_log,json=m4-links-to-log,proto3,enum=xnap.v1.Linkstolog" json:"m4_links_to_log,omitempty" aper:"valueExt,valueLB:0,valueUB:2,"`
	// @inject_tag: aper:"optional,sizeLB:1,"
	IEExtensions []*M4ConfigurationExtIes `protobuf:"bytes,3,rep,name=i_e_extensions,json=iE-Extensions,proto3" json:"i_e_extensions,omitempty" aper:"optional,sizeLB:1,"`
}

func (x *M4Configuration) Reset() {
	*x = M4Configuration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[297]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *M4Configuration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*M4Configuration) ProtoMessage() {}

func (x *M4Configuration) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[297]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use M4Configuration.ProtoReflect.Descriptor instead.
func (*M4Configuration) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{297}
}

func (x *M4Configuration) GetM4Period() M4Period {
	if x != nil {
		return x.M4Period
	}
	return M4Period_M4PERIOD_MS1024
}

func (x *M4Configuration) GetM4LinksToLog() Linkstolog {
	if x != nil {
		return x.M4LinksToLog
	}
	return Linkstolog_LINKS_TO_LOG_UPLINK
}

func (x *M4Configuration) GetIEExtensions() []*M4ConfigurationExtIes {
	if x != nil {
		return x.IEExtensions
	}
	return nil
}

// value set from xnap_v1.asn1:4947
// {M5Configuration-ExtIEs}
type M5ConfigurationExtIes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *emptypb.Empty `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *M5ConfigurationExtIes) Reset() {
	*x = M5ConfigurationExtIes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[298]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *M5ConfigurationExtIes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*M5ConfigurationExtIes) ProtoMessage() {}

func (x *M5ConfigurationExtIes) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[298]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use M5ConfigurationExtIes.ProtoReflect.Descriptor instead.
func (*M5ConfigurationExtIes) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{298}
}

func (x *M5ConfigurationExtIes) GetValue() *emptypb.Empty {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:4941
// @inject_tag: aper:"valueExt"
// {M5Configuration}
type M5Configuration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"valueExt,valueLB:0,valueUB:4,"
	M5Period M5Period `protobuf:"varint,1,opt,name=m5period,proto3,enum=xnap.v1.M5Period" json:"m5period,omitempty" aper:"valueExt,valueLB:0,valueUB:4,"`
	// @inject_tag: aper:"valueExt,valueLB:0,valueUB:2,"
	M5LinksToLog Linkstolog `protobuf:"varint,2,opt,name=m5_links_to_log,json=m5-links-to-log,proto3,enum=xnap.v1.Linkstolog" json:"m5_links_to_log,omitempty" aper:"valueExt,valueLB:0,valueUB:2,"`
	// @inject_tag: aper:"optional,sizeLB:1,"
	IEExtensions []*M5ConfigurationExtIes `protobuf:"bytes,3,rep,name=i_e_extensions,json=iE-Extensions,proto3" json:"i_e_extensions,omitempty" aper:"optional,sizeLB:1,"`
}

func (x *M5Configuration) Reset() {
	*x = M5Configuration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[299]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *M5Configuration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*M5Configuration) ProtoMessage() {}

func (x *M5Configuration) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[299]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use M5Configuration.ProtoReflect.Descriptor instead.
func (*M5Configuration) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{299}
}

func (x *M5Configuration) GetM5Period() M5Period {
	if x != nil {
		return x.M5Period
	}
	return M5Period_M5PERIOD_MS1024
}

func (x *M5Configuration) GetM5LinksToLog() Linkstolog {
	if x != nil {
		return x.M5LinksToLog
	}
	return Linkstolog_LINKS_TO_LOG_UPLINK
}

func (x *M5Configuration) GetIEExtensions() []*M5ConfigurationExtIes {
	if x != nil {
		return x.IEExtensions
	}
	return nil
}

// value set from xnap_v1.asn1:4960
// {M6Configuration-ExtIEs}
type M6ConfigurationExtIes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *emptypb.Empty `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *M6ConfigurationExtIes) Reset() {
	*x = M6ConfigurationExtIes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[300]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *M6ConfigurationExtIes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*M6ConfigurationExtIes) ProtoMessage() {}

func (x *M6ConfigurationExtIes) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[300]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use M6ConfigurationExtIes.ProtoReflect.Descriptor instead.
func (*M6ConfigurationExtIes) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{300}
}

func (x *M6ConfigurationExtIes) GetValue() *emptypb.Empty {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:4954
// @inject_tag: aper:"valueExt"
// {M6Configuration}
type M6Configuration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"valueExt,valueLB:0,valueUB:13,"
	M6ReportInterval M6ReportInterval `protobuf:"varint,1,opt,name=m6report_interval,json=m6report-Interval,proto3,enum=xnap.v1.M6ReportInterval" json:"m6report_interval,omitempty" aper:"valueExt,valueLB:0,valueUB:13,"`
	// @inject_tag: aper:"valueExt,valueLB:0,valueUB:2,"
	M6LinksToLog Linkstolog `protobuf:"varint,2,opt,name=m6_links_to_log,json=m6-links-to-log,proto3,enum=xnap.v1.Linkstolog" json:"m6_links_to_log,omitempty" aper:"valueExt,valueLB:0,valueUB:2,"`
	// @inject_tag: aper:"optional,sizeLB:1,"
	IEExtensions []*M6ConfigurationExtIes `protobuf:"bytes,3,rep,name=i_e_extensions,json=iE-Extensions,proto3" json:"i_e_extensions,omitempty" aper:"optional,sizeLB:1,"`
}

func (x *M6Configuration) Reset() {
	*x = M6Configuration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[301]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *M6Configuration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*M6Configuration) ProtoMessage() {}

func (x *M6Configuration) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[301]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use M6Configuration.ProtoReflect.Descriptor instead.
func (*M6Configuration) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{301}
}

func (x *M6Configuration) GetM6ReportInterval() M6ReportInterval {
	if x != nil {
		return x.M6ReportInterval
	}
	return M6ReportInterval_M6REPORT_INTERVAL_MS120
}

func (x *M6Configuration) GetM6LinksToLog() Linkstolog {
	if x != nil {
		return x.M6LinksToLog
	}
	return Linkstolog_LINKS_TO_LOG_UPLINK
}

func (x *M6Configuration) GetIEExtensions() []*M6ConfigurationExtIes {
	if x != nil {
		return x.IEExtensions
	}
	return nil
}

// value set from xnap_v1.asn1:4974
// {M7Configuration-ExtIEs}
type M7ConfigurationExtIes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *emptypb.Empty `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *M7ConfigurationExtIes) Reset() {
	*x = M7ConfigurationExtIes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[302]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *M7ConfigurationExtIes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*M7ConfigurationExtIes) ProtoMessage() {}

func (x *M7ConfigurationExtIes) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[302]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use M7ConfigurationExtIes.ProtoReflect.Descriptor instead.
func (*M7ConfigurationExtIes) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{302}
}

func (x *M7ConfigurationExtIes) GetValue() *emptypb.Empty {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:4968
// @inject_tag: aper:"valueExt"
// {M7Configuration}
type M7Configuration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	M7Period *M7Period `protobuf:"bytes,1,opt,name=m7period,proto3" json:"m7period,omitempty"`
	// @inject_tag: aper:"valueExt,valueLB:0,valueUB:2,"
	M7LinksToLog Linkstolog `protobuf:"varint,2,opt,name=m7_links_to_log,json=m7-links-to-log,proto3,enum=xnap.v1.Linkstolog" json:"m7_links_to_log,omitempty" aper:"valueExt,valueLB:0,valueUB:2,"`
	// @inject_tag: aper:"optional,sizeLB:1,"
	IEExtensions []*M7ConfigurationExtIes `protobuf:"bytes,3,rep,name=i_e_extensions,json=iE-Extensions,proto3" json:"i_e_extensions,omitempty" aper:"optional,sizeLB:1,"`
}

func (x *M7Configuration) Reset() {
	*x = M7Configuration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[303]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *M7Configuration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*M7Configuration) ProtoMessage() {}

func (x *M7Configuration) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[303]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use M7Configuration.ProtoReflect.Descriptor instead.
func (*M7Configuration) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{303}
}

func (x *M7Configuration) GetM7Period() *M7Period {
	if x != nil {
		return x.M7Period
	}
	return nil
}

func (x *M7Configuration) GetM7LinksToLog() Linkstolog {
	if x != nil {
		return x.M7LinksToLog
	}
	return Linkstolog_LINKS_TO_LOG_UPLINK
}

func (x *M7Configuration) GetIEExtensions() []*M7ConfigurationExtIes {
	if x != nil {
		return x.IEExtensions
	}
	return nil
}

// range of Integer from xnap_v1.asn1:4978
// {M7period}
type M7Period struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"valueExt,valueLB:1,valueUB:60,"
	Value int32 `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty" aper:"valueExt,valueLB:1,valueUB:60,"`
}

func (x *M7Period) Reset() {
	*x = M7Period{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[304]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *M7Period) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*M7Period) ProtoMessage() {}

func (x *M7Period) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[304]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use M7Period.ProtoReflect.Descriptor instead.
func (*M7Period) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{304}
}

func (x *M7Period) GetValue() int32 {
	if x != nil {
		return x.Value
	}
	return 0
}

// range of Integer from xnap_v1.asn1:4981
// {MAC-I}
type MacI struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"sizeLB:16,sizeUB:16,"
	Value *asn1.BitString `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty" aper:"sizeLB:16,sizeUB:16,"`
}

func (x *MacI) Reset() {
	*x = MacI{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[305]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MacI) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MacI) ProtoMessage() {}

func (x *MacI) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[305]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MacI.ProtoReflect.Descriptor instead.
func (*MacI) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{305}
}

func (x *MacI) GetValue() *asn1.BitString {
	if x != nil {
		return x.Value
	}
	return nil
}

// range of Integer from xnap_v1.asn1:4984
// {MaskedIMEISV}
type MaskedImeisv struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"sizeLB:64,sizeUB:64,"
	Value *asn1.BitString `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty" aper:"sizeLB:64,sizeUB:64,"`
}

func (x *MaskedImeisv) Reset() {
	*x = MaskedImeisv{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[306]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MaskedImeisv) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MaskedImeisv) ProtoMessage() {}

func (x *MaskedImeisv) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[306]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MaskedImeisv.ProtoReflect.Descriptor instead.
func (*MaskedImeisv) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{306}
}

func (x *MaskedImeisv) GetValue() *asn1.BitString {
	if x != nil {
		return x.Value
	}
	return nil
}

// range of Integer from xnap_v1.asn1:4987
// {MaxCHOpreparations}
type MaxChopreparations struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"valueExt,valueLB:1,valueUB:8,"
	Value int32 `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty" aper:"valueExt,valueLB:1,valueUB:8,"`
}

func (x *MaxChopreparations) Reset() {
	*x = MaxChopreparations{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[307]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MaxChopreparations) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MaxChopreparations) ProtoMessage() {}

func (x *MaxChopreparations) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[307]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MaxChopreparations.ProtoReflect.Descriptor instead.
func (*MaxChopreparations) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{307}
}

func (x *MaxChopreparations) GetValue() int32 {
	if x != nil {
		return x.Value
	}
	return 0
}

// range of Integer from xnap_v1.asn1:4990
// {MaximumDataBurstVolume}
type MaximumDataBurstVolume struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"valueExt,valueLB:4096,valueUB:2000000,"
	Value int32 `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty" aper:"valueExt,valueLB:4096,valueUB:2000000,"`
}

func (x *MaximumDataBurstVolume) Reset() {
	*x = MaximumDataBurstVolume{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[308]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MaximumDataBurstVolume) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MaximumDataBurstVolume) ProtoMessage() {}

func (x *MaximumDataBurstVolume) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[308]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MaximumDataBurstVolume.ProtoReflect.Descriptor instead.
func (*MaximumDataBurstVolume) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{308}
}

func (x *MaximumDataBurstVolume) GetValue() int32 {
	if x != nil {
		return x.Value
	}
	return 0
}

// value set from xnap_v1.asn1:4999
// {MaximumIPdatarate-ExtIEs}
type MaximumIpdatarateExtIes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *emptypb.Empty `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *MaximumIpdatarateExtIes) Reset() {
	*x = MaximumIpdatarateExtIes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[309]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MaximumIpdatarateExtIes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MaximumIpdatarateExtIes) ProtoMessage() {}

func (x *MaximumIpdatarateExtIes) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[309]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MaximumIpdatarateExtIes.ProtoReflect.Descriptor instead.
func (*MaximumIpdatarateExtIes) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{309}
}

func (x *MaximumIpdatarateExtIes) GetValue() *emptypb.Empty {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:4994
// @inject_tag: aper:"valueExt"
// {MaximumIPdatarate}
type MaximumIpdatarate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"valueExt,valueLB:0,valueUB:1,"
	MaxIprateUl MaxIprate `protobuf:"varint,1,opt,name=max_iprate_ul,json=maxIPrate-UL,proto3,enum=xnap.v1.MaxIprate" json:"max_iprate_ul,omitempty" aper:"valueExt,valueLB:0,valueUB:1,"`
	// @inject_tag: aper:"optional,sizeLB:1,"
	IEExtensions []*MaximumIpdatarateExtIes `protobuf:"bytes,2,rep,name=i_e_extensions,json=iE-Extensions,proto3" json:"i_e_extensions,omitempty" aper:"optional,sizeLB:1,"`
}

func (x *MaximumIpdatarate) Reset() {
	*x = MaximumIpdatarate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[310]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MaximumIpdatarate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MaximumIpdatarate) ProtoMessage() {}

func (x *MaximumIpdatarate) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[310]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MaximumIpdatarate.ProtoReflect.Descriptor instead.
func (*MaximumIpdatarate) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{310}
}

func (x *MaximumIpdatarate) GetMaxIprateUl() MaxIprate {
	if x != nil {
		return x.MaxIprateUl
	}
	return MaxIprate_MAX_IPRATE_BITRATE64KBS
}

func (x *MaximumIpdatarate) GetIEExtensions() []*MaximumIpdatarateExtIes {
	if x != nil {
		return x.IEExtensions
	}
	return nil
}

// range of Integer from xnap_v1.asn1:5011
// {MBSFNControlRegionLength}
type MbsfncontrolRegionLength struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"valueLB:0,valueUB:3,"
	Value int32 `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty" aper:"valueLB:0,valueUB:3,"`
}

func (x *MbsfncontrolRegionLength) Reset() {
	*x = MbsfncontrolRegionLength{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[311]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MbsfncontrolRegionLength) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MbsfncontrolRegionLength) ProtoMessage() {}

func (x *MbsfncontrolRegionLength) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[311]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MbsfncontrolRegionLength.ProtoReflect.Descriptor instead.
func (*MbsfncontrolRegionLength) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{311}
}

func (x *MbsfncontrolRegionLength) GetValue() int32 {
	if x != nil {
		return x.Value
	}
	return 0
}

// value set from xnap_v1.asn1:5020
// {MBSFNSubframeAllocation-E-UTRA-ExtIEs}
type MbsfnsubframeAllocationEUTraExtIes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *emptypb.Empty `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *MbsfnsubframeAllocationEUTraExtIes) Reset() {
	*x = MbsfnsubframeAllocationEUTraExtIes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[312]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MbsfnsubframeAllocationEUTraExtIes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MbsfnsubframeAllocationEUTraExtIes) ProtoMessage() {}

func (x *MbsfnsubframeAllocationEUTraExtIes) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[312]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MbsfnsubframeAllocationEUTraExtIes.ProtoReflect.Descriptor instead.
func (*MbsfnsubframeAllocationEUTraExtIes) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{312}
}

func (x *MbsfnsubframeAllocationEUTraExtIes) GetValue() *emptypb.Empty {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:5015
// {MBSFNSubframeAllocation-E-UTRA}
type MbsfnsubframeAllocationEUTra struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// choice from xnap_v1.asn1:5015
	//
	// Types that are assignable to MbsfnsubframeAllocationEUtra:
	//	*MbsfnsubframeAllocationEUTra_Oneframe
	//	*MbsfnsubframeAllocationEUTra_Fourframes
	//	*MbsfnsubframeAllocationEUTra_ChoiceExtension
	MbsfnsubframeAllocationEUtra isMbsfnsubframeAllocationEUTra_MbsfnsubframeAllocationEUtra `protobuf_oneof:"mbsfnsubframe_allocation_e_utra"`
}

func (x *MbsfnsubframeAllocationEUTra) Reset() {
	*x = MbsfnsubframeAllocationEUTra{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[313]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MbsfnsubframeAllocationEUTra) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MbsfnsubframeAllocationEUTra) ProtoMessage() {}

func (x *MbsfnsubframeAllocationEUTra) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[313]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MbsfnsubframeAllocationEUTra.ProtoReflect.Descriptor instead.
func (*MbsfnsubframeAllocationEUTra) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{313}
}

func (m *MbsfnsubframeAllocationEUTra) GetMbsfnsubframeAllocationEUtra() isMbsfnsubframeAllocationEUTra_MbsfnsubframeAllocationEUtra {
	if m != nil {
		return m.MbsfnsubframeAllocationEUtra
	}
	return nil
}

func (x *MbsfnsubframeAllocationEUTra) GetOneframe() *asn1.BitString {
	if x, ok := x.GetMbsfnsubframeAllocationEUtra().(*MbsfnsubframeAllocationEUTra_Oneframe); ok {
		return x.Oneframe
	}
	return nil
}

func (x *MbsfnsubframeAllocationEUTra) GetFourframes() *asn1.BitString {
	if x, ok := x.GetMbsfnsubframeAllocationEUtra().(*MbsfnsubframeAllocationEUTra_Fourframes); ok {
		return x.Fourframes
	}
	return nil
}

func (x *MbsfnsubframeAllocationEUTra) GetChoiceExtension() *MbsfnsubframeAllocationEUTraExtIes {
	if x, ok := x.GetMbsfnsubframeAllocationEUtra().(*MbsfnsubframeAllocationEUTra_ChoiceExtension); ok {
		return x.ChoiceExtension
	}
	return nil
}

type isMbsfnsubframeAllocationEUTra_MbsfnsubframeAllocationEUtra interface {
	isMbsfnsubframeAllocationEUTra_MbsfnsubframeAllocationEUtra()
}

type MbsfnsubframeAllocationEUTra_Oneframe struct {
	// @inject_tag: aper:"choiceIdx:1,sizeLB:6,sizeUB:6,"
	Oneframe *asn1.BitString `protobuf:"bytes,1,opt,name=oneframe,proto3,oneof" aper:"choiceIdx:1,sizeLB:6,sizeUB:6,"`
}

type MbsfnsubframeAllocationEUTra_Fourframes struct {
	// @inject_tag: aper:"choiceIdx:2,sizeLB:24,sizeUB:24,"
	Fourframes *asn1.BitString `protobuf:"bytes,2,opt,name=fourframes,proto3,oneof" aper:"choiceIdx:2,sizeLB:24,sizeUB:24,"`
}

type MbsfnsubframeAllocationEUTra_ChoiceExtension struct {
	// @inject_tag: aper:"choiceIdx:3,"
	ChoiceExtension *MbsfnsubframeAllocationEUTraExtIes `protobuf:"bytes,3,opt,name=choice_extension,json=choice-extension,proto3,oneof" aper:"choiceIdx:3,"`
}

func (*MbsfnsubframeAllocationEUTra_Oneframe) isMbsfnsubframeAllocationEUTra_MbsfnsubframeAllocationEUtra() {
}

func (*MbsfnsubframeAllocationEUTra_Fourframes) isMbsfnsubframeAllocationEUTra_MbsfnsubframeAllocationEUtra() {
}

func (*MbsfnsubframeAllocationEUTra_ChoiceExtension) isMbsfnsubframeAllocationEUTra_MbsfnsubframeAllocationEUtra() {
}

// sequence from xnap_v1.asn1:5028
// {MBSFNSubframeInfo-E-UTRA}
type MbsfnsubframeInfoEUTra struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"valueExt,sizeLB:1,sizeUB:8,"
	Value []*MbsfnsubframeInfoEUTraItem `protobuf:"bytes,1,rep,name=value,proto3" json:"value,omitempty" aper:"valueExt,sizeLB:1,sizeUB:8,"`
}

func (x *MbsfnsubframeInfoEUTra) Reset() {
	*x = MbsfnsubframeInfoEUTra{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[314]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MbsfnsubframeInfoEUTra) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MbsfnsubframeInfoEUTra) ProtoMessage() {}

func (x *MbsfnsubframeInfoEUTra) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[314]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MbsfnsubframeInfoEUTra.ProtoReflect.Descriptor instead.
func (*MbsfnsubframeInfoEUTra) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{314}
}

func (x *MbsfnsubframeInfoEUTra) GetValue() []*MbsfnsubframeInfoEUTraItem {
	if x != nil {
		return x.Value
	}
	return nil
}

// value set from xnap_v1.asn1:5036
// {MBSFNSubframeInfo-E-UTRA-Item-ExtIEs}
type MbsfnsubframeInfoEUTraItemExtIes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *emptypb.Empty `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *MbsfnsubframeInfoEUTraItemExtIes) Reset() {
	*x = MbsfnsubframeInfoEUTraItemExtIes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[315]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MbsfnsubframeInfoEUTraItemExtIes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MbsfnsubframeInfoEUTraItemExtIes) ProtoMessage() {}

func (x *MbsfnsubframeInfoEUTraItemExtIes) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[315]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MbsfnsubframeInfoEUTraItemExtIes.ProtoReflect.Descriptor instead.
func (*MbsfnsubframeInfoEUTraItemExtIes) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{315}
}

func (x *MbsfnsubframeInfoEUTraItemExtIes) GetValue() *emptypb.Empty {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:5029
// @inject_tag: aper:"valueExt"
// {MBSFNSubframeInfo-E-UTRA-Item}
type MbsfnsubframeInfoEUTraItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"valueExt,valueLB:0,valueUB:5,"
	RadioframeAllocationPeriod RadioframeAllocationPeriodMbsfnsubframeInfoEutraitem `protobuf:"varint,1,opt,name=radioframe_allocation_period,json=radioframeAllocationPeriod,proto3,enum=xnap.v1.RadioframeAllocationPeriodMbsfnsubframeInfoEutraitem" json:"radioframe_allocation_period,omitempty" aper:"valueExt,valueLB:0,valueUB:5,"`
	// @inject_tag: aper:"valueExt,valueLB:0,valueUB:7,"
	RadioframeAllocationOffset int32                         `protobuf:"varint,2,opt,name=radioframe_allocation_offset,json=radioframeAllocationOffset,proto3" json:"radioframe_allocation_offset,omitempty" aper:"valueExt,valueLB:0,valueUB:7,"`
	SubframeAllocation         *MbsfnsubframeAllocationEUTra `protobuf:"bytes,3,opt,name=subframe_allocation,json=subframeAllocation,proto3" json:"subframe_allocation,omitempty"`
	// @inject_tag: aper:"optional,sizeLB:1,"
	IEExtensions []*MbsfnsubframeInfoEUTraItemExtIes `protobuf:"bytes,4,rep,name=i_e_extensions,json=iE-Extensions,proto3" json:"i_e_extensions,omitempty" aper:"optional,sizeLB:1,"`
}

func (x *MbsfnsubframeInfoEUTraItem) Reset() {
	*x = MbsfnsubframeInfoEUTraItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[316]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MbsfnsubframeInfoEUTraItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MbsfnsubframeInfoEUTraItem) ProtoMessage() {}

func (x *MbsfnsubframeInfoEUTraItem) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[316]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MbsfnsubframeInfoEUTraItem.ProtoReflect.Descriptor instead.
func (*MbsfnsubframeInfoEUTraItem) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{316}
}

func (x *MbsfnsubframeInfoEUTraItem) GetRadioframeAllocationPeriod() RadioframeAllocationPeriodMbsfnsubframeInfoEutraitem {
	if x != nil {
		return x.RadioframeAllocationPeriod
	}
	return RadioframeAllocationPeriodMbsfnsubframeInfoEutraitem_RADIOFRAME_ALLOCATION_PERIOD_MBSFNSUBFRAME_INFO_EUTRAITEM_N1
}

func (x *MbsfnsubframeInfoEUTraItem) GetRadioframeAllocationOffset() int32 {
	if x != nil {
		return x.RadioframeAllocationOffset
	}
	return 0
}

func (x *MbsfnsubframeInfoEUTraItem) GetSubframeAllocation() *MbsfnsubframeAllocationEUTra {
	if x != nil {
		return x.SubframeAllocation
	}
	return nil
}

func (x *MbsfnsubframeInfoEUTraItem) GetIEExtensions() []*MbsfnsubframeInfoEUTraItemExtIes {
	if x != nil {
		return x.IEExtensions
	}
	return nil
}

// value set from xnap_v1.asn1:5053
// {MDT-Configuration-ExtIEs}
type MdtConfigurationExtIes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *emptypb.Empty `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *MdtConfigurationExtIes) Reset() {
	*x = MdtConfigurationExtIes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[317]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MdtConfigurationExtIes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MdtConfigurationExtIes) ProtoMessage() {}

func (x *MdtConfigurationExtIes) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[317]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MdtConfigurationExtIes.ProtoReflect.Descriptor instead.
func (*MdtConfigurationExtIes) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{317}
}

func (x *MdtConfigurationExtIes) GetValue() *emptypb.Empty {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:5048
// @inject_tag: aper:"valueExt"
// {MDT-Configuration}
type MdtConfiguration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"optional,valueExt,"
	MDtConfigurationNr *MdtConfigurationNR `protobuf:"bytes,1,opt,name=m_dt_configuration_nr,json=mDT-Configuration-NR,proto3,oneof" json:"m_dt_configuration_nr,omitempty" aper:"optional,valueExt,"`
	// @inject_tag: aper:"optional,valueExt,"
	MDtConfigurationEutra *MdtConfigurationEUtra `protobuf:"bytes,2,opt,name=m_dt_configuration_eutra,json=mDT-Configuration-EUTRA,proto3,oneof" json:"m_dt_configuration_eutra,omitempty" aper:"optional,valueExt,"`
	// @inject_tag: aper:"optional,sizeLB:1,"
	IEExtensions []*MdtConfigurationExtIes `protobuf:"bytes,3,rep,name=i_e_extensions,json=iE-Extensions,proto3" json:"i_e_extensions,omitempty" aper:"optional,sizeLB:1,"`
}

func (x *MdtConfiguration) Reset() {
	*x = MdtConfiguration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[318]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MdtConfiguration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MdtConfiguration) ProtoMessage() {}

func (x *MdtConfiguration) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[318]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MdtConfiguration.ProtoReflect.Descriptor instead.
func (*MdtConfiguration) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{318}
}

func (x *MdtConfiguration) GetMDtConfigurationNr() *MdtConfigurationNR {
	if x != nil {
		return x.MDtConfigurationNr
	}
	return nil
}

func (x *MdtConfiguration) GetMDtConfigurationEutra() *MdtConfigurationEUtra {
	if x != nil {
		return x.MDtConfigurationEutra
	}
	return nil
}

func (x *MdtConfiguration) GetIEExtensions() []*MdtConfigurationExtIes {
	if x != nil {
		return x.IEExtensions
	}
	return nil
}

// value set from xnap_v1.asn1:5065
// {MDT-Configuration-NR-ExtIEs}
type MdtConfigurationNRExtIes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *emptypb.Empty `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *MdtConfigurationNRExtIes) Reset() {
	*x = MdtConfigurationNRExtIes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[319]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MdtConfigurationNRExtIes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MdtConfigurationNRExtIes) ProtoMessage() {}

func (x *MdtConfigurationNRExtIes) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[319]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MdtConfigurationNRExtIes.ProtoReflect.Descriptor instead.
func (*MdtConfigurationNRExtIes) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{319}
}

func (x *MdtConfigurationNRExtIes) GetValue() *emptypb.Empty {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:5058
// @inject_tag: aper:"valueExt"
// {MDT-Configuration-NR}
type MdtConfigurationNR struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"valueExt,valueLB:0,valueUB:2,"
	MdtActivation MdtActivation `protobuf:"varint,1,opt,name=mdt_activation,json=mdt-Activation,proto3,enum=xnap.v1.MdtActivation" json:"mdt_activation,omitempty" aper:"valueExt,valueLB:0,valueUB:2,"`
	// @inject_tag: aper:"optional,choiceExt,"
	AreaScopeOfMdtNr *AreaScopeOfMdtNR `protobuf:"bytes,2,opt,name=area_scope_of_mdt_nr,json=areaScopeOfMDT-NR,proto3,oneof" json:"area_scope_of_mdt_nr,omitempty" aper:"optional,choiceExt,"`
	// @inject_tag: aper:"choiceExt,"
	MDtmodeNr                  *MdtmodeNR   `protobuf:"bytes,3,opt,name=m_dtmode_nr,json=mDTMode-NR,proto3" json:"m_dtmode_nr,omitempty" aper:"choiceExt,"`
	SignallingBasedMdtplmnlist *Mdtplmnlist `protobuf:"bytes,4,opt,name=signalling_based_mdtplmnlist,json=signallingBasedMDTPLMNList,proto3" json:"signalling_based_mdtplmnlist,omitempty"`
	// @inject_tag: aper:"optional,sizeLB:1,"
	IEExtensions []*MdtConfigurationNRExtIes `protobuf:"bytes,5,rep,name=i_e_extensions,json=iE-Extensions,proto3" json:"i_e_extensions,omitempty" aper:"optional,sizeLB:1,"`
}

func (x *MdtConfigurationNR) Reset() {
	*x = MdtConfigurationNR{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[320]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MdtConfigurationNR) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MdtConfigurationNR) ProtoMessage() {}

func (x *MdtConfigurationNR) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[320]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MdtConfigurationNR.ProtoReflect.Descriptor instead.
func (*MdtConfigurationNR) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{320}
}

func (x *MdtConfigurationNR) GetMdtActivation() MdtActivation {
	if x != nil {
		return x.MdtActivation
	}
	return MdtActivation_MDT_ACTIVATION_IMMEDIATE_MDT_ONLY
}

func (x *MdtConfigurationNR) GetAreaScopeOfMdtNr() *AreaScopeOfMdtNR {
	if x != nil {
		return x.AreaScopeOfMdtNr
	}
	return nil
}

func (x *MdtConfigurationNR) GetMDtmodeNr() *MdtmodeNR {
	if x != nil {
		return x.MDtmodeNr
	}
	return nil
}

func (x *MdtConfigurationNR) GetSignallingBasedMdtplmnlist() *Mdtplmnlist {
	if x != nil {
		return x.SignallingBasedMdtplmnlist
	}
	return nil
}

func (x *MdtConfigurationNR) GetIEExtensions() []*MdtConfigurationNRExtIes {
	if x != nil {
		return x.IEExtensions
	}
	return nil
}

// value set from xnap_v1.asn1:5077
// {MDT-Configuration-EUTRA-ExtIEs}
type MdtConfigurationEUtraExtIes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *emptypb.Empty `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *MdtConfigurationEUtraExtIes) Reset() {
	*x = MdtConfigurationEUtraExtIes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[321]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MdtConfigurationEUtraExtIes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MdtConfigurationEUtraExtIes) ProtoMessage() {}

func (x *MdtConfigurationEUtraExtIes) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[321]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MdtConfigurationEUtraExtIes.ProtoReflect.Descriptor instead.
func (*MdtConfigurationEUtraExtIes) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{321}
}

func (x *MdtConfigurationEUtraExtIes) GetValue() *emptypb.Empty {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:5070
// @inject_tag: aper:"valueExt"
// {MDT-Configuration-EUTRA}
type MdtConfigurationEUtra struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"valueExt,valueLB:0,valueUB:2,"
	MdtActivation MdtActivation `protobuf:"varint,1,opt,name=mdt_activation,json=mdt-Activation,proto3,enum=xnap.v1.MdtActivation" json:"mdt_activation,omitempty" aper:"valueExt,valueLB:0,valueUB:2,"`
	// @inject_tag: aper:"optional,choiceExt,"
	AreaScopeOfMdtEutra *AreaScopeOfMdtEUtra `protobuf:"bytes,2,opt,name=area_scope_of_mdt_eutra,json=areaScopeOfMDT-EUTRA,proto3,oneof" json:"area_scope_of_mdt_eutra,omitempty" aper:"optional,choiceExt,"`
	// @inject_tag: aper:"choiceExt,"
	MDtmodeEutra               *MdtmodeEUtra `protobuf:"bytes,3,opt,name=m_dtmode_eutra,json=mDTMode-EUTRA,proto3" json:"m_dtmode_eutra,omitempty" aper:"choiceExt,"`
	SignallingBasedMdtplmnlist *Mdtplmnlist  `protobuf:"bytes,4,opt,name=signalling_based_mdtplmnlist,json=signallingBasedMDTPLMNList,proto3" json:"signalling_based_mdtplmnlist,omitempty"`
	// @inject_tag: aper:"optional,sizeLB:1,"
	IEExtensions []*MdtConfigurationEUtraExtIes `protobuf:"bytes,5,rep,name=i_e_extensions,json=iE-Extensions,proto3" json:"i_e_extensions,omitempty" aper:"optional,sizeLB:1,"`
}

func (x *MdtConfigurationEUtra) Reset() {
	*x = MdtConfigurationEUtra{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[322]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MdtConfigurationEUtra) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MdtConfigurationEUtra) ProtoMessage() {}

func (x *MdtConfigurationEUtra) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[322]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MdtConfigurationEUtra.ProtoReflect.Descriptor instead.
func (*MdtConfigurationEUtra) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{322}
}

func (x *MdtConfigurationEUtra) GetMdtActivation() MdtActivation {
	if x != nil {
		return x.MdtActivation
	}
	return MdtActivation_MDT_ACTIVATION_IMMEDIATE_MDT_ONLY
}

func (x *MdtConfigurationEUtra) GetAreaScopeOfMdtEutra() *AreaScopeOfMdtEUtra {
	if x != nil {
		return x.AreaScopeOfMdtEutra
	}
	return nil
}

func (x *MdtConfigurationEUtra) GetMDtmodeEutra() *MdtmodeEUtra {
	if x != nil {
		return x.MDtmodeEutra
	}
	return nil
}

func (x *MdtConfigurationEUtra) GetSignallingBasedMdtplmnlist() *Mdtplmnlist {
	if x != nil {
		return x.SignallingBasedMdtplmnlist
	}
	return nil
}

func (x *MdtConfigurationEUtra) GetIEExtensions() []*MdtConfigurationEUtraExtIes {
	if x != nil {
		return x.IEExtensions
	}
	return nil
}

// range of Integer from xnap_v1.asn1:5082
// {MDT-Location-Info}
type MdtLocationInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"sizeLB:8,sizeUB:8,"
	Value *asn1.BitString `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty" aper:"sizeLB:8,sizeUB:8,"`
}

func (x *MdtLocationInfo) Reset() {
	*x = MdtLocationInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[323]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MdtLocationInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MdtLocationInfo) ProtoMessage() {}

func (x *MdtLocationInfo) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[323]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MdtLocationInfo.ProtoReflect.Descriptor instead.
func (*MdtLocationInfo) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{323}
}

func (x *MdtLocationInfo) GetValue() *asn1.BitString {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:5087
// {MDTPLMNList}
type Mdtplmnlist struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"sizeLB:1,sizeUB:16,"
	Value []*PlmnIdentity `protobuf:"bytes,1,rep,name=value,proto3" json:"value,omitempty" aper:"sizeLB:1,sizeUB:16,"`
}

func (x *Mdtplmnlist) Reset() {
	*x = Mdtplmnlist{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[324]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Mdtplmnlist) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Mdtplmnlist) ProtoMessage() {}

func (x *Mdtplmnlist) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[324]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Mdtplmnlist.ProtoReflect.Descriptor instead.
func (*Mdtplmnlist) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{324}
}

func (x *Mdtplmnlist) GetValue() []*PlmnIdentity {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:5088
// @inject_tag: aper:"choiceExt"
// {MDTMode-NR}
type MdtmodeNR struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// choice from xnap_v1.asn1:5088
	//
	// Types that are assignable to MdtmodeNr:
	//	*MdtmodeNR_ImmediateMdt
	//	*MdtmodeNR_LoggedMdt
	//	*MdtmodeNR_MDtmodeNrExtension
	MdtmodeNr isMdtmodeNR_MdtmodeNr `protobuf_oneof:"mdtmode_nr"`
}

func (x *MdtmodeNR) Reset() {
	*x = MdtmodeNR{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[325]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MdtmodeNR) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MdtmodeNR) ProtoMessage() {}

func (x *MdtmodeNR) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[325]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MdtmodeNR.ProtoReflect.Descriptor instead.
func (*MdtmodeNR) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{325}
}

func (m *MdtmodeNR) GetMdtmodeNr() isMdtmodeNR_MdtmodeNr {
	if m != nil {
		return m.MdtmodeNr
	}
	return nil
}

func (x *MdtmodeNR) GetImmediateMdt() *ImmediateMdtNR {
	if x, ok := x.GetMdtmodeNr().(*MdtmodeNR_ImmediateMdt); ok {
		return x.ImmediateMdt
	}
	return nil
}

func (x *MdtmodeNR) GetLoggedMdt() *LoggedMdtNR {
	if x, ok := x.GetMdtmodeNr().(*MdtmodeNR_LoggedMdt); ok {
		return x.LoggedMdt
	}
	return nil
}

func (x *MdtmodeNR) GetMDtmodeNrExtension() *MdtmodeNRExtension {
	if x, ok := x.GetMdtmodeNr().(*MdtmodeNR_MDtmodeNrExtension); ok {
		return x.MDtmodeNrExtension
	}
	return nil
}

type isMdtmodeNR_MdtmodeNr interface {
	isMdtmodeNR_MdtmodeNr()
}

type MdtmodeNR_ImmediateMdt struct {
	// @inject_tag: aper:"choiceIdx:1,valueExt,"
	ImmediateMdt *ImmediateMdtNR `protobuf:"bytes,1,opt,name=immediate_mdt,json=immediateMDT,proto3,oneof" aper:"choiceIdx:1,valueExt,"`
}

type MdtmodeNR_LoggedMdt struct {
	// @inject_tag: aper:"choiceIdx:2,valueExt,"
	LoggedMdt *LoggedMdtNR `protobuf:"bytes,2,opt,name=logged_mdt,json=loggedMDT,proto3,oneof" aper:"choiceIdx:2,valueExt,"`
}

type MdtmodeNR_MDtmodeNrExtension struct {
	// @inject_tag: aper:"choiceIdx:3,fromChoiceExt,"
	MDtmodeNrExtension *MdtmodeNRExtension `protobuf:"bytes,3,opt,name=m_dtmode_nr_extension,json=mDTMode-NR-Extension,proto3,oneof" aper:"choiceIdx:3,fromChoiceExt,"`
}

func (*MdtmodeNR_ImmediateMdt) isMdtmodeNR_MdtmodeNr() {}

func (*MdtmodeNR_LoggedMdt) isMdtmodeNR_MdtmodeNr() {}

func (*MdtmodeNR_MDtmodeNrExtension) isMdtmodeNR_MdtmodeNr() {}

// reference from xnap_v1.asn1:5094
// {MDTMode-NR-Extension}
type MdtmodeNRExtension struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *MdtmodeNRExtensionIe `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *MdtmodeNRExtension) Reset() {
	*x = MdtmodeNRExtension{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[326]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MdtmodeNRExtension) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MdtmodeNRExtension) ProtoMessage() {}

func (x *MdtmodeNRExtension) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[326]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MdtmodeNRExtension.ProtoReflect.Descriptor instead.
func (*MdtmodeNRExtension) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{326}
}

func (x *MdtmodeNRExtension) GetValue() *MdtmodeNRExtensionIe {
	if x != nil {
		return x.Value
	}
	return nil
}

// value set from xnap_v1.asn1:5096
// {MDTMode-NR-ExtensionIE}
type MdtmodeNRExtensionIe struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *emptypb.Empty `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *MdtmodeNRExtensionIe) Reset() {
	*x = MdtmodeNRExtensionIe{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[327]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MdtmodeNRExtensionIe) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MdtmodeNRExtensionIe) ProtoMessage() {}

func (x *MdtmodeNRExtensionIe) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[327]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MdtmodeNRExtensionIe.ProtoReflect.Descriptor instead.
func (*MdtmodeNRExtensionIe) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{327}
}

func (x *MdtmodeNRExtensionIe) GetValue() *emptypb.Empty {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:5101
// @inject_tag: aper:"choiceExt"
// {MDTMode-EUTRA}
type MdtmodeEUtra struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// choice from xnap_v1.asn1:5101
	//
	// Types that are assignable to MdtmodeEutra:
	//	*MdtmodeEUtra_ImmediateMdt
	//	*MdtmodeEUtra_LoggedMdt
	//	*MdtmodeEUtra_MDtmodeEutraExtension
	MdtmodeEutra isMdtmodeEUtra_MdtmodeEutra `protobuf_oneof:"mdtmode_eutra"`
}

func (x *MdtmodeEUtra) Reset() {
	*x = MdtmodeEUtra{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[328]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MdtmodeEUtra) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MdtmodeEUtra) ProtoMessage() {}

func (x *MdtmodeEUtra) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[328]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MdtmodeEUtra.ProtoReflect.Descriptor instead.
func (*MdtmodeEUtra) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{328}
}

func (m *MdtmodeEUtra) GetMdtmodeEutra() isMdtmodeEUtra_MdtmodeEutra {
	if m != nil {
		return m.MdtmodeEutra
	}
	return nil
}

func (x *MdtmodeEUtra) GetImmediateMdt() *ImmediateMdtEUtra {
	if x, ok := x.GetMdtmodeEutra().(*MdtmodeEUtra_ImmediateMdt); ok {
		return x.ImmediateMdt
	}
	return nil
}

func (x *MdtmodeEUtra) GetLoggedMdt() *LoggedMdtEUtra {
	if x, ok := x.GetMdtmodeEutra().(*MdtmodeEUtra_LoggedMdt); ok {
		return x.LoggedMdt
	}
	return nil
}

func (x *MdtmodeEUtra) GetMDtmodeEutraExtension() *MdtmodeEUtraExtension {
	if x, ok := x.GetMdtmodeEutra().(*MdtmodeEUtra_MDtmodeEutraExtension); ok {
		return x.MDtmodeEutraExtension
	}
	return nil
}

type isMdtmodeEUtra_MdtmodeEutra interface {
	isMdtmodeEUtra_MdtmodeEutra()
}

type MdtmodeEUtra_ImmediateMdt struct {
	// @inject_tag: aper:"choiceIdx:1,"
	ImmediateMdt *ImmediateMdtEUtra `protobuf:"bytes,1,opt,name=immediate_mdt,json=immediateMDT,proto3,oneof" aper:"choiceIdx:1,"`
}

type MdtmodeEUtra_LoggedMdt struct {
	// @inject_tag: aper:"choiceIdx:2,valueExt,"
	LoggedMdt *LoggedMdtEUtra `protobuf:"bytes,2,opt,name=logged_mdt,json=loggedMDT,proto3,oneof" aper:"choiceIdx:2,valueExt,"`
}

type MdtmodeEUtra_MDtmodeEutraExtension struct {
	// @inject_tag: aper:"choiceIdx:3,fromChoiceExt,"
	MDtmodeEutraExtension *MdtmodeEUtraExtension `protobuf:"bytes,3,opt,name=m_dtmode_eutra_extension,json=mDTMode-EUTRA-Extension,proto3,oneof" aper:"choiceIdx:3,fromChoiceExt,"`
}

func (*MdtmodeEUtra_ImmediateMdt) isMdtmodeEUtra_MdtmodeEutra() {}

func (*MdtmodeEUtra_LoggedMdt) isMdtmodeEUtra_MdtmodeEutra() {}

func (*MdtmodeEUtra_MDtmodeEutraExtension) isMdtmodeEUtra_MdtmodeEutra() {}

// reference from xnap_v1.asn1:5107
// {MDTMode-EUTRA-Extension}
type MdtmodeEUtraExtension struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *MdtmodeEUtraExtensionIe `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *MdtmodeEUtraExtension) Reset() {
	*x = MdtmodeEUtraExtension{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[329]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MdtmodeEUtraExtension) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MdtmodeEUtraExtension) ProtoMessage() {}

func (x *MdtmodeEUtraExtension) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[329]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MdtmodeEUtraExtension.ProtoReflect.Descriptor instead.
func (*MdtmodeEUtraExtension) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{329}
}

func (x *MdtmodeEUtraExtension) GetValue() *MdtmodeEUtraExtensionIe {
	if x != nil {
		return x.Value
	}
	return nil
}

// value set from xnap_v1.asn1:5109
// {MDTMode-EUTRA-ExtensionIE}
type MdtmodeEUtraExtensionIe struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *emptypb.Empty `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *MdtmodeEUtraExtensionIe) Reset() {
	*x = MdtmodeEUtraExtensionIe{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[330]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MdtmodeEUtraExtensionIe) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MdtmodeEUtraExtensionIe) ProtoMessage() {}

func (x *MdtmodeEUtraExtensionIe) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[330]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MdtmodeEUtraExtensionIe.ProtoReflect.Descriptor instead.
func (*MdtmodeEUtraExtensionIe) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{330}
}

func (x *MdtmodeEUtraExtensionIe) GetValue() *emptypb.Empty {
	if x != nil {
		return x.Value
	}
	return nil
}

// range of Integer from xnap_v1.asn1:5113
// {MeasurementsToActivate}
type MeasurementsToActivate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"sizeLB:8,sizeUB:8,"
	Value *asn1.BitString `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty" aper:"sizeLB:8,sizeUB:8,"`
}

func (x *MeasurementsToActivate) Reset() {
	*x = MeasurementsToActivate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[331]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MeasurementsToActivate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MeasurementsToActivate) ProtoMessage() {}

func (x *MeasurementsToActivate) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[331]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MeasurementsToActivate.ProtoReflect.Descriptor instead.
func (*MeasurementsToActivate) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{331}
}

func (x *MeasurementsToActivate) GetValue() *asn1.BitString {
	if x != nil {
		return x.Value
	}
	return nil
}

// value set from xnap_v1.asn1:5122
// {MeasurementThresholdA2-ExtIEs}
type MeasurementThresholdA2ExtIes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *emptypb.Empty `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *MeasurementThresholdA2ExtIes) Reset() {
	*x = MeasurementThresholdA2ExtIes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[332]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MeasurementThresholdA2ExtIes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MeasurementThresholdA2ExtIes) ProtoMessage() {}

func (x *MeasurementThresholdA2ExtIes) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[332]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MeasurementThresholdA2ExtIes.ProtoReflect.Descriptor instead.
func (*MeasurementThresholdA2ExtIes) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{332}
}

func (x *MeasurementThresholdA2ExtIes) GetValue() *emptypb.Empty {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:5116
// {MeasurementThresholdA2}
type MeasurementThresholdA2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// choice from xnap_v1.asn1:5116
	//
	// Types that are assignable to MeasurementThresholdA2:
	//	*MeasurementThresholdA2_ThresholdRsrp
	//	*MeasurementThresholdA2_ThresholdRsrq
	//	*MeasurementThresholdA2_ThresholdSinr
	//	*MeasurementThresholdA2_ChoiceExtension
	MeasurementThresholdA2 isMeasurementThresholdA2_MeasurementThresholdA2 `protobuf_oneof:"measurement_threshold_a2"`
}

func (x *MeasurementThresholdA2) Reset() {
	*x = MeasurementThresholdA2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[333]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MeasurementThresholdA2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MeasurementThresholdA2) ProtoMessage() {}

func (x *MeasurementThresholdA2) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[333]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MeasurementThresholdA2.ProtoReflect.Descriptor instead.
func (*MeasurementThresholdA2) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{333}
}

func (m *MeasurementThresholdA2) GetMeasurementThresholdA2() isMeasurementThresholdA2_MeasurementThresholdA2 {
	if m != nil {
		return m.MeasurementThresholdA2
	}
	return nil
}

func (x *MeasurementThresholdA2) GetThresholdRsrp() *ThresholdRSrp {
	if x, ok := x.GetMeasurementThresholdA2().(*MeasurementThresholdA2_ThresholdRsrp); ok {
		return x.ThresholdRsrp
	}
	return nil
}

func (x *MeasurementThresholdA2) GetThresholdRsrq() *ThresholdRSrq {
	if x, ok := x.GetMeasurementThresholdA2().(*MeasurementThresholdA2_ThresholdRsrq); ok {
		return x.ThresholdRsrq
	}
	return nil
}

func (x *MeasurementThresholdA2) GetThresholdSinr() *ThresholdSInr {
	if x, ok := x.GetMeasurementThresholdA2().(*MeasurementThresholdA2_ThresholdSinr); ok {
		return x.ThresholdSinr
	}
	return nil
}

func (x *MeasurementThresholdA2) GetChoiceExtension() *MeasurementThresholdA2ExtIes {
	if x, ok := x.GetMeasurementThresholdA2().(*MeasurementThresholdA2_ChoiceExtension); ok {
		return x.ChoiceExtension
	}
	return nil
}

type isMeasurementThresholdA2_MeasurementThresholdA2 interface {
	isMeasurementThresholdA2_MeasurementThresholdA2()
}

type MeasurementThresholdA2_ThresholdRsrp struct {
	// @inject_tag: aper:"choiceIdx:1,"
	ThresholdRsrp *ThresholdRSrp `protobuf:"bytes,1,opt,name=threshold_rsrp,json=threshold-RSRP,proto3,oneof" aper:"choiceIdx:1,"`
}

type MeasurementThresholdA2_ThresholdRsrq struct {
	// @inject_tag: aper:"choiceIdx:2,"
	ThresholdRsrq *ThresholdRSrq `protobuf:"bytes,2,opt,name=threshold_rsrq,json=threshold-RSRQ,proto3,oneof" aper:"choiceIdx:2,"`
}

type MeasurementThresholdA2_ThresholdSinr struct {
	// @inject_tag: aper:"choiceIdx:3,"
	ThresholdSinr *ThresholdSInr `protobuf:"bytes,3,opt,name=threshold_sinr,json=threshold-SINR,proto3,oneof" aper:"choiceIdx:3,"`
}

type MeasurementThresholdA2_ChoiceExtension struct {
	// @inject_tag: aper:"choiceIdx:4,"
	ChoiceExtension *MeasurementThresholdA2ExtIes `protobuf:"bytes,4,opt,name=choice_extension,json=choice-extension,proto3,oneof" aper:"choiceIdx:4,"`
}

func (*MeasurementThresholdA2_ThresholdRsrp) isMeasurementThresholdA2_MeasurementThresholdA2() {}

func (*MeasurementThresholdA2_ThresholdRsrq) isMeasurementThresholdA2_MeasurementThresholdA2() {}

func (*MeasurementThresholdA2_ThresholdSinr) isMeasurementThresholdA2_MeasurementThresholdA2() {}

func (*MeasurementThresholdA2_ChoiceExtension) isMeasurementThresholdA2_MeasurementThresholdA2() {}

// range of Integer from xnap_v1.asn1:5127
// {Measurement-ID}
type MeasurementID struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"valueExt,valueLB:1,valueUB:4095,"
	Value int32 `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty" aper:"valueExt,valueLB:1,valueUB:4095,"`
}

func (x *MeasurementID) Reset() {
	*x = MeasurementID{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[334]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MeasurementID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MeasurementID) ProtoMessage() {}

func (x *MeasurementID) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[334]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MeasurementID.ProtoReflect.Descriptor instead.
func (*MeasurementID) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{334}
}

func (x *MeasurementID) GetValue() int32 {
	if x != nil {
		return x.Value
	}
	return 0
}

// range of Integer from xnap_v1.asn1:5130
// {MobilityInformation}
type MobilityInformation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"sizeLB:32,sizeUB:32,"
	Value *asn1.BitString `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty" aper:"sizeLB:32,sizeUB:32,"`
}

func (x *MobilityInformation) Reset() {
	*x = MobilityInformation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[335]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MobilityInformation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MobilityInformation) ProtoMessage() {}

func (x *MobilityInformation) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[335]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MobilityInformation.ProtoReflect.Descriptor instead.
func (*MobilityInformation) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{335}
}

func (x *MobilityInformation) GetValue() *asn1.BitString {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:5133
// @inject_tag: aper:"valueExt"
// {MobilityParametersModificationRange}
type MobilityParametersModificationRange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HandoverTriggerChangeLowerLimit int32 `protobuf:"varint,1,opt,name=handover_trigger_change_lower_limit,json=handoverTriggerChangeLowerLimit,proto3" json:"handover_trigger_change_lower_limit,omitempty"`
	HandoverTriggerChangeUpperLimit int32 `protobuf:"varint,2,opt,name=handover_trigger_change_upper_limit,json=handoverTriggerChangeUpperLimit,proto3" json:"handover_trigger_change_upper_limit,omitempty"`
}

func (x *MobilityParametersModificationRange) Reset() {
	*x = MobilityParametersModificationRange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[336]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MobilityParametersModificationRange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MobilityParametersModificationRange) ProtoMessage() {}

func (x *MobilityParametersModificationRange) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[336]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MobilityParametersModificationRange.ProtoReflect.Descriptor instead.
func (*MobilityParametersModificationRange) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{336}
}

func (x *MobilityParametersModificationRange) GetHandoverTriggerChangeLowerLimit() int32 {
	if x != nil {
		return x.HandoverTriggerChangeLowerLimit
	}
	return 0
}

func (x *MobilityParametersModificationRange) GetHandoverTriggerChangeUpperLimit() int32 {
	if x != nil {
		return x.HandoverTriggerChangeUpperLimit
	}
	return 0
}

// sequence from xnap_v1.asn1:5139
// @inject_tag: aper:"valueExt"
// {MobilityParametersInformation}
type MobilityParametersInformation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HandoverTriggerChange int32 `protobuf:"varint,1,opt,name=handover_trigger_change,json=handoverTriggerChange,proto3" json:"handover_trigger_change,omitempty"`
}

func (x *MobilityParametersInformation) Reset() {
	*x = MobilityParametersInformation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[337]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MobilityParametersInformation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MobilityParametersInformation) ProtoMessage() {}

func (x *MobilityParametersInformation) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[337]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MobilityParametersInformation.ProtoReflect.Descriptor instead.
func (*MobilityParametersInformation) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{337}
}

func (x *MobilityParametersInformation) GetHandoverTriggerChange() int32 {
	if x != nil {
		return x.HandoverTriggerChange
	}
	return 0
}

// value set from xnap_v1.asn1:5154
// {MobilityRestrictionList-ExtIEs&Extension}
type MobilityRestrictionListExtIesExtension struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// value set translated as choice from xnap_v1.asn1:5154
	//
	// Types that are assignable to MobilityRestrictionListExtIes:
	//	*MobilityRestrictionListExtIesExtension_IdLastEUtranplmnidentity
	//	*MobilityRestrictionListExtIesExtension_IdCntypeRestrictionsForServing
	//	*MobilityRestrictionListExtIesExtension_IdCntypeRestrictionsForEquivalent
	//	*MobilityRestrictionListExtIesExtension_IdNpnmobilityInformation
	MobilityRestrictionListExtIes isMobilityRestrictionListExtIesExtension_MobilityRestrictionListExtIes `protobuf_oneof:"mobility_restriction_list_ext_ies"`
}

func (x *MobilityRestrictionListExtIesExtension) Reset() {
	*x = MobilityRestrictionListExtIesExtension{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[338]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MobilityRestrictionListExtIesExtension) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MobilityRestrictionListExtIesExtension) ProtoMessage() {}

func (x *MobilityRestrictionListExtIesExtension) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[338]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MobilityRestrictionListExtIesExtension.ProtoReflect.Descriptor instead.
func (*MobilityRestrictionListExtIesExtension) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{338}
}

func (m *MobilityRestrictionListExtIesExtension) GetMobilityRestrictionListExtIes() isMobilityRestrictionListExtIesExtension_MobilityRestrictionListExtIes {
	if m != nil {
		return m.MobilityRestrictionListExtIes
	}
	return nil
}

func (x *MobilityRestrictionListExtIesExtension) GetIdLastEUtranplmnidentity() *PlmnIdentity {
	if x, ok := x.GetMobilityRestrictionListExtIes().(*MobilityRestrictionListExtIesExtension_IdLastEUtranplmnidentity); ok {
		return x.IdLastEUtranplmnidentity
	}
	return nil
}

func (x *MobilityRestrictionListExtIesExtension) GetIdCntypeRestrictionsForServing() CntypeRestrictionsForServing {
	if x, ok := x.GetMobilityRestrictionListExtIes().(*MobilityRestrictionListExtIesExtension_IdCntypeRestrictionsForServing); ok {
		return x.IdCntypeRestrictionsForServing
	}
	return CntypeRestrictionsForServing_CNTYPE_RESTRICTIONS_FOR_SERVING_EPC_FORBIDDEN
}

func (x *MobilityRestrictionListExtIesExtension) GetIdCntypeRestrictionsForEquivalent() *CntypeRestrictionsForEquivalent {
	if x, ok := x.GetMobilityRestrictionListExtIes().(*MobilityRestrictionListExtIesExtension_IdCntypeRestrictionsForEquivalent); ok {
		return x.IdCntypeRestrictionsForEquivalent
	}
	return nil
}

func (x *MobilityRestrictionListExtIesExtension) GetIdNpnmobilityInformation() *NpnmobilityInformation {
	if x, ok := x.GetMobilityRestrictionListExtIes().(*MobilityRestrictionListExtIesExtension_IdNpnmobilityInformation); ok {
		return x.IdNpnmobilityInformation
	}
	return nil
}

type isMobilityRestrictionListExtIesExtension_MobilityRestrictionListExtIes interface {
	isMobilityRestrictionListExtIesExtension_MobilityRestrictionListExtIes()
}

type MobilityRestrictionListExtIesExtension_IdLastEUtranplmnidentity struct {
	// @inject_tag: aper:"choiceIdx:1,"
	IdLastEUtranplmnidentity *PlmnIdentity `protobuf:"bytes,1,opt,name=id_last_e_utranplmnidentity,json=id-LastE-UTRANPLMNIdentity,proto3,oneof" aper:"choiceIdx:1,"`
}

type MobilityRestrictionListExtIesExtension_IdCntypeRestrictionsForServing struct {
	// @inject_tag: aper:"choiceIdx:2,valueExt,valueLB:0,valueUB:0,"
	IdCntypeRestrictionsForServing CntypeRestrictionsForServing `protobuf:"varint,2,opt,name=id_cntype_restrictions_for_serving,json=id-CNTypeRestrictionsForServing,proto3,enum=xnap.v1.CntypeRestrictionsForServing,oneof" aper:"choiceIdx:2,valueExt,valueLB:0,valueUB:0,"`
}

type MobilityRestrictionListExtIesExtension_IdCntypeRestrictionsForEquivalent struct {
	// @inject_tag: aper:"choiceIdx:3,"
	IdCntypeRestrictionsForEquivalent *CntypeRestrictionsForEquivalent `protobuf:"bytes,3,opt,name=id_cntype_restrictions_for_equivalent,json=id-CNTypeRestrictionsForEquivalent,proto3,oneof" aper:"choiceIdx:3,"`
}

type MobilityRestrictionListExtIesExtension_IdNpnmobilityInformation struct {
	// @inject_tag: aper:"choiceIdx:4,"
	IdNpnmobilityInformation *NpnmobilityInformation `protobuf:"bytes,4,opt,name=id_npnmobility_information,json=id-NPNMobilityInformation,proto3,oneof" aper:"choiceIdx:4,"`
}

func (*MobilityRestrictionListExtIesExtension_IdLastEUtranplmnidentity) isMobilityRestrictionListExtIesExtension_MobilityRestrictionListExtIes() {
}

func (*MobilityRestrictionListExtIesExtension_IdCntypeRestrictionsForServing) isMobilityRestrictionListExtIesExtension_MobilityRestrictionListExtIes() {
}

func (*MobilityRestrictionListExtIesExtension_IdCntypeRestrictionsForEquivalent) isMobilityRestrictionListExtIesExtension_MobilityRestrictionListExtIes() {
}

func (*MobilityRestrictionListExtIesExtension_IdNpnmobilityInformation) isMobilityRestrictionListExtIesExtension_MobilityRestrictionListExtIes() {
}

// concrete instance(s) of class XNAP-PROTOCOL-EXTENSION from xnap_v1.asn1:5154
// @inject_tag: aper:"valueExt"
// {MobilityRestrictionList-ExtIEs}
type MobilityRestrictionListExtIes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"unique,"
	Id *xnap_commondatatypes.ProtocolIeID `protobuf:"bytes,1,opt,name=id,json=&id,proto3" json:"id,omitempty" aper:"unique,"`
	// @inject_tag: aper:"valueLB:0,valueUB:2,"
	Criticality xnap_commondatatypes.Criticality `protobuf:"varint,2,opt,name=criticality,json=&criticality,proto3,enum=xnap.v1.Criticality" json:"criticality,omitempty" aper:"valueLB:0,valueUB:2,"`
	// @inject_tag: aper:"canonicalOrder,"
	Extension *MobilityRestrictionListExtIesExtension `protobuf:"bytes,3,opt,name=extension,json=&Extension,proto3" json:"extension,omitempty" aper:"canonicalOrder,"`
}

func (x *MobilityRestrictionListExtIes) Reset() {
	*x = MobilityRestrictionListExtIes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[339]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MobilityRestrictionListExtIes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MobilityRestrictionListExtIes) ProtoMessage() {}

func (x *MobilityRestrictionListExtIes) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[339]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MobilityRestrictionListExtIes.ProtoReflect.Descriptor instead.
func (*MobilityRestrictionListExtIes) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{339}
}

func (x *MobilityRestrictionListExtIes) GetId() *xnap_commondatatypes.ProtocolIeID {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *MobilityRestrictionListExtIes) GetCriticality() xnap_commondatatypes.Criticality {
	if x != nil {
		return x.Criticality
	}
	return xnap_commondatatypes.Criticality(0)
}

func (x *MobilityRestrictionListExtIes) GetExtension() *MobilityRestrictionListExtIesExtension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// sequence from xnap_v1.asn1:5145
// @inject_tag: aper:"valueExt"
// {MobilityRestrictionList}
type MobilityRestrictionList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServingPlmn *PlmnIdentity `protobuf:"bytes,1,opt,name=serving_plmn,json=serving-PLMN,proto3" json:"serving_plmn,omitempty"`
	// @inject_tag: aper:"optional,sizeLB:1,sizeUB:15,"
	EquivalentPlmns []*PlmnIdentity `protobuf:"bytes,2,rep,name=equivalent_plmns,json=equivalent-PLMNs,proto3" json:"equivalent_plmns,omitempty" aper:"optional,sizeLB:1,sizeUB:15,"`
	// @inject_tag: aper:"optional,"
	RatRestrictions *RatRestrictionsList `protobuf:"bytes,3,opt,name=rat_restrictions,json=rat-Restrictions,proto3,oneof" json:"rat_restrictions,omitempty" aper:"optional,"`
	// @inject_tag: aper:"optional,"
	ForbiddenAreaInformation *ForbiddenAreaList `protobuf:"bytes,4,opt,name=forbidden_area_information,json=forbiddenAreaInformation,proto3,oneof" json:"forbidden_area_information,omitempty" aper:"optional,"`
	// @inject_tag: aper:"optional,"
	ServiceAreaInformation *ServiceAreaList `protobuf:"bytes,5,opt,name=service_area_information,json=serviceAreaInformation,proto3,oneof" json:"service_area_information,omitempty" aper:"optional,"`
	// @inject_tag: aper:"optional,sizeLB:1,"
	IEExtensions []*MobilityRestrictionListExtIes `protobuf:"bytes,6,rep,name=i_e_extensions,json=iE-Extensions,proto3" json:"i_e_extensions,omitempty" aper:"optional,sizeLB:1,"`
}

func (x *MobilityRestrictionList) Reset() {
	*x = MobilityRestrictionList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[340]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MobilityRestrictionList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MobilityRestrictionList) ProtoMessage() {}

func (x *MobilityRestrictionList) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[340]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MobilityRestrictionList.ProtoReflect.Descriptor instead.
func (*MobilityRestrictionList) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{340}
}

func (x *MobilityRestrictionList) GetServingPlmn() *PlmnIdentity {
	if x != nil {
		return x.ServingPlmn
	}
	return nil
}

func (x *MobilityRestrictionList) GetEquivalentPlmns() []*PlmnIdentity {
	if x != nil {
		return x.EquivalentPlmns
	}
	return nil
}

func (x *MobilityRestrictionList) GetRatRestrictions() *RatRestrictionsList {
	if x != nil {
		return x.RatRestrictions
	}
	return nil
}

func (x *MobilityRestrictionList) GetForbiddenAreaInformation() *ForbiddenAreaList {
	if x != nil {
		return x.ForbiddenAreaInformation
	}
	return nil
}

func (x *MobilityRestrictionList) GetServiceAreaInformation() *ServiceAreaList {
	if x != nil {
		return x.ServiceAreaInformation
	}
	return nil
}

func (x *MobilityRestrictionList) GetIEExtensions() []*MobilityRestrictionListExtIes {
	if x != nil {
		return x.IEExtensions
	}
	return nil
}

// sequence from xnap_v1.asn1:5164
// {CNTypeRestrictionsForEquivalent}
type CntypeRestrictionsForEquivalent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"valueExt,sizeLB:1,sizeUB:15,"
	Value []*CntypeRestrictionsForEquivalentItem `protobuf:"bytes,1,rep,name=value,proto3" json:"value,omitempty" aper:"valueExt,sizeLB:1,sizeUB:15,"`
}

func (x *CntypeRestrictionsForEquivalent) Reset() {
	*x = CntypeRestrictionsForEquivalent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[341]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CntypeRestrictionsForEquivalent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CntypeRestrictionsForEquivalent) ProtoMessage() {}

func (x *CntypeRestrictionsForEquivalent) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[341]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CntypeRestrictionsForEquivalent.ProtoReflect.Descriptor instead.
func (*CntypeRestrictionsForEquivalent) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{341}
}

func (x *CntypeRestrictionsForEquivalent) GetValue() []*CntypeRestrictionsForEquivalentItem {
	if x != nil {
		return x.Value
	}
	return nil
}

// value set from xnap_v1.asn1:5171
// {CNTypeRestrictionsForEquivalentItem-ExtIEs}
type CntypeRestrictionsForEquivalentItemExtIes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *emptypb.Empty `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *CntypeRestrictionsForEquivalentItemExtIes) Reset() {
	*x = CntypeRestrictionsForEquivalentItemExtIes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[342]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CntypeRestrictionsForEquivalentItemExtIes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CntypeRestrictionsForEquivalentItemExtIes) ProtoMessage() {}

func (x *CntypeRestrictionsForEquivalentItemExtIes) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[342]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CntypeRestrictionsForEquivalentItemExtIes.ProtoReflect.Descriptor instead.
func (*CntypeRestrictionsForEquivalentItemExtIes) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{342}
}

func (x *CntypeRestrictionsForEquivalentItemExtIes) GetValue() *emptypb.Empty {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:5165
// @inject_tag: aper:"valueExt"
// {CNTypeRestrictionsForEquivalentItem}
type CntypeRestrictionsForEquivalentItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlmnIdentity *PlmnIdentity `protobuf:"bytes,1,opt,name=plmn_identity,json=plmn-Identity,proto3" json:"plmn_identity,omitempty"`
	// @inject_tag: aper:"valueExt,valueLB:0,valueUB:1,"
	CnType CnTypeCntypeRestrictionsForEquivalentItem `protobuf:"varint,2,opt,name=cn_type,json=cn-Type,proto3,enum=xnap.v1.CnTypeCntypeRestrictionsForEquivalentItem" json:"cn_type,omitempty" aper:"valueExt,valueLB:0,valueUB:1,"`
	// @inject_tag: aper:"optional,sizeLB:1,"
	IEExtensions []*CntypeRestrictionsForEquivalentItemExtIes `protobuf:"bytes,3,rep,name=i_e_extensions,json=iE-Extensions,proto3" json:"i_e_extensions,omitempty" aper:"optional,sizeLB:1,"`
}

func (x *CntypeRestrictionsForEquivalentItem) Reset() {
	*x = CntypeRestrictionsForEquivalentItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[343]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CntypeRestrictionsForEquivalentItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CntypeRestrictionsForEquivalentItem) ProtoMessage() {}

func (x *CntypeRestrictionsForEquivalentItem) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[343]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CntypeRestrictionsForEquivalentItem.ProtoReflect.Descriptor instead.
func (*CntypeRestrictionsForEquivalentItem) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{343}
}

func (x *CntypeRestrictionsForEquivalentItem) GetPlmnIdentity() *PlmnIdentity {
	if x != nil {
		return x.PlmnIdentity
	}
	return nil
}

func (x *CntypeRestrictionsForEquivalentItem) GetCnType() CnTypeCntypeRestrictionsForEquivalentItem {
	if x != nil {
		return x.CnType
	}
	return CnTypeCntypeRestrictionsForEquivalentItem_CN_TYPE_CNTYPE_RESTRICTIONS_FOR_EQUIVALENT_ITEM_EPC_FORBIDDEN
}

func (x *CntypeRestrictionsForEquivalentItem) GetIEExtensions() []*CntypeRestrictionsForEquivalentItemExtIes {
	if x != nil {
		return x.IEExtensions
	}
	return nil
}

// sequence from xnap_v1.asn1:5183
// {RAT-RestrictionsList}
type RatRestrictionsList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"valueExt,sizeLB:1,sizeUB:16,"
	Value []*RatRestrictionsItem `protobuf:"bytes,1,rep,name=value,proto3" json:"value,omitempty" aper:"valueExt,sizeLB:1,sizeUB:16,"`
}

func (x *RatRestrictionsList) Reset() {
	*x = RatRestrictionsList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[344]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RatRestrictionsList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RatRestrictionsList) ProtoMessage() {}

func (x *RatRestrictionsList) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[344]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RatRestrictionsList.ProtoReflect.Descriptor instead.
func (*RatRestrictionsList) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{344}
}

func (x *RatRestrictionsList) GetValue() []*RatRestrictionsItem {
	if x != nil {
		return x.Value
	}
	return nil
}

// value set from xnap_v1.asn1:5190
// {RAT-RestrictionsItem-ExtIEs}
type RatRestrictionsItemExtIes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *emptypb.Empty `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *RatRestrictionsItemExtIes) Reset() {
	*x = RatRestrictionsItemExtIes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[345]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RatRestrictionsItemExtIes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RatRestrictionsItemExtIes) ProtoMessage() {}

func (x *RatRestrictionsItemExtIes) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[345]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RatRestrictionsItemExtIes.ProtoReflect.Descriptor instead.
func (*RatRestrictionsItemExtIes) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{345}
}

func (x *RatRestrictionsItemExtIes) GetValue() *emptypb.Empty {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:5184
// @inject_tag: aper:"valueExt"
// {RAT-RestrictionsItem}
type RatRestrictionsItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlmnIdentity              *PlmnIdentity              `protobuf:"bytes,1,opt,name=plmn_identity,json=plmn-Identity,proto3" json:"plmn_identity,omitempty"`
	RatRestrictionInformation *RatRestrictionInformation `protobuf:"bytes,2,opt,name=rat_restriction_information,json=rat-RestrictionInformation,proto3" json:"rat_restriction_information,omitempty"`
	// @inject_tag: aper:"optional,sizeLB:1,"
	IEExtensions []*RatRestrictionsItemExtIes `protobuf:"bytes,3,rep,name=i_e_extensions,json=iE-Extensions,proto3" json:"i_e_extensions,omitempty" aper:"optional,sizeLB:1,"`
}

func (x *RatRestrictionsItem) Reset() {
	*x = RatRestrictionsItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[346]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RatRestrictionsItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RatRestrictionsItem) ProtoMessage() {}

func (x *RatRestrictionsItem) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[346]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RatRestrictionsItem.ProtoReflect.Descriptor instead.
func (*RatRestrictionsItem) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{346}
}

func (x *RatRestrictionsItem) GetPlmnIdentity() *PlmnIdentity {
	if x != nil {
		return x.PlmnIdentity
	}
	return nil
}

func (x *RatRestrictionsItem) GetRatRestrictionInformation() *RatRestrictionInformation {
	if x != nil {
		return x.RatRestrictionInformation
	}
	return nil
}

func (x *RatRestrictionsItem) GetIEExtensions() []*RatRestrictionsItemExtIes {
	if x != nil {
		return x.IEExtensions
	}
	return nil
}

// range of Integer from xnap_v1.asn1:5196
// {RAT-RestrictionInformation}
type RatRestrictionInformation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"sizeExt,sizeLB:8,sizeUB:8,"
	Value *asn1.BitString `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty" aper:"sizeExt,sizeLB:8,sizeUB:8,"`
}

func (x *RatRestrictionInformation) Reset() {
	*x = RatRestrictionInformation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[347]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RatRestrictionInformation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RatRestrictionInformation) ProtoMessage() {}

func (x *RatRestrictionInformation) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[347]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RatRestrictionInformation.ProtoReflect.Descriptor instead.
func (*RatRestrictionInformation) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{347}
}

func (x *RatRestrictionInformation) GetValue() *asn1.BitString {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:5202
// {ForbiddenAreaList}
type ForbiddenAreaList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"valueExt,sizeLB:1,sizeUB:16,"
	Value []*ForbiddenAreaItem `protobuf:"bytes,1,rep,name=value,proto3" json:"value,omitempty" aper:"valueExt,sizeLB:1,sizeUB:16,"`
}

func (x *ForbiddenAreaList) Reset() {
	*x = ForbiddenAreaList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[348]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ForbiddenAreaList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ForbiddenAreaList) ProtoMessage() {}

func (x *ForbiddenAreaList) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[348]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ForbiddenAreaList.ProtoReflect.Descriptor instead.
func (*ForbiddenAreaList) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{348}
}

func (x *ForbiddenAreaList) GetValue() []*ForbiddenAreaItem {
	if x != nil {
		return x.Value
	}
	return nil
}

// value set from xnap_v1.asn1:5209
// {ForbiddenAreaItem-ExtIEs}
type ForbiddenAreaItemExtIes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *emptypb.Empty `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *ForbiddenAreaItemExtIes) Reset() {
	*x = ForbiddenAreaItemExtIes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[349]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ForbiddenAreaItemExtIes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ForbiddenAreaItemExtIes) ProtoMessage() {}

func (x *ForbiddenAreaItemExtIes) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[349]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ForbiddenAreaItemExtIes.ProtoReflect.Descriptor instead.
func (*ForbiddenAreaItemExtIes) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{349}
}

func (x *ForbiddenAreaItemExtIes) GetValue() *emptypb.Empty {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:5203
// @inject_tag: aper:"valueExt"
// {ForbiddenAreaItem}
type ForbiddenAreaItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlmnIdentity *PlmnIdentity `protobuf:"bytes,1,opt,name=plmn_identity,json=plmn-Identity,proto3" json:"plmn_identity,omitempty"`
	// @inject_tag: aper:"sizeLB:1,sizeUB:4096,"
	ForbiddenTacs []*Tac `protobuf:"bytes,2,rep,name=forbidden_tacs,json=forbidden-TACs,proto3" json:"forbidden_tacs,omitempty" aper:"sizeLB:1,sizeUB:4096,"`
	// @inject_tag: aper:"optional,sizeLB:1,"
	IEExtensions []*ForbiddenAreaItemExtIes `protobuf:"bytes,3,rep,name=i_e_extensions,json=iE-Extensions,proto3" json:"i_e_extensions,omitempty" aper:"optional,sizeLB:1,"`
}

func (x *ForbiddenAreaItem) Reset() {
	*x = ForbiddenAreaItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[350]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ForbiddenAreaItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ForbiddenAreaItem) ProtoMessage() {}

func (x *ForbiddenAreaItem) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[350]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ForbiddenAreaItem.ProtoReflect.Descriptor instead.
func (*ForbiddenAreaItem) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{350}
}

func (x *ForbiddenAreaItem) GetPlmnIdentity() *PlmnIdentity {
	if x != nil {
		return x.PlmnIdentity
	}
	return nil
}

func (x *ForbiddenAreaItem) GetForbiddenTacs() []*Tac {
	if x != nil {
		return x.ForbiddenTacs
	}
	return nil
}

func (x *ForbiddenAreaItem) GetIEExtensions() []*ForbiddenAreaItemExtIes {
	if x != nil {
		return x.IEExtensions
	}
	return nil
}

// sequence from xnap_v1.asn1:5217
// {ServiceAreaList}
type ServiceAreaList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"valueExt,sizeLB:1,sizeUB:16,"
	Value []*ServiceAreaItem `protobuf:"bytes,1,rep,name=value,proto3" json:"value,omitempty" aper:"valueExt,sizeLB:1,sizeUB:16,"`
}

func (x *ServiceAreaList) Reset() {
	*x = ServiceAreaList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[351]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServiceAreaList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceAreaList) ProtoMessage() {}

func (x *ServiceAreaList) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[351]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceAreaList.ProtoReflect.Descriptor instead.
func (*ServiceAreaList) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{351}
}

func (x *ServiceAreaList) GetValue() []*ServiceAreaItem {
	if x != nil {
		return x.Value
	}
	return nil
}

// value set from xnap_v1.asn1:5225
// {ServiceAreaItem-ExtIEs}
type ServiceAreaItemExtIes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *emptypb.Empty `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *ServiceAreaItemExtIes) Reset() {
	*x = ServiceAreaItemExtIes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[352]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServiceAreaItemExtIes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceAreaItemExtIes) ProtoMessage() {}

func (x *ServiceAreaItemExtIes) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[352]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceAreaItemExtIes.ProtoReflect.Descriptor instead.
func (*ServiceAreaItemExtIes) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{352}
}

func (x *ServiceAreaItemExtIes) GetValue() *emptypb.Empty {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:5218
// @inject_tag: aper:"valueExt"
// {ServiceAreaItem}
type ServiceAreaItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlmnIdentity *PlmnIdentity `protobuf:"bytes,1,opt,name=plmn_identity,json=plmn-Identity,proto3" json:"plmn_identity,omitempty"`
	// @inject_tag: aper:"optional,sizeLB:1,sizeUB:16,"
	AllowedTacsServiceArea []*Tac `protobuf:"bytes,2,rep,name=allowed_tacs_service_area,json=allowed-TACs-ServiceArea,proto3" json:"allowed_tacs_service_area,omitempty" aper:"optional,sizeLB:1,sizeUB:16,"`
	// @inject_tag: aper:"optional,sizeLB:1,sizeUB:16,"
	NotAllowedTacsServiceArea []*Tac `protobuf:"bytes,3,rep,name=not_allowed_tacs_service_area,json=not-allowed-TACs-ServiceArea,proto3" json:"not_allowed_tacs_service_area,omitempty" aper:"optional,sizeLB:1,sizeUB:16,"`
	// @inject_tag: aper:"optional,sizeLB:1,"
	IEExtensions []*ServiceAreaItemExtIes `protobuf:"bytes,4,rep,name=i_e_extensions,json=iE-Extensions,proto3" json:"i_e_extensions,omitempty" aper:"optional,sizeLB:1,"`
}

func (x *ServiceAreaItem) Reset() {
	*x = ServiceAreaItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[353]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServiceAreaItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceAreaItem) ProtoMessage() {}

func (x *ServiceAreaItem) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[353]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceAreaItem.ProtoReflect.Descriptor instead.
func (*ServiceAreaItem) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{353}
}

func (x *ServiceAreaItem) GetPlmnIdentity() *PlmnIdentity {
	if x != nil {
		return x.PlmnIdentity
	}
	return nil
}

func (x *ServiceAreaItem) GetAllowedTacsServiceArea() []*Tac {
	if x != nil {
		return x.AllowedTacsServiceArea
	}
	return nil
}

func (x *ServiceAreaItem) GetNotAllowedTacsServiceArea() []*Tac {
	if x != nil {
		return x.NotAllowedTacsServiceArea
	}
	return nil
}

func (x *ServiceAreaItem) GetIEExtensions() []*ServiceAreaItemExtIes {
	if x != nil {
		return x.IEExtensions
	}
	return nil
}

// value set from xnap_v1.asn1:5235
// {MR-DC-ResourceCoordinationInfo-ExtIEs}
type MrDCResourceCoordinationInfoExtIes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *emptypb.Empty `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *MrDCResourceCoordinationInfoExtIes) Reset() {
	*x = MrDCResourceCoordinationInfoExtIes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[354]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MrDCResourceCoordinationInfoExtIes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MrDCResourceCoordinationInfoExtIes) ProtoMessage() {}

func (x *MrDCResourceCoordinationInfoExtIes) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[354]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MrDCResourceCoordinationInfoExtIes.ProtoReflect.Descriptor instead.
func (*MrDCResourceCoordinationInfoExtIes) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{354}
}

func (x *MrDCResourceCoordinationInfoExtIes) GetValue() *emptypb.Empty {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:5230
// @inject_tag: aper:"valueExt"
// {MR-DC-ResourceCoordinationInfo}
type MrDCResourceCoordinationInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NgRanNodeResourceCoordinationInfo *NgRAnNodeResourceCoordinationInfo `protobuf:"bytes,1,opt,name=ng_ran_node_resource_coordination_info,json=ng-RAN-Node-ResourceCoordinationInfo,proto3" json:"ng_ran_node_resource_coordination_info,omitempty"`
	// @inject_tag: aper:"optional,sizeLB:1,"
	IEExtension []*MrDCResourceCoordinationInfoExtIes `protobuf:"bytes,2,rep,name=i_e_extension,json=iE-Extension,proto3" json:"i_e_extension,omitempty" aper:"optional,sizeLB:1,"`
}

func (x *MrDCResourceCoordinationInfo) Reset() {
	*x = MrDCResourceCoordinationInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[355]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MrDCResourceCoordinationInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MrDCResourceCoordinationInfo) ProtoMessage() {}

func (x *MrDCResourceCoordinationInfo) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[355]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MrDCResourceCoordinationInfo.ProtoReflect.Descriptor instead.
func (*MrDCResourceCoordinationInfo) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{355}
}

func (x *MrDCResourceCoordinationInfo) GetNgRanNodeResourceCoordinationInfo() *NgRAnNodeResourceCoordinationInfo {
	if x != nil {
		return x.NgRanNodeResourceCoordinationInfo
	}
	return nil
}

func (x *MrDCResourceCoordinationInfo) GetIEExtension() []*MrDCResourceCoordinationInfoExtIes {
	if x != nil {
		return x.IEExtension
	}
	return nil
}

// sequence from xnap_v1.asn1:5240
// {NG-RAN-Node-ResourceCoordinationInfo}
type NgRAnNodeResourceCoordinationInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// choice from xnap_v1.asn1:5240
	//
	// Types that are assignable to NgRanNodeResourceCoordinationInfo:
	//	*NgRAnNodeResourceCoordinationInfo_EutraResourceCoordinationInfo
	//	*NgRAnNodeResourceCoordinationInfo_NrResourceCoordinationInfo
	NgRanNodeResourceCoordinationInfo isNgRAnNodeResourceCoordinationInfo_NgRanNodeResourceCoordinationInfo `protobuf_oneof:"ng_ran_node_resource_coordination_info"`
}

func (x *NgRAnNodeResourceCoordinationInfo) Reset() {
	*x = NgRAnNodeResourceCoordinationInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[356]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NgRAnNodeResourceCoordinationInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NgRAnNodeResourceCoordinationInfo) ProtoMessage() {}

func (x *NgRAnNodeResourceCoordinationInfo) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[356]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NgRAnNodeResourceCoordinationInfo.ProtoReflect.Descriptor instead.
func (*NgRAnNodeResourceCoordinationInfo) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{356}
}

func (m *NgRAnNodeResourceCoordinationInfo) GetNgRanNodeResourceCoordinationInfo() isNgRAnNodeResourceCoordinationInfo_NgRanNodeResourceCoordinationInfo {
	if m != nil {
		return m.NgRanNodeResourceCoordinationInfo
	}
	return nil
}

func (x *NgRAnNodeResourceCoordinationInfo) GetEutraResourceCoordinationInfo() *EUTraResourceCoordinationInfo {
	if x, ok := x.GetNgRanNodeResourceCoordinationInfo().(*NgRAnNodeResourceCoordinationInfo_EutraResourceCoordinationInfo); ok {
		return x.EutraResourceCoordinationInfo
	}
	return nil
}

func (x *NgRAnNodeResourceCoordinationInfo) GetNrResourceCoordinationInfo() *NrResourceCoordinationInfo {
	if x, ok := x.GetNgRanNodeResourceCoordinationInfo().(*NgRAnNodeResourceCoordinationInfo_NrResourceCoordinationInfo); ok {
		return x.NrResourceCoordinationInfo
	}
	return nil
}

type isNgRAnNodeResourceCoordinationInfo_NgRanNodeResourceCoordinationInfo interface {
	isNgRAnNodeResourceCoordinationInfo_NgRanNodeResourceCoordinationInfo()
}

type NgRAnNodeResourceCoordinationInfo_EutraResourceCoordinationInfo struct {
	// @inject_tag: aper:"choiceIdx:1,valueExt,"
	EutraResourceCoordinationInfo *EUTraResourceCoordinationInfo `protobuf:"bytes,1,opt,name=eutra_resource_coordination_info,json=eutra-resource-coordination-info,proto3,oneof" aper:"choiceIdx:1,valueExt,"`
}

type NgRAnNodeResourceCoordinationInfo_NrResourceCoordinationInfo struct {
	// @inject_tag: aper:"choiceIdx:2,valueExt,"
	NrResourceCoordinationInfo *NrResourceCoordinationInfo `protobuf:"bytes,2,opt,name=nr_resource_coordination_info,json=nr-resource-coordination-info,proto3,oneof" aper:"choiceIdx:2,valueExt,"`
}

func (*NgRAnNodeResourceCoordinationInfo_EutraResourceCoordinationInfo) isNgRAnNodeResourceCoordinationInfo_NgRanNodeResourceCoordinationInfo() {
}

func (*NgRAnNodeResourceCoordinationInfo_NrResourceCoordinationInfo) isNgRAnNodeResourceCoordinationInfo_NgRanNodeResourceCoordinationInfo() {
}

// value set from xnap_v1.asn1:5254
// {E-UTRA-ResourceCoordinationInfo-ExtIEs}
type EUTraResourceCoordinationInfoExtIes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *emptypb.Empty `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *EUTraResourceCoordinationInfoExtIes) Reset() {
	*x = EUTraResourceCoordinationInfoExtIes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[357]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EUTraResourceCoordinationInfoExtIes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EUTraResourceCoordinationInfoExtIes) ProtoMessage() {}

func (x *EUTraResourceCoordinationInfoExtIes) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[357]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EUTraResourceCoordinationInfoExtIes.ProtoReflect.Descriptor instead.
func (*EUTraResourceCoordinationInfoExtIes) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{357}
}

func (x *EUTraResourceCoordinationInfoExtIes) GetValue() *emptypb.Empty {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:5245
// @inject_tag: aper:"valueExt"
// {E-UTRA-ResourceCoordinationInfo}
type EUTraResourceCoordinationInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"valueExt,"
	EUtraCell *EUTraCGi `protobuf:"bytes,1,opt,name=e_utra_cell,json=e-utra-cell,proto3" json:"e_utra_cell,omitempty" aper:"valueExt,"`
	// @inject_tag: aper:"sizeLB:6,sizeUB:4400,"
	UlCoordinationInfo *asn1.BitString `protobuf:"bytes,2,opt,name=ul_coordination_info,json=ul-coordination-info,proto3" json:"ul_coordination_info,omitempty" aper:"sizeLB:6,sizeUB:4400,"`
	// @inject_tag: aper:"optional,sizeLB:6,sizeUB:4400,"
	DlCoordinationInfo *asn1.BitString `protobuf:"bytes,3,opt,name=dl_coordination_info,json=dl-coordination-info,proto3,oneof" json:"dl_coordination_info,omitempty" aper:"optional,sizeLB:6,sizeUB:4400,"`
	// @inject_tag: aper:"optional,valueExt,"
	NrCell *NrCGi `protobuf:"bytes,4,opt,name=nr_cell,json=nr-cell,proto3,oneof" json:"nr_cell,omitempty" aper:"optional,valueExt,"`
	// @inject_tag: aper:"optional,valueExt,valueLB:0,valueUB:0,"
	EUtraCoordinationAssistanceInfo *EUTraCoordinationAssistanceInfo `protobuf:"varint,5,opt,name=e_utra_coordination_assistance_info,json=e-utra-coordination-assistance-info,proto3,enum=xnap.v1.EUTraCoordinationAssistanceInfo,oneof" json:"e_utra_coordination_assistance_info,omitempty" aper:"optional,valueExt,valueLB:0,valueUB:0,"`
	// @inject_tag: aper:"optional,sizeLB:1,"
	IEExtension []*EUTraResourceCoordinationInfoExtIes `protobuf:"bytes,6,rep,name=i_e_extension,json=iE-Extension,proto3" json:"i_e_extension,omitempty" aper:"optional,sizeLB:1,"`
}

func (x *EUTraResourceCoordinationInfo) Reset() {
	*x = EUTraResourceCoordinationInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[358]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EUTraResourceCoordinationInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EUTraResourceCoordinationInfo) ProtoMessage() {}

func (x *EUTraResourceCoordinationInfo) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[358]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EUTraResourceCoordinationInfo.ProtoReflect.Descriptor instead.
func (*EUTraResourceCoordinationInfo) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{358}
}

func (x *EUTraResourceCoordinationInfo) GetEUtraCell() *EUTraCGi {
	if x != nil {
		return x.EUtraCell
	}
	return nil
}

func (x *EUTraResourceCoordinationInfo) GetUlCoordinationInfo() *asn1.BitString {
	if x != nil {
		return x.UlCoordinationInfo
	}
	return nil
}

func (x *EUTraResourceCoordinationInfo) GetDlCoordinationInfo() *asn1.BitString {
	if x != nil {
		return x.DlCoordinationInfo
	}
	return nil
}

func (x *EUTraResourceCoordinationInfo) GetNrCell() *NrCGi {
	if x != nil {
		return x.NrCell
	}
	return nil
}

func (x *EUTraResourceCoordinationInfo) GetEUtraCoordinationAssistanceInfo() EUTraCoordinationAssistanceInfo {
	if x != nil && x.EUtraCoordinationAssistanceInfo != nil {
		return *x.EUtraCoordinationAssistanceInfo
	}
	return EUTraCoordinationAssistanceInfo_E_UTRA_COORDINATION_ASSISTANCE_INFO_COORDINATION_NOT_REQUIRED
}

func (x *EUTraResourceCoordinationInfo) GetIEExtension() []*EUTraResourceCoordinationInfoExtIes {
	if x != nil {
		return x.IEExtension
	}
	return nil
}

// value set from xnap_v1.asn1:5270
// {NR-ResourceCoordinationInfo-ExtIEs}
type NrResourceCoordinationInfoExtIes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *emptypb.Empty `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *NrResourceCoordinationInfoExtIes) Reset() {
	*x = NrResourceCoordinationInfoExtIes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[359]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NrResourceCoordinationInfoExtIes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NrResourceCoordinationInfoExtIes) ProtoMessage() {}

func (x *NrResourceCoordinationInfoExtIes) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[359]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NrResourceCoordinationInfoExtIes.ProtoReflect.Descriptor instead.
func (*NrResourceCoordinationInfoExtIes) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{359}
}

func (x *NrResourceCoordinationInfoExtIes) GetValue() *emptypb.Empty {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:5261
// @inject_tag: aper:"valueExt"
// {NR-ResourceCoordinationInfo}
type NrResourceCoordinationInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"valueExt,"
	NrCell *NrCGi `protobuf:"bytes,1,opt,name=nr_cell,json=nr-cell,proto3" json:"nr_cell,omitempty" aper:"valueExt,"`
	// @inject_tag: aper:"sizeLB:6,sizeUB:4400,"
	UlCoordinationInfo *asn1.BitString `protobuf:"bytes,2,opt,name=ul_coordination_info,json=ul-coordination-info,proto3" json:"ul_coordination_info,omitempty" aper:"sizeLB:6,sizeUB:4400,"`
	// @inject_tag: aper:"optional,sizeLB:6,sizeUB:4400,"
	DlCoordinationInfo *asn1.BitString `protobuf:"bytes,3,opt,name=dl_coordination_info,json=dl-coordination-info,proto3,oneof" json:"dl_coordination_info,omitempty" aper:"optional,sizeLB:6,sizeUB:4400,"`
	// @inject_tag: aper:"optional,valueExt,"
	EUtraCell *EUTraCGi `protobuf:"bytes,4,opt,name=e_utra_cell,json=e-utra-cell,proto3,oneof" json:"e_utra_cell,omitempty" aper:"optional,valueExt,"`
	// @inject_tag: aper:"optional,valueExt,valueLB:0,valueUB:0,"
	NrCoordinationAssistanceInfo *NrCoordinationAssistanceInfo `protobuf:"varint,5,opt,name=nr_coordination_assistance_info,json=nr-coordination-assistance-info,proto3,enum=xnap.v1.NrCoordinationAssistanceInfo,oneof" json:"nr_coordination_assistance_info,omitempty" aper:"optional,valueExt,valueLB:0,valueUB:0,"`
	// @inject_tag: aper:"optional,sizeLB:1,"
	IEExtension []*NrResourceCoordinationInfoExtIes `protobuf:"bytes,6,rep,name=i_e_extension,json=iE-Extension,proto3" json:"i_e_extension,omitempty" aper:"optional,sizeLB:1,"`
}

func (x *NrResourceCoordinationInfo) Reset() {
	*x = NrResourceCoordinationInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[360]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NrResourceCoordinationInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NrResourceCoordinationInfo) ProtoMessage() {}

func (x *NrResourceCoordinationInfo) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[360]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NrResourceCoordinationInfo.ProtoReflect.Descriptor instead.
func (*NrResourceCoordinationInfo) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{360}
}

func (x *NrResourceCoordinationInfo) GetNrCell() *NrCGi {
	if x != nil {
		return x.NrCell
	}
	return nil
}

func (x *NrResourceCoordinationInfo) GetUlCoordinationInfo() *asn1.BitString {
	if x != nil {
		return x.UlCoordinationInfo
	}
	return nil
}

func (x *NrResourceCoordinationInfo) GetDlCoordinationInfo() *asn1.BitString {
	if x != nil {
		return x.DlCoordinationInfo
	}
	return nil
}

func (x *NrResourceCoordinationInfo) GetEUtraCell() *EUTraCGi {
	if x != nil {
		return x.EUtraCell
	}
	return nil
}

func (x *NrResourceCoordinationInfo) GetNrCoordinationAssistanceInfo() NrCoordinationAssistanceInfo {
	if x != nil && x.NrCoordinationAssistanceInfo != nil {
		return *x.NrCoordinationAssistanceInfo
	}
	return NrCoordinationAssistanceInfo_NR_COORDINATION_ASSISTANCE_INFO_COORDINATION_NOT_REQUIRED
}

func (x *NrResourceCoordinationInfo) GetIEExtension() []*NrResourceCoordinationInfoExtIes {
	if x != nil {
		return x.IEExtension
	}
	return nil
}

// value set from xnap_v1.asn1:5283
// {MessageOversizeNotification-ExtIEs}
type MessageOversizeNotificationExtIes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *emptypb.Empty `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *MessageOversizeNotificationExtIes) Reset() {
	*x = MessageOversizeNotificationExtIes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[361]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageOversizeNotificationExtIes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageOversizeNotificationExtIes) ProtoMessage() {}

func (x *MessageOversizeNotificationExtIes) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[361]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageOversizeNotificationExtIes.ProtoReflect.Descriptor instead.
func (*MessageOversizeNotificationExtIes) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{361}
}

func (x *MessageOversizeNotificationExtIes) GetValue() *emptypb.Empty {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:5278
// @inject_tag: aper:"valueExt"
// {MessageOversizeNotification}
type MessageOversizeNotification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MaximumCellListSize *MaximumCellListSize `protobuf:"bytes,1,opt,name=maximum_cell_list_size,json=maximumCellListSize,proto3" json:"maximum_cell_list_size,omitempty"`
	// @inject_tag: aper:"optional,sizeLB:1,"
	IEExtension []*MessageOversizeNotificationExtIes `protobuf:"bytes,2,rep,name=i_e_extension,json=iE-Extension,proto3" json:"i_e_extension,omitempty" aper:"optional,sizeLB:1,"`
}

func (x *MessageOversizeNotification) Reset() {
	*x = MessageOversizeNotification{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[362]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageOversizeNotification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageOversizeNotification) ProtoMessage() {}

func (x *MessageOversizeNotification) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[362]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageOversizeNotification.ProtoReflect.Descriptor instead.
func (*MessageOversizeNotification) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{362}
}

func (x *MessageOversizeNotification) GetMaximumCellListSize() *MaximumCellListSize {
	if x != nil {
		return x.MaximumCellListSize
	}
	return nil
}

func (x *MessageOversizeNotification) GetIEExtension() []*MessageOversizeNotificationExtIes {
	if x != nil {
		return x.IEExtension
	}
	return nil
}

// range of Integer from xnap_v1.asn1:5287
// {MaximumCellListSize}
type MaximumCellListSize struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"valueExt,valueLB:1,valueUB:16384,"
	Value int32 `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty" aper:"valueExt,valueLB:1,valueUB:16384,"`
}

func (x *MaximumCellListSize) Reset() {
	*x = MaximumCellListSize{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[363]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MaximumCellListSize) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MaximumCellListSize) ProtoMessage() {}

func (x *MaximumCellListSize) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[363]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MaximumCellListSize.ProtoReflect.Descriptor instead.
func (*MaximumCellListSize) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{363}
}

func (x *MaximumCellListSize) GetValue() int32 {
	if x != nil {
		return x.Value
	}
	return 0
}

// value set from xnap_v1.asn1:5304
// {NE-DC-TDM-Pattern-ExtIEs}
type NeDCTDmPatternExtIes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *emptypb.Empty `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *NeDCTDmPatternExtIes) Reset() {
	*x = NeDCTDmPatternExtIes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[364]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NeDCTDmPatternExtIes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NeDCTDmPatternExtIes) ProtoMessage() {}

func (x *NeDCTDmPatternExtIes) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[364]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NeDCTDmPatternExtIes.ProtoReflect.Descriptor instead.
func (*NeDCTDmPatternExtIes) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{364}
}

func (x *NeDCTDmPatternExtIes) GetValue() *emptypb.Empty {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:5298
// @inject_tag: aper:"valueExt"
// {NE-DC-TDM-Pattern}
type NeDCTDmPattern struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"valueLB:0,valueUB:6,"
	SubframeAssignment SubframeAssignmentNedctdmpattern `protobuf:"varint,1,opt,name=subframe_assignment,json=subframeAssignment,proto3,enum=xnap.v1.SubframeAssignmentNedctdmpattern" json:"subframe_assignment,omitempty" aper:"valueLB:0,valueUB:6,"`
	// @inject_tag: aper:"valueLB:0,valueUB:9,"
	HarqOffset int32 `protobuf:"varint,2,opt,name=harq_offset,json=harqOffset,proto3" json:"harq_offset,omitempty" aper:"valueLB:0,valueUB:9,"`
	// @inject_tag: aper:"optional,sizeLB:1,"
	IEExtension []*NeDCTDmPatternExtIes `protobuf:"bytes,3,rep,name=i_e_extension,json=iE-Extension,proto3" json:"i_e_extension,omitempty" aper:"optional,sizeLB:1,"`
}

func (x *NeDCTDmPattern) Reset() {
	*x = NeDCTDmPattern{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[365]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NeDCTDmPattern) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NeDCTDmPattern) ProtoMessage() {}

func (x *NeDCTDmPattern) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[365]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NeDCTDmPattern.ProtoReflect.Descriptor instead.
func (*NeDCTDmPattern) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{365}
}

func (x *NeDCTDmPattern) GetSubframeAssignment() SubframeAssignmentNedctdmpattern {
	if x != nil {
		return x.SubframeAssignment
	}
	return SubframeAssignmentNedctdmpattern_SUBFRAME_ASSIGNMENT_NEDCTDMPATTERN_SA0
}

func (x *NeDCTDmPattern) GetHarqOffset() int32 {
	if x != nil {
		return x.HarqOffset
	}
	return 0
}

func (x *NeDCTDmPattern) GetIEExtension() []*NeDCTDmPatternExtIes {
	if x != nil {
		return x.IEExtension
	}
	return nil
}

// sequence from xnap_v1.asn1:5310
// {NeighbourInformation-E-UTRA}
type NeighbourInformationEUTra struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"valueExt,sizeLB:1,sizeUB:1024,"
	Value []*NeighbourInformationEUTraItem `protobuf:"bytes,1,rep,name=value,proto3" json:"value,omitempty" aper:"valueExt,sizeLB:1,sizeUB:1024,"`
}

func (x *NeighbourInformationEUTra) Reset() {
	*x = NeighbourInformationEUTra{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[366]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NeighbourInformationEUTra) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NeighbourInformationEUTra) ProtoMessage() {}

func (x *NeighbourInformationEUTra) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[366]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NeighbourInformationEUTra.ProtoReflect.Descriptor instead.
func (*NeighbourInformationEUTra) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{366}
}

func (x *NeighbourInformationEUTra) GetValue() []*NeighbourInformationEUTraItem {
	if x != nil {
		return x.Value
	}
	return nil
}

// value set from xnap_v1.asn1:5320
// {NeighbourInformation-E-UTRA-Item-ExtIEs}
type NeighbourInformationEUTraItemExtIes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *emptypb.Empty `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *NeighbourInformationEUTraItemExtIes) Reset() {
	*x = NeighbourInformationEUTraItemExtIes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[367]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NeighbourInformationEUTraItemExtIes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NeighbourInformationEUTraItemExtIes) ProtoMessage() {}

func (x *NeighbourInformationEUTraItemExtIes) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[367]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NeighbourInformationEUTraItemExtIes.ProtoReflect.Descriptor instead.
func (*NeighbourInformationEUTraItemExtIes) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{367}
}

func (x *NeighbourInformationEUTraItemExtIes) GetValue() *emptypb.Empty {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:5311
// @inject_tag: aper:"valueExt"
// {NeighbourInformation-E-UTRA-Item}
type NeighbourInformationEUTraItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EUtraPci *EUTrapci `protobuf:"bytes,1,opt,name=e_utra_pci,json=e-utra-PCI,proto3" json:"e_utra_pci,omitempty"`
	// @inject_tag: aper:"valueExt,"
	EUtraCgi *EUTraCGi   `protobuf:"bytes,2,opt,name=e_utra_cgi,json=e-utra-cgi,proto3" json:"e_utra_cgi,omitempty" aper:"valueExt,"`
	Earfcn   *EUTraarfcn `protobuf:"bytes,3,opt,name=earfcn,proto3" json:"earfcn,omitempty"`
	Tac      *Tac        `protobuf:"bytes,4,opt,name=tac,proto3" json:"tac,omitempty"`
	// @inject_tag: aper:"optional,"
	Ranac *Ranac `protobuf:"bytes,5,opt,name=ranac,proto3,oneof" json:"ranac,omitempty" aper:"optional,"`
	// @inject_tag: aper:"optional,sizeLB:1,"
	IEExtensions []*NeighbourInformationEUTraItemExtIes `protobuf:"bytes,6,rep,name=i_e_extensions,json=iE-Extensions,proto3" json:"i_e_extensions,omitempty" aper:"optional,sizeLB:1,"`
}

func (x *NeighbourInformationEUTraItem) Reset() {
	*x = NeighbourInformationEUTraItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[368]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NeighbourInformationEUTraItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NeighbourInformationEUTraItem) ProtoMessage() {}

func (x *NeighbourInformationEUTraItem) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[368]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NeighbourInformationEUTraItem.ProtoReflect.Descriptor instead.
func (*NeighbourInformationEUTraItem) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{368}
}

func (x *NeighbourInformationEUTraItem) GetEUtraPci() *EUTrapci {
	if x != nil {
		return x.EUtraPci
	}
	return nil
}

func (x *NeighbourInformationEUTraItem) GetEUtraCgi() *EUTraCGi {
	if x != nil {
		return x.EUtraCgi
	}
	return nil
}

func (x *NeighbourInformationEUTraItem) GetEarfcn() *EUTraarfcn {
	if x != nil {
		return x.Earfcn
	}
	return nil
}

func (x *NeighbourInformationEUTraItem) GetTac() *Tac {
	if x != nil {
		return x.Tac
	}
	return nil
}

func (x *NeighbourInformationEUTraItem) GetRanac() *Ranac {
	if x != nil {
		return x.Ranac
	}
	return nil
}

func (x *NeighbourInformationEUTraItem) GetIEExtensions() []*NeighbourInformationEUTraItemExtIes {
	if x != nil {
		return x.IEExtensions
	}
	return nil
}

// sequence from xnap_v1.asn1:5327
// {NeighbourInformation-NR}
type NeighbourInformationNR struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"valueExt,sizeLB:1,sizeUB:1024,"
	Value []*NeighbourInformationNRItem `protobuf:"bytes,1,rep,name=value,proto3" json:"value,omitempty" aper:"valueExt,sizeLB:1,sizeUB:1024,"`
}

func (x *NeighbourInformationNR) Reset() {
	*x = NeighbourInformationNR{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[369]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NeighbourInformationNR) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NeighbourInformationNR) ProtoMessage() {}

func (x *NeighbourInformationNR) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[369]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NeighbourInformationNR.ProtoReflect.Descriptor instead.
func (*NeighbourInformationNR) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{369}
}

func (x *NeighbourInformationNR) GetValue() []*NeighbourInformationNRItem {
	if x != nil {
		return x.Value
	}
	return nil
}

// value set from xnap_v1.asn1:5339
// {NeighbourInformation-NR-Item-ExtIEs}
type NeighbourInformationNRItemExtIes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *emptypb.Empty `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *NeighbourInformationNRItemExtIes) Reset() {
	*x = NeighbourInformationNRItemExtIes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[370]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NeighbourInformationNRItemExtIes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NeighbourInformationNRItemExtIes) ProtoMessage() {}

func (x *NeighbourInformationNRItemExtIes) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[370]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NeighbourInformationNRItemExtIes.ProtoReflect.Descriptor instead.
func (*NeighbourInformationNRItemExtIes) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{370}
}

func (x *NeighbourInformationNRItemExtIes) GetValue() *emptypb.Empty {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:5328
// @inject_tag: aper:"valueExt"
// {NeighbourInformation-NR-Item}
type NeighbourInformationNRItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NrPci *Nrpci `protobuf:"bytes,1,opt,name=nr_pci,json=nr-PCI,proto3" json:"nr_pci,omitempty"`
	// @inject_tag: aper:"valueExt,"
	NrCgi *NrCGi `protobuf:"bytes,2,opt,name=nr_cgi,json=nr-cgi,proto3" json:"nr_cgi,omitempty" aper:"valueExt,"`
	Tac   *Tac   `protobuf:"bytes,3,opt,name=tac,proto3" json:"tac,omitempty"`
	// @inject_tag: aper:"optional,"
	Ranac      *Ranac                          `protobuf:"bytes,4,opt,name=ranac,proto3,oneof" json:"ranac,omitempty" aper:"optional,"`
	NrModeInfo *NeighbourInformationNRModeInfo `protobuf:"bytes,5,opt,name=nr_mode_info,json=nr-mode-info,proto3" json:"nr_mode_info,omitempty"`
	// @inject_tag: aper:"valueExt,"
	ConnectivitySupport            *ConnectivitySupport `protobuf:"bytes,6,opt,name=connectivity_support,json=connectivitySupport,proto3" json:"connectivity_support,omitempty" aper:"valueExt,"`
	MeasurementTimingConfiguration []byte               `protobuf:"bytes,7,opt,name=measurement_timing_configuration,json=measurementTimingConfiguration,proto3" json:"measurement_timing_configuration,omitempty"`
	// @inject_tag: aper:"optional,sizeLB:1,"
	IEExtensions []*NeighbourInformationNRItemExtIes `protobuf:"bytes,8,rep,name=i_e_extensions,json=iE-Extensions,proto3" json:"i_e_extensions,omitempty" aper:"optional,sizeLB:1,"`
}

func (x *NeighbourInformationNRItem) Reset() {
	*x = NeighbourInformationNRItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[371]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NeighbourInformationNRItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NeighbourInformationNRItem) ProtoMessage() {}

func (x *NeighbourInformationNRItem) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[371]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NeighbourInformationNRItem.ProtoReflect.Descriptor instead.
func (*NeighbourInformationNRItem) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{371}
}

func (x *NeighbourInformationNRItem) GetNrPci() *Nrpci {
	if x != nil {
		return x.NrPci
	}
	return nil
}

func (x *NeighbourInformationNRItem) GetNrCgi() *NrCGi {
	if x != nil {
		return x.NrCgi
	}
	return nil
}

func (x *NeighbourInformationNRItem) GetTac() *Tac {
	if x != nil {
		return x.Tac
	}
	return nil
}

func (x *NeighbourInformationNRItem) GetRanac() *Ranac {
	if x != nil {
		return x.Ranac
	}
	return nil
}

func (x *NeighbourInformationNRItem) GetNrModeInfo() *NeighbourInformationNRModeInfo {
	if x != nil {
		return x.NrModeInfo
	}
	return nil
}

func (x *NeighbourInformationNRItem) GetConnectivitySupport() *ConnectivitySupport {
	if x != nil {
		return x.ConnectivitySupport
	}
	return nil
}

func (x *NeighbourInformationNRItem) GetMeasurementTimingConfiguration() []byte {
	if x != nil {
		return x.MeasurementTimingConfiguration
	}
	return nil
}

func (x *NeighbourInformationNRItem) GetIEExtensions() []*NeighbourInformationNRItemExtIes {
	if x != nil {
		return x.IEExtensions
	}
	return nil
}

// value set from xnap_v1.asn1:5350
// {NeighbourInformation-NR-ModeInfo-ExtIEs}
type NeighbourInformationNRModeInfoExtIes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *emptypb.Empty `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *NeighbourInformationNRModeInfoExtIes) Reset() {
	*x = NeighbourInformationNRModeInfoExtIes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[372]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NeighbourInformationNRModeInfoExtIes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NeighbourInformationNRModeInfoExtIes) ProtoMessage() {}

func (x *NeighbourInformationNRModeInfoExtIes) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[372]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NeighbourInformationNRModeInfoExtIes.ProtoReflect.Descriptor instead.
func (*NeighbourInformationNRModeInfoExtIes) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{372}
}

func (x *NeighbourInformationNRModeInfoExtIes) GetValue() *emptypb.Empty {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:5345
// {NeighbourInformation-NR-ModeInfo}
type NeighbourInformationNRModeInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// choice from xnap_v1.asn1:5345
	//
	// Types that are assignable to NeighbourInformationNrModeInfo:
	//	*NeighbourInformationNRModeInfo_FddInfo
	//	*NeighbourInformationNRModeInfo_TddInfo
	//	*NeighbourInformationNRModeInfo_ChoiceExtension
	NeighbourInformationNrModeInfo isNeighbourInformationNRModeInfo_NeighbourInformationNrModeInfo `protobuf_oneof:"neighbour_information_nr_mode_info"`
}

func (x *NeighbourInformationNRModeInfo) Reset() {
	*x = NeighbourInformationNRModeInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[373]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NeighbourInformationNRModeInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NeighbourInformationNRModeInfo) ProtoMessage() {}

func (x *NeighbourInformationNRModeInfo) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[373]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NeighbourInformationNRModeInfo.ProtoReflect.Descriptor instead.
func (*NeighbourInformationNRModeInfo) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{373}
}

func (m *NeighbourInformationNRModeInfo) GetNeighbourInformationNrModeInfo() isNeighbourInformationNRModeInfo_NeighbourInformationNrModeInfo {
	if m != nil {
		return m.NeighbourInformationNrModeInfo
	}
	return nil
}

func (x *NeighbourInformationNRModeInfo) GetFddInfo() *NeighbourInformationNRModeFddinfo {
	if x, ok := x.GetNeighbourInformationNrModeInfo().(*NeighbourInformationNRModeInfo_FddInfo); ok {
		return x.FddInfo
	}
	return nil
}

func (x *NeighbourInformationNRModeInfo) GetTddInfo() *NeighbourInformationNRModeTddinfo {
	if x, ok := x.GetNeighbourInformationNrModeInfo().(*NeighbourInformationNRModeInfo_TddInfo); ok {
		return x.TddInfo
	}
	return nil
}

func (x *NeighbourInformationNRModeInfo) GetChoiceExtension() *NeighbourInformationNRModeInfoExtIes {
	if x, ok := x.GetNeighbourInformationNrModeInfo().(*NeighbourInformationNRModeInfo_ChoiceExtension); ok {
		return x.ChoiceExtension
	}
	return nil
}

type isNeighbourInformationNRModeInfo_NeighbourInformationNrModeInfo interface {
	isNeighbourInformationNRModeInfo_NeighbourInformationNrModeInfo()
}

type NeighbourInformationNRModeInfo_FddInfo struct {
	// @inject_tag: aper:"choiceIdx:1,valueExt,"
	FddInfo *NeighbourInformationNRModeFddinfo `protobuf:"bytes,1,opt,name=fdd_info,json=fdd-info,proto3,oneof" aper:"choiceIdx:1,valueExt,"`
}

type NeighbourInformationNRModeInfo_TddInfo struct {
	// @inject_tag: aper:"choiceIdx:2,valueExt,"
	TddInfo *NeighbourInformationNRModeTddinfo `protobuf:"bytes,2,opt,name=tdd_info,json=tdd-info,proto3,oneof" aper:"choiceIdx:2,valueExt,"`
}

type NeighbourInformationNRModeInfo_ChoiceExtension struct {
	// @inject_tag: aper:"choiceIdx:3,"
	ChoiceExtension *NeighbourInformationNRModeInfoExtIes `protobuf:"bytes,3,opt,name=choice_extension,json=choice-extension,proto3,oneof" aper:"choiceIdx:3,"`
}

func (*NeighbourInformationNRModeInfo_FddInfo) isNeighbourInformationNRModeInfo_NeighbourInformationNrModeInfo() {
}

func (*NeighbourInformationNRModeInfo_TddInfo) isNeighbourInformationNRModeInfo_NeighbourInformationNrModeInfo() {
}

func (*NeighbourInformationNRModeInfo_ChoiceExtension) isNeighbourInformationNRModeInfo_NeighbourInformationNrModeInfo() {
}

// value set from xnap_v1.asn1:5362
// {NeighbourInformation-NR-ModeFDDInfo-ExtIEs}
type NeighbourInformationNRModeFddinfoExtIes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *emptypb.Empty `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *NeighbourInformationNRModeFddinfoExtIes) Reset() {
	*x = NeighbourInformationNRModeFddinfoExtIes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[374]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NeighbourInformationNRModeFddinfoExtIes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NeighbourInformationNRModeFddinfoExtIes) ProtoMessage() {}

func (x *NeighbourInformationNRModeFddinfoExtIes) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[374]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NeighbourInformationNRModeFddinfoExtIes.ProtoReflect.Descriptor instead.
func (*NeighbourInformationNRModeFddinfoExtIes) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{374}
}

func (x *NeighbourInformationNRModeFddinfoExtIes) GetValue() *emptypb.Empty {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:5356
// @inject_tag: aper:"valueExt"
// {NeighbourInformation-NR-ModeFDDInfo}
type NeighbourInformationNRModeFddinfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"valueExt,"
	UlNrFreqInfo *NrfrequencyInfo `protobuf:"bytes,1,opt,name=ul_nr_freq_info,json=ul-NR-FreqInfo,proto3" json:"ul_nr_freq_info,omitempty" aper:"valueExt,"`
	// @inject_tag: aper:"valueExt,"
	DlNrFequInfo *NrfrequencyInfo `protobuf:"bytes,2,opt,name=dl_nr_fequ_info,json=dl-NR-FequInfo,proto3" json:"dl_nr_fequ_info,omitempty" aper:"valueExt,"`
	// @inject_tag: aper:"optional,sizeLB:1,"
	IeExtensions []*NeighbourInformationNRModeFddinfoExtIes `protobuf:"bytes,3,rep,name=ie_extensions,json=ie-Extensions,proto3" json:"ie_extensions,omitempty" aper:"optional,sizeLB:1,"`
}

func (x *NeighbourInformationNRModeFddinfo) Reset() {
	*x = NeighbourInformationNRModeFddinfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[375]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NeighbourInformationNRModeFddinfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NeighbourInformationNRModeFddinfo) ProtoMessage() {}

func (x *NeighbourInformationNRModeFddinfo) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[375]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NeighbourInformationNRModeFddinfo.ProtoReflect.Descriptor instead.
func (*NeighbourInformationNRModeFddinfo) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{375}
}

func (x *NeighbourInformationNRModeFddinfo) GetUlNrFreqInfo() *NrfrequencyInfo {
	if x != nil {
		return x.UlNrFreqInfo
	}
	return nil
}

func (x *NeighbourInformationNRModeFddinfo) GetDlNrFequInfo() *NrfrequencyInfo {
	if x != nil {
		return x.DlNrFequInfo
	}
	return nil
}

func (x *NeighbourInformationNRModeFddinfo) GetIeExtensions() []*NeighbourInformationNRModeFddinfoExtIes {
	if x != nil {
		return x.IeExtensions
	}
	return nil
}

// value set from xnap_v1.asn1:5373
// {NeighbourInformation-NR-ModeTDDInfo-ExtIEs}
type NeighbourInformationNRModeTddinfoExtIes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *emptypb.Empty `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *NeighbourInformationNRModeTddinfoExtIes) Reset() {
	*x = NeighbourInformationNRModeTddinfoExtIes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[376]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NeighbourInformationNRModeTddinfoExtIes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NeighbourInformationNRModeTddinfoExtIes) ProtoMessage() {}

func (x *NeighbourInformationNRModeTddinfoExtIes) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[376]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NeighbourInformationNRModeTddinfoExtIes.ProtoReflect.Descriptor instead.
func (*NeighbourInformationNRModeTddinfoExtIes) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{376}
}

func (x *NeighbourInformationNRModeTddinfoExtIes) GetValue() *emptypb.Empty {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:5368
// @inject_tag: aper:"valueExt"
// {NeighbourInformation-NR-ModeTDDInfo}
type NeighbourInformationNRModeTddinfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"valueExt,"
	NrFreqInfo *NrfrequencyInfo `protobuf:"bytes,1,opt,name=nr_freq_info,json=nr-FreqInfo,proto3" json:"nr_freq_info,omitempty" aper:"valueExt,"`
	// @inject_tag: aper:"optional,sizeLB:1,"
	IeExtensions []*NeighbourInformationNRModeTddinfoExtIes `protobuf:"bytes,2,rep,name=ie_extensions,json=ie-Extensions,proto3" json:"ie_extensions,omitempty" aper:"optional,sizeLB:1,"`
}

func (x *NeighbourInformationNRModeTddinfo) Reset() {
	*x = NeighbourInformationNRModeTddinfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[377]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NeighbourInformationNRModeTddinfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NeighbourInformationNRModeTddinfo) ProtoMessage() {}

func (x *NeighbourInformationNRModeTddinfo) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[377]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NeighbourInformationNRModeTddinfo.ProtoReflect.Descriptor instead.
func (*NeighbourInformationNRModeTddinfo) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{377}
}

func (x *NeighbourInformationNRModeTddinfo) GetNrFreqInfo() *NrfrequencyInfo {
	if x != nil {
		return x.NrFreqInfo
	}
	return nil
}

func (x *NeighbourInformationNRModeTddinfo) GetIeExtensions() []*NeighbourInformationNRModeTddinfoExtIes {
	if x != nil {
		return x.IeExtensions
	}
	return nil
}

// range of Integer from xnap_v1.asn1:5378
// {NID}
type Nid struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"sizeLB:44,sizeUB:44,"
	Value *asn1.BitString `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty" aper:"sizeLB:44,sizeUB:44,"`
}

func (x *Nid) Reset() {
	*x = Nid{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[378]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Nid) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Nid) ProtoMessage() {}

func (x *Nid) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[378]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Nid.ProtoReflect.Descriptor instead.
func (*Nid) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{378}
}

func (x *Nid) GetValue() *asn1.BitString {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:5383
// {NRCarrierList}
type NrcarrierList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"valueExt,sizeLB:1,sizeUB:5,"
	Value []*NrcarrierItem `protobuf:"bytes,1,rep,name=value,proto3" json:"value,omitempty" aper:"valueExt,sizeLB:1,sizeUB:5,"`
}

func (x *NrcarrierList) Reset() {
	*x = NrcarrierList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[379]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NrcarrierList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NrcarrierList) ProtoMessage() {}

func (x *NrcarrierList) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[379]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NrcarrierList.ProtoReflect.Descriptor instead.
func (*NrcarrierList) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{379}
}

func (x *NrcarrierList) GetValue() []*NrcarrierItem {
	if x != nil {
		return x.Value
	}
	return nil
}

// value set from xnap_v1.asn1:5391
// {NRCarrierItem-ExtIEs}
type NrcarrierItemExtIes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *emptypb.Empty `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *NrcarrierItemExtIes) Reset() {
	*x = NrcarrierItemExtIes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[380]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NrcarrierItemExtIes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NrcarrierItemExtIes) ProtoMessage() {}

func (x *NrcarrierItemExtIes) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[380]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NrcarrierItemExtIes.ProtoReflect.Descriptor instead.
func (*NrcarrierItemExtIes) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{380}
}

func (x *NrcarrierItemExtIes) GetValue() *emptypb.Empty {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:5384
// @inject_tag: aper:"valueExt"
// {NRCarrierItem}
type NrcarrierItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"valueExt,valueLB:0,valueUB:3,"
	CarrierScs Nrscs `protobuf:"varint,1,opt,name=carrier_scs,json=carrierSCS,proto3,enum=xnap.v1.Nrscs" json:"carrier_scs,omitempty" aper:"valueExt,valueLB:0,valueUB:3,"`
	// @inject_tag: aper:"valueExt,valueLB:0,valueUB:2199,"
	OffsetToCarrier int32 `protobuf:"varint,2,opt,name=offset_to_carrier,json=offsetToCarrier,proto3" json:"offset_to_carrier,omitempty" aper:"valueExt,valueLB:0,valueUB:2199,"`
	// @inject_tag: aper:"valueExt,valueLB:0,valueUB:275,"
	CarrierBandwidth int32 `protobuf:"varint,3,opt,name=carrier_bandwidth,json=carrierBandwidth,proto3" json:"carrier_bandwidth,omitempty" aper:"valueExt,valueLB:0,valueUB:275,"`
	// @inject_tag: aper:"optional,sizeLB:1,"
	IEExtension []*NrcarrierItemExtIes `protobuf:"bytes,4,rep,name=i_e_extension,json=iE-Extension,proto3" json:"i_e_extension,omitempty" aper:"optional,sizeLB:1,"`
}

func (x *NrcarrierItem) Reset() {
	*x = NrcarrierItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[381]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NrcarrierItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NrcarrierItem) ProtoMessage() {}

func (x *NrcarrierItem) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[381]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NrcarrierItem.ProtoReflect.Descriptor instead.
func (*NrcarrierItem) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{381}
}

func (x *NrcarrierItem) GetCarrierScs() Nrscs {
	if x != nil {
		return x.CarrierScs
	}
	return Nrscs_NRSCS_SCS15
}

func (x *NrcarrierItem) GetOffsetToCarrier() int32 {
	if x != nil {
		return x.OffsetToCarrier
	}
	return 0
}

func (x *NrcarrierItem) GetCarrierBandwidth() int32 {
	if x != nil {
		return x.CarrierBandwidth
	}
	return 0
}

func (x *NrcarrierItem) GetIEExtension() []*NrcarrierItemExtIes {
	if x != nil {
		return x.IEExtension
	}
	return nil
}

// range of Integer from xnap_v1.asn1:5395
// {NRCellPRACHConfig}
type NrcellPrachconfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value []byte `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *NrcellPrachconfig) Reset() {
	*x = NrcellPrachconfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[382]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NrcellPrachconfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NrcellPrachconfig) ProtoMessage() {}

func (x *NrcellPrachconfig) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[382]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NrcellPrachconfig.ProtoReflect.Descriptor instead.
func (*NrcellPrachconfig) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{382}
}

func (x *NrcellPrachconfig) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

// value set from xnap_v1.asn1:5404
// {NG-RAN-Cell-Identity-ExtIEs}
type NgRAnCellIdentityExtIes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *emptypb.Empty `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *NgRAnCellIdentityExtIes) Reset() {
	*x = NgRAnCellIdentityExtIes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[383]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NgRAnCellIdentityExtIes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NgRAnCellIdentityExtIes) ProtoMessage() {}

func (x *NgRAnCellIdentityExtIes) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[383]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NgRAnCellIdentityExtIes.ProtoReflect.Descriptor instead.
func (*NgRAnCellIdentityExtIes) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{383}
}

func (x *NgRAnCellIdentityExtIes) GetValue() *emptypb.Empty {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:5399
// {NG-RAN-Cell-Identity}
type NgRAnCellIdentity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// choice from xnap_v1.asn1:5399
	//
	// Types that are assignable to NgRanCellIdentity:
	//	*NgRAnCellIdentity_Nr
	//	*NgRAnCellIdentity_EUtra
	//	*NgRAnCellIdentity_ChoiceExtension
	NgRanCellIdentity isNgRAnCellIdentity_NgRanCellIdentity `protobuf_oneof:"ng_ran_cell_identity"`
}

func (x *NgRAnCellIdentity) Reset() {
	*x = NgRAnCellIdentity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[384]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NgRAnCellIdentity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NgRAnCellIdentity) ProtoMessage() {}

func (x *NgRAnCellIdentity) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[384]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NgRAnCellIdentity.ProtoReflect.Descriptor instead.
func (*NgRAnCellIdentity) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{384}
}

func (m *NgRAnCellIdentity) GetNgRanCellIdentity() isNgRAnCellIdentity_NgRanCellIdentity {
	if m != nil {
		return m.NgRanCellIdentity
	}
	return nil
}

func (x *NgRAnCellIdentity) GetNr() *NrCellIdentity {
	if x, ok := x.GetNgRanCellIdentity().(*NgRAnCellIdentity_Nr); ok {
		return x.Nr
	}
	return nil
}

func (x *NgRAnCellIdentity) GetEUtra() *EUTraCellIdentity {
	if x, ok := x.GetNgRanCellIdentity().(*NgRAnCellIdentity_EUtra); ok {
		return x.EUtra
	}
	return nil
}

func (x *NgRAnCellIdentity) GetChoiceExtension() *NgRAnCellIdentityExtIes {
	if x, ok := x.GetNgRanCellIdentity().(*NgRAnCellIdentity_ChoiceExtension); ok {
		return x.ChoiceExtension
	}
	return nil
}

type isNgRAnCellIdentity_NgRanCellIdentity interface {
	isNgRAnCellIdentity_NgRanCellIdentity()
}

type NgRAnCellIdentity_Nr struct {
	// @inject_tag: aper:"choiceIdx:1,"
	Nr *NrCellIdentity `protobuf:"bytes,1,opt,name=nr,proto3,oneof" aper:"choiceIdx:1,"`
}

type NgRAnCellIdentity_EUtra struct {
	// @inject_tag: aper:"choiceIdx:2,"
	EUtra *EUTraCellIdentity `protobuf:"bytes,2,opt,name=e_utra,json=e-utra,proto3,oneof" aper:"choiceIdx:2,"`
}

type NgRAnCellIdentity_ChoiceExtension struct {
	// @inject_tag: aper:"choiceIdx:3,"
	ChoiceExtension *NgRAnCellIdentityExtIes `protobuf:"bytes,3,opt,name=choice_extension,json=choice-extension,proto3,oneof" aper:"choiceIdx:3,"`
}

func (*NgRAnCellIdentity_Nr) isNgRAnCellIdentity_NgRanCellIdentity() {}

func (*NgRAnCellIdentity_EUtra) isNgRAnCellIdentity_NgRanCellIdentity() {}

func (*NgRAnCellIdentity_ChoiceExtension) isNgRAnCellIdentity_NgRanCellIdentity() {}

// value set from xnap_v1.asn1:5415
// {NG-RAN-CellPCI-ExtIEs}
type NgRAnCellPciExtIes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *emptypb.Empty `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *NgRAnCellPciExtIes) Reset() {
	*x = NgRAnCellPciExtIes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[385]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NgRAnCellPciExtIes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NgRAnCellPciExtIes) ProtoMessage() {}

func (x *NgRAnCellPciExtIes) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[385]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NgRAnCellPciExtIes.ProtoReflect.Descriptor instead.
func (*NgRAnCellPciExtIes) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{385}
}

func (x *NgRAnCellPciExtIes) GetValue() *emptypb.Empty {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:5410
// {NG-RAN-CellPCI}
type NgRAnCellPci struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// choice from xnap_v1.asn1:5410
	//
	// Types that are assignable to NgRanCellPci:
	//	*NgRAnCellPci_Nr
	//	*NgRAnCellPci_EUtra
	//	*NgRAnCellPci_ChoiceExtension
	NgRanCellPci isNgRAnCellPci_NgRanCellPci `protobuf_oneof:"ng_ran_cell_pci"`
}

func (x *NgRAnCellPci) Reset() {
	*x = NgRAnCellPci{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[386]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NgRAnCellPci) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NgRAnCellPci) ProtoMessage() {}

func (x *NgRAnCellPci) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[386]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NgRAnCellPci.ProtoReflect.Descriptor instead.
func (*NgRAnCellPci) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{386}
}

func (m *NgRAnCellPci) GetNgRanCellPci() isNgRAnCellPci_NgRanCellPci {
	if m != nil {
		return m.NgRanCellPci
	}
	return nil
}

func (x *NgRAnCellPci) GetNr() *Nrpci {
	if x, ok := x.GetNgRanCellPci().(*NgRAnCellPci_Nr); ok {
		return x.Nr
	}
	return nil
}

func (x *NgRAnCellPci) GetEUtra() *EUTrapci {
	if x, ok := x.GetNgRanCellPci().(*NgRAnCellPci_EUtra); ok {
		return x.EUtra
	}
	return nil
}

func (x *NgRAnCellPci) GetChoiceExtension() *NgRAnCellPciExtIes {
	if x, ok := x.GetNgRanCellPci().(*NgRAnCellPci_ChoiceExtension); ok {
		return x.ChoiceExtension
	}
	return nil
}

type isNgRAnCellPci_NgRanCellPci interface {
	isNgRAnCellPci_NgRanCellPci()
}

type NgRAnCellPci_Nr struct {
	// @inject_tag: aper:"choiceIdx:1,"
	Nr *Nrpci `protobuf:"bytes,1,opt,name=nr,proto3,oneof" aper:"choiceIdx:1,"`
}

type NgRAnCellPci_EUtra struct {
	// @inject_tag: aper:"choiceIdx:2,"
	EUtra *EUTrapci `protobuf:"bytes,2,opt,name=e_utra,json=e-utra,proto3,oneof" aper:"choiceIdx:2,"`
}

type NgRAnCellPci_ChoiceExtension struct {
	// @inject_tag: aper:"choiceIdx:3,"
	ChoiceExtension *NgRAnCellPciExtIes `protobuf:"bytes,3,opt,name=choice_extension,json=choice-extension,proto3,oneof" aper:"choiceIdx:3,"`
}

func (*NgRAnCellPci_Nr) isNgRAnCellPci_NgRanCellPci() {}

func (*NgRAnCellPci_EUtra) isNgRAnCellPci_NgRanCellPci() {}

func (*NgRAnCellPci_ChoiceExtension) isNgRAnCellPci_NgRanCellPci() {}

// range of Integer from xnap_v1.asn1:5420
// {NG-RANnodeUEXnAPID}
type NgRAnnodeUexnApid struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"valueLB:0,valueUB:4294967295,"
	Value int64 `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty" aper:"valueLB:0,valueUB:4294967295,"`
}

func (x *NgRAnnodeUexnApid) Reset() {
	*x = NgRAnnodeUexnApid{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[387]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NgRAnnodeUexnApid) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NgRAnnodeUexnApid) ProtoMessage() {}

func (x *NgRAnnodeUexnApid) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[387]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NgRAnnodeUexnApid.ProtoReflect.Descriptor instead.
func (*NgRAnnodeUexnApid) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{387}
}

func (x *NgRAnnodeUexnApid) GetValue() int64 {
	if x != nil {
		return x.Value
	}
	return 0
}

// range of Integer from xnap_v1.asn1:5423
// {NumberofActiveUEs}
type NumberofActiveUes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"valueExt,valueLB:0,valueUB:16777215,"
	Value int32 `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty" aper:"valueExt,valueLB:0,valueUB:16777215,"`
}

func (x *NumberofActiveUes) Reset() {
	*x = NumberofActiveUes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[388]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NumberofActiveUes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NumberofActiveUes) ProtoMessage() {}

func (x *NumberofActiveUes) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[388]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NumberofActiveUes.ProtoReflect.Descriptor instead.
func (*NumberofActiveUes) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{388}
}

func (x *NumberofActiveUes) GetValue() int32 {
	if x != nil {
		return x.Value
	}
	return 0
}

// range of Integer from xnap_v1.asn1:5426
// {NoofRRCConnections}
type NoofRrcconnections struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"valueExt,valueLB:1,valueUB:65536,"
	Value int32 `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty" aper:"valueExt,valueLB:1,valueUB:65536,"`
}

func (x *NoofRrcconnections) Reset() {
	*x = NoofRrcconnections{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[389]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NoofRrcconnections) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NoofRrcconnections) ProtoMessage() {}

func (x *NoofRrcconnections) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[389]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NoofRrcconnections.ProtoReflect.Descriptor instead.
func (*NoofRrcconnections) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{389}
}

func (x *NoofRrcconnections) GetValue() int32 {
	if x != nil {
		return x.Value
	}
	return 0
}

// value set from xnap_v1.asn1:5438
// {NonDynamic5QIDescriptor-ExtIEs&Extension}
type NonDynamic5QidescriptorExtIesExtension struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// value set translated as choice from xnap_v1.asn1:5438
	//
	// Types that are assignable to NonDynamic5QidescriptorExtIes:
	//	*NonDynamic5QidescriptorExtIesExtension_IdCnpacketDelayBudgetDownlink
	//	*NonDynamic5QidescriptorExtIesExtension_IdCnpacketDelayBudgetUplink
	NonDynamic5QidescriptorExtIes isNonDynamic5QidescriptorExtIesExtension_NonDynamic5QidescriptorExtIes `protobuf_oneof:"non_dynamic5_qidescriptor_ext_ies"`
}

func (x *NonDynamic5QidescriptorExtIesExtension) Reset() {
	*x = NonDynamic5QidescriptorExtIesExtension{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[390]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NonDynamic5QidescriptorExtIesExtension) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NonDynamic5QidescriptorExtIesExtension) ProtoMessage() {}

func (x *NonDynamic5QidescriptorExtIesExtension) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[390]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NonDynamic5QidescriptorExtIesExtension.ProtoReflect.Descriptor instead.
func (*NonDynamic5QidescriptorExtIesExtension) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{390}
}

func (m *NonDynamic5QidescriptorExtIesExtension) GetNonDynamic5QidescriptorExtIes() isNonDynamic5QidescriptorExtIesExtension_NonDynamic5QidescriptorExtIes {
	if m != nil {
		return m.NonDynamic5QidescriptorExtIes
	}
	return nil
}

func (x *NonDynamic5QidescriptorExtIesExtension) GetIdCnpacketDelayBudgetDownlink() *ExtendedPacketDelayBudget {
	if x, ok := x.GetNonDynamic5QidescriptorExtIes().(*NonDynamic5QidescriptorExtIesExtension_IdCnpacketDelayBudgetDownlink); ok {
		return x.IdCnpacketDelayBudgetDownlink
	}
	return nil
}

func (x *NonDynamic5QidescriptorExtIesExtension) GetIdCnpacketDelayBudgetUplink() *ExtendedPacketDelayBudget {
	if x, ok := x.GetNonDynamic5QidescriptorExtIes().(*NonDynamic5QidescriptorExtIesExtension_IdCnpacketDelayBudgetUplink); ok {
		return x.IdCnpacketDelayBudgetUplink
	}
	return nil
}

type isNonDynamic5QidescriptorExtIesExtension_NonDynamic5QidescriptorExtIes interface {
	isNonDynamic5QidescriptorExtIesExtension_NonDynamic5QidescriptorExtIes()
}

type NonDynamic5QidescriptorExtIesExtension_IdCnpacketDelayBudgetDownlink struct {
	// @inject_tag: aper:"choiceIdx:1,"
	IdCnpacketDelayBudgetDownlink *ExtendedPacketDelayBudget `protobuf:"bytes,1,opt,name=id_cnpacket_delay_budget_downlink,json=id-CNPacketDelayBudgetDownlink,proto3,oneof" aper:"choiceIdx:1,"`
}

type NonDynamic5QidescriptorExtIesExtension_IdCnpacketDelayBudgetUplink struct {
	// @inject_tag: aper:"choiceIdx:2,"
	IdCnpacketDelayBudgetUplink *ExtendedPacketDelayBudget `protobuf:"bytes,2,opt,name=id_cnpacket_delay_budget_uplink,json=id-CNPacketDelayBudgetUplink,proto3,oneof" aper:"choiceIdx:2,"`
}

func (*NonDynamic5QidescriptorExtIesExtension_IdCnpacketDelayBudgetDownlink) isNonDynamic5QidescriptorExtIesExtension_NonDynamic5QidescriptorExtIes() {
}

func (*NonDynamic5QidescriptorExtIesExtension_IdCnpacketDelayBudgetUplink) isNonDynamic5QidescriptorExtIesExtension_NonDynamic5QidescriptorExtIes() {
}

// concrete instance(s) of class XNAP-PROTOCOL-EXTENSION from xnap_v1.asn1:5438
// @inject_tag: aper:"valueExt"
// {NonDynamic5QIDescriptor-ExtIEs}
type NonDynamic5QidescriptorExtIes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"unique,"
	Id *xnap_commondatatypes.ProtocolIeID `protobuf:"bytes,1,opt,name=id,json=&id,proto3" json:"id,omitempty" aper:"unique,"`
	// @inject_tag: aper:"valueLB:0,valueUB:2,"
	Criticality xnap_commondatatypes.Criticality `protobuf:"varint,2,opt,name=criticality,json=&criticality,proto3,enum=xnap.v1.Criticality" json:"criticality,omitempty" aper:"valueLB:0,valueUB:2,"`
	// @inject_tag: aper:"canonicalOrder,"
	Extension *NonDynamic5QidescriptorExtIesExtension `protobuf:"bytes,3,opt,name=extension,json=&Extension,proto3" json:"extension,omitempty" aper:"canonicalOrder,"`
}

func (x *NonDynamic5QidescriptorExtIes) Reset() {
	*x = NonDynamic5QidescriptorExtIes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[391]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NonDynamic5QidescriptorExtIes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NonDynamic5QidescriptorExtIes) ProtoMessage() {}

func (x *NonDynamic5QidescriptorExtIes) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[391]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NonDynamic5QidescriptorExtIes.ProtoReflect.Descriptor instead.
func (*NonDynamic5QidescriptorExtIes) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{391}
}

func (x *NonDynamic5QidescriptorExtIes) GetId() *xnap_commondatatypes.ProtocolIeID {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *NonDynamic5QidescriptorExtIes) GetCriticality() xnap_commondatatypes.Criticality {
	if x != nil {
		return x.Criticality
	}
	return xnap_commondatatypes.Criticality(0)
}

func (x *NonDynamic5QidescriptorExtIes) GetExtension() *NonDynamic5QidescriptorExtIesExtension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// sequence from xnap_v1.asn1:5430
// @inject_tag: aper:"valueExt"
// {NonDynamic5QIDescriptor}
type NonDynamic5Qidescriptor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FiveQi *FiveQi `protobuf:"bytes,1,opt,name=five_qi,json=fiveQI,proto3" json:"five_qi,omitempty"`
	// @inject_tag: aper:"optional,"
	PriorityLevelQoS *PriorityLevelQoS `protobuf:"bytes,2,opt,name=priority_level_qo_s,json=priorityLevelQoS,proto3,oneof" json:"priority_level_qo_s,omitempty" aper:"optional,"`
	// @inject_tag: aper:"optional,"
	AveragingWindow *AveragingWindow `protobuf:"bytes,3,opt,name=averaging_window,json=averagingWindow,proto3,oneof" json:"averaging_window,omitempty" aper:"optional,"`
	// @inject_tag: aper:"optional,"
	MaximumDataBurstVolume *MaximumDataBurstVolume `protobuf:"bytes,4,opt,name=maximum_data_burst_volume,json=maximumDataBurstVolume,proto3,oneof" json:"maximum_data_burst_volume,omitempty" aper:"optional,"`
	// @inject_tag: aper:"optional,sizeLB:1,"
	IEExtension []*NonDynamic5QidescriptorExtIes `protobuf:"bytes,5,rep,name=i_e_extension,json=iE-Extension,proto3" json:"i_e_extension,omitempty" aper:"optional,sizeLB:1,"`
}

func (x *NonDynamic5Qidescriptor) Reset() {
	*x = NonDynamic5Qidescriptor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[392]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NonDynamic5Qidescriptor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NonDynamic5Qidescriptor) ProtoMessage() {}

func (x *NonDynamic5Qidescriptor) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[392]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NonDynamic5Qidescriptor.ProtoReflect.Descriptor instead.
func (*NonDynamic5Qidescriptor) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{392}
}

func (x *NonDynamic5Qidescriptor) GetFiveQi() *FiveQi {
	if x != nil {
		return x.FiveQi
	}
	return nil
}

func (x *NonDynamic5Qidescriptor) GetPriorityLevelQoS() *PriorityLevelQoS {
	if x != nil {
		return x.PriorityLevelQoS
	}
	return nil
}

func (x *NonDynamic5Qidescriptor) GetAveragingWindow() *AveragingWindow {
	if x != nil {
		return x.AveragingWindow
	}
	return nil
}

func (x *NonDynamic5Qidescriptor) GetMaximumDataBurstVolume() *MaximumDataBurstVolume {
	if x != nil {
		return x.MaximumDataBurstVolume
	}
	return nil
}

func (x *NonDynamic5Qidescriptor) GetIEExtension() []*NonDynamic5QidescriptorExtIes {
	if x != nil {
		return x.IEExtension
	}
	return nil
}

// range of Integer from xnap_v1.asn1:5445
// {NRARFCN}
type Nrarfcn struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"valueLB:0,valueUB:3279165,"
	Value int32 `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty" aper:"valueLB:0,valueUB:3279165,"`
}

func (x *Nrarfcn) Reset() {
	*x = Nrarfcn{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[393]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Nrarfcn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Nrarfcn) ProtoMessage() {}

func (x *Nrarfcn) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[393]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Nrarfcn.ProtoReflect.Descriptor instead.
func (*Nrarfcn) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{393}
}

func (x *Nrarfcn) GetValue() int32 {
	if x != nil {
		return x.Value
	}
	return 0
}

// value set from xnap_v1.asn1:5459
// {NG-eNB-RadioResourceStatus-ExtIEs&Extension}
type NgeNbRadioResourceStatusExtIesExtension struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// value set translated as choice from xnap_v1.asn1:5459
	//
	// Types that are assignable to NgENbRadioResourceStatusExtIes:
	//	*NgeNbRadioResourceStatusExtIesExtension_IdDlSchedulingPdcchCceUsage
	//	*NgeNbRadioResourceStatusExtIesExtension_IdUlSchedulingPdcchCceUsage
	NgENbRadioResourceStatusExtIes isNgeNbRadioResourceStatusExtIesExtension_NgENbRadioResourceStatusExtIes `protobuf_oneof:"ng_e_nb_radio_resource_status_ext_ies"`
}

func (x *NgeNbRadioResourceStatusExtIesExtension) Reset() {
	*x = NgeNbRadioResourceStatusExtIesExtension{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[394]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NgeNbRadioResourceStatusExtIesExtension) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NgeNbRadioResourceStatusExtIesExtension) ProtoMessage() {}

func (x *NgeNbRadioResourceStatusExtIesExtension) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[394]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NgeNbRadioResourceStatusExtIesExtension.ProtoReflect.Descriptor instead.
func (*NgeNbRadioResourceStatusExtIesExtension) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{394}
}

func (m *NgeNbRadioResourceStatusExtIesExtension) GetNgENbRadioResourceStatusExtIes() isNgeNbRadioResourceStatusExtIesExtension_NgENbRadioResourceStatusExtIes {
	if m != nil {
		return m.NgENbRadioResourceStatusExtIes
	}
	return nil
}

func (x *NgeNbRadioResourceStatusExtIesExtension) GetIdDlSchedulingPdcchCceUsage() *DlschedulingPDcchCCeusage {
	if x, ok := x.GetNgENbRadioResourceStatusExtIes().(*NgeNbRadioResourceStatusExtIesExtension_IdDlSchedulingPdcchCceUsage); ok {
		return x.IdDlSchedulingPdcchCceUsage
	}
	return nil
}

func (x *NgeNbRadioResourceStatusExtIesExtension) GetIdUlSchedulingPdcchCceUsage() *UlschedulingPDcchCCeusage {
	if x, ok := x.GetNgENbRadioResourceStatusExtIes().(*NgeNbRadioResourceStatusExtIesExtension_IdUlSchedulingPdcchCceUsage); ok {
		return x.IdUlSchedulingPdcchCceUsage
	}
	return nil
}

type isNgeNbRadioResourceStatusExtIesExtension_NgENbRadioResourceStatusExtIes interface {
	isNgeNbRadioResourceStatusExtIesExtension_NgENbRadioResourceStatusExtIes()
}

type NgeNbRadioResourceStatusExtIesExtension_IdDlSchedulingPdcchCceUsage struct {
	// @inject_tag: aper:"choiceIdx:1,"
	IdDlSchedulingPdcchCceUsage *DlschedulingPDcchCCeusage `protobuf:"bytes,1,opt,name=id_dl_scheduling_pdcch_cce_usage,json=id-DL-scheduling-PDCCH-CCE-usage,proto3,oneof" aper:"choiceIdx:1,"`
}

type NgeNbRadioResourceStatusExtIesExtension_IdUlSchedulingPdcchCceUsage struct {
	// @inject_tag: aper:"choiceIdx:2,"
	IdUlSchedulingPdcchCceUsage *UlschedulingPDcchCCeusage `protobuf:"bytes,2,opt,name=id_ul_scheduling_pdcch_cce_usage,json=id-UL-scheduling-PDCCH-CCE-usage,proto3,oneof" aper:"choiceIdx:2,"`
}

func (*NgeNbRadioResourceStatusExtIesExtension_IdDlSchedulingPdcchCceUsage) isNgeNbRadioResourceStatusExtIesExtension_NgENbRadioResourceStatusExtIes() {
}

func (*NgeNbRadioResourceStatusExtIesExtension_IdUlSchedulingPdcchCceUsage) isNgeNbRadioResourceStatusExtIesExtension_NgENbRadioResourceStatusExtIes() {
}

// concrete instance(s) of class XNAP-PROTOCOL-EXTENSION from xnap_v1.asn1:5459
// @inject_tag: aper:"valueExt"
// {NG-eNB-RadioResourceStatus-ExtIEs}
type NgeNbRadioResourceStatusExtIes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"unique,"
	Id *xnap_commondatatypes.ProtocolIeID `protobuf:"bytes,1,opt,name=id,json=&id,proto3" json:"id,omitempty" aper:"unique,"`
	// @inject_tag: aper:"valueLB:0,valueUB:2,"
	Criticality xnap_commondatatypes.Criticality `protobuf:"varint,2,opt,name=criticality,json=&criticality,proto3,enum=xnap.v1.Criticality" json:"criticality,omitempty" aper:"valueLB:0,valueUB:2,"`
	// @inject_tag: aper:"canonicalOrder,"
	Extension *NgeNbRadioResourceStatusExtIesExtension `protobuf:"bytes,3,opt,name=extension,json=&Extension,proto3" json:"extension,omitempty" aper:"canonicalOrder,"`
}

func (x *NgeNbRadioResourceStatusExtIes) Reset() {
	*x = NgeNbRadioResourceStatusExtIes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[395]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NgeNbRadioResourceStatusExtIes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NgeNbRadioResourceStatusExtIes) ProtoMessage() {}

func (x *NgeNbRadioResourceStatusExtIes) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[395]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NgeNbRadioResourceStatusExtIes.ProtoReflect.Descriptor instead.
func (*NgeNbRadioResourceStatusExtIes) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{395}
}

func (x *NgeNbRadioResourceStatusExtIes) GetId() *xnap_commondatatypes.ProtocolIeID {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *NgeNbRadioResourceStatusExtIes) GetCriticality() xnap_commondatatypes.Criticality {
	if x != nil {
		return x.Criticality
	}
	return xnap_commondatatypes.Criticality(0)
}

func (x *NgeNbRadioResourceStatusExtIes) GetExtension() *NgeNbRadioResourceStatusExtIesExtension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// sequence from xnap_v1.asn1:5449
// @inject_tag: aper:"valueExt"
// {NG-eNB-RadioResourceStatus}
type NgeNbRadioResourceStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DLGbrPrbUsage    *DlGBrPRbusage    `protobuf:"bytes,1,opt,name=d_l_gbr_prb_usage,json=dL-GBR-PRB-usage,proto3" json:"d_l_gbr_prb_usage,omitempty"`
	ULGbrPrbUsage    *UlGBrPRbusage    `protobuf:"bytes,2,opt,name=u_l_gbr_prb_usage,json=uL-GBR-PRB-usage,proto3" json:"u_l_gbr_prb_usage,omitempty"`
	DLNonGbrPrbUsage *DlnonGBrPRbusage `protobuf:"bytes,3,opt,name=d_l_non_gbr_prb_usage,json=dL-non-GBR-PRB-usage,proto3" json:"d_l_non_gbr_prb_usage,omitempty"`
	ULNonGbrPrbUsage *UlnonGBrPRbusage `protobuf:"bytes,4,opt,name=u_l_non_gbr_prb_usage,json=uL-non-GBR-PRB-usage,proto3" json:"u_l_non_gbr_prb_usage,omitempty"`
	DLTotalPrbUsage  *DlTotalPRbusage  `protobuf:"bytes,5,opt,name=d_l_total_prb_usage,json=dL-Total-PRB-usage,proto3" json:"d_l_total_prb_usage,omitempty"`
	ULTotalPrbUsage  *UlTotalPRbusage  `protobuf:"bytes,6,opt,name=u_l_total_prb_usage,json=uL-Total-PRB-usage,proto3" json:"u_l_total_prb_usage,omitempty"`
	// @inject_tag: aper:"optional,sizeLB:1,"
	IEExtensions []*NgeNbRadioResourceStatusExtIes `protobuf:"bytes,7,rep,name=i_e_extensions,json=iE-Extensions,proto3" json:"i_e_extensions,omitempty" aper:"optional,sizeLB:1,"`
}

func (x *NgeNbRadioResourceStatus) Reset() {
	*x = NgeNbRadioResourceStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[396]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NgeNbRadioResourceStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NgeNbRadioResourceStatus) ProtoMessage() {}

func (x *NgeNbRadioResourceStatus) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[396]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NgeNbRadioResourceStatus.ProtoReflect.Descriptor instead.
func (*NgeNbRadioResourceStatus) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{396}
}

func (x *NgeNbRadioResourceStatus) GetDLGbrPrbUsage() *DlGBrPRbusage {
	if x != nil {
		return x.DLGbrPrbUsage
	}
	return nil
}

func (x *NgeNbRadioResourceStatus) GetULGbrPrbUsage() *UlGBrPRbusage {
	if x != nil {
		return x.ULGbrPrbUsage
	}
	return nil
}

func (x *NgeNbRadioResourceStatus) GetDLNonGbrPrbUsage() *DlnonGBrPRbusage {
	if x != nil {
		return x.DLNonGbrPrbUsage
	}
	return nil
}

func (x *NgeNbRadioResourceStatus) GetULNonGbrPrbUsage() *UlnonGBrPRbusage {
	if x != nil {
		return x.ULNonGbrPrbUsage
	}
	return nil
}

func (x *NgeNbRadioResourceStatus) GetDLTotalPrbUsage() *DlTotalPRbusage {
	if x != nil {
		return x.DLTotalPrbUsage
	}
	return nil
}

func (x *NgeNbRadioResourceStatus) GetULTotalPrbUsage() *UlTotalPRbusage {
	if x != nil {
		return x.ULTotalPrbUsage
	}
	return nil
}

func (x *NgeNbRadioResourceStatus) GetIEExtensions() []*NgeNbRadioResourceStatusExtIes {
	if x != nil {
		return x.IEExtensions
	}
	return nil
}

// range of Integer from xnap_v1.asn1:5465
// {DL-scheduling-PDCCH-CCE-usage}
type DlschedulingPDcchCCeusage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"valueLB:0,valueUB:100,"
	Value int32 `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty" aper:"valueLB:0,valueUB:100,"`
}

func (x *DlschedulingPDcchCCeusage) Reset() {
	*x = DlschedulingPDcchCCeusage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[397]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DlschedulingPDcchCCeusage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DlschedulingPDcchCCeusage) ProtoMessage() {}

func (x *DlschedulingPDcchCCeusage) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[397]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DlschedulingPDcchCCeusage.ProtoReflect.Descriptor instead.
func (*DlschedulingPDcchCCeusage) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{397}
}

func (x *DlschedulingPDcchCCeusage) GetValue() int32 {
	if x != nil {
		return x.Value
	}
	return 0
}

// range of Integer from xnap_v1.asn1:5466
// {UL-scheduling-PDCCH-CCE-usage}
type UlschedulingPDcchCCeusage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"valueLB:0,valueUB:100,"
	Value int32 `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty" aper:"valueLB:0,valueUB:100,"`
}

func (x *UlschedulingPDcchCCeusage) Reset() {
	*x = UlschedulingPDcchCCeusage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[398]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UlschedulingPDcchCCeusage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UlschedulingPDcchCCeusage) ProtoMessage() {}

func (x *UlschedulingPDcchCCeusage) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[398]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UlschedulingPDcchCCeusage.ProtoReflect.Descriptor instead.
func (*UlschedulingPDcchCCeusage) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{398}
}

func (x *UlschedulingPDcchCCeusage) GetValue() int32 {
	if x != nil {
		return x.Value
	}
	return 0
}

// value set from xnap_v1.asn1:5478
// {TNLCapacityIndicator-ExtIEs}
type TnlcapacityIndicatorExtIes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *emptypb.Empty `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *TnlcapacityIndicatorExtIes) Reset() {
	*x = TnlcapacityIndicatorExtIes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[399]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TnlcapacityIndicatorExtIes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TnlcapacityIndicatorExtIes) ProtoMessage() {}

func (x *TnlcapacityIndicatorExtIes) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[399]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TnlcapacityIndicatorExtIes.ProtoReflect.Descriptor instead.
func (*TnlcapacityIndicatorExtIes) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{399}
}

func (x *TnlcapacityIndicatorExtIes) GetValue() *emptypb.Empty {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:5470
// @inject_tag: aper:"valueExt"
// {TNLCapacityIndicator}
type TnlcapacityIndicator struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DLtnlofferedCapacity   *OfferedCapacity   `protobuf:"bytes,1,opt,name=d_ltnloffered_capacity,json=dLTNLOfferedCapacity,proto3" json:"d_ltnloffered_capacity,omitempty"`
	DLtnlavailableCapacity *AvailableCapacity `protobuf:"bytes,2,opt,name=d_ltnlavailable_capacity,json=dLTNLAvailableCapacity,proto3" json:"d_ltnlavailable_capacity,omitempty"`
	ULtnlofferedCapacity   *OfferedCapacity   `protobuf:"bytes,3,opt,name=u_ltnloffered_capacity,json=uLTNLOfferedCapacity,proto3" json:"u_ltnloffered_capacity,omitempty"`
	ULtnlavailableCapacity *AvailableCapacity `protobuf:"bytes,4,opt,name=u_ltnlavailable_capacity,json=uLTNLAvailableCapacity,proto3" json:"u_ltnlavailable_capacity,omitempty"`
	// @inject_tag: aper:"optional,sizeLB:1,"
	IEExtensions []*TnlcapacityIndicatorExtIes `protobuf:"bytes,5,rep,name=i_e_extensions,json=iE-Extensions,proto3" json:"i_e_extensions,omitempty" aper:"optional,sizeLB:1,"`
}

func (x *TnlcapacityIndicator) Reset() {
	*x = TnlcapacityIndicator{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[400]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TnlcapacityIndicator) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TnlcapacityIndicator) ProtoMessage() {}

func (x *TnlcapacityIndicator) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[400]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TnlcapacityIndicator.ProtoReflect.Descriptor instead.
func (*TnlcapacityIndicator) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{400}
}

func (x *TnlcapacityIndicator) GetDLtnlofferedCapacity() *OfferedCapacity {
	if x != nil {
		return x.DLtnlofferedCapacity
	}
	return nil
}

func (x *TnlcapacityIndicator) GetDLtnlavailableCapacity() *AvailableCapacity {
	if x != nil {
		return x.DLtnlavailableCapacity
	}
	return nil
}

func (x *TnlcapacityIndicator) GetULtnlofferedCapacity() *OfferedCapacity {
	if x != nil {
		return x.ULtnlofferedCapacity
	}
	return nil
}

func (x *TnlcapacityIndicator) GetULtnlavailableCapacity() *AvailableCapacity {
	if x != nil {
		return x.ULtnlavailableCapacity
	}
	return nil
}

func (x *TnlcapacityIndicator) GetIEExtensions() []*TnlcapacityIndicatorExtIes {
	if x != nil {
		return x.IEExtensions
	}
	return nil
}

// value set from xnap_v1.asn1:5489
// {NPN-Broadcast-Information-ExtIEs}
type NpnBroadcastInformationExtIes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *emptypb.Empty `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *NpnBroadcastInformationExtIes) Reset() {
	*x = NpnBroadcastInformationExtIes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[401]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NpnBroadcastInformationExtIes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NpnBroadcastInformationExtIes) ProtoMessage() {}

func (x *NpnBroadcastInformationExtIes) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[401]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NpnBroadcastInformationExtIes.ProtoReflect.Descriptor instead.
func (*NpnBroadcastInformationExtIes) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{401}
}

func (x *NpnBroadcastInformationExtIes) GetValue() *emptypb.Empty {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:5484
// {NPN-Broadcast-Information}
type NpnBroadcastInformation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// choice from xnap_v1.asn1:5484
	//
	// Types that are assignable to NpnBroadcastInformation:
	//	*NpnBroadcastInformation_SnpnInformation
	//	*NpnBroadcastInformation_PniNpnInformation
	//	*NpnBroadcastInformation_ChoiceExtension
	NpnBroadcastInformation isNpnBroadcastInformation_NpnBroadcastInformation `protobuf_oneof:"npn_broadcast_information"`
}

func (x *NpnBroadcastInformation) Reset() {
	*x = NpnBroadcastInformation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[402]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NpnBroadcastInformation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NpnBroadcastInformation) ProtoMessage() {}

func (x *NpnBroadcastInformation) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[402]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NpnBroadcastInformation.ProtoReflect.Descriptor instead.
func (*NpnBroadcastInformation) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{402}
}

func (m *NpnBroadcastInformation) GetNpnBroadcastInformation() isNpnBroadcastInformation_NpnBroadcastInformation {
	if m != nil {
		return m.NpnBroadcastInformation
	}
	return nil
}

func (x *NpnBroadcastInformation) GetSnpnInformation() *NpnBroadcastInformationSNpn {
	if x, ok := x.GetNpnBroadcastInformation().(*NpnBroadcastInformation_SnpnInformation); ok {
		return x.SnpnInformation
	}
	return nil
}

func (x *NpnBroadcastInformation) GetPniNpnInformation() *NpnBroadcastInformationPNiNPn {
	if x, ok := x.GetNpnBroadcastInformation().(*NpnBroadcastInformation_PniNpnInformation); ok {
		return x.PniNpnInformation
	}
	return nil
}

func (x *NpnBroadcastInformation) GetChoiceExtension() *NpnBroadcastInformationExtIes {
	if x, ok := x.GetNpnBroadcastInformation().(*NpnBroadcastInformation_ChoiceExtension); ok {
		return x.ChoiceExtension
	}
	return nil
}

type isNpnBroadcastInformation_NpnBroadcastInformation interface {
	isNpnBroadcastInformation_NpnBroadcastInformation()
}

type NpnBroadcastInformation_SnpnInformation struct {
	// @inject_tag: aper:"choiceIdx:1,valueExt,"
	SnpnInformation *NpnBroadcastInformationSNpn `protobuf:"bytes,1,opt,name=snpn_information,json=snpn-Information,proto3,oneof" aper:"choiceIdx:1,valueExt,"`
}

type NpnBroadcastInformation_PniNpnInformation struct {
	// @inject_tag: aper:"choiceIdx:2,valueExt,"
	PniNpnInformation *NpnBroadcastInformationPNiNPn `protobuf:"bytes,2,opt,name=pni_npn_information,json=pni-npn-Information,proto3,oneof" aper:"choiceIdx:2,valueExt,"`
}

type NpnBroadcastInformation_ChoiceExtension struct {
	// @inject_tag: aper:"choiceIdx:3,"
	ChoiceExtension *NpnBroadcastInformationExtIes `protobuf:"bytes,3,opt,name=choice_extension,json=choice-extension,proto3,oneof" aper:"choiceIdx:3,"`
}

func (*NpnBroadcastInformation_SnpnInformation) isNpnBroadcastInformation_NpnBroadcastInformation() {}

func (*NpnBroadcastInformation_PniNpnInformation) isNpnBroadcastInformation_NpnBroadcastInformation() {
}

func (*NpnBroadcastInformation_ChoiceExtension) isNpnBroadcastInformation_NpnBroadcastInformation() {}

// value set from xnap_v1.asn1:5499
// {NPN-Broadcast-Information-SNPN-ExtIEs}
type NpnBroadcastInformationSNpnExtIes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *emptypb.Empty `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *NpnBroadcastInformationSNpnExtIes) Reset() {
	*x = NpnBroadcastInformationSNpnExtIes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[403]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NpnBroadcastInformationSNpnExtIes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NpnBroadcastInformationSNpnExtIes) ProtoMessage() {}

func (x *NpnBroadcastInformationSNpnExtIes) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[403]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NpnBroadcastInformationSNpnExtIes.ProtoReflect.Descriptor instead.
func (*NpnBroadcastInformationSNpnExtIes) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{403}
}

func (x *NpnBroadcastInformationSNpnExtIes) GetValue() *emptypb.Empty {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:5494
// @inject_tag: aper:"valueExt"
// {NPN-Broadcast-Information-SNPN}
type NpnBroadcastInformationSNpn struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BroadcastSnpnidList *BroadcastSnpnidList `protobuf:"bytes,1,opt,name=broadcast_snpnid_list,json=broadcastSNPNID-List,proto3" json:"broadcast_snpnid_list,omitempty"`
	// @inject_tag: aper:"optional,sizeLB:1,"
	IEExtension []*NpnBroadcastInformationSNpnExtIes `protobuf:"bytes,2,rep,name=i_e_extension,json=iE-Extension,proto3" json:"i_e_extension,omitempty" aper:"optional,sizeLB:1,"`
}

func (x *NpnBroadcastInformationSNpn) Reset() {
	*x = NpnBroadcastInformationSNpn{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[404]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NpnBroadcastInformationSNpn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NpnBroadcastInformationSNpn) ProtoMessage() {}

func (x *NpnBroadcastInformationSNpn) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[404]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NpnBroadcastInformationSNpn.ProtoReflect.Descriptor instead.
func (*NpnBroadcastInformationSNpn) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{404}
}

func (x *NpnBroadcastInformationSNpn) GetBroadcastSnpnidList() *BroadcastSnpnidList {
	if x != nil {
		return x.BroadcastSnpnidList
	}
	return nil
}

func (x *NpnBroadcastInformationSNpn) GetIEExtension() []*NpnBroadcastInformationSNpnExtIes {
	if x != nil {
		return x.IEExtension
	}
	return nil
}

// value set from xnap_v1.asn1:5508
// {NPN-Broadcast-Information-PNI-NPN-ExtIEs}
type NpnBroadcastInformationPNiNPnExtIes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *emptypb.Empty `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *NpnBroadcastInformationPNiNPnExtIes) Reset() {
	*x = NpnBroadcastInformationPNiNPnExtIes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[405]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NpnBroadcastInformationPNiNPnExtIes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NpnBroadcastInformationPNiNPnExtIes) ProtoMessage() {}

func (x *NpnBroadcastInformationPNiNPnExtIes) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[405]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NpnBroadcastInformationPNiNPnExtIes.ProtoReflect.Descriptor instead.
func (*NpnBroadcastInformationPNiNPnExtIes) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{405}
}

func (x *NpnBroadcastInformationPNiNPnExtIes) GetValue() *emptypb.Empty {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:5503
// @inject_tag: aper:"valueExt"
// {NPN-Broadcast-Information-PNI-NPN}
type NpnBroadcastInformationPNiNPn struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BroadcastPniNpnIdInformation *BroadcastPniNPnIDInformation `protobuf:"bytes,1,opt,name=broadcast_pni_npn_id_information,json=broadcastPNI-NPN-ID-Information,proto3" json:"broadcast_pni_npn_id_information,omitempty"`
	// @inject_tag: aper:"optional,sizeLB:1,"
	IEExtension []*NpnBroadcastInformationPNiNPnExtIes `protobuf:"bytes,2,rep,name=i_e_extension,json=iE-Extension,proto3" json:"i_e_extension,omitempty" aper:"optional,sizeLB:1,"`
}

func (x *NpnBroadcastInformationPNiNPn) Reset() {
	*x = NpnBroadcastInformationPNiNPn{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[406]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NpnBroadcastInformationPNiNPn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NpnBroadcastInformationPNiNPn) ProtoMessage() {}

func (x *NpnBroadcastInformationPNiNPn) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[406]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NpnBroadcastInformationPNiNPn.ProtoReflect.Descriptor instead.
func (*NpnBroadcastInformationPNiNPn) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{406}
}

func (x *NpnBroadcastInformationPNiNPn) GetBroadcastPniNpnIdInformation() *BroadcastPniNPnIDInformation {
	if x != nil {
		return x.BroadcastPniNpnIdInformation
	}
	return nil
}

func (x *NpnBroadcastInformationPNiNPn) GetIEExtension() []*NpnBroadcastInformationPNiNPnExtIes {
	if x != nil {
		return x.IEExtension
	}
	return nil
}

// value set from xnap_v1.asn1:5518
// {NPNMobilityInformation-ExtIEs}
type NpnmobilityInformationExtIes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *emptypb.Empty `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *NpnmobilityInformationExtIes) Reset() {
	*x = NpnmobilityInformationExtIes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[407]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NpnmobilityInformationExtIes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NpnmobilityInformationExtIes) ProtoMessage() {}

func (x *NpnmobilityInformationExtIes) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[407]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NpnmobilityInformationExtIes.ProtoReflect.Descriptor instead.
func (*NpnmobilityInformationExtIes) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{407}
}

func (x *NpnmobilityInformationExtIes) GetValue() *emptypb.Empty {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:5513
// {NPNMobilityInformation}
type NpnmobilityInformation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// choice from xnap_v1.asn1:5513
	//
	// Types that are assignable to NpnmobilityInformation:
	//	*NpnmobilityInformation_SnpnMobilityInformation
	//	*NpnmobilityInformation_PniNpnMobilityInformation
	//	*NpnmobilityInformation_ChoiceExtension
	NpnmobilityInformation isNpnmobilityInformation_NpnmobilityInformation `protobuf_oneof:"npnmobility_information"`
}

func (x *NpnmobilityInformation) Reset() {
	*x = NpnmobilityInformation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[408]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NpnmobilityInformation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NpnmobilityInformation) ProtoMessage() {}

func (x *NpnmobilityInformation) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[408]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NpnmobilityInformation.ProtoReflect.Descriptor instead.
func (*NpnmobilityInformation) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{408}
}

func (m *NpnmobilityInformation) GetNpnmobilityInformation() isNpnmobilityInformation_NpnmobilityInformation {
	if m != nil {
		return m.NpnmobilityInformation
	}
	return nil
}

func (x *NpnmobilityInformation) GetSnpnMobilityInformation() *NpnmobilityInformationSNpn {
	if x, ok := x.GetNpnmobilityInformation().(*NpnmobilityInformation_SnpnMobilityInformation); ok {
		return x.SnpnMobilityInformation
	}
	return nil
}

func (x *NpnmobilityInformation) GetPniNpnMobilityInformation() *NpnmobilityInformationPNiNPn {
	if x, ok := x.GetNpnmobilityInformation().(*NpnmobilityInformation_PniNpnMobilityInformation); ok {
		return x.PniNpnMobilityInformation
	}
	return nil
}

func (x *NpnmobilityInformation) GetChoiceExtension() *NpnmobilityInformationExtIes {
	if x, ok := x.GetNpnmobilityInformation().(*NpnmobilityInformation_ChoiceExtension); ok {
		return x.ChoiceExtension
	}
	return nil
}

type isNpnmobilityInformation_NpnmobilityInformation interface {
	isNpnmobilityInformation_NpnmobilityInformation()
}

type NpnmobilityInformation_SnpnMobilityInformation struct {
	// @inject_tag: aper:"choiceIdx:1,valueExt,"
	SnpnMobilityInformation *NpnmobilityInformationSNpn `protobuf:"bytes,1,opt,name=snpn_mobility_information,json=snpn-mobility-information,proto3,oneof" aper:"choiceIdx:1,valueExt,"`
}

type NpnmobilityInformation_PniNpnMobilityInformation struct {
	// @inject_tag: aper:"choiceIdx:2,valueExt,"
	PniNpnMobilityInformation *NpnmobilityInformationPNiNPn `protobuf:"bytes,2,opt,name=pni_npn_mobility_information,json=pni-npn-mobility-information,proto3,oneof" aper:"choiceIdx:2,valueExt,"`
}

type NpnmobilityInformation_ChoiceExtension struct {
	// @inject_tag: aper:"choiceIdx:3,"
	ChoiceExtension *NpnmobilityInformationExtIes `protobuf:"bytes,3,opt,name=choice_extension,json=choice-extension,proto3,oneof" aper:"choiceIdx:3,"`
}

func (*NpnmobilityInformation_SnpnMobilityInformation) isNpnmobilityInformation_NpnmobilityInformation() {
}

func (*NpnmobilityInformation_PniNpnMobilityInformation) isNpnmobilityInformation_NpnmobilityInformation() {
}

func (*NpnmobilityInformation_ChoiceExtension) isNpnmobilityInformation_NpnmobilityInformation() {}

// value set from xnap_v1.asn1:5528
// {NPNMobilityInformation-SNPN-ExtIEs}
type NpnmobilityInformationSNpnExtIes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *emptypb.Empty `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *NpnmobilityInformationSNpnExtIes) Reset() {
	*x = NpnmobilityInformationSNpnExtIes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[409]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NpnmobilityInformationSNpnExtIes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NpnmobilityInformationSNpnExtIes) ProtoMessage() {}

func (x *NpnmobilityInformationSNpnExtIes) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[409]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NpnmobilityInformationSNpnExtIes.ProtoReflect.Descriptor instead.
func (*NpnmobilityInformationSNpnExtIes) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{409}
}

func (x *NpnmobilityInformationSNpnExtIes) GetValue() *emptypb.Empty {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:5523
// @inject_tag: aper:"valueExt"
// {NPNMobilityInformation-SNPN}
type NpnmobilityInformationSNpn struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServingNid *Nid `protobuf:"bytes,1,opt,name=serving_nid,json=serving-NID,proto3" json:"serving_nid,omitempty"`
	// @inject_tag: aper:"optional,sizeLB:1,"
	IEExtension []*NpnmobilityInformationSNpnExtIes `protobuf:"bytes,2,rep,name=i_e_extension,json=iE-Extension,proto3" json:"i_e_extension,omitempty" aper:"optional,sizeLB:1,"`
}

func (x *NpnmobilityInformationSNpn) Reset() {
	*x = NpnmobilityInformationSNpn{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[410]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NpnmobilityInformationSNpn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NpnmobilityInformationSNpn) ProtoMessage() {}

func (x *NpnmobilityInformationSNpn) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[410]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NpnmobilityInformationSNpn.ProtoReflect.Descriptor instead.
func (*NpnmobilityInformationSNpn) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{410}
}

func (x *NpnmobilityInformationSNpn) GetServingNid() *Nid {
	if x != nil {
		return x.ServingNid
	}
	return nil
}

func (x *NpnmobilityInformationSNpn) GetIEExtension() []*NpnmobilityInformationSNpnExtIes {
	if x != nil {
		return x.IEExtension
	}
	return nil
}

// value set from xnap_v1.asn1:5538
// {NPNMobilityInformation-PNI-NPN-ExtIEs}
type NpnmobilityInformationPNiNPnExtIes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *emptypb.Empty `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *NpnmobilityInformationPNiNPnExtIes) Reset() {
	*x = NpnmobilityInformationPNiNPnExtIes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[411]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NpnmobilityInformationPNiNPnExtIes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NpnmobilityInformationPNiNPnExtIes) ProtoMessage() {}

func (x *NpnmobilityInformationPNiNPnExtIes) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[411]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NpnmobilityInformationPNiNPnExtIes.ProtoReflect.Descriptor instead.
func (*NpnmobilityInformationPNiNPnExtIes) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{411}
}

func (x *NpnmobilityInformationPNiNPnExtIes) GetValue() *emptypb.Empty {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:5533
// @inject_tag: aper:"valueExt"
// {NPNMobilityInformation-PNI-NPN}
type NpnmobilityInformationPNiNPn struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AllowedPniNpnIdList *AllowedPniNPnIDList `protobuf:"bytes,1,opt,name=allowed_pni_npn_id_list,json=allowedPNI-NPN-ID-List,proto3" json:"allowed_pni_npn_id_list,omitempty"`
	// @inject_tag: aper:"optional,sizeLB:1,"
	IEExtension []*NpnmobilityInformationPNiNPnExtIes `protobuf:"bytes,2,rep,name=i_e_extension,json=iE-Extension,proto3" json:"i_e_extension,omitempty" aper:"optional,sizeLB:1,"`
}

func (x *NpnmobilityInformationPNiNPn) Reset() {
	*x = NpnmobilityInformationPNiNPn{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[412]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NpnmobilityInformationPNiNPn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NpnmobilityInformationPNiNPn) ProtoMessage() {}

func (x *NpnmobilityInformationPNiNPn) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[412]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NpnmobilityInformationPNiNPn.ProtoReflect.Descriptor instead.
func (*NpnmobilityInformationPNiNPn) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{412}
}

func (x *NpnmobilityInformationPNiNPn) GetAllowedPniNpnIdList() *AllowedPniNPnIDList {
	if x != nil {
		return x.AllowedPniNpnIdList
	}
	return nil
}

func (x *NpnmobilityInformationPNiNPn) GetIEExtension() []*NpnmobilityInformationPNiNPnExtIes {
	if x != nil {
		return x.IEExtension
	}
	return nil
}

// value set from xnap_v1.asn1:5548
// {NPNPagingAssistanceInformation-ExtIEs}
type NpnpagingAssistanceInformationExtIes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *emptypb.Empty `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *NpnpagingAssistanceInformationExtIes) Reset() {
	*x = NpnpagingAssistanceInformationExtIes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[413]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NpnpagingAssistanceInformationExtIes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NpnpagingAssistanceInformationExtIes) ProtoMessage() {}

func (x *NpnpagingAssistanceInformationExtIes) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[413]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NpnpagingAssistanceInformationExtIes.ProtoReflect.Descriptor instead.
func (*NpnpagingAssistanceInformationExtIes) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{413}
}

func (x *NpnpagingAssistanceInformationExtIes) GetValue() *emptypb.Empty {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:5544
// {NPNPagingAssistanceInformation}
type NpnpagingAssistanceInformation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// choice from xnap_v1.asn1:5544
	//
	// Types that are assignable to NpnpagingAssistanceInformation:
	//	*NpnpagingAssistanceInformation_PniNpnInformation
	//	*NpnpagingAssistanceInformation_ChoiceExtension
	NpnpagingAssistanceInformation isNpnpagingAssistanceInformation_NpnpagingAssistanceInformation `protobuf_oneof:"npnpaging_assistance_information"`
}

func (x *NpnpagingAssistanceInformation) Reset() {
	*x = NpnpagingAssistanceInformation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[414]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NpnpagingAssistanceInformation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NpnpagingAssistanceInformation) ProtoMessage() {}

func (x *NpnpagingAssistanceInformation) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[414]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NpnpagingAssistanceInformation.ProtoReflect.Descriptor instead.
func (*NpnpagingAssistanceInformation) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{414}
}

func (m *NpnpagingAssistanceInformation) GetNpnpagingAssistanceInformation() isNpnpagingAssistanceInformation_NpnpagingAssistanceInformation {
	if m != nil {
		return m.NpnpagingAssistanceInformation
	}
	return nil
}

func (x *NpnpagingAssistanceInformation) GetPniNpnInformation() *NpnpagingAssistanceInformationPNiNPn {
	if x, ok := x.GetNpnpagingAssistanceInformation().(*NpnpagingAssistanceInformation_PniNpnInformation); ok {
		return x.PniNpnInformation
	}
	return nil
}

func (x *NpnpagingAssistanceInformation) GetChoiceExtension() *NpnpagingAssistanceInformationExtIes {
	if x, ok := x.GetNpnpagingAssistanceInformation().(*NpnpagingAssistanceInformation_ChoiceExtension); ok {
		return x.ChoiceExtension
	}
	return nil
}

type isNpnpagingAssistanceInformation_NpnpagingAssistanceInformation interface {
	isNpnpagingAssistanceInformation_NpnpagingAssistanceInformation()
}

type NpnpagingAssistanceInformation_PniNpnInformation struct {
	// @inject_tag: aper:"choiceIdx:1,valueExt,"
	PniNpnInformation *NpnpagingAssistanceInformationPNiNPn `protobuf:"bytes,1,opt,name=pni_npn_information,json=pni-npn-Information,proto3,oneof" aper:"choiceIdx:1,valueExt,"`
}

type NpnpagingAssistanceInformation_ChoiceExtension struct {
	// @inject_tag: aper:"choiceIdx:2,"
	ChoiceExtension *NpnpagingAssistanceInformationExtIes `protobuf:"bytes,2,opt,name=choice_extension,json=choice-extension,proto3,oneof" aper:"choiceIdx:2,"`
}

func (*NpnpagingAssistanceInformation_PniNpnInformation) isNpnpagingAssistanceInformation_NpnpagingAssistanceInformation() {
}

func (*NpnpagingAssistanceInformation_ChoiceExtension) isNpnpagingAssistanceInformation_NpnpagingAssistanceInformation() {
}

// value set from xnap_v1.asn1:5558
// {NPNPagingAssistanceInformation-PNI-NPN-ExtIEs}
type NpnpagingAssistanceInformationPNiNPnExtIes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *emptypb.Empty `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *NpnpagingAssistanceInformationPNiNPnExtIes) Reset() {
	*x = NpnpagingAssistanceInformationPNiNPnExtIes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[415]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NpnpagingAssistanceInformationPNiNPnExtIes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NpnpagingAssistanceInformationPNiNPnExtIes) ProtoMessage() {}

func (x *NpnpagingAssistanceInformationPNiNPnExtIes) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[415]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NpnpagingAssistanceInformationPNiNPnExtIes.ProtoReflect.Descriptor instead.
func (*NpnpagingAssistanceInformationPNiNPnExtIes) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{415}
}

func (x *NpnpagingAssistanceInformationPNiNPnExtIes) GetValue() *emptypb.Empty {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:5553
// @inject_tag: aper:"valueExt"
// {NPNPagingAssistanceInformation-PNI-NPN}
type NpnpagingAssistanceInformationPNiNPn struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AllowedPniNpnIdList *AllowedPniNPnIDList `protobuf:"bytes,1,opt,name=allowed_pni_npn_id_list,json=allowedPNI-NPN-ID-List,proto3" json:"allowed_pni_npn_id_list,omitempty"`
	// @inject_tag: aper:"optional,sizeLB:1,"
	IEExtension []*NpnpagingAssistanceInformationPNiNPnExtIes `protobuf:"bytes,2,rep,name=i_e_extension,json=iE-Extension,proto3" json:"i_e_extension,omitempty" aper:"optional,sizeLB:1,"`
}

func (x *NpnpagingAssistanceInformationPNiNPn) Reset() {
	*x = NpnpagingAssistanceInformationPNiNPn{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[416]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NpnpagingAssistanceInformationPNiNPn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NpnpagingAssistanceInformationPNiNPn) ProtoMessage() {}

func (x *NpnpagingAssistanceInformationPNiNPn) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[416]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NpnpagingAssistanceInformationPNiNPn.ProtoReflect.Descriptor instead.
func (*NpnpagingAssistanceInformationPNiNPn) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{416}
}

func (x *NpnpagingAssistanceInformationPNiNPn) GetAllowedPniNpnIdList() *AllowedPniNPnIDList {
	if x != nil {
		return x.AllowedPniNpnIdList
	}
	return nil
}

func (x *NpnpagingAssistanceInformationPNiNPn) GetIEExtension() []*NpnpagingAssistanceInformationPNiNPnExtIes {
	if x != nil {
		return x.IEExtension
	}
	return nil
}

// value set from xnap_v1.asn1:5568
// {NPN-Support-ExtIEs}
type NpnSupportExtIes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *emptypb.Empty `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *NpnSupportExtIes) Reset() {
	*x = NpnSupportExtIes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[417]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NpnSupportExtIes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NpnSupportExtIes) ProtoMessage() {}

func (x *NpnSupportExtIes) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[417]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NpnSupportExtIes.ProtoReflect.Descriptor instead.
func (*NpnSupportExtIes) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{417}
}

func (x *NpnSupportExtIes) GetValue() *emptypb.Empty {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:5564
// {NPN-Support}
type NpnSupport struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// choice from xnap_v1.asn1:5564
	//
	// Types that are assignable to NpnSupport:
	//	*NpnSupport_SNpn
	//	*NpnSupport_ChoiceExtensions
	NpnSupport isNpnSupport_NpnSupport `protobuf_oneof:"npn_support"`
}

func (x *NpnSupport) Reset() {
	*x = NpnSupport{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[418]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NpnSupport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NpnSupport) ProtoMessage() {}

func (x *NpnSupport) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[418]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NpnSupport.ProtoReflect.Descriptor instead.
func (*NpnSupport) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{418}
}

func (m *NpnSupport) GetNpnSupport() isNpnSupport_NpnSupport {
	if m != nil {
		return m.NpnSupport
	}
	return nil
}

func (x *NpnSupport) GetSNpn() *NpnSupportSNpn {
	if x, ok := x.GetNpnSupport().(*NpnSupport_SNpn); ok {
		return x.SNpn
	}
	return nil
}

func (x *NpnSupport) GetChoiceExtensions() *NpnSupportExtIes {
	if x, ok := x.GetNpnSupport().(*NpnSupport_ChoiceExtensions); ok {
		return x.ChoiceExtensions
	}
	return nil
}

type isNpnSupport_NpnSupport interface {
	isNpnSupport_NpnSupport()
}

type NpnSupport_SNpn struct {
	// @inject_tag: aper:"choiceIdx:1,valueExt,"
	SNpn *NpnSupportSNpn `protobuf:"bytes,1,opt,name=s_npn,json=sNPN,proto3,oneof" aper:"choiceIdx:1,valueExt,"`
}

type NpnSupport_ChoiceExtensions struct {
	// @inject_tag: aper:"choiceIdx:2,valueExt"
	ChoiceExtensions *NpnSupportExtIes `protobuf:"bytes,2,opt,name=choice_extensions,json=choice-Extensions,proto3,oneof" aper:"choiceIdx:2,valueExt"`
}

func (*NpnSupport_SNpn) isNpnSupport_NpnSupport() {}

func (*NpnSupport_ChoiceExtensions) isNpnSupport_NpnSupport() {}

// value set from xnap_v1.asn1:5578
// {NPN-Support-SNPN-ExtIEs}
type NpnSupportSNpnExtIes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *emptypb.Empty `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *NpnSupportSNpnExtIes) Reset() {
	*x = NpnSupportSNpnExtIes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[419]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NpnSupportSNpnExtIes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NpnSupportSNpnExtIes) ProtoMessage() {}

func (x *NpnSupportSNpnExtIes) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[419]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NpnSupportSNpnExtIes.ProtoReflect.Descriptor instead.
func (*NpnSupportSNpnExtIes) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{419}
}

func (x *NpnSupportSNpnExtIes) GetValue() *emptypb.Empty {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:5573
// @inject_tag: aper:"valueExt"
// {NPN-Support-SNPN}
type NpnSupportSNpn struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Nid *Nid `protobuf:"bytes,1,opt,name=nid,proto3" json:"nid,omitempty"`
	// @inject_tag: aper:"optional,sizeLB:1,sizeUB:65535,valueExt,"
	IeExtension []*NpnSupportSNpnExtIes `protobuf:"bytes,2,rep,name=ie_extension,json=ie-Extension,proto3" json:"ie_extension,omitempty" aper:"optional,sizeLB:1,sizeUB:65535,valueExt,"`
}

func (x *NpnSupportSNpn) Reset() {
	*x = NpnSupportSNpn{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[420]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NpnSupportSNpn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NpnSupportSNpn) ProtoMessage() {}

func (x *NpnSupportSNpn) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[420]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NpnSupportSNpn.ProtoReflect.Descriptor instead.
func (*NpnSupportSNpn) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{420}
}

func (x *NpnSupportSNpn) GetNid() *Nid {
	if x != nil {
		return x.Nid
	}
	return nil
}

func (x *NpnSupportSNpn) GetIeExtension() []*NpnSupportSNpnExtIes {
	if x != nil {
		return x.IeExtension
	}
	return nil
}

// value set from xnap_v1.asn1:5596
// {FDD-or-TDD-in-NPRACHConfiguration-Choice-ExtIEs}
type FddorTDdinNPrachconfigurationChoiceExtIes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *emptypb.Empty `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *FddorTDdinNPrachconfigurationChoiceExtIes) Reset() {
	*x = FddorTDdinNPrachconfigurationChoiceExtIes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[421]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FddorTDdinNPrachconfigurationChoiceExtIes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FddorTDdinNPrachconfigurationChoiceExtIes) ProtoMessage() {}

func (x *FddorTDdinNPrachconfigurationChoiceExtIes) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[421]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FddorTDdinNPrachconfigurationChoiceExtIes.ProtoReflect.Descriptor instead.
func (*FddorTDdinNPrachconfigurationChoiceExtIes) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{421}
}

func (x *FddorTDdinNPrachconfigurationChoiceExtIes) GetValue() *emptypb.Empty {
	if x != nil {
		return x.Value
	}
	return nil
}

// choice from xnap_v1.asn1:5584
// {fdd-or-tddNPRACHConfiguration}
type FddortddNprachconfiguration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// choice from xnap_v1.asn1:5584
	//
	// Types that are assignable to FddOrTddNprachconfiguration:
	//	*FddortddNprachconfiguration_Fdd
	//	*FddortddNprachconfiguration_Tdd
	//	*FddortddNprachconfiguration_ChoiceExtension
	FddOrTddNprachconfiguration isFddortddNprachconfiguration_FddOrTddNprachconfiguration `protobuf_oneof:"fdd_or_tdd_nprachconfiguration"`
}

func (x *FddortddNprachconfiguration) Reset() {
	*x = FddortddNprachconfiguration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[422]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FddortddNprachconfiguration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FddortddNprachconfiguration) ProtoMessage() {}

func (x *FddortddNprachconfiguration) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[422]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FddortddNprachconfiguration.ProtoReflect.Descriptor instead.
func (*FddortddNprachconfiguration) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{422}
}

func (m *FddortddNprachconfiguration) GetFddOrTddNprachconfiguration() isFddortddNprachconfiguration_FddOrTddNprachconfiguration {
	if m != nil {
		return m.FddOrTddNprachconfiguration
	}
	return nil
}

func (x *FddortddNprachconfiguration) GetFdd() *NprachconfigurationFDd {
	if x, ok := x.GetFddOrTddNprachconfiguration().(*FddortddNprachconfiguration_Fdd); ok {
		return x.Fdd
	}
	return nil
}

func (x *FddortddNprachconfiguration) GetTdd() *NprachconfigurationTDd {
	if x, ok := x.GetFddOrTddNprachconfiguration().(*FddortddNprachconfiguration_Tdd); ok {
		return x.Tdd
	}
	return nil
}

func (x *FddortddNprachconfiguration) GetChoiceExtension() *FddorTDdinNPrachconfigurationChoiceExtIes {
	if x, ok := x.GetFddOrTddNprachconfiguration().(*FddortddNprachconfiguration_ChoiceExtension); ok {
		return x.ChoiceExtension
	}
	return nil
}

type isFddortddNprachconfiguration_FddOrTddNprachconfiguration interface {
	isFddortddNprachconfiguration_FddOrTddNprachconfiguration()
}

type FddortddNprachconfiguration_Fdd struct {
	// @inject_tag: aper:"choiceIdx:1,valueExt,"
	Fdd *NprachconfigurationFDd `protobuf:"bytes,1,opt,name=fdd,proto3,oneof" aper:"choiceIdx:1,valueExt,"`
}

type FddortddNprachconfiguration_Tdd struct {
	// @inject_tag: aper:"choiceIdx:2,valueExt,"
	Tdd *NprachconfigurationTDd `protobuf:"bytes,2,opt,name=tdd,proto3,oneof" aper:"choiceIdx:2,valueExt,"`
}

type FddortddNprachconfiguration_ChoiceExtension struct {
	// @inject_tag: aper:"choiceIdx:3,"
	ChoiceExtension *FddorTDdinNPrachconfigurationChoiceExtIes `protobuf:"bytes,3,opt,name=choice_extension,json=choice-extension,proto3,oneof" aper:"choiceIdx:3,"`
}

func (*FddortddNprachconfiguration_Fdd) isFddortddNprachconfiguration_FddOrTddNprachconfiguration() {}

func (*FddortddNprachconfiguration_Tdd) isFddortddNprachconfiguration_FddOrTddNprachconfiguration() {}

func (*FddortddNprachconfiguration_ChoiceExtension) isFddortddNprachconfiguration_FddOrTddNprachconfiguration() {
}

// value set from xnap_v1.asn1:5592
// {NPRACHConfiguration-ExtIEs}
type NprachconfigurationExtIes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *emptypb.Empty `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *NprachconfigurationExtIes) Reset() {
	*x = NprachconfigurationExtIes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[423]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NprachconfigurationExtIes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NprachconfigurationExtIes) ProtoMessage() {}

func (x *NprachconfigurationExtIes) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[423]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NprachconfigurationExtIes.ProtoReflect.Descriptor instead.
func (*NprachconfigurationExtIes) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{423}
}

func (x *NprachconfigurationExtIes) GetValue() *emptypb.Empty {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:5587
// @inject_tag: aper:"valueExt"
// {NPRACHConfiguration}
type Nprachconfiguration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FddOrTdd *FddortddNprachconfiguration `protobuf:"bytes,1,opt,name=fdd_or_tdd,json=fdd-or-tdd,proto3" json:"fdd_or_tdd,omitempty"`
	// @inject_tag: aper:"optional,sizeLB:1,"
	IEExtensions []*NprachconfigurationExtIes `protobuf:"bytes,2,rep,name=i_e_extensions,json=iE-Extensions,proto3" json:"i_e_extensions,omitempty" aper:"optional,sizeLB:1,"`
}

func (x *Nprachconfiguration) Reset() {
	*x = Nprachconfiguration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[424]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Nprachconfiguration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Nprachconfiguration) ProtoMessage() {}

func (x *Nprachconfiguration) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[424]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Nprachconfiguration.ProtoReflect.Descriptor instead.
func (*Nprachconfiguration) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{424}
}

func (x *Nprachconfiguration) GetFddOrTdd() *FddortddNprachconfiguration {
	if x != nil {
		return x.FddOrTdd
	}
	return nil
}

func (x *Nprachconfiguration) GetIEExtensions() []*NprachconfigurationExtIes {
	if x != nil {
		return x.IEExtensions
	}
	return nil
}

// value set from xnap_v1.asn1:5612
// {NPRACHConfiguration-FDD-ExtIEs}
type NprachconfigurationFDdExtIes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *emptypb.Empty `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *NprachconfigurationFDdExtIes) Reset() {
	*x = NprachconfigurationFDdExtIes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[425]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NprachconfigurationFDdExtIes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NprachconfigurationFDdExtIes) ProtoMessage() {}

func (x *NprachconfigurationFDdExtIes) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[425]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NprachconfigurationFDdExtIes.ProtoReflect.Descriptor instead.
func (*NprachconfigurationFDdExtIes) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{425}
}

func (x *NprachconfigurationFDdExtIes) GetValue() *emptypb.Empty {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:5601
// @inject_tag: aper:"valueExt"
// {NPRACHConfiguration-FDD}
type NprachconfigurationFDd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"valueExt,valueLB:0,valueUB:1,"
	NprachCpLength            NprachCPLength `protobuf:"varint,1,opt,name=nprach_cp_length,json=nprach-CP-length,proto3,enum=xnap.v1.NprachCPLength" json:"nprach_cp_length,omitempty" aper:"valueExt,valueLB:0,valueUB:1,"`
	AnchorCarrierNprachconfig []byte         `protobuf:"bytes,2,opt,name=anchor_carrier_nprachconfig,json=anchorCarrier-NPRACHConfig,proto3" json:"anchor_carrier_nprachconfig,omitempty"`
	// @inject_tag: aper:"optional,"
	AnchorCarrierEdtNprachconfig []byte `protobuf:"bytes,3,opt,name=anchor_carrier_edt_nprachconfig,json=anchorCarrier-EDT-NPRACHConfig,proto3,oneof" json:"anchor_carrier_edt_nprachconfig,omitempty" aper:"optional,"`
	// @inject_tag: aper:"optional,"
	AnchorCarrierFormat2Nprachconfig []byte `protobuf:"bytes,4,opt,name=anchor_carrier_format2_nprachconfig,json=anchorCarrier-Format2-NPRACHConfig,proto3,oneof" json:"anchor_carrier_format2_nprachconfig,omitempty" aper:"optional,"`
	// @inject_tag: aper:"optional,"
	AnchorCarrierFormat2EdtNprachconfig []byte `protobuf:"bytes,5,opt,name=anchor_carrier_format2_edt_nprachconfig,json=anchorCarrier-Format2-EDT-NPRACHConfig,proto3,oneof" json:"anchor_carrier_format2_edt_nprachconfig,omitempty" aper:"optional,"`
	// @inject_tag: aper:"optional,"
	NonAnchorCarrierNprachconfig []byte `protobuf:"bytes,6,opt,name=non_anchor_carrier_nprachconfig,json=non-anchorCarrier-NPRACHConfig,proto3,oneof" json:"non_anchor_carrier_nprachconfig,omitempty" aper:"optional,"`
	// @inject_tag: aper:"optional,"
	NonAnchorCarrierFormat2Nprachconfig []byte `protobuf:"bytes,7,opt,name=non_anchor_carrier_format2_nprachconfig,json=non-anchorCarrier-Format2-NPRACHConfig,proto3,oneof" json:"non_anchor_carrier_format2_nprachconfig,omitempty" aper:"optional,"`
	// @inject_tag: aper:"optional,sizeLB:1,"
	IEExtensions []*NprachconfigurationFDdExtIes `protobuf:"bytes,8,rep,name=i_e_extensions,json=iE-Extensions,proto3" json:"i_e_extensions,omitempty" aper:"optional,sizeLB:1,"`
}

func (x *NprachconfigurationFDd) Reset() {
	*x = NprachconfigurationFDd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[426]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NprachconfigurationFDd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NprachconfigurationFDd) ProtoMessage() {}

func (x *NprachconfigurationFDd) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[426]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NprachconfigurationFDd.ProtoReflect.Descriptor instead.
func (*NprachconfigurationFDd) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{426}
}

func (x *NprachconfigurationFDd) GetNprachCpLength() NprachCPLength {
	if x != nil {
		return x.NprachCpLength
	}
	return NprachCPLength_NPRACH_CP_LENGTH_US66DOT7
}

func (x *NprachconfigurationFDd) GetAnchorCarrierNprachconfig() []byte {
	if x != nil {
		return x.AnchorCarrierNprachconfig
	}
	return nil
}

func (x *NprachconfigurationFDd) GetAnchorCarrierEdtNprachconfig() []byte {
	if x != nil {
		return x.AnchorCarrierEdtNprachconfig
	}
	return nil
}

func (x *NprachconfigurationFDd) GetAnchorCarrierFormat2Nprachconfig() []byte {
	if x != nil {
		return x.AnchorCarrierFormat2Nprachconfig
	}
	return nil
}

func (x *NprachconfigurationFDd) GetAnchorCarrierFormat2EdtNprachconfig() []byte {
	if x != nil {
		return x.AnchorCarrierFormat2EdtNprachconfig
	}
	return nil
}

func (x *NprachconfigurationFDd) GetNonAnchorCarrierNprachconfig() []byte {
	if x != nil {
		return x.NonAnchorCarrierNprachconfig
	}
	return nil
}

func (x *NprachconfigurationFDd) GetNonAnchorCarrierFormat2Nprachconfig() []byte {
	if x != nil {
		return x.NonAnchorCarrierFormat2Nprachconfig
	}
	return nil
}

func (x *NprachconfigurationFDd) GetIEExtensions() []*NprachconfigurationFDdExtIes {
	if x != nil {
		return x.IEExtensions
	}
	return nil
}

// value set from xnap_v1.asn1:5626
// {NPRACHConfiguration-TDD-ExtIEs}
type NprachconfigurationTDdExtIes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *emptypb.Empty `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *NprachconfigurationTDdExtIes) Reset() {
	*x = NprachconfigurationTDdExtIes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[427]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NprachconfigurationTDdExtIes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NprachconfigurationTDdExtIes) ProtoMessage() {}

func (x *NprachconfigurationTDdExtIes) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[427]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NprachconfigurationTDdExtIes.ProtoReflect.Descriptor instead.
func (*NprachconfigurationTDdExtIes) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{427}
}

func (x *NprachconfigurationTDdExtIes) GetValue() *emptypb.Empty {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:5617
// @inject_tag: aper:"valueExt"
// {NPRACHConfiguration-TDD}
type NprachconfigurationTDd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"valueExt,valueLB:0,valueUB:4,"
	NprachPreambleFormat         NprachpreambleFormat `protobuf:"varint,1,opt,name=nprach_preamble_format,json=nprach-preambleFormat,proto3,enum=xnap.v1.NprachpreambleFormat" json:"nprach_preamble_format,omitempty" aper:"valueExt,valueLB:0,valueUB:4,"`
	AnchorCarrierNprachconfigTdd []byte               `protobuf:"bytes,2,opt,name=anchor_carrier_nprachconfig_tdd,json=anchorCarrier-NPRACHConfigTDD,proto3" json:"anchor_carrier_nprachconfig_tdd,omitempty"`
	// @inject_tag: aper:"optional,"
	NonAnchorCarrierFequencyConfiglist *NonAnchorCarrierFrequencylist `protobuf:"bytes,3,opt,name=non_anchor_carrier_fequency_configlist,json=non-anchorCarrierFequencyConfiglist,proto3,oneof" json:"non_anchor_carrier_fequency_configlist,omitempty" aper:"optional,"`
	// @inject_tag: aper:"optional,"
	NonAnchorCarrierNprachconfigTdd []byte `protobuf:"bytes,4,opt,name=non_anchor_carrier_nprachconfig_tdd,json=non-anchorCarrier-NPRACHConfigTDD,proto3,oneof" json:"non_anchor_carrier_nprachconfig_tdd,omitempty" aper:"optional,"`
	// @inject_tag: aper:"optional,sizeLB:1,"
	IEExtensions []*NprachconfigurationTDdExtIes `protobuf:"bytes,5,rep,name=i_e_extensions,json=iE-Extensions,proto3" json:"i_e_extensions,omitempty" aper:"optional,sizeLB:1,"`
}

func (x *NprachconfigurationTDd) Reset() {
	*x = NprachconfigurationTDd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[428]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NprachconfigurationTDd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NprachconfigurationTDd) ProtoMessage() {}

func (x *NprachconfigurationTDd) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[428]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NprachconfigurationTDd.ProtoReflect.Descriptor instead.
func (*NprachconfigurationTDd) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{428}
}

func (x *NprachconfigurationTDd) GetNprachPreambleFormat() NprachpreambleFormat {
	if x != nil {
		return x.NprachPreambleFormat
	}
	return NprachpreambleFormat_NPRACH_PREAMBLE_FORMAT_FMT0
}

func (x *NprachconfigurationTDd) GetAnchorCarrierNprachconfigTdd() []byte {
	if x != nil {
		return x.AnchorCarrierNprachconfigTdd
	}
	return nil
}

func (x *NprachconfigurationTDd) GetNonAnchorCarrierFequencyConfiglist() *NonAnchorCarrierFrequencylist {
	if x != nil {
		return x.NonAnchorCarrierFequencyConfiglist
	}
	return nil
}

func (x *NprachconfigurationTDd) GetNonAnchorCarrierNprachconfigTdd() []byte {
	if x != nil {
		return x.NonAnchorCarrierNprachconfigTdd
	}
	return nil
}

func (x *NprachconfigurationTDd) GetIEExtensions() []*NprachconfigurationTDdExtIes {
	if x != nil {
		return x.IEExtensions
	}
	return nil
}

// value set from xnap_v1.asn1:5645
// {Non-AnchorCarrierFrequencylist-ExtIEs}
type NonAnchorCarrierFrequencylistExtIes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *emptypb.Empty `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *NonAnchorCarrierFrequencylistExtIes) Reset() {
	*x = NonAnchorCarrierFrequencylistExtIes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[429]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NonAnchorCarrierFrequencylistExtIes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NonAnchorCarrierFrequencylistExtIes) ProtoMessage() {}

func (x *NonAnchorCarrierFrequencylistExtIes) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[429]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NonAnchorCarrierFrequencylistExtIes.ProtoReflect.Descriptor instead.
func (*NonAnchorCarrierFrequencylistExtIes) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{429}
}

func (x *NonAnchorCarrierFrequencylistExtIes) GetValue() *emptypb.Empty {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:5640
// @inject_tag: aper:"valueExt"
// {NestedNon-AnchorCarrierFrequencylist}
type NestedNonAnchorCarrierFrequencylist struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NonAnchorCarrierFrquency []byte `protobuf:"bytes,1,opt,name=non_anchor_carrier_frquency,json=non-anchorCarrierFrquency,proto3" json:"non_anchor_carrier_frquency,omitempty"`
	// @inject_tag: aper:"optional,sizeLB:1,"
	IEExtensions []*NonAnchorCarrierFrequencylistExtIes `protobuf:"bytes,2,rep,name=i_e_extensions,json=iE-Extensions,proto3" json:"i_e_extensions,omitempty" aper:"optional,sizeLB:1,"`
}

func (x *NestedNonAnchorCarrierFrequencylist) Reset() {
	*x = NestedNonAnchorCarrierFrequencylist{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[430]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NestedNonAnchorCarrierFrequencylist) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NestedNonAnchorCarrierFrequencylist) ProtoMessage() {}

func (x *NestedNonAnchorCarrierFrequencylist) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[430]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NestedNonAnchorCarrierFrequencylist.ProtoReflect.Descriptor instead.
func (*NestedNonAnchorCarrierFrequencylist) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{430}
}

func (x *NestedNonAnchorCarrierFrequencylist) GetNonAnchorCarrierFrquency() []byte {
	if x != nil {
		return x.NonAnchorCarrierFrquency
	}
	return nil
}

func (x *NestedNonAnchorCarrierFrequencylist) GetIEExtensions() []*NonAnchorCarrierFrequencylistExtIes {
	if x != nil {
		return x.IEExtensions
	}
	return nil
}

// sequence from xnap_v1.asn1:5643
// {Non-AnchorCarrierFrequencylist}
type NonAnchorCarrierFrequencylist struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"valueExt,sizeLB:1,sizeUB:15,"
	Value []*NestedNonAnchorCarrierFrequencylist `protobuf:"bytes,1,rep,name=value,proto3" json:"value,omitempty" aper:"valueExt,sizeLB:1,sizeUB:15,"`
}

func (x *NonAnchorCarrierFrequencylist) Reset() {
	*x = NonAnchorCarrierFrequencylist{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[431]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NonAnchorCarrierFrequencylist) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NonAnchorCarrierFrequencylist) ProtoMessage() {}

func (x *NonAnchorCarrierFrequencylist) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[431]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NonAnchorCarrierFrequencylist.ProtoReflect.Descriptor instead.
func (*NonAnchorCarrierFrequencylist) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{431}
}

func (x *NonAnchorCarrierFrequencylist) GetValue() []*NestedNonAnchorCarrierFrequencylist {
	if x != nil {
		return x.Value
	}
	return nil
}

// range of Integer from xnap_v1.asn1:5650
// {NR-Cell-Identity}
type NrCellIdentity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"sizeLB:36,sizeUB:36,"
	Value *asn1.BitString `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty" aper:"sizeLB:36,sizeUB:36,"`
}

func (x *NrCellIdentity) Reset() {
	*x = NrCellIdentity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[432]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NrCellIdentity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NrCellIdentity) ProtoMessage() {}

func (x *NrCellIdentity) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[432]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NrCellIdentity.ProtoReflect.Descriptor instead.
func (*NrCellIdentity) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{432}
}

func (x *NrCellIdentity) GetValue() *asn1.BitString {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:5656
// {NG-RAN-Cell-Identity-ListinRANPagingArea}
type NgRAnCellIdentityListinRanpagingArea struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"sizeLB:1,sizeUB:32,"
	Value []*NgRAnCellIdentity `protobuf:"bytes,1,rep,name=value,proto3" json:"value,omitempty" aper:"sizeLB:1,sizeUB:32,"`
}

func (x *NgRAnCellIdentityListinRanpagingArea) Reset() {
	*x = NgRAnCellIdentityListinRanpagingArea{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[433]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NgRAnCellIdentityListinRanpagingArea) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NgRAnCellIdentityListinRanpagingArea) ProtoMessage() {}

func (x *NgRAnCellIdentityListinRanpagingArea) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[433]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NgRAnCellIdentityListinRanpagingArea.ProtoReflect.Descriptor instead.
func (*NgRAnCellIdentityListinRanpagingArea) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{433}
}

func (x *NgRAnCellIdentityListinRanpagingArea) GetValue() []*NgRAnCellIdentity {
	if x != nil {
		return x.Value
	}
	return nil
}

// value set from xnap_v1.asn1:5663
// {NR-CGI-ExtIEs}
type NrCGiExtIes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *emptypb.Empty `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *NrCGiExtIes) Reset() {
	*x = NrCGiExtIes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[434]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NrCGiExtIes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NrCGiExtIes) ProtoMessage() {}

func (x *NrCGiExtIes) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[434]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NrCGiExtIes.ProtoReflect.Descriptor instead.
func (*NrCGiExtIes) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{434}
}

func (x *NrCGiExtIes) GetValue() *emptypb.Empty {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:5657
// @inject_tag: aper:"valueExt"
// {NR-CGI}
type NrCGi struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlmnId *PlmnIdentity   `protobuf:"bytes,1,opt,name=plmn_id,json=plmn-id,proto3" json:"plmn_id,omitempty"`
	NrCi   *NrCellIdentity `protobuf:"bytes,2,opt,name=nr_ci,json=nr-CI,proto3" json:"nr_ci,omitempty"`
	// @inject_tag: aper:"optional,sizeLB:1,sizeUB:65535,valueExt"
	IEExtension []*NrCGiExtIes `protobuf:"bytes,3,rep,name=i_e_extension,json=iE-Extension,proto3" json:"i_e_extension,omitempty" aper:"optional,sizeLB:1,sizeUB:65535,valueExt"`
}

func (x *NrCGi) Reset() {
	*x = NrCGi{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[435]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NrCGi) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NrCGi) ProtoMessage() {}

func (x *NrCGi) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[435]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NrCGi.ProtoReflect.Descriptor instead.
func (*NrCGi) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{435}
}

func (x *NrCGi) GetPlmnId() *PlmnIdentity {
	if x != nil {
		return x.PlmnId
	}
	return nil
}

func (x *NrCGi) GetNrCi() *NrCellIdentity {
	if x != nil {
		return x.NrCi
	}
	return nil
}

func (x *NrCGi) GetIEExtension() []*NrCGiExtIes {
	if x != nil {
		return x.IEExtension
	}
	return nil
}

// range of Integer from xnap_v1.asn1:5671
// {NRFrequencyBand}
type NrfrequencyBand struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"valueExt,valueLB:1,valueUB:1024,"
	Value int32 `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty" aper:"valueExt,valueLB:1,valueUB:1024,"`
}

func (x *NrfrequencyBand) Reset() {
	*x = NrfrequencyBand{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[436]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NrfrequencyBand) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NrfrequencyBand) ProtoMessage() {}

func (x *NrfrequencyBand) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[436]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NrfrequencyBand.ProtoReflect.Descriptor instead.
func (*NrfrequencyBand) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{436}
}

func (x *NrfrequencyBand) GetValue() int32 {
	if x != nil {
		return x.Value
	}
	return 0
}

// sequence from xnap_v1.asn1:5676
// {NRFrequencyBand-List}
type NrfrequencyBandList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"valueExt,sizeLB:1,sizeUB:32,"
	Value []*NrfrequencyBandItem `protobuf:"bytes,1,rep,name=value,proto3" json:"value,omitempty" aper:"valueExt,sizeLB:1,sizeUB:32,"`
}

func (x *NrfrequencyBandList) Reset() {
	*x = NrfrequencyBandList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[437]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NrfrequencyBandList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NrfrequencyBandList) ProtoMessage() {}

func (x *NrfrequencyBandList) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[437]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NrfrequencyBandList.ProtoReflect.Descriptor instead.
func (*NrfrequencyBandList) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{437}
}

func (x *NrfrequencyBandList) GetValue() []*NrfrequencyBandItem {
	if x != nil {
		return x.Value
	}
	return nil
}

// value set from xnap_v1.asn1:5683
// {NRFrequencyBandItem-ExtIEs}
type NrfrequencyBandItemExtIes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *emptypb.Empty `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *NrfrequencyBandItemExtIes) Reset() {
	*x = NrfrequencyBandItemExtIes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[438]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NrfrequencyBandItemExtIes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NrfrequencyBandItemExtIes) ProtoMessage() {}

func (x *NrfrequencyBandItemExtIes) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[438]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NrfrequencyBandItemExtIes.ProtoReflect.Descriptor instead.
func (*NrfrequencyBandItemExtIes) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{438}
}

func (x *NrfrequencyBandItemExtIes) GetValue() *emptypb.Empty {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:5677
// @inject_tag: aper:"valueExt"
// {NRFrequencyBandItem}
type NrfrequencyBandItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NrFrequencyBand *NrfrequencyBand `protobuf:"bytes,1,opt,name=nr_frequency_band,json=nr-frequency-band,proto3" json:"nr_frequency_band,omitempty"`
	// @inject_tag: aper:"optional,"
	SupportedSulBandList *SupportedSulbandList `protobuf:"bytes,2,opt,name=supported_sul_band_list,json=supported-SUL-Band-List,proto3,oneof" json:"supported_sul_band_list,omitempty" aper:"optional,"`
	// @inject_tag: aper:"optional,sizeLB:1,"
	IEExtension []*NrfrequencyBandItemExtIes `protobuf:"bytes,3,rep,name=i_e_extension,json=iE-Extension,proto3" json:"i_e_extension,omitempty" aper:"optional,sizeLB:1,"`
}

func (x *NrfrequencyBandItem) Reset() {
	*x = NrfrequencyBandItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[439]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NrfrequencyBandItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NrfrequencyBandItem) ProtoMessage() {}

func (x *NrfrequencyBandItem) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[439]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NrfrequencyBandItem.ProtoReflect.Descriptor instead.
func (*NrfrequencyBandItem) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{439}
}

func (x *NrfrequencyBandItem) GetNrFrequencyBand() *NrfrequencyBand {
	if x != nil {
		return x.NrFrequencyBand
	}
	return nil
}

func (x *NrfrequencyBandItem) GetSupportedSulBandList() *SupportedSulbandList {
	if x != nil {
		return x.SupportedSulBandList
	}
	return nil
}

func (x *NrfrequencyBandItem) GetIEExtension() []*NrfrequencyBandItemExtIes {
	if x != nil {
		return x.IEExtension
	}
	return nil
}

// value set from xnap_v1.asn1:5697
// {NRFrequencyInfo-ExtIEs}
type NrfrequencyInfoExtIes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *emptypb.Empty `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *NrfrequencyInfoExtIes) Reset() {
	*x = NrfrequencyInfoExtIes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[440]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NrfrequencyInfoExtIes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NrfrequencyInfoExtIes) ProtoMessage() {}

func (x *NrfrequencyInfoExtIes) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[440]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NrfrequencyInfoExtIes.ProtoReflect.Descriptor instead.
func (*NrfrequencyInfoExtIes) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{440}
}

func (x *NrfrequencyInfoExtIes) GetValue() *emptypb.Empty {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:5690
// @inject_tag: aper:"valueExt"
// {NRFrequencyInfo}
type NrfrequencyInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NrArfcn *Nrarfcn `protobuf:"bytes,1,opt,name=nr_arfcn,json=nrARFCN,proto3" json:"nr_arfcn,omitempty"`
	// @inject_tag: aper:"optional,valueExt,"
	SulInformation    *SulInformation      `protobuf:"bytes,2,opt,name=sul_information,json=sul-information,proto3,oneof" json:"sul_information,omitempty" aper:"optional,valueExt,"`
	FrequencyBandList *NrfrequencyBandList `protobuf:"bytes,3,opt,name=frequency_band_list,json=frequencyBand-List,proto3" json:"frequency_band_list,omitempty"`
	// @inject_tag: aper:"optional,sizeLB:1,sizeUB:65535,valueExt"
	IEExtension []*NrfrequencyInfoExtIes `protobuf:"bytes,4,rep,name=i_e_extension,json=iE-Extension,proto3" json:"i_e_extension,omitempty" aper:"optional,sizeLB:1,sizeUB:65535,valueExt"`
}

func (x *NrfrequencyInfo) Reset() {
	*x = NrfrequencyInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[441]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NrfrequencyInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NrfrequencyInfo) ProtoMessage() {}

func (x *NrfrequencyInfo) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[441]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NrfrequencyInfo.ProtoReflect.Descriptor instead.
func (*NrfrequencyInfo) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{441}
}

func (x *NrfrequencyInfo) GetNrArfcn() *Nrarfcn {
	if x != nil {
		return x.NrArfcn
	}
	return nil
}

func (x *NrfrequencyInfo) GetSulInformation() *SulInformation {
	if x != nil {
		return x.SulInformation
	}
	return nil
}

func (x *NrfrequencyInfo) GetFrequencyBandList() *NrfrequencyBandList {
	if x != nil {
		return x.FrequencyBandList
	}
	return nil
}

func (x *NrfrequencyInfo) GetIEExtension() []*NrfrequencyInfoExtIes {
	if x != nil {
		return x.IEExtension
	}
	return nil
}

// range of Integer from xnap_v1.asn1:5701
// {NRMobilityHistoryReport}
type NrmobilityHistoryReport struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value []byte `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *NrmobilityHistoryReport) Reset() {
	*x = NrmobilityHistoryReport{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[442]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NrmobilityHistoryReport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NrmobilityHistoryReport) ProtoMessage() {}

func (x *NrmobilityHistoryReport) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[442]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NrmobilityHistoryReport.ProtoReflect.Descriptor instead.
func (*NrmobilityHistoryReport) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{442}
}

func (x *NrmobilityHistoryReport) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

// value set from xnap_v1.asn1:5710
// {NRModeInfo-ExtIEs}
type NrmodeInfoExtIes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *emptypb.Empty `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *NrmodeInfoExtIes) Reset() {
	*x = NrmodeInfoExtIes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[443]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NrmodeInfoExtIes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NrmodeInfoExtIes) ProtoMessage() {}

func (x *NrmodeInfoExtIes) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[443]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NrmodeInfoExtIes.ProtoReflect.Descriptor instead.
func (*NrmodeInfoExtIes) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{443}
}

func (x *NrmodeInfoExtIes) GetValue() *emptypb.Empty {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:5705
// {NRModeInfo}
type NrmodeInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// choice from xnap_v1.asn1:5705
	//
	// Types that are assignable to NrmodeInfo:
	//	*NrmodeInfo_Fdd
	//	*NrmodeInfo_Tdd
	//	*NrmodeInfo_ChoiceExtension
	NrmodeInfo isNrmodeInfo_NrmodeInfo `protobuf_oneof:"nrmode_info"`
}

func (x *NrmodeInfo) Reset() {
	*x = NrmodeInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[444]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NrmodeInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NrmodeInfo) ProtoMessage() {}

func (x *NrmodeInfo) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[444]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NrmodeInfo.ProtoReflect.Descriptor instead.
func (*NrmodeInfo) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{444}
}

func (m *NrmodeInfo) GetNrmodeInfo() isNrmodeInfo_NrmodeInfo {
	if m != nil {
		return m.NrmodeInfo
	}
	return nil
}

func (x *NrmodeInfo) GetFdd() *NrmodeInfoFdd {
	if x, ok := x.GetNrmodeInfo().(*NrmodeInfo_Fdd); ok {
		return x.Fdd
	}
	return nil
}

func (x *NrmodeInfo) GetTdd() *NrmodeInfoTdd {
	if x, ok := x.GetNrmodeInfo().(*NrmodeInfo_Tdd); ok {
		return x.Tdd
	}
	return nil
}

func (x *NrmodeInfo) GetChoiceExtension() *NrmodeInfoExtIes {
	if x, ok := x.GetNrmodeInfo().(*NrmodeInfo_ChoiceExtension); ok {
		return x.ChoiceExtension
	}
	return nil
}

type isNrmodeInfo_NrmodeInfo interface {
	isNrmodeInfo_NrmodeInfo()
}

type NrmodeInfo_Fdd struct {
	// @inject_tag: aper:"choiceIdx:1,valueExt,"
	Fdd *NrmodeInfoFdd `protobuf:"bytes,1,opt,name=fdd,proto3,oneof" aper:"choiceIdx:1,valueExt,"`
}

type NrmodeInfo_Tdd struct {
	// @inject_tag: aper:"choiceIdx:2,valueExt,"
	Tdd *NrmodeInfoTdd `protobuf:"bytes,2,opt,name=tdd,proto3,oneof" aper:"choiceIdx:2,valueExt,"`
}

type NrmodeInfo_ChoiceExtension struct {
	// @inject_tag: aper:"choiceIdx:3,valueExt"
	ChoiceExtension *NrmodeInfoExtIes `protobuf:"bytes,3,opt,name=choice_extension,json=choice-extension,proto3,oneof" aper:"choiceIdx:3,valueExt"`
}

func (*NrmodeInfo_Fdd) isNrmodeInfo_NrmodeInfo() {}

func (*NrmodeInfo_Tdd) isNrmodeInfo_NrmodeInfo() {}

func (*NrmodeInfo_ChoiceExtension) isNrmodeInfo_NrmodeInfo() {}

// value set from xnap_v1.asn1:5723
// {NRModeInfoFDD-ExtIEs&Extension}
type NrmodeInfoFddExtIesExtension struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// value set translated as choice from xnap_v1.asn1:5723
	//
	// Types that are assignable to NrmodeInfoFddExtIes:
	//	*NrmodeInfoFddExtIesExtension_IdUlcarrierList
	//	*NrmodeInfoFddExtIesExtension_IdDlcarrierList
	NrmodeInfoFddExtIes isNrmodeInfoFddExtIesExtension_NrmodeInfoFddExtIes `protobuf_oneof:"nrmode_info_fdd_ext_ies"`
}

func (x *NrmodeInfoFddExtIesExtension) Reset() {
	*x = NrmodeInfoFddExtIesExtension{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[445]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NrmodeInfoFddExtIesExtension) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NrmodeInfoFddExtIesExtension) ProtoMessage() {}

func (x *NrmodeInfoFddExtIesExtension) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[445]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NrmodeInfoFddExtIesExtension.ProtoReflect.Descriptor instead.
func (*NrmodeInfoFddExtIesExtension) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{445}
}

func (m *NrmodeInfoFddExtIesExtension) GetNrmodeInfoFddExtIes() isNrmodeInfoFddExtIesExtension_NrmodeInfoFddExtIes {
	if m != nil {
		return m.NrmodeInfoFddExtIes
	}
	return nil
}

func (x *NrmodeInfoFddExtIesExtension) GetIdUlcarrierList() *NrcarrierList {
	if x, ok := x.GetNrmodeInfoFddExtIes().(*NrmodeInfoFddExtIesExtension_IdUlcarrierList); ok {
		return x.IdUlcarrierList
	}
	return nil
}

func (x *NrmodeInfoFddExtIesExtension) GetIdDlcarrierList() *NrcarrierList {
	if x, ok := x.GetNrmodeInfoFddExtIes().(*NrmodeInfoFddExtIesExtension_IdDlcarrierList); ok {
		return x.IdDlcarrierList
	}
	return nil
}

type isNrmodeInfoFddExtIesExtension_NrmodeInfoFddExtIes interface {
	isNrmodeInfoFddExtIesExtension_NrmodeInfoFddExtIes()
}

type NrmodeInfoFddExtIesExtension_IdUlcarrierList struct {
	// @inject_tag: aper:"choiceIdx:1,"
	IdUlcarrierList *NrcarrierList `protobuf:"bytes,1,opt,name=id_ulcarrier_list,json=id-ULCarrierList,proto3,oneof" aper:"choiceIdx:1,"`
}

type NrmodeInfoFddExtIesExtension_IdDlcarrierList struct {
	// @inject_tag: aper:"choiceIdx:2,"
	IdDlcarrierList *NrcarrierList `protobuf:"bytes,2,opt,name=id_dlcarrier_list,json=id-DLCarrierList,proto3,oneof" aper:"choiceIdx:2,"`
}

func (*NrmodeInfoFddExtIesExtension_IdUlcarrierList) isNrmodeInfoFddExtIesExtension_NrmodeInfoFddExtIes() {
}

func (*NrmodeInfoFddExtIesExtension_IdDlcarrierList) isNrmodeInfoFddExtIesExtension_NrmodeInfoFddExtIes() {
}

// concrete instance(s) of class XNAP-PROTOCOL-EXTENSION from xnap_v1.asn1:5723
// @inject_tag: aper:"valueExt"
// {NRModeInfoFDD-ExtIEs}
type NrmodeInfoFddExtIes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"unique,"
	Id *xnap_commondatatypes.ProtocolIeID `protobuf:"bytes,1,opt,name=id,json=&id,proto3" json:"id,omitempty" aper:"unique,"`
	// @inject_tag: aper:"valueLB:0,valueUB:2,"
	Criticality xnap_commondatatypes.Criticality `protobuf:"varint,2,opt,name=criticality,json=&criticality,proto3,enum=xnap.v1.Criticality" json:"criticality,omitempty" aper:"valueLB:0,valueUB:2,"`
	// @inject_tag: aper:"canonicalOrder,"
	Extension *NrmodeInfoFddExtIesExtension `protobuf:"bytes,3,opt,name=extension,json=&Extension,proto3" json:"extension,omitempty" aper:"canonicalOrder,"`
}

func (x *NrmodeInfoFddExtIes) Reset() {
	*x = NrmodeInfoFddExtIes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[446]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NrmodeInfoFddExtIes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NrmodeInfoFddExtIes) ProtoMessage() {}

func (x *NrmodeInfoFddExtIes) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[446]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NrmodeInfoFddExtIes.ProtoReflect.Descriptor instead.
func (*NrmodeInfoFddExtIes) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{446}
}

func (x *NrmodeInfoFddExtIes) GetId() *xnap_commondatatypes.ProtocolIeID {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *NrmodeInfoFddExtIes) GetCriticality() xnap_commondatatypes.Criticality {
	if x != nil {
		return x.Criticality
	}
	return xnap_commondatatypes.Criticality(0)
}

func (x *NrmodeInfoFddExtIes) GetExtension() *NrmodeInfoFddExtIesExtension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// sequence from xnap_v1.asn1:5715
// @inject_tag: aper:"valueExt"
// {NRModeInfoFDD}
type NrmodeInfoFdd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"valueExt,"
	UlNrfrequencyInfo *NrfrequencyInfo `protobuf:"bytes,1,opt,name=ul_nrfrequency_info,json=ulNRFrequencyInfo,proto3" json:"ul_nrfrequency_info,omitempty" aper:"valueExt,"`
	// @inject_tag: aper:"valueExt,"
	DlNrfrequencyInfo *NrfrequencyInfo `protobuf:"bytes,2,opt,name=dl_nrfrequency_info,json=dlNRFrequencyInfo,proto3" json:"dl_nrfrequency_info,omitempty" aper:"valueExt,"`
	// @inject_tag: aper:"valueExt,"
	UlNrtransmissonBandwidth *NrtransmissionBandwidth `protobuf:"bytes,3,opt,name=ul_nrtransmisson_bandwidth,json=ulNRTransmissonBandwidth,proto3" json:"ul_nrtransmisson_bandwidth,omitempty" aper:"valueExt,"`
	// @inject_tag: aper:"valueExt,"
	DlNrtransmissonBandwidth *NrtransmissionBandwidth `protobuf:"bytes,4,opt,name=dl_nrtransmisson_bandwidth,json=dlNRTransmissonBandwidth,proto3" json:"dl_nrtransmisson_bandwidth,omitempty" aper:"valueExt,"`
	// @inject_tag: aper:"optional,sizeLB:1,sizeUB:65535,valueExt"
	IEExtension []*NrmodeInfoFddExtIes `protobuf:"bytes,5,rep,name=i_e_extension,json=iE-Extension,proto3" json:"i_e_extension,omitempty" aper:"optional,sizeLB:1,sizeUB:65535,valueExt"`
}

func (x *NrmodeInfoFdd) Reset() {
	*x = NrmodeInfoFdd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[447]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NrmodeInfoFdd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NrmodeInfoFdd) ProtoMessage() {}

func (x *NrmodeInfoFdd) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[447]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NrmodeInfoFdd.ProtoReflect.Descriptor instead.
func (*NrmodeInfoFdd) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{447}
}

func (x *NrmodeInfoFdd) GetUlNrfrequencyInfo() *NrfrequencyInfo {
	if x != nil {
		return x.UlNrfrequencyInfo
	}
	return nil
}

func (x *NrmodeInfoFdd) GetDlNrfrequencyInfo() *NrfrequencyInfo {
	if x != nil {
		return x.DlNrfrequencyInfo
	}
	return nil
}

func (x *NrmodeInfoFdd) GetUlNrtransmissonBandwidth() *NrtransmissionBandwidth {
	if x != nil {
		return x.UlNrtransmissonBandwidth
	}
	return nil
}

func (x *NrmodeInfoFdd) GetDlNrtransmissonBandwidth() *NrtransmissionBandwidth {
	if x != nil {
		return x.DlNrtransmissonBandwidth
	}
	return nil
}

func (x *NrmodeInfoFdd) GetIEExtension() []*NrmodeInfoFddExtIes {
	if x != nil {
		return x.IEExtension
	}
	return nil
}

// value set from xnap_v1.asn1:5737
// {NRModeInfoTDD-ExtIEs&Extension}
type NrmodeInfoTddExtIesExtension struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// value set translated as choice from xnap_v1.asn1:5737
	//
	// Types that are assignable to NrmodeInfoTddExtIes:
	//	*NrmodeInfoTddExtIesExtension_IdIntendedTddDlUlconfigurationNr
	//	*NrmodeInfoTddExtIesExtension_IdTdduldlconfigurationCommonNr
	//	*NrmodeInfoTddExtIesExtension_IdCarrierList
	NrmodeInfoTddExtIes isNrmodeInfoTddExtIesExtension_NrmodeInfoTddExtIes `protobuf_oneof:"nrmode_info_tdd_ext_ies"`
}

func (x *NrmodeInfoTddExtIesExtension) Reset() {
	*x = NrmodeInfoTddExtIesExtension{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[448]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NrmodeInfoTddExtIesExtension) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NrmodeInfoTddExtIesExtension) ProtoMessage() {}

func (x *NrmodeInfoTddExtIesExtension) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[448]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NrmodeInfoTddExtIesExtension.ProtoReflect.Descriptor instead.
func (*NrmodeInfoTddExtIesExtension) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{448}
}

func (m *NrmodeInfoTddExtIesExtension) GetNrmodeInfoTddExtIes() isNrmodeInfoTddExtIesExtension_NrmodeInfoTddExtIes {
	if m != nil {
		return m.NrmodeInfoTddExtIes
	}
	return nil
}

func (x *NrmodeInfoTddExtIesExtension) GetIdIntendedTddDlUlconfigurationNr() *IntendedTddDLULconfigurationNR {
	if x, ok := x.GetNrmodeInfoTddExtIes().(*NrmodeInfoTddExtIesExtension_IdIntendedTddDlUlconfigurationNr); ok {
		return x.IdIntendedTddDlUlconfigurationNr
	}
	return nil
}

func (x *NrmodeInfoTddExtIesExtension) GetIdTdduldlconfigurationCommonNr() *TdduldlconfigurationCommonNr {
	if x, ok := x.GetNrmodeInfoTddExtIes().(*NrmodeInfoTddExtIesExtension_IdTdduldlconfigurationCommonNr); ok {
		return x.IdTdduldlconfigurationCommonNr
	}
	return nil
}

func (x *NrmodeInfoTddExtIesExtension) GetIdCarrierList() *NrcarrierList {
	if x, ok := x.GetNrmodeInfoTddExtIes().(*NrmodeInfoTddExtIesExtension_IdCarrierList); ok {
		return x.IdCarrierList
	}
	return nil
}

type isNrmodeInfoTddExtIesExtension_NrmodeInfoTddExtIes interface {
	isNrmodeInfoTddExtIesExtension_NrmodeInfoTddExtIes()
}

type NrmodeInfoTddExtIesExtension_IdIntendedTddDlUlconfigurationNr struct {
	// @inject_tag: aper:"choiceIdx:1,valueExt,"
	IdIntendedTddDlUlconfigurationNr *IntendedTddDLULconfigurationNR `protobuf:"bytes,1,opt,name=id_intended_tdd_dl_ulconfiguration_nr,json=id-IntendedTDD-DL-ULConfiguration-NR,proto3,oneof" aper:"choiceIdx:1,valueExt,"`
}

type NrmodeInfoTddExtIesExtension_IdTdduldlconfigurationCommonNr struct {
	// @inject_tag: aper:"choiceIdx:2,"
	IdTdduldlconfigurationCommonNr *TdduldlconfigurationCommonNr `protobuf:"bytes,2,opt,name=id_tdduldlconfiguration_common_nr,json=id-TDDULDLConfigurationCommonNR,proto3,oneof" aper:"choiceIdx:2,"`
}

type NrmodeInfoTddExtIesExtension_IdCarrierList struct {
	// @inject_tag: aper:"choiceIdx:3,"
	IdCarrierList *NrcarrierList `protobuf:"bytes,3,opt,name=id_carrier_list,json=id-CarrierList,proto3,oneof" aper:"choiceIdx:3,"`
}

func (*NrmodeInfoTddExtIesExtension_IdIntendedTddDlUlconfigurationNr) isNrmodeInfoTddExtIesExtension_NrmodeInfoTddExtIes() {
}

func (*NrmodeInfoTddExtIesExtension_IdTdduldlconfigurationCommonNr) isNrmodeInfoTddExtIesExtension_NrmodeInfoTddExtIes() {
}

func (*NrmodeInfoTddExtIesExtension_IdCarrierList) isNrmodeInfoTddExtIesExtension_NrmodeInfoTddExtIes() {
}

// concrete instance(s) of class XNAP-PROTOCOL-EXTENSION from xnap_v1.asn1:5737
// @inject_tag: aper:"valueExt"
// {NRModeInfoTDD-ExtIEs}
type NrmodeInfoTddExtIes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"unique,"
	Id *xnap_commondatatypes.ProtocolIeID `protobuf:"bytes,1,opt,name=id,json=&id,proto3" json:"id,omitempty" aper:"unique,"`
	// @inject_tag: aper:"valueLB:0,valueUB:2,"
	Criticality xnap_commondatatypes.Criticality `protobuf:"varint,2,opt,name=criticality,json=&criticality,proto3,enum=xnap.v1.Criticality" json:"criticality,omitempty" aper:"valueLB:0,valueUB:2,"`
	// @inject_tag: aper:"canonicalOrder,"
	Extension *NrmodeInfoTddExtIesExtension `protobuf:"bytes,3,opt,name=extension,json=&Extension,proto3" json:"extension,omitempty" aper:"canonicalOrder,"`
}

func (x *NrmodeInfoTddExtIes) Reset() {
	*x = NrmodeInfoTddExtIes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[449]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NrmodeInfoTddExtIes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NrmodeInfoTddExtIes) ProtoMessage() {}

func (x *NrmodeInfoTddExtIes) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[449]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NrmodeInfoTddExtIes.ProtoReflect.Descriptor instead.
func (*NrmodeInfoTddExtIes) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{449}
}

func (x *NrmodeInfoTddExtIes) GetId() *xnap_commondatatypes.ProtocolIeID {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *NrmodeInfoTddExtIes) GetCriticality() xnap_commondatatypes.Criticality {
	if x != nil {
		return x.Criticality
	}
	return xnap_commondatatypes.Criticality(0)
}

func (x *NrmodeInfoTddExtIes) GetExtension() *NrmodeInfoTddExtIesExtension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// sequence from xnap_v1.asn1:5731
// @inject_tag: aper:"valueExt"
// {NRModeInfoTDD}
type NrmodeInfoTdd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"valueExt,"
	NrFrequencyInfo *NrfrequencyInfo `protobuf:"bytes,1,opt,name=nr_frequency_info,json=nrFrequencyInfo,proto3" json:"nr_frequency_info,omitempty" aper:"valueExt,"`
	// @inject_tag: aper:"valueExt,"
	NrTransmissonBandwidth *NrtransmissionBandwidth `protobuf:"bytes,2,opt,name=nr_transmisson_bandwidth,json=nrTransmissonBandwidth,proto3" json:"nr_transmisson_bandwidth,omitempty" aper:"valueExt,"`
	// @inject_tag: aper:"optional,sizeLB:1,sizeUB:65535,valueExt"
	IEExtension []*NrmodeInfoTddExtIes `protobuf:"bytes,3,rep,name=i_e_extension,json=iE-Extension,proto3" json:"i_e_extension,omitempty" aper:"optional,sizeLB:1,sizeUB:65535,valueExt"`
}

func (x *NrmodeInfoTdd) Reset() {
	*x = NrmodeInfoTdd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[450]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NrmodeInfoTdd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NrmodeInfoTdd) ProtoMessage() {}

func (x *NrmodeInfoTdd) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[450]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NrmodeInfoTdd.ProtoReflect.Descriptor instead.
func (*NrmodeInfoTdd) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{450}
}

func (x *NrmodeInfoTdd) GetNrFrequencyInfo() *NrfrequencyInfo {
	if x != nil {
		return x.NrFrequencyInfo
	}
	return nil
}

func (x *NrmodeInfoTdd) GetNrTransmissonBandwidth() *NrtransmissionBandwidth {
	if x != nil {
		return x.NrTransmissonBandwidth
	}
	return nil
}

func (x *NrmodeInfoTdd) GetIEExtension() []*NrmodeInfoTddExtIes {
	if x != nil {
		return x.IEExtension
	}
	return nil
}

// range of Integer from xnap_v1.asn1:5747
// {NRPCI}
type Nrpci struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"valueExt,valueLB:0,valueUB:1007,"
	Value int32 `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty" aper:"valueExt,valueLB:0,valueUB:1007,"`
}

func (x *Nrpci) Reset() {
	*x = Nrpci{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[451]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Nrpci) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Nrpci) ProtoMessage() {}

func (x *Nrpci) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[451]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Nrpci.ProtoReflect.Descriptor instead.
func (*Nrpci) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{451}
}

func (x *Nrpci) GetValue() int32 {
	if x != nil {
		return x.Value
	}
	return 0
}

// value set from xnap_v1.asn1:5759
// {NRTransmissionBandwidth-ExtIEs}
type NrtransmissionBandwidthExtIes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *emptypb.Empty `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *NrtransmissionBandwidthExtIes) Reset() {
	*x = NrtransmissionBandwidthExtIes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[452]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NrtransmissionBandwidthExtIes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NrtransmissionBandwidthExtIes) ProtoMessage() {}

func (x *NrtransmissionBandwidthExtIes) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[452]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NrtransmissionBandwidthExtIes.ProtoReflect.Descriptor instead.
func (*NrtransmissionBandwidthExtIes) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{452}
}

func (x *NrtransmissionBandwidthExtIes) GetValue() *emptypb.Empty {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:5753
// @inject_tag: aper:"valueExt"
// {NRTransmissionBandwidth}
type NrtransmissionBandwidth struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"valueExt,valueLB:0,valueUB:3,"
	NRscs Nrscs `protobuf:"varint,1,opt,name=n_rscs,json=nRSCS,proto3,enum=xnap.v1.Nrscs" json:"n_rscs,omitempty" aper:"valueExt,valueLB:0,valueUB:3,"`
	// @inject_tag: aper:"valueExt,valueLB:0,valueUB:28,"
	NRnrb Nrnrb `protobuf:"varint,2,opt,name=n_rnrb,json=nRNRB,proto3,enum=xnap.v1.Nrnrb" json:"n_rnrb,omitempty" aper:"valueExt,valueLB:0,valueUB:28,"`
	// @inject_tag: aper:"optional,sizeLB:1,sizeUB:65535,valueExt"
	IEExtensions []*NrtransmissionBandwidthExtIes `protobuf:"bytes,3,rep,name=i_e_extensions,json=iE-Extensions,proto3" json:"i_e_extensions,omitempty" aper:"optional,sizeLB:1,sizeUB:65535,valueExt"`
}

func (x *NrtransmissionBandwidth) Reset() {
	*x = NrtransmissionBandwidth{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[453]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NrtransmissionBandwidth) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NrtransmissionBandwidth) ProtoMessage() {}

func (x *NrtransmissionBandwidth) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[453]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NrtransmissionBandwidth.ProtoReflect.Descriptor instead.
func (*NrtransmissionBandwidth) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{453}
}

func (x *NrtransmissionBandwidth) GetNRscs() Nrscs {
	if x != nil {
		return x.NRscs
	}
	return Nrscs_NRSCS_SCS15
}

func (x *NrtransmissionBandwidth) GetNRnrb() Nrnrb {
	if x != nil {
		return x.NRnrb
	}
	return Nrnrb_NRNRB_NRB11
}

func (x *NrtransmissionBandwidth) GetIEExtensions() []*NrtransmissionBandwidthExtIes {
	if x != nil {
		return x.IEExtensions
	}
	return nil
}

// range of Integer from xnap_v1.asn1:5766
// {NG-RANTraceID}
type NgRAntraceId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"sizeLB:8,sizeUB:8,"
	Value []byte `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty" aper:"sizeLB:8,sizeUB:8,"`
}

func (x *NgRAntraceId) Reset() {
	*x = NgRAntraceId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[454]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NgRAntraceId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NgRAntraceId) ProtoMessage() {}

func (x *NgRAntraceId) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[454]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NgRAntraceId.ProtoReflect.Descriptor instead.
func (*NgRAntraceId) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{454}
}

func (x *NgRAntraceId) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

// value set from xnap_v1.asn1:5777
// {NRV2XServicesAuthorized-ExtIEs}
type Nrv2XservicesAuthorizedExtIes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *emptypb.Empty `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *Nrv2XservicesAuthorizedExtIes) Reset() {
	*x = Nrv2XservicesAuthorizedExtIes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[455]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Nrv2XservicesAuthorizedExtIes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Nrv2XservicesAuthorizedExtIes) ProtoMessage() {}

func (x *Nrv2XservicesAuthorizedExtIes) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[455]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Nrv2XservicesAuthorizedExtIes.ProtoReflect.Descriptor instead.
func (*Nrv2XservicesAuthorizedExtIes) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{455}
}

func (x *Nrv2XservicesAuthorizedExtIes) GetValue() *emptypb.Empty {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:5771
// @inject_tag: aper:"valueExt"
// {NRV2XServicesAuthorized}
type Nrv2XservicesAuthorized struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"optional,valueExt,valueLB:0,valueUB:1,"
	VehicleUe *VehicleUe `protobuf:"varint,1,opt,name=vehicle_ue,json=vehicleUE,proto3,enum=xnap.v1.VehicleUe,oneof" json:"vehicle_ue,omitempty" aper:"optional,valueExt,valueLB:0,valueUB:1,"`
	// @inject_tag: aper:"optional,valueExt,valueLB:0,valueUB:1,"
	PedestrianUe *PedestrianUe `protobuf:"varint,2,opt,name=pedestrian_ue,json=pedestrianUE,proto3,enum=xnap.v1.PedestrianUe,oneof" json:"pedestrian_ue,omitempty" aper:"optional,valueExt,valueLB:0,valueUB:1,"`
	// @inject_tag: aper:"optional,sizeLB:1,"
	IEExtensions []*Nrv2XservicesAuthorizedExtIes `protobuf:"bytes,3,rep,name=i_e_extensions,json=iE-Extensions,proto3" json:"i_e_extensions,omitempty" aper:"optional,sizeLB:1,"`
}

func (x *Nrv2XservicesAuthorized) Reset() {
	*x = Nrv2XservicesAuthorized{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[456]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Nrv2XservicesAuthorized) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Nrv2XservicesAuthorized) ProtoMessage() {}

func (x *Nrv2XservicesAuthorized) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[456]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Nrv2XservicesAuthorized.ProtoReflect.Descriptor instead.
func (*Nrv2XservicesAuthorized) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{456}
}

func (x *Nrv2XservicesAuthorized) GetVehicleUe() VehicleUe {
	if x != nil && x.VehicleUe != nil {
		return *x.VehicleUe
	}
	return VehicleUe_VEHICLE_UE_AUTHORIZED
}

func (x *Nrv2XservicesAuthorized) GetPedestrianUe() PedestrianUe {
	if x != nil && x.PedestrianUe != nil {
		return *x.PedestrianUe
	}
	return PedestrianUe_PEDESTRIAN_UE_AUTHORIZED
}

func (x *Nrv2XservicesAuthorized) GetIEExtensions() []*Nrv2XservicesAuthorizedExtIes {
	if x != nil {
		return x.IEExtensions
	}
	return nil
}

// value set from xnap_v1.asn1:5788
// {NRUESidelinkAggregateMaximumBitRate-ExtIEs}
type NruesidelinkAggregateMaximumBitRateExtIes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *emptypb.Empty `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *NruesidelinkAggregateMaximumBitRateExtIes) Reset() {
	*x = NruesidelinkAggregateMaximumBitRateExtIes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[457]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NruesidelinkAggregateMaximumBitRateExtIes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NruesidelinkAggregateMaximumBitRateExtIes) ProtoMessage() {}

func (x *NruesidelinkAggregateMaximumBitRateExtIes) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[457]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NruesidelinkAggregateMaximumBitRateExtIes.ProtoReflect.Descriptor instead.
func (*NruesidelinkAggregateMaximumBitRateExtIes) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{457}
}

func (x *NruesidelinkAggregateMaximumBitRateExtIes) GetValue() *emptypb.Empty {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:5783
// @inject_tag: aper:"valueExt"
// {NRUESidelinkAggregateMaximumBitRate}
type NruesidelinkAggregateMaximumBitRate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UEsidelinkAggregateMaximumBitRate *BitRate `protobuf:"bytes,1,opt,name=u_esidelink_aggregate_maximum_bit_rate,json=uESidelinkAggregateMaximumBitRate,proto3" json:"u_esidelink_aggregate_maximum_bit_rate,omitempty"`
	// @inject_tag: aper:"optional,sizeLB:1,"
	IEExtensions []*NruesidelinkAggregateMaximumBitRateExtIes `protobuf:"bytes,2,rep,name=i_e_extensions,json=iE-Extensions,proto3" json:"i_e_extensions,omitempty" aper:"optional,sizeLB:1,"`
}

func (x *NruesidelinkAggregateMaximumBitRate) Reset() {
	*x = NruesidelinkAggregateMaximumBitRate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[458]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NruesidelinkAggregateMaximumBitRate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NruesidelinkAggregateMaximumBitRate) ProtoMessage() {}

func (x *NruesidelinkAggregateMaximumBitRate) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[458]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NruesidelinkAggregateMaximumBitRate.ProtoReflect.Descriptor instead.
func (*NruesidelinkAggregateMaximumBitRate) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{458}
}

func (x *NruesidelinkAggregateMaximumBitRate) GetUEsidelinkAggregateMaximumBitRate() *BitRate {
	if x != nil {
		return x.UEsidelinkAggregateMaximumBitRate
	}
	return nil
}

func (x *NruesidelinkAggregateMaximumBitRate) GetIEExtensions() []*NruesidelinkAggregateMaximumBitRateExtIes {
	if x != nil {
		return x.IEExtensions
	}
	return nil
}

// range of Integer from xnap_v1.asn1:5796
// {OfferedCapacity}
type OfferedCapacity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"valueExt,valueLB:1,valueUB:16777216,"
	Value int32 `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty" aper:"valueExt,valueLB:1,valueUB:16777216,"`
}

func (x *OfferedCapacity) Reset() {
	*x = OfferedCapacity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[459]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OfferedCapacity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OfferedCapacity) ProtoMessage() {}

func (x *OfferedCapacity) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[459]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OfferedCapacity.ProtoReflect.Descriptor instead.
func (*OfferedCapacity) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{459}
}

func (x *OfferedCapacity) GetValue() int32 {
	if x != nil {
		return x.Value
	}
	return 0
}

// range of Integer from xnap_v1.asn1:5830
// {PacketDelayBudget}
type PacketDelayBudget struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"valueExt,valueLB:0,valueUB:1023,"
	Value int32 `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty" aper:"valueExt,valueLB:0,valueUB:1023,"`
}

func (x *PacketDelayBudget) Reset() {
	*x = PacketDelayBudget{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[460]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PacketDelayBudget) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PacketDelayBudget) ProtoMessage() {}

func (x *PacketDelayBudget) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[460]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PacketDelayBudget.ProtoReflect.Descriptor instead.
func (*PacketDelayBudget) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{460}
}

func (x *PacketDelayBudget) GetValue() int32 {
	if x != nil {
		return x.Value
	}
	return 0
}

// value set from xnap_v1.asn1:5840
// {PacketErrorRate-ExtIEs}
type PacketErrorRateExtIes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *emptypb.Empty `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *PacketErrorRateExtIes) Reset() {
	*x = PacketErrorRateExtIes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[461]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PacketErrorRateExtIes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PacketErrorRateExtIes) ProtoMessage() {}

func (x *PacketErrorRateExtIes) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[461]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PacketErrorRateExtIes.ProtoReflect.Descriptor instead.
func (*PacketErrorRateExtIes) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{461}
}

func (x *PacketErrorRateExtIes) GetValue() *emptypb.Empty {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:5834
// @inject_tag: aper:"valueExt"
// {PacketErrorRate}
type PacketErrorRate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PErScalar   *PerScalar   `protobuf:"bytes,1,opt,name=p_er_scalar,json=pER-Scalar,proto3" json:"p_er_scalar,omitempty"`
	PErExponent *PerExponent `protobuf:"bytes,2,opt,name=p_er_exponent,json=pER-Exponent,proto3" json:"p_er_exponent,omitempty"`
	// @inject_tag: aper:"optional,sizeLB:1,"
	IEExtensions []*PacketErrorRateExtIes `protobuf:"bytes,3,rep,name=i_e_extensions,json=iE-Extensions,proto3" json:"i_e_extensions,omitempty" aper:"optional,sizeLB:1,"`
}

func (x *PacketErrorRate) Reset() {
	*x = PacketErrorRate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[462]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PacketErrorRate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PacketErrorRate) ProtoMessage() {}

func (x *PacketErrorRate) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[462]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PacketErrorRate.ProtoReflect.Descriptor instead.
func (*PacketErrorRate) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{462}
}

func (x *PacketErrorRate) GetPErScalar() *PerScalar {
	if x != nil {
		return x.PErScalar
	}
	return nil
}

func (x *PacketErrorRate) GetPErExponent() *PerExponent {
	if x != nil {
		return x.PErExponent
	}
	return nil
}

func (x *PacketErrorRate) GetIEExtensions() []*PacketErrorRateExtIes {
	if x != nil {
		return x.IEExtensions
	}
	return nil
}

// range of Integer from xnap_v1.asn1:5850
// {PER-Scalar}
type PerScalar struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"valueExt,valueLB:0,valueUB:9,"
	Value int32 `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty" aper:"valueExt,valueLB:0,valueUB:9,"`
}

func (x *PerScalar) Reset() {
	*x = PerScalar{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[463]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PerScalar) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PerScalar) ProtoMessage() {}

func (x *PerScalar) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[463]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PerScalar.ProtoReflect.Descriptor instead.
func (*PerScalar) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{463}
}

func (x *PerScalar) GetValue() int32 {
	if x != nil {
		return x.Value
	}
	return 0
}

// range of Integer from xnap_v1.asn1:5852
// {PER-Exponent}
type PerExponent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"valueExt,valueLB:0,valueUB:9,"
	Value int32 `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty" aper:"valueExt,valueLB:0,valueUB:9,"`
}

func (x *PerExponent) Reset() {
	*x = PerExponent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[464]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PerExponent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PerExponent) ProtoMessage() {}

func (x *PerExponent) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[464]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PerExponent.ProtoReflect.Descriptor instead.
func (*PerExponent) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{464}
}

func (x *PerExponent) GetValue() int32 {
	if x != nil {
		return x.Value
	}
	return 0
}

// range of Integer from xnap_v1.asn1:5855
// {PacketLossRate}
type PacketLossRate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"valueExt,valueLB:0,valueUB:1000,"
	Value int32 `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty" aper:"valueExt,valueLB:0,valueUB:1000,"`
}

func (x *PacketLossRate) Reset() {
	*x = PacketLossRate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[465]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PacketLossRate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PacketLossRate) ProtoMessage() {}

func (x *PacketLossRate) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[465]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PacketLossRate.ProtoReflect.Descriptor instead.
func (*PacketLossRate) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{465}
}

func (x *PacketLossRate) GetValue() int32 {
	if x != nil {
		return x.Value
	}
	return 0
}

// value set from xnap_v1.asn1:5876
// {PagingeDRXInformation-ExtIEs}
type PagingeDrxinformationExtIes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *emptypb.Empty `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *PagingeDrxinformationExtIes) Reset() {
	*x = PagingeDrxinformationExtIes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[466]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PagingeDrxinformationExtIes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PagingeDrxinformationExtIes) ProtoMessage() {}

func (x *PagingeDrxinformationExtIes) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[466]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PagingeDrxinformationExtIes.ProtoReflect.Descriptor instead.
func (*PagingeDrxinformationExtIes) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{466}
}

func (x *PagingeDrxinformationExtIes) GetValue() *emptypb.Empty {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:5870
// @inject_tag: aper:"valueExt"
// {PagingeDRXInformation}
type PagingeDrxinformation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"valueExt,valueLB:0,valueUB:13,"
	PagingEDrxCycle PagingeDrxCycle `protobuf:"varint,1,opt,name=paging_e_drx_cycle,json=paging-eDRX-Cycle,proto3,enum=xnap.v1.PagingeDrxCycle" json:"paging_e_drx_cycle,omitempty" aper:"valueExt,valueLB:0,valueUB:13,"`
	// @inject_tag: aper:"optional,valueExt,valueLB:0,valueUB:15,"
	PagingTimeWindow *PagingTimeWindow `protobuf:"varint,2,opt,name=paging_time_window,json=paging-Time-Window,proto3,enum=xnap.v1.PagingTimeWindow,oneof" json:"paging_time_window,omitempty" aper:"optional,valueExt,valueLB:0,valueUB:15,"`
	// @inject_tag: aper:"optional,sizeLB:1,"
	IEExtensions []*PagingeDrxinformationExtIes `protobuf:"bytes,3,rep,name=i_e_extensions,json=iE-Extensions,proto3" json:"i_e_extensions,omitempty" aper:"optional,sizeLB:1,"`
}

func (x *PagingeDrxinformation) Reset() {
	*x = PagingeDrxinformation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[467]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PagingeDrxinformation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PagingeDrxinformation) ProtoMessage() {}

func (x *PagingeDrxinformation) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[467]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PagingeDrxinformation.ProtoReflect.Descriptor instead.
func (*PagingeDrxinformation) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{467}
}

func (x *PagingeDrxinformation) GetPagingEDrxCycle() PagingeDrxCycle {
	if x != nil {
		return x.PagingEDrxCycle
	}
	return PagingeDrxCycle_PAGING_E_DRX_CYCLE_HFHALF
}

func (x *PagingeDrxinformation) GetPagingTimeWindow() PagingTimeWindow {
	if x != nil && x.PagingTimeWindow != nil {
		return *x.PagingTimeWindow
	}
	return PagingTimeWindow_PAGING_TIME_WINDOW_S1
}

func (x *PagingeDrxinformation) GetIEExtensions() []*PagingeDrxinformationExtIes {
	if x != nil {
		return x.IEExtensions
	}
	return nil
}

// value set from xnap_v1.asn1:5918
// {PC5QoSParameters-ExtIEs}
type Pc5QoSparametersExtIes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *emptypb.Empty `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *Pc5QoSparametersExtIes) Reset() {
	*x = Pc5QoSparametersExtIes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[468]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Pc5QoSparametersExtIes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Pc5QoSparametersExtIes) ProtoMessage() {}

func (x *Pc5QoSparametersExtIes) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[468]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Pc5QoSparametersExtIes.ProtoReflect.Descriptor instead.
func (*Pc5QoSparametersExtIes) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{468}
}

func (x *Pc5QoSparametersExtIes) GetValue() *emptypb.Empty {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:5911
// @inject_tag: aper:"valueExt"
// {PC5QoSParameters}
type Pc5QoSparameters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pc5QoSflowList *Pc5QoSflowList `protobuf:"bytes,1,opt,name=pc5_qo_sflow_list,json=pc5QoSFlowList,proto3" json:"pc5_qo_sflow_list,omitempty"`
	// @inject_tag: aper:"optional,"
	Pc5LinkAggregateBitRates *BitRate `protobuf:"bytes,2,opt,name=pc5_link_aggregate_bit_rates,json=pc5LinkAggregateBitRates,proto3,oneof" json:"pc5_link_aggregate_bit_rates,omitempty" aper:"optional,"`
	// @inject_tag: aper:"optional,sizeLB:1,"
	IEExtensions []*Pc5QoSparametersExtIes `protobuf:"bytes,3,rep,name=i_e_extensions,json=iE-Extensions,proto3" json:"i_e_extensions,omitempty" aper:"optional,sizeLB:1,"`
}

func (x *Pc5QoSparameters) Reset() {
	*x = Pc5QoSparameters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[469]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Pc5QoSparameters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Pc5QoSparameters) ProtoMessage() {}

func (x *Pc5QoSparameters) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[469]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Pc5QoSparameters.ProtoReflect.Descriptor instead.
func (*Pc5QoSparameters) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{469}
}

func (x *Pc5QoSparameters) GetPc5QoSflowList() *Pc5QoSflowList {
	if x != nil {
		return x.Pc5QoSflowList
	}
	return nil
}

func (x *Pc5QoSparameters) GetPc5LinkAggregateBitRates() *BitRate {
	if x != nil {
		return x.Pc5LinkAggregateBitRates
	}
	return nil
}

func (x *Pc5QoSparameters) GetIEExtensions() []*Pc5QoSparametersExtIes {
	if x != nil {
		return x.IEExtensions
	}
	return nil
}

// sequence from xnap_v1.asn1:5925
// {PC5QoSFlowList}
type Pc5QoSflowList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"valueExt,sizeLB:1,sizeUB:2064,"
	Value []*Pc5QoSflowItem `protobuf:"bytes,1,rep,name=value,proto3" json:"value,omitempty" aper:"valueExt,sizeLB:1,sizeUB:2064,"`
}

func (x *Pc5QoSflowList) Reset() {
	*x = Pc5QoSflowList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[470]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Pc5QoSflowList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Pc5QoSflowList) ProtoMessage() {}

func (x *Pc5QoSflowList) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[470]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Pc5QoSflowList.ProtoReflect.Descriptor instead.
func (*Pc5QoSflowList) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{470}
}

func (x *Pc5QoSflowList) GetValue() []*Pc5QoSflowItem {
	if x != nil {
		return x.Value
	}
	return nil
}

// value set from xnap_v1.asn1:5933
// {PC5QoSFlowItem-ExtIEs}
type Pc5QoSflowItemExtIes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *emptypb.Empty `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *Pc5QoSflowItemExtIes) Reset() {
	*x = Pc5QoSflowItemExtIes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[471]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Pc5QoSflowItemExtIes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Pc5QoSflowItemExtIes) ProtoMessage() {}

func (x *Pc5QoSflowItemExtIes) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[471]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Pc5QoSflowItemExtIes.ProtoReflect.Descriptor instead.
func (*Pc5QoSflowItemExtIes) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{471}
}

func (x *Pc5QoSflowItemExtIes) GetValue() *emptypb.Empty {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:5926
// @inject_tag: aper:"valueExt"
// {PC5QoSFlowItem}
type Pc5QoSflowItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PQi *FiveQi `protobuf:"bytes,1,opt,name=p_qi,json=pQI,proto3" json:"p_qi,omitempty"`
	// @inject_tag: aper:"optional,valueExt,"
	Pc5FlowBitRates *Pc5FlowBitRates `protobuf:"bytes,2,opt,name=pc5_flow_bit_rates,json=pc5FlowBitRates,proto3,oneof" json:"pc5_flow_bit_rates,omitempty" aper:"optional,valueExt,"`
	// @inject_tag: aper:"optional,valueExt,valueLB:0,valueUB:8,"
	Range *Range `protobuf:"varint,3,opt,name=range,proto3,enum=xnap.v1.Range,oneof" json:"range,omitempty" aper:"optional,valueExt,valueLB:0,valueUB:8,"`
	// @inject_tag: aper:"optional,sizeLB:1,"
	IEExtensions []*Pc5QoSflowItemExtIes `protobuf:"bytes,4,rep,name=i_e_extensions,json=iE-Extensions,proto3" json:"i_e_extensions,omitempty" aper:"optional,sizeLB:1,"`
}

func (x *Pc5QoSflowItem) Reset() {
	*x = Pc5QoSflowItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[472]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Pc5QoSflowItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Pc5QoSflowItem) ProtoMessage() {}

func (x *Pc5QoSflowItem) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[472]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Pc5QoSflowItem.ProtoReflect.Descriptor instead.
func (*Pc5QoSflowItem) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{472}
}

func (x *Pc5QoSflowItem) GetPQi() *FiveQi {
	if x != nil {
		return x.PQi
	}
	return nil
}

func (x *Pc5QoSflowItem) GetPc5FlowBitRates() *Pc5FlowBitRates {
	if x != nil {
		return x.Pc5FlowBitRates
	}
	return nil
}

func (x *Pc5QoSflowItem) GetRange() Range {
	if x != nil && x.Range != nil {
		return *x.Range
	}
	return Range_RANGE_M50
}

func (x *Pc5QoSflowItem) GetIEExtensions() []*Pc5QoSflowItemExtIes {
	if x != nil {
		return x.IEExtensions
	}
	return nil
}

// value set from xnap_v1.asn1:5945
// {PC5FlowBitRates-ExtIEs}
type Pc5FlowBitRatesExtIes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *emptypb.Empty `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *Pc5FlowBitRatesExtIes) Reset() {
	*x = Pc5FlowBitRatesExtIes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[473]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Pc5FlowBitRatesExtIes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Pc5FlowBitRatesExtIes) ProtoMessage() {}

func (x *Pc5FlowBitRatesExtIes) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[473]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Pc5FlowBitRatesExtIes.ProtoReflect.Descriptor instead.
func (*Pc5FlowBitRatesExtIes) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{473}
}

func (x *Pc5FlowBitRatesExtIes) GetValue() *emptypb.Empty {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:5939
// @inject_tag: aper:"valueExt"
// {PC5FlowBitRates}
type Pc5FlowBitRates struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GuaranteedFlowBitRate *BitRate `protobuf:"bytes,1,opt,name=guaranteed_flow_bit_rate,json=guaranteedFlowBitRate,proto3" json:"guaranteed_flow_bit_rate,omitempty"`
	MaximumFlowBitRate    *BitRate `protobuf:"bytes,2,opt,name=maximum_flow_bit_rate,json=maximumFlowBitRate,proto3" json:"maximum_flow_bit_rate,omitempty"`
	// @inject_tag: aper:"optional,sizeLB:1,"
	IEExtensions []*Pc5FlowBitRatesExtIes `protobuf:"bytes,3,rep,name=i_e_extensions,json=iE-Extensions,proto3" json:"i_e_extensions,omitempty" aper:"optional,sizeLB:1,"`
}

func (x *Pc5FlowBitRates) Reset() {
	*x = Pc5FlowBitRates{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[474]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Pc5FlowBitRates) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Pc5FlowBitRates) ProtoMessage() {}

func (x *Pc5FlowBitRates) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[474]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Pc5FlowBitRates.ProtoReflect.Descriptor instead.
func (*Pc5FlowBitRates) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{474}
}

func (x *Pc5FlowBitRates) GetGuaranteedFlowBitRate() *BitRate {
	if x != nil {
		return x.GuaranteedFlowBitRate
	}
	return nil
}

func (x *Pc5FlowBitRates) GetMaximumFlowBitRate() *BitRate {
	if x != nil {
		return x.MaximumFlowBitRate
	}
	return nil
}

func (x *Pc5FlowBitRates) GetIEExtensions() []*Pc5FlowBitRatesExtIes {
	if x != nil {
		return x.IEExtensions
	}
	return nil
}

// value set from xnap_v1.asn1:5955
// {PDCPChangeIndication-ExtIEs}
type PdcpchangeIndicationExtIes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *emptypb.Empty `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *PdcpchangeIndicationExtIes) Reset() {
	*x = PdcpchangeIndicationExtIes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[475]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PdcpchangeIndicationExtIes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PdcpchangeIndicationExtIes) ProtoMessage() {}

func (x *PdcpchangeIndicationExtIes) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[475]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PdcpchangeIndicationExtIes.ProtoReflect.Descriptor instead.
func (*PdcpchangeIndicationExtIes) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{475}
}

func (x *PdcpchangeIndicationExtIes) GetValue() *emptypb.Empty {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:5950
// {PDCPChangeIndication}
type PdcpchangeIndication struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// choice from xnap_v1.asn1:5950
	//
	// Types that are assignable to PdcpchangeIndication:
	//	*PdcpchangeIndication_FromSNgRanNode
	//	*PdcpchangeIndication_FromMNgRanNode
	//	*PdcpchangeIndication_ChoiceExtension
	PdcpchangeIndication isPdcpchangeIndication_PdcpchangeIndication `protobuf_oneof:"pdcpchange_indication"`
}

func (x *PdcpchangeIndication) Reset() {
	*x = PdcpchangeIndication{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[476]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PdcpchangeIndication) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PdcpchangeIndication) ProtoMessage() {}

func (x *PdcpchangeIndication) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[476]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PdcpchangeIndication.ProtoReflect.Descriptor instead.
func (*PdcpchangeIndication) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{476}
}

func (m *PdcpchangeIndication) GetPdcpchangeIndication() isPdcpchangeIndication_PdcpchangeIndication {
	if m != nil {
		return m.PdcpchangeIndication
	}
	return nil
}

func (x *PdcpchangeIndication) GetFromSNgRanNode() FromSngrannodePdcpchangeIndication {
	if x, ok := x.GetPdcpchangeIndication().(*PdcpchangeIndication_FromSNgRanNode); ok {
		return x.FromSNgRanNode
	}
	return FromSngrannodePdcpchangeIndication_FROM_SNGRANNODE_PDCPCHANGE_INDICATION_S_NG_RAN_NODE_KEY_UPDATE_REQUIRED
}

func (x *PdcpchangeIndication) GetFromMNgRanNode() FromMngrannodePdcpchangeIndication {
	if x, ok := x.GetPdcpchangeIndication().(*PdcpchangeIndication_FromMNgRanNode); ok {
		return x.FromMNgRanNode
	}
	return FromMngrannodePdcpchangeIndication_FROM_MNGRANNODE_PDCPCHANGE_INDICATION_PDCP_DATA_RECOVERY_REQUIRED
}

func (x *PdcpchangeIndication) GetChoiceExtension() *PdcpchangeIndicationExtIes {
	if x, ok := x.GetPdcpchangeIndication().(*PdcpchangeIndication_ChoiceExtension); ok {
		return x.ChoiceExtension
	}
	return nil
}

type isPdcpchangeIndication_PdcpchangeIndication interface {
	isPdcpchangeIndication_PdcpchangeIndication()
}

type PdcpchangeIndication_FromSNgRanNode struct {
	// @inject_tag: aper:"choiceIdx:1,valueExt,valueLB:0,valueUB:1,"
	FromSNgRanNode FromSngrannodePdcpchangeIndication `protobuf:"varint,1,opt,name=from_s_ng_ran_node,json=from-S-NG-RAN-node,proto3,enum=xnap.v1.FromSngrannodePdcpchangeIndication,oneof" aper:"choiceIdx:1,valueExt,valueLB:0,valueUB:1,"`
}

type PdcpchangeIndication_FromMNgRanNode struct {
	// @inject_tag: aper:"choiceIdx:2,valueExt,valueLB:0,valueUB:0,"
	FromMNgRanNode FromMngrannodePdcpchangeIndication `protobuf:"varint,2,opt,name=from_m_ng_ran_node,json=from-M-NG-RAN-node,proto3,enum=xnap.v1.FromMngrannodePdcpchangeIndication,oneof" aper:"choiceIdx:2,valueExt,valueLB:0,valueUB:0,"`
}

type PdcpchangeIndication_ChoiceExtension struct {
	// @inject_tag: aper:"choiceIdx:3,"
	ChoiceExtension *PdcpchangeIndicationExtIes `protobuf:"bytes,3,opt,name=choice_extension,json=choice-extension,proto3,oneof" aper:"choiceIdx:3,"`
}

func (*PdcpchangeIndication_FromSNgRanNode) isPdcpchangeIndication_PdcpchangeIndication() {}

func (*PdcpchangeIndication_FromMNgRanNode) isPdcpchangeIndication_PdcpchangeIndication() {}

func (*PdcpchangeIndication_ChoiceExtension) isPdcpchangeIndication_PdcpchangeIndication() {}

// value set from xnap_v1.asn1:5974
// {PDCPSNLength-ExtIEs}
type PdcpsnlengthExtIes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *emptypb.Empty `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *PdcpsnlengthExtIes) Reset() {
	*x = PdcpsnlengthExtIes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[477]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PdcpsnlengthExtIes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PdcpsnlengthExtIes) ProtoMessage() {}

func (x *PdcpsnlengthExtIes) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[477]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PdcpsnlengthExtIes.ProtoReflect.Descriptor instead.
func (*PdcpsnlengthExtIes) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{477}
}

func (x *PdcpsnlengthExtIes) GetValue() *emptypb.Empty {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:5968
// @inject_tag: aper:"valueExt"
// {PDCPSNLength}
type Pdcpsnlength struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"valueExt,valueLB:0,valueUB:1,"
	UlPdcpsnlength UlPdcpsnlengthPdcpsnlength `protobuf:"varint,1,opt,name=ul_pdcpsnlength,json=ulPDCPSNLength,proto3,enum=xnap.v1.UlPdcpsnlengthPdcpsnlength" json:"ul_pdcpsnlength,omitempty" aper:"valueExt,valueLB:0,valueUB:1,"`
	// @inject_tag: aper:"valueExt,valueLB:0,valueUB:1,"
	DlPdcpsnlength DlPdcpsnlengthPdcpsnlength `protobuf:"varint,2,opt,name=dl_pdcpsnlength,json=dlPDCPSNLength,proto3,enum=xnap.v1.DlPdcpsnlengthPdcpsnlength" json:"dl_pdcpsnlength,omitempty" aper:"valueExt,valueLB:0,valueUB:1,"`
	// @inject_tag: aper:"optional,sizeLB:1,"
	IEExtension []*PdcpsnlengthExtIes `protobuf:"bytes,3,rep,name=i_e_extension,json=iE-Extension,proto3" json:"i_e_extension,omitempty" aper:"optional,sizeLB:1,"`
}

func (x *Pdcpsnlength) Reset() {
	*x = Pdcpsnlength{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[478]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Pdcpsnlength) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Pdcpsnlength) ProtoMessage() {}

func (x *Pdcpsnlength) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[478]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Pdcpsnlength.ProtoReflect.Descriptor instead.
func (*Pdcpsnlength) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{478}
}

func (x *Pdcpsnlength) GetUlPdcpsnlength() UlPdcpsnlengthPdcpsnlength {
	if x != nil {
		return x.UlPdcpsnlength
	}
	return UlPdcpsnlengthPdcpsnlength_UL_PDCPSNLENGTH_PDCPSNLENGTH_V12BITS
}

func (x *Pdcpsnlength) GetDlPdcpsnlength() DlPdcpsnlengthPdcpsnlength {
	if x != nil {
		return x.DlPdcpsnlength
	}
	return DlPdcpsnlengthPdcpsnlength_DL_PDCPSNLENGTH_PDCPSNLENGTH_V12BITS
}

func (x *Pdcpsnlength) GetIEExtension() []*PdcpsnlengthExtIes {
	if x != nil {
		return x.IEExtension
	}
	return nil
}

// value set from xnap_v1.asn1:5987
// {PDUSessionAggregateMaximumBitRate-ExtIEs}
type PdusessionAggregateMaximumBitRateExtIes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *emptypb.Empty `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *PdusessionAggregateMaximumBitRateExtIes) Reset() {
	*x = PdusessionAggregateMaximumBitRateExtIes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[479]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PdusessionAggregateMaximumBitRateExtIes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PdusessionAggregateMaximumBitRateExtIes) ProtoMessage() {}

func (x *PdusessionAggregateMaximumBitRateExtIes) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[479]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PdusessionAggregateMaximumBitRateExtIes.ProtoReflect.Descriptor instead.
func (*PdusessionAggregateMaximumBitRateExtIes) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{479}
}

func (x *PdusessionAggregateMaximumBitRateExtIes) GetValue() *emptypb.Empty {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:5981
// @inject_tag: aper:"valueExt"
// {PDUSessionAggregateMaximumBitRate}
type PdusessionAggregateMaximumBitRate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DownlinkSessionAmbr *BitRate `protobuf:"bytes,1,opt,name=downlink_session_ambr,json=downlink-session-AMBR,proto3" json:"downlink_session_ambr,omitempty"`
	UplinkSessionAmbr   *BitRate `protobuf:"bytes,2,opt,name=uplink_session_ambr,json=uplink-session-AMBR,proto3" json:"uplink_session_ambr,omitempty"`
	// @inject_tag: aper:"optional,sizeLB:1,"
	IEExtensions []*PdusessionAggregateMaximumBitRateExtIes `protobuf:"bytes,3,rep,name=i_e_extensions,json=iE-Extensions,proto3" json:"i_e_extensions,omitempty" aper:"optional,sizeLB:1,"`
}

func (x *PdusessionAggregateMaximumBitRate) Reset() {
	*x = PdusessionAggregateMaximumBitRate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[480]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PdusessionAggregateMaximumBitRate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PdusessionAggregateMaximumBitRate) ProtoMessage() {}

func (x *PdusessionAggregateMaximumBitRate) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[480]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PdusessionAggregateMaximumBitRate.ProtoReflect.Descriptor instead.
func (*PdusessionAggregateMaximumBitRate) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{480}
}

func (x *PdusessionAggregateMaximumBitRate) GetDownlinkSessionAmbr() *BitRate {
	if x != nil {
		return x.DownlinkSessionAmbr
	}
	return nil
}

func (x *PdusessionAggregateMaximumBitRate) GetUplinkSessionAmbr() *BitRate {
	if x != nil {
		return x.UplinkSessionAmbr
	}
	return nil
}

func (x *PdusessionAggregateMaximumBitRate) GetIEExtensions() []*PdusessionAggregateMaximumBitRateExtIes {
	if x != nil {
		return x.IEExtensions
	}
	return nil
}

// sequence from xnap_v1.asn1:5995
// {PDUSession-List}
type PdusessionList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"sizeLB:1,sizeUB:256,"
	Value []*PdusessionID `protobuf:"bytes,1,rep,name=value,proto3" json:"value,omitempty" aper:"sizeLB:1,sizeUB:256,"`
}

func (x *PdusessionList) Reset() {
	*x = PdusessionList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[481]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PdusessionList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PdusessionList) ProtoMessage() {}

func (x *PdusessionList) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[481]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PdusessionList.ProtoReflect.Descriptor instead.
func (*PdusessionList) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{481}
}

func (x *PdusessionList) GetValue() []*PdusessionID {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:5997
// {PDUSession-List-withCause}
type PdusessionListwithCause struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"valueExt,sizeLB:1,sizeUB:256,"
	Value []*PdusessionListwithCauseItem `protobuf:"bytes,1,rep,name=value,proto3" json:"value,omitempty" aper:"valueExt,sizeLB:1,sizeUB:256,"`
}

func (x *PdusessionListwithCause) Reset() {
	*x = PdusessionListwithCause{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[482]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PdusessionListwithCause) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PdusessionListwithCause) ProtoMessage() {}

func (x *PdusessionListwithCause) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[482]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PdusessionListwithCause.ProtoReflect.Descriptor instead.
func (*PdusessionListwithCause) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{482}
}

func (x *PdusessionListwithCause) GetValue() []*PdusessionListwithCauseItem {
	if x != nil {
		return x.Value
	}
	return nil
}

// value set from xnap_v1.asn1:6004
// {PDUSession-List-withCause-Item-ExtIEs}
type PdusessionListwithCauseItemExtIes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *emptypb.Empty `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *PdusessionListwithCauseItemExtIes) Reset() {
	*x = PdusessionListwithCauseItemExtIes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[483]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PdusessionListwithCauseItemExtIes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PdusessionListwithCauseItemExtIes) ProtoMessage() {}

func (x *PdusessionListwithCauseItemExtIes) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[483]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PdusessionListwithCauseItemExtIes.ProtoReflect.Descriptor instead.
func (*PdusessionListwithCauseItemExtIes) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{483}
}

func (x *PdusessionListwithCauseItemExtIes) GetValue() *emptypb.Empty {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:5998
// @inject_tag: aper:"valueExt"
// {PDUSession-List-withCause-Item}
type PdusessionListwithCauseItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PduSessionId *PdusessionID `protobuf:"bytes,1,opt,name=pdu_session_id,json=pduSessionId,proto3" json:"pdu_session_id,omitempty"`
	// @inject_tag: aper:"optional,"
	Cause *Cause `protobuf:"bytes,2,opt,name=cause,proto3,oneof" json:"cause,omitempty" aper:"optional,"`
	// @inject_tag: aper:"optional,sizeLB:1,"
	IEExtension []*PdusessionListwithCauseItemExtIes `protobuf:"bytes,3,rep,name=i_e_extension,json=iE-Extension,proto3" json:"i_e_extension,omitempty" aper:"optional,sizeLB:1,"`
}

func (x *PdusessionListwithCauseItem) Reset() {
	*x = PdusessionListwithCauseItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[484]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PdusessionListwithCauseItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PdusessionListwithCauseItem) ProtoMessage() {}

func (x *PdusessionListwithCauseItem) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[484]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PdusessionListwithCauseItem.ProtoReflect.Descriptor instead.
func (*PdusessionListwithCauseItem) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{484}
}

func (x *PdusessionListwithCauseItem) GetPduSessionId() *PdusessionID {
	if x != nil {
		return x.PduSessionId
	}
	return nil
}

func (x *PdusessionListwithCauseItem) GetCause() *Cause {
	if x != nil {
		return x.Cause
	}
	return nil
}

func (x *PdusessionListwithCauseItem) GetIEExtension() []*PdusessionListwithCauseItemExtIes {
	if x != nil {
		return x.IEExtension
	}
	return nil
}

// sequence from xnap_v1.asn1:6012
// {PDUSession-List-withDataForwardingFromTarget}
type PdusessionListwithDataForwardingFromTarget struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"valueExt,sizeLB:1,sizeUB:256,"
	Value []*PdusessionListwithDataForwardingFromTargetItem `protobuf:"bytes,1,rep,name=value,proto3" json:"value,omitempty" aper:"valueExt,sizeLB:1,sizeUB:256,"`
}

func (x *PdusessionListwithDataForwardingFromTarget) Reset() {
	*x = PdusessionListwithDataForwardingFromTarget{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[485]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PdusessionListwithDataForwardingFromTarget) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PdusessionListwithDataForwardingFromTarget) ProtoMessage() {}

func (x *PdusessionListwithDataForwardingFromTarget) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[485]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PdusessionListwithDataForwardingFromTarget.ProtoReflect.Descriptor instead.
func (*PdusessionListwithDataForwardingFromTarget) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{485}
}

func (x *PdusessionListwithDataForwardingFromTarget) GetValue() []*PdusessionListwithDataForwardingFromTargetItem {
	if x != nil {
		return x.Value
	}
	return nil
}

// value set from xnap_v1.asn1:6019
// {PDUSession-List-withDataForwardingFromTarget-Item-ExtIEs}
type PdusessionListwithDataForwardingFromTargetItemExtIes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *emptypb.Empty `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *PdusessionListwithDataForwardingFromTargetItemExtIes) Reset() {
	*x = PdusessionListwithDataForwardingFromTargetItemExtIes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[486]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PdusessionListwithDataForwardingFromTargetItemExtIes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PdusessionListwithDataForwardingFromTargetItemExtIes) ProtoMessage() {}

func (x *PdusessionListwithDataForwardingFromTargetItemExtIes) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[486]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PdusessionListwithDataForwardingFromTargetItemExtIes.ProtoReflect.Descriptor instead.
func (*PdusessionListwithDataForwardingFromTargetItemExtIes) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{486}
}

func (x *PdusessionListwithDataForwardingFromTargetItemExtIes) GetValue() *emptypb.Empty {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:6013
// @inject_tag: aper:"valueExt"
// {PDUSession-List-withDataForwardingFromTarget-Item}
type PdusessionListwithDataForwardingFromTargetItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PduSessionId *PdusessionID `protobuf:"bytes,1,opt,name=pdu_session_id,json=pduSessionId,proto3" json:"pdu_session_id,omitempty"`
	// @inject_tag: aper:"valueExt,"
	DataforwardinginfoTarget *DataForwardingInfoFromTargetNgrannode `protobuf:"bytes,2,opt,name=dataforwardinginfo_target,json=dataforwardinginfoTarget,proto3" json:"dataforwardinginfo_target,omitempty" aper:"valueExt,"`
	// @inject_tag: aper:"optional,sizeLB:1,"
	IEExtension []*PdusessionListwithDataForwardingFromTargetItemExtIes `protobuf:"bytes,3,rep,name=i_e_extension,json=iE-Extension,proto3" json:"i_e_extension,omitempty" aper:"optional,sizeLB:1,"`
}

func (x *PdusessionListwithDataForwardingFromTargetItem) Reset() {
	*x = PdusessionListwithDataForwardingFromTargetItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[487]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PdusessionListwithDataForwardingFromTargetItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PdusessionListwithDataForwardingFromTargetItem) ProtoMessage() {}

func (x *PdusessionListwithDataForwardingFromTargetItem) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[487]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PdusessionListwithDataForwardingFromTargetItem.ProtoReflect.Descriptor instead.
func (*PdusessionListwithDataForwardingFromTargetItem) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{487}
}

func (x *PdusessionListwithDataForwardingFromTargetItem) GetPduSessionId() *PdusessionID {
	if x != nil {
		return x.PduSessionId
	}
	return nil
}

func (x *PdusessionListwithDataForwardingFromTargetItem) GetDataforwardinginfoTarget() *DataForwardingInfoFromTargetNgrannode {
	if x != nil {
		return x.DataforwardinginfoTarget
	}
	return nil
}

func (x *PdusessionListwithDataForwardingFromTargetItem) GetIEExtension() []*PdusessionListwithDataForwardingFromTargetItemExtIes {
	if x != nil {
		return x.IEExtension
	}
	return nil
}

// sequence from xnap_v1.asn1:6028
// {PDUSession-List-withDataForwardingRequest}
type PdusessionListwithDataForwardingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"valueExt,sizeLB:1,sizeUB:256,"
	Value []*PdusessionListwithDataForwardingRequestItem `protobuf:"bytes,1,rep,name=value,proto3" json:"value,omitempty" aper:"valueExt,sizeLB:1,sizeUB:256,"`
}

func (x *PdusessionListwithDataForwardingRequest) Reset() {
	*x = PdusessionListwithDataForwardingRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[488]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PdusessionListwithDataForwardingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PdusessionListwithDataForwardingRequest) ProtoMessage() {}

func (x *PdusessionListwithDataForwardingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[488]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PdusessionListwithDataForwardingRequest.ProtoReflect.Descriptor instead.
func (*PdusessionListwithDataForwardingRequest) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{488}
}

func (x *PdusessionListwithDataForwardingRequest) GetValue() []*PdusessionListwithDataForwardingRequestItem {
	if x != nil {
		return x.Value
	}
	return nil
}

// value set from xnap_v1.asn1:6036
// {PDUSession-List-withDataForwardingRequest-Item-ExtIEs}
type PdusessionListwithDataForwardingRequestItemExtIes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *emptypb.Empty `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *PdusessionListwithDataForwardingRequestItemExtIes) Reset() {
	*x = PdusessionListwithDataForwardingRequestItemExtIes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[489]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PdusessionListwithDataForwardingRequestItemExtIes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PdusessionListwithDataForwardingRequestItemExtIes) ProtoMessage() {}

func (x *PdusessionListwithDataForwardingRequestItemExtIes) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[489]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PdusessionListwithDataForwardingRequestItemExtIes.ProtoReflect.Descriptor instead.
func (*PdusessionListwithDataForwardingRequestItemExtIes) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{489}
}

func (x *PdusessionListwithDataForwardingRequestItemExtIes) GetValue() *emptypb.Empty {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:6029
// @inject_tag: aper:"valueExt"
// {PDUSession-List-withDataForwardingRequest-Item}
type PdusessionListwithDataForwardingRequestItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PduSessionId *PdusessionID `protobuf:"bytes,1,opt,name=pdu_session_id,json=pduSessionId,proto3" json:"pdu_session_id,omitempty"`
	// @inject_tag: aper:"optional,valueExt,"
	DataforwardingInfofromSource *DataforwardingandOffloadingInfofromSource `protobuf:"bytes,2,opt,name=dataforwarding_infofrom_source,json=dataforwardingInfofromSource,proto3,oneof" json:"dataforwarding_infofrom_source,omitempty" aper:"optional,valueExt,"`
	// @inject_tag: aper:"optional,"
	DRbtoBeReleasedList *DrbtoQoSflowMappingList `protobuf:"bytes,3,opt,name=d_rbto_be_released_list,json=dRBtoBeReleasedList,proto3,oneof" json:"d_rbto_be_released_list,omitempty" aper:"optional,"`
	// @inject_tag: aper:"optional,sizeLB:1,"
	IEExtension []*PdusessionListwithDataForwardingRequestItemExtIes `protobuf:"bytes,4,rep,name=i_e_extension,json=iE-Extension,proto3" json:"i_e_extension,omitempty" aper:"optional,sizeLB:1,"`
}

func (x *PdusessionListwithDataForwardingRequestItem) Reset() {
	*x = PdusessionListwithDataForwardingRequestItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[490]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PdusessionListwithDataForwardingRequestItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PdusessionListwithDataForwardingRequestItem) ProtoMessage() {}

func (x *PdusessionListwithDataForwardingRequestItem) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[490]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PdusessionListwithDataForwardingRequestItem.ProtoReflect.Descriptor instead.
func (*PdusessionListwithDataForwardingRequestItem) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{490}
}

func (x *PdusessionListwithDataForwardingRequestItem) GetPduSessionId() *PdusessionID {
	if x != nil {
		return x.PduSessionId
	}
	return nil
}

func (x *PdusessionListwithDataForwardingRequestItem) GetDataforwardingInfofromSource() *DataforwardingandOffloadingInfofromSource {
	if x != nil {
		return x.DataforwardingInfofromSource
	}
	return nil
}

func (x *PdusessionListwithDataForwardingRequestItem) GetDRbtoBeReleasedList() *DrbtoQoSflowMappingList {
	if x != nil {
		return x.DRbtoBeReleasedList
	}
	return nil
}

func (x *PdusessionListwithDataForwardingRequestItem) GetIEExtension() []*PdusessionListwithDataForwardingRequestItemExtIes {
	if x != nil {
		return x.IEExtension
	}
	return nil
}

// sequence from xnap_v1.asn1:6059
// {PDUSessionResourcesAdmitted-List}
type PdusessionResourcesAdmittedList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"valueExt,sizeLB:1,sizeUB:256,"
	Value []*PdusessionResourcesAdmittedItem `protobuf:"bytes,1,rep,name=value,proto3" json:"value,omitempty" aper:"valueExt,sizeLB:1,sizeUB:256,"`
}

func (x *PdusessionResourcesAdmittedList) Reset() {
	*x = PdusessionResourcesAdmittedList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[491]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PdusessionResourcesAdmittedList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PdusessionResourcesAdmittedList) ProtoMessage() {}

func (x *PdusessionResourcesAdmittedList) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[491]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PdusessionResourcesAdmittedList.ProtoReflect.Descriptor instead.
func (*PdusessionResourcesAdmittedList) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{491}
}

func (x *PdusessionResourcesAdmittedList) GetValue() []*PdusessionResourcesAdmittedItem {
	if x != nil {
		return x.Value
	}
	return nil
}

// value set from xnap_v1.asn1:6066
// {PDUSessionResourcesAdmitted-Item-ExtIEs}
type PdusessionResourcesAdmittedItemExtIes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *emptypb.Empty `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *PdusessionResourcesAdmittedItemExtIes) Reset() {
	*x = PdusessionResourcesAdmittedItemExtIes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[492]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PdusessionResourcesAdmittedItemExtIes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PdusessionResourcesAdmittedItemExtIes) ProtoMessage() {}

func (x *PdusessionResourcesAdmittedItemExtIes) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[492]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PdusessionResourcesAdmittedItemExtIes.ProtoReflect.Descriptor instead.
func (*PdusessionResourcesAdmittedItemExtIes) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{492}
}

func (x *PdusessionResourcesAdmittedItemExtIes) GetValue() *emptypb.Empty {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:6060
// @inject_tag: aper:"valueExt"
// {PDUSessionResourcesAdmitted-Item}
type PdusessionResourcesAdmittedItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PduSessionId *PdusessionID `protobuf:"bytes,1,opt,name=pdu_session_id,json=pduSessionId,proto3" json:"pdu_session_id,omitempty"`
	// @inject_tag: aper:"valueExt,"
	PduSessionResourceAdmittedInfo *PdusessionResourceAdmittedInfo `protobuf:"bytes,2,opt,name=pdu_session_resource_admitted_info,json=pduSessionResourceAdmittedInfo,proto3" json:"pdu_session_resource_admitted_info,omitempty" aper:"valueExt,"`
	// @inject_tag: aper:"optional,sizeLB:1,"
	IEExtensions []*PdusessionResourcesAdmittedItemExtIes `protobuf:"bytes,3,rep,name=i_e_extensions,json=iE-Extensions,proto3" json:"i_e_extensions,omitempty" aper:"optional,sizeLB:1,"`
}

func (x *PdusessionResourcesAdmittedItem) Reset() {
	*x = PdusessionResourcesAdmittedItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[493]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PdusessionResourcesAdmittedItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PdusessionResourcesAdmittedItem) ProtoMessage() {}

func (x *PdusessionResourcesAdmittedItem) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[493]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PdusessionResourcesAdmittedItem.ProtoReflect.Descriptor instead.
func (*PdusessionResourcesAdmittedItem) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{493}
}

func (x *PdusessionResourcesAdmittedItem) GetPduSessionId() *PdusessionID {
	if x != nil {
		return x.PduSessionId
	}
	return nil
}

func (x *PdusessionResourcesAdmittedItem) GetPduSessionResourceAdmittedInfo() *PdusessionResourceAdmittedInfo {
	if x != nil {
		return x.PduSessionResourceAdmittedInfo
	}
	return nil
}

func (x *PdusessionResourcesAdmittedItem) GetIEExtensions() []*PdusessionResourcesAdmittedItemExtIes {
	if x != nil {
		return x.IEExtensions
	}
	return nil
}

// value set from xnap_v1.asn1:6080
// {PDUSessionResourceAdmittedInfo-ExtIEs}
type PdusessionResourceAdmittedInfoExtIes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *emptypb.Empty `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *PdusessionResourceAdmittedInfoExtIes) Reset() {
	*x = PdusessionResourceAdmittedInfoExtIes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[494]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PdusessionResourceAdmittedInfoExtIes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PdusessionResourceAdmittedInfoExtIes) ProtoMessage() {}

func (x *PdusessionResourceAdmittedInfoExtIes) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[494]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PdusessionResourceAdmittedInfoExtIes.ProtoReflect.Descriptor instead.
func (*PdusessionResourceAdmittedInfoExtIes) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{494}
}

func (x *PdusessionResourceAdmittedInfoExtIes) GetValue() *emptypb.Empty {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:6072
// @inject_tag: aper:"valueExt"
// {PDUSessionResourceAdmittedInfo}
type PdusessionResourceAdmittedInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"optional,valueExt,valueLB:0,valueUB:0,"
	DLNgUTnlInformationUnchanged *DlngutnlinformationUnchangedPdusessionResourceAdmittedInfo `protobuf:"varint,1,opt,name=d_l_ng_u_tnl_information_unchanged,json=dL-NG-U-TNL-Information-Unchanged,proto3,enum=xnap.v1.DlngutnlinformationUnchangedPdusessionResourceAdmittedInfo,oneof" json:"d_l_ng_u_tnl_information_unchanged,omitempty" aper:"optional,valueExt,valueLB:0,valueUB:0,"`
	QosFlowsAdmittedList         *QoSflowsAdmittedList                                       `protobuf:"bytes,2,opt,name=qos_flows_admitted_list,json=qosFlowsAdmitted-List,proto3" json:"qos_flows_admitted_list,omitempty"`
	// @inject_tag: aper:"optional,"
	QosFlowsNotAdmittedList *QoSflowsListwithCause `protobuf:"bytes,3,opt,name=qos_flows_not_admitted_list,json=qosFlowsNotAdmitted-List,proto3,oneof" json:"qos_flows_not_admitted_list,omitempty" aper:"optional,"`
	// @inject_tag: aper:"optional,valueExt,"
	DataForwardingInfoFromTarget *DataForwardingInfoFromTargetNgrannode `protobuf:"bytes,4,opt,name=data_forwarding_info_from_target,json=dataForwardingInfoFromTarget,proto3,oneof" json:"data_forwarding_info_from_target,omitempty" aper:"optional,valueExt,"`
	// @inject_tag: aper:"optional,sizeLB:1,"
	IEExtensions []*PdusessionResourceAdmittedInfoExtIes `protobuf:"bytes,5,rep,name=i_e_extensions,json=iE-Extensions,proto3" json:"i_e_extensions,omitempty" aper:"optional,sizeLB:1,"`
}

func (x *PdusessionResourceAdmittedInfo) Reset() {
	*x = PdusessionResourceAdmittedInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[495]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PdusessionResourceAdmittedInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PdusessionResourceAdmittedInfo) ProtoMessage() {}

func (x *PdusessionResourceAdmittedInfo) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[495]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PdusessionResourceAdmittedInfo.ProtoReflect.Descriptor instead.
func (*PdusessionResourceAdmittedInfo) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{495}
}

func (x *PdusessionResourceAdmittedInfo) GetDLNgUTnlInformationUnchanged() DlngutnlinformationUnchangedPdusessionResourceAdmittedInfo {
	if x != nil && x.DLNgUTnlInformationUnchanged != nil {
		return *x.DLNgUTnlInformationUnchanged
	}
	return DlngutnlinformationUnchangedPdusessionResourceAdmittedInfo_D_LNGUTNLINFORMATION_UNCHANGED_PDUSESSION_RESOURCE_ADMITTED_INFO_TRUE
}

func (x *PdusessionResourceAdmittedInfo) GetQosFlowsAdmittedList() *QoSflowsAdmittedList {
	if x != nil {
		return x.QosFlowsAdmittedList
	}
	return nil
}

func (x *PdusessionResourceAdmittedInfo) GetQosFlowsNotAdmittedList() *QoSflowsListwithCause {
	if x != nil {
		return x.QosFlowsNotAdmittedList
	}
	return nil
}

func (x *PdusessionResourceAdmittedInfo) GetDataForwardingInfoFromTarget() *DataForwardingInfoFromTargetNgrannode {
	if x != nil {
		return x.DataForwardingInfoFromTarget
	}
	return nil
}

func (x *PdusessionResourceAdmittedInfo) GetIEExtensions() []*PdusessionResourceAdmittedInfoExtIes {
	if x != nil {
		return x.IEExtensions
	}
	return nil
}

// sequence from xnap_v1.asn1:6095
// {PDUSessionResourcesNotAdmitted-List}
type PdusessionResourcesNotAdmittedList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"valueExt,sizeLB:1,sizeUB:256,"
	Value []*PdusessionResourcesNotAdmittedItem `protobuf:"bytes,1,rep,name=value,proto3" json:"value,omitempty" aper:"valueExt,sizeLB:1,sizeUB:256,"`
}

func (x *PdusessionResourcesNotAdmittedList) Reset() {
	*x = PdusessionResourcesNotAdmittedList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[496]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PdusessionResourcesNotAdmittedList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PdusessionResourcesNotAdmittedList) ProtoMessage() {}

func (x *PdusessionResourcesNotAdmittedList) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[496]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PdusessionResourcesNotAdmittedList.ProtoReflect.Descriptor instead.
func (*PdusessionResourcesNotAdmittedList) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{496}
}

func (x *PdusessionResourcesNotAdmittedList) GetValue() []*PdusessionResourcesNotAdmittedItem {
	if x != nil {
		return x.Value
	}
	return nil
}

// value set from xnap_v1.asn1:6102
// {PDUSessionResourcesNotAdmitted-Item-Item-ExtIEs}
type PdusessionResourcesNotAdmittedItemItemExtIes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *emptypb.Empty `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *PdusessionResourcesNotAdmittedItemItemExtIes) Reset() {
	*x = PdusessionResourcesNotAdmittedItemItemExtIes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[497]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PdusessionResourcesNotAdmittedItemItemExtIes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PdusessionResourcesNotAdmittedItemItemExtIes) ProtoMessage() {}

func (x *PdusessionResourcesNotAdmittedItemItemExtIes) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[497]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PdusessionResourcesNotAdmittedItemItemExtIes.ProtoReflect.Descriptor instead.
func (*PdusessionResourcesNotAdmittedItemItemExtIes) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{497}
}

func (x *PdusessionResourcesNotAdmittedItemItemExtIes) GetValue() *emptypb.Empty {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:6096
// @inject_tag: aper:"valueExt"
// {PDUSessionResourcesNotAdmitted-Item}
type PdusessionResourcesNotAdmittedItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PduSessionId *PdusessionID `protobuf:"bytes,1,opt,name=pdu_session_id,json=pduSessionId,proto3" json:"pdu_session_id,omitempty"`
	// @inject_tag: aper:"optional,"
	Cause *Cause `protobuf:"bytes,2,opt,name=cause,proto3,oneof" json:"cause,omitempty" aper:"optional,"`
	// @inject_tag: aper:"optional,sizeLB:1,"
	IEExtension []*PdusessionResourcesNotAdmittedItemItemExtIes `protobuf:"bytes,3,rep,name=i_e_extension,json=iE-Extension,proto3" json:"i_e_extension,omitempty" aper:"optional,sizeLB:1,"`
}

func (x *PdusessionResourcesNotAdmittedItem) Reset() {
	*x = PdusessionResourcesNotAdmittedItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[498]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PdusessionResourcesNotAdmittedItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PdusessionResourcesNotAdmittedItem) ProtoMessage() {}

func (x *PdusessionResourcesNotAdmittedItem) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[498]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PdusessionResourcesNotAdmittedItem.ProtoReflect.Descriptor instead.
func (*PdusessionResourcesNotAdmittedItem) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{498}
}

func (x *PdusessionResourcesNotAdmittedItem) GetPduSessionId() *PdusessionID {
	if x != nil {
		return x.PduSessionId
	}
	return nil
}

func (x *PdusessionResourcesNotAdmittedItem) GetCause() *Cause {
	if x != nil {
		return x.Cause
	}
	return nil
}

func (x *PdusessionResourcesNotAdmittedItem) GetIEExtension() []*PdusessionResourcesNotAdmittedItemItemExtIes {
	if x != nil {
		return x.IEExtension
	}
	return nil
}

// sequence from xnap_v1.asn1:6116
// {PDUSessionResourcesToBeSetup-List}
type PdusessionResourcesToBeSetupList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"valueExt,sizeLB:1,sizeUB:256,"
	Value []*PdusessionResourcesToBeSetupItem `protobuf:"bytes,1,rep,name=value,proto3" json:"value,omitempty" aper:"valueExt,sizeLB:1,sizeUB:256,"`
}

func (x *PdusessionResourcesToBeSetupList) Reset() {
	*x = PdusessionResourcesToBeSetupList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[499]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PdusessionResourcesToBeSetupList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PdusessionResourcesToBeSetupList) ProtoMessage() {}

func (x *PdusessionResourcesToBeSetupList) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[499]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PdusessionResourcesToBeSetupList.ProtoReflect.Descriptor instead.
func (*PdusessionResourcesToBeSetupList) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{499}
}

func (x *PdusessionResourcesToBeSetupList) GetValue() []*PdusessionResourcesToBeSetupItem {
	if x != nil {
		return x.Value
	}
	return nil
}

// value set from xnap_v1.asn1:6131
// {PDUSessionResourcesToBeSetup-Item-ExtIEs&Extension}
type PdusessionResourcesToBeSetupItemExtIesExtension struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// value set translated as choice from xnap_v1.asn1:6131
	//
	// Types that are assignable to PdusessionResourcesToBeSetupItemExtIes:
	//	*PdusessionResourcesToBeSetupItemExtIesExtension_IdAdditionalUlNgUTnlatUpfList
	//	*PdusessionResourcesToBeSetupItemExtIesExtension_IdPdusessionCommonNetworkInstance
	//	*PdusessionResourcesToBeSetupItemExtIesExtension_IdRedundantUlNgUTnlatUpf
	//	*PdusessionResourcesToBeSetupItemExtIesExtension_IdAdditionalRedundantUlNgUTnlatUpfList
	//	*PdusessionResourcesToBeSetupItemExtIesExtension_IdRedundantCommonNetworkInstance
	//	*PdusessionResourcesToBeSetupItemExtIesExtension_IdRedundantPdusessionInformation
	PdusessionResourcesToBeSetupItemExtIes isPdusessionResourcesToBeSetupItemExtIesExtension_PdusessionResourcesToBeSetupItemExtIes `protobuf_oneof:"pdusession_resources_to_be_setup_item_ext_ies"`
}

func (x *PdusessionResourcesToBeSetupItemExtIesExtension) Reset() {
	*x = PdusessionResourcesToBeSetupItemExtIesExtension{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[500]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PdusessionResourcesToBeSetupItemExtIesExtension) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PdusessionResourcesToBeSetupItemExtIesExtension) ProtoMessage() {}

func (x *PdusessionResourcesToBeSetupItemExtIesExtension) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[500]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PdusessionResourcesToBeSetupItemExtIesExtension.ProtoReflect.Descriptor instead.
func (*PdusessionResourcesToBeSetupItemExtIesExtension) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{500}
}

func (m *PdusessionResourcesToBeSetupItemExtIesExtension) GetPdusessionResourcesToBeSetupItemExtIes() isPdusessionResourcesToBeSetupItemExtIesExtension_PdusessionResourcesToBeSetupItemExtIes {
	if m != nil {
		return m.PdusessionResourcesToBeSetupItemExtIes
	}
	return nil
}

func (x *PdusessionResourcesToBeSetupItemExtIesExtension) GetIdAdditionalUlNgUTnlatUpfList() *AdditionalULNGUTNlatUpfList {
	if x, ok := x.GetPdusessionResourcesToBeSetupItemExtIes().(*PdusessionResourcesToBeSetupItemExtIesExtension_IdAdditionalUlNgUTnlatUpfList); ok {
		return x.IdAdditionalUlNgUTnlatUpfList
	}
	return nil
}

func (x *PdusessionResourcesToBeSetupItemExtIesExtension) GetIdPdusessionCommonNetworkInstance() *PdusessionCommonNetworkInstance {
	if x, ok := x.GetPdusessionResourcesToBeSetupItemExtIes().(*PdusessionResourcesToBeSetupItemExtIesExtension_IdPdusessionCommonNetworkInstance); ok {
		return x.IdPdusessionCommonNetworkInstance
	}
	return nil
}

func (x *PdusessionResourcesToBeSetupItemExtIesExtension) GetIdRedundantUlNgUTnlatUpf() *UptransportLayerInformation {
	if x, ok := x.GetPdusessionResourcesToBeSetupItemExtIes().(*PdusessionResourcesToBeSetupItemExtIesExtension_IdRedundantUlNgUTnlatUpf); ok {
		return x.IdRedundantUlNgUTnlatUpf
	}
	return nil
}

func (x *PdusessionResourcesToBeSetupItemExtIesExtension) GetIdAdditionalRedundantUlNgUTnlatUpfList() *AdditionalULNGUTNlatUpfList {
	if x, ok := x.GetPdusessionResourcesToBeSetupItemExtIes().(*PdusessionResourcesToBeSetupItemExtIesExtension_IdAdditionalRedundantUlNgUTnlatUpfList); ok {
		return x.IdAdditionalRedundantUlNgUTnlatUpfList
	}
	return nil
}

func (x *PdusessionResourcesToBeSetupItemExtIesExtension) GetIdRedundantCommonNetworkInstance() *PdusessionCommonNetworkInstance {
	if x, ok := x.GetPdusessionResourcesToBeSetupItemExtIes().(*PdusessionResourcesToBeSetupItemExtIesExtension_IdRedundantCommonNetworkInstance); ok {
		return x.IdRedundantCommonNetworkInstance
	}
	return nil
}

func (x *PdusessionResourcesToBeSetupItemExtIesExtension) GetIdRedundantPdusessionInformation() *RedundantPdusessionInformation {
	if x, ok := x.GetPdusessionResourcesToBeSetupItemExtIes().(*PdusessionResourcesToBeSetupItemExtIesExtension_IdRedundantPdusessionInformation); ok {
		return x.IdRedundantPdusessionInformation
	}
	return nil
}

type isPdusessionResourcesToBeSetupItemExtIesExtension_PdusessionResourcesToBeSetupItemExtIes interface {
	isPdusessionResourcesToBeSetupItemExtIesExtension_PdusessionResourcesToBeSetupItemExtIes()
}

type PdusessionResourcesToBeSetupItemExtIesExtension_IdAdditionalUlNgUTnlatUpfList struct {
	// @inject_tag: aper:"choiceIdx:1,"
	IdAdditionalUlNgUTnlatUpfList *AdditionalULNGUTNlatUpfList `protobuf:"bytes,1,opt,name=id_additional_ul_ng_u_tnlat_upf_list,json=id-Additional-UL-NG-U-TNLatUPF-List,proto3,oneof" aper:"choiceIdx:1,"`
}

type PdusessionResourcesToBeSetupItemExtIesExtension_IdPdusessionCommonNetworkInstance struct {
	// @inject_tag: aper:"choiceIdx:2,"
	IdPdusessionCommonNetworkInstance *PdusessionCommonNetworkInstance `protobuf:"bytes,2,opt,name=id_pdusession_common_network_instance,json=id-PDUSessionCommonNetworkInstance,proto3,oneof" aper:"choiceIdx:2,"`
}

type PdusessionResourcesToBeSetupItemExtIesExtension_IdRedundantUlNgUTnlatUpf struct {
	// @inject_tag: aper:"choiceIdx:3,"
	IdRedundantUlNgUTnlatUpf *UptransportLayerInformation `protobuf:"bytes,3,opt,name=id_redundant_ul_ng_u_tnlat_upf,json=id-Redundant-UL-NG-U-TNLatUPF,proto3,oneof" aper:"choiceIdx:3,"`
}

type PdusessionResourcesToBeSetupItemExtIesExtension_IdAdditionalRedundantUlNgUTnlatUpfList struct {
	// @inject_tag: aper:"choiceIdx:4,"
	IdAdditionalRedundantUlNgUTnlatUpfList *AdditionalULNGUTNlatUpfList `protobuf:"bytes,4,opt,name=id_additional_redundant_ul_ng_u_tnlat_upf_list,json=id-Additional-Redundant-UL-NG-U-TNLatUPF-List,proto3,oneof" aper:"choiceIdx:4,"`
}

type PdusessionResourcesToBeSetupItemExtIesExtension_IdRedundantCommonNetworkInstance struct {
	// @inject_tag: aper:"choiceIdx:5,"
	IdRedundantCommonNetworkInstance *PdusessionCommonNetworkInstance `protobuf:"bytes,5,opt,name=id_redundant_common_network_instance,json=id-RedundantCommonNetworkInstance,proto3,oneof" aper:"choiceIdx:5,"`
}

type PdusessionResourcesToBeSetupItemExtIesExtension_IdRedundantPdusessionInformation struct {
	// @inject_tag: aper:"choiceIdx:6,valueExt,"
	IdRedundantPdusessionInformation *RedundantPdusessionInformation `protobuf:"bytes,6,opt,name=id_redundant_pdusession_information,json=id-RedundantPDUSessionInformation,proto3,oneof" aper:"choiceIdx:6,valueExt,"`
}

func (*PdusessionResourcesToBeSetupItemExtIesExtension_IdAdditionalUlNgUTnlatUpfList) isPdusessionResourcesToBeSetupItemExtIesExtension_PdusessionResourcesToBeSetupItemExtIes() {
}

func (*PdusessionResourcesToBeSetupItemExtIesExtension_IdPdusessionCommonNetworkInstance) isPdusessionResourcesToBeSetupItemExtIesExtension_PdusessionResourcesToBeSetupItemExtIes() {
}

func (*PdusessionResourcesToBeSetupItemExtIesExtension_IdRedundantUlNgUTnlatUpf) isPdusessionResourcesToBeSetupItemExtIesExtension_PdusessionResourcesToBeSetupItemExtIes() {
}

func (*PdusessionResourcesToBeSetupItemExtIesExtension_IdAdditionalRedundantUlNgUTnlatUpfList) isPdusessionResourcesToBeSetupItemExtIesExtension_PdusessionResourcesToBeSetupItemExtIes() {
}

func (*PdusessionResourcesToBeSetupItemExtIesExtension_IdRedundantCommonNetworkInstance) isPdusessionResourcesToBeSetupItemExtIesExtension_PdusessionResourcesToBeSetupItemExtIes() {
}

func (*PdusessionResourcesToBeSetupItemExtIesExtension_IdRedundantPdusessionInformation) isPdusessionResourcesToBeSetupItemExtIesExtension_PdusessionResourcesToBeSetupItemExtIes() {
}

// concrete instance(s) of class XNAP-PROTOCOL-EXTENSION from xnap_v1.asn1:6131
// @inject_tag: aper:"valueExt"
// {PDUSessionResourcesToBeSetup-Item-ExtIEs}
type PdusessionResourcesToBeSetupItemExtIes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"unique,"
	Id *xnap_commondatatypes.ProtocolIeID `protobuf:"bytes,1,opt,name=id,json=&id,proto3" json:"id,omitempty" aper:"unique,"`
	// @inject_tag: aper:"valueLB:0,valueUB:2,"
	Criticality xnap_commondatatypes.Criticality `protobuf:"varint,2,opt,name=criticality,json=&criticality,proto3,enum=xnap.v1.Criticality" json:"criticality,omitempty" aper:"valueLB:0,valueUB:2,"`
	// @inject_tag: aper:"canonicalOrder,"
	Extension *PdusessionResourcesToBeSetupItemExtIesExtension `protobuf:"bytes,3,opt,name=extension,json=&Extension,proto3" json:"extension,omitempty" aper:"canonicalOrder,"`
}

func (x *PdusessionResourcesToBeSetupItemExtIes) Reset() {
	*x = PdusessionResourcesToBeSetupItemExtIes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[501]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PdusessionResourcesToBeSetupItemExtIes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PdusessionResourcesToBeSetupItemExtIes) ProtoMessage() {}

func (x *PdusessionResourcesToBeSetupItemExtIes) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[501]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PdusessionResourcesToBeSetupItemExtIes.ProtoReflect.Descriptor instead.
func (*PdusessionResourcesToBeSetupItemExtIes) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{501}
}

func (x *PdusessionResourcesToBeSetupItemExtIes) GetId() *xnap_commondatatypes.ProtocolIeID {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *PdusessionResourcesToBeSetupItemExtIes) GetCriticality() xnap_commondatatypes.Criticality {
	if x != nil {
		return x.Criticality
	}
	return xnap_commondatatypes.Criticality(0)
}

func (x *PdusessionResourcesToBeSetupItemExtIes) GetExtension() *PdusessionResourcesToBeSetupItemExtIesExtension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// sequence from xnap_v1.asn1:6117
// @inject_tag: aper:"valueExt"
// {PDUSessionResourcesToBeSetup-Item}
type PdusessionResourcesToBeSetupItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PduSessionId *PdusessionID `protobuf:"bytes,1,opt,name=pdu_session_id,json=pduSessionId,proto3" json:"pdu_session_id,omitempty"`
	// @inject_tag: aper:"valueExt,"
	SNssai *SNSsai `protobuf:"bytes,2,opt,name=s_nssai,json=s-NSSAI,proto3" json:"s_nssai,omitempty" aper:"valueExt,"`
	// @inject_tag: aper:"optional,valueExt,"
	PduSessionAmbr *PdusessionAggregateMaximumBitRate `protobuf:"bytes,3,opt,name=pdu_session_ambr,json=pduSessionAMBR,proto3,oneof" json:"pdu_session_ambr,omitempty" aper:"optional,valueExt,"`
	ULNgUTnlatUpf  *UptransportLayerInformation       `protobuf:"bytes,4,opt,name=u_l_ng_u_tnlat_upf,json=uL-NG-U-TNLatUPF,proto3" json:"u_l_ng_u_tnlat_upf,omitempty"`
	// @inject_tag: aper:"optional,"
	SourceDlNgUTnlInformation *UptransportLayerInformation `protobuf:"bytes,5,opt,name=source_dl_ng_u_tnl_information,json=source-DL-NG-U-TNL-Information,proto3,oneof" json:"source_dl_ng_u_tnl_information,omitempty" aper:"optional,"`
	// @inject_tag: aper:"optional,valueExt,"
	SecurityIndication *SecurityIndication `protobuf:"bytes,6,opt,name=security_indication,json=securityIndication,proto3,oneof" json:"security_indication,omitempty" aper:"optional,valueExt,"`
	// @inject_tag: aper:"valueExt,valueLB:0,valueUB:4,"
	PduSessionType PdusessionType `protobuf:"varint,7,opt,name=pdu_session_type,json=pduSessionType,proto3,enum=xnap.v1.PdusessionType" json:"pdu_session_type,omitempty" aper:"valueExt,valueLB:0,valueUB:4,"`
	// @inject_tag: aper:"optional,"
	PduSessionNetworkInstance *PdusessionNetworkInstance `protobuf:"bytes,8,opt,name=pdu_session_network_instance,json=pduSessionNetworkInstance,proto3,oneof" json:"pdu_session_network_instance,omitempty" aper:"optional,"`
	QosFlowsToBeSetupList     *QoSflowsToBeSetupList     `protobuf:"bytes,9,opt,name=qos_flows_to_be_setup_list,json=qosFlowsToBeSetup-List,proto3" json:"qos_flows_to_be_setup_list,omitempty"`
	// @inject_tag: aper:"optional,valueExt,"
	DataforwardinginfofromSource *DataforwardingandOffloadingInfofromSource `protobuf:"bytes,10,opt,name=dataforwardinginfofrom_source,json=dataforwardinginfofromSource,proto3,oneof" json:"dataforwardinginfofrom_source,omitempty" aper:"optional,valueExt,"`
	// @inject_tag: aper:"optional,sizeLB:1,"
	IEExtensions []*PdusessionResourcesToBeSetupItemExtIes `protobuf:"bytes,11,rep,name=i_e_extensions,json=iE-Extensions,proto3" json:"i_e_extensions,omitempty" aper:"optional,sizeLB:1,"`
}

func (x *PdusessionResourcesToBeSetupItem) Reset() {
	*x = PdusessionResourcesToBeSetupItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[502]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PdusessionResourcesToBeSetupItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PdusessionResourcesToBeSetupItem) ProtoMessage() {}

func (x *PdusessionResourcesToBeSetupItem) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[502]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PdusessionResourcesToBeSetupItem.ProtoReflect.Descriptor instead.
func (*PdusessionResourcesToBeSetupItem) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{502}
}

func (x *PdusessionResourcesToBeSetupItem) GetPduSessionId() *PdusessionID {
	if x != nil {
		return x.PduSessionId
	}
	return nil
}

func (x *PdusessionResourcesToBeSetupItem) GetSNssai() *SNSsai {
	if x != nil {
		return x.SNssai
	}
	return nil
}

func (x *PdusessionResourcesToBeSetupItem) GetPduSessionAmbr() *PdusessionAggregateMaximumBitRate {
	if x != nil {
		return x.PduSessionAmbr
	}
	return nil
}

func (x *PdusessionResourcesToBeSetupItem) GetULNgUTnlatUpf() *UptransportLayerInformation {
	if x != nil {
		return x.ULNgUTnlatUpf
	}
	return nil
}

func (x *PdusessionResourcesToBeSetupItem) GetSourceDlNgUTnlInformation() *UptransportLayerInformation {
	if x != nil {
		return x.SourceDlNgUTnlInformation
	}
	return nil
}

func (x *PdusessionResourcesToBeSetupItem) GetSecurityIndication() *SecurityIndication {
	if x != nil {
		return x.SecurityIndication
	}
	return nil
}

func (x *PdusessionResourcesToBeSetupItem) GetPduSessionType() PdusessionType {
	if x != nil {
		return x.PduSessionType
	}
	return PdusessionType_PDUSESSION_TYPE_IPV4
}

func (x *PdusessionResourcesToBeSetupItem) GetPduSessionNetworkInstance() *PdusessionNetworkInstance {
	if x != nil {
		return x.PduSessionNetworkInstance
	}
	return nil
}

func (x *PdusessionResourcesToBeSetupItem) GetQosFlowsToBeSetupList() *QoSflowsToBeSetupList {
	if x != nil {
		return x.QosFlowsToBeSetupList
	}
	return nil
}

func (x *PdusessionResourcesToBeSetupItem) GetDataforwardinginfofromSource() *DataforwardingandOffloadingInfofromSource {
	if x != nil {
		return x.DataforwardinginfofromSource
	}
	return nil
}

func (x *PdusessionResourcesToBeSetupItem) GetIEExtensions() []*PdusessionResourcesToBeSetupItemExtIes {
	if x != nil {
		return x.IEExtensions
	}
	return nil
}

// value set from xnap_v1.asn1:6160
// {PDUSessionResourceSetupInfo-SNterminated-ExtIEs&Extension}
type PdusessionResourceSetupInfoSNterminatedExtIesExtension struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// value set translated as choice from xnap_v1.asn1:6160
	//
	// Types that are assignable to PdusessionResourceSetupInfoSnterminatedExtIes:
	//	*PdusessionResourceSetupInfoSNterminatedExtIesExtension_IdSecurityResult
	//	*PdusessionResourceSetupInfoSNterminatedExtIesExtension_IdPdusessionCommonNetworkInstance
	//	*PdusessionResourceSetupInfoSNterminatedExtIesExtension_IdDefaultDrbAllowed
	//	*PdusessionResourceSetupInfoSNterminatedExtIesExtension_IdSplitSessionIndicator
	//	*PdusessionResourceSetupInfoSNterminatedExtIesExtension_IdNonGbrresourcesOffered
	//	*PdusessionResourceSetupInfoSNterminatedExtIesExtension_IdRedundantUlNgUTnlatUpf
	//	*PdusessionResourceSetupInfoSNterminatedExtIesExtension_IdRedundantCommonNetworkInstance
	//	*PdusessionResourceSetupInfoSNterminatedExtIesExtension_IdRedundantPdusessionInformation
	PdusessionResourceSetupInfoSnterminatedExtIes isPdusessionResourceSetupInfoSNterminatedExtIesExtension_PdusessionResourceSetupInfoSnterminatedExtIes `protobuf_oneof:"pdusession_resource_setup_info_snterminated_ext_ies"`
}

func (x *PdusessionResourceSetupInfoSNterminatedExtIesExtension) Reset() {
	*x = PdusessionResourceSetupInfoSNterminatedExtIesExtension{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[503]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PdusessionResourceSetupInfoSNterminatedExtIesExtension) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PdusessionResourceSetupInfoSNterminatedExtIesExtension) ProtoMessage() {}

func (x *PdusessionResourceSetupInfoSNterminatedExtIesExtension) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[503]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PdusessionResourceSetupInfoSNterminatedExtIesExtension.ProtoReflect.Descriptor instead.
func (*PdusessionResourceSetupInfoSNterminatedExtIesExtension) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{503}
}

func (m *PdusessionResourceSetupInfoSNterminatedExtIesExtension) GetPdusessionResourceSetupInfoSnterminatedExtIes() isPdusessionResourceSetupInfoSNterminatedExtIesExtension_PdusessionResourceSetupInfoSnterminatedExtIes {
	if m != nil {
		return m.PdusessionResourceSetupInfoSnterminatedExtIes
	}
	return nil
}

func (x *PdusessionResourceSetupInfoSNterminatedExtIesExtension) GetIdSecurityResult() *SecurityResult {
	if x, ok := x.GetPdusessionResourceSetupInfoSnterminatedExtIes().(*PdusessionResourceSetupInfoSNterminatedExtIesExtension_IdSecurityResult); ok {
		return x.IdSecurityResult
	}
	return nil
}

func (x *PdusessionResourceSetupInfoSNterminatedExtIesExtension) GetIdPdusessionCommonNetworkInstance() *PdusessionCommonNetworkInstance {
	if x, ok := x.GetPdusessionResourceSetupInfoSnterminatedExtIes().(*PdusessionResourceSetupInfoSNterminatedExtIesExtension_IdPdusessionCommonNetworkInstance); ok {
		return x.IdPdusessionCommonNetworkInstance
	}
	return nil
}

func (x *PdusessionResourceSetupInfoSNterminatedExtIesExtension) GetIdDefaultDrbAllowed() DefaultDrbAllowed {
	if x, ok := x.GetPdusessionResourceSetupInfoSnterminatedExtIes().(*PdusessionResourceSetupInfoSNterminatedExtIesExtension_IdDefaultDrbAllowed); ok {
		return x.IdDefaultDrbAllowed
	}
	return DefaultDrbAllowed_DEFAULT_DRB_ALLOWED_TRUE
}

func (x *PdusessionResourceSetupInfoSNterminatedExtIesExtension) GetIdSplitSessionIndicator() SplitSessionIndicator {
	if x, ok := x.GetPdusessionResourceSetupInfoSnterminatedExtIes().(*PdusessionResourceSetupInfoSNterminatedExtIesExtension_IdSplitSessionIndicator); ok {
		return x.IdSplitSessionIndicator
	}
	return SplitSessionIndicator_SPLIT_SESSION_INDICATOR_SPLIT
}

func (x *PdusessionResourceSetupInfoSNterminatedExtIesExtension) GetIdNonGbrresourcesOffered() NonGbrresourcesOffered {
	if x, ok := x.GetPdusessionResourceSetupInfoSnterminatedExtIes().(*PdusessionResourceSetupInfoSNterminatedExtIesExtension_IdNonGbrresourcesOffered); ok {
		return x.IdNonGbrresourcesOffered
	}
	return NonGbrresourcesOffered_NON_GBRRESOURCES_OFFERED_TRUE
}

func (x *PdusessionResourceSetupInfoSNterminatedExtIesExtension) GetIdRedundantUlNgUTnlatUpf() *UptransportLayerInformation {
	if x, ok := x.GetPdusessionResourceSetupInfoSnterminatedExtIes().(*PdusessionResourceSetupInfoSNterminatedExtIesExtension_IdRedundantUlNgUTnlatUpf); ok {
		return x.IdRedundantUlNgUTnlatUpf
	}
	return nil
}

func (x *PdusessionResourceSetupInfoSNterminatedExtIesExtension) GetIdRedundantCommonNetworkInstance() *PdusessionCommonNetworkInstance {
	if x, ok := x.GetPdusessionResourceSetupInfoSnterminatedExtIes().(*PdusessionResourceSetupInfoSNterminatedExtIesExtension_IdRedundantCommonNetworkInstance); ok {
		return x.IdRedundantCommonNetworkInstance
	}
	return nil
}

func (x *PdusessionResourceSetupInfoSNterminatedExtIesExtension) GetIdRedundantPdusessionInformation() *RedundantPdusessionInformation {
	if x, ok := x.GetPdusessionResourceSetupInfoSnterminatedExtIes().(*PdusessionResourceSetupInfoSNterminatedExtIesExtension_IdRedundantPdusessionInformation); ok {
		return x.IdRedundantPdusessionInformation
	}
	return nil
}

type isPdusessionResourceSetupInfoSNterminatedExtIesExtension_PdusessionResourceSetupInfoSnterminatedExtIes interface {
	isPdusessionResourceSetupInfoSNterminatedExtIesExtension_PdusessionResourceSetupInfoSnterminatedExtIes()
}

type PdusessionResourceSetupInfoSNterminatedExtIesExtension_IdSecurityResult struct {
	// @inject_tag: aper:"choiceIdx:1,valueExt,"
	IdSecurityResult *SecurityResult `protobuf:"bytes,1,opt,name=id_security_result,json=id-SecurityResult,proto3,oneof" aper:"choiceIdx:1,valueExt,"`
}

type PdusessionResourceSetupInfoSNterminatedExtIesExtension_IdPdusessionCommonNetworkInstance struct {
	// @inject_tag: aper:"choiceIdx:2,"
	IdPdusessionCommonNetworkInstance *PdusessionCommonNetworkInstance `protobuf:"bytes,2,opt,name=id_pdusession_common_network_instance,json=id-PDUSessionCommonNetworkInstance,proto3,oneof" aper:"choiceIdx:2,"`
}

type PdusessionResourceSetupInfoSNterminatedExtIesExtension_IdDefaultDrbAllowed struct {
	// @inject_tag: aper:"choiceIdx:3,valueExt,valueLB:0,valueUB:1,"
	IdDefaultDrbAllowed DefaultDrbAllowed `protobuf:"varint,3,opt,name=id_default_drb_allowed,json=id-DefaultDRB-Allowed,proto3,enum=xnap.v1.DefaultDrbAllowed,oneof" aper:"choiceIdx:3,valueExt,valueLB:0,valueUB:1,"`
}

type PdusessionResourceSetupInfoSNterminatedExtIesExtension_IdSplitSessionIndicator struct {
	// @inject_tag: aper:"choiceIdx:4,valueExt,valueLB:0,valueUB:0,"
	IdSplitSessionIndicator SplitSessionIndicator `protobuf:"varint,4,opt,name=id_split_session_indicator,json=id-SplitSessionIndicator,proto3,enum=xnap.v1.SplitSessionIndicator,oneof" aper:"choiceIdx:4,valueExt,valueLB:0,valueUB:0,"`
}

type PdusessionResourceSetupInfoSNterminatedExtIesExtension_IdNonGbrresourcesOffered struct {
	// @inject_tag: aper:"choiceIdx:5,valueExt,valueLB:0,valueUB:0,"
	IdNonGbrresourcesOffered NonGbrresourcesOffered `protobuf:"varint,5,opt,name=id_non_gbrresources_offered,json=id-NonGBRResources-Offered,proto3,enum=xnap.v1.NonGbrresourcesOffered,oneof" aper:"choiceIdx:5,valueExt,valueLB:0,valueUB:0,"`
}

type PdusessionResourceSetupInfoSNterminatedExtIesExtension_IdRedundantUlNgUTnlatUpf struct {
	// @inject_tag: aper:"choiceIdx:6,"
	IdRedundantUlNgUTnlatUpf *UptransportLayerInformation `protobuf:"bytes,6,opt,name=id_redundant_ul_ng_u_tnlat_upf,json=id-Redundant-UL-NG-U-TNLatUPF,proto3,oneof" aper:"choiceIdx:6,"`
}

type PdusessionResourceSetupInfoSNterminatedExtIesExtension_IdRedundantCommonNetworkInstance struct {
	// @inject_tag: aper:"choiceIdx:7,"
	IdRedundantCommonNetworkInstance *PdusessionCommonNetworkInstance `protobuf:"bytes,7,opt,name=id_redundant_common_network_instance,json=id-RedundantCommonNetworkInstance,proto3,oneof" aper:"choiceIdx:7,"`
}

type PdusessionResourceSetupInfoSNterminatedExtIesExtension_IdRedundantPdusessionInformation struct {
	// @inject_tag: aper:"choiceIdx:8,valueExt,"
	IdRedundantPdusessionInformation *RedundantPdusessionInformation `protobuf:"bytes,8,opt,name=id_redundant_pdusession_information,json=id-RedundantPDUSessionInformation,proto3,oneof" aper:"choiceIdx:8,valueExt,"`
}

func (*PdusessionResourceSetupInfoSNterminatedExtIesExtension_IdSecurityResult) isPdusessionResourceSetupInfoSNterminatedExtIesExtension_PdusessionResourceSetupInfoSnterminatedExtIes() {
}

func (*PdusessionResourceSetupInfoSNterminatedExtIesExtension_IdPdusessionCommonNetworkInstance) isPdusessionResourceSetupInfoSNterminatedExtIesExtension_PdusessionResourceSetupInfoSnterminatedExtIes() {
}

func (*PdusessionResourceSetupInfoSNterminatedExtIesExtension_IdDefaultDrbAllowed) isPdusessionResourceSetupInfoSNterminatedExtIesExtension_PdusessionResourceSetupInfoSnterminatedExtIes() {
}

func (*PdusessionResourceSetupInfoSNterminatedExtIesExtension_IdSplitSessionIndicator) isPdusessionResourceSetupInfoSNterminatedExtIesExtension_PdusessionResourceSetupInfoSnterminatedExtIes() {
}

func (*PdusessionResourceSetupInfoSNterminatedExtIesExtension_IdNonGbrresourcesOffered) isPdusessionResourceSetupInfoSNterminatedExtIesExtension_PdusessionResourceSetupInfoSnterminatedExtIes() {
}

func (*PdusessionResourceSetupInfoSNterminatedExtIesExtension_IdRedundantUlNgUTnlatUpf) isPdusessionResourceSetupInfoSNterminatedExtIesExtension_PdusessionResourceSetupInfoSnterminatedExtIes() {
}

func (*PdusessionResourceSetupInfoSNterminatedExtIesExtension_IdRedundantCommonNetworkInstance) isPdusessionResourceSetupInfoSNterminatedExtIesExtension_PdusessionResourceSetupInfoSnterminatedExtIes() {
}

func (*PdusessionResourceSetupInfoSNterminatedExtIesExtension_IdRedundantPdusessionInformation) isPdusessionResourceSetupInfoSNterminatedExtIesExtension_PdusessionResourceSetupInfoSnterminatedExtIes() {
}

// concrete instance(s) of class XNAP-PROTOCOL-EXTENSION from xnap_v1.asn1:6160
// @inject_tag: aper:"valueExt"
// {PDUSessionResourceSetupInfo-SNterminated-ExtIEs}
type PdusessionResourceSetupInfoSNterminatedExtIes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"unique,"
	Id *xnap_commondatatypes.ProtocolIeID `protobuf:"bytes,1,opt,name=id,json=&id,proto3" json:"id,omitempty" aper:"unique,"`
	// @inject_tag: aper:"valueLB:0,valueUB:2,"
	Criticality xnap_commondatatypes.Criticality `protobuf:"varint,2,opt,name=criticality,json=&criticality,proto3,enum=xnap.v1.Criticality" json:"criticality,omitempty" aper:"valueLB:0,valueUB:2,"`
	// @inject_tag: aper:"canonicalOrder,"
	Extension *PdusessionResourceSetupInfoSNterminatedExtIesExtension `protobuf:"bytes,3,opt,name=extension,json=&Extension,proto3" json:"extension,omitempty" aper:"canonicalOrder,"`
}

func (x *PdusessionResourceSetupInfoSNterminatedExtIes) Reset() {
	*x = PdusessionResourceSetupInfoSNterminatedExtIes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[504]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PdusessionResourceSetupInfoSNterminatedExtIes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PdusessionResourceSetupInfoSNterminatedExtIes) ProtoMessage() {}

func (x *PdusessionResourceSetupInfoSNterminatedExtIes) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[504]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PdusessionResourceSetupInfoSNterminatedExtIes.ProtoReflect.Descriptor instead.
func (*PdusessionResourceSetupInfoSNterminatedExtIes) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{504}
}

func (x *PdusessionResourceSetupInfoSNterminatedExtIes) GetId() *xnap_commondatatypes.ProtocolIeID {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *PdusessionResourceSetupInfoSNterminatedExtIes) GetCriticality() xnap_commondatatypes.Criticality {
	if x != nil {
		return x.Criticality
	}
	return xnap_commondatatypes.Criticality(0)
}

func (x *PdusessionResourceSetupInfoSNterminatedExtIes) GetExtension() *PdusessionResourceSetupInfoSNterminatedExtIesExtension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// sequence from xnap_v1.asn1:6150
// @inject_tag: aper:"valueExt"
// {PDUSessionResourceSetupInfo-SNterminated}
type PdusessionResourceSetupInfoSNterminated struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ULNgUTnlatUpf *UptransportLayerInformation `protobuf:"bytes,1,opt,name=u_l_ng_u_tnlat_upf,json=uL-NG-U-TNLatUPF,proto3" json:"u_l_ng_u_tnlat_upf,omitempty"`
	// @inject_tag: aper:"valueExt,valueLB:0,valueUB:4,"
	PduSessionType PdusessionType `protobuf:"varint,2,opt,name=pdu_session_type,json=pduSessionType,proto3,enum=xnap.v1.PdusessionType" json:"pdu_session_type,omitempty" aper:"valueExt,valueLB:0,valueUB:4,"`
	// @inject_tag: aper:"optional,"
	PduSessionNetworkInstance *PdusessionNetworkInstance              `protobuf:"bytes,3,opt,name=pdu_session_network_instance,json=pduSessionNetworkInstance,proto3,oneof" json:"pdu_session_network_instance,omitempty" aper:"optional,"`
	QosFlowsToBeSetupList     *QoSflowsToBeSetupListSetupSNterminated `protobuf:"bytes,4,opt,name=qos_flows_to_be_setup_list,json=qosFlowsToBeSetup-List,proto3" json:"qos_flows_to_be_setup_list,omitempty"`
	// @inject_tag: aper:"optional,valueExt,"
	DataforwardinginfofromSource *DataforwardingandOffloadingInfofromSource `protobuf:"bytes,5,opt,name=dataforwardinginfofrom_source,json=dataforwardinginfofromSource,proto3,oneof" json:"dataforwardinginfofrom_source,omitempty" aper:"optional,valueExt,"`
	// @inject_tag: aper:"optional,valueExt,"
	SecurityIndication *SecurityIndication `protobuf:"bytes,6,opt,name=security_indication,json=securityIndication,proto3,oneof" json:"security_indication,omitempty" aper:"optional,valueExt,"`
	// @inject_tag: aper:"optional,sizeLB:1,"
	IEExtensions []*PdusessionResourceSetupInfoSNterminatedExtIes `protobuf:"bytes,7,rep,name=i_e_extensions,json=iE-Extensions,proto3" json:"i_e_extensions,omitempty" aper:"optional,sizeLB:1,"`
}

func (x *PdusessionResourceSetupInfoSNterminated) Reset() {
	*x = PdusessionResourceSetupInfoSNterminated{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[505]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PdusessionResourceSetupInfoSNterminated) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PdusessionResourceSetupInfoSNterminated) ProtoMessage() {}

func (x *PdusessionResourceSetupInfoSNterminated) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[505]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PdusessionResourceSetupInfoSNterminated.ProtoReflect.Descriptor instead.
func (*PdusessionResourceSetupInfoSNterminated) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{505}
}

func (x *PdusessionResourceSetupInfoSNterminated) GetULNgUTnlatUpf() *UptransportLayerInformation {
	if x != nil {
		return x.ULNgUTnlatUpf
	}
	return nil
}

func (x *PdusessionResourceSetupInfoSNterminated) GetPduSessionType() PdusessionType {
	if x != nil {
		return x.PduSessionType
	}
	return PdusessionType_PDUSESSION_TYPE_IPV4
}

func (x *PdusessionResourceSetupInfoSNterminated) GetPduSessionNetworkInstance() *PdusessionNetworkInstance {
	if x != nil {
		return x.PduSessionNetworkInstance
	}
	return nil
}

func (x *PdusessionResourceSetupInfoSNterminated) GetQosFlowsToBeSetupList() *QoSflowsToBeSetupListSetupSNterminated {
	if x != nil {
		return x.QosFlowsToBeSetupList
	}
	return nil
}

func (x *PdusessionResourceSetupInfoSNterminated) GetDataforwardinginfofromSource() *DataforwardingandOffloadingInfofromSource {
	if x != nil {
		return x.DataforwardinginfofromSource
	}
	return nil
}

func (x *PdusessionResourceSetupInfoSNterminated) GetSecurityIndication() *SecurityIndication {
	if x != nil {
		return x.SecurityIndication
	}
	return nil
}

func (x *PdusessionResourceSetupInfoSNterminated) GetIEExtensions() []*PdusessionResourceSetupInfoSNterminatedExtIes {
	if x != nil {
		return x.IEExtensions
	}
	return nil
}

// sequence from xnap_v1.asn1:6174
// {QoSFlowsToBeSetup-List-Setup-SNterminated}
type QoSflowsToBeSetupListSetupSNterminated struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"valueExt,sizeLB:1,sizeUB:64,"
	Value []*QoSflowsToBeSetupListSetupSNterminatedItem `protobuf:"bytes,1,rep,name=value,proto3" json:"value,omitempty" aper:"valueExt,sizeLB:1,sizeUB:64,"`
}

func (x *QoSflowsToBeSetupListSetupSNterminated) Reset() {
	*x = QoSflowsToBeSetupListSetupSNterminated{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[506]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QoSflowsToBeSetupListSetupSNterminated) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QoSflowsToBeSetupListSetupSNterminated) ProtoMessage() {}

func (x *QoSflowsToBeSetupListSetupSNterminated) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[506]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QoSflowsToBeSetupListSetupSNterminated.ProtoReflect.Descriptor instead.
func (*QoSflowsToBeSetupListSetupSNterminated) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{506}
}

func (x *QoSflowsToBeSetupListSetupSNterminated) GetValue() []*QoSflowsToBeSetupListSetupSNterminatedItem {
	if x != nil {
		return x.Value
	}
	return nil
}

// value set from xnap_v1.asn1:6182
// {QoSFlowsToBeSetup-List-Setup-SNterminated-Item-ExtIEs&Extension}
type QoSflowsToBeSetupListSetupSNterminatedItemExtIesExtension struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// value set translated as choice from xnap_v1.asn1:6182
	//
	// Types that are assignable to QoSflowsToBeSetupListSetupSnterminatedItemExtIes:
	//	*QoSflowsToBeSetupListSetupSNterminatedItemExtIesExtension_IdTsctrafficCharacteristics
	//	*QoSflowsToBeSetupListSetupSNterminatedItemExtIesExtension_IdRedundantQoSflowIndicator
	QoSflowsToBeSetupListSetupSnterminatedItemExtIes isQoSflowsToBeSetupListSetupSNterminatedItemExtIesExtension_QoSflowsToBeSetupListSetupSnterminatedItemExtIes `protobuf_oneof:"qo_sflows_to_be_setup_list_setup_snterminated_item_ext_ies"`
}

func (x *QoSflowsToBeSetupListSetupSNterminatedItemExtIesExtension) Reset() {
	*x = QoSflowsToBeSetupListSetupSNterminatedItemExtIesExtension{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[507]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QoSflowsToBeSetupListSetupSNterminatedItemExtIesExtension) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QoSflowsToBeSetupListSetupSNterminatedItemExtIesExtension) ProtoMessage() {}

func (x *QoSflowsToBeSetupListSetupSNterminatedItemExtIesExtension) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[507]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QoSflowsToBeSetupListSetupSNterminatedItemExtIesExtension.ProtoReflect.Descriptor instead.
func (*QoSflowsToBeSetupListSetupSNterminatedItemExtIesExtension) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{507}
}

func (m *QoSflowsToBeSetupListSetupSNterminatedItemExtIesExtension) GetQoSflowsToBeSetupListSetupSnterminatedItemExtIes() isQoSflowsToBeSetupListSetupSNterminatedItemExtIesExtension_QoSflowsToBeSetupListSetupSnterminatedItemExtIes {
	if m != nil {
		return m.QoSflowsToBeSetupListSetupSnterminatedItemExtIes
	}
	return nil
}

func (x *QoSflowsToBeSetupListSetupSNterminatedItemExtIesExtension) GetIdTsctrafficCharacteristics() *TsctrafficCharacteristics {
	if x, ok := x.GetQoSflowsToBeSetupListSetupSnterminatedItemExtIes().(*QoSflowsToBeSetupListSetupSNterminatedItemExtIesExtension_IdTsctrafficCharacteristics); ok {
		return x.IdTsctrafficCharacteristics
	}
	return nil
}

func (x *QoSflowsToBeSetupListSetupSNterminatedItemExtIesExtension) GetIdRedundantQoSflowIndicator() RedundantQoSflowIndicator {
	if x, ok := x.GetQoSflowsToBeSetupListSetupSnterminatedItemExtIes().(*QoSflowsToBeSetupListSetupSNterminatedItemExtIesExtension_IdRedundantQoSflowIndicator); ok {
		return x.IdRedundantQoSflowIndicator
	}
	return RedundantQoSflowIndicator_REDUNDANT_QO_SFLOW_INDICATOR_TRUE
}

type isQoSflowsToBeSetupListSetupSNterminatedItemExtIesExtension_QoSflowsToBeSetupListSetupSnterminatedItemExtIes interface {
	isQoSflowsToBeSetupListSetupSNterminatedItemExtIesExtension_QoSflowsToBeSetupListSetupSnterminatedItemExtIes()
}

type QoSflowsToBeSetupListSetupSNterminatedItemExtIesExtension_IdTsctrafficCharacteristics struct {
	// @inject_tag: aper:"choiceIdx:1,valueExt,"
	IdTsctrafficCharacteristics *TsctrafficCharacteristics `protobuf:"bytes,1,opt,name=id_tsctraffic_characteristics,json=id-TSCTrafficCharacteristics,proto3,oneof" aper:"choiceIdx:1,valueExt,"`
}

type QoSflowsToBeSetupListSetupSNterminatedItemExtIesExtension_IdRedundantQoSflowIndicator struct {
	// @inject_tag: aper:"choiceIdx:2,valueLB:0,valueUB:1,"
	IdRedundantQoSflowIndicator RedundantQoSflowIndicator `protobuf:"varint,2,opt,name=id_redundant_qo_sflow_indicator,json=id-RedundantQoSFlowIndicator,proto3,enum=xnap.v1.RedundantQoSflowIndicator,oneof" aper:"choiceIdx:2,valueLB:0,valueUB:1,"`
}

func (*QoSflowsToBeSetupListSetupSNterminatedItemExtIesExtension_IdTsctrafficCharacteristics) isQoSflowsToBeSetupListSetupSNterminatedItemExtIesExtension_QoSflowsToBeSetupListSetupSnterminatedItemExtIes() {
}

func (*QoSflowsToBeSetupListSetupSNterminatedItemExtIesExtension_IdRedundantQoSflowIndicator) isQoSflowsToBeSetupListSetupSNterminatedItemExtIesExtension_QoSflowsToBeSetupListSetupSnterminatedItemExtIes() {
}

// concrete instance(s) of class XNAP-PROTOCOL-EXTENSION from xnap_v1.asn1:6182
// @inject_tag: aper:"valueExt"
// {QoSFlowsToBeSetup-List-Setup-SNterminated-Item-ExtIEs}
type QoSflowsToBeSetupListSetupSNterminatedItemExtIes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"unique,"
	Id *xnap_commondatatypes.ProtocolIeID `protobuf:"bytes,1,opt,name=id,json=&id,proto3" json:"id,omitempty" aper:"unique,"`
	// @inject_tag: aper:"valueLB:0,valueUB:2,"
	Criticality xnap_commondatatypes.Criticality `protobuf:"varint,2,opt,name=criticality,json=&criticality,proto3,enum=xnap.v1.Criticality" json:"criticality,omitempty" aper:"valueLB:0,valueUB:2,"`
	// @inject_tag: aper:"canonicalOrder,"
	Extension *QoSflowsToBeSetupListSetupSNterminatedItemExtIesExtension `protobuf:"bytes,3,opt,name=extension,json=&Extension,proto3" json:"extension,omitempty" aper:"canonicalOrder,"`
}

func (x *QoSflowsToBeSetupListSetupSNterminatedItemExtIes) Reset() {
	*x = QoSflowsToBeSetupListSetupSNterminatedItemExtIes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[508]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QoSflowsToBeSetupListSetupSNterminatedItemExtIes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QoSflowsToBeSetupListSetupSNterminatedItemExtIes) ProtoMessage() {}

func (x *QoSflowsToBeSetupListSetupSNterminatedItemExtIes) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[508]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QoSflowsToBeSetupListSetupSNterminatedItemExtIes.ProtoReflect.Descriptor instead.
func (*QoSflowsToBeSetupListSetupSNterminatedItemExtIes) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{508}
}

func (x *QoSflowsToBeSetupListSetupSNterminatedItemExtIes) GetId() *xnap_commondatatypes.ProtocolIeID {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *QoSflowsToBeSetupListSetupSNterminatedItemExtIes) GetCriticality() xnap_commondatatypes.Criticality {
	if x != nil {
		return x.Criticality
	}
	return xnap_commondatatypes.Criticality(0)
}

func (x *QoSflowsToBeSetupListSetupSNterminatedItemExtIes) GetExtension() *QoSflowsToBeSetupListSetupSNterminatedItemExtIesExtension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// sequence from xnap_v1.asn1:6175
// @inject_tag: aper:"valueExt"
// {QoSFlowsToBeSetup-List-Setup-SNterminated-Item}
type QoSflowsToBeSetupListSetupSNterminatedItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Qfi *QoSflowIdentifier `protobuf:"bytes,1,opt,name=qfi,proto3" json:"qfi,omitempty"`
	// @inject_tag: aper:"valueExt,"
	QosFlowLevelQoSparameters *QoSflowLevelQoSparameters `protobuf:"bytes,2,opt,name=qos_flow_level_qo_sparameters,json=qosFlowLevelQoSParameters,proto3" json:"qos_flow_level_qo_sparameters,omitempty" aper:"valueExt,"`
	// @inject_tag: aper:"optional,valueExt,"
	OfferedGbrqoSflowInfo *GbrqoSflowInfo `protobuf:"bytes,3,opt,name=offered_gbrqo_sflow_info,json=offeredGBRQoSFlowInfo,proto3,oneof" json:"offered_gbrqo_sflow_info,omitempty" aper:"optional,valueExt,"`
	// @inject_tag: aper:"optional,sizeLB:1,"
	IEExtensions []*QoSflowsToBeSetupListSetupSNterminatedItemExtIes `protobuf:"bytes,4,rep,name=i_e_extensions,json=iE-Extensions,proto3" json:"i_e_extensions,omitempty" aper:"optional,sizeLB:1,"`
}

func (x *QoSflowsToBeSetupListSetupSNterminatedItem) Reset() {
	*x = QoSflowsToBeSetupListSetupSNterminatedItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[509]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QoSflowsToBeSetupListSetupSNterminatedItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QoSflowsToBeSetupListSetupSNterminatedItem) ProtoMessage() {}

func (x *QoSflowsToBeSetupListSetupSNterminatedItem) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[509]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QoSflowsToBeSetupListSetupSNterminatedItem.ProtoReflect.Descriptor instead.
func (*QoSflowsToBeSetupListSetupSNterminatedItem) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{509}
}

func (x *QoSflowsToBeSetupListSetupSNterminatedItem) GetQfi() *QoSflowIdentifier {
	if x != nil {
		return x.Qfi
	}
	return nil
}

func (x *QoSflowsToBeSetupListSetupSNterminatedItem) GetQosFlowLevelQoSparameters() *QoSflowLevelQoSparameters {
	if x != nil {
		return x.QosFlowLevelQoSparameters
	}
	return nil
}

func (x *QoSflowsToBeSetupListSetupSNterminatedItem) GetOfferedGbrqoSflowInfo() *GbrqoSflowInfo {
	if x != nil {
		return x.OfferedGbrqoSflowInfo
	}
	return nil
}

func (x *QoSflowsToBeSetupListSetupSNterminatedItem) GetIEExtensions() []*QoSflowsToBeSetupListSetupSNterminatedItemExtIes {
	if x != nil {
		return x.IEExtensions
	}
	return nil
}

// value set from xnap_v1.asn1:6205
// {PDUSessionResourceSetupResponseInfo-SNterminated-ExtIEs&Extension}
type PdusessionResourceSetupResponseInfoSNterminatedExtIesExtension struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// value set translated as choice from xnap_v1.asn1:6205
	//
	// Types that are assignable to PdusessionResourceSetupResponseInfoSnterminatedExtIes:
	//	*PdusessionResourceSetupResponseInfoSNterminatedExtIesExtension_IdDrbIdsTakenintouse
	//	*PdusessionResourceSetupResponseInfoSNterminatedExtIesExtension_IdRedundantDlNgUTnlatNgRan
	//	*PdusessionResourceSetupResponseInfoSNterminatedExtIesExtension_IdUsedRsninformation
	PdusessionResourceSetupResponseInfoSnterminatedExtIes isPdusessionResourceSetupResponseInfoSNterminatedExtIesExtension_PdusessionResourceSetupResponseInfoSnterminatedExtIes `protobuf_oneof:"pdusession_resource_setup_response_info_snterminated_ext_ies"`
}

func (x *PdusessionResourceSetupResponseInfoSNterminatedExtIesExtension) Reset() {
	*x = PdusessionResourceSetupResponseInfoSNterminatedExtIesExtension{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[510]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PdusessionResourceSetupResponseInfoSNterminatedExtIesExtension) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PdusessionResourceSetupResponseInfoSNterminatedExtIesExtension) ProtoMessage() {}

func (x *PdusessionResourceSetupResponseInfoSNterminatedExtIesExtension) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[510]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PdusessionResourceSetupResponseInfoSNterminatedExtIesExtension.ProtoReflect.Descriptor instead.
func (*PdusessionResourceSetupResponseInfoSNterminatedExtIesExtension) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{510}
}

func (m *PdusessionResourceSetupResponseInfoSNterminatedExtIesExtension) GetPdusessionResourceSetupResponseInfoSnterminatedExtIes() isPdusessionResourceSetupResponseInfoSNterminatedExtIesExtension_PdusessionResourceSetupResponseInfoSnterminatedExtIes {
	if m != nil {
		return m.PdusessionResourceSetupResponseInfoSnterminatedExtIes
	}
	return nil
}

func (x *PdusessionResourceSetupResponseInfoSNterminatedExtIesExtension) GetIdDrbIdsTakenintouse() *DrbList {
	if x, ok := x.GetPdusessionResourceSetupResponseInfoSnterminatedExtIes().(*PdusessionResourceSetupResponseInfoSNterminatedExtIesExtension_IdDrbIdsTakenintouse); ok {
		return x.IdDrbIdsTakenintouse
	}
	return nil
}

func (x *PdusessionResourceSetupResponseInfoSNterminatedExtIesExtension) GetIdRedundantDlNgUTnlatNgRan() *UptransportLayerInformation {
	if x, ok := x.GetPdusessionResourceSetupResponseInfoSnterminatedExtIes().(*PdusessionResourceSetupResponseInfoSNterminatedExtIesExtension_IdRedundantDlNgUTnlatNgRan); ok {
		return x.IdRedundantDlNgUTnlatNgRan
	}
	return nil
}

func (x *PdusessionResourceSetupResponseInfoSNterminatedExtIesExtension) GetIdUsedRsninformation() *RedundantPdusessionInformation {
	if x, ok := x.GetPdusessionResourceSetupResponseInfoSnterminatedExtIes().(*PdusessionResourceSetupResponseInfoSNterminatedExtIesExtension_IdUsedRsninformation); ok {
		return x.IdUsedRsninformation
	}
	return nil
}

type isPdusessionResourceSetupResponseInfoSNterminatedExtIesExtension_PdusessionResourceSetupResponseInfoSnterminatedExtIes interface {
	isPdusessionResourceSetupResponseInfoSNterminatedExtIesExtension_PdusessionResourceSetupResponseInfoSnterminatedExtIes()
}

type PdusessionResourceSetupResponseInfoSNterminatedExtIesExtension_IdDrbIdsTakenintouse struct {
	// @inject_tag: aper:"choiceIdx:1,"
	IdDrbIdsTakenintouse *DrbList `protobuf:"bytes,1,opt,name=id_drb_ids_takenintouse,json=id-DRB-IDs-takenintouse,proto3,oneof" aper:"choiceIdx:1,"`
}

type PdusessionResourceSetupResponseInfoSNterminatedExtIesExtension_IdRedundantDlNgUTnlatNgRan struct {
	// @inject_tag: aper:"choiceIdx:2,"
	IdRedundantDlNgUTnlatNgRan *UptransportLayerInformation `protobuf:"bytes,2,opt,name=id_redundant_dl_ng_u_tnlat_ng_ran,json=id-Redundant-DL-NG-U-TNLatNG-RAN,proto3,oneof" aper:"choiceIdx:2,"`
}

type PdusessionResourceSetupResponseInfoSNterminatedExtIesExtension_IdUsedRsninformation struct {
	// @inject_tag: aper:"choiceIdx:3,valueExt,"
	IdUsedRsninformation *RedundantPdusessionInformation `protobuf:"bytes,3,opt,name=id_used_rsninformation,json=id-UsedRSNInformation,proto3,oneof" aper:"choiceIdx:3,valueExt,"`
}

func (*PdusessionResourceSetupResponseInfoSNterminatedExtIesExtension_IdDrbIdsTakenintouse) isPdusessionResourceSetupResponseInfoSNterminatedExtIesExtension_PdusessionResourceSetupResponseInfoSnterminatedExtIes() {
}

func (*PdusessionResourceSetupResponseInfoSNterminatedExtIesExtension_IdRedundantDlNgUTnlatNgRan) isPdusessionResourceSetupResponseInfoSNterminatedExtIesExtension_PdusessionResourceSetupResponseInfoSnterminatedExtIes() {
}

func (*PdusessionResourceSetupResponseInfoSNterminatedExtIesExtension_IdUsedRsninformation) isPdusessionResourceSetupResponseInfoSNterminatedExtIesExtension_PdusessionResourceSetupResponseInfoSnterminatedExtIes() {
}

// concrete instance(s) of class XNAP-PROTOCOL-EXTENSION from xnap_v1.asn1:6205
// @inject_tag: aper:"valueExt"
// {PDUSessionResourceSetupResponseInfo-SNterminated-ExtIEs}
type PdusessionResourceSetupResponseInfoSNterminatedExtIes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"unique,"
	Id *xnap_commondatatypes.ProtocolIeID `protobuf:"bytes,1,opt,name=id,json=&id,proto3" json:"id,omitempty" aper:"unique,"`
	// @inject_tag: aper:"valueLB:0,valueUB:2,"
	Criticality xnap_commondatatypes.Criticality `protobuf:"varint,2,opt,name=criticality,json=&criticality,proto3,enum=xnap.v1.Criticality" json:"criticality,omitempty" aper:"valueLB:0,valueUB:2,"`
	// @inject_tag: aper:"canonicalOrder,"
	Extension *PdusessionResourceSetupResponseInfoSNterminatedExtIesExtension `protobuf:"bytes,3,opt,name=extension,json=&Extension,proto3" json:"extension,omitempty" aper:"canonicalOrder,"`
}

func (x *PdusessionResourceSetupResponseInfoSNterminatedExtIes) Reset() {
	*x = PdusessionResourceSetupResponseInfoSNterminatedExtIes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[511]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PdusessionResourceSetupResponseInfoSNterminatedExtIes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PdusessionResourceSetupResponseInfoSNterminatedExtIes) ProtoMessage() {}

func (x *PdusessionResourceSetupResponseInfoSNterminatedExtIes) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[511]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PdusessionResourceSetupResponseInfoSNterminatedExtIes.ProtoReflect.Descriptor instead.
func (*PdusessionResourceSetupResponseInfoSNterminatedExtIes) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{511}
}

func (x *PdusessionResourceSetupResponseInfoSNterminatedExtIes) GetId() *xnap_commondatatypes.ProtocolIeID {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *PdusessionResourceSetupResponseInfoSNterminatedExtIes) GetCriticality() xnap_commondatatypes.Criticality {
	if x != nil {
		return x.Criticality
	}
	return xnap_commondatatypes.Criticality(0)
}

func (x *PdusessionResourceSetupResponseInfoSNterminatedExtIes) GetExtension() *PdusessionResourceSetupResponseInfoSNterminatedExtIesExtension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// sequence from xnap_v1.asn1:6196
// @inject_tag: aper:"valueExt"
// {PDUSessionResourceSetupResponseInfo-SNterminated}
type PdusessionResourceSetupResponseInfoSNterminated struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DLNgUTnlatNgRan *UptransportLayerInformation `protobuf:"bytes,1,opt,name=d_l_ng_u_tnlat_ng_ran,json=dL-NG-U-TNLatNG-RAN,proto3" json:"d_l_ng_u_tnlat_ng_ran,omitempty"`
	// @inject_tag: aper:"optional,"
	DRbsToBeSetup *DrbsToBeSetupListSetupResponseSNterminated `protobuf:"bytes,2,opt,name=d_rbs_to_be_setup,json=dRBsToBeSetup,proto3,oneof" json:"d_rbs_to_be_setup,omitempty" aper:"optional,"`
	// @inject_tag: aper:"optional,valueExt,"
	DataforwardinginfoTarget *DataForwardingInfoFromTargetNgrannode `protobuf:"bytes,3,opt,name=dataforwardinginfo_target,json=dataforwardinginfoTarget,proto3,oneof" json:"dataforwardinginfo_target,omitempty" aper:"optional,valueExt,"`
	// @inject_tag: aper:"optional,"
	QosFlowsNotAdmittedList *QoSflowsListwithCause `protobuf:"bytes,4,opt,name=qos_flows_not_admitted_list,json=qosFlowsNotAdmittedList,proto3,oneof" json:"qos_flows_not_admitted_list,omitempty" aper:"optional,"`
	// @inject_tag: aper:"optional,valueExt,"
	SecurityResult *SecurityResult `protobuf:"bytes,5,opt,name=security_result,json=securityResult,proto3,oneof" json:"security_result,omitempty" aper:"optional,valueExt,"`
	// @inject_tag: aper:"optional,sizeLB:1,"
	IEExtensions []*PdusessionResourceSetupResponseInfoSNterminatedExtIes `protobuf:"bytes,6,rep,name=i_e_extensions,json=iE-Extensions,proto3" json:"i_e_extensions,omitempty" aper:"optional,sizeLB:1,"`
}

func (x *PdusessionResourceSetupResponseInfoSNterminated) Reset() {
	*x = PdusessionResourceSetupResponseInfoSNterminated{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[512]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PdusessionResourceSetupResponseInfoSNterminated) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PdusessionResourceSetupResponseInfoSNterminated) ProtoMessage() {}

func (x *PdusessionResourceSetupResponseInfoSNterminated) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[512]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PdusessionResourceSetupResponseInfoSNterminated.ProtoReflect.Descriptor instead.
func (*PdusessionResourceSetupResponseInfoSNterminated) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{512}
}

func (x *PdusessionResourceSetupResponseInfoSNterminated) GetDLNgUTnlatNgRan() *UptransportLayerInformation {
	if x != nil {
		return x.DLNgUTnlatNgRan
	}
	return nil
}

func (x *PdusessionResourceSetupResponseInfoSNterminated) GetDRbsToBeSetup() *DrbsToBeSetupListSetupResponseSNterminated {
	if x != nil {
		return x.DRbsToBeSetup
	}
	return nil
}

func (x *PdusessionResourceSetupResponseInfoSNterminated) GetDataforwardinginfoTarget() *DataForwardingInfoFromTargetNgrannode {
	if x != nil {
		return x.DataforwardinginfoTarget
	}
	return nil
}

func (x *PdusessionResourceSetupResponseInfoSNterminated) GetQosFlowsNotAdmittedList() *QoSflowsListwithCause {
	if x != nil {
		return x.QosFlowsNotAdmittedList
	}
	return nil
}

func (x *PdusessionResourceSetupResponseInfoSNterminated) GetSecurityResult() *SecurityResult {
	if x != nil {
		return x.SecurityResult
	}
	return nil
}

func (x *PdusessionResourceSetupResponseInfoSNterminated) GetIEExtensions() []*PdusessionResourceSetupResponseInfoSNterminatedExtIes {
	if x != nil {
		return x.IEExtensions
	}
	return nil
}

// sequence from xnap_v1.asn1:6214
// {DRBsToBeSetupList-SetupResponse-SNterminated}
type DrbsToBeSetupListSetupResponseSNterminated struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"valueExt,sizeLB:1,sizeUB:32,"
	Value []*DrbsToBeSetupListSetupResponseSNterminatedItem `protobuf:"bytes,1,rep,name=value,proto3" json:"value,omitempty" aper:"valueExt,sizeLB:1,sizeUB:32,"`
}

func (x *DrbsToBeSetupListSetupResponseSNterminated) Reset() {
	*x = DrbsToBeSetupListSetupResponseSNterminated{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[513]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DrbsToBeSetupListSetupResponseSNterminated) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DrbsToBeSetupListSetupResponseSNterminated) ProtoMessage() {}

func (x *DrbsToBeSetupListSetupResponseSNterminated) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[513]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DrbsToBeSetupListSetupResponseSNterminated.ProtoReflect.Descriptor instead.
func (*DrbsToBeSetupListSetupResponseSNterminated) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{513}
}

func (x *DrbsToBeSetupListSetupResponseSNterminated) GetValue() []*DrbsToBeSetupListSetupResponseSNterminatedItem {
	if x != nil {
		return x.Value
	}
	return nil
}

// value set from xnap_v1.asn1:6228
// {DRBsToBeSetupList-SetupResponse-SNterminated-Item-ExtIEs&Extension}
type DrbsToBeSetupListSetupResponseSNterminatedItemExtIesExtension struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// value set translated as choice from xnap_v1.asn1:6228
	//
	// Types that are assignable to DrbsToBeSetupListSetupResponseSnterminatedItemExtIes:
	//	*DrbsToBeSetupListSetupResponseSNterminatedItemExtIesExtension_IdAdditionalPdcpDuplicationTnlList
	//	*DrbsToBeSetupListSetupResponseSNterminatedItemExtIesExtension_IdRlcduplicationInformation
	DrbsToBeSetupListSetupResponseSnterminatedItemExtIes isDrbsToBeSetupListSetupResponseSNterminatedItemExtIesExtension_DrbsToBeSetupListSetupResponseSnterminatedItemExtIes `protobuf_oneof:"drbs_to_be_setup_list_setup_response_snterminated_item_ext_ies"`
}

func (x *DrbsToBeSetupListSetupResponseSNterminatedItemExtIesExtension) Reset() {
	*x = DrbsToBeSetupListSetupResponseSNterminatedItemExtIesExtension{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[514]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DrbsToBeSetupListSetupResponseSNterminatedItemExtIesExtension) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DrbsToBeSetupListSetupResponseSNterminatedItemExtIesExtension) ProtoMessage() {}

func (x *DrbsToBeSetupListSetupResponseSNterminatedItemExtIesExtension) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[514]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DrbsToBeSetupListSetupResponseSNterminatedItemExtIesExtension.ProtoReflect.Descriptor instead.
func (*DrbsToBeSetupListSetupResponseSNterminatedItemExtIesExtension) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{514}
}

func (m *DrbsToBeSetupListSetupResponseSNterminatedItemExtIesExtension) GetDrbsToBeSetupListSetupResponseSnterminatedItemExtIes() isDrbsToBeSetupListSetupResponseSNterminatedItemExtIesExtension_DrbsToBeSetupListSetupResponseSnterminatedItemExtIes {
	if m != nil {
		return m.DrbsToBeSetupListSetupResponseSnterminatedItemExtIes
	}
	return nil
}

func (x *DrbsToBeSetupListSetupResponseSNterminatedItemExtIesExtension) GetIdAdditionalPdcpDuplicationTnlList() *AdditionalPDcpDuplicationTNlList {
	if x, ok := x.GetDrbsToBeSetupListSetupResponseSnterminatedItemExtIes().(*DrbsToBeSetupListSetupResponseSNterminatedItemExtIesExtension_IdAdditionalPdcpDuplicationTnlList); ok {
		return x.IdAdditionalPdcpDuplicationTnlList
	}
	return nil
}

func (x *DrbsToBeSetupListSetupResponseSNterminatedItemExtIesExtension) GetIdRlcduplicationInformation() *RlcduplicationInformation {
	if x, ok := x.GetDrbsToBeSetupListSetupResponseSnterminatedItemExtIes().(*DrbsToBeSetupListSetupResponseSNterminatedItemExtIesExtension_IdRlcduplicationInformation); ok {
		return x.IdRlcduplicationInformation
	}
	return nil
}

type isDrbsToBeSetupListSetupResponseSNterminatedItemExtIesExtension_DrbsToBeSetupListSetupResponseSnterminatedItemExtIes interface {
	isDrbsToBeSetupListSetupResponseSNterminatedItemExtIesExtension_DrbsToBeSetupListSetupResponseSnterminatedItemExtIes()
}

type DrbsToBeSetupListSetupResponseSNterminatedItemExtIesExtension_IdAdditionalPdcpDuplicationTnlList struct {
	// @inject_tag: aper:"choiceIdx:1,"
	IdAdditionalPdcpDuplicationTnlList *AdditionalPDcpDuplicationTNlList `protobuf:"bytes,1,opt,name=id_additional_pdcp_duplication_tnl_list,json=id-Additional-PDCP-Duplication-TNL-List,proto3,oneof" aper:"choiceIdx:1,"`
}

type DrbsToBeSetupListSetupResponseSNterminatedItemExtIesExtension_IdRlcduplicationInformation struct {
	// @inject_tag: aper:"choiceIdx:2,"
	IdRlcduplicationInformation *RlcduplicationInformation `protobuf:"bytes,2,opt,name=id_rlcduplication_information,json=id-RLCDuplicationInformation,proto3,oneof" aper:"choiceIdx:2,"`
}

func (*DrbsToBeSetupListSetupResponseSNterminatedItemExtIesExtension_IdAdditionalPdcpDuplicationTnlList) isDrbsToBeSetupListSetupResponseSNterminatedItemExtIesExtension_DrbsToBeSetupListSetupResponseSnterminatedItemExtIes() {
}

func (*DrbsToBeSetupListSetupResponseSNterminatedItemExtIesExtension_IdRlcduplicationInformation) isDrbsToBeSetupListSetupResponseSNterminatedItemExtIesExtension_DrbsToBeSetupListSetupResponseSnterminatedItemExtIes() {
}

// concrete instance(s) of class XNAP-PROTOCOL-EXTENSION from xnap_v1.asn1:6228
// @inject_tag: aper:"valueExt"
// {DRBsToBeSetupList-SetupResponse-SNterminated-Item-ExtIEs}
type DrbsToBeSetupListSetupResponseSNterminatedItemExtIes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"unique,"
	Id *xnap_commondatatypes.ProtocolIeID `protobuf:"bytes,1,opt,name=id,json=&id,proto3" json:"id,omitempty" aper:"unique,"`
	// @inject_tag: aper:"valueLB:0,valueUB:2,"
	Criticality xnap_commondatatypes.Criticality `protobuf:"varint,2,opt,name=criticality,json=&criticality,proto3,enum=xnap.v1.Criticality" json:"criticality,omitempty" aper:"valueLB:0,valueUB:2,"`
	// @inject_tag: aper:"canonicalOrder,"
	Extension *DrbsToBeSetupListSetupResponseSNterminatedItemExtIesExtension `protobuf:"bytes,3,opt,name=extension,json=&Extension,proto3" json:"extension,omitempty" aper:"canonicalOrder,"`
}

func (x *DrbsToBeSetupListSetupResponseSNterminatedItemExtIes) Reset() {
	*x = DrbsToBeSetupListSetupResponseSNterminatedItemExtIes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[515]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DrbsToBeSetupListSetupResponseSNterminatedItemExtIes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DrbsToBeSetupListSetupResponseSNterminatedItemExtIes) ProtoMessage() {}

func (x *DrbsToBeSetupListSetupResponseSNterminatedItemExtIes) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[515]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DrbsToBeSetupListSetupResponseSNterminatedItemExtIes.ProtoReflect.Descriptor instead.
func (*DrbsToBeSetupListSetupResponseSNterminatedItemExtIes) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{515}
}

func (x *DrbsToBeSetupListSetupResponseSNterminatedItemExtIes) GetId() *xnap_commondatatypes.ProtocolIeID {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *DrbsToBeSetupListSetupResponseSNterminatedItemExtIes) GetCriticality() xnap_commondatatypes.Criticality {
	if x != nil {
		return x.Criticality
	}
	return xnap_commondatatypes.Criticality(0)
}

func (x *DrbsToBeSetupListSetupResponseSNterminatedItemExtIes) GetExtension() *DrbsToBeSetupListSetupResponseSNterminatedItemExtIesExtension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// sequence from xnap_v1.asn1:6215
// @inject_tag: aper:"valueExt"
// {DRBsToBeSetupList-SetupResponse-SNterminated-Item}
type DrbsToBeSetupListSetupResponseSNterminatedItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DrbId             *DrbID                 `protobuf:"bytes,1,opt,name=drb_id,json=drb-ID,proto3" json:"drb_id,omitempty"`
	SNUlPdcpUpTnlinfo *UptransportParameters `protobuf:"bytes,2,opt,name=s_n_ul_pdcp_up_tnlinfo,json=sN-UL-PDCP-UP-TNLInfo,proto3" json:"s_n_ul_pdcp_up_tnlinfo,omitempty"`
	// @inject_tag: aper:"valueExt,"
	DRbQoS *QoSflowLevelQoSparameters `protobuf:"bytes,3,opt,name=d_rb_qo_s,json=dRB-QoS,proto3" json:"d_rb_qo_s,omitempty" aper:"valueExt,"`
	// @inject_tag: aper:"optional,valueExt,"
	PDcpSnlength *Pdcpsnlength `protobuf:"bytes,4,opt,name=p_dcp_snlength,json=pDCP-SNLength,proto3,oneof" json:"p_dcp_snlength,omitempty" aper:"optional,valueExt,"`
	// @inject_tag: aper:"valueExt,valueLB:0,valueUB:3,"
	RLcMode Rlcmode `protobuf:"varint,5,opt,name=r_lc_mode,json=rLC-Mode,proto3,enum=xnap.v1.Rlcmode" json:"r_lc_mode,omitempty" aper:"valueExt,valueLB:0,valueUB:3,"`
	// @inject_tag: aper:"optional,valueExt,"
	ULConfiguration *Ulconfiguration `protobuf:"bytes,6,opt,name=u_l_configuration,json=uL-Configuration,proto3,oneof" json:"u_l_configuration,omitempty" aper:"optional,valueExt,"`
	// @inject_tag: aper:"optional,"
	SecondarySnUlPdcpUpTnlinfo *UptransportParameters `protobuf:"bytes,7,opt,name=secondary_sn_ul_pdcp_up_tnlinfo,json=secondary-SN-UL-PDCP-UP-TNLInfo,proto3,oneof" json:"secondary_sn_ul_pdcp_up_tnlinfo,omitempty" aper:"optional,"`
	// @inject_tag: aper:"optional,valueExt,valueLB:0,valueUB:1,"
	DuplicationActivation                        *DuplicationActivation                        `protobuf:"varint,8,opt,name=duplication_activation,json=duplicationActivation,proto3,enum=xnap.v1.DuplicationActivation,oneof" json:"duplication_activation,omitempty" aper:"optional,valueExt,valueLB:0,valueUB:1,"`
	QoSflowsMappedtoDrbSetupResponseSnterminated *QoSflowsMappedtoDrbSetupResponseSNterminated `protobuf:"bytes,9,opt,name=qo_sflows_mappedto_drb_setup_response_snterminated,json=qoSFlowsMappedtoDRB-SetupResponse-SNterminated,proto3" json:"qo_sflows_mappedto_drb_setup_response_snterminated,omitempty"`
	// @inject_tag: aper:"optional,sizeLB:1,"
	IEExtensions []*DrbsToBeSetupListSetupResponseSNterminatedItemExtIes `protobuf:"bytes,10,rep,name=i_e_extensions,json=iE-Extensions,proto3" json:"i_e_extensions,omitempty" aper:"optional,sizeLB:1,"`
}

func (x *DrbsToBeSetupListSetupResponseSNterminatedItem) Reset() {
	*x = DrbsToBeSetupListSetupResponseSNterminatedItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[516]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DrbsToBeSetupListSetupResponseSNterminatedItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DrbsToBeSetupListSetupResponseSNterminatedItem) ProtoMessage() {}

func (x *DrbsToBeSetupListSetupResponseSNterminatedItem) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[516]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DrbsToBeSetupListSetupResponseSNterminatedItem.ProtoReflect.Descriptor instead.
func (*DrbsToBeSetupListSetupResponseSNterminatedItem) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{516}
}

func (x *DrbsToBeSetupListSetupResponseSNterminatedItem) GetDrbId() *DrbID {
	if x != nil {
		return x.DrbId
	}
	return nil
}

func (x *DrbsToBeSetupListSetupResponseSNterminatedItem) GetSNUlPdcpUpTnlinfo() *UptransportParameters {
	if x != nil {
		return x.SNUlPdcpUpTnlinfo
	}
	return nil
}

func (x *DrbsToBeSetupListSetupResponseSNterminatedItem) GetDRbQoS() *QoSflowLevelQoSparameters {
	if x != nil {
		return x.DRbQoS
	}
	return nil
}

func (x *DrbsToBeSetupListSetupResponseSNterminatedItem) GetPDcpSnlength() *Pdcpsnlength {
	if x != nil {
		return x.PDcpSnlength
	}
	return nil
}

func (x *DrbsToBeSetupListSetupResponseSNterminatedItem) GetRLcMode() Rlcmode {
	if x != nil {
		return x.RLcMode
	}
	return Rlcmode_RLCMODE_RLC_AM
}

func (x *DrbsToBeSetupListSetupResponseSNterminatedItem) GetULConfiguration() *Ulconfiguration {
	if x != nil {
		return x.ULConfiguration
	}
	return nil
}

func (x *DrbsToBeSetupListSetupResponseSNterminatedItem) GetSecondarySnUlPdcpUpTnlinfo() *UptransportParameters {
	if x != nil {
		return x.SecondarySnUlPdcpUpTnlinfo
	}
	return nil
}

func (x *DrbsToBeSetupListSetupResponseSNterminatedItem) GetDuplicationActivation() DuplicationActivation {
	if x != nil && x.DuplicationActivation != nil {
		return *x.DuplicationActivation
	}
	return DuplicationActivation_DUPLICATION_ACTIVATION_ACTIVE
}

func (x *DrbsToBeSetupListSetupResponseSNterminatedItem) GetQoSflowsMappedtoDrbSetupResponseSnterminated() *QoSflowsMappedtoDrbSetupResponseSNterminated {
	if x != nil {
		return x.QoSflowsMappedtoDrbSetupResponseSnterminated
	}
	return nil
}

func (x *DrbsToBeSetupListSetupResponseSNterminatedItem) GetIEExtensions() []*DrbsToBeSetupListSetupResponseSNterminatedItemExtIes {
	if x != nil {
		return x.IEExtensions
	}
	return nil
}

// sequence from xnap_v1.asn1:6237
// {QoSFlowsMappedtoDRB-SetupResponse-SNterminated}
type QoSflowsMappedtoDrbSetupResponseSNterminated struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"valueExt,sizeLB:1,sizeUB:64,"
	Value []*QoSflowsMappedtoDrbSetupResponseSNterminatedItem `protobuf:"bytes,1,rep,name=value,proto3" json:"value,omitempty" aper:"valueExt,sizeLB:1,sizeUB:64,"`
}

func (x *QoSflowsMappedtoDrbSetupResponseSNterminated) Reset() {
	*x = QoSflowsMappedtoDrbSetupResponseSNterminated{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[517]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QoSflowsMappedtoDrbSetupResponseSNterminated) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QoSflowsMappedtoDrbSetupResponseSNterminated) ProtoMessage() {}

func (x *QoSflowsMappedtoDrbSetupResponseSNterminated) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[517]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QoSflowsMappedtoDrbSetupResponseSNterminated.ProtoReflect.Descriptor instead.
func (*QoSflowsMappedtoDrbSetupResponseSNterminated) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{517}
}

func (x *QoSflowsMappedtoDrbSetupResponseSNterminated) GetValue() []*QoSflowsMappedtoDrbSetupResponseSNterminatedItem {
	if x != nil {
		return x.Value
	}
	return nil
}

// value set from xnap_v1.asn1:6245
// {QoSFlowsMappedtoDRB-SetupResponse-SNterminated-Item-ExtIEs&Extension}
type QoSflowsMappedtoDrbSetupResponseSNterminatedItemExtIesExtension struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// value set translated as choice from xnap_v1.asn1:6245
	//
	// Types that are assignable to QoSflowsMappedtoDrbSetupResponseSnterminatedItemExtIes:
	//	*QoSflowsMappedtoDrbSetupResponseSNterminatedItemExtIesExtension_IdCurrentQoSparaSetIndex
	//	*QoSflowsMappedtoDrbSetupResponseSNterminatedItemExtIesExtension_IdSourceDlforwardingIpaddress
	QoSflowsMappedtoDrbSetupResponseSnterminatedItemExtIes isQoSflowsMappedtoDrbSetupResponseSNterminatedItemExtIesExtension_QoSflowsMappedtoDrbSetupResponseSnterminatedItemExtIes `protobuf_oneof:"qo_sflows_mappedto_drb_setup_response_snterminated_item_ext_ies"`
}

func (x *QoSflowsMappedtoDrbSetupResponseSNterminatedItemExtIesExtension) Reset() {
	*x = QoSflowsMappedtoDrbSetupResponseSNterminatedItemExtIesExtension{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[518]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QoSflowsMappedtoDrbSetupResponseSNterminatedItemExtIesExtension) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QoSflowsMappedtoDrbSetupResponseSNterminatedItemExtIesExtension) ProtoMessage() {}

func (x *QoSflowsMappedtoDrbSetupResponseSNterminatedItemExtIesExtension) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[518]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QoSflowsMappedtoDrbSetupResponseSNterminatedItemExtIesExtension.ProtoReflect.Descriptor instead.
func (*QoSflowsMappedtoDrbSetupResponseSNterminatedItemExtIesExtension) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{518}
}

func (m *QoSflowsMappedtoDrbSetupResponseSNterminatedItemExtIesExtension) GetQoSflowsMappedtoDrbSetupResponseSnterminatedItemExtIes() isQoSflowsMappedtoDrbSetupResponseSNterminatedItemExtIesExtension_QoSflowsMappedtoDrbSetupResponseSnterminatedItemExtIes {
	if m != nil {
		return m.QoSflowsMappedtoDrbSetupResponseSnterminatedItemExtIes
	}
	return nil
}

func (x *QoSflowsMappedtoDrbSetupResponseSNterminatedItemExtIesExtension) GetIdCurrentQoSparaSetIndex() *QoSparaSetIndex {
	if x, ok := x.GetQoSflowsMappedtoDrbSetupResponseSnterminatedItemExtIes().(*QoSflowsMappedtoDrbSetupResponseSNterminatedItemExtIesExtension_IdCurrentQoSparaSetIndex); ok {
		return x.IdCurrentQoSparaSetIndex
	}
	return nil
}

func (x *QoSflowsMappedtoDrbSetupResponseSNterminatedItemExtIesExtension) GetIdSourceDlforwardingIpaddress() *TransportLayerAddress {
	if x, ok := x.GetQoSflowsMappedtoDrbSetupResponseSnterminatedItemExtIes().(*QoSflowsMappedtoDrbSetupResponseSNterminatedItemExtIesExtension_IdSourceDlforwardingIpaddress); ok {
		return x.IdSourceDlforwardingIpaddress
	}
	return nil
}

type isQoSflowsMappedtoDrbSetupResponseSNterminatedItemExtIesExtension_QoSflowsMappedtoDrbSetupResponseSnterminatedItemExtIes interface {
	isQoSflowsMappedtoDrbSetupResponseSNterminatedItemExtIesExtension_QoSflowsMappedtoDrbSetupResponseSnterminatedItemExtIes()
}

type QoSflowsMappedtoDrbSetupResponseSNterminatedItemExtIesExtension_IdCurrentQoSparaSetIndex struct {
	// @inject_tag: aper:"choiceIdx:1,"
	IdCurrentQoSparaSetIndex *QoSparaSetIndex `protobuf:"bytes,1,opt,name=id_current_qo_spara_set_index,json=id-CurrentQoSParaSetIndex,proto3,oneof" aper:"choiceIdx:1,"`
}

type QoSflowsMappedtoDrbSetupResponseSNterminatedItemExtIesExtension_IdSourceDlforwardingIpaddress struct {
	// @inject_tag: aper:"choiceIdx:2,"
	IdSourceDlforwardingIpaddress *TransportLayerAddress `protobuf:"bytes,2,opt,name=id_source_dlforwarding_ipaddress,json=id-SourceDLForwardingIPAddress,proto3,oneof" aper:"choiceIdx:2,"`
}

func (*QoSflowsMappedtoDrbSetupResponseSNterminatedItemExtIesExtension_IdCurrentQoSparaSetIndex) isQoSflowsMappedtoDrbSetupResponseSNterminatedItemExtIesExtension_QoSflowsMappedtoDrbSetupResponseSnterminatedItemExtIes() {
}

func (*QoSflowsMappedtoDrbSetupResponseSNterminatedItemExtIesExtension_IdSourceDlforwardingIpaddress) isQoSflowsMappedtoDrbSetupResponseSNterminatedItemExtIesExtension_QoSflowsMappedtoDrbSetupResponseSnterminatedItemExtIes() {
}

// concrete instance(s) of class XNAP-PROTOCOL-EXTENSION from xnap_v1.asn1:6245
// @inject_tag: aper:"valueExt"
// {QoSFlowsMappedtoDRB-SetupResponse-SNterminated-Item-ExtIEs}
type QoSflowsMappedtoDrbSetupResponseSNterminatedItemExtIes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"unique,"
	Id *xnap_commondatatypes.ProtocolIeID `protobuf:"bytes,1,opt,name=id,json=&id,proto3" json:"id,omitempty" aper:"unique,"`
	// @inject_tag: aper:"valueLB:0,valueUB:2,"
	Criticality xnap_commondatatypes.Criticality `protobuf:"varint,2,opt,name=criticality,json=&criticality,proto3,enum=xnap.v1.Criticality" json:"criticality,omitempty" aper:"valueLB:0,valueUB:2,"`
	// @inject_tag: aper:"canonicalOrder,"
	Extension *QoSflowsMappedtoDrbSetupResponseSNterminatedItemExtIesExtension `protobuf:"bytes,3,opt,name=extension,json=&Extension,proto3" json:"extension,omitempty" aper:"canonicalOrder,"`
}

func (x *QoSflowsMappedtoDrbSetupResponseSNterminatedItemExtIes) Reset() {
	*x = QoSflowsMappedtoDrbSetupResponseSNterminatedItemExtIes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[519]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QoSflowsMappedtoDrbSetupResponseSNterminatedItemExtIes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QoSflowsMappedtoDrbSetupResponseSNterminatedItemExtIes) ProtoMessage() {}

func (x *QoSflowsMappedtoDrbSetupResponseSNterminatedItemExtIes) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[519]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QoSflowsMappedtoDrbSetupResponseSNterminatedItemExtIes.ProtoReflect.Descriptor instead.
func (*QoSflowsMappedtoDrbSetupResponseSNterminatedItemExtIes) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{519}
}

func (x *QoSflowsMappedtoDrbSetupResponseSNterminatedItemExtIes) GetId() *xnap_commondatatypes.ProtocolIeID {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *QoSflowsMappedtoDrbSetupResponseSNterminatedItemExtIes) GetCriticality() xnap_commondatatypes.Criticality {
	if x != nil {
		return x.Criticality
	}
	return xnap_commondatatypes.Criticality(0)
}

func (x *QoSflowsMappedtoDrbSetupResponseSNterminatedItemExtIes) GetExtension() *QoSflowsMappedtoDrbSetupResponseSNterminatedItemExtIesExtension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// sequence from xnap_v1.asn1:6238
// @inject_tag: aper:"valueExt"
// {QoSFlowsMappedtoDRB-SetupResponse-SNterminated-Item}
type QoSflowsMappedtoDrbSetupResponseSNterminatedItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	QoSflowIdentifier *QoSflowIdentifier `protobuf:"bytes,1,opt,name=qo_sflow_identifier,json=qoSFlowIdentifier,proto3" json:"qo_sflow_identifier,omitempty"`
	// @inject_tag: aper:"optional,valueExt,"
	MCgrequestedGbrqoSflowInfo *GbrqoSflowInfo `protobuf:"bytes,2,opt,name=m_cgrequested_gbrqo_sflow_info,json=mCGRequestedGBRQoSFlowInfo,proto3,oneof" json:"m_cgrequested_gbrqo_sflow_info,omitempty" aper:"optional,valueExt,"`
	// @inject_tag: aper:"optional,valueExt,valueLB:0,valueUB:1,"
	QosFlowMappingIndication *QoSflowMappingIndication `protobuf:"varint,3,opt,name=qos_flow_mapping_indication,json=qosFlowMappingIndication,proto3,enum=xnap.v1.QoSflowMappingIndication,oneof" json:"qos_flow_mapping_indication,omitempty" aper:"optional,valueExt,valueLB:0,valueUB:1,"`
	// @inject_tag: aper:"optional,sizeLB:1,"
	IEExtensions []*QoSflowsMappedtoDrbSetupResponseSNterminatedItemExtIes `protobuf:"bytes,4,rep,name=i_e_extensions,json=iE-Extensions,proto3" json:"i_e_extensions,omitempty" aper:"optional,sizeLB:1,"`
}

func (x *QoSflowsMappedtoDrbSetupResponseSNterminatedItem) Reset() {
	*x = QoSflowsMappedtoDrbSetupResponseSNterminatedItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[520]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QoSflowsMappedtoDrbSetupResponseSNterminatedItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QoSflowsMappedtoDrbSetupResponseSNterminatedItem) ProtoMessage() {}

func (x *QoSflowsMappedtoDrbSetupResponseSNterminatedItem) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[520]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QoSflowsMappedtoDrbSetupResponseSNterminatedItem.ProtoReflect.Descriptor instead.
func (*QoSflowsMappedtoDrbSetupResponseSNterminatedItem) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{520}
}

func (x *QoSflowsMappedtoDrbSetupResponseSNterminatedItem) GetQoSflowIdentifier() *QoSflowIdentifier {
	if x != nil {
		return x.QoSflowIdentifier
	}
	return nil
}

func (x *QoSflowsMappedtoDrbSetupResponseSNterminatedItem) GetMCgrequestedGbrqoSflowInfo() *GbrqoSflowInfo {
	if x != nil {
		return x.MCgrequestedGbrqoSflowInfo
	}
	return nil
}

func (x *QoSflowsMappedtoDrbSetupResponseSNterminatedItem) GetQosFlowMappingIndication() QoSflowMappingIndication {
	if x != nil && x.QosFlowMappingIndication != nil {
		return *x.QosFlowMappingIndication
	}
	return QoSflowMappingIndication_QO_SFLOW_MAPPING_INDICATION_UL
}

func (x *QoSflowsMappedtoDrbSetupResponseSNterminatedItem) GetIEExtensions() []*QoSflowsMappedtoDrbSetupResponseSNterminatedItemExtIes {
	if x != nil {
		return x.IEExtensions
	}
	return nil
}

// value set from xnap_v1.asn1:6266
// {PDUSessionResourceSetupInfo-MNterminated-ExtIEs}
type PdusessionResourceSetupInfoMNterminatedExtIes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *emptypb.Empty `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *PdusessionResourceSetupInfoMNterminatedExtIes) Reset() {
	*x = PdusessionResourceSetupInfoMNterminatedExtIes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[521]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PdusessionResourceSetupInfoMNterminatedExtIes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PdusessionResourceSetupInfoMNterminatedExtIes) ProtoMessage() {}

func (x *PdusessionResourceSetupInfoMNterminatedExtIes) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[521]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PdusessionResourceSetupInfoMNterminatedExtIes.ProtoReflect.Descriptor instead.
func (*PdusessionResourceSetupInfoMNterminatedExtIes) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{521}
}

func (x *PdusessionResourceSetupInfoMNterminatedExtIes) GetValue() *emptypb.Empty {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:6260
// @inject_tag: aper:"valueExt"
// {PDUSessionResourceSetupInfo-MNterminated}
type PdusessionResourceSetupInfoMNterminated struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"valueExt,valueLB:0,valueUB:4,"
	PduSessionType PdusessionType                      `protobuf:"varint,1,opt,name=pdu_session_type,json=pduSessionType,proto3,enum=xnap.v1.PdusessionType" json:"pdu_session_type,omitempty" aper:"valueExt,valueLB:0,valueUB:4,"`
	DRbsToBeSetup  *DrbsToBeSetupListSetupMNterminated `protobuf:"bytes,2,opt,name=d_rbs_to_be_setup,json=dRBsToBeSetup,proto3" json:"d_rbs_to_be_setup,omitempty"`
	// @inject_tag: aper:"optional,sizeLB:1,"
	IEExtensions []*PdusessionResourceSetupInfoMNterminatedExtIes `protobuf:"bytes,3,rep,name=i_e_extensions,json=iE-Extensions,proto3" json:"i_e_extensions,omitempty" aper:"optional,sizeLB:1,"`
}

func (x *PdusessionResourceSetupInfoMNterminated) Reset() {
	*x = PdusessionResourceSetupInfoMNterminated{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[522]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PdusessionResourceSetupInfoMNterminated) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PdusessionResourceSetupInfoMNterminated) ProtoMessage() {}

func (x *PdusessionResourceSetupInfoMNterminated) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[522]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PdusessionResourceSetupInfoMNterminated.ProtoReflect.Descriptor instead.
func (*PdusessionResourceSetupInfoMNterminated) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{522}
}

func (x *PdusessionResourceSetupInfoMNterminated) GetPduSessionType() PdusessionType {
	if x != nil {
		return x.PduSessionType
	}
	return PdusessionType_PDUSESSION_TYPE_IPV4
}

func (x *PdusessionResourceSetupInfoMNterminated) GetDRbsToBeSetup() *DrbsToBeSetupListSetupMNterminated {
	if x != nil {
		return x.DRbsToBeSetup
	}
	return nil
}

func (x *PdusessionResourceSetupInfoMNterminated) GetIEExtensions() []*PdusessionResourceSetupInfoMNterminatedExtIes {
	if x != nil {
		return x.IEExtensions
	}
	return nil
}

// sequence from xnap_v1.asn1:6272
// {DRBsToBeSetupList-Setup-MNterminated}
type DrbsToBeSetupListSetupMNterminated struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"valueExt,sizeLB:1,sizeUB:32,"
	Value []*DrbsToBeSetupListSetupMNterminatedItem `protobuf:"bytes,1,rep,name=value,proto3" json:"value,omitempty" aper:"valueExt,sizeLB:1,sizeUB:32,"`
}

func (x *DrbsToBeSetupListSetupMNterminated) Reset() {
	*x = DrbsToBeSetupListSetupMNterminated{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[523]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DrbsToBeSetupListSetupMNterminated) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DrbsToBeSetupListSetupMNterminated) ProtoMessage() {}

func (x *DrbsToBeSetupListSetupMNterminated) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[523]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DrbsToBeSetupListSetupMNterminated.ProtoReflect.Descriptor instead.
func (*DrbsToBeSetupListSetupMNterminated) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{523}
}

func (x *DrbsToBeSetupListSetupMNterminated) GetValue() []*DrbsToBeSetupListSetupMNterminatedItem {
	if x != nil {
		return x.Value
	}
	return nil
}

// value set from xnap_v1.asn1:6286
// {DRBsToBeSetupList-Setup-MNterminated-Item-ExtIEs&Extension}
type DrbsToBeSetupListSetupMNterminatedItemExtIesExtension struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// value set translated as choice from xnap_v1.asn1:6286
	//
	// Types that are assignable to DrbsToBeSetupListSetupMnterminatedItemExtIes:
	//	*DrbsToBeSetupListSetupMNterminatedItemExtIesExtension_IdAdditionalPdcpDuplicationTnlList
	//	*DrbsToBeSetupListSetupMNterminatedItemExtIesExtension_IdRlcduplicationInformation
	DrbsToBeSetupListSetupMnterminatedItemExtIes isDrbsToBeSetupListSetupMNterminatedItemExtIesExtension_DrbsToBeSetupListSetupMnterminatedItemExtIes `protobuf_oneof:"drbs_to_be_setup_list_setup_mnterminated_item_ext_ies"`
}

func (x *DrbsToBeSetupListSetupMNterminatedItemExtIesExtension) Reset() {
	*x = DrbsToBeSetupListSetupMNterminatedItemExtIesExtension{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[524]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DrbsToBeSetupListSetupMNterminatedItemExtIesExtension) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DrbsToBeSetupListSetupMNterminatedItemExtIesExtension) ProtoMessage() {}

func (x *DrbsToBeSetupListSetupMNterminatedItemExtIesExtension) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[524]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DrbsToBeSetupListSetupMNterminatedItemExtIesExtension.ProtoReflect.Descriptor instead.
func (*DrbsToBeSetupListSetupMNterminatedItemExtIesExtension) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{524}
}

func (m *DrbsToBeSetupListSetupMNterminatedItemExtIesExtension) GetDrbsToBeSetupListSetupMnterminatedItemExtIes() isDrbsToBeSetupListSetupMNterminatedItemExtIesExtension_DrbsToBeSetupListSetupMnterminatedItemExtIes {
	if m != nil {
		return m.DrbsToBeSetupListSetupMnterminatedItemExtIes
	}
	return nil
}

func (x *DrbsToBeSetupListSetupMNterminatedItemExtIesExtension) GetIdAdditionalPdcpDuplicationTnlList() *AdditionalPDcpDuplicationTNlList {
	if x, ok := x.GetDrbsToBeSetupListSetupMnterminatedItemExtIes().(*DrbsToBeSetupListSetupMNterminatedItemExtIesExtension_IdAdditionalPdcpDuplicationTnlList); ok {
		return x.IdAdditionalPdcpDuplicationTnlList
	}
	return nil
}

func (x *DrbsToBeSetupListSetupMNterminatedItemExtIesExtension) GetIdRlcduplicationInformation() *RlcduplicationInformation {
	if x, ok := x.GetDrbsToBeSetupListSetupMnterminatedItemExtIes().(*DrbsToBeSetupListSetupMNterminatedItemExtIesExtension_IdRlcduplicationInformation); ok {
		return x.IdRlcduplicationInformation
	}
	return nil
}

type isDrbsToBeSetupListSetupMNterminatedItemExtIesExtension_DrbsToBeSetupListSetupMnterminatedItemExtIes interface {
	isDrbsToBeSetupListSetupMNterminatedItemExtIesExtension_DrbsToBeSetupListSetupMnterminatedItemExtIes()
}

type DrbsToBeSetupListSetupMNterminatedItemExtIesExtension_IdAdditionalPdcpDuplicationTnlList struct {
	// @inject_tag: aper:"choiceIdx:1,"
	IdAdditionalPdcpDuplicationTnlList *AdditionalPDcpDuplicationTNlList `protobuf:"bytes,1,opt,name=id_additional_pdcp_duplication_tnl_list,json=id-Additional-PDCP-Duplication-TNL-List,proto3,oneof" aper:"choiceIdx:1,"`
}

type DrbsToBeSetupListSetupMNterminatedItemExtIesExtension_IdRlcduplicationInformation struct {
	// @inject_tag: aper:"choiceIdx:2,"
	IdRlcduplicationInformation *RlcduplicationInformation `protobuf:"bytes,2,opt,name=id_rlcduplication_information,json=id-RLCDuplicationInformation,proto3,oneof" aper:"choiceIdx:2,"`
}

func (*DrbsToBeSetupListSetupMNterminatedItemExtIesExtension_IdAdditionalPdcpDuplicationTnlList) isDrbsToBeSetupListSetupMNterminatedItemExtIesExtension_DrbsToBeSetupListSetupMnterminatedItemExtIes() {
}

func (*DrbsToBeSetupListSetupMNterminatedItemExtIesExtension_IdRlcduplicationInformation) isDrbsToBeSetupListSetupMNterminatedItemExtIesExtension_DrbsToBeSetupListSetupMnterminatedItemExtIes() {
}

// concrete instance(s) of class XNAP-PROTOCOL-EXTENSION from xnap_v1.asn1:6286
// @inject_tag: aper:"valueExt"
// {DRBsToBeSetupList-Setup-MNterminated-Item-ExtIEs}
type DrbsToBeSetupListSetupMNterminatedItemExtIes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"unique,"
	Id *xnap_commondatatypes.ProtocolIeID `protobuf:"bytes,1,opt,name=id,json=&id,proto3" json:"id,omitempty" aper:"unique,"`
	// @inject_tag: aper:"valueLB:0,valueUB:2,"
	Criticality xnap_commondatatypes.Criticality `protobuf:"varint,2,opt,name=criticality,json=&criticality,proto3,enum=xnap.v1.Criticality" json:"criticality,omitempty" aper:"valueLB:0,valueUB:2,"`
	// @inject_tag: aper:"canonicalOrder,"
	Extension *DrbsToBeSetupListSetupMNterminatedItemExtIesExtension `protobuf:"bytes,3,opt,name=extension,json=&Extension,proto3" json:"extension,omitempty" aper:"canonicalOrder,"`
}

func (x *DrbsToBeSetupListSetupMNterminatedItemExtIes) Reset() {
	*x = DrbsToBeSetupListSetupMNterminatedItemExtIes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[525]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DrbsToBeSetupListSetupMNterminatedItemExtIes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DrbsToBeSetupListSetupMNterminatedItemExtIes) ProtoMessage() {}

func (x *DrbsToBeSetupListSetupMNterminatedItemExtIes) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[525]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DrbsToBeSetupListSetupMNterminatedItemExtIes.ProtoReflect.Descriptor instead.
func (*DrbsToBeSetupListSetupMNterminatedItemExtIes) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{525}
}

func (x *DrbsToBeSetupListSetupMNterminatedItemExtIes) GetId() *xnap_commondatatypes.ProtocolIeID {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *DrbsToBeSetupListSetupMNterminatedItemExtIes) GetCriticality() xnap_commondatatypes.Criticality {
	if x != nil {
		return x.Criticality
	}
	return xnap_commondatatypes.Criticality(0)
}

func (x *DrbsToBeSetupListSetupMNterminatedItemExtIes) GetExtension() *DrbsToBeSetupListSetupMNterminatedItemExtIesExtension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// sequence from xnap_v1.asn1:6273
// @inject_tag: aper:"valueExt"
// {DRBsToBeSetupList-Setup-MNterminated-Item}
type DrbsToBeSetupListSetupMNterminatedItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DrbId             *DrbID                 `protobuf:"bytes,1,opt,name=drb_id,json=drb-ID,proto3" json:"drb_id,omitempty"`
	MNUlPdcpUpTnlinfo *UptransportParameters `protobuf:"bytes,2,opt,name=m_n_ul_pdcp_up_tnlinfo,json=mN-UL-PDCP-UP-TNLInfo,proto3" json:"m_n_ul_pdcp_up_tnlinfo,omitempty"`
	// @inject_tag: aper:"valueExt,valueLB:0,valueUB:3,"
	RLcMode Rlcmode `protobuf:"varint,3,opt,name=r_lc_mode,json=rLC-Mode,proto3,enum=xnap.v1.Rlcmode" json:"r_lc_mode,omitempty" aper:"valueExt,valueLB:0,valueUB:3,"`
	// @inject_tag: aper:"optional,valueExt,"
	ULConfiguration *Ulconfiguration `protobuf:"bytes,4,opt,name=u_l_configuration,json=uL-Configuration,proto3,oneof" json:"u_l_configuration,omitempty" aper:"optional,valueExt,"`
	// @inject_tag: aper:"valueExt,"
	DRbQoS *QoSflowLevelQoSparameters `protobuf:"bytes,5,opt,name=d_rb_qo_s,json=dRB-QoS,proto3" json:"d_rb_qo_s,omitempty" aper:"valueExt,"`
	// @inject_tag: aper:"optional,valueExt,"
	PDcpSnlength *Pdcpsnlength `protobuf:"bytes,6,opt,name=p_dcp_snlength,json=pDCP-SNLength,proto3,oneof" json:"p_dcp_snlength,omitempty" aper:"optional,valueExt,"`
	// @inject_tag: aper:"optional,"
	SecondaryMnUlPdcpUpTnlinfo *UptransportParameters `protobuf:"bytes,7,opt,name=secondary_mn_ul_pdcp_up_tnlinfo,json=secondary-MN-UL-PDCP-UP-TNLInfo,proto3,oneof" json:"secondary_mn_ul_pdcp_up_tnlinfo,omitempty" aper:"optional,"`
	// @inject_tag: aper:"optional,valueExt,valueLB:0,valueUB:1,"
	DuplicationActivation                *DuplicationActivation                `protobuf:"varint,8,opt,name=duplication_activation,json=duplicationActivation,proto3,enum=xnap.v1.DuplicationActivation,oneof" json:"duplication_activation,omitempty" aper:"optional,valueExt,valueLB:0,valueUB:1,"`
	QoSflowsMappedtoDrbSetupMnterminated *QoSflowsMappedtoDrbSetupMNterminated `protobuf:"bytes,9,opt,name=qo_sflows_mappedto_drb_setup_mnterminated,json=qoSFlowsMappedtoDRB-Setup-MNterminated,proto3" json:"qo_sflows_mappedto_drb_setup_mnterminated,omitempty"`
	// @inject_tag: aper:"optional,sizeLB:1,"
	IEExtensions []*DrbsToBeSetupListSetupMNterminatedItemExtIes `protobuf:"bytes,10,rep,name=i_e_extensions,json=iE-Extensions,proto3" json:"i_e_extensions,omitempty" aper:"optional,sizeLB:1,"`
}

func (x *DrbsToBeSetupListSetupMNterminatedItem) Reset() {
	*x = DrbsToBeSetupListSetupMNterminatedItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[526]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DrbsToBeSetupListSetupMNterminatedItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DrbsToBeSetupListSetupMNterminatedItem) ProtoMessage() {}

func (x *DrbsToBeSetupListSetupMNterminatedItem) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[526]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DrbsToBeSetupListSetupMNterminatedItem.ProtoReflect.Descriptor instead.
func (*DrbsToBeSetupListSetupMNterminatedItem) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{526}
}

func (x *DrbsToBeSetupListSetupMNterminatedItem) GetDrbId() *DrbID {
	if x != nil {
		return x.DrbId
	}
	return nil
}

func (x *DrbsToBeSetupListSetupMNterminatedItem) GetMNUlPdcpUpTnlinfo() *UptransportParameters {
	if x != nil {
		return x.MNUlPdcpUpTnlinfo
	}
	return nil
}

func (x *DrbsToBeSetupListSetupMNterminatedItem) GetRLcMode() Rlcmode {
	if x != nil {
		return x.RLcMode
	}
	return Rlcmode_RLCMODE_RLC_AM
}

func (x *DrbsToBeSetupListSetupMNterminatedItem) GetULConfiguration() *Ulconfiguration {
	if x != nil {
		return x.ULConfiguration
	}
	return nil
}

func (x *DrbsToBeSetupListSetupMNterminatedItem) GetDRbQoS() *QoSflowLevelQoSparameters {
	if x != nil {
		return x.DRbQoS
	}
	return nil
}

func (x *DrbsToBeSetupListSetupMNterminatedItem) GetPDcpSnlength() *Pdcpsnlength {
	if x != nil {
		return x.PDcpSnlength
	}
	return nil
}

func (x *DrbsToBeSetupListSetupMNterminatedItem) GetSecondaryMnUlPdcpUpTnlinfo() *UptransportParameters {
	if x != nil {
		return x.SecondaryMnUlPdcpUpTnlinfo
	}
	return nil
}

func (x *DrbsToBeSetupListSetupMNterminatedItem) GetDuplicationActivation() DuplicationActivation {
	if x != nil && x.DuplicationActivation != nil {
		return *x.DuplicationActivation
	}
	return DuplicationActivation_DUPLICATION_ACTIVATION_ACTIVE
}

func (x *DrbsToBeSetupListSetupMNterminatedItem) GetQoSflowsMappedtoDrbSetupMnterminated() *QoSflowsMappedtoDrbSetupMNterminated {
	if x != nil {
		return x.QoSflowsMappedtoDrbSetupMnterminated
	}
	return nil
}

func (x *DrbsToBeSetupListSetupMNterminatedItem) GetIEExtensions() []*DrbsToBeSetupListSetupMNterminatedItemExtIes {
	if x != nil {
		return x.IEExtensions
	}
	return nil
}

// sequence from xnap_v1.asn1:6294
// {QoSFlowsMappedtoDRB-Setup-MNterminated}
type QoSflowsMappedtoDrbSetupMNterminated struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"valueExt,sizeLB:1,sizeUB:64,"
	Value []*QoSflowsMappedtoDrbSetupMNterminatedItem `protobuf:"bytes,1,rep,name=value,proto3" json:"value,omitempty" aper:"valueExt,sizeLB:1,sizeUB:64,"`
}

func (x *QoSflowsMappedtoDrbSetupMNterminated) Reset() {
	*x = QoSflowsMappedtoDrbSetupMNterminated{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[527]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QoSflowsMappedtoDrbSetupMNterminated) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QoSflowsMappedtoDrbSetupMNterminated) ProtoMessage() {}

func (x *QoSflowsMappedtoDrbSetupMNterminated) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[527]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QoSflowsMappedtoDrbSetupMNterminated.ProtoReflect.Descriptor instead.
func (*QoSflowsMappedtoDrbSetupMNterminated) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{527}
}

func (x *QoSflowsMappedtoDrbSetupMNterminated) GetValue() []*QoSflowsMappedtoDrbSetupMNterminatedItem {
	if x != nil {
		return x.Value
	}
	return nil
}

// value set from xnap_v1.asn1:6302
// {QoSFlowsMappedtoDRB-Setup-MNterminated-Item-ExtIEs}
type QoSflowsMappedtoDrbSetupMNterminatedItemExtIes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *emptypb.Empty `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *QoSflowsMappedtoDrbSetupMNterminatedItemExtIes) Reset() {
	*x = QoSflowsMappedtoDrbSetupMNterminatedItemExtIes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[528]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QoSflowsMappedtoDrbSetupMNterminatedItemExtIes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QoSflowsMappedtoDrbSetupMNterminatedItemExtIes) ProtoMessage() {}

func (x *QoSflowsMappedtoDrbSetupMNterminatedItemExtIes) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[528]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QoSflowsMappedtoDrbSetupMNterminatedItemExtIes.ProtoReflect.Descriptor instead.
func (*QoSflowsMappedtoDrbSetupMNterminatedItemExtIes) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{528}
}

func (x *QoSflowsMappedtoDrbSetupMNterminatedItemExtIes) GetValue() *emptypb.Empty {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:6295
// @inject_tag: aper:"valueExt"
// {QoSFlowsMappedtoDRB-Setup-MNterminated-Item}
type QoSflowsMappedtoDrbSetupMNterminatedItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	QoSflowIdentifier *QoSflowIdentifier `protobuf:"bytes,1,opt,name=qo_sflow_identifier,json=qoSFlowIdentifier,proto3" json:"qo_sflow_identifier,omitempty"`
	// @inject_tag: aper:"valueExt,"
	QoSflowLevelQoSparameters *QoSflowLevelQoSparameters `protobuf:"bytes,2,opt,name=qo_sflow_level_qo_sparameters,json=qoSFlowLevelQoSParameters,proto3" json:"qo_sflow_level_qo_sparameters,omitempty" aper:"valueExt,"`
	// @inject_tag: aper:"optional,valueExt,valueLB:0,valueUB:1,"
	QosFlowMappingIndication *QoSflowMappingIndication `protobuf:"varint,3,opt,name=qos_flow_mapping_indication,json=qosFlowMappingIndication,proto3,enum=xnap.v1.QoSflowMappingIndication,oneof" json:"qos_flow_mapping_indication,omitempty" aper:"optional,valueExt,valueLB:0,valueUB:1,"`
	// @inject_tag: aper:"optional,sizeLB:1,"
	IEExtensions []*QoSflowsMappedtoDrbSetupMNterminatedItemExtIes `protobuf:"bytes,4,rep,name=i_e_extensions,json=iE-Extensions,proto3" json:"i_e_extensions,omitempty" aper:"optional,sizeLB:1,"`
}

func (x *QoSflowsMappedtoDrbSetupMNterminatedItem) Reset() {
	*x = QoSflowsMappedtoDrbSetupMNterminatedItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[529]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QoSflowsMappedtoDrbSetupMNterminatedItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QoSflowsMappedtoDrbSetupMNterminatedItem) ProtoMessage() {}

func (x *QoSflowsMappedtoDrbSetupMNterminatedItem) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[529]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QoSflowsMappedtoDrbSetupMNterminatedItem.ProtoReflect.Descriptor instead.
func (*QoSflowsMappedtoDrbSetupMNterminatedItem) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{529}
}

func (x *QoSflowsMappedtoDrbSetupMNterminatedItem) GetQoSflowIdentifier() *QoSflowIdentifier {
	if x != nil {
		return x.QoSflowIdentifier
	}
	return nil
}

func (x *QoSflowsMappedtoDrbSetupMNterminatedItem) GetQoSflowLevelQoSparameters() *QoSflowLevelQoSparameters {
	if x != nil {
		return x.QoSflowLevelQoSparameters
	}
	return nil
}

func (x *QoSflowsMappedtoDrbSetupMNterminatedItem) GetQosFlowMappingIndication() QoSflowMappingIndication {
	if x != nil && x.QosFlowMappingIndication != nil {
		return *x.QosFlowMappingIndication
	}
	return QoSflowMappingIndication_QO_SFLOW_MAPPING_INDICATION_UL
}

func (x *QoSflowsMappedtoDrbSetupMNterminatedItem) GetIEExtensions() []*QoSflowsMappedtoDrbSetupMNterminatedItemExtIes {
	if x != nil {
		return x.IEExtensions
	}
	return nil
}

// value set from xnap_v1.asn1:6321
// {PDUSessionResourceSetupResponseInfo-MNterminated-ExtIEs}
type PdusessionResourceSetupResponseInfoMNterminatedExtIes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *emptypb.Empty `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *PdusessionResourceSetupResponseInfoMNterminatedExtIes) Reset() {
	*x = PdusessionResourceSetupResponseInfoMNterminatedExtIes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[530]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PdusessionResourceSetupResponseInfoMNterminatedExtIes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PdusessionResourceSetupResponseInfoMNterminatedExtIes) ProtoMessage() {}

func (x *PdusessionResourceSetupResponseInfoMNterminatedExtIes) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[530]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PdusessionResourceSetupResponseInfoMNterminatedExtIes.ProtoReflect.Descriptor instead.
func (*PdusessionResourceSetupResponseInfoMNterminatedExtIes) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{530}
}

func (x *PdusessionResourceSetupResponseInfoMNterminatedExtIes) GetValue() *emptypb.Empty {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:6316
// @inject_tag: aper:"valueExt"
// {PDUSessionResourceSetupResponseInfo-MNterminated}
type PdusessionResourceSetupResponseInfoMNterminated struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DRbsAdmittedList *DrbsAdmittedListSetupResponseMNterminated `protobuf:"bytes,1,opt,name=d_rbs_admitted_list,json=dRBsAdmittedList,proto3" json:"d_rbs_admitted_list,omitempty"`
	// @inject_tag: aper:"optional,sizeLB:1,"
	IEExtensions []*PdusessionResourceSetupResponseInfoMNterminatedExtIes `protobuf:"bytes,2,rep,name=i_e_extensions,json=iE-Extensions,proto3" json:"i_e_extensions,omitempty" aper:"optional,sizeLB:1,"`
}

func (x *PdusessionResourceSetupResponseInfoMNterminated) Reset() {
	*x = PdusessionResourceSetupResponseInfoMNterminated{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[531]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PdusessionResourceSetupResponseInfoMNterminated) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PdusessionResourceSetupResponseInfoMNterminated) ProtoMessage() {}

func (x *PdusessionResourceSetupResponseInfoMNterminated) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[531]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PdusessionResourceSetupResponseInfoMNterminated.ProtoReflect.Descriptor instead.
func (*PdusessionResourceSetupResponseInfoMNterminated) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{531}
}

func (x *PdusessionResourceSetupResponseInfoMNterminated) GetDRbsAdmittedList() *DrbsAdmittedListSetupResponseMNterminated {
	if x != nil {
		return x.DRbsAdmittedList
	}
	return nil
}

func (x *PdusessionResourceSetupResponseInfoMNterminated) GetIEExtensions() []*PdusessionResourceSetupResponseInfoMNterminatedExtIes {
	if x != nil {
		return x.IEExtensions
	}
	return nil
}

// sequence from xnap_v1.asn1:6328
// {DRBsAdmittedList-SetupResponse-MNterminated}
type DrbsAdmittedListSetupResponseMNterminated struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"valueExt,sizeLB:1,sizeUB:32,"
	Value []*DrbsAdmittedListSetupResponseMNterminatedItem `protobuf:"bytes,1,rep,name=value,proto3" json:"value,omitempty" aper:"valueExt,sizeLB:1,sizeUB:32,"`
}

func (x *DrbsAdmittedListSetupResponseMNterminated) Reset() {
	*x = DrbsAdmittedListSetupResponseMNterminated{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[532]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DrbsAdmittedListSetupResponseMNterminated) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DrbsAdmittedListSetupResponseMNterminated) ProtoMessage() {}

func (x *DrbsAdmittedListSetupResponseMNterminated) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[532]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DrbsAdmittedListSetupResponseMNterminated.ProtoReflect.Descriptor instead.
func (*DrbsAdmittedListSetupResponseMNterminated) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{532}
}

func (x *DrbsAdmittedListSetupResponseMNterminated) GetValue() []*DrbsAdmittedListSetupResponseMNterminatedItem {
	if x != nil {
		return x.Value
	}
	return nil
}

// value set from xnap_v1.asn1:6337
// {DRBsAdmittedList-SetupResponse-MNterminated-Item-ExtIEs&Extension}
type DrbsAdmittedListSetupResponseMNterminatedItemExtIesExtension struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// value set translated as choice from xnap_v1.asn1:6337
	//
	// Types that are assignable to DrbsAdmittedListSetupResponseMnterminatedItemExtIes:
	//	*DrbsAdmittedListSetupResponseMNterminatedItemExtIesExtension_IdAdditionalPdcpDuplicationTnlList
	//	*DrbsAdmittedListSetupResponseMNterminatedItemExtIesExtension_IdQoSflowsMappedtoDrbSetupResponseMnterminated
	DrbsAdmittedListSetupResponseMnterminatedItemExtIes isDrbsAdmittedListSetupResponseMNterminatedItemExtIesExtension_DrbsAdmittedListSetupResponseMnterminatedItemExtIes `protobuf_oneof:"drbs_admitted_list_setup_response_mnterminated_item_ext_ies"`
}

func (x *DrbsAdmittedListSetupResponseMNterminatedItemExtIesExtension) Reset() {
	*x = DrbsAdmittedListSetupResponseMNterminatedItemExtIesExtension{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[533]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DrbsAdmittedListSetupResponseMNterminatedItemExtIesExtension) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DrbsAdmittedListSetupResponseMNterminatedItemExtIesExtension) ProtoMessage() {}

func (x *DrbsAdmittedListSetupResponseMNterminatedItemExtIesExtension) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[533]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DrbsAdmittedListSetupResponseMNterminatedItemExtIesExtension.ProtoReflect.Descriptor instead.
func (*DrbsAdmittedListSetupResponseMNterminatedItemExtIesExtension) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{533}
}

func (m *DrbsAdmittedListSetupResponseMNterminatedItemExtIesExtension) GetDrbsAdmittedListSetupResponseMnterminatedItemExtIes() isDrbsAdmittedListSetupResponseMNterminatedItemExtIesExtension_DrbsAdmittedListSetupResponseMnterminatedItemExtIes {
	if m != nil {
		return m.DrbsAdmittedListSetupResponseMnterminatedItemExtIes
	}
	return nil
}

func (x *DrbsAdmittedListSetupResponseMNterminatedItemExtIesExtension) GetIdAdditionalPdcpDuplicationTnlList() *AdditionalPDcpDuplicationTNlList {
	if x, ok := x.GetDrbsAdmittedListSetupResponseMnterminatedItemExtIes().(*DrbsAdmittedListSetupResponseMNterminatedItemExtIesExtension_IdAdditionalPdcpDuplicationTnlList); ok {
		return x.IdAdditionalPdcpDuplicationTnlList
	}
	return nil
}

func (x *DrbsAdmittedListSetupResponseMNterminatedItemExtIesExtension) GetIdQoSflowsMappedtoDrbSetupResponseMnterminated() *QoSflowsMappedtoDrbSetupResponseMNterminated {
	if x, ok := x.GetDrbsAdmittedListSetupResponseMnterminatedItemExtIes().(*DrbsAdmittedListSetupResponseMNterminatedItemExtIesExtension_IdQoSflowsMappedtoDrbSetupResponseMnterminated); ok {
		return x.IdQoSflowsMappedtoDrbSetupResponseMnterminated
	}
	return nil
}

type isDrbsAdmittedListSetupResponseMNterminatedItemExtIesExtension_DrbsAdmittedListSetupResponseMnterminatedItemExtIes interface {
	isDrbsAdmittedListSetupResponseMNterminatedItemExtIesExtension_DrbsAdmittedListSetupResponseMnterminatedItemExtIes()
}

type DrbsAdmittedListSetupResponseMNterminatedItemExtIesExtension_IdAdditionalPdcpDuplicationTnlList struct {
	// @inject_tag: aper:"choiceIdx:1,"
	IdAdditionalPdcpDuplicationTnlList *AdditionalPDcpDuplicationTNlList `protobuf:"bytes,1,opt,name=id_additional_pdcp_duplication_tnl_list,json=id-Additional-PDCP-Duplication-TNL-List,proto3,oneof" aper:"choiceIdx:1,"`
}

type DrbsAdmittedListSetupResponseMNterminatedItemExtIesExtension_IdQoSflowsMappedtoDrbSetupResponseMnterminated struct {
	// @inject_tag: aper:"choiceIdx:2,"
	IdQoSflowsMappedtoDrbSetupResponseMnterminated *QoSflowsMappedtoDrbSetupResponseMNterminated `protobuf:"bytes,2,opt,name=id_qo_sflows_mappedto_drb_setup_response_mnterminated,json=id-QoSFlowsMappedtoDRB-SetupResponse-MNterminated,proto3,oneof" aper:"choiceIdx:2,"`
}

func (*DrbsAdmittedListSetupResponseMNterminatedItemExtIesExtension_IdAdditionalPdcpDuplicationTnlList) isDrbsAdmittedListSetupResponseMNterminatedItemExtIesExtension_DrbsAdmittedListSetupResponseMnterminatedItemExtIes() {
}

func (*DrbsAdmittedListSetupResponseMNterminatedItemExtIesExtension_IdQoSflowsMappedtoDrbSetupResponseMnterminated) isDrbsAdmittedListSetupResponseMNterminatedItemExtIesExtension_DrbsAdmittedListSetupResponseMnterminatedItemExtIes() {
}

// concrete instance(s) of class XNAP-PROTOCOL-EXTENSION from xnap_v1.asn1:6337
// @inject_tag: aper:"valueExt"
// {DRBsAdmittedList-SetupResponse-MNterminated-Item-ExtIEs}
type DrbsAdmittedListSetupResponseMNterminatedItemExtIes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"unique,"
	Id *xnap_commondatatypes.ProtocolIeID `protobuf:"bytes,1,opt,name=id,json=&id,proto3" json:"id,omitempty" aper:"unique,"`
	// @inject_tag: aper:"valueLB:0,valueUB:2,"
	Criticality xnap_commondatatypes.Criticality `protobuf:"varint,2,opt,name=criticality,json=&criticality,proto3,enum=xnap.v1.Criticality" json:"criticality,omitempty" aper:"valueLB:0,valueUB:2,"`
	// @inject_tag: aper:"canonicalOrder,"
	Extension *DrbsAdmittedListSetupResponseMNterminatedItemExtIesExtension `protobuf:"bytes,3,opt,name=extension,json=&Extension,proto3" json:"extension,omitempty" aper:"canonicalOrder,"`
}

func (x *DrbsAdmittedListSetupResponseMNterminatedItemExtIes) Reset() {
	*x = DrbsAdmittedListSetupResponseMNterminatedItemExtIes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[534]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DrbsAdmittedListSetupResponseMNterminatedItemExtIes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DrbsAdmittedListSetupResponseMNterminatedItemExtIes) ProtoMessage() {}

func (x *DrbsAdmittedListSetupResponseMNterminatedItemExtIes) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[534]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DrbsAdmittedListSetupResponseMNterminatedItemExtIes.ProtoReflect.Descriptor instead.
func (*DrbsAdmittedListSetupResponseMNterminatedItemExtIes) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{534}
}

func (x *DrbsAdmittedListSetupResponseMNterminatedItemExtIes) GetId() *xnap_commondatatypes.ProtocolIeID {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *DrbsAdmittedListSetupResponseMNterminatedItemExtIes) GetCriticality() xnap_commondatatypes.Criticality {
	if x != nil {
		return x.Criticality
	}
	return xnap_commondatatypes.Criticality(0)
}

func (x *DrbsAdmittedListSetupResponseMNterminatedItemExtIes) GetExtension() *DrbsAdmittedListSetupResponseMNterminatedItemExtIesExtension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// sequence from xnap_v1.asn1:6329
// @inject_tag: aper:"valueExt"
// {DRBsAdmittedList-SetupResponse-MNterminated-Item}
type DrbsAdmittedListSetupResponseMNterminatedItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DrbId            *DrbID                 `protobuf:"bytes,1,opt,name=drb_id,json=drb-ID,proto3" json:"drb_id,omitempty"`
	SNDlScgUpTnlinfo *UptransportParameters `protobuf:"bytes,2,opt,name=s_n_dl_scg_up_tnlinfo,json=sN-DL-SCG-UP-TNLInfo,proto3" json:"s_n_dl_scg_up_tnlinfo,omitempty"`
	// @inject_tag: aper:"optional,"
	SecondarySnDlScgUpTnlinfo *UptransportParameters `protobuf:"bytes,3,opt,name=secondary_sn_dl_scg_up_tnlinfo,json=secondary-SN-DL-SCG-UP-TNLInfo,proto3,oneof" json:"secondary_sn_dl_scg_up_tnlinfo,omitempty" aper:"optional,"`
	// @inject_tag: aper:"optional,"
	LCid *Lcid `protobuf:"bytes,4,opt,name=l_cid,json=lCID,proto3,oneof" json:"l_cid,omitempty" aper:"optional,"`
	// @inject_tag: aper:"optional,sizeLB:1,"
	IEExtensions []*DrbsAdmittedListSetupResponseMNterminatedItemExtIes `protobuf:"bytes,5,rep,name=i_e_extensions,json=iE-Extensions,proto3" json:"i_e_extensions,omitempty" aper:"optional,sizeLB:1,"`
}

func (x *DrbsAdmittedListSetupResponseMNterminatedItem) Reset() {
	*x = DrbsAdmittedListSetupResponseMNterminatedItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[535]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DrbsAdmittedListSetupResponseMNterminatedItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DrbsAdmittedListSetupResponseMNterminatedItem) ProtoMessage() {}

func (x *DrbsAdmittedListSetupResponseMNterminatedItem) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[535]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DrbsAdmittedListSetupResponseMNterminatedItem.ProtoReflect.Descriptor instead.
func (*DrbsAdmittedListSetupResponseMNterminatedItem) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{535}
}

func (x *DrbsAdmittedListSetupResponseMNterminatedItem) GetDrbId() *DrbID {
	if x != nil {
		return x.DrbId
	}
	return nil
}

func (x *DrbsAdmittedListSetupResponseMNterminatedItem) GetSNDlScgUpTnlinfo() *UptransportParameters {
	if x != nil {
		return x.SNDlScgUpTnlinfo
	}
	return nil
}

func (x *DrbsAdmittedListSetupResponseMNterminatedItem) GetSecondarySnDlScgUpTnlinfo() *UptransportParameters {
	if x != nil {
		return x.SecondarySnDlScgUpTnlinfo
	}
	return nil
}

func (x *DrbsAdmittedListSetupResponseMNterminatedItem) GetLCid() *Lcid {
	if x != nil {
		return x.LCid
	}
	return nil
}

func (x *DrbsAdmittedListSetupResponseMNterminatedItem) GetIEExtensions() []*DrbsAdmittedListSetupResponseMNterminatedItemExtIes {
	if x != nil {
		return x.IEExtensions
	}
	return nil
}

// sequence from xnap_v1.asn1:6345
// {QoSFlowsMappedtoDRB-SetupResponse-MNterminated}
type QoSflowsMappedtoDrbSetupResponseMNterminated struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"valueExt,sizeLB:1,sizeUB:64,"
	Value []*QoSflowsMappedtoDrbSetupResponseMNterminatedItem `protobuf:"bytes,1,rep,name=value,proto3" json:"value,omitempty" aper:"valueExt,sizeLB:1,sizeUB:64,"`
}

func (x *QoSflowsMappedtoDrbSetupResponseMNterminated) Reset() {
	*x = QoSflowsMappedtoDrbSetupResponseMNterminated{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[536]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QoSflowsMappedtoDrbSetupResponseMNterminated) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QoSflowsMappedtoDrbSetupResponseMNterminated) ProtoMessage() {}

func (x *QoSflowsMappedtoDrbSetupResponseMNterminated) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[536]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QoSflowsMappedtoDrbSetupResponseMNterminated.ProtoReflect.Descriptor instead.
func (*QoSflowsMappedtoDrbSetupResponseMNterminated) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{536}
}

func (x *QoSflowsMappedtoDrbSetupResponseMNterminated) GetValue() []*QoSflowsMappedtoDrbSetupResponseMNterminatedItem {
	if x != nil {
		return x.Value
	}
	return nil
}

// value set from xnap_v1.asn1:6352
// {QoSFlowsMappedtoDRB-SetupResponse-MNterminated-Item-ExtIEs}
type QoSflowsMappedtoDrbSetupResponseMNterminatedItemExtIes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *emptypb.Empty `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *QoSflowsMappedtoDrbSetupResponseMNterminatedItemExtIes) Reset() {
	*x = QoSflowsMappedtoDrbSetupResponseMNterminatedItemExtIes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[537]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QoSflowsMappedtoDrbSetupResponseMNterminatedItemExtIes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QoSflowsMappedtoDrbSetupResponseMNterminatedItemExtIes) ProtoMessage() {}

func (x *QoSflowsMappedtoDrbSetupResponseMNterminatedItemExtIes) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[537]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QoSflowsMappedtoDrbSetupResponseMNterminatedItemExtIes.ProtoReflect.Descriptor instead.
func (*QoSflowsMappedtoDrbSetupResponseMNterminatedItemExtIes) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{537}
}

func (x *QoSflowsMappedtoDrbSetupResponseMNterminatedItemExtIes) GetValue() *emptypb.Empty {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:6346
// @inject_tag: aper:"valueExt"
// {QoSFlowsMappedtoDRB-SetupResponse-MNterminated-Item}
type QoSflowsMappedtoDrbSetupResponseMNterminatedItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	QoSflowIdentifier      *QoSflowIdentifier `protobuf:"bytes,1,opt,name=qo_sflow_identifier,json=qoSFlowIdentifier,proto3" json:"qo_sflow_identifier,omitempty"`
	CurrentQoSparaSetIndex *QoSparaSetIndex   `protobuf:"bytes,2,opt,name=current_qo_spara_set_index,json=currentQoSParaSetIndex,proto3" json:"current_qo_spara_set_index,omitempty"`
	// @inject_tag: aper:"optional,sizeLB:1,"
	IEExtensions []*QoSflowsMappedtoDrbSetupResponseMNterminatedItemExtIes `protobuf:"bytes,3,rep,name=i_e_extensions,json=iE-Extensions,proto3" json:"i_e_extensions,omitempty" aper:"optional,sizeLB:1,"`
}

func (x *QoSflowsMappedtoDrbSetupResponseMNterminatedItem) Reset() {
	*x = QoSflowsMappedtoDrbSetupResponseMNterminatedItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[538]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QoSflowsMappedtoDrbSetupResponseMNterminatedItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QoSflowsMappedtoDrbSetupResponseMNterminatedItem) ProtoMessage() {}

func (x *QoSflowsMappedtoDrbSetupResponseMNterminatedItem) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[538]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QoSflowsMappedtoDrbSetupResponseMNterminatedItem.ProtoReflect.Descriptor instead.
func (*QoSflowsMappedtoDrbSetupResponseMNterminatedItem) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{538}
}

func (x *QoSflowsMappedtoDrbSetupResponseMNterminatedItem) GetQoSflowIdentifier() *QoSflowIdentifier {
	if x != nil {
		return x.QoSflowIdentifier
	}
	return nil
}

func (x *QoSflowsMappedtoDrbSetupResponseMNterminatedItem) GetCurrentQoSparaSetIndex() *QoSparaSetIndex {
	if x != nil {
		return x.CurrentQoSparaSetIndex
	}
	return nil
}

func (x *QoSflowsMappedtoDrbSetupResponseMNterminatedItem) GetIEExtensions() []*QoSflowsMappedtoDrbSetupResponseMNterminatedItemExtIes {
	if x != nil {
		return x.IEExtensions
	}
	return nil
}

// value set from xnap_v1.asn1:6377
// {PDUSessionResourceModificationInfo-SNterminated-ExtIEs&Extension}
type PdusessionResourceModificationInfoSNterminatedExtIesExtension struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// value set translated as choice from xnap_v1.asn1:6377
	//
	// Types that are assignable to PdusessionResourceModificationInfoSnterminatedExtIes:
	//	*PdusessionResourceModificationInfoSNterminatedExtIesExtension_IdPdusessionCommonNetworkInstance
	//	*PdusessionResourceModificationInfoSNterminatedExtIesExtension_IdDefaultDrbAllowed
	//	*PdusessionResourceModificationInfoSNterminatedExtIesExtension_IdNonGbrresourcesOffered
	//	*PdusessionResourceModificationInfoSNterminatedExtIesExtension_IdRedundantUlNgUTnlatUpf
	//	*PdusessionResourceModificationInfoSNterminatedExtIesExtension_IdRedundantCommonNetworkInstance
	//	*PdusessionResourceModificationInfoSNterminatedExtIesExtension_IdSecurityIndication
	PdusessionResourceModificationInfoSnterminatedExtIes isPdusessionResourceModificationInfoSNterminatedExtIesExtension_PdusessionResourceModificationInfoSnterminatedExtIes `protobuf_oneof:"pdusession_resource_modification_info_snterminated_ext_ies"`
}

func (x *PdusessionResourceModificationInfoSNterminatedExtIesExtension) Reset() {
	*x = PdusessionResourceModificationInfoSNterminatedExtIesExtension{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[539]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PdusessionResourceModificationInfoSNterminatedExtIesExtension) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PdusessionResourceModificationInfoSNterminatedExtIesExtension) ProtoMessage() {}

func (x *PdusessionResourceModificationInfoSNterminatedExtIesExtension) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[539]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PdusessionResourceModificationInfoSNterminatedExtIesExtension.ProtoReflect.Descriptor instead.
func (*PdusessionResourceModificationInfoSNterminatedExtIesExtension) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{539}
}

func (m *PdusessionResourceModificationInfoSNterminatedExtIesExtension) GetPdusessionResourceModificationInfoSnterminatedExtIes() isPdusessionResourceModificationInfoSNterminatedExtIesExtension_PdusessionResourceModificationInfoSnterminatedExtIes {
	if m != nil {
		return m.PdusessionResourceModificationInfoSnterminatedExtIes
	}
	return nil
}

func (x *PdusessionResourceModificationInfoSNterminatedExtIesExtension) GetIdPdusessionCommonNetworkInstance() *PdusessionCommonNetworkInstance {
	if x, ok := x.GetPdusessionResourceModificationInfoSnterminatedExtIes().(*PdusessionResourceModificationInfoSNterminatedExtIesExtension_IdPdusessionCommonNetworkInstance); ok {
		return x.IdPdusessionCommonNetworkInstance
	}
	return nil
}

func (x *PdusessionResourceModificationInfoSNterminatedExtIesExtension) GetIdDefaultDrbAllowed() DefaultDrbAllowed {
	if x, ok := x.GetPdusessionResourceModificationInfoSnterminatedExtIes().(*PdusessionResourceModificationInfoSNterminatedExtIesExtension_IdDefaultDrbAllowed); ok {
		return x.IdDefaultDrbAllowed
	}
	return DefaultDrbAllowed_DEFAULT_DRB_ALLOWED_TRUE
}

func (x *PdusessionResourceModificationInfoSNterminatedExtIesExtension) GetIdNonGbrresourcesOffered() NonGbrresourcesOffered {
	if x, ok := x.GetPdusessionResourceModificationInfoSnterminatedExtIes().(*PdusessionResourceModificationInfoSNterminatedExtIesExtension_IdNonGbrresourcesOffered); ok {
		return x.IdNonGbrresourcesOffered
	}
	return NonGbrresourcesOffered_NON_GBRRESOURCES_OFFERED_TRUE
}

func (x *PdusessionResourceModificationInfoSNterminatedExtIesExtension) GetIdRedundantUlNgUTnlatUpf() *UptransportLayerInformation {
	if x, ok := x.GetPdusessionResourceModificationInfoSnterminatedExtIes().(*PdusessionResourceModificationInfoSNterminatedExtIesExtension_IdRedundantUlNgUTnlatUpf); ok {
		return x.IdRedundantUlNgUTnlatUpf
	}
	return nil
}

func (x *PdusessionResourceModificationInfoSNterminatedExtIesExtension) GetIdRedundantCommonNetworkInstance() *PdusessionCommonNetworkInstance {
	if x, ok := x.GetPdusessionResourceModificationInfoSnterminatedExtIes().(*PdusessionResourceModificationInfoSNterminatedExtIesExtension_IdRedundantCommonNetworkInstance); ok {
		return x.IdRedundantCommonNetworkInstance
	}
	return nil
}

func (x *PdusessionResourceModificationInfoSNterminatedExtIesExtension) GetIdSecurityIndication() *SecurityIndication {
	if x, ok := x.GetPdusessionResourceModificationInfoSnterminatedExtIes().(*PdusessionResourceModificationInfoSNterminatedExtIesExtension_IdSecurityIndication); ok {
		return x.IdSecurityIndication
	}
	return nil
}

type isPdusessionResourceModificationInfoSNterminatedExtIesExtension_PdusessionResourceModificationInfoSnterminatedExtIes interface {
	isPdusessionResourceModificationInfoSNterminatedExtIesExtension_PdusessionResourceModificationInfoSnterminatedExtIes()
}

type PdusessionResourceModificationInfoSNterminatedExtIesExtension_IdPdusessionCommonNetworkInstance struct {
	// @inject_tag: aper:"choiceIdx:1,"
	IdPdusessionCommonNetworkInstance *PdusessionCommonNetworkInstance `protobuf:"bytes,1,opt,name=id_pdusession_common_network_instance,json=id-PDUSessionCommonNetworkInstance,proto3,oneof" aper:"choiceIdx:1,"`
}

type PdusessionResourceModificationInfoSNterminatedExtIesExtension_IdDefaultDrbAllowed struct {
	// @inject_tag: aper:"choiceIdx:2,valueExt,valueLB:0,valueUB:1,"
	IdDefaultDrbAllowed DefaultDrbAllowed `protobuf:"varint,2,opt,name=id_default_drb_allowed,json=id-DefaultDRB-Allowed,proto3,enum=xnap.v1.DefaultDrbAllowed,oneof" aper:"choiceIdx:2,valueExt,valueLB:0,valueUB:1,"`
}

type PdusessionResourceModificationInfoSNterminatedExtIesExtension_IdNonGbrresourcesOffered struct {
	// @inject_tag: aper:"choiceIdx:3,valueExt,valueLB:0,valueUB:0,"
	IdNonGbrresourcesOffered NonGbrresourcesOffered `protobuf:"varint,3,opt,name=id_non_gbrresources_offered,json=id-NonGBRResources-Offered,proto3,enum=xnap.v1.NonGbrresourcesOffered,oneof" aper:"choiceIdx:3,valueExt,valueLB:0,valueUB:0,"`
}

type PdusessionResourceModificationInfoSNterminatedExtIesExtension_IdRedundantUlNgUTnlatUpf struct {
	// @inject_tag: aper:"choiceIdx:4,"
	IdRedundantUlNgUTnlatUpf *UptransportLayerInformation `protobuf:"bytes,4,opt,name=id_redundant_ul_ng_u_tnlat_upf,json=id-Redundant-UL-NG-U-TNLatUPF,proto3,oneof" aper:"choiceIdx:4,"`
}

type PdusessionResourceModificationInfoSNterminatedExtIesExtension_IdRedundantCommonNetworkInstance struct {
	// @inject_tag: aper:"choiceIdx:5,"
	IdRedundantCommonNetworkInstance *PdusessionCommonNetworkInstance `protobuf:"bytes,5,opt,name=id_redundant_common_network_instance,json=id-RedundantCommonNetworkInstance,proto3,oneof" aper:"choiceIdx:5,"`
}

type PdusessionResourceModificationInfoSNterminatedExtIesExtension_IdSecurityIndication struct {
	// @inject_tag: aper:"choiceIdx:6,valueExt,"
	IdSecurityIndication *SecurityIndication `protobuf:"bytes,6,opt,name=id_security_indication,json=id-SecurityIndication,proto3,oneof" aper:"choiceIdx:6,valueExt,"`
}

func (*PdusessionResourceModificationInfoSNterminatedExtIesExtension_IdPdusessionCommonNetworkInstance) isPdusessionResourceModificationInfoSNterminatedExtIesExtension_PdusessionResourceModificationInfoSnterminatedExtIes() {
}

func (*PdusessionResourceModificationInfoSNterminatedExtIesExtension_IdDefaultDrbAllowed) isPdusessionResourceModificationInfoSNterminatedExtIesExtension_PdusessionResourceModificationInfoSnterminatedExtIes() {
}

func (*PdusessionResourceModificationInfoSNterminatedExtIesExtension_IdNonGbrresourcesOffered) isPdusessionResourceModificationInfoSNterminatedExtIesExtension_PdusessionResourceModificationInfoSnterminatedExtIes() {
}

func (*PdusessionResourceModificationInfoSNterminatedExtIesExtension_IdRedundantUlNgUTnlatUpf) isPdusessionResourceModificationInfoSNterminatedExtIesExtension_PdusessionResourceModificationInfoSnterminatedExtIes() {
}

func (*PdusessionResourceModificationInfoSNterminatedExtIesExtension_IdRedundantCommonNetworkInstance) isPdusessionResourceModificationInfoSNterminatedExtIesExtension_PdusessionResourceModificationInfoSnterminatedExtIes() {
}

func (*PdusessionResourceModificationInfoSNterminatedExtIesExtension_IdSecurityIndication) isPdusessionResourceModificationInfoSNterminatedExtIesExtension_PdusessionResourceModificationInfoSnterminatedExtIes() {
}

// concrete instance(s) of class XNAP-PROTOCOL-EXTENSION from xnap_v1.asn1:6377
// @inject_tag: aper:"valueExt"
// {PDUSessionResourceModificationInfo-SNterminated-ExtIEs}
type PdusessionResourceModificationInfoSNterminatedExtIes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"unique,"
	Id *xnap_commondatatypes.ProtocolIeID `protobuf:"bytes,1,opt,name=id,json=&id,proto3" json:"id,omitempty" aper:"unique,"`
	// @inject_tag: aper:"valueLB:0,valueUB:2,"
	Criticality xnap_commondatatypes.Criticality `protobuf:"varint,2,opt,name=criticality,json=&criticality,proto3,enum=xnap.v1.Criticality" json:"criticality,omitempty" aper:"valueLB:0,valueUB:2,"`
	// @inject_tag: aper:"canonicalOrder,"
	Extension *PdusessionResourceModificationInfoSNterminatedExtIesExtension `protobuf:"bytes,3,opt,name=extension,json=&Extension,proto3" json:"extension,omitempty" aper:"canonicalOrder,"`
}

func (x *PdusessionResourceModificationInfoSNterminatedExtIes) Reset() {
	*x = PdusessionResourceModificationInfoSNterminatedExtIes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[540]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PdusessionResourceModificationInfoSNterminatedExtIes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PdusessionResourceModificationInfoSNterminatedExtIes) ProtoMessage() {}

func (x *PdusessionResourceModificationInfoSNterminatedExtIes) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[540]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PdusessionResourceModificationInfoSNterminatedExtIes.ProtoReflect.Descriptor instead.
func (*PdusessionResourceModificationInfoSNterminatedExtIes) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{540}
}

func (x *PdusessionResourceModificationInfoSNterminatedExtIes) GetId() *xnap_commondatatypes.ProtocolIeID {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *PdusessionResourceModificationInfoSNterminatedExtIes) GetCriticality() xnap_commondatatypes.Criticality {
	if x != nil {
		return x.Criticality
	}
	return xnap_commondatatypes.Criticality(0)
}

func (x *PdusessionResourceModificationInfoSNterminatedExtIes) GetExtension() *PdusessionResourceModificationInfoSNterminatedExtIesExtension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// sequence from xnap_v1.asn1:6365
// @inject_tag: aper:"valueExt"
// {PDUSessionResourceModificationInfo-SNterminated}
type PdusessionResourceModificationInfoSNterminated struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"optional,"
	ULNgUTnlatUpf *UptransportLayerInformation `protobuf:"bytes,1,opt,name=u_l_ng_u_tnlat_upf,json=uL-NG-U-TNLatUPF,proto3,oneof" json:"u_l_ng_u_tnlat_upf,omitempty" aper:"optional,"`
	// @inject_tag: aper:"optional,"
	PduSessionNetworkInstance *PdusessionNetworkInstance `protobuf:"bytes,2,opt,name=pdu_session_network_instance,json=pduSessionNetworkInstance,proto3,oneof" json:"pdu_session_network_instance,omitempty" aper:"optional,"`
	// @inject_tag: aper:"optional,"
	QosFlowsToBeSetupList *QoSflowsToBeSetupListSetupSNterminated `protobuf:"bytes,3,opt,name=qos_flows_to_be_setup_list,json=qosFlowsToBeSetup-List,proto3,oneof" json:"qos_flows_to_be_setup_list,omitempty" aper:"optional,"`
	// @inject_tag: aper:"optional,valueExt,"
	DataforwardinginfofromSource *DataforwardingandOffloadingInfofromSource `protobuf:"bytes,4,opt,name=dataforwardinginfofrom_source,json=dataforwardinginfofromSource,proto3,oneof" json:"dataforwardinginfofrom_source,omitempty" aper:"optional,valueExt,"`
	// @inject_tag: aper:"optional,"
	QosFlowsToBeModifiedList *QoSflowsToBeSetupListModifiedSNterminated `protobuf:"bytes,5,opt,name=qos_flows_to_be_modified_list,json=qosFlowsToBeModified-List,proto3,oneof" json:"qos_flows_to_be_modified_list,omitempty" aper:"optional,"`
	// @inject_tag: aper:"optional,"
	QoSflowsToBeReleasedList *QoSflowsListwithCause `protobuf:"bytes,6,opt,name=qo_sflows_to_be_released_list,json=qoSFlowsToBeReleased-List,proto3,oneof" json:"qo_sflows_to_be_released_list,omitempty" aper:"optional,"`
	// @inject_tag: aper:"optional,"
	DrbsToBeModifiedList *DrbsToBeModifiedListModifiedSNterminated `protobuf:"bytes,7,opt,name=drbs_to_be_modified_list,json=drbsToBeModifiedList,proto3,oneof" json:"drbs_to_be_modified_list,omitempty" aper:"optional,"`
	// @inject_tag: aper:"optional,"
	DRbsToBeReleased *DrbListwithCause `protobuf:"bytes,8,opt,name=d_rbs_to_be_released,json=dRBsToBeReleased,proto3,oneof" json:"d_rbs_to_be_released,omitempty" aper:"optional,"`
	// @inject_tag: aper:"optional,sizeLB:1,"
	IEExtensions []*PdusessionResourceModificationInfoSNterminatedExtIes `protobuf:"bytes,9,rep,name=i_e_extensions,json=iE-Extensions,proto3" json:"i_e_extensions,omitempty" aper:"optional,sizeLB:1,"`
}

func (x *PdusessionResourceModificationInfoSNterminated) Reset() {
	*x = PdusessionResourceModificationInfoSNterminated{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[541]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PdusessionResourceModificationInfoSNterminated) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PdusessionResourceModificationInfoSNterminated) ProtoMessage() {}

func (x *PdusessionResourceModificationInfoSNterminated) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[541]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PdusessionResourceModificationInfoSNterminated.ProtoReflect.Descriptor instead.
func (*PdusessionResourceModificationInfoSNterminated) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{541}
}

func (x *PdusessionResourceModificationInfoSNterminated) GetULNgUTnlatUpf() *UptransportLayerInformation {
	if x != nil {
		return x.ULNgUTnlatUpf
	}
	return nil
}

func (x *PdusessionResourceModificationInfoSNterminated) GetPduSessionNetworkInstance() *PdusessionNetworkInstance {
	if x != nil {
		return x.PduSessionNetworkInstance
	}
	return nil
}

func (x *PdusessionResourceModificationInfoSNterminated) GetQosFlowsToBeSetupList() *QoSflowsToBeSetupListSetupSNterminated {
	if x != nil {
		return x.QosFlowsToBeSetupList
	}
	return nil
}

func (x *PdusessionResourceModificationInfoSNterminated) GetDataforwardinginfofromSource() *DataforwardingandOffloadingInfofromSource {
	if x != nil {
		return x.DataforwardinginfofromSource
	}
	return nil
}

func (x *PdusessionResourceModificationInfoSNterminated) GetQosFlowsToBeModifiedList() *QoSflowsToBeSetupListModifiedSNterminated {
	if x != nil {
		return x.QosFlowsToBeModifiedList
	}
	return nil
}

func (x *PdusessionResourceModificationInfoSNterminated) GetQoSflowsToBeReleasedList() *QoSflowsListwithCause {
	if x != nil {
		return x.QoSflowsToBeReleasedList
	}
	return nil
}

func (x *PdusessionResourceModificationInfoSNterminated) GetDrbsToBeModifiedList() *DrbsToBeModifiedListModifiedSNterminated {
	if x != nil {
		return x.DrbsToBeModifiedList
	}
	return nil
}

func (x *PdusessionResourceModificationInfoSNterminated) GetDRbsToBeReleased() *DrbListwithCause {
	if x != nil {
		return x.DRbsToBeReleased
	}
	return nil
}

func (x *PdusessionResourceModificationInfoSNterminated) GetIEExtensions() []*PdusessionResourceModificationInfoSNterminatedExtIes {
	if x != nil {
		return x.IEExtensions
	}
	return nil
}

// sequence from xnap_v1.asn1:6389
// {QoSFlowsToBeSetup-List-Modified-SNterminated}
type QoSflowsToBeSetupListModifiedSNterminated struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"valueExt,sizeLB:1,sizeUB:64,"
	Value []*QoSflowsToBeSetupListModifiedSNterminatedItem `protobuf:"bytes,1,rep,name=value,proto3" json:"value,omitempty" aper:"valueExt,sizeLB:1,sizeUB:64,"`
}

func (x *QoSflowsToBeSetupListModifiedSNterminated) Reset() {
	*x = QoSflowsToBeSetupListModifiedSNterminated{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[542]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QoSflowsToBeSetupListModifiedSNterminated) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QoSflowsToBeSetupListModifiedSNterminated) ProtoMessage() {}

func (x *QoSflowsToBeSetupListModifiedSNterminated) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[542]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QoSflowsToBeSetupListModifiedSNterminated.ProtoReflect.Descriptor instead.
func (*QoSflowsToBeSetupListModifiedSNterminated) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{542}
}

func (x *QoSflowsToBeSetupListModifiedSNterminated) GetValue() []*QoSflowsToBeSetupListModifiedSNterminatedItem {
	if x != nil {
		return x.Value
	}
	return nil
}

// value set from xnap_v1.asn1:6398
// {QoSFlowsToBeSetup-List-Modified-SNterminated-Item-ExtIEs&Extension}
type QoSflowsToBeSetupListModifiedSNterminatedItemExtIesExtension struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// value set translated as choice from xnap_v1.asn1:6398
	//
	// Types that are assignable to QoSflowsToBeSetupListModifiedSnterminatedItemExtIes:
	//	*QoSflowsToBeSetupListModifiedSNterminatedItemExtIesExtension_IdTsctrafficCharacteristics
	//	*QoSflowsToBeSetupListModifiedSNterminatedItemExtIesExtension_IdRedundantQoSflowIndicator
	QoSflowsToBeSetupListModifiedSnterminatedItemExtIes isQoSflowsToBeSetupListModifiedSNterminatedItemExtIesExtension_QoSflowsToBeSetupListModifiedSnterminatedItemExtIes `protobuf_oneof:"qo_sflows_to_be_setup_list_modified_snterminated_item_ext_ies"`
}

func (x *QoSflowsToBeSetupListModifiedSNterminatedItemExtIesExtension) Reset() {
	*x = QoSflowsToBeSetupListModifiedSNterminatedItemExtIesExtension{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[543]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QoSflowsToBeSetupListModifiedSNterminatedItemExtIesExtension) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QoSflowsToBeSetupListModifiedSNterminatedItemExtIesExtension) ProtoMessage() {}

func (x *QoSflowsToBeSetupListModifiedSNterminatedItemExtIesExtension) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[543]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QoSflowsToBeSetupListModifiedSNterminatedItemExtIesExtension.ProtoReflect.Descriptor instead.
func (*QoSflowsToBeSetupListModifiedSNterminatedItemExtIesExtension) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{543}
}

func (m *QoSflowsToBeSetupListModifiedSNterminatedItemExtIesExtension) GetQoSflowsToBeSetupListModifiedSnterminatedItemExtIes() isQoSflowsToBeSetupListModifiedSNterminatedItemExtIesExtension_QoSflowsToBeSetupListModifiedSnterminatedItemExtIes {
	if m != nil {
		return m.QoSflowsToBeSetupListModifiedSnterminatedItemExtIes
	}
	return nil
}

func (x *QoSflowsToBeSetupListModifiedSNterminatedItemExtIesExtension) GetIdTsctrafficCharacteristics() *TsctrafficCharacteristics {
	if x, ok := x.GetQoSflowsToBeSetupListModifiedSnterminatedItemExtIes().(*QoSflowsToBeSetupListModifiedSNterminatedItemExtIesExtension_IdTsctrafficCharacteristics); ok {
		return x.IdTsctrafficCharacteristics
	}
	return nil
}

func (x *QoSflowsToBeSetupListModifiedSNterminatedItemExtIesExtension) GetIdRedundantQoSflowIndicator() RedundantQoSflowIndicator {
	if x, ok := x.GetQoSflowsToBeSetupListModifiedSnterminatedItemExtIes().(*QoSflowsToBeSetupListModifiedSNterminatedItemExtIesExtension_IdRedundantQoSflowIndicator); ok {
		return x.IdRedundantQoSflowIndicator
	}
	return RedundantQoSflowIndicator_REDUNDANT_QO_SFLOW_INDICATOR_TRUE
}

type isQoSflowsToBeSetupListModifiedSNterminatedItemExtIesExtension_QoSflowsToBeSetupListModifiedSnterminatedItemExtIes interface {
	isQoSflowsToBeSetupListModifiedSNterminatedItemExtIesExtension_QoSflowsToBeSetupListModifiedSnterminatedItemExtIes()
}

type QoSflowsToBeSetupListModifiedSNterminatedItemExtIesExtension_IdTsctrafficCharacteristics struct {
	// @inject_tag: aper:"choiceIdx:1,valueExt,"
	IdTsctrafficCharacteristics *TsctrafficCharacteristics `protobuf:"bytes,1,opt,name=id_tsctraffic_characteristics,json=id-TSCTrafficCharacteristics,proto3,oneof" aper:"choiceIdx:1,valueExt,"`
}

type QoSflowsToBeSetupListModifiedSNterminatedItemExtIesExtension_IdRedundantQoSflowIndicator struct {
	// @inject_tag: aper:"choiceIdx:2,valueLB:0,valueUB:1,"
	IdRedundantQoSflowIndicator RedundantQoSflowIndicator `protobuf:"varint,2,opt,name=id_redundant_qo_sflow_indicator,json=id-RedundantQoSFlowIndicator,proto3,enum=xnap.v1.RedundantQoSflowIndicator,oneof" aper:"choiceIdx:2,valueLB:0,valueUB:1,"`
}

func (*QoSflowsToBeSetupListModifiedSNterminatedItemExtIesExtension_IdTsctrafficCharacteristics) isQoSflowsToBeSetupListModifiedSNterminatedItemExtIesExtension_QoSflowsToBeSetupListModifiedSnterminatedItemExtIes() {
}

func (*QoSflowsToBeSetupListModifiedSNterminatedItemExtIesExtension_IdRedundantQoSflowIndicator) isQoSflowsToBeSetupListModifiedSNterminatedItemExtIesExtension_QoSflowsToBeSetupListModifiedSnterminatedItemExtIes() {
}

// concrete instance(s) of class XNAP-PROTOCOL-EXTENSION from xnap_v1.asn1:6398
// @inject_tag: aper:"valueExt"
// {QoSFlowsToBeSetup-List-Modified-SNterminated-Item-ExtIEs}
type QoSflowsToBeSetupListModifiedSNterminatedItemExtIes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"unique,"
	Id *xnap_commondatatypes.ProtocolIeID `protobuf:"bytes,1,opt,name=id,json=&id,proto3" json:"id,omitempty" aper:"unique,"`
	// @inject_tag: aper:"valueLB:0,valueUB:2,"
	Criticality xnap_commondatatypes.Criticality `protobuf:"varint,2,opt,name=criticality,json=&criticality,proto3,enum=xnap.v1.Criticality" json:"criticality,omitempty" aper:"valueLB:0,valueUB:2,"`
	// @inject_tag: aper:"canonicalOrder,"
	Extension *QoSflowsToBeSetupListModifiedSNterminatedItemExtIesExtension `protobuf:"bytes,3,opt,name=extension,json=&Extension,proto3" json:"extension,omitempty" aper:"canonicalOrder,"`
}

func (x *QoSflowsToBeSetupListModifiedSNterminatedItemExtIes) Reset() {
	*x = QoSflowsToBeSetupListModifiedSNterminatedItemExtIes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[544]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QoSflowsToBeSetupListModifiedSNterminatedItemExtIes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QoSflowsToBeSetupListModifiedSNterminatedItemExtIes) ProtoMessage() {}

func (x *QoSflowsToBeSetupListModifiedSNterminatedItemExtIes) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[544]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QoSflowsToBeSetupListModifiedSNterminatedItemExtIes.ProtoReflect.Descriptor instead.
func (*QoSflowsToBeSetupListModifiedSNterminatedItemExtIes) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{544}
}

func (x *QoSflowsToBeSetupListModifiedSNterminatedItemExtIes) GetId() *xnap_commondatatypes.ProtocolIeID {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *QoSflowsToBeSetupListModifiedSNterminatedItemExtIes) GetCriticality() xnap_commondatatypes.Criticality {
	if x != nil {
		return x.Criticality
	}
	return xnap_commondatatypes.Criticality(0)
}

func (x *QoSflowsToBeSetupListModifiedSNterminatedItemExtIes) GetExtension() *QoSflowsToBeSetupListModifiedSNterminatedItemExtIesExtension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// sequence from xnap_v1.asn1:6390
// @inject_tag: aper:"valueExt"
// {QoSFlowsToBeSetup-List-Modified-SNterminated-Item}
type QoSflowsToBeSetupListModifiedSNterminatedItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Qfi *QoSflowIdentifier `protobuf:"bytes,1,opt,name=qfi,proto3" json:"qfi,omitempty"`
	// @inject_tag: aper:"optional,valueExt,"
	QosFlowLevelQoSparameters *QoSflowLevelQoSparameters `protobuf:"bytes,2,opt,name=qos_flow_level_qo_sparameters,json=qosFlowLevelQoSParameters,proto3,oneof" json:"qos_flow_level_qo_sparameters,omitempty" aper:"optional,valueExt,"`
	// @inject_tag: aper:"optional,valueExt,"
	OfferedGbrqoSflowInfo *GbrqoSflowInfo `protobuf:"bytes,3,opt,name=offered_gbrqo_sflow_info,json=offeredGBRQoSFlowInfo,proto3,oneof" json:"offered_gbrqo_sflow_info,omitempty" aper:"optional,valueExt,"`
	// @inject_tag: aper:"optional,valueExt,valueLB:0,valueUB:1,"
	QosFlowMappingIndication *QoSflowMappingIndication `protobuf:"varint,4,opt,name=qos_flow_mapping_indication,json=qosFlowMappingIndication,proto3,enum=xnap.v1.QoSflowMappingIndication,oneof" json:"qos_flow_mapping_indication,omitempty" aper:"optional,valueExt,valueLB:0,valueUB:1,"`
	// @inject_tag: aper:"optional,sizeLB:1,"
	IEExtensions []*QoSflowsToBeSetupListModifiedSNterminatedItemExtIes `protobuf:"bytes,5,rep,name=i_e_extensions,json=iE-Extensions,proto3" json:"i_e_extensions,omitempty" aper:"optional,sizeLB:1,"`
}

func (x *QoSflowsToBeSetupListModifiedSNterminatedItem) Reset() {
	*x = QoSflowsToBeSetupListModifiedSNterminatedItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[545]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QoSflowsToBeSetupListModifiedSNterminatedItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QoSflowsToBeSetupListModifiedSNterminatedItem) ProtoMessage() {}

func (x *QoSflowsToBeSetupListModifiedSNterminatedItem) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[545]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QoSflowsToBeSetupListModifiedSNterminatedItem.ProtoReflect.Descriptor instead.
func (*QoSflowsToBeSetupListModifiedSNterminatedItem) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{545}
}

func (x *QoSflowsToBeSetupListModifiedSNterminatedItem) GetQfi() *QoSflowIdentifier {
	if x != nil {
		return x.Qfi
	}
	return nil
}

func (x *QoSflowsToBeSetupListModifiedSNterminatedItem) GetQosFlowLevelQoSparameters() *QoSflowLevelQoSparameters {
	if x != nil {
		return x.QosFlowLevelQoSparameters
	}
	return nil
}

func (x *QoSflowsToBeSetupListModifiedSNterminatedItem) GetOfferedGbrqoSflowInfo() *GbrqoSflowInfo {
	if x != nil {
		return x.OfferedGbrqoSflowInfo
	}
	return nil
}

func (x *QoSflowsToBeSetupListModifiedSNterminatedItem) GetQosFlowMappingIndication() QoSflowMappingIndication {
	if x != nil && x.QosFlowMappingIndication != nil {
		return *x.QosFlowMappingIndication
	}
	return QoSflowMappingIndication_QO_SFLOW_MAPPING_INDICATION_UL
}

func (x *QoSflowsToBeSetupListModifiedSNterminatedItem) GetIEExtensions() []*QoSflowsToBeSetupListModifiedSNterminatedItemExtIes {
	if x != nil {
		return x.IEExtensions
	}
	return nil
}

// sequence from xnap_v1.asn1:6406
// {DRBsToBeModified-List-Modified-SNterminated}
type DrbsToBeModifiedListModifiedSNterminated struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"valueExt,sizeLB:1,sizeUB:32,"
	Value []*DrbsToBeModifiedListModifiedSNterminatedItem `protobuf:"bytes,1,rep,name=value,proto3" json:"value,omitempty" aper:"valueExt,sizeLB:1,sizeUB:32,"`
}

func (x *DrbsToBeModifiedListModifiedSNterminated) Reset() {
	*x = DrbsToBeModifiedListModifiedSNterminated{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[546]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DrbsToBeModifiedListModifiedSNterminated) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DrbsToBeModifiedListModifiedSNterminated) ProtoMessage() {}

func (x *DrbsToBeModifiedListModifiedSNterminated) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[546]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DrbsToBeModifiedListModifiedSNterminated.ProtoReflect.Descriptor instead.
func (*DrbsToBeModifiedListModifiedSNterminated) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{546}
}

func (x *DrbsToBeModifiedListModifiedSNterminated) GetValue() []*DrbsToBeModifiedListModifiedSNterminatedItem {
	if x != nil {
		return x.Value
	}
	return nil
}

// value set from xnap_v1.asn1:6416
// {DRBsToBeModified-List-Modified-SNterminated-Item-ExtIEs}
type DrbsToBeModifiedListModifiedSNterminatedItemExtIes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *emptypb.Empty `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *DrbsToBeModifiedListModifiedSNterminatedItemExtIes) Reset() {
	*x = DrbsToBeModifiedListModifiedSNterminatedItemExtIes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[547]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DrbsToBeModifiedListModifiedSNterminatedItemExtIes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DrbsToBeModifiedListModifiedSNterminatedItemExtIes) ProtoMessage() {}

func (x *DrbsToBeModifiedListModifiedSNterminatedItemExtIes) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[547]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DrbsToBeModifiedListModifiedSNterminatedItemExtIes.ProtoReflect.Descriptor instead.
func (*DrbsToBeModifiedListModifiedSNterminatedItemExtIes) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{547}
}

func (x *DrbsToBeModifiedListModifiedSNterminatedItemExtIes) GetValue() *emptypb.Empty {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:6407
// @inject_tag: aper:"valueExt"
// {DRBsToBeModified-List-Modified-SNterminated-Item}
type DrbsToBeModifiedListModifiedSNterminatedItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DrbId *DrbID `protobuf:"bytes,1,opt,name=drb_id,json=drb-ID,proto3" json:"drb_id,omitempty"`
	// @inject_tag: aper:"optional,"
	MNDlScgUpTnlinfo *UptransportParameters `protobuf:"bytes,2,opt,name=m_n_dl_scg_up_tnlinfo,json=mN-DL-SCG-UP-TNLInfo,proto3,oneof" json:"m_n_dl_scg_up_tnlinfo,omitempty" aper:"optional,"`
	// @inject_tag: aper:"optional,"
	SecondaryMnDlScgUpTnlinfo *UptransportParameters `protobuf:"bytes,3,opt,name=secondary_mn_dl_scg_up_tnlinfo,json=secondary-MN-DL-SCG-UP-TNLInfo,proto3,oneof" json:"secondary_mn_dl_scg_up_tnlinfo,omitempty" aper:"optional,"`
	// @inject_tag: aper:"optional,"
	LCid *Lcid `protobuf:"bytes,4,opt,name=l_cid,json=lCID,proto3,oneof" json:"l_cid,omitempty" aper:"optional,"`
	// @inject_tag: aper:"optional,valueExt,"
	RlcStatus *RlcStatus `protobuf:"bytes,5,opt,name=rlc_status,json=rlc-status,proto3,oneof" json:"rlc_status,omitempty" aper:"optional,valueExt,"`
	// @inject_tag: aper:"optional,sizeLB:1,"
	IEExtensions []*DrbsToBeModifiedListModifiedSNterminatedItemExtIes `protobuf:"bytes,6,rep,name=i_e_extensions,json=iE-Extensions,proto3" json:"i_e_extensions,omitempty" aper:"optional,sizeLB:1,"`
}

func (x *DrbsToBeModifiedListModifiedSNterminatedItem) Reset() {
	*x = DrbsToBeModifiedListModifiedSNterminatedItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[548]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DrbsToBeModifiedListModifiedSNterminatedItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DrbsToBeModifiedListModifiedSNterminatedItem) ProtoMessage() {}

func (x *DrbsToBeModifiedListModifiedSNterminatedItem) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[548]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DrbsToBeModifiedListModifiedSNterminatedItem.ProtoReflect.Descriptor instead.
func (*DrbsToBeModifiedListModifiedSNterminatedItem) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{548}
}

func (x *DrbsToBeModifiedListModifiedSNterminatedItem) GetDrbId() *DrbID {
	if x != nil {
		return x.DrbId
	}
	return nil
}

func (x *DrbsToBeModifiedListModifiedSNterminatedItem) GetMNDlScgUpTnlinfo() *UptransportParameters {
	if x != nil {
		return x.MNDlScgUpTnlinfo
	}
	return nil
}

func (x *DrbsToBeModifiedListModifiedSNterminatedItem) GetSecondaryMnDlScgUpTnlinfo() *UptransportParameters {
	if x != nil {
		return x.SecondaryMnDlScgUpTnlinfo
	}
	return nil
}

func (x *DrbsToBeModifiedListModifiedSNterminatedItem) GetLCid() *Lcid {
	if x != nil {
		return x.LCid
	}
	return nil
}

func (x *DrbsToBeModifiedListModifiedSNterminatedItem) GetRlcStatus() *RlcStatus {
	if x != nil {
		return x.RlcStatus
	}
	return nil
}

func (x *DrbsToBeModifiedListModifiedSNterminatedItem) GetIEExtensions() []*DrbsToBeModifiedListModifiedSNterminatedItemExtIes {
	if x != nil {
		return x.IEExtensions
	}
	return nil
}

// value set from xnap_v1.asn1:6441
// {PDUSessionResourceModificationResponseInfo-SNterminated-ExtIEs&Extension}
type PdusessionResourceModificationResponseInfoSNterminatedExtIesExtension struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// value set translated as choice from xnap_v1.asn1:6441
	//
	// Types that are assignable to PdusessionResourceModificationResponseInfoSnterminatedExtIes:
	//	*PdusessionResourceModificationResponseInfoSNterminatedExtIesExtension_IdDrbIdsTakenintouse
	//	*PdusessionResourceModificationResponseInfoSNterminatedExtIesExtension_IdRedundantDlNgUTnlatNgRan
	//	*PdusessionResourceModificationResponseInfoSNterminatedExtIesExtension_IdSecurityResult
	PdusessionResourceModificationResponseInfoSnterminatedExtIes isPdusessionResourceModificationResponseInfoSNterminatedExtIesExtension_PdusessionResourceModificationResponseInfoSnterminatedExtIes `protobuf_oneof:"pdusession_resource_modification_response_info_snterminated_ext_ies"`
}

func (x *PdusessionResourceModificationResponseInfoSNterminatedExtIesExtension) Reset() {
	*x = PdusessionResourceModificationResponseInfoSNterminatedExtIesExtension{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[549]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PdusessionResourceModificationResponseInfoSNterminatedExtIesExtension) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PdusessionResourceModificationResponseInfoSNterminatedExtIesExtension) ProtoMessage() {}

func (x *PdusessionResourceModificationResponseInfoSNterminatedExtIesExtension) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[549]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PdusessionResourceModificationResponseInfoSNterminatedExtIesExtension.ProtoReflect.Descriptor instead.
func (*PdusessionResourceModificationResponseInfoSNterminatedExtIesExtension) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{549}
}

func (m *PdusessionResourceModificationResponseInfoSNterminatedExtIesExtension) GetPdusessionResourceModificationResponseInfoSnterminatedExtIes() isPdusessionResourceModificationResponseInfoSNterminatedExtIesExtension_PdusessionResourceModificationResponseInfoSnterminatedExtIes {
	if m != nil {
		return m.PdusessionResourceModificationResponseInfoSnterminatedExtIes
	}
	return nil
}

func (x *PdusessionResourceModificationResponseInfoSNterminatedExtIesExtension) GetIdDrbIdsTakenintouse() *DrbList {
	if x, ok := x.GetPdusessionResourceModificationResponseInfoSnterminatedExtIes().(*PdusessionResourceModificationResponseInfoSNterminatedExtIesExtension_IdDrbIdsTakenintouse); ok {
		return x.IdDrbIdsTakenintouse
	}
	return nil
}

func (x *PdusessionResourceModificationResponseInfoSNterminatedExtIesExtension) GetIdRedundantDlNgUTnlatNgRan() *UptransportLayerInformation {
	if x, ok := x.GetPdusessionResourceModificationResponseInfoSnterminatedExtIes().(*PdusessionResourceModificationResponseInfoSNterminatedExtIesExtension_IdRedundantDlNgUTnlatNgRan); ok {
		return x.IdRedundantDlNgUTnlatNgRan
	}
	return nil
}

func (x *PdusessionResourceModificationResponseInfoSNterminatedExtIesExtension) GetIdSecurityResult() *SecurityResult {
	if x, ok := x.GetPdusessionResourceModificationResponseInfoSnterminatedExtIes().(*PdusessionResourceModificationResponseInfoSNterminatedExtIesExtension_IdSecurityResult); ok {
		return x.IdSecurityResult
	}
	return nil
}

type isPdusessionResourceModificationResponseInfoSNterminatedExtIesExtension_PdusessionResourceModificationResponseInfoSnterminatedExtIes interface {
	isPdusessionResourceModificationResponseInfoSNterminatedExtIesExtension_PdusessionResourceModificationResponseInfoSnterminatedExtIes()
}

type PdusessionResourceModificationResponseInfoSNterminatedExtIesExtension_IdDrbIdsTakenintouse struct {
	// @inject_tag: aper:"choiceIdx:1,"
	IdDrbIdsTakenintouse *DrbList `protobuf:"bytes,1,opt,name=id_drb_ids_takenintouse,json=id-DRB-IDs-takenintouse,proto3,oneof" aper:"choiceIdx:1,"`
}

type PdusessionResourceModificationResponseInfoSNterminatedExtIesExtension_IdRedundantDlNgUTnlatNgRan struct {
	// @inject_tag: aper:"choiceIdx:2,"
	IdRedundantDlNgUTnlatNgRan *UptransportLayerInformation `protobuf:"bytes,2,opt,name=id_redundant_dl_ng_u_tnlat_ng_ran,json=id-Redundant-DL-NG-U-TNLatNG-RAN,proto3,oneof" aper:"choiceIdx:2,"`
}

type PdusessionResourceModificationResponseInfoSNterminatedExtIesExtension_IdSecurityResult struct {
	// @inject_tag: aper:"choiceIdx:3,valueExt,"
	IdSecurityResult *SecurityResult `protobuf:"bytes,3,opt,name=id_security_result,json=id-SecurityResult,proto3,oneof" aper:"choiceIdx:3,valueExt,"`
}

func (*PdusessionResourceModificationResponseInfoSNterminatedExtIesExtension_IdDrbIdsTakenintouse) isPdusessionResourceModificationResponseInfoSNterminatedExtIesExtension_PdusessionResourceModificationResponseInfoSnterminatedExtIes() {
}

func (*PdusessionResourceModificationResponseInfoSNterminatedExtIesExtension_IdRedundantDlNgUTnlatNgRan) isPdusessionResourceModificationResponseInfoSNterminatedExtIesExtension_PdusessionResourceModificationResponseInfoSnterminatedExtIes() {
}

func (*PdusessionResourceModificationResponseInfoSNterminatedExtIesExtension_IdSecurityResult) isPdusessionResourceModificationResponseInfoSNterminatedExtIesExtension_PdusessionResourceModificationResponseInfoSnterminatedExtIes() {
}

// concrete instance(s) of class XNAP-PROTOCOL-EXTENSION from xnap_v1.asn1:6441
// @inject_tag: aper:"valueExt"
// {PDUSessionResourceModificationResponseInfo-SNterminated-ExtIEs}
type PdusessionResourceModificationResponseInfoSNterminatedExtIes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"unique,"
	Id *xnap_commondatatypes.ProtocolIeID `protobuf:"bytes,1,opt,name=id,json=&id,proto3" json:"id,omitempty" aper:"unique,"`
	// @inject_tag: aper:"valueLB:0,valueUB:2,"
	Criticality xnap_commondatatypes.Criticality `protobuf:"varint,2,opt,name=criticality,json=&criticality,proto3,enum=xnap.v1.Criticality" json:"criticality,omitempty" aper:"valueLB:0,valueUB:2,"`
	// @inject_tag: aper:"canonicalOrder,"
	Extension *PdusessionResourceModificationResponseInfoSNterminatedExtIesExtension `protobuf:"bytes,3,opt,name=extension,json=&Extension,proto3" json:"extension,omitempty" aper:"canonicalOrder,"`
}

func (x *PdusessionResourceModificationResponseInfoSNterminatedExtIes) Reset() {
	*x = PdusessionResourceModificationResponseInfoSNterminatedExtIes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[550]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PdusessionResourceModificationResponseInfoSNterminatedExtIes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PdusessionResourceModificationResponseInfoSNterminatedExtIes) ProtoMessage() {}

func (x *PdusessionResourceModificationResponseInfoSNterminatedExtIes) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[550]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PdusessionResourceModificationResponseInfoSNterminatedExtIes.ProtoReflect.Descriptor instead.
func (*PdusessionResourceModificationResponseInfoSNterminatedExtIes) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{550}
}

func (x *PdusessionResourceModificationResponseInfoSNterminatedExtIes) GetId() *xnap_commondatatypes.ProtocolIeID {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *PdusessionResourceModificationResponseInfoSNterminatedExtIes) GetCriticality() xnap_commondatatypes.Criticality {
	if x != nil {
		return x.Criticality
	}
	return xnap_commondatatypes.Criticality(0)
}

func (x *PdusessionResourceModificationResponseInfoSNterminatedExtIes) GetExtension() *PdusessionResourceModificationResponseInfoSNterminatedExtIesExtension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// sequence from xnap_v1.asn1:6429
// @inject_tag: aper:"valueExt"
// {PDUSessionResourceModificationResponseInfo-SNterminated}
type PdusessionResourceModificationResponseInfoSNterminated struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"optional,"
	DLNgUTnlatNgRan *UptransportLayerInformation `protobuf:"bytes,1,opt,name=d_l_ng_u_tnlat_ng_ran,json=dL-NG-U-TNLatNG-RAN,proto3,oneof" json:"d_l_ng_u_tnlat_ng_ran,omitempty" aper:"optional,"`
	// @inject_tag: aper:"optional,"
	DRbsToBeSetup *DrbsToBeSetupListSetupResponseSNterminated `protobuf:"bytes,2,opt,name=d_rbs_to_be_setup,json=dRBsToBeSetup,proto3,oneof" json:"d_rbs_to_be_setup,omitempty" aper:"optional,"`
	// @inject_tag: aper:"optional,valueExt,"
	DataforwardinginfoTarget *DataForwardingInfoFromTargetNgrannode `protobuf:"bytes,3,opt,name=dataforwardinginfo_target,json=dataforwardinginfoTarget,proto3,oneof" json:"dataforwardinginfo_target,omitempty" aper:"optional,valueExt,"`
	// @inject_tag: aper:"optional,"
	DRbsToBeModified *DrbsToBeModifiedListModificationResponseSNterminated `protobuf:"bytes,4,opt,name=d_rbs_to_be_modified,json=dRBsToBeModified,proto3,oneof" json:"d_rbs_to_be_modified,omitempty" aper:"optional,"`
	// @inject_tag: aper:"optional,"
	DRbsToBeReleased *DrbListwithCause `protobuf:"bytes,5,opt,name=d_rbs_to_be_released,json=dRBsToBeReleased,proto3,oneof" json:"d_rbs_to_be_released,omitempty" aper:"optional,"`
	// @inject_tag: aper:"optional,valueExt,"
	DataforwardinginfofromSource *DataforwardingandOffloadingInfofromSource `protobuf:"bytes,6,opt,name=dataforwardinginfofrom_source,json=dataforwardinginfofromSource,proto3,oneof" json:"dataforwardinginfofrom_source,omitempty" aper:"optional,valueExt,"`
	// @inject_tag: aper:"optional,"
	QosFlowsNotAdmittedTbadded *QoSflowsListwithCause `protobuf:"bytes,7,opt,name=qos_flows_not_admitted_tbadded,json=qosFlowsNotAdmittedTBAdded,proto3,oneof" json:"qos_flows_not_admitted_tbadded,omitempty" aper:"optional,"`
	// @inject_tag: aper:"optional,"
	QosFlowsReleased *QoSflowsListwithCause `protobuf:"bytes,8,opt,name=qos_flows_released,json=qosFlowsReleased,proto3,oneof" json:"qos_flows_released,omitempty" aper:"optional,"`
	// @inject_tag: aper:"optional,sizeLB:1,"
	IEExtensions []*PdusessionResourceModificationResponseInfoSNterminatedExtIes `protobuf:"bytes,9,rep,name=i_e_extensions,json=iE-Extensions,proto3" json:"i_e_extensions,omitempty" aper:"optional,sizeLB:1,"`
}

func (x *PdusessionResourceModificationResponseInfoSNterminated) Reset() {
	*x = PdusessionResourceModificationResponseInfoSNterminated{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[551]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PdusessionResourceModificationResponseInfoSNterminated) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PdusessionResourceModificationResponseInfoSNterminated) ProtoMessage() {}

func (x *PdusessionResourceModificationResponseInfoSNterminated) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[551]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PdusessionResourceModificationResponseInfoSNterminated.ProtoReflect.Descriptor instead.
func (*PdusessionResourceModificationResponseInfoSNterminated) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{551}
}

func (x *PdusessionResourceModificationResponseInfoSNterminated) GetDLNgUTnlatNgRan() *UptransportLayerInformation {
	if x != nil {
		return x.DLNgUTnlatNgRan
	}
	return nil
}

func (x *PdusessionResourceModificationResponseInfoSNterminated) GetDRbsToBeSetup() *DrbsToBeSetupListSetupResponseSNterminated {
	if x != nil {
		return x.DRbsToBeSetup
	}
	return nil
}

func (x *PdusessionResourceModificationResponseInfoSNterminated) GetDataforwardinginfoTarget() *DataForwardingInfoFromTargetNgrannode {
	if x != nil {
		return x.DataforwardinginfoTarget
	}
	return nil
}

func (x *PdusessionResourceModificationResponseInfoSNterminated) GetDRbsToBeModified() *DrbsToBeModifiedListModificationResponseSNterminated {
	if x != nil {
		return x.DRbsToBeModified
	}
	return nil
}

func (x *PdusessionResourceModificationResponseInfoSNterminated) GetDRbsToBeReleased() *DrbListwithCause {
	if x != nil {
		return x.DRbsToBeReleased
	}
	return nil
}

func (x *PdusessionResourceModificationResponseInfoSNterminated) GetDataforwardinginfofromSource() *DataforwardingandOffloadingInfofromSource {
	if x != nil {
		return x.DataforwardinginfofromSource
	}
	return nil
}

func (x *PdusessionResourceModificationResponseInfoSNterminated) GetQosFlowsNotAdmittedTbadded() *QoSflowsListwithCause {
	if x != nil {
		return x.QosFlowsNotAdmittedTbadded
	}
	return nil
}

func (x *PdusessionResourceModificationResponseInfoSNterminated) GetQosFlowsReleased() *QoSflowsListwithCause {
	if x != nil {
		return x.QosFlowsReleased
	}
	return nil
}

func (x *PdusessionResourceModificationResponseInfoSNterminated) GetIEExtensions() []*PdusessionResourceModificationResponseInfoSNterminatedExtIes {
	if x != nil {
		return x.IEExtensions
	}
	return nil
}

// sequence from xnap_v1.asn1:6451
// {DRBsToBeModifiedList-ModificationResponse-SNterminated}
type DrbsToBeModifiedListModificationResponseSNterminated struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"valueExt,sizeLB:1,sizeUB:32,"
	Value []*DrbsToBeModifiedListModificationResponseSNterminatedItem `protobuf:"bytes,1,rep,name=value,proto3" json:"value,omitempty" aper:"valueExt,sizeLB:1,sizeUB:32,"`
}

func (x *DrbsToBeModifiedListModificationResponseSNterminated) Reset() {
	*x = DrbsToBeModifiedListModificationResponseSNterminated{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[552]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DrbsToBeModifiedListModificationResponseSNterminated) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DrbsToBeModifiedListModificationResponseSNterminated) ProtoMessage() {}

func (x *DrbsToBeModifiedListModificationResponseSNterminated) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[552]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DrbsToBeModifiedListModificationResponseSNterminated.ProtoReflect.Descriptor instead.
func (*DrbsToBeModifiedListModificationResponseSNterminated) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{552}
}

func (x *DrbsToBeModifiedListModificationResponseSNterminated) GetValue() []*DrbsToBeModifiedListModificationResponseSNterminatedItem {
	if x != nil {
		return x.Value
	}
	return nil
}

// value set from xnap_v1.asn1:6460
// {DRBsToBeModifiedList-ModificationResponse-SNterminated-Item-ExtIEs&Extension}
type DrbsToBeModifiedListModificationResponseSNterminatedItemExtIesExtension struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// value set translated as choice from xnap_v1.asn1:6460
	//
	// Types that are assignable to DrbsToBeModifiedListModificationResponseSnterminatedItemExtIes:
	//	*DrbsToBeModifiedListModificationResponseSNterminatedItemExtIesExtension_IdAdditionalPdcpDuplicationTnlList
	//	*DrbsToBeModifiedListModificationResponseSNterminatedItemExtIesExtension_IdRlcduplicationInformation
	//	*DrbsToBeModifiedListModificationResponseSNterminatedItemExtIesExtension_IdSecondarySnUlPdcpUpTnlinfo
	//	*DrbsToBeModifiedListModificationResponseSNterminatedItemExtIesExtension_IdPdcpDuplicationConfiguration
	//	*DrbsToBeModifiedListModificationResponseSNterminatedItemExtIesExtension_IdDuplicationActivation
	DrbsToBeModifiedListModificationResponseSnterminatedItemExtIes isDrbsToBeModifiedListModificationResponseSNterminatedItemExtIesExtension_DrbsToBeModifiedListModificationResponseSnterminatedItemExtIes `protobuf_oneof:"drbs_to_be_modified_list_modification_response_snterminated_item_ext_ies"`
}

func (x *DrbsToBeModifiedListModificationResponseSNterminatedItemExtIesExtension) Reset() {
	*x = DrbsToBeModifiedListModificationResponseSNterminatedItemExtIesExtension{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[553]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DrbsToBeModifiedListModificationResponseSNterminatedItemExtIesExtension) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DrbsToBeModifiedListModificationResponseSNterminatedItemExtIesExtension) ProtoMessage() {}

func (x *DrbsToBeModifiedListModificationResponseSNterminatedItemExtIesExtension) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[553]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DrbsToBeModifiedListModificationResponseSNterminatedItemExtIesExtension.ProtoReflect.Descriptor instead.
func (*DrbsToBeModifiedListModificationResponseSNterminatedItemExtIesExtension) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{553}
}

func (m *DrbsToBeModifiedListModificationResponseSNterminatedItemExtIesExtension) GetDrbsToBeModifiedListModificationResponseSnterminatedItemExtIes() isDrbsToBeModifiedListModificationResponseSNterminatedItemExtIesExtension_DrbsToBeModifiedListModificationResponseSnterminatedItemExtIes {
	if m != nil {
		return m.DrbsToBeModifiedListModificationResponseSnterminatedItemExtIes
	}
	return nil
}

func (x *DrbsToBeModifiedListModificationResponseSNterminatedItemExtIesExtension) GetIdAdditionalPdcpDuplicationTnlList() *AdditionalPDcpDuplicationTNlList {
	if x, ok := x.GetDrbsToBeModifiedListModificationResponseSnterminatedItemExtIes().(*DrbsToBeModifiedListModificationResponseSNterminatedItemExtIesExtension_IdAdditionalPdcpDuplicationTnlList); ok {
		return x.IdAdditionalPdcpDuplicationTnlList
	}
	return nil
}

func (x *DrbsToBeModifiedListModificationResponseSNterminatedItemExtIesExtension) GetIdRlcduplicationInformation() *RlcduplicationInformation {
	if x, ok := x.GetDrbsToBeModifiedListModificationResponseSnterminatedItemExtIes().(*DrbsToBeModifiedListModificationResponseSNterminatedItemExtIesExtension_IdRlcduplicationInformation); ok {
		return x.IdRlcduplicationInformation
	}
	return nil
}

func (x *DrbsToBeModifiedListModificationResponseSNterminatedItemExtIesExtension) GetIdSecondarySnUlPdcpUpTnlinfo() *UptransportParameters {
	if x, ok := x.GetDrbsToBeModifiedListModificationResponseSnterminatedItemExtIes().(*DrbsToBeModifiedListModificationResponseSNterminatedItemExtIesExtension_IdSecondarySnUlPdcpUpTnlinfo); ok {
		return x.IdSecondarySnUlPdcpUpTnlinfo
	}
	return nil
}

func (x *DrbsToBeModifiedListModificationResponseSNterminatedItemExtIesExtension) GetIdPdcpDuplicationConfiguration() PdcpduplicationConfiguration {
	if x, ok := x.GetDrbsToBeModifiedListModificationResponseSnterminatedItemExtIes().(*DrbsToBeModifiedListModificationResponseSNterminatedItemExtIesExtension_IdPdcpDuplicationConfiguration); ok {
		return x.IdPdcpDuplicationConfiguration
	}
	return PdcpduplicationConfiguration_PDCPDUPLICATION_CONFIGURATION_CONFIGURED
}

func (x *DrbsToBeModifiedListModificationResponseSNterminatedItemExtIesExtension) GetIdDuplicationActivation() DuplicationActivation {
	if x, ok := x.GetDrbsToBeModifiedListModificationResponseSnterminatedItemExtIes().(*DrbsToBeModifiedListModificationResponseSNterminatedItemExtIesExtension_IdDuplicationActivation); ok {
		return x.IdDuplicationActivation
	}
	return DuplicationActivation_DUPLICATION_ACTIVATION_ACTIVE
}

type isDrbsToBeModifiedListModificationResponseSNterminatedItemExtIesExtension_DrbsToBeModifiedListModificationResponseSnterminatedItemExtIes interface {
	isDrbsToBeModifiedListModificationResponseSNterminatedItemExtIesExtension_DrbsToBeModifiedListModificationResponseSnterminatedItemExtIes()
}

type DrbsToBeModifiedListModificationResponseSNterminatedItemExtIesExtension_IdAdditionalPdcpDuplicationTnlList struct {
	// @inject_tag: aper:"choiceIdx:1,"
	IdAdditionalPdcpDuplicationTnlList *AdditionalPDcpDuplicationTNlList `protobuf:"bytes,1,opt,name=id_additional_pdcp_duplication_tnl_list,json=id-Additional-PDCP-Duplication-TNL-List,proto3,oneof" aper:"choiceIdx:1,"`
}

type DrbsToBeModifiedListModificationResponseSNterminatedItemExtIesExtension_IdRlcduplicationInformation struct {
	// @inject_tag: aper:"choiceIdx:2,"
	IdRlcduplicationInformation *RlcduplicationInformation `protobuf:"bytes,2,opt,name=id_rlcduplication_information,json=id-RLCDuplicationInformation,proto3,oneof" aper:"choiceIdx:2,"`
}

type DrbsToBeModifiedListModificationResponseSNterminatedItemExtIesExtension_IdSecondarySnUlPdcpUpTnlinfo struct {
	// @inject_tag: aper:"choiceIdx:3,"
	IdSecondarySnUlPdcpUpTnlinfo *UptransportParameters `protobuf:"bytes,3,opt,name=id_secondary_sn_ul_pdcp_up_tnlinfo,json=id-secondary-SN-UL-PDCP-UP-TNLInfo,proto3,oneof" aper:"choiceIdx:3,"`
}

type DrbsToBeModifiedListModificationResponseSNterminatedItemExtIesExtension_IdPdcpDuplicationConfiguration struct {
	// @inject_tag: aper:"choiceIdx:4,valueExt,valueLB:0,valueUB:1,"
	IdPdcpDuplicationConfiguration PdcpduplicationConfiguration `protobuf:"varint,4,opt,name=id_pdcp_duplication_configuration,json=id-pdcpDuplicationConfiguration,proto3,enum=xnap.v1.PdcpduplicationConfiguration,oneof" aper:"choiceIdx:4,valueExt,valueLB:0,valueUB:1,"`
}

type DrbsToBeModifiedListModificationResponseSNterminatedItemExtIesExtension_IdDuplicationActivation struct {
	// @inject_tag: aper:"choiceIdx:5,valueExt,valueLB:0,valueUB:1,"
	IdDuplicationActivation DuplicationActivation `protobuf:"varint,5,opt,name=id_duplication_activation,json=id-duplicationActivation,proto3,enum=xnap.v1.DuplicationActivation,oneof" aper:"choiceIdx:5,valueExt,valueLB:0,valueUB:1,"`
}

func (*DrbsToBeModifiedListModificationResponseSNterminatedItemExtIesExtension_IdAdditionalPdcpDuplicationTnlList) isDrbsToBeModifiedListModificationResponseSNterminatedItemExtIesExtension_DrbsToBeModifiedListModificationResponseSnterminatedItemExtIes() {
}

func (*DrbsToBeModifiedListModificationResponseSNterminatedItemExtIesExtension_IdRlcduplicationInformation) isDrbsToBeModifiedListModificationResponseSNterminatedItemExtIesExtension_DrbsToBeModifiedListModificationResponseSnterminatedItemExtIes() {
}

func (*DrbsToBeModifiedListModificationResponseSNterminatedItemExtIesExtension_IdSecondarySnUlPdcpUpTnlinfo) isDrbsToBeModifiedListModificationResponseSNterminatedItemExtIesExtension_DrbsToBeModifiedListModificationResponseSnterminatedItemExtIes() {
}

func (*DrbsToBeModifiedListModificationResponseSNterminatedItemExtIesExtension_IdPdcpDuplicationConfiguration) isDrbsToBeModifiedListModificationResponseSNterminatedItemExtIesExtension_DrbsToBeModifiedListModificationResponseSnterminatedItemExtIes() {
}

func (*DrbsToBeModifiedListModificationResponseSNterminatedItemExtIesExtension_IdDuplicationActivation) isDrbsToBeModifiedListModificationResponseSNterminatedItemExtIesExtension_DrbsToBeModifiedListModificationResponseSnterminatedItemExtIes() {
}

// concrete instance(s) of class XNAP-PROTOCOL-EXTENSION from xnap_v1.asn1:6460
// @inject_tag: aper:"valueExt"
// {DRBsToBeModifiedList-ModificationResponse-SNterminated-Item-ExtIEs}
type DrbsToBeModifiedListModificationResponseSNterminatedItemExtIes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"unique,"
	Id *xnap_commondatatypes.ProtocolIeID `protobuf:"bytes,1,opt,name=id,json=&id,proto3" json:"id,omitempty" aper:"unique,"`
	// @inject_tag: aper:"valueLB:0,valueUB:2,"
	Criticality xnap_commondatatypes.Criticality `protobuf:"varint,2,opt,name=criticality,json=&criticality,proto3,enum=xnap.v1.Criticality" json:"criticality,omitempty" aper:"valueLB:0,valueUB:2,"`
	// @inject_tag: aper:"canonicalOrder,"
	Extension *DrbsToBeModifiedListModificationResponseSNterminatedItemExtIesExtension `protobuf:"bytes,3,opt,name=extension,json=&Extension,proto3" json:"extension,omitempty" aper:"canonicalOrder,"`
}

func (x *DrbsToBeModifiedListModificationResponseSNterminatedItemExtIes) Reset() {
	*x = DrbsToBeModifiedListModificationResponseSNterminatedItemExtIes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[554]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DrbsToBeModifiedListModificationResponseSNterminatedItemExtIes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DrbsToBeModifiedListModificationResponseSNterminatedItemExtIes) ProtoMessage() {}

func (x *DrbsToBeModifiedListModificationResponseSNterminatedItemExtIes) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[554]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DrbsToBeModifiedListModificationResponseSNterminatedItemExtIes.ProtoReflect.Descriptor instead.
func (*DrbsToBeModifiedListModificationResponseSNterminatedItemExtIes) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{554}
}

func (x *DrbsToBeModifiedListModificationResponseSNterminatedItemExtIes) GetId() *xnap_commondatatypes.ProtocolIeID {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *DrbsToBeModifiedListModificationResponseSNterminatedItemExtIes) GetCriticality() xnap_commondatatypes.Criticality {
	if x != nil {
		return x.Criticality
	}
	return xnap_commondatatypes.Criticality(0)
}

func (x *DrbsToBeModifiedListModificationResponseSNterminatedItemExtIes) GetExtension() *DrbsToBeModifiedListModificationResponseSNterminatedItemExtIesExtension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// sequence from xnap_v1.asn1:6452
// @inject_tag: aper:"valueExt"
// {DRBsToBeModifiedList-ModificationResponse-SNterminated-Item}
type DrbsToBeModifiedListModificationResponseSNterminatedItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DrbId *DrbID `protobuf:"bytes,1,opt,name=drb_id,json=drb-ID,proto3" json:"drb_id,omitempty"`
	// @inject_tag: aper:"optional,"
	SNUlPdcpUpTnlinfo *UptransportParameters `protobuf:"bytes,2,opt,name=s_n_ul_pdcp_up_tnlinfo,json=sN-UL-PDCP-UP-TNLInfo,proto3,oneof" json:"s_n_ul_pdcp_up_tnlinfo,omitempty" aper:"optional,"`
	// @inject_tag: aper:"optional,valueExt,"
	DRbQoS *QoSflowLevelQoSparameters `protobuf:"bytes,3,opt,name=d_rb_qo_s,json=dRB-QoS,proto3,oneof" json:"d_rb_qo_s,omitempty" aper:"optional,valueExt,"`
	// @inject_tag: aper:"optional,"
	QoSflowsMappedtoDrbSetupResponseSnterminated *QoSflowsMappedtoDrbSetupResponseSNterminated `protobuf:"bytes,4,opt,name=qo_sflows_mappedto_drb_setup_response_snterminated,json=qoSFlowsMappedtoDRB-SetupResponse-SNterminated,proto3,oneof" json:"qo_sflows_mappedto_drb_setup_response_snterminated,omitempty" aper:"optional,"`
	// @inject_tag: aper:"optional,sizeLB:1,"
	IEExtensions []*DrbsToBeModifiedListModificationResponseSNterminatedItemExtIes `protobuf:"bytes,5,rep,name=i_e_extensions,json=iE-Extensions,proto3" json:"i_e_extensions,omitempty" aper:"optional,sizeLB:1,"`
}

func (x *DrbsToBeModifiedListModificationResponseSNterminatedItem) Reset() {
	*x = DrbsToBeModifiedListModificationResponseSNterminatedItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[555]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DrbsToBeModifiedListModificationResponseSNterminatedItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DrbsToBeModifiedListModificationResponseSNterminatedItem) ProtoMessage() {}

func (x *DrbsToBeModifiedListModificationResponseSNterminatedItem) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[555]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DrbsToBeModifiedListModificationResponseSNterminatedItem.ProtoReflect.Descriptor instead.
func (*DrbsToBeModifiedListModificationResponseSNterminatedItem) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{555}
}

func (x *DrbsToBeModifiedListModificationResponseSNterminatedItem) GetDrbId() *DrbID {
	if x != nil {
		return x.DrbId
	}
	return nil
}

func (x *DrbsToBeModifiedListModificationResponseSNterminatedItem) GetSNUlPdcpUpTnlinfo() *UptransportParameters {
	if x != nil {
		return x.SNUlPdcpUpTnlinfo
	}
	return nil
}

func (x *DrbsToBeModifiedListModificationResponseSNterminatedItem) GetDRbQoS() *QoSflowLevelQoSparameters {
	if x != nil {
		return x.DRbQoS
	}
	return nil
}

func (x *DrbsToBeModifiedListModificationResponseSNterminatedItem) GetQoSflowsMappedtoDrbSetupResponseSnterminated() *QoSflowsMappedtoDrbSetupResponseSNterminated {
	if x != nil {
		return x.QoSflowsMappedtoDrbSetupResponseSnterminated
	}
	return nil
}

func (x *DrbsToBeModifiedListModificationResponseSNterminatedItem) GetIEExtensions() []*DrbsToBeModifiedListModificationResponseSNterminatedItemExtIes {
	if x != nil {
		return x.IEExtensions
	}
	return nil
}

// value set from xnap_v1.asn1:6486
// {PDUSessionResourceModificationInfo-MNterminated-ExtIEs}
type PdusessionResourceModificationInfoMNterminatedExtIes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *emptypb.Empty `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *PdusessionResourceModificationInfoMNterminatedExtIes) Reset() {
	*x = PdusessionResourceModificationInfoMNterminatedExtIes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[556]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PdusessionResourceModificationInfoMNterminatedExtIes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PdusessionResourceModificationInfoMNterminatedExtIes) ProtoMessage() {}

func (x *PdusessionResourceModificationInfoMNterminatedExtIes) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[556]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PdusessionResourceModificationInfoMNterminatedExtIes.ProtoReflect.Descriptor instead.
func (*PdusessionResourceModificationInfoMNterminatedExtIes) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{556}
}

func (x *PdusessionResourceModificationInfoMNterminatedExtIes) GetValue() *emptypb.Empty {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:6478
// @inject_tag: aper:"valueExt"
// {PDUSessionResourceModificationInfo-MNterminated}
type PdusessionResourceModificationInfoMNterminated struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"valueExt,valueLB:0,valueUB:4,"
	PduSessionType PdusessionType `protobuf:"varint,1,opt,name=pdu_session_type,json=pduSessionType,proto3,enum=xnap.v1.PdusessionType" json:"pdu_session_type,omitempty" aper:"valueExt,valueLB:0,valueUB:4,"`
	// @inject_tag: aper:"optional,"
	DRbsToBeSetup *DrbsToBeSetupListSetupMNterminated `protobuf:"bytes,2,opt,name=d_rbs_to_be_setup,json=dRBsToBeSetup,proto3,oneof" json:"d_rbs_to_be_setup,omitempty" aper:"optional,"`
	// @inject_tag: aper:"optional,"
	DRbsToBeModified *DrbsToBeModifiedListModificationMNterminated `protobuf:"bytes,3,opt,name=d_rbs_to_be_modified,json=dRBsToBeModified,proto3,oneof" json:"d_rbs_to_be_modified,omitempty" aper:"optional,"`
	// @inject_tag: aper:"optional,"
	DRbsToBeReleased *DrbListwithCause `protobuf:"bytes,4,opt,name=d_rbs_to_be_released,json=dRBsToBeReleased,proto3,oneof" json:"d_rbs_to_be_released,omitempty" aper:"optional,"`
	// @inject_tag: aper:"optional,sizeLB:1,"
	IEExtensions []*PdusessionResourceModificationInfoMNterminatedExtIes `protobuf:"bytes,5,rep,name=i_e_extensions,json=iE-Extensions,proto3" json:"i_e_extensions,omitempty" aper:"optional,sizeLB:1,"`
}

func (x *PdusessionResourceModificationInfoMNterminated) Reset() {
	*x = PdusessionResourceModificationInfoMNterminated{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[557]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PdusessionResourceModificationInfoMNterminated) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PdusessionResourceModificationInfoMNterminated) ProtoMessage() {}

func (x *PdusessionResourceModificationInfoMNterminated) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[557]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PdusessionResourceModificationInfoMNterminated.ProtoReflect.Descriptor instead.
func (*PdusessionResourceModificationInfoMNterminated) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{557}
}

func (x *PdusessionResourceModificationInfoMNterminated) GetPduSessionType() PdusessionType {
	if x != nil {
		return x.PduSessionType
	}
	return PdusessionType_PDUSESSION_TYPE_IPV4
}

func (x *PdusessionResourceModificationInfoMNterminated) GetDRbsToBeSetup() *DrbsToBeSetupListSetupMNterminated {
	if x != nil {
		return x.DRbsToBeSetup
	}
	return nil
}

func (x *PdusessionResourceModificationInfoMNterminated) GetDRbsToBeModified() *DrbsToBeModifiedListModificationMNterminated {
	if x != nil {
		return x.DRbsToBeModified
	}
	return nil
}

func (x *PdusessionResourceModificationInfoMNterminated) GetDRbsToBeReleased() *DrbListwithCause {
	if x != nil {
		return x.DRbsToBeReleased
	}
	return nil
}

func (x *PdusessionResourceModificationInfoMNterminated) GetIEExtensions() []*PdusessionResourceModificationInfoMNterminatedExtIes {
	if x != nil {
		return x.IEExtensions
	}
	return nil
}

// sequence from xnap_v1.asn1:6493
// {DRBsToBeModifiedList-Modification-MNterminated}
type DrbsToBeModifiedListModificationMNterminated struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"valueExt,sizeLB:1,sizeUB:32,"
	Value []*DrbsToBeModifiedListModificationMNterminatedItem `protobuf:"bytes,1,rep,name=value,proto3" json:"value,omitempty" aper:"valueExt,sizeLB:1,sizeUB:32,"`
}

func (x *DrbsToBeModifiedListModificationMNterminated) Reset() {
	*x = DrbsToBeModifiedListModificationMNterminated{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[558]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DrbsToBeModifiedListModificationMNterminated) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DrbsToBeModifiedListModificationMNterminated) ProtoMessage() {}

func (x *DrbsToBeModifiedListModificationMNterminated) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[558]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DrbsToBeModifiedListModificationMNterminated.ProtoReflect.Descriptor instead.
func (*DrbsToBeModifiedListModificationMNterminated) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{558}
}

func (x *DrbsToBeModifiedListModificationMNterminated) GetValue() []*DrbsToBeModifiedListModificationMNterminatedItem {
	if x != nil {
		return x.Value
	}
	return nil
}

// value set from xnap_v1.asn1:6506
// {DRBsToBeModifiedList-Modification-MNterminated-Item-ExtIEs&Extension}
type DrbsToBeModifiedListModificationMNterminatedItemExtIesExtension struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// value set translated as choice from xnap_v1.asn1:6506
	//
	// Types that are assignable to DrbsToBeModifiedListModificationMnterminatedItemExtIes:
	//	*DrbsToBeModifiedListModificationMNterminatedItemExtIesExtension_IdAdditionalPdcpDuplicationTnlList
	//	*DrbsToBeModifiedListModificationMNterminatedItemExtIesExtension_IdRlcduplicationInformation
	DrbsToBeModifiedListModificationMnterminatedItemExtIes isDrbsToBeModifiedListModificationMNterminatedItemExtIesExtension_DrbsToBeModifiedListModificationMnterminatedItemExtIes `protobuf_oneof:"drbs_to_be_modified_list_modification_mnterminated_item_ext_ies"`
}

func (x *DrbsToBeModifiedListModificationMNterminatedItemExtIesExtension) Reset() {
	*x = DrbsToBeModifiedListModificationMNterminatedItemExtIesExtension{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[559]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DrbsToBeModifiedListModificationMNterminatedItemExtIesExtension) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DrbsToBeModifiedListModificationMNterminatedItemExtIesExtension) ProtoMessage() {}

func (x *DrbsToBeModifiedListModificationMNterminatedItemExtIesExtension) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[559]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DrbsToBeModifiedListModificationMNterminatedItemExtIesExtension.ProtoReflect.Descriptor instead.
func (*DrbsToBeModifiedListModificationMNterminatedItemExtIesExtension) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{559}
}

func (m *DrbsToBeModifiedListModificationMNterminatedItemExtIesExtension) GetDrbsToBeModifiedListModificationMnterminatedItemExtIes() isDrbsToBeModifiedListModificationMNterminatedItemExtIesExtension_DrbsToBeModifiedListModificationMnterminatedItemExtIes {
	if m != nil {
		return m.DrbsToBeModifiedListModificationMnterminatedItemExtIes
	}
	return nil
}

func (x *DrbsToBeModifiedListModificationMNterminatedItemExtIesExtension) GetIdAdditionalPdcpDuplicationTnlList() *AdditionalPDcpDuplicationTNlList {
	if x, ok := x.GetDrbsToBeModifiedListModificationMnterminatedItemExtIes().(*DrbsToBeModifiedListModificationMNterminatedItemExtIesExtension_IdAdditionalPdcpDuplicationTnlList); ok {
		return x.IdAdditionalPdcpDuplicationTnlList
	}
	return nil
}

func (x *DrbsToBeModifiedListModificationMNterminatedItemExtIesExtension) GetIdRlcduplicationInformation() *RlcduplicationInformation {
	if x, ok := x.GetDrbsToBeModifiedListModificationMnterminatedItemExtIes().(*DrbsToBeModifiedListModificationMNterminatedItemExtIesExtension_IdRlcduplicationInformation); ok {
		return x.IdRlcduplicationInformation
	}
	return nil
}

type isDrbsToBeModifiedListModificationMNterminatedItemExtIesExtension_DrbsToBeModifiedListModificationMnterminatedItemExtIes interface {
	isDrbsToBeModifiedListModificationMNterminatedItemExtIesExtension_DrbsToBeModifiedListModificationMnterminatedItemExtIes()
}

type DrbsToBeModifiedListModificationMNterminatedItemExtIesExtension_IdAdditionalPdcpDuplicationTnlList struct {
	// @inject_tag: aper:"choiceIdx:1,"
	IdAdditionalPdcpDuplicationTnlList *AdditionalPDcpDuplicationTNlList `protobuf:"bytes,1,opt,name=id_additional_pdcp_duplication_tnl_list,json=id-Additional-PDCP-Duplication-TNL-List,proto3,oneof" aper:"choiceIdx:1,"`
}

type DrbsToBeModifiedListModificationMNterminatedItemExtIesExtension_IdRlcduplicationInformation struct {
	// @inject_tag: aper:"choiceIdx:2,"
	IdRlcduplicationInformation *RlcduplicationInformation `protobuf:"bytes,2,opt,name=id_rlcduplication_information,json=id-RLCDuplicationInformation,proto3,oneof" aper:"choiceIdx:2,"`
}

func (*DrbsToBeModifiedListModificationMNterminatedItemExtIesExtension_IdAdditionalPdcpDuplicationTnlList) isDrbsToBeModifiedListModificationMNterminatedItemExtIesExtension_DrbsToBeModifiedListModificationMnterminatedItemExtIes() {
}

func (*DrbsToBeModifiedListModificationMNterminatedItemExtIesExtension_IdRlcduplicationInformation) isDrbsToBeModifiedListModificationMNterminatedItemExtIesExtension_DrbsToBeModifiedListModificationMnterminatedItemExtIes() {
}

// concrete instance(s) of class XNAP-PROTOCOL-EXTENSION from xnap_v1.asn1:6506
// @inject_tag: aper:"valueExt"
// {DRBsToBeModifiedList-Modification-MNterminated-Item-ExtIEs}
type DrbsToBeModifiedListModificationMNterminatedItemExtIes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"unique,"
	Id *xnap_commondatatypes.ProtocolIeID `protobuf:"bytes,1,opt,name=id,json=&id,proto3" json:"id,omitempty" aper:"unique,"`
	// @inject_tag: aper:"valueLB:0,valueUB:2,"
	Criticality xnap_commondatatypes.Criticality `protobuf:"varint,2,opt,name=criticality,json=&criticality,proto3,enum=xnap.v1.Criticality" json:"criticality,omitempty" aper:"valueLB:0,valueUB:2,"`
	// @inject_tag: aper:"canonicalOrder,"
	Extension *DrbsToBeModifiedListModificationMNterminatedItemExtIesExtension `protobuf:"bytes,3,opt,name=extension,json=&Extension,proto3" json:"extension,omitempty" aper:"canonicalOrder,"`
}

func (x *DrbsToBeModifiedListModificationMNterminatedItemExtIes) Reset() {
	*x = DrbsToBeModifiedListModificationMNterminatedItemExtIes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[560]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DrbsToBeModifiedListModificationMNterminatedItemExtIes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DrbsToBeModifiedListModificationMNterminatedItemExtIes) ProtoMessage() {}

func (x *DrbsToBeModifiedListModificationMNterminatedItemExtIes) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[560]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DrbsToBeModifiedListModificationMNterminatedItemExtIes.ProtoReflect.Descriptor instead.
func (*DrbsToBeModifiedListModificationMNterminatedItemExtIes) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{560}
}

func (x *DrbsToBeModifiedListModificationMNterminatedItemExtIes) GetId() *xnap_commondatatypes.ProtocolIeID {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *DrbsToBeModifiedListModificationMNterminatedItemExtIes) GetCriticality() xnap_commondatatypes.Criticality {
	if x != nil {
		return x.Criticality
	}
	return xnap_commondatatypes.Criticality(0)
}

func (x *DrbsToBeModifiedListModificationMNterminatedItemExtIes) GetExtension() *DrbsToBeModifiedListModificationMNterminatedItemExtIesExtension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// sequence from xnap_v1.asn1:6494
// @inject_tag: aper:"valueExt"
// {DRBsToBeModifiedList-Modification-MNterminated-Item}
type DrbsToBeModifiedListModificationMNterminatedItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DrbId *DrbID `protobuf:"bytes,1,opt,name=drb_id,json=drb-ID,proto3" json:"drb_id,omitempty"`
	// @inject_tag: aper:"optional,"
	MNUlPdcpUpTnlinfo *UptransportParameters `protobuf:"bytes,2,opt,name=m_n_ul_pdcp_up_tnlinfo,json=mN-UL-PDCP-UP-TNLInfo,proto3,oneof" json:"m_n_ul_pdcp_up_tnlinfo,omitempty" aper:"optional,"`
	// @inject_tag: aper:"optional,valueExt,"
	DRbQoS *QoSflowLevelQoSparameters `protobuf:"bytes,3,opt,name=d_rb_qo_s,json=dRB-QoS,proto3,oneof" json:"d_rb_qo_s,omitempty" aper:"optional,valueExt,"`
	// @inject_tag: aper:"optional,"
	SecondaryMnUlPdcpUpTnlinfo *UptransportParameters `protobuf:"bytes,4,opt,name=secondary_mn_ul_pdcp_up_tnlinfo,json=secondary-MN-UL-PDCP-UP-TNLInfo,proto3,oneof" json:"secondary_mn_ul_pdcp_up_tnlinfo,omitempty" aper:"optional,"`
	// @inject_tag: aper:"optional,valueExt,"
	ULConfiguration *Ulconfiguration `protobuf:"bytes,5,opt,name=u_l_configuration,json=uL-Configuration,proto3,oneof" json:"u_l_configuration,omitempty" aper:"optional,valueExt,"`
	// @inject_tag: aper:"optional,valueExt,valueLB:0,valueUB:1,"
	PdcpDuplicationConfiguration *PdcpduplicationConfiguration `protobuf:"varint,6,opt,name=pdcp_duplication_configuration,json=pdcpDuplicationConfiguration,proto3,enum=xnap.v1.PdcpduplicationConfiguration,oneof" json:"pdcp_duplication_configuration,omitempty" aper:"optional,valueExt,valueLB:0,valueUB:1,"`
	// @inject_tag: aper:"optional,valueExt,valueLB:0,valueUB:1,"
	DuplicationActivation *DuplicationActivation `protobuf:"varint,7,opt,name=duplication_activation,json=duplicationActivation,proto3,enum=xnap.v1.DuplicationActivation,oneof" json:"duplication_activation,omitempty" aper:"optional,valueExt,valueLB:0,valueUB:1,"`
	// @inject_tag: aper:"optional,"
	QoSflowsMappedtoDrbSetupMnterminated *QoSflowsMappedtoDrbSetupMNterminated `protobuf:"bytes,8,opt,name=qo_sflows_mappedto_drb_setup_mnterminated,json=qoSFlowsMappedtoDRB-Setup-MNterminated,proto3,oneof" json:"qo_sflows_mappedto_drb_setup_mnterminated,omitempty" aper:"optional,"`
	// @inject_tag: aper:"optional,sizeLB:1,"
	IEExtensions []*DrbsToBeModifiedListModificationMNterminatedItemExtIes `protobuf:"bytes,9,rep,name=i_e_extensions,json=iE-Extensions,proto3" json:"i_e_extensions,omitempty" aper:"optional,sizeLB:1,"`
}

func (x *DrbsToBeModifiedListModificationMNterminatedItem) Reset() {
	*x = DrbsToBeModifiedListModificationMNterminatedItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[561]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DrbsToBeModifiedListModificationMNterminatedItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DrbsToBeModifiedListModificationMNterminatedItem) ProtoMessage() {}

func (x *DrbsToBeModifiedListModificationMNterminatedItem) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[561]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DrbsToBeModifiedListModificationMNterminatedItem.ProtoReflect.Descriptor instead.
func (*DrbsToBeModifiedListModificationMNterminatedItem) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{561}
}

func (x *DrbsToBeModifiedListModificationMNterminatedItem) GetDrbId() *DrbID {
	if x != nil {
		return x.DrbId
	}
	return nil
}

func (x *DrbsToBeModifiedListModificationMNterminatedItem) GetMNUlPdcpUpTnlinfo() *UptransportParameters {
	if x != nil {
		return x.MNUlPdcpUpTnlinfo
	}
	return nil
}

func (x *DrbsToBeModifiedListModificationMNterminatedItem) GetDRbQoS() *QoSflowLevelQoSparameters {
	if x != nil {
		return x.DRbQoS
	}
	return nil
}

func (x *DrbsToBeModifiedListModificationMNterminatedItem) GetSecondaryMnUlPdcpUpTnlinfo() *UptransportParameters {
	if x != nil {
		return x.SecondaryMnUlPdcpUpTnlinfo
	}
	return nil
}

func (x *DrbsToBeModifiedListModificationMNterminatedItem) GetULConfiguration() *Ulconfiguration {
	if x != nil {
		return x.ULConfiguration
	}
	return nil
}

func (x *DrbsToBeModifiedListModificationMNterminatedItem) GetPdcpDuplicationConfiguration() PdcpduplicationConfiguration {
	if x != nil && x.PdcpDuplicationConfiguration != nil {
		return *x.PdcpDuplicationConfiguration
	}
	return PdcpduplicationConfiguration_PDCPDUPLICATION_CONFIGURATION_CONFIGURED
}

func (x *DrbsToBeModifiedListModificationMNterminatedItem) GetDuplicationActivation() DuplicationActivation {
	if x != nil && x.DuplicationActivation != nil {
		return *x.DuplicationActivation
	}
	return DuplicationActivation_DUPLICATION_ACTIVATION_ACTIVE
}

func (x *DrbsToBeModifiedListModificationMNterminatedItem) GetQoSflowsMappedtoDrbSetupMnterminated() *QoSflowsMappedtoDrbSetupMNterminated {
	if x != nil {
		return x.QoSflowsMappedtoDrbSetupMnterminated
	}
	return nil
}

func (x *DrbsToBeModifiedListModificationMNterminatedItem) GetIEExtensions() []*DrbsToBeModifiedListModificationMNterminatedItemExtIes {
	if x != nil {
		return x.IEExtensions
	}
	return nil
}

// value set from xnap_v1.asn1:6528
// {PDUSessionResourceModificationResponseInfo-MNterminated-ExtIEs}
type PdusessionResourceModificationResponseInfoMNterminatedExtIes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *emptypb.Empty `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *PdusessionResourceModificationResponseInfoMNterminatedExtIes) Reset() {
	*x = PdusessionResourceModificationResponseInfoMNterminatedExtIes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[562]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PdusessionResourceModificationResponseInfoMNterminatedExtIes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PdusessionResourceModificationResponseInfoMNterminatedExtIes) ProtoMessage() {}

func (x *PdusessionResourceModificationResponseInfoMNterminatedExtIes) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[562]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PdusessionResourceModificationResponseInfoMNterminatedExtIes.ProtoReflect.Descriptor instead.
func (*PdusessionResourceModificationResponseInfoMNterminatedExtIes) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{562}
}

func (x *PdusessionResourceModificationResponseInfoMNterminatedExtIes) GetValue() *emptypb.Empty {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:6521
// @inject_tag: aper:"valueExt"
// {PDUSessionResourceModificationResponseInfo-MNterminated}
type PdusessionResourceModificationResponseInfoMNterminated struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DRbsAdmittedList *DrbsAdmittedListModificationResponseMNterminated `protobuf:"bytes,1,opt,name=d_rbs_admitted_list,json=dRBsAdmittedList,proto3" json:"d_rbs_admitted_list,omitempty"`
	// @inject_tag: aper:"optional,"
	DRbsReleasedList *DrbList `protobuf:"bytes,2,opt,name=d_rbs_released_list,json=dRBsReleasedList,proto3,oneof" json:"d_rbs_released_list,omitempty" aper:"optional,"`
	// @inject_tag: aper:"optional,"
	DRbsNotAdmittedSetupModifyList *DrbListwithCause `protobuf:"bytes,3,opt,name=d_rbs_not_admitted_setup_modify_list,json=dRBsNotAdmittedSetupModifyList,proto3,oneof" json:"d_rbs_not_admitted_setup_modify_list,omitempty" aper:"optional,"`
	// @inject_tag: aper:"optional,sizeLB:1,"
	IEExtensions []*PdusessionResourceModificationResponseInfoMNterminatedExtIes `protobuf:"bytes,4,rep,name=i_e_extensions,json=iE-Extensions,proto3" json:"i_e_extensions,omitempty" aper:"optional,sizeLB:1,"`
}

func (x *PdusessionResourceModificationResponseInfoMNterminated) Reset() {
	*x = PdusessionResourceModificationResponseInfoMNterminated{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[563]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PdusessionResourceModificationResponseInfoMNterminated) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PdusessionResourceModificationResponseInfoMNterminated) ProtoMessage() {}

func (x *PdusessionResourceModificationResponseInfoMNterminated) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[563]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PdusessionResourceModificationResponseInfoMNterminated.ProtoReflect.Descriptor instead.
func (*PdusessionResourceModificationResponseInfoMNterminated) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{563}
}

func (x *PdusessionResourceModificationResponseInfoMNterminated) GetDRbsAdmittedList() *DrbsAdmittedListModificationResponseMNterminated {
	if x != nil {
		return x.DRbsAdmittedList
	}
	return nil
}

func (x *PdusessionResourceModificationResponseInfoMNterminated) GetDRbsReleasedList() *DrbList {
	if x != nil {
		return x.DRbsReleasedList
	}
	return nil
}

func (x *PdusessionResourceModificationResponseInfoMNterminated) GetDRbsNotAdmittedSetupModifyList() *DrbListwithCause {
	if x != nil {
		return x.DRbsNotAdmittedSetupModifyList
	}
	return nil
}

func (x *PdusessionResourceModificationResponseInfoMNterminated) GetIEExtensions() []*PdusessionResourceModificationResponseInfoMNterminatedExtIes {
	if x != nil {
		return x.IEExtensions
	}
	return nil
}

// sequence from xnap_v1.asn1:6534
// {DRBsAdmittedList-ModificationResponse-MNterminated}
type DrbsAdmittedListModificationResponseMNterminated struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"valueExt,sizeLB:1,sizeUB:32,"
	Value []*DrbsAdmittedListModificationResponseMNterminatedItem `protobuf:"bytes,1,rep,name=value,proto3" json:"value,omitempty" aper:"valueExt,sizeLB:1,sizeUB:32,"`
}

func (x *DrbsAdmittedListModificationResponseMNterminated) Reset() {
	*x = DrbsAdmittedListModificationResponseMNterminated{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[564]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DrbsAdmittedListModificationResponseMNterminated) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DrbsAdmittedListModificationResponseMNterminated) ProtoMessage() {}

func (x *DrbsAdmittedListModificationResponseMNterminated) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[564]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DrbsAdmittedListModificationResponseMNterminated.ProtoReflect.Descriptor instead.
func (*DrbsAdmittedListModificationResponseMNterminated) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{564}
}

func (x *DrbsAdmittedListModificationResponseMNterminated) GetValue() []*DrbsAdmittedListModificationResponseMNterminatedItem {
	if x != nil {
		return x.Value
	}
	return nil
}

// value set from xnap_v1.asn1:6543
// {DRBsAdmittedList-ModificationResponse-MNterminated-Item-ExtIEs&Extension}
type DrbsAdmittedListModificationResponseMNterminatedItemExtIesExtension struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// value set translated as choice from xnap_v1.asn1:6543
	//
	// Types that are assignable to DrbsAdmittedListModificationResponseMnterminatedItemExtIes:
	//	*DrbsAdmittedListModificationResponseMNterminatedItemExtIesExtension_IdAdditionalPdcpDuplicationTnlList
	//	*DrbsAdmittedListModificationResponseMNterminatedItemExtIesExtension_IdQoSflowsMappedtoDrbSetupResponseMnterminated
	DrbsAdmittedListModificationResponseMnterminatedItemExtIes isDrbsAdmittedListModificationResponseMNterminatedItemExtIesExtension_DrbsAdmittedListModificationResponseMnterminatedItemExtIes `protobuf_oneof:"drbs_admitted_list_modification_response_mnterminated_item_ext_ies"`
}

func (x *DrbsAdmittedListModificationResponseMNterminatedItemExtIesExtension) Reset() {
	*x = DrbsAdmittedListModificationResponseMNterminatedItemExtIesExtension{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[565]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DrbsAdmittedListModificationResponseMNterminatedItemExtIesExtension) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DrbsAdmittedListModificationResponseMNterminatedItemExtIesExtension) ProtoMessage() {}

func (x *DrbsAdmittedListModificationResponseMNterminatedItemExtIesExtension) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[565]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DrbsAdmittedListModificationResponseMNterminatedItemExtIesExtension.ProtoReflect.Descriptor instead.
func (*DrbsAdmittedListModificationResponseMNterminatedItemExtIesExtension) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{565}
}

func (m *DrbsAdmittedListModificationResponseMNterminatedItemExtIesExtension) GetDrbsAdmittedListModificationResponseMnterminatedItemExtIes() isDrbsAdmittedListModificationResponseMNterminatedItemExtIesExtension_DrbsAdmittedListModificationResponseMnterminatedItemExtIes {
	if m != nil {
		return m.DrbsAdmittedListModificationResponseMnterminatedItemExtIes
	}
	return nil
}

func (x *DrbsAdmittedListModificationResponseMNterminatedItemExtIesExtension) GetIdAdditionalPdcpDuplicationTnlList() *AdditionalPDcpDuplicationTNlList {
	if x, ok := x.GetDrbsAdmittedListModificationResponseMnterminatedItemExtIes().(*DrbsAdmittedListModificationResponseMNterminatedItemExtIesExtension_IdAdditionalPdcpDuplicationTnlList); ok {
		return x.IdAdditionalPdcpDuplicationTnlList
	}
	return nil
}

func (x *DrbsAdmittedListModificationResponseMNterminatedItemExtIesExtension) GetIdQoSflowsMappedtoDrbSetupResponseMnterminated() *QoSflowsMappedtoDrbSetupResponseMNterminated {
	if x, ok := x.GetDrbsAdmittedListModificationResponseMnterminatedItemExtIes().(*DrbsAdmittedListModificationResponseMNterminatedItemExtIesExtension_IdQoSflowsMappedtoDrbSetupResponseMnterminated); ok {
		return x.IdQoSflowsMappedtoDrbSetupResponseMnterminated
	}
	return nil
}

type isDrbsAdmittedListModificationResponseMNterminatedItemExtIesExtension_DrbsAdmittedListModificationResponseMnterminatedItemExtIes interface {
	isDrbsAdmittedListModificationResponseMNterminatedItemExtIesExtension_DrbsAdmittedListModificationResponseMnterminatedItemExtIes()
}

type DrbsAdmittedListModificationResponseMNterminatedItemExtIesExtension_IdAdditionalPdcpDuplicationTnlList struct {
	// @inject_tag: aper:"choiceIdx:1,"
	IdAdditionalPdcpDuplicationTnlList *AdditionalPDcpDuplicationTNlList `protobuf:"bytes,1,opt,name=id_additional_pdcp_duplication_tnl_list,json=id-Additional-PDCP-Duplication-TNL-List,proto3,oneof" aper:"choiceIdx:1,"`
}

type DrbsAdmittedListModificationResponseMNterminatedItemExtIesExtension_IdQoSflowsMappedtoDrbSetupResponseMnterminated struct {
	// @inject_tag: aper:"choiceIdx:2,"
	IdQoSflowsMappedtoDrbSetupResponseMnterminated *QoSflowsMappedtoDrbSetupResponseMNterminated `protobuf:"bytes,2,opt,name=id_qo_sflows_mappedto_drb_setup_response_mnterminated,json=id-QoSFlowsMappedtoDRB-SetupResponse-MNterminated,proto3,oneof" aper:"choiceIdx:2,"`
}

func (*DrbsAdmittedListModificationResponseMNterminatedItemExtIesExtension_IdAdditionalPdcpDuplicationTnlList) isDrbsAdmittedListModificationResponseMNterminatedItemExtIesExtension_DrbsAdmittedListModificationResponseMnterminatedItemExtIes() {
}

func (*DrbsAdmittedListModificationResponseMNterminatedItemExtIesExtension_IdQoSflowsMappedtoDrbSetupResponseMnterminated) isDrbsAdmittedListModificationResponseMNterminatedItemExtIesExtension_DrbsAdmittedListModificationResponseMnterminatedItemExtIes() {
}

// concrete instance(s) of class XNAP-PROTOCOL-EXTENSION from xnap_v1.asn1:6543
// @inject_tag: aper:"valueExt"
// {DRBsAdmittedList-ModificationResponse-MNterminated-Item-ExtIEs}
type DrbsAdmittedListModificationResponseMNterminatedItemExtIes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"unique,"
	Id *xnap_commondatatypes.ProtocolIeID `protobuf:"bytes,1,opt,name=id,json=&id,proto3" json:"id,omitempty" aper:"unique,"`
	// @inject_tag: aper:"valueLB:0,valueUB:2,"
	Criticality xnap_commondatatypes.Criticality `protobuf:"varint,2,opt,name=criticality,json=&criticality,proto3,enum=xnap.v1.Criticality" json:"criticality,omitempty" aper:"valueLB:0,valueUB:2,"`
	// @inject_tag: aper:"canonicalOrder,"
	Extension *DrbsAdmittedListModificationResponseMNterminatedItemExtIesExtension `protobuf:"bytes,3,opt,name=extension,json=&Extension,proto3" json:"extension,omitempty" aper:"canonicalOrder,"`
}

func (x *DrbsAdmittedListModificationResponseMNterminatedItemExtIes) Reset() {
	*x = DrbsAdmittedListModificationResponseMNterminatedItemExtIes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[566]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DrbsAdmittedListModificationResponseMNterminatedItemExtIes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DrbsAdmittedListModificationResponseMNterminatedItemExtIes) ProtoMessage() {}

func (x *DrbsAdmittedListModificationResponseMNterminatedItemExtIes) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[566]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DrbsAdmittedListModificationResponseMNterminatedItemExtIes.ProtoReflect.Descriptor instead.
func (*DrbsAdmittedListModificationResponseMNterminatedItemExtIes) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{566}
}

func (x *DrbsAdmittedListModificationResponseMNterminatedItemExtIes) GetId() *xnap_commondatatypes.ProtocolIeID {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *DrbsAdmittedListModificationResponseMNterminatedItemExtIes) GetCriticality() xnap_commondatatypes.Criticality {
	if x != nil {
		return x.Criticality
	}
	return xnap_commondatatypes.Criticality(0)
}

func (x *DrbsAdmittedListModificationResponseMNterminatedItemExtIes) GetExtension() *DrbsAdmittedListModificationResponseMNterminatedItemExtIesExtension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// sequence from xnap_v1.asn1:6535
// @inject_tag: aper:"valueExt"
// {DRBsAdmittedList-ModificationResponse-MNterminated-Item}
type DrbsAdmittedListModificationResponseMNterminatedItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DrbId *DrbID `protobuf:"bytes,1,opt,name=drb_id,json=drb-ID,proto3" json:"drb_id,omitempty"`
	// @inject_tag: aper:"optional,"
	SNDlScgUpTnlinfo *UptransportParameters `protobuf:"bytes,2,opt,name=s_n_dl_scg_up_tnlinfo,json=sN-DL-SCG-UP-TNLInfo,proto3,oneof" json:"s_n_dl_scg_up_tnlinfo,omitempty" aper:"optional,"`
	// @inject_tag: aper:"optional,"
	SecondarySnDlScgUpTnlinfo *UptransportParameters `protobuf:"bytes,3,opt,name=secondary_sn_dl_scg_up_tnlinfo,json=secondary-SN-DL-SCG-UP-TNLInfo,proto3,oneof" json:"secondary_sn_dl_scg_up_tnlinfo,omitempty" aper:"optional,"`
	// @inject_tag: aper:"optional,"
	LCid *Lcid `protobuf:"bytes,4,opt,name=l_cid,json=lCID,proto3,oneof" json:"l_cid,omitempty" aper:"optional,"`
	// @inject_tag: aper:"optional,sizeLB:1,"
	IEExtensions []*DrbsAdmittedListModificationResponseMNterminatedItemExtIes `protobuf:"bytes,5,rep,name=i_e_extensions,json=iE-Extensions,proto3" json:"i_e_extensions,omitempty" aper:"optional,sizeLB:1,"`
}

func (x *DrbsAdmittedListModificationResponseMNterminatedItem) Reset() {
	*x = DrbsAdmittedListModificationResponseMNterminatedItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[567]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DrbsAdmittedListModificationResponseMNterminatedItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DrbsAdmittedListModificationResponseMNterminatedItem) ProtoMessage() {}

func (x *DrbsAdmittedListModificationResponseMNterminatedItem) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[567]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DrbsAdmittedListModificationResponseMNterminatedItem.ProtoReflect.Descriptor instead.
func (*DrbsAdmittedListModificationResponseMNterminatedItem) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{567}
}

func (x *DrbsAdmittedListModificationResponseMNterminatedItem) GetDrbId() *DrbID {
	if x != nil {
		return x.DrbId
	}
	return nil
}

func (x *DrbsAdmittedListModificationResponseMNterminatedItem) GetSNDlScgUpTnlinfo() *UptransportParameters {
	if x != nil {
		return x.SNDlScgUpTnlinfo
	}
	return nil
}

func (x *DrbsAdmittedListModificationResponseMNterminatedItem) GetSecondarySnDlScgUpTnlinfo() *UptransportParameters {
	if x != nil {
		return x.SecondarySnDlScgUpTnlinfo
	}
	return nil
}

func (x *DrbsAdmittedListModificationResponseMNterminatedItem) GetLCid() *Lcid {
	if x != nil {
		return x.LCid
	}
	return nil
}

func (x *DrbsAdmittedListModificationResponseMNterminatedItem) GetIEExtensions() []*DrbsAdmittedListModificationResponseMNterminatedItemExtIes {
	if x != nil {
		return x.IEExtensions
	}
	return nil
}

// value set from xnap_v1.asn1:6563
// {PDUSessionResourceChangeRequiredInfo-SNterminated-ExtIEs}
type PdusessionResourceChangeRequiredInfoSNterminatedExtIes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *emptypb.Empty `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *PdusessionResourceChangeRequiredInfoSNterminatedExtIes) Reset() {
	*x = PdusessionResourceChangeRequiredInfoSNterminatedExtIes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[568]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PdusessionResourceChangeRequiredInfoSNterminatedExtIes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PdusessionResourceChangeRequiredInfoSNterminatedExtIes) ProtoMessage() {}

func (x *PdusessionResourceChangeRequiredInfoSNterminatedExtIes) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[568]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PdusessionResourceChangeRequiredInfoSNterminatedExtIes.ProtoReflect.Descriptor instead.
func (*PdusessionResourceChangeRequiredInfoSNterminatedExtIes) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{568}
}

func (x *PdusessionResourceChangeRequiredInfoSNterminatedExtIes) GetValue() *emptypb.Empty {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:6558
// @inject_tag: aper:"valueExt"
// {PDUSessionResourceChangeRequiredInfo-SNterminated}
type PdusessionResourceChangeRequiredInfoSNterminated struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"optional,valueExt,"
	DataforwardinginfofromSource *DataforwardingandOffloadingInfofromSource `protobuf:"bytes,1,opt,name=dataforwardinginfofrom_source,json=dataforwardinginfofromSource,proto3,oneof" json:"dataforwardinginfofrom_source,omitempty" aper:"optional,valueExt,"`
	// @inject_tag: aper:"optional,sizeLB:1,"
	IEExtensions []*PdusessionResourceChangeRequiredInfoSNterminatedExtIes `protobuf:"bytes,2,rep,name=i_e_extensions,json=iE-Extensions,proto3" json:"i_e_extensions,omitempty" aper:"optional,sizeLB:1,"`
}

func (x *PdusessionResourceChangeRequiredInfoSNterminated) Reset() {
	*x = PdusessionResourceChangeRequiredInfoSNterminated{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[569]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PdusessionResourceChangeRequiredInfoSNterminated) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PdusessionResourceChangeRequiredInfoSNterminated) ProtoMessage() {}

func (x *PdusessionResourceChangeRequiredInfoSNterminated) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[569]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PdusessionResourceChangeRequiredInfoSNterminated.ProtoReflect.Descriptor instead.
func (*PdusessionResourceChangeRequiredInfoSNterminated) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{569}
}

func (x *PdusessionResourceChangeRequiredInfoSNterminated) GetDataforwardinginfofromSource() *DataforwardingandOffloadingInfofromSource {
	if x != nil {
		return x.DataforwardinginfofromSource
	}
	return nil
}

func (x *PdusessionResourceChangeRequiredInfoSNterminated) GetIEExtensions() []*PdusessionResourceChangeRequiredInfoSNterminatedExtIes {
	if x != nil {
		return x.IEExtensions
	}
	return nil
}

// value set from xnap_v1.asn1:6581
// {PDUSessionResourceChangeConfirmInfo-SNterminated-ExtIEs}
type PdusessionResourceChangeConfirmInfoSNterminatedExtIes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *emptypb.Empty `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *PdusessionResourceChangeConfirmInfoSNterminatedExtIes) Reset() {
	*x = PdusessionResourceChangeConfirmInfoSNterminatedExtIes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[570]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PdusessionResourceChangeConfirmInfoSNterminatedExtIes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PdusessionResourceChangeConfirmInfoSNterminatedExtIes) ProtoMessage() {}

func (x *PdusessionResourceChangeConfirmInfoSNterminatedExtIes) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[570]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PdusessionResourceChangeConfirmInfoSNterminatedExtIes.ProtoReflect.Descriptor instead.
func (*PdusessionResourceChangeConfirmInfoSNterminatedExtIes) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{570}
}

func (x *PdusessionResourceChangeConfirmInfoSNterminatedExtIes) GetValue() *emptypb.Empty {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:6576
// @inject_tag: aper:"valueExt"
// {PDUSessionResourceChangeConfirmInfo-SNterminated}
type PdusessionResourceChangeConfirmInfoSNterminated struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"optional,valueExt,"
	DataforwardinginfoTarget *DataForwardingInfoFromTargetNgrannode `protobuf:"bytes,1,opt,name=dataforwardinginfo_target,json=dataforwardinginfoTarget,proto3,oneof" json:"dataforwardinginfo_target,omitempty" aper:"optional,valueExt,"`
	// @inject_tag: aper:"optional,sizeLB:1,"
	IEExtensions []*PdusessionResourceChangeConfirmInfoSNterminatedExtIes `protobuf:"bytes,2,rep,name=i_e_extensions,json=iE-Extensions,proto3" json:"i_e_extensions,omitempty" aper:"optional,sizeLB:1,"`
}

func (x *PdusessionResourceChangeConfirmInfoSNterminated) Reset() {
	*x = PdusessionResourceChangeConfirmInfoSNterminated{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[571]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PdusessionResourceChangeConfirmInfoSNterminated) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PdusessionResourceChangeConfirmInfoSNterminated) ProtoMessage() {}

func (x *PdusessionResourceChangeConfirmInfoSNterminated) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[571]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PdusessionResourceChangeConfirmInfoSNterminated.ProtoReflect.Descriptor instead.
func (*PdusessionResourceChangeConfirmInfoSNterminated) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{571}
}

func (x *PdusessionResourceChangeConfirmInfoSNterminated) GetDataforwardinginfoTarget() *DataForwardingInfoFromTargetNgrannode {
	if x != nil {
		return x.DataforwardinginfoTarget
	}
	return nil
}

func (x *PdusessionResourceChangeConfirmInfoSNterminated) GetIEExtensions() []*PdusessionResourceChangeConfirmInfoSNterminatedExtIes {
	if x != nil {
		return x.IEExtensions
	}
	return nil
}

// value set from xnap_v1.asn1:6599
// {PDUSessionResourceChangeRequiredInfo-MNterminated-ExtIEs}
type PdusessionResourceChangeRequiredInfoMNterminatedExtIes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *emptypb.Empty `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *PdusessionResourceChangeRequiredInfoMNterminatedExtIes) Reset() {
	*x = PdusessionResourceChangeRequiredInfoMNterminatedExtIes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[572]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PdusessionResourceChangeRequiredInfoMNterminatedExtIes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PdusessionResourceChangeRequiredInfoMNterminatedExtIes) ProtoMessage() {}

func (x *PdusessionResourceChangeRequiredInfoMNterminatedExtIes) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[572]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PdusessionResourceChangeRequiredInfoMNterminatedExtIes.ProtoReflect.Descriptor instead.
func (*PdusessionResourceChangeRequiredInfoMNterminatedExtIes) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{572}
}

func (x *PdusessionResourceChangeRequiredInfoMNterminatedExtIes) GetValue() *emptypb.Empty {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:6595
// @inject_tag: aper:"valueExt"
// {PDUSessionResourceChangeRequiredInfo-MNterminated}
type PdusessionResourceChangeRequiredInfoMNterminated struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"optional,sizeLB:1,"
	IEExtensions []*PdusessionResourceChangeRequiredInfoMNterminatedExtIes `protobuf:"bytes,1,rep,name=i_e_extensions,json=iE-Extensions,proto3" json:"i_e_extensions,omitempty" aper:"optional,sizeLB:1,"`
}

func (x *PdusessionResourceChangeRequiredInfoMNterminated) Reset() {
	*x = PdusessionResourceChangeRequiredInfoMNterminated{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[573]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PdusessionResourceChangeRequiredInfoMNterminated) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PdusessionResourceChangeRequiredInfoMNterminated) ProtoMessage() {}

func (x *PdusessionResourceChangeRequiredInfoMNterminated) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[573]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PdusessionResourceChangeRequiredInfoMNterminated.ProtoReflect.Descriptor instead.
func (*PdusessionResourceChangeRequiredInfoMNterminated) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{573}
}

func (x *PdusessionResourceChangeRequiredInfoMNterminated) GetIEExtensions() []*PdusessionResourceChangeRequiredInfoMNterminatedExtIes {
	if x != nil {
		return x.IEExtensions
	}
	return nil
}

// value set from xnap_v1.asn1:6616
// {PDUSessionResourceChangeConfirmInfo-MNterminated-ExtIEs}
type PdusessionResourceChangeConfirmInfoMNterminatedExtIes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *emptypb.Empty `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *PdusessionResourceChangeConfirmInfoMNterminatedExtIes) Reset() {
	*x = PdusessionResourceChangeConfirmInfoMNterminatedExtIes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[574]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PdusessionResourceChangeConfirmInfoMNterminatedExtIes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PdusessionResourceChangeConfirmInfoMNterminatedExtIes) ProtoMessage() {}

func (x *PdusessionResourceChangeConfirmInfoMNterminatedExtIes) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[574]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PdusessionResourceChangeConfirmInfoMNterminatedExtIes.ProtoReflect.Descriptor instead.
func (*PdusessionResourceChangeConfirmInfoMNterminatedExtIes) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{574}
}

func (x *PdusessionResourceChangeConfirmInfoMNterminatedExtIes) GetValue() *emptypb.Empty {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:6612
// @inject_tag: aper:"valueExt"
// {PDUSessionResourceChangeConfirmInfo-MNterminated}
type PdusessionResourceChangeConfirmInfoMNterminated struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"optional,sizeLB:1,"
	IEExtensions []*PdusessionResourceChangeConfirmInfoMNterminatedExtIes `protobuf:"bytes,1,rep,name=i_e_extensions,json=iE-Extensions,proto3" json:"i_e_extensions,omitempty" aper:"optional,sizeLB:1,"`
}

func (x *PdusessionResourceChangeConfirmInfoMNterminated) Reset() {
	*x = PdusessionResourceChangeConfirmInfoMNterminated{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[575]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PdusessionResourceChangeConfirmInfoMNterminated) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PdusessionResourceChangeConfirmInfoMNterminated) ProtoMessage() {}

func (x *PdusessionResourceChangeConfirmInfoMNterminated) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[575]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PdusessionResourceChangeConfirmInfoMNterminated.ProtoReflect.Descriptor instead.
func (*PdusessionResourceChangeConfirmInfoMNterminated) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{575}
}

func (x *PdusessionResourceChangeConfirmInfoMNterminated) GetIEExtensions() []*PdusessionResourceChangeConfirmInfoMNterminatedExtIes {
	if x != nil {
		return x.IEExtensions
	}
	return nil
}

// value set from xnap_v1.asn1:6639
// {PDUSessionResourceModRqdInfo-SNterminated-ExtIEs}
type PdusessionResourceModRqdInfoSNterminatedExtIes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *emptypb.Empty `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *PdusessionResourceModRqdInfoSNterminatedExtIes) Reset() {
	*x = PdusessionResourceModRqdInfoSNterminatedExtIes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[576]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PdusessionResourceModRqdInfoSNterminatedExtIes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PdusessionResourceModRqdInfoSNterminatedExtIes) ProtoMessage() {}

func (x *PdusessionResourceModRqdInfoSNterminatedExtIes) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[576]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PdusessionResourceModRqdInfoSNterminatedExtIes.ProtoReflect.Descriptor instead.
func (*PdusessionResourceModRqdInfoSNterminatedExtIes) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{576}
}

func (x *PdusessionResourceModRqdInfoSNterminatedExtIes) GetValue() *emptypb.Empty {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:6629
// @inject_tag: aper:"valueExt"
// {PDUSessionResourceModRqdInfo-SNterminated}
type PdusessionResourceModRqdInfoSNterminated struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"optional,"
	DLNgUTnlatNgRan *UptransportLayerInformation `protobuf:"bytes,1,opt,name=d_l_ng_u_tnlat_ng_ran,json=dL-NG-U-TNLatNG-RAN,proto3,oneof" json:"d_l_ng_u_tnlat_ng_ran,omitempty" aper:"optional,"`
	// @inject_tag: aper:"optional,"
	QoSflowsToBeReleasedList *QoSflowsListwithCause `protobuf:"bytes,2,opt,name=qo_sflows_to_be_released_list,json=qoSFlowsToBeReleased-List,proto3,oneof" json:"qo_sflows_to_be_released_list,omitempty" aper:"optional,"`
	// @inject_tag: aper:"optional,valueExt,"
	DataforwardinginfofromSource *DataforwardingandOffloadingInfofromSource `protobuf:"bytes,3,opt,name=dataforwardinginfofrom_source,json=dataforwardinginfofromSource,proto3,oneof" json:"dataforwardinginfofrom_source,omitempty" aper:"optional,valueExt,"`
	// @inject_tag: aper:"optional,"
	DrbsToBeSetupList *DrbsToBeSetupListModRqdSNterminated `protobuf:"bytes,4,opt,name=drbs_to_be_setup_list,json=drbsToBeSetupList,proto3,oneof" json:"drbs_to_be_setup_list,omitempty" aper:"optional,"`
	// @inject_tag: aper:"optional,"
	DrbsToBeModifiedList *DrbsToBeModifiedListModRqdSNterminated `protobuf:"bytes,5,opt,name=drbs_to_be_modified_list,json=drbsToBeModifiedList,proto3,oneof" json:"drbs_to_be_modified_list,omitempty" aper:"optional,"`
	// @inject_tag: aper:"optional,"
	DRbsToBeReleased *DrbListwithCause `protobuf:"bytes,6,opt,name=d_rbs_to_be_released,json=dRBsToBeReleased,proto3,oneof" json:"d_rbs_to_be_released,omitempty" aper:"optional,"`
	// @inject_tag: aper:"optional,sizeLB:1,"
	IEExtensions []*PdusessionResourceModRqdInfoSNterminatedExtIes `protobuf:"bytes,7,rep,name=i_e_extensions,json=iE-Extensions,proto3" json:"i_e_extensions,omitempty" aper:"optional,sizeLB:1,"`
}

func (x *PdusessionResourceModRqdInfoSNterminated) Reset() {
	*x = PdusessionResourceModRqdInfoSNterminated{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[577]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PdusessionResourceModRqdInfoSNterminated) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PdusessionResourceModRqdInfoSNterminated) ProtoMessage() {}

func (x *PdusessionResourceModRqdInfoSNterminated) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[577]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PdusessionResourceModRqdInfoSNterminated.ProtoReflect.Descriptor instead.
func (*PdusessionResourceModRqdInfoSNterminated) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{577}
}

func (x *PdusessionResourceModRqdInfoSNterminated) GetDLNgUTnlatNgRan() *UptransportLayerInformation {
	if x != nil {
		return x.DLNgUTnlatNgRan
	}
	return nil
}

func (x *PdusessionResourceModRqdInfoSNterminated) GetQoSflowsToBeReleasedList() *QoSflowsListwithCause {
	if x != nil {
		return x.QoSflowsToBeReleasedList
	}
	return nil
}

func (x *PdusessionResourceModRqdInfoSNterminated) GetDataforwardinginfofromSource() *DataforwardingandOffloadingInfofromSource {
	if x != nil {
		return x.DataforwardinginfofromSource
	}
	return nil
}

func (x *PdusessionResourceModRqdInfoSNterminated) GetDrbsToBeSetupList() *DrbsToBeSetupListModRqdSNterminated {
	if x != nil {
		return x.DrbsToBeSetupList
	}
	return nil
}

func (x *PdusessionResourceModRqdInfoSNterminated) GetDrbsToBeModifiedList() *DrbsToBeModifiedListModRqdSNterminated {
	if x != nil {
		return x.DrbsToBeModifiedList
	}
	return nil
}

func (x *PdusessionResourceModRqdInfoSNterminated) GetDRbsToBeReleased() *DrbListwithCause {
	if x != nil {
		return x.DRbsToBeReleased
	}
	return nil
}

func (x *PdusessionResourceModRqdInfoSNterminated) GetIEExtensions() []*PdusessionResourceModRqdInfoSNterminatedExtIes {
	if x != nil {
		return x.IEExtensions
	}
	return nil
}

// sequence from xnap_v1.asn1:6645
// {DRBsToBeSetup-List-ModRqd-SNterminated}
type DrbsToBeSetupListModRqdSNterminated struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"valueExt,sizeLB:1,sizeUB:32,"
	Value []*DrbsToBeSetupListModRqdSNterminatedItem `protobuf:"bytes,1,rep,name=value,proto3" json:"value,omitempty" aper:"valueExt,sizeLB:1,sizeUB:32,"`
}

func (x *DrbsToBeSetupListModRqdSNterminated) Reset() {
	*x = DrbsToBeSetupListModRqdSNterminated{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[578]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DrbsToBeSetupListModRqdSNterminated) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DrbsToBeSetupListModRqdSNterminated) ProtoMessage() {}

func (x *DrbsToBeSetupListModRqdSNterminated) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[578]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DrbsToBeSetupListModRqdSNterminated.ProtoReflect.Descriptor instead.
func (*DrbsToBeSetupListModRqdSNterminated) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{578}
}

func (x *DrbsToBeSetupListModRqdSNterminated) GetValue() []*DrbsToBeSetupListModRqdSNterminatedItem {
	if x != nil {
		return x.Value
	}
	return nil
}

// value set from xnap_v1.asn1:6659
// {DRBsToBeSetup-List-ModRqd-SNterminated-Item-ExtIEs&Extension}
type DrbsToBeSetupListModRqdSNterminatedItemExtIesExtension struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// value set translated as choice from xnap_v1.asn1:6659
	//
	// Types that are assignable to DrbsToBeSetupListModRqdSnterminatedItemExtIes:
	//	*DrbsToBeSetupListModRqdSNterminatedItemExtIesExtension_IdAdditionalPdcpDuplicationTnlList
	//	*DrbsToBeSetupListModRqdSNterminatedItemExtIesExtension_IdRlcduplicationInformation
	DrbsToBeSetupListModRqdSnterminatedItemExtIes isDrbsToBeSetupListModRqdSNterminatedItemExtIesExtension_DrbsToBeSetupListModRqdSnterminatedItemExtIes `protobuf_oneof:"drbs_to_be_setup_list_mod_rqd_snterminated_item_ext_ies"`
}

func (x *DrbsToBeSetupListModRqdSNterminatedItemExtIesExtension) Reset() {
	*x = DrbsToBeSetupListModRqdSNterminatedItemExtIesExtension{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[579]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DrbsToBeSetupListModRqdSNterminatedItemExtIesExtension) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DrbsToBeSetupListModRqdSNterminatedItemExtIesExtension) ProtoMessage() {}

func (x *DrbsToBeSetupListModRqdSNterminatedItemExtIesExtension) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[579]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DrbsToBeSetupListModRqdSNterminatedItemExtIesExtension.ProtoReflect.Descriptor instead.
func (*DrbsToBeSetupListModRqdSNterminatedItemExtIesExtension) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{579}
}

func (m *DrbsToBeSetupListModRqdSNterminatedItemExtIesExtension) GetDrbsToBeSetupListModRqdSnterminatedItemExtIes() isDrbsToBeSetupListModRqdSNterminatedItemExtIesExtension_DrbsToBeSetupListModRqdSnterminatedItemExtIes {
	if m != nil {
		return m.DrbsToBeSetupListModRqdSnterminatedItemExtIes
	}
	return nil
}

func (x *DrbsToBeSetupListModRqdSNterminatedItemExtIesExtension) GetIdAdditionalPdcpDuplicationTnlList() *AdditionalPDcpDuplicationTNlList {
	if x, ok := x.GetDrbsToBeSetupListModRqdSnterminatedItemExtIes().(*DrbsToBeSetupListModRqdSNterminatedItemExtIesExtension_IdAdditionalPdcpDuplicationTnlList); ok {
		return x.IdAdditionalPdcpDuplicationTnlList
	}
	return nil
}

func (x *DrbsToBeSetupListModRqdSNterminatedItemExtIesExtension) GetIdRlcduplicationInformation() *RlcduplicationInformation {
	if x, ok := x.GetDrbsToBeSetupListModRqdSnterminatedItemExtIes().(*DrbsToBeSetupListModRqdSNterminatedItemExtIesExtension_IdRlcduplicationInformation); ok {
		return x.IdRlcduplicationInformation
	}
	return nil
}

type isDrbsToBeSetupListModRqdSNterminatedItemExtIesExtension_DrbsToBeSetupListModRqdSnterminatedItemExtIes interface {
	isDrbsToBeSetupListModRqdSNterminatedItemExtIesExtension_DrbsToBeSetupListModRqdSnterminatedItemExtIes()
}

type DrbsToBeSetupListModRqdSNterminatedItemExtIesExtension_IdAdditionalPdcpDuplicationTnlList struct {
	// @inject_tag: aper:"choiceIdx:1,"
	IdAdditionalPdcpDuplicationTnlList *AdditionalPDcpDuplicationTNlList `protobuf:"bytes,1,opt,name=id_additional_pdcp_duplication_tnl_list,json=id-Additional-PDCP-Duplication-TNL-List,proto3,oneof" aper:"choiceIdx:1,"`
}

type DrbsToBeSetupListModRqdSNterminatedItemExtIesExtension_IdRlcduplicationInformation struct {
	// @inject_tag: aper:"choiceIdx:2,"
	IdRlcduplicationInformation *RlcduplicationInformation `protobuf:"bytes,2,opt,name=id_rlcduplication_information,json=id-RLCDuplicationInformation,proto3,oneof" aper:"choiceIdx:2,"`
}

func (*DrbsToBeSetupListModRqdSNterminatedItemExtIesExtension_IdAdditionalPdcpDuplicationTnlList) isDrbsToBeSetupListModRqdSNterminatedItemExtIesExtension_DrbsToBeSetupListModRqdSnterminatedItemExtIes() {
}

func (*DrbsToBeSetupListModRqdSNterminatedItemExtIesExtension_IdRlcduplicationInformation) isDrbsToBeSetupListModRqdSNterminatedItemExtIesExtension_DrbsToBeSetupListModRqdSnterminatedItemExtIes() {
}

// concrete instance(s) of class XNAP-PROTOCOL-EXTENSION from xnap_v1.asn1:6659
// @inject_tag: aper:"valueExt"
// {DRBsToBeSetup-List-ModRqd-SNterminated-Item-ExtIEs}
type DrbsToBeSetupListModRqdSNterminatedItemExtIes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"unique,"
	Id *xnap_commondatatypes.ProtocolIeID `protobuf:"bytes,1,opt,name=id,json=&id,proto3" json:"id,omitempty" aper:"unique,"`
	// @inject_tag: aper:"valueLB:0,valueUB:2,"
	Criticality xnap_commondatatypes.Criticality `protobuf:"varint,2,opt,name=criticality,json=&criticality,proto3,enum=xnap.v1.Criticality" json:"criticality,omitempty" aper:"valueLB:0,valueUB:2,"`
	// @inject_tag: aper:"canonicalOrder,"
	Extension *DrbsToBeSetupListModRqdSNterminatedItemExtIesExtension `protobuf:"bytes,3,opt,name=extension,json=&Extension,proto3" json:"extension,omitempty" aper:"canonicalOrder,"`
}

func (x *DrbsToBeSetupListModRqdSNterminatedItemExtIes) Reset() {
	*x = DrbsToBeSetupListModRqdSNterminatedItemExtIes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[580]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DrbsToBeSetupListModRqdSNterminatedItemExtIes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DrbsToBeSetupListModRqdSNterminatedItemExtIes) ProtoMessage() {}

func (x *DrbsToBeSetupListModRqdSNterminatedItemExtIes) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[580]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DrbsToBeSetupListModRqdSNterminatedItemExtIes.ProtoReflect.Descriptor instead.
func (*DrbsToBeSetupListModRqdSNterminatedItemExtIes) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{580}
}

func (x *DrbsToBeSetupListModRqdSNterminatedItemExtIes) GetId() *xnap_commondatatypes.ProtocolIeID {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *DrbsToBeSetupListModRqdSNterminatedItemExtIes) GetCriticality() xnap_commondatatypes.Criticality {
	if x != nil {
		return x.Criticality
	}
	return xnap_commondatatypes.Criticality(0)
}

func (x *DrbsToBeSetupListModRqdSNterminatedItemExtIes) GetExtension() *DrbsToBeSetupListModRqdSNterminatedItemExtIesExtension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// sequence from xnap_v1.asn1:6646
// @inject_tag: aper:"valueExt"
// {DRBsToBeSetup-List-ModRqd-SNterminated-Item}
type DrbsToBeSetupListModRqdSNterminatedItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DrbId *DrbID `protobuf:"bytes,1,opt,name=drb_id,json=drb-ID,proto3" json:"drb_id,omitempty"`
	// @inject_tag: aper:"optional,valueExt,"
	PDcpSnlength      *Pdcpsnlength          `protobuf:"bytes,2,opt,name=p_dcp_snlength,json=pDCP-SNLength,proto3,oneof" json:"p_dcp_snlength,omitempty" aper:"optional,valueExt,"`
	SnUlPdcpUptnlinfo *UptransportParameters `protobuf:"bytes,3,opt,name=sn_ul_pdcp_uptnlinfo,json=sn-UL-PDCP-UPTNLinfo,proto3" json:"sn_ul_pdcp_uptnlinfo,omitempty"`
	// @inject_tag: aper:"valueExt,"
	DRbQoS *QoSflowLevelQoSparameters `protobuf:"bytes,4,opt,name=d_rb_qo_s,json=dRB-QoS,proto3" json:"d_rb_qo_s,omitempty" aper:"valueExt,"`
	// @inject_tag: aper:"optional,"
	SecondarySnUlPdcpUpTnlinfo *UptransportParameters `protobuf:"bytes,5,opt,name=secondary_sn_ul_pdcp_up_tnlinfo,json=secondary-SN-UL-PDCP-UP-TNLInfo,proto3,oneof" json:"secondary_sn_ul_pdcp_up_tnlinfo,omitempty" aper:"optional,"`
	// @inject_tag: aper:"optional,valueExt,valueLB:0,valueUB:1,"
	DuplicationActivation *DuplicationActivation `protobuf:"varint,6,opt,name=duplication_activation,json=duplicationActivation,proto3,enum=xnap.v1.DuplicationActivation,oneof" json:"duplication_activation,omitempty" aper:"optional,valueExt,valueLB:0,valueUB:1,"`
	// @inject_tag: aper:"optional,valueExt,"
	ULConfiguration                       *Ulconfiguration                            `protobuf:"bytes,7,opt,name=u_l_configuration,json=uL-Configuration,proto3,oneof" json:"u_l_configuration,omitempty" aper:"optional,valueExt,"`
	QoSflowsMappedtoDrbModRqdSnterminated *QoSflowsSetupMappedtoDrbModRqdSNterminated `protobuf:"bytes,8,opt,name=qo_sflows_mappedto_drb_mod_rqd_snterminated,json=qoSFlowsMappedtoDRB-ModRqd-SNterminated,proto3" json:"qo_sflows_mappedto_drb_mod_rqd_snterminated,omitempty"`
	// @inject_tag: aper:"valueExt,valueLB:0,valueUB:3,"
	RLcMode Rlcmode `protobuf:"varint,9,opt,name=r_lc_mode,json=rLC-Mode,proto3,enum=xnap.v1.Rlcmode" json:"r_lc_mode,omitempty" aper:"valueExt,valueLB:0,valueUB:3,"`
	// @inject_tag: aper:"optional,sizeLB:1,"
	IEExtensions []*DrbsToBeSetupListModRqdSNterminatedItemExtIes `protobuf:"bytes,10,rep,name=i_e_extensions,json=iE-Extensions,proto3" json:"i_e_extensions,omitempty" aper:"optional,sizeLB:1,"`
}

func (x *DrbsToBeSetupListModRqdSNterminatedItem) Reset() {
	*x = DrbsToBeSetupListModRqdSNterminatedItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[581]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DrbsToBeSetupListModRqdSNterminatedItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DrbsToBeSetupListModRqdSNterminatedItem) ProtoMessage() {}

func (x *DrbsToBeSetupListModRqdSNterminatedItem) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[581]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DrbsToBeSetupListModRqdSNterminatedItem.ProtoReflect.Descriptor instead.
func (*DrbsToBeSetupListModRqdSNterminatedItem) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{581}
}

func (x *DrbsToBeSetupListModRqdSNterminatedItem) GetDrbId() *DrbID {
	if x != nil {
		return x.DrbId
	}
	return nil
}

func (x *DrbsToBeSetupListModRqdSNterminatedItem) GetPDcpSnlength() *Pdcpsnlength {
	if x != nil {
		return x.PDcpSnlength
	}
	return nil
}

func (x *DrbsToBeSetupListModRqdSNterminatedItem) GetSnUlPdcpUptnlinfo() *UptransportParameters {
	if x != nil {
		return x.SnUlPdcpUptnlinfo
	}
	return nil
}

func (x *DrbsToBeSetupListModRqdSNterminatedItem) GetDRbQoS() *QoSflowLevelQoSparameters {
	if x != nil {
		return x.DRbQoS
	}
	return nil
}

func (x *DrbsToBeSetupListModRqdSNterminatedItem) GetSecondarySnUlPdcpUpTnlinfo() *UptransportParameters {
	if x != nil {
		return x.SecondarySnUlPdcpUpTnlinfo
	}
	return nil
}

func (x *DrbsToBeSetupListModRqdSNterminatedItem) GetDuplicationActivation() DuplicationActivation {
	if x != nil && x.DuplicationActivation != nil {
		return *x.DuplicationActivation
	}
	return DuplicationActivation_DUPLICATION_ACTIVATION_ACTIVE
}

func (x *DrbsToBeSetupListModRqdSNterminatedItem) GetULConfiguration() *Ulconfiguration {
	if x != nil {
		return x.ULConfiguration
	}
	return nil
}

func (x *DrbsToBeSetupListModRqdSNterminatedItem) GetQoSflowsMappedtoDrbModRqdSnterminated() *QoSflowsSetupMappedtoDrbModRqdSNterminated {
	if x != nil {
		return x.QoSflowsMappedtoDrbModRqdSnterminated
	}
	return nil
}

func (x *DrbsToBeSetupListModRqdSNterminatedItem) GetRLcMode() Rlcmode {
	if x != nil {
		return x.RLcMode
	}
	return Rlcmode_RLCMODE_RLC_AM
}

func (x *DrbsToBeSetupListModRqdSNterminatedItem) GetIEExtensions() []*DrbsToBeSetupListModRqdSNterminatedItemExtIes {
	if x != nil {
		return x.IEExtensions
	}
	return nil
}

// sequence from xnap_v1.asn1:6668
// {QoSFlowsSetupMappedtoDRB-ModRqd-SNterminated}
type QoSflowsSetupMappedtoDrbModRqdSNterminated struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"valueExt,sizeLB:1,sizeUB:64,"
	Value []*QoSflowsSetupMappedtoDrbModRqdSNterminatedItem `protobuf:"bytes,1,rep,name=value,proto3" json:"value,omitempty" aper:"valueExt,sizeLB:1,sizeUB:64,"`
}

func (x *QoSflowsSetupMappedtoDrbModRqdSNterminated) Reset() {
	*x = QoSflowsSetupMappedtoDrbModRqdSNterminated{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[582]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QoSflowsSetupMappedtoDrbModRqdSNterminated) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QoSflowsSetupMappedtoDrbModRqdSNterminated) ProtoMessage() {}

func (x *QoSflowsSetupMappedtoDrbModRqdSNterminated) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[582]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QoSflowsSetupMappedtoDrbModRqdSNterminated.ProtoReflect.Descriptor instead.
func (*QoSflowsSetupMappedtoDrbModRqdSNterminated) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{582}
}

func (x *QoSflowsSetupMappedtoDrbModRqdSNterminated) GetValue() []*QoSflowsSetupMappedtoDrbModRqdSNterminatedItem {
	if x != nil {
		return x.Value
	}
	return nil
}

// value set from xnap_v1.asn1:6675
// {QoSFlowsSetupMappedtoDRB-ModRqd-SNterminated-Item-ExtIEs}
type QoSflowsSetupMappedtoDrbModRqdSNterminatedItemExtIes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *emptypb.Empty `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *QoSflowsSetupMappedtoDrbModRqdSNterminatedItemExtIes) Reset() {
	*x = QoSflowsSetupMappedtoDrbModRqdSNterminatedItemExtIes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[583]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QoSflowsSetupMappedtoDrbModRqdSNterminatedItemExtIes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QoSflowsSetupMappedtoDrbModRqdSNterminatedItemExtIes) ProtoMessage() {}

func (x *QoSflowsSetupMappedtoDrbModRqdSNterminatedItemExtIes) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[583]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QoSflowsSetupMappedtoDrbModRqdSNterminatedItemExtIes.ProtoReflect.Descriptor instead.
func (*QoSflowsSetupMappedtoDrbModRqdSNterminatedItemExtIes) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{583}
}

func (x *QoSflowsSetupMappedtoDrbModRqdSNterminatedItemExtIes) GetValue() *emptypb.Empty {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:6669
// @inject_tag: aper:"valueExt"
// {QoSFlowsSetupMappedtoDRB-ModRqd-SNterminated-Item}
type QoSflowsSetupMappedtoDrbModRqdSNterminatedItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	QoSflowIdentifier *QoSflowIdentifier `protobuf:"bytes,1,opt,name=qo_sflow_identifier,json=qoSFlowIdentifier,proto3" json:"qo_sflow_identifier,omitempty"`
	// @inject_tag: aper:"optional,valueExt,"
	MCgrequestedGbrqoSflowInfo *GbrqoSflowInfo `protobuf:"bytes,2,opt,name=m_cgrequested_gbrqo_sflow_info,json=mCGRequestedGBRQoSFlowInfo,proto3,oneof" json:"m_cgrequested_gbrqo_sflow_info,omitempty" aper:"optional,valueExt,"`
	// @inject_tag: aper:"optional,sizeLB:1,"
	IEExtensions []*QoSflowsSetupMappedtoDrbModRqdSNterminatedItemExtIes `protobuf:"bytes,3,rep,name=i_e_extensions,json=iE-Extensions,proto3" json:"i_e_extensions,omitempty" aper:"optional,sizeLB:1,"`
}

func (x *QoSflowsSetupMappedtoDrbModRqdSNterminatedItem) Reset() {
	*x = QoSflowsSetupMappedtoDrbModRqdSNterminatedItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[584]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QoSflowsSetupMappedtoDrbModRqdSNterminatedItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QoSflowsSetupMappedtoDrbModRqdSNterminatedItem) ProtoMessage() {}

func (x *QoSflowsSetupMappedtoDrbModRqdSNterminatedItem) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[584]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QoSflowsSetupMappedtoDrbModRqdSNterminatedItem.ProtoReflect.Descriptor instead.
func (*QoSflowsSetupMappedtoDrbModRqdSNterminatedItem) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{584}
}

func (x *QoSflowsSetupMappedtoDrbModRqdSNterminatedItem) GetQoSflowIdentifier() *QoSflowIdentifier {
	if x != nil {
		return x.QoSflowIdentifier
	}
	return nil
}

func (x *QoSflowsSetupMappedtoDrbModRqdSNterminatedItem) GetMCgrequestedGbrqoSflowInfo() *GbrqoSflowInfo {
	if x != nil {
		return x.MCgrequestedGbrqoSflowInfo
	}
	return nil
}

func (x *QoSflowsSetupMappedtoDrbModRqdSNterminatedItem) GetIEExtensions() []*QoSflowsSetupMappedtoDrbModRqdSNterminatedItemExtIes {
	if x != nil {
		return x.IEExtensions
	}
	return nil
}

// sequence from xnap_v1.asn1:6681
// {DRBsToBeModified-List-ModRqd-SNterminated}
type DrbsToBeModifiedListModRqdSNterminated struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"valueExt,sizeLB:1,sizeUB:32,"
	Value []*DrbsToBeModifiedListModRqdSNterminatedItem `protobuf:"bytes,1,rep,name=value,proto3" json:"value,omitempty" aper:"valueExt,sizeLB:1,sizeUB:32,"`
}

func (x *DrbsToBeModifiedListModRqdSNterminated) Reset() {
	*x = DrbsToBeModifiedListModRqdSNterminated{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[585]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DrbsToBeModifiedListModRqdSNterminated) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DrbsToBeModifiedListModRqdSNterminated) ProtoMessage() {}

func (x *DrbsToBeModifiedListModRqdSNterminated) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[585]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DrbsToBeModifiedListModRqdSNterminated.ProtoReflect.Descriptor instead.
func (*DrbsToBeModifiedListModRqdSNterminated) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{585}
}

func (x *DrbsToBeModifiedListModRqdSNterminated) GetValue() []*DrbsToBeModifiedListModRqdSNterminatedItem {
	if x != nil {
		return x.Value
	}
	return nil
}

// value set from xnap_v1.asn1:6694
// {DRBsToBeModified-List-ModRqd-SNterminated-Item-ExtIEs&Extension}
type DrbsToBeModifiedListModRqdSNterminatedItemExtIesExtension struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// value set translated as choice from xnap_v1.asn1:6694
	//
	// Types that are assignable to DrbsToBeModifiedListModRqdSnterminatedItemExtIes:
	//	*DrbsToBeModifiedListModRqdSNterminatedItemExtIesExtension_IdAdditionalPdcpDuplicationTnlList
	//	*DrbsToBeModifiedListModRqdSNterminatedItemExtIesExtension_IdRlcduplicationInformation
	DrbsToBeModifiedListModRqdSnterminatedItemExtIes isDrbsToBeModifiedListModRqdSNterminatedItemExtIesExtension_DrbsToBeModifiedListModRqdSnterminatedItemExtIes `protobuf_oneof:"drbs_to_be_modified_list_mod_rqd_snterminated_item_ext_ies"`
}

func (x *DrbsToBeModifiedListModRqdSNterminatedItemExtIesExtension) Reset() {
	*x = DrbsToBeModifiedListModRqdSNterminatedItemExtIesExtension{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[586]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DrbsToBeModifiedListModRqdSNterminatedItemExtIesExtension) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DrbsToBeModifiedListModRqdSNterminatedItemExtIesExtension) ProtoMessage() {}

func (x *DrbsToBeModifiedListModRqdSNterminatedItemExtIesExtension) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[586]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DrbsToBeModifiedListModRqdSNterminatedItemExtIesExtension.ProtoReflect.Descriptor instead.
func (*DrbsToBeModifiedListModRqdSNterminatedItemExtIesExtension) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{586}
}

func (m *DrbsToBeModifiedListModRqdSNterminatedItemExtIesExtension) GetDrbsToBeModifiedListModRqdSnterminatedItemExtIes() isDrbsToBeModifiedListModRqdSNterminatedItemExtIesExtension_DrbsToBeModifiedListModRqdSnterminatedItemExtIes {
	if m != nil {
		return m.DrbsToBeModifiedListModRqdSnterminatedItemExtIes
	}
	return nil
}

func (x *DrbsToBeModifiedListModRqdSNterminatedItemExtIesExtension) GetIdAdditionalPdcpDuplicationTnlList() *AdditionalPDcpDuplicationTNlList {
	if x, ok := x.GetDrbsToBeModifiedListModRqdSnterminatedItemExtIes().(*DrbsToBeModifiedListModRqdSNterminatedItemExtIesExtension_IdAdditionalPdcpDuplicationTnlList); ok {
		return x.IdAdditionalPdcpDuplicationTnlList
	}
	return nil
}

func (x *DrbsToBeModifiedListModRqdSNterminatedItemExtIesExtension) GetIdRlcduplicationInformation() *RlcduplicationInformation {
	if x, ok := x.GetDrbsToBeModifiedListModRqdSnterminatedItemExtIes().(*DrbsToBeModifiedListModRqdSNterminatedItemExtIesExtension_IdRlcduplicationInformation); ok {
		return x.IdRlcduplicationInformation
	}
	return nil
}

type isDrbsToBeModifiedListModRqdSNterminatedItemExtIesExtension_DrbsToBeModifiedListModRqdSnterminatedItemExtIes interface {
	isDrbsToBeModifiedListModRqdSNterminatedItemExtIesExtension_DrbsToBeModifiedListModRqdSnterminatedItemExtIes()
}

type DrbsToBeModifiedListModRqdSNterminatedItemExtIesExtension_IdAdditionalPdcpDuplicationTnlList struct {
	// @inject_tag: aper:"choiceIdx:1,"
	IdAdditionalPdcpDuplicationTnlList *AdditionalPDcpDuplicationTNlList `protobuf:"bytes,1,opt,name=id_additional_pdcp_duplication_tnl_list,json=id-Additional-PDCP-Duplication-TNL-List,proto3,oneof" aper:"choiceIdx:1,"`
}

type DrbsToBeModifiedListModRqdSNterminatedItemExtIesExtension_IdRlcduplicationInformation struct {
	// @inject_tag: aper:"choiceIdx:2,"
	IdRlcduplicationInformation *RlcduplicationInformation `protobuf:"bytes,2,opt,name=id_rlcduplication_information,json=id-RLCDuplicationInformation,proto3,oneof" aper:"choiceIdx:2,"`
}

func (*DrbsToBeModifiedListModRqdSNterminatedItemExtIesExtension_IdAdditionalPdcpDuplicationTnlList) isDrbsToBeModifiedListModRqdSNterminatedItemExtIesExtension_DrbsToBeModifiedListModRqdSnterminatedItemExtIes() {
}

func (*DrbsToBeModifiedListModRqdSNterminatedItemExtIesExtension_IdRlcduplicationInformation) isDrbsToBeModifiedListModRqdSNterminatedItemExtIesExtension_DrbsToBeModifiedListModRqdSnterminatedItemExtIes() {
}

// concrete instance(s) of class XNAP-PROTOCOL-EXTENSION from xnap_v1.asn1:6694
// @inject_tag: aper:"valueExt"
// {DRBsToBeModified-List-ModRqd-SNterminated-Item-ExtIEs}
type DrbsToBeModifiedListModRqdSNterminatedItemExtIes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"unique,"
	Id *xnap_commondatatypes.ProtocolIeID `protobuf:"bytes,1,opt,name=id,json=&id,proto3" json:"id,omitempty" aper:"unique,"`
	// @inject_tag: aper:"valueLB:0,valueUB:2,"
	Criticality xnap_commondatatypes.Criticality `protobuf:"varint,2,opt,name=criticality,json=&criticality,proto3,enum=xnap.v1.Criticality" json:"criticality,omitempty" aper:"valueLB:0,valueUB:2,"`
	// @inject_tag: aper:"canonicalOrder,"
	Extension *DrbsToBeModifiedListModRqdSNterminatedItemExtIesExtension `protobuf:"bytes,3,opt,name=extension,json=&Extension,proto3" json:"extension,omitempty" aper:"canonicalOrder,"`
}

func (x *DrbsToBeModifiedListModRqdSNterminatedItemExtIes) Reset() {
	*x = DrbsToBeModifiedListModRqdSNterminatedItemExtIes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[587]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DrbsToBeModifiedListModRqdSNterminatedItemExtIes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DrbsToBeModifiedListModRqdSNterminatedItemExtIes) ProtoMessage() {}

func (x *DrbsToBeModifiedListModRqdSNterminatedItemExtIes) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[587]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DrbsToBeModifiedListModRqdSNterminatedItemExtIes.ProtoReflect.Descriptor instead.
func (*DrbsToBeModifiedListModRqdSNterminatedItemExtIes) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{587}
}

func (x *DrbsToBeModifiedListModRqdSNterminatedItemExtIes) GetId() *xnap_commondatatypes.ProtocolIeID {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *DrbsToBeModifiedListModRqdSNterminatedItemExtIes) GetCriticality() xnap_commondatatypes.Criticality {
	if x != nil {
		return x.Criticality
	}
	return xnap_commondatatypes.Criticality(0)
}

func (x *DrbsToBeModifiedListModRqdSNterminatedItemExtIes) GetExtension() *DrbsToBeModifiedListModRqdSNterminatedItemExtIesExtension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// sequence from xnap_v1.asn1:6682
// @inject_tag: aper:"valueExt"
// {DRBsToBeModified-List-ModRqd-SNterminated-Item}
type DrbsToBeModifiedListModRqdSNterminatedItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DrbId *DrbID `protobuf:"bytes,1,opt,name=drb_id,json=drb-ID,proto3" json:"drb_id,omitempty"`
	// @inject_tag: aper:"optional,"
	SNUlPdcpUpTnlinfo *UptransportParameters `protobuf:"bytes,2,opt,name=s_n_ul_pdcp_up_tnlinfo,json=sN-UL-PDCP-UP-TNLInfo,proto3,oneof" json:"s_n_ul_pdcp_up_tnlinfo,omitempty" aper:"optional,"`
	// @inject_tag: aper:"optional,valueExt,"
	DRbQoS *QoSflowLevelQoSparameters `protobuf:"bytes,3,opt,name=d_rb_qo_s,json=dRB-QoS,proto3,oneof" json:"d_rb_qo_s,omitempty" aper:"optional,valueExt,"`
	// @inject_tag: aper:"optional,"
	SecondarySnUlPdcpUpTnlinfo *UptransportParameters `protobuf:"bytes,4,opt,name=secondary_sn_ul_pdcp_up_tnlinfo,json=secondary-SN-UL-PDCP-UP-TNLInfo,proto3,oneof" json:"secondary_sn_ul_pdcp_up_tnlinfo,omitempty" aper:"optional,"`
	// @inject_tag: aper:"optional,valueExt,"
	ULConfiguration *Ulconfiguration `protobuf:"bytes,5,opt,name=u_l_configuration,json=uL-Configuration,proto3,oneof" json:"u_l_configuration,omitempty" aper:"optional,valueExt,"`
	// @inject_tag: aper:"optional,valueExt,valueLB:0,valueUB:1,"
	PdcpDuplicationConfiguration *PdcpduplicationConfiguration `protobuf:"varint,6,opt,name=pdcp_duplication_configuration,json=pdcpDuplicationConfiguration,proto3,enum=xnap.v1.PdcpduplicationConfiguration,oneof" json:"pdcp_duplication_configuration,omitempty" aper:"optional,valueExt,valueLB:0,valueUB:1,"`
	// @inject_tag: aper:"optional,valueExt,valueLB:0,valueUB:1,"
	DuplicationActivation *DuplicationActivation `protobuf:"varint,7,opt,name=duplication_activation,json=duplicationActivation,proto3,enum=xnap.v1.DuplicationActivation,oneof" json:"duplication_activation,omitempty" aper:"optional,valueExt,valueLB:0,valueUB:1,"`
	// @inject_tag: aper:"optional,"
	QoSflowsMappedtoDrbModRqdSnterminated *QoSflowsModifiedMappedtoDrbModRqdSNterminated `protobuf:"bytes,8,opt,name=qo_sflows_mappedto_drb_mod_rqd_snterminated,json=qoSFlowsMappedtoDRB-ModRqd-SNterminated,proto3,oneof" json:"qo_sflows_mappedto_drb_mod_rqd_snterminated,omitempty" aper:"optional,"`
	// @inject_tag: aper:"optional,sizeLB:1,"
	IEExtensions []*DrbsToBeModifiedListModRqdSNterminatedItemExtIes `protobuf:"bytes,9,rep,name=i_e_extensions,json=iE-Extensions,proto3" json:"i_e_extensions,omitempty" aper:"optional,sizeLB:1,"`
}

func (x *DrbsToBeModifiedListModRqdSNterminatedItem) Reset() {
	*x = DrbsToBeModifiedListModRqdSNterminatedItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[588]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DrbsToBeModifiedListModRqdSNterminatedItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DrbsToBeModifiedListModRqdSNterminatedItem) ProtoMessage() {}

func (x *DrbsToBeModifiedListModRqdSNterminatedItem) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[588]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DrbsToBeModifiedListModRqdSNterminatedItem.ProtoReflect.Descriptor instead.
func (*DrbsToBeModifiedListModRqdSNterminatedItem) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{588}
}

func (x *DrbsToBeModifiedListModRqdSNterminatedItem) GetDrbId() *DrbID {
	if x != nil {
		return x.DrbId
	}
	return nil
}

func (x *DrbsToBeModifiedListModRqdSNterminatedItem) GetSNUlPdcpUpTnlinfo() *UptransportParameters {
	if x != nil {
		return x.SNUlPdcpUpTnlinfo
	}
	return nil
}

func (x *DrbsToBeModifiedListModRqdSNterminatedItem) GetDRbQoS() *QoSflowLevelQoSparameters {
	if x != nil {
		return x.DRbQoS
	}
	return nil
}

func (x *DrbsToBeModifiedListModRqdSNterminatedItem) GetSecondarySnUlPdcpUpTnlinfo() *UptransportParameters {
	if x != nil {
		return x.SecondarySnUlPdcpUpTnlinfo
	}
	return nil
}

func (x *DrbsToBeModifiedListModRqdSNterminatedItem) GetULConfiguration() *Ulconfiguration {
	if x != nil {
		return x.ULConfiguration
	}
	return nil
}

func (x *DrbsToBeModifiedListModRqdSNterminatedItem) GetPdcpDuplicationConfiguration() PdcpduplicationConfiguration {
	if x != nil && x.PdcpDuplicationConfiguration != nil {
		return *x.PdcpDuplicationConfiguration
	}
	return PdcpduplicationConfiguration_PDCPDUPLICATION_CONFIGURATION_CONFIGURED
}

func (x *DrbsToBeModifiedListModRqdSNterminatedItem) GetDuplicationActivation() DuplicationActivation {
	if x != nil && x.DuplicationActivation != nil {
		return *x.DuplicationActivation
	}
	return DuplicationActivation_DUPLICATION_ACTIVATION_ACTIVE
}

func (x *DrbsToBeModifiedListModRqdSNterminatedItem) GetQoSflowsMappedtoDrbModRqdSnterminated() *QoSflowsModifiedMappedtoDrbModRqdSNterminated {
	if x != nil {
		return x.QoSflowsMappedtoDrbModRqdSnterminated
	}
	return nil
}

func (x *DrbsToBeModifiedListModRqdSNterminatedItem) GetIEExtensions() []*DrbsToBeModifiedListModRqdSNterminatedItemExtIes {
	if x != nil {
		return x.IEExtensions
	}
	return nil
}

// sequence from xnap_v1.asn1:6703
// {QoSFlowsModifiedMappedtoDRB-ModRqd-SNterminated}
type QoSflowsModifiedMappedtoDrbModRqdSNterminated struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"valueExt,sizeLB:1,sizeUB:64,"
	Value []*QoSflowsModifiedMappedtoDrbModRqdSNterminatedItem `protobuf:"bytes,1,rep,name=value,proto3" json:"value,omitempty" aper:"valueExt,sizeLB:1,sizeUB:64,"`
}

func (x *QoSflowsModifiedMappedtoDrbModRqdSNterminated) Reset() {
	*x = QoSflowsModifiedMappedtoDrbModRqdSNterminated{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[589]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QoSflowsModifiedMappedtoDrbModRqdSNterminated) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QoSflowsModifiedMappedtoDrbModRqdSNterminated) ProtoMessage() {}

func (x *QoSflowsModifiedMappedtoDrbModRqdSNterminated) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[589]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QoSflowsModifiedMappedtoDrbModRqdSNterminated.ProtoReflect.Descriptor instead.
func (*QoSflowsModifiedMappedtoDrbModRqdSNterminated) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{589}
}

func (x *QoSflowsModifiedMappedtoDrbModRqdSNterminated) GetValue() []*QoSflowsModifiedMappedtoDrbModRqdSNterminatedItem {
	if x != nil {
		return x.Value
	}
	return nil
}

// value set from xnap_v1.asn1:6710
// {QoSFlowsModifiedMappedtoDRB-ModRqd-SNterminated-Item-ExtIEs}
type QoSflowsModifiedMappedtoDrbModRqdSNterminatedItemExtIes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *emptypb.Empty `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *QoSflowsModifiedMappedtoDrbModRqdSNterminatedItemExtIes) Reset() {
	*x = QoSflowsModifiedMappedtoDrbModRqdSNterminatedItemExtIes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[590]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QoSflowsModifiedMappedtoDrbModRqdSNterminatedItemExtIes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QoSflowsModifiedMappedtoDrbModRqdSNterminatedItemExtIes) ProtoMessage() {}

func (x *QoSflowsModifiedMappedtoDrbModRqdSNterminatedItemExtIes) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[590]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QoSflowsModifiedMappedtoDrbModRqdSNterminatedItemExtIes.ProtoReflect.Descriptor instead.
func (*QoSflowsModifiedMappedtoDrbModRqdSNterminatedItemExtIes) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{590}
}

func (x *QoSflowsModifiedMappedtoDrbModRqdSNterminatedItemExtIes) GetValue() *emptypb.Empty {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:6704
// @inject_tag: aper:"valueExt"
// {QoSFlowsModifiedMappedtoDRB-ModRqd-SNterminated-Item}
type QoSflowsModifiedMappedtoDrbModRqdSNterminatedItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	QoSflowIdentifier *QoSflowIdentifier `protobuf:"bytes,1,opt,name=qo_sflow_identifier,json=qoSFlowIdentifier,proto3" json:"qo_sflow_identifier,omitempty"`
	// @inject_tag: aper:"optional,valueExt,"
	MCgrequestedGbrqoSflowInfo *GbrqoSflowInfo `protobuf:"bytes,2,opt,name=m_cgrequested_gbrqo_sflow_info,json=mCGRequestedGBRQoSFlowInfo,proto3,oneof" json:"m_cgrequested_gbrqo_sflow_info,omitempty" aper:"optional,valueExt,"`
	// @inject_tag: aper:"optional,sizeLB:1,"
	IEExtensions []*QoSflowsModifiedMappedtoDrbModRqdSNterminatedItemExtIes `protobuf:"bytes,3,rep,name=i_e_extensions,json=iE-Extensions,proto3" json:"i_e_extensions,omitempty" aper:"optional,sizeLB:1,"`
}

func (x *QoSflowsModifiedMappedtoDrbModRqdSNterminatedItem) Reset() {
	*x = QoSflowsModifiedMappedtoDrbModRqdSNterminatedItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[591]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QoSflowsModifiedMappedtoDrbModRqdSNterminatedItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QoSflowsModifiedMappedtoDrbModRqdSNterminatedItem) ProtoMessage() {}

func (x *QoSflowsModifiedMappedtoDrbModRqdSNterminatedItem) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[591]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QoSflowsModifiedMappedtoDrbModRqdSNterminatedItem.ProtoReflect.Descriptor instead.
func (*QoSflowsModifiedMappedtoDrbModRqdSNterminatedItem) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{591}
}

func (x *QoSflowsModifiedMappedtoDrbModRqdSNterminatedItem) GetQoSflowIdentifier() *QoSflowIdentifier {
	if x != nil {
		return x.QoSflowIdentifier
	}
	return nil
}

func (x *QoSflowsModifiedMappedtoDrbModRqdSNterminatedItem) GetMCgrequestedGbrqoSflowInfo() *GbrqoSflowInfo {
	if x != nil {
		return x.MCgrequestedGbrqoSflowInfo
	}
	return nil
}

func (x *QoSflowsModifiedMappedtoDrbModRqdSNterminatedItem) GetIEExtensions() []*QoSflowsModifiedMappedtoDrbModRqdSNterminatedItemExtIes {
	if x != nil {
		return x.IEExtensions
	}
	return nil
}

// value set from xnap_v1.asn1:6731
// {PDUSessionResourceModConfirmInfo-SNterminated-ExtIEs}
type PdusessionResourceModConfirmInfoSNterminatedExtIes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *emptypb.Empty `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *PdusessionResourceModConfirmInfoSNterminatedExtIes) Reset() {
	*x = PdusessionResourceModConfirmInfoSNterminatedExtIes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[592]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PdusessionResourceModConfirmInfoSNterminatedExtIes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PdusessionResourceModConfirmInfoSNterminatedExtIes) ProtoMessage() {}

func (x *PdusessionResourceModConfirmInfoSNterminatedExtIes) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[592]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PdusessionResourceModConfirmInfoSNterminatedExtIes.ProtoReflect.Descriptor instead.
func (*PdusessionResourceModConfirmInfoSNterminatedExtIes) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{592}
}

func (x *PdusessionResourceModConfirmInfoSNterminatedExtIes) GetValue() *emptypb.Empty {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:6723
// @inject_tag: aper:"valueExt"
// {PDUSessionResourceModConfirmInfo-SNterminated}
type PdusessionResourceModConfirmInfoSNterminated struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"optional,"
	ULNgUTnlatUpf    *UptransportLayerInformation            `protobuf:"bytes,1,opt,name=u_l_ng_u_tnlat_upf,json=uL-NG-U-TNLatUPF,proto3,oneof" json:"u_l_ng_u_tnlat_upf,omitempty" aper:"optional,"`
	DRbsAdmittedList *DrbsAdmittedListModConfirmSNterminated `protobuf:"bytes,2,opt,name=d_rbs_admitted_list,json=dRBsAdmittedList,proto3" json:"d_rbs_admitted_list,omitempty"`
	// @inject_tag: aper:"optional,"
	DRbsNotAdmittedSetupModifyList *DrbListwithCause `protobuf:"bytes,3,opt,name=d_rbs_not_admitted_setup_modify_list,json=dRBsNotAdmittedSetupModifyList,proto3,oneof" json:"d_rbs_not_admitted_setup_modify_list,omitempty" aper:"optional,"`
	// @inject_tag: aper:"optional,valueExt,"
	DataforwardinginfoTarget *DataForwardingInfoFromTargetNgrannode `protobuf:"bytes,4,opt,name=dataforwardinginfo_target,json=dataforwardinginfoTarget,proto3,oneof" json:"dataforwardinginfo_target,omitempty" aper:"optional,valueExt,"`
	// @inject_tag: aper:"optional,sizeLB:1,"
	IEExtensions []*PdusessionResourceModConfirmInfoSNterminatedExtIes `protobuf:"bytes,5,rep,name=i_e_extensions,json=iE-Extensions,proto3" json:"i_e_extensions,omitempty" aper:"optional,sizeLB:1,"`
}

func (x *PdusessionResourceModConfirmInfoSNterminated) Reset() {
	*x = PdusessionResourceModConfirmInfoSNterminated{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[593]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PdusessionResourceModConfirmInfoSNterminated) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PdusessionResourceModConfirmInfoSNterminated) ProtoMessage() {}

func (x *PdusessionResourceModConfirmInfoSNterminated) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[593]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PdusessionResourceModConfirmInfoSNterminated.ProtoReflect.Descriptor instead.
func (*PdusessionResourceModConfirmInfoSNterminated) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{593}
}

func (x *PdusessionResourceModConfirmInfoSNterminated) GetULNgUTnlatUpf() *UptransportLayerInformation {
	if x != nil {
		return x.ULNgUTnlatUpf
	}
	return nil
}

func (x *PdusessionResourceModConfirmInfoSNterminated) GetDRbsAdmittedList() *DrbsAdmittedListModConfirmSNterminated {
	if x != nil {
		return x.DRbsAdmittedList
	}
	return nil
}

func (x *PdusessionResourceModConfirmInfoSNterminated) GetDRbsNotAdmittedSetupModifyList() *DrbListwithCause {
	if x != nil {
		return x.DRbsNotAdmittedSetupModifyList
	}
	return nil
}

func (x *PdusessionResourceModConfirmInfoSNterminated) GetDataforwardinginfoTarget() *DataForwardingInfoFromTargetNgrannode {
	if x != nil {
		return x.DataforwardinginfoTarget
	}
	return nil
}

func (x *PdusessionResourceModConfirmInfoSNterminated) GetIEExtensions() []*PdusessionResourceModConfirmInfoSNterminatedExtIes {
	if x != nil {
		return x.IEExtensions
	}
	return nil
}

// sequence from xnap_v1.asn1:6739
// {DRBsAdmittedList-ModConfirm-SNterminated}
type DrbsAdmittedListModConfirmSNterminated struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"valueExt,sizeLB:1,sizeUB:32,"
	Value []*DrbsAdmittedListModConfirmSNterminatedItem `protobuf:"bytes,1,rep,name=value,proto3" json:"value,omitempty" aper:"valueExt,sizeLB:1,sizeUB:32,"`
}

func (x *DrbsAdmittedListModConfirmSNterminated) Reset() {
	*x = DrbsAdmittedListModConfirmSNterminated{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[594]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DrbsAdmittedListModConfirmSNterminated) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DrbsAdmittedListModConfirmSNterminated) ProtoMessage() {}

func (x *DrbsAdmittedListModConfirmSNterminated) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[594]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DrbsAdmittedListModConfirmSNterminated.ProtoReflect.Descriptor instead.
func (*DrbsAdmittedListModConfirmSNterminated) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{594}
}

func (x *DrbsAdmittedListModConfirmSNterminated) GetValue() []*DrbsAdmittedListModConfirmSNterminatedItem {
	if x != nil {
		return x.Value
	}
	return nil
}

// value set from xnap_v1.asn1:6748
// {DRBsAdmittedList-ModConfirm-SNterminated-Item-ExtIEs}
type DrbsAdmittedListModConfirmSNterminatedItemExtIes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *emptypb.Empty `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *DrbsAdmittedListModConfirmSNterminatedItemExtIes) Reset() {
	*x = DrbsAdmittedListModConfirmSNterminatedItemExtIes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[595]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DrbsAdmittedListModConfirmSNterminatedItemExtIes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DrbsAdmittedListModConfirmSNterminatedItemExtIes) ProtoMessage() {}

func (x *DrbsAdmittedListModConfirmSNterminatedItemExtIes) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[595]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DrbsAdmittedListModConfirmSNterminatedItemExtIes.ProtoReflect.Descriptor instead.
func (*DrbsAdmittedListModConfirmSNterminatedItemExtIes) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{595}
}

func (x *DrbsAdmittedListModConfirmSNterminatedItemExtIes) GetValue() *emptypb.Empty {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:6740
// @inject_tag: aper:"valueExt"
// {DRBsAdmittedList-ModConfirm-SNterminated-Item}
type DrbsAdmittedListModConfirmSNterminatedItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DrbId *DrbID `protobuf:"bytes,1,opt,name=drb_id,json=drb-ID,proto3" json:"drb_id,omitempty"`
	// @inject_tag: aper:"optional,"
	MNDlCgUpTnlinfo *UptransportParameters `protobuf:"bytes,2,opt,name=m_n_dl_cg_up_tnlinfo,json=mN-DL-CG-UP-TNLInfo,proto3,oneof" json:"m_n_dl_cg_up_tnlinfo,omitempty" aper:"optional,"`
	// @inject_tag: aper:"optional,"
	SecondaryMnDlCgUpTnlinfo *UptransportParameters `protobuf:"bytes,3,opt,name=secondary_mn_dl_cg_up_tnlinfo,json=secondary-MN-DL-CG-UP-TNLInfo,proto3,oneof" json:"secondary_mn_dl_cg_up_tnlinfo,omitempty" aper:"optional,"`
	// @inject_tag: aper:"optional,"
	LCid *Lcid `protobuf:"bytes,4,opt,name=l_cid,json=lCID,proto3,oneof" json:"l_cid,omitempty" aper:"optional,"`
	// @inject_tag: aper:"optional,sizeLB:1,"
	IEExtensions []*DrbsAdmittedListModConfirmSNterminatedItemExtIes `protobuf:"bytes,5,rep,name=i_e_extensions,json=iE-Extensions,proto3" json:"i_e_extensions,omitempty" aper:"optional,sizeLB:1,"`
}

func (x *DrbsAdmittedListModConfirmSNterminatedItem) Reset() {
	*x = DrbsAdmittedListModConfirmSNterminatedItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[596]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DrbsAdmittedListModConfirmSNterminatedItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DrbsAdmittedListModConfirmSNterminatedItem) ProtoMessage() {}

func (x *DrbsAdmittedListModConfirmSNterminatedItem) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[596]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DrbsAdmittedListModConfirmSNterminatedItem.ProtoReflect.Descriptor instead.
func (*DrbsAdmittedListModConfirmSNterminatedItem) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{596}
}

func (x *DrbsAdmittedListModConfirmSNterminatedItem) GetDrbId() *DrbID {
	if x != nil {
		return x.DrbId
	}
	return nil
}

func (x *DrbsAdmittedListModConfirmSNterminatedItem) GetMNDlCgUpTnlinfo() *UptransportParameters {
	if x != nil {
		return x.MNDlCgUpTnlinfo
	}
	return nil
}

func (x *DrbsAdmittedListModConfirmSNterminatedItem) GetSecondaryMnDlCgUpTnlinfo() *UptransportParameters {
	if x != nil {
		return x.SecondaryMnDlCgUpTnlinfo
	}
	return nil
}

func (x *DrbsAdmittedListModConfirmSNterminatedItem) GetLCid() *Lcid {
	if x != nil {
		return x.LCid
	}
	return nil
}

func (x *DrbsAdmittedListModConfirmSNterminatedItem) GetIEExtensions() []*DrbsAdmittedListModConfirmSNterminatedItemExtIes {
	if x != nil {
		return x.IEExtensions
	}
	return nil
}

// value set from xnap_v1.asn1:6768
// {PDUSessionResourceModRqdInfo-MNterminated-ExtIEs}
type PdusessionResourceModRqdInfoMNterminatedExtIes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *emptypb.Empty `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *PdusessionResourceModRqdInfoMNterminatedExtIes) Reset() {
	*x = PdusessionResourceModRqdInfoMNterminatedExtIes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[597]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PdusessionResourceModRqdInfoMNterminatedExtIes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PdusessionResourceModRqdInfoMNterminatedExtIes) ProtoMessage() {}

func (x *PdusessionResourceModRqdInfoMNterminatedExtIes) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[597]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PdusessionResourceModRqdInfoMNterminatedExtIes.ProtoReflect.Descriptor instead.
func (*PdusessionResourceModRqdInfoMNterminatedExtIes) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{597}
}

func (x *PdusessionResourceModRqdInfoMNterminatedExtIes) GetValue() *emptypb.Empty {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:6762
// @inject_tag: aper:"valueExt"
// {PDUSessionResourceModRqdInfo-MNterminated}
type PdusessionResourceModRqdInfoMNterminated struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"optional,"
	DRbsToBeModified *DrbsToBeModifiedListModRqdMNterminated `protobuf:"bytes,1,opt,name=d_rbs_to_be_modified,json=dRBsToBeModified,proto3,oneof" json:"d_rbs_to_be_modified,omitempty" aper:"optional,"`
	// @inject_tag: aper:"optional,"
	DRbsToBeReleased *DrbListwithCause `protobuf:"bytes,2,opt,name=d_rbs_to_be_released,json=dRBsToBeReleased,proto3,oneof" json:"d_rbs_to_be_released,omitempty" aper:"optional,"`
	// @inject_tag: aper:"optional,sizeLB:1,"
	IEExtensions []*PdusessionResourceModRqdInfoMNterminatedExtIes `protobuf:"bytes,3,rep,name=i_e_extensions,json=iE-Extensions,proto3" json:"i_e_extensions,omitempty" aper:"optional,sizeLB:1,"`
}

func (x *PdusessionResourceModRqdInfoMNterminated) Reset() {
	*x = PdusessionResourceModRqdInfoMNterminated{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[598]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PdusessionResourceModRqdInfoMNterminated) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PdusessionResourceModRqdInfoMNterminated) ProtoMessage() {}

func (x *PdusessionResourceModRqdInfoMNterminated) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[598]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PdusessionResourceModRqdInfoMNterminated.ProtoReflect.Descriptor instead.
func (*PdusessionResourceModRqdInfoMNterminated) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{598}
}

func (x *PdusessionResourceModRqdInfoMNterminated) GetDRbsToBeModified() *DrbsToBeModifiedListModRqdMNterminated {
	if x != nil {
		return x.DRbsToBeModified
	}
	return nil
}

func (x *PdusessionResourceModRqdInfoMNterminated) GetDRbsToBeReleased() *DrbListwithCause {
	if x != nil {
		return x.DRbsToBeReleased
	}
	return nil
}

func (x *PdusessionResourceModRqdInfoMNterminated) GetIEExtensions() []*PdusessionResourceModRqdInfoMNterminatedExtIes {
	if x != nil {
		return x.IEExtensions
	}
	return nil
}

// sequence from xnap_v1.asn1:6775
// {DRBsToBeModified-List-ModRqd-MNterminated}
type DrbsToBeModifiedListModRqdMNterminated struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"valueExt,sizeLB:1,sizeUB:32,"
	Value []*DrbsToBeModifiedListModRqdMNterminatedItem `protobuf:"bytes,1,rep,name=value,proto3" json:"value,omitempty" aper:"valueExt,sizeLB:1,sizeUB:32,"`
}

func (x *DrbsToBeModifiedListModRqdMNterminated) Reset() {
	*x = DrbsToBeModifiedListModRqdMNterminated{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[599]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DrbsToBeModifiedListModRqdMNterminated) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DrbsToBeModifiedListModRqdMNterminated) ProtoMessage() {}

func (x *DrbsToBeModifiedListModRqdMNterminated) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[599]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DrbsToBeModifiedListModRqdMNterminated.ProtoReflect.Descriptor instead.
func (*DrbsToBeModifiedListModRqdMNterminated) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{599}
}

func (x *DrbsToBeModifiedListModRqdMNterminated) GetValue() []*DrbsToBeModifiedListModRqdMNterminatedItem {
	if x != nil {
		return x.Value
	}
	return nil
}

// value set from xnap_v1.asn1:6785
// {DRBsToBeModified-List-ModRqd-MNterminated-Item-ExtIEs}
type DrbsToBeModifiedListModRqdMNterminatedItemExtIes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *emptypb.Empty `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *DrbsToBeModifiedListModRqdMNterminatedItemExtIes) Reset() {
	*x = DrbsToBeModifiedListModRqdMNterminatedItemExtIes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[600]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DrbsToBeModifiedListModRqdMNterminatedItemExtIes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DrbsToBeModifiedListModRqdMNterminatedItemExtIes) ProtoMessage() {}

func (x *DrbsToBeModifiedListModRqdMNterminatedItemExtIes) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[600]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DrbsToBeModifiedListModRqdMNterminatedItemExtIes.ProtoReflect.Descriptor instead.
func (*DrbsToBeModifiedListModRqdMNterminatedItemExtIes) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{600}
}

func (x *DrbsToBeModifiedListModRqdMNterminatedItemExtIes) GetValue() *emptypb.Empty {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:6776
// @inject_tag: aper:"valueExt"
// {DRBsToBeModified-List-ModRqd-MNterminated-Item}
type DrbsToBeModifiedListModRqdMNterminatedItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DrbId            *DrbID                       `protobuf:"bytes,1,opt,name=drb_id,json=drb-ID,proto3" json:"drb_id,omitempty"`
	SNDlScgUpTnlinfo *UptransportLayerInformation `protobuf:"bytes,2,opt,name=s_n_dl_scg_up_tnlinfo,json=sN-DL-SCG-UP-TNLInfo,proto3" json:"s_n_dl_scg_up_tnlinfo,omitempty"`
	// @inject_tag: aper:"optional,"
	SecondarySnDlScgUpTnlinfo *UptransportLayerInformation `protobuf:"bytes,3,opt,name=secondary_sn_dl_scg_up_tnlinfo,json=secondary-SN-DL-SCG-UP-TNLInfo,proto3,oneof" json:"secondary_sn_dl_scg_up_tnlinfo,omitempty" aper:"optional,"`
	// @inject_tag: aper:"optional,"
	LCid *Lcid `protobuf:"bytes,4,opt,name=l_cid,json=lCID,proto3,oneof" json:"l_cid,omitempty" aper:"optional,"`
	// @inject_tag: aper:"optional,valueExt,"
	RlcStatus *RlcStatus `protobuf:"bytes,5,opt,name=rlc_status,json=rlc-status,proto3,oneof" json:"rlc_status,omitempty" aper:"optional,valueExt,"`
	// @inject_tag: aper:"optional,sizeLB:1,"
	IEExtensions []*DrbsToBeModifiedListModRqdMNterminatedItemExtIes `protobuf:"bytes,6,rep,name=i_e_extensions,json=iE-Extensions,proto3" json:"i_e_extensions,omitempty" aper:"optional,sizeLB:1,"`
}

func (x *DrbsToBeModifiedListModRqdMNterminatedItem) Reset() {
	*x = DrbsToBeModifiedListModRqdMNterminatedItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[601]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DrbsToBeModifiedListModRqdMNterminatedItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DrbsToBeModifiedListModRqdMNterminatedItem) ProtoMessage() {}

func (x *DrbsToBeModifiedListModRqdMNterminatedItem) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[601]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DrbsToBeModifiedListModRqdMNterminatedItem.ProtoReflect.Descriptor instead.
func (*DrbsToBeModifiedListModRqdMNterminatedItem) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{601}
}

func (x *DrbsToBeModifiedListModRqdMNterminatedItem) GetDrbId() *DrbID {
	if x != nil {
		return x.DrbId
	}
	return nil
}

func (x *DrbsToBeModifiedListModRqdMNterminatedItem) GetSNDlScgUpTnlinfo() *UptransportLayerInformation {
	if x != nil {
		return x.SNDlScgUpTnlinfo
	}
	return nil
}

func (x *DrbsToBeModifiedListModRqdMNterminatedItem) GetSecondarySnDlScgUpTnlinfo() *UptransportLayerInformation {
	if x != nil {
		return x.SecondarySnDlScgUpTnlinfo
	}
	return nil
}

func (x *DrbsToBeModifiedListModRqdMNterminatedItem) GetLCid() *Lcid {
	if x != nil {
		return x.LCid
	}
	return nil
}

func (x *DrbsToBeModifiedListModRqdMNterminatedItem) GetRlcStatus() *RlcStatus {
	if x != nil {
		return x.RlcStatus
	}
	return nil
}

func (x *DrbsToBeModifiedListModRqdMNterminatedItem) GetIEExtensions() []*DrbsToBeModifiedListModRqdMNterminatedItemExtIes {
	if x != nil {
		return x.IEExtensions
	}
	return nil
}

// value set from xnap_v1.asn1:6803
// {PDUSessionResourceModConfirmInfo-MNterminated-ExtIEs}
type PdusessionResourceModConfirmInfoMNterminatedExtIes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *emptypb.Empty `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *PdusessionResourceModConfirmInfoMNterminatedExtIes) Reset() {
	*x = PdusessionResourceModConfirmInfoMNterminatedExtIes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[602]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PdusessionResourceModConfirmInfoMNterminatedExtIes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PdusessionResourceModConfirmInfoMNterminatedExtIes) ProtoMessage() {}

func (x *PdusessionResourceModConfirmInfoMNterminatedExtIes) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[602]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PdusessionResourceModConfirmInfoMNterminatedExtIes.ProtoReflect.Descriptor instead.
func (*PdusessionResourceModConfirmInfoMNterminatedExtIes) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{602}
}

func (x *PdusessionResourceModConfirmInfoMNterminatedExtIes) GetValue() *emptypb.Empty {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:6799
// @inject_tag: aper:"valueExt"
// {PDUSessionResourceModConfirmInfo-MNterminated}
type PdusessionResourceModConfirmInfoMNterminated struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"optional,sizeLB:1,"
	IEExtensions []*PdusessionResourceModConfirmInfoMNterminatedExtIes `protobuf:"bytes,1,rep,name=i_e_extensions,json=iE-Extensions,proto3" json:"i_e_extensions,omitempty" aper:"optional,sizeLB:1,"`
}

func (x *PdusessionResourceModConfirmInfoMNterminated) Reset() {
	*x = PdusessionResourceModConfirmInfoMNterminated{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[603]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PdusessionResourceModConfirmInfoMNterminated) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PdusessionResourceModConfirmInfoMNterminated) ProtoMessage() {}

func (x *PdusessionResourceModConfirmInfoMNterminated) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[603]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PdusessionResourceModConfirmInfoMNterminated.ProtoReflect.Descriptor instead.
func (*PdusessionResourceModConfirmInfoMNterminated) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{603}
}

func (x *PdusessionResourceModConfirmInfoMNterminated) GetIEExtensions() []*PdusessionResourceModConfirmInfoMNterminatedExtIes {
	if x != nil {
		return x.IEExtensions
	}
	return nil
}

// value set from xnap_v1.asn1:6820
// {PDUSessionResourceBearerSetupCompleteInfo-SNterminated-ExtIEs}
type PdusessionResourceBearerSetupCompleteInfoSNterminatedExtIes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *emptypb.Empty `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *PdusessionResourceBearerSetupCompleteInfoSNterminatedExtIes) Reset() {
	*x = PdusessionResourceBearerSetupCompleteInfoSNterminatedExtIes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[604]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PdusessionResourceBearerSetupCompleteInfoSNterminatedExtIes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PdusessionResourceBearerSetupCompleteInfoSNterminatedExtIes) ProtoMessage() {}

func (x *PdusessionResourceBearerSetupCompleteInfoSNterminatedExtIes) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[604]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PdusessionResourceBearerSetupCompleteInfoSNterminatedExtIes.ProtoReflect.Descriptor instead.
func (*PdusessionResourceBearerSetupCompleteInfoSNterminatedExtIes) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{604}
}

func (x *PdusessionResourceBearerSetupCompleteInfoSNterminatedExtIes) GetValue() *emptypb.Empty {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:6815
// @inject_tag: aper:"valueExt"
// {PDUSessionResourceBearerSetupCompleteInfo-SNterminated}
type PdusessionResourceBearerSetupCompleteInfoSNterminated struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"sizeLB:1,sizeUB:32,"
	DRbsToBeSetupList []*DrbsToBeSetupListBearerSetupCompleteSNterminatedItem `protobuf:"bytes,1,rep,name=d_rbs_to_be_setup_list,json=dRBsToBeSetupList,proto3" json:"d_rbs_to_be_setup_list,omitempty" aper:"sizeLB:1,sizeUB:32,"`
	// @inject_tag: aper:"optional,sizeLB:1,"
	IEExtensions []*PdusessionResourceBearerSetupCompleteInfoSNterminatedExtIes `protobuf:"bytes,2,rep,name=i_e_extensions,json=iE-Extensions,proto3" json:"i_e_extensions,omitempty" aper:"optional,sizeLB:1,"`
}

func (x *PdusessionResourceBearerSetupCompleteInfoSNterminated) Reset() {
	*x = PdusessionResourceBearerSetupCompleteInfoSNterminated{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[605]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PdusessionResourceBearerSetupCompleteInfoSNterminated) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PdusessionResourceBearerSetupCompleteInfoSNterminated) ProtoMessage() {}

func (x *PdusessionResourceBearerSetupCompleteInfoSNterminated) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[605]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PdusessionResourceBearerSetupCompleteInfoSNterminated.ProtoReflect.Descriptor instead.
func (*PdusessionResourceBearerSetupCompleteInfoSNterminated) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{605}
}

func (x *PdusessionResourceBearerSetupCompleteInfoSNterminated) GetDRbsToBeSetupList() []*DrbsToBeSetupListBearerSetupCompleteSNterminatedItem {
	if x != nil {
		return x.DRbsToBeSetupList
	}
	return nil
}

func (x *PdusessionResourceBearerSetupCompleteInfoSNterminated) GetIEExtensions() []*PdusessionResourceBearerSetupCompleteInfoSNterminatedExtIes {
	if x != nil {
		return x.IEExtensions
	}
	return nil
}

// value set from xnap_v1.asn1:6831
// {DRBsToBeSetupList-BearerSetupComplete-SNterminated-Item-ExtIEs}
type DrbsToBeSetupListBearerSetupCompleteSNterminatedItemExtIes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *emptypb.Empty `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *DrbsToBeSetupListBearerSetupCompleteSNterminatedItemExtIes) Reset() {
	*x = DrbsToBeSetupListBearerSetupCompleteSNterminatedItemExtIes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[606]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DrbsToBeSetupListBearerSetupCompleteSNterminatedItemExtIes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DrbsToBeSetupListBearerSetupCompleteSNterminatedItemExtIes) ProtoMessage() {}

func (x *DrbsToBeSetupListBearerSetupCompleteSNterminatedItemExtIes) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[606]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DrbsToBeSetupListBearerSetupCompleteSNterminatedItemExtIes.ProtoReflect.Descriptor instead.
func (*DrbsToBeSetupListBearerSetupCompleteSNterminatedItemExtIes) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{606}
}

func (x *DrbsToBeSetupListBearerSetupCompleteSNterminatedItemExtIes) GetValue() *emptypb.Empty {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:6825
// @inject_tag: aper:"valueExt"
// {DRBsToBeSetupList-BearerSetupComplete-SNterminated-Item}
type DrbsToBeSetupListBearerSetupCompleteSNterminatedItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DRbId           *DrbID                       `protobuf:"bytes,1,opt,name=d_rb_id,json=dRB-ID,proto3" json:"d_rb_id,omitempty"`
	MNXnUTnlinfoatM *UptransportLayerInformation `protobuf:"bytes,2,opt,name=m_n_xn_u_tnlinfoat_m,json=mN-Xn-U-TNLInfoatM,proto3" json:"m_n_xn_u_tnlinfoat_m,omitempty"`
	// @inject_tag: aper:"optional,sizeLB:1,"
	IEExtensions []*DrbsToBeSetupListBearerSetupCompleteSNterminatedItemExtIes `protobuf:"bytes,3,rep,name=i_e_extensions,json=iE-Extensions,proto3" json:"i_e_extensions,omitempty" aper:"optional,sizeLB:1,"`
}

func (x *DrbsToBeSetupListBearerSetupCompleteSNterminatedItem) Reset() {
	*x = DrbsToBeSetupListBearerSetupCompleteSNterminatedItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[607]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DrbsToBeSetupListBearerSetupCompleteSNterminatedItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DrbsToBeSetupListBearerSetupCompleteSNterminatedItem) ProtoMessage() {}

func (x *DrbsToBeSetupListBearerSetupCompleteSNterminatedItem) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[607]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DrbsToBeSetupListBearerSetupCompleteSNterminatedItem.ProtoReflect.Descriptor instead.
func (*DrbsToBeSetupListBearerSetupCompleteSNterminatedItem) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{607}
}

func (x *DrbsToBeSetupListBearerSetupCompleteSNterminatedItem) GetDRbId() *DrbID {
	if x != nil {
		return x.DRbId
	}
	return nil
}

func (x *DrbsToBeSetupListBearerSetupCompleteSNterminatedItem) GetMNXnUTnlinfoatM() *UptransportLayerInformation {
	if x != nil {
		return x.MNXnUTnlinfoatM
	}
	return nil
}

func (x *DrbsToBeSetupListBearerSetupCompleteSNterminatedItem) GetIEExtensions() []*DrbsToBeSetupListBearerSetupCompleteSNterminatedItemExtIes {
	if x != nil {
		return x.IEExtensions
	}
	return nil
}

// sequence from xnap_v1.asn1:6844
// {PDUSessionResourceSecondaryRATUsageList}
type PdusessionResourceSecondaryRatusageList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"valueExt,sizeLB:1,sizeUB:256,"
	Value []*PdusessionResourceSecondaryRatusageItem `protobuf:"bytes,1,rep,name=value,proto3" json:"value,omitempty" aper:"valueExt,sizeLB:1,sizeUB:256,"`
}

func (x *PdusessionResourceSecondaryRatusageList) Reset() {
	*x = PdusessionResourceSecondaryRatusageList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[608]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PdusessionResourceSecondaryRatusageList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PdusessionResourceSecondaryRatusageList) ProtoMessage() {}

func (x *PdusessionResourceSecondaryRatusageList) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[608]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PdusessionResourceSecondaryRatusageList.ProtoReflect.Descriptor instead.
func (*PdusessionResourceSecondaryRatusageList) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{608}
}

func (x *PdusessionResourceSecondaryRatusageList) GetValue() []*PdusessionResourceSecondaryRatusageItem {
	if x != nil {
		return x.Value
	}
	return nil
}

// value set from xnap_v1.asn1:6851
// {PDUSessionResourceSecondaryRATUsageItem-ExtIEs}
type PdusessionResourceSecondaryRatusageItemExtIes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *emptypb.Empty `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *PdusessionResourceSecondaryRatusageItemExtIes) Reset() {
	*x = PdusessionResourceSecondaryRatusageItemExtIes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[609]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PdusessionResourceSecondaryRatusageItemExtIes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PdusessionResourceSecondaryRatusageItemExtIes) ProtoMessage() {}

func (x *PdusessionResourceSecondaryRatusageItemExtIes) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[609]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PdusessionResourceSecondaryRatusageItemExtIes.ProtoReflect.Descriptor instead.
func (*PdusessionResourceSecondaryRatusageItemExtIes) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{609}
}

func (x *PdusessionResourceSecondaryRatusageItemExtIes) GetValue() *emptypb.Empty {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:6845
// @inject_tag: aper:"valueExt"
// {PDUSessionResourceSecondaryRATUsageItem}
type PdusessionResourceSecondaryRatusageItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PDusessionId *PdusessionID `protobuf:"bytes,1,opt,name=p_dusession_id,json=pDUSessionID,proto3" json:"p_dusession_id,omitempty"`
	// @inject_tag: aper:"valueExt,"
	SecondaryRatusageInformation *SecondaryRatusageInformation `protobuf:"bytes,2,opt,name=secondary_ratusage_information,json=secondaryRATUsageInformation,proto3" json:"secondary_ratusage_information,omitempty" aper:"valueExt,"`
	// @inject_tag: aper:"optional,sizeLB:1,"
	IEExtensions []*PdusessionResourceSecondaryRatusageItemExtIes `protobuf:"bytes,3,rep,name=i_e_extensions,json=iE-Extensions,proto3" json:"i_e_extensions,omitempty" aper:"optional,sizeLB:1,"`
}

func (x *PdusessionResourceSecondaryRatusageItem) Reset() {
	*x = PdusessionResourceSecondaryRatusageItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[610]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PdusessionResourceSecondaryRatusageItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PdusessionResourceSecondaryRatusageItem) ProtoMessage() {}

func (x *PdusessionResourceSecondaryRatusageItem) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[610]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PdusessionResourceSecondaryRatusageItem.ProtoReflect.Descriptor instead.
func (*PdusessionResourceSecondaryRatusageItem) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{610}
}

func (x *PdusessionResourceSecondaryRatusageItem) GetPDusessionId() *PdusessionID {
	if x != nil {
		return x.PDusessionId
	}
	return nil
}

func (x *PdusessionResourceSecondaryRatusageItem) GetSecondaryRatusageInformation() *SecondaryRatusageInformation {
	if x != nil {
		return x.SecondaryRatusageInformation
	}
	return nil
}

func (x *PdusessionResourceSecondaryRatusageItem) GetIEExtensions() []*PdusessionResourceSecondaryRatusageItemExtIes {
	if x != nil {
		return x.IEExtensions
	}
	return nil
}

// value set from xnap_v1.asn1:6862
// {PDUSessionUsageReport-ExtIEs}
type PdusessionUsageReportExtIes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *emptypb.Empty `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *PdusessionUsageReportExtIes) Reset() {
	*x = PdusessionUsageReportExtIes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[611]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PdusessionUsageReportExtIes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PdusessionUsageReportExtIes) ProtoMessage() {}

func (x *PdusessionUsageReportExtIes) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[611]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PdusessionUsageReportExtIes.ProtoReflect.Descriptor instead.
func (*PdusessionUsageReportExtIes) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{611}
}

func (x *PdusessionUsageReportExtIes) GetValue() *emptypb.Empty {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:6856
// @inject_tag: aper:"valueExt"
// {PDUSessionUsageReport}
type PdusessionUsageReport struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"valueExt,valueLB:0,valueUB:1,"
	RAttype                   RattypePdusessionUsageReport `protobuf:"varint,1,opt,name=r_attype,json=rATType,proto3,enum=xnap.v1.RattypePdusessionUsageReport" json:"r_attype,omitempty" aper:"valueExt,valueLB:0,valueUB:1,"`
	PDusessionTimedReportList *VolumeTimedReportList       `protobuf:"bytes,2,opt,name=p_dusession_timed_report_list,json=pDUSessionTimedReportList,proto3" json:"p_dusession_timed_report_list,omitempty"`
	// @inject_tag: aper:"optional,sizeLB:1,"
	IEExtensions []*PdusessionUsageReportExtIes `protobuf:"bytes,3,rep,name=i_e_extensions,json=iE-Extensions,proto3" json:"i_e_extensions,omitempty" aper:"optional,sizeLB:1,"`
}

func (x *PdusessionUsageReport) Reset() {
	*x = PdusessionUsageReport{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[612]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PdusessionUsageReport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PdusessionUsageReport) ProtoMessage() {}

func (x *PdusessionUsageReport) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[612]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PdusessionUsageReport.ProtoReflect.Descriptor instead.
func (*PdusessionUsageReport) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{612}
}

func (x *PdusessionUsageReport) GetRAttype() RattypePdusessionUsageReport {
	if x != nil {
		return x.RAttype
	}
	return RattypePdusessionUsageReport_R_ATTYPE_PDUSESSION_USAGE_REPORT_NR
}

func (x *PdusessionUsageReport) GetPDusessionTimedReportList() *VolumeTimedReportList {
	if x != nil {
		return x.PDusessionTimedReportList
	}
	return nil
}

func (x *PdusessionUsageReport) GetIEExtensions() []*PdusessionUsageReportExtIes {
	if x != nil {
		return x.IEExtensions
	}
	return nil
}

// range of Integer from xnap_v1.asn1:6868
// {PDUSession-ID}
type PdusessionID struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"valueLB:0,valueUB:255,"
	Value int32 `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty" aper:"valueLB:0,valueUB:255,"`
}

func (x *PdusessionID) Reset() {
	*x = PdusessionID{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[613]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PdusessionID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PdusessionID) ProtoMessage() {}

func (x *PdusessionID) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[613]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PdusessionID.ProtoReflect.Descriptor instead.
func (*PdusessionID) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{613}
}

func (x *PdusessionID) GetValue() int32 {
	if x != nil {
		return x.Value
	}
	return 0
}

// range of Integer from xnap_v1.asn1:6870
// {PDUSessionNetworkInstance}
type PdusessionNetworkInstance struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"valueExt,valueLB:1,valueUB:256,"
	Value int32 `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty" aper:"valueExt,valueLB:1,valueUB:256,"`
}

func (x *PdusessionNetworkInstance) Reset() {
	*x = PdusessionNetworkInstance{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[614]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PdusessionNetworkInstance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PdusessionNetworkInstance) ProtoMessage() {}

func (x *PdusessionNetworkInstance) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[614]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PdusessionNetworkInstance.ProtoReflect.Descriptor instead.
func (*PdusessionNetworkInstance) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{614}
}

func (x *PdusessionNetworkInstance) GetValue() int32 {
	if x != nil {
		return x.Value
	}
	return 0
}

// range of Integer from xnap_v1.asn1:6872
// {PDUSessionCommonNetworkInstance}
type PdusessionCommonNetworkInstance struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value []byte `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *PdusessionCommonNetworkInstance) Reset() {
	*x = PdusessionCommonNetworkInstance{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[615]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PdusessionCommonNetworkInstance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PdusessionCommonNetworkInstance) ProtoMessage() {}

func (x *PdusessionCommonNetworkInstance) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[615]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PdusessionCommonNetworkInstance.ProtoReflect.Descriptor instead.
func (*PdusessionCommonNetworkInstance) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{615}
}

func (x *PdusessionCommonNetworkInstance) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

// value set from xnap_v1.asn1:6879
// {Periodical-ExtIEs}
type PeriodicalExtIes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *emptypb.Empty `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *PeriodicalExtIes) Reset() {
	*x = PeriodicalExtIes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[616]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PeriodicalExtIes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PeriodicalExtIes) ProtoMessage() {}

func (x *PeriodicalExtIes) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[616]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PeriodicalExtIes.ProtoReflect.Descriptor instead.
func (*PeriodicalExtIes) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{616}
}

func (x *PeriodicalExtIes) GetValue() *emptypb.Empty {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:6875
// @inject_tag: aper:"valueExt"
// {Periodical}
type Periodical struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"optional,sizeLB:1,"
	IEExtensions []*PeriodicalExtIes `protobuf:"bytes,1,rep,name=i_e_extensions,json=iE-Extensions,proto3" json:"i_e_extensions,omitempty" aper:"optional,sizeLB:1,"`
}

func (x *Periodical) Reset() {
	*x = Periodical{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[617]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Periodical) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Periodical) ProtoMessage() {}

func (x *Periodical) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[617]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Periodical.ProtoReflect.Descriptor instead.
func (*Periodical) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{617}
}

func (x *Periodical) GetIEExtensions() []*PeriodicalExtIes {
	if x != nil {
		return x.IEExtensions
	}
	return nil
}

// range of Integer from xnap_v1.asn1:6884
// {PLMN-Identity}
type PlmnIdentity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"sizeLB:3,sizeUB:3,"
	Value []byte `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty" aper:"sizeLB:3,sizeUB:3,"`
}

func (x *PlmnIdentity) Reset() {
	*x = PlmnIdentity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[618]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlmnIdentity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlmnIdentity) ProtoMessage() {}

func (x *PlmnIdentity) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[618]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlmnIdentity.ProtoReflect.Descriptor instead.
func (*PlmnIdentity) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{618}
}

func (x *PlmnIdentity) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:6889
// {PCIListForMDT}
type PcilistForMdt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"sizeLB:1,sizeUB:32,"
	Value []*Nrpci `protobuf:"bytes,1,rep,name=value,proto3" json:"value,omitempty" aper:"sizeLB:1,sizeUB:32,"`
}

func (x *PcilistForMdt) Reset() {
	*x = PcilistForMdt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[619]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PcilistForMdt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PcilistForMdt) ProtoMessage() {}

func (x *PcilistForMdt) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[619]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PcilistForMdt.ProtoReflect.Descriptor instead.
func (*PcilistForMdt) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{619}
}

func (x *PcilistForMdt) GetValue() []*Nrpci {
	if x != nil {
		return x.Value
	}
	return nil
}

// range of Integer from xnap_v1.asn1:6891
// {PortNumber}
type PortNumber struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"sizeLB:16,sizeUB:16,"
	Value *asn1.BitString `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty" aper:"sizeLB:16,sizeUB:16,"`
}

func (x *PortNumber) Reset() {
	*x = PortNumber{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[620]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PortNumber) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PortNumber) ProtoMessage() {}

func (x *PortNumber) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[620]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PortNumber.ProtoReflect.Descriptor instead.
func (*PortNumber) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{620}
}

func (x *PortNumber) GetValue() *asn1.BitString {
	if x != nil {
		return x.Value
	}
	return nil
}

// range of Integer from xnap_v1.asn1:6893
// {PriorityLevelQoS}
type PriorityLevelQoS struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"valueExt,valueLB:1,valueUB:127,"
	Value int32 `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty" aper:"valueExt,valueLB:1,valueUB:127,"`
}

func (x *PriorityLevelQoS) Reset() {
	*x = PriorityLevelQoS{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[621]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PriorityLevelQoS) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PriorityLevelQoS) ProtoMessage() {}

func (x *PriorityLevelQoS) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[621]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PriorityLevelQoS.ProtoReflect.Descriptor instead.
func (*PriorityLevelQoS) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{621}
}

func (x *PriorityLevelQoS) GetValue() int32 {
	if x != nil {
		return x.Value
	}
	return 0
}

// value set from xnap_v1.asn1:6905
// {ProtectedE-UTRAResourceIndication-ExtIEs}
type ProtectedEUTraresourceIndicationExtIes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *emptypb.Empty `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *ProtectedEUTraresourceIndicationExtIes) Reset() {
	*x = ProtectedEUTraresourceIndicationExtIes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[622]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProtectedEUTraresourceIndicationExtIes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtectedEUTraresourceIndicationExtIes) ProtoMessage() {}

func (x *ProtectedEUTraresourceIndicationExtIes) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[622]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtectedEUTraresourceIndicationExtIes.ProtoReflect.Descriptor instead.
func (*ProtectedEUTraresourceIndicationExtIes) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{622}
}

func (x *ProtectedEUTraresourceIndicationExtIes) GetValue() *emptypb.Empty {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:6897
// @inject_tag: aper:"valueExt"
// {ProtectedE-UTRAResourceIndication}
type ProtectedEUTraresourceIndication struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActivationSfn         *ActivationSfn              `protobuf:"bytes,1,opt,name=activation_sfn,json=activationSFN,proto3" json:"activation_sfn,omitempty"`
	ProtectedResourceList *ProtectedEUTraresourceList `protobuf:"bytes,2,opt,name=protected_resource_list,json=protectedResourceList,proto3" json:"protected_resource_list,omitempty"`
	// @inject_tag: aper:"optional,"
	MbsfnControlRegionLength *MbsfncontrolRegionLength `protobuf:"bytes,3,opt,name=mbsfn_control_region_length,json=mbsfnControlRegionLength,proto3,oneof" json:"mbsfn_control_region_length,omitempty" aper:"optional,"`
	// @inject_tag: aper:"valueLB:1,valueUB:3,"
	PDcchregionLength int32 `protobuf:"varint,4,opt,name=p_dcchregion_length,json=pDCCHRegionLength,proto3" json:"p_dcchregion_length,omitempty" aper:"valueLB:1,valueUB:3,"`
	// @inject_tag: aper:"optional,sizeLB:1,"
	IEExtensions []*ProtectedEUTraresourceIndicationExtIes `protobuf:"bytes,5,rep,name=i_e_extensions,json=iE-Extensions,proto3" json:"i_e_extensions,omitempty" aper:"optional,sizeLB:1,"`
}

func (x *ProtectedEUTraresourceIndication) Reset() {
	*x = ProtectedEUTraresourceIndication{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[623]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProtectedEUTraresourceIndication) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtectedEUTraresourceIndication) ProtoMessage() {}

func (x *ProtectedEUTraresourceIndication) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[623]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtectedEUTraresourceIndication.ProtoReflect.Descriptor instead.
func (*ProtectedEUTraresourceIndication) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{623}
}

func (x *ProtectedEUTraresourceIndication) GetActivationSfn() *ActivationSfn {
	if x != nil {
		return x.ActivationSfn
	}
	return nil
}

func (x *ProtectedEUTraresourceIndication) GetProtectedResourceList() *ProtectedEUTraresourceList {
	if x != nil {
		return x.ProtectedResourceList
	}
	return nil
}

func (x *ProtectedEUTraresourceIndication) GetMbsfnControlRegionLength() *MbsfncontrolRegionLength {
	if x != nil {
		return x.MbsfnControlRegionLength
	}
	return nil
}

func (x *ProtectedEUTraresourceIndication) GetPDcchregionLength() int32 {
	if x != nil {
		return x.PDcchregionLength
	}
	return 0
}

func (x *ProtectedEUTraresourceIndication) GetIEExtensions() []*ProtectedEUTraresourceIndicationExtIes {
	if x != nil {
		return x.IEExtensions
	}
	return nil
}

// sequence from xnap_v1.asn1:6911
// {ProtectedE-UTRAResourceList}
type ProtectedEUTraresourceList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"valueExt,sizeLB:1,sizeUB:16,"
	Value []*ProtectedEUTraresourceItem `protobuf:"bytes,1,rep,name=value,proto3" json:"value,omitempty" aper:"valueExt,sizeLB:1,sizeUB:16,"`
}

func (x *ProtectedEUTraresourceList) Reset() {
	*x = ProtectedEUTraresourceList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[624]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProtectedEUTraresourceList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtectedEUTraresourceList) ProtoMessage() {}

func (x *ProtectedEUTraresourceList) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[624]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtectedEUTraresourceList.ProtoReflect.Descriptor instead.
func (*ProtectedEUTraresourceList) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{624}
}

func (x *ProtectedEUTraresourceList) GetValue() []*ProtectedEUTraresourceItem {
	if x != nil {
		return x.Value
	}
	return nil
}

// value set from xnap_v1.asn1:6920
// {ProtectedE-UTRAResource-Item-ExtIEs}
type ProtectedEUTraresourceItemExtIes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *emptypb.Empty `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *ProtectedEUTraresourceItemExtIes) Reset() {
	*x = ProtectedEUTraresourceItemExtIes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[625]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProtectedEUTraresourceItemExtIes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtectedEUTraresourceItemExtIes) ProtoMessage() {}

func (x *ProtectedEUTraresourceItemExtIes) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[625]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtectedEUTraresourceItemExtIes.ProtoReflect.Descriptor instead.
func (*ProtectedEUTraresourceItemExtIes) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{625}
}

func (x *ProtectedEUTraresourceItemExtIes) GetValue() *emptypb.Empty {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:6912
// @inject_tag: aper:"valueExt"
// {ProtectedE-UTRAResource-Item}
type ProtectedEUTraresourceItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"valueExt,valueLB:0,valueUB:2,"
	ResourceType ResourceTypeProtectedEutraresourceItem `protobuf:"varint,1,opt,name=resource_type,json=resourceType,proto3,enum=xnap.v1.ResourceTypeProtectedEutraresourceItem" json:"resource_type,omitempty" aper:"valueExt,valueLB:0,valueUB:2,"`
	// @inject_tag: aper:"sizeExt,sizeLB:84,sizeUB:84,"
	IntraPrbprotectedResourceFootprint *asn1.BitString `protobuf:"bytes,2,opt,name=intra_prbprotected_resource_footprint,json=intra-PRBProtectedResourceFootprint,proto3" json:"intra_prbprotected_resource_footprint,omitempty" aper:"sizeExt,sizeLB:84,sizeUB:84,"`
	// @inject_tag: aper:"sizeExt,sizeLB:6,sizeUB:110,"
	ProtectedFootprintFrequencyPattern *asn1.BitString `protobuf:"bytes,3,opt,name=protected_footprint_frequency_pattern,json=protectedFootprintFrequencyPattern,proto3" json:"protected_footprint_frequency_pattern,omitempty" aper:"sizeExt,sizeLB:6,sizeUB:110,"`
	// @inject_tag: aper:"valueExt,"
	ProtectedFootprintTimePattern *ProtectedEUTrafootprintTimePattern `protobuf:"bytes,4,opt,name=protected_footprint_time_pattern,json=protectedFootprintTimePattern,proto3" json:"protected_footprint_time_pattern,omitempty" aper:"valueExt,"`
	// @inject_tag: aper:"optional,sizeLB:1,"
	IEExtensions []*ProtectedEUTraresourceItemExtIes `protobuf:"bytes,5,rep,name=i_e_extensions,json=iE-Extensions,proto3" json:"i_e_extensions,omitempty" aper:"optional,sizeLB:1,"`
}

func (x *ProtectedEUTraresourceItem) Reset() {
	*x = ProtectedEUTraresourceItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[626]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProtectedEUTraresourceItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtectedEUTraresourceItem) ProtoMessage() {}

func (x *ProtectedEUTraresourceItem) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[626]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtectedEUTraresourceItem.ProtoReflect.Descriptor instead.
func (*ProtectedEUTraresourceItem) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{626}
}

func (x *ProtectedEUTraresourceItem) GetResourceType() ResourceTypeProtectedEutraresourceItem {
	if x != nil {
		return x.ResourceType
	}
	return ResourceTypeProtectedEutraresourceItem_RESOURCE_TYPE_PROTECTED_EUTRARESOURCE_ITEM_DOWNLINKNON_CRS
}

func (x *ProtectedEUTraresourceItem) GetIntraPrbprotectedResourceFootprint() *asn1.BitString {
	if x != nil {
		return x.IntraPrbprotectedResourceFootprint
	}
	return nil
}

func (x *ProtectedEUTraresourceItem) GetProtectedFootprintFrequencyPattern() *asn1.BitString {
	if x != nil {
		return x.ProtectedFootprintFrequencyPattern
	}
	return nil
}

func (x *ProtectedEUTraresourceItem) GetProtectedFootprintTimePattern() *ProtectedEUTrafootprintTimePattern {
	if x != nil {
		return x.ProtectedFootprintTimePattern
	}
	return nil
}

func (x *ProtectedEUTraresourceItem) GetIEExtensions() []*ProtectedEUTraresourceItemExtIes {
	if x != nil {
		return x.IEExtensions
	}
	return nil
}

// value set from xnap_v1.asn1:6932
// {ProtectedE-UTRAFootprintTimePattern-ExtIEs}
type ProtectedEUTrafootprintTimePatternExtIes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *emptypb.Empty `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *ProtectedEUTrafootprintTimePatternExtIes) Reset() {
	*x = ProtectedEUTrafootprintTimePatternExtIes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[627]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProtectedEUTrafootprintTimePatternExtIes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtectedEUTrafootprintTimePatternExtIes) ProtoMessage() {}

func (x *ProtectedEUTrafootprintTimePatternExtIes) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[627]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtectedEUTrafootprintTimePatternExtIes.ProtoReflect.Descriptor instead.
func (*ProtectedEUTrafootprintTimePatternExtIes) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{627}
}

func (x *ProtectedEUTrafootprintTimePatternExtIes) GetValue() *emptypb.Empty {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:6926
// @inject_tag: aper:"valueExt"
// {ProtectedE-UTRAFootprintTimePattern}
type ProtectedEUTrafootprintTimePattern struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"valueExt,valueLB:1,valueUB:320,"
	ProtectedFootprintTimeperiodicity int32 `protobuf:"varint,1,opt,name=protected_footprint_timeperiodicity,json=protectedFootprintTimeperiodicity,proto3" json:"protected_footprint_timeperiodicity,omitempty" aper:"valueExt,valueLB:1,valueUB:320,"`
	// @inject_tag: aper:"valueExt,valueLB:1,valueUB:20,"
	ProtectedFootrpintStartTime int32 `protobuf:"varint,2,opt,name=protected_footrpint_start_time,json=protectedFootrpintStartTime,proto3" json:"protected_footrpint_start_time,omitempty" aper:"valueExt,valueLB:1,valueUB:20,"`
	// @inject_tag: aper:"optional,sizeLB:1,"
	IEExtensions []*ProtectedEUTrafootprintTimePatternExtIes `protobuf:"bytes,3,rep,name=i_e_extensions,json=iE-Extensions,proto3" json:"i_e_extensions,omitempty" aper:"optional,sizeLB:1,"`
}

func (x *ProtectedEUTrafootprintTimePattern) Reset() {
	*x = ProtectedEUTrafootprintTimePattern{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[628]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProtectedEUTrafootprintTimePattern) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtectedEUTrafootprintTimePattern) ProtoMessage() {}

func (x *ProtectedEUTrafootprintTimePattern) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[628]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtectedEUTrafootprintTimePattern.ProtoReflect.Descriptor instead.
func (*ProtectedEUTrafootprintTimePattern) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{628}
}

func (x *ProtectedEUTrafootprintTimePattern) GetProtectedFootprintTimeperiodicity() int32 {
	if x != nil {
		return x.ProtectedFootprintTimeperiodicity
	}
	return 0
}

func (x *ProtectedEUTrafootprintTimePattern) GetProtectedFootrpintStartTime() int32 {
	if x != nil {
		return x.ProtectedFootrpintStartTime
	}
	return 0
}

func (x *ProtectedEUTrafootprintTimePattern) GetIEExtensions() []*ProtectedEUTrafootprintTimePatternExtIes {
	if x != nil {
		return x.IEExtensions
	}
	return nil
}

// value set from xnap_v1.asn1:6946
// {QoSCharacteristics-ExtIEs}
type QoScharacteristicsExtIes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *emptypb.Empty `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *QoScharacteristicsExtIes) Reset() {
	*x = QoScharacteristicsExtIes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[629]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QoScharacteristicsExtIes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QoScharacteristicsExtIes) ProtoMessage() {}

func (x *QoScharacteristicsExtIes) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[629]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QoScharacteristicsExtIes.ProtoReflect.Descriptor instead.
func (*QoScharacteristicsExtIes) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{629}
}

func (x *QoScharacteristicsExtIes) GetValue() *emptypb.Empty {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:6941
// {QoSCharacteristics}
type QoScharacteristics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// choice from xnap_v1.asn1:6941
	//
	// Types that are assignable to QoScharacteristics:
	//	*QoScharacteristics_NonDynamic
	//	*QoScharacteristics_Dynamic
	//	*QoScharacteristics_ChoiceExtension
	QoScharacteristics isQoScharacteristics_QoScharacteristics `protobuf_oneof:"qo_scharacteristics"`
}

func (x *QoScharacteristics) Reset() {
	*x = QoScharacteristics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[630]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QoScharacteristics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QoScharacteristics) ProtoMessage() {}

func (x *QoScharacteristics) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[630]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QoScharacteristics.ProtoReflect.Descriptor instead.
func (*QoScharacteristics) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{630}
}

func (m *QoScharacteristics) GetQoScharacteristics() isQoScharacteristics_QoScharacteristics {
	if m != nil {
		return m.QoScharacteristics
	}
	return nil
}

func (x *QoScharacteristics) GetNonDynamic() *NonDynamic5Qidescriptor {
	if x, ok := x.GetQoScharacteristics().(*QoScharacteristics_NonDynamic); ok {
		return x.NonDynamic
	}
	return nil
}

func (x *QoScharacteristics) GetDynamic() *Dynamic5Qidescriptor {
	if x, ok := x.GetQoScharacteristics().(*QoScharacteristics_Dynamic); ok {
		return x.Dynamic
	}
	return nil
}

func (x *QoScharacteristics) GetChoiceExtension() *QoScharacteristicsExtIes {
	if x, ok := x.GetQoScharacteristics().(*QoScharacteristics_ChoiceExtension); ok {
		return x.ChoiceExtension
	}
	return nil
}

type isQoScharacteristics_QoScharacteristics interface {
	isQoScharacteristics_QoScharacteristics()
}

type QoScharacteristics_NonDynamic struct {
	// @inject_tag: aper:"choiceIdx:1,valueExt,"
	NonDynamic *NonDynamic5Qidescriptor `protobuf:"bytes,1,opt,name=non_dynamic,json=non-dynamic,proto3,oneof" aper:"choiceIdx:1,valueExt,"`
}

type QoScharacteristics_Dynamic struct {
	// @inject_tag: aper:"choiceIdx:2,valueExt,"
	Dynamic *Dynamic5Qidescriptor `protobuf:"bytes,2,opt,name=dynamic,proto3,oneof" aper:"choiceIdx:2,valueExt,"`
}

type QoScharacteristics_ChoiceExtension struct {
	// @inject_tag: aper:"choiceIdx:3,"
	ChoiceExtension *QoScharacteristicsExtIes `protobuf:"bytes,3,opt,name=choice_extension,json=choice-extension,proto3,oneof" aper:"choiceIdx:3,"`
}

func (*QoScharacteristics_NonDynamic) isQoScharacteristics_QoScharacteristics() {}

func (*QoScharacteristics_Dynamic) isQoScharacteristics_QoScharacteristics() {}

func (*QoScharacteristics_ChoiceExtension) isQoScharacteristics_QoScharacteristics() {}

// range of Integer from xnap_v1.asn1:6951
// {QoSFlowIdentifier}
type QoSflowIdentifier struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"valueExt,valueLB:0,valueUB:63,"
	Value int32 `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty" aper:"valueExt,valueLB:0,valueUB:63,"`
}

func (x *QoSflowIdentifier) Reset() {
	*x = QoSflowIdentifier{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[631]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QoSflowIdentifier) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QoSflowIdentifier) ProtoMessage() {}

func (x *QoSflowIdentifier) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[631]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QoSflowIdentifier.ProtoReflect.Descriptor instead.
func (*QoSflowIdentifier) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{631}
}

func (x *QoSflowIdentifier) GetValue() int32 {
	if x != nil {
		return x.Value
	}
	return 0
}

// value set from xnap_v1.asn1:6964
// {QoSFlowLevelQoSParameters-ExtIEs&Extension}
type QoSflowLevelQoSparametersExtIesExtension struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// value set translated as choice from xnap_v1.asn1:6964
	//
	// Types that are assignable to QoSflowLevelQoSparametersExtIes:
	//	*QoSflowLevelQoSparametersExtIesExtension_IdQoSmonitoringRequest
	//	*QoSflowLevelQoSparametersExtIesExtension_IdQosMonitoringReportingFrequency
	//	*QoSflowLevelQoSparametersExtIesExtension_IdQoSmonitoringDisabled
	QoSflowLevelQoSparametersExtIes isQoSflowLevelQoSparametersExtIesExtension_QoSflowLevelQoSparametersExtIes `protobuf_oneof:"qo_sflow_level_qo_sparameters_ext_ies"`
}

func (x *QoSflowLevelQoSparametersExtIesExtension) Reset() {
	*x = QoSflowLevelQoSparametersExtIesExtension{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[632]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QoSflowLevelQoSparametersExtIesExtension) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QoSflowLevelQoSparametersExtIesExtension) ProtoMessage() {}

func (x *QoSflowLevelQoSparametersExtIesExtension) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[632]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QoSflowLevelQoSparametersExtIesExtension.ProtoReflect.Descriptor instead.
func (*QoSflowLevelQoSparametersExtIesExtension) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{632}
}

func (m *QoSflowLevelQoSparametersExtIesExtension) GetQoSflowLevelQoSparametersExtIes() isQoSflowLevelQoSparametersExtIesExtension_QoSflowLevelQoSparametersExtIes {
	if m != nil {
		return m.QoSflowLevelQoSparametersExtIes
	}
	return nil
}

func (x *QoSflowLevelQoSparametersExtIesExtension) GetIdQoSmonitoringRequest() QosMonitoringRequest {
	if x, ok := x.GetQoSflowLevelQoSparametersExtIes().(*QoSflowLevelQoSparametersExtIesExtension_IdQoSmonitoringRequest); ok {
		return x.IdQoSmonitoringRequest
	}
	return QosMonitoringRequest_QOS_MONITORING_REQUEST_UL
}

func (x *QoSflowLevelQoSparametersExtIesExtension) GetIdQosMonitoringReportingFrequency() *QosMonitoringReportingFrequency {
	if x, ok := x.GetQoSflowLevelQoSparametersExtIes().(*QoSflowLevelQoSparametersExtIesExtension_IdQosMonitoringReportingFrequency); ok {
		return x.IdQosMonitoringReportingFrequency
	}
	return nil
}

func (x *QoSflowLevelQoSparametersExtIesExtension) GetIdQoSmonitoringDisabled() QoSmonitoringDisabled {
	if x, ok := x.GetQoSflowLevelQoSparametersExtIes().(*QoSflowLevelQoSparametersExtIesExtension_IdQoSmonitoringDisabled); ok {
		return x.IdQoSmonitoringDisabled
	}
	return QoSmonitoringDisabled_QO_SMONITORING_DISABLED_TRUE
}

type isQoSflowLevelQoSparametersExtIesExtension_QoSflowLevelQoSparametersExtIes interface {
	isQoSflowLevelQoSparametersExtIesExtension_QoSflowLevelQoSparametersExtIes()
}

type QoSflowLevelQoSparametersExtIesExtension_IdQoSmonitoringRequest struct {
	// @inject_tag: aper:"choiceIdx:1,valueLB:0,valueUB:2,"
	IdQoSmonitoringRequest QosMonitoringRequest `protobuf:"varint,1,opt,name=id_qo_smonitoring_request,json=id-QoSMonitoringRequest,proto3,enum=xnap.v1.QosMonitoringRequest,oneof" aper:"choiceIdx:1,valueLB:0,valueUB:2,"`
}

type QoSflowLevelQoSparametersExtIesExtension_IdQosMonitoringReportingFrequency struct {
	// @inject_tag: aper:"choiceIdx:2,"
	IdQosMonitoringReportingFrequency *QosMonitoringReportingFrequency `protobuf:"bytes,2,opt,name=id_qos_monitoring_reporting_frequency,json=id-QosMonitoringReportingFrequency,proto3,oneof" aper:"choiceIdx:2,"`
}

type QoSflowLevelQoSparametersExtIesExtension_IdQoSmonitoringDisabled struct {
	// @inject_tag: aper:"choiceIdx:3,valueExt,valueLB:0,valueUB:0,"
	IdQoSmonitoringDisabled QoSmonitoringDisabled `protobuf:"varint,3,opt,name=id_qo_smonitoring_disabled,json=id-QoSMonitoringDisabled,proto3,enum=xnap.v1.QoSmonitoringDisabled,oneof" aper:"choiceIdx:3,valueExt,valueLB:0,valueUB:0,"`
}

func (*QoSflowLevelQoSparametersExtIesExtension_IdQoSmonitoringRequest) isQoSflowLevelQoSparametersExtIesExtension_QoSflowLevelQoSparametersExtIes() {
}

func (*QoSflowLevelQoSparametersExtIesExtension_IdQosMonitoringReportingFrequency) isQoSflowLevelQoSparametersExtIesExtension_QoSflowLevelQoSparametersExtIes() {
}

func (*QoSflowLevelQoSparametersExtIesExtension_IdQoSmonitoringDisabled) isQoSflowLevelQoSparametersExtIesExtension_QoSflowLevelQoSparametersExtIes() {
}

// concrete instance(s) of class XNAP-PROTOCOL-EXTENSION from xnap_v1.asn1:6964
// @inject_tag: aper:"valueExt"
// {QoSFlowLevelQoSParameters-ExtIEs}
type QoSflowLevelQoSparametersExtIes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"unique,"
	Id *xnap_commondatatypes.ProtocolIeID `protobuf:"bytes,1,opt,name=id,json=&id,proto3" json:"id,omitempty" aper:"unique,"`
	// @inject_tag: aper:"valueLB:0,valueUB:2,"
	Criticality xnap_commondatatypes.Criticality `protobuf:"varint,2,opt,name=criticality,json=&criticality,proto3,enum=xnap.v1.Criticality" json:"criticality,omitempty" aper:"valueLB:0,valueUB:2,"`
	// @inject_tag: aper:"canonicalOrder,"
	Extension *QoSflowLevelQoSparametersExtIesExtension `protobuf:"bytes,3,opt,name=extension,json=&Extension,proto3" json:"extension,omitempty" aper:"canonicalOrder,"`
}

func (x *QoSflowLevelQoSparametersExtIes) Reset() {
	*x = QoSflowLevelQoSparametersExtIes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[633]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QoSflowLevelQoSparametersExtIes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QoSflowLevelQoSparametersExtIes) ProtoMessage() {}

func (x *QoSflowLevelQoSparametersExtIes) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[633]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QoSflowLevelQoSparametersExtIes.ProtoReflect.Descriptor instead.
func (*QoSflowLevelQoSparametersExtIes) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{633}
}

func (x *QoSflowLevelQoSparametersExtIes) GetId() *xnap_commondatatypes.ProtocolIeID {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *QoSflowLevelQoSparametersExtIes) GetCriticality() xnap_commondatatypes.Criticality {
	if x != nil {
		return x.Criticality
	}
	return xnap_commondatatypes.Criticality(0)
}

func (x *QoSflowLevelQoSparametersExtIes) GetExtension() *QoSflowLevelQoSparametersExtIesExtension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// sequence from xnap_v1.asn1:6955
// @inject_tag: aper:"valueExt"
// {QoSFlowLevelQoSParameters}
type QoSflowLevelQoSparameters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	QosCharacteristics *QoScharacteristics `protobuf:"bytes,1,opt,name=qos_characteristics,json=qos-characteristics,proto3" json:"qos_characteristics,omitempty"`
	// @inject_tag: aper:"valueExt,"
	AllocationAndRetentionPrio *AllocationandRetentionPriority `protobuf:"bytes,2,opt,name=allocation_and_retention_prio,json=allocationAndRetentionPrio,proto3" json:"allocation_and_retention_prio,omitempty" aper:"valueExt,"`
	// @inject_tag: aper:"optional,valueExt,"
	GBrqoSflowInfo *GbrqoSflowInfo `protobuf:"bytes,3,opt,name=g_brqo_sflow_info,json=gBRQoSFlowInfo,proto3,oneof" json:"g_brqo_sflow_info,omitempty" aper:"optional,valueExt,"`
	// @inject_tag: aper:"optional,valueExt,valueLB:0,valueUB:0,"
	RelectiveQoS *ReflectiveQoSattribute `protobuf:"varint,4,opt,name=relective_qo_s,json=relectiveQoS,proto3,enum=xnap.v1.ReflectiveQoSattribute,oneof" json:"relective_qo_s,omitempty" aper:"optional,valueExt,valueLB:0,valueUB:0,"`
	// @inject_tag: aper:"optional,valueExt,valueLB:0,valueUB:0,"
	AdditionalQoSflowInfo *AdditionalQoSflowInfoQoSflowLevelQoSparameters `protobuf:"varint,5,opt,name=additional_qo_sflow_info,json=additionalQoSflowInfo,proto3,enum=xnap.v1.AdditionalQoSflowInfoQoSflowLevelQoSparameters,oneof" json:"additional_qo_sflow_info,omitempty" aper:"optional,valueExt,valueLB:0,valueUB:0,"`
	// @inject_tag: aper:"optional,sizeLB:1,"
	IEExtensions []*QoSflowLevelQoSparametersExtIes `protobuf:"bytes,6,rep,name=i_e_extensions,json=iE-Extensions,proto3" json:"i_e_extensions,omitempty" aper:"optional,sizeLB:1,"`
}

func (x *QoSflowLevelQoSparameters) Reset() {
	*x = QoSflowLevelQoSparameters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[634]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QoSflowLevelQoSparameters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QoSflowLevelQoSparameters) ProtoMessage() {}

func (x *QoSflowLevelQoSparameters) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[634]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QoSflowLevelQoSparameters.ProtoReflect.Descriptor instead.
func (*QoSflowLevelQoSparameters) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{634}
}

func (x *QoSflowLevelQoSparameters) GetQosCharacteristics() *QoScharacteristics {
	if x != nil {
		return x.QosCharacteristics
	}
	return nil
}

func (x *QoSflowLevelQoSparameters) GetAllocationAndRetentionPrio() *AllocationandRetentionPriority {
	if x != nil {
		return x.AllocationAndRetentionPrio
	}
	return nil
}

func (x *QoSflowLevelQoSparameters) GetGBrqoSflowInfo() *GbrqoSflowInfo {
	if x != nil {
		return x.GBrqoSflowInfo
	}
	return nil
}

func (x *QoSflowLevelQoSparameters) GetRelectiveQoS() ReflectiveQoSattribute {
	if x != nil && x.RelectiveQoS != nil {
		return *x.RelectiveQoS
	}
	return ReflectiveQoSattribute_REFLECTIVE_QO_SATTRIBUTE_SUBJECT_TO_REFLECTIVE_QO_S
}

func (x *QoSflowLevelQoSparameters) GetAdditionalQoSflowInfo() AdditionalQoSflowInfoQoSflowLevelQoSparameters {
	if x != nil && x.AdditionalQoSflowInfo != nil {
		return *x.AdditionalQoSflowInfo
	}
	return AdditionalQoSflowInfoQoSflowLevelQoSparameters_ADDITIONAL_QO_SFLOW_INFO_QO_SFLOW_LEVEL_QO_SPARAMETERS_MORE_LIKELY
}

func (x *QoSflowLevelQoSparameters) GetIEExtensions() []*QoSflowLevelQoSparametersExtIes {
	if x != nil {
		return x.IEExtensions
	}
	return nil
}

// sequence from xnap_v1.asn1:6981
// {QoSFlowNotificationControlIndicationInfo}
type QoSflowNotificationControlIndicationInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"valueExt,sizeLB:1,sizeUB:64,"
	Value []*QoSflowNotifyItem `protobuf:"bytes,1,rep,name=value,proto3" json:"value,omitempty" aper:"valueExt,sizeLB:1,sizeUB:64,"`
}

func (x *QoSflowNotificationControlIndicationInfo) Reset() {
	*x = QoSflowNotificationControlIndicationInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[635]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QoSflowNotificationControlIndicationInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QoSflowNotificationControlIndicationInfo) ProtoMessage() {}

func (x *QoSflowNotificationControlIndicationInfo) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[635]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QoSflowNotificationControlIndicationInfo.ProtoReflect.Descriptor instead.
func (*QoSflowNotificationControlIndicationInfo) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{635}
}

func (x *QoSflowNotificationControlIndicationInfo) GetValue() []*QoSflowNotifyItem {
	if x != nil {
		return x.Value
	}
	return nil
}

// value set from xnap_v1.asn1:6988
// {QoSFlowNotificationControlIndicationInfo-ExtIEs}
type QoSflowNotificationControlIndicationInfoExtIes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *emptypb.Empty `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *QoSflowNotificationControlIndicationInfoExtIes) Reset() {
	*x = QoSflowNotificationControlIndicationInfoExtIes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[636]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QoSflowNotificationControlIndicationInfoExtIes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QoSflowNotificationControlIndicationInfoExtIes) ProtoMessage() {}

func (x *QoSflowNotificationControlIndicationInfoExtIes) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[636]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QoSflowNotificationControlIndicationInfoExtIes.ProtoReflect.Descriptor instead.
func (*QoSflowNotificationControlIndicationInfoExtIes) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{636}
}

func (x *QoSflowNotificationControlIndicationInfoExtIes) GetValue() *emptypb.Empty {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:6982
// @inject_tag: aper:"valueExt"
// {QoSFlowNotify-Item}
type QoSflowNotifyItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	QosFlowIdentifier *QoSflowIdentifier `protobuf:"bytes,1,opt,name=qos_flow_identifier,json=qosFlowIdentifier,proto3" json:"qos_flow_identifier,omitempty"`
	// @inject_tag: aper:"valueExt,valueLB:0,valueUB:1,"
	NotificationInformation NotificationInformationQoSflowNotifyItem `protobuf:"varint,2,opt,name=notification_information,json=notificationInformation,proto3,enum=xnap.v1.NotificationInformationQoSflowNotifyItem" json:"notification_information,omitempty" aper:"valueExt,valueLB:0,valueUB:1,"`
	// @inject_tag: aper:"optional,sizeLB:1,"
	IEExtensions []*QoSflowNotificationControlIndicationInfoExtIes `protobuf:"bytes,3,rep,name=i_e_extensions,json=iE-Extensions,proto3" json:"i_e_extensions,omitempty" aper:"optional,sizeLB:1,"`
}

func (x *QoSflowNotifyItem) Reset() {
	*x = QoSflowNotifyItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[637]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QoSflowNotifyItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QoSflowNotifyItem) ProtoMessage() {}

func (x *QoSflowNotifyItem) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[637]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QoSflowNotifyItem.ProtoReflect.Descriptor instead.
func (*QoSflowNotifyItem) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{637}
}

func (x *QoSflowNotifyItem) GetQosFlowIdentifier() *QoSflowIdentifier {
	if x != nil {
		return x.QosFlowIdentifier
	}
	return nil
}

func (x *QoSflowNotifyItem) GetNotificationInformation() NotificationInformationQoSflowNotifyItem {
	if x != nil {
		return x.NotificationInformation
	}
	return NotificationInformationQoSflowNotifyItem_NOTIFICATION_INFORMATION_QO_SFLOW_NOTIFY_ITEM_FULFILLED
}

func (x *QoSflowNotifyItem) GetIEExtensions() []*QoSflowNotificationControlIndicationInfoExtIes {
	if x != nil {
		return x.IEExtensions
	}
	return nil
}

// sequence from xnap_v1.asn1:6996
// {QoSFlows-List}
type QoSflowsList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"valueExt,sizeLB:1,sizeUB:64,"
	Value []*QoSflowItem `protobuf:"bytes,1,rep,name=value,proto3" json:"value,omitempty" aper:"valueExt,sizeLB:1,sizeUB:64,"`
}

func (x *QoSflowsList) Reset() {
	*x = QoSflowsList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[638]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QoSflowsList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QoSflowsList) ProtoMessage() {}

func (x *QoSflowsList) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[638]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QoSflowsList.ProtoReflect.Descriptor instead.
func (*QoSflowsList) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{638}
}

func (x *QoSflowsList) GetValue() []*QoSflowItem {
	if x != nil {
		return x.Value
	}
	return nil
}

// value set from xnap_v1.asn1:7003
// {QoSFlow-Item-ExtIEs}
type QoSflowItemExtIes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *emptypb.Empty `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *QoSflowItemExtIes) Reset() {
	*x = QoSflowItemExtIes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[639]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QoSflowItemExtIes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QoSflowItemExtIes) ProtoMessage() {}

func (x *QoSflowItemExtIes) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[639]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QoSflowItemExtIes.ProtoReflect.Descriptor instead.
func (*QoSflowItemExtIes) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{639}
}

func (x *QoSflowItemExtIes) GetValue() *emptypb.Empty {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:6997
// @inject_tag: aper:"valueExt"
// {QoSFlow-Item}
type QoSflowItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Qfi *QoSflowIdentifier `protobuf:"bytes,1,opt,name=qfi,proto3" json:"qfi,omitempty"`
	// @inject_tag: aper:"optional,valueExt,valueLB:0,valueUB:1,"
	QosFlowMappingIndication *QoSflowMappingIndication `protobuf:"varint,2,opt,name=qos_flow_mapping_indication,json=qosFlowMappingIndication,proto3,enum=xnap.v1.QoSflowMappingIndication,oneof" json:"qos_flow_mapping_indication,omitempty" aper:"optional,valueExt,valueLB:0,valueUB:1,"`
	// @inject_tag: aper:"optional,sizeLB:1,"
	IEExtension []*QoSflowItemExtIes `protobuf:"bytes,3,rep,name=i_e_extension,json=iE-Extension,proto3" json:"i_e_extension,omitempty" aper:"optional,sizeLB:1,"`
}

func (x *QoSflowItem) Reset() {
	*x = QoSflowItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[640]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QoSflowItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QoSflowItem) ProtoMessage() {}

func (x *QoSflowItem) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[640]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QoSflowItem.ProtoReflect.Descriptor instead.
func (*QoSflowItem) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{640}
}

func (x *QoSflowItem) GetQfi() *QoSflowIdentifier {
	if x != nil {
		return x.Qfi
	}
	return nil
}

func (x *QoSflowItem) GetQosFlowMappingIndication() QoSflowMappingIndication {
	if x != nil && x.QosFlowMappingIndication != nil {
		return *x.QosFlowMappingIndication
	}
	return QoSflowMappingIndication_QO_SFLOW_MAPPING_INDICATION_UL
}

func (x *QoSflowItem) GetIEExtension() []*QoSflowItemExtIes {
	if x != nil {
		return x.IEExtension
	}
	return nil
}

// sequence from xnap_v1.asn1:7010
// {QoSFlows-List-withCause}
type QoSflowsListwithCause struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"valueExt,sizeLB:1,sizeUB:64,"
	Value []*QoSflowwithCauseItem `protobuf:"bytes,1,rep,name=value,proto3" json:"value,omitempty" aper:"valueExt,sizeLB:1,sizeUB:64,"`
}

func (x *QoSflowsListwithCause) Reset() {
	*x = QoSflowsListwithCause{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[641]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QoSflowsListwithCause) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QoSflowsListwithCause) ProtoMessage() {}

func (x *QoSflowsListwithCause) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[641]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QoSflowsListwithCause.ProtoReflect.Descriptor instead.
func (*QoSflowsListwithCause) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{641}
}

func (x *QoSflowsListwithCause) GetValue() []*QoSflowwithCauseItem {
	if x != nil {
		return x.Value
	}
	return nil
}

// value set from xnap_v1.asn1:7017
// {QoSFlowwithCause-Item-ExtIEs}
type QoSflowwithCauseItemExtIes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *emptypb.Empty `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *QoSflowwithCauseItemExtIes) Reset() {
	*x = QoSflowwithCauseItemExtIes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[642]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QoSflowwithCauseItemExtIes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QoSflowwithCauseItemExtIes) ProtoMessage() {}

func (x *QoSflowwithCauseItemExtIes) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[642]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QoSflowwithCauseItemExtIes.ProtoReflect.Descriptor instead.
func (*QoSflowwithCauseItemExtIes) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{642}
}

func (x *QoSflowwithCauseItemExtIes) GetValue() *emptypb.Empty {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:7011
// @inject_tag: aper:"valueExt"
// {QoSFlowwithCause-Item}
type QoSflowwithCauseItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Qfi *QoSflowIdentifier `protobuf:"bytes,1,opt,name=qfi,proto3" json:"qfi,omitempty"`
	// @inject_tag: aper:"optional,"
	Cause *Cause `protobuf:"bytes,2,opt,name=cause,proto3,oneof" json:"cause,omitempty" aper:"optional,"`
	// @inject_tag: aper:"optional,sizeLB:1,"
	IEExtension []*QoSflowwithCauseItemExtIes `protobuf:"bytes,3,rep,name=i_e_extension,json=iE-Extension,proto3" json:"i_e_extension,omitempty" aper:"optional,sizeLB:1,"`
}

func (x *QoSflowwithCauseItem) Reset() {
	*x = QoSflowwithCauseItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[643]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QoSflowwithCauseItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QoSflowwithCauseItem) ProtoMessage() {}

func (x *QoSflowwithCauseItem) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[643]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QoSflowwithCauseItem.ProtoReflect.Descriptor instead.
func (*QoSflowwithCauseItem) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{643}
}

func (x *QoSflowwithCauseItem) GetQfi() *QoSflowIdentifier {
	if x != nil {
		return x.Qfi
	}
	return nil
}

func (x *QoSflowwithCauseItem) GetCause() *Cause {
	if x != nil {
		return x.Cause
	}
	return nil
}

func (x *QoSflowwithCauseItem) GetIEExtension() []*QoSflowwithCauseItemExtIes {
	if x != nil {
		return x.IEExtension
	}
	return nil
}

// value set from xnap_v1.asn1:7028
// {QoS-Mapping-Information-ExtIEs}
type QoSMappingInformationExtIes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *emptypb.Empty `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *QoSMappingInformationExtIes) Reset() {
	*x = QoSMappingInformationExtIes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[644]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QoSMappingInformationExtIes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QoSMappingInformationExtIes) ProtoMessage() {}

func (x *QoSMappingInformationExtIes) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[644]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QoSMappingInformationExtIes.ProtoReflect.Descriptor instead.
func (*QoSMappingInformationExtIes) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{644}
}

func (x *QoSMappingInformationExtIes) GetValue() *emptypb.Empty {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:7022
// @inject_tag: aper:"valueExt"
// {QoS-Mapping-Information}
type QoSMappingInformation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"optional,sizeLB:6,sizeUB:6,"
	Dscp *asn1.BitString `protobuf:"bytes,1,opt,name=dscp,proto3,oneof" json:"dscp,omitempty" aper:"optional,sizeLB:6,sizeUB:6,"`
	// @inject_tag: aper:"optional,sizeLB:20,sizeUB:20,"
	FlowLabel *asn1.BitString `protobuf:"bytes,2,opt,name=flow_label,json=flow-label,proto3,oneof" json:"flow_label,omitempty" aper:"optional,sizeLB:20,sizeUB:20,"`
	// @inject_tag: aper:"optional,sizeLB:1,"
	IEExtensions []*QoSMappingInformationExtIes `protobuf:"bytes,3,rep,name=i_e_extensions,json=iE-Extensions,proto3" json:"i_e_extensions,omitempty" aper:"optional,sizeLB:1,"`
}

func (x *QoSMappingInformation) Reset() {
	*x = QoSMappingInformation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[645]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QoSMappingInformation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QoSMappingInformation) ProtoMessage() {}

func (x *QoSMappingInformation) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[645]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QoSMappingInformation.ProtoReflect.Descriptor instead.
func (*QoSMappingInformation) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{645}
}

func (x *QoSMappingInformation) GetDscp() *asn1.BitString {
	if x != nil {
		return x.Dscp
	}
	return nil
}

func (x *QoSMappingInformation) GetFlowLabel() *asn1.BitString {
	if x != nil {
		return x.FlowLabel
	}
	return nil
}

func (x *QoSMappingInformation) GetIEExtensions() []*QoSMappingInformationExtIes {
	if x != nil {
		return x.IEExtensions
	}
	return nil
}

// range of Integer from xnap_v1.asn1:7032
// {QoSParaSetIndex}
type QoSparaSetIndex struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"valueExt,valueLB:1,valueUB:8,"
	Value int32 `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty" aper:"valueExt,valueLB:1,valueUB:8,"`
}

func (x *QoSparaSetIndex) Reset() {
	*x = QoSparaSetIndex{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[646]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QoSparaSetIndex) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QoSparaSetIndex) ProtoMessage() {}

func (x *QoSparaSetIndex) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[646]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QoSparaSetIndex.ProtoReflect.Descriptor instead.
func (*QoSparaSetIndex) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{646}
}

func (x *QoSparaSetIndex) GetValue() int32 {
	if x != nil {
		return x.Value
	}
	return 0
}

// range of Integer from xnap_v1.asn1:7033
// {QoSParaSetNotifyIndex}
type QoSparaSetNotifyIndex struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"valueExt,valueLB:0,valueUB:8,"
	Value int32 `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty" aper:"valueExt,valueLB:0,valueUB:8,"`
}

func (x *QoSparaSetNotifyIndex) Reset() {
	*x = QoSparaSetNotifyIndex{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[647]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QoSparaSetNotifyIndex) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QoSparaSetNotifyIndex) ProtoMessage() {}

func (x *QoSparaSetNotifyIndex) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[647]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QoSparaSetNotifyIndex.ProtoReflect.Descriptor instead.
func (*QoSparaSetNotifyIndex) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{647}
}

func (x *QoSparaSetNotifyIndex) GetValue() int32 {
	if x != nil {
		return x.Value
	}
	return 0
}

// sequence from xnap_v1.asn1:7038
// {QoSFlowsAdmitted-List}
type QoSflowsAdmittedList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"valueExt,sizeLB:1,sizeUB:64,"
	Value []*QoSflowsAdmittedItem `protobuf:"bytes,1,rep,name=value,proto3" json:"value,omitempty" aper:"valueExt,sizeLB:1,sizeUB:64,"`
}

func (x *QoSflowsAdmittedList) Reset() {
	*x = QoSflowsAdmittedList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[648]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QoSflowsAdmittedList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QoSflowsAdmittedList) ProtoMessage() {}

func (x *QoSflowsAdmittedList) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[648]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QoSflowsAdmittedList.ProtoReflect.Descriptor instead.
func (*QoSflowsAdmittedList) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{648}
}

func (x *QoSflowsAdmittedList) GetValue() []*QoSflowsAdmittedItem {
	if x != nil {
		return x.Value
	}
	return nil
}

// value set from xnap_v1.asn1:7044
// {QoSFlowsAdmitted-Item-ExtIEs}
type QoSflowsAdmittedItemExtIes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *emptypb.Empty `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *QoSflowsAdmittedItemExtIes) Reset() {
	*x = QoSflowsAdmittedItemExtIes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[649]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QoSflowsAdmittedItemExtIes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QoSflowsAdmittedItemExtIes) ProtoMessage() {}

func (x *QoSflowsAdmittedItemExtIes) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[649]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QoSflowsAdmittedItemExtIes.ProtoReflect.Descriptor instead.
func (*QoSflowsAdmittedItemExtIes) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{649}
}

func (x *QoSflowsAdmittedItemExtIes) GetValue() *emptypb.Empty {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:7039
// @inject_tag: aper:"valueExt"
// {QoSFlowsAdmitted-Item}
type QoSflowsAdmittedItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Qfi *QoSflowIdentifier `protobuf:"bytes,1,opt,name=qfi,proto3" json:"qfi,omitempty"`
	// @inject_tag: aper:"optional,sizeLB:1,"
	IEExtension []*QoSflowsAdmittedItemExtIes `protobuf:"bytes,2,rep,name=i_e_extension,json=iE-Extension,proto3" json:"i_e_extension,omitempty" aper:"optional,sizeLB:1,"`
}

func (x *QoSflowsAdmittedItem) Reset() {
	*x = QoSflowsAdmittedItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[650]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QoSflowsAdmittedItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QoSflowsAdmittedItem) ProtoMessage() {}

func (x *QoSflowsAdmittedItem) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[650]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QoSflowsAdmittedItem.ProtoReflect.Descriptor instead.
func (*QoSflowsAdmittedItem) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{650}
}

func (x *QoSflowsAdmittedItem) GetQfi() *QoSflowIdentifier {
	if x != nil {
		return x.Qfi
	}
	return nil
}

func (x *QoSflowsAdmittedItem) GetIEExtension() []*QoSflowsAdmittedItemExtIes {
	if x != nil {
		return x.IEExtension
	}
	return nil
}

// sequence from xnap_v1.asn1:7052
// {QoSFlowsToBeSetup-List}
type QoSflowsToBeSetupList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"valueExt,sizeLB:1,sizeUB:64,"
	Value []*QoSflowsToBeSetupItem `protobuf:"bytes,1,rep,name=value,proto3" json:"value,omitempty" aper:"valueExt,sizeLB:1,sizeUB:64,"`
}

func (x *QoSflowsToBeSetupList) Reset() {
	*x = QoSflowsToBeSetupList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[651]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QoSflowsToBeSetupList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QoSflowsToBeSetupList) ProtoMessage() {}

func (x *QoSflowsToBeSetupList) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[651]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QoSflowsToBeSetupList.ProtoReflect.Descriptor instead.
func (*QoSflowsToBeSetupList) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{651}
}

func (x *QoSflowsToBeSetupList) GetValue() []*QoSflowsToBeSetupItem {
	if x != nil {
		return x.Value
	}
	return nil
}

// value set from xnap_v1.asn1:7060
// {QoSFlowsToBeSetup-Item-ExtIEs&Extension}
type QoSflowsToBeSetupItemExtIesExtension struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// value set translated as choice from xnap_v1.asn1:7060
	//
	// Types that are assignable to QoSflowsToBeSetupItemExtIes:
	//	*QoSflowsToBeSetupItemExtIesExtension_IdTsctrafficCharacteristics
	//	*QoSflowsToBeSetupItemExtIesExtension_IdRedundantQoSflowIndicator
	QoSflowsToBeSetupItemExtIes isQoSflowsToBeSetupItemExtIesExtension_QoSflowsToBeSetupItemExtIes `protobuf_oneof:"qo_sflows_to_be_setup_item_ext_ies"`
}

func (x *QoSflowsToBeSetupItemExtIesExtension) Reset() {
	*x = QoSflowsToBeSetupItemExtIesExtension{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[652]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QoSflowsToBeSetupItemExtIesExtension) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QoSflowsToBeSetupItemExtIesExtension) ProtoMessage() {}

func (x *QoSflowsToBeSetupItemExtIesExtension) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[652]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QoSflowsToBeSetupItemExtIesExtension.ProtoReflect.Descriptor instead.
func (*QoSflowsToBeSetupItemExtIesExtension) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{652}
}

func (m *QoSflowsToBeSetupItemExtIesExtension) GetQoSflowsToBeSetupItemExtIes() isQoSflowsToBeSetupItemExtIesExtension_QoSflowsToBeSetupItemExtIes {
	if m != nil {
		return m.QoSflowsToBeSetupItemExtIes
	}
	return nil
}

func (x *QoSflowsToBeSetupItemExtIesExtension) GetIdTsctrafficCharacteristics() *TsctrafficCharacteristics {
	if x, ok := x.GetQoSflowsToBeSetupItemExtIes().(*QoSflowsToBeSetupItemExtIesExtension_IdTsctrafficCharacteristics); ok {
		return x.IdTsctrafficCharacteristics
	}
	return nil
}

func (x *QoSflowsToBeSetupItemExtIesExtension) GetIdRedundantQoSflowIndicator() RedundantQoSflowIndicator {
	if x, ok := x.GetQoSflowsToBeSetupItemExtIes().(*QoSflowsToBeSetupItemExtIesExtension_IdRedundantQoSflowIndicator); ok {
		return x.IdRedundantQoSflowIndicator
	}
	return RedundantQoSflowIndicator_REDUNDANT_QO_SFLOW_INDICATOR_TRUE
}

type isQoSflowsToBeSetupItemExtIesExtension_QoSflowsToBeSetupItemExtIes interface {
	isQoSflowsToBeSetupItemExtIesExtension_QoSflowsToBeSetupItemExtIes()
}

type QoSflowsToBeSetupItemExtIesExtension_IdTsctrafficCharacteristics struct {
	// @inject_tag: aper:"choiceIdx:1,valueExt,"
	IdTsctrafficCharacteristics *TsctrafficCharacteristics `protobuf:"bytes,1,opt,name=id_tsctraffic_characteristics,json=id-TSCTrafficCharacteristics,proto3,oneof" aper:"choiceIdx:1,valueExt,"`
}

type QoSflowsToBeSetupItemExtIesExtension_IdRedundantQoSflowIndicator struct {
	// @inject_tag: aper:"choiceIdx:2,valueLB:0,valueUB:1,"
	IdRedundantQoSflowIndicator RedundantQoSflowIndicator `protobuf:"varint,2,opt,name=id_redundant_qo_sflow_indicator,json=id-RedundantQoSFlowIndicator,proto3,enum=xnap.v1.RedundantQoSflowIndicator,oneof" aper:"choiceIdx:2,valueLB:0,valueUB:1,"`
}

func (*QoSflowsToBeSetupItemExtIesExtension_IdTsctrafficCharacteristics) isQoSflowsToBeSetupItemExtIesExtension_QoSflowsToBeSetupItemExtIes() {
}

func (*QoSflowsToBeSetupItemExtIesExtension_IdRedundantQoSflowIndicator) isQoSflowsToBeSetupItemExtIesExtension_QoSflowsToBeSetupItemExtIes() {
}

// concrete instance(s) of class XNAP-PROTOCOL-EXTENSION from xnap_v1.asn1:7060
// @inject_tag: aper:"valueExt"
// {QoSFlowsToBeSetup-Item-ExtIEs}
type QoSflowsToBeSetupItemExtIes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"unique,"
	Id *xnap_commondatatypes.ProtocolIeID `protobuf:"bytes,1,opt,name=id,json=&id,proto3" json:"id,omitempty" aper:"unique,"`
	// @inject_tag: aper:"valueLB:0,valueUB:2,"
	Criticality xnap_commondatatypes.Criticality `protobuf:"varint,2,opt,name=criticality,json=&criticality,proto3,enum=xnap.v1.Criticality" json:"criticality,omitempty" aper:"valueLB:0,valueUB:2,"`
	// @inject_tag: aper:"canonicalOrder,"
	Extension *QoSflowsToBeSetupItemExtIesExtension `protobuf:"bytes,3,opt,name=extension,json=&Extension,proto3" json:"extension,omitempty" aper:"canonicalOrder,"`
}

func (x *QoSflowsToBeSetupItemExtIes) Reset() {
	*x = QoSflowsToBeSetupItemExtIes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[653]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QoSflowsToBeSetupItemExtIes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QoSflowsToBeSetupItemExtIes) ProtoMessage() {}

func (x *QoSflowsToBeSetupItemExtIes) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[653]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QoSflowsToBeSetupItemExtIes.ProtoReflect.Descriptor instead.
func (*QoSflowsToBeSetupItemExtIes) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{653}
}

func (x *QoSflowsToBeSetupItemExtIes) GetId() *xnap_commondatatypes.ProtocolIeID {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *QoSflowsToBeSetupItemExtIes) GetCriticality() xnap_commondatatypes.Criticality {
	if x != nil {
		return x.Criticality
	}
	return xnap_commondatatypes.Criticality(0)
}

func (x *QoSflowsToBeSetupItemExtIes) GetExtension() *QoSflowsToBeSetupItemExtIesExtension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// sequence from xnap_v1.asn1:7053
// @inject_tag: aper:"valueExt"
// {QoSFlowsToBeSetup-Item}
type QoSflowsToBeSetupItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Qfi *QoSflowIdentifier `protobuf:"bytes,1,opt,name=qfi,proto3" json:"qfi,omitempty"`
	// @inject_tag: aper:"valueExt,"
	QosFlowLevelQoSparameters *QoSflowLevelQoSparameters `protobuf:"bytes,2,opt,name=qos_flow_level_qo_sparameters,json=qosFlowLevelQoSParameters,proto3" json:"qos_flow_level_qo_sparameters,omitempty" aper:"valueExt,"`
	// @inject_tag: aper:"optional,"
	ERabId *ERAbID `protobuf:"bytes,3,opt,name=e_rab_id,json=e-RAB-ID,proto3,oneof" json:"e_rab_id,omitempty" aper:"optional,"`
	// @inject_tag: aper:"optional,sizeLB:1,"
	IEExtension []*QoSflowsToBeSetupItemExtIes `protobuf:"bytes,4,rep,name=i_e_extension,json=iE-Extension,proto3" json:"i_e_extension,omitempty" aper:"optional,sizeLB:1,"`
}

func (x *QoSflowsToBeSetupItem) Reset() {
	*x = QoSflowsToBeSetupItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[654]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QoSflowsToBeSetupItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QoSflowsToBeSetupItem) ProtoMessage() {}

func (x *QoSflowsToBeSetupItem) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[654]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QoSflowsToBeSetupItem.ProtoReflect.Descriptor instead.
func (*QoSflowsToBeSetupItem) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{654}
}

func (x *QoSflowsToBeSetupItem) GetQfi() *QoSflowIdentifier {
	if x != nil {
		return x.Qfi
	}
	return nil
}

func (x *QoSflowsToBeSetupItem) GetQosFlowLevelQoSparameters() *QoSflowLevelQoSparameters {
	if x != nil {
		return x.QosFlowLevelQoSparameters
	}
	return nil
}

func (x *QoSflowsToBeSetupItem) GetERabId() *ERAbID {
	if x != nil {
		return x.ERabId
	}
	return nil
}

func (x *QoSflowsToBeSetupItem) GetIEExtension() []*QoSflowsToBeSetupItemExtIes {
	if x != nil {
		return x.IEExtension
	}
	return nil
}

// sequence from xnap_v1.asn1:7068
// {QoSFlowsUsageReportList}
type QoSflowsUsageReportList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"valueExt,sizeLB:1,sizeUB:64,"
	Value []*QoSflowsUsageReportItem `protobuf:"bytes,1,rep,name=value,proto3" json:"value,omitempty" aper:"valueExt,sizeLB:1,sizeUB:64,"`
}

func (x *QoSflowsUsageReportList) Reset() {
	*x = QoSflowsUsageReportList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[655]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QoSflowsUsageReportList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QoSflowsUsageReportList) ProtoMessage() {}

func (x *QoSflowsUsageReportList) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[655]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QoSflowsUsageReportList.ProtoReflect.Descriptor instead.
func (*QoSflowsUsageReportList) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{655}
}

func (x *QoSflowsUsageReportList) GetValue() []*QoSflowsUsageReportItem {
	if x != nil {
		return x.Value
	}
	return nil
}

// value set from xnap_v1.asn1:7076
// {QoSFlowsUsageReport-Item-ExtIEs}
type QoSflowsUsageReportItemExtIes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *emptypb.Empty `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *QoSflowsUsageReportItemExtIes) Reset() {
	*x = QoSflowsUsageReportItemExtIes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[656]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QoSflowsUsageReportItemExtIes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QoSflowsUsageReportItemExtIes) ProtoMessage() {}

func (x *QoSflowsUsageReportItemExtIes) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[656]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QoSflowsUsageReportItemExtIes.ProtoReflect.Descriptor instead.
func (*QoSflowsUsageReportItemExtIes) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{656}
}

func (x *QoSflowsUsageReportItemExtIes) GetValue() *emptypb.Empty {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:7069
// @inject_tag: aper:"valueExt"
// {QoSFlowsUsageReport-Item}
type QoSflowsUsageReportItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	QosFlowIdentifier *QoSflowIdentifier `protobuf:"bytes,1,opt,name=qos_flow_identifier,json=qosFlowIdentifier,proto3" json:"qos_flow_identifier,omitempty"`
	// @inject_tag: aper:"valueExt,valueLB:0,valueUB:1,"
	RAttype                 RattypeQoSflowsUsageReportItem `protobuf:"varint,2,opt,name=r_attype,json=rATType,proto3,enum=xnap.v1.RattypeQoSflowsUsageReportItem" json:"r_attype,omitempty" aper:"valueExt,valueLB:0,valueUB:1,"`
	QoSflowsTimedReportList *VolumeTimedReportList         `protobuf:"bytes,3,opt,name=qo_sflows_timed_report_list,json=qoSFlowsTimedReportList,proto3" json:"qo_sflows_timed_report_list,omitempty"`
	// @inject_tag: aper:"optional,sizeLB:1,"
	IEExtensions []*QoSflowsUsageReportItemExtIes `protobuf:"bytes,4,rep,name=i_e_extensions,json=iE-Extensions,proto3" json:"i_e_extensions,omitempty" aper:"optional,sizeLB:1,"`
}

func (x *QoSflowsUsageReportItem) Reset() {
	*x = QoSflowsUsageReportItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[657]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QoSflowsUsageReportItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QoSflowsUsageReportItem) ProtoMessage() {}

func (x *QoSflowsUsageReportItem) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[657]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QoSflowsUsageReportItem.ProtoReflect.Descriptor instead.
func (*QoSflowsUsageReportItem) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{657}
}

func (x *QoSflowsUsageReportItem) GetQosFlowIdentifier() *QoSflowIdentifier {
	if x != nil {
		return x.QosFlowIdentifier
	}
	return nil
}

func (x *QoSflowsUsageReportItem) GetRAttype() RattypeQoSflowsUsageReportItem {
	if x != nil {
		return x.RAttype
	}
	return RattypeQoSflowsUsageReportItem_R_ATTYPE_QO_SFLOWS_USAGE_REPORT_ITEM_NR
}

func (x *QoSflowsUsageReportItem) GetQoSflowsTimedReportList() *VolumeTimedReportList {
	if x != nil {
		return x.QoSflowsTimedReportList
	}
	return nil
}

func (x *QoSflowsUsageReportItem) GetIEExtensions() []*QoSflowsUsageReportItemExtIes {
	if x != nil {
		return x.IEExtensions
	}
	return nil
}

// range of Integer from xnap_v1.asn1:7082
// {QosMonitoringReportingFrequency}
type QosMonitoringReportingFrequency struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"valueExt,valueLB:1,valueUB:1800,"
	Value int32 `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty" aper:"valueExt,valueLB:1,valueUB:1800,"`
}

func (x *QosMonitoringReportingFrequency) Reset() {
	*x = QosMonitoringReportingFrequency{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[658]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QosMonitoringReportingFrequency) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QosMonitoringReportingFrequency) ProtoMessage() {}

func (x *QosMonitoringReportingFrequency) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[658]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QosMonitoringReportingFrequency.ProtoReflect.Descriptor instead.
func (*QosMonitoringReportingFrequency) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{658}
}

func (x *QosMonitoringReportingFrequency) GetValue() int32 {
	if x != nil {
		return x.Value
	}
	return 0
}

// sequence from xnap_v1.asn1:7087
// {RACHReportInformation}
type RachreportInformation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"valueExt,sizeLB:1,sizeUB:64,"
	Value []*RachreportListItem `protobuf:"bytes,1,rep,name=value,proto3" json:"value,omitempty" aper:"valueExt,sizeLB:1,sizeUB:64,"`
}

func (x *RachreportInformation) Reset() {
	*x = RachreportInformation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[659]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RachreportInformation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RachreportInformation) ProtoMessage() {}

func (x *RachreportInformation) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[659]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RachreportInformation.ProtoReflect.Descriptor instead.
func (*RachreportInformation) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{659}
}

func (x *RachreportInformation) GetValue() []*RachreportListItem {
	if x != nil {
		return x.Value
	}
	return nil
}

// value set from xnap_v1.asn1:7093
// {RACHReportList-Item-ExtIEs}
type RachreportListItemExtIes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *emptypb.Empty `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *RachreportListItemExtIes) Reset() {
	*x = RachreportListItemExtIes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[660]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RachreportListItemExtIes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RachreportListItemExtIes) ProtoMessage() {}

func (x *RachreportListItemExtIes) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[660]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RachreportListItemExtIes.ProtoReflect.Descriptor instead.
func (*RachreportListItemExtIes) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{660}
}

func (x *RachreportListItemExtIes) GetValue() *emptypb.Empty {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:7088
// @inject_tag: aper:"valueExt"
// {RACHReportList-Item}
type RachreportListItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RAchreport *RachreportContainer `protobuf:"bytes,1,opt,name=r_achreport,json=rACHReport,proto3" json:"r_achreport,omitempty"`
	// @inject_tag: aper:"optional,sizeLB:1,"
	IEExtensions []*RachreportListItemExtIes `protobuf:"bytes,2,rep,name=i_e_extensions,json=iE-Extensions,proto3" json:"i_e_extensions,omitempty" aper:"optional,sizeLB:1,"`
}

func (x *RachreportListItem) Reset() {
	*x = RachreportListItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[661]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RachreportListItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RachreportListItem) ProtoMessage() {}

func (x *RachreportListItem) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[661]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RachreportListItem.ProtoReflect.Descriptor instead.
func (*RachreportListItem) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{661}
}

func (x *RachreportListItem) GetRAchreport() *RachreportContainer {
	if x != nil {
		return x.RAchreport
	}
	return nil
}

func (x *RachreportListItem) GetIEExtensions() []*RachreportListItemExtIes {
	if x != nil {
		return x.IEExtensions
	}
	return nil
}

// range of Integer from xnap_v1.asn1:7097
// {RACHReportContainer}
type RachreportContainer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value []byte `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *RachreportContainer) Reset() {
	*x = RachreportContainer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[662]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RachreportContainer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RachreportContainer) ProtoMessage() {}

func (x *RachreportContainer) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[662]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RachreportContainer.ProtoReflect.Descriptor instead.
func (*RachreportContainer) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{662}
}

func (x *RachreportContainer) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

// value set from xnap_v1.asn1:7107
// {RadioResourceStatus-ExtIEs}
type RadioResourceStatusExtIes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *emptypb.Empty `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *RadioResourceStatusExtIes) Reset() {
	*x = RadioResourceStatusExtIes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[663]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RadioResourceStatusExtIes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RadioResourceStatusExtIes) ProtoMessage() {}

func (x *RadioResourceStatusExtIes) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[663]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RadioResourceStatusExtIes.ProtoReflect.Descriptor instead.
func (*RadioResourceStatusExtIes) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{663}
}

func (x *RadioResourceStatusExtIes) GetValue() *emptypb.Empty {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:7101
// {RadioResourceStatus}
type RadioResourceStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// choice from xnap_v1.asn1:7101
	//
	// Types that are assignable to RadioResourceStatus:
	//	*RadioResourceStatus_NgENbRadioResourceStatus
	//	*RadioResourceStatus_GNbRadioResourceStatus
	//	*RadioResourceStatus_ChoiceExtension
	RadioResourceStatus isRadioResourceStatus_RadioResourceStatus `protobuf_oneof:"radio_resource_status"`
}

func (x *RadioResourceStatus) Reset() {
	*x = RadioResourceStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[664]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RadioResourceStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RadioResourceStatus) ProtoMessage() {}

func (x *RadioResourceStatus) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[664]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RadioResourceStatus.ProtoReflect.Descriptor instead.
func (*RadioResourceStatus) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{664}
}

func (m *RadioResourceStatus) GetRadioResourceStatus() isRadioResourceStatus_RadioResourceStatus {
	if m != nil {
		return m.RadioResourceStatus
	}
	return nil
}

func (x *RadioResourceStatus) GetNgENbRadioResourceStatus() *NgeNbRadioResourceStatus {
	if x, ok := x.GetRadioResourceStatus().(*RadioResourceStatus_NgENbRadioResourceStatus); ok {
		return x.NgENbRadioResourceStatus
	}
	return nil
}

func (x *RadioResourceStatus) GetGNbRadioResourceStatus() *GnbRadioResourceStatus {
	if x, ok := x.GetRadioResourceStatus().(*RadioResourceStatus_GNbRadioResourceStatus); ok {
		return x.GNbRadioResourceStatus
	}
	return nil
}

func (x *RadioResourceStatus) GetChoiceExtension() *RadioResourceStatusExtIes {
	if x, ok := x.GetRadioResourceStatus().(*RadioResourceStatus_ChoiceExtension); ok {
		return x.ChoiceExtension
	}
	return nil
}

type isRadioResourceStatus_RadioResourceStatus interface {
	isRadioResourceStatus_RadioResourceStatus()
}

type RadioResourceStatus_NgENbRadioResourceStatus struct {
	// @inject_tag: aper:"choiceIdx:1,valueExt,"
	NgENbRadioResourceStatus *NgeNbRadioResourceStatus `protobuf:"bytes,1,opt,name=ng_e_nb_radio_resource_status,json=ng-eNB-RadioResourceStatus,proto3,oneof" aper:"choiceIdx:1,valueExt,"`
}

type RadioResourceStatus_GNbRadioResourceStatus struct {
	// @inject_tag: aper:"choiceIdx:2,valueExt,"
	GNbRadioResourceStatus *GnbRadioResourceStatus `protobuf:"bytes,2,opt,name=g_nb_radio_resource_status,json=gNB-RadioResourceStatus,proto3,oneof" aper:"choiceIdx:2,valueExt,"`
}

type RadioResourceStatus_ChoiceExtension struct {
	// @inject_tag: aper:"choiceIdx:3,"
	ChoiceExtension *RadioResourceStatusExtIes `protobuf:"bytes,3,opt,name=choice_extension,json=choice-extension,proto3,oneof" aper:"choiceIdx:3,"`
}

func (*RadioResourceStatus_NgENbRadioResourceStatus) isRadioResourceStatus_RadioResourceStatus() {}

func (*RadioResourceStatus_GNbRadioResourceStatus) isRadioResourceStatus_RadioResourceStatus() {}

func (*RadioResourceStatus_ChoiceExtension) isRadioResourceStatus_RadioResourceStatus() {}

// range of Integer from xnap_v1.asn1:7112
// {RANAC}
type Ranac struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"valueLB:0,valueUB:255,"
	Value int32 `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty" aper:"valueLB:0,valueUB:255,"`
}

func (x *Ranac) Reset() {
	*x = Ranac{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[665]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ranac) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ranac) ProtoMessage() {}

func (x *Ranac) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[665]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ranac.ProtoReflect.Descriptor instead.
func (*Ranac) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{665}
}

func (x *Ranac) GetValue() int32 {
	if x != nil {
		return x.Value
	}
	return 0
}

// value set from xnap_v1.asn1:7122
// {RANAreaID-ExtIEs}
type RanareaIdExtIes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *emptypb.Empty `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *RanareaIdExtIes) Reset() {
	*x = RanareaIdExtIes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[666]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RanareaIdExtIes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RanareaIdExtIes) ProtoMessage() {}

func (x *RanareaIdExtIes) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[666]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RanareaIdExtIes.ProtoReflect.Descriptor instead.
func (*RanareaIdExtIes) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{666}
}

func (x *RanareaIdExtIes) GetValue() *emptypb.Empty {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:7116
// @inject_tag: aper:"valueExt"
// {RANAreaID}
type RanareaId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TAc *Tac `protobuf:"bytes,1,opt,name=t_ac,json=tAC,proto3" json:"t_ac,omitempty"`
	// @inject_tag: aper:"optional,"
	RAnac *Ranac `protobuf:"bytes,2,opt,name=r_anac,json=rANAC,proto3,oneof" json:"r_anac,omitempty" aper:"optional,"`
	// @inject_tag: aper:"optional,sizeLB:1,"
	IEExtensions []*RanareaIdExtIes `protobuf:"bytes,3,rep,name=i_e_extensions,json=iE-Extensions,proto3" json:"i_e_extensions,omitempty" aper:"optional,sizeLB:1,"`
}

func (x *RanareaId) Reset() {
	*x = RanareaId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[667]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RanareaId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RanareaId) ProtoMessage() {}

func (x *RanareaId) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[667]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RanareaId.ProtoReflect.Descriptor instead.
func (*RanareaId) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{667}
}

func (x *RanareaId) GetTAc() *Tac {
	if x != nil {
		return x.TAc
	}
	return nil
}

func (x *RanareaId) GetRAnac() *Ranac {
	if x != nil {
		return x.RAnac
	}
	return nil
}

func (x *RanareaId) GetIEExtensions() []*RanareaIdExtIes {
	if x != nil {
		return x.IEExtensions
	}
	return nil
}

// sequence from xnap_v1.asn1:7129
// {RANAreaID-List}
type RanareaIdList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"valueExt,sizeLB:1,sizeUB:16,"
	Value []*RanareaId `protobuf:"bytes,1,rep,name=value,proto3" json:"value,omitempty" aper:"valueExt,sizeLB:1,sizeUB:16,"`
}

func (x *RanareaIdList) Reset() {
	*x = RanareaIdList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[668]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RanareaIdList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RanareaIdList) ProtoMessage() {}

func (x *RanareaIdList) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[668]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RanareaIdList.ProtoReflect.Descriptor instead.
func (*RanareaIdList) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{668}
}

func (x *RanareaIdList) GetValue() []*RanareaId {
	if x != nil {
		return x.Value
	}
	return nil
}

// value set from xnap_v1.asn1:7138
// {RANPagingArea-ExtIEs}
type RanpagingAreaExtIes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *emptypb.Empty `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *RanpagingAreaExtIes) Reset() {
	*x = RanpagingAreaExtIes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[669]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RanpagingAreaExtIes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RanpagingAreaExtIes) ProtoMessage() {}

func (x *RanpagingAreaExtIes) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[669]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RanpagingAreaExtIes.ProtoReflect.Descriptor instead.
func (*RanpagingAreaExtIes) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{669}
}

func (x *RanpagingAreaExtIes) GetValue() *emptypb.Empty {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:7132
// @inject_tag: aper:"valueExt"
// {RANPagingArea}
type RanpagingArea struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PLmnIdentity        *PlmnIdentity        `protobuf:"bytes,1,opt,name=p_lmn_identity,json=pLMN-Identity,proto3" json:"p_lmn_identity,omitempty"`
	RAnpagingAreaChoice *RanpagingAreaChoice `protobuf:"bytes,2,opt,name=r_anpaging_area_choice,json=rANPagingAreaChoice,proto3" json:"r_anpaging_area_choice,omitempty"`
	// @inject_tag: aper:"optional,sizeLB:1,"
	IEExtensions []*RanpagingAreaExtIes `protobuf:"bytes,3,rep,name=i_e_extensions,json=iE-Extensions,proto3" json:"i_e_extensions,omitempty" aper:"optional,sizeLB:1,"`
}

func (x *RanpagingArea) Reset() {
	*x = RanpagingArea{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[670]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RanpagingArea) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RanpagingArea) ProtoMessage() {}

func (x *RanpagingArea) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[670]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RanpagingArea.ProtoReflect.Descriptor instead.
func (*RanpagingArea) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{670}
}

func (x *RanpagingArea) GetPLmnIdentity() *PlmnIdentity {
	if x != nil {
		return x.PLmnIdentity
	}
	return nil
}

func (x *RanpagingArea) GetRAnpagingAreaChoice() *RanpagingAreaChoice {
	if x != nil {
		return x.RAnpagingAreaChoice
	}
	return nil
}

func (x *RanpagingArea) GetIEExtensions() []*RanpagingAreaExtIes {
	if x != nil {
		return x.IEExtensions
	}
	return nil
}

// value set from xnap_v1.asn1:7148
// {RANPagingAreaChoice-ExtIEs}
type RanpagingAreaChoiceExtIes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *emptypb.Empty `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *RanpagingAreaChoiceExtIes) Reset() {
	*x = RanpagingAreaChoiceExtIes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[671]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RanpagingAreaChoiceExtIes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RanpagingAreaChoiceExtIes) ProtoMessage() {}

func (x *RanpagingAreaChoiceExtIes) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[671]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RanpagingAreaChoiceExtIes.ProtoReflect.Descriptor instead.
func (*RanpagingAreaChoiceExtIes) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{671}
}

func (x *RanpagingAreaChoiceExtIes) GetValue() *emptypb.Empty {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:7143
// {RANPagingAreaChoice}
type RanpagingAreaChoice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// choice from xnap_v1.asn1:7143
	//
	// Types that are assignable to RanpagingAreaChoice:
	//	*RanpagingAreaChoice_CellList
	//	*RanpagingAreaChoice_RAnareaIdList
	//	*RanpagingAreaChoice_ChoiceExtension
	RanpagingAreaChoice isRanpagingAreaChoice_RanpagingAreaChoice `protobuf_oneof:"ranpaging_area_choice"`
}

func (x *RanpagingAreaChoice) Reset() {
	*x = RanpagingAreaChoice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[672]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RanpagingAreaChoice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RanpagingAreaChoice) ProtoMessage() {}

func (x *RanpagingAreaChoice) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[672]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RanpagingAreaChoice.ProtoReflect.Descriptor instead.
func (*RanpagingAreaChoice) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{672}
}

func (m *RanpagingAreaChoice) GetRanpagingAreaChoice() isRanpagingAreaChoice_RanpagingAreaChoice {
	if m != nil {
		return m.RanpagingAreaChoice
	}
	return nil
}

func (x *RanpagingAreaChoice) GetCellList() *NgRAnCellIdentityListinRanpagingArea {
	if x, ok := x.GetRanpagingAreaChoice().(*RanpagingAreaChoice_CellList); ok {
		return x.CellList
	}
	return nil
}

func (x *RanpagingAreaChoice) GetRAnareaIdList() *RanareaIdList {
	if x, ok := x.GetRanpagingAreaChoice().(*RanpagingAreaChoice_RAnareaIdList); ok {
		return x.RAnareaIdList
	}
	return nil
}

func (x *RanpagingAreaChoice) GetChoiceExtension() *RanpagingAreaChoiceExtIes {
	if x, ok := x.GetRanpagingAreaChoice().(*RanpagingAreaChoice_ChoiceExtension); ok {
		return x.ChoiceExtension
	}
	return nil
}

type isRanpagingAreaChoice_RanpagingAreaChoice interface {
	isRanpagingAreaChoice_RanpagingAreaChoice()
}

type RanpagingAreaChoice_CellList struct {
	// @inject_tag: aper:"choiceIdx:1,"
	CellList *NgRAnCellIdentityListinRanpagingArea `protobuf:"bytes,1,opt,name=cell_list,json=cell-List,proto3,oneof" aper:"choiceIdx:1,"`
}

type RanpagingAreaChoice_RAnareaIdList struct {
	// @inject_tag: aper:"choiceIdx:2,"
	RAnareaIdList *RanareaIdList `protobuf:"bytes,2,opt,name=r_anarea_id_list,json=rANAreaID-List,proto3,oneof" aper:"choiceIdx:2,"`
}

type RanpagingAreaChoice_ChoiceExtension struct {
	// @inject_tag: aper:"choiceIdx:3,"
	ChoiceExtension *RanpagingAreaChoiceExtIes `protobuf:"bytes,3,opt,name=choice_extension,json=choice-extension,proto3,oneof" aper:"choiceIdx:3,"`
}

func (*RanpagingAreaChoice_CellList) isRanpagingAreaChoice_RanpagingAreaChoice() {}

func (*RanpagingAreaChoice_RAnareaIdList) isRanpagingAreaChoice_RanpagingAreaChoice() {}

func (*RanpagingAreaChoice_ChoiceExtension) isRanpagingAreaChoice_RanpagingAreaChoice() {}

// value set from xnap_v1.asn1:7161
// {RANPagingAttemptInfo-ExtIEs}
type RanpagingAttemptInfoExtIes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *emptypb.Empty `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *RanpagingAttemptInfoExtIes) Reset() {
	*x = RanpagingAttemptInfoExtIes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[673]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RanpagingAttemptInfoExtIes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RanpagingAttemptInfoExtIes) ProtoMessage() {}

func (x *RanpagingAttemptInfoExtIes) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[673]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RanpagingAttemptInfoExtIes.ProtoReflect.Descriptor instead.
func (*RanpagingAttemptInfoExtIes) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{673}
}

func (x *RanpagingAttemptInfoExtIes) GetValue() *emptypb.Empty {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:7154
// @inject_tag: aper:"valueExt"
// {RANPagingAttemptInfo}
type RanpagingAttemptInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"valueExt,valueLB:1,valueUB:16,"
	PagingAttemptCount int32 `protobuf:"varint,1,opt,name=paging_attempt_count,json=pagingAttemptCount,proto3" json:"paging_attempt_count,omitempty" aper:"valueExt,valueLB:1,valueUB:16,"`
	// @inject_tag: aper:"valueExt,valueLB:1,valueUB:16,"
	IntendedNumberOfPagingAttempts int32 `protobuf:"varint,2,opt,name=intended_number_of_paging_attempts,json=intendedNumberOfPagingAttempts,proto3" json:"intended_number_of_paging_attempts,omitempty" aper:"valueExt,valueLB:1,valueUB:16,"`
	// @inject_tag: aper:"optional,valueExt,valueLB:0,valueUB:1,"
	NextPagingAreaScope *NextPagingAreaScopeRanpagingAttemptInfo `protobuf:"varint,3,opt,name=next_paging_area_scope,json=nextPagingAreaScope,proto3,enum=xnap.v1.NextPagingAreaScopeRanpagingAttemptInfo,oneof" json:"next_paging_area_scope,omitempty" aper:"optional,valueExt,valueLB:0,valueUB:1,"`
	// @inject_tag: aper:"optional,sizeLB:1,"
	IEExtensions []*RanpagingAttemptInfoExtIes `protobuf:"bytes,4,rep,name=i_e_extensions,json=iE-Extensions,proto3" json:"i_e_extensions,omitempty" aper:"optional,sizeLB:1,"`
}

func (x *RanpagingAttemptInfo) Reset() {
	*x = RanpagingAttemptInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[674]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RanpagingAttemptInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RanpagingAttemptInfo) ProtoMessage() {}

func (x *RanpagingAttemptInfo) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[674]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RanpagingAttemptInfo.ProtoReflect.Descriptor instead.
func (*RanpagingAttemptInfo) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{674}
}

func (x *RanpagingAttemptInfo) GetPagingAttemptCount() int32 {
	if x != nil {
		return x.PagingAttemptCount
	}
	return 0
}

func (x *RanpagingAttemptInfo) GetIntendedNumberOfPagingAttempts() int32 {
	if x != nil {
		return x.IntendedNumberOfPagingAttempts
	}
	return 0
}

func (x *RanpagingAttemptInfo) GetNextPagingAreaScope() NextPagingAreaScopeRanpagingAttemptInfo {
	if x != nil && x.NextPagingAreaScope != nil {
		return *x.NextPagingAreaScope
	}
	return NextPagingAreaScopeRanpagingAttemptInfo_NEXT_PAGING_AREA_SCOPE_RANPAGING_ATTEMPT_INFO_SAME
}

func (x *RanpagingAttemptInfo) GetIEExtensions() []*RanpagingAttemptInfoExtIes {
	if x != nil {
		return x.IEExtensions
	}
	return nil
}

// value set from xnap_v1.asn1:7178
// {RedundantPDUSessionInformation-ExtIEs}
type RedundantPdusessionInformationExtIes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *emptypb.Empty `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *RedundantPdusessionInformationExtIes) Reset() {
	*x = RedundantPdusessionInformationExtIes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[675]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RedundantPdusessionInformationExtIes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RedundantPdusessionInformationExtIes) ProtoMessage() {}

func (x *RedundantPdusessionInformationExtIes) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[675]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RedundantPdusessionInformationExtIes.ProtoReflect.Descriptor instead.
func (*RedundantPdusessionInformationExtIes) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{675}
}

func (x *RedundantPdusessionInformationExtIes) GetValue() *emptypb.Empty {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:7173
// @inject_tag: aper:"valueExt"
// {RedundantPDUSessionInformation}
type RedundantPdusessionInformation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"valueExt,valueLB:0,valueUB:1,"
	RSn Rsn `protobuf:"varint,1,opt,name=r_sn,json=rSN,proto3,enum=xnap.v1.Rsn" json:"r_sn,omitempty" aper:"valueExt,valueLB:0,valueUB:1,"`
	// @inject_tag: aper:"optional,sizeLB:1,"
	IEExtensions []*RedundantPdusessionInformationExtIes `protobuf:"bytes,2,rep,name=i_e_extensions,json=iE-Extensions,proto3" json:"i_e_extensions,omitempty" aper:"optional,sizeLB:1,"`
}

func (x *RedundantPdusessionInformation) Reset() {
	*x = RedundantPdusessionInformation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[676]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RedundantPdusessionInformation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RedundantPdusessionInformation) ProtoMessage() {}

func (x *RedundantPdusessionInformation) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[676]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RedundantPdusessionInformation.ProtoReflect.Descriptor instead.
func (*RedundantPdusessionInformation) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{676}
}

func (x *RedundantPdusessionInformation) GetRSn() Rsn {
	if x != nil {
		return x.RSn
	}
	return Rsn_RSN_V1
}

func (x *RedundantPdusessionInformation) GetIEExtensions() []*RedundantPdusessionInformationExtIes {
	if x != nil {
		return x.IEExtensions
	}
	return nil
}

// range of Integer from xnap_v1.asn1:7184
// {ReferenceID}
type ReferenceId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"valueExt,valueLB:1,valueUB:64,"
	Value int32 `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty" aper:"valueExt,valueLB:1,valueUB:64,"`
}

func (x *ReferenceId) Reset() {
	*x = ReferenceId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[677]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReferenceId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReferenceId) ProtoMessage() {}

func (x *ReferenceId) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[677]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReferenceId.ProtoReflect.Descriptor instead.
func (*ReferenceId) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{677}
}

func (x *ReferenceId) GetValue() int32 {
	if x != nil {
		return x.Value
	}
	return 0
}

// sequence from xnap_v1.asn1:7200
// @inject_tag: aper:"choiceExt"
// {ReportType}
type ReportType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// choice from xnap_v1.asn1:7200
	//
	// Types that are assignable to ReportType:
	//	*ReportType_Periodical
	//	*ReportType_EventTriggered
	ReportType isReportType_ReportType `protobuf_oneof:"report_type"`
}

func (x *ReportType) Reset() {
	*x = ReportType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[678]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReportType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReportType) ProtoMessage() {}

func (x *ReportType) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[678]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReportType.ProtoReflect.Descriptor instead.
func (*ReportType) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{678}
}

func (m *ReportType) GetReportType() isReportType_ReportType {
	if m != nil {
		return m.ReportType
	}
	return nil
}

func (x *ReportType) GetPeriodical() *Periodical {
	if x, ok := x.GetReportType().(*ReportType_Periodical); ok {
		return x.Periodical
	}
	return nil
}

func (x *ReportType) GetEventTriggered() *EventTriggered {
	if x, ok := x.GetReportType().(*ReportType_EventTriggered); ok {
		return x.EventTriggered
	}
	return nil
}

type isReportType_ReportType interface {
	isReportType_ReportType()
}

type ReportType_Periodical struct {
	// @inject_tag: aper:"choiceIdx:1,valueExt,"
	Periodical *Periodical `protobuf:"bytes,1,opt,name=periodical,proto3,oneof" aper:"choiceIdx:1,valueExt,"`
}

type ReportType_EventTriggered struct {
	// @inject_tag: aper:"choiceIdx:2,valueExt,"
	EventTriggered *EventTriggered `protobuf:"bytes,2,opt,name=event_triggered,json=eventTriggered,proto3,oneof" aper:"choiceIdx:2,valueExt,"`
}

func (*ReportType_Periodical) isReportType_ReportType() {}

func (*ReportType_EventTriggered) isReportType_ReportType() {}

// range of Integer from xnap_v1.asn1:7213
// {ReportCharacteristics}
type ReportCharacteristics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"sizeLB:32,sizeUB:32,"
	Value *asn1.BitString `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty" aper:"sizeLB:32,sizeUB:32,"`
}

func (x *ReportCharacteristics) Reset() {
	*x = ReportCharacteristics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[679]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReportCharacteristics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReportCharacteristics) ProtoMessage() {}

func (x *ReportCharacteristics) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[679]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReportCharacteristics.ProtoReflect.Descriptor instead.
func (*ReportCharacteristics) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{679}
}

func (x *ReportCharacteristics) GetValue() *asn1.BitString {
	if x != nil {
		return x.Value
	}
	return nil
}

// range of Integer from xnap_v1.asn1:7228
// {RequestReferenceID}
type RequestReferenceId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"valueExt,valueLB:1,valueUB:64,"
	Value int32 `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty" aper:"valueExt,valueLB:1,valueUB:64,"`
}

func (x *RequestReferenceId) Reset() {
	*x = RequestReferenceId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[680]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestReferenceId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestReferenceId) ProtoMessage() {}

func (x *RequestReferenceId) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[680]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestReferenceId.ProtoReflect.Descriptor instead.
func (*RequestReferenceId) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{680}
}

func (x *RequestReferenceId) GetValue() int32 {
	if x != nil {
		return x.Value
	}
	return 0
}

// value set from xnap_v1.asn1:7239
// {ReservedSubframePattern-ExtIEs}
type ReservedSubframePatternExtIes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *emptypb.Empty `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *ReservedSubframePatternExtIes) Reset() {
	*x = ReservedSubframePatternExtIes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[681]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReservedSubframePatternExtIes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReservedSubframePatternExtIes) ProtoMessage() {}

func (x *ReservedSubframePatternExtIes) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[681]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReservedSubframePatternExtIes.ProtoReflect.Descriptor instead.
func (*ReservedSubframePatternExtIes) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{681}
}

func (x *ReservedSubframePatternExtIes) GetValue() *emptypb.Empty {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:7232
// @inject_tag: aper:"valueExt"
// {ReservedSubframePattern}
type ReservedSubframePattern struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"valueExt,valueLB:0,valueUB:1,"
	SubframeType SubframeTypeReservedSubframePattern `protobuf:"varint,1,opt,name=subframe_type,json=subframeType,proto3,enum=xnap.v1.SubframeTypeReservedSubframePattern" json:"subframe_type,omitempty" aper:"valueExt,valueLB:0,valueUB:1,"`
	// @inject_tag: aper:"sizeLB:10,sizeUB:160,"
	ReservedSubframePattern *asn1.BitString `protobuf:"bytes,2,opt,name=reserved_subframe_pattern,json=reservedSubframePattern,proto3" json:"reserved_subframe_pattern,omitempty" aper:"sizeLB:10,sizeUB:160,"`
	// @inject_tag: aper:"optional,"
	MbsfnControlRegionLength *MbsfncontrolRegionLength `protobuf:"bytes,3,opt,name=mbsfn_control_region_length,json=mbsfnControlRegionLength,proto3,oneof" json:"mbsfn_control_region_length,omitempty" aper:"optional,"`
	// @inject_tag: aper:"optional,sizeLB:1,"
	IEExtension []*ReservedSubframePatternExtIes `protobuf:"bytes,4,rep,name=i_e_extension,json=iE-Extension,proto3" json:"i_e_extension,omitempty" aper:"optional,sizeLB:1,"`
}

func (x *ReservedSubframePattern) Reset() {
	*x = ReservedSubframePattern{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[682]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReservedSubframePattern) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReservedSubframePattern) ProtoMessage() {}

func (x *ReservedSubframePattern) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[682]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReservedSubframePattern.ProtoReflect.Descriptor instead.
func (*ReservedSubframePattern) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{682}
}

func (x *ReservedSubframePattern) GetSubframeType() SubframeTypeReservedSubframePattern {
	if x != nil {
		return x.SubframeType
	}
	return SubframeTypeReservedSubframePattern_SUBFRAME_TYPE_RESERVED_SUBFRAME_PATTERN_MBSFN
}

func (x *ReservedSubframePattern) GetReservedSubframePattern() *asn1.BitString {
	if x != nil {
		return x.ReservedSubframePattern
	}
	return nil
}

func (x *ReservedSubframePattern) GetMbsfnControlRegionLength() *MbsfncontrolRegionLength {
	if x != nil {
		return x.MbsfnControlRegionLength
	}
	return nil
}

func (x *ReservedSubframePattern) GetIEExtension() []*ReservedSubframePatternExtIes {
	if x != nil {
		return x.IEExtension
	}
	return nil
}

// value set from xnap_v1.asn1:7251
// {ResetRequestTypeInfo-ExtIEs}
type ResetRequestTypeInfoExtIes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *emptypb.Empty `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *ResetRequestTypeInfoExtIes) Reset() {
	*x = ResetRequestTypeInfoExtIes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[683]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResetRequestTypeInfoExtIes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResetRequestTypeInfoExtIes) ProtoMessage() {}

func (x *ResetRequestTypeInfoExtIes) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[683]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResetRequestTypeInfoExtIes.ProtoReflect.Descriptor instead.
func (*ResetRequestTypeInfoExtIes) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{683}
}

func (x *ResetRequestTypeInfoExtIes) GetValue() *emptypb.Empty {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:7246
// {ResetRequestTypeInfo}
type ResetRequestTypeInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// choice from xnap_v1.asn1:7246
	//
	// Types that are assignable to ResetRequestTypeInfo:
	//	*ResetRequestTypeInfo_FullReset
	//	*ResetRequestTypeInfo_PartialReset
	//	*ResetRequestTypeInfo_ChoiceExtension
	ResetRequestTypeInfo isResetRequestTypeInfo_ResetRequestTypeInfo `protobuf_oneof:"reset_request_type_info"`
}

func (x *ResetRequestTypeInfo) Reset() {
	*x = ResetRequestTypeInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[684]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResetRequestTypeInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResetRequestTypeInfo) ProtoMessage() {}

func (x *ResetRequestTypeInfo) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[684]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResetRequestTypeInfo.ProtoReflect.Descriptor instead.
func (*ResetRequestTypeInfo) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{684}
}

func (m *ResetRequestTypeInfo) GetResetRequestTypeInfo() isResetRequestTypeInfo_ResetRequestTypeInfo {
	if m != nil {
		return m.ResetRequestTypeInfo
	}
	return nil
}

func (x *ResetRequestTypeInfo) GetFullReset() *ResetRequestTypeInfoFull {
	if x, ok := x.GetResetRequestTypeInfo().(*ResetRequestTypeInfo_FullReset); ok {
		return x.FullReset
	}
	return nil
}

func (x *ResetRequestTypeInfo) GetPartialReset() *ResetRequestTypeInfoPartial {
	if x, ok := x.GetResetRequestTypeInfo().(*ResetRequestTypeInfo_PartialReset); ok {
		return x.PartialReset
	}
	return nil
}

func (x *ResetRequestTypeInfo) GetChoiceExtension() *ResetRequestTypeInfoExtIes {
	if x, ok := x.GetResetRequestTypeInfo().(*ResetRequestTypeInfo_ChoiceExtension); ok {
		return x.ChoiceExtension
	}
	return nil
}

type isResetRequestTypeInfo_ResetRequestTypeInfo interface {
	isResetRequestTypeInfo_ResetRequestTypeInfo()
}

type ResetRequestTypeInfo_FullReset struct {
	// @inject_tag: aper:"choiceIdx:1,valueExt,"
	FullReset *ResetRequestTypeInfoFull `protobuf:"bytes,1,opt,name=full_reset,json=fullReset,proto3,oneof" aper:"choiceIdx:1,valueExt,"`
}

type ResetRequestTypeInfo_PartialReset struct {
	// @inject_tag: aper:"choiceIdx:2,valueExt,"
	PartialReset *ResetRequestTypeInfoPartial `protobuf:"bytes,2,opt,name=partial_reset,json=partialReset,proto3,oneof" aper:"choiceIdx:2,valueExt,"`
}

type ResetRequestTypeInfo_ChoiceExtension struct {
	// @inject_tag: aper:"choiceIdx:3,"
	ChoiceExtension *ResetRequestTypeInfoExtIes `protobuf:"bytes,3,opt,name=choice_extension,json=choice-extension,proto3,oneof" aper:"choiceIdx:3,"`
}

func (*ResetRequestTypeInfo_FullReset) isResetRequestTypeInfo_ResetRequestTypeInfo() {}

func (*ResetRequestTypeInfo_PartialReset) isResetRequestTypeInfo_ResetRequestTypeInfo() {}

func (*ResetRequestTypeInfo_ChoiceExtension) isResetRequestTypeInfo_ResetRequestTypeInfo() {}

// value set from xnap_v1.asn1:7260
// {ResetRequestTypeInfo-Full-ExtIEs}
type ResetRequestTypeInfoFullExtIes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *emptypb.Empty `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *ResetRequestTypeInfoFullExtIes) Reset() {
	*x = ResetRequestTypeInfoFullExtIes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[685]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResetRequestTypeInfoFullExtIes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResetRequestTypeInfoFullExtIes) ProtoMessage() {}

func (x *ResetRequestTypeInfoFullExtIes) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[685]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResetRequestTypeInfoFullExtIes.ProtoReflect.Descriptor instead.
func (*ResetRequestTypeInfoFullExtIes) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{685}
}

func (x *ResetRequestTypeInfoFullExtIes) GetValue() *emptypb.Empty {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:7256
// @inject_tag: aper:"valueExt"
// {ResetRequestTypeInfo-Full}
type ResetRequestTypeInfoFull struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"optional,sizeLB:1,"
	IEExtension []*ResetRequestTypeInfoFullExtIes `protobuf:"bytes,1,rep,name=i_e_extension,json=iE-Extension,proto3" json:"i_e_extension,omitempty" aper:"optional,sizeLB:1,"`
}

func (x *ResetRequestTypeInfoFull) Reset() {
	*x = ResetRequestTypeInfoFull{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[686]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResetRequestTypeInfoFull) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResetRequestTypeInfoFull) ProtoMessage() {}

func (x *ResetRequestTypeInfoFull) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[686]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResetRequestTypeInfoFull.ProtoReflect.Descriptor instead.
func (*ResetRequestTypeInfoFull) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{686}
}

func (x *ResetRequestTypeInfoFull) GetIEExtension() []*ResetRequestTypeInfoFullExtIes {
	if x != nil {
		return x.IEExtension
	}
	return nil
}

// value set from xnap_v1.asn1:7270
// {ResetRequestTypeInfo-Partial-ExtIEs}
type ResetRequestTypeInfoPartialExtIes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *emptypb.Empty `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *ResetRequestTypeInfoPartialExtIes) Reset() {
	*x = ResetRequestTypeInfoPartialExtIes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[687]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResetRequestTypeInfoPartialExtIes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResetRequestTypeInfoPartialExtIes) ProtoMessage() {}

func (x *ResetRequestTypeInfoPartialExtIes) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[687]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResetRequestTypeInfoPartialExtIes.ProtoReflect.Descriptor instead.
func (*ResetRequestTypeInfoPartialExtIes) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{687}
}

func (x *ResetRequestTypeInfoPartialExtIes) GetValue() *emptypb.Empty {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:7265
// @inject_tag: aper:"valueExt"
// {ResetRequestTypeInfo-Partial}
type ResetRequestTypeInfoPartial struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UeContextsToBeReleasedList *ResetRequestPartialReleaseList `protobuf:"bytes,1,opt,name=ue_contexts_to_be_released_list,json=ue-contexts-ToBeReleasedList,proto3" json:"ue_contexts_to_be_released_list,omitempty"`
	// @inject_tag: aper:"optional,sizeLB:1,"
	IEExtension []*ResetRequestTypeInfoPartialExtIes `protobuf:"bytes,2,rep,name=i_e_extension,json=iE-Extension,proto3" json:"i_e_extension,omitempty" aper:"optional,sizeLB:1,"`
}

func (x *ResetRequestTypeInfoPartial) Reset() {
	*x = ResetRequestTypeInfoPartial{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[688]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResetRequestTypeInfoPartial) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResetRequestTypeInfoPartial) ProtoMessage() {}

func (x *ResetRequestTypeInfoPartial) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[688]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResetRequestTypeInfoPartial.ProtoReflect.Descriptor instead.
func (*ResetRequestTypeInfoPartial) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{688}
}

func (x *ResetRequestTypeInfoPartial) GetUeContextsToBeReleasedList() *ResetRequestPartialReleaseList {
	if x != nil {
		return x.UeContextsToBeReleasedList
	}
	return nil
}

func (x *ResetRequestTypeInfoPartial) GetIEExtension() []*ResetRequestTypeInfoPartialExtIes {
	if x != nil {
		return x.IEExtension
	}
	return nil
}

// sequence from xnap_v1.asn1:7276
// {ResetRequestPartialReleaseList}
type ResetRequestPartialReleaseList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"valueExt,sizeLB:1,sizeUB:8192,"
	Value []*ResetRequestPartialReleaseItem `protobuf:"bytes,1,rep,name=value,proto3" json:"value,omitempty" aper:"valueExt,sizeLB:1,sizeUB:8192,"`
}

func (x *ResetRequestPartialReleaseList) Reset() {
	*x = ResetRequestPartialReleaseList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[689]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResetRequestPartialReleaseList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResetRequestPartialReleaseList) ProtoMessage() {}

func (x *ResetRequestPartialReleaseList) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[689]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResetRequestPartialReleaseList.ProtoReflect.Descriptor instead.
func (*ResetRequestPartialReleaseList) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{689}
}

func (x *ResetRequestPartialReleaseList) GetValue() []*ResetRequestPartialReleaseItem {
	if x != nil {
		return x.Value
	}
	return nil
}

// value set from xnap_v1.asn1:7283
// {ResetRequestPartialReleaseItem-ExtIEs}
type ResetRequestPartialReleaseItemExtIes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *emptypb.Empty `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *ResetRequestPartialReleaseItemExtIes) Reset() {
	*x = ResetRequestPartialReleaseItemExtIes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[690]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResetRequestPartialReleaseItemExtIes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResetRequestPartialReleaseItemExtIes) ProtoMessage() {}

func (x *ResetRequestPartialReleaseItemExtIes) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[690]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResetRequestPartialReleaseItemExtIes.ProtoReflect.Descriptor instead.
func (*ResetRequestPartialReleaseItemExtIes) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{690}
}

func (x *ResetRequestPartialReleaseItemExtIes) GetValue() *emptypb.Empty {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:7277
// @inject_tag: aper:"valueExt"
// {ResetRequestPartialReleaseItem}
type ResetRequestPartialReleaseItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"optional,"
	NgRanNode1UexnApid *NgRAnnodeUexnApid `protobuf:"bytes,1,opt,name=ng_ran_node1_uexn_apid,json=ng-ran-node1UEXnAPID,proto3,oneof" json:"ng_ran_node1_uexn_apid,omitempty" aper:"optional,"`
	// @inject_tag: aper:"optional,"
	NgRanNode2UexnApid *NgRAnnodeUexnApid `protobuf:"bytes,2,opt,name=ng_ran_node2_uexn_apid,json=ng-ran-node2UEXnAPID,proto3,oneof" json:"ng_ran_node2_uexn_apid,omitempty" aper:"optional,"`
	// @inject_tag: aper:"optional,sizeLB:1,"
	IEExtensions []*ResetRequestPartialReleaseItemExtIes `protobuf:"bytes,3,rep,name=i_e_extensions,json=iE-Extensions,proto3" json:"i_e_extensions,omitempty" aper:"optional,sizeLB:1,"`
}

func (x *ResetRequestPartialReleaseItem) Reset() {
	*x = ResetRequestPartialReleaseItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[691]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResetRequestPartialReleaseItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResetRequestPartialReleaseItem) ProtoMessage() {}

func (x *ResetRequestPartialReleaseItem) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[691]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResetRequestPartialReleaseItem.ProtoReflect.Descriptor instead.
func (*ResetRequestPartialReleaseItem) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{691}
}

func (x *ResetRequestPartialReleaseItem) GetNgRanNode1UexnApid() *NgRAnnodeUexnApid {
	if x != nil {
		return x.NgRanNode1UexnApid
	}
	return nil
}

func (x *ResetRequestPartialReleaseItem) GetNgRanNode2UexnApid() *NgRAnnodeUexnApid {
	if x != nil {
		return x.NgRanNode2UexnApid
	}
	return nil
}

func (x *ResetRequestPartialReleaseItem) GetIEExtensions() []*ResetRequestPartialReleaseItemExtIes {
	if x != nil {
		return x.IEExtensions
	}
	return nil
}

// value set from xnap_v1.asn1:7294
// {ResetResponseTypeInfo-ExtIEs}
type ResetResponseTypeInfoExtIes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *emptypb.Empty `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *ResetResponseTypeInfoExtIes) Reset() {
	*x = ResetResponseTypeInfoExtIes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[692]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResetResponseTypeInfoExtIes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResetResponseTypeInfoExtIes) ProtoMessage() {}

func (x *ResetResponseTypeInfoExtIes) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[692]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResetResponseTypeInfoExtIes.ProtoReflect.Descriptor instead.
func (*ResetResponseTypeInfoExtIes) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{692}
}

func (x *ResetResponseTypeInfoExtIes) GetValue() *emptypb.Empty {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:7289
// {ResetResponseTypeInfo}
type ResetResponseTypeInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// choice from xnap_v1.asn1:7289
	//
	// Types that are assignable to ResetResponseTypeInfo:
	//	*ResetResponseTypeInfo_FullReset
	//	*ResetResponseTypeInfo_PartialReset
	//	*ResetResponseTypeInfo_ChoiceExtension
	ResetResponseTypeInfo isResetResponseTypeInfo_ResetResponseTypeInfo `protobuf_oneof:"reset_response_type_info"`
}

func (x *ResetResponseTypeInfo) Reset() {
	*x = ResetResponseTypeInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[693]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResetResponseTypeInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResetResponseTypeInfo) ProtoMessage() {}

func (x *ResetResponseTypeInfo) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[693]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResetResponseTypeInfo.ProtoReflect.Descriptor instead.
func (*ResetResponseTypeInfo) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{693}
}

func (m *ResetResponseTypeInfo) GetResetResponseTypeInfo() isResetResponseTypeInfo_ResetResponseTypeInfo {
	if m != nil {
		return m.ResetResponseTypeInfo
	}
	return nil
}

func (x *ResetResponseTypeInfo) GetFullReset() *ResetResponseTypeInfoFull {
	if x, ok := x.GetResetResponseTypeInfo().(*ResetResponseTypeInfo_FullReset); ok {
		return x.FullReset
	}
	return nil
}

func (x *ResetResponseTypeInfo) GetPartialReset() *ResetResponseTypeInfoPartial {
	if x, ok := x.GetResetResponseTypeInfo().(*ResetResponseTypeInfo_PartialReset); ok {
		return x.PartialReset
	}
	return nil
}

func (x *ResetResponseTypeInfo) GetChoiceExtension() *ResetResponseTypeInfoExtIes {
	if x, ok := x.GetResetResponseTypeInfo().(*ResetResponseTypeInfo_ChoiceExtension); ok {
		return x.ChoiceExtension
	}
	return nil
}

type isResetResponseTypeInfo_ResetResponseTypeInfo interface {
	isResetResponseTypeInfo_ResetResponseTypeInfo()
}

type ResetResponseTypeInfo_FullReset struct {
	// @inject_tag: aper:"choiceIdx:1,valueExt,"
	FullReset *ResetResponseTypeInfoFull `protobuf:"bytes,1,opt,name=full_reset,json=fullReset,proto3,oneof" aper:"choiceIdx:1,valueExt,"`
}

type ResetResponseTypeInfo_PartialReset struct {
	// @inject_tag: aper:"choiceIdx:2,valueExt,"
	PartialReset *ResetResponseTypeInfoPartial `protobuf:"bytes,2,opt,name=partial_reset,json=partialReset,proto3,oneof" aper:"choiceIdx:2,valueExt,"`
}

type ResetResponseTypeInfo_ChoiceExtension struct {
	// @inject_tag: aper:"choiceIdx:3,"
	ChoiceExtension *ResetResponseTypeInfoExtIes `protobuf:"bytes,3,opt,name=choice_extension,json=choice-extension,proto3,oneof" aper:"choiceIdx:3,"`
}

func (*ResetResponseTypeInfo_FullReset) isResetResponseTypeInfo_ResetResponseTypeInfo() {}

func (*ResetResponseTypeInfo_PartialReset) isResetResponseTypeInfo_ResetResponseTypeInfo() {}

func (*ResetResponseTypeInfo_ChoiceExtension) isResetResponseTypeInfo_ResetResponseTypeInfo() {}

// value set from xnap_v1.asn1:7303
// {ResetResponseTypeInfo-Full-ExtIEs}
type ResetResponseTypeInfoFullExtIes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *emptypb.Empty `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *ResetResponseTypeInfoFullExtIes) Reset() {
	*x = ResetResponseTypeInfoFullExtIes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[694]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResetResponseTypeInfoFullExtIes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResetResponseTypeInfoFullExtIes) ProtoMessage() {}

func (x *ResetResponseTypeInfoFullExtIes) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[694]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResetResponseTypeInfoFullExtIes.ProtoReflect.Descriptor instead.
func (*ResetResponseTypeInfoFullExtIes) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{694}
}

func (x *ResetResponseTypeInfoFullExtIes) GetValue() *emptypb.Empty {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:7299
// @inject_tag: aper:"valueExt"
// {ResetResponseTypeInfo-Full}
type ResetResponseTypeInfoFull struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"optional,sizeLB:1,"
	IEExtension []*ResetResponseTypeInfoFullExtIes `protobuf:"bytes,1,rep,name=i_e_extension,json=iE-Extension,proto3" json:"i_e_extension,omitempty" aper:"optional,sizeLB:1,"`
}

func (x *ResetResponseTypeInfoFull) Reset() {
	*x = ResetResponseTypeInfoFull{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[695]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResetResponseTypeInfoFull) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResetResponseTypeInfoFull) ProtoMessage() {}

func (x *ResetResponseTypeInfoFull) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[695]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResetResponseTypeInfoFull.ProtoReflect.Descriptor instead.
func (*ResetResponseTypeInfoFull) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{695}
}

func (x *ResetResponseTypeInfoFull) GetIEExtension() []*ResetResponseTypeInfoFullExtIes {
	if x != nil {
		return x.IEExtension
	}
	return nil
}

// value set from xnap_v1.asn1:7313
// {ResetResponseTypeInfo-Partial-ExtIEs}
type ResetResponseTypeInfoPartialExtIes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *emptypb.Empty `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *ResetResponseTypeInfoPartialExtIes) Reset() {
	*x = ResetResponseTypeInfoPartialExtIes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[696]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResetResponseTypeInfoPartialExtIes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResetResponseTypeInfoPartialExtIes) ProtoMessage() {}

func (x *ResetResponseTypeInfoPartialExtIes) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[696]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResetResponseTypeInfoPartialExtIes.ProtoReflect.Descriptor instead.
func (*ResetResponseTypeInfoPartialExtIes) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{696}
}

func (x *ResetResponseTypeInfoPartialExtIes) GetValue() *emptypb.Empty {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:7308
// @inject_tag: aper:"valueExt"
// {ResetResponseTypeInfo-Partial}
type ResetResponseTypeInfoPartial struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UeContextsAdmittedToBeReleasedList *ResetResponsePartialReleaseList `protobuf:"bytes,1,opt,name=ue_contexts_admitted_to_be_released_list,json=ue-contexts-AdmittedToBeReleasedList,proto3" json:"ue_contexts_admitted_to_be_released_list,omitempty"`
	// @inject_tag: aper:"optional,sizeLB:1,"
	IEExtension []*ResetResponseTypeInfoPartialExtIes `protobuf:"bytes,2,rep,name=i_e_extension,json=iE-Extension,proto3" json:"i_e_extension,omitempty" aper:"optional,sizeLB:1,"`
}

func (x *ResetResponseTypeInfoPartial) Reset() {
	*x = ResetResponseTypeInfoPartial{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[697]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResetResponseTypeInfoPartial) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResetResponseTypeInfoPartial) ProtoMessage() {}

func (x *ResetResponseTypeInfoPartial) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[697]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResetResponseTypeInfoPartial.ProtoReflect.Descriptor instead.
func (*ResetResponseTypeInfoPartial) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{697}
}

func (x *ResetResponseTypeInfoPartial) GetUeContextsAdmittedToBeReleasedList() *ResetResponsePartialReleaseList {
	if x != nil {
		return x.UeContextsAdmittedToBeReleasedList
	}
	return nil
}

func (x *ResetResponseTypeInfoPartial) GetIEExtension() []*ResetResponseTypeInfoPartialExtIes {
	if x != nil {
		return x.IEExtension
	}
	return nil
}

// sequence from xnap_v1.asn1:7319
// {ResetResponsePartialReleaseList}
type ResetResponsePartialReleaseList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"valueExt,sizeLB:1,sizeUB:8192,"
	Value []*ResetResponsePartialReleaseItem `protobuf:"bytes,1,rep,name=value,proto3" json:"value,omitempty" aper:"valueExt,sizeLB:1,sizeUB:8192,"`
}

func (x *ResetResponsePartialReleaseList) Reset() {
	*x = ResetResponsePartialReleaseList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[698]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResetResponsePartialReleaseList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResetResponsePartialReleaseList) ProtoMessage() {}

func (x *ResetResponsePartialReleaseList) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[698]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResetResponsePartialReleaseList.ProtoReflect.Descriptor instead.
func (*ResetResponsePartialReleaseList) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{698}
}

func (x *ResetResponsePartialReleaseList) GetValue() []*ResetResponsePartialReleaseItem {
	if x != nil {
		return x.Value
	}
	return nil
}

// value set from xnap_v1.asn1:7326
// {ResetResponsePartialReleaseItem-ExtIEs}
type ResetResponsePartialReleaseItemExtIes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *emptypb.Empty `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *ResetResponsePartialReleaseItemExtIes) Reset() {
	*x = ResetResponsePartialReleaseItemExtIes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[699]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResetResponsePartialReleaseItemExtIes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResetResponsePartialReleaseItemExtIes) ProtoMessage() {}

func (x *ResetResponsePartialReleaseItemExtIes) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[699]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResetResponsePartialReleaseItemExtIes.ProtoReflect.Descriptor instead.
func (*ResetResponsePartialReleaseItemExtIes) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{699}
}

func (x *ResetResponsePartialReleaseItemExtIes) GetValue() *emptypb.Empty {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:7320
// @inject_tag: aper:"valueExt"
// {ResetResponsePartialReleaseItem}
type ResetResponsePartialReleaseItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"optional,"
	NgRanNode1UexnApid *NgRAnnodeUexnApid `protobuf:"bytes,1,opt,name=ng_ran_node1_uexn_apid,json=ng-ran-node1UEXnAPID,proto3,oneof" json:"ng_ran_node1_uexn_apid,omitempty" aper:"optional,"`
	// @inject_tag: aper:"optional,"
	NgRanNode2UexnApid *NgRAnnodeUexnApid `protobuf:"bytes,2,opt,name=ng_ran_node2_uexn_apid,json=ng-ran-node2UEXnAPID,proto3,oneof" json:"ng_ran_node2_uexn_apid,omitempty" aper:"optional,"`
	// @inject_tag: aper:"optional,sizeLB:1,"
	IEExtensions []*ResetResponsePartialReleaseItemExtIes `protobuf:"bytes,3,rep,name=i_e_extensions,json=iE-Extensions,proto3" json:"i_e_extensions,omitempty" aper:"optional,sizeLB:1,"`
}

func (x *ResetResponsePartialReleaseItem) Reset() {
	*x = ResetResponsePartialReleaseItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[700]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResetResponsePartialReleaseItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResetResponsePartialReleaseItem) ProtoMessage() {}

func (x *ResetResponsePartialReleaseItem) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[700]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResetResponsePartialReleaseItem.ProtoReflect.Descriptor instead.
func (*ResetResponsePartialReleaseItem) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{700}
}

func (x *ResetResponsePartialReleaseItem) GetNgRanNode1UexnApid() *NgRAnnodeUexnApid {
	if x != nil {
		return x.NgRanNode1UexnApid
	}
	return nil
}

func (x *ResetResponsePartialReleaseItem) GetNgRanNode2UexnApid() *NgRAnnodeUexnApid {
	if x != nil {
		return x.NgRanNode2UexnApid
	}
	return nil
}

func (x *ResetResponsePartialReleaseItem) GetIEExtensions() []*ResetResponsePartialReleaseItemExtIes {
	if x != nil {
		return x.IEExtensions
	}
	return nil
}

// value set from xnap_v1.asn1:7346
// {RLC-Status-ExtIEs}
type RlcStatusExtIes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *emptypb.Empty `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *RlcStatusExtIes) Reset() {
	*x = RlcStatusExtIes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[701]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RlcStatusExtIes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RlcStatusExtIes) ProtoMessage() {}

func (x *RlcStatusExtIes) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[701]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RlcStatusExtIes.ProtoReflect.Descriptor instead.
func (*RlcStatusExtIes) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{701}
}

func (x *RlcStatusExtIes) GetValue() *emptypb.Empty {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:7341
// @inject_tag: aper:"valueExt"
// {RLC-Status}
type RlcStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"valueExt,valueLB:0,valueUB:0,"
	ReestablishmentIndication ReestablishmentIndication `protobuf:"varint,1,opt,name=reestablishment_indication,json=reestablishment-Indication,proto3,enum=xnap.v1.ReestablishmentIndication" json:"reestablishment_indication,omitempty" aper:"valueExt,valueLB:0,valueUB:0,"`
	// @inject_tag: aper:"optional,sizeLB:1,"
	IEExtensions []*RlcStatusExtIes `protobuf:"bytes,2,rep,name=i_e_extensions,json=iE-Extensions,proto3" json:"i_e_extensions,omitempty" aper:"optional,sizeLB:1,"`
}

func (x *RlcStatus) Reset() {
	*x = RlcStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[702]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RlcStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RlcStatus) ProtoMessage() {}

func (x *RlcStatus) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[702]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RlcStatus.ProtoReflect.Descriptor instead.
func (*RlcStatus) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{702}
}

func (x *RlcStatus) GetReestablishmentIndication() ReestablishmentIndication {
	if x != nil {
		return x.ReestablishmentIndication
	}
	return ReestablishmentIndication_REESTABLISHMENT_INDICATION_REESTABLISHED
}

func (x *RlcStatus) GetIEExtensions() []*RlcStatusExtIes {
	if x != nil {
		return x.IEExtensions
	}
	return nil
}

// value set from xnap_v1.asn1:7356
// {RLCDuplicationInformation-ItemExtIEs}
type RlcduplicationInformationItemExtIes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *emptypb.Empty `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *RlcduplicationInformationItemExtIes) Reset() {
	*x = RlcduplicationInformationItemExtIes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[703]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RlcduplicationInformationItemExtIes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RlcduplicationInformationItemExtIes) ProtoMessage() {}

func (x *RlcduplicationInformationItemExtIes) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[703]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RlcduplicationInformationItemExtIes.ProtoReflect.Descriptor instead.
func (*RlcduplicationInformationItemExtIes) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{703}
}

func (x *RlcduplicationInformationItemExtIes) GetValue() *emptypb.Empty {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:7351
// {RLCDuplicationInformation}
type RlcduplicationInformation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RLcduplicationStateList *RlcduplicationStateList `protobuf:"bytes,1,opt,name=r_lcduplication_state_list,json=rLCDuplicationStateList,proto3" json:"r_lcduplication_state_list,omitempty"`
	// @inject_tag: aper:"optional,valueLB:0,valueUB:1,"
	RLcPrimaryIndicator *RlcprimaryIndicatorRlcduplicationInformation `protobuf:"varint,2,opt,name=r_lc_primary_indicator,json=rLC-PrimaryIndicator,proto3,enum=xnap.v1.RlcprimaryIndicatorRlcduplicationInformation,oneof" json:"r_lc_primary_indicator,omitempty" aper:"optional,valueLB:0,valueUB:1,"`
	// @inject_tag: aper:"optional,sizeLB:1,"
	IEExtensions []*RlcduplicationInformationItemExtIes `protobuf:"bytes,3,rep,name=i_e_extensions,json=iE-Extensions,proto3" json:"i_e_extensions,omitempty" aper:"optional,sizeLB:1,"`
}

func (x *RlcduplicationInformation) Reset() {
	*x = RlcduplicationInformation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[704]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RlcduplicationInformation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RlcduplicationInformation) ProtoMessage() {}

func (x *RlcduplicationInformation) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[704]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RlcduplicationInformation.ProtoReflect.Descriptor instead.
func (*RlcduplicationInformation) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{704}
}

func (x *RlcduplicationInformation) GetRLcduplicationStateList() *RlcduplicationStateList {
	if x != nil {
		return x.RLcduplicationStateList
	}
	return nil
}

func (x *RlcduplicationInformation) GetRLcPrimaryIndicator() RlcprimaryIndicatorRlcduplicationInformation {
	if x != nil && x.RLcPrimaryIndicator != nil {
		return *x.RLcPrimaryIndicator
	}
	return RlcprimaryIndicatorRlcduplicationInformation_R_LCPRIMARY_INDICATOR_RLCDUPLICATION_INFORMATION_TRUE
}

func (x *RlcduplicationInformation) GetIEExtensions() []*RlcduplicationInformationItemExtIes {
	if x != nil {
		return x.IEExtensions
	}
	return nil
}

// sequence from xnap_v1.asn1:7362
// {RLCDuplicationStateList}
type RlcduplicationStateList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"valueExt,sizeLB:1,sizeUB:3,"
	Value []*RlcduplicationStateItem `protobuf:"bytes,1,rep,name=value,proto3" json:"value,omitempty" aper:"valueExt,sizeLB:1,sizeUB:3,"`
}

func (x *RlcduplicationStateList) Reset() {
	*x = RlcduplicationStateList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[705]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RlcduplicationStateList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RlcduplicationStateList) ProtoMessage() {}

func (x *RlcduplicationStateList) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[705]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RlcduplicationStateList.ProtoReflect.Descriptor instead.
func (*RlcduplicationStateList) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{705}
}

func (x *RlcduplicationStateList) GetValue() []*RlcduplicationStateItem {
	if x != nil {
		return x.Value
	}
	return nil
}

// value set from xnap_v1.asn1:7368
// {RLCDuplicationState-ItemExtIEs}
type RlcduplicationStateItemExtIes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *emptypb.Empty `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *RlcduplicationStateItemExtIes) Reset() {
	*x = RlcduplicationStateItemExtIes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[706]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RlcduplicationStateItemExtIes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RlcduplicationStateItemExtIes) ProtoMessage() {}

func (x *RlcduplicationStateItemExtIes) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[706]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RlcduplicationStateItemExtIes.ProtoReflect.Descriptor instead.
func (*RlcduplicationStateItemExtIes) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{706}
}

func (x *RlcduplicationStateItemExtIes) GetValue() *emptypb.Empty {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:7363
// @inject_tag: aper:"valueExt"
// {RLCDuplicationState-Item}
type RlcduplicationStateItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"valueExt,valueLB:0,valueUB:1,"
	DuplicationState DuplicationStateRlcduplicationStateItem `protobuf:"varint,1,opt,name=duplication_state,json=duplicationState,proto3,enum=xnap.v1.DuplicationStateRlcduplicationStateItem" json:"duplication_state,omitempty" aper:"valueExt,valueLB:0,valueUB:1,"`
	// @inject_tag: aper:"optional,sizeLB:1,"
	IEExtensions []*RlcduplicationStateItemExtIes `protobuf:"bytes,2,rep,name=i_e_extensions,json=iE-Extensions,proto3" json:"i_e_extensions,omitempty" aper:"optional,sizeLB:1,"`
}

func (x *RlcduplicationStateItem) Reset() {
	*x = RlcduplicationStateItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[707]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RlcduplicationStateItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RlcduplicationStateItem) ProtoMessage() {}

func (x *RlcduplicationStateItem) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[707]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RlcduplicationStateItem.ProtoReflect.Descriptor instead.
func (*RlcduplicationStateItem) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{707}
}

func (x *RlcduplicationStateItem) GetDuplicationState() DuplicationStateRlcduplicationStateItem {
	if x != nil {
		return x.DuplicationState
	}
	return DuplicationStateRlcduplicationStateItem_DUPLICATION_STATE_RLCDUPLICATION_STATE_ITEM_ACTIVE
}

func (x *RlcduplicationStateItem) GetIEExtensions() []*RlcduplicationStateItemExtIes {
	if x != nil {
		return x.IEExtensions
	}
	return nil
}

// range of Integer from xnap_v1.asn1:7378
// {RFSP-Index}
type RfspIndex struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"valueLB:1,valueUB:256,"
	Value int32 `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty" aper:"valueLB:1,valueUB:256,"`
}

func (x *RfspIndex) Reset() {
	*x = RfspIndex{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[708]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RfspIndex) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RfspIndex) ProtoMessage() {}

func (x *RfspIndex) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[708]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RfspIndex.ProtoReflect.Descriptor instead.
func (*RfspIndex) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{708}
}

func (x *RfspIndex) GetValue() int32 {
	if x != nil {
		return x.Value
	}
	return 0
}

// value set from xnap_v1.asn1:7394
// {RRCConnections-ExtIEs}
type RrcconnectionsExtIes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *emptypb.Empty `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *RrcconnectionsExtIes) Reset() {
	*x = RrcconnectionsExtIes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[709]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RrcconnectionsExtIes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RrcconnectionsExtIes) ProtoMessage() {}

func (x *RrcconnectionsExtIes) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[709]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RrcconnectionsExtIes.ProtoReflect.Descriptor instead.
func (*RrcconnectionsExtIes) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{709}
}

func (x *RrcconnectionsExtIes) GetValue() *emptypb.Empty {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:7388
// @inject_tag: aper:"valueExt"
// {RRCConnections}
type Rrcconnections struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NoofRrcconnections                  *NoofRrcconnections                  `protobuf:"bytes,1,opt,name=noof_rrcconnections,json=noofRRCConnections,proto3" json:"noof_rrcconnections,omitempty"`
	AvailableRrcconnectionCapacityValue *AvailableRrcconnectionCapacityValue `protobuf:"bytes,2,opt,name=available_rrcconnection_capacity_value,json=availableRRCConnectionCapacityValue,proto3" json:"available_rrcconnection_capacity_value,omitempty"`
	// @inject_tag: aper:"optional,sizeLB:1,"
	IEExtensions []*RrcconnectionsExtIes `protobuf:"bytes,3,rep,name=i_e_extensions,json=iE-Extensions,proto3" json:"i_e_extensions,omitempty" aper:"optional,sizeLB:1,"`
}

func (x *Rrcconnections) Reset() {
	*x = Rrcconnections{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[710]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Rrcconnections) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Rrcconnections) ProtoMessage() {}

func (x *Rrcconnections) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[710]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Rrcconnections.ProtoReflect.Descriptor instead.
func (*Rrcconnections) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{710}
}

func (x *Rrcconnections) GetNoofRrcconnections() *NoofRrcconnections {
	if x != nil {
		return x.NoofRrcconnections
	}
	return nil
}

func (x *Rrcconnections) GetAvailableRrcconnectionCapacityValue() *AvailableRrcconnectionCapacityValue {
	if x != nil {
		return x.AvailableRrcconnectionCapacityValue
	}
	return nil
}

func (x *Rrcconnections) GetIEExtensions() []*RrcconnectionsExtIes {
	if x != nil {
		return x.IEExtensions
	}
	return nil
}

// value set from xnap_v1.asn1:7407
// {RRCReestab-initiated-ExtIEs}
type RrcreestabinitiatedExtIes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *emptypb.Empty `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *RrcreestabinitiatedExtIes) Reset() {
	*x = RrcreestabinitiatedExtIes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[711]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RrcreestabinitiatedExtIes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RrcreestabinitiatedExtIes) ProtoMessage() {}

func (x *RrcreestabinitiatedExtIes) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[711]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RrcreestabinitiatedExtIes.ProtoReflect.Descriptor instead.
func (*RrcreestabinitiatedExtIes) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{711}
}

func (x *RrcreestabinitiatedExtIes) GetValue() *emptypb.Empty {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:7402
// @inject_tag: aper:"valueExt"
// {RRCReestab-initiated}
type Rrcreestabinitiated struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RRrcreestabInitiatedReporting *RrcreestabInitiatedReporting `protobuf:"bytes,1,opt,name=r_rrcreestab_initiated_reporting,json=rRRCReestab-initiated-reporting,proto3" json:"r_rrcreestab_initiated_reporting,omitempty"`
	// @inject_tag: aper:"optional,sizeLB:1,"
	IEExtensions []*RrcreestabinitiatedExtIes `protobuf:"bytes,2,rep,name=i_e_extensions,json=iE-Extensions,proto3" json:"i_e_extensions,omitempty" aper:"optional,sizeLB:1,"`
}

func (x *Rrcreestabinitiated) Reset() {
	*x = Rrcreestabinitiated{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[712]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Rrcreestabinitiated) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Rrcreestabinitiated) ProtoMessage() {}

func (x *Rrcreestabinitiated) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[712]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Rrcreestabinitiated.ProtoReflect.Descriptor instead.
func (*Rrcreestabinitiated) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{712}
}

func (x *Rrcreestabinitiated) GetRRrcreestabInitiatedReporting() *RrcreestabInitiatedReporting {
	if x != nil {
		return x.RRrcreestabInitiatedReporting
	}
	return nil
}

func (x *Rrcreestabinitiated) GetIEExtensions() []*RrcreestabinitiatedExtIes {
	if x != nil {
		return x.IEExtensions
	}
	return nil
}

// value set from xnap_v1.asn1:7417
// {RRCReestab-Initiated-Reporting-ExtIEs}
type RrcreestabInitiatedReportingExtIes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *emptypb.Empty `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *RrcreestabInitiatedReportingExtIes) Reset() {
	*x = RrcreestabInitiatedReportingExtIes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[713]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RrcreestabInitiatedReportingExtIes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RrcreestabInitiatedReportingExtIes) ProtoMessage() {}

func (x *RrcreestabInitiatedReportingExtIes) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[713]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RrcreestabInitiatedReportingExtIes.ProtoReflect.Descriptor instead.
func (*RrcreestabInitiatedReportingExtIes) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{713}
}

func (x *RrcreestabInitiatedReportingExtIes) GetValue() *emptypb.Empty {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:7412
// {RRCReestab-Initiated-Reporting}
type RrcreestabInitiatedReporting struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// choice from xnap_v1.asn1:7412
	//
	// Types that are assignable to RrcreestabInitiatedReporting:
	//	*RrcreestabInitiatedReporting_RRcreestabReportingWoUerlfreport
	//	*RrcreestabInitiatedReporting_RRcreestabReportingWithUerlfreport
	//	*RrcreestabInitiatedReporting_ChoiceExtension
	RrcreestabInitiatedReporting isRrcreestabInitiatedReporting_RrcreestabInitiatedReporting `protobuf_oneof:"rrcreestab_initiated_reporting"`
}

func (x *RrcreestabInitiatedReporting) Reset() {
	*x = RrcreestabInitiatedReporting{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[714]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RrcreestabInitiatedReporting) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RrcreestabInitiatedReporting) ProtoMessage() {}

func (x *RrcreestabInitiatedReporting) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[714]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RrcreestabInitiatedReporting.ProtoReflect.Descriptor instead.
func (*RrcreestabInitiatedReporting) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{714}
}

func (m *RrcreestabInitiatedReporting) GetRrcreestabInitiatedReporting() isRrcreestabInitiatedReporting_RrcreestabInitiatedReporting {
	if m != nil {
		return m.RrcreestabInitiatedReporting
	}
	return nil
}

func (x *RrcreestabInitiatedReporting) GetRRcreestabReportingWoUerlfreport() *RrcreestabInitiatedReportingwoUErlfreport {
	if x, ok := x.GetRrcreestabInitiatedReporting().(*RrcreestabInitiatedReporting_RRcreestabReportingWoUerlfreport); ok {
		return x.RRcreestabReportingWoUerlfreport
	}
	return nil
}

func (x *RrcreestabInitiatedReporting) GetRRcreestabReportingWithUerlfreport() *RrcreestabInitiatedReportingwithUErlfreport {
	if x, ok := x.GetRrcreestabInitiatedReporting().(*RrcreestabInitiatedReporting_RRcreestabReportingWithUerlfreport); ok {
		return x.RRcreestabReportingWithUerlfreport
	}
	return nil
}

func (x *RrcreestabInitiatedReporting) GetChoiceExtension() *RrcreestabInitiatedReportingExtIes {
	if x, ok := x.GetRrcreestabInitiatedReporting().(*RrcreestabInitiatedReporting_ChoiceExtension); ok {
		return x.ChoiceExtension
	}
	return nil
}

type isRrcreestabInitiatedReporting_RrcreestabInitiatedReporting interface {
	isRrcreestabInitiatedReporting_RrcreestabInitiatedReporting()
}

type RrcreestabInitiatedReporting_RRcreestabReportingWoUerlfreport struct {
	// @inject_tag: aper:"choiceIdx:1,valueExt,"
	RRcreestabReportingWoUerlfreport *RrcreestabInitiatedReportingwoUErlfreport `protobuf:"bytes,1,opt,name=r_rcreestab_reporting_wo_uerlfreport,json=rRCReestab-reporting-wo-UERLFReport,proto3,oneof" aper:"choiceIdx:1,valueExt,"`
}

type RrcreestabInitiatedReporting_RRcreestabReportingWithUerlfreport struct {
	// @inject_tag: aper:"choiceIdx:2,valueExt,"
	RRcreestabReportingWithUerlfreport *RrcreestabInitiatedReportingwithUErlfreport `protobuf:"bytes,2,opt,name=r_rcreestab_reporting_with_uerlfreport,json=rRCReestab-reporting-with-UERLFReport,proto3,oneof" aper:"choiceIdx:2,valueExt,"`
}

type RrcreestabInitiatedReporting_ChoiceExtension struct {
	// @inject_tag: aper:"choiceIdx:3,"
	ChoiceExtension *RrcreestabInitiatedReportingExtIes `protobuf:"bytes,3,opt,name=choice_extension,json=choice-extension,proto3,oneof" aper:"choiceIdx:3,"`
}

func (*RrcreestabInitiatedReporting_RRcreestabReportingWoUerlfreport) isRrcreestabInitiatedReporting_RrcreestabInitiatedReporting() {
}

func (*RrcreestabInitiatedReporting_RRcreestabReportingWithUerlfreport) isRrcreestabInitiatedReporting_RrcreestabInitiatedReporting() {
}

func (*RrcreestabInitiatedReporting_ChoiceExtension) isRrcreestabInitiatedReporting_RrcreestabInitiatedReporting() {
}

// value set from xnap_v1.asn1:7430
// {RRCReestab-Initiated-Reporting-wo-UERLFReport-ExtIEs}
type RrcreestabInitiatedReportingwoUErlfreportExtIes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *emptypb.Empty `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *RrcreestabInitiatedReportingwoUErlfreportExtIes) Reset() {
	*x = RrcreestabInitiatedReportingwoUErlfreportExtIes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[715]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RrcreestabInitiatedReportingwoUErlfreportExtIes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RrcreestabInitiatedReportingwoUErlfreportExtIes) ProtoMessage() {}

func (x *RrcreestabInitiatedReportingwoUErlfreportExtIes) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[715]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RrcreestabInitiatedReportingwoUErlfreportExtIes.ProtoReflect.Descriptor instead.
func (*RrcreestabInitiatedReportingwoUErlfreportExtIes) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{715}
}

func (x *RrcreestabInitiatedReportingwoUErlfreportExtIes) GetValue() *emptypb.Empty {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:7422
// @inject_tag: aper:"valueExt"
// {RRCReestab-Initiated-Reporting-wo-UERLFReport}
type RrcreestabInitiatedReportingwoUErlfreport struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FailureCellPci *NgRAnCellPci `protobuf:"bytes,1,opt,name=failure_cell_pci,json=failureCellPCI,proto3" json:"failure_cell_pci,omitempty"`
	// @inject_tag: aper:"valueExt,"
	ReestabCellCgi *GlobalNgRAncellID `protobuf:"bytes,2,opt,name=reestab_cell_cgi,json=reestabCellCGI,proto3" json:"reestab_cell_cgi,omitempty" aper:"valueExt,"`
	CRnti          *CRNti             `protobuf:"bytes,3,opt,name=c_rnti,json=c-RNTI,proto3" json:"c_rnti,omitempty"`
	ShortMacI      *MacI              `protobuf:"bytes,4,opt,name=short_mac_i,json=shortMAC-I,proto3" json:"short_mac_i,omitempty"`
	// @inject_tag: aper:"optional,sizeLB:1,"
	IEExtensions []*RrcreestabInitiatedReportingwoUErlfreportExtIes `protobuf:"bytes,5,rep,name=i_e_extensions,json=iE-Extensions,proto3" json:"i_e_extensions,omitempty" aper:"optional,sizeLB:1,"`
}

func (x *RrcreestabInitiatedReportingwoUErlfreport) Reset() {
	*x = RrcreestabInitiatedReportingwoUErlfreport{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[716]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RrcreestabInitiatedReportingwoUErlfreport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RrcreestabInitiatedReportingwoUErlfreport) ProtoMessage() {}

func (x *RrcreestabInitiatedReportingwoUErlfreport) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[716]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RrcreestabInitiatedReportingwoUErlfreport.ProtoReflect.Descriptor instead.
func (*RrcreestabInitiatedReportingwoUErlfreport) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{716}
}

func (x *RrcreestabInitiatedReportingwoUErlfreport) GetFailureCellPci() *NgRAnCellPci {
	if x != nil {
		return x.FailureCellPci
	}
	return nil
}

func (x *RrcreestabInitiatedReportingwoUErlfreport) GetReestabCellCgi() *GlobalNgRAncellID {
	if x != nil {
		return x.ReestabCellCgi
	}
	return nil
}

func (x *RrcreestabInitiatedReportingwoUErlfreport) GetCRnti() *CRNti {
	if x != nil {
		return x.CRnti
	}
	return nil
}

func (x *RrcreestabInitiatedReportingwoUErlfreport) GetShortMacI() *MacI {
	if x != nil {
		return x.ShortMacI
	}
	return nil
}

func (x *RrcreestabInitiatedReportingwoUErlfreport) GetIEExtensions() []*RrcreestabInitiatedReportingwoUErlfreportExtIes {
	if x != nil {
		return x.IEExtensions
	}
	return nil
}

// value set from xnap_v1.asn1:7441
// {RRCReestab-Initiated-Reporting-with-UERLFReport-ExtIEs}
type RrcreestabInitiatedReportingwithUErlfreportExtIes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *emptypb.Empty `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *RrcreestabInitiatedReportingwithUErlfreportExtIes) Reset() {
	*x = RrcreestabInitiatedReportingwithUErlfreportExtIes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[717]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RrcreestabInitiatedReportingwithUErlfreportExtIes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RrcreestabInitiatedReportingwithUErlfreportExtIes) ProtoMessage() {}

func (x *RrcreestabInitiatedReportingwithUErlfreportExtIes) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[717]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RrcreestabInitiatedReportingwithUErlfreportExtIes.ProtoReflect.Descriptor instead.
func (*RrcreestabInitiatedReportingwithUErlfreportExtIes) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{717}
}

func (x *RrcreestabInitiatedReportingwithUErlfreportExtIes) GetValue() *emptypb.Empty {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:7436
// @inject_tag: aper:"valueExt"
// {RRCReestab-Initiated-Reporting-with-UERLFReport}
type RrcreestabInitiatedReportingwithUErlfreport struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UErlfreportContainer *UerlfreportContainer `protobuf:"bytes,1,opt,name=u_erlfreport_container,json=uERLFReportContainer,proto3" json:"u_erlfreport_container,omitempty"`
	// @inject_tag: aper:"optional,sizeLB:1,"
	IEExtensions []*RrcreestabInitiatedReportingwithUErlfreportExtIes `protobuf:"bytes,2,rep,name=i_e_extensions,json=iE-Extensions,proto3" json:"i_e_extensions,omitempty" aper:"optional,sizeLB:1,"`
}

func (x *RrcreestabInitiatedReportingwithUErlfreport) Reset() {
	*x = RrcreestabInitiatedReportingwithUErlfreport{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[718]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RrcreestabInitiatedReportingwithUErlfreport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RrcreestabInitiatedReportingwithUErlfreport) ProtoMessage() {}

func (x *RrcreestabInitiatedReportingwithUErlfreport) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[718]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RrcreestabInitiatedReportingwithUErlfreport.ProtoReflect.Descriptor instead.
func (*RrcreestabInitiatedReportingwithUErlfreport) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{718}
}

func (x *RrcreestabInitiatedReportingwithUErlfreport) GetUErlfreportContainer() *UerlfreportContainer {
	if x != nil {
		return x.UErlfreportContainer
	}
	return nil
}

func (x *RrcreestabInitiatedReportingwithUErlfreport) GetIEExtensions() []*RrcreestabInitiatedReportingwithUErlfreportExtIes {
	if x != nil {
		return x.IEExtensions
	}
	return nil
}

// value set from xnap_v1.asn1:7452
// {RRCSetup-initiated-ExtIEs}
type RrcsetupinitiatedExtIes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *emptypb.Empty `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *RrcsetupinitiatedExtIes) Reset() {
	*x = RrcsetupinitiatedExtIes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[719]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RrcsetupinitiatedExtIes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RrcsetupinitiatedExtIes) ProtoMessage() {}

func (x *RrcsetupinitiatedExtIes) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[719]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RrcsetupinitiatedExtIes.ProtoReflect.Descriptor instead.
func (*RrcsetupinitiatedExtIes) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{719}
}

func (x *RrcsetupinitiatedExtIes) GetValue() *emptypb.Empty {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:7446
// @inject_tag: aper:"valueExt"
// {RRCSetup-initiated}
type Rrcsetupinitiated struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RRrcsetupInitiatedReporting *RrcsetupInitiatedReporting `protobuf:"bytes,1,opt,name=r_rrcsetup_initiated_reporting,json=rRRCSetup-Initiated-Reporting,proto3" json:"r_rrcsetup_initiated_reporting,omitempty"`
	// @inject_tag: aper:"optional,"
	UErlfreportContainer *UerlfreportContainer `protobuf:"bytes,2,opt,name=u_erlfreport_container,json=uERLFReportContainer,proto3,oneof" json:"u_erlfreport_container,omitempty" aper:"optional,"`
	// @inject_tag: aper:"optional,sizeLB:1,"
	IEExtensions []*RrcsetupinitiatedExtIes `protobuf:"bytes,3,rep,name=i_e_extensions,json=iE-Extensions,proto3" json:"i_e_extensions,omitempty" aper:"optional,sizeLB:1,"`
}

func (x *Rrcsetupinitiated) Reset() {
	*x = Rrcsetupinitiated{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[720]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Rrcsetupinitiated) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Rrcsetupinitiated) ProtoMessage() {}

func (x *Rrcsetupinitiated) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[720]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Rrcsetupinitiated.ProtoReflect.Descriptor instead.
func (*Rrcsetupinitiated) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{720}
}

func (x *Rrcsetupinitiated) GetRRrcsetupInitiatedReporting() *RrcsetupInitiatedReporting {
	if x != nil {
		return x.RRrcsetupInitiatedReporting
	}
	return nil
}

func (x *Rrcsetupinitiated) GetUErlfreportContainer() *UerlfreportContainer {
	if x != nil {
		return x.UErlfreportContainer
	}
	return nil
}

func (x *Rrcsetupinitiated) GetIEExtensions() []*RrcsetupinitiatedExtIes {
	if x != nil {
		return x.IEExtensions
	}
	return nil
}

// value set from xnap_v1.asn1:7461
// {RRCSetup-Initiated-Reporting-ExtIEs}
type RrcsetupInitiatedReportingExtIes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *emptypb.Empty `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *RrcsetupInitiatedReportingExtIes) Reset() {
	*x = RrcsetupInitiatedReportingExtIes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[721]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RrcsetupInitiatedReportingExtIes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RrcsetupInitiatedReportingExtIes) ProtoMessage() {}

func (x *RrcsetupInitiatedReportingExtIes) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[721]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RrcsetupInitiatedReportingExtIes.ProtoReflect.Descriptor instead.
func (*RrcsetupInitiatedReportingExtIes) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{721}
}

func (x *RrcsetupInitiatedReportingExtIes) GetValue() *emptypb.Empty {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:7457
// {RRCSetup-Initiated-Reporting}
type RrcsetupInitiatedReporting struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// choice from xnap_v1.asn1:7457
	//
	// Types that are assignable to RrcsetupInitiatedReporting:
	//	*RrcsetupInitiatedReporting_RRcsetupReportingWithUerlfreport
	//	*RrcsetupInitiatedReporting_ChoiceExtension
	RrcsetupInitiatedReporting isRrcsetupInitiatedReporting_RrcsetupInitiatedReporting `protobuf_oneof:"rrcsetup_initiated_reporting"`
}

func (x *RrcsetupInitiatedReporting) Reset() {
	*x = RrcsetupInitiatedReporting{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[722]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RrcsetupInitiatedReporting) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RrcsetupInitiatedReporting) ProtoMessage() {}

func (x *RrcsetupInitiatedReporting) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[722]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RrcsetupInitiatedReporting.ProtoReflect.Descriptor instead.
func (*RrcsetupInitiatedReporting) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{722}
}

func (m *RrcsetupInitiatedReporting) GetRrcsetupInitiatedReporting() isRrcsetupInitiatedReporting_RrcsetupInitiatedReporting {
	if m != nil {
		return m.RrcsetupInitiatedReporting
	}
	return nil
}

func (x *RrcsetupInitiatedReporting) GetRRcsetupReportingWithUerlfreport() *RrcsetupInitiatedReportingwithUErlfreport {
	if x, ok := x.GetRrcsetupInitiatedReporting().(*RrcsetupInitiatedReporting_RRcsetupReportingWithUerlfreport); ok {
		return x.RRcsetupReportingWithUerlfreport
	}
	return nil
}

func (x *RrcsetupInitiatedReporting) GetChoiceExtension() *RrcsetupInitiatedReportingExtIes {
	if x, ok := x.GetRrcsetupInitiatedReporting().(*RrcsetupInitiatedReporting_ChoiceExtension); ok {
		return x.ChoiceExtension
	}
	return nil
}

type isRrcsetupInitiatedReporting_RrcsetupInitiatedReporting interface {
	isRrcsetupInitiatedReporting_RrcsetupInitiatedReporting()
}

type RrcsetupInitiatedReporting_RRcsetupReportingWithUerlfreport struct {
	// @inject_tag: aper:"choiceIdx:1,valueExt,"
	RRcsetupReportingWithUerlfreport *RrcsetupInitiatedReportingwithUErlfreport `protobuf:"bytes,1,opt,name=r_rcsetup_reporting_with_uerlfreport,json=rRCSetup-reporting-with-UERLFReport,proto3,oneof" aper:"choiceIdx:1,valueExt,"`
}

type RrcsetupInitiatedReporting_ChoiceExtension struct {
	// @inject_tag: aper:"choiceIdx:2,"
	ChoiceExtension *RrcsetupInitiatedReportingExtIes `protobuf:"bytes,2,opt,name=choice_extension,json=choice-extension,proto3,oneof" aper:"choiceIdx:2,"`
}

func (*RrcsetupInitiatedReporting_RRcsetupReportingWithUerlfreport) isRrcsetupInitiatedReporting_RrcsetupInitiatedReporting() {
}

func (*RrcsetupInitiatedReporting_ChoiceExtension) isRrcsetupInitiatedReporting_RrcsetupInitiatedReporting() {
}

// value set from xnap_v1.asn1:7471
// {RRCSetup-Initiated-Reporting-with-UERLFReport-ExtIEs}
type RrcsetupInitiatedReportingwithUErlfreportExtIes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *emptypb.Empty `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *RrcsetupInitiatedReportingwithUErlfreportExtIes) Reset() {
	*x = RrcsetupInitiatedReportingwithUErlfreportExtIes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[723]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RrcsetupInitiatedReportingwithUErlfreportExtIes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RrcsetupInitiatedReportingwithUErlfreportExtIes) ProtoMessage() {}

func (x *RrcsetupInitiatedReportingwithUErlfreportExtIes) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[723]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RrcsetupInitiatedReportingwithUErlfreportExtIes.ProtoReflect.Descriptor instead.
func (*RrcsetupInitiatedReportingwithUErlfreportExtIes) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{723}
}

func (x *RrcsetupInitiatedReportingwithUErlfreportExtIes) GetValue() *emptypb.Empty {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:7466
// @inject_tag: aper:"valueExt"
// {RRCSetup-Initiated-Reporting-with-UERLFReport}
type RrcsetupInitiatedReportingwithUErlfreport struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UErlfreportContainer *UerlfreportContainer `protobuf:"bytes,1,opt,name=u_erlfreport_container,json=uERLFReportContainer,proto3" json:"u_erlfreport_container,omitempty"`
	// @inject_tag: aper:"optional,sizeLB:1,"
	IEExtensions []*RrcsetupInitiatedReportingwithUErlfreportExtIes `protobuf:"bytes,2,rep,name=i_e_extensions,json=iE-Extensions,proto3" json:"i_e_extensions,omitempty" aper:"optional,sizeLB:1,"`
}

func (x *RrcsetupInitiatedReportingwithUErlfreport) Reset() {
	*x = RrcsetupInitiatedReportingwithUErlfreport{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[724]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RrcsetupInitiatedReportingwithUErlfreport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RrcsetupInitiatedReportingwithUErlfreport) ProtoMessage() {}

func (x *RrcsetupInitiatedReportingwithUErlfreport) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[724]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RrcsetupInitiatedReportingwithUErlfreport.ProtoReflect.Descriptor instead.
func (*RrcsetupInitiatedReportingwithUErlfreport) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{724}
}

func (x *RrcsetupInitiatedReportingwithUErlfreport) GetUErlfreportContainer() *UerlfreportContainer {
	if x != nil {
		return x.UErlfreportContainer
	}
	return nil
}

func (x *RrcsetupInitiatedReportingwithUErlfreport) GetIEExtensions() []*RrcsetupInitiatedReportingwithUErlfreportExtIes {
	if x != nil {
		return x.IEExtensions
	}
	return nil
}

// value set from xnap_v1.asn1:7490
// {SecondarydataForwardingInfoFromTarget-Item-ExtIEs}
type SecondarydataForwardingInfoFromTargetItemExtIes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *emptypb.Empty `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *SecondarydataForwardingInfoFromTargetItemExtIes) Reset() {
	*x = SecondarydataForwardingInfoFromTargetItemExtIes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[725]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SecondarydataForwardingInfoFromTargetItemExtIes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SecondarydataForwardingInfoFromTargetItemExtIes) ProtoMessage() {}

func (x *SecondarydataForwardingInfoFromTargetItemExtIes) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[725]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SecondarydataForwardingInfoFromTargetItemExtIes.ProtoReflect.Descriptor instead.
func (*SecondarydataForwardingInfoFromTargetItemExtIes) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{725}
}

func (x *SecondarydataForwardingInfoFromTargetItemExtIes) GetValue() *emptypb.Empty {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:7485
// @inject_tag: aper:"valueExt"
// {SecondarydataForwardingInfoFromTarget-Item}
type SecondarydataForwardingInfoFromTargetItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"valueExt,"
	SecondarydataForwardingInfoFromTarget *DataForwardingInfoFromTargetNgrannode `protobuf:"bytes,1,opt,name=secondarydata_forwarding_info_from_target,json=secondarydataForwardingInfoFromTarget,proto3" json:"secondarydata_forwarding_info_from_target,omitempty" aper:"valueExt,"`
	// @inject_tag: aper:"optional,sizeLB:1,"
	IEExtensions []*SecondarydataForwardingInfoFromTargetItemExtIes `protobuf:"bytes,2,rep,name=i_e_extensions,json=iE-Extensions,proto3" json:"i_e_extensions,omitempty" aper:"optional,sizeLB:1,"`
}

func (x *SecondarydataForwardingInfoFromTargetItem) Reset() {
	*x = SecondarydataForwardingInfoFromTargetItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[726]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SecondarydataForwardingInfoFromTargetItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SecondarydataForwardingInfoFromTargetItem) ProtoMessage() {}

func (x *SecondarydataForwardingInfoFromTargetItem) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[726]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SecondarydataForwardingInfoFromTargetItem.ProtoReflect.Descriptor instead.
func (*SecondarydataForwardingInfoFromTargetItem) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{726}
}

func (x *SecondarydataForwardingInfoFromTargetItem) GetSecondarydataForwardingInfoFromTarget() *DataForwardingInfoFromTargetNgrannode {
	if x != nil {
		return x.SecondarydataForwardingInfoFromTarget
	}
	return nil
}

func (x *SecondarydataForwardingInfoFromTargetItem) GetIEExtensions() []*SecondarydataForwardingInfoFromTargetItemExtIes {
	if x != nil {
		return x.IEExtensions
	}
	return nil
}

// sequence from xnap_v1.asn1:7496
// {SecondarydataForwardingInfoFromTarget-List}
type SecondarydataForwardingInfoFromTargetList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"valueExt,sizeLB:1,sizeUB:3,"
	Value []*SecondarydataForwardingInfoFromTargetItem `protobuf:"bytes,1,rep,name=value,proto3" json:"value,omitempty" aper:"valueExt,sizeLB:1,sizeUB:3,"`
}

func (x *SecondarydataForwardingInfoFromTargetList) Reset() {
	*x = SecondarydataForwardingInfoFromTargetList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[727]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SecondarydataForwardingInfoFromTargetList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SecondarydataForwardingInfoFromTargetList) ProtoMessage() {}

func (x *SecondarydataForwardingInfoFromTargetList) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[727]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SecondarydataForwardingInfoFromTargetList.ProtoReflect.Descriptor instead.
func (*SecondarydataForwardingInfoFromTargetList) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{727}
}

func (x *SecondarydataForwardingInfoFromTargetList) GetValue() []*SecondarydataForwardingInfoFromTargetItem {
	if x != nil {
		return x.Value
	}
	return nil
}

// value set from xnap_v1.asn1:7507
// {SecondaryRATUsageInformation-ExtIEs}
type SecondaryRatusageInformationExtIes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *emptypb.Empty `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *SecondaryRatusageInformationExtIes) Reset() {
	*x = SecondaryRatusageInformationExtIes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[728]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SecondaryRatusageInformationExtIes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SecondaryRatusageInformationExtIes) ProtoMessage() {}

func (x *SecondaryRatusageInformationExtIes) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[728]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SecondaryRatusageInformationExtIes.ProtoReflect.Descriptor instead.
func (*SecondaryRatusageInformationExtIes) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{728}
}

func (x *SecondaryRatusageInformationExtIes) GetValue() *emptypb.Empty {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:7501
// @inject_tag: aper:"valueExt"
// {SecondaryRATUsageInformation}
type SecondaryRatusageInformation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"optional,valueExt,"
	PDusessionUsageReport *PdusessionUsageReport `protobuf:"bytes,1,opt,name=p_dusession_usage_report,json=pDUSessionUsageReport,proto3,oneof" json:"p_dusession_usage_report,omitempty" aper:"optional,valueExt,"`
	// @inject_tag: aper:"optional,"
	QosFlowsUsageReportList *QoSflowsUsageReportList `protobuf:"bytes,2,opt,name=qos_flows_usage_report_list,json=qosFlowsUsageReportList,proto3,oneof" json:"qos_flows_usage_report_list,omitempty" aper:"optional,"`
	// @inject_tag: aper:"optional,sizeLB:1,"
	IEExtension []*SecondaryRatusageInformationExtIes `protobuf:"bytes,3,rep,name=i_e_extension,json=iE-Extension,proto3" json:"i_e_extension,omitempty" aper:"optional,sizeLB:1,"`
}

func (x *SecondaryRatusageInformation) Reset() {
	*x = SecondaryRatusageInformation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[729]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SecondaryRatusageInformation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SecondaryRatusageInformation) ProtoMessage() {}

func (x *SecondaryRatusageInformation) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[729]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SecondaryRatusageInformation.ProtoReflect.Descriptor instead.
func (*SecondaryRatusageInformation) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{729}
}

func (x *SecondaryRatusageInformation) GetPDusessionUsageReport() *PdusessionUsageReport {
	if x != nil {
		return x.PDusessionUsageReport
	}
	return nil
}

func (x *SecondaryRatusageInformation) GetQosFlowsUsageReportList() *QoSflowsUsageReportList {
	if x != nil {
		return x.QosFlowsUsageReportList
	}
	return nil
}

func (x *SecondaryRatusageInformation) GetIEExtension() []*SecondaryRatusageInformationExtIes {
	if x != nil {
		return x.IEExtension
	}
	return nil
}

// value set from xnap_v1.asn1:7520
// {SecurityIndication-ExtIEs}
type SecurityIndicationExtIes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *emptypb.Empty `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *SecurityIndicationExtIes) Reset() {
	*x = SecurityIndicationExtIes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[730]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SecurityIndicationExtIes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SecurityIndicationExtIes) ProtoMessage() {}

func (x *SecurityIndicationExtIes) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[730]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SecurityIndicationExtIes.ProtoReflect.Descriptor instead.
func (*SecurityIndicationExtIes) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{730}
}

func (x *SecurityIndicationExtIes) GetValue() *emptypb.Empty {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:7512
// @inject_tag: aper:"valueExt"
// {SecurityIndication}
type SecurityIndication struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"valueExt,valueLB:0,valueUB:2,"
	IntegrityProtectionIndication IntegrityProtectionIndicationSecurityIndication `protobuf:"varint,1,opt,name=integrity_protection_indication,json=integrityProtectionIndication,proto3,enum=xnap.v1.IntegrityProtectionIndicationSecurityIndication" json:"integrity_protection_indication,omitempty" aper:"valueExt,valueLB:0,valueUB:2,"`
	// @inject_tag: aper:"valueExt,valueLB:0,valueUB:2,"
	ConfidentialityProtectionIndication ConfidentialityProtectionIndicationSecurityIndication `protobuf:"varint,2,opt,name=confidentiality_protection_indication,json=confidentialityProtectionIndication,proto3,enum=xnap.v1.ConfidentialityProtectionIndicationSecurityIndication" json:"confidentiality_protection_indication,omitempty" aper:"valueExt,valueLB:0,valueUB:2,"`
	// @inject_tag: aper:"optional,valueExt,"
	MaximumIpdatarate *MaximumIpdatarate `protobuf:"bytes,3,opt,name=maximum_ipdatarate,json=maximumIPdatarate,proto3,oneof" json:"maximum_ipdatarate,omitempty" aper:"optional,valueExt,"`
	// @inject_tag: aper:"optional,sizeLB:1,"
	IEExtensions []*SecurityIndicationExtIes `protobuf:"bytes,4,rep,name=i_e_extensions,json=iE-Extensions,proto3" json:"i_e_extensions,omitempty" aper:"optional,sizeLB:1,"`
}

func (x *SecurityIndication) Reset() {
	*x = SecurityIndication{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[731]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SecurityIndication) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SecurityIndication) ProtoMessage() {}

func (x *SecurityIndication) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[731]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SecurityIndication.ProtoReflect.Descriptor instead.
func (*SecurityIndication) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{731}
}

func (x *SecurityIndication) GetIntegrityProtectionIndication() IntegrityProtectionIndicationSecurityIndication {
	if x != nil {
		return x.IntegrityProtectionIndication
	}
	return IntegrityProtectionIndicationSecurityIndication_INTEGRITY_PROTECTION_INDICATION_SECURITY_INDICATION_REQUIRED
}

func (x *SecurityIndication) GetConfidentialityProtectionIndication() ConfidentialityProtectionIndicationSecurityIndication {
	if x != nil {
		return x.ConfidentialityProtectionIndication
	}
	return ConfidentialityProtectionIndicationSecurityIndication_CONFIDENTIALITY_PROTECTION_INDICATION_SECURITY_INDICATION_REQUIRED
}

func (x *SecurityIndication) GetMaximumIpdatarate() *MaximumIpdatarate {
	if x != nil {
		return x.MaximumIpdatarate
	}
	return nil
}

func (x *SecurityIndication) GetIEExtensions() []*SecurityIndicationExtIes {
	if x != nil {
		return x.IEExtensions
	}
	return nil
}

// value set from xnap_v1.asn1:7532
// {SecurityResult-ExtIEs}
type SecurityResultExtIes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *emptypb.Empty `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *SecurityResultExtIes) Reset() {
	*x = SecurityResultExtIes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[732]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SecurityResultExtIes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SecurityResultExtIes) ProtoMessage() {}

func (x *SecurityResultExtIes) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[732]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SecurityResultExtIes.ProtoReflect.Descriptor instead.
func (*SecurityResultExtIes) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{732}
}

func (x *SecurityResultExtIes) GetValue() *emptypb.Empty {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:7526
// @inject_tag: aper:"valueExt"
// {SecurityResult}
type SecurityResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"valueExt,valueLB:0,valueUB:1,"
	IntegrityProtectionResult IntegrityProtectionResultSecurityResult `protobuf:"varint,1,opt,name=integrity_protection_result,json=integrityProtectionResult,proto3,enum=xnap.v1.IntegrityProtectionResultSecurityResult" json:"integrity_protection_result,omitempty" aper:"valueExt,valueLB:0,valueUB:1,"`
	// @inject_tag: aper:"valueExt,valueLB:0,valueUB:1,"
	ConfidentialityProtectionResult ConfidentialityProtectionResultSecurityResult `protobuf:"varint,2,opt,name=confidentiality_protection_result,json=confidentialityProtectionResult,proto3,enum=xnap.v1.ConfidentialityProtectionResultSecurityResult" json:"confidentiality_protection_result,omitempty" aper:"valueExt,valueLB:0,valueUB:1,"`
	// @inject_tag: aper:"optional,sizeLB:1,"
	IEExtensions []*SecurityResultExtIes `protobuf:"bytes,3,rep,name=i_e_extensions,json=iE-Extensions,proto3" json:"i_e_extensions,omitempty" aper:"optional,sizeLB:1,"`
}

func (x *SecurityResult) Reset() {
	*x = SecurityResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[733]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SecurityResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SecurityResult) ProtoMessage() {}

func (x *SecurityResult) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[733]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SecurityResult.ProtoReflect.Descriptor instead.
func (*SecurityResult) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{733}
}

func (x *SecurityResult) GetIntegrityProtectionResult() IntegrityProtectionResultSecurityResult {
	if x != nil {
		return x.IntegrityProtectionResult
	}
	return IntegrityProtectionResultSecurityResult_INTEGRITY_PROTECTION_RESULT_SECURITY_RESULT_PERFORMED
}

func (x *SecurityResult) GetConfidentialityProtectionResult() ConfidentialityProtectionResultSecurityResult {
	if x != nil {
		return x.ConfidentialityProtectionResult
	}
	return ConfidentialityProtectionResultSecurityResult_CONFIDENTIALITY_PROTECTION_RESULT_SECURITY_RESULT_PERFORMED
}

func (x *SecurityResult) GetIEExtensions() []*SecurityResultExtIes {
	if x != nil {
		return x.IEExtensions
	}
	return nil
}

// value set from xnap_v1.asn1:7543
// {SensorMeasurementConfiguration-ExtIEs}
type SensorMeasurementConfigurationExtIes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *emptypb.Empty `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *SensorMeasurementConfigurationExtIes) Reset() {
	*x = SensorMeasurementConfigurationExtIes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[734]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SensorMeasurementConfigurationExtIes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SensorMeasurementConfigurationExtIes) ProtoMessage() {}

func (x *SensorMeasurementConfigurationExtIes) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[734]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SensorMeasurementConfigurationExtIes.ProtoReflect.Descriptor instead.
func (*SensorMeasurementConfigurationExtIes) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{734}
}

func (x *SensorMeasurementConfigurationExtIes) GetValue() *emptypb.Empty {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:7537
// @inject_tag: aper:"valueExt"
// {SensorMeasurementConfiguration}
type SensorMeasurementConfiguration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"valueExt,valueLB:0,valueUB:0,"
	SensorMeasConfig SensorMeasConfig `protobuf:"varint,1,opt,name=sensor_meas_config,json=sensorMeasConfig,proto3,enum=xnap.v1.SensorMeasConfig" json:"sensor_meas_config,omitempty" aper:"valueExt,valueLB:0,valueUB:0,"`
	// @inject_tag: aper:"optional,"
	SensorMeasConfigNameList *SensorMeasConfigNameList `protobuf:"bytes,2,opt,name=sensor_meas_config_name_list,json=sensorMeasConfigNameList,proto3,oneof" json:"sensor_meas_config_name_list,omitempty" aper:"optional,"`
	// @inject_tag: aper:"optional,sizeLB:1,"
	IEExtensions []*SensorMeasurementConfigurationExtIes `protobuf:"bytes,3,rep,name=i_e_extensions,json=iE-Extensions,proto3" json:"i_e_extensions,omitempty" aper:"optional,sizeLB:1,"`
}

func (x *SensorMeasurementConfiguration) Reset() {
	*x = SensorMeasurementConfiguration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[735]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SensorMeasurementConfiguration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SensorMeasurementConfiguration) ProtoMessage() {}

func (x *SensorMeasurementConfiguration) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[735]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SensorMeasurementConfiguration.ProtoReflect.Descriptor instead.
func (*SensorMeasurementConfiguration) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{735}
}

func (x *SensorMeasurementConfiguration) GetSensorMeasConfig() SensorMeasConfig {
	if x != nil {
		return x.SensorMeasConfig
	}
	return SensorMeasConfig_SENSOR_MEAS_CONFIG_SETUP
}

func (x *SensorMeasurementConfiguration) GetSensorMeasConfigNameList() *SensorMeasConfigNameList {
	if x != nil {
		return x.SensorMeasConfigNameList
	}
	return nil
}

func (x *SensorMeasurementConfiguration) GetIEExtensions() []*SensorMeasurementConfigurationExtIes {
	if x != nil {
		return x.IEExtensions
	}
	return nil
}

// sequence from xnap_v1.asn1:7549
// {SensorMeasConfigNameList}
type SensorMeasConfigNameList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"valueExt,sizeLB:1,sizeUB:3,"
	Value []*SensorName `protobuf:"bytes,1,rep,name=value,proto3" json:"value,omitempty" aper:"valueExt,sizeLB:1,sizeUB:3,"`
}

func (x *SensorMeasConfigNameList) Reset() {
	*x = SensorMeasConfigNameList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[736]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SensorMeasConfigNameList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SensorMeasConfigNameList) ProtoMessage() {}

func (x *SensorMeasConfigNameList) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[736]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SensorMeasConfigNameList.ProtoReflect.Descriptor instead.
func (*SensorMeasConfigNameList) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{736}
}

func (x *SensorMeasConfigNameList) GetValue() []*SensorName {
	if x != nil {
		return x.Value
	}
	return nil
}

// value set from xnap_v1.asn1:7559
// {SensorNameConfig-ExtIEs}
type SensorNameConfigExtIes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *emptypb.Empty `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *SensorNameConfigExtIes) Reset() {
	*x = SensorNameConfigExtIes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[737]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SensorNameConfigExtIes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SensorNameConfigExtIes) ProtoMessage() {}

func (x *SensorNameConfigExtIes) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[737]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SensorNameConfigExtIes.ProtoReflect.Descriptor instead.
func (*SensorNameConfigExtIes) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{737}
}

func (x *SensorNameConfigExtIes) GetValue() *emptypb.Empty {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:7552
// @inject_tag: aper:"valueExt"
// {SensorName}
type SensorName struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"optional,valueExt,valueLB:0,valueUB:0,"
	UncompensatedBarometricConfig *UncompensatedBarometricConfigSensorName `protobuf:"varint,1,opt,name=uncompensated_barometric_config,json=uncompensatedBarometricConfig,proto3,enum=xnap.v1.UncompensatedBarometricConfigSensorName,oneof" json:"uncompensated_barometric_config,omitempty" aper:"optional,valueExt,valueLB:0,valueUB:0,"`
	// @inject_tag: aper:"optional,valueExt,valueLB:0,valueUB:0,"
	UeSpeedConfig *UeSpeedConfigSensorName `protobuf:"varint,2,opt,name=ue_speed_config,json=ueSpeedConfig,proto3,enum=xnap.v1.UeSpeedConfigSensorName,oneof" json:"ue_speed_config,omitempty" aper:"optional,valueExt,valueLB:0,valueUB:0,"`
	// @inject_tag: aper:"optional,valueExt,valueLB:0,valueUB:0,"
	UeOrientationConfig *UeOrientationConfigSensorName `protobuf:"varint,3,opt,name=ue_orientation_config,json=ueOrientationConfig,proto3,enum=xnap.v1.UeOrientationConfigSensorName,oneof" json:"ue_orientation_config,omitempty" aper:"optional,valueExt,valueLB:0,valueUB:0,"`
	// @inject_tag: aper:"optional,sizeLB:1,"
	IEExtensions []*SensorNameConfigExtIes `protobuf:"bytes,4,rep,name=i_e_extensions,json=iE-Extensions,proto3" json:"i_e_extensions,omitempty" aper:"optional,sizeLB:1,"`
}

func (x *SensorName) Reset() {
	*x = SensorName{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[738]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SensorName) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SensorName) ProtoMessage() {}

func (x *SensorName) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[738]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SensorName.ProtoReflect.Descriptor instead.
func (*SensorName) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{738}
}

func (x *SensorName) GetUncompensatedBarometricConfig() UncompensatedBarometricConfigSensorName {
	if x != nil && x.UncompensatedBarometricConfig != nil {
		return *x.UncompensatedBarometricConfig
	}
	return UncompensatedBarometricConfigSensorName_UNCOMPENSATED_BAROMETRIC_CONFIG_SENSOR_NAME_TRUE
}

func (x *SensorName) GetUeSpeedConfig() UeSpeedConfigSensorName {
	if x != nil && x.UeSpeedConfig != nil {
		return *x.UeSpeedConfig
	}
	return UeSpeedConfigSensorName_UE_SPEED_CONFIG_SENSOR_NAME_TRUE
}

func (x *SensorName) GetUeOrientationConfig() UeOrientationConfigSensorName {
	if x != nil && x.UeOrientationConfig != nil {
		return *x.UeOrientationConfig
	}
	return UeOrientationConfigSensorName_UE_ORIENTATION_CONFIG_SENSOR_NAME_TRUE
}

func (x *SensorName) GetIEExtensions() []*SensorNameConfigExtIes {
	if x != nil {
		return x.IEExtensions
	}
	return nil
}

// value set from xnap_v1.asn1:7585
// {ServedCellInformation-E-UTRA-ExtIEs&Extension}
type ServedCellInformationEUTraExtIesExtension struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// value set translated as choice from xnap_v1.asn1:7585
	//
	// Types that are assignable to ServedCellInformationEUtraExtIes:
	//	*ServedCellInformationEUTraExtIesExtension_IdBplmnIdInfoEutra
	//	*ServedCellInformationEUTraExtIesExtension_IdNprachconfiguration
	ServedCellInformationEUtraExtIes isServedCellInformationEUTraExtIesExtension_ServedCellInformationEUtraExtIes `protobuf_oneof:"served_cell_information_e_utra_ext_ies"`
}

func (x *ServedCellInformationEUTraExtIesExtension) Reset() {
	*x = ServedCellInformationEUTraExtIesExtension{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[739]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServedCellInformationEUTraExtIesExtension) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServedCellInformationEUTraExtIesExtension) ProtoMessage() {}

func (x *ServedCellInformationEUTraExtIesExtension) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[739]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServedCellInformationEUTraExtIesExtension.ProtoReflect.Descriptor instead.
func (*ServedCellInformationEUTraExtIesExtension) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{739}
}

func (m *ServedCellInformationEUTraExtIesExtension) GetServedCellInformationEUtraExtIes() isServedCellInformationEUTraExtIesExtension_ServedCellInformationEUtraExtIes {
	if m != nil {
		return m.ServedCellInformationEUtraExtIes
	}
	return nil
}

func (x *ServedCellInformationEUTraExtIesExtension) GetIdBplmnIdInfoEutra() *BplmnIDInfoEUtra {
	if x, ok := x.GetServedCellInformationEUtraExtIes().(*ServedCellInformationEUTraExtIesExtension_IdBplmnIdInfoEutra); ok {
		return x.IdBplmnIdInfoEutra
	}
	return nil
}

func (x *ServedCellInformationEUTraExtIesExtension) GetIdNprachconfiguration() *Nprachconfiguration {
	if x, ok := x.GetServedCellInformationEUtraExtIes().(*ServedCellInformationEUTraExtIesExtension_IdNprachconfiguration); ok {
		return x.IdNprachconfiguration
	}
	return nil
}

type isServedCellInformationEUTraExtIesExtension_ServedCellInformationEUtraExtIes interface {
	isServedCellInformationEUTraExtIesExtension_ServedCellInformationEUtraExtIes()
}

type ServedCellInformationEUTraExtIesExtension_IdBplmnIdInfoEutra struct {
	// @inject_tag: aper:"choiceIdx:1,"
	IdBplmnIdInfoEutra *BplmnIDInfoEUtra `protobuf:"bytes,1,opt,name=id_bplmn_id_info_eutra,json=id-BPLMN-ID-Info-EUTRA,proto3,oneof" aper:"choiceIdx:1,"`
}

type ServedCellInformationEUTraExtIesExtension_IdNprachconfiguration struct {
	// @inject_tag: aper:"choiceIdx:2,valueExt,"
	IdNprachconfiguration *Nprachconfiguration `protobuf:"bytes,2,opt,name=id_nprachconfiguration,json=id-NPRACHConfiguration,proto3,oneof" aper:"choiceIdx:2,valueExt,"`
}

func (*ServedCellInformationEUTraExtIesExtension_IdBplmnIdInfoEutra) isServedCellInformationEUTraExtIesExtension_ServedCellInformationEUtraExtIes() {
}

func (*ServedCellInformationEUTraExtIesExtension_IdNprachconfiguration) isServedCellInformationEUTraExtIesExtension_ServedCellInformationEUtraExtIes() {
}

// concrete instance(s) of class XNAP-PROTOCOL-EXTENSION from xnap_v1.asn1:7585
// @inject_tag: aper:"valueExt"
// {ServedCellInformation-E-UTRA-ExtIEs}
type ServedCellInformationEUTraExtIes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"unique,"
	Id *xnap_commondatatypes.ProtocolIeID `protobuf:"bytes,1,opt,name=id,json=&id,proto3" json:"id,omitempty" aper:"unique,"`
	// @inject_tag: aper:"valueLB:0,valueUB:2,"
	Criticality xnap_commondatatypes.Criticality `protobuf:"varint,2,opt,name=criticality,json=&criticality,proto3,enum=xnap.v1.Criticality" json:"criticality,omitempty" aper:"valueLB:0,valueUB:2,"`
	// @inject_tag: aper:"canonicalOrder,"
	Extension *ServedCellInformationEUTraExtIesExtension `protobuf:"bytes,3,opt,name=extension,json=&Extension,proto3" json:"extension,omitempty" aper:"canonicalOrder,"`
}

func (x *ServedCellInformationEUTraExtIes) Reset() {
	*x = ServedCellInformationEUTraExtIes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[740]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServedCellInformationEUTraExtIes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServedCellInformationEUTraExtIes) ProtoMessage() {}

func (x *ServedCellInformationEUTraExtIes) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[740]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServedCellInformationEUTraExtIes.ProtoReflect.Descriptor instead.
func (*ServedCellInformationEUTraExtIes) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{740}
}

func (x *ServedCellInformationEUTraExtIes) GetId() *xnap_commondatatypes.ProtocolIeID {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ServedCellInformationEUTraExtIes) GetCriticality() xnap_commondatatypes.Criticality {
	if x != nil {
		return x.Criticality
	}
	return xnap_commondatatypes.Criticality(0)
}

func (x *ServedCellInformationEUTraExtIes) GetExtension() *ServedCellInformationEUTraExtIesExtension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// sequence from xnap_v1.asn1:7568
// @inject_tag: aper:"valueExt"
// {ServedCellInformation-E-UTRA}
type ServedCellInformationEUTra struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EUtraPci *EUTrapci `protobuf:"bytes,1,opt,name=e_utra_pci,json=e-utra-pci,proto3" json:"e_utra_pci,omitempty"`
	// @inject_tag: aper:"valueExt,"
	EUtraCgi *EUTraCGi `protobuf:"bytes,2,opt,name=e_utra_cgi,json=e-utra-cgi,proto3" json:"e_utra_cgi,omitempty" aper:"valueExt,"`
	Tac      *Tac      `protobuf:"bytes,3,opt,name=tac,proto3" json:"tac,omitempty"`
	// @inject_tag: aper:"optional,"
	Ranac *Ranac `protobuf:"bytes,4,opt,name=ranac,proto3,oneof" json:"ranac,omitempty" aper:"optional,"`
	// @inject_tag: aper:"sizeLB:1,sizeUB:12,valueExt"
	BroadcastPlmns []*ServedCellInformationEUTraperBplmn `protobuf:"bytes,5,rep,name=broadcast_plmns,json=broadcastPLMNs,proto3" json:"broadcast_plmns,omitempty" aper:"sizeLB:1,sizeUB:12,valueExt"`
	EUtraModeInfo  *ServedCellInformationEUTraModeInfo   `protobuf:"bytes,6,opt,name=e_utra_mode_info,json=e-utra-mode-info,proto3" json:"e_utra_mode_info,omitempty"`
	// @inject_tag: aper:"optional,valueExt,valueLB:0,valueUB:2,"
	NumberofAntennaPorts *NumberOfAntennaPortsEUTra `protobuf:"varint,7,opt,name=numberof_antenna_ports,json=numberofAntennaPorts,proto3,enum=xnap.v1.NumberOfAntennaPortsEUTra,oneof" json:"numberof_antenna_ports,omitempty" aper:"optional,valueExt,valueLB:0,valueUB:2,"`
	// @inject_tag: aper:"optional,valueExt,"
	PrachConfiguration *EUTraprachconfiguration `protobuf:"bytes,8,opt,name=prach_configuration,json=prach-configuration,proto3,oneof" json:"prach_configuration,omitempty" aper:"optional,valueExt,"`
	// @inject_tag: aper:"optional,"
	MBsfnsubframeInfo *MbsfnsubframeInfoEUTra `protobuf:"bytes,9,opt,name=m_bsfnsubframe_info,json=mBSFNsubframeInfo,proto3,oneof" json:"m_bsfnsubframe_info,omitempty" aper:"optional,"`
	// @inject_tag: aper:"optional,"
	MultibandInfo *EUTramultibandInfoList `protobuf:"bytes,10,opt,name=multiband_info,json=multibandInfo,proto3,oneof" json:"multiband_info,omitempty" aper:"optional,"`
	// @inject_tag: aper:"optional,valueExt,valueLB:0,valueUB:1,"
	FreqBandIndicatorPriority *FreqBandIndicatorPriorityServedCellInformationEutra `protobuf:"varint,11,opt,name=freq_band_indicator_priority,json=freqBandIndicatorPriority,proto3,enum=xnap.v1.FreqBandIndicatorPriorityServedCellInformationEutra,oneof" json:"freq_band_indicator_priority,omitempty" aper:"optional,valueExt,valueLB:0,valueUB:1,"`
	// @inject_tag: aper:"optional,valueExt,valueLB:0,valueUB:0,"
	BandwidthReducedSi *BandwidthReducedSiservedCellInformationEutra `protobuf:"varint,12,opt,name=bandwidth_reduced_si,json=bandwidthReducedSI,proto3,enum=xnap.v1.BandwidthReducedSiservedCellInformationEutra,oneof" json:"bandwidth_reduced_si,omitempty" aper:"optional,valueExt,valueLB:0,valueUB:0,"`
	// @inject_tag: aper:"optional,valueExt,"
	ProtectedEUtraresourceIndication *ProtectedEUTraresourceIndication `protobuf:"bytes,13,opt,name=protected_e_utraresource_indication,json=protectedE-UTRAResourceIndication,proto3,oneof" json:"protected_e_utraresource_indication,omitempty" aper:"optional,valueExt,"`
	// @inject_tag: aper:"optional,sizeLB:1,"
	IEExtensions []*ServedCellInformationEUTraExtIes `protobuf:"bytes,14,rep,name=i_e_extensions,json=iE-Extensions,proto3" json:"i_e_extensions,omitempty" aper:"optional,sizeLB:1,"`
}

func (x *ServedCellInformationEUTra) Reset() {
	*x = ServedCellInformationEUTra{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[741]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServedCellInformationEUTra) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServedCellInformationEUTra) ProtoMessage() {}

func (x *ServedCellInformationEUTra) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[741]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServedCellInformationEUTra.ProtoReflect.Descriptor instead.
func (*ServedCellInformationEUTra) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{741}
}

func (x *ServedCellInformationEUTra) GetEUtraPci() *EUTrapci {
	if x != nil {
		return x.EUtraPci
	}
	return nil
}

func (x *ServedCellInformationEUTra) GetEUtraCgi() *EUTraCGi {
	if x != nil {
		return x.EUtraCgi
	}
	return nil
}

func (x *ServedCellInformationEUTra) GetTac() *Tac {
	if x != nil {
		return x.Tac
	}
	return nil
}

func (x *ServedCellInformationEUTra) GetRanac() *Ranac {
	if x != nil {
		return x.Ranac
	}
	return nil
}

func (x *ServedCellInformationEUTra) GetBroadcastPlmns() []*ServedCellInformationEUTraperBplmn {
	if x != nil {
		return x.BroadcastPlmns
	}
	return nil
}

func (x *ServedCellInformationEUTra) GetEUtraModeInfo() *ServedCellInformationEUTraModeInfo {
	if x != nil {
		return x.EUtraModeInfo
	}
	return nil
}

func (x *ServedCellInformationEUTra) GetNumberofAntennaPorts() NumberOfAntennaPortsEUTra {
	if x != nil && x.NumberofAntennaPorts != nil {
		return *x.NumberofAntennaPorts
	}
	return NumberOfAntennaPortsEUTra_NUMBER_OF_ANTENNA_PORTS_E_UTRA_AN1
}

func (x *ServedCellInformationEUTra) GetPrachConfiguration() *EUTraprachconfiguration {
	if x != nil {
		return x.PrachConfiguration
	}
	return nil
}

func (x *ServedCellInformationEUTra) GetMBsfnsubframeInfo() *MbsfnsubframeInfoEUTra {
	if x != nil {
		return x.MBsfnsubframeInfo
	}
	return nil
}

func (x *ServedCellInformationEUTra) GetMultibandInfo() *EUTramultibandInfoList {
	if x != nil {
		return x.MultibandInfo
	}
	return nil
}

func (x *ServedCellInformationEUTra) GetFreqBandIndicatorPriority() FreqBandIndicatorPriorityServedCellInformationEutra {
	if x != nil && x.FreqBandIndicatorPriority != nil {
		return *x.FreqBandIndicatorPriority
	}
	return FreqBandIndicatorPriorityServedCellInformationEutra_FREQ_BAND_INDICATOR_PRIORITY_SERVED_CELL_INFORMATION_EUTRA_NOT_BROADCAST
}

func (x *ServedCellInformationEUTra) GetBandwidthReducedSi() BandwidthReducedSiservedCellInformationEutra {
	if x != nil && x.BandwidthReducedSi != nil {
		return *x.BandwidthReducedSi
	}
	return BandwidthReducedSiservedCellInformationEutra_BANDWIDTH_REDUCED_SISERVED_CELL_INFORMATION_EUTRA_SCHEDULED
}

func (x *ServedCellInformationEUTra) GetProtectedEUtraresourceIndication() *ProtectedEUTraresourceIndication {
	if x != nil {
		return x.ProtectedEUtraresourceIndication
	}
	return nil
}

func (x *ServedCellInformationEUTra) GetIEExtensions() []*ServedCellInformationEUTraExtIes {
	if x != nil {
		return x.IEExtensions
	}
	return nil
}

// value set from xnap_v1.asn1:7598
// {ServedCellInformation-E-UTRA-perBPLMN-ExtIEs}
type ServedCellInformationEUTraperBplmnExtIes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *emptypb.Empty `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *ServedCellInformationEUTraperBplmnExtIes) Reset() {
	*x = ServedCellInformationEUTraperBplmnExtIes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[742]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServedCellInformationEUTraperBplmnExtIes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServedCellInformationEUTraperBplmnExtIes) ProtoMessage() {}

func (x *ServedCellInformationEUTraperBplmnExtIes) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[742]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServedCellInformationEUTraperBplmnExtIes.ProtoReflect.Descriptor instead.
func (*ServedCellInformationEUTraperBplmnExtIes) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{742}
}

func (x *ServedCellInformationEUTraperBplmnExtIes) GetValue() *emptypb.Empty {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:7593
// @inject_tag: aper:"valueExt"
// {ServedCellInformation-E-UTRA-perBPLMN}
type ServedCellInformationEUTraperBplmn struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlmnId *PlmnIdentity `protobuf:"bytes,1,opt,name=plmn_id,json=plmn-id,proto3" json:"plmn_id,omitempty"`
	// @inject_tag: aper:"optional,sizeLB:1,sizeUB:65535,valueExt"
	IEExtensions []*ServedCellInformationEUTraperBplmnExtIes `protobuf:"bytes,2,rep,name=i_e_extensions,json=iE-Extensions,proto3" json:"i_e_extensions,omitempty" aper:"optional,sizeLB:1,sizeUB:65535,valueExt"`
}

func (x *ServedCellInformationEUTraperBplmn) Reset() {
	*x = ServedCellInformationEUTraperBplmn{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[743]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServedCellInformationEUTraperBplmn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServedCellInformationEUTraperBplmn) ProtoMessage() {}

func (x *ServedCellInformationEUTraperBplmn) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[743]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServedCellInformationEUTraperBplmn.ProtoReflect.Descriptor instead.
func (*ServedCellInformationEUTraperBplmn) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{743}
}

func (x *ServedCellInformationEUTraperBplmn) GetPlmnId() *PlmnIdentity {
	if x != nil {
		return x.PlmnId
	}
	return nil
}

func (x *ServedCellInformationEUTraperBplmn) GetIEExtensions() []*ServedCellInformationEUTraperBplmnExtIes {
	if x != nil {
		return x.IEExtensions
	}
	return nil
}

// value set from xnap_v1.asn1:7609
// {ServedCellInformation-E-UTRA-ModeInfo-ExtIEs}
type ServedCellInformationEUTraModeInfoExtIes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *emptypb.Empty `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *ServedCellInformationEUTraModeInfoExtIes) Reset() {
	*x = ServedCellInformationEUTraModeInfoExtIes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[744]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServedCellInformationEUTraModeInfoExtIes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServedCellInformationEUTraModeInfoExtIes) ProtoMessage() {}

func (x *ServedCellInformationEUTraModeInfoExtIes) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[744]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServedCellInformationEUTraModeInfoExtIes.ProtoReflect.Descriptor instead.
func (*ServedCellInformationEUTraModeInfoExtIes) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{744}
}

func (x *ServedCellInformationEUTraModeInfoExtIes) GetValue() *emptypb.Empty {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:7604
// {ServedCellInformation-E-UTRA-ModeInfo}
type ServedCellInformationEUTraModeInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// choice from xnap_v1.asn1:7604
	//
	// Types that are assignable to ServedCellInformationEUtraModeInfo:
	//	*ServedCellInformationEUTraModeInfo_Fdd
	//	*ServedCellInformationEUTraModeInfo_Tdd
	//	*ServedCellInformationEUTraModeInfo_ChoiceExtension
	ServedCellInformationEUtraModeInfo isServedCellInformationEUTraModeInfo_ServedCellInformationEUtraModeInfo `protobuf_oneof:"served_cell_information_e_utra_mode_info"`
}

func (x *ServedCellInformationEUTraModeInfo) Reset() {
	*x = ServedCellInformationEUTraModeInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[745]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServedCellInformationEUTraModeInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServedCellInformationEUTraModeInfo) ProtoMessage() {}

func (x *ServedCellInformationEUTraModeInfo) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[745]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServedCellInformationEUTraModeInfo.ProtoReflect.Descriptor instead.
func (*ServedCellInformationEUTraModeInfo) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{745}
}

func (m *ServedCellInformationEUTraModeInfo) GetServedCellInformationEUtraModeInfo() isServedCellInformationEUTraModeInfo_ServedCellInformationEUtraModeInfo {
	if m != nil {
		return m.ServedCellInformationEUtraModeInfo
	}
	return nil
}

func (x *ServedCellInformationEUTraModeInfo) GetFdd() *ServedCellInformationEUTraFDdinfo {
	if x, ok := x.GetServedCellInformationEUtraModeInfo().(*ServedCellInformationEUTraModeInfo_Fdd); ok {
		return x.Fdd
	}
	return nil
}

func (x *ServedCellInformationEUTraModeInfo) GetTdd() *ServedCellInformationEUTraTDdinfo {
	if x, ok := x.GetServedCellInformationEUtraModeInfo().(*ServedCellInformationEUTraModeInfo_Tdd); ok {
		return x.Tdd
	}
	return nil
}

func (x *ServedCellInformationEUTraModeInfo) GetChoiceExtension() *ServedCellInformationEUTraModeInfoExtIes {
	if x, ok := x.GetServedCellInformationEUtraModeInfo().(*ServedCellInformationEUTraModeInfo_ChoiceExtension); ok {
		return x.ChoiceExtension
	}
	return nil
}

type isServedCellInformationEUTraModeInfo_ServedCellInformationEUtraModeInfo interface {
	isServedCellInformationEUTraModeInfo_ServedCellInformationEUtraModeInfo()
}

type ServedCellInformationEUTraModeInfo_Fdd struct {
	// @inject_tag: aper:"choiceIdx:1,valueExt,"
	Fdd *ServedCellInformationEUTraFDdinfo `protobuf:"bytes,1,opt,name=fdd,proto3,oneof" aper:"choiceIdx:1,valueExt,"`
}

type ServedCellInformationEUTraModeInfo_Tdd struct {
	// @inject_tag: aper:"choiceIdx:2,valueExt,"
	Tdd *ServedCellInformationEUTraTDdinfo `protobuf:"bytes,2,opt,name=tdd,proto3,oneof" aper:"choiceIdx:2,valueExt,"`
}

type ServedCellInformationEUTraModeInfo_ChoiceExtension struct {
	// @inject_tag: aper:"choiceIdx:3,"
	ChoiceExtension *ServedCellInformationEUTraModeInfoExtIes `protobuf:"bytes,3,opt,name=choice_extension,json=choice-extension,proto3,oneof" aper:"choiceIdx:3,"`
}

func (*ServedCellInformationEUTraModeInfo_Fdd) isServedCellInformationEUTraModeInfo_ServedCellInformationEUtraModeInfo() {
}

func (*ServedCellInformationEUTraModeInfo_Tdd) isServedCellInformationEUTraModeInfo_ServedCellInformationEUtraModeInfo() {
}

func (*ServedCellInformationEUTraModeInfo_ChoiceExtension) isServedCellInformationEUTraModeInfo_ServedCellInformationEUtraModeInfo() {
}

// value set from xnap_v1.asn1:7623
// {ServedCellInformation-E-UTRA-FDDInfo-ExtIEs&Extension}
type ServedCellInformationEUTraFDdinfoExtIesExtension struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// value set translated as choice from xnap_v1.asn1:7623
	//
	// Types that are assignable to ServedCellInformationEUtraFddinfoExtIes:
	//	*ServedCellInformationEUTraFDdinfoExtIesExtension_IdOffsetOfNbiotChannelNumberToDlEarfcn
	//	*ServedCellInformationEUTraFDdinfoExtIesExtension_IdOffsetOfNbiotChannelNumberToUlEarfcn
	ServedCellInformationEUtraFddinfoExtIes isServedCellInformationEUTraFDdinfoExtIesExtension_ServedCellInformationEUtraFddinfoExtIes `protobuf_oneof:"served_cell_information_e_utra_fddinfo_ext_ies"`
}

func (x *ServedCellInformationEUTraFDdinfoExtIesExtension) Reset() {
	*x = ServedCellInformationEUTraFDdinfoExtIesExtension{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[746]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServedCellInformationEUTraFDdinfoExtIesExtension) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServedCellInformationEUTraFDdinfoExtIesExtension) ProtoMessage() {}

func (x *ServedCellInformationEUTraFDdinfoExtIesExtension) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[746]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServedCellInformationEUTraFDdinfoExtIesExtension.ProtoReflect.Descriptor instead.
func (*ServedCellInformationEUTraFDdinfoExtIesExtension) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{746}
}

func (m *ServedCellInformationEUTraFDdinfoExtIesExtension) GetServedCellInformationEUtraFddinfoExtIes() isServedCellInformationEUTraFDdinfoExtIesExtension_ServedCellInformationEUtraFddinfoExtIes {
	if m != nil {
		return m.ServedCellInformationEUtraFddinfoExtIes
	}
	return nil
}

func (x *ServedCellInformationEUTraFDdinfoExtIesExtension) GetIdOffsetOfNbiotChannelNumberToDlEarfcn() OffsetOfNbiotChannelNumberToEarfcn {
	if x, ok := x.GetServedCellInformationEUtraFddinfoExtIes().(*ServedCellInformationEUTraFDdinfoExtIesExtension_IdOffsetOfNbiotChannelNumberToDlEarfcn); ok {
		return x.IdOffsetOfNbiotChannelNumberToDlEarfcn
	}
	return OffsetOfNbiotChannelNumberToEarfcn_OFFSET_OF_NBIOT_CHANNEL_NUMBER_TO_EARFCN_MINUS_TEN
}

func (x *ServedCellInformationEUTraFDdinfoExtIesExtension) GetIdOffsetOfNbiotChannelNumberToUlEarfcn() OffsetOfNbiotChannelNumberToEarfcn {
	if x, ok := x.GetServedCellInformationEUtraFddinfoExtIes().(*ServedCellInformationEUTraFDdinfoExtIesExtension_IdOffsetOfNbiotChannelNumberToUlEarfcn); ok {
		return x.IdOffsetOfNbiotChannelNumberToUlEarfcn
	}
	return OffsetOfNbiotChannelNumberToEarfcn_OFFSET_OF_NBIOT_CHANNEL_NUMBER_TO_EARFCN_MINUS_TEN
}

type isServedCellInformationEUTraFDdinfoExtIesExtension_ServedCellInformationEUtraFddinfoExtIes interface {
	isServedCellInformationEUTraFDdinfoExtIesExtension_ServedCellInformationEUtraFddinfoExtIes()
}

type ServedCellInformationEUTraFDdinfoExtIesExtension_IdOffsetOfNbiotChannelNumberToDlEarfcn struct {
	// @inject_tag: aper:"choiceIdx:1,valueExt,valueLB:0,valueUB:24,"
	IdOffsetOfNbiotChannelNumberToDlEarfcn OffsetOfNbiotChannelNumberToEarfcn `protobuf:"varint,1,opt,name=id_offset_of_nbiot_channel_number_to_dl_earfcn,json=id-OffsetOfNbiotChannelNumberToDL-EARFCN,proto3,enum=xnap.v1.OffsetOfNbiotChannelNumberToEarfcn,oneof" aper:"choiceIdx:1,valueExt,valueLB:0,valueUB:24,"`
}

type ServedCellInformationEUTraFDdinfoExtIesExtension_IdOffsetOfNbiotChannelNumberToUlEarfcn struct {
	// @inject_tag: aper:"choiceIdx:2,valueExt,valueLB:0,valueUB:24,"
	IdOffsetOfNbiotChannelNumberToUlEarfcn OffsetOfNbiotChannelNumberToEarfcn `protobuf:"varint,2,opt,name=id_offset_of_nbiot_channel_number_to_ul_earfcn,json=id-OffsetOfNbiotChannelNumberToUL-EARFCN,proto3,enum=xnap.v1.OffsetOfNbiotChannelNumberToEarfcn,oneof" aper:"choiceIdx:2,valueExt,valueLB:0,valueUB:24,"`
}

func (*ServedCellInformationEUTraFDdinfoExtIesExtension_IdOffsetOfNbiotChannelNumberToDlEarfcn) isServedCellInformationEUTraFDdinfoExtIesExtension_ServedCellInformationEUtraFddinfoExtIes() {
}

func (*ServedCellInformationEUTraFDdinfoExtIesExtension_IdOffsetOfNbiotChannelNumberToUlEarfcn) isServedCellInformationEUTraFDdinfoExtIesExtension_ServedCellInformationEUtraFddinfoExtIes() {
}

// concrete instance(s) of class XNAP-PROTOCOL-EXTENSION from xnap_v1.asn1:7623
// @inject_tag: aper:"valueExt"
// {ServedCellInformation-E-UTRA-FDDInfo-ExtIEs}
type ServedCellInformationEUTraFDdinfoExtIes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"unique,"
	Id *xnap_commondatatypes.ProtocolIeID `protobuf:"bytes,1,opt,name=id,json=&id,proto3" json:"id,omitempty" aper:"unique,"`
	// @inject_tag: aper:"valueLB:0,valueUB:2,"
	Criticality xnap_commondatatypes.Criticality `protobuf:"varint,2,opt,name=criticality,json=&criticality,proto3,enum=xnap.v1.Criticality" json:"criticality,omitempty" aper:"valueLB:0,valueUB:2,"`
	// @inject_tag: aper:"canonicalOrder,"
	Extension *ServedCellInformationEUTraFDdinfoExtIesExtension `protobuf:"bytes,3,opt,name=extension,json=&Extension,proto3" json:"extension,omitempty" aper:"canonicalOrder,"`
}

func (x *ServedCellInformationEUTraFDdinfoExtIes) Reset() {
	*x = ServedCellInformationEUTraFDdinfoExtIes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[747]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServedCellInformationEUTraFDdinfoExtIes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServedCellInformationEUTraFDdinfoExtIes) ProtoMessage() {}

func (x *ServedCellInformationEUTraFDdinfoExtIes) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[747]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServedCellInformationEUTraFDdinfoExtIes.ProtoReflect.Descriptor instead.
func (*ServedCellInformationEUTraFDdinfoExtIes) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{747}
}

func (x *ServedCellInformationEUTraFDdinfoExtIes) GetId() *xnap_commondatatypes.ProtocolIeID {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ServedCellInformationEUTraFDdinfoExtIes) GetCriticality() xnap_commondatatypes.Criticality {
	if x != nil {
		return x.Criticality
	}
	return xnap_commondatatypes.Criticality(0)
}

func (x *ServedCellInformationEUTraFDdinfoExtIes) GetExtension() *ServedCellInformationEUTraFDdinfoExtIesExtension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// sequence from xnap_v1.asn1:7615
// @inject_tag: aper:"valueExt"
// {ServedCellInformation-E-UTRA-FDDInfo}
type ServedCellInformationEUTraFDdinfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UlEarfcn *EUTraarfcn `protobuf:"bytes,1,opt,name=ul_earfcn,json=ul-earfcn,proto3" json:"ul_earfcn,omitempty"`
	DlEarfcn *EUTraarfcn `protobuf:"bytes,2,opt,name=dl_earfcn,json=dl-earfcn,proto3" json:"dl_earfcn,omitempty"`
	// @inject_tag: aper:"valueExt,valueLB:0,valueUB:5,"
	UlEUtraTxBw EUTratransmissionBandwidth `protobuf:"varint,3,opt,name=ul_e_utra_tx_bw,json=ul-e-utraTxBW,proto3,enum=xnap.v1.EUTratransmissionBandwidth" json:"ul_e_utra_tx_bw,omitempty" aper:"valueExt,valueLB:0,valueUB:5,"`
	// @inject_tag: aper:"valueExt,valueLB:0,valueUB:5,"
	DlEUtraTxBw EUTratransmissionBandwidth `protobuf:"varint,4,opt,name=dl_e_utra_tx_bw,json=dl-e-utraTxBW,proto3,enum=xnap.v1.EUTratransmissionBandwidth" json:"dl_e_utra_tx_bw,omitempty" aper:"valueExt,valueLB:0,valueUB:5,"`
	// @inject_tag: aper:"optional,sizeLB:1,sizeUB:65535,valueExt"
	IEExtensions []*ServedCellInformationEUTraFDdinfoExtIes `protobuf:"bytes,5,rep,name=i_e_extensions,json=iE-Extensions,proto3" json:"i_e_extensions,omitempty" aper:"optional,sizeLB:1,sizeUB:65535,valueExt"`
}

func (x *ServedCellInformationEUTraFDdinfo) Reset() {
	*x = ServedCellInformationEUTraFDdinfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[748]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServedCellInformationEUTraFDdinfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServedCellInformationEUTraFDdinfo) ProtoMessage() {}

func (x *ServedCellInformationEUTraFDdinfo) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[748]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServedCellInformationEUTraFDdinfo.ProtoReflect.Descriptor instead.
func (*ServedCellInformationEUTraFDdinfo) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{748}
}

func (x *ServedCellInformationEUTraFDdinfo) GetUlEarfcn() *EUTraarfcn {
	if x != nil {
		return x.UlEarfcn
	}
	return nil
}

func (x *ServedCellInformationEUTraFDdinfo) GetDlEarfcn() *EUTraarfcn {
	if x != nil {
		return x.DlEarfcn
	}
	return nil
}

func (x *ServedCellInformationEUTraFDdinfo) GetUlEUtraTxBw() EUTratransmissionBandwidth {
	if x != nil {
		return x.UlEUtraTxBw
	}
	return EUTratransmissionBandwidth_E_UTRATRANSMISSION_BANDWIDTH_BW6
}

func (x *ServedCellInformationEUTraFDdinfo) GetDlEUtraTxBw() EUTratransmissionBandwidth {
	if x != nil {
		return x.DlEUtraTxBw
	}
	return EUTratransmissionBandwidth_E_UTRATRANSMISSION_BANDWIDTH_BW6
}

func (x *ServedCellInformationEUTraFDdinfo) GetIEExtensions() []*ServedCellInformationEUTraFDdinfoExtIes {
	if x != nil {
		return x.IEExtensions
	}
	return nil
}

// value set from xnap_v1.asn1:7639
// {ServedCellInformation-E-UTRA-TDDInfo-ExtIEs&Extension}
type ServedCellInformationEUTraTDdinfoExtIesExtension struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// value set translated as choice from xnap_v1.asn1:7639
	//
	// Types that are assignable to ServedCellInformationEUtraTddinfoExtIes:
	//	*ServedCellInformationEUTraTDdinfoExtIesExtension_IdOffsetOfNbiotChannelNumberToDlEarfcn
	//	*ServedCellInformationEUTraTDdinfoExtIesExtension_IdNbioTUlDlAlignmentOffset
	ServedCellInformationEUtraTddinfoExtIes isServedCellInformationEUTraTDdinfoExtIesExtension_ServedCellInformationEUtraTddinfoExtIes `protobuf_oneof:"served_cell_information_e_utra_tddinfo_ext_ies"`
}

func (x *ServedCellInformationEUTraTDdinfoExtIesExtension) Reset() {
	*x = ServedCellInformationEUTraTDdinfoExtIesExtension{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[749]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServedCellInformationEUTraTDdinfoExtIesExtension) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServedCellInformationEUTraTDdinfoExtIesExtension) ProtoMessage() {}

func (x *ServedCellInformationEUTraTDdinfoExtIesExtension) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[749]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServedCellInformationEUTraTDdinfoExtIesExtension.ProtoReflect.Descriptor instead.
func (*ServedCellInformationEUTraTDdinfoExtIesExtension) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{749}
}

func (m *ServedCellInformationEUTraTDdinfoExtIesExtension) GetServedCellInformationEUtraTddinfoExtIes() isServedCellInformationEUTraTDdinfoExtIesExtension_ServedCellInformationEUtraTddinfoExtIes {
	if m != nil {
		return m.ServedCellInformationEUtraTddinfoExtIes
	}
	return nil
}

func (x *ServedCellInformationEUTraTDdinfoExtIesExtension) GetIdOffsetOfNbiotChannelNumberToDlEarfcn() OffsetOfNbiotChannelNumberToEarfcn {
	if x, ok := x.GetServedCellInformationEUtraTddinfoExtIes().(*ServedCellInformationEUTraTDdinfoExtIesExtension_IdOffsetOfNbiotChannelNumberToDlEarfcn); ok {
		return x.IdOffsetOfNbiotChannelNumberToDlEarfcn
	}
	return OffsetOfNbiotChannelNumberToEarfcn_OFFSET_OF_NBIOT_CHANNEL_NUMBER_TO_EARFCN_MINUS_TEN
}

func (x *ServedCellInformationEUTraTDdinfoExtIesExtension) GetIdNbioTUlDlAlignmentOffset() NbioTULDLAlignmentOffset {
	if x, ok := x.GetServedCellInformationEUtraTddinfoExtIes().(*ServedCellInformationEUTraTDdinfoExtIesExtension_IdNbioTUlDlAlignmentOffset); ok {
		return x.IdNbioTUlDlAlignmentOffset
	}
	return NbioTULDLAlignmentOffset_NBIO_T_UL_DL_ALIGNMENT_OFFSET_KHZ_7DOT5
}

type isServedCellInformationEUTraTDdinfoExtIesExtension_ServedCellInformationEUtraTddinfoExtIes interface {
	isServedCellInformationEUTraTDdinfoExtIesExtension_ServedCellInformationEUtraTddinfoExtIes()
}

type ServedCellInformationEUTraTDdinfoExtIesExtension_IdOffsetOfNbiotChannelNumberToDlEarfcn struct {
	// @inject_tag: aper:"choiceIdx:1,valueExt,valueLB:0,valueUB:24,"
	IdOffsetOfNbiotChannelNumberToDlEarfcn OffsetOfNbiotChannelNumberToEarfcn `protobuf:"varint,1,opt,name=id_offset_of_nbiot_channel_number_to_dl_earfcn,json=id-OffsetOfNbiotChannelNumberToDL-EARFCN,proto3,enum=xnap.v1.OffsetOfNbiotChannelNumberToEarfcn,oneof" aper:"choiceIdx:1,valueExt,valueLB:0,valueUB:24,"`
}

type ServedCellInformationEUTraTDdinfoExtIesExtension_IdNbioTUlDlAlignmentOffset struct {
	// @inject_tag: aper:"choiceIdx:2,valueExt,valueLB:0,valueUB:2,"
	IdNbioTUlDlAlignmentOffset NbioTULDLAlignmentOffset `protobuf:"varint,2,opt,name=id_nbio_t_ul_dl_alignment_offset,json=id-NBIoT-UL-DL-AlignmentOffset,proto3,enum=xnap.v1.NbioTULDLAlignmentOffset,oneof" aper:"choiceIdx:2,valueExt,valueLB:0,valueUB:2,"`
}

func (*ServedCellInformationEUTraTDdinfoExtIesExtension_IdOffsetOfNbiotChannelNumberToDlEarfcn) isServedCellInformationEUTraTDdinfoExtIesExtension_ServedCellInformationEUtraTddinfoExtIes() {
}

func (*ServedCellInformationEUTraTDdinfoExtIesExtension_IdNbioTUlDlAlignmentOffset) isServedCellInformationEUTraTDdinfoExtIesExtension_ServedCellInformationEUtraTddinfoExtIes() {
}

// concrete instance(s) of class XNAP-PROTOCOL-EXTENSION from xnap_v1.asn1:7639
// @inject_tag: aper:"valueExt"
// {ServedCellInformation-E-UTRA-TDDInfo-ExtIEs}
type ServedCellInformationEUTraTDdinfoExtIes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"unique,"
	Id *xnap_commondatatypes.ProtocolIeID `protobuf:"bytes,1,opt,name=id,json=&id,proto3" json:"id,omitempty" aper:"unique,"`
	// @inject_tag: aper:"valueLB:0,valueUB:2,"
	Criticality xnap_commondatatypes.Criticality `protobuf:"varint,2,opt,name=criticality,json=&criticality,proto3,enum=xnap.v1.Criticality" json:"criticality,omitempty" aper:"valueLB:0,valueUB:2,"`
	// @inject_tag: aper:"canonicalOrder,"
	Extension *ServedCellInformationEUTraTDdinfoExtIesExtension `protobuf:"bytes,3,opt,name=extension,json=&Extension,proto3" json:"extension,omitempty" aper:"canonicalOrder,"`
}

func (x *ServedCellInformationEUTraTDdinfoExtIes) Reset() {
	*x = ServedCellInformationEUTraTDdinfoExtIes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[750]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServedCellInformationEUTraTDdinfoExtIes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServedCellInformationEUTraTDdinfoExtIes) ProtoMessage() {}

func (x *ServedCellInformationEUTraTDdinfoExtIes) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[750]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServedCellInformationEUTraTDdinfoExtIes.ProtoReflect.Descriptor instead.
func (*ServedCellInformationEUTraTDdinfoExtIes) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{750}
}

func (x *ServedCellInformationEUTraTDdinfoExtIes) GetId() *xnap_commondatatypes.ProtocolIeID {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ServedCellInformationEUTraTDdinfoExtIes) GetCriticality() xnap_commondatatypes.Criticality {
	if x != nil {
		return x.Criticality
	}
	return xnap_commondatatypes.Criticality(0)
}

func (x *ServedCellInformationEUTraTDdinfoExtIes) GetExtension() *ServedCellInformationEUTraTDdinfoExtIesExtension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// sequence from xnap_v1.asn1:7631
// @inject_tag: aper:"valueExt"
// {ServedCellInformation-E-UTRA-TDDInfo}
type ServedCellInformationEUTraTDdinfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Earfcn *EUTraarfcn `protobuf:"bytes,1,opt,name=earfcn,proto3" json:"earfcn,omitempty"`
	// @inject_tag: aper:"valueExt,valueLB:0,valueUB:5,"
	EUtraTxBw EUTratransmissionBandwidth `protobuf:"varint,2,opt,name=e_utra_tx_bw,json=e-utraTxBW,proto3,enum=xnap.v1.EUTratransmissionBandwidth" json:"e_utra_tx_bw,omitempty" aper:"valueExt,valueLB:0,valueUB:5,"`
	// @inject_tag: aper:"valueExt,valueLB:0,valueUB:6,"
	SubframeAssignmnet SubframeAssignmnetServedCellInformationEutratddinfo `protobuf:"varint,3,opt,name=subframe_assignmnet,json=subframeAssignmnet,proto3,enum=xnap.v1.SubframeAssignmnetServedCellInformationEutratddinfo" json:"subframe_assignmnet,omitempty" aper:"valueExt,valueLB:0,valueUB:6,"`
	// @inject_tag: aper:"valueExt,"
	SpecialSubframeInfo *SpecialSubframeInfoEUTra `protobuf:"bytes,4,opt,name=special_subframe_info,json=specialSubframeInfo,proto3" json:"special_subframe_info,omitempty" aper:"valueExt,"`
	// @inject_tag: aper:"optional,sizeLB:1,sizeUB:65535,valueExt"
	IEExtensions []*ServedCellInformationEUTraTDdinfoExtIes `protobuf:"bytes,5,rep,name=i_e_extensions,json=iE-Extensions,proto3" json:"i_e_extensions,omitempty" aper:"optional,sizeLB:1,sizeUB:65535,valueExt"`
}

func (x *ServedCellInformationEUTraTDdinfo) Reset() {
	*x = ServedCellInformationEUTraTDdinfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[751]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServedCellInformationEUTraTDdinfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServedCellInformationEUTraTDdinfo) ProtoMessage() {}

func (x *ServedCellInformationEUTraTDdinfo) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[751]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServedCellInformationEUTraTDdinfo.ProtoReflect.Descriptor instead.
func (*ServedCellInformationEUTraTDdinfo) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{751}
}

func (x *ServedCellInformationEUTraTDdinfo) GetEarfcn() *EUTraarfcn {
	if x != nil {
		return x.Earfcn
	}
	return nil
}

func (x *ServedCellInformationEUTraTDdinfo) GetEUtraTxBw() EUTratransmissionBandwidth {
	if x != nil {
		return x.EUtraTxBw
	}
	return EUTratransmissionBandwidth_E_UTRATRANSMISSION_BANDWIDTH_BW6
}

func (x *ServedCellInformationEUTraTDdinfo) GetSubframeAssignmnet() SubframeAssignmnetServedCellInformationEutratddinfo {
	if x != nil {
		return x.SubframeAssignmnet
	}
	return SubframeAssignmnetServedCellInformationEutratddinfo_SUBFRAME_ASSIGNMNET_SERVED_CELL_INFORMATION_EUTRATDDINFO_SA0
}

func (x *ServedCellInformationEUTraTDdinfo) GetSpecialSubframeInfo() *SpecialSubframeInfoEUTra {
	if x != nil {
		return x.SpecialSubframeInfo
	}
	return nil
}

func (x *ServedCellInformationEUTraTDdinfo) GetIEExtensions() []*ServedCellInformationEUTraTDdinfoExtIes {
	if x != nil {
		return x.IEExtensions
	}
	return nil
}

// sequence from xnap_v1.asn1:7648
// {ServedCells-E-UTRA}
type ServedCellsEUTra struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"valueExt,sizeLB:1,sizeUB:16384,"
	Value []*ServedCellsEUTraItem `protobuf:"bytes,1,rep,name=value,proto3" json:"value,omitempty" aper:"valueExt,sizeLB:1,sizeUB:16384,"`
}

func (x *ServedCellsEUTra) Reset() {
	*x = ServedCellsEUTra{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[752]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServedCellsEUTra) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServedCellsEUTra) ProtoMessage() {}

func (x *ServedCellsEUTra) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[752]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServedCellsEUTra.ProtoReflect.Descriptor instead.
func (*ServedCellsEUTra) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{752}
}

func (x *ServedCellsEUTra) GetValue() []*ServedCellsEUTraItem {
	if x != nil {
		return x.Value
	}
	return nil
}

// value set from xnap_v1.asn1:7656
// {ServedCells-E-UTRA-Item-ExtIEs}
type ServedCellsEUTraItemExtIes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *emptypb.Empty `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *ServedCellsEUTraItemExtIes) Reset() {
	*x = ServedCellsEUTraItemExtIes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[753]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServedCellsEUTraItemExtIes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServedCellsEUTraItemExtIes) ProtoMessage() {}

func (x *ServedCellsEUTraItemExtIes) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[753]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServedCellsEUTraItemExtIes.ProtoReflect.Descriptor instead.
func (*ServedCellsEUTraItemExtIes) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{753}
}

func (x *ServedCellsEUTraItemExtIes) GetValue() *emptypb.Empty {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:7649
// @inject_tag: aper:"valueExt"
// {ServedCells-E-UTRA-Item}
type ServedCellsEUTraItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"valueExt,"
	ServedCellInfoEUtra *ServedCellInformationEUTra `protobuf:"bytes,1,opt,name=served_cell_info_e_utra,json=served-cell-info-E-UTRA,proto3" json:"served_cell_info_e_utra,omitempty" aper:"valueExt,"`
	// @inject_tag: aper:"optional,"
	NeighbourInfoNr *NeighbourInformationNR `protobuf:"bytes,2,opt,name=neighbour_info_nr,json=neighbour-info-NR,proto3,oneof" json:"neighbour_info_nr,omitempty" aper:"optional,"`
	// @inject_tag: aper:"optional,"
	NeighbourInfoEUtra *NeighbourInformationEUTra `protobuf:"bytes,3,opt,name=neighbour_info_e_utra,json=neighbour-info-E-UTRA,proto3,oneof" json:"neighbour_info_e_utra,omitempty" aper:"optional,"`
	// @inject_tag: aper:"optional,sizeLB:1,sizeUB:65535,valueExt"
	IEExtensions []*ServedCellsEUTraItemExtIes `protobuf:"bytes,4,rep,name=i_e_extensions,json=iE-Extensions,proto3" json:"i_e_extensions,omitempty" aper:"optional,sizeLB:1,sizeUB:65535,valueExt"`
}

func (x *ServedCellsEUTraItem) Reset() {
	*x = ServedCellsEUTraItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[754]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServedCellsEUTraItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServedCellsEUTraItem) ProtoMessage() {}

func (x *ServedCellsEUTraItem) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[754]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServedCellsEUTraItem.ProtoReflect.Descriptor instead.
func (*ServedCellsEUTraItem) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{754}
}

func (x *ServedCellsEUTraItem) GetServedCellInfoEUtra() *ServedCellInformationEUTra {
	if x != nil {
		return x.ServedCellInfoEUtra
	}
	return nil
}

func (x *ServedCellsEUTraItem) GetNeighbourInfoNr() *NeighbourInformationNR {
	if x != nil {
		return x.NeighbourInfoNr
	}
	return nil
}

func (x *ServedCellsEUTraItem) GetNeighbourInfoEUtra() *NeighbourInformationEUTra {
	if x != nil {
		return x.NeighbourInfoEUtra
	}
	return nil
}

func (x *ServedCellsEUTraItem) GetIEExtensions() []*ServedCellsEUTraItemExtIes {
	if x != nil {
		return x.IEExtensions
	}
	return nil
}

// value set from xnap_v1.asn1:7670
// {ServedCellsToUpdate-E-UTRA-ExtIEs}
type ServedCellsToUpdateEUTraExtIes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *emptypb.Empty `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *ServedCellsToUpdateEUTraExtIes) Reset() {
	*x = ServedCellsToUpdateEUTraExtIes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[755]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServedCellsToUpdateEUTraExtIes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServedCellsToUpdateEUTraExtIes) ProtoMessage() {}

func (x *ServedCellsToUpdateEUTraExtIes) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[755]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServedCellsToUpdateEUTraExtIes.ProtoReflect.Descriptor instead.
func (*ServedCellsToUpdateEUTraExtIes) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{755}
}

func (x *ServedCellsToUpdateEUTraExtIes) GetValue() *emptypb.Empty {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:7663
// @inject_tag: aper:"valueExt"
// {ServedCellsToUpdate-E-UTRA}
type ServedCellsToUpdateEUTra struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"optional,"
	ServedCellsToAddEUtra *ServedCellsEUTra `protobuf:"bytes,1,opt,name=served_cells_to_add_e_utra,json=served-Cells-ToAdd-E-UTRA,proto3,oneof" json:"served_cells_to_add_e_utra,omitempty" aper:"optional,"`
	// @inject_tag: aper:"optional,"
	ServedCellsToModifyEUtra *ServedCellsToModifyEUTra `protobuf:"bytes,2,opt,name=served_cells_to_modify_e_utra,json=served-Cells-ToModify-E-UTRA,proto3,oneof" json:"served_cells_to_modify_e_utra,omitempty" aper:"optional,"`
	// @inject_tag: aper:"optional,sizeLB:1,sizeUB:16384,"
	ServedCellsToDeleteEUtra []*EUTraCGi `protobuf:"bytes,3,rep,name=served_cells_to_delete_e_utra,json=served-Cells-ToDelete-E-UTRA,proto3" json:"served_cells_to_delete_e_utra,omitempty" aper:"optional,sizeLB:1,sizeUB:16384,"`
	// @inject_tag: aper:"optional,sizeLB:1,"
	IEExtensions []*ServedCellsToUpdateEUTraExtIes `protobuf:"bytes,4,rep,name=i_e_extensions,json=iE-Extensions,proto3" json:"i_e_extensions,omitempty" aper:"optional,sizeLB:1,"`
}

func (x *ServedCellsToUpdateEUTra) Reset() {
	*x = ServedCellsToUpdateEUTra{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[756]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServedCellsToUpdateEUTra) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServedCellsToUpdateEUTra) ProtoMessage() {}

func (x *ServedCellsToUpdateEUTra) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[756]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServedCellsToUpdateEUTra.ProtoReflect.Descriptor instead.
func (*ServedCellsToUpdateEUTra) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{756}
}

func (x *ServedCellsToUpdateEUTra) GetServedCellsToAddEUtra() *ServedCellsEUTra {
	if x != nil {
		return x.ServedCellsToAddEUtra
	}
	return nil
}

func (x *ServedCellsToUpdateEUTra) GetServedCellsToModifyEUtra() *ServedCellsToModifyEUTra {
	if x != nil {
		return x.ServedCellsToModifyEUtra
	}
	return nil
}

func (x *ServedCellsToUpdateEUTra) GetServedCellsToDeleteEUtra() []*EUTraCGi {
	if x != nil {
		return x.ServedCellsToDeleteEUtra
	}
	return nil
}

func (x *ServedCellsToUpdateEUTra) GetIEExtensions() []*ServedCellsToUpdateEUTraExtIes {
	if x != nil {
		return x.IEExtensions
	}
	return nil
}

// sequence from xnap_v1.asn1:7677
// {ServedCells-ToModify-E-UTRA}
type ServedCellsToModifyEUTra struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"valueExt,sizeLB:1,sizeUB:16384,"
	Value []*ServedCellsToModifyEUTraItem `protobuf:"bytes,1,rep,name=value,proto3" json:"value,omitempty" aper:"valueExt,sizeLB:1,sizeUB:16384,"`
}

func (x *ServedCellsToModifyEUTra) Reset() {
	*x = ServedCellsToModifyEUTra{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[757]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServedCellsToModifyEUTra) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServedCellsToModifyEUTra) ProtoMessage() {}

func (x *ServedCellsToModifyEUTra) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[757]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServedCellsToModifyEUTra.ProtoReflect.Descriptor instead.
func (*ServedCellsToModifyEUTra) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{757}
}

func (x *ServedCellsToModifyEUTra) GetValue() []*ServedCellsToModifyEUTraItem {
	if x != nil {
		return x.Value
	}
	return nil
}

// value set from xnap_v1.asn1:7687
// {Served-cells-ToModify-E-UTRA-Item-ExtIEs}
type ServedcellsToModifyEUTraItemExtIes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *emptypb.Empty `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *ServedcellsToModifyEUTraItemExtIes) Reset() {
	*x = ServedcellsToModifyEUTraItemExtIes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[758]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServedcellsToModifyEUTraItemExtIes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServedcellsToModifyEUTraItemExtIes) ProtoMessage() {}

func (x *ServedcellsToModifyEUTraItemExtIes) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[758]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServedcellsToModifyEUTraItemExtIes.ProtoReflect.Descriptor instead.
func (*ServedcellsToModifyEUTraItemExtIes) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{758}
}

func (x *ServedcellsToModifyEUTraItemExtIes) GetValue() *emptypb.Empty {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:7678
// @inject_tag: aper:"valueExt"
// {ServedCells-ToModify-E-UTRA-Item}
type ServedCellsToModifyEUTraItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"valueExt,"
	OldEcgi *EUTraCGi `protobuf:"bytes,1,opt,name=old_ecgi,json=old-ECGI,proto3" json:"old_ecgi,omitempty" aper:"valueExt,"`
	// @inject_tag: aper:"valueExt,"
	ServedCellInfoEUtra *ServedCellInformationEUTra `protobuf:"bytes,2,opt,name=served_cell_info_e_utra,json=served-cell-info-E-UTRA,proto3" json:"served_cell_info_e_utra,omitempty" aper:"valueExt,"`
	// @inject_tag: aper:"optional,"
	NeighbourInfoNr *NeighbourInformationNR `protobuf:"bytes,3,opt,name=neighbour_info_nr,json=neighbour-info-NR,proto3,oneof" json:"neighbour_info_nr,omitempty" aper:"optional,"`
	// @inject_tag: aper:"optional,"
	NeighbourInfoEUtra *NeighbourInformationEUTra `protobuf:"bytes,4,opt,name=neighbour_info_e_utra,json=neighbour-info-E-UTRA,proto3,oneof" json:"neighbour_info_e_utra,omitempty" aper:"optional,"`
	// @inject_tag: aper:"optional,valueExt,valueLB:0,valueUB:0,"
	DeactivationIndication *DeactivationindicationServedCellsToModifyEutraitem `protobuf:"varint,5,opt,name=deactivation_indication,json=deactivation-indication,proto3,enum=xnap.v1.DeactivationindicationServedCellsToModifyEutraitem,oneof" json:"deactivation_indication,omitempty" aper:"optional,valueExt,valueLB:0,valueUB:0,"`
	// @inject_tag: aper:"optional,sizeLB:1,"
	IEExtensions []*ServedcellsToModifyEUTraItemExtIes `protobuf:"bytes,6,rep,name=i_e_extensions,json=iE-Extensions,proto3" json:"i_e_extensions,omitempty" aper:"optional,sizeLB:1,"`
}

func (x *ServedCellsToModifyEUTraItem) Reset() {
	*x = ServedCellsToModifyEUTraItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[759]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServedCellsToModifyEUTraItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServedCellsToModifyEUTraItem) ProtoMessage() {}

func (x *ServedCellsToModifyEUTraItem) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[759]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServedCellsToModifyEUTraItem.ProtoReflect.Descriptor instead.
func (*ServedCellsToModifyEUTraItem) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{759}
}

func (x *ServedCellsToModifyEUTraItem) GetOldEcgi() *EUTraCGi {
	if x != nil {
		return x.OldEcgi
	}
	return nil
}

func (x *ServedCellsToModifyEUTraItem) GetServedCellInfoEUtra() *ServedCellInformationEUTra {
	if x != nil {
		return x.ServedCellInfoEUtra
	}
	return nil
}

func (x *ServedCellsToModifyEUTraItem) GetNeighbourInfoNr() *NeighbourInformationNR {
	if x != nil {
		return x.NeighbourInfoNr
	}
	return nil
}

func (x *ServedCellsToModifyEUTraItem) GetNeighbourInfoEUtra() *NeighbourInformationEUTra {
	if x != nil {
		return x.NeighbourInfoEUtra
	}
	return nil
}

func (x *ServedCellsToModifyEUTraItem) GetDeactivationIndication() DeactivationindicationServedCellsToModifyEutraitem {
	if x != nil && x.DeactivationIndication != nil {
		return *x.DeactivationIndication
	}
	return DeactivationindicationServedCellsToModifyEutraitem_DEACTIVATIONINDICATION_SERVED_CELLS_TO_MODIFY_EUTRAITEM_DEACTIVATED
}

func (x *ServedCellsToModifyEUTraItem) GetIEExtensions() []*ServedcellsToModifyEUTraItemExtIes {
	if x != nil {
		return x.IEExtensions
	}
	return nil
}

// value set from xnap_v1.asn1:7708
// {ServedCellInformation-NR-ExtIEs&Extension}
type ServedCellInformationNRExtIesExtension struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// value set translated as choice from xnap_v1.asn1:7708
	//
	// Types that are assignable to ServedCellInformationNrExtIes:
	//	*ServedCellInformationNRExtIesExtension_IdBplmnIdInfoNr
	//	*ServedCellInformationNRExtIesExtension_IdConfiguredTacindication
	//	*ServedCellInformationNRExtIesExtension_IdSsbPositionsInBurst
	//	*ServedCellInformationNRExtIesExtension_IdNrcellPrachconfig
	//	*ServedCellInformationNRExtIesExtension_IdNpnBroadcastInformation
	//	*ServedCellInformationNRExtIesExtension_IdCsiRstransmissionIndication
	//	*ServedCellInformationNRExtIesExtension_IdSfnOffset
	ServedCellInformationNrExtIes isServedCellInformationNRExtIesExtension_ServedCellInformationNrExtIes `protobuf_oneof:"served_cell_information_nr_ext_ies"`
}

func (x *ServedCellInformationNRExtIesExtension) Reset() {
	*x = ServedCellInformationNRExtIesExtension{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[760]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServedCellInformationNRExtIesExtension) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServedCellInformationNRExtIesExtension) ProtoMessage() {}

func (x *ServedCellInformationNRExtIesExtension) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[760]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServedCellInformationNRExtIesExtension.ProtoReflect.Descriptor instead.
func (*ServedCellInformationNRExtIesExtension) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{760}
}

func (m *ServedCellInformationNRExtIesExtension) GetServedCellInformationNrExtIes() isServedCellInformationNRExtIesExtension_ServedCellInformationNrExtIes {
	if m != nil {
		return m.ServedCellInformationNrExtIes
	}
	return nil
}

func (x *ServedCellInformationNRExtIesExtension) GetIdBplmnIdInfoNr() *BplmnIDInfoNR {
	if x, ok := x.GetServedCellInformationNrExtIes().(*ServedCellInformationNRExtIesExtension_IdBplmnIdInfoNr); ok {
		return x.IdBplmnIdInfoNr
	}
	return nil
}

func (x *ServedCellInformationNRExtIesExtension) GetIdConfiguredTacindication() ConfiguredTacindication {
	if x, ok := x.GetServedCellInformationNrExtIes().(*ServedCellInformationNRExtIesExtension_IdConfiguredTacindication); ok {
		return x.IdConfiguredTacindication
	}
	return ConfiguredTacindication_CONFIGURED_TACINDICATION_TRUE
}

func (x *ServedCellInformationNRExtIesExtension) GetIdSsbPositionsInBurst() *SsbPositionsInBurst {
	if x, ok := x.GetServedCellInformationNrExtIes().(*ServedCellInformationNRExtIesExtension_IdSsbPositionsInBurst); ok {
		return x.IdSsbPositionsInBurst
	}
	return nil
}

func (x *ServedCellInformationNRExtIesExtension) GetIdNrcellPrachconfig() *NrcellPrachconfig {
	if x, ok := x.GetServedCellInformationNrExtIes().(*ServedCellInformationNRExtIesExtension_IdNrcellPrachconfig); ok {
		return x.IdNrcellPrachconfig
	}
	return nil
}

func (x *ServedCellInformationNRExtIesExtension) GetIdNpnBroadcastInformation() *NpnBroadcastInformation {
	if x, ok := x.GetServedCellInformationNrExtIes().(*ServedCellInformationNRExtIesExtension_IdNpnBroadcastInformation); ok {
		return x.IdNpnBroadcastInformation
	}
	return nil
}

func (x *ServedCellInformationNRExtIesExtension) GetIdCsiRstransmissionIndication() CsiRStransmissionIndication {
	if x, ok := x.GetServedCellInformationNrExtIes().(*ServedCellInformationNRExtIesExtension_IdCsiRstransmissionIndication); ok {
		return x.IdCsiRstransmissionIndication
	}
	return CsiRStransmissionIndication_CSI_RSTRANSMISSION_INDICATION_ACTIVATED
}

func (x *ServedCellInformationNRExtIesExtension) GetIdSfnOffset() *SfnOffset {
	if x, ok := x.GetServedCellInformationNrExtIes().(*ServedCellInformationNRExtIesExtension_IdSfnOffset); ok {
		return x.IdSfnOffset
	}
	return nil
}

type isServedCellInformationNRExtIesExtension_ServedCellInformationNrExtIes interface {
	isServedCellInformationNRExtIesExtension_ServedCellInformationNrExtIes()
}

type ServedCellInformationNRExtIesExtension_IdBplmnIdInfoNr struct {
	// @inject_tag: aper:"choiceIdx:1,"
	IdBplmnIdInfoNr *BplmnIDInfoNR `protobuf:"bytes,1,opt,name=id_bplmn_id_info_nr,json=id-BPLMN-ID-Info-NR,proto3,oneof" aper:"choiceIdx:1,"`
}

type ServedCellInformationNRExtIesExtension_IdConfiguredTacindication struct {
	// @inject_tag: aper:"choiceIdx:2,valueExt,valueLB:0,valueUB:0,"
	IdConfiguredTacindication ConfiguredTacindication `protobuf:"varint,2,opt,name=id_configured_tacindication,json=id-ConfiguredTACIndication,proto3,enum=xnap.v1.ConfiguredTacindication,oneof" aper:"choiceIdx:2,valueExt,valueLB:0,valueUB:0,"`
}

type ServedCellInformationNRExtIesExtension_IdSsbPositionsInBurst struct {
	// @inject_tag: aper:"choiceIdx:3,"
	IdSsbPositionsInBurst *SsbPositionsInBurst `protobuf:"bytes,3,opt,name=id_ssb_positions_in_burst,json=id-SSB-PositionsInBurst,proto3,oneof" aper:"choiceIdx:3,"`
}

type ServedCellInformationNRExtIesExtension_IdNrcellPrachconfig struct {
	// @inject_tag: aper:"choiceIdx:4,"
	IdNrcellPrachconfig *NrcellPrachconfig `protobuf:"bytes,4,opt,name=id_nrcell_prachconfig,json=id-NRCellPRACHConfig,proto3,oneof" aper:"choiceIdx:4,"`
}

type ServedCellInformationNRExtIesExtension_IdNpnBroadcastInformation struct {
	// @inject_tag: aper:"choiceIdx:5,"
	IdNpnBroadcastInformation *NpnBroadcastInformation `protobuf:"bytes,5,opt,name=id_npn_broadcast_information,json=id-NPN-Broadcast-Information,proto3,oneof" aper:"choiceIdx:5,"`
}

type ServedCellInformationNRExtIesExtension_IdCsiRstransmissionIndication struct {
	// @inject_tag: aper:"choiceIdx:6,valueExt,valueLB:0,valueUB:1,"
	IdCsiRstransmissionIndication CsiRStransmissionIndication `protobuf:"varint,6,opt,name=id_csi_rstransmission_indication,json=id-CSI-RSTransmissionIndication,proto3,enum=xnap.v1.CsiRStransmissionIndication,oneof" aper:"choiceIdx:6,valueExt,valueLB:0,valueUB:1,"`
}

type ServedCellInformationNRExtIesExtension_IdSfnOffset struct {
	// @inject_tag: aper:"choiceIdx:7,valueExt,"
	IdSfnOffset *SfnOffset `protobuf:"bytes,7,opt,name=id_sfn_offset,json=id-SFN-Offset,proto3,oneof" aper:"choiceIdx:7,valueExt,"`
}

func (*ServedCellInformationNRExtIesExtension_IdBplmnIdInfoNr) isServedCellInformationNRExtIesExtension_ServedCellInformationNrExtIes() {
}

func (*ServedCellInformationNRExtIesExtension_IdConfiguredTacindication) isServedCellInformationNRExtIesExtension_ServedCellInformationNrExtIes() {
}

func (*ServedCellInformationNRExtIesExtension_IdSsbPositionsInBurst) isServedCellInformationNRExtIesExtension_ServedCellInformationNrExtIes() {
}

func (*ServedCellInformationNRExtIesExtension_IdNrcellPrachconfig) isServedCellInformationNRExtIesExtension_ServedCellInformationNrExtIes() {
}

func (*ServedCellInformationNRExtIesExtension_IdNpnBroadcastInformation) isServedCellInformationNRExtIesExtension_ServedCellInformationNrExtIes() {
}

func (*ServedCellInformationNRExtIesExtension_IdCsiRstransmissionIndication) isServedCellInformationNRExtIesExtension_ServedCellInformationNrExtIes() {
}

func (*ServedCellInformationNRExtIesExtension_IdSfnOffset) isServedCellInformationNRExtIesExtension_ServedCellInformationNrExtIes() {
}

// concrete instance(s) of class XNAP-PROTOCOL-EXTENSION from xnap_v1.asn1:7708
// @inject_tag: aper:"valueExt"
// {ServedCellInformation-NR-ExtIEs}
type ServedCellInformationNRExtIes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"unique,"
	Id *xnap_commondatatypes.ProtocolIeID `protobuf:"bytes,1,opt,name=id,json=&id,proto3" json:"id,omitempty" aper:"unique,"`
	// @inject_tag: aper:"valueLB:0,valueUB:2,"
	Criticality xnap_commondatatypes.Criticality `protobuf:"varint,2,opt,name=criticality,json=&criticality,proto3,enum=xnap.v1.Criticality" json:"criticality,omitempty" aper:"valueLB:0,valueUB:2,"`
	// @inject_tag: aper:"canonicalOrder,"
	Extension *ServedCellInformationNRExtIesExtension `protobuf:"bytes,3,opt,name=extension,json=&Extension,proto3" json:"extension,omitempty" aper:"canonicalOrder,"`
}

func (x *ServedCellInformationNRExtIes) Reset() {
	*x = ServedCellInformationNRExtIes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[761]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServedCellInformationNRExtIes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServedCellInformationNRExtIes) ProtoMessage() {}

func (x *ServedCellInformationNRExtIes) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[761]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServedCellInformationNRExtIes.ProtoReflect.Descriptor instead.
func (*ServedCellInformationNRExtIes) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{761}
}

func (x *ServedCellInformationNRExtIes) GetId() *xnap_commondatatypes.ProtocolIeID {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ServedCellInformationNRExtIes) GetCriticality() xnap_commondatatypes.Criticality {
	if x != nil {
		return x.Criticality
	}
	return xnap_commondatatypes.Criticality(0)
}

func (x *ServedCellInformationNRExtIes) GetExtension() *ServedCellInformationNRExtIesExtension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// sequence from xnap_v1.asn1:7696
// @inject_tag: aper:"valueExt"
// {ServedCellInformation-NR}
type ServedCellInformationNR struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NrPci *Nrpci `protobuf:"bytes,1,opt,name=nr_pci,json=nrPCI,proto3" json:"nr_pci,omitempty"`
	// @inject_tag: aper:"valueExt,"
	CellId *NrCGi `protobuf:"bytes,2,opt,name=cell_id,json=cellID,proto3" json:"cell_id,omitempty" aper:"valueExt,"`
	Tac    *Tac   `protobuf:"bytes,3,opt,name=tac,proto3" json:"tac,omitempty"`
	// @inject_tag: aper:"optional,"
	Ranac                          *Ranac          `protobuf:"bytes,4,opt,name=ranac,proto3,oneof" json:"ranac,omitempty" aper:"optional,"`
	BroadcastPlmn                  *BroadcastPlmns `protobuf:"bytes,5,opt,name=broadcast_plmn,json=broadcastPLMN,proto3" json:"broadcast_plmn,omitempty"`
	NrModeInfo                     *NrmodeInfo     `protobuf:"bytes,6,opt,name=nr_mode_info,json=nrModeInfo,proto3" json:"nr_mode_info,omitempty"`
	MeasurementTimingConfiguration []byte          `protobuf:"bytes,7,opt,name=measurement_timing_configuration,json=measurementTimingConfiguration,proto3" json:"measurement_timing_configuration,omitempty"`
	// @inject_tag: aper:"valueExt,"
	ConnectivitySupport *ConnectivitySupport `protobuf:"bytes,8,opt,name=connectivity_support,json=connectivitySupport,proto3" json:"connectivity_support,omitempty" aper:"valueExt,"`
	// @inject_tag: aper:"optional,sizeLB:1,sizeUB:65535,valueExt"
	IEExtensions []*ServedCellInformationNRExtIes `protobuf:"bytes,9,rep,name=i_e_extensions,json=iE-Extensions,proto3" json:"i_e_extensions,omitempty" aper:"optional,sizeLB:1,sizeUB:65535,valueExt"`
}

func (x *ServedCellInformationNR) Reset() {
	*x = ServedCellInformationNR{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[762]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServedCellInformationNR) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServedCellInformationNR) ProtoMessage() {}

func (x *ServedCellInformationNR) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[762]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServedCellInformationNR.ProtoReflect.Descriptor instead.
func (*ServedCellInformationNR) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{762}
}

func (x *ServedCellInformationNR) GetNrPci() *Nrpci {
	if x != nil {
		return x.NrPci
	}
	return nil
}

func (x *ServedCellInformationNR) GetCellId() *NrCGi {
	if x != nil {
		return x.CellId
	}
	return nil
}

func (x *ServedCellInformationNR) GetTac() *Tac {
	if x != nil {
		return x.Tac
	}
	return nil
}

func (x *ServedCellInformationNR) GetRanac() *Ranac {
	if x != nil {
		return x.Ranac
	}
	return nil
}

func (x *ServedCellInformationNR) GetBroadcastPlmn() *BroadcastPlmns {
	if x != nil {
		return x.BroadcastPlmn
	}
	return nil
}

func (x *ServedCellInformationNR) GetNrModeInfo() *NrmodeInfo {
	if x != nil {
		return x.NrModeInfo
	}
	return nil
}

func (x *ServedCellInformationNR) GetMeasurementTimingConfiguration() []byte {
	if x != nil {
		return x.MeasurementTimingConfiguration
	}
	return nil
}

func (x *ServedCellInformationNR) GetConnectivitySupport() *ConnectivitySupport {
	if x != nil {
		return x.ConnectivitySupport
	}
	return nil
}

func (x *ServedCellInformationNR) GetIEExtensions() []*ServedCellInformationNRExtIes {
	if x != nil {
		return x.IEExtensions
	}
	return nil
}

// value set from xnap_v1.asn1:7725
// {SFN-Offset-ExtIEs}
type SfnOffsetExtIes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *emptypb.Empty `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *SfnOffsetExtIes) Reset() {
	*x = SfnOffsetExtIes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[763]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SfnOffsetExtIes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SfnOffsetExtIes) ProtoMessage() {}

func (x *SfnOffsetExtIes) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[763]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SfnOffsetExtIes.ProtoReflect.Descriptor instead.
func (*SfnOffsetExtIes) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{763}
}

func (x *SfnOffsetExtIes) GetValue() *emptypb.Empty {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:7720
// @inject_tag: aper:"valueExt"
// {SFN-Offset}
type SfnOffset struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"sizeLB:24,sizeUB:24,"
	SFnTimeOffset *asn1.BitString `protobuf:"bytes,1,opt,name=s_fn_time_offset,json=sFN-Time-Offset,proto3" json:"s_fn_time_offset,omitempty" aper:"sizeLB:24,sizeUB:24,"`
	// @inject_tag: aper:"optional,sizeLB:1,"
	IEExtensions []*SfnOffsetExtIes `protobuf:"bytes,2,rep,name=i_e_extensions,json=iE-Extensions,proto3" json:"i_e_extensions,omitempty" aper:"optional,sizeLB:1,"`
}

func (x *SfnOffset) Reset() {
	*x = SfnOffset{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[764]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SfnOffset) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SfnOffset) ProtoMessage() {}

func (x *SfnOffset) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[764]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SfnOffset.ProtoReflect.Descriptor instead.
func (*SfnOffset) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{764}
}

func (x *SfnOffset) GetSFnTimeOffset() *asn1.BitString {
	if x != nil {
		return x.SFnTimeOffset
	}
	return nil
}

func (x *SfnOffset) GetIEExtensions() []*SfnOffsetExtIes {
	if x != nil {
		return x.IEExtensions
	}
	return nil
}

// sequence from xnap_v1.asn1:7732
// {ServedCells-NR}
type ServedCellsNR struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"valueExt,sizeLB:1,sizeUB:16384,"
	Value []*ServedCellsNRItem `protobuf:"bytes,1,rep,name=value,proto3" json:"value,omitempty" aper:"valueExt,sizeLB:1,sizeUB:16384,"`
}

func (x *ServedCellsNR) Reset() {
	*x = ServedCellsNR{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[765]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServedCellsNR) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServedCellsNR) ProtoMessage() {}

func (x *ServedCellsNR) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[765]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServedCellsNR.ProtoReflect.Descriptor instead.
func (*ServedCellsNR) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{765}
}

func (x *ServedCellsNR) GetValue() []*ServedCellsNRItem {
	if x != nil {
		return x.Value
	}
	return nil
}

// value set from xnap_v1.asn1:7740
// {ServedCells-NR-Item-ExtIEs}
type ServedCellsNRItemExtIes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *emptypb.Empty `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *ServedCellsNRItemExtIes) Reset() {
	*x = ServedCellsNRItemExtIes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[766]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServedCellsNRItemExtIes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServedCellsNRItemExtIes) ProtoMessage() {}

func (x *ServedCellsNRItemExtIes) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[766]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServedCellsNRItemExtIes.ProtoReflect.Descriptor instead.
func (*ServedCellsNRItemExtIes) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{766}
}

func (x *ServedCellsNRItemExtIes) GetValue() *emptypb.Empty {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:7733
// @inject_tag: aper:"valueExt"
// {ServedCells-NR-Item}
type ServedCellsNRItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"valueExt,"
	ServedCellInfoNr *ServedCellInformationNR `protobuf:"bytes,1,opt,name=served_cell_info_nr,json=served-cell-info-NR,proto3" json:"served_cell_info_nr,omitempty" aper:"valueExt,"`
	// @inject_tag: aper:"optional,"
	NeighbourInfoNr *NeighbourInformationNR `protobuf:"bytes,2,opt,name=neighbour_info_nr,json=neighbour-info-NR,proto3,oneof" json:"neighbour_info_nr,omitempty" aper:"optional,"`
	// @inject_tag: aper:"optional,"
	NeighbourInfoEUtra *NeighbourInformationEUTra `protobuf:"bytes,3,opt,name=neighbour_info_e_utra,json=neighbour-info-E-UTRA,proto3,oneof" json:"neighbour_info_e_utra,omitempty" aper:"optional,"`
	// @inject_tag: aper:"optional,sizeLB:1,sizeUB:65535,valueExt"
	IEExtensions []*ServedCellsNRItemExtIes `protobuf:"bytes,4,rep,name=i_e_extensions,json=iE-Extensions,proto3" json:"i_e_extensions,omitempty" aper:"optional,sizeLB:1,sizeUB:65535,valueExt"`
}

func (x *ServedCellsNRItem) Reset() {
	*x = ServedCellsNRItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[767]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServedCellsNRItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServedCellsNRItem) ProtoMessage() {}

func (x *ServedCellsNRItem) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[767]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServedCellsNRItem.ProtoReflect.Descriptor instead.
func (*ServedCellsNRItem) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{767}
}

func (x *ServedCellsNRItem) GetServedCellInfoNr() *ServedCellInformationNR {
	if x != nil {
		return x.ServedCellInfoNr
	}
	return nil
}

func (x *ServedCellsNRItem) GetNeighbourInfoNr() *NeighbourInformationNR {
	if x != nil {
		return x.NeighbourInfoNr
	}
	return nil
}

func (x *ServedCellsNRItem) GetNeighbourInfoEUtra() *NeighbourInformationEUTra {
	if x != nil {
		return x.NeighbourInfoEUtra
	}
	return nil
}

func (x *ServedCellsNRItem) GetIEExtensions() []*ServedCellsNRItemExtIes {
	if x != nil {
		return x.IEExtensions
	}
	return nil
}

// sequence from xnap_v1.asn1:7747
// {ServedCells-ToModify-NR}
type ServedCellsToModifyNR struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"valueExt,sizeLB:1,sizeUB:16384,"
	Value []*ServedCellsToModifyNRItem `protobuf:"bytes,1,rep,name=value,proto3" json:"value,omitempty" aper:"valueExt,sizeLB:1,sizeUB:16384,"`
}

func (x *ServedCellsToModifyNR) Reset() {
	*x = ServedCellsToModifyNR{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[768]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServedCellsToModifyNR) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServedCellsToModifyNR) ProtoMessage() {}

func (x *ServedCellsToModifyNR) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[768]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServedCellsToModifyNR.ProtoReflect.Descriptor instead.
func (*ServedCellsToModifyNR) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{768}
}

func (x *ServedCellsToModifyNR) GetValue() []*ServedCellsToModifyNRItem {
	if x != nil {
		return x.Value
	}
	return nil
}

// value set from xnap_v1.asn1:7757
// {Served-cells-ToModify-NR-Item-ExtIEs}
type ServedcellsToModifyNRItemExtIes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *emptypb.Empty `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *ServedcellsToModifyNRItemExtIes) Reset() {
	*x = ServedcellsToModifyNRItemExtIes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[769]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServedcellsToModifyNRItemExtIes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServedcellsToModifyNRItemExtIes) ProtoMessage() {}

func (x *ServedcellsToModifyNRItemExtIes) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[769]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServedcellsToModifyNRItemExtIes.ProtoReflect.Descriptor instead.
func (*ServedcellsToModifyNRItemExtIes) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{769}
}

func (x *ServedcellsToModifyNRItemExtIes) GetValue() *emptypb.Empty {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:7748
// @inject_tag: aper:"valueExt"
// {ServedCells-ToModify-NR-Item}
type ServedCellsToModifyNRItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"valueExt,"
	OldNrCgi *NrCGi `protobuf:"bytes,1,opt,name=old_nr_cgi,json=old-NR-CGI,proto3" json:"old_nr_cgi,omitempty" aper:"valueExt,"`
	// @inject_tag: aper:"valueExt,"
	ServedCellInfoNr *ServedCellInformationNR `protobuf:"bytes,2,opt,name=served_cell_info_nr,json=served-cell-info-NR,proto3" json:"served_cell_info_nr,omitempty" aper:"valueExt,"`
	// @inject_tag: aper:"optional,"
	NeighbourInfoNr *NeighbourInformationNR `protobuf:"bytes,3,opt,name=neighbour_info_nr,json=neighbour-info-NR,proto3,oneof" json:"neighbour_info_nr,omitempty" aper:"optional,"`
	// @inject_tag: aper:"optional,"
	NeighbourInfoEUtra *NeighbourInformationEUTra `protobuf:"bytes,4,opt,name=neighbour_info_e_utra,json=neighbour-info-E-UTRA,proto3,oneof" json:"neighbour_info_e_utra,omitempty" aper:"optional,"`
	// @inject_tag: aper:"optional,valueExt,valueLB:0,valueUB:0,"
	DeactivationIndication *DeactivationindicationServedCellsToModifyNritem `protobuf:"varint,5,opt,name=deactivation_indication,json=deactivation-indication,proto3,enum=xnap.v1.DeactivationindicationServedCellsToModifyNritem,oneof" json:"deactivation_indication,omitempty" aper:"optional,valueExt,valueLB:0,valueUB:0,"`
	// @inject_tag: aper:"optional,sizeLB:1,"
	IEExtensions []*ServedcellsToModifyNRItemExtIes `protobuf:"bytes,6,rep,name=i_e_extensions,json=iE-Extensions,proto3" json:"i_e_extensions,omitempty" aper:"optional,sizeLB:1,"`
}

func (x *ServedCellsToModifyNRItem) Reset() {
	*x = ServedCellsToModifyNRItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[770]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServedCellsToModifyNRItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServedCellsToModifyNRItem) ProtoMessage() {}

func (x *ServedCellsToModifyNRItem) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[770]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServedCellsToModifyNRItem.ProtoReflect.Descriptor instead.
func (*ServedCellsToModifyNRItem) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{770}
}

func (x *ServedCellsToModifyNRItem) GetOldNrCgi() *NrCGi {
	if x != nil {
		return x.OldNrCgi
	}
	return nil
}

func (x *ServedCellsToModifyNRItem) GetServedCellInfoNr() *ServedCellInformationNR {
	if x != nil {
		return x.ServedCellInfoNr
	}
	return nil
}

func (x *ServedCellsToModifyNRItem) GetNeighbourInfoNr() *NeighbourInformationNR {
	if x != nil {
		return x.NeighbourInfoNr
	}
	return nil
}

func (x *ServedCellsToModifyNRItem) GetNeighbourInfoEUtra() *NeighbourInformationEUTra {
	if x != nil {
		return x.NeighbourInfoEUtra
	}
	return nil
}

func (x *ServedCellsToModifyNRItem) GetDeactivationIndication() DeactivationindicationServedCellsToModifyNritem {
	if x != nil && x.DeactivationIndication != nil {
		return *x.DeactivationIndication
	}
	return DeactivationindicationServedCellsToModifyNritem_DEACTIVATIONINDICATION_SERVED_CELLS_TO_MODIFY_NRITEM_DEACTIVATED
}

func (x *ServedCellsToModifyNRItem) GetIEExtensions() []*ServedcellsToModifyNRItemExtIes {
	if x != nil {
		return x.IEExtensions
	}
	return nil
}

// value set from xnap_v1.asn1:7770
// {ServedCellsToUpdate-NR-ExtIEs}
type ServedCellsToUpdateNRExtIes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *emptypb.Empty `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *ServedCellsToUpdateNRExtIes) Reset() {
	*x = ServedCellsToUpdateNRExtIes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[771]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServedCellsToUpdateNRExtIes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServedCellsToUpdateNRExtIes) ProtoMessage() {}

func (x *ServedCellsToUpdateNRExtIes) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[771]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServedCellsToUpdateNRExtIes.ProtoReflect.Descriptor instead.
func (*ServedCellsToUpdateNRExtIes) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{771}
}

func (x *ServedCellsToUpdateNRExtIes) GetValue() *emptypb.Empty {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:7763
// @inject_tag: aper:"valueExt"
// {ServedCellsToUpdate-NR}
type ServedCellsToUpdateNR struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"optional,"
	ServedCellsToAddNr *ServedCellsNR `protobuf:"bytes,1,opt,name=served_cells_to_add_nr,json=served-Cells-ToAdd-NR,proto3,oneof" json:"served_cells_to_add_nr,omitempty" aper:"optional,"`
	// @inject_tag: aper:"optional,"
	ServedCellsToModifyNr *ServedCellsToModifyNR `protobuf:"bytes,2,opt,name=served_cells_to_modify_nr,json=served-Cells-ToModify-NR,proto3,oneof" json:"served_cells_to_modify_nr,omitempty" aper:"optional,"`
	// @inject_tag: aper:"optional,sizeLB:1,sizeUB:16384,"
	ServedCellsToDeleteNr []*NrCGi `protobuf:"bytes,3,rep,name=served_cells_to_delete_nr,json=served-Cells-ToDelete-NR,proto3" json:"served_cells_to_delete_nr,omitempty" aper:"optional,sizeLB:1,sizeUB:16384,"`
	// @inject_tag: aper:"optional,sizeLB:1,"
	IEExtensions []*ServedCellsToUpdateNRExtIes `protobuf:"bytes,4,rep,name=i_e_extensions,json=iE-Extensions,proto3" json:"i_e_extensions,omitempty" aper:"optional,sizeLB:1,"`
}

func (x *ServedCellsToUpdateNR) Reset() {
	*x = ServedCellsToUpdateNR{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[772]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServedCellsToUpdateNR) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServedCellsToUpdateNR) ProtoMessage() {}

func (x *ServedCellsToUpdateNR) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[772]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServedCellsToUpdateNR.ProtoReflect.Descriptor instead.
func (*ServedCellsToUpdateNR) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{772}
}

func (x *ServedCellsToUpdateNR) GetServedCellsToAddNr() *ServedCellsNR {
	if x != nil {
		return x.ServedCellsToAddNr
	}
	return nil
}

func (x *ServedCellsToUpdateNR) GetServedCellsToModifyNr() *ServedCellsToModifyNR {
	if x != nil {
		return x.ServedCellsToModifyNr
	}
	return nil
}

func (x *ServedCellsToUpdateNR) GetServedCellsToDeleteNr() []*NrCGi {
	if x != nil {
		return x.ServedCellsToDeleteNr
	}
	return nil
}

func (x *ServedCellsToUpdateNR) GetIEExtensions() []*ServedCellsToUpdateNRExtIes {
	if x != nil {
		return x.IEExtensions
	}
	return nil
}

// value set from xnap_v1.asn1:7783
// {SharedResourceType-ExtIEs}
type SharedResourceTypeExtIes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *emptypb.Empty `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *SharedResourceTypeExtIes) Reset() {
	*x = SharedResourceTypeExtIes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[773]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SharedResourceTypeExtIes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SharedResourceTypeExtIes) ProtoMessage() {}

func (x *SharedResourceTypeExtIes) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[773]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SharedResourceTypeExtIes.ProtoReflect.Descriptor instead.
func (*SharedResourceTypeExtIes) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{773}
}

func (x *SharedResourceTypeExtIes) GetValue() *emptypb.Empty {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:7778
// {SharedResourceType}
type SharedResourceType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// choice from xnap_v1.asn1:7778
	//
	// Types that are assignable to SharedResourceType:
	//	*SharedResourceType_UlOnlySharing
	//	*SharedResourceType_UlAndDlSharing
	//	*SharedResourceType_ChoiceExtension
	SharedResourceType isSharedResourceType_SharedResourceType `protobuf_oneof:"shared_resource_type"`
}

func (x *SharedResourceType) Reset() {
	*x = SharedResourceType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[774]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SharedResourceType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SharedResourceType) ProtoMessage() {}

func (x *SharedResourceType) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[774]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SharedResourceType.ProtoReflect.Descriptor instead.
func (*SharedResourceType) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{774}
}

func (m *SharedResourceType) GetSharedResourceType() isSharedResourceType_SharedResourceType {
	if m != nil {
		return m.SharedResourceType
	}
	return nil
}

func (x *SharedResourceType) GetUlOnlySharing() *SharedResourceTypeULOnlySharing {
	if x, ok := x.GetSharedResourceType().(*SharedResourceType_UlOnlySharing); ok {
		return x.UlOnlySharing
	}
	return nil
}

func (x *SharedResourceType) GetUlAndDlSharing() *SharedResourceTypeULdlSharing {
	if x, ok := x.GetSharedResourceType().(*SharedResourceType_UlAndDlSharing); ok {
		return x.UlAndDlSharing
	}
	return nil
}

func (x *SharedResourceType) GetChoiceExtension() *SharedResourceTypeExtIes {
	if x, ok := x.GetSharedResourceType().(*SharedResourceType_ChoiceExtension); ok {
		return x.ChoiceExtension
	}
	return nil
}

type isSharedResourceType_SharedResourceType interface {
	isSharedResourceType_SharedResourceType()
}

type SharedResourceType_UlOnlySharing struct {
	// @inject_tag: aper:"choiceIdx:1,valueExt,"
	UlOnlySharing *SharedResourceTypeULOnlySharing `protobuf:"bytes,1,opt,name=ul_only_sharing,json=ul-onlySharing,proto3,oneof" aper:"choiceIdx:1,valueExt,"`
}

type SharedResourceType_UlAndDlSharing struct {
	// @inject_tag: aper:"choiceIdx:2,"
	UlAndDlSharing *SharedResourceTypeULdlSharing `protobuf:"bytes,2,opt,name=ul_and_dl_sharing,json=ul-and-dl-Sharing,proto3,oneof" aper:"choiceIdx:2,"`
}

type SharedResourceType_ChoiceExtension struct {
	// @inject_tag: aper:"choiceIdx:3,"
	ChoiceExtension *SharedResourceTypeExtIes `protobuf:"bytes,3,opt,name=choice_extension,json=choice-extension,proto3,oneof" aper:"choiceIdx:3,"`
}

func (*SharedResourceType_UlOnlySharing) isSharedResourceType_SharedResourceType() {}

func (*SharedResourceType_UlAndDlSharing) isSharedResourceType_SharedResourceType() {}

func (*SharedResourceType_ChoiceExtension) isSharedResourceType_SharedResourceType() {}

// value set from xnap_v1.asn1:7793
// {SharedResourceType-UL-OnlySharing-ExtIEs}
type SharedResourceTypeULOnlySharingExtIes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *emptypb.Empty `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *SharedResourceTypeULOnlySharingExtIes) Reset() {
	*x = SharedResourceTypeULOnlySharingExtIes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[775]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SharedResourceTypeULOnlySharingExtIes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SharedResourceTypeULOnlySharingExtIes) ProtoMessage() {}

func (x *SharedResourceTypeULOnlySharingExtIes) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[775]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SharedResourceTypeULOnlySharingExtIes.ProtoReflect.Descriptor instead.
func (*SharedResourceTypeULOnlySharingExtIes) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{775}
}

func (x *SharedResourceTypeULOnlySharingExtIes) GetValue() *emptypb.Empty {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:7788
// @inject_tag: aper:"valueExt"
// {SharedResourceType-UL-OnlySharing}
type SharedResourceTypeULOnlySharing struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UlResourceBitmap *DataTrafficResources `protobuf:"bytes,1,opt,name=ul_resource_bitmap,json=ul-resourceBitmap,proto3" json:"ul_resource_bitmap,omitempty"`
	// @inject_tag: aper:"optional,sizeLB:1,"
	IEExtensions []*SharedResourceTypeULOnlySharingExtIes `protobuf:"bytes,2,rep,name=i_e_extensions,json=iE-Extensions,proto3" json:"i_e_extensions,omitempty" aper:"optional,sizeLB:1,"`
}

func (x *SharedResourceTypeULOnlySharing) Reset() {
	*x = SharedResourceTypeULOnlySharing{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[776]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SharedResourceTypeULOnlySharing) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SharedResourceTypeULOnlySharing) ProtoMessage() {}

func (x *SharedResourceTypeULOnlySharing) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[776]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SharedResourceTypeULOnlySharing.ProtoReflect.Descriptor instead.
func (*SharedResourceTypeULOnlySharing) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{776}
}

func (x *SharedResourceTypeULOnlySharing) GetUlResourceBitmap() *DataTrafficResources {
	if x != nil {
		return x.UlResourceBitmap
	}
	return nil
}

func (x *SharedResourceTypeULOnlySharing) GetIEExtensions() []*SharedResourceTypeULOnlySharingExtIes {
	if x != nil {
		return x.IEExtensions
	}
	return nil
}

// value set from xnap_v1.asn1:7803
// {SharedResourceType-ULDL-Sharing-ExtIEs}
type SharedResourceTypeULdlSharingExtIes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *emptypb.Empty `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *SharedResourceTypeULdlSharingExtIes) Reset() {
	*x = SharedResourceTypeULdlSharingExtIes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[777]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SharedResourceTypeULdlSharingExtIes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SharedResourceTypeULdlSharingExtIes) ProtoMessage() {}

func (x *SharedResourceTypeULdlSharingExtIes) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[777]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SharedResourceTypeULdlSharingExtIes.ProtoReflect.Descriptor instead.
func (*SharedResourceTypeULdlSharingExtIes) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{777}
}

func (x *SharedResourceTypeULdlSharingExtIes) GetValue() *emptypb.Empty {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:7798
// {SharedResourceType-ULDL-Sharing}
type SharedResourceTypeULdlSharing struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// choice from xnap_v1.asn1:7798
	//
	// Types that are assignable to SharedResourceTypeUldlSharing:
	//	*SharedResourceTypeULdlSharing_UlResources
	//	*SharedResourceTypeULdlSharing_DlResources
	//	*SharedResourceTypeULdlSharing_ChoiceExtension
	SharedResourceTypeUldlSharing isSharedResourceTypeULdlSharing_SharedResourceTypeUldlSharing `protobuf_oneof:"shared_resource_type_uldl_sharing"`
}

func (x *SharedResourceTypeULdlSharing) Reset() {
	*x = SharedResourceTypeULdlSharing{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[778]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SharedResourceTypeULdlSharing) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SharedResourceTypeULdlSharing) ProtoMessage() {}

func (x *SharedResourceTypeULdlSharing) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[778]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SharedResourceTypeULdlSharing.ProtoReflect.Descriptor instead.
func (*SharedResourceTypeULdlSharing) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{778}
}

func (m *SharedResourceTypeULdlSharing) GetSharedResourceTypeUldlSharing() isSharedResourceTypeULdlSharing_SharedResourceTypeUldlSharing {
	if m != nil {
		return m.SharedResourceTypeUldlSharing
	}
	return nil
}

func (x *SharedResourceTypeULdlSharing) GetUlResources() *SharedResourceTypeULdlSharingULResources {
	if x, ok := x.GetSharedResourceTypeUldlSharing().(*SharedResourceTypeULdlSharing_UlResources); ok {
		return x.UlResources
	}
	return nil
}

func (x *SharedResourceTypeULdlSharing) GetDlResources() *SharedResourceTypeULdlSharingDLResources {
	if x, ok := x.GetSharedResourceTypeUldlSharing().(*SharedResourceTypeULdlSharing_DlResources); ok {
		return x.DlResources
	}
	return nil
}

func (x *SharedResourceTypeULdlSharing) GetChoiceExtension() *SharedResourceTypeULdlSharingExtIes {
	if x, ok := x.GetSharedResourceTypeUldlSharing().(*SharedResourceTypeULdlSharing_ChoiceExtension); ok {
		return x.ChoiceExtension
	}
	return nil
}

type isSharedResourceTypeULdlSharing_SharedResourceTypeUldlSharing interface {
	isSharedResourceTypeULdlSharing_SharedResourceTypeUldlSharing()
}

type SharedResourceTypeULdlSharing_UlResources struct {
	// @inject_tag: aper:"choiceIdx:1,"
	UlResources *SharedResourceTypeULdlSharingULResources `protobuf:"bytes,1,opt,name=ul_resources,json=ul-resources,proto3,oneof" aper:"choiceIdx:1,"`
}

type SharedResourceTypeULdlSharing_DlResources struct {
	// @inject_tag: aper:"choiceIdx:2,"
	DlResources *SharedResourceTypeULdlSharingDLResources `protobuf:"bytes,2,opt,name=dl_resources,json=dl-resources,proto3,oneof" aper:"choiceIdx:2,"`
}

type SharedResourceTypeULdlSharing_ChoiceExtension struct {
	// @inject_tag: aper:"choiceIdx:3,"
	ChoiceExtension *SharedResourceTypeULdlSharingExtIes `protobuf:"bytes,3,opt,name=choice_extension,json=choice-extension,proto3,oneof" aper:"choiceIdx:3,"`
}

func (*SharedResourceTypeULdlSharing_UlResources) isSharedResourceTypeULdlSharing_SharedResourceTypeUldlSharing() {
}

func (*SharedResourceTypeULdlSharing_DlResources) isSharedResourceTypeULdlSharing_SharedResourceTypeUldlSharing() {
}

func (*SharedResourceTypeULdlSharing_ChoiceExtension) isSharedResourceTypeULdlSharing_SharedResourceTypeUldlSharing() {
}

// value set from xnap_v1.asn1:7813
// {SharedResourceType-ULDL-Sharing-UL-Resources-ExtIEs}
type SharedResourceTypeULdlSharingULResourcesExtIes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *emptypb.Empty `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *SharedResourceTypeULdlSharingULResourcesExtIes) Reset() {
	*x = SharedResourceTypeULdlSharingULResourcesExtIes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[779]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SharedResourceTypeULdlSharingULResourcesExtIes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SharedResourceTypeULdlSharingULResourcesExtIes) ProtoMessage() {}

func (x *SharedResourceTypeULdlSharingULResourcesExtIes) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[779]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SharedResourceTypeULdlSharingULResourcesExtIes.ProtoReflect.Descriptor instead.
func (*SharedResourceTypeULdlSharingULResourcesExtIes) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{779}
}

func (x *SharedResourceTypeULdlSharingULResourcesExtIes) GetValue() *emptypb.Empty {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:7808
// {SharedResourceType-ULDL-Sharing-UL-Resources}
type SharedResourceTypeULdlSharingULResources struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// choice from xnap_v1.asn1:7808
	//
	// Types that are assignable to SharedResourceTypeUldlSharingUlResources:
	//	*SharedResourceTypeULdlSharingULResources_Unchanged
	//	*SharedResourceTypeULdlSharingULResources_Changed
	//	*SharedResourceTypeULdlSharingULResources_ChoiceExtension
	SharedResourceTypeUldlSharingUlResources isSharedResourceTypeULdlSharingULResources_SharedResourceTypeUldlSharingUlResources `protobuf_oneof:"shared_resource_type_uldl_sharing_ul_resources"`
}

func (x *SharedResourceTypeULdlSharingULResources) Reset() {
	*x = SharedResourceTypeULdlSharingULResources{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[780]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SharedResourceTypeULdlSharingULResources) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SharedResourceTypeULdlSharingULResources) ProtoMessage() {}

func (x *SharedResourceTypeULdlSharingULResources) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[780]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SharedResourceTypeULdlSharingULResources.ProtoReflect.Descriptor instead.
func (*SharedResourceTypeULdlSharingULResources) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{780}
}

func (m *SharedResourceTypeULdlSharingULResources) GetSharedResourceTypeUldlSharingUlResources() isSharedResourceTypeULdlSharingULResources_SharedResourceTypeUldlSharingUlResources {
	if m != nil {
		return m.SharedResourceTypeUldlSharingUlResources
	}
	return nil
}

func (x *SharedResourceTypeULdlSharingULResources) GetUnchanged() int32 {
	if x, ok := x.GetSharedResourceTypeUldlSharingUlResources().(*SharedResourceTypeULdlSharingULResources_Unchanged); ok {
		return x.Unchanged
	}
	return 0
}

func (x *SharedResourceTypeULdlSharingULResources) GetChanged() *SharedResourceTypeULdlSharingULResourcesChanged {
	if x, ok := x.GetSharedResourceTypeUldlSharingUlResources().(*SharedResourceTypeULdlSharingULResources_Changed); ok {
		return x.Changed
	}
	return nil
}

func (x *SharedResourceTypeULdlSharingULResources) GetChoiceExtension() *SharedResourceTypeULdlSharingULResourcesExtIes {
	if x, ok := x.GetSharedResourceTypeUldlSharingUlResources().(*SharedResourceTypeULdlSharingULResources_ChoiceExtension); ok {
		return x.ChoiceExtension
	}
	return nil
}

type isSharedResourceTypeULdlSharingULResources_SharedResourceTypeUldlSharingUlResources interface {
	isSharedResourceTypeULdlSharingULResources_SharedResourceTypeUldlSharingUlResources()
}

type SharedResourceTypeULdlSharingULResources_Unchanged struct {
	// @inject_tag: aper:"choiceIdx:1,"
	Unchanged int32 `protobuf:"varint,1,opt,name=unchanged,proto3,oneof" aper:"choiceIdx:1,"`
}

type SharedResourceTypeULdlSharingULResources_Changed struct {
	// @inject_tag: aper:"choiceIdx:2,valueExt,"
	Changed *SharedResourceTypeULdlSharingULResourcesChanged `protobuf:"bytes,2,opt,name=changed,proto3,oneof" aper:"choiceIdx:2,valueExt,"`
}

type SharedResourceTypeULdlSharingULResources_ChoiceExtension struct {
	// @inject_tag: aper:"choiceIdx:3,"
	ChoiceExtension *SharedResourceTypeULdlSharingULResourcesExtIes `protobuf:"bytes,3,opt,name=choice_extension,json=choice-extension,proto3,oneof" aper:"choiceIdx:3,"`
}

func (*SharedResourceTypeULdlSharingULResources_Unchanged) isSharedResourceTypeULdlSharingULResources_SharedResourceTypeUldlSharingUlResources() {
}

func (*SharedResourceTypeULdlSharingULResources_Changed) isSharedResourceTypeULdlSharingULResources_SharedResourceTypeUldlSharingUlResources() {
}

func (*SharedResourceTypeULdlSharingULResources_ChoiceExtension) isSharedResourceTypeULdlSharingULResources_SharedResourceTypeUldlSharingUlResources() {
}

// value set from xnap_v1.asn1:7823
// {SharedResourceType-ULDL-Sharing-UL-ResourcesChanged-ExtIEs}
type SharedResourceTypeULdlSharingULResourcesChangedExtIes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *emptypb.Empty `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *SharedResourceTypeULdlSharingULResourcesChangedExtIes) Reset() {
	*x = SharedResourceTypeULdlSharingULResourcesChangedExtIes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[781]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SharedResourceTypeULdlSharingULResourcesChangedExtIes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SharedResourceTypeULdlSharingULResourcesChangedExtIes) ProtoMessage() {}

func (x *SharedResourceTypeULdlSharingULResourcesChangedExtIes) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[781]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SharedResourceTypeULdlSharingULResourcesChangedExtIes.ProtoReflect.Descriptor instead.
func (*SharedResourceTypeULdlSharingULResourcesChangedExtIes) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{781}
}

func (x *SharedResourceTypeULdlSharingULResourcesChangedExtIes) GetValue() *emptypb.Empty {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:7818
// @inject_tag: aper:"valueExt"
// {SharedResourceType-ULDL-Sharing-UL-ResourcesChanged}
type SharedResourceTypeULdlSharingULResourcesChanged struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UlResourceBitmap *DataTrafficResources `protobuf:"bytes,1,opt,name=ul_resource_bitmap,json=ul-resourceBitmap,proto3" json:"ul_resource_bitmap,omitempty"`
	// @inject_tag: aper:"optional,sizeLB:1,"
	IEExtensions []*SharedResourceTypeULdlSharingULResourcesChangedExtIes `protobuf:"bytes,2,rep,name=i_e_extensions,json=iE-Extensions,proto3" json:"i_e_extensions,omitempty" aper:"optional,sizeLB:1,"`
}

func (x *SharedResourceTypeULdlSharingULResourcesChanged) Reset() {
	*x = SharedResourceTypeULdlSharingULResourcesChanged{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[782]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SharedResourceTypeULdlSharingULResourcesChanged) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SharedResourceTypeULdlSharingULResourcesChanged) ProtoMessage() {}

func (x *SharedResourceTypeULdlSharingULResourcesChanged) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[782]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SharedResourceTypeULdlSharingULResourcesChanged.ProtoReflect.Descriptor instead.
func (*SharedResourceTypeULdlSharingULResourcesChanged) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{782}
}

func (x *SharedResourceTypeULdlSharingULResourcesChanged) GetUlResourceBitmap() *DataTrafficResources {
	if x != nil {
		return x.UlResourceBitmap
	}
	return nil
}

func (x *SharedResourceTypeULdlSharingULResourcesChanged) GetIEExtensions() []*SharedResourceTypeULdlSharingULResourcesChangedExtIes {
	if x != nil {
		return x.IEExtensions
	}
	return nil
}

// value set from xnap_v1.asn1:7833
// {SharedResourceType-ULDL-Sharing-DL-Resources-ExtIEs}
type SharedResourceTypeULdlSharingDLResourcesExtIes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *emptypb.Empty `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *SharedResourceTypeULdlSharingDLResourcesExtIes) Reset() {
	*x = SharedResourceTypeULdlSharingDLResourcesExtIes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[783]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SharedResourceTypeULdlSharingDLResourcesExtIes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SharedResourceTypeULdlSharingDLResourcesExtIes) ProtoMessage() {}

func (x *SharedResourceTypeULdlSharingDLResourcesExtIes) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[783]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SharedResourceTypeULdlSharingDLResourcesExtIes.ProtoReflect.Descriptor instead.
func (*SharedResourceTypeULdlSharingDLResourcesExtIes) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{783}
}

func (x *SharedResourceTypeULdlSharingDLResourcesExtIes) GetValue() *emptypb.Empty {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:7828
// {SharedResourceType-ULDL-Sharing-DL-Resources}
type SharedResourceTypeULdlSharingDLResources struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// choice from xnap_v1.asn1:7828
	//
	// Types that are assignable to SharedResourceTypeUldlSharingDlResources:
	//	*SharedResourceTypeULdlSharingDLResources_Unchanged
	//	*SharedResourceTypeULdlSharingDLResources_Changed
	//	*SharedResourceTypeULdlSharingDLResources_ChoiceExtension
	SharedResourceTypeUldlSharingDlResources isSharedResourceTypeULdlSharingDLResources_SharedResourceTypeUldlSharingDlResources `protobuf_oneof:"shared_resource_type_uldl_sharing_dl_resources"`
}

func (x *SharedResourceTypeULdlSharingDLResources) Reset() {
	*x = SharedResourceTypeULdlSharingDLResources{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[784]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SharedResourceTypeULdlSharingDLResources) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SharedResourceTypeULdlSharingDLResources) ProtoMessage() {}

func (x *SharedResourceTypeULdlSharingDLResources) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[784]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SharedResourceTypeULdlSharingDLResources.ProtoReflect.Descriptor instead.
func (*SharedResourceTypeULdlSharingDLResources) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{784}
}

func (m *SharedResourceTypeULdlSharingDLResources) GetSharedResourceTypeUldlSharingDlResources() isSharedResourceTypeULdlSharingDLResources_SharedResourceTypeUldlSharingDlResources {
	if m != nil {
		return m.SharedResourceTypeUldlSharingDlResources
	}
	return nil
}

func (x *SharedResourceTypeULdlSharingDLResources) GetUnchanged() int32 {
	if x, ok := x.GetSharedResourceTypeUldlSharingDlResources().(*SharedResourceTypeULdlSharingDLResources_Unchanged); ok {
		return x.Unchanged
	}
	return 0
}

func (x *SharedResourceTypeULdlSharingDLResources) GetChanged() *SharedResourceTypeULdlSharingDLResourcesChanged {
	if x, ok := x.GetSharedResourceTypeUldlSharingDlResources().(*SharedResourceTypeULdlSharingDLResources_Changed); ok {
		return x.Changed
	}
	return nil
}

func (x *SharedResourceTypeULdlSharingDLResources) GetChoiceExtension() *SharedResourceTypeULdlSharingDLResourcesExtIes {
	if x, ok := x.GetSharedResourceTypeUldlSharingDlResources().(*SharedResourceTypeULdlSharingDLResources_ChoiceExtension); ok {
		return x.ChoiceExtension
	}
	return nil
}

type isSharedResourceTypeULdlSharingDLResources_SharedResourceTypeUldlSharingDlResources interface {
	isSharedResourceTypeULdlSharingDLResources_SharedResourceTypeUldlSharingDlResources()
}

type SharedResourceTypeULdlSharingDLResources_Unchanged struct {
	// @inject_tag: aper:"choiceIdx:1,"
	Unchanged int32 `protobuf:"varint,1,opt,name=unchanged,proto3,oneof" aper:"choiceIdx:1,"`
}

type SharedResourceTypeULdlSharingDLResources_Changed struct {
	// @inject_tag: aper:"choiceIdx:2,valueExt,"
	Changed *SharedResourceTypeULdlSharingDLResourcesChanged `protobuf:"bytes,2,opt,name=changed,proto3,oneof" aper:"choiceIdx:2,valueExt,"`
}

type SharedResourceTypeULdlSharingDLResources_ChoiceExtension struct {
	// @inject_tag: aper:"choiceIdx:3,"
	ChoiceExtension *SharedResourceTypeULdlSharingDLResourcesExtIes `protobuf:"bytes,3,opt,name=choice_extension,json=choice-extension,proto3,oneof" aper:"choiceIdx:3,"`
}

func (*SharedResourceTypeULdlSharingDLResources_Unchanged) isSharedResourceTypeULdlSharingDLResources_SharedResourceTypeUldlSharingDlResources() {
}

func (*SharedResourceTypeULdlSharingDLResources_Changed) isSharedResourceTypeULdlSharingDLResources_SharedResourceTypeUldlSharingDlResources() {
}

func (*SharedResourceTypeULdlSharingDLResources_ChoiceExtension) isSharedResourceTypeULdlSharingDLResources_SharedResourceTypeUldlSharingDlResources() {
}

// value set from xnap_v1.asn1:7843
// {SharedResourceType-ULDL-Sharing-DL-ResourcesChanged-ExtIEs}
type SharedResourceTypeULdlSharingDLResourcesChangedExtIes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *emptypb.Empty `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *SharedResourceTypeULdlSharingDLResourcesChangedExtIes) Reset() {
	*x = SharedResourceTypeULdlSharingDLResourcesChangedExtIes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[785]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SharedResourceTypeULdlSharingDLResourcesChangedExtIes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SharedResourceTypeULdlSharingDLResourcesChangedExtIes) ProtoMessage() {}

func (x *SharedResourceTypeULdlSharingDLResourcesChangedExtIes) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[785]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SharedResourceTypeULdlSharingDLResourcesChangedExtIes.ProtoReflect.Descriptor instead.
func (*SharedResourceTypeULdlSharingDLResourcesChangedExtIes) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{785}
}

func (x *SharedResourceTypeULdlSharingDLResourcesChangedExtIes) GetValue() *emptypb.Empty {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:7838
// @inject_tag: aper:"valueExt"
// {SharedResourceType-ULDL-Sharing-DL-ResourcesChanged}
type SharedResourceTypeULdlSharingDLResourcesChanged struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DlResourceBitmap *DataTrafficResources `protobuf:"bytes,1,opt,name=dl_resource_bitmap,json=dl-resourceBitmap,proto3" json:"dl_resource_bitmap,omitempty"`
	// @inject_tag: aper:"optional,sizeLB:1,"
	IEExtensions []*SharedResourceTypeULdlSharingDLResourcesChangedExtIes `protobuf:"bytes,2,rep,name=i_e_extensions,json=iE-Extensions,proto3" json:"i_e_extensions,omitempty" aper:"optional,sizeLB:1,"`
}

func (x *SharedResourceTypeULdlSharingDLResourcesChanged) Reset() {
	*x = SharedResourceTypeULdlSharingDLResourcesChanged{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[786]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SharedResourceTypeULdlSharingDLResourcesChanged) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SharedResourceTypeULdlSharingDLResourcesChanged) ProtoMessage() {}

func (x *SharedResourceTypeULdlSharingDLResourcesChanged) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[786]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SharedResourceTypeULdlSharingDLResourcesChanged.ProtoReflect.Descriptor instead.
func (*SharedResourceTypeULdlSharingDLResourcesChanged) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{786}
}

func (x *SharedResourceTypeULdlSharingDLResourcesChanged) GetDlResourceBitmap() *DataTrafficResources {
	if x != nil {
		return x.DlResourceBitmap
	}
	return nil
}

func (x *SharedResourceTypeULdlSharingDLResourcesChanged) GetIEExtensions() []*SharedResourceTypeULdlSharingDLResourcesChangedExtIes {
	if x != nil {
		return x.IEExtensions
	}
	return nil
}

// sequence from xnap_v1.asn1:7849
// {SliceAvailableCapacity}
type SliceAvailableCapacity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"valueExt,sizeLB:1,sizeUB:12,"
	Value []*SliceAvailableCapacityItem `protobuf:"bytes,1,rep,name=value,proto3" json:"value,omitempty" aper:"valueExt,sizeLB:1,sizeUB:12,"`
}

func (x *SliceAvailableCapacity) Reset() {
	*x = SliceAvailableCapacity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[787]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SliceAvailableCapacity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SliceAvailableCapacity) ProtoMessage() {}

func (x *SliceAvailableCapacity) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[787]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SliceAvailableCapacity.ProtoReflect.Descriptor instead.
func (*SliceAvailableCapacity) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{787}
}

func (x *SliceAvailableCapacity) GetValue() []*SliceAvailableCapacityItem {
	if x != nil {
		return x.Value
	}
	return nil
}

// value set from xnap_v1.asn1:7857
// {SliceAvailableCapacity-Item-ExtIEs}
type SliceAvailableCapacityItemExtIes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *emptypb.Empty `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *SliceAvailableCapacityItemExtIes) Reset() {
	*x = SliceAvailableCapacityItemExtIes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[788]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SliceAvailableCapacityItemExtIes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SliceAvailableCapacityItemExtIes) ProtoMessage() {}

func (x *SliceAvailableCapacityItemExtIes) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[788]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SliceAvailableCapacityItemExtIes.ProtoReflect.Descriptor instead.
func (*SliceAvailableCapacityItemExtIes) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{788}
}

func (x *SliceAvailableCapacityItemExtIes) GetValue() *emptypb.Empty {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:7850
// @inject_tag: aper:"valueExt"
// {SliceAvailableCapacity-Item}
type SliceAvailableCapacityItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PLmnidentity                *PlmnIdentity                `protobuf:"bytes,1,opt,name=p_lmnidentity,json=pLMNIdentity,proto3" json:"p_lmnidentity,omitempty"`
	SNssaiavailableCapacityList *SnssaiavailableCapacityList `protobuf:"bytes,2,opt,name=s_nssaiavailable_capacity_list,json=sNSSAIAvailableCapacity-List,proto3" json:"s_nssaiavailable_capacity_list,omitempty"`
	// @inject_tag: aper:"optional,sizeLB:1,"
	IEExtensions []*SliceAvailableCapacityItemExtIes `protobuf:"bytes,3,rep,name=i_e_extensions,json=iE-Extensions,proto3" json:"i_e_extensions,omitempty" aper:"optional,sizeLB:1,"`
}

func (x *SliceAvailableCapacityItem) Reset() {
	*x = SliceAvailableCapacityItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[789]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SliceAvailableCapacityItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SliceAvailableCapacityItem) ProtoMessage() {}

func (x *SliceAvailableCapacityItem) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[789]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SliceAvailableCapacityItem.ProtoReflect.Descriptor instead.
func (*SliceAvailableCapacityItem) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{789}
}

func (x *SliceAvailableCapacityItem) GetPLmnidentity() *PlmnIdentity {
	if x != nil {
		return x.PLmnidentity
	}
	return nil
}

func (x *SliceAvailableCapacityItem) GetSNssaiavailableCapacityList() *SnssaiavailableCapacityList {
	if x != nil {
		return x.SNssaiavailableCapacityList
	}
	return nil
}

func (x *SliceAvailableCapacityItem) GetIEExtensions() []*SliceAvailableCapacityItemExtIes {
	if x != nil {
		return x.IEExtensions
	}
	return nil
}

// sequence from xnap_v1.asn1:7863
// {SNSSAIAvailableCapacity-List}
type SnssaiavailableCapacityList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"sizeLB:1,sizeUB:1024,"
	Value []*SnssaiavailableCapacityItem `protobuf:"bytes,1,rep,name=value,proto3" json:"value,omitempty" aper:"sizeLB:1,sizeUB:1024,"`
}

func (x *SnssaiavailableCapacityList) Reset() {
	*x = SnssaiavailableCapacityList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[790]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SnssaiavailableCapacityList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SnssaiavailableCapacityList) ProtoMessage() {}

func (x *SnssaiavailableCapacityList) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[790]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SnssaiavailableCapacityList.ProtoReflect.Descriptor instead.
func (*SnssaiavailableCapacityList) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{790}
}

func (x *SnssaiavailableCapacityList) GetValue() []*SnssaiavailableCapacityItem {
	if x != nil {
		return x.Value
	}
	return nil
}

// value set from xnap_v1.asn1:7870
// {SNSSAIAvailableCapacity-Item-ExtIEs}
type SnssaiavailableCapacityItemExtIes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *emptypb.Empty `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *SnssaiavailableCapacityItemExtIes) Reset() {
	*x = SnssaiavailableCapacityItemExtIes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[791]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SnssaiavailableCapacityItemExtIes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SnssaiavailableCapacityItemExtIes) ProtoMessage() {}

func (x *SnssaiavailableCapacityItemExtIes) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[791]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SnssaiavailableCapacityItemExtIes.ProtoReflect.Descriptor instead.
func (*SnssaiavailableCapacityItemExtIes) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{791}
}

func (x *SnssaiavailableCapacityItemExtIes) GetValue() *emptypb.Empty {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:7864
// {SNSSAIAvailableCapacity-Item}
type SnssaiavailableCapacityItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"valueExt,"
	SNssai *SNSsai `protobuf:"bytes,1,opt,name=s_nssai,json=sNSSAI,proto3" json:"s_nssai,omitempty" aper:"valueExt,"`
	// @inject_tag: aper:"valueLB:0,valueUB:100,"
	SliceAvailableCapacityValueDownlink int32 `protobuf:"varint,2,opt,name=slice_available_capacity_value_downlink,json=sliceAvailableCapacityValueDownlink,proto3" json:"slice_available_capacity_value_downlink,omitempty" aper:"valueLB:0,valueUB:100,"`
	// @inject_tag: aper:"valueLB:0,valueUB:100,"
	SliceAvailableCapacityValueUplink int32 `protobuf:"varint,3,opt,name=slice_available_capacity_value_uplink,json=sliceAvailableCapacityValueUplink,proto3" json:"slice_available_capacity_value_uplink,omitempty" aper:"valueLB:0,valueUB:100,"`
	// @inject_tag: aper:"optional,sizeLB:1,"
	IEExtensions []*SnssaiavailableCapacityItemExtIes `protobuf:"bytes,4,rep,name=i_e_extensions,json=iE-Extensions,proto3" json:"i_e_extensions,omitempty" aper:"optional,sizeLB:1,"`
}

func (x *SnssaiavailableCapacityItem) Reset() {
	*x = SnssaiavailableCapacityItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[792]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SnssaiavailableCapacityItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SnssaiavailableCapacityItem) ProtoMessage() {}

func (x *SnssaiavailableCapacityItem) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[792]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SnssaiavailableCapacityItem.ProtoReflect.Descriptor instead.
func (*SnssaiavailableCapacityItem) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{792}
}

func (x *SnssaiavailableCapacityItem) GetSNssai() *SNSsai {
	if x != nil {
		return x.SNssai
	}
	return nil
}

func (x *SnssaiavailableCapacityItem) GetSliceAvailableCapacityValueDownlink() int32 {
	if x != nil {
		return x.SliceAvailableCapacityValueDownlink
	}
	return 0
}

func (x *SnssaiavailableCapacityItem) GetSliceAvailableCapacityValueUplink() int32 {
	if x != nil {
		return x.SliceAvailableCapacityValueUplink
	}
	return 0
}

func (x *SnssaiavailableCapacityItem) GetIEExtensions() []*SnssaiavailableCapacityItemExtIes {
	if x != nil {
		return x.IEExtensions
	}
	return nil
}

// sequence from xnap_v1.asn1:7876
// {SliceSupport-List}
type SliceSupportList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"valueExt,sizeLB:1,sizeUB:1024,"
	Value []*SNSsai `protobuf:"bytes,1,rep,name=value,proto3" json:"value,omitempty" aper:"valueExt,sizeLB:1,sizeUB:1024,"`
}

func (x *SliceSupportList) Reset() {
	*x = SliceSupportList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[793]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SliceSupportList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SliceSupportList) ProtoMessage() {}

func (x *SliceSupportList) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[793]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SliceSupportList.ProtoReflect.Descriptor instead.
func (*SliceSupportList) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{793}
}

func (x *SliceSupportList) GetValue() []*SNSsai {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:7878
// {SliceToReport-List}
type SliceToReportList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"valueExt,sizeLB:1,sizeUB:12,"
	Value []*SliceToReportListItem `protobuf:"bytes,1,rep,name=value,proto3" json:"value,omitempty" aper:"valueExt,sizeLB:1,sizeUB:12,"`
}

func (x *SliceToReportList) Reset() {
	*x = SliceToReportList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[794]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SliceToReportList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SliceToReportList) ProtoMessage() {}

func (x *SliceToReportList) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[794]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SliceToReportList.ProtoReflect.Descriptor instead.
func (*SliceToReportList) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{794}
}

func (x *SliceToReportList) GetValue() []*SliceToReportListItem {
	if x != nil {
		return x.Value
	}
	return nil
}

// value set from xnap_v1.asn1:7886
// {SliceToReport-List-Item-ExtIEs}
type SliceToReportListItemExtIes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *emptypb.Empty `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *SliceToReportListItemExtIes) Reset() {
	*x = SliceToReportListItemExtIes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[795]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SliceToReportListItemExtIes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SliceToReportListItemExtIes) ProtoMessage() {}

func (x *SliceToReportListItemExtIes) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[795]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SliceToReportListItemExtIes.ProtoReflect.Descriptor instead.
func (*SliceToReportListItemExtIes) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{795}
}

func (x *SliceToReportListItemExtIes) GetValue() *emptypb.Empty {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:7879
// @inject_tag: aper:"valueExt"
// {SliceToReport-List-Item}
type SliceToReportListItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PLmnidentity *PlmnIdentity `protobuf:"bytes,1,opt,name=p_lmnidentity,json=pLMNIdentity,proto3" json:"p_lmnidentity,omitempty"`
	SNssailist   *Snssailist   `protobuf:"bytes,2,opt,name=s_nssailist,json=sNSSAIlist,proto3" json:"s_nssailist,omitempty"`
	// @inject_tag: aper:"optional,sizeLB:1,"
	IEExtensions []*SliceToReportListItemExtIes `protobuf:"bytes,3,rep,name=i_e_extensions,json=iE-Extensions,proto3" json:"i_e_extensions,omitempty" aper:"optional,sizeLB:1,"`
}

func (x *SliceToReportListItem) Reset() {
	*x = SliceToReportListItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[796]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SliceToReportListItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SliceToReportListItem) ProtoMessage() {}

func (x *SliceToReportListItem) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[796]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SliceToReportListItem.ProtoReflect.Descriptor instead.
func (*SliceToReportListItem) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{796}
}

func (x *SliceToReportListItem) GetPLmnidentity() *PlmnIdentity {
	if x != nil {
		return x.PLmnidentity
	}
	return nil
}

func (x *SliceToReportListItem) GetSNssailist() *Snssailist {
	if x != nil {
		return x.SNssailist
	}
	return nil
}

func (x *SliceToReportListItem) GetIEExtensions() []*SliceToReportListItemExtIes {
	if x != nil {
		return x.IEExtensions
	}
	return nil
}

// sequence from xnap_v1.asn1:7892
// {SNSSAI-list}
type Snssailist struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"sizeLB:1,sizeUB:1024,"
	Value []*SnssaiItem `protobuf:"bytes,1,rep,name=value,proto3" json:"value,omitempty" aper:"sizeLB:1,sizeUB:1024,"`
}

func (x *Snssailist) Reset() {
	*x = Snssailist{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[797]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Snssailist) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Snssailist) ProtoMessage() {}

func (x *Snssailist) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[797]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Snssailist.ProtoReflect.Descriptor instead.
func (*Snssailist) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{797}
}

func (x *Snssailist) GetValue() []*SnssaiItem {
	if x != nil {
		return x.Value
	}
	return nil
}

// value set from xnap_v1.asn1:7897
// {SNSSAI-Item-ExtIEs}
type SnssaiItemExtIes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *emptypb.Empty `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *SnssaiItemExtIes) Reset() {
	*x = SnssaiItemExtIes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[798]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SnssaiItemExtIes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SnssaiItemExtIes) ProtoMessage() {}

func (x *SnssaiItemExtIes) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[798]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SnssaiItemExtIes.ProtoReflect.Descriptor instead.
func (*SnssaiItemExtIes) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{798}
}

func (x *SnssaiItemExtIes) GetValue() *emptypb.Empty {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:7893
// {SNSSAI-Item}
type SnssaiItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"valueExt,"
	SNssai *SNSsai `protobuf:"bytes,1,opt,name=s_nssai,json=sNSSAI,proto3" json:"s_nssai,omitempty" aper:"valueExt,"`
	// @inject_tag: aper:"optional,sizeLB:1,"
	IEExtensions []*SnssaiItemExtIes `protobuf:"bytes,2,rep,name=i_e_extensions,json=iE-Extensions,proto3" json:"i_e_extensions,omitempty" aper:"optional,sizeLB:1,"`
}

func (x *SnssaiItem) Reset() {
	*x = SnssaiItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[799]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SnssaiItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SnssaiItem) ProtoMessage() {}

func (x *SnssaiItem) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[799]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SnssaiItem.ProtoReflect.Descriptor instead.
func (*SnssaiItem) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{799}
}

func (x *SnssaiItem) GetSNssai() *SNSsai {
	if x != nil {
		return x.SNssai
	}
	return nil
}

func (x *SnssaiItem) GetIEExtensions() []*SnssaiItemExtIes {
	if x != nil {
		return x.IEExtensions
	}
	return nil
}

// sequence from xnap_v1.asn1:7903
// {SlotConfiguration-List}
type SlotConfigurationList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"valueExt,sizeLB:1,sizeUB:5120,"
	Value []*SlotConfigurationListItem `protobuf:"bytes,1,rep,name=value,proto3" json:"value,omitempty" aper:"valueExt,sizeLB:1,sizeUB:5120,"`
}

func (x *SlotConfigurationList) Reset() {
	*x = SlotConfigurationList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[800]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SlotConfigurationList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SlotConfigurationList) ProtoMessage() {}

func (x *SlotConfigurationList) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[800]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SlotConfigurationList.ProtoReflect.Descriptor instead.
func (*SlotConfigurationList) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{800}
}

func (x *SlotConfigurationList) GetValue() []*SlotConfigurationListItem {
	if x != nil {
		return x.Value
	}
	return nil
}

// value set from xnap_v1.asn1:7910
// {SlotConfiguration-List-Item-ExtIEs}
type SlotConfigurationListItemExtIes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *emptypb.Empty `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *SlotConfigurationListItemExtIes) Reset() {
	*x = SlotConfigurationListItemExtIes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[801]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SlotConfigurationListItemExtIes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SlotConfigurationListItemExtIes) ProtoMessage() {}

func (x *SlotConfigurationListItemExtIes) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[801]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SlotConfigurationListItemExtIes.ProtoReflect.Descriptor instead.
func (*SlotConfigurationListItemExtIes) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{801}
}

func (x *SlotConfigurationListItemExtIes) GetValue() *emptypb.Empty {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:7904
// @inject_tag: aper:"valueExt"
// {SlotConfiguration-List-Item}
type SlotConfigurationListItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"valueLB:0,valueUB:5119,"
	SlotIndex              int32                   `protobuf:"varint,1,opt,name=slot_index,json=slotIndex,proto3" json:"slot_index,omitempty" aper:"valueLB:0,valueUB:5119,"`
	SymbolAllocationInSlot *SymbolAllocationinSlot `protobuf:"bytes,2,opt,name=symbol_allocation_in_slot,json=symbolAllocation-in-Slot,proto3" json:"symbol_allocation_in_slot,omitempty"`
	// @inject_tag: aper:"optional,sizeLB:1,"
	IEExtensions []*SlotConfigurationListItemExtIes `protobuf:"bytes,3,rep,name=i_e_extensions,json=iE-Extensions,proto3" json:"i_e_extensions,omitempty" aper:"optional,sizeLB:1,"`
}

func (x *SlotConfigurationListItem) Reset() {
	*x = SlotConfigurationListItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[802]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SlotConfigurationListItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SlotConfigurationListItem) ProtoMessage() {}

func (x *SlotConfigurationListItem) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[802]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SlotConfigurationListItem.ProtoReflect.Descriptor instead.
func (*SlotConfigurationListItem) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{802}
}

func (x *SlotConfigurationListItem) GetSlotIndex() int32 {
	if x != nil {
		return x.SlotIndex
	}
	return 0
}

func (x *SlotConfigurationListItem) GetSymbolAllocationInSlot() *SymbolAllocationinSlot {
	if x != nil {
		return x.SymbolAllocationInSlot
	}
	return nil
}

func (x *SlotConfigurationListItem) GetIEExtensions() []*SlotConfigurationListItemExtIes {
	if x != nil {
		return x.IEExtensions
	}
	return nil
}

// range of Integer from xnap_v1.asn1:7914
// {S-NG-RANnode-SecurityKey}
type SNGRAnnodeSecurityKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"sizeLB:256,sizeUB:256,"
	Value *asn1.BitString `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty" aper:"sizeLB:256,sizeUB:256,"`
}

func (x *SNGRAnnodeSecurityKey) Reset() {
	*x = SNGRAnnodeSecurityKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[803]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SNGRAnnodeSecurityKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SNGRAnnodeSecurityKey) ProtoMessage() {}

func (x *SNGRAnnodeSecurityKey) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[803]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SNGRAnnodeSecurityKey.ProtoReflect.Descriptor instead.
func (*SNGRAnnodeSecurityKey) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{803}
}

func (x *SNGRAnnodeSecurityKey) GetValue() *asn1.BitString {
	if x != nil {
		return x.Value
	}
	return nil
}

// value set from xnap_v1.asn1:7930
// {S-NSSAI-ExtIEs}
type SNSsaiExtIes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *emptypb.Empty `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *SNSsaiExtIes) Reset() {
	*x = SNSsaiExtIes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[804]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SNSsaiExtIes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SNSsaiExtIes) ProtoMessage() {}

func (x *SNSsaiExtIes) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[804]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SNSsaiExtIes.ProtoReflect.Descriptor instead.
func (*SNSsaiExtIes) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{804}
}

func (x *SNSsaiExtIes) GetValue() *emptypb.Empty {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:7924
// @inject_tag: aper:"valueExt"
// {S-NSSAI}
type SNSsai struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"sizeLB:1,sizeUB:1,"
	Sst []byte `protobuf:"bytes,1,opt,name=sst,proto3" json:"sst,omitempty" aper:"sizeLB:1,sizeUB:1,"`
	// @inject_tag: aper:"optional,sizeLB:3,sizeUB:3,"
	Sd []byte `protobuf:"bytes,2,opt,name=sd,proto3,oneof" json:"sd,omitempty" aper:"optional,sizeLB:3,sizeUB:3,"`
	// @inject_tag: aper:"optional,sizeLB:1,sizeUB:65535,valueExt"
	IEExtensions []*SNSsaiExtIes `protobuf:"bytes,3,rep,name=i_e_extensions,json=iE-Extensions,proto3" json:"i_e_extensions,omitempty" aper:"optional,sizeLB:1,sizeUB:65535,valueExt"`
}

func (x *SNSsai) Reset() {
	*x = SNSsai{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[805]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SNSsai) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SNSsai) ProtoMessage() {}

func (x *SNSsai) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[805]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SNSsai.ProtoReflect.Descriptor instead.
func (*SNSsai) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{805}
}

func (x *SNSsai) GetSst() []byte {
	if x != nil {
		return x.Sst
	}
	return nil
}

func (x *SNSsai) GetSd() []byte {
	if x != nil {
		return x.Sd
	}
	return nil
}

func (x *SNSsai) GetIEExtensions() []*SNSsaiExtIes {
	if x != nil {
		return x.IEExtensions
	}
	return nil
}

// value set from xnap_v1.asn1:7947
// {SpecialSubframeInfo-E-UTRA-ExtIEs}
type SpecialSubframeInfoEUTraExtIes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *emptypb.Empty `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *SpecialSubframeInfoEUTraExtIes) Reset() {
	*x = SpecialSubframeInfoEUTraExtIes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[806]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpecialSubframeInfoEUTraExtIes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpecialSubframeInfoEUTraExtIes) ProtoMessage() {}

func (x *SpecialSubframeInfoEUTraExtIes) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[806]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpecialSubframeInfoEUTraExtIes.ProtoReflect.Descriptor instead.
func (*SpecialSubframeInfoEUTraExtIes) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{806}
}

func (x *SpecialSubframeInfoEUTraExtIes) GetValue() *emptypb.Empty {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:7940
// @inject_tag: aper:"valueExt"
// {SpecialSubframeInfo-E-UTRA}
type SpecialSubframeInfoEUTra struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"valueExt,valueLB:0,valueUB:10,"
	SpecialSubframePattern SpecialSubframePatternsEUTra `protobuf:"varint,1,opt,name=special_subframe_pattern,json=specialSubframePattern,proto3,enum=xnap.v1.SpecialSubframePatternsEUTra" json:"special_subframe_pattern,omitempty" aper:"valueExt,valueLB:0,valueUB:10,"`
	// @inject_tag: aper:"valueExt,valueLB:0,valueUB:1,"
	CyclicPrefixDl CyclicPrefixEUTraDL `protobuf:"varint,2,opt,name=cyclic_prefix_dl,json=cyclicPrefixDL,proto3,enum=xnap.v1.CyclicPrefixEUTraDL" json:"cyclic_prefix_dl,omitempty" aper:"valueExt,valueLB:0,valueUB:1,"`
	// @inject_tag: aper:"valueExt,valueLB:0,valueUB:1,"
	CyclicPrefixUl CyclicPrefixEUTraUL `protobuf:"varint,3,opt,name=cyclic_prefix_ul,json=cyclicPrefixUL,proto3,enum=xnap.v1.CyclicPrefixEUTraUL" json:"cyclic_prefix_ul,omitempty" aper:"valueExt,valueLB:0,valueUB:1,"`
	// @inject_tag: aper:"optional,sizeLB:1,sizeUB:65535,valueExt"
	IEExtensions []*SpecialSubframeInfoEUTraExtIes `protobuf:"bytes,4,rep,name=i_e_extensions,json=iE-Extensions,proto3" json:"i_e_extensions,omitempty" aper:"optional,sizeLB:1,sizeUB:65535,valueExt"`
}

func (x *SpecialSubframeInfoEUTra) Reset() {
	*x = SpecialSubframeInfoEUTra{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[807]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpecialSubframeInfoEUTra) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpecialSubframeInfoEUTra) ProtoMessage() {}

func (x *SpecialSubframeInfoEUTra) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[807]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpecialSubframeInfoEUTra.ProtoReflect.Descriptor instead.
func (*SpecialSubframeInfoEUTra) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{807}
}

func (x *SpecialSubframeInfoEUTra) GetSpecialSubframePattern() SpecialSubframePatternsEUTra {
	if x != nil {
		return x.SpecialSubframePattern
	}
	return SpecialSubframePatternsEUTra_SPECIAL_SUBFRAME_PATTERNS_E_UTRA_SSP0
}

func (x *SpecialSubframeInfoEUTra) GetCyclicPrefixDl() CyclicPrefixEUTraDL {
	if x != nil {
		return x.CyclicPrefixDl
	}
	return CyclicPrefixEUTraDL_CYCLIC_PREFIX_E_UTRA_DL_NORMAL
}

func (x *SpecialSubframeInfoEUTra) GetCyclicPrefixUl() CyclicPrefixEUTraUL {
	if x != nil {
		return x.CyclicPrefixUl
	}
	return CyclicPrefixEUTraUL_CYCLIC_PREFIX_E_UTRA_UL_NORMAL
}

func (x *SpecialSubframeInfoEUTra) GetIEExtensions() []*SpecialSubframeInfoEUTraExtIes {
	if x != nil {
		return x.IEExtensions
	}
	return nil
}

// range of Integer from xnap_v1.asn1:7968
// {SpectrumSharingGroupID}
type SpectrumSharingGroupId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"valueLB:1,valueUB:16384,"
	Value int32 `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty" aper:"valueLB:1,valueUB:16384,"`
}

func (x *SpectrumSharingGroupId) Reset() {
	*x = SpectrumSharingGroupId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[808]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpectrumSharingGroupId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpectrumSharingGroupId) ProtoMessage() {}

func (x *SpectrumSharingGroupId) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[808]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpectrumSharingGroupId.ProtoReflect.Descriptor instead.
func (*SpectrumSharingGroupId) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{808}
}

func (x *SpectrumSharingGroupId) GetValue() int32 {
	if x != nil {
		return x.Value
	}
	return 0
}

// sequence from xnap_v1.asn1:7979
// {SSBAreaCapacityValue-List}
type SsbareaCapacityValueList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"valueExt,sizeLB:1,sizeUB:64,"
	Value []*SsbareaCapacityValueListItem `protobuf:"bytes,1,rep,name=value,proto3" json:"value,omitempty" aper:"valueExt,sizeLB:1,sizeUB:64,"`
}

func (x *SsbareaCapacityValueList) Reset() {
	*x = SsbareaCapacityValueList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[809]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SsbareaCapacityValueList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SsbareaCapacityValueList) ProtoMessage() {}

func (x *SsbareaCapacityValueList) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[809]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SsbareaCapacityValueList.ProtoReflect.Descriptor instead.
func (*SsbareaCapacityValueList) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{809}
}

func (x *SsbareaCapacityValueList) GetValue() []*SsbareaCapacityValueListItem {
	if x != nil {
		return x.Value
	}
	return nil
}

// value set from xnap_v1.asn1:7987
// {SSBAreaCapacityValue-List-Item-ExtIEs}
type SsbareaCapacityValueListItemExtIes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *emptypb.Empty `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *SsbareaCapacityValueListItemExtIes) Reset() {
	*x = SsbareaCapacityValueListItemExtIes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[810]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SsbareaCapacityValueListItemExtIes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SsbareaCapacityValueListItemExtIes) ProtoMessage() {}

func (x *SsbareaCapacityValueListItemExtIes) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[810]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SsbareaCapacityValueListItemExtIes.ProtoReflect.Descriptor instead.
func (*SsbareaCapacityValueListItemExtIes) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{810}
}

func (x *SsbareaCapacityValueListItemExtIes) GetValue() *emptypb.Empty {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:7980
// @inject_tag: aper:"valueExt"
// {SSBAreaCapacityValue-List-Item}
type SsbareaCapacityValueListItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"valueLB:0,valueUB:63,"
	SSbindex int32 `protobuf:"varint,1,opt,name=s_sbindex,json=sSBIndex,proto3" json:"s_sbindex,omitempty" aper:"valueLB:0,valueUB:63,"`
	// @inject_tag: aper:"valueLB:0,valueUB:100,"
	SsbAreaCapacityValue int32 `protobuf:"varint,2,opt,name=ssb_area_capacity_value,json=ssbAreaCapacityValue,proto3" json:"ssb_area_capacity_value,omitempty" aper:"valueLB:0,valueUB:100,"`
	// @inject_tag: aper:"optional,sizeLB:1,"
	IEExtensions []*SsbareaCapacityValueListItemExtIes `protobuf:"bytes,3,rep,name=i_e_extensions,json=iE-Extensions,proto3" json:"i_e_extensions,omitempty" aper:"optional,sizeLB:1,"`
}

func (x *SsbareaCapacityValueListItem) Reset() {
	*x = SsbareaCapacityValueListItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[811]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SsbareaCapacityValueListItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SsbareaCapacityValueListItem) ProtoMessage() {}

func (x *SsbareaCapacityValueListItem) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[811]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SsbareaCapacityValueListItem.ProtoReflect.Descriptor instead.
func (*SsbareaCapacityValueListItem) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{811}
}

func (x *SsbareaCapacityValueListItem) GetSSbindex() int32 {
	if x != nil {
		return x.SSbindex
	}
	return 0
}

func (x *SsbareaCapacityValueListItem) GetSsbAreaCapacityValue() int32 {
	if x != nil {
		return x.SsbAreaCapacityValue
	}
	return 0
}

func (x *SsbareaCapacityValueListItem) GetIEExtensions() []*SsbareaCapacityValueListItemExtIes {
	if x != nil {
		return x.IEExtensions
	}
	return nil
}

// sequence from xnap_v1.asn1:7994
// {SSBAreaRadioResourceStatus-List}
type SsbareaRadioResourceStatusList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"valueExt,sizeLB:1,sizeUB:64,"
	Value []*SsbareaRadioResourceStatusListItem `protobuf:"bytes,1,rep,name=value,proto3" json:"value,omitempty" aper:"valueExt,sizeLB:1,sizeUB:64,"`
}

func (x *SsbareaRadioResourceStatusList) Reset() {
	*x = SsbareaRadioResourceStatusList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[812]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SsbareaRadioResourceStatusList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SsbareaRadioResourceStatusList) ProtoMessage() {}

func (x *SsbareaRadioResourceStatusList) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[812]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SsbareaRadioResourceStatusList.ProtoReflect.Descriptor instead.
func (*SsbareaRadioResourceStatusList) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{812}
}

func (x *SsbareaRadioResourceStatusList) GetValue() []*SsbareaRadioResourceStatusListItem {
	if x != nil {
		return x.Value
	}
	return nil
}

// value set from xnap_v1.asn1:8007
// {SSBAreaRadioResourceStatus-List-Item-ExtIEs&Extension}
type SsbareaRadioResourceStatusListItemExtIesExtension struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// value set translated as choice from xnap_v1.asn1:8007
	//
	// Types that are assignable to SsbareaRadioResourceStatusListItemExtIes:
	//	*SsbareaRadioResourceStatusListItemExtIesExtension_IdDlSchedulingPdcchCceUsage
	//	*SsbareaRadioResourceStatusListItemExtIesExtension_IdUlSchedulingPdcchCceUsage
	SsbareaRadioResourceStatusListItemExtIes isSsbareaRadioResourceStatusListItemExtIesExtension_SsbareaRadioResourceStatusListItemExtIes `protobuf_oneof:"ssbarea_radio_resource_status_list_item_ext_ies"`
}

func (x *SsbareaRadioResourceStatusListItemExtIesExtension) Reset() {
	*x = SsbareaRadioResourceStatusListItemExtIesExtension{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[813]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SsbareaRadioResourceStatusListItemExtIesExtension) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SsbareaRadioResourceStatusListItemExtIesExtension) ProtoMessage() {}

func (x *SsbareaRadioResourceStatusListItemExtIesExtension) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[813]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SsbareaRadioResourceStatusListItemExtIesExtension.ProtoReflect.Descriptor instead.
func (*SsbareaRadioResourceStatusListItemExtIesExtension) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{813}
}

func (m *SsbareaRadioResourceStatusListItemExtIesExtension) GetSsbareaRadioResourceStatusListItemExtIes() isSsbareaRadioResourceStatusListItemExtIesExtension_SsbareaRadioResourceStatusListItemExtIes {
	if m != nil {
		return m.SsbareaRadioResourceStatusListItemExtIes
	}
	return nil
}

func (x *SsbareaRadioResourceStatusListItemExtIesExtension) GetIdDlSchedulingPdcchCceUsage() *DlschedulingPDcchCCeusage {
	if x, ok := x.GetSsbareaRadioResourceStatusListItemExtIes().(*SsbareaRadioResourceStatusListItemExtIesExtension_IdDlSchedulingPdcchCceUsage); ok {
		return x.IdDlSchedulingPdcchCceUsage
	}
	return nil
}

func (x *SsbareaRadioResourceStatusListItemExtIesExtension) GetIdUlSchedulingPdcchCceUsage() *UlschedulingPDcchCCeusage {
	if x, ok := x.GetSsbareaRadioResourceStatusListItemExtIes().(*SsbareaRadioResourceStatusListItemExtIesExtension_IdUlSchedulingPdcchCceUsage); ok {
		return x.IdUlSchedulingPdcchCceUsage
	}
	return nil
}

type isSsbareaRadioResourceStatusListItemExtIesExtension_SsbareaRadioResourceStatusListItemExtIes interface {
	isSsbareaRadioResourceStatusListItemExtIesExtension_SsbareaRadioResourceStatusListItemExtIes()
}

type SsbareaRadioResourceStatusListItemExtIesExtension_IdDlSchedulingPdcchCceUsage struct {
	// @inject_tag: aper:"choiceIdx:1,"
	IdDlSchedulingPdcchCceUsage *DlschedulingPDcchCCeusage `protobuf:"bytes,1,opt,name=id_dl_scheduling_pdcch_cce_usage,json=id-DL-scheduling-PDCCH-CCE-usage,proto3,oneof" aper:"choiceIdx:1,"`
}

type SsbareaRadioResourceStatusListItemExtIesExtension_IdUlSchedulingPdcchCceUsage struct {
	// @inject_tag: aper:"choiceIdx:2,"
	IdUlSchedulingPdcchCceUsage *UlschedulingPDcchCCeusage `protobuf:"bytes,2,opt,name=id_ul_scheduling_pdcch_cce_usage,json=id-UL-scheduling-PDCCH-CCE-usage,proto3,oneof" aper:"choiceIdx:2,"`
}

func (*SsbareaRadioResourceStatusListItemExtIesExtension_IdDlSchedulingPdcchCceUsage) isSsbareaRadioResourceStatusListItemExtIesExtension_SsbareaRadioResourceStatusListItemExtIes() {
}

func (*SsbareaRadioResourceStatusListItemExtIesExtension_IdUlSchedulingPdcchCceUsage) isSsbareaRadioResourceStatusListItemExtIesExtension_SsbareaRadioResourceStatusListItemExtIes() {
}

// concrete instance(s) of class XNAP-PROTOCOL-EXTENSION from xnap_v1.asn1:8007
// @inject_tag: aper:"valueExt"
// {SSBAreaRadioResourceStatus-List-Item-ExtIEs}
type SsbareaRadioResourceStatusListItemExtIes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"unique,"
	Id *xnap_commondatatypes.ProtocolIeID `protobuf:"bytes,1,opt,name=id,json=&id,proto3" json:"id,omitempty" aper:"unique,"`
	// @inject_tag: aper:"valueLB:0,valueUB:2,"
	Criticality xnap_commondatatypes.Criticality `protobuf:"varint,2,opt,name=criticality,json=&criticality,proto3,enum=xnap.v1.Criticality" json:"criticality,omitempty" aper:"valueLB:0,valueUB:2,"`
	// @inject_tag: aper:"canonicalOrder,"
	Extension *SsbareaRadioResourceStatusListItemExtIesExtension `protobuf:"bytes,3,opt,name=extension,json=&Extension,proto3" json:"extension,omitempty" aper:"canonicalOrder,"`
}

func (x *SsbareaRadioResourceStatusListItemExtIes) Reset() {
	*x = SsbareaRadioResourceStatusListItemExtIes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[814]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SsbareaRadioResourceStatusListItemExtIes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SsbareaRadioResourceStatusListItemExtIes) ProtoMessage() {}

func (x *SsbareaRadioResourceStatusListItemExtIes) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[814]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SsbareaRadioResourceStatusListItemExtIes.ProtoReflect.Descriptor instead.
func (*SsbareaRadioResourceStatusListItemExtIes) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{814}
}

func (x *SsbareaRadioResourceStatusListItemExtIes) GetId() *xnap_commondatatypes.ProtocolIeID {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *SsbareaRadioResourceStatusListItemExtIes) GetCriticality() xnap_commondatatypes.Criticality {
	if x != nil {
		return x.Criticality
	}
	return xnap_commondatatypes.Criticality(0)
}

func (x *SsbareaRadioResourceStatusListItemExtIes) GetExtension() *SsbareaRadioResourceStatusListItemExtIesExtension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// sequence from xnap_v1.asn1:7995
// @inject_tag: aper:"valueExt"
// {SSBAreaRadioResourceStatus-List-Item}
type SsbareaRadioResourceStatusListItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"valueLB:0,valueUB:63,"
	SSbindex                int32             `protobuf:"varint,1,opt,name=s_sbindex,json=sSBIndex,proto3" json:"s_sbindex,omitempty" aper:"valueLB:0,valueUB:63,"`
	SsbAreaDlGbrPrbUsage    *DlGBrPRbusage    `protobuf:"bytes,2,opt,name=ssb_area_dl_gbr_prb_usage,json=ssb-Area-DL-GBR-PRB-usage,proto3" json:"ssb_area_dl_gbr_prb_usage,omitempty"`
	SsbAreaUlGbrPrbUsage    *UlGBrPRbusage    `protobuf:"bytes,3,opt,name=ssb_area_ul_gbr_prb_usage,json=ssb-Area-UL-GBR-PRB-usage,proto3" json:"ssb_area_ul_gbr_prb_usage,omitempty"`
	SsbAreaDLNonGbrPrbUsage *DlnonGBrPRbusage `protobuf:"bytes,4,opt,name=ssb_area_d_l_non_gbr_prb_usage,json=ssb-Area-dL-non-GBR-PRB-usage,proto3" json:"ssb_area_d_l_non_gbr_prb_usage,omitempty"`
	SsbAreaULNonGbrPrbUsage *UlnonGBrPRbusage `protobuf:"bytes,5,opt,name=ssb_area_u_l_non_gbr_prb_usage,json=ssb-Area-uL-non-GBR-PRB-usage,proto3" json:"ssb_area_u_l_non_gbr_prb_usage,omitempty"`
	SsbAreaDLTotalPrbUsage  *DlTotalPRbusage  `protobuf:"bytes,6,opt,name=ssb_area_d_l_total_prb_usage,json=ssb-Area-dL-Total-PRB-usage,proto3" json:"ssb_area_d_l_total_prb_usage,omitempty"`
	SsbAreaULTotalPrbUsage  *UlTotalPRbusage  `protobuf:"bytes,7,opt,name=ssb_area_u_l_total_prb_usage,json=ssb-Area-uL-Total-PRB-usage,proto3" json:"ssb_area_u_l_total_prb_usage,omitempty"`
	// @inject_tag: aper:"optional,sizeLB:1,"
	IEExtensions []*SsbareaRadioResourceStatusListItemExtIes `protobuf:"bytes,8,rep,name=i_e_extensions,json=iE-Extensions,proto3" json:"i_e_extensions,omitempty" aper:"optional,sizeLB:1,"`
}

func (x *SsbareaRadioResourceStatusListItem) Reset() {
	*x = SsbareaRadioResourceStatusListItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[815]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SsbareaRadioResourceStatusListItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SsbareaRadioResourceStatusListItem) ProtoMessage() {}

func (x *SsbareaRadioResourceStatusListItem) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[815]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SsbareaRadioResourceStatusListItem.ProtoReflect.Descriptor instead.
func (*SsbareaRadioResourceStatusListItem) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{815}
}

func (x *SsbareaRadioResourceStatusListItem) GetSSbindex() int32 {
	if x != nil {
		return x.SSbindex
	}
	return 0
}

func (x *SsbareaRadioResourceStatusListItem) GetSsbAreaDlGbrPrbUsage() *DlGBrPRbusage {
	if x != nil {
		return x.SsbAreaDlGbrPrbUsage
	}
	return nil
}

func (x *SsbareaRadioResourceStatusListItem) GetSsbAreaUlGbrPrbUsage() *UlGBrPRbusage {
	if x != nil {
		return x.SsbAreaUlGbrPrbUsage
	}
	return nil
}

func (x *SsbareaRadioResourceStatusListItem) GetSsbAreaDLNonGbrPrbUsage() *DlnonGBrPRbusage {
	if x != nil {
		return x.SsbAreaDLNonGbrPrbUsage
	}
	return nil
}

func (x *SsbareaRadioResourceStatusListItem) GetSsbAreaULNonGbrPrbUsage() *UlnonGBrPRbusage {
	if x != nil {
		return x.SsbAreaULNonGbrPrbUsage
	}
	return nil
}

func (x *SsbareaRadioResourceStatusListItem) GetSsbAreaDLTotalPrbUsage() *DlTotalPRbusage {
	if x != nil {
		return x.SsbAreaDLTotalPrbUsage
	}
	return nil
}

func (x *SsbareaRadioResourceStatusListItem) GetSsbAreaULTotalPrbUsage() *UlTotalPRbusage {
	if x != nil {
		return x.SsbAreaULTotalPrbUsage
	}
	return nil
}

func (x *SsbareaRadioResourceStatusListItem) GetIEExtensions() []*SsbareaRadioResourceStatusListItemExtIes {
	if x != nil {
		return x.IEExtensions
	}
	return nil
}

// value set from xnap_v1.asn1:8021
// {SSB-PositionsInBurst-ExtIEs}
type SsbPositionsInBurstExtIes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *emptypb.Empty `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *SsbPositionsInBurstExtIes) Reset() {
	*x = SsbPositionsInBurstExtIes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[816]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SsbPositionsInBurstExtIes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SsbPositionsInBurstExtIes) ProtoMessage() {}

func (x *SsbPositionsInBurstExtIes) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[816]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SsbPositionsInBurstExtIes.ProtoReflect.Descriptor instead.
func (*SsbPositionsInBurstExtIes) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{816}
}

func (x *SsbPositionsInBurstExtIes) GetValue() *emptypb.Empty {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:8015
// {SSB-PositionsInBurst}
type SsbPositionsInBurst struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// choice from xnap_v1.asn1:8015
	//
	// Types that are assignable to SsbPositionsInBurst:
	//	*SsbPositionsInBurst_ShortBitmap
	//	*SsbPositionsInBurst_MediumBitmap
	//	*SsbPositionsInBurst_LongBitmap
	//	*SsbPositionsInBurst_ChoiceExtension
	SsbPositionsInBurst isSsbPositionsInBurst_SsbPositionsInBurst `protobuf_oneof:"ssb_positions_in_burst"`
}

func (x *SsbPositionsInBurst) Reset() {
	*x = SsbPositionsInBurst{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[817]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SsbPositionsInBurst) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SsbPositionsInBurst) ProtoMessage() {}

func (x *SsbPositionsInBurst) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[817]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SsbPositionsInBurst.ProtoReflect.Descriptor instead.
func (*SsbPositionsInBurst) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{817}
}

func (m *SsbPositionsInBurst) GetSsbPositionsInBurst() isSsbPositionsInBurst_SsbPositionsInBurst {
	if m != nil {
		return m.SsbPositionsInBurst
	}
	return nil
}

func (x *SsbPositionsInBurst) GetShortBitmap() *asn1.BitString {
	if x, ok := x.GetSsbPositionsInBurst().(*SsbPositionsInBurst_ShortBitmap); ok {
		return x.ShortBitmap
	}
	return nil
}

func (x *SsbPositionsInBurst) GetMediumBitmap() *asn1.BitString {
	if x, ok := x.GetSsbPositionsInBurst().(*SsbPositionsInBurst_MediumBitmap); ok {
		return x.MediumBitmap
	}
	return nil
}

func (x *SsbPositionsInBurst) GetLongBitmap() *asn1.BitString {
	if x, ok := x.GetSsbPositionsInBurst().(*SsbPositionsInBurst_LongBitmap); ok {
		return x.LongBitmap
	}
	return nil
}

func (x *SsbPositionsInBurst) GetChoiceExtension() *SsbPositionsInBurstExtIes {
	if x, ok := x.GetSsbPositionsInBurst().(*SsbPositionsInBurst_ChoiceExtension); ok {
		return x.ChoiceExtension
	}
	return nil
}

type isSsbPositionsInBurst_SsbPositionsInBurst interface {
	isSsbPositionsInBurst_SsbPositionsInBurst()
}

type SsbPositionsInBurst_ShortBitmap struct {
	// @inject_tag: aper:"choiceIdx:1,sizeLB:4,sizeUB:4,"
	ShortBitmap *asn1.BitString `protobuf:"bytes,1,opt,name=short_bitmap,json=shortBitmap,proto3,oneof" aper:"choiceIdx:1,sizeLB:4,sizeUB:4,"`
}

type SsbPositionsInBurst_MediumBitmap struct {
	// @inject_tag: aper:"choiceIdx:2,sizeLB:8,sizeUB:8,"
	MediumBitmap *asn1.BitString `protobuf:"bytes,2,opt,name=medium_bitmap,json=mediumBitmap,proto3,oneof" aper:"choiceIdx:2,sizeLB:8,sizeUB:8,"`
}

type SsbPositionsInBurst_LongBitmap struct {
	// @inject_tag: aper:"choiceIdx:3,sizeLB:64,sizeUB:64,"
	LongBitmap *asn1.BitString `protobuf:"bytes,3,opt,name=long_bitmap,json=longBitmap,proto3,oneof" aper:"choiceIdx:3,sizeLB:64,sizeUB:64,"`
}

type SsbPositionsInBurst_ChoiceExtension struct {
	// @inject_tag: aper:"choiceIdx:4,"
	ChoiceExtension *SsbPositionsInBurstExtIes `protobuf:"bytes,4,opt,name=choice_extension,json=choice-extension,proto3,oneof" aper:"choiceIdx:4,"`
}

func (*SsbPositionsInBurst_ShortBitmap) isSsbPositionsInBurst_SsbPositionsInBurst() {}

func (*SsbPositionsInBurst_MediumBitmap) isSsbPositionsInBurst_SsbPositionsInBurst() {}

func (*SsbPositionsInBurst_LongBitmap) isSsbPositionsInBurst_SsbPositionsInBurst() {}

func (*SsbPositionsInBurst_ChoiceExtension) isSsbPositionsInBurst_SsbPositionsInBurst() {}

// sequence from xnap_v1.asn1:8028
// {SSBToReport-List}
type SsbtoReportList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"valueExt,sizeLB:1,sizeUB:64,"
	Value []*SsbtoReportListItem `protobuf:"bytes,1,rep,name=value,proto3" json:"value,omitempty" aper:"valueExt,sizeLB:1,sizeUB:64,"`
}

func (x *SsbtoReportList) Reset() {
	*x = SsbtoReportList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[818]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SsbtoReportList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SsbtoReportList) ProtoMessage() {}

func (x *SsbtoReportList) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[818]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SsbtoReportList.ProtoReflect.Descriptor instead.
func (*SsbtoReportList) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{818}
}

func (x *SsbtoReportList) GetValue() []*SsbtoReportListItem {
	if x != nil {
		return x.Value
	}
	return nil
}

// value set from xnap_v1.asn1:8035
// {SSBToReport-List-Item-ExtIEs}
type SsbtoReportListItemExtIes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *emptypb.Empty `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *SsbtoReportListItemExtIes) Reset() {
	*x = SsbtoReportListItemExtIes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[819]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SsbtoReportListItemExtIes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SsbtoReportListItemExtIes) ProtoMessage() {}

func (x *SsbtoReportListItemExtIes) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[819]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SsbtoReportListItemExtIes.ProtoReflect.Descriptor instead.
func (*SsbtoReportListItemExtIes) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{819}
}

func (x *SsbtoReportListItemExtIes) GetValue() *emptypb.Empty {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:8029
// @inject_tag: aper:"valueExt"
// {SSBToReport-List-Item}
type SsbtoReportListItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"valueLB:0,valueUB:63,"
	SSbindex int32 `protobuf:"varint,1,opt,name=s_sbindex,json=sSBIndex,proto3" json:"s_sbindex,omitempty" aper:"valueLB:0,valueUB:63,"`
	// @inject_tag: aper:"optional,sizeLB:1,"
	IEExtensions []*SsbtoReportListItemExtIes `protobuf:"bytes,2,rep,name=i_e_extensions,json=iE-Extensions,proto3" json:"i_e_extensions,omitempty" aper:"optional,sizeLB:1,"`
}

func (x *SsbtoReportListItem) Reset() {
	*x = SsbtoReportListItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[820]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SsbtoReportListItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SsbtoReportListItem) ProtoMessage() {}

func (x *SsbtoReportListItem) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[820]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SsbtoReportListItem.ProtoReflect.Descriptor instead.
func (*SsbtoReportListItem) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{820}
}

func (x *SsbtoReportListItem) GetSSbindex() int32 {
	if x != nil {
		return x.SSbindex
	}
	return 0
}

func (x *SsbtoReportListItem) GetIEExtensions() []*SsbtoReportListItemExtIes {
	if x != nil {
		return x.IEExtensions
	}
	return nil
}

// range of Integer from xnap_v1.asn1:8040
// {SUL-FrequencyBand}
type SulFrequencyBand struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"valueLB:1,valueUB:1024,"
	Value int32 `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty" aper:"valueLB:1,valueUB:1024,"`
}

func (x *SulFrequencyBand) Reset() {
	*x = SulFrequencyBand{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[821]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SulFrequencyBand) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SulFrequencyBand) ProtoMessage() {}

func (x *SulFrequencyBand) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[821]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SulFrequencyBand.ProtoReflect.Descriptor instead.
func (*SulFrequencyBand) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{821}
}

func (x *SulFrequencyBand) GetValue() int32 {
	if x != nil {
		return x.Value
	}
	return 0
}

// value set from xnap_v1.asn1:8050
// {SUL-Information-ExtIEs&Extension}
type SulInformationExtIesExtension struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// value set translated as choice from xnap_v1.asn1:8050
	//
	// Types that are assignable to SulInformationExtIes:
	//	*SulInformationExtIesExtension_IdCarrierList
	//	*SulInformationExtIesExtension_IdFrequencyShift7P5Khz
	SulInformationExtIes isSulInformationExtIesExtension_SulInformationExtIes `protobuf_oneof:"sul_information_ext_ies"`
}

func (x *SulInformationExtIesExtension) Reset() {
	*x = SulInformationExtIesExtension{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[822]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SulInformationExtIesExtension) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SulInformationExtIesExtension) ProtoMessage() {}

func (x *SulInformationExtIesExtension) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[822]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SulInformationExtIesExtension.ProtoReflect.Descriptor instead.
func (*SulInformationExtIesExtension) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{822}
}

func (m *SulInformationExtIesExtension) GetSulInformationExtIes() isSulInformationExtIesExtension_SulInformationExtIes {
	if m != nil {
		return m.SulInformationExtIes
	}
	return nil
}

func (x *SulInformationExtIesExtension) GetIdCarrierList() *NrcarrierList {
	if x, ok := x.GetSulInformationExtIes().(*SulInformationExtIesExtension_IdCarrierList); ok {
		return x.IdCarrierList
	}
	return nil
}

func (x *SulInformationExtIesExtension) GetIdFrequencyShift7P5Khz() FrequencyShift7P5Khz {
	if x, ok := x.GetSulInformationExtIes().(*SulInformationExtIesExtension_IdFrequencyShift7P5Khz); ok {
		return x.IdFrequencyShift7P5Khz
	}
	return FrequencyShift7P5Khz_FREQUENCY_SHIFT7P5KHZ_FALSE
}

type isSulInformationExtIesExtension_SulInformationExtIes interface {
	isSulInformationExtIesExtension_SulInformationExtIes()
}

type SulInformationExtIesExtension_IdCarrierList struct {
	// @inject_tag: aper:"choiceIdx:1,"
	IdCarrierList *NrcarrierList `protobuf:"bytes,1,opt,name=id_carrier_list,json=id-CarrierList,proto3,oneof" aper:"choiceIdx:1,"`
}

type SulInformationExtIesExtension_IdFrequencyShift7P5Khz struct {
	// @inject_tag: aper:"choiceIdx:2,valueExt,valueLB:0,valueUB:1,"
	IdFrequencyShift7P5Khz FrequencyShift7P5Khz `protobuf:"varint,2,opt,name=id_frequency_shift7p5khz,json=id-FrequencyShift7p5khz,proto3,enum=xnap.v1.FrequencyShift7P5Khz,oneof" aper:"choiceIdx:2,valueExt,valueLB:0,valueUB:1,"`
}

func (*SulInformationExtIesExtension_IdCarrierList) isSulInformationExtIesExtension_SulInformationExtIes() {
}

func (*SulInformationExtIesExtension_IdFrequencyShift7P5Khz) isSulInformationExtIesExtension_SulInformationExtIes() {
}

// concrete instance(s) of class XNAP-PROTOCOL-EXTENSION from xnap_v1.asn1:8050
// @inject_tag: aper:"valueExt"
// {SUL-Information-ExtIEs}
type SulInformationExtIes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"unique,"
	Id *xnap_commondatatypes.ProtocolIeID `protobuf:"bytes,1,opt,name=id,json=&id,proto3" json:"id,omitempty" aper:"unique,"`
	// @inject_tag: aper:"valueLB:0,valueUB:2,"
	Criticality xnap_commondatatypes.Criticality `protobuf:"varint,2,opt,name=criticality,json=&criticality,proto3,enum=xnap.v1.Criticality" json:"criticality,omitempty" aper:"valueLB:0,valueUB:2,"`
	// @inject_tag: aper:"canonicalOrder,"
	Extension *SulInformationExtIesExtension `protobuf:"bytes,3,opt,name=extension,json=&Extension,proto3" json:"extension,omitempty" aper:"canonicalOrder,"`
}

func (x *SulInformationExtIes) Reset() {
	*x = SulInformationExtIes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[823]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SulInformationExtIes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SulInformationExtIes) ProtoMessage() {}

func (x *SulInformationExtIes) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[823]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SulInformationExtIes.ProtoReflect.Descriptor instead.
func (*SulInformationExtIes) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{823}
}

func (x *SulInformationExtIes) GetId() *xnap_commondatatypes.ProtocolIeID {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *SulInformationExtIes) GetCriticality() xnap_commondatatypes.Criticality {
	if x != nil {
		return x.Criticality
	}
	return xnap_commondatatypes.Criticality(0)
}

func (x *SulInformationExtIes) GetExtension() *SulInformationExtIesExtension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// sequence from xnap_v1.asn1:8044
// @inject_tag: aper:"valueExt"
// {SUL-Information}
type SulInformation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SulFrequencyInfo *Nrarfcn `protobuf:"bytes,1,opt,name=sul_frequency_info,json=sulFrequencyInfo,proto3" json:"sul_frequency_info,omitempty"`
	// @inject_tag: aper:"valueExt,"
	SulTransmissionBandwidth *NrtransmissionBandwidth `protobuf:"bytes,2,opt,name=sul_transmission_bandwidth,json=sulTransmissionBandwidth,proto3" json:"sul_transmission_bandwidth,omitempty" aper:"valueExt,"`
	// @inject_tag: aper:"optional,sizeLB:1,sizeUB:65535,valueExt"
	IEExtensions []*SulInformationExtIes `protobuf:"bytes,3,rep,name=i_e_extensions,json=iE-Extensions,proto3" json:"i_e_extensions,omitempty" aper:"optional,sizeLB:1,sizeUB:65535,valueExt"`
}

func (x *SulInformation) Reset() {
	*x = SulInformation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[824]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SulInformation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SulInformation) ProtoMessage() {}

func (x *SulInformation) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[824]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SulInformation.ProtoReflect.Descriptor instead.
func (*SulInformation) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{824}
}

func (x *SulInformation) GetSulFrequencyInfo() *Nrarfcn {
	if x != nil {
		return x.SulFrequencyInfo
	}
	return nil
}

func (x *SulInformation) GetSulTransmissionBandwidth() *NrtransmissionBandwidth {
	if x != nil {
		return x.SulTransmissionBandwidth
	}
	return nil
}

func (x *SulInformation) GetIEExtensions() []*SulInformationExtIes {
	if x != nil {
		return x.IEExtensions
	}
	return nil
}

// sequence from xnap_v1.asn1:8060
// {SupportedSULBandList}
type SupportedSulbandList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"valueExt,sizeLB:1,sizeUB:32,"
	Value []*SupportedSulbandItem `protobuf:"bytes,1,rep,name=value,proto3" json:"value,omitempty" aper:"valueExt,sizeLB:1,sizeUB:32,"`
}

func (x *SupportedSulbandList) Reset() {
	*x = SupportedSulbandList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[825]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SupportedSulbandList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SupportedSulbandList) ProtoMessage() {}

func (x *SupportedSulbandList) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[825]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SupportedSulbandList.ProtoReflect.Descriptor instead.
func (*SupportedSulbandList) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{825}
}

func (x *SupportedSulbandList) GetValue() []*SupportedSulbandItem {
	if x != nil {
		return x.Value
	}
	return nil
}

// value set from xnap_v1.asn1:8066
// {SupportedSULBandItem-ExtIEs}
type SupportedSulbandItemExtIes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *emptypb.Empty `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *SupportedSulbandItemExtIes) Reset() {
	*x = SupportedSulbandItemExtIes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[826]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SupportedSulbandItemExtIes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SupportedSulbandItemExtIes) ProtoMessage() {}

func (x *SupportedSulbandItemExtIes) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[826]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SupportedSulbandItemExtIes.ProtoReflect.Descriptor instead.
func (*SupportedSulbandItemExtIes) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{826}
}

func (x *SupportedSulbandItemExtIes) GetValue() *emptypb.Empty {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:8061
// @inject_tag: aper:"valueExt"
// {SupportedSULBandItem}
type SupportedSulbandItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SulBandItem *SulFrequencyBand `protobuf:"bytes,1,opt,name=sul_band_item,json=sulBandItem,proto3" json:"sul_band_item,omitempty"`
	// @inject_tag: aper:"optional,sizeLB:1,sizeUB:65535,valueExt"
	IEExtensions []*SupportedSulbandItemExtIes `protobuf:"bytes,2,rep,name=i_e_extensions,json=iE-Extensions,proto3" json:"i_e_extensions,omitempty" aper:"optional,sizeLB:1,sizeUB:65535,valueExt"`
}

func (x *SupportedSulbandItem) Reset() {
	*x = SupportedSulbandItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[827]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SupportedSulbandItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SupportedSulbandItem) ProtoMessage() {}

func (x *SupportedSulbandItem) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[827]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SupportedSulbandItem.ProtoReflect.Descriptor instead.
func (*SupportedSulbandItem) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{827}
}

func (x *SupportedSulbandItem) GetSulBandItem() *SulFrequencyBand {
	if x != nil {
		return x.SulBandItem
	}
	return nil
}

func (x *SupportedSulbandItem) GetIEExtensions() []*SupportedSulbandItemExtIes {
	if x != nil {
		return x.IEExtensions
	}
	return nil
}

// value set from xnap_v1.asn1:8078
// {SymbolAllocation-in-Slot-ExtIEs}
type SymbolAllocationinSlotExtIes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *emptypb.Empty `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *SymbolAllocationinSlotExtIes) Reset() {
	*x = SymbolAllocationinSlotExtIes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[828]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SymbolAllocationinSlotExtIes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SymbolAllocationinSlotExtIes) ProtoMessage() {}

func (x *SymbolAllocationinSlotExtIes) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[828]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SymbolAllocationinSlotExtIes.ProtoReflect.Descriptor instead.
func (*SymbolAllocationinSlotExtIes) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{828}
}

func (x *SymbolAllocationinSlotExtIes) GetValue() *emptypb.Empty {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:8072
// {SymbolAllocation-in-Slot}
type SymbolAllocationinSlot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// choice from xnap_v1.asn1:8072
	//
	// Types that are assignable to SymbolAllocationInSlot:
	//	*SymbolAllocationinSlot_AllDl
	//	*SymbolAllocationinSlot_AllUl
	//	*SymbolAllocationinSlot_BothDlandUl
	//	*SymbolAllocationinSlot_ChoiceExtension
	SymbolAllocationInSlot isSymbolAllocationinSlot_SymbolAllocationInSlot `protobuf_oneof:"symbol_allocation_in_slot"`
}

func (x *SymbolAllocationinSlot) Reset() {
	*x = SymbolAllocationinSlot{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[829]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SymbolAllocationinSlot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SymbolAllocationinSlot) ProtoMessage() {}

func (x *SymbolAllocationinSlot) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[829]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SymbolAllocationinSlot.ProtoReflect.Descriptor instead.
func (*SymbolAllocationinSlot) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{829}
}

func (m *SymbolAllocationinSlot) GetSymbolAllocationInSlot() isSymbolAllocationinSlot_SymbolAllocationInSlot {
	if m != nil {
		return m.SymbolAllocationInSlot
	}
	return nil
}

func (x *SymbolAllocationinSlot) GetAllDl() *SymbolAllocationinSlotAllDl {
	if x, ok := x.GetSymbolAllocationInSlot().(*SymbolAllocationinSlot_AllDl); ok {
		return x.AllDl
	}
	return nil
}

func (x *SymbolAllocationinSlot) GetAllUl() *SymbolAllocationinSlotAllUl {
	if x, ok := x.GetSymbolAllocationInSlot().(*SymbolAllocationinSlot_AllUl); ok {
		return x.AllUl
	}
	return nil
}

func (x *SymbolAllocationinSlot) GetBothDlandUl() *SymbolAllocationinSlotBothDlandUl {
	if x, ok := x.GetSymbolAllocationInSlot().(*SymbolAllocationinSlot_BothDlandUl); ok {
		return x.BothDlandUl
	}
	return nil
}

func (x *SymbolAllocationinSlot) GetChoiceExtension() *SymbolAllocationinSlotExtIes {
	if x, ok := x.GetSymbolAllocationInSlot().(*SymbolAllocationinSlot_ChoiceExtension); ok {
		return x.ChoiceExtension
	}
	return nil
}

type isSymbolAllocationinSlot_SymbolAllocationInSlot interface {
	isSymbolAllocationinSlot_SymbolAllocationInSlot()
}

type SymbolAllocationinSlot_AllDl struct {
	// @inject_tag: aper:"choiceIdx:1,valueExt,"
	AllDl *SymbolAllocationinSlotAllDl `protobuf:"bytes,1,opt,name=all_dl,json=allDL,proto3,oneof" aper:"choiceIdx:1,valueExt,"`
}

type SymbolAllocationinSlot_AllUl struct {
	// @inject_tag: aper:"choiceIdx:2,valueExt,"
	AllUl *SymbolAllocationinSlotAllUl `protobuf:"bytes,2,opt,name=all_ul,json=allUL,proto3,oneof" aper:"choiceIdx:2,valueExt,"`
}

type SymbolAllocationinSlot_BothDlandUl struct {
	// @inject_tag: aper:"choiceIdx:3,valueExt,"
	BothDlandUl *SymbolAllocationinSlotBothDlandUl `protobuf:"bytes,3,opt,name=both_dland_ul,json=bothDLandUL,proto3,oneof" aper:"choiceIdx:3,valueExt,"`
}

type SymbolAllocationinSlot_ChoiceExtension struct {
	// @inject_tag: aper:"choiceIdx:4,"
	ChoiceExtension *SymbolAllocationinSlotExtIes `protobuf:"bytes,4,opt,name=choice_extension,json=choice-extension,proto3,oneof" aper:"choiceIdx:4,"`
}

func (*SymbolAllocationinSlot_AllDl) isSymbolAllocationinSlot_SymbolAllocationInSlot() {}

func (*SymbolAllocationinSlot_AllUl) isSymbolAllocationinSlot_SymbolAllocationInSlot() {}

func (*SymbolAllocationinSlot_BothDlandUl) isSymbolAllocationinSlot_SymbolAllocationInSlot() {}

func (*SymbolAllocationinSlot_ChoiceExtension) isSymbolAllocationinSlot_SymbolAllocationInSlot() {}

// value set from xnap_v1.asn1:8088
// {SymbolAllocation-in-Slot-AllDL-ExtIEs}
type SymbolAllocationinSlotAllDlExtIes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *emptypb.Empty `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *SymbolAllocationinSlotAllDlExtIes) Reset() {
	*x = SymbolAllocationinSlotAllDlExtIes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[830]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SymbolAllocationinSlotAllDlExtIes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SymbolAllocationinSlotAllDlExtIes) ProtoMessage() {}

func (x *SymbolAllocationinSlotAllDlExtIes) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[830]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SymbolAllocationinSlotAllDlExtIes.ProtoReflect.Descriptor instead.
func (*SymbolAllocationinSlotAllDlExtIes) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{830}
}

func (x *SymbolAllocationinSlotAllDlExtIes) GetValue() *emptypb.Empty {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:8084
// @inject_tag: aper:"valueExt"
// {SymbolAllocation-in-Slot-AllDL}
type SymbolAllocationinSlotAllDl struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"optional,sizeLB:1,"
	IEExtension []*SymbolAllocationinSlotAllDlExtIes `protobuf:"bytes,1,rep,name=i_e_extension,json=iE-Extension,proto3" json:"i_e_extension,omitempty" aper:"optional,sizeLB:1,"`
}

func (x *SymbolAllocationinSlotAllDl) Reset() {
	*x = SymbolAllocationinSlotAllDl{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[831]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SymbolAllocationinSlotAllDl) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SymbolAllocationinSlotAllDl) ProtoMessage() {}

func (x *SymbolAllocationinSlotAllDl) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[831]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SymbolAllocationinSlotAllDl.ProtoReflect.Descriptor instead.
func (*SymbolAllocationinSlotAllDl) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{831}
}

func (x *SymbolAllocationinSlotAllDl) GetIEExtension() []*SymbolAllocationinSlotAllDlExtIes {
	if x != nil {
		return x.IEExtension
	}
	return nil
}

// value set from xnap_v1.asn1:8098
// {SymbolAllocation-in-Slot-AllUL-ExtIEs}
type SymbolAllocationinSlotAllUlExtIes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *emptypb.Empty `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *SymbolAllocationinSlotAllUlExtIes) Reset() {
	*x = SymbolAllocationinSlotAllUlExtIes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[832]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SymbolAllocationinSlotAllUlExtIes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SymbolAllocationinSlotAllUlExtIes) ProtoMessage() {}

func (x *SymbolAllocationinSlotAllUlExtIes) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[832]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SymbolAllocationinSlotAllUlExtIes.ProtoReflect.Descriptor instead.
func (*SymbolAllocationinSlotAllUlExtIes) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{832}
}

func (x *SymbolAllocationinSlotAllUlExtIes) GetValue() *emptypb.Empty {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:8094
// @inject_tag: aper:"valueExt"
// {SymbolAllocation-in-Slot-AllUL}
type SymbolAllocationinSlotAllUl struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"optional,sizeLB:1,"
	IEExtension []*SymbolAllocationinSlotAllUlExtIes `protobuf:"bytes,1,rep,name=i_e_extension,json=iE-Extension,proto3" json:"i_e_extension,omitempty" aper:"optional,sizeLB:1,"`
}

func (x *SymbolAllocationinSlotAllUl) Reset() {
	*x = SymbolAllocationinSlotAllUl{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[833]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SymbolAllocationinSlotAllUl) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SymbolAllocationinSlotAllUl) ProtoMessage() {}

func (x *SymbolAllocationinSlotAllUl) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[833]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SymbolAllocationinSlotAllUl.ProtoReflect.Descriptor instead.
func (*SymbolAllocationinSlotAllUl) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{833}
}

func (x *SymbolAllocationinSlotAllUl) GetIEExtension() []*SymbolAllocationinSlotAllUlExtIes {
	if x != nil {
		return x.IEExtension
	}
	return nil
}

// value set from xnap_v1.asn1:8110
// {SymbolAllocation-in-Slot-BothDLandUL-ExtIEs}
type SymbolAllocationinSlotBothDlandUlExtIes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *emptypb.Empty `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *SymbolAllocationinSlotBothDlandUlExtIes) Reset() {
	*x = SymbolAllocationinSlotBothDlandUlExtIes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[834]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SymbolAllocationinSlotBothDlandUlExtIes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SymbolAllocationinSlotBothDlandUlExtIes) ProtoMessage() {}

func (x *SymbolAllocationinSlotBothDlandUlExtIes) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[834]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SymbolAllocationinSlotBothDlandUlExtIes.ProtoReflect.Descriptor instead.
func (*SymbolAllocationinSlotBothDlandUlExtIes) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{834}
}

func (x *SymbolAllocationinSlotBothDlandUlExtIes) GetValue() *emptypb.Empty {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:8104
// @inject_tag: aper:"valueExt"
// {SymbolAllocation-in-Slot-BothDLandUL}
type SymbolAllocationinSlotBothDlandUl struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"valueLB:0,valueUB:13,"
	NumberofDlsymbols int32 `protobuf:"varint,1,opt,name=numberof_dlsymbols,json=numberofDLSymbols,proto3" json:"numberof_dlsymbols,omitempty" aper:"valueLB:0,valueUB:13,"`
	// @inject_tag: aper:"valueLB:0,valueUB:13,"
	NumberofUlsymbols int32 `protobuf:"varint,2,opt,name=numberof_ulsymbols,json=numberofULSymbols,proto3" json:"numberof_ulsymbols,omitempty" aper:"valueLB:0,valueUB:13,"`
	// @inject_tag: aper:"optional,sizeLB:1,"
	IEExtension []*SymbolAllocationinSlotBothDlandUlExtIes `protobuf:"bytes,3,rep,name=i_e_extension,json=iE-Extension,proto3" json:"i_e_extension,omitempty" aper:"optional,sizeLB:1,"`
}

func (x *SymbolAllocationinSlotBothDlandUl) Reset() {
	*x = SymbolAllocationinSlotBothDlandUl{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[835]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SymbolAllocationinSlotBothDlandUl) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SymbolAllocationinSlotBothDlandUl) ProtoMessage() {}

func (x *SymbolAllocationinSlotBothDlandUl) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[835]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SymbolAllocationinSlotBothDlandUl.ProtoReflect.Descriptor instead.
func (*SymbolAllocationinSlotBothDlandUl) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{835}
}

func (x *SymbolAllocationinSlotBothDlandUl) GetNumberofDlsymbols() int32 {
	if x != nil {
		return x.NumberofDlsymbols
	}
	return 0
}

func (x *SymbolAllocationinSlotBothDlandUl) GetNumberofUlsymbols() int32 {
	if x != nil {
		return x.NumberofUlsymbols
	}
	return 0
}

func (x *SymbolAllocationinSlotBothDlandUl) GetIEExtension() []*SymbolAllocationinSlotBothDlandUlExtIes {
	if x != nil {
		return x.IEExtension
	}
	return nil
}

// value set from xnap_v1.asn1:8122
// {TABasedMDT-ExtIEs}
type TabasedMdtExtIes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *emptypb.Empty `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *TabasedMdtExtIes) Reset() {
	*x = TabasedMdtExtIes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[836]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TabasedMdtExtIes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TabasedMdtExtIes) ProtoMessage() {}

func (x *TabasedMdtExtIes) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[836]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TabasedMdtExtIes.ProtoReflect.Descriptor instead.
func (*TabasedMdtExtIes) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{836}
}

func (x *TabasedMdtExtIes) GetValue() *emptypb.Empty {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:8117
// @inject_tag: aper:"valueExt"
// {TABasedMDT}
type TabasedMdt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TAlistforMdt *TalistforMdt `protobuf:"bytes,1,opt,name=t_alistfor_mdt,json=tAListforMDT,proto3" json:"t_alistfor_mdt,omitempty"`
	// @inject_tag: aper:"optional,sizeLB:1,"
	IEExtensions []*TabasedMdtExtIes `protobuf:"bytes,2,rep,name=i_e_extensions,json=iE-Extensions,proto3" json:"i_e_extensions,omitempty" aper:"optional,sizeLB:1,"`
}

func (x *TabasedMdt) Reset() {
	*x = TabasedMdt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[837]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TabasedMdt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TabasedMdt) ProtoMessage() {}

func (x *TabasedMdt) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[837]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TabasedMdt.ProtoReflect.Descriptor instead.
func (*TabasedMdt) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{837}
}

func (x *TabasedMdt) GetTAlistforMdt() *TalistforMdt {
	if x != nil {
		return x.TAlistforMdt
	}
	return nil
}

func (x *TabasedMdt) GetIEExtensions() []*TabasedMdtExtIes {
	if x != nil {
		return x.IEExtensions
	}
	return nil
}

// value set from xnap_v1.asn1:8135
// {TAIBasedMDT-ExtIEs}
type TaibasedMdtExtIes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *emptypb.Empty `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *TaibasedMdtExtIes) Reset() {
	*x = TaibasedMdtExtIes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[838]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaibasedMdtExtIes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaibasedMdtExtIes) ProtoMessage() {}

func (x *TaibasedMdtExtIes) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[838]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaibasedMdtExtIes.ProtoReflect.Descriptor instead.
func (*TaibasedMdtExtIes) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{838}
}

func (x *TaibasedMdtExtIes) GetValue() *emptypb.Empty {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:8130
// @inject_tag: aper:"valueExt"
// {TAIBasedMDT}
type TaibasedMdt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TAilistforMdt *TailistforMdt `protobuf:"bytes,1,opt,name=t_ailistfor_mdt,json=tAIListforMDT,proto3" json:"t_ailistfor_mdt,omitempty"`
	// @inject_tag: aper:"optional,sizeLB:1,"
	IEExtensions []*TaibasedMdtExtIes `protobuf:"bytes,2,rep,name=i_e_extensions,json=iE-Extensions,proto3" json:"i_e_extensions,omitempty" aper:"optional,sizeLB:1,"`
}

func (x *TaibasedMdt) Reset() {
	*x = TaibasedMdt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[839]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaibasedMdt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaibasedMdt) ProtoMessage() {}

func (x *TaibasedMdt) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[839]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaibasedMdt.ProtoReflect.Descriptor instead.
func (*TaibasedMdt) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{839}
}

func (x *TaibasedMdt) GetTAilistforMdt() *TailistforMdt {
	if x != nil {
		return x.TAilistforMdt
	}
	return nil
}

func (x *TaibasedMdt) GetIEExtensions() []*TaibasedMdtExtIes {
	if x != nil {
		return x.IEExtensions
	}
	return nil
}

// sequence from xnap_v1.asn1:8141
// {TAIListforMDT}
type TailistforMdt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"valueExt,sizeLB:1,sizeUB:8,"
	Value []*TaiforMdtItem `protobuf:"bytes,1,rep,name=value,proto3" json:"value,omitempty" aper:"valueExt,sizeLB:1,sizeUB:8,"`
}

func (x *TailistforMdt) Reset() {
	*x = TailistforMdt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[840]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TailistforMdt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TailistforMdt) ProtoMessage() {}

func (x *TailistforMdt) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[840]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TailistforMdt.ProtoReflect.Descriptor instead.
func (*TailistforMdt) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{840}
}

func (x *TailistforMdt) GetValue() []*TaiforMdtItem {
	if x != nil {
		return x.Value
	}
	return nil
}

// value set from xnap_v1.asn1:8148
// {TAIforMDT-Item-ExtIEs}
type TaiforMdtItemExtIes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *emptypb.Empty `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *TaiforMdtItemExtIes) Reset() {
	*x = TaiforMdtItemExtIes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[841]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaiforMdtItemExtIes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaiforMdtItemExtIes) ProtoMessage() {}

func (x *TaiforMdtItemExtIes) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[841]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaiforMdtItemExtIes.ProtoReflect.Descriptor instead.
func (*TaiforMdtItemExtIes) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{841}
}

func (x *TaiforMdtItemExtIes) GetValue() *emptypb.Empty {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:8142
// @inject_tag: aper:"valueExt"
// {TAIforMDT-Item}
type TaiforMdtItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlmnId *PlmnIdentity `protobuf:"bytes,1,opt,name=plmn_id,json=plmn-ID,proto3" json:"plmn_id,omitempty"`
	TAc    *Tac          `protobuf:"bytes,2,opt,name=t_ac,json=tAC,proto3" json:"t_ac,omitempty"`
	// @inject_tag: aper:"optional,sizeLB:1,"
	IEExtensions []*TaiforMdtItemExtIes `protobuf:"bytes,3,rep,name=i_e_extensions,json=iE-Extensions,proto3" json:"i_e_extensions,omitempty" aper:"optional,sizeLB:1,"`
}

func (x *TaiforMdtItem) Reset() {
	*x = TaiforMdtItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[842]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaiforMdtItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaiforMdtItem) ProtoMessage() {}

func (x *TaiforMdtItem) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[842]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaiforMdtItem.ProtoReflect.Descriptor instead.
func (*TaiforMdtItem) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{842}
}

func (x *TaiforMdtItem) GetPlmnId() *PlmnIdentity {
	if x != nil {
		return x.PlmnId
	}
	return nil
}

func (x *TaiforMdtItem) GetTAc() *Tac {
	if x != nil {
		return x.TAc
	}
	return nil
}

func (x *TaiforMdtItem) GetIEExtensions() []*TaiforMdtItemExtIes {
	if x != nil {
		return x.IEExtensions
	}
	return nil
}

// range of Integer from xnap_v1.asn1:8152
// {TAC}
type Tac struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"sizeLB:3,sizeUB:3,"
	Value []byte `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty" aper:"sizeLB:3,sizeUB:3,"`
}

func (x *Tac) Reset() {
	*x = Tac{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[843]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Tac) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tac) ProtoMessage() {}

func (x *Tac) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[843]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Tac.ProtoReflect.Descriptor instead.
func (*Tac) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{843}
}

func (x *Tac) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:8157
// {TAISupport-List}
type TaisupportList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"valueExt,sizeLB:1,sizeUB:256,"
	Value []*TaisupportItem `protobuf:"bytes,1,rep,name=value,proto3" json:"value,omitempty" aper:"valueExt,sizeLB:1,sizeUB:256,"`
}

func (x *TaisupportList) Reset() {
	*x = TaisupportList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[844]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaisupportList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaisupportList) ProtoMessage() {}

func (x *TaisupportList) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[844]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaisupportList.ProtoReflect.Descriptor instead.
func (*TaisupportList) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{844}
}

func (x *TaisupportList) GetValue() []*TaisupportItem {
	if x != nil {
		return x.Value
	}
	return nil
}

// value set from xnap_v1.asn1:8164
// {TAISupport-Item-ExtIEs}
type TaisupportItemExtIes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *emptypb.Empty `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *TaisupportItemExtIes) Reset() {
	*x = TaisupportItemExtIes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[845]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaisupportItemExtIes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaisupportItemExtIes) ProtoMessage() {}

func (x *TaisupportItemExtIes) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[845]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaisupportItemExtIes.ProtoReflect.Descriptor instead.
func (*TaisupportItemExtIes) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{845}
}

func (x *TaisupportItemExtIes) GetValue() *emptypb.Empty {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:8158
// @inject_tag: aper:"valueExt"
// {TAISupport-Item}
type TaisupportItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tac *Tac `protobuf:"bytes,1,opt,name=tac,proto3" json:"tac,omitempty"`
	// @inject_tag: aper:"sizeLB:1,sizeUB:12,valueExt"
	BroadcastPlmns []*BroadcastPlmninTaisupportItem `protobuf:"bytes,2,rep,name=broadcast_plmns,json=broadcastPLMNs,proto3" json:"broadcast_plmns,omitempty" aper:"sizeLB:1,sizeUB:12,valueExt"`
	// @inject_tag: aper:"optional,sizeLB:1,sizeUB:65535,valueExt"
	IEExtensions []*TaisupportItemExtIes `protobuf:"bytes,3,rep,name=i_e_extensions,json=iE-Extensions,proto3" json:"i_e_extensions,omitempty" aper:"optional,sizeLB:1,sizeUB:65535,valueExt"`
}

func (x *TaisupportItem) Reset() {
	*x = TaisupportItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[846]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaisupportItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaisupportItem) ProtoMessage() {}

func (x *TaisupportItem) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[846]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaisupportItem.ProtoReflect.Descriptor instead.
func (*TaisupportItem) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{846}
}

func (x *TaisupportItem) GetTac() *Tac {
	if x != nil {
		return x.Tac
	}
	return nil
}

func (x *TaisupportItem) GetBroadcastPlmns() []*BroadcastPlmninTaisupportItem {
	if x != nil {
		return x.BroadcastPlmns
	}
	return nil
}

func (x *TaisupportItem) GetIEExtensions() []*TaisupportItemExtIes {
	if x != nil {
		return x.IEExtensions
	}
	return nil
}

// sequence from xnap_v1.asn1:8171
// {TAListforMDT}
type TalistforMdt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"sizeLB:1,sizeUB:8,"
	Value []*Tac `protobuf:"bytes,1,rep,name=value,proto3" json:"value,omitempty" aper:"sizeLB:1,sizeUB:8,"`
}

func (x *TalistforMdt) Reset() {
	*x = TalistforMdt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[847]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TalistforMdt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TalistforMdt) ProtoMessage() {}

func (x *TalistforMdt) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[847]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TalistforMdt.ProtoReflect.Descriptor instead.
func (*TalistforMdt) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{847}
}

func (x *TalistforMdt) GetValue() []*Tac {
	if x != nil {
		return x.Value
	}
	return nil
}

// range of Integer from xnap_v1.asn1:8171
// {TargetCellinEUTRAN}
type TargetCellinEutran struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value []byte `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *TargetCellinEutran) Reset() {
	*x = TargetCellinEutran{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[848]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TargetCellinEutran) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TargetCellinEutran) ProtoMessage() {}

func (x *TargetCellinEutran) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[848]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TargetCellinEutran.ProtoReflect.Descriptor instead.
func (*TargetCellinEutran) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{848}
}

func (x *TargetCellinEutran) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

// value set from xnap_v1.asn1:8181
// {TargetCGI-ExtIEs}
type TargetCgiExtIes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *emptypb.Empty `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *TargetCgiExtIes) Reset() {
	*x = TargetCgiExtIes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[849]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TargetCgiExtIes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TargetCgiExtIes) ProtoMessage() {}

func (x *TargetCgiExtIes) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[849]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TargetCgiExtIes.ProtoReflect.Descriptor instead.
func (*TargetCgiExtIes) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{849}
}

func (x *TargetCgiExtIes) GetValue() *emptypb.Empty {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:8176
// {Target-CGI}
type TargetCGi struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// choice from xnap_v1.asn1:8176
	//
	// Types that are assignable to TargetCgi:
	//	*TargetCGi_Nr
	//	*TargetCGi_EUtra
	//	*TargetCGi_ChoiceExtension
	TargetCgi isTargetCGi_TargetCgi `protobuf_oneof:"target_cgi"`
}

func (x *TargetCGi) Reset() {
	*x = TargetCGi{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[850]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TargetCGi) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TargetCGi) ProtoMessage() {}

func (x *TargetCGi) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[850]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TargetCGi.ProtoReflect.Descriptor instead.
func (*TargetCGi) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{850}
}

func (m *TargetCGi) GetTargetCgi() isTargetCGi_TargetCgi {
	if m != nil {
		return m.TargetCgi
	}
	return nil
}

func (x *TargetCGi) GetNr() *NrCGi {
	if x, ok := x.GetTargetCgi().(*TargetCGi_Nr); ok {
		return x.Nr
	}
	return nil
}

func (x *TargetCGi) GetEUtra() *EUTraCGi {
	if x, ok := x.GetTargetCgi().(*TargetCGi_EUtra); ok {
		return x.EUtra
	}
	return nil
}

func (x *TargetCGi) GetChoiceExtension() *TargetCgiExtIes {
	if x, ok := x.GetTargetCgi().(*TargetCGi_ChoiceExtension); ok {
		return x.ChoiceExtension
	}
	return nil
}

type isTargetCGi_TargetCgi interface {
	isTargetCGi_TargetCgi()
}

type TargetCGi_Nr struct {
	// @inject_tag: aper:"choiceIdx:1,valueExt,"
	Nr *NrCGi `protobuf:"bytes,1,opt,name=nr,proto3,oneof" aper:"choiceIdx:1,valueExt,"`
}

type TargetCGi_EUtra struct {
	// @inject_tag: aper:"choiceIdx:2,valueExt,"
	EUtra *EUTraCGi `protobuf:"bytes,2,opt,name=e_utra,json=e-utra,proto3,oneof" aper:"choiceIdx:2,valueExt,"`
}

type TargetCGi_ChoiceExtension struct {
	// @inject_tag: aper:"choiceIdx:3,"
	ChoiceExtension *TargetCgiExtIes `protobuf:"bytes,3,opt,name=choice_extension,json=choice-extension,proto3,oneof" aper:"choiceIdx:3,"`
}

func (*TargetCGi_Nr) isTargetCGi_TargetCgi() {}

func (*TargetCGi_EUtra) isTargetCGi_TargetCgi() {}

func (*TargetCGi_ChoiceExtension) isTargetCGi_TargetCgi() {}

// range of Integer from xnap_v1.asn1:8186
// {TDDULDLConfigurationCommonNR}
type TdduldlconfigurationCommonNr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value []byte `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *TdduldlconfigurationCommonNr) Reset() {
	*x = TdduldlconfigurationCommonNr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[851]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TdduldlconfigurationCommonNr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TdduldlconfigurationCommonNr) ProtoMessage() {}

func (x *TdduldlconfigurationCommonNr) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[851]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TdduldlconfigurationCommonNr.ProtoReflect.Descriptor instead.
func (*TdduldlconfigurationCommonNr) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{851}
}

func (x *TdduldlconfigurationCommonNr) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:8191
// {TargetCellList}
type TargetCellList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"sizeLB:1,sizeUB:8,"
	Value []*TargetCellListItem `protobuf:"bytes,1,rep,name=value,proto3" json:"value,omitempty" aper:"sizeLB:1,sizeUB:8,"`
}

func (x *TargetCellList) Reset() {
	*x = TargetCellList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[852]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TargetCellList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TargetCellList) ProtoMessage() {}

func (x *TargetCellList) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[852]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TargetCellList.ProtoReflect.Descriptor instead.
func (*TargetCellList) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{852}
}

func (x *TargetCellList) GetValue() []*TargetCellListItem {
	if x != nil {
		return x.Value
	}
	return nil
}

// value set from xnap_v1.asn1:8196
// {TargetCellList-Item-ExtIEs}
type TargetCellListItemExtIes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *emptypb.Empty `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *TargetCellListItemExtIes) Reset() {
	*x = TargetCellListItemExtIes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[853]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TargetCellListItemExtIes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TargetCellListItemExtIes) ProtoMessage() {}

func (x *TargetCellListItemExtIes) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[853]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TargetCellListItemExtIes.ProtoReflect.Descriptor instead.
func (*TargetCellListItemExtIes) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{853}
}

func (x *TargetCellListItemExtIes) GetValue() *emptypb.Empty {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:8192
// {TargetCellList-Item}
type TargetCellListItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TargetCell *TargetCGi `protobuf:"bytes,1,opt,name=target_cell,json=target-cell,proto3" json:"target_cell,omitempty"`
	// @inject_tag: aper:"optional,sizeLB:1,"
	IEExtensions []*TargetCellListItemExtIes `protobuf:"bytes,2,rep,name=i_e_extensions,json=iE-Extensions,proto3" json:"i_e_extensions,omitempty" aper:"optional,sizeLB:1,"`
}

func (x *TargetCellListItem) Reset() {
	*x = TargetCellListItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[854]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TargetCellListItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TargetCellListItem) ProtoMessage() {}

func (x *TargetCellListItem) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[854]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TargetCellListItem.ProtoReflect.Descriptor instead.
func (*TargetCellListItem) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{854}
}

func (x *TargetCellListItem) GetTargetCell() *TargetCGi {
	if x != nil {
		return x.TargetCell
	}
	return nil
}

func (x *TargetCellListItem) GetIEExtensions() []*TargetCellListItemExtIes {
	if x != nil {
		return x.IEExtensions
	}
	return nil
}

// range of Integer from xnap_v1.asn1:8200
// {Threshold-RSRQ}
type ThresholdRSrq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"valueLB:0,valueUB:34,"
	Value int32 `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty" aper:"valueLB:0,valueUB:34,"`
}

func (x *ThresholdRSrq) Reset() {
	*x = ThresholdRSrq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[855]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ThresholdRSrq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ThresholdRSrq) ProtoMessage() {}

func (x *ThresholdRSrq) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[855]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ThresholdRSrq.ProtoReflect.Descriptor instead.
func (*ThresholdRSrq) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{855}
}

func (x *ThresholdRSrq) GetValue() int32 {
	if x != nil {
		return x.Value
	}
	return 0
}

// range of Integer from xnap_v1.asn1:8201
// {Threshold-RSRP}
type ThresholdRSrp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"valueLB:0,valueUB:97,"
	Value int32 `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty" aper:"valueLB:0,valueUB:97,"`
}

func (x *ThresholdRSrp) Reset() {
	*x = ThresholdRSrp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[856]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ThresholdRSrp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ThresholdRSrp) ProtoMessage() {}

func (x *ThresholdRSrp) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[856]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ThresholdRSrp.ProtoReflect.Descriptor instead.
func (*ThresholdRSrp) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{856}
}

func (x *ThresholdRSrp) GetValue() int32 {
	if x != nil {
		return x.Value
	}
	return 0
}

// range of Integer from xnap_v1.asn1:8202
// {Threshold-SINR}
type ThresholdSInr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"valueLB:0,valueUB:127,"
	Value int32 `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty" aper:"valueLB:0,valueUB:127,"`
}

func (x *ThresholdSInr) Reset() {
	*x = ThresholdSInr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[857]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ThresholdSInr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ThresholdSInr) ProtoMessage() {}

func (x *ThresholdSInr) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[857]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ThresholdSInr.ProtoReflect.Descriptor instead.
func (*ThresholdSInr) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{857}
}

func (x *ThresholdSInr) GetValue() int32 {
	if x != nil {
		return x.Value
	}
	return 0
}

// value set from xnap_v1.asn1:8223
// {TNLConfigurationInfo-ExtIEs}
type TnlconfigurationInfoExtIes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *emptypb.Empty `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *TnlconfigurationInfoExtIes) Reset() {
	*x = TnlconfigurationInfoExtIes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[858]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TnlconfigurationInfoExtIes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TnlconfigurationInfoExtIes) ProtoMessage() {}

func (x *TnlconfigurationInfoExtIes) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[858]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TnlconfigurationInfoExtIes.ProtoReflect.Descriptor instead.
func (*TnlconfigurationInfoExtIes) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{858}
}

func (x *TnlconfigurationInfoExtIes) GetValue() *emptypb.Empty {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:8217
// @inject_tag: aper:"valueExt"
// {TNLConfigurationInfo}
type TnlconfigurationInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"optional,"
	ExtendedUptransportLayerAddressesToAdd *ExtTlas `protobuf:"bytes,1,opt,name=extended_uptransport_layer_addresses_to_add,json=extendedUPTransportLayerAddressesToAdd,proto3,oneof" json:"extended_uptransport_layer_addresses_to_add,omitempty" aper:"optional,"`
	// @inject_tag: aper:"optional,"
	ExtendedUptransportLayerAddressesToRemove *ExtTlas `protobuf:"bytes,2,opt,name=extended_uptransport_layer_addresses_to_remove,json=extendedUPTransportLayerAddressesToRemove,proto3,oneof" json:"extended_uptransport_layer_addresses_to_remove,omitempty" aper:"optional,"`
	// @inject_tag: aper:"optional,sizeLB:1,"
	IEExtensions []*TnlconfigurationInfoExtIes `protobuf:"bytes,3,rep,name=i_e_extensions,json=iE-Extensions,proto3" json:"i_e_extensions,omitempty" aper:"optional,sizeLB:1,"`
}

func (x *TnlconfigurationInfo) Reset() {
	*x = TnlconfigurationInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[859]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TnlconfigurationInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TnlconfigurationInfo) ProtoMessage() {}

func (x *TnlconfigurationInfo) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[859]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TnlconfigurationInfo.ProtoReflect.Descriptor instead.
func (*TnlconfigurationInfo) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{859}
}

func (x *TnlconfigurationInfo) GetExtendedUptransportLayerAddressesToAdd() *ExtTlas {
	if x != nil {
		return x.ExtendedUptransportLayerAddressesToAdd
	}
	return nil
}

func (x *TnlconfigurationInfo) GetExtendedUptransportLayerAddressesToRemove() *ExtTlas {
	if x != nil {
		return x.ExtendedUptransportLayerAddressesToRemove
	}
	return nil
}

func (x *TnlconfigurationInfo) GetIEExtensions() []*TnlconfigurationInfoExtIes {
	if x != nil {
		return x.IEExtensions
	}
	return nil
}

// sequence from xnap_v1.asn1:8229
// {TNLA-To-Add-List}
type TnlaToAddList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"sizeLB:1,sizeUB:32,"
	Value []*TnlaToAddItem `protobuf:"bytes,1,rep,name=value,proto3" json:"value,omitempty" aper:"sizeLB:1,sizeUB:32,"`
}

func (x *TnlaToAddList) Reset() {
	*x = TnlaToAddList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[860]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TnlaToAddList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TnlaToAddList) ProtoMessage() {}

func (x *TnlaToAddList) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[860]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TnlaToAddList.ProtoReflect.Descriptor instead.
func (*TnlaToAddList) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{860}
}

func (x *TnlaToAddList) GetValue() []*TnlaToAddItem {
	if x != nil {
		return x.Value
	}
	return nil
}

// value set from xnap_v1.asn1:8235
// {TNLA-To-Add-Item-ExtIEs}
type TnlaToAddItemExtIes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *emptypb.Empty `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *TnlaToAddItemExtIes) Reset() {
	*x = TnlaToAddItemExtIes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[861]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TnlaToAddItemExtIes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TnlaToAddItemExtIes) ProtoMessage() {}

func (x *TnlaToAddItemExtIes) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[861]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TnlaToAddItemExtIes.ProtoReflect.Descriptor instead.
func (*TnlaToAddItemExtIes) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{861}
}

func (x *TnlaToAddItemExtIes) GetValue() *emptypb.Empty {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:8230
// {TNLA-To-Add-Item}
type TnlaToAddItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TNlassociationTransportLayerAddress *CptransportLayerInformation `protobuf:"bytes,1,opt,name=t_nlassociation_transport_layer_address,json=tNLAssociationTransportLayerAddress,proto3" json:"t_nlassociation_transport_layer_address,omitempty"`
	// @inject_tag: aper:"valueExt,valueLB:0,valueUB:2,"
	TNlassociationUsage TnlassociationUsage `protobuf:"varint,2,opt,name=t_nlassociation_usage,json=tNLAssociationUsage,proto3,enum=xnap.v1.TnlassociationUsage" json:"t_nlassociation_usage,omitempty" aper:"valueExt,valueLB:0,valueUB:2,"`
	// @inject_tag: aper:"optional,sizeLB:1,"
	IEExtensions []*TnlaToAddItemExtIes `protobuf:"bytes,3,rep,name=i_e_extensions,json=iE-Extensions,proto3" json:"i_e_extensions,omitempty" aper:"optional,sizeLB:1,"`
}

func (x *TnlaToAddItem) Reset() {
	*x = TnlaToAddItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[862]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TnlaToAddItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TnlaToAddItem) ProtoMessage() {}

func (x *TnlaToAddItem) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[862]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TnlaToAddItem.ProtoReflect.Descriptor instead.
func (*TnlaToAddItem) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{862}
}

func (x *TnlaToAddItem) GetTNlassociationTransportLayerAddress() *CptransportLayerInformation {
	if x != nil {
		return x.TNlassociationTransportLayerAddress
	}
	return nil
}

func (x *TnlaToAddItem) GetTNlassociationUsage() TnlassociationUsage {
	if x != nil {
		return x.TNlassociationUsage
	}
	return TnlassociationUsage_TNLASSOCIATION_USAGE_UE
}

func (x *TnlaToAddItem) GetIEExtensions() []*TnlaToAddItemExtIes {
	if x != nil {
		return x.IEExtensions
	}
	return nil
}

// sequence from xnap_v1.asn1:8242
// {TNLA-To-Update-List}
type TnlaToUpdateList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"sizeLB:1,sizeUB:32,"
	Value []*TnlaToUpdateItem `protobuf:"bytes,1,rep,name=value,proto3" json:"value,omitempty" aper:"sizeLB:1,sizeUB:32,"`
}

func (x *TnlaToUpdateList) Reset() {
	*x = TnlaToUpdateList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[863]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TnlaToUpdateList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TnlaToUpdateList) ProtoMessage() {}

func (x *TnlaToUpdateList) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[863]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TnlaToUpdateList.ProtoReflect.Descriptor instead.
func (*TnlaToUpdateList) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{863}
}

func (x *TnlaToUpdateList) GetValue() []*TnlaToUpdateItem {
	if x != nil {
		return x.Value
	}
	return nil
}

// value set from xnap_v1.asn1:8248
// {TNLA-To-Update-Item-ExtIEs}
type TnlaToUpdateItemExtIes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *emptypb.Empty `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *TnlaToUpdateItemExtIes) Reset() {
	*x = TnlaToUpdateItemExtIes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[864]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TnlaToUpdateItemExtIes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TnlaToUpdateItemExtIes) ProtoMessage() {}

func (x *TnlaToUpdateItemExtIes) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[864]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TnlaToUpdateItemExtIes.ProtoReflect.Descriptor instead.
func (*TnlaToUpdateItemExtIes) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{864}
}

func (x *TnlaToUpdateItemExtIes) GetValue() *emptypb.Empty {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:8243
// {TNLA-To-Update-Item}
type TnlaToUpdateItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TNlassociationTransportLayerAddress *CptransportLayerInformation `protobuf:"bytes,1,opt,name=t_nlassociation_transport_layer_address,json=tNLAssociationTransportLayerAddress,proto3" json:"t_nlassociation_transport_layer_address,omitempty"`
	// @inject_tag: aper:"optional,valueExt,valueLB:0,valueUB:2,"
	TNlassociationUsage *TnlassociationUsage `protobuf:"varint,2,opt,name=t_nlassociation_usage,json=tNLAssociationUsage,proto3,enum=xnap.v1.TnlassociationUsage,oneof" json:"t_nlassociation_usage,omitempty" aper:"optional,valueExt,valueLB:0,valueUB:2,"`
	// @inject_tag: aper:"optional,sizeLB:1,"
	IEExtensions []*TnlaToUpdateItemExtIes `protobuf:"bytes,3,rep,name=i_e_extensions,json=iE-Extensions,proto3" json:"i_e_extensions,omitempty" aper:"optional,sizeLB:1,"`
}

func (x *TnlaToUpdateItem) Reset() {
	*x = TnlaToUpdateItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[865]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TnlaToUpdateItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TnlaToUpdateItem) ProtoMessage() {}

func (x *TnlaToUpdateItem) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[865]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TnlaToUpdateItem.ProtoReflect.Descriptor instead.
func (*TnlaToUpdateItem) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{865}
}

func (x *TnlaToUpdateItem) GetTNlassociationTransportLayerAddress() *CptransportLayerInformation {
	if x != nil {
		return x.TNlassociationTransportLayerAddress
	}
	return nil
}

func (x *TnlaToUpdateItem) GetTNlassociationUsage() TnlassociationUsage {
	if x != nil && x.TNlassociationUsage != nil {
		return *x.TNlassociationUsage
	}
	return TnlassociationUsage_TNLASSOCIATION_USAGE_UE
}

func (x *TnlaToUpdateItem) GetIEExtensions() []*TnlaToUpdateItemExtIes {
	if x != nil {
		return x.IEExtensions
	}
	return nil
}

// sequence from xnap_v1.asn1:8254
// {TNLA-To-Remove-List}
type TnlaToRemoveList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"sizeLB:1,sizeUB:32,"
	Value []*TnlaToRemoveItem `protobuf:"bytes,1,rep,name=value,proto3" json:"value,omitempty" aper:"sizeLB:1,sizeUB:32,"`
}

func (x *TnlaToRemoveList) Reset() {
	*x = TnlaToRemoveList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[866]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TnlaToRemoveList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TnlaToRemoveList) ProtoMessage() {}

func (x *TnlaToRemoveList) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[866]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TnlaToRemoveList.ProtoReflect.Descriptor instead.
func (*TnlaToRemoveList) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{866}
}

func (x *TnlaToRemoveList) GetValue() []*TnlaToRemoveItem {
	if x != nil {
		return x.Value
	}
	return nil
}

// value set from xnap_v1.asn1:8259
// {TNLA-To-Remove-Item-ExtIEs}
type TnlaToRemoveItemExtIes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *emptypb.Empty `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *TnlaToRemoveItemExtIes) Reset() {
	*x = TnlaToRemoveItemExtIes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[867]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TnlaToRemoveItemExtIes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TnlaToRemoveItemExtIes) ProtoMessage() {}

func (x *TnlaToRemoveItemExtIes) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[867]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TnlaToRemoveItemExtIes.ProtoReflect.Descriptor instead.
func (*TnlaToRemoveItemExtIes) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{867}
}

func (x *TnlaToRemoveItemExtIes) GetValue() *emptypb.Empty {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:8255
// {TNLA-To-Remove-Item}
type TnlaToRemoveItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TNlassociationTransportLayerAddress *CptransportLayerInformation `protobuf:"bytes,1,opt,name=t_nlassociation_transport_layer_address,json=tNLAssociationTransportLayerAddress,proto3" json:"t_nlassociation_transport_layer_address,omitempty"`
	// @inject_tag: aper:"optional,sizeLB:1,"
	IEExtensions []*TnlaToRemoveItemExtIes `protobuf:"bytes,2,rep,name=i_e_extensions,json=iE-Extensions,proto3" json:"i_e_extensions,omitempty" aper:"optional,sizeLB:1,"`
}

func (x *TnlaToRemoveItem) Reset() {
	*x = TnlaToRemoveItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[868]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TnlaToRemoveItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TnlaToRemoveItem) ProtoMessage() {}

func (x *TnlaToRemoveItem) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[868]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TnlaToRemoveItem.ProtoReflect.Descriptor instead.
func (*TnlaToRemoveItem) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{868}
}

func (x *TnlaToRemoveItem) GetTNlassociationTransportLayerAddress() *CptransportLayerInformation {
	if x != nil {
		return x.TNlassociationTransportLayerAddress
	}
	return nil
}

func (x *TnlaToRemoveItem) GetIEExtensions() []*TnlaToRemoveItemExtIes {
	if x != nil {
		return x.IEExtensions
	}
	return nil
}

// sequence from xnap_v1.asn1:8266
// {TNLA-Setup-List}
type TnlaSetupList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"valueExt,sizeLB:1,sizeUB:32,"
	Value []*TnlaSetupItem `protobuf:"bytes,1,rep,name=value,proto3" json:"value,omitempty" aper:"valueExt,sizeLB:1,sizeUB:32,"`
}

func (x *TnlaSetupList) Reset() {
	*x = TnlaSetupList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[869]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TnlaSetupList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TnlaSetupList) ProtoMessage() {}

func (x *TnlaSetupList) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[869]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TnlaSetupList.ProtoReflect.Descriptor instead.
func (*TnlaSetupList) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{869}
}

func (x *TnlaSetupList) GetValue() []*TnlaSetupItem {
	if x != nil {
		return x.Value
	}
	return nil
}

// value set from xnap_v1.asn1:8272
// {TNLA-Setup-Item-ExtIEs}
type TnlaSetupItemExtIes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *emptypb.Empty `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *TnlaSetupItemExtIes) Reset() {
	*x = TnlaSetupItemExtIes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[870]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TnlaSetupItemExtIes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TnlaSetupItemExtIes) ProtoMessage() {}

func (x *TnlaSetupItemExtIes) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[870]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TnlaSetupItemExtIes.ProtoReflect.Descriptor instead.
func (*TnlaSetupItemExtIes) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{870}
}

func (x *TnlaSetupItemExtIes) GetValue() *emptypb.Empty {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:8267
// @inject_tag: aper:"valueExt"
// {TNLA-Setup-Item}
type TnlaSetupItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TNlassociationTransportLayerAddress *CptransportLayerInformation `protobuf:"bytes,1,opt,name=t_nlassociation_transport_layer_address,json=tNLAssociationTransportLayerAddress,proto3" json:"t_nlassociation_transport_layer_address,omitempty"`
	// @inject_tag: aper:"optional,sizeLB:1,"
	IEExtensions []*TnlaSetupItemExtIes `protobuf:"bytes,2,rep,name=i_e_extensions,json=iE-Extensions,proto3" json:"i_e_extensions,omitempty" aper:"optional,sizeLB:1,"`
}

func (x *TnlaSetupItem) Reset() {
	*x = TnlaSetupItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[871]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TnlaSetupItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TnlaSetupItem) ProtoMessage() {}

func (x *TnlaSetupItem) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[871]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TnlaSetupItem.ProtoReflect.Descriptor instead.
func (*TnlaSetupItem) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{871}
}

func (x *TnlaSetupItem) GetTNlassociationTransportLayerAddress() *CptransportLayerInformation {
	if x != nil {
		return x.TNlassociationTransportLayerAddress
	}
	return nil
}

func (x *TnlaSetupItem) GetIEExtensions() []*TnlaSetupItemExtIes {
	if x != nil {
		return x.IEExtensions
	}
	return nil
}

// sequence from xnap_v1.asn1:8279
// {TNLA-Failed-To-Setup-List}
type TnlaFailedToSetupList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"sizeLB:1,sizeUB:32,"
	Value []*TnlaFailedToSetupItem `protobuf:"bytes,1,rep,name=value,proto3" json:"value,omitempty" aper:"sizeLB:1,sizeUB:32,"`
}

func (x *TnlaFailedToSetupList) Reset() {
	*x = TnlaFailedToSetupList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[872]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TnlaFailedToSetupList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TnlaFailedToSetupList) ProtoMessage() {}

func (x *TnlaFailedToSetupList) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[872]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TnlaFailedToSetupList.ProtoReflect.Descriptor instead.
func (*TnlaFailedToSetupList) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{872}
}

func (x *TnlaFailedToSetupList) GetValue() []*TnlaFailedToSetupItem {
	if x != nil {
		return x.Value
	}
	return nil
}

// value set from xnap_v1.asn1:8285
// {TNLA-Failed-To-Setup-Item-ExtIEs}
type TnlaFailedToSetupItemExtIes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *emptypb.Empty `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *TnlaFailedToSetupItemExtIes) Reset() {
	*x = TnlaFailedToSetupItemExtIes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[873]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TnlaFailedToSetupItemExtIes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TnlaFailedToSetupItemExtIes) ProtoMessage() {}

func (x *TnlaFailedToSetupItemExtIes) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[873]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TnlaFailedToSetupItemExtIes.ProtoReflect.Descriptor instead.
func (*TnlaFailedToSetupItemExtIes) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{873}
}

func (x *TnlaFailedToSetupItemExtIes) GetValue() *emptypb.Empty {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:8280
// {TNLA-Failed-To-Setup-Item}
type TnlaFailedToSetupItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TNlassociationTransportLayerAddress *CptransportLayerInformation `protobuf:"bytes,1,opt,name=t_nlassociation_transport_layer_address,json=tNLAssociationTransportLayerAddress,proto3" json:"t_nlassociation_transport_layer_address,omitempty"`
	Cause                               *Cause                       `protobuf:"bytes,2,opt,name=cause,proto3" json:"cause,omitempty"`
	// @inject_tag: aper:"optional,sizeLB:1,"
	IEExtensions []*TnlaFailedToSetupItemExtIes `protobuf:"bytes,3,rep,name=i_e_extensions,json=iE-Extensions,proto3" json:"i_e_extensions,omitempty" aper:"optional,sizeLB:1,"`
}

func (x *TnlaFailedToSetupItem) Reset() {
	*x = TnlaFailedToSetupItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[874]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TnlaFailedToSetupItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TnlaFailedToSetupItem) ProtoMessage() {}

func (x *TnlaFailedToSetupItem) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[874]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TnlaFailedToSetupItem.ProtoReflect.Descriptor instead.
func (*TnlaFailedToSetupItem) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{874}
}

func (x *TnlaFailedToSetupItem) GetTNlassociationTransportLayerAddress() *CptransportLayerInformation {
	if x != nil {
		return x.TNlassociationTransportLayerAddress
	}
	return nil
}

func (x *TnlaFailedToSetupItem) GetCause() *Cause {
	if x != nil {
		return x.Cause
	}
	return nil
}

func (x *TnlaFailedToSetupItem) GetIEExtensions() []*TnlaFailedToSetupItemExtIes {
	if x != nil {
		return x.IEExtensions
	}
	return nil
}

// range of Integer from xnap_v1.asn1:8298
// {TransportLayerAddress}
type TransportLayerAddress struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"sizeExt,sizeLB:1,sizeUB:160,"
	Value *asn1.BitString `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty" aper:"sizeExt,sizeLB:1,sizeUB:160,"`
}

func (x *TransportLayerAddress) Reset() {
	*x = TransportLayerAddress{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[875]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransportLayerAddress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransportLayerAddress) ProtoMessage() {}

func (x *TransportLayerAddress) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[875]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransportLayerAddress.ProtoReflect.Descriptor instead.
func (*TransportLayerAddress) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{875}
}

func (x *TransportLayerAddress) GetValue() *asn1.BitString {
	if x != nil {
		return x.Value
	}
	return nil
}

// value set from xnap_v1.asn1:8310
// {TraceActivation-ExtIEs&Extension}
type TraceActivationExtIesExtension struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// value set translated as choice from xnap_v1.asn1:8310
	//
	// Types that are assignable to TraceActivationExtIes:
	//	*TraceActivationExtIesExtension_IdTraceCollectionEntityUri
	//	*TraceActivationExtIesExtension_IdMdtConfiguration
	TraceActivationExtIes isTraceActivationExtIesExtension_TraceActivationExtIes `protobuf_oneof:"trace_activation_ext_ies"`
}

func (x *TraceActivationExtIesExtension) Reset() {
	*x = TraceActivationExtIesExtension{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[876]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TraceActivationExtIesExtension) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TraceActivationExtIesExtension) ProtoMessage() {}

func (x *TraceActivationExtIesExtension) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[876]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TraceActivationExtIesExtension.ProtoReflect.Descriptor instead.
func (*TraceActivationExtIesExtension) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{876}
}

func (m *TraceActivationExtIesExtension) GetTraceActivationExtIes() isTraceActivationExtIesExtension_TraceActivationExtIes {
	if m != nil {
		return m.TraceActivationExtIes
	}
	return nil
}

func (x *TraceActivationExtIesExtension) GetIdTraceCollectionEntityUri() *Uriaddress {
	if x, ok := x.GetTraceActivationExtIes().(*TraceActivationExtIesExtension_IdTraceCollectionEntityUri); ok {
		return x.IdTraceCollectionEntityUri
	}
	return nil
}

func (x *TraceActivationExtIesExtension) GetIdMdtConfiguration() *MdtConfiguration {
	if x, ok := x.GetTraceActivationExtIes().(*TraceActivationExtIesExtension_IdMdtConfiguration); ok {
		return x.IdMdtConfiguration
	}
	return nil
}

type isTraceActivationExtIesExtension_TraceActivationExtIes interface {
	isTraceActivationExtIesExtension_TraceActivationExtIes()
}

type TraceActivationExtIesExtension_IdTraceCollectionEntityUri struct {
	// @inject_tag: aper:"choiceIdx:1,"
	IdTraceCollectionEntityUri *Uriaddress `protobuf:"bytes,1,opt,name=id_trace_collection_entity_uri,json=id-TraceCollectionEntityURI,proto3,oneof" aper:"choiceIdx:1,"`
}

type TraceActivationExtIesExtension_IdMdtConfiguration struct {
	// @inject_tag: aper:"choiceIdx:2,valueExt,"
	IdMdtConfiguration *MdtConfiguration `protobuf:"bytes,2,opt,name=id_mdt_configuration,json=id-MDT-Configuration,proto3,oneof" aper:"choiceIdx:2,valueExt,"`
}

func (*TraceActivationExtIesExtension_IdTraceCollectionEntityUri) isTraceActivationExtIesExtension_TraceActivationExtIes() {
}

func (*TraceActivationExtIesExtension_IdMdtConfiguration) isTraceActivationExtIesExtension_TraceActivationExtIes() {
}

// concrete instance(s) of class XNAP-PROTOCOL-EXTENSION from xnap_v1.asn1:8310
// @inject_tag: aper:"valueExt"
// {TraceActivation-ExtIEs}
type TraceActivationExtIes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"unique,"
	Id *xnap_commondatatypes.ProtocolIeID `protobuf:"bytes,1,opt,name=id,json=&id,proto3" json:"id,omitempty" aper:"unique,"`
	// @inject_tag: aper:"valueLB:0,valueUB:2,"
	Criticality xnap_commondatatypes.Criticality `protobuf:"varint,2,opt,name=criticality,json=&criticality,proto3,enum=xnap.v1.Criticality" json:"criticality,omitempty" aper:"valueLB:0,valueUB:2,"`
	// @inject_tag: aper:"canonicalOrder,"
	Extension *TraceActivationExtIesExtension `protobuf:"bytes,3,opt,name=extension,json=&Extension,proto3" json:"extension,omitempty" aper:"canonicalOrder,"`
}

func (x *TraceActivationExtIes) Reset() {
	*x = TraceActivationExtIes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[877]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TraceActivationExtIes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TraceActivationExtIes) ProtoMessage() {}

func (x *TraceActivationExtIes) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[877]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TraceActivationExtIes.ProtoReflect.Descriptor instead.
func (*TraceActivationExtIes) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{877}
}

func (x *TraceActivationExtIes) GetId() *xnap_commondatatypes.ProtocolIeID {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *TraceActivationExtIes) GetCriticality() xnap_commondatatypes.Criticality {
	if x != nil {
		return x.Criticality
	}
	return xnap_commondatatypes.Criticality(0)
}

func (x *TraceActivationExtIes) GetExtension() *TraceActivationExtIesExtension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// sequence from xnap_v1.asn1:8302
// @inject_tag: aper:"valueExt"
// {TraceActivation}
type TraceActivation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NgRanTraceId *NgRAntraceId `protobuf:"bytes,1,opt,name=ng_ran_trace_id,json=ng-ran-TraceID,proto3" json:"ng_ran_trace_id,omitempty"`
	// @inject_tag: aper:"sizeLB:8,sizeUB:8,"
	InterfacesToTrace *asn1.BitString `protobuf:"bytes,2,opt,name=interfaces_to_trace,json=interfaces-to-trace,proto3" json:"interfaces_to_trace,omitempty" aper:"sizeLB:8,sizeUB:8,"`
	// @inject_tag: aper:"valueExt,valueLB:0,valueUB:5,"
	TraceDepth       TraceDepth             `protobuf:"varint,3,opt,name=trace_depth,json=trace-depth,proto3,enum=xnap.v1.TraceDepth" json:"trace_depth,omitempty" aper:"valueExt,valueLB:0,valueUB:5,"`
	TraceCollAddress *TransportLayerAddress `protobuf:"bytes,4,opt,name=trace_coll_address,json=trace-coll-address,proto3" json:"trace_coll_address,omitempty"`
	// @inject_tag: aper:"optional,sizeLB:1,"
	IeExtension []*TraceActivationExtIes `protobuf:"bytes,5,rep,name=ie_extension,json=ie-Extension,proto3" json:"ie_extension,omitempty" aper:"optional,sizeLB:1,"`
}

func (x *TraceActivation) Reset() {
	*x = TraceActivation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[878]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TraceActivation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TraceActivation) ProtoMessage() {}

func (x *TraceActivation) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[878]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TraceActivation.ProtoReflect.Descriptor instead.
func (*TraceActivation) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{878}
}

func (x *TraceActivation) GetNgRanTraceId() *NgRAntraceId {
	if x != nil {
		return x.NgRanTraceId
	}
	return nil
}

func (x *TraceActivation) GetInterfacesToTrace() *asn1.BitString {
	if x != nil {
		return x.InterfacesToTrace
	}
	return nil
}

func (x *TraceActivation) GetTraceDepth() TraceDepth {
	if x != nil {
		return x.TraceDepth
	}
	return TraceDepth_TRACE_DEPTH_MINIMUM
}

func (x *TraceActivation) GetTraceCollAddress() *TransportLayerAddress {
	if x != nil {
		return x.TraceCollAddress
	}
	return nil
}

func (x *TraceActivation) GetIeExtension() []*TraceActivationExtIes {
	if x != nil {
		return x.IeExtension
	}
	return nil
}

// value set from xnap_v1.asn1:8336
// {TSCTrafficCharacteristics-ExtIEs}
type TsctrafficCharacteristicsExtIes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *emptypb.Empty `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *TsctrafficCharacteristicsExtIes) Reset() {
	*x = TsctrafficCharacteristicsExtIes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[879]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TsctrafficCharacteristicsExtIes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TsctrafficCharacteristicsExtIes) ProtoMessage() {}

func (x *TsctrafficCharacteristicsExtIes) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[879]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TsctrafficCharacteristicsExtIes.ProtoReflect.Descriptor instead.
func (*TsctrafficCharacteristicsExtIes) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{879}
}

func (x *TsctrafficCharacteristicsExtIes) GetValue() *emptypb.Empty {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:8330
// @inject_tag: aper:"valueExt"
// {TSCTrafficCharacteristics}
type TsctrafficCharacteristics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"optional,valueExt,"
	TScassistanceInformationDownlink *TscassistanceInformation `protobuf:"bytes,1,opt,name=t_scassistance_information_downlink,json=tSCAssistanceInformationDownlink,proto3,oneof" json:"t_scassistance_information_downlink,omitempty" aper:"optional,valueExt,"`
	// @inject_tag: aper:"optional,valueExt,"
	TScassistanceInformationUplink *TscassistanceInformation `protobuf:"bytes,2,opt,name=t_scassistance_information_uplink,json=tSCAssistanceInformationUplink,proto3,oneof" json:"t_scassistance_information_uplink,omitempty" aper:"optional,valueExt,"`
	// @inject_tag: aper:"optional,sizeLB:1,"
	IeExtension []*TsctrafficCharacteristicsExtIes `protobuf:"bytes,3,rep,name=ie_extension,json=ie-Extension,proto3" json:"ie_extension,omitempty" aper:"optional,sizeLB:1,"`
}

func (x *TsctrafficCharacteristics) Reset() {
	*x = TsctrafficCharacteristics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[880]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TsctrafficCharacteristics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TsctrafficCharacteristics) ProtoMessage() {}

func (x *TsctrafficCharacteristics) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[880]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TsctrafficCharacteristics.ProtoReflect.Descriptor instead.
func (*TsctrafficCharacteristics) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{880}
}

func (x *TsctrafficCharacteristics) GetTScassistanceInformationDownlink() *TscassistanceInformation {
	if x != nil {
		return x.TScassistanceInformationDownlink
	}
	return nil
}

func (x *TsctrafficCharacteristics) GetTScassistanceInformationUplink() *TscassistanceInformation {
	if x != nil {
		return x.TScassistanceInformationUplink
	}
	return nil
}

func (x *TsctrafficCharacteristics) GetIeExtension() []*TsctrafficCharacteristicsExtIes {
	if x != nil {
		return x.IeExtension
	}
	return nil
}

// value set from xnap_v1.asn1:8347
// {TSCAssistanceInformation-ExtIEs}
type TscassistanceInformationExtIes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *emptypb.Empty `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *TscassistanceInformationExtIes) Reset() {
	*x = TscassistanceInformationExtIes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[881]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TscassistanceInformationExtIes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TscassistanceInformationExtIes) ProtoMessage() {}

func (x *TscassistanceInformationExtIes) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[881]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TscassistanceInformationExtIes.ProtoReflect.Descriptor instead.
func (*TscassistanceInformationExtIes) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{881}
}

func (x *TscassistanceInformationExtIes) GetValue() *emptypb.Empty {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:8341
// @inject_tag: aper:"valueExt"
// {TSCAssistanceInformation}
type TscassistanceInformation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"valueExt,valueLB:0,valueUB:640000,"
	Periodicity int32 `protobuf:"varint,1,opt,name=periodicity,proto3" json:"periodicity,omitempty" aper:"valueExt,valueLB:0,valueUB:640000,"`
	// @inject_tag: aper:"optional,"
	BurstArrivalTime []byte `protobuf:"bytes,2,opt,name=burst_arrival_time,json=burstArrivalTime,proto3,oneof" json:"burst_arrival_time,omitempty" aper:"optional,"`
	// @inject_tag: aper:"optional,sizeLB:1,"
	IeExtension []*TscassistanceInformationExtIes `protobuf:"bytes,3,rep,name=ie_extension,json=ie-Extension,proto3" json:"ie_extension,omitempty" aper:"optional,sizeLB:1,"`
}

func (x *TscassistanceInformation) Reset() {
	*x = TscassistanceInformation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[882]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TscassistanceInformation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TscassistanceInformation) ProtoMessage() {}

func (x *TscassistanceInformation) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[882]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TscassistanceInformation.ProtoReflect.Descriptor instead.
func (*TscassistanceInformation) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{882}
}

func (x *TscassistanceInformation) GetPeriodicity() int32 {
	if x != nil {
		return x.Periodicity
	}
	return 0
}

func (x *TscassistanceInformation) GetBurstArrivalTime() []byte {
	if x != nil {
		return x.BurstArrivalTime
	}
	return nil
}

func (x *TscassistanceInformation) GetIeExtension() []*TscassistanceInformationExtIes {
	if x != nil {
		return x.IeExtension
	}
	return nil
}

// value set from xnap_v1.asn1:8369
// {UEAggregateMaximumBitRate-ExtIEs}
type UeaggregateMaximumBitRateExtIes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *emptypb.Empty `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *UeaggregateMaximumBitRateExtIes) Reset() {
	*x = UeaggregateMaximumBitRateExtIes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[883]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UeaggregateMaximumBitRateExtIes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UeaggregateMaximumBitRateExtIes) ProtoMessage() {}

func (x *UeaggregateMaximumBitRateExtIes) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[883]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UeaggregateMaximumBitRateExtIes.ProtoReflect.Descriptor instead.
func (*UeaggregateMaximumBitRateExtIes) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{883}
}

func (x *UeaggregateMaximumBitRateExtIes) GetValue() *emptypb.Empty {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:8363
// @inject_tag: aper:"valueExt"
// {UEAggregateMaximumBitRate}
type UeaggregateMaximumBitRate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DlUeAmbr *BitRate `protobuf:"bytes,1,opt,name=dl_ue_ambr,json=dl-UE-AMBR,proto3" json:"dl_ue_ambr,omitempty"`
	UlUeAmbr *BitRate `protobuf:"bytes,2,opt,name=ul_ue_ambr,json=ul-UE-AMBR,proto3" json:"ul_ue_ambr,omitempty"`
	// @inject_tag: aper:"optional,sizeLB:1,"
	IEExtension []*UeaggregateMaximumBitRateExtIes `protobuf:"bytes,3,rep,name=i_e_extension,json=iE-Extension,proto3" json:"i_e_extension,omitempty" aper:"optional,sizeLB:1,"`
}

func (x *UeaggregateMaximumBitRate) Reset() {
	*x = UeaggregateMaximumBitRate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[884]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UeaggregateMaximumBitRate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UeaggregateMaximumBitRate) ProtoMessage() {}

func (x *UeaggregateMaximumBitRate) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[884]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UeaggregateMaximumBitRate.ProtoReflect.Descriptor instead.
func (*UeaggregateMaximumBitRate) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{884}
}

func (x *UeaggregateMaximumBitRate) GetDlUeAmbr() *BitRate {
	if x != nil {
		return x.DlUeAmbr
	}
	return nil
}

func (x *UeaggregateMaximumBitRate) GetUlUeAmbr() *BitRate {
	if x != nil {
		return x.UlUeAmbr
	}
	return nil
}

func (x *UeaggregateMaximumBitRate) GetIEExtension() []*UeaggregateMaximumBitRateExtIes {
	if x != nil {
		return x.IEExtension
	}
	return nil
}

// value set from xnap_v1.asn1:8383
// {UEContextID-ExtIEs}
type UecontextIdExtIes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *emptypb.Empty `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *UecontextIdExtIes) Reset() {
	*x = UecontextIdExtIes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[885]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UecontextIdExtIes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UecontextIdExtIes) ProtoMessage() {}

func (x *UecontextIdExtIes) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[885]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UecontextIdExtIes.ProtoReflect.Descriptor instead.
func (*UecontextIdExtIes) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{885}
}

func (x *UecontextIdExtIes) GetValue() *emptypb.Empty {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:8378
// {UEContextID}
type UecontextId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// choice from xnap_v1.asn1:8378
	//
	// Types that are assignable to UecontextId:
	//	*UecontextId_RRcresume
	//	*UecontextId_RRrcreestablishment
	//	*UecontextId_ChoiceExtension
	UecontextId isUecontextId_UecontextId `protobuf_oneof:"uecontext_id"`
}

func (x *UecontextId) Reset() {
	*x = UecontextId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[886]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UecontextId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UecontextId) ProtoMessage() {}

func (x *UecontextId) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[886]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UecontextId.ProtoReflect.Descriptor instead.
func (*UecontextId) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{886}
}

func (m *UecontextId) GetUecontextId() isUecontextId_UecontextId {
	if m != nil {
		return m.UecontextId
	}
	return nil
}

func (x *UecontextId) GetRRcresume() *UecontextIdforRrcresume {
	if x, ok := x.GetUecontextId().(*UecontextId_RRcresume); ok {
		return x.RRcresume
	}
	return nil
}

func (x *UecontextId) GetRRrcreestablishment() *UecontextIdforRrcreestablishment {
	if x, ok := x.GetUecontextId().(*UecontextId_RRrcreestablishment); ok {
		return x.RRrcreestablishment
	}
	return nil
}

func (x *UecontextId) GetChoiceExtension() *UecontextIdExtIes {
	if x, ok := x.GetUecontextId().(*UecontextId_ChoiceExtension); ok {
		return x.ChoiceExtension
	}
	return nil
}

type isUecontextId_UecontextId interface {
	isUecontextId_UecontextId()
}

type UecontextId_RRcresume struct {
	// @inject_tag: aper:"choiceIdx:1,valueExt,"
	RRcresume *UecontextIdforRrcresume `protobuf:"bytes,1,opt,name=r_rcresume,json=rRCResume,proto3,oneof" aper:"choiceIdx:1,valueExt,"`
}

type UecontextId_RRrcreestablishment struct {
	// @inject_tag: aper:"choiceIdx:2,valueExt,"
	RRrcreestablishment *UecontextIdforRrcreestablishment `protobuf:"bytes,2,opt,name=r_rrcreestablishment,json=rRRCReestablishment,proto3,oneof" aper:"choiceIdx:2,valueExt,"`
}

type UecontextId_ChoiceExtension struct {
	// @inject_tag: aper:"choiceIdx:3,"
	ChoiceExtension *UecontextIdExtIes `protobuf:"bytes,3,opt,name=choice_extension,json=choice-extension,proto3,oneof" aper:"choiceIdx:3,"`
}

func (*UecontextId_RRcresume) isUecontextId_UecontextId() {}

func (*UecontextId_RRrcreestablishment) isUecontextId_UecontextId() {}

func (*UecontextId_ChoiceExtension) isUecontextId_UecontextId() {}

// value set from xnap_v1.asn1:8396
// {UEContextIDforRRCResume-ExtIEs}
type UecontextIdforRrcresumeExtIes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *emptypb.Empty `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *UecontextIdforRrcresumeExtIes) Reset() {
	*x = UecontextIdforRrcresumeExtIes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[887]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UecontextIdforRrcresumeExtIes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UecontextIdforRrcresumeExtIes) ProtoMessage() {}

func (x *UecontextIdforRrcresumeExtIes) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[887]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UecontextIdforRrcresumeExtIes.ProtoReflect.Descriptor instead.
func (*UecontextIdforRrcresumeExtIes) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{887}
}

func (x *UecontextIdforRrcresumeExtIes) GetValue() *emptypb.Empty {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:8389
// @inject_tag: aper:"valueExt"
// {UEContextIDforRRCResume}
type UecontextIdforRrcresume struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IRnti          *IRNti        `protobuf:"bytes,1,opt,name=i_rnti,json=i-rnti,proto3" json:"i_rnti,omitempty"`
	AllocatedCRnti *CRNti        `protobuf:"bytes,2,opt,name=allocated_c_rnti,json=allocated-c-rnti,proto3" json:"allocated_c_rnti,omitempty"`
	AccessPci      *NgRAnCellPci `protobuf:"bytes,3,opt,name=access_pci,json=accessPCI,proto3" json:"access_pci,omitempty"`
	// @inject_tag: aper:"optional,sizeLB:1,"
	IEExtension []*UecontextIdforRrcresumeExtIes `protobuf:"bytes,4,rep,name=i_e_extension,json=iE-Extension,proto3" json:"i_e_extension,omitempty" aper:"optional,sizeLB:1,"`
}

func (x *UecontextIdforRrcresume) Reset() {
	*x = UecontextIdforRrcresume{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[888]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UecontextIdforRrcresume) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UecontextIdforRrcresume) ProtoMessage() {}

func (x *UecontextIdforRrcresume) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[888]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UecontextIdforRrcresume.ProtoReflect.Descriptor instead.
func (*UecontextIdforRrcresume) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{888}
}

func (x *UecontextIdforRrcresume) GetIRnti() *IRNti {
	if x != nil {
		return x.IRnti
	}
	return nil
}

func (x *UecontextIdforRrcresume) GetAllocatedCRnti() *CRNti {
	if x != nil {
		return x.AllocatedCRnti
	}
	return nil
}

func (x *UecontextIdforRrcresume) GetAccessPci() *NgRAnCellPci {
	if x != nil {
		return x.AccessPci
	}
	return nil
}

func (x *UecontextIdforRrcresume) GetIEExtension() []*UecontextIdforRrcresumeExtIes {
	if x != nil {
		return x.IEExtension
	}
	return nil
}

// value set from xnap_v1.asn1:8408
// {UEContextIDforRRCReestablishment-ExtIEs}
type UecontextIdforRrcreestablishmentExtIes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *emptypb.Empty `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *UecontextIdforRrcreestablishmentExtIes) Reset() {
	*x = UecontextIdforRrcreestablishmentExtIes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[889]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UecontextIdforRrcreestablishmentExtIes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UecontextIdforRrcreestablishmentExtIes) ProtoMessage() {}

func (x *UecontextIdforRrcreestablishmentExtIes) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[889]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UecontextIdforRrcreestablishmentExtIes.ProtoReflect.Descriptor instead.
func (*UecontextIdforRrcreestablishmentExtIes) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{889}
}

func (x *UecontextIdforRrcreestablishmentExtIes) GetValue() *emptypb.Empty {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:8402
// @inject_tag: aper:"valueExt"
// {UEContextIDforRRCReestablishment}
type UecontextIdforRrcreestablishment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CRnti          *CRNti        `protobuf:"bytes,1,opt,name=c_rnti,json=c-rnti,proto3" json:"c_rnti,omitempty"`
	FailureCellPci *NgRAnCellPci `protobuf:"bytes,2,opt,name=failure_cell_pci,json=failureCellPCI,proto3" json:"failure_cell_pci,omitempty"`
	// @inject_tag: aper:"optional,sizeLB:1,"
	IEExtension []*UecontextIdforRrcreestablishmentExtIes `protobuf:"bytes,3,rep,name=i_e_extension,json=iE-Extension,proto3" json:"i_e_extension,omitempty" aper:"optional,sizeLB:1,"`
}

func (x *UecontextIdforRrcreestablishment) Reset() {
	*x = UecontextIdforRrcreestablishment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[890]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UecontextIdforRrcreestablishment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UecontextIdforRrcreestablishment) ProtoMessage() {}

func (x *UecontextIdforRrcreestablishment) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[890]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UecontextIdforRrcreestablishment.ProtoReflect.Descriptor instead.
func (*UecontextIdforRrcreestablishment) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{890}
}

func (x *UecontextIdforRrcreestablishment) GetCRnti() *CRNti {
	if x != nil {
		return x.CRnti
	}
	return nil
}

func (x *UecontextIdforRrcreestablishment) GetFailureCellPci() *NgRAnCellPci {
	if x != nil {
		return x.FailureCellPci
	}
	return nil
}

func (x *UecontextIdforRrcreestablishment) GetIEExtension() []*UecontextIdforRrcreestablishmentExtIes {
	if x != nil {
		return x.IEExtension
	}
	return nil
}

// value set from xnap_v1.asn1:8427
// {UEContextInfoRetrUECtxtResp-ExtIEs&Extension}
type UecontextInfoRetrUectxtRespExtIesExtension struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// value set translated as choice from xnap_v1.asn1:8427
	//
	// Types that are assignable to UecontextInfoRetrUectxtRespExtIes:
	//	*UecontextInfoRetrUectxtRespExtIesExtension_IdFiveGcmobilityRestrictionListContainer
	//	*UecontextInfoRetrUectxtRespExtIesExtension_IdNruesidelinkAggregateMaximumBitRate
	//	*UecontextInfoRetrUectxtRespExtIesExtension_IdLteuesidelinkAggregateMaximumBitRate
	//	*UecontextInfoRetrUectxtRespExtIesExtension_IdUeradioCapabilityId
	UecontextInfoRetrUectxtRespExtIes isUecontextInfoRetrUectxtRespExtIesExtension_UecontextInfoRetrUectxtRespExtIes `protobuf_oneof:"uecontext_info_retr_uectxt_resp_ext_ies"`
}

func (x *UecontextInfoRetrUectxtRespExtIesExtension) Reset() {
	*x = UecontextInfoRetrUectxtRespExtIesExtension{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[891]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UecontextInfoRetrUectxtRespExtIesExtension) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UecontextInfoRetrUectxtRespExtIesExtension) ProtoMessage() {}

func (x *UecontextInfoRetrUectxtRespExtIesExtension) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[891]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UecontextInfoRetrUectxtRespExtIesExtension.ProtoReflect.Descriptor instead.
func (*UecontextInfoRetrUectxtRespExtIesExtension) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{891}
}

func (m *UecontextInfoRetrUectxtRespExtIesExtension) GetUecontextInfoRetrUectxtRespExtIes() isUecontextInfoRetrUectxtRespExtIesExtension_UecontextInfoRetrUectxtRespExtIes {
	if m != nil {
		return m.UecontextInfoRetrUectxtRespExtIes
	}
	return nil
}

func (x *UecontextInfoRetrUectxtRespExtIesExtension) GetIdFiveGcmobilityRestrictionListContainer() *FiveGcmobilityRestrictionListContainer {
	if x, ok := x.GetUecontextInfoRetrUectxtRespExtIes().(*UecontextInfoRetrUectxtRespExtIesExtension_IdFiveGcmobilityRestrictionListContainer); ok {
		return x.IdFiveGcmobilityRestrictionListContainer
	}
	return nil
}

func (x *UecontextInfoRetrUectxtRespExtIesExtension) GetIdNruesidelinkAggregateMaximumBitRate() *NruesidelinkAggregateMaximumBitRate {
	if x, ok := x.GetUecontextInfoRetrUectxtRespExtIes().(*UecontextInfoRetrUectxtRespExtIesExtension_IdNruesidelinkAggregateMaximumBitRate); ok {
		return x.IdNruesidelinkAggregateMaximumBitRate
	}
	return nil
}

func (x *UecontextInfoRetrUectxtRespExtIesExtension) GetIdLteuesidelinkAggregateMaximumBitRate() *LteuesidelinkAggregateMaximumBitRate {
	if x, ok := x.GetUecontextInfoRetrUectxtRespExtIes().(*UecontextInfoRetrUectxtRespExtIesExtension_IdLteuesidelinkAggregateMaximumBitRate); ok {
		return x.IdLteuesidelinkAggregateMaximumBitRate
	}
	return nil
}

func (x *UecontextInfoRetrUectxtRespExtIesExtension) GetIdUeradioCapabilityId() *UeradioCapabilityId {
	if x, ok := x.GetUecontextInfoRetrUectxtRespExtIes().(*UecontextInfoRetrUectxtRespExtIesExtension_IdUeradioCapabilityId); ok {
		return x.IdUeradioCapabilityId
	}
	return nil
}

type isUecontextInfoRetrUectxtRespExtIesExtension_UecontextInfoRetrUectxtRespExtIes interface {
	isUecontextInfoRetrUectxtRespExtIesExtension_UecontextInfoRetrUectxtRespExtIes()
}

type UecontextInfoRetrUectxtRespExtIesExtension_IdFiveGcmobilityRestrictionListContainer struct {
	// @inject_tag: aper:"choiceIdx:1,"
	IdFiveGcmobilityRestrictionListContainer *FiveGcmobilityRestrictionListContainer `protobuf:"bytes,1,opt,name=id_five_gcmobility_restriction_list_container,json=id-FiveGCMobilityRestrictionListContainer,proto3,oneof" aper:"choiceIdx:1,"`
}

type UecontextInfoRetrUectxtRespExtIesExtension_IdNruesidelinkAggregateMaximumBitRate struct {
	// @inject_tag: aper:"choiceIdx:2,valueExt,"
	IdNruesidelinkAggregateMaximumBitRate *NruesidelinkAggregateMaximumBitRate `protobuf:"bytes,2,opt,name=id_nruesidelink_aggregate_maximum_bit_rate,json=id-NRUESidelinkAggregateMaximumBitRate,proto3,oneof" aper:"choiceIdx:2,valueExt,"`
}

type UecontextInfoRetrUectxtRespExtIesExtension_IdLteuesidelinkAggregateMaximumBitRate struct {
	// @inject_tag: aper:"choiceIdx:3,valueExt,"
	IdLteuesidelinkAggregateMaximumBitRate *LteuesidelinkAggregateMaximumBitRate `protobuf:"bytes,3,opt,name=id_lteuesidelink_aggregate_maximum_bit_rate,json=id-LTEUESidelinkAggregateMaximumBitRate,proto3,oneof" aper:"choiceIdx:3,valueExt,"`
}

type UecontextInfoRetrUectxtRespExtIesExtension_IdUeradioCapabilityId struct {
	// @inject_tag: aper:"choiceIdx:4,"
	IdUeradioCapabilityId *UeradioCapabilityId `protobuf:"bytes,4,opt,name=id_ueradio_capability_id,json=id-UERadioCapabilityID,proto3,oneof" aper:"choiceIdx:4,"`
}

func (*UecontextInfoRetrUectxtRespExtIesExtension_IdFiveGcmobilityRestrictionListContainer) isUecontextInfoRetrUectxtRespExtIesExtension_UecontextInfoRetrUectxtRespExtIes() {
}

func (*UecontextInfoRetrUectxtRespExtIesExtension_IdNruesidelinkAggregateMaximumBitRate) isUecontextInfoRetrUectxtRespExtIesExtension_UecontextInfoRetrUectxtRespExtIes() {
}

func (*UecontextInfoRetrUectxtRespExtIesExtension_IdLteuesidelinkAggregateMaximumBitRate) isUecontextInfoRetrUectxtRespExtIesExtension_UecontextInfoRetrUectxtRespExtIes() {
}

func (*UecontextInfoRetrUectxtRespExtIesExtension_IdUeradioCapabilityId) isUecontextInfoRetrUectxtRespExtIesExtension_UecontextInfoRetrUectxtRespExtIes() {
}

// concrete instance(s) of class XNAP-PROTOCOL-EXTENSION from xnap_v1.asn1:8427
// @inject_tag: aper:"valueExt"
// {UEContextInfoRetrUECtxtResp-ExtIEs}
type UecontextInfoRetrUectxtRespExtIes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"unique,"
	Id *xnap_commondatatypes.ProtocolIeID `protobuf:"bytes,1,opt,name=id,json=&id,proto3" json:"id,omitempty" aper:"unique,"`
	// @inject_tag: aper:"valueLB:0,valueUB:2,"
	Criticality xnap_commondatatypes.Criticality `protobuf:"varint,2,opt,name=criticality,json=&criticality,proto3,enum=xnap.v1.Criticality" json:"criticality,omitempty" aper:"valueLB:0,valueUB:2,"`
	// @inject_tag: aper:"canonicalOrder,"
	Extension *UecontextInfoRetrUectxtRespExtIesExtension `protobuf:"bytes,3,opt,name=extension,json=&Extension,proto3" json:"extension,omitempty" aper:"canonicalOrder,"`
}

func (x *UecontextInfoRetrUectxtRespExtIes) Reset() {
	*x = UecontextInfoRetrUectxtRespExtIes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[892]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UecontextInfoRetrUectxtRespExtIes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UecontextInfoRetrUectxtRespExtIes) ProtoMessage() {}

func (x *UecontextInfoRetrUectxtRespExtIes) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[892]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UecontextInfoRetrUectxtRespExtIes.ProtoReflect.Descriptor instead.
func (*UecontextInfoRetrUectxtRespExtIes) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{892}
}

func (x *UecontextInfoRetrUectxtRespExtIes) GetId() *xnap_commondatatypes.ProtocolIeID {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *UecontextInfoRetrUectxtRespExtIes) GetCriticality() xnap_commondatatypes.Criticality {
	if x != nil {
		return x.Criticality
	}
	return xnap_commondatatypes.Criticality(0)
}

func (x *UecontextInfoRetrUectxtRespExtIes) GetExtension() *UecontextInfoRetrUectxtRespExtIesExtension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// sequence from xnap_v1.asn1:8414
// @inject_tag: aper:"valueExt"
// {UEContextInfoRetrUECtxtResp}
type UecontextInfoRetrUectxtResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NgCUeSignallingRef    *AmfUENGapID                 `protobuf:"bytes,1,opt,name=ng_c_ue_signalling_ref,json=ng-c-UE-signalling-ref,proto3" json:"ng_c_ue_signalling_ref,omitempty"`
	SignallingTnlAtSource *CptransportLayerInformation `protobuf:"bytes,2,opt,name=signalling_tnl_at_source,json=signalling-TNL-at-source,proto3" json:"signalling_tnl_at_source,omitempty"`
	// @inject_tag: aper:"valueExt,"
	UeSecurityCapabilities *UesecurityCapabilities `protobuf:"bytes,3,opt,name=ue_security_capabilities,json=ueSecurityCapabilities,proto3" json:"ue_security_capabilities,omitempty" aper:"valueExt,"`
	// @inject_tag: aper:"valueExt,"
	SecurityInformation *AsSecurityInformation `protobuf:"bytes,4,opt,name=security_information,json=securityInformation,proto3" json:"security_information,omitempty" aper:"valueExt,"`
	// @inject_tag: aper:"valueExt,"
	UeAmbr                           *UeaggregateMaximumBitRate        `protobuf:"bytes,5,opt,name=ue_ambr,json=ue-AMBR,proto3" json:"ue_ambr,omitempty" aper:"valueExt,"`
	PduSessionResourcesToBeSetupList *PdusessionResourcesToBeSetupList `protobuf:"bytes,6,opt,name=pdu_session_resources_to_be_setup_list,json=pduSessionResourcesToBeSetup-List,proto3" json:"pdu_session_resources_to_be_setup_list,omitempty"`
	RrcContext                       []byte                            `protobuf:"bytes,7,opt,name=rrc_context,json=rrc-Context,proto3" json:"rrc_context,omitempty"`
	// @inject_tag: aper:"optional,valueExt,"
	MobilityRestrictionList *MobilityRestrictionList `protobuf:"bytes,8,opt,name=mobility_restriction_list,json=mobilityRestrictionList,proto3,oneof" json:"mobility_restriction_list,omitempty" aper:"optional,valueExt,"`
	// @inject_tag: aper:"optional,"
	IndexToRatFrequencySelectionPriority *RfspIndex `protobuf:"bytes,9,opt,name=index_to_rat_frequency_selection_priority,json=indexToRatFrequencySelectionPriority,proto3,oneof" json:"index_to_rat_frequency_selection_priority,omitempty" aper:"optional,"`
	// @inject_tag: aper:"optional,sizeLB:1,"
	IEExtension []*UecontextInfoRetrUectxtRespExtIes `protobuf:"bytes,10,rep,name=i_e_extension,json=iE-Extension,proto3" json:"i_e_extension,omitempty" aper:"optional,sizeLB:1,"`
}

func (x *UecontextInfoRetrUectxtResp) Reset() {
	*x = UecontextInfoRetrUectxtResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[893]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UecontextInfoRetrUectxtResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UecontextInfoRetrUectxtResp) ProtoMessage() {}

func (x *UecontextInfoRetrUectxtResp) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[893]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UecontextInfoRetrUectxtResp.ProtoReflect.Descriptor instead.
func (*UecontextInfoRetrUectxtResp) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{893}
}

func (x *UecontextInfoRetrUectxtResp) GetNgCUeSignallingRef() *AmfUENGapID {
	if x != nil {
		return x.NgCUeSignallingRef
	}
	return nil
}

func (x *UecontextInfoRetrUectxtResp) GetSignallingTnlAtSource() *CptransportLayerInformation {
	if x != nil {
		return x.SignallingTnlAtSource
	}
	return nil
}

func (x *UecontextInfoRetrUectxtResp) GetUeSecurityCapabilities() *UesecurityCapabilities {
	if x != nil {
		return x.UeSecurityCapabilities
	}
	return nil
}

func (x *UecontextInfoRetrUectxtResp) GetSecurityInformation() *AsSecurityInformation {
	if x != nil {
		return x.SecurityInformation
	}
	return nil
}

func (x *UecontextInfoRetrUectxtResp) GetUeAmbr() *UeaggregateMaximumBitRate {
	if x != nil {
		return x.UeAmbr
	}
	return nil
}

func (x *UecontextInfoRetrUectxtResp) GetPduSessionResourcesToBeSetupList() *PdusessionResourcesToBeSetupList {
	if x != nil {
		return x.PduSessionResourcesToBeSetupList
	}
	return nil
}

func (x *UecontextInfoRetrUectxtResp) GetRrcContext() []byte {
	if x != nil {
		return x.RrcContext
	}
	return nil
}

func (x *UecontextInfoRetrUectxtResp) GetMobilityRestrictionList() *MobilityRestrictionList {
	if x != nil {
		return x.MobilityRestrictionList
	}
	return nil
}

func (x *UecontextInfoRetrUectxtResp) GetIndexToRatFrequencySelectionPriority() *RfspIndex {
	if x != nil {
		return x.IndexToRatFrequencySelectionPriority
	}
	return nil
}

func (x *UecontextInfoRetrUectxtResp) GetIEExtension() []*UecontextInfoRetrUectxtRespExtIes {
	if x != nil {
		return x.IEExtension
	}
	return nil
}

// sequence from xnap_v1.asn1:8439
// {UEHistoryInformation}
type UehistoryInformation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"sizeLB:1,sizeUB:16,"
	Value []*LastVisitedCellItem `protobuf:"bytes,1,rep,name=value,proto3" json:"value,omitempty" aper:"sizeLB:1,sizeUB:16,"`
}

func (x *UehistoryInformation) Reset() {
	*x = UehistoryInformation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[894]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UehistoryInformation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UehistoryInformation) ProtoMessage() {}

func (x *UehistoryInformation) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[894]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UehistoryInformation.ProtoReflect.Descriptor instead.
func (*UehistoryInformation) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{894}
}

func (x *UehistoryInformation) GetValue() []*LastVisitedCellItem {
	if x != nil {
		return x.Value
	}
	return nil
}

// value set from xnap_v1.asn1:8444
// {UEHistoryInformationFromTheUE-ExtIEs}
type UehistoryInformationFromTheUeExtIes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *emptypb.Empty `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *UehistoryInformationFromTheUeExtIes) Reset() {
	*x = UehistoryInformationFromTheUeExtIes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[895]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UehistoryInformationFromTheUeExtIes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UehistoryInformationFromTheUeExtIes) ProtoMessage() {}

func (x *UehistoryInformationFromTheUeExtIes) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[895]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UehistoryInformationFromTheUeExtIes.ProtoReflect.Descriptor instead.
func (*UehistoryInformationFromTheUeExtIes) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{895}
}

func (x *UehistoryInformationFromTheUeExtIes) GetValue() *emptypb.Empty {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:8440
// {UEHistoryInformationFromTheUE}
type UehistoryInformationFromTheUe struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// choice from xnap_v1.asn1:8440
	//
	// Types that are assignable to UehistoryInformationFromTheUe:
	//	*UehistoryInformationFromTheUe_NR
	//	*UehistoryInformationFromTheUe_ChoiceExtension
	UehistoryInformationFromTheUe isUehistoryInformationFromTheUe_UehistoryInformationFromTheUe `protobuf_oneof:"uehistory_information_from_the_ue"`
}

func (x *UehistoryInformationFromTheUe) Reset() {
	*x = UehistoryInformationFromTheUe{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[896]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UehistoryInformationFromTheUe) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UehistoryInformationFromTheUe) ProtoMessage() {}

func (x *UehistoryInformationFromTheUe) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[896]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UehistoryInformationFromTheUe.ProtoReflect.Descriptor instead.
func (*UehistoryInformationFromTheUe) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{896}
}

func (m *UehistoryInformationFromTheUe) GetUehistoryInformationFromTheUe() isUehistoryInformationFromTheUe_UehistoryInformationFromTheUe {
	if m != nil {
		return m.UehistoryInformationFromTheUe
	}
	return nil
}

func (x *UehistoryInformationFromTheUe) GetNR() *NrmobilityHistoryReport {
	if x, ok := x.GetUehistoryInformationFromTheUe().(*UehistoryInformationFromTheUe_NR); ok {
		return x.NR
	}
	return nil
}

func (x *UehistoryInformationFromTheUe) GetChoiceExtension() *UehistoryInformationFromTheUeExtIes {
	if x, ok := x.GetUehistoryInformationFromTheUe().(*UehistoryInformationFromTheUe_ChoiceExtension); ok {
		return x.ChoiceExtension
	}
	return nil
}

type isUehistoryInformationFromTheUe_UehistoryInformationFromTheUe interface {
	isUehistoryInformationFromTheUe_UehistoryInformationFromTheUe()
}

type UehistoryInformationFromTheUe_NR struct {
	// @inject_tag: aper:"choiceIdx:1,"
	NR *NrmobilityHistoryReport `protobuf:"bytes,1,opt,name=n_r,json=nR,proto3,oneof" aper:"choiceIdx:1,"`
}

type UehistoryInformationFromTheUe_ChoiceExtension struct {
	// @inject_tag: aper:"choiceIdx:2,"
	ChoiceExtension *UehistoryInformationFromTheUeExtIes `protobuf:"bytes,2,opt,name=choice_extension,json=choice-extension,proto3,oneof" aper:"choiceIdx:2,"`
}

func (*UehistoryInformationFromTheUe_NR) isUehistoryInformationFromTheUe_UehistoryInformationFromTheUe() {
}

func (*UehistoryInformationFromTheUe_ChoiceExtension) isUehistoryInformationFromTheUe_UehistoryInformationFromTheUe() {
}

// value set from xnap_v1.asn1:8454
// {UEIdentityIndexValue-ExtIEs}
type UeidentityIndexValueExtIes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *emptypb.Empty `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *UeidentityIndexValueExtIes) Reset() {
	*x = UeidentityIndexValueExtIes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[897]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UeidentityIndexValueExtIes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UeidentityIndexValueExtIes) ProtoMessage() {}

func (x *UeidentityIndexValueExtIes) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[897]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UeidentityIndexValueExtIes.ProtoReflect.Descriptor instead.
func (*UeidentityIndexValueExtIes) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{897}
}

func (x *UeidentityIndexValueExtIes) GetValue() *emptypb.Empty {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:8450
// {UEIdentityIndexValue}
type UeidentityIndexValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// choice from xnap_v1.asn1:8450
	//
	// Types that are assignable to UeidentityIndexValue:
	//	*UeidentityIndexValue_IndexLength10
	//	*UeidentityIndexValue_ChoiceExtension
	UeidentityIndexValue isUeidentityIndexValue_UeidentityIndexValue `protobuf_oneof:"ueidentity_index_value"`
}

func (x *UeidentityIndexValue) Reset() {
	*x = UeidentityIndexValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[898]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UeidentityIndexValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UeidentityIndexValue) ProtoMessage() {}

func (x *UeidentityIndexValue) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[898]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UeidentityIndexValue.ProtoReflect.Descriptor instead.
func (*UeidentityIndexValue) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{898}
}

func (m *UeidentityIndexValue) GetUeidentityIndexValue() isUeidentityIndexValue_UeidentityIndexValue {
	if m != nil {
		return m.UeidentityIndexValue
	}
	return nil
}

func (x *UeidentityIndexValue) GetIndexLength10() *asn1.BitString {
	if x, ok := x.GetUeidentityIndexValue().(*UeidentityIndexValue_IndexLength10); ok {
		return x.IndexLength10
	}
	return nil
}

func (x *UeidentityIndexValue) GetChoiceExtension() *UeidentityIndexValueExtIes {
	if x, ok := x.GetUeidentityIndexValue().(*UeidentityIndexValue_ChoiceExtension); ok {
		return x.ChoiceExtension
	}
	return nil
}

type isUeidentityIndexValue_UeidentityIndexValue interface {
	isUeidentityIndexValue_UeidentityIndexValue()
}

type UeidentityIndexValue_IndexLength10 struct {
	// @inject_tag: aper:"choiceIdx:1,sizeLB:10,sizeUB:10,"
	IndexLength10 *asn1.BitString `protobuf:"bytes,1,opt,name=index_length10,json=indexLength10,proto3,oneof" aper:"choiceIdx:1,sizeLB:10,sizeUB:10,"`
}

type UeidentityIndexValue_ChoiceExtension struct {
	// @inject_tag: aper:"choiceIdx:2,"
	ChoiceExtension *UeidentityIndexValueExtIes `protobuf:"bytes,2,opt,name=choice_extension,json=choice-extension,proto3,oneof" aper:"choiceIdx:2,"`
}

func (*UeidentityIndexValue_IndexLength10) isUeidentityIndexValue_UeidentityIndexValue() {}

func (*UeidentityIndexValue_ChoiceExtension) isUeidentityIndexValue_UeidentityIndexValue() {}

// value set from xnap_v1.asn1:8465
// {UERadioCapabilityForPaging-ExtIEs}
type UeradioCapabilityForPagingExtIes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *emptypb.Empty `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *UeradioCapabilityForPagingExtIes) Reset() {
	*x = UeradioCapabilityForPagingExtIes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[899]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UeradioCapabilityForPagingExtIes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UeradioCapabilityForPagingExtIes) ProtoMessage() {}

func (x *UeradioCapabilityForPagingExtIes) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[899]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UeradioCapabilityForPagingExtIes.ProtoReflect.Descriptor instead.
func (*UeradioCapabilityForPagingExtIes) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{899}
}

func (x *UeradioCapabilityForPagingExtIes) GetValue() *emptypb.Empty {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:8459
// @inject_tag: aper:"valueExt"
// {UERadioCapabilityForPaging}
type UeradioCapabilityForPaging struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"optional,"
	UEradioCapabilityForPagingOfNr *UeradioCapabilityForPagingOfNr `protobuf:"bytes,1,opt,name=u_eradio_capability_for_paging_of_nr,json=uERadioCapabilityForPagingOfNR,proto3,oneof" json:"u_eradio_capability_for_paging_of_nr,omitempty" aper:"optional,"`
	// @inject_tag: aper:"optional,"
	UEradioCapabilityForPagingOfEutra *UeradioCapabilityForPagingOfEutra `protobuf:"bytes,2,opt,name=u_eradio_capability_for_paging_of_eutra,json=uERadioCapabilityForPagingOfEUTRA,proto3,oneof" json:"u_eradio_capability_for_paging_of_eutra,omitempty" aper:"optional,"`
	// @inject_tag: aper:"optional,sizeLB:1,"
	IEExtensions []*UeradioCapabilityForPagingExtIes `protobuf:"bytes,3,rep,name=i_e_extensions,json=iE-Extensions,proto3" json:"i_e_extensions,omitempty" aper:"optional,sizeLB:1,"`
}

func (x *UeradioCapabilityForPaging) Reset() {
	*x = UeradioCapabilityForPaging{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[900]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UeradioCapabilityForPaging) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UeradioCapabilityForPaging) ProtoMessage() {}

func (x *UeradioCapabilityForPaging) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[900]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UeradioCapabilityForPaging.ProtoReflect.Descriptor instead.
func (*UeradioCapabilityForPaging) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{900}
}

func (x *UeradioCapabilityForPaging) GetUEradioCapabilityForPagingOfNr() *UeradioCapabilityForPagingOfNr {
	if x != nil {
		return x.UEradioCapabilityForPagingOfNr
	}
	return nil
}

func (x *UeradioCapabilityForPaging) GetUEradioCapabilityForPagingOfEutra() *UeradioCapabilityForPagingOfEutra {
	if x != nil {
		return x.UEradioCapabilityForPagingOfEutra
	}
	return nil
}

func (x *UeradioCapabilityForPaging) GetIEExtensions() []*UeradioCapabilityForPagingExtIes {
	if x != nil {
		return x.IEExtensions
	}
	return nil
}

// range of Integer from xnap_v1.asn1:8469
// {UERadioCapabilityForPagingOfNR}
type UeradioCapabilityForPagingOfNr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value []byte `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *UeradioCapabilityForPagingOfNr) Reset() {
	*x = UeradioCapabilityForPagingOfNr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[901]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UeradioCapabilityForPagingOfNr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UeradioCapabilityForPagingOfNr) ProtoMessage() {}

func (x *UeradioCapabilityForPagingOfNr) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[901]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UeradioCapabilityForPagingOfNr.ProtoReflect.Descriptor instead.
func (*UeradioCapabilityForPagingOfNr) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{901}
}

func (x *UeradioCapabilityForPagingOfNr) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

// range of Integer from xnap_v1.asn1:8471
// {UERadioCapabilityForPagingOfEUTRA}
type UeradioCapabilityForPagingOfEutra struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value []byte `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *UeradioCapabilityForPagingOfEutra) Reset() {
	*x = UeradioCapabilityForPagingOfEutra{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[902]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UeradioCapabilityForPagingOfEutra) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UeradioCapabilityForPagingOfEutra) ProtoMessage() {}

func (x *UeradioCapabilityForPagingOfEutra) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[902]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UeradioCapabilityForPagingOfEutra.ProtoReflect.Descriptor instead.
func (*UeradioCapabilityForPagingOfEutra) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{902}
}

func (x *UeradioCapabilityForPagingOfEutra) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

// range of Integer from xnap_v1.asn1:8473
// {UERadioCapabilityID}
type UeradioCapabilityId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value []byte `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *UeradioCapabilityId) Reset() {
	*x = UeradioCapabilityId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[903]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UeradioCapabilityId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UeradioCapabilityId) ProtoMessage() {}

func (x *UeradioCapabilityId) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[903]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UeradioCapabilityId.ProtoReflect.Descriptor instead.
func (*UeradioCapabilityId) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{903}
}

func (x *UeradioCapabilityId) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

// value set from xnap_v1.asn1:8480
// {UERANPagingIdentity-ExtIEs}
type UeranpagingIdentityExtIes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *emptypb.Empty `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *UeranpagingIdentityExtIes) Reset() {
	*x = UeranpagingIdentityExtIes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[904]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UeranpagingIdentityExtIes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UeranpagingIdentityExtIes) ProtoMessage() {}

func (x *UeranpagingIdentityExtIes) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[904]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UeranpagingIdentityExtIes.ProtoReflect.Descriptor instead.
func (*UeranpagingIdentityExtIes) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{904}
}

func (x *UeranpagingIdentityExtIes) GetValue() *emptypb.Empty {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:8476
// {UERANPagingIdentity}
type UeranpagingIdentity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// choice from xnap_v1.asn1:8476
	//
	// Types that are assignable to UeranpagingIdentity:
	//	*UeranpagingIdentity_IRntiFull
	//	*UeranpagingIdentity_ChoiceExtension
	UeranpagingIdentity isUeranpagingIdentity_UeranpagingIdentity `protobuf_oneof:"ueranpaging_identity"`
}

func (x *UeranpagingIdentity) Reset() {
	*x = UeranpagingIdentity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[905]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UeranpagingIdentity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UeranpagingIdentity) ProtoMessage() {}

func (x *UeranpagingIdentity) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[905]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UeranpagingIdentity.ProtoReflect.Descriptor instead.
func (*UeranpagingIdentity) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{905}
}

func (m *UeranpagingIdentity) GetUeranpagingIdentity() isUeranpagingIdentity_UeranpagingIdentity {
	if m != nil {
		return m.UeranpagingIdentity
	}
	return nil
}

func (x *UeranpagingIdentity) GetIRntiFull() *asn1.BitString {
	if x, ok := x.GetUeranpagingIdentity().(*UeranpagingIdentity_IRntiFull); ok {
		return x.IRntiFull
	}
	return nil
}

func (x *UeranpagingIdentity) GetChoiceExtension() *UeranpagingIdentityExtIes {
	if x, ok := x.GetUeranpagingIdentity().(*UeranpagingIdentity_ChoiceExtension); ok {
		return x.ChoiceExtension
	}
	return nil
}

type isUeranpagingIdentity_UeranpagingIdentity interface {
	isUeranpagingIdentity_UeranpagingIdentity()
}

type UeranpagingIdentity_IRntiFull struct {
	// @inject_tag: aper:"choiceIdx:1,sizeLB:40,sizeUB:40,"
	IRntiFull *asn1.BitString `protobuf:"bytes,1,opt,name=i_rnti_full,json=i-RNTI-full,proto3,oneof" aper:"choiceIdx:1,sizeLB:40,sizeUB:40,"`
}

type UeranpagingIdentity_ChoiceExtension struct {
	// @inject_tag: aper:"choiceIdx:2,"
	ChoiceExtension *UeranpagingIdentityExtIes `protobuf:"bytes,2,opt,name=choice_extension,json=choice-extension,proto3,oneof" aper:"choiceIdx:2,"`
}

func (*UeranpagingIdentity_IRntiFull) isUeranpagingIdentity_UeranpagingIdentity() {}

func (*UeranpagingIdentity_ChoiceExtension) isUeranpagingIdentity_UeranpagingIdentity() {}

// value set from xnap_v1.asn1:8490
// {UERLFReportContainer-ExtIEs}
type UerlfreportContainerExtIes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *emptypb.Empty `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *UerlfreportContainerExtIes) Reset() {
	*x = UerlfreportContainerExtIes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[906]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UerlfreportContainerExtIes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UerlfreportContainerExtIes) ProtoMessage() {}

func (x *UerlfreportContainerExtIes) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[906]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UerlfreportContainerExtIes.ProtoReflect.Descriptor instead.
func (*UerlfreportContainerExtIes) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{906}
}

func (x *UerlfreportContainerExtIes) GetValue() *emptypb.Empty {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:8486
// {UERLFReportContainer}
type UerlfreportContainer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// choice from xnap_v1.asn1:8486
	//
	// Types that are assignable to UerlfreportContainer:
	//	*UerlfreportContainer_NRUerlfreportContainer
	//	*UerlfreportContainer_LTeUerlfreportContainer
	//	*UerlfreportContainer_ChoiceExtension
	UerlfreportContainer isUerlfreportContainer_UerlfreportContainer `protobuf_oneof:"uerlfreport_container"`
}

func (x *UerlfreportContainer) Reset() {
	*x = UerlfreportContainer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[907]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UerlfreportContainer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UerlfreportContainer) ProtoMessage() {}

func (x *UerlfreportContainer) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[907]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UerlfreportContainer.ProtoReflect.Descriptor instead.
func (*UerlfreportContainer) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{907}
}

func (m *UerlfreportContainer) GetUerlfreportContainer() isUerlfreportContainer_UerlfreportContainer {
	if m != nil {
		return m.UerlfreportContainer
	}
	return nil
}

func (x *UerlfreportContainer) GetNRUerlfreportContainer() *UerlfreportContainerNr {
	if x, ok := x.GetUerlfreportContainer().(*UerlfreportContainer_NRUerlfreportContainer); ok {
		return x.NRUerlfreportContainer
	}
	return nil
}

func (x *UerlfreportContainer) GetLTeUerlfreportContainer() *UerlfreportContainerLte {
	if x, ok := x.GetUerlfreportContainer().(*UerlfreportContainer_LTeUerlfreportContainer); ok {
		return x.LTeUerlfreportContainer
	}
	return nil
}

func (x *UerlfreportContainer) GetChoiceExtension() *UerlfreportContainerExtIes {
	if x, ok := x.GetUerlfreportContainer().(*UerlfreportContainer_ChoiceExtension); ok {
		return x.ChoiceExtension
	}
	return nil
}

type isUerlfreportContainer_UerlfreportContainer interface {
	isUerlfreportContainer_UerlfreportContainer()
}

type UerlfreportContainer_NRUerlfreportContainer struct {
	// @inject_tag: aper:"choiceIdx:1,"
	NRUerlfreportContainer *UerlfreportContainerNr `protobuf:"bytes,1,opt,name=n_r_uerlfreport_container,json=nR-UERLFReportContainer,proto3,oneof" aper:"choiceIdx:1,"`
}

type UerlfreportContainer_LTeUerlfreportContainer struct {
	// @inject_tag: aper:"choiceIdx:2,"
	LTeUerlfreportContainer *UerlfreportContainerLte `protobuf:"bytes,2,opt,name=l_te_uerlfreport_container,json=lTE-UERLFReportContainer,proto3,oneof" aper:"choiceIdx:2,"`
}

type UerlfreportContainer_ChoiceExtension struct {
	// @inject_tag: aper:"choiceIdx:3,"
	ChoiceExtension *UerlfreportContainerExtIes `protobuf:"bytes,3,opt,name=choice_extension,json=choice-Extension,proto3,oneof" aper:"choiceIdx:3,"`
}

func (*UerlfreportContainer_NRUerlfreportContainer) isUerlfreportContainer_UerlfreportContainer() {}

func (*UerlfreportContainer_LTeUerlfreportContainer) isUerlfreportContainer_UerlfreportContainer() {}

func (*UerlfreportContainer_ChoiceExtension) isUerlfreportContainer_UerlfreportContainer() {}

// range of Integer from xnap_v1.asn1:8494
// {UERLFReportContainerLTE}
type UerlfreportContainerLte struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value []byte `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *UerlfreportContainerLte) Reset() {
	*x = UerlfreportContainerLte{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[908]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UerlfreportContainerLte) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UerlfreportContainerLte) ProtoMessage() {}

func (x *UerlfreportContainerLte) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[908]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UerlfreportContainerLte.ProtoReflect.Descriptor instead.
func (*UerlfreportContainerLte) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{908}
}

func (x *UerlfreportContainerLte) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

// range of Integer from xnap_v1.asn1:8497
// {UERLFReportContainerNR}
type UerlfreportContainerNr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value []byte `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *UerlfreportContainerNr) Reset() {
	*x = UerlfreportContainerNr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[909]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UerlfreportContainerNr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UerlfreportContainerNr) ProtoMessage() {}

func (x *UerlfreportContainerNr) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[909]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UerlfreportContainerNr.ProtoReflect.Descriptor instead.
func (*UerlfreportContainerNr) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{909}
}

func (x *UerlfreportContainerNr) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

// value set from xnap_v1.asn1:8518
// {UESecurityCapabilities-ExtIEs}
type UesecurityCapabilitiesExtIes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *emptypb.Empty `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *UesecurityCapabilitiesExtIes) Reset() {
	*x = UesecurityCapabilitiesExtIes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[910]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UesecurityCapabilitiesExtIes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UesecurityCapabilitiesExtIes) ProtoMessage() {}

func (x *UesecurityCapabilitiesExtIes) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[910]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UesecurityCapabilitiesExtIes.ProtoReflect.Descriptor instead.
func (*UesecurityCapabilitiesExtIes) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{910}
}

func (x *UesecurityCapabilitiesExtIes) GetValue() *emptypb.Empty {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:8504
// @inject_tag: aper:"valueExt"
// {UESecurityCapabilities}
type UesecurityCapabilities struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"sizeExt,sizeLB:16,sizeUB:16,"
	NrEncyptionAlgorithms *asn1.BitString `protobuf:"bytes,1,opt,name=nr_encyption_algorithms,json=nr-EncyptionAlgorithms,proto3" json:"nr_encyption_algorithms,omitempty" aper:"sizeExt,sizeLB:16,sizeUB:16,"`
	// @inject_tag: aper:"sizeExt,sizeLB:16,sizeUB:16,"
	NrIntegrityProtectionAlgorithms *asn1.BitString `protobuf:"bytes,2,opt,name=nr_integrity_protection_algorithms,json=nr-IntegrityProtectionAlgorithms,proto3" json:"nr_integrity_protection_algorithms,omitempty" aper:"sizeExt,sizeLB:16,sizeUB:16,"`
	// @inject_tag: aper:"sizeExt,sizeLB:16,sizeUB:16,"
	EUtraEncyptionAlgorithms *asn1.BitString `protobuf:"bytes,3,opt,name=e_utra_encyption_algorithms,json=e-utra-EncyptionAlgorithms,proto3" json:"e_utra_encyption_algorithms,omitempty" aper:"sizeExt,sizeLB:16,sizeUB:16,"`
	// @inject_tag: aper:"sizeExt,sizeLB:16,sizeUB:16,"
	EUtraIntegrityProtectionAlgorithms *asn1.BitString `protobuf:"bytes,4,opt,name=e_utra_integrity_protection_algorithms,json=e-utra-IntegrityProtectionAlgorithms,proto3" json:"e_utra_integrity_protection_algorithms,omitempty" aper:"sizeExt,sizeLB:16,sizeUB:16,"`
	// @inject_tag: aper:"optional,sizeLB:1,"
	IEExtension []*UesecurityCapabilitiesExtIes `protobuf:"bytes,5,rep,name=i_e_extension,json=iE-Extension,proto3" json:"i_e_extension,omitempty" aper:"optional,sizeLB:1,"`
}

func (x *UesecurityCapabilities) Reset() {
	*x = UesecurityCapabilities{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[911]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UesecurityCapabilities) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UesecurityCapabilities) ProtoMessage() {}

func (x *UesecurityCapabilities) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[911]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UesecurityCapabilities.ProtoReflect.Descriptor instead.
func (*UesecurityCapabilities) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{911}
}

func (x *UesecurityCapabilities) GetNrEncyptionAlgorithms() *asn1.BitString {
	if x != nil {
		return x.NrEncyptionAlgorithms
	}
	return nil
}

func (x *UesecurityCapabilities) GetNrIntegrityProtectionAlgorithms() *asn1.BitString {
	if x != nil {
		return x.NrIntegrityProtectionAlgorithms
	}
	return nil
}

func (x *UesecurityCapabilities) GetEUtraEncyptionAlgorithms() *asn1.BitString {
	if x != nil {
		return x.EUtraEncyptionAlgorithms
	}
	return nil
}

func (x *UesecurityCapabilities) GetEUtraIntegrityProtectionAlgorithms() *asn1.BitString {
	if x != nil {
		return x.EUtraIntegrityProtectionAlgorithms
	}
	return nil
}

func (x *UesecurityCapabilities) GetIEExtension() []*UesecurityCapabilitiesExtIes {
	if x != nil {
		return x.IEExtension
	}
	return nil
}

// value set from xnap_v1.asn1:8536
// {ULConfiguration-ExtIEs}
type UlconfigurationExtIes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *emptypb.Empty `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *UlconfigurationExtIes) Reset() {
	*x = UlconfigurationExtIes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[912]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UlconfigurationExtIes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UlconfigurationExtIes) ProtoMessage() {}

func (x *UlconfigurationExtIes) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[912]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UlconfigurationExtIes.ProtoReflect.Descriptor instead.
func (*UlconfigurationExtIes) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{912}
}

func (x *UlconfigurationExtIes) GetValue() *emptypb.Empty {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:8531
// @inject_tag: aper:"valueExt"
// {ULConfiguration}
type Ulconfiguration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"valueExt,valueLB:0,valueUB:2,"
	ULPdcp UlUEConfiguration `protobuf:"varint,1,opt,name=u_l_pdcp,json=uL-PDCP,proto3,enum=xnap.v1.UlUEConfiguration" json:"u_l_pdcp,omitempty" aper:"valueExt,valueLB:0,valueUB:2,"`
	// @inject_tag: aper:"optional,sizeLB:1,"
	IEExtensions []*UlconfigurationExtIes `protobuf:"bytes,2,rep,name=i_e_extensions,json=iE-Extensions,proto3" json:"i_e_extensions,omitempty" aper:"optional,sizeLB:1,"`
}

func (x *Ulconfiguration) Reset() {
	*x = Ulconfiguration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[913]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ulconfiguration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ulconfiguration) ProtoMessage() {}

func (x *Ulconfiguration) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[913]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ulconfiguration.ProtoReflect.Descriptor instead.
func (*Ulconfiguration) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{913}
}

func (x *Ulconfiguration) GetULPdcp() UlUEConfiguration {
	if x != nil {
		return x.ULPdcp
	}
	return UlUEConfiguration_UL_UE_CONFIGURATION_NO_DATA
}

func (x *Ulconfiguration) GetIEExtensions() []*UlconfigurationExtIes {
	if x != nil {
		return x.IEExtensions
	}
	return nil
}

// range of Integer from xnap_v1.asn1:8547
// {UL-GBR-PRB-usage}
type UlGBrPRbusage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"valueLB:0,valueUB:100,"
	Value int32 `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty" aper:"valueLB:0,valueUB:100,"`
}

func (x *UlGBrPRbusage) Reset() {
	*x = UlGBrPRbusage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[914]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UlGBrPRbusage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UlGBrPRbusage) ProtoMessage() {}

func (x *UlGBrPRbusage) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[914]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UlGBrPRbusage.ProtoReflect.Descriptor instead.
func (*UlGBrPRbusage) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{914}
}

func (x *UlGBrPRbusage) GetValue() int32 {
	if x != nil {
		return x.Value
	}
	return 0
}

// range of Integer from xnap_v1.asn1:8550
// {UL-non-GBR-PRB-usage}
type UlnonGBrPRbusage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"valueLB:0,valueUB:100,"
	Value int32 `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty" aper:"valueLB:0,valueUB:100,"`
}

func (x *UlnonGBrPRbusage) Reset() {
	*x = UlnonGBrPRbusage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[915]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UlnonGBrPRbusage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UlnonGBrPRbusage) ProtoMessage() {}

func (x *UlnonGBrPRbusage) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[915]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UlnonGBrPRbusage.ProtoReflect.Descriptor instead.
func (*UlnonGBrPRbusage) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{915}
}

func (x *UlnonGBrPRbusage) GetValue() int32 {
	if x != nil {
		return x.Value
	}
	return 0
}

// range of Integer from xnap_v1.asn1:8553
// {UL-Total-PRB-usage}
type UlTotalPRbusage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"valueLB:0,valueUB:100,"
	Value int32 `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty" aper:"valueLB:0,valueUB:100,"`
}

func (x *UlTotalPRbusage) Reset() {
	*x = UlTotalPRbusage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[916]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UlTotalPRbusage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UlTotalPRbusage) ProtoMessage() {}

func (x *UlTotalPRbusage) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[916]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UlTotalPRbusage.ProtoReflect.Descriptor instead.
func (*UlTotalPRbusage) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{916}
}

func (x *UlTotalPRbusage) GetValue() int32 {
	if x != nil {
		return x.Value
	}
	return 0
}

// value set from xnap_v1.asn1:8561
// {UPTransportLayerInformation-ExtIEs}
type UptransportLayerInformationExtIes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *emptypb.Empty `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *UptransportLayerInformationExtIes) Reset() {
	*x = UptransportLayerInformationExtIes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[917]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UptransportLayerInformationExtIes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UptransportLayerInformationExtIes) ProtoMessage() {}

func (x *UptransportLayerInformationExtIes) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[917]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UptransportLayerInformationExtIes.ProtoReflect.Descriptor instead.
func (*UptransportLayerInformationExtIes) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{917}
}

func (x *UptransportLayerInformationExtIes) GetValue() *emptypb.Empty {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:8557
// {UPTransportLayerInformation}
type UptransportLayerInformation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// choice from xnap_v1.asn1:8557
	//
	// Types that are assignable to UptransportLayerInformation:
	//	*UptransportLayerInformation_GtpTunnel
	//	*UptransportLayerInformation_ChoiceExtension
	UptransportLayerInformation isUptransportLayerInformation_UptransportLayerInformation `protobuf_oneof:"uptransport_layer_information"`
}

func (x *UptransportLayerInformation) Reset() {
	*x = UptransportLayerInformation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[918]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UptransportLayerInformation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UptransportLayerInformation) ProtoMessage() {}

func (x *UptransportLayerInformation) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[918]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UptransportLayerInformation.ProtoReflect.Descriptor instead.
func (*UptransportLayerInformation) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{918}
}

func (m *UptransportLayerInformation) GetUptransportLayerInformation() isUptransportLayerInformation_UptransportLayerInformation {
	if m != nil {
		return m.UptransportLayerInformation
	}
	return nil
}

func (x *UptransportLayerInformation) GetGtpTunnel() *GtptunnelTransportLayerInformation {
	if x, ok := x.GetUptransportLayerInformation().(*UptransportLayerInformation_GtpTunnel); ok {
		return x.GtpTunnel
	}
	return nil
}

func (x *UptransportLayerInformation) GetChoiceExtension() *UptransportLayerInformationExtIes {
	if x, ok := x.GetUptransportLayerInformation().(*UptransportLayerInformation_ChoiceExtension); ok {
		return x.ChoiceExtension
	}
	return nil
}

type isUptransportLayerInformation_UptransportLayerInformation interface {
	isUptransportLayerInformation_UptransportLayerInformation()
}

type UptransportLayerInformation_GtpTunnel struct {
	// @inject_tag: aper:"choiceIdx:1,valueExt,"
	GtpTunnel *GtptunnelTransportLayerInformation `protobuf:"bytes,1,opt,name=gtp_tunnel,json=gtpTunnel,proto3,oneof" aper:"choiceIdx:1,valueExt,"`
}

type UptransportLayerInformation_ChoiceExtension struct {
	// @inject_tag: aper:"choiceIdx:2,"
	ChoiceExtension *UptransportLayerInformationExtIes `protobuf:"bytes,2,opt,name=choice_extension,json=choice-extension,proto3,oneof" aper:"choiceIdx:2,"`
}

func (*UptransportLayerInformation_GtpTunnel) isUptransportLayerInformation_UptransportLayerInformation() {
}

func (*UptransportLayerInformation_ChoiceExtension) isUptransportLayerInformation_UptransportLayerInformation() {
}

// sequence from xnap_v1.asn1:8568
// {UPTransportParameters}
type UptransportParameters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"valueExt,sizeLB:1,sizeUB:4,"
	Value []*UptransportParametersItem `protobuf:"bytes,1,rep,name=value,proto3" json:"value,omitempty" aper:"valueExt,sizeLB:1,sizeUB:4,"`
}

func (x *UptransportParameters) Reset() {
	*x = UptransportParameters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[919]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UptransportParameters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UptransportParameters) ProtoMessage() {}

func (x *UptransportParameters) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[919]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UptransportParameters.ProtoReflect.Descriptor instead.
func (*UptransportParameters) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{919}
}

func (x *UptransportParameters) GetValue() []*UptransportParametersItem {
	if x != nil {
		return x.Value
	}
	return nil
}

// value set from xnap_v1.asn1:8575
// {UPTransportParametersItem-ExtIEs}
type UptransportParametersItemExtIes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *emptypb.Empty `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *UptransportParametersItemExtIes) Reset() {
	*x = UptransportParametersItemExtIes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[920]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UptransportParametersItemExtIes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UptransportParametersItemExtIes) ProtoMessage() {}

func (x *UptransportParametersItemExtIes) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[920]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UptransportParametersItemExtIes.ProtoReflect.Descriptor instead.
func (*UptransportParametersItemExtIes) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{920}
}

func (x *UptransportParametersItemExtIes) GetValue() *emptypb.Empty {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:8569
// @inject_tag: aper:"valueExt"
// {UPTransportParametersItem}
type UptransportParametersItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UpTnlinfo   *UptransportLayerInformation `protobuf:"bytes,1,opt,name=up_tnlinfo,json=upTNLInfo,proto3" json:"up_tnlinfo,omitempty"`
	CellGroupId *CellGroupId                 `protobuf:"bytes,2,opt,name=cell_group_id,json=cellGroupID,proto3" json:"cell_group_id,omitempty"`
	// @inject_tag: aper:"optional,sizeLB:1,"
	IEExtension []*UptransportParametersItemExtIes `protobuf:"bytes,3,rep,name=i_e_extension,json=iE-Extension,proto3" json:"i_e_extension,omitempty" aper:"optional,sizeLB:1,"`
}

func (x *UptransportParametersItem) Reset() {
	*x = UptransportParametersItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[921]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UptransportParametersItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UptransportParametersItem) ProtoMessage() {}

func (x *UptransportParametersItem) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[921]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UptransportParametersItem.ProtoReflect.Descriptor instead.
func (*UptransportParametersItem) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{921}
}

func (x *UptransportParametersItem) GetUpTnlinfo() *UptransportLayerInformation {
	if x != nil {
		return x.UpTnlinfo
	}
	return nil
}

func (x *UptransportParametersItem) GetCellGroupId() *CellGroupId {
	if x != nil {
		return x.CellGroupId
	}
	return nil
}

func (x *UptransportParametersItem) GetIEExtension() []*UptransportParametersItemExtIes {
	if x != nil {
		return x.IEExtension
	}
	return nil
}

// range of Integer from xnap_v1.asn1:8583
// {URIaddress}
type Uriaddress struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value int32 `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *Uriaddress) Reset() {
	*x = Uriaddress{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[922]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Uriaddress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Uriaddress) ProtoMessage() {}

func (x *Uriaddress) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[922]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Uriaddress.ProtoReflect.Descriptor instead.
func (*Uriaddress) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{922}
}

func (x *Uriaddress) GetValue() int32 {
	if x != nil {
		return x.Value
	}
	return 0
}

// sequence from xnap_v1.asn1:8595
// {VolumeTimedReportList}
type VolumeTimedReportList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"valueExt,sizeLB:1,sizeUB:2,"
	Value []*VolumeTimedReportItem `protobuf:"bytes,1,rep,name=value,proto3" json:"value,omitempty" aper:"valueExt,sizeLB:1,sizeUB:2,"`
}

func (x *VolumeTimedReportList) Reset() {
	*x = VolumeTimedReportList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[923]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VolumeTimedReportList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VolumeTimedReportList) ProtoMessage() {}

func (x *VolumeTimedReportList) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[923]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VolumeTimedReportList.ProtoReflect.Descriptor instead.
func (*VolumeTimedReportList) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{923}
}

func (x *VolumeTimedReportList) GetValue() []*VolumeTimedReportItem {
	if x != nil {
		return x.Value
	}
	return nil
}

// value set from xnap_v1.asn1:8604
// {VolumeTimedReport-Item-ExtIEs}
type VolumeTimedReportItemExtIes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *emptypb.Empty `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *VolumeTimedReportItemExtIes) Reset() {
	*x = VolumeTimedReportItemExtIes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[924]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VolumeTimedReportItemExtIes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VolumeTimedReportItemExtIes) ProtoMessage() {}

func (x *VolumeTimedReportItemExtIes) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[924]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VolumeTimedReportItemExtIes.ProtoReflect.Descriptor instead.
func (*VolumeTimedReportItemExtIes) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{924}
}

func (x *VolumeTimedReportItemExtIes) GetValue() *emptypb.Empty {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:8596
// @inject_tag: aper:"valueExt"
// {VolumeTimedReport-Item}
type VolumeTimedReportItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"sizeLB:4,sizeUB:4,"
	StartTimeStamp []byte `protobuf:"bytes,1,opt,name=start_time_stamp,json=startTimeStamp,proto3" json:"start_time_stamp,omitempty" aper:"sizeLB:4,sizeUB:4,"`
	// @inject_tag: aper:"sizeLB:4,sizeUB:4,"
	EndTimeStamp []byte `protobuf:"bytes,2,opt,name=end_time_stamp,json=endTimeStamp,proto3" json:"end_time_stamp,omitempty" aper:"sizeLB:4,sizeUB:4,"`
	// @inject_tag: aper:"valueLB:0,"
	UsageCountUl int32 `protobuf:"varint,3,opt,name=usage_count_ul,json=usageCountUL,proto3" json:"usage_count_ul,omitempty" aper:"valueLB:0,"`
	// @inject_tag: aper:"valueLB:0,"
	UsageCountDl int32 `protobuf:"varint,4,opt,name=usage_count_dl,json=usageCountDL,proto3" json:"usage_count_dl,omitempty" aper:"valueLB:0,"`
	// @inject_tag: aper:"optional,sizeLB:1,"
	IEExtensions []*VolumeTimedReportItemExtIes `protobuf:"bytes,5,rep,name=i_e_extensions,json=iE-Extensions,proto3" json:"i_e_extensions,omitempty" aper:"optional,sizeLB:1,"`
}

func (x *VolumeTimedReportItem) Reset() {
	*x = VolumeTimedReportItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[925]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VolumeTimedReportItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VolumeTimedReportItem) ProtoMessage() {}

func (x *VolumeTimedReportItem) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[925]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VolumeTimedReportItem.ProtoReflect.Descriptor instead.
func (*VolumeTimedReportItem) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{925}
}

func (x *VolumeTimedReportItem) GetStartTimeStamp() []byte {
	if x != nil {
		return x.StartTimeStamp
	}
	return nil
}

func (x *VolumeTimedReportItem) GetEndTimeStamp() []byte {
	if x != nil {
		return x.EndTimeStamp
	}
	return nil
}

func (x *VolumeTimedReportItem) GetUsageCountUl() int32 {
	if x != nil {
		return x.UsageCountUl
	}
	return 0
}

func (x *VolumeTimedReportItem) GetUsageCountDl() int32 {
	if x != nil {
		return x.UsageCountDl
	}
	return 0
}

func (x *VolumeTimedReportItem) GetIEExtensions() []*VolumeTimedReportItemExtIes {
	if x != nil {
		return x.IEExtensions
	}
	return nil
}

// value set from xnap_v1.asn1:8619
// {WLANMeasurementConfiguration-ExtIEs}
type WlanmeasurementConfigurationExtIes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *emptypb.Empty `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *WlanmeasurementConfigurationExtIes) Reset() {
	*x = WlanmeasurementConfigurationExtIes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[926]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WlanmeasurementConfigurationExtIes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WlanmeasurementConfigurationExtIes) ProtoMessage() {}

func (x *WlanmeasurementConfigurationExtIes) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[926]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WlanmeasurementConfigurationExtIes.ProtoReflect.Descriptor instead.
func (*WlanmeasurementConfigurationExtIes) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{926}
}

func (x *WlanmeasurementConfigurationExtIes) GetValue() *emptypb.Empty {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from xnap_v1.asn1:8611
// @inject_tag: aper:"valueExt"
// {WLANMeasurementConfiguration}
type WlanmeasurementConfiguration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"valueExt,valueLB:0,valueUB:0,"
	WlanMeasConfig WlanmeasConfig `protobuf:"varint,1,opt,name=wlan_meas_config,json=wlanMeasConfig,proto3,enum=xnap.v1.WlanmeasConfig" json:"wlan_meas_config,omitempty" aper:"valueExt,valueLB:0,valueUB:0,"`
	// @inject_tag: aper:"optional,"
	WlanMeasConfigNameList *WlanmeasConfigNameList `protobuf:"bytes,2,opt,name=wlan_meas_config_name_list,json=wlanMeasConfigNameList,proto3,oneof" json:"wlan_meas_config_name_list,omitempty" aper:"optional,"`
	// @inject_tag: aper:"optional,valueExt,valueLB:0,valueUB:0,"
	WlanRssi *WlanrssiWlanmeasurementConfiguration `protobuf:"varint,3,opt,name=wlan_rssi,json=wlan-rssi,proto3,enum=xnap.v1.WlanrssiWlanmeasurementConfiguration,oneof" json:"wlan_rssi,omitempty" aper:"optional,valueExt,valueLB:0,valueUB:0,"`
	// @inject_tag: aper:"optional,valueExt,valueLB:0,valueUB:0,"
	WlanRtt *WlanrttWlanmeasurementConfiguration `protobuf:"varint,4,opt,name=wlan_rtt,json=wlan-rtt,proto3,enum=xnap.v1.WlanrttWlanmeasurementConfiguration,oneof" json:"wlan_rtt,omitempty" aper:"optional,valueExt,valueLB:0,valueUB:0,"`
	// @inject_tag: aper:"optional,sizeLB:1,"
	IEExtensions []*WlanmeasurementConfigurationExtIes `protobuf:"bytes,5,rep,name=i_e_extensions,json=iE-Extensions,proto3" json:"i_e_extensions,omitempty" aper:"optional,sizeLB:1,"`
}

func (x *WlanmeasurementConfiguration) Reset() {
	*x = WlanmeasurementConfiguration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[927]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WlanmeasurementConfiguration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WlanmeasurementConfiguration) ProtoMessage() {}

func (x *WlanmeasurementConfiguration) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[927]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WlanmeasurementConfiguration.ProtoReflect.Descriptor instead.
func (*WlanmeasurementConfiguration) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{927}
}

func (x *WlanmeasurementConfiguration) GetWlanMeasConfig() WlanmeasConfig {
	if x != nil {
		return x.WlanMeasConfig
	}
	return WlanmeasConfig_WLANMEAS_CONFIG_SETUP
}

func (x *WlanmeasurementConfiguration) GetWlanMeasConfigNameList() *WlanmeasConfigNameList {
	if x != nil {
		return x.WlanMeasConfigNameList
	}
	return nil
}

func (x *WlanmeasurementConfiguration) GetWlanRssi() WlanrssiWlanmeasurementConfiguration {
	if x != nil && x.WlanRssi != nil {
		return *x.WlanRssi
	}
	return WlanrssiWlanmeasurementConfiguration_WLANRSSI_WLANMEASUREMENT_CONFIGURATION_TRUE
}

func (x *WlanmeasurementConfiguration) GetWlanRtt() WlanrttWlanmeasurementConfiguration {
	if x != nil && x.WlanRtt != nil {
		return *x.WlanRtt
	}
	return WlanrttWlanmeasurementConfiguration_WLANRTT_WLANMEASUREMENT_CONFIGURATION_TRUE
}

func (x *WlanmeasurementConfiguration) GetIEExtensions() []*WlanmeasurementConfigurationExtIes {
	if x != nil {
		return x.IEExtensions
	}
	return nil
}

// sequence from xnap_v1.asn1:8625
// {WLANMeasConfigNameList}
type WlanmeasConfigNameList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"sizeLB:1,sizeUB:4,"
	Value []*Wlanname `protobuf:"bytes,1,rep,name=value,proto3" json:"value,omitempty" aper:"sizeLB:1,sizeUB:4,"`
}

func (x *WlanmeasConfigNameList) Reset() {
	*x = WlanmeasConfigNameList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[928]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WlanmeasConfigNameList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WlanmeasConfigNameList) ProtoMessage() {}

func (x *WlanmeasConfigNameList) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[928]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WlanmeasConfigNameList.ProtoReflect.Descriptor instead.
func (*WlanmeasConfigNameList) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{928}
}

func (x *WlanmeasConfigNameList) GetValue() []*Wlanname {
	if x != nil {
		return x.Value
	}
	return nil
}

// range of Integer from xnap_v1.asn1:8627
// {WLANName}
type Wlanname struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"sizeLB:1,sizeUB:32,"
	Value []byte `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty" aper:"sizeLB:1,sizeUB:32,"`
}

func (x *Wlanname) Reset() {
	*x = Wlanname{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[929]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Wlanname) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Wlanname) ProtoMessage() {}

func (x *Wlanname) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[929]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Wlanname.ProtoReflect.Descriptor instead.
func (*Wlanname) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{929}
}

func (x *Wlanname) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

// range of Integer from xnap_v1.asn1:8632
// {XnBenefitValue}
type XnBenefitValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"valueExt,valueLB:1,valueUB:8,"
	Value int32 `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty" aper:"valueExt,valueLB:1,valueUB:8,"`
}

func (x *XnBenefitValue) Reset() {
	*x = XnBenefitValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[930]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *XnBenefitValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*XnBenefitValue) ProtoMessage() {}

func (x *XnBenefitValue) ProtoReflect() protoreflect.Message {
	mi := &file_api_xnap_v1_xnap_ies_proto_msgTypes[930]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use XnBenefitValue.ProtoReflect.Descriptor instead.
func (*XnBenefitValue) Descriptor() ([]byte, []int) {
	return file_api_xnap_v1_xnap_ies_proto_rawDescGZIP(), []int{930}
}

func (x *XnBenefitValue) GetValue() int32 {
	if x != nil {
		return x.Value
	}
	return 0
}

var File_api_xnap_v1_xnap_ies_proto protoreflect.FileDescriptor

var file_api_xnap_v1_xnap_ies_proto_rawDesc = []byte{
	0x0a, 0x1a, 0x61, 0x70, 0x69, 0x2f, 0x78, 0x6e, 0x61, 0x70, 0x2f, 0x76, 0x31, 0x2f, 0x78, 0x6e,
	0x61, 0x70, 0x5f, 0x69, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x07, 0x78, 0x6e,
	0x61, 0x70, 0x2e, 0x76, 0x31, 0x1a, 0x1c, 0x78, 0x6e, 0x61, 0x70, 0x2f, 0x76, 0x31, 0x2f, 0x78,
	0x6e, 0x61, 0x70, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x22, 0x78, 0x6e, 0x61, 0x70, 0x2f, 0x76, 0x31, 0x2f, 0x78, 0x6e, 0x61,
	0x70, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x64, 0x61, 0x74, 0x61, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x78, 0x6e, 0x61, 0x70, 0x2f, 0x76, 0x31,
	0x2f, 0x78, 0x6e, 0x61, 0x70, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1a, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65,
	0x2f, 0x76, 0x31, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x12, 0x61, 0x73, 0x6e, 0x31, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x73, 0x6e, 0x31,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0x6f, 0x0a, 0x20, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61,
	0x6c, 0x50, 0x44, 0x63, 0x70, 0x44, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x4e, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x4b, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31,
	0x2e, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x50, 0x44, 0x63, 0x70, 0x44,
	0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x4e, 0x6c, 0x49, 0x74, 0x65,
	0x6d, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x92, 0x01, 0x04, 0x08, 0x01, 0x10, 0x02, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x22, 0x52, 0x0a, 0x22, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x61, 0x6c, 0x50, 0x44, 0x63, 0x70, 0x44, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x4e, 0x6c, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x85, 0x02, 0x0a, 0x20, 0x41, 0x64, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x50, 0x44, 0x63, 0x70, 0x44, 0x75, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x4e, 0x6c, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x8c, 0x01,
	0x0a, 0x2e, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x70, 0x64, 0x63,
	0x70, 0x5f, 0x64, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x75, 0x70,
	0x5f, 0x74, 0x6e, 0x6c, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31,
	0x2e, 0x55, 0x70, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x4c, 0x61, 0x79, 0x65,
	0x72, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x2e, 0x61, 0x64,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x2d, 0x50, 0x44, 0x43, 0x50, 0x2d, 0x44, 0x75,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x55, 0x50, 0x2d, 0x54, 0x4e, 0x4c,
	0x2d, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x52, 0x0a, 0x0e,
	0x69, 0x5f, 0x65, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x41,
	0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x50, 0x44, 0x63, 0x70, 0x44, 0x75, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x4e, 0x6c, 0x45, 0x78, 0x74, 0x49, 0x65,
	0x73, 0x52, 0x0d, 0x69, 0x45, 0x2d, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x22, 0x51, 0x0a, 0x21, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x55, 0x4c,
	0x4e, 0x47, 0x55, 0x54, 0x4e, 0x6c, 0x61, 0x74, 0x55, 0x70, 0x66, 0x49, 0x74, 0x65, 0x6d, 0x45,
	0x78, 0x74, 0x49, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x22, 0xd9, 0x01, 0x0a, 0x1b, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x61, 0x6c, 0x55, 0x4c, 0x4e, 0x47, 0x55, 0x54, 0x4e, 0x6c, 0x61, 0x74, 0x55, 0x70, 0x66, 0x49,
	0x74, 0x65, 0x6d, 0x12, 0x67, 0x0a, 0x1c, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61,
	0x6c, 0x5f, 0x75, 0x6c, 0x5f, 0x6e, 0x67, 0x5f, 0x75, 0x5f, 0x74, 0x6e, 0x6c, 0x61, 0x74, 0x5f,
	0x75, 0x70, 0x66, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x78, 0x6e, 0x61, 0x70,
	0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x4c,
	0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x1b, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x2d, 0x55, 0x4c, 0x2d, 0x4e,
	0x47, 0x2d, 0x55, 0x2d, 0x54, 0x4e, 0x4c, 0x61, 0x74, 0x55, 0x50, 0x46, 0x12, 0x51, 0x0a, 0x0e,
	0x69, 0x5f, 0x65, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x41,
	0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x55, 0x4c, 0x4e, 0x47, 0x55, 0x54, 0x4e,
	0x6c, 0x61, 0x74, 0x55, 0x70, 0x66, 0x49, 0x74, 0x65, 0x6d, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73,
	0x52, 0x0d, 0x69, 0x45, 0x2d, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x22,
	0x65, 0x0a, 0x1b, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x55, 0x4c, 0x4e,
	0x47, 0x55, 0x54, 0x4e, 0x6c, 0x61, 0x74, 0x55, 0x70, 0x66, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x46,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e,
	0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x61, 0x6c, 0x55, 0x4c, 0x4e, 0x47, 0x55, 0x54, 0x4e, 0x6c, 0x61, 0x74, 0x55, 0x70, 0x66, 0x49,
	0x74, 0x65, 0x6d, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x92, 0x01, 0x04, 0x08, 0x01, 0x10, 0x03, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x41, 0x0a, 0x1d, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x66, 0x6f, 0x72, 0x43, 0x65, 0x6c, 0x6c, 0x41, 0x63, 0x74,
	0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x1a, 0x05, 0x18, 0xff, 0x01,
	0x28, 0x00, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x54, 0x0a, 0x24, 0x41, 0x6c, 0x6c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x74, 0x65, 0x6e, 0x74,
	0x69, 0x6f, 0x6e, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x45, 0x78, 0x74, 0x49, 0x65,
	0x73, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22,
	0x90, 0x03, 0x0a, 0x1e, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6e,
	0x64, 0x52, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69,
	0x74, 0x79, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x6c,
	0x65, 0x76, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x70, 0x72, 0x69, 0x6f,
	0x72, 0x69, 0x74, 0x79, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x73, 0x0a, 0x16, 0x70, 0x72, 0x65,
	0x5f, 0x65, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3b, 0x2e, 0x78, 0x6e, 0x61, 0x70,
	0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x65, 0x65, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x63, 0x61,
	0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72,
	0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x52, 0x16, 0x70, 0x72, 0x65, 0x2d, 0x65, 0x6d, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x2d, 0x63, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x7c,
	0x0a, 0x19, 0x70, 0x72, 0x65, 0x5f, 0x65, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x76, 0x75,
	0x6c, 0x6e, 0x65, 0x72, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x3e, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x65, 0x65,
	0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x76, 0x75, 0x6c, 0x6e, 0x65, 0x72, 0x61, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6e, 0x64,
	0x52, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74,
	0x79, 0x52, 0x19, 0x70, 0x72, 0x65, 0x2d, 0x65, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x76,
	0x75, 0x6c, 0x6e, 0x65, 0x72, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x54, 0x0a, 0x0e,
	0x69, 0x5f, 0x65, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x41,
	0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x74, 0x65,
	0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x45, 0x78, 0x74,
	0x49, 0x65, 0x73, 0x52, 0x0d, 0x69, 0x45, 0x2d, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x22, 0x31, 0x0a, 0x0d, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x66, 0x6e, 0x12, 0x20, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x1a, 0x05, 0x18, 0xff, 0x07, 0x28, 0x00, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x54, 0x0a, 0x17, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64,
	0x43, 0x61, 0x67, 0x49, 0x44, 0x4c, 0x69, 0x73, 0x74, 0x70, 0x65, 0x72, 0x50, 0x6c, 0x6d, 0x6e,
	0x12, 0x39, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x61, 0x67, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x42, 0x0b, 0xfa, 0x42, 0x08, 0x92, 0x01, 0x05, 0x08,
	0x01, 0x10, 0x80, 0x02, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x55, 0x0a, 0x13, 0x41,
	0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x50, 0x6e, 0x69, 0x4e, 0x50, 0x6e, 0x49, 0x44, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x3e, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x6c, 0x6c, 0x6f,
	0x77, 0x65, 0x64, 0x50, 0x6e, 0x69, 0x4e, 0x50, 0x6e, 0x49, 0x44, 0x49, 0x74, 0x65, 0x6d, 0x42,
	0x0a, 0xfa, 0x42, 0x07, 0x92, 0x01, 0x04, 0x08, 0x01, 0x10, 0x10, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x22, 0x49, 0x0a, 0x19, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x50, 0x6e, 0x69,
	0x4e, 0x50, 0x6e, 0x49, 0x44, 0x49, 0x74, 0x65, 0x6d, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x12,
	0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xe5, 0x02,
	0x0a, 0x13, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x50, 0x6e, 0x69, 0x4e, 0x50, 0x6e, 0x49,
	0x44, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x2f, 0x0a, 0x07, 0x70, 0x6c, 0x6d, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31,
	0x2e, 0x50, 0x6c, 0x6d, 0x6e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x07, 0x70,
	0x6c, 0x6d, 0x6e, 0x2d, 0x69, 0x64, 0x12, 0x6c, 0x0a, 0x1e, 0x70, 0x6e, 0x69, 0x5f, 0x6e, 0x70,
	0x6e, 0x5f, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24,
	0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6e, 0x69, 0x4e, 0x50, 0x6e, 0x52,
	0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x65, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x1e, 0x70, 0x6e, 0x69, 0x2d, 0x6e, 0x70, 0x6e, 0x2d, 0x72, 0x65,
	0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x65, 0x64, 0x2d, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x64, 0x0a, 0x1c, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x5f,
	0x63, 0x61, 0x67, 0x5f, 0x69, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x70, 0x65, 0x72, 0x5f,
	0x70, 0x6c, 0x6d, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x78, 0x6e, 0x61,
	0x70, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x43, 0x61, 0x67, 0x49,
	0x44, 0x4c, 0x69, 0x73, 0x74, 0x70, 0x65, 0x72, 0x50, 0x6c, 0x6d, 0x6e, 0x52, 0x1c, 0x61, 0x6c,
	0x6c, 0x6f, 0x77, 0x65, 0x64, 0x2d, 0x43, 0x41, 0x47, 0x2d, 0x69, 0x64, 0x2d, 0x6c, 0x69, 0x73,
	0x74, 0x2d, 0x70, 0x65, 0x72, 0x2d, 0x70, 0x6c, 0x6d, 0x6e, 0x12, 0x49, 0x0a, 0x0e, 0x69, 0x5f,
	0x65, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x6c, 0x6c,
	0x6f, 0x77, 0x65, 0x64, 0x50, 0x6e, 0x69, 0x4e, 0x50, 0x6e, 0x49, 0x44, 0x49, 0x74, 0x65, 0x6d,
	0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x52, 0x0d, 0x69, 0x45, 0x2d, 0x45, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x61, 0x0a, 0x19, 0x41, 0x6c, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x74, 0x69, 0x76, 0x65, 0x51, 0x6f, 0x53, 0x70, 0x61, 0x72, 0x61, 0x53, 0x65, 0x74, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x44, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x6c, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x51, 0x6f, 0x53, 0x70, 0x61, 0x72, 0x61, 0x53, 0x65,
	0x74, 0x49, 0x74, 0x65, 0x6d, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x92, 0x01, 0x04, 0x08, 0x01, 0x10,
	0x08, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x4f, 0x0a, 0x1f, 0x41, 0x6c, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x51, 0x6f, 0x53, 0x70, 0x61, 0x72, 0x61, 0x53, 0x65,
	0x74, 0x49, 0x74, 0x65, 0x6d, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xfe, 0x04, 0x0a, 0x19, 0x41, 0x6c,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x51, 0x6f, 0x53, 0x70, 0x61, 0x72, 0x61,
	0x53, 0x65, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x5c, 0x0a, 0x1e, 0x61, 0x6c, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x71, 0x6f, 0x5f, 0x73, 0x70, 0x61, 0x72, 0x61, 0x5f,
	0x73, 0x65, 0x74, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x6f, 0x53, 0x70, 0x61, 0x72,
	0x61, 0x53, 0x65, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x1a, 0x61, 0x6c, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x51, 0x6f, 0x53, 0x50, 0x61, 0x72, 0x61, 0x53, 0x65, 0x74,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x53, 0x0a, 0x1b, 0x67, 0x75, 0x61, 0x72, 0x61, 0x6e, 0x74,
	0x65, 0x65, 0x64, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x62, 0x69, 0x74, 0x5f, 0x72, 0x61, 0x74,
	0x65, 0x5f, 0x64, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x78, 0x6e, 0x61,
	0x70, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x69, 0x74, 0x52, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x17,
	0x67, 0x75, 0x61, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x65, 0x64, 0x46, 0x6c, 0x6f, 0x77, 0x42, 0x69,
	0x74, 0x52, 0x61, 0x74, 0x65, 0x44, 0x4c, 0x88, 0x01, 0x01, 0x12, 0x53, 0x0a, 0x1b, 0x67, 0x75,
	0x61, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x65, 0x64, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x62, 0x69,
	0x74, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x75, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x10, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x69, 0x74, 0x52, 0x61, 0x74,
	0x65, 0x48, 0x01, 0x52, 0x17, 0x67, 0x75, 0x61, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x65, 0x64, 0x46,
	0x6c, 0x6f, 0x77, 0x42, 0x69, 0x74, 0x52, 0x61, 0x74, 0x65, 0x55, 0x4c, 0x88, 0x01, 0x01, 0x12,
	0x4f, 0x0a, 0x13, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x5f,
	0x62, 0x75, 0x64, 0x67, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x78,
	0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x44, 0x65, 0x6c,
	0x61, 0x79, 0x42, 0x75, 0x64, 0x67, 0x65, 0x74, 0x48, 0x02, 0x52, 0x11, 0x70, 0x61, 0x63, 0x6b,
	0x65, 0x74, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x42, 0x75, 0x64, 0x67, 0x65, 0x74, 0x88, 0x01, 0x01,
	0x12, 0x49, 0x0a, 0x11, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x78, 0x6e,
	0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x52, 0x61, 0x74, 0x65, 0x48, 0x03, 0x52, 0x0f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x52, 0x61, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x4f, 0x0a, 0x0e, 0x69,
	0x5f, 0x65, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x06, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x6c,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x51, 0x6f, 0x53, 0x70, 0x61, 0x72, 0x61,
	0x53, 0x65, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x52, 0x0d, 0x69,
	0x45, 0x2d, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x1e, 0x0a, 0x1c,
	0x5f, 0x67, 0x75, 0x61, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x65, 0x64, 0x5f, 0x66, 0x6c, 0x6f, 0x77,
	0x5f, 0x62, 0x69, 0x74, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x64, 0x6c, 0x42, 0x1e, 0x0a, 0x1c,
	0x5f, 0x67, 0x75, 0x61, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x65, 0x64, 0x5f, 0x66, 0x6c, 0x6f, 0x77,
	0x5f, 0x62, 0x69, 0x74, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x75, 0x6c, 0x42, 0x16, 0x0a, 0x14,
	0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x5f, 0x62, 0x75,
	0x64, 0x67, 0x65, 0x74, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x22, 0x5d, 0x0a, 0x14, 0x41, 0x6d,
	0x66, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x45, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x23, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6c, 0x6f, 0x62,
	0x61, 0x6c, 0x41, 0x6d, 0x66, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x92, 0x01, 0x04, 0x08, 0x01,
	0x10, 0x10, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x50, 0x0a, 0x20, 0x47, 0x6c, 0x6f,
	0x62, 0x61, 0x6c, 0x41, 0x6d, 0x66, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x12, 0x2c, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xd9, 0x01, 0x0a, 0x1a,
	0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x41, 0x6d, 0x66, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x49,
	0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2f, 0x0a, 0x07, 0x70, 0x6c,
	0x6d, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x78, 0x6e,
	0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6c, 0x6d, 0x6e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x52, 0x07, 0x70, 0x6c, 0x6d, 0x6e, 0x2d, 0x49, 0x44, 0x12, 0x38, 0x0a, 0x0d, 0x61,
	0x6d, 0x66, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x61, 0x73, 0x6e, 0x31, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x69, 0x74,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x0d, 0x61, 0x6d, 0x66, 0x2d, 0x72, 0x65, 0x67, 0x69,
	0x6f, 0x6e, 0x2d, 0x69, 0x64, 0x12, 0x50, 0x0a, 0x0e, 0x69, 0x5f, 0x65, 0x5f, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e,
	0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x41, 0x6d,
	0x66, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x52, 0x0d, 0x69, 0x45, 0x2d, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x33, 0x0a, 0x0b, 0x41, 0x6d, 0x66, 0x55, 0x45,
	0x4e, 0x47, 0x61, 0x70, 0x49, 0x44, 0x12, 0x24, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x42, 0x0e, 0xfa, 0x42, 0x0b, 0x22, 0x09, 0x18, 0xff, 0xff, 0xff,
	0xff, 0xff, 0x1f, 0x28, 0x00, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x5a, 0x0a, 0x19,
	0x41, 0x72, 0x65, 0x61, 0x4f, 0x66, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x49, 0x6e,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3d, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e,
	0x76, 0x31, 0x2e, 0x41, 0x72, 0x65, 0x61, 0x4f, 0x66, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73,
	0x74, 0x49, 0x74, 0x65, 0x6d, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x92, 0x01, 0x04, 0x08, 0x01, 0x10,
	0x40, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x48, 0x0a, 0x18, 0x41, 0x72, 0x65, 0x61,
	0x4f, 0x66, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x45, 0x78,
	0x74, 0x49, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x22, 0xeb, 0x03, 0x0a, 0x12, 0x41, 0x72, 0x65, 0x61, 0x4f, 0x66, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x65, 0x73, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x4b, 0x0a, 0x13, 0x6c, 0x69, 0x73,
	0x74, 0x5f, 0x6f, 0x66, 0x5f, 0x74, 0x61, 0x69, 0x73, 0x69, 0x6e, 0x5f, 0x61, 0x6f, 0x5f, 0x69,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x66, 0x54, 0x61, 0x69, 0x73, 0x69, 0x6e, 0x41, 0x6f, 0x49,
	0x48, 0x00, 0x52, 0x0f, 0x6c, 0x69, 0x73, 0x74, 0x4f, 0x66, 0x54, 0x41, 0x49, 0x73, 0x69, 0x6e,
	0x41, 0x6f, 0x49, 0x88, 0x01, 0x01, 0x12, 0x49, 0x0a, 0x14, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x6f,
	0x66, 0x5f, 0x63, 0x65, 0x6c, 0x6c, 0x73, 0x69, 0x6e, 0x5f, 0x61, 0x6f, 0x5f, 0x69, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x4f, 0x66, 0x43, 0x65, 0x6c, 0x6c, 0x73, 0x48, 0x01, 0x52, 0x10, 0x6c, 0x69,
	0x73, 0x74, 0x4f, 0x66, 0x43, 0x65, 0x6c, 0x6c, 0x73, 0x69, 0x6e, 0x41, 0x6f, 0x49, 0x88, 0x01,
	0x01, 0x12, 0x57, 0x0a, 0x17, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x6f, 0x66, 0x5f, 0x72, 0x61, 0x6e,
	0x6e, 0x6f, 0x64, 0x65, 0x73, 0x69, 0x6e, 0x5f, 0x61, 0x6f, 0x5f, 0x69, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x4f, 0x66, 0x52, 0x61, 0x6e, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x69, 0x6e, 0x41, 0x6f, 0x49,
	0x48, 0x02, 0x52, 0x13, 0x6c, 0x69, 0x73, 0x74, 0x4f, 0x66, 0x52, 0x41, 0x4e, 0x4e, 0x6f, 0x64,
	0x65, 0x73, 0x69, 0x6e, 0x41, 0x6f, 0x49, 0x88, 0x01, 0x01, 0x12, 0x4d, 0x0a, 0x14, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e,
	0x76, 0x31, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x49, 0x64, 0x52, 0x12, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x44, 0x12, 0x48, 0x0a, 0x0e, 0x69, 0x5f, 0x65,
	0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x72, 0x65, 0x61,
	0x4f, 0x66, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x45, 0x78,
	0x74, 0x49, 0x65, 0x73, 0x52, 0x0d, 0x69, 0x45, 0x2d, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x73, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x6f, 0x66, 0x5f,
	0x74, 0x61, 0x69, 0x73, 0x69, 0x6e, 0x5f, 0x61, 0x6f, 0x5f, 0x69, 0x42, 0x17, 0x0a, 0x15, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x5f, 0x6f, 0x66, 0x5f, 0x63, 0x65, 0x6c, 0x6c, 0x73, 0x69, 0x6e, 0x5f,
	0x61, 0x6f, 0x5f, 0x69, 0x42, 0x1a, 0x0a, 0x18, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x6f, 0x66,
	0x5f, 0x72, 0x61, 0x6e, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x69, 0x6e, 0x5f, 0x61, 0x6f, 0x5f, 0x69,
	0x22, 0xcb, 0x01, 0x0a, 0x10, 0x41, 0x72, 0x65, 0x61, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x4f, 0x66,
	0x4d, 0x64, 0x74, 0x4e, 0x52, 0x12, 0x38, 0x0a, 0x0a, 0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x62, 0x61,
	0x73, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x78, 0x6e, 0x61, 0x70,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x42, 0x61, 0x73, 0x65, 0x64, 0x4d, 0x64, 0x74,
	0x4e, 0x52, 0x48, 0x00, 0x52, 0x09, 0x63, 0x65, 0x6c, 0x6c, 0x42, 0x61, 0x73, 0x65, 0x64, 0x12,
	0x30, 0x0a, 0x08, 0x74, 0x5f, 0x61, 0x62, 0x61, 0x73, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x62, 0x61,
	0x73, 0x65, 0x64, 0x4d, 0x64, 0x74, 0x48, 0x00, 0x52, 0x07, 0x74, 0x41, 0x42, 0x61, 0x73, 0x65,
	0x64, 0x12, 0x33, 0x0a, 0x09, 0x74, 0x5f, 0x61, 0x69, 0x62, 0x61, 0x73, 0x65, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x54,
	0x61, 0x69, 0x62, 0x61, 0x73, 0x65, 0x64, 0x4d, 0x64, 0x74, 0x48, 0x00, 0x52, 0x08, 0x74, 0x41,
	0x49, 0x42, 0x61, 0x73, 0x65, 0x64, 0x42, 0x16, 0x0a, 0x14, 0x61, 0x72, 0x65, 0x61, 0x5f, 0x73,
	0x63, 0x6f, 0x70, 0x65, 0x5f, 0x6f, 0x66, 0x5f, 0x6d, 0x64, 0x74, 0x5f, 0x6e, 0x72, 0x22, 0xd4,
	0x01, 0x0a, 0x13, 0x41, 0x72, 0x65, 0x61, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x4f, 0x66, 0x4d, 0x64,
	0x74, 0x45, 0x55, 0x74, 0x72, 0x61, 0x12, 0x3b, 0x0a, 0x0a, 0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x62,
	0x61, 0x73, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x78, 0x6e, 0x61,
	0x70, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x42, 0x61, 0x73, 0x65, 0x64, 0x4d, 0x64,
	0x74, 0x45, 0x55, 0x74, 0x72, 0x61, 0x48, 0x00, 0x52, 0x09, 0x63, 0x65, 0x6c, 0x6c, 0x42, 0x61,
	0x73, 0x65, 0x64, 0x12, 0x30, 0x0a, 0x08, 0x74, 0x5f, 0x61, 0x62, 0x61, 0x73, 0x65, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e,
	0x54, 0x61, 0x62, 0x61, 0x73, 0x65, 0x64, 0x4d, 0x64, 0x74, 0x48, 0x00, 0x52, 0x07, 0x74, 0x41,
	0x42, 0x61, 0x73, 0x65, 0x64, 0x12, 0x33, 0x0a, 0x09, 0x74, 0x5f, 0x61, 0x69, 0x62, 0x61, 0x73,
	0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e,
	0x76, 0x31, 0x2e, 0x54, 0x61, 0x69, 0x62, 0x61, 0x73, 0x65, 0x64, 0x4d, 0x64, 0x74, 0x48, 0x00,
	0x52, 0x08, 0x74, 0x41, 0x49, 0x42, 0x61, 0x73, 0x65, 0x64, 0x42, 0x19, 0x0a, 0x17, 0x61, 0x72,
	0x65, 0x61, 0x5f, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x5f, 0x6f, 0x66, 0x5f, 0x6d, 0x64, 0x74, 0x5f,
	0x65, 0x75, 0x74, 0x72, 0x61, 0x22, 0x61, 0x0a, 0x19, 0x41, 0x72, 0x65, 0x61, 0x53, 0x63, 0x6f,
	0x70, 0x65, 0x4f, 0x66, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x43, 0x65, 0x6c, 0x6c, 0x73, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x44, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x72, 0x65, 0x61,
	0x53, 0x63, 0x6f, 0x70, 0x65, 0x4f, 0x66, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x43, 0x65, 0x6c, 0x6c,
	0x73, 0x49, 0x74, 0x65, 0x6d, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x92, 0x01, 0x04, 0x08, 0x01, 0x10,
	0x08, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x4f, 0x0a, 0x1f, 0x41, 0x72, 0x65, 0x61,
	0x53, 0x63, 0x6f, 0x70, 0x65, 0x4f, 0x66, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x43, 0x65, 0x6c, 0x6c,
	0x73, 0x49, 0x74, 0x65, 0x6d, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x8d, 0x02, 0x0a, 0x19, 0x41, 0x72,
	0x65, 0x61, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x4f, 0x66, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x43, 0x65,
	0x6c, 0x6c, 0x73, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x44, 0x0a, 0x11, 0x6e, 0x72, 0x5f, 0x66, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x72, 0x66,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0f, 0x6e, 0x72,
	0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x44, 0x0a,
	0x10, 0x70, 0x63, 0x69, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x6d, 0x64,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76,
	0x31, 0x2e, 0x50, 0x63, 0x69, 0x6c, 0x69, 0x73, 0x74, 0x46, 0x6f, 0x72, 0x4d, 0x64, 0x74, 0x48,
	0x00, 0x52, 0x0d, 0x70, 0x63, 0x69, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x6f, 0x72, 0x4d, 0x44, 0x54,
	0x88, 0x01, 0x01, 0x12, 0x4f, 0x0a, 0x0e, 0x69, 0x5f, 0x65, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x78, 0x6e,
	0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x72, 0x65, 0x61, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x4f,
	0x66, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x43, 0x65, 0x6c, 0x6c, 0x73, 0x49, 0x74, 0x65, 0x6d, 0x45,
	0x78, 0x74, 0x49, 0x65, 0x73, 0x52, 0x0d, 0x69, 0x45, 0x2d, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x70, 0x63, 0x69, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x6d, 0x64, 0x74, 0x22, 0x4b, 0x0a, 0x1b, 0x41, 0x73, 0x53,
	0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xb4, 0x01, 0x0a, 0x15, 0x41, 0x73, 0x53, 0x65, 0x63,
	0x75, 0x72, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x3c, 0x0a, 0x0f, 0x6b, 0x65, 0x79, 0x5f, 0x6e, 0x67, 0x5f, 0x72, 0x61, 0x6e, 0x5f, 0x73,
	0x74, 0x61, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x61, 0x73, 0x6e, 0x31,
	0x2e, 0x76, 0x31, 0x2e, 0x42, 0x69, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x0f, 0x6b,
	0x65, 0x79, 0x2d, 0x4e, 0x47, 0x2d, 0x52, 0x41, 0x4e, 0x2d, 0x53, 0x74, 0x61, 0x72, 0x12, 0x10,
	0x0a, 0x03, 0x6e, 0x63, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6e, 0x63, 0x63,
	0x12, 0x4b, 0x0a, 0x0e, 0x69, 0x5f, 0x65, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e,
	0x76, 0x31, 0x2e, 0x41, 0x73, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x52, 0x0d,
	0x69, 0x45, 0x2d, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x50, 0x0a,
	0x20, 0x41, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x44, 0x61, 0x74, 0x61, 0x46,
	0x6f, 0x72, 0x52, 0x61, 0x6e, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x45, 0x78, 0x74, 0x49, 0x65,
	0x73, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22,
	0xe8, 0x01, 0x0a, 0x1a, 0x41, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x44, 0x61,
	0x74, 0x61, 0x46, 0x6f, 0x72, 0x52, 0x61, 0x6e, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x12, 0x5c,
	0x0a, 0x17, 0x72, 0x61, 0x6e, 0x5f, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x74, 0x74,
	0x65, 0x6d, 0x70, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x61, 0x6e, 0x70, 0x61, 0x67,
	0x69, 0x6e, 0x67, 0x41, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00,
	0x52, 0x17, 0x72, 0x61, 0x6e, 0x2d, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x2d, 0x61, 0x74, 0x74,
	0x65, 0x6d, 0x70, 0x74, 0x2d, 0x69, 0x6e, 0x66, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x50, 0x0a, 0x0e,
	0x69, 0x5f, 0x65, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x41,
	0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x44, 0x61, 0x74, 0x61, 0x46, 0x6f, 0x72,
	0x52, 0x61, 0x6e, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x52,
	0x0d, 0x69, 0x45, 0x2d, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x1a,
	0x0a, 0x18, 0x5f, 0x72, 0x61, 0x6e, 0x5f, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x74,
	0x74, 0x65, 0x6d, 0x70, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x22, 0x34, 0x0a, 0x11, 0x41, 0x76,
	0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x12,
	0x1f, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x09,
	0xfa, 0x42, 0x06, 0x1a, 0x04, 0x18, 0x64, 0x28, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x22, 0x46, 0x0a, 0x23, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x72, 0x63,
	0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69,
	0x74, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1f, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x09, 0xfa, 0x42, 0x06, 0x1a, 0x04, 0x18, 0x64, 0x28,
	0x00, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x33, 0x0a, 0x0f, 0x41, 0x76, 0x65, 0x72,
	0x61, 0x67, 0x69, 0x6e, 0x67, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x12, 0x20, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x1a,
	0x05, 0x18, 0xff, 0x1f, 0x28, 0x00, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x57, 0x0a,
	0x27, 0x42, 0x6c, 0x75, 0x65, 0x74, 0x6f, 0x6f, 0x74, 0x68, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xc0, 0x03, 0x0a, 0x21, 0x42, 0x6c, 0x75, 0x65, 0x74,
	0x6f, 0x6f, 0x74, 0x68, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x50, 0x0a, 0x15,
	0x62, 0x6c, 0x75, 0x65, 0x74, 0x6f, 0x6f, 0x74, 0x68, 0x5f, 0x6d, 0x65, 0x61, 0x73, 0x5f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x78, 0x6e,
	0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6c, 0x75, 0x65, 0x74, 0x6f, 0x6f, 0x74, 0x68, 0x4d,
	0x65, 0x61, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x13, 0x62, 0x6c, 0x75, 0x65, 0x74,
	0x6f, 0x6f, 0x74, 0x68, 0x4d, 0x65, 0x61, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x6f,
	0x0a, 0x1f, 0x62, 0x6c, 0x75, 0x65, 0x74, 0x6f, 0x6f, 0x74, 0x68, 0x5f, 0x6d, 0x65, 0x61, 0x73,
	0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76,
	0x31, 0x2e, 0x42, 0x6c, 0x75, 0x65, 0x74, 0x6f, 0x6f, 0x74, 0x68, 0x4d, 0x65, 0x61, 0x73, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x00, 0x52,
	0x1b, 0x62, 0x6c, 0x75, 0x65, 0x74, 0x6f, 0x6f, 0x74, 0x68, 0x4d, 0x65, 0x61, 0x73, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x88, 0x01, 0x01, 0x12,
	0x4f, 0x0a, 0x07, 0x62, 0x74, 0x5f, 0x72, 0x73, 0x73, 0x69, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x30, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x74, 0x72, 0x73, 0x73,
	0x69, 0x42, 0x6c, 0x75, 0x65, 0x74, 0x6f, 0x6f, 0x74, 0x68, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x48, 0x01, 0x52, 0x07, 0x62, 0x74, 0x2d, 0x72, 0x73, 0x73, 0x69, 0x88, 0x01, 0x01,
	0x12, 0x57, 0x0a, 0x0e, 0x69, 0x5f, 0x65, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e,
	0x76, 0x31, 0x2e, 0x42, 0x6c, 0x75, 0x65, 0x74, 0x6f, 0x6f, 0x74, 0x68, 0x4d, 0x65, 0x61, 0x73,
	0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x52, 0x0d, 0x69, 0x45, 0x2d, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x22, 0x0a, 0x20, 0x5f, 0x62, 0x6c,
	0x75, 0x65, 0x74, 0x6f, 0x6f, 0x74, 0x68, 0x5f, 0x6d, 0x65, 0x61, 0x73, 0x5f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x42, 0x0a, 0x0a,
	0x08, 0x5f, 0x62, 0x74, 0x5f, 0x72, 0x73, 0x73, 0x69, 0x22, 0x57, 0x0a, 0x1b, 0x42, 0x6c, 0x75,
	0x65, 0x74, 0x6f, 0x6f, 0x74, 0x68, 0x4d, 0x65, 0x61, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x4e, 0x61, 0x6d, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x38, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76,
	0x31, 0x2e, 0x42, 0x6c, 0x75, 0x65, 0x74, 0x6f, 0x6f, 0x74, 0x68, 0x4e, 0x61, 0x6d, 0x65, 0x42,
	0x0a, 0xfa, 0x42, 0x07, 0x92, 0x01, 0x04, 0x08, 0x01, 0x10, 0x04, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x22, 0x31, 0x0a, 0x0d, 0x42, 0x6c, 0x75, 0x65, 0x74, 0x6f, 0x6f, 0x74, 0x68, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0c, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x7a, 0x05, 0x10, 0x01, 0x18, 0xf8, 0x01, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x53, 0x0a, 0x10, 0x42, 0x70, 0x6c, 0x6d, 0x6e, 0x49, 0x44,
	0x49, 0x6e, 0x66, 0x6f, 0x45, 0x55, 0x74, 0x72, 0x61, 0x12, 0x3f, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e,
	0x76, 0x31, 0x2e, 0x42, 0x70, 0x6c, 0x6d, 0x6e, 0x49, 0x44, 0x49, 0x6e, 0x66, 0x6f, 0x45, 0x55,
	0x74, 0x72, 0x61, 0x49, 0x74, 0x65, 0x6d, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x92, 0x01, 0x04, 0x08,
	0x01, 0x10, 0x06, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x4a, 0x0a, 0x1a, 0x42, 0x70,
	0x6c, 0x6d, 0x6e, 0x49, 0x44, 0x49, 0x6e, 0x66, 0x6f, 0x45, 0x55, 0x74, 0x72, 0x61, 0x49, 0x74,
	0x65, 0x6d, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xb5, 0x02, 0x0a, 0x14, 0x42, 0x70, 0x6c, 0x6d, 0x6e,
	0x49, 0x44, 0x49, 0x6e, 0x66, 0x6f, 0x45, 0x55, 0x74, 0x72, 0x61, 0x49, 0x74, 0x65, 0x6d, 0x12,
	0x45, 0x0a, 0x0f, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x70, 0x6c, 0x6d,
	0x6e, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e,
	0x76, 0x31, 0x2e, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x45, 0x75, 0x74, 0x72,
	0x61, 0x70, 0x6c, 0x6d, 0x6e, 0x73, 0x52, 0x0e, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73,
	0x74, 0x50, 0x4c, 0x4d, 0x4e, 0x73, 0x12, 0x1e, 0x0a, 0x03, 0x74, 0x61, 0x63, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61,
	0x63, 0x52, 0x03, 0x74, 0x61, 0x63, 0x12, 0x37, 0x0a, 0x09, 0x65, 0x5f, 0x75, 0x74, 0x72, 0x61,
	0x5f, 0x63, 0x69, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x78, 0x6e, 0x61, 0x70,
	0x2e, 0x76, 0x31, 0x2e, 0x45, 0x55, 0x54, 0x72, 0x61, 0x43, 0x65, 0x6c, 0x6c, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x08, 0x65, 0x2d, 0x75, 0x74, 0x72, 0x61, 0x43, 0x49, 0x12,
	0x29, 0x0a, 0x05, 0x72, 0x61, 0x6e, 0x61, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e,
	0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x61, 0x6e, 0x61, 0x63, 0x48, 0x00,
	0x52, 0x05, 0x72, 0x61, 0x6e, 0x61, 0x63, 0x88, 0x01, 0x01, 0x12, 0x48, 0x0a, 0x0d, 0x69, 0x5f,
	0x65, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x23, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x70, 0x6c, 0x6d,
	0x6e, 0x49, 0x44, 0x49, 0x6e, 0x66, 0x6f, 0x45, 0x55, 0x74, 0x72, 0x61, 0x49, 0x74, 0x65, 0x6d,
	0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x52, 0x0c, 0x69, 0x45, 0x2d, 0x45, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x72, 0x61, 0x6e, 0x61, 0x63, 0x22, 0x4d,
	0x0a, 0x0d, 0x42, 0x70, 0x6c, 0x6d, 0x6e, 0x49, 0x44, 0x49, 0x6e, 0x66, 0x6f, 0x4e, 0x52, 0x12,
	0x3c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x70, 0x6c, 0x6d, 0x6e, 0x49, 0x44,
	0x49, 0x6e, 0x66, 0x6f, 0x4e, 0x52, 0x49, 0x74, 0x65, 0x6d, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x92,
	0x01, 0x04, 0x08, 0x01, 0x10, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x90, 0x02,
	0x0a, 0x20, 0x42, 0x70, 0x6c, 0x6d, 0x6e, 0x49, 0x44, 0x49, 0x6e, 0x66, 0x6f, 0x4e, 0x52, 0x49,
	0x74, 0x65, 0x6d, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x63, 0x0a, 0x1b, 0x69, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75,
	0x72, 0x65, 0x64, 0x5f, 0x74, 0x61, 0x63, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x64, 0x54, 0x61, 0x63, 0x69,
	0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x1a, 0x69, 0x64, 0x2d,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x64, 0x54, 0x41, 0x43, 0x49, 0x6e, 0x64,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x66, 0x0a, 0x1c, 0x69, 0x64, 0x5f, 0x6e, 0x70,
	0x6e, 0x5f, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x70, 0x6e, 0x42, 0x72, 0x6f, 0x61, 0x64,
	0x63, 0x61, 0x73, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48,
	0x00, 0x52, 0x1c, 0x69, 0x64, 0x2d, 0x4e, 0x50, 0x4e, 0x2d, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63,
	0x61, 0x73, 0x74, 0x2d, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42,
	0x1f, 0x0a, 0x1d, 0x62, 0x70, 0x6c, 0x6d, 0x6e, 0x5f, 0x69, 0x64, 0x5f, 0x69, 0x6e, 0x66, 0x6f,
	0x5f, 0x6e, 0x72, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x65, 0x78, 0x74, 0x5f, 0x69, 0x65, 0x73,
	0x22, 0xc4, 0x01, 0x0a, 0x17, 0x42, 0x70, 0x6c, 0x6d, 0x6e, 0x49, 0x44, 0x49, 0x6e, 0x66, 0x6f,
	0x4e, 0x52, 0x49, 0x74, 0x65, 0x6d, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e,
	0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x49, 0x65, 0x49, 0x44, 0x52,
	0x03, 0x26, 0x69, 0x64, 0x12, 0x37, 0x0a, 0x0b, 0x63, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c,
	0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x78, 0x6e, 0x61, 0x70,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x52,
	0x0c, 0x26, 0x63, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x48, 0x0a,
	0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x29, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x70, 0x6c, 0x6d, 0x6e,
	0x49, 0x44, 0x49, 0x6e, 0x66, 0x6f, 0x4e, 0x52, 0x49, 0x74, 0x65, 0x6d, 0x45, 0x78, 0x74, 0x49,
	0x65, 0x73, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x26, 0x45, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xa0, 0x02, 0x0a, 0x11, 0x42, 0x70, 0x6c, 0x6d,
	0x6e, 0x49, 0x44, 0x49, 0x6e, 0x66, 0x6f, 0x4e, 0x52, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x40, 0x0a,
	0x0f, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x70, 0x6c, 0x6d, 0x6e, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31,
	0x2e, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x50, 0x6c, 0x6d, 0x6e, 0x73, 0x52,
	0x0e, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x50, 0x4c, 0x4d, 0x4e, 0x73, 0x12,
	0x1e, 0x0a, 0x03, 0x74, 0x61, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x78,
	0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x63, 0x52, 0x03, 0x74, 0x61, 0x63, 0x12,
	0x2d, 0x0a, 0x05, 0x6e, 0x72, 0x5f, 0x63, 0x69, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x72, 0x43, 0x65, 0x6c, 0x6c, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x05, 0x6e, 0x72, 0x2d, 0x43, 0x49, 0x12, 0x29,
	0x0a, 0x05, 0x72, 0x61, 0x6e, 0x61, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x61, 0x6e, 0x61, 0x63, 0x48, 0x00, 0x52,
	0x05, 0x72, 0x61, 0x6e, 0x61, 0x63, 0x88, 0x01, 0x01, 0x12, 0x45, 0x0a, 0x0d, 0x69, 0x5f, 0x65,
	0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x20, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x70, 0x6c, 0x6d, 0x6e,
	0x49, 0x44, 0x49, 0x6e, 0x66, 0x6f, 0x4e, 0x52, 0x49, 0x74, 0x65, 0x6d, 0x45, 0x78, 0x74, 0x49,
	0x65, 0x73, 0x52, 0x0c, 0x69, 0x45, 0x2d, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x42, 0x08, 0x0a, 0x06, 0x5f, 0x72, 0x61, 0x6e, 0x61, 0x63, 0x22, 0x2f, 0x0a, 0x07, 0x42, 0x69,
	0x74, 0x52, 0x61, 0x74, 0x65, 0x12, 0x24, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x42, 0x0e, 0xfa, 0x42, 0x0b, 0x22, 0x09, 0x18, 0x80, 0x80, 0xd1, 0x94,
	0xb5, 0x74, 0x28, 0x00, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x63, 0x0a, 0x1a, 0x42,
	0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x43, 0x61, 0x67, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x45, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e,
	0x76, 0x31, 0x2e, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x43, 0x61, 0x67, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x49, 0x74, 0x65, 0x6d, 0x42, 0x0a, 0xfa,
	0x42, 0x07, 0x92, 0x01, 0x04, 0x08, 0x01, 0x10, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x22, 0x50, 0x0a, 0x20, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x43, 0x61, 0x67,
	0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x49, 0x74, 0x65, 0x6d, 0x45, 0x78,
	0x74, 0x49, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x22, 0xac, 0x01, 0x0a, 0x1a, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74,
	0x43, 0x61, 0x67, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x49, 0x74, 0x65,
	0x6d, 0x12, 0x3e, 0x0a, 0x0e, 0x63, 0x61, 0x67, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x78, 0x6e, 0x61, 0x70,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x61, 0x67, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x52, 0x0e, 0x63, 0x61, 0x67, 0x2d, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x12, 0x4e, 0x0a, 0x0d, 0x69, 0x5f, 0x65, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e,
	0x76, 0x31, 0x2e, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x43, 0x61, 0x67, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x49, 0x74, 0x65, 0x6d, 0x45, 0x78, 0x74,
	0x49, 0x65, 0x73, 0x52, 0x0c, 0x69, 0x45, 0x2d, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x22, 0x4f, 0x0a, 0x10, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x4e, 0x69,
	0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x3b, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x42,
	0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x4e, 0x69, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x42,
	0x0a, 0xfa, 0x42, 0x07, 0x92, 0x01, 0x04, 0x08, 0x01, 0x10, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x22, 0x46, 0x0a, 0x16, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x4e,
	0x69, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x78, 0x0a, 0x10, 0x42, 0x72,
	0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x4e, 0x69, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x1e,
	0x0a, 0x03, 0x6e, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x78, 0x6e,
	0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x69, 0x64, 0x52, 0x03, 0x6e, 0x69, 0x64, 0x12, 0x44,
	0x0a, 0x0d, 0x69, 0x5f, 0x65, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e,
	0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x4e, 0x69, 0x64, 0x49, 0x74, 0x65, 0x6d,
	0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x52, 0x0c, 0x69, 0x45, 0x2d, 0x45, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x22, 0x49, 0x0a, 0x0e, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73,
	0x74, 0x50, 0x6c, 0x6d, 0x6e, 0x73, 0x12, 0x37, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e,
	0x50, 0x6c, 0x6d, 0x6e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x42, 0x0a, 0xfa, 0x42,
	0x07, 0x92, 0x01, 0x04, 0x08, 0x01, 0x10, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22,
	0x4e, 0x0a, 0x13, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x45, 0x75, 0x74, 0x72,
	0x61, 0x70, 0x6c, 0x6d, 0x6e, 0x73, 0x12, 0x37, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e,
	0x50, 0x6c, 0x6d, 0x6e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x42, 0x0a, 0xfa, 0x42,
	0x07, 0x92, 0x01, 0x04, 0x08, 0x01, 0x10, 0x06, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22,
	0x89, 0x02, 0x0a, 0x2c, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x50, 0x6c, 0x6d,
	0x6e, 0x69, 0x6e, 0x54, 0x61, 0x69, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x74, 0x65,
	0x6d, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x3d, 0x0a, 0x0e, 0x69, 0x64, 0x5f, 0x6e, 0x70, 0x6e, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6f,
	0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e,
	0x76, 0x31, 0x2e, 0x4e, 0x70, 0x6e, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x48, 0x00, 0x52,
	0x0e, 0x69, 0x64, 0x2d, 0x4e, 0x50, 0x4e, 0x2d, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x12,
	0x6e, 0x0a, 0x21, 0x69, 0x64, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x5f, 0x74,
	0x61, 0x69, 0x73, 0x6c, 0x69, 0x63, 0x65, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x78, 0x6e, 0x61,
	0x70, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x53, 0x6c, 0x69,
	0x63, 0x65, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x00, 0x52,
	0x1e, 0x69, 0x64, 0x2d, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x54, 0x41, 0x49, 0x53,
	0x6c, 0x69, 0x63, 0x65, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x42,
	0x2a, 0x0a, 0x28, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x70, 0x6c, 0x6d,
	0x6e, 0x69, 0x6e, 0x5f, 0x74, 0x61, 0x69, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x69,
	0x74, 0x65, 0x6d, 0x5f, 0x65, 0x78, 0x74, 0x5f, 0x69, 0x65, 0x73, 0x22, 0xdc, 0x01, 0x0a, 0x23,
	0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x50, 0x6c, 0x6d, 0x6e, 0x69, 0x6e, 0x54,
	0x61, 0x69, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x45, 0x78, 0x74,
	0x49, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x49, 0x65, 0x49, 0x44, 0x52, 0x03, 0x26, 0x69, 0x64, 0x12, 0x37, 0x0a, 0x0b, 0x63,
	0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x14, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x69, 0x74, 0x69,
	0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x0c, 0x26, 0x63, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61,
	0x6c, 0x69, 0x74, 0x79, 0x12, 0x54, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76,
	0x31, 0x2e, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x50, 0x6c, 0x6d, 0x6e, 0x69,
	0x6e, 0x54, 0x61, 0x69, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x45,
	0x78, 0x74, 0x49, 0x65, 0x73, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0a,
	0x26, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xf4, 0x01, 0x0a, 0x1d, 0x42,
	0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x50, 0x6c, 0x6d, 0x6e, 0x69, 0x6e, 0x54, 0x61,
	0x69, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x2f, 0x0a, 0x07,
	0x70, 0x6c, 0x6d, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6c, 0x6d, 0x6e, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x52, 0x07, 0x70, 0x6c, 0x6d, 0x6e, 0x2d, 0x69, 0x64, 0x12, 0x4f, 0x0a,
	0x16, 0x74, 0x5f, 0x61, 0x69, 0x73, 0x6c, 0x69, 0x63, 0x65, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6f,
	0x72, 0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6c, 0x69, 0x63, 0x65, 0x53, 0x75, 0x70,
	0x70, 0x6f, 0x72, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x14, 0x74, 0x41, 0x49, 0x53, 0x6c, 0x69,
	0x63, 0x65, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x2d, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x51,
	0x0a, 0x0d, 0x69, 0x5f, 0x65, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e,
	0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x50, 0x6c, 0x6d, 0x6e, 0x69, 0x6e, 0x54,
	0x61, 0x69, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x45, 0x78, 0x74,
	0x49, 0x65, 0x73, 0x52, 0x0c, 0x69, 0x45, 0x2d, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x22, 0x6b, 0x0a, 0x1c, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x50, 0x6e,
	0x69, 0x4e, 0x50, 0x6e, 0x49, 0x44, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x4b, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x29, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x72, 0x6f, 0x61, 0x64,
	0x63, 0x61, 0x73, 0x74, 0x50, 0x6e, 0x69, 0x4e, 0x50, 0x6e, 0x49, 0x44, 0x49, 0x6e, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x74, 0x65, 0x6d, 0x42, 0x0a, 0xfa, 0x42, 0x07,
	0x92, 0x01, 0x04, 0x08, 0x01, 0x10, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x56,
	0x0a, 0x26, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x50, 0x6e, 0x69, 0x4e, 0x50,
	0x6e, 0x49, 0x44, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x74,
	0x65, 0x6d, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x93, 0x02, 0x0a, 0x20, 0x42, 0x72, 0x6f, 0x61, 0x64,
	0x63, 0x61, 0x73, 0x74, 0x50, 0x6e, 0x69, 0x4e, 0x50, 0x6e, 0x49, 0x44, 0x49, 0x6e, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x2f, 0x0a, 0x07, 0x70,
	0x6c, 0x6d, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x78,
	0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6c, 0x6d, 0x6e, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x52, 0x07, 0x70, 0x6c, 0x6d, 0x6e, 0x2d, 0x69, 0x64, 0x12, 0x68, 0x0a, 0x1d,
	0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x63, 0x61, 0x67, 0x5f, 0x69, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x72,
	0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x43, 0x61, 0x67, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x1c, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63,
	0x61, 0x73, 0x74, 0x43, 0x41, 0x47, 0x2d, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x2d, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x54, 0x0a, 0x0d, 0x69, 0x5f, 0x65, 0x5f, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e,
	0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73,
	0x74, 0x50, 0x6e, 0x69, 0x4e, 0x50, 0x6e, 0x49, 0x44, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x74, 0x65, 0x6d, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x52, 0x0c,
	0x69, 0x45, 0x2d, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x51, 0x0a, 0x13,
	0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x53, 0x6e, 0x70, 0x6e, 0x69, 0x64, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x72, 0x6f,
	0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x53, 0x6e, 0x70, 0x6e, 0x69, 0x64, 0x42, 0x0a, 0xfa, 0x42,
	0x07, 0x92, 0x01, 0x04, 0x08, 0x01, 0x10, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22,
	0x45, 0x0a, 0x15, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x53, 0x6e, 0x70, 0x6e,
	0x69, 0x64, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xd1, 0x01, 0x0a, 0x0f, 0x42, 0x72, 0x6f, 0x61, 0x64,
	0x63, 0x61, 0x73, 0x74, 0x53, 0x6e, 0x70, 0x6e, 0x69, 0x64, 0x12, 0x2f, 0x0a, 0x07, 0x70, 0x6c,
	0x6d, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x78, 0x6e,
	0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6c, 0x6d, 0x6e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x52, 0x07, 0x70, 0x6c, 0x6d, 0x6e, 0x2d, 0x69, 0x64, 0x12, 0x48, 0x0a, 0x12, 0x62,
	0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x6e, 0x69, 0x64, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76,
	0x31, 0x2e, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x4e, 0x69, 0x64, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x11, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x4e, 0x49, 0x44,
	0x2d, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x43, 0x0a, 0x0d, 0x69, 0x5f, 0x65, 0x5f, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x78,
	0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74,
	0x53, 0x6e, 0x70, 0x6e, 0x69, 0x64, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x52, 0x0c, 0x69, 0x45,
	0x2d, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x39, 0x0a, 0x0d, 0x43, 0x61,
	0x67, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x28, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x61, 0x73, 0x6e,
	0x31, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x69, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x30, 0x0a, 0x0d, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74,
	0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1f, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x09, 0xfa, 0x42, 0x06, 0x1a, 0x04, 0x18, 0x64, 0x28, 0x00,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x47, 0x0a, 0x17, 0x43, 0x61, 0x70, 0x61, 0x63,
	0x69, 0x74, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x45, 0x78, 0x74, 0x49,
	0x65, 0x73, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x22, 0xa2, 0x02, 0x0a, 0x11, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x3d, 0x0a, 0x0e, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69,
	0x74, 0x79, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74,
	0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0d, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x66, 0x0a, 0x1c, 0x73, 0x73, 0x62, 0x5f, 0x61, 0x72, 0x65,
	0x61, 0x5f, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x78, 0x6e,
	0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x73, 0x62, 0x61, 0x72, 0x65, 0x61, 0x43, 0x61, 0x70,
	0x61, 0x63, 0x69, 0x74, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x00,
	0x52, 0x18, 0x73, 0x73, 0x62, 0x41, 0x72, 0x65, 0x61, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74,
	0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x88, 0x01, 0x01, 0x12, 0x45, 0x0a,
	0x0d, 0x69, 0x5f, 0x65, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x52, 0x0c, 0x69, 0x45, 0x2d, 0x45, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x42, 0x1f, 0x0a, 0x1d, 0x5f, 0x73, 0x73, 0x62, 0x5f, 0x61, 0x72, 0x65,
	0x61, 0x5f, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x22, 0x3b, 0x0a, 0x0b, 0x43, 0x61, 0x75, 0x73, 0x65, 0x45, 0x78,
	0x74, 0x49, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x22, 0xba, 0x02, 0x0a, 0x05, 0x43, 0x61, 0x75, 0x73, 0x65, 0x12, 0x46, 0x0a, 0x0d,
	0x72, 0x61, 0x64, 0x69, 0x6f, 0x5f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x61,
	0x75, 0x73, 0x65, 0x52, 0x61, 0x64, 0x69, 0x6f, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x4c,
	0x61, 0x79, 0x65, 0x72, 0x48, 0x00, 0x52, 0x0c, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x4e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x12, 0x3c, 0x0a, 0x09, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x61, 0x75, 0x73, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74,
	0x4c, 0x61, 0x79, 0x65, 0x72, 0x48, 0x00, 0x52, 0x09, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f,
	0x72, 0x74, 0x12, 0x34, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x61, 0x75, 0x73, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x48, 0x00, 0x52, 0x08,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x28, 0x0a, 0x04, 0x6d, 0x69, 0x73, 0x63,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x61, 0x75, 0x73, 0x65, 0x4d, 0x69, 0x73, 0x63, 0x48, 0x00, 0x52, 0x04, 0x6d, 0x69,
	0x73, 0x63, 0x12, 0x42, 0x0a, 0x10, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x5f, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x78,
	0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x61, 0x75, 0x73, 0x65, 0x45, 0x78, 0x74, 0x49,
	0x65, 0x73, 0x48, 0x00, 0x52, 0x10, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x2d, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x07, 0x0a, 0x05, 0x63, 0x61, 0x75, 0x73, 0x65, 0x22,
	0x6a, 0x0a, 0x21, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x64, 0x4e, 0x72, 0x4c, 0x69, 0x73, 0x74,
	0x43, 0x65, 0x6c, 0x6c, 0x41, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x4e, 0x52, 0x12, 0x45, 0x0a, 0x0f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x64, 0x5f,
	0x6e, 0x72, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x72, 0x43, 0x47, 0x69, 0x42, 0x0c, 0xfa,
	0x42, 0x09, 0x92, 0x01, 0x06, 0x08, 0x01, 0x10, 0x80, 0x80, 0x01, 0x52, 0x0e, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x65, 0x64, 0x4e, 0x52, 0x2d, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x4a, 0x0a, 0x1a, 0x43,
	0x65, 0x6c, 0x6c, 0x41, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x4e, 0x52, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xa2, 0x02, 0x0a, 0x14, 0x43, 0x65, 0x6c, 0x6c,
	0x41, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x4e, 0x52,
	0x12, 0x55, 0x0a, 0x0f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x64, 0x5f, 0x6e, 0x72, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x78, 0x6e, 0x61, 0x70,
	0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x64, 0x4e, 0x72, 0x4c, 0x69, 0x73,
	0x74, 0x43, 0x65, 0x6c, 0x6c, 0x41, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x4e, 0x52, 0x48, 0x00, 0x52, 0x0e, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x64,
	0x4e, 0x52, 0x2d, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x45, 0x0a, 0x09, 0x66, 0x75, 0x6c, 0x6c, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x78, 0x6e, 0x61,
	0x70, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x75, 0x6c, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x65, 0x6c,
	0x6c, 0x41, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x4e,
	0x72, 0x48, 0x00, 0x52, 0x09, 0x66, 0x75, 0x6c, 0x6c, 0x2d, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x51,
	0x0a, 0x10, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x41, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x4e, 0x52, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x48, 0x00, 0x52,
	0x10, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x2d, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x42, 0x19, 0x0a, 0x17, 0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x6e, 0x72, 0x22, 0x55, 0x0a, 0x25,
	0x43, 0x65, 0x6c, 0x6c, 0x41, 0x6e, 0x64, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x41,
	0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x4e, 0x52, 0x45,
	0x78, 0x74, 0x49, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x22, 0xe3, 0x02, 0x0a, 0x1f, 0x43, 0x65, 0x6c, 0x6c, 0x41, 0x6e, 0x64, 0x43,
	0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x41, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x4e, 0x52, 0x12, 0x56, 0x0a, 0x16, 0x6d, 0x61, 0x78, 0x69, 0x6d,
	0x75, 0x6d, 0x5f, 0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x73, 0x69, 0x7a,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76,
	0x31, 0x2e, 0x4d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x43, 0x65, 0x6c, 0x6c, 0x4c, 0x69, 0x73,
	0x74, 0x53, 0x69, 0x7a, 0x65, 0x48, 0x00, 0x52, 0x13, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d,
	0x43, 0x65, 0x6c, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x5a, 0x0a, 0x17, 0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x6e, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x41,
	0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x4e, 0x52, 0x48,
	0x01, 0x52, 0x15, 0x63, 0x65, 0x6c, 0x6c, 0x41, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x2d, 0x4e, 0x52, 0x88, 0x01, 0x01, 0x12, 0x55, 0x0a, 0x0e, 0x69,
	0x5f, 0x65, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x65,
	0x6c, 0x6c, 0x41, 0x6e, 0x64, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x41, 0x73, 0x73,
	0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x4e, 0x52, 0x45, 0x78, 0x74,
	0x49, 0x65, 0x73, 0x52, 0x0d, 0x69, 0x45, 0x2d, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x42, 0x19, 0x0a, 0x17, 0x5f, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x5f, 0x63,
	0x65, 0x6c, 0x6c, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x42, 0x1a, 0x0a,
	0x18, 0x5f, 0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x6e, 0x72, 0x22, 0x58, 0x0a, 0x28, 0x43, 0x65, 0x6c,
	0x6c, 0x41, 0x6e, 0x64, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x41, 0x73, 0x73, 0x69,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x45, 0x55, 0x74, 0x72, 0x61, 0x45,
	0x78, 0x74, 0x49, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x22, 0xf5, 0x02, 0x0a, 0x22, 0x43, 0x65, 0x6c, 0x6c, 0x41, 0x6e, 0x64, 0x43,
	0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x41, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x45, 0x55, 0x74, 0x72, 0x61, 0x12, 0x56, 0x0a, 0x16, 0x6d, 0x61,
	0x78, 0x69, 0x6d, 0x75, 0x6d, 0x5f, 0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f,
	0x73, 0x69, 0x7a, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x78, 0x6e, 0x61,
	0x70, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x43, 0x65, 0x6c, 0x6c,
	0x4c, 0x69, 0x73, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x48, 0x00, 0x52, 0x13, 0x6d, 0x61, 0x78, 0x69,
	0x6d, 0x75, 0x6d, 0x43, 0x65, 0x6c, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x63, 0x0a, 0x1a, 0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x61, 0x73, 0x73, 0x69, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x65, 0x75, 0x74, 0x72, 0x61,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x41, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x45, 0x55, 0x74, 0x72, 0x61, 0x48, 0x01, 0x52, 0x18, 0x63, 0x65, 0x6c, 0x6c,
	0x41, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x2d, 0x45,
	0x55, 0x54, 0x52, 0x41, 0x88, 0x01, 0x01, 0x12, 0x58, 0x0a, 0x0e, 0x69, 0x5f, 0x65, 0x5f, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x31, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x41, 0x6e,
	0x64, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x41, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x45, 0x55, 0x74, 0x72, 0x61, 0x45, 0x78, 0x74, 0x49,
	0x65, 0x73, 0x52, 0x0d, 0x69, 0x45, 0x2d, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x73, 0x42, 0x19, 0x0a, 0x17, 0x5f, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x5f, 0x63, 0x65,
	0x6c, 0x6c, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x42, 0x1d, 0x0a, 0x1b,
	0x5f, 0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x65, 0x75, 0x74, 0x72, 0x61, 0x22, 0x79, 0x0a, 0x27, 0x4c,
	0x69, 0x6d, 0x69, 0x74, 0x65, 0x64, 0x45, 0x75, 0x74, 0x72, 0x61, 0x4c, 0x69, 0x73, 0x74, 0x43,
	0x65, 0x6c, 0x6c, 0x41, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x45, 0x55, 0x74, 0x72, 0x61, 0x12, 0x4e, 0x0a, 0x12, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x65,
	0x64, 0x5f, 0x65, 0x75, 0x74, 0x72, 0x61, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x11, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x55, 0x54,
	0x72, 0x61, 0x43, 0x47, 0x69, 0x42, 0x0c, 0xfa, 0x42, 0x09, 0x92, 0x01, 0x06, 0x08, 0x01, 0x10,
	0x80, 0x80, 0x01, 0x52, 0x11, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x64, 0x45, 0x55, 0x54, 0x52,
	0x41, 0x2d, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x4d, 0x0a, 0x1d, 0x43, 0x65, 0x6c, 0x6c, 0x41, 0x73,
	0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x45, 0x55, 0x74, 0x72,
	0x61, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xba, 0x02, 0x0a, 0x17, 0x43, 0x65, 0x6c, 0x6c, 0x41, 0x73,
	0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x45, 0x55, 0x74, 0x72,
	0x61, 0x12, 0x61, 0x0a, 0x12, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x64, 0x5f, 0x65, 0x75, 0x74,
	0x72, 0x61, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e,
	0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x64, 0x45,
	0x75, 0x74, 0x72, 0x61, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x65, 0x6c, 0x6c, 0x41, 0x73, 0x73, 0x69,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x45, 0x55, 0x74, 0x72, 0x61, 0x48,
	0x00, 0x52, 0x11, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x64, 0x45, 0x55, 0x54, 0x52, 0x41, 0x2d,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x48, 0x0a, 0x09, 0x66, 0x75, 0x6c, 0x6c, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x28, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76,
	0x31, 0x2e, 0x46, 0x75, 0x6c, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x65, 0x6c, 0x6c, 0x41, 0x73,
	0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x45, 0x75, 0x74, 0x72,
	0x61, 0x48, 0x00, 0x52, 0x09, 0x66, 0x75, 0x6c, 0x6c, 0x2d, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x54,
	0x0a, 0x10, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x41, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x45, 0x55, 0x74, 0x72, 0x61, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73,
	0x48, 0x00, 0x52, 0x10, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x2d, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x42, 0x1c, 0x0a, 0x1a, 0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x61, 0x73, 0x73,
	0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x65, 0x75, 0x74,
	0x72, 0x61, 0x22, 0x44, 0x0a, 0x14, 0x43, 0x65, 0x6c, 0x6c, 0x42, 0x61, 0x73, 0x65, 0x64, 0x4d,
	0x64, 0x74, 0x4e, 0x52, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xa8, 0x01, 0x0a, 0x0e, 0x43, 0x65, 0x6c,
	0x6c, 0x42, 0x61, 0x73, 0x65, 0x64, 0x4d, 0x64, 0x74, 0x4e, 0x52, 0x12, 0x50, 0x0a, 0x16, 0x63,
	0x65, 0x6c, 0x6c, 0x5f, 0x69, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x66, 0x6f, 0x72, 0x5f, 0x6d,
	0x64, 0x74, 0x5f, 0x6e, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x78, 0x6e,
	0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x49, 0x64, 0x4c, 0x69, 0x73, 0x74,
	0x66, 0x6f, 0x72, 0x4d, 0x64, 0x74, 0x4e, 0x52, 0x52, 0x13, 0x63, 0x65, 0x6c, 0x6c, 0x49, 0x64,
	0x4c, 0x69, 0x73, 0x74, 0x66, 0x6f, 0x72, 0x4d, 0x44, 0x54, 0x2d, 0x4e, 0x52, 0x12, 0x44, 0x0a,
	0x0e, 0x69, 0x5f, 0x65, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x65, 0x6c, 0x6c, 0x42, 0x61, 0x73, 0x65, 0x64, 0x4d, 0x64, 0x74, 0x4e, 0x52, 0x45, 0x78,
	0x74, 0x49, 0x65, 0x73, 0x52, 0x0d, 0x69, 0x45, 0x2d, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x73, 0x22, 0x46, 0x0a, 0x12, 0x43, 0x65, 0x6c, 0x6c, 0x49, 0x64, 0x4c, 0x69, 0x73,
	0x74, 0x66, 0x6f, 0x72, 0x4d, 0x64, 0x74, 0x4e, 0x52, 0x12, 0x30, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e,
	0x76, 0x31, 0x2e, 0x4e, 0x72, 0x43, 0x47, 0x69, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x92, 0x01, 0x04,
	0x08, 0x01, 0x10, 0x20, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x47, 0x0a, 0x17, 0x43,
	0x65, 0x6c, 0x6c, 0x42, 0x61, 0x73, 0x65, 0x64, 0x4d, 0x64, 0x74, 0x45, 0x55, 0x74, 0x72, 0x61,
	0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x22, 0xb7, 0x01, 0x0a, 0x11, 0x43, 0x65, 0x6c, 0x6c, 0x42, 0x61, 0x73,
	0x65, 0x64, 0x4d, 0x64, 0x74, 0x45, 0x55, 0x74, 0x72, 0x61, 0x12, 0x59, 0x0a, 0x19, 0x63, 0x65,
	0x6c, 0x6c, 0x5f, 0x69, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x66, 0x6f, 0x72, 0x5f, 0x6d, 0x64,
	0x74, 0x5f, 0x65, 0x75, 0x74, 0x72, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x49, 0x64, 0x4c, 0x69,
	0x73, 0x74, 0x66, 0x6f, 0x72, 0x4d, 0x64, 0x74, 0x45, 0x55, 0x74, 0x72, 0x61, 0x52, 0x16, 0x63,
	0x65, 0x6c, 0x6c, 0x49, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x66, 0x6f, 0x72, 0x4d, 0x44, 0x54, 0x2d,
	0x45, 0x55, 0x54, 0x52, 0x41, 0x12, 0x47, 0x0a, 0x0e, 0x69, 0x5f, 0x65, 0x5f, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x42, 0x61, 0x73, 0x65,
	0x64, 0x4d, 0x64, 0x74, 0x45, 0x55, 0x74, 0x72, 0x61, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x52,
	0x0d, 0x69, 0x45, 0x2d, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x4c,
	0x0a, 0x15, 0x43, 0x65, 0x6c, 0x6c, 0x49, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x66, 0x6f, 0x72, 0x4d,
	0x64, 0x74, 0x45, 0x55, 0x74, 0x72, 0x61, 0x12, 0x33, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31,
	0x2e, 0x45, 0x55, 0x54, 0x72, 0x61, 0x43, 0x47, 0x69, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x92, 0x01,
	0x04, 0x08, 0x01, 0x10, 0x20, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x39, 0x0a, 0x16,
	0x43, 0x65, 0x6c, 0x6c, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x43, 0x6c, 0x61, 0x73,
	0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1f, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x09, 0xfa, 0x42, 0x06, 0x1a, 0x04, 0x18, 0x64, 0x28, 0x01,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x2e, 0x0a, 0x0b, 0x43, 0x65, 0x6c, 0x6c, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x09, 0xfa, 0x42, 0x06, 0x1a, 0x04, 0x18, 0x03, 0x28, 0x00,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x5f, 0x0a, 0x15, 0x43, 0x65, 0x6c, 0x6c, 0x4d,
	0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x12, 0x46, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x4d, 0x65,
	0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x49,
	0x74, 0x65, 0x6d, 0x42, 0x0c, 0xfa, 0x42, 0x09, 0x92, 0x01, 0x06, 0x08, 0x01, 0x10, 0x80, 0x80,
	0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x4f, 0x0a, 0x1f, 0x43, 0x65, 0x6c, 0x6c,
	0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x49, 0x74, 0x65, 0x6d, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xec, 0x06, 0x0a, 0x19, 0x43, 0x65,
	0x6c, 0x6c, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x34, 0x0a, 0x07, 0x63, 0x65, 0x6c, 0x6c, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x4e, 0x67, 0x52, 0x41, 0x6e, 0x63, 0x65,
	0x6c, 0x6c, 0x49, 0x44, 0x52, 0x07, 0x63, 0x65, 0x6c, 0x6c, 0x2d, 0x49, 0x44, 0x12, 0x55, 0x0a,
	0x15, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x78,
	0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x61, 0x64, 0x69, 0x6f, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x48, 0x00, 0x52, 0x13, 0x72, 0x61,
	0x64, 0x69, 0x6f, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x88, 0x01, 0x01, 0x12, 0x58, 0x0a, 0x16, 0x74, 0x5f, 0x6e, 0x6c, 0x63, 0x61, 0x70, 0x61,
	0x63, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x54,
	0x6e, 0x6c, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61,
	0x74, 0x6f, 0x72, 0x48, 0x01, 0x52, 0x14, 0x74, 0x4e, 0x4c, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69,
	0x74, 0x79, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x88, 0x01, 0x01, 0x12, 0x7a,
	0x0a, 0x22, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x65, 0x5f, 0x61, 0x76, 0x61, 0x69,
	0x6c, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x5f, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x78, 0x6e, 0x61,
	0x70, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x65, 0x41, 0x76,
	0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x48, 0x02, 0x52, 0x1f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x65, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69,
	0x74, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x88, 0x01, 0x01, 0x12, 0x5e, 0x0a, 0x18, 0x73, 0x6c,
	0x69, 0x63, 0x65, 0x5f, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x63, 0x61,
	0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x78,
	0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6c, 0x69, 0x63, 0x65, 0x41, 0x76, 0x61, 0x69,
	0x6c, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x48, 0x03, 0x52,
	0x16, 0x73, 0x6c, 0x69, 0x63, 0x65, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x43,
	0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x88, 0x01, 0x01, 0x12, 0x4f, 0x0a, 0x13, 0x6e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x6f, 0x66, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x75, 0x65,
	0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76,
	0x31, 0x2e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x6f, 0x66, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x55, 0x65, 0x73, 0x48, 0x04, 0x52, 0x11, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x6f, 0x66, 0x41,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x55, 0x45, 0x73, 0x88, 0x01, 0x01, 0x12, 0x45, 0x0a, 0x0f, 0x72,
	0x5f, 0x72, 0x63, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x52,
	0x72, 0x63, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x48, 0x05, 0x52,
	0x0e, 0x72, 0x52, 0x43, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x88,
	0x01, 0x01, 0x12, 0x4f, 0x0a, 0x0e, 0x69, 0x5f, 0x65, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x78, 0x6e, 0x61,
	0x70, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x45, 0x78,
	0x74, 0x49, 0x65, 0x73, 0x52, 0x0d, 0x69, 0x45, 0x2d, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x73, 0x42, 0x18, 0x0a, 0x16, 0x5f, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x5f, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x19, 0x0a,
	0x17, 0x5f, 0x74, 0x5f, 0x6e, 0x6c, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x5f, 0x69,
	0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x42, 0x25, 0x0a, 0x23, 0x5f, 0x63, 0x6f, 0x6d,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x65, 0x5f, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65,
	0x5f, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x42,
	0x1b, 0x0a, 0x19, 0x5f, 0x73, 0x6c, 0x69, 0x63, 0x65, 0x5f, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61,
	0x62, 0x6c, 0x65, 0x5f, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x42, 0x16, 0x0a, 0x14,
	0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x6f, 0x66, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x5f, 0x75, 0x65, 0x73, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x72, 0x5f, 0x72, 0x63, 0x63, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x4d, 0x0a, 0x0c, 0x43, 0x65, 0x6c, 0x6c,
	0x54, 0x6f, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x3d, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x54, 0x6f, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x74,
	0x65, 0x6d, 0x42, 0x0c, 0xfa, 0x42, 0x09, 0x92, 0x01, 0x06, 0x08, 0x01, 0x10, 0x80, 0x80, 0x01,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x46, 0x0a, 0x16, 0x43, 0x65, 0x6c, 0x6c, 0x54,
	0x6f, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x45, 0x78, 0x74, 0x49, 0x65,
	0x73, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22,
	0xe0, 0x02, 0x0a, 0x10, 0x43, 0x65, 0x6c, 0x6c, 0x54, 0x6f, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x49, 0x74, 0x65, 0x6d, 0x12, 0x34, 0x0a, 0x07, 0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x4e, 0x67, 0x52, 0x41, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x49,
	0x44, 0x52, 0x07, 0x63, 0x65, 0x6c, 0x6c, 0x2d, 0x49, 0x44, 0x12, 0x4b, 0x0a, 0x12, 0x73, 0x5f,
	0x73, 0x62, 0x74, 0x6f, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x73, 0x62, 0x74, 0x6f, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x4c, 0x69, 0x73, 0x74,
	0x48, 0x00, 0x52, 0x10, 0x73, 0x53, 0x42, 0x54, 0x6f, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2d,
	0x4c, 0x69, 0x73, 0x74, 0x88, 0x01, 0x01, 0x12, 0x51, 0x0a, 0x14, 0x73, 0x6c, 0x69, 0x63, 0x65,
	0x5f, 0x74, 0x6f, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x6c, 0x69, 0x63, 0x65, 0x54, 0x6f, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x4c, 0x69, 0x73,
	0x74, 0x48, 0x01, 0x52, 0x12, 0x73, 0x6c, 0x69, 0x63, 0x65, 0x54, 0x6f, 0x52, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x2d, 0x4c, 0x69, 0x73, 0x74, 0x88, 0x01, 0x01, 0x12, 0x46, 0x0a, 0x0e, 0x69, 0x5f,
	0x65, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x65, 0x6c,
	0x6c, 0x54, 0x6f, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x45, 0x78, 0x74,
	0x49, 0x65, 0x73, 0x52, 0x0d, 0x69, 0x45, 0x2d, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x73, 0x5f, 0x73, 0x62, 0x74, 0x6f, 0x5f, 0x72, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x73, 0x6c,
	0x69, 0x63, 0x65, 0x5f, 0x74, 0x6f, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x22, 0x44, 0x0a, 0x14, 0x43, 0x65, 0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x43, 0x68,
	0x6f, 0x69, 0x63, 0x65, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xa6, 0x02, 0x0a, 0x0e, 0x43, 0x65, 0x6c,
	0x6c, 0x54, 0x79, 0x70, 0x65, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x12, 0x42, 0x0a, 0x0d, 0x6e,
	0x67, 0x5f, 0x72, 0x61, 0x6e, 0x5f, 0x65, 0x5f, 0x75, 0x74, 0x72, 0x61, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x55, 0x54,
	0x72, 0x61, 0x43, 0x65, 0x6c, 0x6c, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x48, 0x00,
	0x52, 0x0d, 0x6e, 0x67, 0x2d, 0x72, 0x61, 0x6e, 0x2d, 0x65, 0x2d, 0x75, 0x74, 0x72, 0x61, 0x12,
	0x37, 0x0a, 0x09, 0x6e, 0x67, 0x5f, 0x72, 0x61, 0x6e, 0x5f, 0x6e, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x72, 0x43,
	0x65, 0x6c, 0x6c, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x48, 0x00, 0x52, 0x09, 0x6e,
	0x67, 0x2d, 0x72, 0x61, 0x6e, 0x2d, 0x6e, 0x72, 0x12, 0x36, 0x0a, 0x07, 0x65, 0x5f, 0x75, 0x74,
	0x72, 0x61, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x78, 0x6e, 0x61, 0x70,
	0x2e, 0x76, 0x31, 0x2e, 0x45, 0x55, 0x54, 0x72, 0x61, 0x43, 0x65, 0x6c, 0x6c, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x48, 0x00, 0x52, 0x07, 0x65, 0x2d, 0x75, 0x74, 0x72, 0x61, 0x6e,
	0x12, 0x4b, 0x0a, 0x10, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x78, 0x6e, 0x61,
	0x70, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x43, 0x68, 0x6f,
	0x69, 0x63, 0x65, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x48, 0x00, 0x52, 0x10, 0x63, 0x68, 0x6f,
	0x69, 0x63, 0x65, 0x2d, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x12, 0x0a,
	0x10, 0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x63, 0x68, 0x6f, 0x69, 0x63,
	0x65, 0x22, 0x55, 0x0a, 0x25, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x65, 0x41, 0x76,
	0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xe4, 0x02, 0x0a, 0x1f, 0x43, 0x6f, 0x6d,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x65, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x43,
	0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x76, 0x0a, 0x25,
	0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x65, 0x5f, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61,
	0x62, 0x6c, 0x65, 0x5f, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x5f, 0x64, 0x6f, 0x77,
	0x6e, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x78, 0x6e,
	0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x65, 0x41,
	0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79,
	0x52, 0x22, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x65, 0x41, 0x76, 0x61, 0x69, 0x6c,
	0x61, 0x62, 0x6c, 0x65, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x44, 0x6f, 0x77, 0x6e,
	0x6c, 0x69, 0x6e, 0x6b, 0x12, 0x72, 0x0a, 0x23, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x65, 0x5f, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x63, 0x61, 0x70, 0x61,
	0x63, 0x69, 0x74, 0x79, 0x5f, 0x75, 0x70, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x23, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x65, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x61,
	0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x52, 0x20, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x65, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69,
	0x74, 0x79, 0x55, 0x70, 0x6c, 0x69, 0x6e, 0x6b, 0x12, 0x55, 0x0a, 0x0e, 0x69, 0x5f, 0x65, 0x5f,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x2e, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x65, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x61, 0x70,
	0x61, 0x63, 0x69, 0x74, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73,
	0x52, 0x0d, 0x69, 0x45, 0x2d, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x22,
	0x50, 0x0a, 0x20, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x65, 0x41, 0x76, 0x61, 0x69,
	0x6c, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x45, 0x78, 0x74,
	0x49, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x22, 0xb9, 0x02, 0x0a, 0x1a, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x65, 0x41,
	0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79,
	0x12, 0x5f, 0x0a, 0x19, 0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74,
	0x79, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x65,
	0x6c, 0x6c, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x16, 0x63, 0x65, 0x6c, 0x6c, 0x43, 0x61, 0x70, 0x61,
	0x63, 0x69, 0x74, 0x79, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x4a, 0x0a, 0x13, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x5f, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74,
	0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x11, 0x63, 0x61, 0x70, 0x61,
	0x63, 0x69, 0x74, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x50, 0x0a,
	0x0e, 0x69, 0x5f, 0x65, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x65, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62,
	0x6c, 0x65, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73,
	0x52, 0x0d, 0x69, 0x45, 0x2d, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x42,
	0x1c, 0x0a, 0x1a, 0x5f, 0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74,
	0x79, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x47, 0x0a,
	0x17, 0x43, 0x68, 0x6f, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xa5, 0x03, 0x0a, 0x11, 0x43, 0x68, 0x6f, 0x69, 0x6e,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x35, 0x0a, 0x0b,
	0x63, 0x68, 0x6f, 0x5f, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x13, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x6f, 0x74,
	0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x52, 0x0b, 0x63, 0x68, 0x6f, 0x2d, 0x74, 0x72, 0x69, 0x67,
	0x67, 0x65, 0x72, 0x12, 0x5e, 0x0a, 0x1b, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x6e, 0x67,
	0x5f, 0x72, 0x61, 0x6e, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x75, 0x65, 0x78, 0x6e, 0x5f, 0x61, 0x70,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e,
	0x76, 0x31, 0x2e, 0x4e, 0x67, 0x52, 0x41, 0x6e, 0x6e, 0x6f, 0x64, 0x65, 0x55, 0x65, 0x78, 0x6e,
	0x41, 0x70, 0x69, 0x64, 0x48, 0x00, 0x52, 0x18, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x4e, 0x47,
	0x2d, 0x52, 0x41, 0x4e, 0x6e, 0x6f, 0x64, 0x65, 0x55, 0x45, 0x58, 0x6e, 0x41, 0x50, 0x49, 0x44,
	0x88, 0x01, 0x01, 0x12, 0x69, 0x0a, 0x22, 0x63, 0x5f, 0x68, 0x6f, 0x5f, 0x65, 0x73, 0x74, 0x69,
	0x6d, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x72, 0x72, 0x69, 0x76, 0x61, 0x6c, 0x5f, 0x70, 0x72,
	0x6f, 0x62, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x6f, 0x50, 0x72, 0x6f,
	0x62, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x48, 0x01, 0x52, 0x1f, 0x63, 0x48, 0x4f, 0x2d,
	0x45, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x41, 0x72, 0x72, 0x69, 0x76, 0x61, 0x6c,
	0x50, 0x72, 0x6f, 0x62, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x88, 0x01, 0x01, 0x12, 0x47,
	0x0a, 0x0e, 0x69, 0x5f, 0x65, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x68, 0x6f, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x52, 0x0d, 0x69, 0x45, 0x2d, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x1e, 0x0a, 0x1c, 0x5f, 0x74, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x5f, 0x6e, 0x67, 0x5f, 0x72, 0x61, 0x6e, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x75, 0x65,
	0x78, 0x6e, 0x5f, 0x61, 0x70, 0x69, 0x64, 0x42, 0x25, 0x0a, 0x23, 0x5f, 0x63, 0x5f, 0x68, 0x6f,
	0x5f, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x72, 0x72, 0x69, 0x76,
	0x61, 0x6c, 0x5f, 0x70, 0x72, 0x6f, 0x62, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x22, 0x47,
	0x0a, 0x17, 0x43, 0x68, 0x6f, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x41, 0x63, 0x6b, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x9b, 0x02, 0x0a, 0x11, 0x43, 0x68, 0x6f, 0x69,
	0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x63, 0x6b, 0x12, 0x58, 0x0a,
	0x1f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x5f, 0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31,
	0x2e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x43, 0x47, 0x69, 0x52, 0x1b, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x65, 0x64, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x43, 0x65, 0x6c, 0x6c, 0x47,
	0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x49, 0x44, 0x12, 0x4d, 0x0a, 0x11, 0x6d, 0x61, 0x78, 0x5f, 0x63,
	0x68, 0x6f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x78,
	0x43, 0x68, 0x6f, 0x70, 0x72, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x48,
	0x00, 0x52, 0x10, 0x6d, 0x61, 0x78, 0x43, 0x48, 0x4f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x88, 0x01, 0x01, 0x12, 0x47, 0x0a, 0x0e, 0x69, 0x5f, 0x65, 0x5f, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x6f, 0x69, 0x6e, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x63, 0x6b, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73,
	0x52, 0x0d, 0x69, 0x45, 0x2d, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x42,
	0x14, 0x0a, 0x12, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x63, 0x68, 0x6f, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x31, 0x0a, 0x0e, 0x43, 0x68, 0x6f, 0x50, 0x72, 0x6f, 0x62,
	0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x1f, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x09, 0xfa, 0x42, 0x06, 0x1a, 0x04, 0x18, 0x64, 0x28,
	0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x49, 0x0a, 0x19, 0x43, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x45,
	0x78, 0x74, 0x49, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x22, 0xae, 0x01, 0x0a, 0x13, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x76, 0x69, 0x74, 0x79, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x4c, 0x0a, 0x0d, 0x65,
	0x5f, 0x6e, 0x64, 0x63, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x27, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6e, 0x64,
	0x63, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x76, 0x69, 0x74, 0x79, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x0c, 0x65, 0x4e, 0x44,
	0x43, 0x2d, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x49, 0x0a, 0x0e, 0x69, 0x5f, 0x65,
	0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x45,
	0x78, 0x74, 0x49, 0x65, 0x73, 0x52, 0x0d, 0x69, 0x45, 0x2d, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x22, 0x43, 0x0a, 0x13, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x44, 0x63,
	0x70, 0x53, 0x4e, 0x31, 0x32, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x98, 0x01, 0x0a, 0x0d, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x50, 0x44, 0x63, 0x70, 0x53, 0x4e, 0x31, 0x32, 0x12, 0x1c, 0x0a, 0x09, 0x70,
	0x64, 0x63, 0x70, 0x5f, 0x73, 0x6e, 0x31, 0x32, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09,
	0x70, 0x64, 0x63, 0x70, 0x2d, 0x53, 0x4e, 0x31, 0x32, 0x12, 0x24, 0x0a, 0x0d, 0x68, 0x66, 0x6e,
	0x5f, 0x70, 0x64, 0x63, 0x70, 0x5f, 0x73, 0x6e, 0x31, 0x32, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0d, 0x68, 0x66, 0x6e, 0x2d, 0x50, 0x44, 0x43, 0x50, 0x2d, 0x53, 0x4e, 0x31, 0x32, 0x12,
	0x43, 0x0a, 0x0e, 0x69, 0x5f, 0x65, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x44, 0x63, 0x70, 0x53, 0x4e, 0x31, 0x32, 0x45,
	0x78, 0x74, 0x49, 0x65, 0x73, 0x52, 0x0d, 0x69, 0x45, 0x2d, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x22, 0x43, 0x0a, 0x13, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x44, 0x63,
	0x70, 0x53, 0x4e, 0x31, 0x38, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x98, 0x01, 0x0a, 0x0d, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x50, 0x44, 0x63, 0x70, 0x53, 0x4e, 0x31, 0x38, 0x12, 0x1c, 0x0a, 0x09, 0x70,
	0x64, 0x63, 0x70, 0x5f, 0x73, 0x6e, 0x31, 0x38, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09,
	0x70, 0x64, 0x63, 0x70, 0x2d, 0x53, 0x4e, 0x31, 0x38, 0x12, 0x24, 0x0a, 0x0d, 0x68, 0x66, 0x6e,
	0x5f, 0x70, 0x64, 0x63, 0x70, 0x5f, 0x73, 0x6e, 0x31, 0x38, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0d, 0x68, 0x66, 0x6e, 0x2d, 0x50, 0x44, 0x43, 0x50, 0x2d, 0x53, 0x4e, 0x31, 0x38, 0x12,
	0x43, 0x0a, 0x0e, 0x69, 0x5f, 0x65, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x44, 0x63, 0x70, 0x53, 0x4e, 0x31, 0x38, 0x45,
	0x78, 0x74, 0x49, 0x65, 0x73, 0x52, 0x0d, 0x69, 0x45, 0x2d, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x22, 0x51, 0x0a, 0x21, 0x43, 0x70, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70,
	0x6f, 0x72, 0x74, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xe9, 0x01, 0x0a, 0x1b, 0x43, 0x70, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4f, 0x0a, 0x12, 0x65, 0x6e, 0x64, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x5f, 0x69, 0x70, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x48, 0x00, 0x52, 0x11, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x49,
	0x50, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x58, 0x0a, 0x10, 0x63, 0x68, 0x6f, 0x69,
	0x63, 0x65, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x70, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x48, 0x00,
	0x52, 0x10, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x2d, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x42, 0x1f, 0x0a, 0x1d, 0x63, 0x70, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72,
	0x74, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x22, 0x4c, 0x0a, 0x1c, 0x43, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x69,
	0x74, 0x79, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x73, 0x45, 0x78, 0x74,
	0x49, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x22, 0x9c, 0x04, 0x0a, 0x16, 0x43, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x69, 0x74,
	0x79, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x42, 0x0a, 0x0e,
	0x70, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x50,
	0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x48, 0x00, 0x52, 0x0d,
	0x70, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x4e, 0x0a, 0x12, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x78,
	0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x69, 0x6e,
	0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x01, 0x52, 0x11, 0x74, 0x72, 0x69, 0x67,
	0x67, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x4e, 0x0a, 0x15, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x5f, 0x63, 0x72,
	0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x14, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x69, 0x74, 0x69, 0x63,
	0x61, 0x6c, 0x69, 0x74, 0x79, 0x48, 0x02, 0x52, 0x14, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75,
	0x72, 0x65, 0x43, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x88, 0x01, 0x01,
	0x12, 0x6b, 0x0a, 0x1c, 0x69, 0x5f, 0x65, 0x73, 0x5f, 0x63, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61,
	0x6c, 0x69, 0x74, 0x79, 0x5f, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x73,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x44, 0x69, 0x61, 0x67,
	0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x73, 0x49, 0x45, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x03, 0x52,
	0x19, 0x69, 0x45, 0x73, 0x43, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x44,
	0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x73, 0x88, 0x01, 0x01, 0x12, 0x4c, 0x0a,
	0x0e, 0x69, 0x5f, 0x65, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x44, 0x69, 0x61, 0x67, 0x6e,
	0x6f, 0x73, 0x74, 0x69, 0x63, 0x73, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x52, 0x0d, 0x69, 0x45,
	0x2d, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x11, 0x0a, 0x0f, 0x5f,
	0x70, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x42, 0x15,
	0x0a, 0x13, 0x5f, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x18, 0x0a, 0x16, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x64,
	0x75, 0x72, 0x65, 0x5f, 0x63, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x42,
	0x1f, 0x0a, 0x1d, 0x5f, 0x69, 0x5f, 0x65, 0x73, 0x5f, 0x63, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61,
	0x6c, 0x69, 0x74, 0x79, 0x5f, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x73,
	0x22, 0x52, 0x0a, 0x22, 0x43, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x44,
	0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x73, 0x49, 0x45, 0x4c, 0x69, 0x73, 0x74,
	0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x22, 0x9d, 0x02, 0x0a, 0x22, 0x4e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x43,
	0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f,
	0x73, 0x74, 0x69, 0x63, 0x73, 0x49, 0x45, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x3b, 0x0a, 0x0e, 0x69,
	0x5f, 0x65, 0x63, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72,
	0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x0d, 0x69, 0x45, 0x43, 0x72, 0x69,
	0x74, 0x69, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x2c, 0x0a, 0x06, 0x69, 0x5f, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e,
	0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x49, 0x65, 0x49, 0x44, 0x52,
	0x05, 0x69, 0x45, 0x2d, 0x49, 0x44, 0x12, 0x38, 0x0a, 0x0d, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6f,
	0x66, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e,
	0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x4f, 0x66, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x52, 0x0b, 0x74, 0x79, 0x70, 0x65, 0x4f, 0x66, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x12, 0x52, 0x0a, 0x0e, 0x69, 0x5f, 0x65, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x44, 0x69,
	0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x73, 0x49, 0x45, 0x4c, 0x69, 0x73, 0x74, 0x45,
	0x78, 0x74, 0x49, 0x65, 0x73, 0x52, 0x0d, 0x69, 0x45, 0x2d, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x22, 0x6e, 0x0a, 0x1c, 0x43, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c,
	0x69, 0x74, 0x79, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x73, 0x49, 0x45,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x4e, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x65,
	0x73, 0x74, 0x65, 0x64, 0x43, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x44,
	0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x73, 0x49, 0x45, 0x4c, 0x69, 0x73, 0x74,
	0x42, 0x0b, 0xfa, 0x42, 0x08, 0x92, 0x01, 0x05, 0x08, 0x01, 0x10, 0x80, 0x02, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x22, 0x31, 0x0a, 0x05, 0x43, 0x52, 0x4e, 0x74, 0x69, 0x12, 0x28, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x61,
	0x73, 0x6e, 0x31, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x69, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x6e, 0x0a, 0x1f, 0x58, 0x6e, 0x55, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x70, 0x65, 0x72, 0x50, 0x64, 0x75, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x4b, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x78, 0x6e, 0x61, 0x70,
	0x2e, 0x76, 0x31, 0x2e, 0x58, 0x6e, 0x55, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x49, 0x6e,
	0x66, 0x6f, 0x70, 0x65, 0x72, 0x50, 0x64, 0x75, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49,
	0x74, 0x65, 0x6d, 0x42, 0x0b, 0xfa, 0x42, 0x08, 0x92, 0x01, 0x05, 0x08, 0x01, 0x10, 0x80, 0x02,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xe7, 0x03, 0x0a, 0x2e, 0x58, 0x6e, 0x55, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x70, 0x65, 0x72, 0x50, 0x64, 0x75,
	0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x74, 0x65, 0x6d, 0x45, 0x78, 0x74, 0x49, 0x65,
	0x73, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x9e, 0x01, 0x0a, 0x31, 0x69,
	0x64, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x64, 0x61, 0x74, 0x61, 0x5f,
	0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f,
	0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x64, 0x61, 0x74, 0x61, 0x46, 0x6f,
	0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x46, 0x72, 0x6f, 0x6d,
	0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x00, 0x52, 0x2d, 0x69, 0x64,
	0x2d, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x64, 0x61, 0x74, 0x61, 0x46, 0x6f,
	0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x46, 0x72, 0x6f, 0x6d,
	0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x2d, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x4c, 0x0a, 0x17, 0x69,
	0x64, 0x5f, 0x64, 0x72, 0x62, 0x5f, 0x69, 0x64, 0x73, 0x5f, 0x74, 0x61, 0x6b, 0x65, 0x6e, 0x69,
	0x6e, 0x74, 0x6f, 0x75, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x78,
	0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x72, 0x62, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x00,
	0x52, 0x17, 0x69, 0x64, 0x2d, 0x44, 0x52, 0x42, 0x2d, 0x49, 0x44, 0x73, 0x2d, 0x74, 0x61, 0x6b,
	0x65, 0x6e, 0x69, 0x6e, 0x74, 0x6f, 0x75, 0x73, 0x65, 0x12, 0x96, 0x01, 0x0a, 0x2f, 0x69, 0x64,
	0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67,
	0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x5f, 0x65, 0x5f, 0x75, 0x74, 0x72, 0x61, 0x6e, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61,
	0x74, 0x61, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f,
	0x46, 0x72, 0x6f, 0x6d, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x45, 0x55, 0x54, 0x72, 0x61, 0x6e,
	0x6e, 0x6f, 0x64, 0x65, 0x48, 0x00, 0x52, 0x2a, 0x69, 0x64, 0x2d, 0x64, 0x61, 0x74, 0x61, 0x46,
	0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x46, 0x72, 0x6f,
	0x6d, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x45, 0x2d, 0x55, 0x54, 0x52, 0x41, 0x4e, 0x6e, 0x6f,
	0x64, 0x65, 0x42, 0x2d, 0x0a, 0x2b, 0x78, 0x6e, 0x5f, 0x75, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x70, 0x65, 0x72, 0x5f, 0x70, 0x64, 0x75, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x65, 0x78, 0x74, 0x5f, 0x69, 0x65,
	0x73, 0x22, 0xe0, 0x01, 0x0a, 0x25, 0x58, 0x6e, 0x55, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x49, 0x6e, 0x66, 0x6f, 0x70, 0x65, 0x72, 0x50, 0x64, 0x75, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x49, 0x74, 0x65, 0x6d, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76,
	0x31, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x49, 0x65, 0x49, 0x44, 0x52, 0x03,
	0x26, 0x69, 0x64, 0x12, 0x37, 0x0a, 0x0b, 0x63, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x69,
	0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x0c,
	0x26, 0x63, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x56, 0x0a, 0x09,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x37, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x58, 0x6e, 0x55, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x70, 0x65, 0x72, 0x50, 0x64, 0x75, 0x73, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x74, 0x65, 0x6d, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x26, 0x45, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x22, 0xd3, 0x04, 0x0a, 0x1f, 0x58, 0x6e, 0x55, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x70, 0x65, 0x72, 0x50, 0x64, 0x75, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x3c, 0x0a, 0x0e, 0x70, 0x64, 0x75, 0x5f,
	0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x64, 0x75, 0x73, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x52, 0x0d, 0x70, 0x64, 0x75, 0x53, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x2d, 0x49, 0x44, 0x12, 0x8e, 0x01, 0x0a, 0x2a, 0x64, 0x61, 0x74, 0x61, 0x5f,
	0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f,
	0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x6e, 0x67, 0x72, 0x61,
	0x6e, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x78, 0x6e,
	0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72,
	0x64, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x46, 0x72, 0x6f, 0x6d, 0x54, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x4e, 0x67, 0x72, 0x61, 0x6e, 0x6e, 0x6f, 0x64, 0x65, 0x48, 0x00, 0x52, 0x25, 0x64,
	0x61, 0x74, 0x61, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66,
	0x6f, 0x46, 0x72, 0x6f, 0x6d, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x4e, 0x47, 0x52, 0x41, 0x4e,
	0x6e, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0xa8, 0x01, 0x0a, 0x2f, 0x70, 0x64, 0x75, 0x5f,
	0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x5f, 0x73, 0x65, 0x74, 0x75, 0x70, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x5f,
	0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x73, 0x6e, 0x74, 0x65, 0x72, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x3e, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x64, 0x75, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x42, 0x65,
	0x61, 0x72, 0x65, 0x72, 0x53, 0x65, 0x74, 0x75, 0x70, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x53, 0x4e, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65,
	0x64, 0x48, 0x01, 0x52, 0x2a, 0x70, 0x64, 0x75, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x65, 0x74, 0x75, 0x70, 0x43, 0x6f, 0x6d, 0x70,
	0x6c, 0x65, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x2d, 0x53, 0x4e, 0x74, 0x65, 0x72, 0x6d, 0x88,
	0x01, 0x01, 0x12, 0x53, 0x0a, 0x0d, 0x69, 0x5f, 0x65, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x78, 0x6e, 0x61, 0x70,
	0x2e, 0x76, 0x31, 0x2e, 0x58, 0x6e, 0x55, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x49, 0x6e,
	0x66, 0x6f, 0x70, 0x65, 0x72, 0x50, 0x64, 0x75, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49,
	0x74, 0x65, 0x6d, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x52, 0x0c, 0x69, 0x45, 0x2d, 0x45, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x2d, 0x0a, 0x2b, 0x5f, 0x64, 0x61, 0x74, 0x61,
	0x5f, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6e, 0x66, 0x6f,
	0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x6e, 0x67, 0x72,
	0x61, 0x6e, 0x6e, 0x6f, 0x64, 0x65, 0x42, 0x32, 0x0a, 0x30, 0x5f, 0x70, 0x64, 0x75, 0x5f, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f,
	0x73, 0x65, 0x74, 0x75, 0x70, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x69,
	0x6e, 0x66, 0x6f, 0x5f, 0x73, 0x6e, 0x74, 0x65, 0x72, 0x6d, 0x22, 0x5c, 0x0a, 0x2c, 0x44, 0x61,
	0x74, 0x61, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f,
	0x46, 0x72, 0x6f, 0x6d, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x45, 0x55, 0x54, 0x72, 0x61, 0x6e,
	0x6e, 0x6f, 0x64, 0x65, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xa3, 0x02, 0x0a, 0x26, 0x44, 0x61, 0x74,
	0x61, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x46,
	0x72, 0x6f, 0x6d, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x45, 0x55, 0x54, 0x72, 0x61, 0x6e, 0x6e,
	0x6f, 0x64, 0x65, 0x12, 0x9c, 0x01, 0x0a, 0x31, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x66, 0x6f, 0x72,
	0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x66, 0x72, 0x6f,
	0x6d, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x65, 0x5f, 0x75, 0x74, 0x72, 0x61, 0x6e,
	0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x33, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x46, 0x6f,
	0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x46, 0x72, 0x6f, 0x6d,
	0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x45, 0x55, 0x54, 0x72, 0x61, 0x6e, 0x6e, 0x6f, 0x64, 0x65,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x2c, 0x64, 0x61, 0x74, 0x61, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72,
	0x64, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x46, 0x72, 0x6f, 0x6d, 0x54, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x45, 0x2d, 0x55, 0x54, 0x52, 0x41, 0x4e, 0x6e, 0x6f, 0x64, 0x65, 0x2d, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x5a, 0x0a, 0x0d, 0x69, 0x5f, 0x65, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x78, 0x6e, 0x61, 0x70,
	0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69,
	0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x46, 0x72, 0x6f, 0x6d, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x45, 0x55, 0x54, 0x72, 0x61, 0x6e, 0x6e, 0x6f, 0x64, 0x65, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73,
	0x52, 0x0c, 0x69, 0x45, 0x2d, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x84,
	0x01, 0x0a, 0x2a, 0x44, 0x61, 0x74, 0x61, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e,
	0x67, 0x49, 0x6e, 0x66, 0x6f, 0x46, 0x72, 0x6f, 0x6d, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x45,
	0x55, 0x54, 0x72, 0x61, 0x6e, 0x6e, 0x6f, 0x64, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x56, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x78,
	0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x46, 0x6f, 0x72, 0x77, 0x61,
	0x72, 0x64, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x46, 0x72, 0x6f, 0x6d, 0x54, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x45, 0x55, 0x54, 0x72, 0x61, 0x6e, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x74, 0x65,
	0x6d, 0x42, 0x0b, 0xfa, 0x42, 0x08, 0x92, 0x01, 0x05, 0x08, 0x01, 0x10, 0x80, 0x02, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x60, 0x0a, 0x30, 0x44, 0x61, 0x74, 0x61, 0x46, 0x6f, 0x72,
	0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x46, 0x72, 0x6f, 0x6d, 0x54,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x45, 0x55, 0x54, 0x72, 0x61, 0x6e, 0x6e, 0x6f, 0x64, 0x65, 0x49,
	0x74, 0x65, 0x6d, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xe0, 0x02, 0x0a, 0x2a, 0x44, 0x61, 0x74, 0x61,
	0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x46, 0x72,
	0x6f, 0x6d, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x45, 0x55, 0x54, 0x72, 0x61, 0x6e, 0x6e, 0x6f,
	0x64, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x6a, 0x0a, 0x1e, 0x64, 0x6c, 0x5f, 0x66, 0x6f, 0x72,
	0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x75, 0x70, 0x74, 0x6e, 0x6c, 0x69, 0x6e, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24,
	0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x70, 0x6f, 0x72, 0x74, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x1c, 0x64, 0x6c, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69,
	0x6e, 0x67, 0x55, 0x50, 0x54, 0x4e, 0x4c, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x66, 0x0a, 0x1e, 0x71, 0x6f, 0x73, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x5f,
	0x74, 0x6f, 0x5f, 0x62, 0x65, 0x5f, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x64, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x78, 0x6e, 0x61,
	0x70, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x6f, 0x53, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x54, 0x6f, 0x42,
	0x65, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x1a,
	0x71, 0x6f, 0x73, 0x46, 0x6c, 0x6f, 0x77, 0x73, 0x54, 0x6f, 0x42, 0x65, 0x46, 0x6f, 0x72, 0x77,
	0x61, 0x72, 0x64, 0x65, 0x64, 0x2d, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x5e, 0x0a, 0x0d, 0x69, 0x5f,
	0x65, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x39, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x74, 0x61,
	0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x46, 0x72,
	0x6f, 0x6d, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x45, 0x55, 0x54, 0x72, 0x61, 0x6e, 0x6e, 0x6f,
	0x64, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x52, 0x0c, 0x69, 0x45,
	0x2d, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x61, 0x0a, 0x19, 0x51, 0x6f,
	0x53, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x54, 0x6f, 0x42, 0x65, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72,
	0x64, 0x65, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x44, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31,
	0x2e, 0x51, 0x6f, 0x53, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x54, 0x6f, 0x42, 0x65, 0x46, 0x6f, 0x72,
	0x77, 0x61, 0x72, 0x64, 0x65, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x92,
	0x01, 0x04, 0x08, 0x01, 0x10, 0x40, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x4f, 0x0a,
	0x1f, 0x51, 0x6f, 0x53, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x54, 0x6f, 0x42, 0x65, 0x46, 0x6f, 0x72,
	0x77, 0x61, 0x72, 0x64, 0x65, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73,
	0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xb6,
	0x01, 0x0a, 0x19, 0x51, 0x6f, 0x53, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x54, 0x6f, 0x42, 0x65, 0x46,
	0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x4a, 0x0a, 0x13,
	0x71, 0x6f, 0x73, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x78, 0x6e, 0x61, 0x70,
	0x2e, 0x76, 0x31, 0x2e, 0x51, 0x6f, 0x53, 0x66, 0x6c, 0x6f, 0x77, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x11, 0x71, 0x6f, 0x73, 0x46, 0x6c, 0x6f, 0x77, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x4d, 0x0a, 0x0d, 0x69, 0x5f, 0x65, 0x5f,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x28, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x6f, 0x53, 0x66, 0x6c, 0x6f,
	0x77, 0x73, 0x54, 0x6f, 0x42, 0x65, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x64, 0x49,
	0x74, 0x65, 0x6d, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x52, 0x0c, 0x69, 0x45, 0x2d, 0x45, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x5b, 0x0a, 0x2b, 0x44, 0x61, 0x74, 0x61, 0x46,
	0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x46, 0x72, 0x6f,
	0x6d, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x4e, 0x67, 0x72, 0x61, 0x6e, 0x6e, 0x6f, 0x64, 0x65,
	0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x22, 0x9a, 0x06, 0x0a, 0x25, 0x44, 0x61, 0x74, 0x61, 0x46, 0x6f, 0x72,
	0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x46, 0x72, 0x6f, 0x6d, 0x54,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x4e, 0x67, 0x72, 0x61, 0x6e, 0x6e, 0x6f, 0x64, 0x65, 0x12, 0x87,
	0x01, 0x0a, 0x2b, 0x71, 0x6f, 0x73, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x5f, 0x61, 0x63, 0x63,
	0x65, 0x70, 0x74, 0x65, 0x64, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x66,
	0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x51,
	0x6f, 0x53, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64, 0x54,
	0x6f, 0x42, 0x65, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x64, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x26, 0x71, 0x6f, 0x73, 0x46, 0x6c, 0x6f, 0x77, 0x73, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74,
	0x65, 0x64, 0x46, 0x6f, 0x72, 0x44, 0x61, 0x74, 0x61, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64,
	0x69, 0x6e, 0x67, 0x2d, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x80, 0x01, 0x0a, 0x28, 0x70, 0x64, 0x75,
	0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x64,
	0x6c, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67,
	0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x78, 0x6e,
	0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72,
	0x74, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x48, 0x00, 0x52, 0x23, 0x70, 0x64, 0x75, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4c,
	0x65, 0x76, 0x65, 0x6c, 0x44, 0x4c, 0x44, 0x61, 0x74, 0x61, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72,
	0x64, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x80, 0x01, 0x0a, 0x28,
	0x70, 0x64, 0x75, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x65, 0x76, 0x65,
	0x6c, 0x5f, 0x75, 0x6c, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64,
	0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24,
	0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x70, 0x6f, 0x72, 0x74, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x48, 0x01, 0x52, 0x23, 0x70, 0x64, 0x75, 0x53, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x55, 0x4c, 0x44, 0x61, 0x74, 0x61, 0x46, 0x6f, 0x72,
	0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x81,
	0x01, 0x0a, 0x25, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69,
	0x6e, 0x67, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x64, 0x72, 0x62, 0x69,
	0x74, 0x65, 0x6d, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a,
	0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x46, 0x6f, 0x72,
	0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x44,
	0x72, 0x62, 0x69, 0x74, 0x65, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x02, 0x52, 0x21, 0x64, 0x61,
	0x74, 0x61, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x44, 0x52, 0x42, 0x49, 0x74, 0x65, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x88,
	0x01, 0x01, 0x12, 0x59, 0x0a, 0x0d, 0x69, 0x5f, 0x65, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x78, 0x6e, 0x61, 0x70,
	0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69,
	0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x46, 0x72, 0x6f, 0x6d, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x4e, 0x67, 0x72, 0x61, 0x6e, 0x6e, 0x6f, 0x64, 0x65, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x52,
	0x0c, 0x69, 0x45, 0x2d, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x2b, 0x0a,
	0x29, 0x5f, 0x70, 0x64, 0x75, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x65,
	0x76, 0x65, 0x6c, 0x5f, 0x64, 0x6c, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x66, 0x6f, 0x72, 0x77, 0x61,
	0x72, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x42, 0x2b, 0x0a, 0x29, 0x5f, 0x70,
	0x64, 0x75, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c,
	0x5f, 0x75, 0x6c, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69,
	0x6e, 0x67, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x42, 0x28, 0x0a, 0x26, 0x5f, 0x64, 0x61, 0x74, 0x61,
	0x5f, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x64, 0x72, 0x62, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x22, 0x71, 0x0a, 0x21, 0x51, 0x6f, 0x53, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x41, 0x63, 0x63,
	0x65, 0x70, 0x74, 0x65, 0x64, 0x54, 0x6f, 0x42, 0x65, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64,
	0x65, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x4c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e,
	0x51, 0x6f, 0x53, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64,
	0x54, 0x6f, 0x42, 0x65, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x64, 0x49, 0x74, 0x65,
	0x6d, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x92, 0x01, 0x04, 0x08, 0x01, 0x10, 0x40, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x22, 0x57, 0x0a, 0x27, 0x51, 0x6f, 0x53, 0x66, 0x6c, 0x6f, 0x77, 0x73,
	0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64, 0x54, 0x6f, 0x42, 0x65, 0x46, 0x6f, 0x72, 0x77,
	0x61, 0x72, 0x64, 0x65, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x12,
	0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xc6, 0x01,
	0x0a, 0x21, 0x51, 0x6f, 0x53, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74,
	0x65, 0x64, 0x54, 0x6f, 0x42, 0x65, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x64, 0x49,
	0x74, 0x65, 0x6d, 0x12, 0x4a, 0x0a, 0x13, 0x71, 0x6f, 0x73, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x5f,
	0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x6f, 0x53, 0x66, 0x6c,
	0x6f, 0x77, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x11, 0x71, 0x6f,
	0x73, 0x46, 0x6c, 0x6f, 0x77, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12,
	0x55, 0x0a, 0x0d, 0x69, 0x5f, 0x65, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31,
	0x2e, 0x51, 0x6f, 0x53, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65,
	0x64, 0x54, 0x6f, 0x42, 0x65, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x64, 0x49, 0x74,
	0x65, 0x6d, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x52, 0x0c, 0x69, 0x45, 0x2d, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x5f, 0x0a, 0x2f, 0x44, 0x61, 0x74, 0x61, 0x66, 0x6f,
	0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x61, 0x6e, 0x64, 0x4f, 0x66, 0x66, 0x6c, 0x6f,
	0x61, 0x64, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x66, 0x72, 0x6f, 0x6d, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xf4, 0x02, 0x0a, 0x29, 0x44, 0x61, 0x74, 0x61,
	0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x61, 0x6e, 0x64, 0x4f, 0x66, 0x66,
	0x6c, 0x6f, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x66, 0x72, 0x6f, 0x6d, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x5d, 0x0a, 0x19, 0x71, 0x6f, 0x73, 0x5f, 0x66, 0x6c, 0x6f,
	0x77, 0x73, 0x5f, 0x74, 0x6f, 0x5f, 0x62, 0x65, 0x5f, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64,
	0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e,
	0x76, 0x31, 0x2e, 0x51, 0x6f, 0x53, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x54, 0x6f, 0x42, 0x65, 0x46,
	0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x31, 0x52, 0x15, 0x71,
	0x6f, 0x73, 0x46, 0x6c, 0x6f, 0x77, 0x73, 0x54, 0x6f, 0x42, 0x65, 0x46, 0x6f, 0x72, 0x77, 0x61,
	0x72, 0x64, 0x65, 0x64, 0x12, 0x67, 0x0a, 0x1d, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x64,
	0x72, 0x62, 0x74, 0x6f, 0x5f, 0x71, 0x6f, 0x5f, 0x73, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x6d, 0x61,
	0x70, 0x70, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x78, 0x6e,
	0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x72, 0x62, 0x74, 0x6f, 0x51, 0x6f, 0x53, 0x66, 0x6c,
	0x6f, 0x77, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x00, 0x52,
	0x19, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x44, 0x52, 0x42, 0x74, 0x6f, 0x51, 0x6f, 0x53, 0x46,
	0x6c, 0x6f, 0x77, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x88, 0x01, 0x01, 0x12, 0x5d, 0x0a,
	0x0d, 0x69, 0x5f, 0x65, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x44,
	0x61, 0x74, 0x61, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x61, 0x6e, 0x64,
	0x4f, 0x66, 0x66, 0x6c, 0x6f, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x66, 0x72,
	0x6f, 0x6d, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x52, 0x0c,
	0x69, 0x45, 0x2d, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x20, 0x0a, 0x1e,
	0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x64, 0x72, 0x62, 0x74, 0x6f, 0x5f, 0x71, 0x6f,
	0x5f, 0x73, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x22, 0x63,
	0x0a, 0x1a, 0x51, 0x6f, 0x53, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x54, 0x6f, 0x42, 0x65, 0x46, 0x6f,
	0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x31, 0x12, 0x45, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x78, 0x6e,
	0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x6f, 0x53, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x54, 0x6f,
	0x42, 0x65, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x31,
	0x42, 0x0a, 0xfa, 0x42, 0x07, 0x92, 0x01, 0x04, 0x08, 0x01, 0x10, 0x40, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x22, 0x91, 0x03, 0x0a, 0x28, 0x51, 0x6f, 0x53, 0x66, 0x6c, 0x6f, 0x77, 0x73,
	0x54, 0x6f, 0x42, 0x65, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x64, 0x49, 0x74, 0x65,
	0x6d, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x5a, 0x0a, 0x18, 0x69, 0x64, 0x5f, 0x75, 0x6c, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64,
	0x69, 0x6e, 0x67, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x6c, 0x66,
	0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61,
	0x6c, 0x48, 0x00, 0x52, 0x17, 0x69, 0x64, 0x2d, 0x55, 0x4c, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72,
	0x64, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x12, 0x6a, 0x0a, 0x20,
	0x69, 0x64, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x64, 0x6c, 0x66, 0x6f, 0x72, 0x77,
	0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x70, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31,
	0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x48, 0x00, 0x52, 0x1e, 0x69, 0x64, 0x2d, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x44, 0x4c, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x49,
	0x50, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x73, 0x0a, 0x25, 0x69, 0x64, 0x5f, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x64, 0x6c, 0x66, 0x6f, 0x72,
	0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x70, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76,
	0x31, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x4c, 0x61, 0x79, 0x65, 0x72,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x48, 0x00, 0x52, 0x22, 0x69, 0x64, 0x2d, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x44, 0x4c, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72,
	0x64, 0x69, 0x6e, 0x67, 0x49, 0x50, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x42, 0x28, 0x0a,
	0x26, 0x71, 0x6f, 0x5f, 0x73, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x5f, 0x74, 0x6f, 0x5f, 0x62, 0x65,
	0x5f, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x64, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f,
	0x65, 0x78, 0x74, 0x5f, 0x69, 0x65, 0x73, 0x22, 0xc1, 0x02, 0x0a, 0x1a, 0x51, 0x6f, 0x53, 0x66,
	0x6c, 0x6f, 0x77, 0x73, 0x54, 0x6f, 0x42, 0x65, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65,
	0x64, 0x49, 0x74, 0x65, 0x6d, 0x31, 0x12, 0x4a, 0x0a, 0x13, 0x71, 0x6f, 0x73, 0x5f, 0x66, 0x6c,
	0x6f, 0x77, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x6f,
	0x53, 0x66, 0x6c, 0x6f, 0x77, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52,
	0x11, 0x71, 0x6f, 0x73, 0x46, 0x6c, 0x6f, 0x77, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x12, 0x43, 0x0a, 0x11, 0x64, 0x6c, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x66, 0x6f, 0x72,
	0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e,
	0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x6c, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72,
	0x64, 0x69, 0x6e, 0x67, 0x52, 0x11, 0x64, 0x6c, 0x2d, 0x64, 0x61, 0x74, 0x61, 0x66, 0x6f, 0x72,
	0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x43, 0x0a, 0x11, 0x75, 0x6c, 0x5f, 0x64, 0x61,
	0x74, 0x61, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x15, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x6c, 0x66,
	0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x11, 0x75, 0x6c, 0x2d, 0x64, 0x61,
	0x74, 0x61, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x4d, 0x0a, 0x0d,
	0x69, 0x5f, 0x65, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x6f,
	0x53, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x54, 0x6f, 0x42, 0x65, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72,
	0x64, 0x65, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x52, 0x0c, 0x69,
	0x45, 0x2d, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x6d, 0x0a, 0x21, 0x44,
	0x61, 0x74, 0x61, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x44, 0x72, 0x62, 0x69, 0x74, 0x65, 0x6d, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x48, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x26, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x46, 0x6f,
	0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x44, 0x72, 0x62, 0x69, 0x74, 0x65, 0x6d, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x92, 0x01, 0x04, 0x08,
	0x01, 0x10, 0x20, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x53, 0x0a, 0x23, 0x44, 0x61,
	0x74, 0x61, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x44, 0x72, 0x62, 0x69, 0x74, 0x65, 0x6d, 0x45, 0x78, 0x74, 0x49, 0x65,
	0x73, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22,
	0x80, 0x03, 0x0a, 0x1d, 0x44, 0x61, 0x74, 0x61, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69,
	0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x44, 0x72, 0x62, 0x69, 0x74, 0x65,
	0x6d, 0x12, 0x26, 0x0a, 0x06, 0x64, 0x72, 0x62, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0e, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x72, 0x62, 0x49,
	0x44, 0x52, 0x06, 0x64, 0x72, 0x62, 0x2d, 0x49, 0x44, 0x12, 0x59, 0x0a, 0x13, 0x64, 0x6c, 0x5f,
	0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x75, 0x70, 0x74, 0x6e, 0x6c,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31,
	0x2e, 0x55, 0x70, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x4c, 0x61, 0x79, 0x65,
	0x72, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x11,
	0x64, 0x6c, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x55, 0x50, 0x54, 0x4e,
	0x4c, 0x88, 0x01, 0x01, 0x12, 0x59, 0x0a, 0x13, 0x75, 0x6c, 0x5f, 0x66, 0x6f, 0x72, 0x77, 0x61,
	0x72, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x75, 0x70, 0x74, 0x6e, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x24, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x01, 0x52, 0x11, 0x75, 0x6c, 0x46, 0x6f, 0x72,
	0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x55, 0x50, 0x54, 0x4e, 0x4c, 0x88, 0x01, 0x01, 0x12,
	0x51, 0x0a, 0x0d, 0x69, 0x5f, 0x65, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31,
	0x2e, 0x44, 0x61, 0x74, 0x61, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x44, 0x72, 0x62, 0x69, 0x74, 0x65, 0x6d, 0x45, 0x78,
	0x74, 0x49, 0x65, 0x73, 0x52, 0x0c, 0x69, 0x45, 0x2d, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x64, 0x6c, 0x5f, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72,
	0x64, 0x69, 0x6e, 0x67, 0x5f, 0x75, 0x70, 0x74, 0x6e, 0x6c, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x75,
	0x6c, 0x5f, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x75, 0x70, 0x74,
	0x6e, 0x6c, 0x22, 0x40, 0x0a, 0x14, 0x44, 0x61, 0x74, 0x61, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69,
	0x63, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x28, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x61, 0x73, 0x6e, 0x31,
	0x2e, 0x76, 0x31, 0x2e, 0x42, 0x69, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x22, 0x53, 0x0a, 0x23, 0x44, 0x61, 0x74, 0x61, 0x54, 0x72, 0x61, 0x66,
	0x66, 0x69, 0x63, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x6e, 0x64, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x81, 0x03, 0x0a, 0x1d, 0x44, 0x61,
	0x74, 0x61, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3d, 0x0a, 0x0e, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x66, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x63,
	0x74, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x66, 0x6e, 0x52, 0x0d, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x46, 0x4e, 0x12, 0x4d, 0x0a, 0x14, 0x73, 0x68,
	0x61, 0x72, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x12, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x61, 0x0a, 0x19, 0x72, 0x65, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x64, 0x5f, 0x73, 0x75, 0x62, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x70,
	0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x78,
	0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x53,
	0x75, 0x62, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x48, 0x00,
	0x52, 0x17, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x53, 0x75, 0x62, 0x66, 0x72, 0x61,
	0x6d, 0x65, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x51, 0x0a, 0x0d,
	0x69, 0x5f, 0x65, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61,
	0x74, 0x61, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x74, 0x49, 0x65,
	0x73, 0x52, 0x0c, 0x69, 0x45, 0x2d, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x42,
	0x1c, 0x0a, 0x1a, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x5f, 0x73, 0x75, 0x62,
	0x66, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x22, 0x45, 0x0a,
	0x15, 0x44, 0x61, 0x70, 0x73, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x66, 0x6f,
	0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x22, 0xa6, 0x01, 0x0a, 0x0f, 0x44, 0x61, 0x70, 0x73, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x4c, 0x0a, 0x0e, 0x64, 0x61, 0x70, 0x73,
	0x5f, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x25, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x70, 0x73, 0x49,
	0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x44, 0x61, 0x70, 0x73, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0d, 0x64, 0x61, 0x70, 0x73, 0x49, 0x6e, 0x64,
	0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x45, 0x0a, 0x0e, 0x69, 0x5f, 0x65, 0x5f, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x70, 0x73, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x52, 0x0d,
	0x69, 0x45, 0x2d, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x57, 0x0a,
	0x14, 0x44, 0x61, 0x70, 0x73, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x3f, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x44,
	0x61, 0x70, 0x73, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x49,
	0x74, 0x65, 0x6d, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x92, 0x01, 0x04, 0x08, 0x01, 0x10, 0x20, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x4a, 0x0a, 0x1a, 0x44, 0x61, 0x70, 0x73, 0x72, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x49, 0x74, 0x65, 0x6d, 0x45, 0x78,
	0x74, 0x49, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x22, 0xf5, 0x01, 0x0a, 0x14, 0x44, 0x61, 0x70, 0x73, 0x72, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x25, 0x0a, 0x06, 0x64,
	0x72, 0x62, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x78, 0x6e,
	0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x72, 0x62, 0x49, 0x44, 0x52, 0x05, 0x64, 0x72, 0x62,
	0x49, 0x44, 0x12, 0x6a, 0x0a, 0x17, 0x64, 0x61, 0x70, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x5f, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x32, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61,
	0x70, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61,
	0x74, 0x6f, 0x72, 0x44, 0x61, 0x70, 0x73, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x15, 0x64, 0x61, 0x70, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x4a,
	0x0a, 0x0e, 0x69, 0x5f, 0x65, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31,
	0x2e, 0x44, 0x61, 0x70, 0x73, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x49, 0x74, 0x65, 0x6d, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x52, 0x0d, 0x69, 0x45, 0x2d,
	0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x32, 0x0a, 0x0e, 0x44, 0x65,
	0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x20, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0a, 0xfa, 0x42, 0x07,
	0x1a, 0x05, 0x18, 0xff, 0x1f, 0x28, 0x00, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x43,
	0x0a, 0x13, 0x44, 0x6c, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x45,
	0x78, 0x74, 0x49, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x22, 0xe5, 0x01, 0x0a, 0x0d, 0x44, 0x6c, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x43,
	0x68, 0x6f, 0x69, 0x63, 0x65, 0x12, 0x3a, 0x0a, 0x0b, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x31, 0x32,
	0x62, 0x69, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x78, 0x6e, 0x61,
	0x70, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x44, 0x63, 0x70, 0x53, 0x4e,
	0x31, 0x32, 0x48, 0x00, 0x52, 0x0b, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x31, 0x32, 0x62, 0x69, 0x74,
	0x73, 0x12, 0x3a, 0x0a, 0x0b, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x31, 0x38, 0x62, 0x69, 0x74, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x44, 0x63, 0x70, 0x53, 0x4e, 0x31, 0x38, 0x48, 0x00,
	0x52, 0x0b, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x31, 0x38, 0x62, 0x69, 0x74, 0x73, 0x12, 0x4a, 0x0a,
	0x10, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76,
	0x31, 0x2e, 0x44, 0x6c, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x45,
	0x78, 0x74, 0x49, 0x65, 0x73, 0x48, 0x00, 0x52, 0x10, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x2d,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x10, 0x0a, 0x0e, 0x64, 0x6c, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x22, 0x30, 0x0a, 0x0d, 0x44,
	0x6c, 0x47, 0x42, 0x72, 0x50, 0x52, 0x62, 0x75, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1f, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x09, 0xfa, 0x42, 0x06,
	0x1a, 0x04, 0x18, 0x64, 0x28, 0x00, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x33, 0x0a,
	0x10, 0x44, 0x6c, 0x6e, 0x6f, 0x6e, 0x47, 0x42, 0x72, 0x50, 0x52, 0x62, 0x75, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x1f, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x42, 0x09, 0xfa, 0x42, 0x06, 0x1a, 0x04, 0x18, 0x64, 0x28, 0x00, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x22, 0x32, 0x0a, 0x0f, 0x44, 0x6c, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x52, 0x62,
	0x75, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1f, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x42, 0x09, 0xfa, 0x42, 0x06, 0x1a, 0x04, 0x18, 0x64, 0x28, 0x00, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x28, 0x0a, 0x05, 0x44, 0x72, 0x62, 0x49, 0x44, 0x12,
	0x1f, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x09,
	0xfa, 0x42, 0x06, 0x1a, 0x04, 0x18, 0x20, 0x28, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x22, 0x3b, 0x0a, 0x07, 0x44, 0x72, 0x62, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x30, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x78, 0x6e, 0x61,
	0x70, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x72, 0x62, 0x49, 0x44, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x92,
	0x01, 0x04, 0x08, 0x01, 0x10, 0x20, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x53, 0x0a,
	0x10, 0x44, 0x72, 0x62, 0x4c, 0x69, 0x73, 0x74, 0x77, 0x69, 0x74, 0x68, 0x43, 0x61, 0x75, 0x73,
	0x65, 0x12, 0x3f, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x72, 0x62, 0x4c, 0x69,
	0x73, 0x74, 0x77, 0x69, 0x74, 0x68, 0x43, 0x61, 0x75, 0x73, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x42,
	0x0a, 0xfa, 0x42, 0x07, 0x92, 0x01, 0x04, 0x08, 0x01, 0x10, 0x20, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x22, 0x4a, 0x0a, 0x1a, 0x44, 0x72, 0x62, 0x4c, 0x69, 0x73, 0x74, 0x77, 0x69, 0x74,
	0x68, 0x43, 0x61, 0x75, 0x73, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73,
	0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xf0,
	0x01, 0x0a, 0x14, 0x44, 0x72, 0x62, 0x4c, 0x69, 0x73, 0x74, 0x77, 0x69, 0x74, 0x68, 0x43, 0x61,
	0x75, 0x73, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x26, 0x0a, 0x06, 0x64, 0x72, 0x62, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76,
	0x31, 0x2e, 0x44, 0x72, 0x62, 0x49, 0x44, 0x52, 0x06, 0x64, 0x72, 0x62, 0x2d, 0x69, 0x64, 0x12,
	0x24, 0x0a, 0x05, 0x63, 0x61, 0x75, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e,
	0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x61, 0x75, 0x73, 0x65, 0x52, 0x05,
	0x63, 0x61, 0x75, 0x73, 0x65, 0x12, 0x32, 0x0a, 0x09, 0x72, 0x5f, 0x6c, 0x63, 0x5f, 0x6d, 0x6f,
	0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e,
	0x76, 0x31, 0x2e, 0x52, 0x6c, 0x63, 0x6d, 0x6f, 0x64, 0x65, 0x48, 0x00, 0x52, 0x08, 0x72, 0x4c,
	0x43, 0x2d, 0x4d, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x48, 0x0a, 0x0d, 0x69, 0x5f, 0x65,
	0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x23, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x72, 0x62, 0x4c, 0x69,
	0x73, 0x74, 0x77, 0x69, 0x74, 0x68, 0x43, 0x61, 0x75, 0x73, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x45,
	0x78, 0x74, 0x49, 0x65, 0x73, 0x52, 0x0c, 0x69, 0x45, 0x2d, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x72, 0x5f, 0x6c, 0x63, 0x5f, 0x6d, 0x6f, 0x64,
	0x65, 0x22, 0x2c, 0x0a, 0x09, 0x44, 0x72, 0x62, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1f,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x09, 0xfa,
	0x42, 0x06, 0x1a, 0x04, 0x18, 0x20, 0x28, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22,
	0x69, 0x0a, 0x1d, 0x44, 0x72, 0x62, 0x73, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x54, 0x6f,
	0x44, 0x6c, 0x64, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x48, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x26, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x72, 0x62, 0x73, 0x53, 0x75,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x54, 0x6f, 0x44, 0x6c, 0x64, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64,
	0x69, 0x6e, 0x67, 0x49, 0x74, 0x65, 0x6d, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x92, 0x01, 0x04, 0x08,
	0x01, 0x10, 0x20, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x53, 0x0a, 0x23, 0x44, 0x72,
	0x62, 0x73, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x54, 0x6f, 0x44, 0x6c, 0x64, 0x69, 0x73,
	0x63, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x49, 0x74, 0x65, 0x6d, 0x45, 0x78, 0x74, 0x49, 0x65,
	0x73, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22,
	0xcc, 0x01, 0x0a, 0x1d, 0x44, 0x72, 0x62, 0x73, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x54,
	0x6f, 0x44, 0x6c, 0x64, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x49, 0x74, 0x65,
	0x6d, 0x12, 0x25, 0x0a, 0x06, 0x64, 0x72, 0x62, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0e, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x72, 0x62, 0x49,
	0x44, 0x52, 0x05, 0x64, 0x72, 0x62, 0x49, 0x44, 0x12, 0x31, 0x0a, 0x08, 0x64, 0x6c, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x78, 0x6e, 0x61,
	0x70, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x6c, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x68, 0x6f, 0x69,
	0x63, 0x65, 0x52, 0x07, 0x64, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x51, 0x0a, 0x0d, 0x69,
	0x5f, 0x65, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x72, 0x62,
	0x73, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x54, 0x6f, 0x44, 0x6c, 0x64, 0x69, 0x73, 0x63,
	0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x49, 0x74, 0x65, 0x6d, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73,
	0x52, 0x0c, 0x69, 0x45, 0x2d, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x77,
	0x0a, 0x24, 0x44, 0x72, 0x62, 0x73, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x54, 0x6f, 0x45,
	0x61, 0x72, 0x6c, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x4f, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e,
	0x44, 0x72, 0x62, 0x73, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x54, 0x6f, 0x45, 0x61, 0x72,
	0x6c, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72,
	0x49, 0x74, 0x65, 0x6d, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x92, 0x01, 0x04, 0x08, 0x01, 0x10, 0x20,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x5a, 0x0a, 0x2a, 0x44, 0x72, 0x62, 0x73, 0x53,
	0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x54, 0x6f, 0x45, 0x61, 0x72, 0x6c, 0x79, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x49, 0x74, 0x65, 0x6d, 0x45,
	0x78, 0x74, 0x49, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x22, 0xda, 0x01, 0x0a, 0x24, 0x44, 0x72, 0x62, 0x73, 0x53, 0x75, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x54, 0x6f, 0x45, 0x61, 0x72, 0x6c, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x25, 0x0a, 0x06,
	0x64, 0x72, 0x62, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x78,
	0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x72, 0x62, 0x49, 0x44, 0x52, 0x05, 0x64, 0x72,
	0x62, 0x49, 0x44, 0x12, 0x31, 0x0a, 0x08, 0x64, 0x6c, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e,
	0x44, 0x6c, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x52, 0x07, 0x64,
	0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x58, 0x0a, 0x0d, 0x69, 0x5f, 0x65, 0x5f, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e,
	0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x72, 0x62, 0x73, 0x53, 0x75, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x54, 0x6f, 0x45, 0x61, 0x72, 0x6c, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x49, 0x74, 0x65, 0x6d, 0x45, 0x78, 0x74, 0x49,
	0x65, 0x73, 0x52, 0x0c, 0x69, 0x45, 0x2d, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x22, 0x6d, 0x0a, 0x1f, 0x44, 0x72, 0x62, 0x73, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x54,
	0x6f, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x4a, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x28, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x72, 0x62,
	0x73, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x54, 0x6f, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x49, 0x74, 0x65, 0x6d, 0x42, 0x0a, 0xfa, 0x42,
	0x07, 0x92, 0x01, 0x04, 0x08, 0x01, 0x10, 0x20, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22,
	0x55, 0x0a, 0x25, 0x44, 0x72, 0x62, 0x73, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x54, 0x6f,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x49, 0x74,
	0x65, 0x6d, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xd3, 0x02, 0x0a, 0x1f, 0x44, 0x72, 0x62, 0x73, 0x53,
	0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x54, 0x6f, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x25, 0x0a, 0x06, 0x64, 0x72,
	0x62, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x78, 0x6e, 0x61,
	0x70, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x72, 0x62, 0x49, 0x44, 0x52, 0x05, 0x64, 0x72, 0x62, 0x49,
	0x44, 0x12, 0x59, 0x0a, 0x17, 0x70, 0x64, 0x63, 0x70, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x75, 0x6c, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x72, 0x62,
	0x62, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x43,
	0x68, 0x6f, 0x69, 0x63, 0x65, 0x52, 0x15, 0x70, 0x64, 0x63, 0x70, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2d, 0x55, 0x4c, 0x12, 0x59, 0x0a, 0x17,
	0x70, 0x64, 0x63, 0x70, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x65, 0x72, 0x5f, 0x64, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x72, 0x62, 0x62, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65,
	0x52, 0x15, 0x70, 0x64, 0x63, 0x70, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x65, 0x72, 0x2d, 0x44, 0x4c, 0x12, 0x53, 0x0a, 0x0d, 0x69, 0x5f, 0x65, 0x5f, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e,
	0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x72, 0x62, 0x73, 0x53, 0x75, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x54, 0x6f, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x65, 0x72, 0x49, 0x74, 0x65, 0x6d, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x52, 0x0c,
	0x69, 0x45, 0x2d, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x4e, 0x0a, 0x1e,
	0x44, 0x72, 0x62, 0x62, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x65, 0x72, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x12, 0x2c,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xad, 0x02, 0x0a,
	0x18, 0x44, 0x72, 0x62, 0x62, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x65, 0x72, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x12, 0x4d, 0x0a, 0x0e, 0x70, 0x64, 0x63,
	0x70, 0x5f, 0x73, 0x6e, 0x5f, 0x31, 0x32, 0x62, 0x69, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x23, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x72, 0x62, 0x62,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x31, 0x32,
	0x62, 0x69, 0x74, 0x73, 0x53, 0x6e, 0x48, 0x00, 0x52, 0x0e, 0x70, 0x64, 0x63, 0x70, 0x2d, 0x73,
	0x6e, 0x2d, 0x31, 0x32, 0x62, 0x69, 0x74, 0x73, 0x12, 0x4d, 0x0a, 0x0e, 0x70, 0x64, 0x63, 0x70,
	0x5f, 0x73, 0x6e, 0x5f, 0x31, 0x38, 0x62, 0x69, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x23, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x72, 0x62, 0x62, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x31, 0x38, 0x62,
	0x69, 0x74, 0x73, 0x53, 0x6e, 0x48, 0x00, 0x52, 0x0e, 0x70, 0x64, 0x63, 0x70, 0x2d, 0x73, 0x6e,
	0x2d, 0x31, 0x38, 0x62, 0x69, 0x74, 0x73, 0x12, 0x55, 0x0a, 0x10, 0x63, 0x68, 0x6f, 0x69, 0x63,
	0x65, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x27, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x72, 0x62, 0x62,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x43, 0x68,
	0x6f, 0x69, 0x63, 0x65, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x48, 0x00, 0x52, 0x10, 0x63, 0x68,
	0x6f, 0x69, 0x63, 0x65, 0x2d, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x1c,
	0x0a, 0x1a, 0x64, 0x72, 0x62, 0x62, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x22, 0x50, 0x0a, 0x20,
	0x44, 0x72, 0x62, 0x62, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x65, 0x72, 0x31, 0x32, 0x62, 0x69, 0x74, 0x73, 0x53, 0x6e, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73,
	0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x95,
	0x02, 0x0a, 0x1a, 0x44, 0x72, 0x62, 0x62, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x65, 0x72, 0x31, 0x32, 0x62, 0x69, 0x74, 0x73, 0x53, 0x6e, 0x12, 0x51, 0x0a,
	0x18, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x6f,
	0x66, 0x5f, 0x70, 0x64, 0x63, 0x70, 0x73, 0x64, 0x75, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x61, 0x73, 0x6e, 0x31, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x69, 0x74, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x48, 0x00, 0x52, 0x16, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x6f, 0x66, 0x50, 0x44, 0x43, 0x50, 0x53, 0x44, 0x55, 0x88, 0x01, 0x01,
	0x12, 0x37, 0x0a, 0x0b, 0x63, 0x5f, 0x6f, 0x75, 0x6e, 0x74, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x44, 0x63, 0x70, 0x53, 0x4e, 0x31, 0x32, 0x52, 0x0a, 0x63,
	0x4f, 0x55, 0x4e, 0x54, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x4e, 0x0a, 0x0d, 0x69, 0x5f, 0x65,
	0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x29, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x72, 0x62, 0x62, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x31, 0x32, 0x62,
	0x69, 0x74, 0x73, 0x53, 0x6e, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x52, 0x0c, 0x69, 0x45, 0x2d,
	0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x1b, 0x0a, 0x19, 0x5f, 0x72, 0x65,
	0x63, 0x65, 0x69, 0x76, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x6f, 0x66, 0x5f, 0x70,
	0x64, 0x63, 0x70, 0x73, 0x64, 0x75, 0x22, 0x50, 0x0a, 0x20, 0x44, 0x72, 0x62, 0x62, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x31, 0x38, 0x62, 0x69,
	0x74, 0x73, 0x53, 0x6e, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x95, 0x02, 0x0a, 0x1a, 0x44, 0x72, 0x62,
	0x62, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x31,
	0x38, 0x62, 0x69, 0x74, 0x73, 0x53, 0x6e, 0x12, 0x51, 0x0a, 0x18, 0x72, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x6f, 0x66, 0x5f, 0x70, 0x64, 0x63, 0x70,
	0x73, 0x64, 0x75, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x61, 0x73, 0x6e, 0x31,
	0x2e, 0x76, 0x31, 0x2e, 0x42, 0x69, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x48, 0x00, 0x52,
	0x16, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x6f, 0x66,
	0x50, 0x44, 0x43, 0x50, 0x53, 0x44, 0x55, 0x88, 0x01, 0x01, 0x12, 0x37, 0x0a, 0x0b, 0x63, 0x5f,
	0x6f, 0x75, 0x6e, 0x74, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x50,
	0x44, 0x63, 0x70, 0x53, 0x4e, 0x31, 0x38, 0x52, 0x0a, 0x63, 0x4f, 0x55, 0x4e, 0x54, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x4e, 0x0a, 0x0d, 0x69, 0x5f, 0x65, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x78, 0x6e, 0x61,
	0x70, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x72, 0x62, 0x62, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x31, 0x38, 0x62, 0x69, 0x74, 0x73, 0x53, 0x6e, 0x45,
	0x78, 0x74, 0x49, 0x65, 0x73, 0x52, 0x0c, 0x69, 0x45, 0x2d, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x42, 0x1b, 0x0a, 0x19, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x6f, 0x66, 0x5f, 0x70, 0x64, 0x63, 0x70, 0x73, 0x64, 0x75,
	0x22, 0x5d, 0x0a, 0x17, 0x44, 0x72, 0x62, 0x74, 0x6f, 0x51, 0x6f, 0x53, 0x66, 0x6c, 0x6f, 0x77,
	0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x42, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x78, 0x6e, 0x61,
	0x70, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x72, 0x62, 0x74, 0x6f, 0x51, 0x6f, 0x53, 0x66, 0x6c, 0x6f,
	0x77, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x49, 0x74, 0x65, 0x6d, 0x42, 0x0a, 0xfa, 0x42,
	0x07, 0x92, 0x01, 0x04, 0x08, 0x01, 0x10, 0x20, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22,
	0x4d, 0x0a, 0x1d, 0x44, 0x72, 0x62, 0x74, 0x6f, 0x51, 0x6f, 0x53, 0x66, 0x6c, 0x6f, 0x77, 0x4d,
	0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x49, 0x74, 0x65, 0x6d, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73,
	0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x8e,
	0x02, 0x0a, 0x17, 0x44, 0x72, 0x62, 0x74, 0x6f, 0x51, 0x6f, 0x53, 0x66, 0x6c, 0x6f, 0x77, 0x4d,
	0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x26, 0x0a, 0x06, 0x64, 0x72,
	0x62, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x78, 0x6e, 0x61,
	0x70, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x72, 0x62, 0x49, 0x44, 0x52, 0x06, 0x64, 0x72, 0x62, 0x2d,
	0x49, 0x44, 0x12, 0x3c, 0x0a, 0x0e, 0x71, 0x6f, 0x73, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x78, 0x6e, 0x61,
	0x70, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x6f, 0x53, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x0d, 0x71, 0x6f, 0x73, 0x46, 0x6c, 0x6f, 0x77, 0x73, 0x2d, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x32, 0x0a, 0x09, 0x72, 0x5f, 0x6c, 0x63, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x6c,
	0x63, 0x6d, 0x6f, 0x64, 0x65, 0x48, 0x00, 0x52, 0x08, 0x72, 0x4c, 0x43, 0x2d, 0x4d, 0x6f, 0x64,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x4b, 0x0a, 0x0d, 0x69, 0x5f, 0x65, 0x5f, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x78, 0x6e,
	0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x72, 0x62, 0x74, 0x6f, 0x51, 0x6f, 0x53, 0x66, 0x6c,
	0x6f, 0x77, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x49, 0x74, 0x65, 0x6d, 0x45, 0x78, 0x74,
	0x49, 0x65, 0x73, 0x52, 0x0c, 0x69, 0x45, 0x2d, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x72, 0x5f, 0x6c, 0x63, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x22,
	0x91, 0x03, 0x0a, 0x23, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x35, 0x51, 0x69, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x45, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x6b, 0x0a, 0x1f, 0x69, 0x64, 0x5f, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x64, 0x65,
	0x6c, 0x61, 0x79, 0x5f, 0x62, 0x75, 0x64, 0x67, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x22, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e,
	0x64, 0x65, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x42, 0x75,
	0x64, 0x67, 0x65, 0x74, 0x48, 0x00, 0x52, 0x1c, 0x69, 0x64, 0x2d, 0x45, 0x78, 0x74, 0x65, 0x6e,
	0x64, 0x65, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x42, 0x75,
	0x64, 0x67, 0x65, 0x74, 0x12, 0x6f, 0x0a, 0x21, 0x69, 0x64, 0x5f, 0x63, 0x6e, 0x70, 0x61, 0x63,
	0x6b, 0x65, 0x74, 0x5f, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x5f, 0x62, 0x75, 0x64, 0x67, 0x65, 0x74,
	0x5f, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x64,
	0x65, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x42, 0x75, 0x64,
	0x67, 0x65, 0x74, 0x48, 0x00, 0x52, 0x1e, 0x69, 0x64, 0x2d, 0x43, 0x4e, 0x50, 0x61, 0x63, 0x6b,
	0x65, 0x74, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x42, 0x75, 0x64, 0x67, 0x65, 0x74, 0x44, 0x6f, 0x77,
	0x6e, 0x6c, 0x69, 0x6e, 0x6b, 0x12, 0x6b, 0x0a, 0x1f, 0x69, 0x64, 0x5f, 0x63, 0x6e, 0x70, 0x61,
	0x63, 0x6b, 0x65, 0x74, 0x5f, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x5f, 0x62, 0x75, 0x64, 0x67, 0x65,
	0x74, 0x5f, 0x75, 0x70, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65,
	0x64, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x42, 0x75, 0x64, 0x67,
	0x65, 0x74, 0x48, 0x00, 0x52, 0x1c, 0x69, 0x64, 0x2d, 0x43, 0x4e, 0x50, 0x61, 0x63, 0x6b, 0x65,
	0x74, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x42, 0x75, 0x64, 0x67, 0x65, 0x74, 0x55, 0x70, 0x6c, 0x69,
	0x6e, 0x6b, 0x42, 0x1f, 0x0a, 0x1d, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x35, 0x5f, 0x71,
	0x69, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x5f,
	0x69, 0x65, 0x73, 0x22, 0xca, 0x01, 0x0a, 0x1a, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x35,
	0x51, 0x69, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x45, 0x78, 0x74, 0x49,
	0x65, 0x73, 0x12, 0x26, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x49, 0x65, 0x49, 0x44, 0x52, 0x03, 0x26, 0x69, 0x64, 0x12, 0x37, 0x0a, 0x0b, 0x63, 0x72,
	0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x14, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x69, 0x74, 0x69, 0x63,
	0x61, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x0c, 0x26, 0x63, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c,
	0x69, 0x74, 0x79, 0x12, 0x4b, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31,
	0x2e, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x35, 0x51, 0x69, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x6f, 0x72, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x45, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x26, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x22, 0xc0, 0x05, 0x0a, 0x14, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x35, 0x51, 0x69, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x12, 0x48, 0x0a, 0x13, 0x70, 0x72, 0x69,
	0x6f, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x71, 0x6f, 0x5f, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31,
	0x2e, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x51, 0x6f,
	0x53, 0x52, 0x10, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x4c, 0x65, 0x76, 0x65, 0x6c,
	0x51, 0x6f, 0x53, 0x12, 0x4a, 0x0a, 0x13, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x64, 0x65,
	0x6c, 0x61, 0x79, 0x5f, 0x62, 0x75, 0x64, 0x67, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x63, 0x6b, 0x65,
	0x74, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x42, 0x75, 0x64, 0x67, 0x65, 0x74, 0x52, 0x11, 0x70, 0x61,
	0x63, 0x6b, 0x65, 0x74, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x42, 0x75, 0x64, 0x67, 0x65, 0x74, 0x12,
	0x44, 0x0a, 0x11, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f,
	0x72, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x78, 0x6e, 0x61,
	0x70, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x52, 0x61, 0x74, 0x65, 0x52, 0x0f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x52, 0x61, 0x74, 0x65, 0x12, 0x2d, 0x0a, 0x07, 0x66, 0x69, 0x76, 0x65, 0x5f, 0x71, 0x69,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31,
	0x2e, 0x46, 0x69, 0x76, 0x65, 0x51, 0x69, 0x48, 0x00, 0x52, 0x06, 0x66, 0x69, 0x76, 0x65, 0x51,
	0x49, 0x88, 0x01, 0x01, 0x12, 0x56, 0x0a, 0x0e, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x5f, 0x63, 0x72,
	0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2a, 0x2e, 0x78,
	0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x43, 0x72, 0x69, 0x74,
	0x69, 0x63, 0x61, 0x6c, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x35, 0x51, 0x69, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x48, 0x01, 0x52, 0x0d, 0x64, 0x65, 0x6c, 0x61,
	0x79, 0x43, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x48, 0x0a, 0x10,
	0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x5f, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31,
	0x2e, 0x41, 0x76, 0x65, 0x72, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77,
	0x48, 0x02, 0x52, 0x0f, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x57, 0x69, 0x6e,
	0x64, 0x6f, 0x77, 0x88, 0x01, 0x01, 0x12, 0x5f, 0x0a, 0x19, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75,
	0x6d, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x62, 0x75, 0x72, 0x73, 0x74, 0x5f, 0x76, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x78, 0x6e, 0x61, 0x70,
	0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x42,
	0x75, 0x72, 0x73, 0x74, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x48, 0x03, 0x52, 0x16, 0x6d, 0x61,
	0x78, 0x69, 0x6d, 0x75, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x42, 0x75, 0x72, 0x73, 0x74, 0x56, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x48, 0x0a, 0x0d, 0x69, 0x5f, 0x65, 0x5f, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23,
	0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63,
	0x35, 0x51, 0x69, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x45, 0x78, 0x74,
	0x49, 0x65, 0x73, 0x52, 0x0c, 0x69, 0x45, 0x2d, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x66, 0x69, 0x76, 0x65, 0x5f, 0x71, 0x69, 0x42, 0x11, 0x0a,
	0x0f, 0x5f, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x5f, 0x63, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c,
	0x42, 0x13, 0x0a, 0x11, 0x5f, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x5f, 0x77,
	0x69, 0x6e, 0x64, 0x6f, 0x77, 0x42, 0x1c, 0x0a, 0x1a, 0x5f, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75,
	0x6d, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x62, 0x75, 0x72, 0x73, 0x74, 0x5f, 0x76, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x22, 0x29, 0x0a, 0x06, 0x45, 0x52, 0x41, 0x62, 0x49, 0x44, 0x12, 0x1f, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x09, 0xfa, 0x42,
	0x06, 0x1a, 0x04, 0x18, 0x0f, 0x28, 0x00, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x2f,
	0x0a, 0x0a, 0x45, 0x55, 0x54, 0x72, 0x61, 0x61, 0x72, 0x66, 0x63, 0x6e, 0x12, 0x21, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0b, 0xfa, 0x42, 0x08,
	0x1a, 0x06, 0x18, 0xff, 0xff, 0x0f, 0x28, 0x00, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22,
	0x3d, 0x0a, 0x11, 0x45, 0x55, 0x54, 0x72, 0x61, 0x43, 0x65, 0x6c, 0x6c, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x12, 0x28, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x61, 0x73, 0x6e, 0x31, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x69,
	0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x3e,
	0x0a, 0x0e, 0x45, 0x55, 0x54, 0x72, 0x61, 0x43, 0x47, 0x69, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73,
	0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xb3,
	0x01, 0x0a, 0x08, 0x45, 0x55, 0x54, 0x72, 0x61, 0x43, 0x47, 0x69, 0x12, 0x2f, 0x0a, 0x07, 0x70,
	0x6c, 0x6d, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x78,
	0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6c, 0x6d, 0x6e, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x52, 0x07, 0x70, 0x6c, 0x6d, 0x6e, 0x2d, 0x69, 0x64, 0x12, 0x38, 0x0a, 0x09,
	0x65, 0x5f, 0x75, 0x74, 0x72, 0x61, 0x5f, 0x63, 0x69, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x55, 0x54, 0x72, 0x61, 0x43,
	0x65, 0x6c, 0x6c, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x09, 0x65, 0x2d, 0x75,
	0x74, 0x72, 0x61, 0x2d, 0x43, 0x49, 0x12, 0x3c, 0x0a, 0x0d, 0x69, 0x5f, 0x65, 0x5f, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x55, 0x54, 0x72, 0x61, 0x43, 0x47, 0x69,
	0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x52, 0x0c, 0x69, 0x45, 0x2d, 0x45, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x22, 0x3f, 0x0a, 0x1b, 0x45, 0x55, 0x54, 0x72, 0x61, 0x66, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x42, 0x61, 0x6e, 0x64, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61,
	0x74, 0x6f, 0x72, 0x12, 0x20, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x1a, 0x05, 0x18, 0x80, 0x02, 0x28, 0x01, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x60, 0x0a, 0x16, 0x45, 0x55, 0x54, 0x72, 0x61, 0x6d, 0x75,
	0x6c, 0x74, 0x69, 0x62, 0x61, 0x6e, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x46, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24,
	0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x55, 0x54, 0x72, 0x61, 0x66, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x42, 0x61, 0x6e, 0x64, 0x49, 0x6e, 0x64, 0x69, 0x63,
	0x61, 0x74, 0x6f, 0x72, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x92, 0x01, 0x04, 0x08, 0x01, 0x10, 0x10,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x2c, 0x0a, 0x08, 0x45, 0x55, 0x54, 0x72, 0x61,
	0x70, 0x63, 0x69, 0x12, 0x20, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x1a, 0x05, 0x18, 0xf7, 0x03, 0x28, 0x00, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x4d, 0x0a, 0x1d, 0x45, 0x55, 0x54, 0x72, 0x61, 0x70, 0x72,
	0x61, 0x63, 0x68, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x22, 0x9d, 0x03, 0x0a, 0x17, 0x45, 0x55, 0x54, 0x72, 0x61, 0x70, 0x72,
	0x61, 0x63, 0x68, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x2e, 0x0a, 0x13, 0x72, 0x6f, 0x6f, 0x74, 0x5f, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63,
	0x65, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x72,
	0x6f, 0x6f, 0x74, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x12, 0x34, 0x0a, 0x16, 0x7a, 0x65, 0x72, 0x6f, 0x5f, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x6c, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x14, 0x7a, 0x65, 0x72, 0x6f, 0x43, 0x6f, 0x72, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x55, 0x0a, 0x0f, 0x68, 0x69, 0x67, 0x68, 0x5f, 0x73,
	0x70, 0x65, 0x65, 0x64, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x2d, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x69, 0x67, 0x68, 0x53, 0x70,
	0x65, 0x65, 0x64, 0x46, 0x6c, 0x61, 0x67, 0x45, 0x75, 0x74, 0x72, 0x61, 0x70, 0x72, 0x61, 0x63,
	0x68, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d,
	0x68, 0x69, 0x67, 0x68, 0x53, 0x70, 0x65, 0x65, 0x64, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x2b, 0x0a,
	0x11, 0x70, 0x72, 0x61, 0x63, 0x68, 0x5f, 0x66, 0x72, 0x65, 0x71, 0x5f, 0x6f, 0x66, 0x66, 0x73,
	0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x70, 0x72, 0x61, 0x63, 0x68, 0x2d,
	0x46, 0x72, 0x65, 0x71, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x32, 0x0a, 0x12, 0x70, 0x72,
	0x61, 0x63, 0x68, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x11, 0x70, 0x72, 0x61, 0x63, 0x68, 0x2d,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x88, 0x01, 0x01, 0x12, 0x4d,
	0x0a, 0x0e, 0x69, 0x5f, 0x65, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31,
	0x2e, 0x45, 0x55, 0x54, 0x72, 0x61, 0x70, 0x72, 0x61, 0x63, 0x68, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x52, 0x0d,
	0x69, 0x45, 0x2d, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x15, 0x0a,
	0x13, 0x5f, 0x70, 0x72, 0x61, 0x63, 0x68, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x22, 0x4e, 0x0a, 0x1e, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x49, 0x70, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x41, 0x6e, 0x64, 0x50, 0x6f, 0x72, 0x74,
	0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x22, 0xef, 0x01, 0x0a, 0x18, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x49, 0x70, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x41, 0x6e, 0x64, 0x50, 0x6f, 0x72,
	0x74, 0x12, 0x4d, 0x0a, 0x12, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x69, 0x70,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72,
	0x74, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x11, 0x65,
	0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x49, 0x50, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x12, 0x34, 0x0a, 0x0b, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e,
	0x50, 0x6f, 0x72, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x0a, 0x70, 0x6f, 0x72, 0x74,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x4e, 0x0a, 0x0e, 0x69, 0x5f, 0x65, 0x5f, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27,
	0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x49, 0x70, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x41, 0x6e, 0x64, 0x50, 0x6f, 0x72,
	0x74, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x52, 0x0d, 0x69, 0x45, 0x2d, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x44, 0x0a, 0x14, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54,
	0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x65, 0x64, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x12, 0x2c,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xbe, 0x01, 0x0a,
	0x0e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x65, 0x64, 0x12,
	0x66, 0x0a, 0x1d, 0x6c, 0x6f, 0x67, 0x67, 0x65, 0x64, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f,
	0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31,
	0x2e, 0x4c, 0x6f, 0x67, 0x67, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x72, 0x69, 0x67,
	0x67, 0x65, 0x72, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x1a, 0x6c, 0x6f, 0x67,
	0x67, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x65,
	0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x44, 0x0a, 0x0e, 0x69, 0x5f, 0x65, 0x5f, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54,
	0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x65, 0x64, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x52, 0x0d,
	0x69, 0x45, 0x2d, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x46, 0x0a,
	0x16, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65,
	0x72, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xfa, 0x01, 0x0a, 0x10, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x12, 0x50, 0x0a, 0x0f, 0x6f, 0x75,
	0x74, 0x5f, 0x6f, 0x66, 0x5f, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x75,
	0x74, 0x4f, 0x66, 0x43, 0x6f, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x48, 0x00, 0x52, 0x0d, 0x6f,
	0x75, 0x74, 0x4f, 0x66, 0x43, 0x6f, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x12, 0x2d, 0x0a, 0x08,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x6c, 0x31, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10,
	0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4c, 0x31,
	0x48, 0x00, 0x52, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x4c, 0x31, 0x12, 0x4f, 0x0a, 0x11, 0x63,
	0x68, 0x6f, 0x69, 0x63, 0x65, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31,
	0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65,
	0x72, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x48, 0x00, 0x52, 0x11, 0x63, 0x68, 0x6f, 0x69, 0x63,
	0x65, 0x2d, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x14, 0x0a, 0x12,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x74, 0x72, 0x69, 0x67, 0x67,
	0x65, 0x72, 0x22, 0x3d, 0x0a, 0x0d, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4c, 0x31, 0x45, 0x78, 0x74,
	0x49, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x22, 0x8a, 0x02, 0x0a, 0x07, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4c, 0x31, 0x12, 0x4b, 0x0a,
	0x0c, 0x6c, 0x31, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65,
	0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f,
	0x6c, 0x64, 0x4c, 0x31, 0x4c, 0x6f, 0x67, 0x67, 0x65, 0x64, 0x4d, 0x64, 0x74, 0x52, 0x0b, 0x6c,
	0x31, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x33, 0x0a, 0x0a, 0x68, 0x79,
	0x73, 0x74, 0x65, 0x72, 0x65, 0x73, 0x69, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x79, 0x73, 0x74, 0x65, 0x72, 0x65,
	0x73, 0x69, 0x73, 0x52, 0x0a, 0x68, 0x79, 0x73, 0x74, 0x65, 0x72, 0x65, 0x73, 0x69, 0x73, 0x12,
	0x3e, 0x0a, 0x0f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x74, 0x6f, 0x5f, 0x74, 0x72, 0x69, 0x67, 0x67,
	0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e,
	0x76, 0x31, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x54, 0x6f, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72,
	0x52, 0x0d, 0x74, 0x69, 0x6d, 0x65, 0x54, 0x6f, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x12,
	0x3d, 0x0a, 0x0e, 0x69, 0x5f, 0x65, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76,
	0x31, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4c, 0x31, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x52,
	0x0d, 0x69, 0x45, 0x2d, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xcc,
	0x01, 0x0a, 0x1f, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x68,
	0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x4c, 0x31, 0x4c, 0x6f, 0x67, 0x67, 0x65, 0x64, 0x4d,
	0x64, 0x74, 0x12, 0x40, 0x0a, 0x0e, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x5f,
	0x72, 0x73, 0x72, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x78, 0x6e, 0x61,
	0x70, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x52, 0x53,
	0x72, 0x70, 0x48, 0x00, 0x52, 0x0e, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x2d,
	0x52, 0x53, 0x52, 0x50, 0x12, 0x40, 0x0a, 0x0e, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c,
	0x64, 0x5f, 0x72, 0x73, 0x72, 0x71, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x78,
	0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64,
	0x52, 0x53, 0x72, 0x71, 0x48, 0x00, 0x52, 0x0e, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c,
	0x64, 0x2d, 0x52, 0x53, 0x52, 0x51, 0x42, 0x25, 0x0a, 0x23, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x5f,
	0x6c, 0x31, 0x5f, 0x6c, 0x6f, 0x67, 0x67, 0x65, 0x64, 0x5f, 0x6d, 0x64, 0x74, 0x22, 0x3a, 0x0a,
	0x16, 0x45, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74,
	0x79, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x20, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x1a, 0x05, 0x18, 0xb5, 0x01,
	0x28, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x36, 0x0a, 0x12, 0x45, 0x78, 0x70,
	0x65, 0x63, 0x74, 0x65, 0x64, 0x49, 0x64, 0x6c, 0x65, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12,
	0x20, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0a,
	0xfa, 0x42, 0x07, 0x1a, 0x05, 0x18, 0xb5, 0x01, 0x28, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x22, 0x51, 0x0a, 0x21, 0x45, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x55, 0x65, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x75, 0x72,
	0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x22, 0x9c, 0x04, 0x0a, 0x1b, 0x45, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65,
	0x64, 0x55, 0x65, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x42, 0x65, 0x68, 0x61, 0x76,
	0x69, 0x6f, 0x75, 0x72, 0x12, 0x5e, 0x0a, 0x18, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64,
	0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31,
	0x2e, 0x45, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74,
	0x79, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x48, 0x00, 0x52, 0x16, 0x65, 0x78, 0x70, 0x65, 0x63,
	0x74, 0x65, 0x64, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x50, 0x65, 0x72, 0x69, 0x6f,
	0x64, 0x88, 0x01, 0x01, 0x12, 0x52, 0x0a, 0x14, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64,
	0x5f, 0x69, 0x64, 0x6c, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x70,
	0x65, 0x63, 0x74, 0x65, 0x64, 0x49, 0x64, 0x6c, 0x65, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x48,
	0x01, 0x52, 0x12, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x49, 0x64, 0x6c, 0x65, 0x50,
	0x65, 0x72, 0x69, 0x6f, 0x64, 0x88, 0x01, 0x01, 0x12, 0x90, 0x01, 0x0a, 0x2a, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x5f, 0x6f, 0x66, 0x5f, 0x75, 0x65, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74,
	0x79, 0x5f, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x75, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2f, 0x2e,
	0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4f, 0x66,
	0x55, 0x65, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69,
	0x6f, 0x75, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x02,
	0x52, 0x26, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4f, 0x66, 0x55, 0x45, 0x41, 0x63, 0x74, 0x69,
	0x76, 0x69, 0x74, 0x79, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x75, 0x72, 0x49, 0x6e, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x51, 0x0a, 0x0e, 0x69,
	0x5f, 0x65, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78,
	0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x55, 0x65, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79,
	0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x75, 0x72, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x52,
	0x0d, 0x69, 0x45, 0x2d, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x1b,
	0x0a, 0x19, 0x5f, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x69, 0x74, 0x79, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x42, 0x17, 0x0a, 0x15, 0x5f,
	0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x69, 0x64, 0x6c, 0x65, 0x5f, 0x70, 0x65,
	0x72, 0x69, 0x6f, 0x64, 0x42, 0x2d, 0x0a, 0x2b, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f,
	0x6f, 0x66, 0x5f, 0x75, 0x65, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x62, 0x65,
	0x68, 0x61, 0x76, 0x69, 0x6f, 0x75, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x22, 0x49, 0x0a, 0x19, 0x45, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x55,
	0x65, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x75, 0x72, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73,
	0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xd4,
	0x04, 0x0a, 0x13, 0x45, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x55, 0x65, 0x62, 0x65, 0x68,
	0x61, 0x76, 0x69, 0x6f, 0x75, 0x72, 0x12, 0x6d, 0x0a, 0x1d, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74,
	0x65, 0x64, 0x5f, 0x75, 0x65, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x62, 0x65,
	0x68, 0x61, 0x76, 0x69, 0x6f, 0x75, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e,
	0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64,
	0x55, 0x65, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69,
	0x6f, 0x75, 0x72, 0x48, 0x00, 0x52, 0x1b, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x55,
	0x45, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f,
	0x75, 0x72, 0x88, 0x01, 0x01, 0x12, 0x51, 0x0a, 0x13, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65,
	0x64, 0x5f, 0x68, 0x6f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x70,
	0x65, 0x63, 0x74, 0x65, 0x64, 0x48, 0x6f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x48,
	0x01, 0x52, 0x12, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x48, 0x4f, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x76, 0x61, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x51, 0x0a, 0x13, 0x65, 0x78, 0x70, 0x65,
	0x63, 0x74, 0x65, 0x64, 0x5f, 0x75, 0x65, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e,
	0x45, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x55, 0x65, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x79, 0x48, 0x02, 0x52, 0x12, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x55, 0x45,
	0x4d, 0x6f, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x88, 0x01, 0x01, 0x12, 0x6a, 0x0a, 0x1c, 0x65,
	0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x75, 0x65, 0x6d, 0x6f, 0x76, 0x69, 0x6e, 0x67,
	0x5f, 0x74, 0x72, 0x61, 0x6a, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x23, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x70, 0x65,
	0x63, 0x74, 0x65, 0x64, 0x55, 0x65, 0x6d, 0x6f, 0x76, 0x69, 0x6e, 0x67, 0x54, 0x72, 0x61, 0x6a,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x48, 0x03, 0x52, 0x1a, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74,
	0x65, 0x64, 0x55, 0x45, 0x4d, 0x6f, 0x76, 0x69, 0x6e, 0x67, 0x54, 0x72, 0x61, 0x6a, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x79, 0x88, 0x01, 0x01, 0x12, 0x49, 0x0a, 0x0e, 0x69, 0x5f, 0x65, 0x5f, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x70, 0x65, 0x63, 0x74,
	0x65, 0x64, 0x55, 0x65, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x75, 0x72, 0x45, 0x78, 0x74,
	0x49, 0x65, 0x73, 0x52, 0x0d, 0x69, 0x45, 0x2d, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x42, 0x20, 0x0a, 0x1e, 0x5f, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f,
	0x75, 0x65, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x62, 0x65, 0x68, 0x61, 0x76,
	0x69, 0x6f, 0x75, 0x72, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65,
	0x64, 0x5f, 0x68, 0x6f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x42, 0x16, 0x0a, 0x14,
	0x5f, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x75, 0x65, 0x6d, 0x6f, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x42, 0x1f, 0x0a, 0x1d, 0x5f, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65,
	0x64, 0x5f, 0x75, 0x65, 0x6d, 0x6f, 0x76, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x72, 0x61, 0x6a, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x79, 0x22, 0x67, 0x0a, 0x1a, 0x45, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65,
	0x64, 0x55, 0x65, 0x6d, 0x6f, 0x76, 0x69, 0x6e, 0x67, 0x54, 0x72, 0x61, 0x6a, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x79, 0x12, 0x49, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x27, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x70,
	0x65, 0x63, 0x74, 0x65, 0x64, 0x55, 0x65, 0x6d, 0x6f, 0x76, 0x69, 0x6e, 0x67, 0x54, 0x72, 0x61,
	0x6a, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x74, 0x65, 0x6d, 0x42, 0x0a, 0xfa, 0x42, 0x07,
	0x92, 0x01, 0x04, 0x08, 0x01, 0x10, 0x10, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x54,
	0x0a, 0x24, 0x45, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x55, 0x65, 0x6d, 0x6f, 0x76, 0x69,
	0x6e, 0x67, 0x54, 0x72, 0x61, 0x6a, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x74, 0x65, 0x6d,
	0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x22, 0xfd, 0x01, 0x0a, 0x1e, 0x45, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65,
	0x64, 0x55, 0x65, 0x6d, 0x6f, 0x76, 0x69, 0x6e, 0x67, 0x54, 0x72, 0x61, 0x6a, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x79, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x39, 0x0a, 0x0a, 0x6e, 0x5f, 0x67, 0x72, 0x61,
	0x6e, 0x5f, 0x63, 0x67, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x78, 0x6e,
	0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x4e, 0x67, 0x52, 0x41,
	0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x49, 0x44, 0x52, 0x09, 0x6e, 0x47, 0x52, 0x41, 0x4e, 0x2d, 0x43,
	0x47, 0x49, 0x12, 0x32, 0x0a, 0x13, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x79, 0x65,
	0x64, 0x5f, 0x69, 0x6e, 0x5f, 0x63, 0x65, 0x6c, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x48,
	0x00, 0x52, 0x10, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x79, 0x65, 0x64, 0x49, 0x6e, 0x43,
	0x65, 0x6c, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x54, 0x0a, 0x0e, 0x69, 0x5f, 0x65, 0x5f, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d,
	0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65,
	0x64, 0x55, 0x65, 0x6d, 0x6f, 0x76, 0x69, 0x6e, 0x67, 0x54, 0x72, 0x61, 0x6a, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x79, 0x49, 0x74, 0x65, 0x6d, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x52, 0x0d, 0x69,
	0x45, 0x2d, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x16, 0x0a, 0x14,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x79, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x5f,
	0x63, 0x65, 0x6c, 0x6c, 0x22, 0x57, 0x0a, 0x27, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64,
	0x52, 0x61, 0x74, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x12,
	0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x96, 0x02,
	0x0a, 0x21, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x52, 0x61, 0x74, 0x72, 0x65, 0x73,
	0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x49, 0x0a, 0x16, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x72,
	0x61, 0x74, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x61, 0x73, 0x6e, 0x31, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x69,
	0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x15, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79,
	0x52, 0x41, 0x54, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4d,
	0x0a, 0x18, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x5f, 0x72, 0x61, 0x74, 0x72,
	0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x61, 0x73, 0x6e, 0x31, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x69, 0x74, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x52, 0x17, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x52,
	0x41, 0x54, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x57, 0x0a,
	0x0e, 0x69, 0x5f, 0x65, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e,
	0x45, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x52, 0x61, 0x74, 0x72, 0x65, 0x73, 0x74, 0x72,
	0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x52, 0x0d, 0x69, 0x45, 0x2d, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x3e, 0x0a, 0x19, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x64,
	0x65, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x42, 0x75, 0x64,
	0x67, 0x65, 0x74, 0x12, 0x21, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x42, 0x0b, 0xfa, 0x42, 0x08, 0x1a, 0x06, 0x18, 0xff, 0xff, 0x03, 0x28, 0x00, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x4f, 0x0a, 0x18, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x64,
	0x65, 0x64, 0x53, 0x6c, 0x69, 0x63, 0x65, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x33, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0f, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x4e, 0x53, 0x73,
	0x61, 0x69, 0x42, 0x0c, 0xfa, 0x42, 0x09, 0x92, 0x01, 0x06, 0x08, 0x01, 0x10, 0xff, 0xff, 0x03,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x48, 0x0a, 0x1c, 0x45, 0x78, 0x74, 0x65, 0x6e,
	0x64, 0x65, 0x64, 0x55, 0x65, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x28, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x61, 0x73, 0x6e, 0x31, 0x2e, 0x76, 0x31,
	0x2e, 0x42, 0x69, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x22, 0x40, 0x0a, 0x07, 0x45, 0x78, 0x74, 0x54, 0x6c, 0x61, 0x73, 0x12, 0x35, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x78, 0x6e,
	0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x74, 0x54, 0x6c, 0x61, 0x49, 0x74, 0x65, 0x6d,
	0x42, 0x0a, 0xfa, 0x42, 0x07, 0x92, 0x01, 0x04, 0x08, 0x01, 0x10, 0x10, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x22, 0x40, 0x0a, 0x10, 0x45, 0x78, 0x74, 0x54, 0x6c, 0x61, 0x49, 0x74, 0x65,
	0x6d, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x9c, 0x02, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x54, 0x6c, 0x61,
	0x49, 0x74, 0x65, 0x6d, 0x12, 0x41, 0x0a, 0x0a, 0x69, 0x5f, 0x70, 0x73, 0x65, 0x63, 0x5f, 0x74,
	0x6c, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e,
	0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x4c, 0x61, 0x79, 0x65,
	0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x48, 0x00, 0x52, 0x08, 0x69, 0x50, 0x73, 0x65,
	0x63, 0x54, 0x4c, 0x41, 0x88, 0x01, 0x01, 0x12, 0x58, 0x0a, 0x1d, 0x67, 0x5f, 0x74, 0x70, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10,
	0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x74, 0x70, 0x74, 0x6c, 0x61, 0x73,
	0x48, 0x01, 0x52, 0x1a, 0x67, 0x54, 0x50, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74,
	0x4c, 0x61, 0x79, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x88, 0x01,
	0x01, 0x12, 0x40, 0x0a, 0x0e, 0x69, 0x5f, 0x65, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x78, 0x6e, 0x61, 0x70,
	0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x74, 0x54, 0x6c, 0x61, 0x49, 0x74, 0x65, 0x6d, 0x45, 0x78,
	0x74, 0x49, 0x65, 0x73, 0x52, 0x0d, 0x69, 0x45, 0x2d, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x73, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x69, 0x5f, 0x70, 0x73, 0x65, 0x63, 0x5f, 0x74,
	0x6c, 0x61, 0x42, 0x20, 0x0a, 0x1e, 0x5f, 0x67, 0x5f, 0x74, 0x70, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x70, 0x6f, 0x72, 0x74, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x65, 0x73, 0x22, 0x40, 0x0a, 0x07, 0x47, 0x74, 0x70, 0x74, 0x6c, 0x61, 0x73, 0x12,
	0x35, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x74, 0x70, 0x74, 0x6c, 0x61, 0x49,
	0x74, 0x65, 0x6d, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x92, 0x01, 0x04, 0x08, 0x01, 0x10, 0x10, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x40, 0x0a, 0x10, 0x47, 0x74, 0x70, 0x74, 0x6c, 0x61,
	0x49, 0x74, 0x65, 0x6d, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xb1, 0x01, 0x0a, 0x0a, 0x47, 0x74, 0x70,
	0x74, 0x6c, 0x61, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x61, 0x0a, 0x1d, 0x67, 0x5f, 0x74, 0x70, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f,
	0x72, 0x74, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x1a,
	0x67, 0x54, 0x50, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x4c, 0x61, 0x79, 0x65,
	0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x12, 0x40, 0x0a, 0x0e, 0x69, 0x5f,
	0x65, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x74, 0x70,
	0x74, 0x6c, 0x61, 0x49, 0x74, 0x65, 0x6d, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x52, 0x0d, 0x69,
	0x45, 0x2d, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x3e, 0x0a, 0x26,
	0x46, 0x69, 0x76, 0x65, 0x47, 0x63, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x65,
	0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e,
	0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x2a, 0x0a, 0x06,
	0x46, 0x69, 0x76, 0x65, 0x51, 0x69, 0x12, 0x20, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x1a, 0x05, 0x18, 0xff, 0x01, 0x28,
	0x00, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x44, 0x0a, 0x14, 0x47, 0x62, 0x72, 0x71,
	0x6f, 0x53, 0x66, 0x6c, 0x6f, 0x77, 0x49, 0x6e, 0x66, 0x6f, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73,
	0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xd7,
	0x05, 0x0a, 0x0e, 0x47, 0x62, 0x72, 0x71, 0x6f, 0x53, 0x66, 0x6c, 0x6f, 0x77, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x40, 0x0a, 0x14, 0x6d, 0x61, 0x78, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x62, 0x69,
	0x74, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x64, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x10, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x69, 0x74, 0x52, 0x61, 0x74,
	0x65, 0x52, 0x10, 0x6d, 0x61, 0x78, 0x46, 0x6c, 0x6f, 0x77, 0x42, 0x69, 0x74, 0x52, 0x61, 0x74,
	0x65, 0x44, 0x4c, 0x12, 0x40, 0x0a, 0x14, 0x6d, 0x61, 0x78, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x5f,
	0x62, 0x69, 0x74, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x75, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x10, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x69, 0x74, 0x52,
	0x61, 0x74, 0x65, 0x52, 0x10, 0x6d, 0x61, 0x78, 0x46, 0x6c, 0x6f, 0x77, 0x42, 0x69, 0x74, 0x52,
	0x61, 0x74, 0x65, 0x55, 0x4c, 0x12, 0x4e, 0x0a, 0x1b, 0x67, 0x75, 0x61, 0x72, 0x61, 0x6e, 0x74,
	0x65, 0x65, 0x64, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x62, 0x69, 0x74, 0x5f, 0x72, 0x61, 0x74,
	0x65, 0x5f, 0x64, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x78, 0x6e, 0x61,
	0x70, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x69, 0x74, 0x52, 0x61, 0x74, 0x65, 0x52, 0x17, 0x67, 0x75,
	0x61, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x65, 0x64, 0x46, 0x6c, 0x6f, 0x77, 0x42, 0x69, 0x74, 0x52,
	0x61, 0x74, 0x65, 0x44, 0x4c, 0x12, 0x4e, 0x0a, 0x1b, 0x67, 0x75, 0x61, 0x72, 0x61, 0x6e, 0x74,
	0x65, 0x65, 0x64, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x62, 0x69, 0x74, 0x5f, 0x72, 0x61, 0x74,
	0x65, 0x5f, 0x75, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x78, 0x6e, 0x61,
	0x70, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x69, 0x74, 0x52, 0x61, 0x74, 0x65, 0x52, 0x17, 0x67, 0x75,
	0x61, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x65, 0x64, 0x46, 0x6c, 0x6f, 0x77, 0x42, 0x69, 0x74, 0x52,
	0x61, 0x74, 0x65, 0x55, 0x4c, 0x12, 0x62, 0x0a, 0x14, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x2a, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x47, 0x62, 0x72, 0x71, 0x6f, 0x53, 0x66, 0x6c, 0x6f, 0x77, 0x49, 0x6e, 0x66, 0x6f, 0x48,
	0x00, 0x52, 0x13, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x52, 0x0a, 0x17, 0x6d, 0x61, 0x78,
	0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x6c, 0x6f, 0x73, 0x73, 0x5f, 0x72, 0x61, 0x74,
	0x65, 0x5f, 0x64, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x78, 0x6e, 0x61,
	0x70, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x4c, 0x6f, 0x73, 0x73, 0x52,
	0x61, 0x74, 0x65, 0x48, 0x01, 0x52, 0x13, 0x6d, 0x61, 0x78, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74,
	0x4c, 0x6f, 0x73, 0x73, 0x52, 0x61, 0x74, 0x65, 0x44, 0x4c, 0x88, 0x01, 0x01, 0x12, 0x52, 0x0a,
	0x17, 0x6d, 0x61, 0x78, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x6c, 0x6f, 0x73, 0x73,
	0x5f, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x75, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x4c,
	0x6f, 0x73, 0x73, 0x52, 0x61, 0x74, 0x65, 0x48, 0x02, 0x52, 0x13, 0x6d, 0x61, 0x78, 0x50, 0x61,
	0x63, 0x6b, 0x65, 0x74, 0x4c, 0x6f, 0x73, 0x73, 0x52, 0x61, 0x74, 0x65, 0x55, 0x4c, 0x88, 0x01,
	0x01, 0x12, 0x44, 0x0a, 0x0e, 0x69, 0x5f, 0x65, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x78, 0x6e, 0x61, 0x70,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x62, 0x72, 0x71, 0x6f, 0x53, 0x66, 0x6c, 0x6f, 0x77, 0x49, 0x6e,
	0x66, 0x6f, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x52, 0x0d, 0x69, 0x45, 0x2d, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x6e, 0x6f, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x42, 0x1a, 0x0a, 0x18, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f,
	0x6c, 0x6f, 0x73, 0x73, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x64, 0x6c, 0x42, 0x1a, 0x0a, 0x18,
	0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x6c, 0x6f, 0x73, 0x73,
	0x5f, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x75, 0x6c, 0x22, 0x41, 0x0a, 0x11, 0x47, 0x6c, 0x6f, 0x62,
	0x61, 0x6c, 0x67, 0x4e, 0x62, 0x49, 0x44, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x12, 0x2c, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xaf, 0x01, 0x0a, 0x0b,
	0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x67, 0x4e, 0x62, 0x49, 0x44, 0x12, 0x2f, 0x0a, 0x07, 0x70,
	0x6c, 0x6d, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x78,
	0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6c, 0x6d, 0x6e, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x52, 0x07, 0x70, 0x6c, 0x6d, 0x6e, 0x2d, 0x69, 0x64, 0x12, 0x2c, 0x0a, 0x06,
	0x67, 0x6e, 0x62, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x78,
	0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6e, 0x62, 0x49, 0x44, 0x43, 0x68, 0x6f, 0x69,
	0x63, 0x65, 0x52, 0x06, 0x67, 0x6e, 0x62, 0x2d, 0x69, 0x64, 0x12, 0x41, 0x0a, 0x0e, 0x69, 0x5f,
	0x65, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6c, 0x6f,
	0x62, 0x61, 0x6c, 0x67, 0x4e, 0x62, 0x49, 0x44, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x52, 0x0d,
	0x69, 0x45, 0x2d, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x41, 0x0a,
	0x11, 0x47, 0x6e, 0x62, 0x49, 0x44, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x45, 0x78, 0x74, 0x49,
	0x65, 0x73, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x22, 0x96, 0x01, 0x0a, 0x0b, 0x47, 0x6e, 0x62, 0x49, 0x44, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65,
	0x12, 0x2c, 0x0a, 0x06, 0x67, 0x6e, 0x62, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x61, 0x73, 0x6e, 0x31, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x69, 0x74, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x48, 0x00, 0x52, 0x06, 0x67, 0x6e, 0x62, 0x2d, 0x49, 0x44, 0x12, 0x48,
	0x0a, 0x10, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x6e, 0x62, 0x49, 0x44, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x45, 0x78,
	0x74, 0x49, 0x65, 0x73, 0x48, 0x00, 0x52, 0x10, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x2d, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x0f, 0x0a, 0x0d, 0x67, 0x6e, 0x62, 0x5f,
	0x69, 0x64, 0x5f, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x22, 0x4c, 0x0a, 0x1c, 0x47, 0x6e, 0x62,
	0x52, 0x61, 0x64, 0x69, 0x6f, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xdd, 0x01, 0x0a, 0x16, 0x47, 0x6e, 0x62, 0x52,
	0x61, 0x64, 0x69, 0x6f, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x75, 0x0a, 0x23, 0x73, 0x73, 0x62, 0x5f, 0x61, 0x72, 0x65, 0x61, 0x5f, 0x72,
	0x61, 0x64, 0x69, 0x6f, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x27, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x73, 0x62, 0x61, 0x72, 0x65,
	0x61, 0x52, 0x61, 0x64, 0x69, 0x6f, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x1f, 0x73, 0x73, 0x62, 0x41, 0x72, 0x65,
	0x61, 0x52, 0x61, 0x64, 0x69, 0x6f, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x2d, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x4c, 0x0a, 0x0e, 0x69, 0x5f, 0x65,
	0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x25, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6e, 0x62, 0x52,
	0x61, 0x64, 0x69, 0x6f, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x52, 0x0d, 0x69, 0x45, 0x2d, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x42, 0x0a, 0x12, 0x47, 0x6c, 0x6f, 0x62, 0x61,
	0x6c, 0x43, 0x65, 0x6c, 0x6c, 0x49, 0x44, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x12, 0x2c, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xba, 0x01, 0x0a, 0x0c,
	0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x43, 0x65, 0x6c, 0x6c, 0x49, 0x44, 0x12, 0x2f, 0x0a, 0x07,
	0x70, 0x6c, 0x6d, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6c, 0x6d, 0x6e, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x52, 0x07, 0x70, 0x6c, 0x6d, 0x6e, 0x2d, 0x69, 0x64, 0x12, 0x35, 0x0a,
	0x09, 0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x54,
	0x79, 0x70, 0x65, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x52, 0x09, 0x63, 0x65, 0x6c, 0x6c, 0x2d,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x42, 0x0a, 0x0e, 0x69, 0x5f, 0x65, 0x5f, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x78,
	0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x43, 0x65, 0x6c,
	0x6c, 0x49, 0x44, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x52, 0x0d, 0x69, 0x45, 0x2d, 0x45, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x41, 0x0a, 0x11, 0x47, 0x6c, 0x6f, 0x62,
	0x61, 0x6c, 0x65, 0x4e, 0x62, 0x49, 0x44, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x12, 0x2c, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xb1, 0x01, 0x0a, 0x0d,
	0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x6e, 0x67, 0x65, 0x4e, 0x62, 0x49, 0x44, 0x12, 0x2f, 0x0a,
	0x07, 0x70, 0x6c, 0x6d, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6c, 0x6d, 0x6e, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x07, 0x70, 0x6c, 0x6d, 0x6e, 0x2d, 0x69, 0x64, 0x12, 0x2c,
	0x0a, 0x06, 0x65, 0x6e, 0x62, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6e, 0x62, 0x49, 0x44, 0x43, 0x68,
	0x6f, 0x69, 0x63, 0x65, 0x52, 0x06, 0x65, 0x6e, 0x62, 0x2d, 0x69, 0x64, 0x12, 0x41, 0x0a, 0x0e,
	0x69, 0x5f, 0x65, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x65, 0x4e, 0x62, 0x49, 0x44, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73,
	0x52, 0x0d, 0x69, 0x45, 0x2d, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x22,
	0x41, 0x0a, 0x11, 0x45, 0x6e, 0x62, 0x49, 0x44, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x45, 0x78,
	0x74, 0x49, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x22, 0xa8, 0x02, 0x0a, 0x0b, 0x45, 0x6e, 0x62, 0x49, 0x44, 0x43, 0x68, 0x6f, 0x69,
	0x63, 0x65, 0x12, 0x38, 0x0a, 0x0c, 0x65, 0x6e, 0x62, 0x5f, 0x69, 0x64, 0x5f, 0x6d, 0x61, 0x63,
	0x72, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x61, 0x73, 0x6e, 0x31, 0x2e,
	0x76, 0x31, 0x2e, 0x42, 0x69, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x48, 0x00, 0x52, 0x0c,
	0x65, 0x6e, 0x62, 0x2d, 0x49, 0x44, 0x2d, 0x6d, 0x61, 0x63, 0x72, 0x6f, 0x12, 0x42, 0x0a, 0x11,
	0x65, 0x6e, 0x62, 0x5f, 0x69, 0x64, 0x5f, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x6d, 0x61, 0x63, 0x72,
	0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x61, 0x73, 0x6e, 0x31, 0x2e, 0x76,
	0x31, 0x2e, 0x42, 0x69, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x48, 0x00, 0x52, 0x11, 0x65,
	0x6e, 0x62, 0x2d, 0x49, 0x44, 0x2d, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x6d, 0x61, 0x63, 0x72, 0x6f,
	0x12, 0x40, 0x0a, 0x10, 0x65, 0x6e, 0x62, 0x5f, 0x69, 0x64, 0x5f, 0x6c, 0x6f, 0x6e, 0x67, 0x6d,
	0x61, 0x63, 0x72, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x61, 0x73, 0x6e,
	0x31, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x69, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x48, 0x00,
	0x52, 0x10, 0x65, 0x6e, 0x62, 0x2d, 0x49, 0x44, 0x2d, 0x6c, 0x6f, 0x6e, 0x67, 0x6d, 0x61, 0x63,
	0x72, 0x6f, 0x12, 0x48, 0x0a, 0x10, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x5f, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x78,
	0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6e, 0x62, 0x49, 0x44, 0x43, 0x68, 0x6f, 0x69,
	0x63, 0x65, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x48, 0x00, 0x52, 0x10, 0x63, 0x68, 0x6f, 0x69,
	0x63, 0x65, 0x2d, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x0f, 0x0a, 0x0d,
	0x65, 0x6e, 0x62, 0x5f, 0x69, 0x64, 0x5f, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x22, 0x47, 0x0a,
	0x17, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x4e, 0x67, 0x52, 0x41, 0x6e, 0x63, 0x65, 0x6c, 0x6c,
	0x49, 0x44, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xd1, 0x01, 0x0a, 0x11, 0x47, 0x6c, 0x6f, 0x62, 0x61,
	0x6c, 0x4e, 0x67, 0x52, 0x41, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x49, 0x44, 0x12, 0x2f, 0x0a, 0x07,
	0x70, 0x6c, 0x6d, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6c, 0x6d, 0x6e, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x52, 0x07, 0x70, 0x6c, 0x6d, 0x6e, 0x2d, 0x69, 0x64, 0x12, 0x42, 0x0a,
	0x0e, 0x6e, 0x67, 0x5f, 0x72, 0x61, 0x6e, 0x5f, 0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e,
	0x4e, 0x67, 0x52, 0x41, 0x6e, 0x43, 0x65, 0x6c, 0x6c, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x52, 0x0e, 0x6e, 0x67, 0x2d, 0x52, 0x41, 0x4e, 0x2d, 0x43, 0x65, 0x6c, 0x6c, 0x2d, 0x69,
	0x64, 0x12, 0x47, 0x0a, 0x0e, 0x69, 0x5f, 0x65, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x78, 0x6e, 0x61, 0x70,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x4e, 0x67, 0x52, 0x41, 0x6e, 0x63,
	0x65, 0x6c, 0x6c, 0x49, 0x44, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x52, 0x0d, 0x69, 0x45, 0x2d,
	0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x47, 0x0a, 0x17, 0x47, 0x6c,
	0x6f, 0x62, 0x61, 0x6c, 0x4e, 0x67, 0x52, 0x41, 0x6e, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x44, 0x45,
	0x78, 0x74, 0x49, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x22, 0xd9, 0x01, 0x0a, 0x11, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x4e, 0x67,
	0x52, 0x41, 0x6e, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x44, 0x12, 0x29, 0x0a, 0x04, 0x67, 0x5f, 0x6e,
	0x62, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x67, 0x4e, 0x62, 0x49, 0x44, 0x48, 0x00, 0x52,
	0x03, 0x67, 0x4e, 0x42, 0x12, 0x31, 0x0a, 0x07, 0x6e, 0x67, 0x5f, 0x65, 0x5f, 0x6e, 0x62, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x6e, 0x67, 0x65, 0x4e, 0x62, 0x49, 0x44, 0x48, 0x00, 0x52,
	0x06, 0x6e, 0x67, 0x2d, 0x65, 0x4e, 0x42, 0x12, 0x4e, 0x0a, 0x10, 0x63, 0x68, 0x6f, 0x69, 0x63,
	0x65, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6c, 0x6f, 0x62,
	0x61, 0x6c, 0x4e, 0x67, 0x52, 0x41, 0x6e, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x44, 0x45, 0x78, 0x74,
	0x49, 0x65, 0x73, 0x48, 0x00, 0x52, 0x10, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x2d, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x16, 0x0a, 0x14, 0x67, 0x6c, 0x6f, 0x62, 0x61,
	0x6c, 0x5f, 0x6e, 0x67, 0x5f, 0x72, 0x61, 0x6e, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x22,
	0x2a, 0x0a, 0x07, 0x47, 0x74, 0x70, 0x54, 0x45, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x09, 0xfa, 0x42, 0x06, 0x7a, 0x04,
	0x10, 0x04, 0x18, 0x04, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x58, 0x0a, 0x28, 0x47,
	0x74, 0x70, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72,
	0x74, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xee, 0x01, 0x0a, 0x22, 0x47, 0x74, 0x70, 0x74, 0x75, 0x6e,
	0x6e, 0x65, 0x6c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x4c, 0x61, 0x79, 0x65,
	0x72, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x40, 0x0a, 0x0b,
	0x74, 0x6e, 0x6c, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x70, 0x6f, 0x72, 0x74, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x52, 0x0b, 0x74, 0x6e, 0x6c, 0x2d, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x2c,
	0x0a, 0x08, 0x67, 0x74, 0x70, 0x5f, 0x74, 0x65, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x10, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x74, 0x70, 0x54, 0x45,
	0x69, 0x64, 0x52, 0x08, 0x67, 0x74, 0x70, 0x2d, 0x74, 0x65, 0x69, 0x64, 0x12, 0x58, 0x0a, 0x0e,
	0x69, 0x5f, 0x65, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x74, 0x70, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72,
	0x74, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x52, 0x0d, 0x69, 0x45, 0x2d, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x3b, 0x0a, 0x0b, 0x47, 0x75, 0x61, 0x6d, 0x69, 0x45,
	0x78, 0x74, 0x49, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x22, 0x99, 0x02, 0x0a, 0x05, 0x47, 0x75, 0x61, 0x6d, 0x69, 0x12, 0x2f, 0x0a,
	0x07, 0x70, 0x6c, 0x6d, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6c, 0x6d, 0x6e, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x07, 0x70, 0x6c, 0x6d, 0x6e, 0x2d, 0x49, 0x44, 0x12, 0x38,
	0x0a, 0x0d, 0x61, 0x6d, 0x66, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x61, 0x73, 0x6e, 0x31, 0x2e, 0x76, 0x31, 0x2e,
	0x42, 0x69, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x0d, 0x61, 0x6d, 0x66, 0x2d, 0x72,
	0x65, 0x67, 0x69, 0x6f, 0x6e, 0x2d, 0x69, 0x64, 0x12, 0x32, 0x0a, 0x0a, 0x61, 0x6d, 0x66, 0x5f,
	0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x61,
	0x73, 0x6e, 0x31, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x69, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x52, 0x0a, 0x61, 0x6d, 0x66, 0x2d, 0x73, 0x65, 0x74, 0x2d, 0x69, 0x64, 0x12, 0x34, 0x0a, 0x0b,
	0x61, 0x6d, 0x66, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x61, 0x73, 0x6e, 0x31, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x69, 0x74, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x0b, 0x61, 0x6d, 0x66, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x12, 0x3b, 0x0a, 0x0e, 0x69, 0x5f, 0x65, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x78, 0x6e, 0x61,
	0x70, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x75, 0x61, 0x6d, 0x69, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73,
	0x52, 0x0d, 0x69, 0x45, 0x2d, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x22,
	0x2d, 0x0a, 0x0a, 0x48, 0x79, 0x73, 0x74, 0x65, 0x72, 0x65, 0x73, 0x69, 0x73, 0x12, 0x1f, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x09, 0xfa, 0x42,
	0x06, 0x1a, 0x04, 0x18, 0x1e, 0x28, 0x00, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x29,
	0x0a, 0x11, 0x49, 0x6d, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x65, 0x4d, 0x64, 0x74, 0x45, 0x55,
	0x74, 0x72, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x44, 0x0a, 0x14, 0x49, 0x6d, 0x6d,
	0x65, 0x64, 0x69, 0x61, 0x74, 0x65, 0x4d, 0x64, 0x74, 0x4e, 0x52, 0x45, 0x78, 0x74, 0x49, 0x65,
	0x73, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22,
	0xcc, 0x09, 0x0a, 0x0e, 0x49, 0x6d, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x65, 0x4d, 0x64, 0x74,
	0x4e, 0x52, 0x12, 0x59, 0x0a, 0x18, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x5f, 0x74, 0x6f, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x4d,
	0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x54, 0x6f, 0x41, 0x63, 0x74,
	0x69, 0x76, 0x61, 0x74, 0x65, 0x52, 0x16, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x54, 0x6f, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x12, 0x48, 0x0a,
	0x10, 0x6d, 0x31, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76,
	0x31, 0x2e, 0x4d, 0x31, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x48, 0x00, 0x52, 0x0f, 0x6d, 0x31, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x48, 0x0a, 0x10, 0x6d, 0x34, 0x5f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x34, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x01, 0x52, 0x0f, 0x6d,
	0x34, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01,
	0x01, 0x12, 0x48, 0x0a, 0x10, 0x6d, 0x35, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x78, 0x6e,
	0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x35, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x02, 0x52, 0x0f, 0x6d, 0x35, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x4c, 0x0a, 0x12, 0x6d,
	0x5f, 0x64, 0x74, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x66,
	0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76,
	0x31, 0x2e, 0x4d, 0x64, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66,
	0x6f, 0x48, 0x03, 0x52, 0x11, 0x6d, 0x44, 0x54, 0x2d, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2d, 0x49, 0x6e, 0x66, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x48, 0x0a, 0x10, 0x6d, 0x36, 0x5f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x36,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x04, 0x52,
	0x0f, 0x6d, 0x36, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x88, 0x01, 0x01, 0x12, 0x48, 0x0a, 0x10, 0x6d, 0x37, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x37, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x05, 0x52, 0x0f, 0x6d, 0x37, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x7f, 0x0a,
	0x23, 0x62, 0x6c, 0x75, 0x65, 0x74, 0x6f, 0x6f, 0x74, 0x68, 0x5f, 0x6d, 0x65, 0x61, 0x73, 0x75,
	0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x78, 0x6e, 0x61,
	0x70, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6c, 0x75, 0x65, 0x74, 0x6f, 0x6f, 0x74, 0x68, 0x4d, 0x65,
	0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x06, 0x52, 0x21, 0x62, 0x6c, 0x75, 0x65, 0x74, 0x6f,
	0x6f, 0x74, 0x68, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x70,
	0x0a, 0x1e, 0x77, 0x5f, 0x6c, 0x61, 0x6e, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31,
	0x2e, 0x57, 0x6c, 0x61, 0x6e, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x07, 0x52,
	0x1c, 0x77, 0x4c, 0x41, 0x4e, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01,
	0x12, 0x76, 0x0a, 0x20, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x5f, 0x6d, 0x65, 0x61, 0x73, 0x75,
	0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x78, 0x6e, 0x61,
	0x70, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x4d, 0x65, 0x61, 0x73, 0x75,
	0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x48, 0x08, 0x52, 0x1e, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x4d, 0x65, 0x61,
	0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x44, 0x0a, 0x0e, 0x69, 0x5f, 0x65, 0x5f,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6d, 0x6d, 0x65, 0x64,
	0x69, 0x61, 0x74, 0x65, 0x4d, 0x64, 0x74, 0x4e, 0x52, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x52,
	0x0d, 0x69, 0x45, 0x2d, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x13,
	0x0a, 0x11, 0x5f, 0x6d, 0x31, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x6d, 0x34, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x6d, 0x35, 0x5f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x15, 0x0a,
	0x13, 0x5f, 0x6d, 0x5f, 0x64, 0x74, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x6e, 0x66, 0x6f, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x6d, 0x36, 0x5f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x6d, 0x37,
	0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x26,
	0x0a, 0x24, 0x5f, 0x62, 0x6c, 0x75, 0x65, 0x74, 0x6f, 0x6f, 0x74, 0x68, 0x5f, 0x6d, 0x65, 0x61,
	0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x21, 0x0a, 0x1f, 0x5f, 0x77, 0x5f, 0x6c, 0x61, 0x6e,
	0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x23, 0x0a, 0x21, 0x5f, 0x73, 0x65,
	0x6e, 0x73, 0x6f, 0x72, 0x5f, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x5a,
	0x0a, 0x2a, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x49, 0x6e, 0x64, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xb0, 0x02, 0x0a, 0x24, 0x49,
	0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x3f, 0x0a, 0x0b, 0x72, 0x5f, 0x72, 0x63, 0x72, 0x65, 0x65, 0x73, 0x74,
	0x61, 0x62, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e,
	0x76, 0x31, 0x2e, 0x52, 0x72, 0x63, 0x72, 0x65, 0x65, 0x73, 0x74, 0x61, 0x62, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x61, 0x74, 0x65, 0x64, 0x48, 0x00, 0x52, 0x0a, 0x72, 0x52, 0x43, 0x52, 0x65, 0x65,
	0x73, 0x74, 0x61, 0x62, 0x12, 0x39, 0x0a, 0x09, 0x72, 0x5f, 0x72, 0x63, 0x73, 0x65, 0x74, 0x75,
	0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76,
	0x31, 0x2e, 0x52, 0x72, 0x63, 0x73, 0x65, 0x74, 0x75, 0x70, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61,
	0x74, 0x65, 0x64, 0x48, 0x00, 0x52, 0x08, 0x72, 0x52, 0x43, 0x53, 0x65, 0x74, 0x75, 0x70, 0x12,
	0x61, 0x0a, 0x10, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x78, 0x6e, 0x61, 0x70,
	0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x6f,
	0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x49, 0x6e,
	0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x48, 0x00,
	0x52, 0x10, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x2d, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x42, 0x29, 0x0a, 0x27, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x69, 0x6e, 0x67,
	0x5f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x75,
	0x72, 0x65, 0x5f, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x54, 0x0a,
	0x24, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x54, 0x64, 0x64, 0x44, 0x4c, 0x55, 0x4c,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x52, 0x45,
	0x78, 0x74, 0x49, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x22, 0xaa, 0x03, 0x0a, 0x1e, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64,
	0x54, 0x64, 0x64, 0x44, 0x4c, 0x55, 0x4c, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x52, 0x12, 0x24, 0x0a, 0x05, 0x6e, 0x72, 0x73, 0x63, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e,
	0x4e, 0x72, 0x73, 0x63, 0x73, 0x52, 0x05, 0x6e, 0x72, 0x73, 0x63, 0x73, 0x12, 0x41, 0x0a, 0x10,
	0x6e, 0x72, 0x5f, 0x63, 0x79, 0x63, 0x6c, 0x69, 0x63, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31,
	0x2e, 0x4e, 0x72, 0x63, 0x79, 0x63, 0x6c, 0x69, 0x63, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x52,
	0x0e, 0x6e, 0x72, 0x43, 0x79, 0x63, 0x6c, 0x69, 0x63, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12,
	0x70, 0x0a, 0x20, 0x6e, 0x72, 0x5f, 0x64, 0x6c, 0x5f, 0x75, 0x6c, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x69, 0x63,
	0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x78, 0x6e, 0x61, 0x70,
	0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x72, 0x64, 0x6c, 0x55, 0x4c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x69, 0x63, 0x69, 0x74,
	0x79, 0x52, 0x1e, 0x6e, 0x72, 0x44, 0x4c, 0x2d, 0x55, 0x4c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x69, 0x63, 0x69, 0x74,
	0x79, 0x12, 0x57, 0x0a, 0x17, 0x73, 0x6c, 0x6f, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6c, 0x6f,
	0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x16, 0x73, 0x6c, 0x6f, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x54, 0x0a, 0x0e, 0x69, 0x5f,
	0x65, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x74,
	0x65, 0x6e, 0x64, 0x65, 0x64, 0x54, 0x64, 0x64, 0x44, 0x4c, 0x55, 0x4c, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x52, 0x45, 0x78, 0x74, 0x49, 0x65,
	0x73, 0x52, 0x0d, 0x69, 0x45, 0x2d, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x22, 0x3f, 0x0a, 0x1b, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x49, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x20, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0a,
	0xfa, 0x42, 0x07, 0x1a, 0x05, 0x18, 0xff, 0x01, 0x28, 0x00, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x22, 0x3d, 0x0a, 0x11, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x54,
	0x6f, 0x54, 0x72, 0x61, 0x63, 0x65, 0x12, 0x28, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x61, 0x73, 0x6e, 0x31, 0x2e, 0x76, 0x31, 0x2e,
	0x42, 0x69, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x22, 0x3b, 0x0a, 0x0b, 0x49, 0x52, 0x4e, 0x74, 0x69, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x12,
	0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xc7, 0x01,
	0x0a, 0x05, 0x49, 0x52, 0x4e, 0x74, 0x69, 0x12, 0x36, 0x0a, 0x0b, 0x69, 0x5f, 0x72, 0x6e, 0x74,
	0x69, 0x5f, 0x66, 0x75, 0x6c, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x61,
	0x73, 0x6e, 0x31, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x69, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x48, 0x00, 0x52, 0x0b, 0x69, 0x2d, 0x52, 0x4e, 0x54, 0x49, 0x2d, 0x66, 0x75, 0x6c, 0x6c, 0x12,
	0x38, 0x0a, 0x0c, 0x69, 0x5f, 0x72, 0x6e, 0x74, 0x69, 0x5f, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x61, 0x73, 0x6e, 0x31, 0x2e, 0x76, 0x31, 0x2e,
	0x42, 0x69, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x48, 0x00, 0x52, 0x0c, 0x69, 0x2d, 0x52,
	0x4e, 0x54, 0x49, 0x2d, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x12, 0x42, 0x0a, 0x10, 0x63, 0x68, 0x6f,
	0x69, 0x63, 0x65, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x52,
	0x4e, 0x74, 0x69, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x48, 0x00, 0x52, 0x10, 0x63, 0x68, 0x6f,
	0x69, 0x63, 0x65, 0x2d, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x08, 0x0a,
	0x06, 0x69, 0x5f, 0x72, 0x6e, 0x74, 0x69, 0x22, 0x49, 0x0a, 0x19, 0x4c, 0x61, 0x73, 0x74, 0x56,
	0x69, 0x73, 0x69, 0x74, 0x65, 0x64, 0x43, 0x65, 0x6c, 0x6c, 0x49, 0x74, 0x65, 0x6d, 0x45, 0x78,
	0x74, 0x49, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x22, 0xbb, 0x03, 0x0a, 0x13, 0x4c, 0x61, 0x73, 0x74, 0x56, 0x69, 0x73, 0x69, 0x74,
	0x65, 0x64, 0x43, 0x65, 0x6c, 0x6c, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x4d, 0x0a, 0x0c, 0x6e, 0x5f,
	0x67, 0x5f, 0x72, 0x61, 0x6e, 0x5f, 0x63, 0x65, 0x6c, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x28, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x61, 0x73, 0x74, 0x56,
	0x69, 0x73, 0x69, 0x74, 0x65, 0x64, 0x4e, 0x67, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x49,
	0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0b, 0x6e, 0x47,
	0x2d, 0x52, 0x41, 0x4e, 0x2d, 0x43, 0x65, 0x6c, 0x6c, 0x12, 0x4f, 0x0a, 0x0c, 0x65, 0x5f, 0x75,
	0x74, 0x72, 0x61, 0x6e, 0x5f, 0x63, 0x65, 0x6c, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x29, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x61, 0x73, 0x74, 0x56, 0x69,
	0x73, 0x69, 0x74, 0x65, 0x64, 0x45, 0x75, 0x74, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x49,
	0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0c, 0x65, 0x2d,
	0x55, 0x54, 0x52, 0x41, 0x4e, 0x2d, 0x43, 0x65, 0x6c, 0x6c, 0x12, 0x4b, 0x0a, 0x0b, 0x75, 0x5f,
	0x74, 0x72, 0x61, 0x6e, 0x5f, 0x63, 0x65, 0x6c, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x28, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x61, 0x73, 0x74, 0x56, 0x69,
	0x73, 0x69, 0x74, 0x65, 0x64, 0x55, 0x74, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x49, 0x6e,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0a, 0x75, 0x54, 0x52,
	0x41, 0x4e, 0x2d, 0x43, 0x65, 0x6c, 0x6c, 0x12, 0x4b, 0x0a, 0x0b, 0x67, 0x5f, 0x65, 0x72, 0x61,
	0x6e, 0x5f, 0x63, 0x65, 0x6c, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x78,
	0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x61, 0x73, 0x74, 0x56, 0x69, 0x73, 0x69, 0x74,
	0x65, 0x64, 0x47, 0x65, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0a, 0x67, 0x45, 0x52, 0x41, 0x4e, 0x2d,
	0x43, 0x65, 0x6c, 0x6c, 0x12, 0x50, 0x0a, 0x10, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x5f, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x61, 0x73, 0x74, 0x56, 0x69, 0x73,
	0x69, 0x74, 0x65, 0x64, 0x43, 0x65, 0x6c, 0x6c, 0x49, 0x74, 0x65, 0x6d, 0x45, 0x78, 0x74, 0x49,
	0x65, 0x73, 0x48, 0x00, 0x52, 0x10, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x2d, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x18, 0x0a, 0x16, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x76,
	0x69, 0x73, 0x69, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x69, 0x74, 0x65, 0x6d,
	0x22, 0x38, 0x0a, 0x20, 0x4c, 0x61, 0x73, 0x74, 0x56, 0x69, 0x73, 0x69, 0x74, 0x65, 0x64, 0x45,
	0x75, 0x74, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x37, 0x0a, 0x1f, 0x4c, 0x61,
	0x73, 0x74, 0x56, 0x69, 0x73, 0x69, 0x74, 0x65, 0x64, 0x47, 0x65, 0x72, 0x61, 0x6e, 0x63, 0x65,
	0x6c, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x22, 0x37, 0x0a, 0x1f, 0x4c, 0x61, 0x73, 0x74, 0x56, 0x69, 0x73, 0x69, 0x74,
	0x65, 0x64, 0x4e, 0x67, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x37, 0x0a, 0x1f,
	0x4c, 0x61, 0x73, 0x74, 0x56, 0x69, 0x73, 0x69, 0x74, 0x65, 0x64, 0x55, 0x74, 0x72, 0x61, 0x6e,
	0x63, 0x65, 0x6c, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x27, 0x0a, 0x04, 0x4c, 0x63, 0x69, 0x64, 0x12, 0x1f, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x09, 0xfa, 0x42,
	0x06, 0x1a, 0x04, 0x18, 0x20, 0x28, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x49,
	0x0a, 0x0b, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x66, 0x43, 0x65, 0x6c, 0x6c, 0x73, 0x12, 0x3a, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x78,
	0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x73, 0x69, 0x6e, 0x41, 0x6f,
	0x49, 0x49, 0x74, 0x65, 0x6d, 0x42, 0x0b, 0xfa, 0x42, 0x08, 0x92, 0x01, 0x05, 0x08, 0x01, 0x10,
	0x80, 0x02, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x44, 0x0a, 0x14, 0x43, 0x65, 0x6c,
	0x6c, 0x73, 0x69, 0x6e, 0x41, 0x6f, 0x49, 0x49, 0x74, 0x65, 0x6d, 0x45, 0x78, 0x74, 0x49, 0x65,
	0x73, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22,
	0xd8, 0x01, 0x0a, 0x0e, 0x43, 0x65, 0x6c, 0x6c, 0x73, 0x69, 0x6e, 0x41, 0x6f, 0x49, 0x49, 0x74,
	0x65, 0x6d, 0x12, 0x3c, 0x0a, 0x0e, 0x70, 0x5f, 0x6c, 0x6d, 0x6e, 0x5f, 0x69, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x78, 0x6e, 0x61,
	0x70, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6c, 0x6d, 0x6e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x52, 0x0d, 0x70, 0x4c, 0x4d, 0x4e, 0x2d, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x12, 0x42, 0x0a, 0x0e, 0x6e, 0x67, 0x5f, 0x72, 0x61, 0x6e, 0x5f, 0x63, 0x65, 0x6c, 0x6c, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e,
	0x76, 0x31, 0x2e, 0x4e, 0x67, 0x52, 0x41, 0x6e, 0x43, 0x65, 0x6c, 0x6c, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x52, 0x0e, 0x6e, 0x67, 0x2d, 0x72, 0x61, 0x6e, 0x2d, 0x63, 0x65, 0x6c,
	0x6c, 0x2d, 0x69, 0x64, 0x12, 0x44, 0x0a, 0x0e, 0x69, 0x5f, 0x65, 0x5f, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x78,
	0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x73, 0x69, 0x6e, 0x41, 0x6f,
	0x49, 0x49, 0x74, 0x65, 0x6d, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x52, 0x0d, 0x69, 0x45, 0x2d,
	0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x5b, 0x0a, 0x13, 0x4c, 0x69,
	0x73, 0x74, 0x4f, 0x66, 0x52, 0x61, 0x6e, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x69, 0x6e, 0x41, 0x6f,
	0x49, 0x12, 0x44, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x22, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61,
	0x6c, 0x4e, 0x67, 0x52, 0x41, 0x6e, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x69, 0x6e, 0x41, 0x6f, 0x49,
	0x49, 0x74, 0x65, 0x6d, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x92, 0x01, 0x04, 0x08, 0x01, 0x10, 0x40,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x4f, 0x0a, 0x1f, 0x47, 0x6c, 0x6f, 0x62, 0x61,
	0x6c, 0x4e, 0x67, 0x52, 0x41, 0x6e, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x69, 0x6e, 0x41, 0x6f, 0x49,
	0x49, 0x74, 0x65, 0x6d, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xbe, 0x01, 0x0a, 0x19, 0x47, 0x6c, 0x6f,
	0x62, 0x61, 0x6c, 0x4e, 0x67, 0x52, 0x41, 0x6e, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x69, 0x6e, 0x41,
	0x6f, 0x49, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x50, 0x0a, 0x15, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c,
	0x5f, 0x6e, 0x67, 0x5f, 0x72, 0x61, 0x6e, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x4e, 0x67, 0x52, 0x41, 0x6e, 0x6e, 0x6f, 0x64, 0x65, 0x49,
	0x44, 0x52, 0x15, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2d, 0x4e, 0x47, 0x2d, 0x52, 0x41, 0x4e,
	0x2d, 0x4e, 0x6f, 0x64, 0x65, 0x2d, 0x49, 0x44, 0x12, 0x4f, 0x0a, 0x0e, 0x69, 0x5f, 0x65, 0x5f,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x28, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61,
	0x6c, 0x4e, 0x67, 0x52, 0x41, 0x6e, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x69, 0x6e, 0x41, 0x6f, 0x49,
	0x49, 0x74, 0x65, 0x6d, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x52, 0x0d, 0x69, 0x45, 0x2d, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x4b, 0x0a, 0x0f, 0x4c, 0x69, 0x73,
	0x74, 0x4f, 0x66, 0x54, 0x61, 0x69, 0x73, 0x69, 0x6e, 0x41, 0x6f, 0x49, 0x12, 0x38, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x78, 0x6e,
	0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x69, 0x73, 0x69, 0x6e, 0x41, 0x6f, 0x49, 0x49,
	0x74, 0x65, 0x6d, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x92, 0x01, 0x04, 0x08, 0x01, 0x10, 0x10, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x43, 0x0a, 0x13, 0x54, 0x61, 0x69, 0x73, 0x69, 0x6e,
	0x41, 0x6f, 0x49, 0x49, 0x74, 0x65, 0x6d, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x12, 0x2c, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xb3, 0x01, 0x0a, 0x0d,
	0x54, 0x61, 0x69, 0x73, 0x69, 0x6e, 0x41, 0x6f, 0x49, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x3c, 0x0a,
	0x0e, 0x70, 0x5f, 0x6c, 0x6d, 0x6e, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e,
	0x50, 0x6c, 0x6d, 0x6e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x0d, 0x70, 0x4c,
	0x4d, 0x4e, 0x2d, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x1f, 0x0a, 0x04, 0x74,
	0x5f, 0x61, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x78, 0x6e, 0x61, 0x70,
	0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x63, 0x52, 0x03, 0x74, 0x41, 0x43, 0x12, 0x43, 0x0a, 0x0e,
	0x69, 0x5f, 0x65, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x54,
	0x61, 0x69, 0x73, 0x69, 0x6e, 0x41, 0x6f, 0x49, 0x49, 0x74, 0x65, 0x6d, 0x45, 0x78, 0x74, 0x49,
	0x65, 0x73, 0x52, 0x0d, 0x69, 0x45, 0x2d, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x73, 0x22, 0x52, 0x0a, 0x22, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xc3, 0x02, 0x0a, 0x1c, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x31, 0x0a, 0x0a, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x78, 0x6e, 0x61,
	0x70, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x34, 0x0a, 0x0b, 0x72, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x5f, 0x61, 0x72, 0x65, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13,
	0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x41,
	0x72, 0x65, 0x61, 0x52, 0x0a, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x41, 0x72, 0x65, 0x61, 0x12,
	0x51, 0x0a, 0x10, 0x61, 0x72, 0x65, 0x61, 0x5f, 0x6f, 0x66, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x65, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x78, 0x6e, 0x61, 0x70,
	0x2e, 0x76, 0x31, 0x2e, 0x41, 0x72, 0x65, 0x61, 0x4f, 0x66, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x65,
	0x73, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52,
	0x0e, 0x61, 0x72, 0x65, 0x61, 0x4f, 0x66, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x88,
	0x01, 0x01, 0x12, 0x52, 0x0a, 0x0e, 0x69, 0x5f, 0x65, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x78, 0x6e, 0x61,
	0x70, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x52, 0x0d, 0x69, 0x45, 0x2d, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x61, 0x72, 0x65, 0x61, 0x5f,
	0x6f, 0x66, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x22, 0x44, 0x0a, 0x14, 0x4c,
	0x6f, 0x67, 0x67, 0x65, 0x64, 0x4d, 0x64, 0x74, 0x45, 0x55, 0x74, 0x72, 0x61, 0x45, 0x78, 0x74,
	0x49, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x22, 0x9e, 0x04, 0x0a, 0x0e, 0x4c, 0x6f, 0x67, 0x67, 0x65, 0x64, 0x4d, 0x64, 0x74, 0x45,
	0x55, 0x74, 0x72, 0x61, 0x12, 0x43, 0x0a, 0x10, 0x6c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x5f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18,
	0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x52, 0x0f, 0x6c, 0x6f, 0x67, 0x67, 0x69, 0x6e,
	0x67, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x43, 0x0a, 0x10, 0x6c, 0x6f, 0x67,
	0x67, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f,
	0x67, 0x67, 0x69, 0x6e, 0x67, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0f, 0x6c,
	0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x7f,
	0x0a, 0x23, 0x62, 0x6c, 0x75, 0x65, 0x74, 0x6f, 0x6f, 0x74, 0x68, 0x5f, 0x6d, 0x65, 0x61, 0x73,
	0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x78, 0x6e,
	0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6c, 0x75, 0x65, 0x74, 0x6f, 0x6f, 0x74, 0x68, 0x4d,
	0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x21, 0x62, 0x6c, 0x75, 0x65, 0x74,
	0x6f, 0x6f, 0x74, 0x68, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12,
	0x70, 0x0a, 0x1e, 0x77, 0x5f, 0x6c, 0x61, 0x6e, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76,
	0x31, 0x2e, 0x57, 0x6c, 0x61, 0x6e, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x01,
	0x52, 0x1c, 0x77, 0x4c, 0x41, 0x4e, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01,
	0x01, 0x12, 0x44, 0x0a, 0x0e, 0x69, 0x5f, 0x65, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x78, 0x6e, 0x61, 0x70,
	0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x67, 0x67, 0x65, 0x64, 0x4d, 0x64, 0x74, 0x45, 0x55, 0x74,
	0x72, 0x61, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x52, 0x0d, 0x69, 0x45, 0x2d, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x26, 0x0a, 0x24, 0x5f, 0x62, 0x6c, 0x75, 0x65,
	0x74, 0x6f, 0x6f, 0x74, 0x68, 0x5f, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42,
	0x21, 0x0a, 0x1f, 0x5f, 0x77, 0x5f, 0x6c, 0x61, 0x6e, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x22, 0x50, 0x0a, 0x20, 0x4c, 0x6f, 0x67, 0x67, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x22, 0xb7, 0x01, 0x0a, 0x1a, 0x4c, 0x6f, 0x67, 0x67, 0x65, 0x64, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x65, 0x64, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0x47, 0x0a, 0x12, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x5f, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x52, 0x10, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x12, 0x50, 0x0a, 0x0e,
	0x69, 0x5f, 0x65, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x4c,
	0x6f, 0x67, 0x67, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65,
	0x72, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x52,
	0x0d, 0x69, 0x45, 0x2d, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x41,
	0x0a, 0x11, 0x4c, 0x6f, 0x67, 0x67, 0x65, 0x64, 0x4d, 0x64, 0x74, 0x4e, 0x52, 0x45, 0x78, 0x74,
	0x49, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x22, 0xfa, 0x06, 0x0a, 0x0b, 0x4c, 0x6f, 0x67, 0x67, 0x65, 0x64, 0x4d, 0x64, 0x74, 0x4e,
	0x52, 0x12, 0x43, 0x0a, 0x10, 0x6c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x78, 0x6e,
	0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x76, 0x61, 0x6c, 0x52, 0x0f, 0x6c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x43, 0x0a, 0x10, 0x6c, 0x6f, 0x67, 0x67, 0x69, 0x6e,
	0x67, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x18, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x67, 0x67, 0x69,
	0x6e, 0x67, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0f, 0x6c, 0x6f, 0x67, 0x67,
	0x69, 0x6e, 0x67, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x34, 0x0a, 0x0b, 0x72,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x7f, 0x0a, 0x23, 0x62, 0x6c, 0x75, 0x65, 0x74, 0x6f, 0x6f, 0x74, 0x68, 0x5f, 0x6d,
	0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a,
	0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6c, 0x75, 0x65, 0x74, 0x6f, 0x6f,
	0x74, 0x68, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x21, 0x62, 0x6c,
	0x75, 0x65, 0x74, 0x6f, 0x6f, 0x74, 0x68, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x88,
	0x01, 0x01, 0x12, 0x70, 0x0a, 0x1e, 0x77, 0x5f, 0x6c, 0x61, 0x6e, 0x6d, 0x65, 0x61, 0x73, 0x75,
	0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x78, 0x6e, 0x61,
	0x70, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x6c, 0x61, 0x6e, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x48, 0x01, 0x52, 0x1c, 0x77, 0x4c, 0x41, 0x4e, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x88, 0x01, 0x01, 0x12, 0x76, 0x0a, 0x20, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x5f, 0x6d,
	0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27,
	0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x4d,
	0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x02, 0x52, 0x1e, 0x73, 0x65, 0x6e, 0x73, 0x6f,
	0x72, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x6a, 0x0a, 0x1e,
	0x61, 0x72, 0x65, 0x61, 0x5f, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x5f, 0x6f, 0x66, 0x5f, 0x6e, 0x65,
	0x69, 0x67, 0x68, 0x5f, 0x63, 0x65, 0x6c, 0x6c, 0x73, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x41,
	0x72, 0x65, 0x61, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x4f, 0x66, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x43,
	0x65, 0x6c, 0x6c, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x03, 0x52, 0x19, 0x61, 0x72, 0x65, 0x61,
	0x53, 0x63, 0x6f, 0x70, 0x65, 0x4f, 0x66, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x43, 0x65, 0x6c, 0x6c,
	0x73, 0x4c, 0x69, 0x73, 0x74, 0x88, 0x01, 0x01, 0x12, 0x41, 0x0a, 0x0e, 0x69, 0x5f, 0x65, 0x5f,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x67, 0x67, 0x65,
	0x64, 0x4d, 0x64, 0x74, 0x4e, 0x52, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x52, 0x0d, 0x69, 0x45,
	0x2d, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x26, 0x0a, 0x24, 0x5f,
	0x62, 0x6c, 0x75, 0x65, 0x74, 0x6f, 0x6f, 0x74, 0x68, 0x5f, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x42, 0x21, 0x0a, 0x1f, 0x5f, 0x77, 0x5f, 0x6c, 0x61, 0x6e, 0x6d, 0x65, 0x61,
	0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x23, 0x0a, 0x21, 0x5f, 0x73, 0x65, 0x6e, 0x73, 0x6f,
	0x72, 0x5f, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x21, 0x0a, 0x1f, 0x5f,
	0x61, 0x72, 0x65, 0x61, 0x5f, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x5f, 0x6f, 0x66, 0x5f, 0x6e, 0x65,
	0x69, 0x67, 0x68, 0x5f, 0x63, 0x65, 0x6c, 0x6c, 0x73, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x22, 0x4e,
	0x0a, 0x1e, 0x4c, 0x74, 0x65, 0x76, 0x32, 0x58, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73,
	0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x84,
	0x02, 0x0a, 0x18, 0x4c, 0x74, 0x65, 0x76, 0x32, 0x58, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x12, 0x36, 0x0a, 0x0a, 0x76,
	0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x5f, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x12, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x65, 0x68, 0x69, 0x63, 0x6c,
	0x65, 0x55, 0x65, 0x48, 0x00, 0x52, 0x09, 0x76, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x55, 0x45,
	0x88, 0x01, 0x01, 0x12, 0x3f, 0x0a, 0x0d, 0x70, 0x65, 0x64, 0x65, 0x73, 0x74, 0x72, 0x69, 0x61,
	0x6e, 0x5f, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x78, 0x6e, 0x61,
	0x70, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x65, 0x64, 0x65, 0x73, 0x74, 0x72, 0x69, 0x61, 0x6e, 0x55,
	0x65, 0x48, 0x01, 0x52, 0x0c, 0x70, 0x65, 0x64, 0x65, 0x73, 0x74, 0x72, 0x69, 0x61, 0x6e, 0x55,
	0x45, 0x88, 0x01, 0x01, 0x12, 0x4e, 0x0a, 0x0e, 0x69, 0x5f, 0x65, 0x5f, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x78,
	0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x74, 0x65, 0x76, 0x32, 0x58, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x45,
	0x78, 0x74, 0x49, 0x65, 0x73, 0x52, 0x0d, 0x69, 0x45, 0x2d, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x76, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65,
	0x5f, 0x75, 0x65, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x70, 0x65, 0x64, 0x65, 0x73, 0x74, 0x72, 0x69,
	0x61, 0x6e, 0x5f, 0x75, 0x65, 0x22, 0x5a, 0x0a, 0x2a, 0x4c, 0x74, 0x65, 0x75, 0x65, 0x73, 0x69,
	0x64, 0x65, 0x6c, 0x69, 0x6e, 0x6b, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x4d,
	0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x42, 0x69, 0x74, 0x52, 0x61, 0x74, 0x65, 0x45, 0x78, 0x74,
	0x49, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x22, 0xe7, 0x01, 0x0a, 0x24, 0x4c, 0x74, 0x65, 0x75, 0x65, 0x73, 0x69, 0x64, 0x65, 0x6c,
	0x69, 0x6e, 0x6b, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x78, 0x69,
	0x6d, 0x75, 0x6d, 0x42, 0x69, 0x74, 0x52, 0x61, 0x74, 0x65, 0x12, 0x63, 0x0a, 0x26, 0x75, 0x5f,
	0x65, 0x73, 0x69, 0x64, 0x65, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67,
	0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x5f, 0x62, 0x69, 0x74, 0x5f,
	0x72, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x78, 0x6e, 0x61,
	0x70, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x69, 0x74, 0x52, 0x61, 0x74, 0x65, 0x52, 0x21, 0x75, 0x45,
	0x53, 0x69, 0x64, 0x65, 0x6c, 0x69, 0x6e, 0x6b, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74,
	0x65, 0x4d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x42, 0x69, 0x74, 0x52, 0x61, 0x74, 0x65, 0x12,
	0x5a, 0x0a, 0x0e, 0x69, 0x5f, 0x65, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76,
	0x31, 0x2e, 0x4c, 0x74, 0x65, 0x75, 0x65, 0x73, 0x69, 0x64, 0x65, 0x6c, 0x69, 0x6e, 0x6b, 0x41,
	0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x42,
	0x69, 0x74, 0x52, 0x61, 0x74, 0x65, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x52, 0x0d, 0x69, 0x45,
	0x2d, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x45, 0x0a, 0x15, 0x4d,
	0x31, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78,
	0x74, 0x49, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x22, 0x80, 0x03, 0x0a, 0x0f, 0x4d, 0x31, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4c, 0x0a, 0x13, 0x6d, 0x31, 0x72, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x31,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72,
	0x52, 0x12, 0x6d, 0x31, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x54, 0x72, 0x69,
	0x67, 0x67, 0x65, 0x72, 0x12, 0x51, 0x0a, 0x13, 0x6d, 0x31, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68,
	0x6f, 0x6c, 0x64, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x32, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x31, 0x54, 0x68,
	0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x41, 0x32, 0x48, 0x00,
	0x52, 0x12, 0x6d, 0x31, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x41, 0x32, 0x88, 0x01, 0x01, 0x12, 0x54, 0x0a, 0x14, 0x6d, 0x31, 0x70, 0x65, 0x72,
	0x69, 0x6f, 0x64, 0x69, 0x63, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e,
	0x4d, 0x31, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x69, 0x63, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x69, 0x6e, 0x67, 0x48, 0x01, 0x52, 0x13, 0x6d, 0x31, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x69,
	0x63, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x88, 0x01, 0x01, 0x12, 0x45, 0x0a,
	0x0e, 0x69, 0x5f, 0x65, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e,
	0x4d, 0x31, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45,
	0x78, 0x74, 0x49, 0x65, 0x73, 0x52, 0x0d, 0x69, 0x45, 0x2d, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x6d, 0x31, 0x74, 0x68, 0x72, 0x65, 0x73,
	0x68, 0x6f, 0x6c, 0x64, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x32, 0x42, 0x17, 0x0a, 0x15,
	0x5f, 0x6d, 0x31, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x69, 0x63, 0x5f, 0x72, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x69, 0x6e, 0x67, 0x22, 0x49, 0x0a, 0x19, 0x4d, 0x31, 0x50, 0x65, 0x72, 0x69, 0x6f,
	0x64, 0x69, 0x63, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x45, 0x78, 0x74, 0x49,
	0x65, 0x73, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x22, 0xe4, 0x01, 0x0a, 0x13, 0x4d, 0x31, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x69, 0x63, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x43, 0x0a, 0x0f, 0x72, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x1a, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x4d, 0x64, 0x74, 0x52, 0x0e, 0x72,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x3d, 0x0a,
	0x0d, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x4d, 0x64, 0x74, 0x52, 0x0c,
	0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x49, 0x0a, 0x0e,
	0x69, 0x5f, 0x65, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x4d,
	0x31, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x69, 0x63, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69,
	0x6e, 0x67, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x52, 0x0d, 0x69, 0x45, 0x2d, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x48, 0x0a, 0x18, 0x4d, 0x31, 0x54, 0x68, 0x72,
	0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x41, 0x32, 0x45, 0x78, 0x74,
	0x49, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x22, 0xb4, 0x01, 0x0a, 0x12, 0x4d, 0x31, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c,
	0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x41, 0x32, 0x12, 0x54, 0x0a, 0x15, 0x6d, 0x65, 0x61, 0x73,
	0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76,
	0x31, 0x2e, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x68, 0x72,
	0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x41, 0x32, 0x52, 0x14, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x48,
	0x0a, 0x0e, 0x69, 0x5f, 0x65, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31,
	0x2e, 0x4d, 0x31, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x41, 0x32, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x52, 0x0d, 0x69, 0x45, 0x2d, 0x45, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x45, 0x0a, 0x15, 0x4d, 0x34, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x74, 0x49, 0x65,
	0x73, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22,
	0xc6, 0x01, 0x0a, 0x0f, 0x4d, 0x34, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x2d, 0x0a, 0x08, 0x6d, 0x34, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e,
	0x4d, 0x34, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x52, 0x08, 0x6d, 0x34, 0x70, 0x65, 0x72, 0x69,
	0x6f, 0x64, 0x12, 0x3d, 0x0a, 0x0f, 0x6d, 0x34, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x73, 0x5f, 0x74,
	0x6f, 0x5f, 0x6c, 0x6f, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x78, 0x6e,
	0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x73, 0x74, 0x6f, 0x6c, 0x6f, 0x67,
	0x52, 0x0f, 0x6d, 0x34, 0x2d, 0x6c, 0x69, 0x6e, 0x6b, 0x73, 0x2d, 0x74, 0x6f, 0x2d, 0x6c, 0x6f,
	0x67, 0x12, 0x45, 0x0a, 0x0e, 0x69, 0x5f, 0x65, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x78, 0x6e, 0x61, 0x70,
	0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x34, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x52, 0x0d, 0x69, 0x45, 0x2d, 0x45, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x45, 0x0a, 0x15, 0x4d, 0x35, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x74, 0x49, 0x65,
	0x73, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22,
	0xc6, 0x01, 0x0a, 0x0f, 0x4d, 0x35, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x2d, 0x0a, 0x08, 0x6d, 0x35, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e,
	0x4d, 0x35, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x52, 0x08, 0x6d, 0x35, 0x70, 0x65, 0x72, 0x69,
	0x6f, 0x64, 0x12, 0x3d, 0x0a, 0x0f, 0x6d, 0x35, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x73, 0x5f, 0x74,
	0x6f, 0x5f, 0x6c, 0x6f, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x78, 0x6e,
	0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x73, 0x74, 0x6f, 0x6c, 0x6f, 0x67,
	0x52, 0x0f, 0x6d, 0x35, 0x2d, 0x6c, 0x69, 0x6e, 0x6b, 0x73, 0x2d, 0x74, 0x6f, 0x2d, 0x6c, 0x6f,
	0x67, 0x12, 0x45, 0x0a, 0x0e, 0x69, 0x5f, 0x65, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x78, 0x6e, 0x61, 0x70,
	0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x35, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x52, 0x0d, 0x69, 0x45, 0x2d, 0x45, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x45, 0x0a, 0x15, 0x4d, 0x36, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x74, 0x49, 0x65,
	0x73, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22,
	0xe0, 0x01, 0x0a, 0x0f, 0x4d, 0x36, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x47, 0x0a, 0x11, 0x6d, 0x36, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19,
	0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x36, 0x72, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x52, 0x11, 0x6d, 0x36, 0x72, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x2d, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x3d, 0x0a, 0x0f,
	0x6d, 0x36, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x73, 0x5f, 0x74, 0x6f, 0x5f, 0x6c, 0x6f, 0x67, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e,
	0x4c, 0x69, 0x6e, 0x6b, 0x73, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x52, 0x0f, 0x6d, 0x36, 0x2d, 0x6c,
	0x69, 0x6e, 0x6b, 0x73, 0x2d, 0x74, 0x6f, 0x2d, 0x6c, 0x6f, 0x67, 0x12, 0x45, 0x0a, 0x0e, 0x69,
	0x5f, 0x65, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x36,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x74,
	0x49, 0x65, 0x73, 0x52, 0x0d, 0x69, 0x45, 0x2d, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x22, 0x45, 0x0a, 0x15, 0x4d, 0x37, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xc6, 0x01, 0x0a, 0x0f, 0x4d, 0x37,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2d, 0x0a,
	0x08, 0x6d, 0x37, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x11, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x37, 0x70, 0x65, 0x72, 0x69,
	0x6f, 0x64, 0x52, 0x08, 0x6d, 0x37, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x3d, 0x0a, 0x0f,
	0x6d, 0x37, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x73, 0x5f, 0x74, 0x6f, 0x5f, 0x6c, 0x6f, 0x67, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e,
	0x4c, 0x69, 0x6e, 0x6b, 0x73, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x52, 0x0f, 0x6d, 0x37, 0x2d, 0x6c,
	0x69, 0x6e, 0x6b, 0x73, 0x2d, 0x74, 0x6f, 0x2d, 0x6c, 0x6f, 0x67, 0x12, 0x45, 0x0a, 0x0e, 0x69,
	0x5f, 0x65, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x37,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x74,
	0x49, 0x65, 0x73, 0x52, 0x0d, 0x69, 0x45, 0x2d, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x22, 0x2b, 0x0a, 0x08, 0x4d, 0x37, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x1f,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x09, 0xfa,
	0x42, 0x06, 0x1a, 0x04, 0x18, 0x3c, 0x28, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22,
	0x30, 0x0a, 0x04, 0x4d, 0x61, 0x63, 0x49, 0x12, 0x28, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x61, 0x73, 0x6e, 0x31, 0x2e, 0x76, 0x31,
	0x2e, 0x42, 0x69, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x22, 0x38, 0x0a, 0x0c, 0x4d, 0x61, 0x73, 0x6b, 0x65, 0x64, 0x49, 0x6d, 0x65, 0x69, 0x73,
	0x76, 0x12, 0x28, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x61, 0x73, 0x6e, 0x31, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x69, 0x74, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x35, 0x0a, 0x12, 0x4d,
	0x61, 0x78, 0x43, 0x68, 0x6f, 0x70, 0x72, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x1f, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x42, 0x09, 0xfa, 0x42, 0x06, 0x1a, 0x04, 0x18, 0x08, 0x28, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x22, 0x3c, 0x0a, 0x16, 0x4d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x44, 0x61, 0x74,
	0x61, 0x42, 0x75, 0x72, 0x73, 0x74, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0c, 0xfa, 0x42, 0x09,
	0x1a, 0x07, 0x18, 0x80, 0x89, 0x7a, 0x28, 0x80, 0x20, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x22, 0x47, 0x0a, 0x17, 0x4d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x49, 0x70, 0x64, 0x61, 0x74,
	0x61, 0x72, 0x61, 0x74, 0x65, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x95, 0x01, 0x0a, 0x11, 0x4d, 0x61,
	0x78, 0x69, 0x6d, 0x75, 0x6d, 0x49, 0x70, 0x64, 0x61, 0x74, 0x61, 0x72, 0x61, 0x74, 0x65, 0x12,
	0x37, 0x0a, 0x0d, 0x6d, 0x61, 0x78, 0x5f, 0x69, 0x70, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x75, 0x6c,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31,
	0x2e, 0x4d, 0x61, 0x78, 0x49, 0x70, 0x72, 0x61, 0x74, 0x65, 0x52, 0x0c, 0x6d, 0x61, 0x78, 0x49,
	0x50, 0x72, 0x61, 0x74, 0x65, 0x2d, 0x55, 0x4c, 0x12, 0x47, 0x0a, 0x0e, 0x69, 0x5f, 0x65, 0x5f,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x20, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x78, 0x69, 0x6d,
	0x75, 0x6d, 0x49, 0x70, 0x64, 0x61, 0x74, 0x61, 0x72, 0x61, 0x74, 0x65, 0x45, 0x78, 0x74, 0x49,
	0x65, 0x73, 0x52, 0x0d, 0x69, 0x45, 0x2d, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x73, 0x22, 0x3b, 0x0a, 0x18, 0x4d, 0x62, 0x73, 0x66, 0x6e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x1f, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x09, 0xfa, 0x42,
	0x06, 0x1a, 0x04, 0x18, 0x03, 0x28, 0x00, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x52,
	0x0a, 0x22, 0x4d, 0x62, 0x73, 0x66, 0x6e, 0x73, 0x75, 0x62, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x41,
	0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x55, 0x54, 0x72, 0x61, 0x45, 0x78,
	0x74, 0x49, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x22, 0x84, 0x02, 0x0a, 0x1c, 0x4d, 0x62, 0x73, 0x66, 0x6e, 0x73, 0x75, 0x62, 0x66,
	0x72, 0x61, 0x6d, 0x65, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x55,
	0x54, 0x72, 0x61, 0x12, 0x30, 0x0a, 0x08, 0x6f, 0x6e, 0x65, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x61, 0x73, 0x6e, 0x31, 0x2e, 0x76, 0x31, 0x2e,
	0x42, 0x69, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x48, 0x00, 0x52, 0x08, 0x6f, 0x6e, 0x65,
	0x66, 0x72, 0x61, 0x6d, 0x65, 0x12, 0x34, 0x0a, 0x0a, 0x66, 0x6f, 0x75, 0x72, 0x66, 0x72, 0x61,
	0x6d, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x61, 0x73, 0x6e, 0x31,
	0x2e, 0x76, 0x31, 0x2e, 0x42, 0x69, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x48, 0x00, 0x52,
	0x0a, 0x66, 0x6f, 0x75, 0x72, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x59, 0x0a, 0x10, 0x63,
	0x68, 0x6f, 0x69, 0x63, 0x65, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e,
	0x4d, 0x62, 0x73, 0x66, 0x6e, 0x73, 0x75, 0x62, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x41, 0x6c, 0x6c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x55, 0x54, 0x72, 0x61, 0x45, 0x78, 0x74, 0x49,
	0x65, 0x73, 0x48, 0x00, 0x52, 0x10, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x2d, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x21, 0x0a, 0x1f, 0x6d, 0x62, 0x73, 0x66, 0x6e, 0x73,
	0x75, 0x62, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x65, 0x5f, 0x75, 0x74, 0x72, 0x61, 0x22, 0x5f, 0x0a, 0x16, 0x4d, 0x62, 0x73,
	0x66, 0x6e, 0x73, 0x75, 0x62, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x45, 0x55,
	0x54, 0x72, 0x61, 0x12, 0x45, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x23, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x62, 0x73,
	0x66, 0x6e, 0x73, 0x75, 0x62, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x45, 0x55,
	0x54, 0x72, 0x61, 0x49, 0x74, 0x65, 0x6d, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x92, 0x01, 0x04, 0x08,
	0x01, 0x10, 0x08, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x50, 0x0a, 0x20, 0x4d, 0x62,
	0x73, 0x66, 0x6e, 0x73, 0x75, 0x62, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x45,
	0x55, 0x54, 0x72, 0x61, 0x49, 0x74, 0x65, 0x6d, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x12, 0x2c,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x89, 0x03, 0x0a,
	0x1a, 0x4d, 0x62, 0x73, 0x66, 0x6e, 0x73, 0x75, 0x62, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x45, 0x55, 0x54, 0x72, 0x61, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x7f, 0x0a, 0x1c, 0x72,
	0x61, 0x64, 0x69, 0x6f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x3d, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x61, 0x64, 0x69,
	0x6f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x4d, 0x62, 0x73, 0x66, 0x6e, 0x73, 0x75, 0x62, 0x66, 0x72,
	0x61, 0x6d, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x45, 0x75, 0x74, 0x72, 0x61, 0x69, 0x74, 0x65, 0x6d,
	0x52, 0x1a, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x41, 0x6c, 0x6c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x40, 0x0a, 0x1c,
	0x72, 0x61, 0x64, 0x69, 0x6f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x1a, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x41, 0x6c,
	0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x56,
	0x0a, 0x13, 0x73, 0x75, 0x62, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x78, 0x6e,
	0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x62, 0x73, 0x66, 0x6e, 0x73, 0x75, 0x62, 0x66, 0x72,
	0x61, 0x6d, 0x65, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x55, 0x54,
	0x72, 0x61, 0x52, 0x12, 0x73, 0x75, 0x62, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x41, 0x6c, 0x6c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x50, 0x0a, 0x0e, 0x69, 0x5f, 0x65, 0x5f, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29,
	0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x62, 0x73, 0x66, 0x6e, 0x73, 0x75,
	0x62, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x45, 0x55, 0x54, 0x72, 0x61, 0x49,
	0x74, 0x65, 0x6d, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x52, 0x0d, 0x69, 0x45, 0x2d, 0x45, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x46, 0x0a, 0x16, 0x4d, 0x64, 0x74, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x74, 0x49,
	0x65, 0x73, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x22, 0xc8, 0x02, 0x0a, 0x10, 0x4d, 0x64, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x55, 0x0a, 0x15, 0x6d, 0x5f, 0x64, 0x74, 0x5f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x4d,
	0x64, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e,
	0x52, 0x48, 0x00, 0x52, 0x14, 0x6d, 0x44, 0x54, 0x2d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x4e, 0x52, 0x88, 0x01, 0x01, 0x12, 0x5e, 0x0a, 0x18,
	0x6d, 0x5f, 0x64, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x65, 0x75, 0x74, 0x72, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x64, 0x74, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x55, 0x74, 0x72, 0x61, 0x48, 0x01,
	0x52, 0x17, 0x6d, 0x44, 0x54, 0x2d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2d, 0x45, 0x55, 0x54, 0x52, 0x41, 0x88, 0x01, 0x01, 0x12, 0x46, 0x0a, 0x0e,
	0x69, 0x5f, 0x65, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x4d,
	0x64, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45,
	0x78, 0x74, 0x49, 0x65, 0x73, 0x52, 0x0d, 0x69, 0x45, 0x2d, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x42, 0x18, 0x0a, 0x16, 0x5f, 0x6d, 0x5f, 0x64, 0x74, 0x5f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x72, 0x42, 0x1b,
	0x0a, 0x19, 0x5f, 0x6d, 0x5f, 0x64, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x75, 0x74, 0x72, 0x61, 0x22, 0x48, 0x0a, 0x18, 0x4d,
	0x64, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e,
	0x52, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x95, 0x03, 0x0a, 0x12, 0x4d, 0x64, 0x74, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x52, 0x12, 0x3e, 0x0a, 0x0e,
	0x6d, 0x64, 0x74, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x4d,
	0x64, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0e, 0x6d, 0x64,
	0x74, 0x2d, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4f, 0x0a, 0x14,
	0x61, 0x72, 0x65, 0x61, 0x5f, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x5f, 0x6f, 0x66, 0x5f, 0x6d, 0x64,
	0x74, 0x5f, 0x6e, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x78, 0x6e, 0x61,
	0x70, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x72, 0x65, 0x61, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x4f, 0x66,
	0x4d, 0x64, 0x74, 0x4e, 0x52, 0x48, 0x00, 0x52, 0x11, 0x61, 0x72, 0x65, 0x61, 0x53, 0x63, 0x6f,
	0x70, 0x65, 0x4f, 0x66, 0x4d, 0x44, 0x54, 0x2d, 0x4e, 0x52, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a,
	0x0b, 0x6d, 0x5f, 0x64, 0x74, 0x6d, 0x6f, 0x64, 0x65, 0x5f, 0x6e, 0x72, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x64, 0x74,
	0x6d, 0x6f, 0x64, 0x65, 0x4e, 0x52, 0x52, 0x0a, 0x6d, 0x44, 0x54, 0x4d, 0x6f, 0x64, 0x65, 0x2d,
	0x4e, 0x52, 0x12, 0x56, 0x0a, 0x1c, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x6c, 0x69, 0x6e, 0x67,
	0x5f, 0x62, 0x61, 0x73, 0x65, 0x64, 0x5f, 0x6d, 0x64, 0x74, 0x70, 0x6c, 0x6d, 0x6e, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e,
	0x76, 0x31, 0x2e, 0x4d, 0x64, 0x74, 0x70, 0x6c, 0x6d, 0x6e, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x1a,
	0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x42, 0x61, 0x73, 0x65, 0x64, 0x4d,
	0x44, 0x54, 0x50, 0x4c, 0x4d, 0x4e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x48, 0x0a, 0x0e, 0x69, 0x5f,
	0x65, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x64, 0x74,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x52, 0x45,
	0x78, 0x74, 0x49, 0x65, 0x73, 0x52, 0x0d, 0x69, 0x45, 0x2d, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x61, 0x72, 0x65, 0x61, 0x5f, 0x73, 0x63,
	0x6f, 0x70, 0x65, 0x5f, 0x6f, 0x66, 0x5f, 0x6d, 0x64, 0x74, 0x5f, 0x6e, 0x72, 0x22, 0x4b, 0x0a,
	0x1b, 0x4d, 0x64, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x45, 0x55, 0x74, 0x72, 0x61, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xb0, 0x03, 0x0a, 0x15, 0x4d,
	0x64, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45,
	0x55, 0x74, 0x72, 0x61, 0x12, 0x3e, 0x0a, 0x0e, 0x6d, 0x64, 0x74, 0x5f, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x78,
	0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x64, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0e, 0x6d, 0x64, 0x74, 0x2d, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x58, 0x0a, 0x17, 0x61, 0x72, 0x65, 0x61, 0x5f, 0x73, 0x63, 0x6f,
	0x70, 0x65, 0x5f, 0x6f, 0x66, 0x5f, 0x6d, 0x64, 0x74, 0x5f, 0x65, 0x75, 0x74, 0x72, 0x61, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e,
	0x41, 0x72, 0x65, 0x61, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x4f, 0x66, 0x4d, 0x64, 0x74, 0x45, 0x55,
	0x74, 0x72, 0x61, 0x48, 0x00, 0x52, 0x14, 0x61, 0x72, 0x65, 0x61, 0x53, 0x63, 0x6f, 0x70, 0x65,
	0x4f, 0x66, 0x4d, 0x44, 0x54, 0x2d, 0x45, 0x55, 0x54, 0x52, 0x41, 0x88, 0x01, 0x01, 0x12, 0x3c,
	0x0a, 0x0e, 0x6d, 0x5f, 0x64, 0x74, 0x6d, 0x6f, 0x64, 0x65, 0x5f, 0x65, 0x75, 0x74, 0x72, 0x61,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31,
	0x2e, 0x4d, 0x64, 0x74, 0x6d, 0x6f, 0x64, 0x65, 0x45, 0x55, 0x74, 0x72, 0x61, 0x52, 0x0d, 0x6d,
	0x44, 0x54, 0x4d, 0x6f, 0x64, 0x65, 0x2d, 0x45, 0x55, 0x54, 0x52, 0x41, 0x12, 0x56, 0x0a, 0x1c,
	0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x64,
	0x5f, 0x6d, 0x64, 0x74, 0x70, 0x6c, 0x6d, 0x6e, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x64, 0x74,
	0x70, 0x6c, 0x6d, 0x6e, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x1a, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c,
	0x6c, 0x69, 0x6e, 0x67, 0x42, 0x61, 0x73, 0x65, 0x64, 0x4d, 0x44, 0x54, 0x50, 0x4c, 0x4d, 0x4e,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x4b, 0x0a, 0x0e, 0x69, 0x5f, 0x65, 0x5f, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x78,
	0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x64, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x55, 0x74, 0x72, 0x61, 0x45, 0x78, 0x74, 0x49,
	0x65, 0x73, 0x52, 0x0d, 0x69, 0x45, 0x2d, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x73, 0x42, 0x1a, 0x0a, 0x18, 0x5f, 0x61, 0x72, 0x65, 0x61, 0x5f, 0x73, 0x63, 0x6f, 0x70, 0x65,
	0x5f, 0x6f, 0x66, 0x5f, 0x6d, 0x64, 0x74, 0x5f, 0x65, 0x75, 0x74, 0x72, 0x61, 0x22, 0x3b, 0x0a,
	0x0f, 0x4d, 0x64, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x28, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x61, 0x73, 0x6e, 0x31, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x69, 0x74, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x46, 0x0a, 0x0b, 0x4d, 0x64,
	0x74, 0x70, 0x6c, 0x6d, 0x6e, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x37, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e,
	0x76, 0x31, 0x2e, 0x50, 0x6c, 0x6d, 0x6e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x42,
	0x0a, 0xfa, 0x42, 0x07, 0x92, 0x01, 0x04, 0x08, 0x01, 0x10, 0x10, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x22, 0xe4, 0x01, 0x0a, 0x09, 0x4d, 0x64, 0x74, 0x6d, 0x6f, 0x64, 0x65, 0x4e, 0x52,
	0x12, 0x3e, 0x0a, 0x0d, 0x69, 0x6d, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x64,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76,
	0x31, 0x2e, 0x49, 0x6d, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x65, 0x4d, 0x64, 0x74, 0x4e, 0x52,
	0x48, 0x00, 0x52, 0x0c, 0x69, 0x6d, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x65, 0x4d, 0x44, 0x54,
	0x12, 0x35, 0x0a, 0x0a, 0x6c, 0x6f, 0x67, 0x67, 0x65, 0x64, 0x5f, 0x6d, 0x64, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x4c,
	0x6f, 0x67, 0x67, 0x65, 0x64, 0x4d, 0x64, 0x74, 0x4e, 0x52, 0x48, 0x00, 0x52, 0x09, 0x6c, 0x6f,
	0x67, 0x67, 0x65, 0x64, 0x4d, 0x44, 0x54, 0x12, 0x52, 0x0a, 0x15, 0x6d, 0x5f, 0x64, 0x74, 0x6d,
	0x6f, 0x64, 0x65, 0x5f, 0x6e, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31,
	0x2e, 0x4d, 0x64, 0x74, 0x6d, 0x6f, 0x64, 0x65, 0x4e, 0x52, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x14, 0x6d, 0x44, 0x54, 0x4d, 0x6f, 0x64, 0x65, 0x2d, 0x4e,
	0x52, 0x2d, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x0c, 0x0a, 0x0a, 0x6d,
	0x64, 0x74, 0x6d, 0x6f, 0x64, 0x65, 0x5f, 0x6e, 0x72, 0x22, 0x49, 0x0a, 0x12, 0x4d, 0x64, 0x74,
	0x6d, 0x6f, 0x64, 0x65, 0x4e, 0x52, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x33, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x64, 0x74, 0x6d, 0x6f, 0x64, 0x65,
	0x4e, 0x52, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x65, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x22, 0x44, 0x0a, 0x14, 0x4d, 0x64, 0x74, 0x6d, 0x6f, 0x64, 0x65, 0x4e,
	0x52, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x65, 0x12, 0x2c, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xf9, 0x01, 0x0a, 0x0c, 0x4d,
	0x64, 0x74, 0x6d, 0x6f, 0x64, 0x65, 0x45, 0x55, 0x74, 0x72, 0x61, 0x12, 0x41, 0x0a, 0x0d, 0x69,
	0x6d, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x64, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6d, 0x6d,
	0x65, 0x64, 0x69, 0x61, 0x74, 0x65, 0x4d, 0x64, 0x74, 0x45, 0x55, 0x74, 0x72, 0x61, 0x48, 0x00,
	0x52, 0x0c, 0x69, 0x6d, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x65, 0x4d, 0x44, 0x54, 0x12, 0x38,
	0x0a, 0x0a, 0x6c, 0x6f, 0x67, 0x67, 0x65, 0x64, 0x5f, 0x6d, 0x64, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x67,
	0x67, 0x65, 0x64, 0x4d, 0x64, 0x74, 0x45, 0x55, 0x74, 0x72, 0x61, 0x48, 0x00, 0x52, 0x09, 0x6c,
	0x6f, 0x67, 0x67, 0x65, 0x64, 0x4d, 0x44, 0x54, 0x12, 0x5b, 0x0a, 0x18, 0x6d, 0x5f, 0x64, 0x74,
	0x6d, 0x6f, 0x64, 0x65, 0x5f, 0x65, 0x75, 0x74, 0x72, 0x61, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x78, 0x6e, 0x61,
	0x70, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x64, 0x74, 0x6d, 0x6f, 0x64, 0x65, 0x45, 0x55, 0x74, 0x72,
	0x61, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x17, 0x6d, 0x44,
	0x54, 0x4d, 0x6f, 0x64, 0x65, 0x2d, 0x45, 0x55, 0x54, 0x52, 0x41, 0x2d, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x0f, 0x0a, 0x0d, 0x6d, 0x64, 0x74, 0x6d, 0x6f, 0x64, 0x65,
	0x5f, 0x65, 0x75, 0x74, 0x72, 0x61, 0x22, 0x4f, 0x0a, 0x15, 0x4d, 0x64, 0x74, 0x6d, 0x6f, 0x64,
	0x65, 0x45, 0x55, 0x74, 0x72, 0x61, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x36, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x64, 0x74, 0x6d, 0x6f, 0x64, 0x65,
	0x45, 0x55, 0x74, 0x72, 0x61, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x65,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x47, 0x0a, 0x17, 0x4d, 0x64, 0x74, 0x6d, 0x6f,
	0x64, 0x65, 0x45, 0x55, 0x74, 0x72, 0x61, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x49, 0x65, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x22, 0x42, 0x0a, 0x16, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x54, 0x6f, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x12, 0x28, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x61, 0x73, 0x6e, 0x31,
	0x2e, 0x76, 0x31, 0x2e, 0x42, 0x69, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x22, 0x4c, 0x0a, 0x1c, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x41, 0x32, 0x45, 0x78,
	0x74, 0x49, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x22, 0xcf, 0x02, 0x0a, 0x16, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x41, 0x32, 0x12, 0x40, 0x0a,
	0x0e, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x5f, 0x72, 0x73, 0x72, 0x70, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e,
	0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x52, 0x53, 0x72, 0x70, 0x48, 0x00, 0x52,
	0x0e, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x2d, 0x52, 0x53, 0x52, 0x50, 0x12,
	0x40, 0x0a, 0x0e, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x5f, 0x72, 0x73, 0x72,
	0x71, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76,
	0x31, 0x2e, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x52, 0x53, 0x72, 0x71, 0x48,
	0x00, 0x52, 0x0e, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x2d, 0x52, 0x53, 0x52,
	0x51, 0x12, 0x40, 0x0a, 0x0e, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x5f, 0x73,
	0x69, 0x6e, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x78, 0x6e, 0x61, 0x70,
	0x2e, 0x76, 0x31, 0x2e, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x53, 0x49, 0x6e,
	0x72, 0x48, 0x00, 0x52, 0x0e, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x2d, 0x53,
	0x49, 0x4e, 0x52, 0x12, 0x53, 0x0a, 0x10, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x5f, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e,
	0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x41, 0x32, 0x45, 0x78,
	0x74, 0x49, 0x65, 0x73, 0x48, 0x00, 0x52, 0x10, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x2d, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x1a, 0x0a, 0x18, 0x6d, 0x65, 0x61, 0x73,
	0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c,
	0x64, 0x5f, 0x61, 0x32, 0x22, 0x31, 0x0a, 0x0d, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x20, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x1a, 0x05, 0x18, 0xff, 0x1f, 0x28, 0x01,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x3f, 0x0a, 0x13, 0x4d, 0x6f, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x28,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x61, 0x73, 0x6e, 0x31, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x69, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xc1, 0x01, 0x0a, 0x23, 0x4d, 0x6f, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x4d,
	0x6f, 0x64, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x61, 0x6e, 0x67, 0x65,
	0x12, 0x4c, 0x0a, 0x23, 0x68, 0x61, 0x6e, 0x64, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x74, 0x72, 0x69,
	0x67, 0x67, 0x65, 0x72, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x6c, 0x6f, 0x77, 0x65,
	0x72, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x1f, 0x68,
	0x61, 0x6e, 0x64, 0x6f, 0x76, 0x65, 0x72, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x43, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x4c, 0x6f, 0x77, 0x65, 0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x4c,
	0x0a, 0x23, 0x68, 0x61, 0x6e, 0x64, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x74, 0x72, 0x69, 0x67, 0x67,
	0x65, 0x72, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x75, 0x70, 0x70, 0x65, 0x72, 0x5f,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x1f, 0x68, 0x61, 0x6e,
	0x64, 0x6f, 0x76, 0x65, 0x72, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x43, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x55, 0x70, 0x70, 0x65, 0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0x57, 0x0a, 0x1d,
	0x4d, 0x6f, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65,
	0x72, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x36, 0x0a,
	0x17, 0x68, 0x61, 0x6e, 0x64, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65,
	0x72, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x15,
	0x68, 0x61, 0x6e, 0x64, 0x6f, 0x76, 0x65, 0x72, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x43,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x22, 0xfe, 0x03, 0x0a, 0x26, 0x4d, 0x6f, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x79, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73,
	0x74, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x58, 0x0a, 0x1b, 0x69, 0x64, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x65, 0x5f, 0x75, 0x74,
	0x72, 0x61, 0x6e, 0x70, 0x6c, 0x6d, 0x6e, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e,
	0x50, 0x6c, 0x6d, 0x6e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x48, 0x00, 0x52, 0x1a,
	0x69, 0x64, 0x2d, 0x4c, 0x61, 0x73, 0x74, 0x45, 0x2d, 0x55, 0x54, 0x52, 0x41, 0x4e, 0x50, 0x4c,
	0x4d, 0x4e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x74, 0x0a, 0x22, 0x69, 0x64,
	0x5f, 0x63, 0x6e, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x6e, 0x67,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x6e, 0x74, 0x79, 0x70, 0x65, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x46, 0x6f, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x6e, 0x67, 0x48, 0x00, 0x52,
	0x1f, 0x69, 0x64, 0x2d, 0x43, 0x4e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x46, 0x6f, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x6e, 0x67,
	0x12, 0x7d, 0x0a, 0x25, 0x69, 0x64, 0x5f, 0x63, 0x6e, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x72, 0x65,
	0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x65,
	0x71, 0x75, 0x69, 0x76, 0x61, 0x6c, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x28, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6e, 0x74, 0x79, 0x70, 0x65,
	0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x46, 0x6f, 0x72, 0x45,
	0x71, 0x75, 0x69, 0x76, 0x61, 0x6c, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x22, 0x69, 0x64, 0x2d,
	0x43, 0x4e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x46, 0x6f, 0x72, 0x45, 0x71, 0x75, 0x69, 0x76, 0x61, 0x6c, 0x65, 0x6e, 0x74, 0x12,
	0x60, 0x0a, 0x1a, 0x69, 0x64, 0x5f, 0x6e, 0x70, 0x6e, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x79, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x70,
	0x6e, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x19, 0x69, 0x64, 0x2d, 0x4e, 0x50, 0x4e, 0x4d, 0x6f,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x42, 0x23, 0x0a, 0x21, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x72, 0x65,
	0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x65,
	0x78, 0x74, 0x5f, 0x69, 0x65, 0x73, 0x22, 0xd0, 0x01, 0x0a, 0x1d, 0x4d, 0x6f, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69,
	0x73, 0x74, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x49, 0x65, 0x49, 0x44, 0x52, 0x03, 0x26, 0x69, 0x64,
	0x12, 0x37, 0x0a, 0x0b, 0x63, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x0c, 0x26, 0x63, 0x72,
	0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x4e, 0x0a, 0x09, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x78,
	0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x6f, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52,
	0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x78,
	0x74, 0x49, 0x65, 0x73, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x26,
	0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xca, 0x04, 0x0a, 0x17, 0x4d, 0x6f,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x39, 0x0a, 0x0c, 0x73, 0x65, 0x72, 0x76, 0x69, 0x6e, 0x67,
	0x5f, 0x70, 0x6c, 0x6d, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x78, 0x6e,
	0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6c, 0x6d, 0x6e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x52, 0x0c, 0x73, 0x65, 0x72, 0x76, 0x69, 0x6e, 0x67, 0x2d, 0x50, 0x4c, 0x4d, 0x4e,
	0x12, 0x4d, 0x0a, 0x10, 0x65, 0x71, 0x75, 0x69, 0x76, 0x61, 0x6c, 0x65, 0x6e, 0x74, 0x5f, 0x70,
	0x6c, 0x6d, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x78, 0x6e, 0x61,
	0x70, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6c, 0x6d, 0x6e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x92, 0x01, 0x04, 0x08, 0x01, 0x10, 0x0f, 0x52, 0x10, 0x65,
	0x71, 0x75, 0x69, 0x76, 0x61, 0x6c, 0x65, 0x6e, 0x74, 0x2d, 0x50, 0x4c, 0x4d, 0x4e, 0x73, 0x12,
	0x4d, 0x0a, 0x10, 0x72, 0x61, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x78, 0x6e, 0x61, 0x70,
	0x2e, 0x76, 0x31, 0x2e, 0x52, 0x61, 0x74, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x00, 0x52, 0x10, 0x72, 0x61, 0x74, 0x2d, 0x52,
	0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x88, 0x01, 0x01, 0x12, 0x5d,
	0x0a, 0x1a, 0x66, 0x6f, 0x72, 0x62, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x5f, 0x61, 0x72, 0x65, 0x61,
	0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x6f, 0x72,
	0x62, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x41, 0x72, 0x65, 0x61, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x01,
	0x52, 0x18, 0x66, 0x6f, 0x72, 0x62, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x41, 0x72, 0x65, 0x61, 0x49,
	0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x57, 0x0a,
	0x18, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x61, 0x72, 0x65, 0x61, 0x5f, 0x69, 0x6e,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x41, 0x72, 0x65, 0x61, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x02, 0x52, 0x16, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x41, 0x72, 0x65, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x4d, 0x0a, 0x0e, 0x69, 0x5f, 0x65, 0x5f, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26,
	0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x6f, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x79, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74,
	0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x52, 0x0d, 0x69, 0x45, 0x2d, 0x45, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x72, 0x61, 0x74, 0x5f, 0x72, 0x65,
	0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x1d, 0x0a, 0x1b, 0x5f, 0x66,
	0x6f, 0x72, 0x62, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x5f, 0x61, 0x72, 0x65, 0x61, 0x5f, 0x69, 0x6e,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x1b, 0x0a, 0x19, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x61, 0x72, 0x65, 0x61, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x71, 0x0a, 0x1f, 0x43, 0x6e, 0x74, 0x79, 0x70, 0x65,
	0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x46, 0x6f, 0x72, 0x45,
	0x71, 0x75, 0x69, 0x76, 0x61, 0x6c, 0x65, 0x6e, 0x74, 0x12, 0x4e, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x6e, 0x74, 0x79, 0x70, 0x65, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x46, 0x6f, 0x72, 0x45, 0x71, 0x75, 0x69, 0x76, 0x61, 0x6c, 0x65,
	0x6e, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x92, 0x01, 0x04, 0x08, 0x01,
	0x10, 0x0f, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x59, 0x0a, 0x29, 0x43, 0x6e, 0x74,
	0x79, 0x70, 0x65, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x46,
	0x6f, 0x72, 0x45, 0x71, 0x75, 0x69, 0x76, 0x61, 0x6c, 0x65, 0x6e, 0x74, 0x49, 0x74, 0x65, 0x6d,
	0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x22, 0x8b, 0x02, 0x0a, 0x23, 0x43, 0x6e, 0x74, 0x79, 0x70, 0x65, 0x52,
	0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x46, 0x6f, 0x72, 0x45, 0x71,
	0x75, 0x69, 0x76, 0x61, 0x6c, 0x65, 0x6e, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x3b, 0x0a, 0x0d,
	0x70, 0x6c, 0x6d, 0x6e, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6c,
	0x6d, 0x6e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x0d, 0x70, 0x6c, 0x6d, 0x6e,
	0x2d, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x4c, 0x0a, 0x07, 0x63, 0x6e, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x32, 0x2e, 0x78, 0x6e, 0x61,
	0x70, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6e, 0x74, 0x79, 0x70,
	0x65, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x46, 0x6f, 0x72,
	0x45, 0x71, 0x75, 0x69, 0x76, 0x61, 0x6c, 0x65, 0x6e, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x07,
	0x63, 0x6e, 0x2d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x59, 0x0a, 0x0e, 0x69, 0x5f, 0x65, 0x5f, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x32, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6e, 0x74, 0x79, 0x70, 0x65,
	0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x46, 0x6f, 0x72, 0x45,
	0x71, 0x75, 0x69, 0x76, 0x61, 0x6c, 0x65, 0x6e, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x45, 0x78, 0x74,
	0x49, 0x65, 0x73, 0x52, 0x0d, 0x69, 0x45, 0x2d, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x22, 0x55, 0x0a, 0x13, 0x52, 0x61, 0x74, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x3e, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e,
	0x76, 0x31, 0x2e, 0x52, 0x61, 0x74, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x49, 0x74, 0x65, 0x6d, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x92, 0x01, 0x04, 0x08, 0x01,
	0x10, 0x10, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x49, 0x0a, 0x19, 0x52, 0x61, 0x74,
	0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x49, 0x74, 0x65, 0x6d,
	0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x22, 0x82, 0x02, 0x0a, 0x13, 0x52, 0x61, 0x74, 0x52, 0x65, 0x73, 0x74,
	0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x3b, 0x0a, 0x0d,
	0x70, 0x6c, 0x6d, 0x6e, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6c,
	0x6d, 0x6e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x0d, 0x70, 0x6c, 0x6d, 0x6e,
	0x2d, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x63, 0x0a, 0x1b, 0x72, 0x61, 0x74,
	0x5f, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x61, 0x74, 0x52, 0x65, 0x73, 0x74,
	0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x1a, 0x72, 0x61, 0x74, 0x2d, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x49,
	0x0a, 0x0e, 0x69, 0x5f, 0x65, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31,
	0x2e, 0x52, 0x61, 0x74, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x49, 0x74, 0x65, 0x6d, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x52, 0x0d, 0x69, 0x45, 0x2d, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x45, 0x0a, 0x19, 0x52, 0x61, 0x74,
	0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x61, 0x73, 0x6e, 0x31, 0x2e, 0x76, 0x31, 0x2e,
	0x42, 0x69, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x22, 0x51, 0x0a, 0x11, 0x46, 0x6f, 0x72, 0x62, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x41, 0x72, 0x65,
	0x61, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x3c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x46,
	0x6f, 0x72, 0x62, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x41, 0x72, 0x65, 0x61, 0x49, 0x74, 0x65, 0x6d,
	0x42, 0x0a, 0xfa, 0x42, 0x07, 0x92, 0x01, 0x04, 0x08, 0x01, 0x10, 0x10, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x22, 0x47, 0x0a, 0x17, 0x46, 0x6f, 0x72, 0x62, 0x69, 0x64, 0x64, 0x65, 0x6e,
	0x41, 0x72, 0x65, 0x61, 0x49, 0x74, 0x65, 0x6d, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x12, 0x2c,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xdc, 0x01, 0x0a,
	0x11, 0x46, 0x6f, 0x72, 0x62, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x41, 0x72, 0x65, 0x61, 0x49, 0x74,
	0x65, 0x6d, 0x12, 0x3b, 0x0a, 0x0d, 0x70, 0x6c, 0x6d, 0x6e, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x78, 0x6e, 0x61, 0x70,
	0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6c, 0x6d, 0x6e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x52, 0x0d, 0x70, 0x6c, 0x6d, 0x6e, 0x2d, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12,
	0x41, 0x0a, 0x0e, 0x66, 0x6f, 0x72, 0x62, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x5f, 0x74, 0x61, 0x63,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76,
	0x31, 0x2e, 0x54, 0x61, 0x63, 0x42, 0x0b, 0xfa, 0x42, 0x08, 0x92, 0x01, 0x05, 0x08, 0x01, 0x10,
	0x80, 0x20, 0x52, 0x0e, 0x66, 0x6f, 0x72, 0x62, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x2d, 0x54, 0x41,
	0x43, 0x73, 0x12, 0x47, 0x0a, 0x0e, 0x69, 0x5f, 0x65, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x78, 0x6e, 0x61,
	0x70, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x6f, 0x72, 0x62, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x41, 0x72,
	0x65, 0x61, 0x49, 0x74, 0x65, 0x6d, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x52, 0x0d, 0x69, 0x45,
	0x2d, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x4d, 0x0a, 0x0f, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x72, 0x65, 0x61, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x3a,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41,
	0x72, 0x65, 0x61, 0x49, 0x74, 0x65, 0x6d, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x92, 0x01, 0x04, 0x08,
	0x01, 0x10, 0x10, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x45, 0x0a, 0x15, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x72, 0x65, 0x61, 0x49, 0x74, 0x65, 0x6d, 0x45, 0x78, 0x74,
	0x49, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x22, 0xcb, 0x02, 0x0a, 0x0f, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x72, 0x65,
	0x61, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x3b, 0x0a, 0x0d, 0x70, 0x6c, 0x6d, 0x6e, 0x5f, 0x69, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x78,
	0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6c, 0x6d, 0x6e, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x52, 0x0d, 0x70, 0x6c, 0x6d, 0x6e, 0x2d, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x12, 0x55, 0x0a, 0x19, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x5f, 0x74, 0x61,
	0x63, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x61, 0x72, 0x65, 0x61, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e,
	0x54, 0x61, 0x63, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x92, 0x01, 0x04, 0x08, 0x01, 0x10, 0x10, 0x52,
	0x18, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x2d, 0x54, 0x41, 0x43, 0x73, 0x2d, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x72, 0x65, 0x61, 0x12, 0x5d, 0x0a, 0x1d, 0x6e, 0x6f, 0x74,
	0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x5f, 0x74, 0x61, 0x63, 0x73, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x61, 0x72, 0x65, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0c, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x63, 0x42, 0x0a,
	0xfa, 0x42, 0x07, 0x92, 0x01, 0x04, 0x08, 0x01, 0x10, 0x10, 0x52, 0x1c, 0x6e, 0x6f, 0x74, 0x2d,
	0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x2d, 0x54, 0x41, 0x43, 0x73, 0x2d, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x41, 0x72, 0x65, 0x61, 0x12, 0x45, 0x0a, 0x0e, 0x69, 0x5f, 0x65, 0x5f,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x41, 0x72, 0x65, 0x61, 0x49, 0x74, 0x65, 0x6d, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73,
	0x52, 0x0d, 0x69, 0x45, 0x2d, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x22,
	0x52, 0x0a, 0x22, 0x4d, 0x72, 0x44, 0x43, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43,
	0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x45,
	0x78, 0x74, 0x49, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x22, 0xf3, 0x01, 0x0a, 0x1c, 0x4d, 0x72, 0x44, 0x43, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x80, 0x01, 0x0a, 0x26, 0x6e, 0x67, 0x5f, 0x72, 0x61, 0x6e, 0x5f,
	0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x63, 0x6f,
	0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e,
	0x4e, 0x67, 0x52, 0x41, 0x6e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x24, 0x6e, 0x67, 0x2d, 0x52, 0x41, 0x4e, 0x2d, 0x4e, 0x6f, 0x64, 0x65, 0x2d, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x50, 0x0a, 0x0d, 0x69, 0x5f, 0x65, 0x5f, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b,
	0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x72, 0x44, 0x43, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x52, 0x0c, 0x69, 0x45, 0x2d,
	0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xb0, 0x02, 0x0a, 0x21, 0x4e, 0x67,
	0x52, 0x41, 0x6e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43,
	0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x74, 0x0a, 0x20, 0x65, 0x75, 0x74, 0x72, 0x61, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x78, 0x6e, 0x61, 0x70,
	0x2e, 0x76, 0x31, 0x2e, 0x45, 0x55, 0x54, 0x72, 0x61, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66,
	0x6f, 0x48, 0x00, 0x52, 0x20, 0x65, 0x75, 0x74, 0x72, 0x61, 0x2d, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x2d, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2d, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x6b, 0x0a, 0x1d, 0x6e, 0x72, 0x5f, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x78,
	0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x72, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66,
	0x6f, 0x48, 0x00, 0x52, 0x1d, 0x6e, 0x72, 0x2d, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x2d, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x69, 0x6e,
	0x66, 0x6f, 0x42, 0x28, 0x0a, 0x26, 0x6e, 0x67, 0x5f, 0x72, 0x61, 0x6e, 0x5f, 0x6e, 0x6f, 0x64,
	0x65, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x22, 0x53, 0x0a, 0x23,
	0x45, 0x55, 0x54, 0x72, 0x61, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x6f, 0x6f,
	0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x45, 0x78, 0x74,
	0x49, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x22, 0xb9, 0x04, 0x0a, 0x1d, 0x45, 0x55, 0x54, 0x72, 0x61, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x33, 0x0a, 0x0b, 0x65, 0x5f, 0x75, 0x74, 0x72, 0x61, 0x5f, 0x63, 0x65,
	0x6c, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e,
	0x76, 0x31, 0x2e, 0x45, 0x55, 0x54, 0x72, 0x61, 0x43, 0x47, 0x69, 0x52, 0x0b, 0x65, 0x2d, 0x75,
	0x74, 0x72, 0x61, 0x2d, 0x63, 0x65, 0x6c, 0x6c, 0x12, 0x46, 0x0a, 0x14, 0x75, 0x6c, 0x5f, 0x63,
	0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x66, 0x6f,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x61, 0x73, 0x6e, 0x31, 0x2e, 0x76, 0x31,
	0x2e, 0x42, 0x69, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x14, 0x75, 0x6c, 0x2d, 0x63,
	0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x69, 0x6e, 0x66, 0x6f,
	0x12, 0x4b, 0x0a, 0x14, 0x64, 0x6c, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12,
	0x2e, 0x61, 0x73, 0x6e, 0x31, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x69, 0x74, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x48, 0x00, 0x52, 0x14, 0x64, 0x6c, 0x2d, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x69, 0x6e, 0x66, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a,
	0x07, 0x6e, 0x72, 0x5f, 0x63, 0x65, 0x6c, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e,
	0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x72, 0x43, 0x47, 0x69, 0x48, 0x01,
	0x52, 0x07, 0x6e, 0x72, 0x2d, 0x63, 0x65, 0x6c, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x7f, 0x0a, 0x23,
	0x65, 0x5f, 0x75, 0x74, 0x72, 0x61, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69,
	0x6e, 0x66, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x28, 0x2e, 0x78, 0x6e, 0x61, 0x70,
	0x2e, 0x76, 0x31, 0x2e, 0x45, 0x55, 0x54, 0x72, 0x61, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x48, 0x02, 0x52, 0x23, 0x65, 0x2d, 0x75, 0x74, 0x72, 0x61, 0x2d, 0x63, 0x6f,
	0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x61, 0x73, 0x73, 0x69, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x2d, 0x69, 0x6e, 0x66, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x51, 0x0a,
	0x0d, 0x69, 0x5f, 0x65, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x06,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x45,
	0x55, 0x54, 0x72, 0x61, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x6f, 0x6f, 0x72,
	0x64, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x45, 0x78, 0x74, 0x49,
	0x65, 0x73, 0x52, 0x0c, 0x69, 0x45, 0x2d, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x42, 0x17, 0x0a, 0x15, 0x5f, 0x64, 0x6c, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x6e, 0x72,
	0x5f, 0x63, 0x65, 0x6c, 0x6c, 0x42, 0x26, 0x0a, 0x24, 0x5f, 0x65, 0x5f, 0x75, 0x74, 0x72, 0x61,
	0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x73,
	0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x22, 0x50, 0x0a,
	0x20, 0x4e, 0x72, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x6f, 0x6f, 0x72, 0x64,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x45, 0x78, 0x74, 0x49, 0x65,
	0x73, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22,
	0xa8, 0x04, 0x0a, 0x1a, 0x4e, 0x72, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x6f,
	0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x28,
	0x0a, 0x07, 0x6e, 0x72, 0x5f, 0x63, 0x65, 0x6c, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0e, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x72, 0x43, 0x47, 0x69, 0x52,
	0x07, 0x6e, 0x72, 0x2d, 0x63, 0x65, 0x6c, 0x6c, 0x12, 0x46, 0x0a, 0x14, 0x75, 0x6c, 0x5f, 0x63,
	0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x66, 0x6f,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x61, 0x73, 0x6e, 0x31, 0x2e, 0x76, 0x31,
	0x2e, 0x42, 0x69, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x14, 0x75, 0x6c, 0x2d, 0x63,
	0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x69, 0x6e, 0x66, 0x6f,
	0x12, 0x4b, 0x0a, 0x14, 0x64, 0x6c, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12,
	0x2e, 0x61, 0x73, 0x6e, 0x31, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x69, 0x74, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x48, 0x00, 0x52, 0x14, 0x64, 0x6c, 0x2d, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x69, 0x6e, 0x66, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x38, 0x0a,
	0x0b, 0x65, 0x5f, 0x75, 0x74, 0x72, 0x61, 0x5f, 0x63, 0x65, 0x6c, 0x6c, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x11, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x55, 0x54,
	0x72, 0x61, 0x43, 0x47, 0x69, 0x48, 0x01, 0x52, 0x0b, 0x65, 0x2d, 0x75, 0x74, 0x72, 0x61, 0x2d,
	0x63, 0x65, 0x6c, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x74, 0x0a, 0x1f, 0x6e, 0x72, 0x5f, 0x63, 0x6f,
	0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x73, 0x73, 0x69, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x25, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x72, 0x43, 0x6f, 0x6f,
	0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x02, 0x52, 0x1f, 0x6e, 0x72, 0x2d, 0x63, 0x6f,
	0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x61, 0x73, 0x73, 0x69, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x2d, 0x69, 0x6e, 0x66, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x4e, 0x0a,
	0x0d, 0x69, 0x5f, 0x65, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x06,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x4e,
	0x72, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x52,
	0x0c, 0x69, 0x45, 0x2d, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x17, 0x0a,
	0x15, 0x5f, 0x64, 0x6c, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x65, 0x5f, 0x75, 0x74, 0x72,
	0x61, 0x5f, 0x63, 0x65, 0x6c, 0x6c, 0x42, 0x22, 0x0a, 0x20, 0x5f, 0x6e, 0x72, 0x5f, 0x63, 0x6f,
	0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x73, 0x73, 0x69, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x22, 0x51, 0x0a, 0x21, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x4f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x7a, 0x65, 0x4e, 0x6f, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x12,
	0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xc1, 0x01,
	0x0a, 0x1b, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x7a,
	0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x51, 0x0a,
	0x16, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x5f, 0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x43,
	0x65, 0x6c, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x52, 0x13, 0x6d, 0x61, 0x78,
	0x69, 0x6d, 0x75, 0x6d, 0x43, 0x65, 0x6c, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x69, 0x7a, 0x65,
	0x12, 0x4f, 0x0a, 0x0d, 0x69, 0x5f, 0x65, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76,
	0x31, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x7a,
	0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x74,
	0x49, 0x65, 0x73, 0x52, 0x0c, 0x69, 0x45, 0x2d, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x22, 0x38, 0x0a, 0x13, 0x4d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x43, 0x65, 0x6c, 0x6c,
	0x4c, 0x69, 0x73, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x21, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0b, 0xfa, 0x42, 0x08, 0x1a, 0x06, 0x18, 0x80,
	0x80, 0x01, 0x28, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x44, 0x0a, 0x14, 0x4e,
	0x65, 0x44, 0x43, 0x54, 0x44, 0x6d, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x45, 0x78, 0x74,
	0x49, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x22, 0xd1, 0x01, 0x0a, 0x0e, 0x4e, 0x65, 0x44, 0x43, 0x54, 0x44, 0x6d, 0x50, 0x61, 0x74,
	0x74, 0x65, 0x72, 0x6e, 0x12, 0x5a, 0x0a, 0x13, 0x73, 0x75, 0x62, 0x66, 0x72, 0x61, 0x6d, 0x65,
	0x5f, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x29, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x62, 0x66,
	0x72, 0x61, 0x6d, 0x65, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x65,
	0x64, 0x63, 0x74, 0x64, 0x6d, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x52, 0x12, 0x73, 0x75,
	0x62, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74,
	0x12, 0x1f, 0x0a, 0x0b, 0x68, 0x61, 0x72, 0x71, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x68, 0x61, 0x72, 0x71, 0x4f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x12, 0x42, 0x0a, 0x0d, 0x69, 0x5f, 0x65, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e,
	0x76, 0x31, 0x2e, 0x4e, 0x65, 0x44, 0x43, 0x54, 0x44, 0x6d, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72,
	0x6e, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x52, 0x0c, 0x69, 0x45, 0x2d, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x66, 0x0a, 0x19, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f,
	0x75, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x55, 0x54,
	0x72, 0x61, 0x12, 0x49, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x26, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x65, 0x69, 0x67,
	0x68, 0x62, 0x6f, 0x75, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x45, 0x55, 0x54, 0x72, 0x61, 0x49, 0x74, 0x65, 0x6d, 0x42, 0x0b, 0xfa, 0x42, 0x08, 0x92, 0x01,
	0x05, 0x08, 0x01, 0x10, 0x80, 0x08, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x53, 0x0a,
	0x23, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x75, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x55, 0x54, 0x72, 0x61, 0x49, 0x74, 0x65, 0x6d, 0x45, 0x78,
	0x74, 0x49, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x22, 0xdc, 0x02, 0x0a, 0x1d, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x75, 0x72,
	0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x55, 0x54, 0x72, 0x61,
	0x49, 0x74, 0x65, 0x6d, 0x12, 0x31, 0x0a, 0x0a, 0x65, 0x5f, 0x75, 0x74, 0x72, 0x61, 0x5f, 0x70,
	0x63, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e,
	0x76, 0x31, 0x2e, 0x45, 0x55, 0x54, 0x72, 0x61, 0x70, 0x63, 0x69, 0x52, 0x0a, 0x65, 0x2d, 0x75,
	0x74, 0x72, 0x61, 0x2d, 0x50, 0x43, 0x49, 0x12, 0x31, 0x0a, 0x0a, 0x65, 0x5f, 0x75, 0x74, 0x72,
	0x61, 0x5f, 0x63, 0x67, 0x69, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x78, 0x6e,
	0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x55, 0x54, 0x72, 0x61, 0x43, 0x47, 0x69, 0x52, 0x0a,
	0x65, 0x2d, 0x75, 0x74, 0x72, 0x61, 0x2d, 0x63, 0x67, 0x69, 0x12, 0x2b, 0x0a, 0x06, 0x65, 0x61,
	0x72, 0x66, 0x63, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x78, 0x6e, 0x61,
	0x70, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x55, 0x54, 0x72, 0x61, 0x61, 0x72, 0x66, 0x63, 0x6e, 0x52,
	0x06, 0x65, 0x61, 0x72, 0x66, 0x63, 0x6e, 0x12, 0x1e, 0x0a, 0x03, 0x74, 0x61, 0x63, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x54,
	0x61, 0x63, 0x52, 0x03, 0x74, 0x61, 0x63, 0x12, 0x29, 0x0a, 0x05, 0x72, 0x61, 0x6e, 0x61, 0x63,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31,
	0x2e, 0x52, 0x61, 0x6e, 0x61, 0x63, 0x48, 0x00, 0x52, 0x05, 0x72, 0x61, 0x6e, 0x61, 0x63, 0x88,
	0x01, 0x01, 0x12, 0x53, 0x0a, 0x0e, 0x69, 0x5f, 0x65, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x78, 0x6e, 0x61,
	0x70, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x75, 0x72, 0x49, 0x6e,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x55, 0x54, 0x72, 0x61, 0x49, 0x74,
	0x65, 0x6d, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x52, 0x0d, 0x69, 0x45, 0x2d, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x72, 0x61, 0x6e, 0x61,
	0x63, 0x22, 0x60, 0x0a, 0x16, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x75, 0x72, 0x49, 0x6e,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x52, 0x12, 0x46, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x78, 0x6e, 0x61,
	0x70, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x75, 0x72, 0x49, 0x6e,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x52, 0x49, 0x74, 0x65, 0x6d, 0x42,
	0x0b, 0xfa, 0x42, 0x08, 0x92, 0x01, 0x05, 0x08, 0x01, 0x10, 0x80, 0x08, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x22, 0x50, 0x0a, 0x20, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x75, 0x72,
	0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x52, 0x49, 0x74, 0x65,
	0x6d, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xfb, 0x03, 0x0a, 0x1a, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62,
	0x6f, 0x75, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x52,
	0x49, 0x74, 0x65, 0x6d, 0x12, 0x26, 0x0a, 0x06, 0x6e, 0x72, 0x5f, 0x70, 0x63, 0x69, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x4e,
	0x72, 0x70, 0x63, 0x69, 0x52, 0x06, 0x6e, 0x72, 0x2d, 0x50, 0x43, 0x49, 0x12, 0x26, 0x0a, 0x06,
	0x6e, 0x72, 0x5f, 0x63, 0x67, 0x69, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x78,
	0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x72, 0x43, 0x47, 0x69, 0x52, 0x06, 0x6e, 0x72,
	0x2d, 0x63, 0x67, 0x69, 0x12, 0x1e, 0x0a, 0x03, 0x74, 0x61, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0c, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x63, 0x52,
	0x03, 0x74, 0x61, 0x63, 0x12, 0x29, 0x0a, 0x05, 0x72, 0x61, 0x6e, 0x61, 0x63, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x61,
	0x6e, 0x61, 0x63, 0x48, 0x00, 0x52, 0x05, 0x72, 0x61, 0x6e, 0x61, 0x63, 0x88, 0x01, 0x01, 0x12,
	0x4b, 0x0a, 0x0c, 0x6e, 0x72, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e,
	0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x75, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x52, 0x4d, 0x6f, 0x64, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0c,
	0x6e, 0x72, 0x2d, 0x6d, 0x6f, 0x64, 0x65, 0x2d, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x4f, 0x0a, 0x14,
	0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x75, 0x70,
	0x70, 0x6f, 0x72, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x78, 0x6e, 0x61,
	0x70, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74,
	0x79, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x13, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x48, 0x0a,
	0x20, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x69, 0x6d,
	0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x1e, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x50, 0x0a, 0x0e, 0x69, 0x5f, 0x65, 0x5f, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x29, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62,
	0x6f, 0x75, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x52,
	0x49, 0x74, 0x65, 0x6d, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x52, 0x0d, 0x69, 0x45, 0x2d, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x72, 0x61,
	0x6e, 0x61, 0x63, 0x22, 0x54, 0x0a, 0x24, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x75, 0x72,
	0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x52, 0x4d, 0x6f, 0x64,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xb7, 0x02, 0x0a, 0x1e, 0x4e, 0x65,
	0x69, 0x67, 0x68, 0x62, 0x6f, 0x75, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x4e, 0x52, 0x4d, 0x6f, 0x64, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x48, 0x0a, 0x08,
	0x66, 0x64, 0x64, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a,
	0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f,
	0x75, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x52, 0x4d,
	0x6f, 0x64, 0x65, 0x46, 0x64, 0x64, 0x69, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x08, 0x66, 0x64,
	0x64, 0x2d, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x48, 0x0a, 0x08, 0x74, 0x64, 0x64, 0x5f, 0x69, 0x6e,
	0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e,
	0x76, 0x31, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x75, 0x72, 0x49, 0x6e, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x52, 0x4d, 0x6f, 0x64, 0x65, 0x54, 0x64, 0x64,
	0x69, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x08, 0x74, 0x64, 0x64, 0x2d, 0x69, 0x6e, 0x66, 0x6f,
	0x12, 0x5b, 0x0a, 0x10, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x78, 0x6e, 0x61,
	0x70, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x75, 0x72, 0x49, 0x6e,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x52, 0x4d, 0x6f, 0x64, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x48, 0x00, 0x52, 0x10, 0x63, 0x68, 0x6f,
	0x69, 0x63, 0x65, 0x2d, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x24, 0x0a,
	0x22, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x75, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x72, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x5f, 0x69,
	0x6e, 0x66, 0x6f, 0x22, 0x57, 0x0a, 0x27, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x75, 0x72,
	0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x52, 0x4d, 0x6f, 0x64,
	0x65, 0x46, 0x64, 0x64, 0x69, 0x6e, 0x66, 0x6f, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x12, 0x2c,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x81, 0x02, 0x0a,
	0x21, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x75, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x52, 0x4d, 0x6f, 0x64, 0x65, 0x46, 0x64, 0x64, 0x69, 0x6e,
	0x66, 0x6f, 0x12, 0x41, 0x0a, 0x0f, 0x75, 0x6c, 0x5f, 0x6e, 0x72, 0x5f, 0x66, 0x72, 0x65, 0x71,
	0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x78, 0x6e,
	0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x72, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63,
	0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0e, 0x75, 0x6c, 0x2d, 0x4e, 0x52, 0x2d, 0x46, 0x72, 0x65,
	0x71, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x41, 0x0a, 0x0f, 0x64, 0x6c, 0x5f, 0x6e, 0x72, 0x5f, 0x66,
	0x65, 0x71, 0x75, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x72, 0x66, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x6e, 0x63, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0e, 0x64, 0x6c, 0x2d, 0x4e, 0x52, 0x2d,
	0x46, 0x65, 0x71, 0x75, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x56, 0x0a, 0x0d, 0x69, 0x65, 0x5f, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x30, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62,
	0x6f, 0x75, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x52,
	0x4d, 0x6f, 0x64, 0x65, 0x46, 0x64, 0x64, 0x69, 0x6e, 0x66, 0x6f, 0x45, 0x78, 0x74, 0x49, 0x65,
	0x73, 0x52, 0x0d, 0x69, 0x65, 0x2d, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x22, 0x57, 0x0a, 0x27, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x75, 0x72, 0x49, 0x6e, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x52, 0x4d, 0x6f, 0x64, 0x65, 0x54, 0x64,
	0x64, 0x69, 0x6e, 0x66, 0x6f, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xb8, 0x01, 0x0a, 0x21, 0x4e, 0x65,
	0x69, 0x67, 0x68, 0x62, 0x6f, 0x75, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x4e, 0x52, 0x4d, 0x6f, 0x64, 0x65, 0x54, 0x64, 0x64, 0x69, 0x6e, 0x66, 0x6f, 0x12,
	0x3b, 0x0a, 0x0c, 0x6e, 0x72, 0x5f, 0x66, 0x72, 0x65, 0x71, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e,
	0x4e, 0x72, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x0b, 0x6e, 0x72, 0x2d, 0x46, 0x72, 0x65, 0x71, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x56, 0x0a, 0x0d,
	0x69, 0x65, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x65,
	0x69, 0x67, 0x68, 0x62, 0x6f, 0x75, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x4e, 0x52, 0x4d, 0x6f, 0x64, 0x65, 0x54, 0x64, 0x64, 0x69, 0x6e, 0x66, 0x6f, 0x45,
	0x78, 0x74, 0x49, 0x65, 0x73, 0x52, 0x0d, 0x69, 0x65, 0x2d, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x22, 0x2f, 0x0a, 0x03, 0x4e, 0x69, 0x64, 0x12, 0x28, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x61, 0x73, 0x6e,
	0x31, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x69, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x49, 0x0a, 0x0d, 0x4e, 0x72, 0x63, 0x61, 0x72, 0x72, 0x69,
	0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x38, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e,
	0x4e, 0x72, 0x63, 0x61, 0x72, 0x72, 0x69, 0x65, 0x72, 0x49, 0x74, 0x65, 0x6d, 0x42, 0x0a, 0xfa,
	0x42, 0x07, 0x92, 0x01, 0x04, 0x08, 0x01, 0x10, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x22, 0x43, 0x0a, 0x13, 0x4e, 0x72, 0x63, 0x61, 0x72, 0x72, 0x69, 0x65, 0x72, 0x49, 0x74, 0x65,
	0x6d, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xdc, 0x01, 0x0a, 0x0d, 0x4e, 0x72, 0x63, 0x61, 0x72, 0x72,
	0x69, 0x65, 0x72, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x2f, 0x0a, 0x0b, 0x63, 0x61, 0x72, 0x72, 0x69,
	0x65, 0x72, 0x5f, 0x73, 0x63, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x78,
	0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x72, 0x73, 0x63, 0x73, 0x52, 0x0a, 0x63, 0x61,
	0x72, 0x72, 0x69, 0x65, 0x72, 0x53, 0x43, 0x53, 0x12, 0x2a, 0x0a, 0x11, 0x6f, 0x66, 0x66, 0x73,
	0x65, 0x74, 0x5f, 0x74, 0x6f, 0x5f, 0x63, 0x61, 0x72, 0x72, 0x69, 0x65, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x54, 0x6f, 0x43, 0x61, 0x72,
	0x72, 0x69, 0x65, 0x72, 0x12, 0x2b, 0x0a, 0x11, 0x63, 0x61, 0x72, 0x72, 0x69, 0x65, 0x72, 0x5f,
	0x62, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x10, 0x63, 0x61, 0x72, 0x72, 0x69, 0x65, 0x72, 0x42, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74,
	0x68, 0x12, 0x41, 0x0a, 0x0d, 0x69, 0x5f, 0x65, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e,
	0x76, 0x31, 0x2e, 0x4e, 0x72, 0x63, 0x61, 0x72, 0x72, 0x69, 0x65, 0x72, 0x49, 0x74, 0x65, 0x6d,
	0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x52, 0x0c, 0x69, 0x45, 0x2d, 0x45, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x22, 0x29, 0x0a, 0x11, 0x4e, 0x72, 0x63, 0x65, 0x6c, 0x6c, 0x50, 0x72,
	0x61, 0x63, 0x68, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22,
	0x47, 0x0a, 0x17, 0x4e, 0x67, 0x52, 0x41, 0x6e, 0x43, 0x65, 0x6c, 0x6c, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xdc, 0x01, 0x0a, 0x11, 0x4e, 0x67, 0x52,
	0x41, 0x6e, 0x43, 0x65, 0x6c, 0x6c, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x29,
	0x0a, 0x02, 0x6e, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x78, 0x6e, 0x61,
	0x70, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x72, 0x43, 0x65, 0x6c, 0x6c, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x48, 0x00, 0x52, 0x02, 0x6e, 0x72, 0x12, 0x34, 0x0a, 0x06, 0x65, 0x5f, 0x75,
	0x74, 0x72, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x78, 0x6e, 0x61, 0x70,
	0x2e, 0x76, 0x31, 0x2e, 0x45, 0x55, 0x54, 0x72, 0x61, 0x43, 0x65, 0x6c, 0x6c, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x48, 0x00, 0x52, 0x06, 0x65, 0x2d, 0x75, 0x74, 0x72, 0x61, 0x12,
	0x4e, 0x0a, 0x10, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x78, 0x6e, 0x61, 0x70,
	0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x67, 0x52, 0x41, 0x6e, 0x43, 0x65, 0x6c, 0x6c, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x48, 0x00, 0x52, 0x10, 0x63,
	0x68, 0x6f, 0x69, 0x63, 0x65, 0x2d, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x42,
	0x16, 0x0a, 0x14, 0x6e, 0x67, 0x5f, 0x72, 0x61, 0x6e, 0x5f, 0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x69,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x22, 0x42, 0x0a, 0x12, 0x4e, 0x67, 0x52, 0x41, 0x6e,
	0x43, 0x65, 0x6c, 0x6c, 0x50, 0x63, 0x69, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x12, 0x2c, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xbb, 0x01, 0x0a, 0x0c,
	0x4e, 0x67, 0x52, 0x41, 0x6e, 0x43, 0x65, 0x6c, 0x6c, 0x50, 0x63, 0x69, 0x12, 0x20, 0x0a, 0x02,
	0x6e, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e,
	0x76, 0x31, 0x2e, 0x4e, 0x72, 0x70, 0x63, 0x69, 0x48, 0x00, 0x52, 0x02, 0x6e, 0x72, 0x12, 0x2b,
	0x0a, 0x06, 0x65, 0x5f, 0x75, 0x74, 0x72, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11,
	0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x55, 0x54, 0x72, 0x61, 0x70, 0x63,
	0x69, 0x48, 0x00, 0x52, 0x06, 0x65, 0x2d, 0x75, 0x74, 0x72, 0x61, 0x12, 0x49, 0x0a, 0x10, 0x63,
	0x68, 0x6f, 0x69, 0x63, 0x65, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e,
	0x4e, 0x67, 0x52, 0x41, 0x6e, 0x43, 0x65, 0x6c, 0x6c, 0x50, 0x63, 0x69, 0x45, 0x78, 0x74, 0x49,
	0x65, 0x73, 0x48, 0x00, 0x52, 0x10, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x2d, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x11, 0x0a, 0x0f, 0x6e, 0x67, 0x5f, 0x72, 0x61, 0x6e,
	0x5f, 0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x70, 0x63, 0x69, 0x22, 0x38, 0x0a, 0x11, 0x4e, 0x67, 0x52,
	0x41, 0x6e, 0x6e, 0x6f, 0x64, 0x65, 0x55, 0x65, 0x78, 0x6e, 0x41, 0x70, 0x69, 0x64, 0x12, 0x23,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x42, 0x0d, 0xfa,
	0x42, 0x0a, 0x22, 0x08, 0x18, 0xff, 0xff, 0xff, 0xff, 0x0f, 0x28, 0x00, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x22, 0x37, 0x0a, 0x11, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x6f, 0x66, 0x41,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x55, 0x65, 0x73, 0x12, 0x22, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0c, 0xfa, 0x42, 0x09, 0x1a, 0x07, 0x18, 0xff,
	0xff, 0xff, 0x07, 0x28, 0x00, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x37, 0x0a, 0x12,
	0x4e, 0x6f, 0x6f, 0x66, 0x52, 0x72, 0x63, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x21, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x42, 0x0b, 0xfa, 0x42, 0x08, 0x1a, 0x06, 0x18, 0x80, 0x80, 0x04, 0x28, 0x01, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xab, 0x02, 0x0a, 0x26, 0x4e, 0x6f, 0x6e, 0x44, 0x79, 0x6e,
	0x61, 0x6d, 0x69, 0x63, 0x35, 0x51, 0x69, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f,
	0x72, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x6f, 0x0a, 0x21, 0x69, 0x64, 0x5f, 0x63, 0x6e, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f,
	0x64, 0x65, 0x6c, 0x61, 0x79, 0x5f, 0x62, 0x75, 0x64, 0x67, 0x65, 0x74, 0x5f, 0x64, 0x6f, 0x77,
	0x6e, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x78, 0x6e,
	0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x50, 0x61,
	0x63, 0x6b, 0x65, 0x74, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x42, 0x75, 0x64, 0x67, 0x65, 0x74, 0x48,
	0x00, 0x52, 0x1e, 0x69, 0x64, 0x2d, 0x43, 0x4e, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x44, 0x65,
	0x6c, 0x61, 0x79, 0x42, 0x75, 0x64, 0x67, 0x65, 0x74, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x69, 0x6e,
	0x6b, 0x12, 0x6b, 0x0a, 0x1f, 0x69, 0x64, 0x5f, 0x63, 0x6e, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74,
	0x5f, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x5f, 0x62, 0x75, 0x64, 0x67, 0x65, 0x74, 0x5f, 0x75, 0x70,
	0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x78, 0x6e, 0x61,
	0x70, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x50, 0x61, 0x63,
	0x6b, 0x65, 0x74, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x42, 0x75, 0x64, 0x67, 0x65, 0x74, 0x48, 0x00,
	0x52, 0x1c, 0x69, 0x64, 0x2d, 0x43, 0x4e, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x44, 0x65, 0x6c,
	0x61, 0x79, 0x42, 0x75, 0x64, 0x67, 0x65, 0x74, 0x55, 0x70, 0x6c, 0x69, 0x6e, 0x6b, 0x42, 0x23,
	0x0a, 0x21, 0x6e, 0x6f, 0x6e, 0x5f, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x35, 0x5f, 0x71,
	0x69, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x5f,
	0x69, 0x65, 0x73, 0x22, 0xd0, 0x01, 0x0a, 0x1d, 0x4e, 0x6f, 0x6e, 0x44, 0x79, 0x6e, 0x61, 0x6d,
	0x69, 0x63, 0x35, 0x51, 0x69, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x45,
	0x78, 0x74, 0x49, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x49, 0x65, 0x49, 0x44, 0x52, 0x03, 0x26, 0x69, 0x64, 0x12, 0x37, 0x0a,
	0x0b, 0x63, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x14, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x69,
	0x74, 0x69, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x0c, 0x26, 0x63, 0x72, 0x69, 0x74, 0x69,
	0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x4e, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x78, 0x6e, 0x61, 0x70,
	0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x6e, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x35, 0x51,
	0x69, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x45, 0x78, 0x74, 0x49, 0x65,
	0x73, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x26, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xd5, 0x03, 0x0a, 0x17, 0x4e, 0x6f, 0x6e, 0x44, 0x79,
	0x6e, 0x61, 0x6d, 0x69, 0x63, 0x35, 0x51, 0x69, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x6f, 0x72, 0x12, 0x28, 0x0a, 0x07, 0x66, 0x69, 0x76, 0x65, 0x5f, 0x71, 0x69, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69,
	0x76, 0x65, 0x51, 0x69, 0x52, 0x06, 0x66, 0x69, 0x76, 0x65, 0x51, 0x49, 0x12, 0x4d, 0x0a, 0x13,
	0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x71,
	0x6f, 0x5f, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x78, 0x6e, 0x61, 0x70,
	0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x4c, 0x65, 0x76, 0x65,
	0x6c, 0x51, 0x6f, 0x53, 0x48, 0x00, 0x52, 0x10, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79,
	0x4c, 0x65, 0x76, 0x65, 0x6c, 0x51, 0x6f, 0x53, 0x88, 0x01, 0x01, 0x12, 0x48, 0x0a, 0x10, 0x61,
	0x76, 0x65, 0x72, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x5f, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e,
	0x41, 0x76, 0x65, 0x72, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x48,
	0x01, 0x52, 0x0f, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x57, 0x69, 0x6e, 0x64,
	0x6f, 0x77, 0x88, 0x01, 0x01, 0x12, 0x5f, 0x0a, 0x19, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d,
	0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x62, 0x75, 0x72, 0x73, 0x74, 0x5f, 0x76, 0x6f, 0x6c, 0x75,
	0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e,
	0x76, 0x31, 0x2e, 0x4d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x42, 0x75,
	0x72, 0x73, 0x74, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x48, 0x02, 0x52, 0x16, 0x6d, 0x61, 0x78,
	0x69, 0x6d, 0x75, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x42, 0x75, 0x72, 0x73, 0x74, 0x56, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x4b, 0x0a, 0x0d, 0x69, 0x5f, 0x65, 0x5f, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e,
	0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x6e, 0x44, 0x79, 0x6e, 0x61, 0x6d,
	0x69, 0x63, 0x35, 0x51, 0x69, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x45,
	0x78, 0x74, 0x49, 0x65, 0x73, 0x52, 0x0c, 0x69, 0x45, 0x2d, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79,
	0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x71, 0x6f, 0x5f, 0x73, 0x42, 0x13, 0x0a, 0x11, 0x5f,
	0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x5f, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77,
	0x42, 0x1c, 0x0a, 0x1a, 0x5f, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x5f, 0x64, 0x61, 0x74,
	0x61, 0x5f, 0x62, 0x75, 0x72, 0x73, 0x74, 0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x22, 0x2d,
	0x0a, 0x07, 0x4e, 0x72, 0x61, 0x72, 0x66, 0x63, 0x6e, 0x12, 0x22, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0c, 0xfa, 0x42, 0x09, 0x1a, 0x07, 0x18,
	0xbd, 0x92, 0xc8, 0x01, 0x28, 0x00, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xb6, 0x02,
	0x0a, 0x27, 0x4e, 0x67, 0x65, 0x4e, 0x62, 0x52, 0x61, 0x64, 0x69, 0x6f, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73,
	0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x70, 0x0a, 0x20, 0x69, 0x64, 0x5f,
	0x64, 0x6c, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x64,
	0x63, 0x63, 0x68, 0x5f, 0x63, 0x63, 0x65, 0x5f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x6c,
	0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x50, 0x44, 0x63, 0x63, 0x68, 0x43,
	0x43, 0x65, 0x75, 0x73, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x20, 0x69, 0x64, 0x2d, 0x44, 0x4c,
	0x2d, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x2d, 0x50, 0x44, 0x43, 0x43,
	0x48, 0x2d, 0x43, 0x43, 0x45, 0x2d, 0x75, 0x73, 0x61, 0x67, 0x65, 0x12, 0x70, 0x0a, 0x20, 0x69,
	0x64, 0x5f, 0x75, 0x6c, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x5f,
	0x70, 0x64, 0x63, 0x63, 0x68, 0x5f, 0x63, 0x63, 0x65, 0x5f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e,
	0x55, 0x6c, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x50, 0x44, 0x63, 0x63,
	0x68, 0x43, 0x43, 0x65, 0x75, 0x73, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x20, 0x69, 0x64, 0x2d,
	0x55, 0x4c, 0x2d, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x2d, 0x50, 0x44,
	0x43, 0x43, 0x48, 0x2d, 0x43, 0x43, 0x45, 0x2d, 0x75, 0x73, 0x61, 0x67, 0x65, 0x42, 0x27, 0x0a,
	0x25, 0x6e, 0x67, 0x5f, 0x65, 0x5f, 0x6e, 0x62, 0x5f, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x5f, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x65,
	0x78, 0x74, 0x5f, 0x69, 0x65, 0x73, 0x22, 0xd2, 0x01, 0x0a, 0x1e, 0x4e, 0x67, 0x65, 0x4e, 0x62,
	0x52, 0x61, 0x64, 0x69, 0x6f, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x49, 0x65, 0x49, 0x44, 0x52, 0x03, 0x26, 0x69,
	0x64, 0x12, 0x37, 0x0a, 0x0b, 0x63, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x0c, 0x26, 0x63,
	0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x4f, 0x0a, 0x09, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e,
	0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x67, 0x65, 0x4e, 0x62, 0x52, 0x61, 0x64,
	0x69, 0x6f, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x0a, 0x26, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xaa, 0x04, 0x0a, 0x18,
	0x4e, 0x67, 0x65, 0x4e, 0x62, 0x52, 0x61, 0x64, 0x69, 0x6f, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x43, 0x0a, 0x11, 0x64, 0x5f, 0x6c, 0x5f,
	0x67, 0x62, 0x72, 0x5f, 0x70, 0x72, 0x62, 0x5f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x6c,
	0x47, 0x42, 0x72, 0x50, 0x52, 0x62, 0x75, 0x73, 0x61, 0x67, 0x65, 0x52, 0x10, 0x64, 0x4c, 0x2d,
	0x47, 0x42, 0x52, 0x2d, 0x50, 0x52, 0x42, 0x2d, 0x75, 0x73, 0x61, 0x67, 0x65, 0x12, 0x43, 0x0a,
	0x11, 0x75, 0x5f, 0x6c, 0x5f, 0x67, 0x62, 0x72, 0x5f, 0x70, 0x72, 0x62, 0x5f, 0x75, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e,
	0x76, 0x31, 0x2e, 0x55, 0x6c, 0x47, 0x42, 0x72, 0x50, 0x52, 0x62, 0x75, 0x73, 0x61, 0x67, 0x65,
	0x52, 0x10, 0x75, 0x4c, 0x2d, 0x47, 0x42, 0x52, 0x2d, 0x50, 0x52, 0x42, 0x2d, 0x75, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x4e, 0x0a, 0x15, 0x64, 0x5f, 0x6c, 0x5f, 0x6e, 0x6f, 0x6e, 0x5f, 0x67, 0x62,
	0x72, 0x5f, 0x70, 0x72, 0x62, 0x5f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x6c, 0x6e, 0x6f,
	0x6e, 0x47, 0x42, 0x72, 0x50, 0x52, 0x62, 0x75, 0x73, 0x61, 0x67, 0x65, 0x52, 0x14, 0x64, 0x4c,
	0x2d, 0x6e, 0x6f, 0x6e, 0x2d, 0x47, 0x42, 0x52, 0x2d, 0x50, 0x52, 0x42, 0x2d, 0x75, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x4e, 0x0a, 0x15, 0x75, 0x5f, 0x6c, 0x5f, 0x6e, 0x6f, 0x6e, 0x5f, 0x67, 0x62,
	0x72, 0x5f, 0x70, 0x72, 0x62, 0x5f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x6c, 0x6e, 0x6f,
	0x6e, 0x47, 0x42, 0x72, 0x50, 0x52, 0x62, 0x75, 0x73, 0x61, 0x67, 0x65, 0x52, 0x14, 0x75, 0x4c,
	0x2d, 0x6e, 0x6f, 0x6e, 0x2d, 0x47, 0x42, 0x52, 0x2d, 0x50, 0x52, 0x42, 0x2d, 0x75, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x49, 0x0a, 0x13, 0x64, 0x5f, 0x6c, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f,
	0x70, 0x72, 0x62, 0x5f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x6c, 0x54, 0x6f, 0x74, 0x61,
	0x6c, 0x50, 0x52, 0x62, 0x75, 0x73, 0x61, 0x67, 0x65, 0x52, 0x12, 0x64, 0x4c, 0x2d, 0x54, 0x6f,
	0x74, 0x61, 0x6c, 0x2d, 0x50, 0x52, 0x42, 0x2d, 0x75, 0x73, 0x61, 0x67, 0x65, 0x12, 0x49, 0x0a,
	0x13, 0x75, 0x5f, 0x6c, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x70, 0x72, 0x62, 0x5f, 0x75,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x78, 0x6e, 0x61,
	0x70, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x6c, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x52, 0x62, 0x75,
	0x73, 0x61, 0x67, 0x65, 0x52, 0x12, 0x75, 0x4c, 0x2d, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x2d, 0x50,
	0x52, 0x42, 0x2d, 0x75, 0x73, 0x61, 0x67, 0x65, 0x12, 0x4e, 0x0a, 0x0e, 0x69, 0x5f, 0x65, 0x5f,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x27, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x67, 0x65, 0x4e, 0x62,
	0x52, 0x61, 0x64, 0x69, 0x6f, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x52, 0x0d, 0x69, 0x45, 0x2d, 0x45, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x3c, 0x0a, 0x19, 0x44, 0x6c, 0x73, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x50, 0x44, 0x63, 0x63, 0x68, 0x43, 0x43, 0x65,
	0x75, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1f, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x42, 0x09, 0xfa, 0x42, 0x06, 0x1a, 0x04, 0x18, 0x64, 0x28, 0x00, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x3c, 0x0a, 0x19, 0x55, 0x6c, 0x73, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x50, 0x44, 0x63, 0x63, 0x68, 0x43, 0x43, 0x65, 0x75, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x1f, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x42, 0x09, 0xfa, 0x42, 0x06, 0x1a, 0x04, 0x18, 0x64, 0x28, 0x00, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x22, 0x4a, 0x0a, 0x1a, 0x54, 0x6e, 0x6c, 0x63, 0x61, 0x70, 0x61, 0x63,
	0x69, 0x74, 0x79, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x45, 0x78, 0x74, 0x49,
	0x65, 0x73, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x22, 0xae, 0x03, 0x0a, 0x14, 0x54, 0x6e, 0x6c, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79,
	0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x4e, 0x0a, 0x16, 0x64, 0x5f, 0x6c,
	0x74, 0x6e, 0x6c, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x65, 0x64, 0x5f, 0x63, 0x61, 0x70, 0x61, 0x63,
	0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x78, 0x6e, 0x61, 0x70,
	0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x65, 0x64, 0x43, 0x61, 0x70, 0x61, 0x63,
	0x69, 0x74, 0x79, 0x52, 0x14, 0x64, 0x4c, 0x54, 0x4e, 0x4c, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x65,
	0x64, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x12, 0x54, 0x0a, 0x18, 0x64, 0x5f, 0x6c,
	0x74, 0x6e, 0x6c, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x63, 0x61, 0x70,
	0x61, 0x63, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x78, 0x6e,
	0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x43,
	0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x52, 0x16, 0x64, 0x4c, 0x54, 0x4e, 0x4c, 0x41, 0x76,
	0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x12,
	0x4e, 0x0a, 0x16, 0x75, 0x5f, 0x6c, 0x74, 0x6e, 0x6c, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x65, 0x64,
	0x5f, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x65,
	0x64, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x52, 0x14, 0x75, 0x4c, 0x54, 0x4e, 0x4c,
	0x4f, 0x66, 0x66, 0x65, 0x72, 0x65, 0x64, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x12,
	0x54, 0x0a, 0x18, 0x75, 0x5f, 0x6c, 0x74, 0x6e, 0x6c, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62,
	0x6c, 0x65, 0x5f, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x76, 0x61, 0x69,
	0x6c, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x52, 0x16, 0x75,
	0x4c, 0x54, 0x4e, 0x4c, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x61, 0x70,
	0x61, 0x63, 0x69, 0x74, 0x79, 0x12, 0x4a, 0x0a, 0x0e, 0x69, 0x5f, 0x65, 0x5f, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e,
	0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x6e, 0x6c, 0x63, 0x61, 0x70, 0x61, 0x63,
	0x69, 0x74, 0x79, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x45, 0x78, 0x74, 0x49,
	0x65, 0x73, 0x52, 0x0d, 0x69, 0x45, 0x2d, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x73, 0x22, 0x4d, 0x0a, 0x1d, 0x4e, 0x70, 0x6e, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73,
	0x74, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x74, 0x49,
	0x65, 0x73, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x22, 0xbc, 0x02, 0x0a, 0x17, 0x4e, 0x70, 0x6e, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73,
	0x74, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x52, 0x0a, 0x10,
	0x73, 0x6e, 0x70, 0x6e, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31,
	0x2e, 0x4e, 0x70, 0x6e, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x49, 0x6e, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x4e, 0x70, 0x6e, 0x48, 0x00, 0x52, 0x10,
	0x73, 0x6e, 0x70, 0x6e, 0x2d, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x5a, 0x0a, 0x13, 0x70, 0x6e, 0x69, 0x5f, 0x6e, 0x70, 0x6e, 0x5f, 0x69, 0x6e, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e,
	0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x70, 0x6e, 0x42, 0x72, 0x6f, 0x61, 0x64,
	0x63, 0x61, 0x73, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50,
	0x4e, 0x69, 0x4e, 0x50, 0x6e, 0x48, 0x00, 0x52, 0x13, 0x70, 0x6e, 0x69, 0x2d, 0x6e, 0x70, 0x6e,
	0x2d, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x54, 0x0a, 0x10,
	0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31,
	0x2e, 0x4e, 0x70, 0x6e, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x49, 0x6e, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x48, 0x00,
	0x52, 0x10, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x2d, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x42, 0x1b, 0x0a, 0x19, 0x6e, 0x70, 0x6e, 0x5f, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63,
	0x61, 0x73, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22,
	0x51, 0x0a, 0x21, 0x4e, 0x70, 0x6e, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x49,
	0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x4e, 0x70, 0x6e, 0x45, 0x78,
	0x74, 0x49, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x22, 0xc1, 0x01, 0x0a, 0x1b, 0x4e, 0x70, 0x6e, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63,
	0x61, 0x73, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x4e,
	0x70, 0x6e, 0x12, 0x51, 0x0a, 0x15, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x5f,
	0x73, 0x6e, 0x70, 0x6e, 0x69, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x72, 0x6f, 0x61,
	0x64, 0x63, 0x61, 0x73, 0x74, 0x53, 0x6e, 0x70, 0x6e, 0x69, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x14, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x53, 0x4e, 0x50, 0x4e, 0x49, 0x44,
	0x2d, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x4f, 0x0a, 0x0d, 0x69, 0x5f, 0x65, 0x5f, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x78,
	0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x70, 0x6e, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63,
	0x61, 0x73, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x4e,
	0x70, 0x6e, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x52, 0x0c, 0x69, 0x45, 0x2d, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x53, 0x0a, 0x23, 0x4e, 0x70, 0x6e, 0x42, 0x72, 0x6f,
	0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x50, 0x4e, 0x69, 0x4e, 0x50, 0x6e, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x12, 0x2c, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xe4, 0x01, 0x0a, 0x1d,
	0x4e, 0x70, 0x6e, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x49, 0x6e, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x4e, 0x69, 0x4e, 0x50, 0x6e, 0x12, 0x70, 0x0a,
	0x20, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x70, 0x6e, 0x69, 0x5f, 0x6e,
	0x70, 0x6e, 0x5f, 0x69, 0x64, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76,
	0x31, 0x2e, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x50, 0x6e, 0x69, 0x4e, 0x50,
	0x6e, 0x49, 0x44, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x1f,
	0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x50, 0x4e, 0x49, 0x2d, 0x4e, 0x50, 0x4e,
	0x2d, 0x49, 0x44, 0x2d, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x51, 0x0a, 0x0d, 0x69, 0x5f, 0x65, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31,
	0x2e, 0x4e, 0x70, 0x6e, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x49, 0x6e, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x4e, 0x69, 0x4e, 0x50, 0x6e, 0x45, 0x78,
	0x74, 0x49, 0x65, 0x73, 0x52, 0x0c, 0x69, 0x45, 0x2d, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x22, 0x4c, 0x0a, 0x1c, 0x4e, 0x70, 0x6e, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x79, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x74, 0x49,
	0x65, 0x73, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x22, 0xda, 0x02, 0x0a, 0x16, 0x4e, 0x70, 0x6e, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x63, 0x0a, 0x19, 0x73,
	0x6e, 0x70, 0x6e, 0x5f, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x6e, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23,
	0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x70, 0x6e, 0x6d, 0x6f, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x4e, 0x70, 0x6e, 0x48, 0x00, 0x52, 0x19, 0x73, 0x6e, 0x70, 0x6e, 0x2d, 0x6d, 0x6f, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x2d, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x6b, 0x0a, 0x1c, 0x70, 0x6e, 0x69, 0x5f, 0x6e, 0x70, 0x6e, 0x5f, 0x6d, 0x6f, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31,
	0x2e, 0x4e, 0x70, 0x6e, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x4e, 0x69, 0x4e, 0x50, 0x6e, 0x48, 0x00, 0x52,
	0x1c, 0x70, 0x6e, 0x69, 0x2d, 0x6e, 0x70, 0x6e, 0x2d, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x79, 0x2d, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x53, 0x0a,
	0x10, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76,
	0x31, 0x2e, 0x4e, 0x70, 0x6e, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x48, 0x00,
	0x52, 0x10, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x2d, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x42, 0x19, 0x0a, 0x17, 0x6e, 0x70, 0x6e, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x79, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x50, 0x0a,
	0x20, 0x4e, 0x70, 0x6e, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x4e, 0x70, 0x6e, 0x45, 0x78, 0x74, 0x49, 0x65,
	0x73, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22,
	0x9c, 0x01, 0x0a, 0x1a, 0x4e, 0x70, 0x6e, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x49,
	0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x4e, 0x70, 0x6e, 0x12, 0x2e,
	0x0a, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x6e, 0x67, 0x5f, 0x6e, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x69,
	0x64, 0x52, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x6e, 0x67, 0x2d, 0x4e, 0x49, 0x44, 0x12, 0x4e,
	0x0a, 0x0d, 0x69, 0x5f, 0x65, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e,
	0x4e, 0x70, 0x6e, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x4e, 0x70, 0x6e, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73,
	0x52, 0x0c, 0x69, 0x45, 0x2d, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x52,
	0x0a, 0x22, 0x4e, 0x70, 0x6e, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x4e, 0x69, 0x4e, 0x50, 0x6e, 0x45, 0x78,
	0x74, 0x49, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x22, 0xc7, 0x01, 0x0a, 0x1c, 0x4e, 0x70, 0x6e, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x4e, 0x69,
	0x4e, 0x50, 0x6e, 0x12, 0x55, 0x0a, 0x17, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x5f, 0x70,
	0x6e, 0x69, 0x5f, 0x6e, 0x70, 0x6e, 0x5f, 0x69, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x41,
	0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x50, 0x6e, 0x69, 0x4e, 0x50, 0x6e, 0x49, 0x44, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x16, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x50, 0x4e, 0x49, 0x2d, 0x4e,
	0x50, 0x4e, 0x2d, 0x49, 0x44, 0x2d, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x50, 0x0a, 0x0d, 0x69, 0x5f,
	0x65, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x2b, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x70, 0x6e, 0x6d,
	0x6f, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x50, 0x4e, 0x69, 0x4e, 0x50, 0x6e, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x52, 0x0c,
	0x69, 0x45, 0x2d, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x54, 0x0a, 0x24,
	0x4e, 0x70, 0x6e, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x41, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78,
	0x74, 0x49, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x22, 0x84, 0x02, 0x0a, 0x1e, 0x4e, 0x70, 0x6e, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x67,
	0x41, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x61, 0x0a, 0x13, 0x70, 0x6e, 0x69, 0x5f, 0x6e, 0x70, 0x6e,
	0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x70, 0x6e,
	0x70, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x41, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x4e, 0x69, 0x4e, 0x50,
	0x6e, 0x48, 0x00, 0x52, 0x13, 0x70, 0x6e, 0x69, 0x2d, 0x6e, 0x70, 0x6e, 0x2d, 0x49, 0x6e, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x5b, 0x0a, 0x10, 0x63, 0x68, 0x6f, 0x69,
	0x63, 0x65, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x70, 0x6e,
	0x70, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x41, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x74, 0x49, 0x65,
	0x73, 0x48, 0x00, 0x52, 0x10, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x2d, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x22, 0x0a, 0x20, 0x6e, 0x70, 0x6e, 0x70, 0x61, 0x67, 0x69,
	0x6e, 0x67, 0x5f, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x6e,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x5a, 0x0a, 0x2a, 0x4e, 0x70, 0x6e,
	0x70, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x41, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x4e, 0x69, 0x4e, 0x50,
	0x6e, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xd7, 0x01, 0x0a, 0x24, 0x4e, 0x70, 0x6e, 0x70, 0x61, 0x67,
	0x69, 0x6e, 0x67, 0x41, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x4e, 0x69, 0x4e, 0x50, 0x6e, 0x12, 0x55,
	0x0a, 0x17, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x5f, 0x70, 0x6e, 0x69, 0x5f, 0x6e, 0x70,
	0x6e, 0x5f, 0x69, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65,
	0x64, 0x50, 0x6e, 0x69, 0x4e, 0x50, 0x6e, 0x49, 0x44, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x16, 0x61,
	0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x50, 0x4e, 0x49, 0x2d, 0x4e, 0x50, 0x4e, 0x2d, 0x49, 0x44,
	0x2d, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x58, 0x0a, 0x0d, 0x69, 0x5f, 0x65, 0x5f, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x78,
	0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x70, 0x6e, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x67,
	0x41, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x4e, 0x69, 0x4e, 0x50, 0x6e, 0x45, 0x78, 0x74, 0x49, 0x65,
	0x73, 0x52, 0x0c, 0x69, 0x45, 0x2d, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22,
	0x40, 0x0a, 0x10, 0x4e, 0x70, 0x6e, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x45, 0x78, 0x74,
	0x49, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x22, 0x96, 0x01, 0x0a, 0x0a, 0x4e, 0x70, 0x6e, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74,
	0x12, 0x2e, 0x0a, 0x05, 0x73, 0x5f, 0x6e, 0x70, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x70, 0x6e, 0x53, 0x75, 0x70,
	0x70, 0x6f, 0x72, 0x74, 0x53, 0x4e, 0x70, 0x6e, 0x48, 0x00, 0x52, 0x04, 0x73, 0x4e, 0x50, 0x4e,
	0x12, 0x49, 0x0a, 0x11, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x78, 0x6e,
	0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x70, 0x6e, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74,
	0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x48, 0x00, 0x52, 0x11, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65,
	0x2d, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x0d, 0x0a, 0x0b, 0x6e,
	0x70, 0x6e, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x22, 0x44, 0x0a, 0x14, 0x4e, 0x70,
	0x6e, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x4e, 0x70, 0x6e, 0x45, 0x78, 0x74, 0x49,
	0x65, 0x73, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x22, 0x73, 0x0a, 0x0e, 0x4e, 0x70, 0x6e, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x4e,
	0x70, 0x6e, 0x12, 0x1e, 0x0a, 0x03, 0x6e, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0c, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x69, 0x64, 0x52, 0x03, 0x6e,
	0x69, 0x64, 0x12, 0x41, 0x0a, 0x0c, 0x69, 0x65, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e,
	0x76, 0x31, 0x2e, 0x4e, 0x70, 0x6e, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x4e, 0x70,
	0x6e, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x52, 0x0c, 0x69, 0x65, 0x2d, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x59, 0x0a, 0x29, 0x46, 0x64, 0x64, 0x6f, 0x72, 0x54, 0x44,
	0x64, 0x69, 0x6e, 0x4e, 0x50, 0x72, 0x61, 0x63, 0x68, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x45, 0x78, 0x74, 0x49,
	0x65, 0x73, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x22, 0x8b, 0x02, 0x0a, 0x1b, 0x46, 0x64, 0x64, 0x6f, 0x72, 0x74, 0x64, 0x64, 0x4e, 0x70, 0x72,
	0x61, 0x63, 0x68, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x33, 0x0a, 0x03, 0x66, 0x64, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x70, 0x72, 0x61, 0x63, 0x68, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x44, 0x64, 0x48, 0x00,
	0x52, 0x03, 0x66, 0x64, 0x64, 0x12, 0x33, 0x0a, 0x03, 0x74, 0x64, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x70, 0x72,
	0x61, 0x63, 0x68, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x44, 0x64, 0x48, 0x00, 0x52, 0x03, 0x74, 0x64, 0x64, 0x12, 0x60, 0x0a, 0x10, 0x63, 0x68,
	0x6f, 0x69, 0x63, 0x65, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x46,
	0x64, 0x64, 0x6f, 0x72, 0x54, 0x44, 0x64, 0x69, 0x6e, 0x4e, 0x50, 0x72, 0x61, 0x63, 0x68, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x6f, 0x69,
	0x63, 0x65, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x48, 0x00, 0x52, 0x10, 0x63, 0x68, 0x6f, 0x69,
	0x63, 0x65, 0x2d, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x20, 0x0a, 0x1e,
	0x66, 0x64, 0x64, 0x5f, 0x6f, 0x72, 0x5f, 0x74, 0x64, 0x64, 0x5f, 0x6e, 0x70, 0x72, 0x61, 0x63,
	0x68, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x49,
	0x0a, 0x19, 0x4e, 0x70, 0x72, 0x61, 0x63, 0x68, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xa6, 0x01, 0x0a, 0x13, 0x4e, 0x70,
	0x72, 0x61, 0x63, 0x68, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x44, 0x0a, 0x0a, 0x66, 0x64, 0x64, 0x5f, 0x6f, 0x72, 0x5f, 0x74, 0x64, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e,
	0x46, 0x64, 0x64, 0x6f, 0x72, 0x74, 0x64, 0x64, 0x4e, 0x70, 0x72, 0x61, 0x63, 0x68, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x66, 0x64, 0x64,
	0x2d, 0x6f, 0x72, 0x2d, 0x74, 0x64, 0x64, 0x12, 0x49, 0x0a, 0x0e, 0x69, 0x5f, 0x65, 0x5f, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x70, 0x72, 0x61, 0x63, 0x68,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x74,
	0x49, 0x65, 0x73, 0x52, 0x0d, 0x69, 0x45, 0x2d, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x22, 0x4c, 0x0a, 0x1c, 0x4e, 0x70, 0x72, 0x61, 0x63, 0x68, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x44, 0x64, 0x45, 0x78, 0x74, 0x49,
	0x65, 0x73, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x22, 0xe2, 0x06, 0x0a, 0x16, 0x4e, 0x70, 0x72, 0x61, 0x63, 0x68, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x44, 0x64, 0x12, 0x43, 0x0a, 0x10, 0x6e,
	0x70, 0x72, 0x61, 0x63, 0x68, 0x5f, 0x63, 0x70, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e,
	0x4e, 0x70, 0x72, 0x61, 0x63, 0x68, 0x43, 0x50, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x52, 0x10,
	0x6e, 0x70, 0x72, 0x61, 0x63, 0x68, 0x2d, 0x43, 0x50, 0x2d, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68,
	0x12, 0x3f, 0x0a, 0x1b, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x72, 0x72, 0x69,
	0x65, 0x72, 0x5f, 0x6e, 0x70, 0x72, 0x61, 0x63, 0x68, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x1a, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x43, 0x61, 0x72,
	0x72, 0x69, 0x65, 0x72, 0x2d, 0x4e, 0x50, 0x52, 0x41, 0x43, 0x48, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0x4c, 0x0a, 0x1f, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x72, 0x72,
	0x69, 0x65, 0x72, 0x5f, 0x65, 0x64, 0x74, 0x5f, 0x6e, 0x70, 0x72, 0x61, 0x63, 0x68, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x1e, 0x61, 0x6e,
	0x63, 0x68, 0x6f, 0x72, 0x43, 0x61, 0x72, 0x72, 0x69, 0x65, 0x72, 0x2d, 0x45, 0x44, 0x54, 0x2d,
	0x4e, 0x50, 0x52, 0x41, 0x43, 0x48, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x88, 0x01, 0x01, 0x12,
	0x54, 0x0a, 0x23, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x72, 0x72, 0x69, 0x65,
	0x72, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x32, 0x5f, 0x6e, 0x70, 0x72, 0x61, 0x63, 0x68,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x01, 0x52, 0x22,
	0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x43, 0x61, 0x72, 0x72, 0x69, 0x65, 0x72, 0x2d, 0x46, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x32, 0x2d, 0x4e, 0x50, 0x52, 0x41, 0x43, 0x48, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x88, 0x01, 0x01, 0x12, 0x5c, 0x0a, 0x27, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x5f,
	0x63, 0x61, 0x72, 0x72, 0x69, 0x65, 0x72, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x32, 0x5f,
	0x65, 0x64, 0x74, 0x5f, 0x6e, 0x70, 0x72, 0x61, 0x63, 0x68, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x02, 0x52, 0x26, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72,
	0x43, 0x61, 0x72, 0x72, 0x69, 0x65, 0x72, 0x2d, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x32, 0x2d,
	0x45, 0x44, 0x54, 0x2d, 0x4e, 0x50, 0x52, 0x41, 0x43, 0x48, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x88, 0x01, 0x01, 0x12, 0x4c, 0x0a, 0x1f, 0x6e, 0x6f, 0x6e, 0x5f, 0x61, 0x6e, 0x63, 0x68, 0x6f,
	0x72, 0x5f, 0x63, 0x61, 0x72, 0x72, 0x69, 0x65, 0x72, 0x5f, 0x6e, 0x70, 0x72, 0x61, 0x63, 0x68,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x03, 0x52, 0x1e,
	0x6e, 0x6f, 0x6e, 0x2d, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x43, 0x61, 0x72, 0x72, 0x69, 0x65,
	0x72, 0x2d, 0x4e, 0x50, 0x52, 0x41, 0x43, 0x48, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x88, 0x01,
	0x01, 0x12, 0x5c, 0x0a, 0x27, 0x6e, 0x6f, 0x6e, 0x5f, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x5f,
	0x63, 0x61, 0x72, 0x72, 0x69, 0x65, 0x72, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x32, 0x5f,
	0x6e, 0x70, 0x72, 0x61, 0x63, 0x68, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0c, 0x48, 0x04, 0x52, 0x26, 0x6e, 0x6f, 0x6e, 0x2d, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72,
	0x43, 0x61, 0x72, 0x72, 0x69, 0x65, 0x72, 0x2d, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x32, 0x2d,
	0x4e, 0x50, 0x52, 0x41, 0x43, 0x48, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x88, 0x01, 0x01, 0x12,
	0x4c, 0x0a, 0x0e, 0x69, 0x5f, 0x65, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76,
	0x31, 0x2e, 0x4e, 0x70, 0x72, 0x61, 0x63, 0x68, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x44, 0x64, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x52, 0x0d,
	0x69, 0x45, 0x2d, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x22, 0x0a,
	0x20, 0x5f, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x72, 0x72, 0x69, 0x65, 0x72,
	0x5f, 0x65, 0x64, 0x74, 0x5f, 0x6e, 0x70, 0x72, 0x61, 0x63, 0x68, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x42, 0x26, 0x0a, 0x24, 0x5f, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x72,
	0x72, 0x69, 0x65, 0x72, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x32, 0x5f, 0x6e, 0x70, 0x72,
	0x61, 0x63, 0x68, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x2a, 0x0a, 0x28, 0x5f, 0x61, 0x6e,
	0x63, 0x68, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x72, 0x72, 0x69, 0x65, 0x72, 0x5f, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x32, 0x5f, 0x65, 0x64, 0x74, 0x5f, 0x6e, 0x70, 0x72, 0x61, 0x63, 0x68, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x22, 0x0a, 0x20, 0x5f, 0x6e, 0x6f, 0x6e, 0x5f, 0x61, 0x6e,
	0x63, 0x68, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x72, 0x72, 0x69, 0x65, 0x72, 0x5f, 0x6e, 0x70, 0x72,
	0x61, 0x63, 0x68, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x2a, 0x0a, 0x28, 0x5f, 0x6e, 0x6f,
	0x6e, 0x5f, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x72, 0x72, 0x69, 0x65, 0x72,
	0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x32, 0x5f, 0x6e, 0x70, 0x72, 0x61, 0x63, 0x68, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x4c, 0x0a, 0x1c, 0x4e, 0x70, 0x72, 0x61, 0x63, 0x68, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x44, 0x64, 0x45,
	0x78, 0x74, 0x49, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x22, 0xaf, 0x04, 0x0a, 0x16, 0x4e, 0x70, 0x72, 0x61, 0x63, 0x68, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x44, 0x64, 0x12, 0x54,
	0x0a, 0x16, 0x6e, 0x70, 0x72, 0x61, 0x63, 0x68, 0x5f, 0x70, 0x72, 0x65, 0x61, 0x6d, 0x62, 0x6c,
	0x65, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d,
	0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x70, 0x72, 0x61, 0x63, 0x68, 0x70,
	0x72, 0x65, 0x61, 0x6d, 0x62, 0x6c, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x52, 0x15, 0x6e,
	0x70, 0x72, 0x61, 0x63, 0x68, 0x2d, 0x70, 0x72, 0x65, 0x61, 0x6d, 0x62, 0x6c, 0x65, 0x46, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x12, 0x46, 0x0a, 0x1f, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x5f, 0x63,
	0x61, 0x72, 0x72, 0x69, 0x65, 0x72, 0x5f, 0x6e, 0x70, 0x72, 0x61, 0x63, 0x68, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x5f, 0x74, 0x64, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x1d, 0x61,
	0x6e, 0x63, 0x68, 0x6f, 0x72, 0x43, 0x61, 0x72, 0x72, 0x69, 0x65, 0x72, 0x2d, 0x4e, 0x50, 0x52,
	0x41, 0x43, 0x48, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x54, 0x44, 0x44, 0x12, 0x80, 0x01, 0x0a,
	0x26, 0x6e, 0x6f, 0x6e, 0x5f, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x72, 0x72,
	0x69, 0x65, 0x72, 0x5f, 0x66, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e,
	0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x6e, 0x41, 0x6e, 0x63, 0x68, 0x6f,
	0x72, 0x43, 0x61, 0x72, 0x72, 0x69, 0x65, 0x72, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63,
	0x79, 0x6c, 0x69, 0x73, 0x74, 0x48, 0x00, 0x52, 0x23, 0x6e, 0x6f, 0x6e, 0x2d, 0x61, 0x6e, 0x63,
	0x68, 0x6f, 0x72, 0x43, 0x61, 0x72, 0x72, 0x69, 0x65, 0x72, 0x46, 0x65, 0x71, 0x75, 0x65, 0x6e,
	0x63, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x6c, 0x69, 0x73, 0x74, 0x88, 0x01, 0x01, 0x12,
	0x53, 0x0a, 0x23, 0x6e, 0x6f, 0x6e, 0x5f, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x5f, 0x63, 0x61,
	0x72, 0x72, 0x69, 0x65, 0x72, 0x5f, 0x6e, 0x70, 0x72, 0x61, 0x63, 0x68, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x5f, 0x74, 0x64, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x01, 0x52, 0x21,
	0x6e, 0x6f, 0x6e, 0x2d, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x43, 0x61, 0x72, 0x72, 0x69, 0x65,
	0x72, 0x2d, 0x4e, 0x50, 0x52, 0x41, 0x43, 0x48, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x54, 0x44,
	0x44, 0x88, 0x01, 0x01, 0x12, 0x4c, 0x0a, 0x0e, 0x69, 0x5f, 0x65, 0x5f, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x78,
	0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x70, 0x72, 0x61, 0x63, 0x68, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x44, 0x64, 0x45, 0x78, 0x74,
	0x49, 0x65, 0x73, 0x52, 0x0d, 0x69, 0x45, 0x2d, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x42, 0x29, 0x0a, 0x27, 0x5f, 0x6e, 0x6f, 0x6e, 0x5f, 0x61, 0x6e, 0x63, 0x68, 0x6f,
	0x72, 0x5f, 0x63, 0x61, 0x72, 0x72, 0x69, 0x65, 0x72, 0x5f, 0x66, 0x65, 0x71, 0x75, 0x65, 0x6e,
	0x63, 0x79, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x6c, 0x69, 0x73, 0x74, 0x42, 0x26, 0x0a,
	0x24, 0x5f, 0x6e, 0x6f, 0x6e, 0x5f, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x72,
	0x72, 0x69, 0x65, 0x72, 0x5f, 0x6e, 0x70, 0x72, 0x61, 0x63, 0x68, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x5f, 0x74, 0x64, 0x64, 0x22, 0x53, 0x0a, 0x23, 0x4e, 0x6f, 0x6e, 0x41, 0x6e, 0x63, 0x68,
	0x6f, 0x72, 0x43, 0x61, 0x72, 0x72, 0x69, 0x65, 0x72, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e,
	0x63, 0x79, 0x6c, 0x69, 0x73, 0x74, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xba, 0x01, 0x0a, 0x23, 0x4e,
	0x65, 0x73, 0x74, 0x65, 0x64, 0x4e, 0x6f, 0x6e, 0x41, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x43, 0x61,
	0x72, 0x72, 0x69, 0x65, 0x72, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x6c, 0x69,
	0x73, 0x74, 0x12, 0x3e, 0x0a, 0x1b, 0x6e, 0x6f, 0x6e, 0x5f, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72,
	0x5f, 0x63, 0x61, 0x72, 0x72, 0x69, 0x65, 0x72, 0x5f, 0x66, 0x72, 0x71, 0x75, 0x65, 0x6e, 0x63,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x19, 0x6e, 0x6f, 0x6e, 0x2d, 0x61, 0x6e, 0x63,
	0x68, 0x6f, 0x72, 0x43, 0x61, 0x72, 0x72, 0x69, 0x65, 0x72, 0x46, 0x72, 0x71, 0x75, 0x65, 0x6e,
	0x63, 0x79, 0x12, 0x53, 0x0a, 0x0e, 0x69, 0x5f, 0x65, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x78, 0x6e, 0x61,
	0x70, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x6e, 0x41, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x43, 0x61,
	0x72, 0x72, 0x69, 0x65, 0x72, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x6c, 0x69,
	0x73, 0x74, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x52, 0x0d, 0x69, 0x45, 0x2d, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x6f, 0x0a, 0x1d, 0x4e, 0x6f, 0x6e, 0x41, 0x6e,
	0x63, 0x68, 0x6f, 0x72, 0x43, 0x61, 0x72, 0x72, 0x69, 0x65, 0x72, 0x46, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x6e, 0x63, 0x79, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x4e, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76,
	0x31, 0x2e, 0x4e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x4e, 0x6f, 0x6e, 0x41, 0x6e, 0x63, 0x68, 0x6f,
	0x72, 0x43, 0x61, 0x72, 0x72, 0x69, 0x65, 0x72, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63,
	0x79, 0x6c, 0x69, 0x73, 0x74, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x92, 0x01, 0x04, 0x08, 0x01, 0x10,
	0x0f, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x3a, 0x0a, 0x0e, 0x4e, 0x72, 0x43, 0x65,
	0x6c, 0x6c, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x28, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x61, 0x73, 0x6e, 0x31,
	0x2e, 0x76, 0x31, 0x2e, 0x42, 0x69, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x22, 0x64, 0x0a, 0x24, 0x4e, 0x67, 0x52, 0x41, 0x6e, 0x43, 0x65, 0x6c,
	0x6c, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x52,
	0x61, 0x6e, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x41, 0x72, 0x65, 0x61, 0x12, 0x3c, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x78, 0x6e,
	0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x67, 0x52, 0x41, 0x6e, 0x43, 0x65, 0x6c, 0x6c, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x92, 0x01, 0x04, 0x08,
	0x01, 0x10, 0x20, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x3b, 0x0a, 0x0b, 0x4e, 0x72,
	0x43, 0x47, 0x69, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xa2, 0x01, 0x0a, 0x05, 0x4e, 0x72, 0x43, 0x47,
	0x69, 0x12, 0x2f, 0x0a, 0x07, 0x70, 0x6c, 0x6d, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6c, 0x6d,
	0x6e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x07, 0x70, 0x6c, 0x6d, 0x6e, 0x2d,
	0x69, 0x64, 0x12, 0x2d, 0x0a, 0x05, 0x6e, 0x72, 0x5f, 0x63, 0x69, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x72, 0x43, 0x65,
	0x6c, 0x6c, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x05, 0x6e, 0x72, 0x2d, 0x43,
	0x49, 0x12, 0x39, 0x0a, 0x0d, 0x69, 0x5f, 0x65, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e,
	0x76, 0x31, 0x2e, 0x4e, 0x72, 0x43, 0x47, 0x69, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x52, 0x0c,
	0x69, 0x45, 0x2d, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x33, 0x0a, 0x0f,
	0x4e, 0x72, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x42, 0x61, 0x6e, 0x64, 0x12,
	0x20, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0a,
	0xfa, 0x42, 0x07, 0x1a, 0x05, 0x18, 0x80, 0x08, 0x28, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x22, 0x55, 0x0a, 0x13, 0x4e, 0x72, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79,
	0x42, 0x61, 0x6e, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x3e, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76,
	0x31, 0x2e, 0x4e, 0x72, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x42, 0x61, 0x6e,
	0x64, 0x49, 0x74, 0x65, 0x6d, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x92, 0x01, 0x04, 0x08, 0x01, 0x10,
	0x20, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x49, 0x0a, 0x19, 0x4e, 0x72, 0x66, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x42, 0x61, 0x6e, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x45,
	0x78, 0x74, 0x49, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x22, 0xa0, 0x02, 0x0a, 0x13, 0x4e, 0x72, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x6e, 0x63, 0x79, 0x42, 0x61, 0x6e, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x46, 0x0a, 0x11, 0x6e,
	0x72, 0x5f, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x62, 0x61, 0x6e, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31,
	0x2e, 0x4e, 0x72, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x42, 0x61, 0x6e, 0x64,
	0x52, 0x11, 0x6e, 0x72, 0x2d, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x2d, 0x62,
	0x61, 0x6e, 0x64, 0x12, 0x5c, 0x0a, 0x17, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64,
	0x5f, 0x73, 0x75, 0x6c, 0x5f, 0x62, 0x61, 0x6e, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x53, 0x75, 0x6c, 0x62, 0x61, 0x6e, 0x64, 0x4c,
	0x69, 0x73, 0x74, 0x48, 0x00, 0x52, 0x17, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64,
	0x2d, 0x53, 0x55, 0x4c, 0x2d, 0x42, 0x61, 0x6e, 0x64, 0x2d, 0x4c, 0x69, 0x73, 0x74, 0x88, 0x01,
	0x01, 0x12, 0x47, 0x0a, 0x0d, 0x69, 0x5f, 0x65, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e,
	0x76, 0x31, 0x2e, 0x4e, 0x72, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x42, 0x61,
	0x6e, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x52, 0x0c, 0x69, 0x45,
	0x2d, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x1a, 0x0a, 0x18, 0x5f, 0x73,
	0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x73, 0x75, 0x6c, 0x5f, 0x62, 0x61, 0x6e,
	0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x22, 0x45, 0x0a, 0x15, 0x4e, 0x72, 0x66, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x6e, 0x63, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x12,
	0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xae, 0x02,
	0x0a, 0x0f, 0x4e, 0x72, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x2b, 0x0a, 0x08, 0x6e, 0x72, 0x5f, 0x61, 0x72, 0x66, 0x63, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x72,
	0x61, 0x72, 0x66, 0x63, 0x6e, 0x52, 0x07, 0x6e, 0x72, 0x41, 0x52, 0x46, 0x43, 0x4e, 0x12, 0x46,
	0x0a, 0x0f, 0x73, 0x75, 0x6c, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x75, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x48, 0x00, 0x52, 0x0f, 0x73, 0x75, 0x6c, 0x2d, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x4d, 0x0a, 0x13, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x6e, 0x63, 0x79, 0x5f, 0x62, 0x61, 0x6e, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x72,
	0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x42, 0x61, 0x6e, 0x64, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x12, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x42, 0x61, 0x6e, 0x64,
	0x2d, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x43, 0x0a, 0x0d, 0x69, 0x5f, 0x65, 0x5f, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x78,
	0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x72, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e,
	0x63, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x52, 0x0c, 0x69, 0x45,
	0x2d, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x73,
	0x75, 0x6c, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x2f,
	0x0a, 0x17, 0x4e, 0x72, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x48, 0x69, 0x73, 0x74,
	0x6f, 0x72, 0x79, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22,
	0x40, 0x0a, 0x10, 0x4e, 0x72, 0x6d, 0x6f, 0x64, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x45, 0x78, 0x74,
	0x49, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x22, 0xbc, 0x01, 0x0a, 0x0a, 0x4e, 0x72, 0x6d, 0x6f, 0x64, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x2a, 0x0a, 0x03, 0x66, 0x64, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x72, 0x6d, 0x6f, 0x64, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x46, 0x64, 0x64, 0x48, 0x00, 0x52, 0x03, 0x66, 0x64, 0x64, 0x12, 0x2a, 0x0a, 0x03,
	0x74, 0x64, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x78, 0x6e, 0x61, 0x70,
	0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x72, 0x6d, 0x6f, 0x64, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x54, 0x64,
	0x64, 0x48, 0x00, 0x52, 0x03, 0x74, 0x64, 0x64, 0x12, 0x47, 0x0a, 0x10, 0x63, 0x68, 0x6f, 0x69,
	0x63, 0x65, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x72, 0x6d,
	0x6f, 0x64, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x48, 0x00, 0x52,
	0x10, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x2d, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x42, 0x0d, 0x0a, 0x0b, 0x6e, 0x72, 0x6d, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f,
	0x22, 0xc7, 0x01, 0x0a, 0x1c, 0x4e, 0x72, 0x6d, 0x6f, 0x64, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x46,
	0x64, 0x64, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x45, 0x0a, 0x11, 0x69, 0x64, 0x5f, 0x75, 0x6c, 0x63, 0x61, 0x72, 0x72, 0x69, 0x65,
	0x72, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x78,
	0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x72, 0x63, 0x61, 0x72, 0x72, 0x69, 0x65, 0x72,
	0x4c, 0x69, 0x73, 0x74, 0x48, 0x00, 0x52, 0x10, 0x69, 0x64, 0x2d, 0x55, 0x4c, 0x43, 0x61, 0x72,
	0x72, 0x69, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x45, 0x0a, 0x11, 0x69, 0x64, 0x5f, 0x64,
	0x6c, 0x63, 0x61, 0x72, 0x72, 0x69, 0x65, 0x72, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x72,
	0x63, 0x61, 0x72, 0x72, 0x69, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x00, 0x52, 0x10, 0x69,
	0x64, 0x2d, 0x44, 0x4c, 0x43, 0x61, 0x72, 0x72, 0x69, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x42,
	0x19, 0x0a, 0x17, 0x6e, 0x72, 0x6d, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x66,
	0x64, 0x64, 0x5f, 0x65, 0x78, 0x74, 0x5f, 0x69, 0x65, 0x73, 0x22, 0xbc, 0x01, 0x0a, 0x13, 0x4e,
	0x72, 0x6d, 0x6f, 0x64, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x46, 0x64, 0x64, 0x45, 0x78, 0x74, 0x49,
	0x65, 0x73, 0x12, 0x26, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x49, 0x65, 0x49, 0x44, 0x52, 0x03, 0x26, 0x69, 0x64, 0x12, 0x37, 0x0a, 0x0b, 0x63, 0x72,
	0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x14, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x69, 0x74, 0x69, 0x63,
	0x61, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x0c, 0x26, 0x63, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c,
	0x69, 0x74, 0x79, 0x12, 0x44, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31,
	0x2e, 0x4e, 0x72, 0x6d, 0x6f, 0x64, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x46, 0x64, 0x64, 0x45, 0x78,
	0x74, 0x49, 0x65, 0x73, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x26,
	0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xa6, 0x03, 0x0a, 0x0d, 0x4e, 0x72,
	0x6d, 0x6f, 0x64, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x46, 0x64, 0x64, 0x12, 0x48, 0x0a, 0x13, 0x75,
	0x6c, 0x5f, 0x6e, 0x72, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x69, 0x6e,
	0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e,
	0x76, 0x31, 0x2e, 0x4e, 0x72, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x11, 0x75, 0x6c, 0x4e, 0x52, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63,
	0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x48, 0x0a, 0x13, 0x64, 0x6c, 0x5f, 0x6e, 0x72, 0x66, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x72, 0x66,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x11, 0x64, 0x6c,
	0x4e, 0x52, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x5e, 0x0a, 0x1a, 0x75, 0x6c, 0x5f, 0x6e, 0x72, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x73,
	0x73, 0x6f, 0x6e, 0x5f, 0x62, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x72,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x61, 0x6e, 0x64,
	0x77, 0x69, 0x64, 0x74, 0x68, 0x52, 0x18, 0x75, 0x6c, 0x4e, 0x52, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x6d, 0x69, 0x73, 0x73, 0x6f, 0x6e, 0x42, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x12,
	0x5e, 0x0a, 0x1a, 0x64, 0x6c, 0x5f, 0x6e, 0x72, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x73,
	0x73, 0x6f, 0x6e, 0x5f, 0x62, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x72,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x61, 0x6e, 0x64,
	0x77, 0x69, 0x64, 0x74, 0x68, 0x52, 0x18, 0x64, 0x6c, 0x4e, 0x52, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x6d, 0x69, 0x73, 0x73, 0x6f, 0x6e, 0x42, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x12,
	0x41, 0x0a, 0x0d, 0x69, 0x5f, 0x65, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31,
	0x2e, 0x4e, 0x72, 0x6d, 0x6f, 0x64, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x46, 0x64, 0x64, 0x45, 0x78,
	0x74, 0x49, 0x65, 0x73, 0x52, 0x0c, 0x69, 0x45, 0x2d, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x22, 0xf1, 0x02, 0x0a, 0x1c, 0x4e, 0x72, 0x6d, 0x6f, 0x64, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x54, 0x64, 0x64, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x7e, 0x0a, 0x25, 0x69, 0x64, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x64,
	0x65, 0x64, 0x5f, 0x74, 0x64, 0x64, 0x5f, 0x64, 0x6c, 0x5f, 0x75, 0x6c, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x27, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x74,
	0x65, 0x6e, 0x64, 0x65, 0x64, 0x54, 0x64, 0x64, 0x44, 0x4c, 0x55, 0x4c, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x52, 0x48, 0x00, 0x52, 0x24, 0x69,
	0x64, 0x2d, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x54, 0x44, 0x44, 0x2d, 0x44, 0x4c,
	0x2d, 0x55, 0x4c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2d, 0x4e, 0x52, 0x12, 0x73, 0x0a, 0x21, 0x69, 0x64, 0x5f, 0x74, 0x64, 0x64, 0x75, 0x6c, 0x64,
	0x6c, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x6e, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25,
	0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x64, 0x64, 0x75, 0x6c, 0x64, 0x6c,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x4e, 0x72, 0x48, 0x00, 0x52, 0x1f, 0x69, 0x64, 0x2d, 0x54, 0x44, 0x44, 0x55,
	0x4c, 0x44, 0x4c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x4e, 0x52, 0x12, 0x41, 0x0a, 0x0f, 0x69, 0x64, 0x5f, 0x63,
	0x61, 0x72, 0x72, 0x69, 0x65, 0x72, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x72, 0x63, 0x61,
	0x72, 0x72, 0x69, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x00, 0x52, 0x0e, 0x69, 0x64, 0x2d,
	0x43, 0x61, 0x72, 0x72, 0x69, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x19, 0x0a, 0x17, 0x6e,
	0x72, 0x6d, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x74, 0x64, 0x64, 0x5f, 0x65,
	0x78, 0x74, 0x5f, 0x69, 0x65, 0x73, 0x22, 0xbc, 0x01, 0x0a, 0x13, 0x4e, 0x72, 0x6d, 0x6f, 0x64,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x54, 0x64, 0x64, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x12, 0x26,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x78, 0x6e, 0x61,
	0x70, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x49, 0x65, 0x49,
	0x44, 0x52, 0x03, 0x26, 0x69, 0x64, 0x12, 0x37, 0x0a, 0x0b, 0x63, 0x72, 0x69, 0x74, 0x69, 0x63,
	0x61, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x78, 0x6e,
	0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x69, 0x74,
	0x79, 0x52, 0x0c, 0x26, 0x63, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x12,
	0x44, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x25, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x72, 0x6d,
	0x6f, 0x64, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x54, 0x64, 0x64, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73,
	0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x26, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xf4, 0x01, 0x0a, 0x0d, 0x4e, 0x72, 0x6d, 0x6f, 0x64, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x54, 0x64, 0x64, 0x12, 0x44, 0x0a, 0x11, 0x6e, 0x72, 0x5f, 0x66, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x72, 0x66,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0f, 0x6e, 0x72,
	0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x5a, 0x0a,
	0x18, 0x6e, 0x72, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x73, 0x73, 0x6f, 0x6e, 0x5f,
	0x62, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x20, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x72, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74,
	0x68, 0x52, 0x16, 0x6e, 0x72, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x73, 0x73, 0x6f, 0x6e,
	0x42, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x12, 0x41, 0x0a, 0x0d, 0x69, 0x5f, 0x65,
	0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x72, 0x6d, 0x6f, 0x64,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x54, 0x64, 0x64, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x52, 0x0c,
	0x69, 0x45, 0x2d, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x29, 0x0a, 0x05,
	0x4e, 0x72, 0x70, 0x63, 0x69, 0x12, 0x20, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x1a, 0x05, 0x18, 0xef, 0x07, 0x28, 0x00,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x4d, 0x0a, 0x1d, 0x4e, 0x72, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64,
	0x74, 0x68, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xb6, 0x01, 0x0a, 0x17, 0x4e, 0x72, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64,
	0x74, 0x68, 0x12, 0x25, 0x0a, 0x06, 0x6e, 0x5f, 0x72, 0x73, 0x63, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x72, 0x73,
	0x63, 0x73, 0x52, 0x05, 0x6e, 0x52, 0x53, 0x43, 0x53, 0x12, 0x25, 0x0a, 0x06, 0x6e, 0x5f, 0x72,
	0x6e, 0x72, 0x62, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x78, 0x6e, 0x61, 0x70,
	0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x72, 0x6e, 0x72, 0x62, 0x52, 0x05, 0x6e, 0x52, 0x4e, 0x52, 0x42,
	0x12, 0x4d, 0x0a, 0x0e, 0x69, 0x5f, 0x65, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e,
	0x76, 0x31, 0x2e, 0x4e, 0x72, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x42, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73,
	0x52, 0x0d, 0x69, 0x45, 0x2d, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x22,
	0x2f, 0x0a, 0x0c, 0x4e, 0x67, 0x52, 0x41, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x65, 0x49, 0x64, 0x12,
	0x1f, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x09,
	0xfa, 0x42, 0x06, 0x7a, 0x04, 0x10, 0x08, 0x18, 0x08, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x22, 0x4d, 0x0a, 0x1d, 0x4e, 0x72, 0x76, 0x32, 0x58, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x45, 0x78, 0x74, 0x49, 0x65,
	0x73, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22,
	0x82, 0x02, 0x0a, 0x17, 0x4e, 0x72, 0x76, 0x32, 0x58, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x12, 0x36, 0x0a, 0x0a, 0x76,
	0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x5f, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x12, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x65, 0x68, 0x69, 0x63, 0x6c,
	0x65, 0x55, 0x65, 0x48, 0x00, 0x52, 0x09, 0x76, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x55, 0x45,
	0x88, 0x01, 0x01, 0x12, 0x3f, 0x0a, 0x0d, 0x70, 0x65, 0x64, 0x65, 0x73, 0x74, 0x72, 0x69, 0x61,
	0x6e, 0x5f, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x78, 0x6e, 0x61,
	0x70, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x65, 0x64, 0x65, 0x73, 0x74, 0x72, 0x69, 0x61, 0x6e, 0x55,
	0x65, 0x48, 0x01, 0x52, 0x0c, 0x70, 0x65, 0x64, 0x65, 0x73, 0x74, 0x72, 0x69, 0x61, 0x6e, 0x55,
	0x45, 0x88, 0x01, 0x01, 0x12, 0x4d, 0x0a, 0x0e, 0x69, 0x5f, 0x65, 0x5f, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x78,
	0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x72, 0x76, 0x32, 0x58, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x45, 0x78,
	0x74, 0x49, 0x65, 0x73, 0x52, 0x0d, 0x69, 0x45, 0x2d, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x73, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x76, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x5f,
	0x75, 0x65, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x70, 0x65, 0x64, 0x65, 0x73, 0x74, 0x72, 0x69, 0x61,
	0x6e, 0x5f, 0x75, 0x65, 0x22, 0x59, 0x0a, 0x29, 0x4e, 0x72, 0x75, 0x65, 0x73, 0x69, 0x64, 0x65,
	0x6c, 0x69, 0x6e, 0x6b, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x78,
	0x69, 0x6d, 0x75, 0x6d, 0x42, 0x69, 0x74, 0x52, 0x61, 0x74, 0x65, 0x45, 0x78, 0x74, 0x49, 0x65,
	0x73, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22,
	0xe5, 0x01, 0x0a, 0x23, 0x4e, 0x72, 0x75, 0x65, 0x73, 0x69, 0x64, 0x65, 0x6c, 0x69, 0x6e, 0x6b,
	0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d,
	0x42, 0x69, 0x74, 0x52, 0x61, 0x74, 0x65, 0x12, 0x63, 0x0a, 0x26, 0x75, 0x5f, 0x65, 0x73, 0x69,
	0x64, 0x65, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65,
	0x5f, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x5f, 0x62, 0x69, 0x74, 0x5f, 0x72, 0x61, 0x74,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76,
	0x31, 0x2e, 0x42, 0x69, 0x74, 0x52, 0x61, 0x74, 0x65, 0x52, 0x21, 0x75, 0x45, 0x53, 0x69, 0x64,
	0x65, 0x6c, 0x69, 0x6e, 0x6b, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x4d, 0x61,
	0x78, 0x69, 0x6d, 0x75, 0x6d, 0x42, 0x69, 0x74, 0x52, 0x61, 0x74, 0x65, 0x12, 0x59, 0x0a, 0x0e,
	0x69, 0x5f, 0x65, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x4e,
	0x72, 0x75, 0x65, 0x73, 0x69, 0x64, 0x65, 0x6c, 0x69, 0x6e, 0x6b, 0x41, 0x67, 0x67, 0x72, 0x65,
	0x67, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x42, 0x69, 0x74, 0x52, 0x61,
	0x74, 0x65, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x52, 0x0d, 0x69, 0x45, 0x2d, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x35, 0x0a, 0x0f, 0x4f, 0x66, 0x66, 0x65, 0x72,
	0x65, 0x64, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x12, 0x22, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0c, 0xfa, 0x42, 0x09, 0x1a, 0x07,
	0x18, 0x80, 0x80, 0x80, 0x08, 0x28, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x35,
	0x0a, 0x11, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x42, 0x75, 0x64,
	0x67, 0x65, 0x74, 0x12, 0x20, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x1a, 0x05, 0x18, 0xff, 0x07, 0x28, 0x00, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x45, 0x0a, 0x15, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x52, 0x61, 0x74, 0x65, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x12, 0x2c,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xc8, 0x01, 0x0a,
	0x0f, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x61, 0x74, 0x65,
	0x12, 0x33, 0x0a, 0x0b, 0x70, 0x5f, 0x65, 0x72, 0x5f, 0x73, 0x63, 0x61, 0x6c, 0x61, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e,
	0x50, 0x65, 0x72, 0x53, 0x63, 0x61, 0x6c, 0x61, 0x72, 0x52, 0x0a, 0x70, 0x45, 0x52, 0x2d, 0x53,
	0x63, 0x61, 0x6c, 0x61, 0x72, 0x12, 0x39, 0x0a, 0x0d, 0x70, 0x5f, 0x65, 0x72, 0x5f, 0x65, 0x78,
	0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x78,
	0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x65, 0x72, 0x45, 0x78, 0x70, 0x6f, 0x6e, 0x65,
	0x6e, 0x74, 0x52, 0x0c, 0x70, 0x45, 0x52, 0x2d, 0x45, 0x78, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74,
	0x12, 0x45, 0x0a, 0x0e, 0x69, 0x5f, 0x65, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e,
	0x76, 0x31, 0x2e, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x61,
	0x74, 0x65, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x52, 0x0d, 0x69, 0x45, 0x2d, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x2c, 0x0a, 0x09, 0x50, 0x65, 0x72, 0x53, 0x63,
	0x61, 0x6c, 0x61, 0x72, 0x12, 0x1f, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x42, 0x09, 0xfa, 0x42, 0x06, 0x1a, 0x04, 0x18, 0x09, 0x28, 0x00, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x2e, 0x0a, 0x0b, 0x50, 0x65, 0x72, 0x45, 0x78, 0x70, 0x6f,
	0x6e, 0x65, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x42, 0x09, 0xfa, 0x42, 0x06, 0x1a, 0x04, 0x18, 0x09, 0x28, 0x00, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x32, 0x0a, 0x0e, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x4c,
	0x6f, 0x73, 0x73, 0x52, 0x61, 0x74, 0x65, 0x12, 0x20, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x1a, 0x05, 0x18, 0xe8, 0x07,
	0x28, 0x00, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x4b, 0x0a, 0x1b, 0x50, 0x61, 0x67,
	0x69, 0x6e, 0x67, 0x65, 0x44, 0x72, 0x78, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x94, 0x02, 0x0a, 0x15, 0x50, 0x61, 0x67, 0x69, 0x6e,
	0x67, 0x65, 0x44, 0x72, 0x78, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x47, 0x0a, 0x12, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x5f, 0x65, 0x5f, 0x64, 0x72, 0x78,
	0x5f, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x78,
	0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x65, 0x44, 0x72,
	0x78, 0x43, 0x79, 0x63, 0x6c, 0x65, 0x52, 0x11, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x2d, 0x65,
	0x44, 0x52, 0x58, 0x2d, 0x43, 0x79, 0x63, 0x6c, 0x65, 0x12, 0x4e, 0x0a, 0x12, 0x70, 0x61, 0x67,
	0x69, 0x6e, 0x67, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e,
	0x50, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x54, 0x69, 0x6d, 0x65, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77,
	0x48, 0x00, 0x52, 0x12, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x2d, 0x54, 0x69, 0x6d, 0x65, 0x2d,
	0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x88, 0x01, 0x01, 0x12, 0x4b, 0x0a, 0x0e, 0x69, 0x5f, 0x65,
	0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x24, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x67, 0x69,
	0x6e, 0x67, 0x65, 0x44, 0x72, 0x78, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x52, 0x0d, 0x69, 0x45, 0x2d, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x70, 0x61, 0x67, 0x69, 0x6e,
	0x67, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x22, 0x46, 0x0a,
	0x16, 0x50, 0x63, 0x35, 0x51, 0x6f, 0x53, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72,
	0x73, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x96, 0x02, 0x0a, 0x10, 0x50, 0x63, 0x35, 0x51, 0x6f, 0x53,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x42, 0x0a, 0x11, 0x70, 0x63,
	0x35, 0x5f, 0x71, 0x6f, 0x5f, 0x73, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e,
	0x50, 0x63, 0x35, 0x51, 0x6f, 0x53, 0x66, 0x6c, 0x6f, 0x77, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x0e,
	0x70, 0x63, 0x35, 0x51, 0x6f, 0x53, 0x46, 0x6c, 0x6f, 0x77, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x55,
	0x0a, 0x1c, 0x70, 0x63, 0x35, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x61, 0x67, 0x67, 0x72, 0x65,
	0x67, 0x61, 0x74, 0x65, 0x5f, 0x62, 0x69, 0x74, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x42,
	0x69, 0x74, 0x52, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x18, 0x70, 0x63, 0x35, 0x4c, 0x69, 0x6e,
	0x6b, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x42, 0x69, 0x74, 0x52, 0x61, 0x74,
	0x65, 0x73, 0x88, 0x01, 0x01, 0x12, 0x46, 0x0a, 0x0e, 0x69, 0x5f, 0x65, 0x5f, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x63, 0x35, 0x51, 0x6f, 0x53, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x52, 0x0d,
	0x69, 0x45, 0x2d, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x1f, 0x0a,
	0x1d, 0x5f, 0x70, 0x63, 0x35, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x61, 0x67, 0x67, 0x72, 0x65,
	0x67, 0x61, 0x74, 0x65, 0x5f, 0x62, 0x69, 0x74, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x73, 0x22, 0x4c,
	0x0a, 0x0e, 0x50, 0x63, 0x35, 0x51, 0x6f, 0x53, 0x66, 0x6c, 0x6f, 0x77, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x3a, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x63, 0x35, 0x51, 0x6f, 0x53,
	0x66, 0x6c, 0x6f, 0x77, 0x49, 0x74, 0x65, 0x6d, 0x42, 0x0b, 0xfa, 0x42, 0x08, 0x92, 0x01, 0x05,
	0x08, 0x01, 0x10, 0x90, 0x10, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x44, 0x0a, 0x14,
	0x50, 0x63, 0x35, 0x51, 0x6f, 0x53, 0x66, 0x6c, 0x6f, 0x77, 0x49, 0x74, 0x65, 0x6d, 0x45, 0x78,
	0x74, 0x49, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x22, 0x92, 0x02, 0x0a, 0x0e, 0x50, 0x63, 0x35, 0x51, 0x6f, 0x53, 0x66, 0x6c, 0x6f,
	0x77, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x22, 0x0a, 0x04, 0x70, 0x5f, 0x71, 0x69, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69,
	0x76, 0x65, 0x51, 0x69, 0x52, 0x03, 0x70, 0x51, 0x49, 0x12, 0x4a, 0x0a, 0x12, 0x70, 0x63, 0x35,
	0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x62, 0x69, 0x74, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e,
	0x50, 0x63, 0x35, 0x46, 0x6c, 0x6f, 0x77, 0x42, 0x69, 0x74, 0x52, 0x61, 0x74, 0x65, 0x73, 0x48,
	0x00, 0x52, 0x0f, 0x70, 0x63, 0x35, 0x46, 0x6c, 0x6f, 0x77, 0x42, 0x69, 0x74, 0x52, 0x61, 0x74,
	0x65, 0x73, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x52,
	0x61, 0x6e, 0x67, 0x65, 0x48, 0x01, 0x52, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x44, 0x0a, 0x0e, 0x69, 0x5f, 0x65, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e,
	0x76, 0x31, 0x2e, 0x50, 0x63, 0x35, 0x51, 0x6f, 0x53, 0x66, 0x6c, 0x6f, 0x77, 0x49, 0x74, 0x65,
	0x6d, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x52, 0x0d, 0x69, 0x45, 0x2d, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x70, 0x63, 0x35, 0x5f, 0x66,
	0x6c, 0x6f, 0x77, 0x5f, 0x62, 0x69, 0x74, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x73, 0x42, 0x08, 0x0a,
	0x06, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x22, 0x45, 0x0a, 0x15, 0x50, 0x63, 0x35, 0x46, 0x6c,
	0x6f, 0x77, 0x42, 0x69, 0x74, 0x52, 0x61, 0x74, 0x65, 0x73, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73,
	0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xe8,
	0x01, 0x0a, 0x0f, 0x50, 0x63, 0x35, 0x46, 0x6c, 0x6f, 0x77, 0x42, 0x69, 0x74, 0x52, 0x61, 0x74,
	0x65, 0x73, 0x12, 0x49, 0x0a, 0x18, 0x67, 0x75, 0x61, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x65, 0x64,
	0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x62, 0x69, 0x74, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x42,
	0x69, 0x74, 0x52, 0x61, 0x74, 0x65, 0x52, 0x15, 0x67, 0x75, 0x61, 0x72, 0x61, 0x6e, 0x74, 0x65,
	0x65, 0x64, 0x46, 0x6c, 0x6f, 0x77, 0x42, 0x69, 0x74, 0x52, 0x61, 0x74, 0x65, 0x12, 0x43, 0x0a,
	0x15, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x62, 0x69,
	0x74, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x78,
	0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x69, 0x74, 0x52, 0x61, 0x74, 0x65, 0x52, 0x12,
	0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x46, 0x6c, 0x6f, 0x77, 0x42, 0x69, 0x74, 0x52, 0x61,
	0x74, 0x65, 0x12, 0x45, 0x0a, 0x0e, 0x69, 0x5f, 0x65, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x78, 0x6e, 0x61,
	0x70, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x63, 0x35, 0x46, 0x6c, 0x6f, 0x77, 0x42, 0x69, 0x74, 0x52,
	0x61, 0x74, 0x65, 0x73, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x52, 0x0d, 0x69, 0x45, 0x2d, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x4a, 0x0a, 0x1a, 0x50, 0x64, 0x63,
	0x70, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xc0, 0x02, 0x0a, 0x14, 0x50, 0x64, 0x63, 0x70, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x5d,
	0x0a, 0x12, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x73, 0x5f, 0x6e, 0x67, 0x5f, 0x72, 0x61, 0x6e, 0x5f,
	0x6e, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x78, 0x6e, 0x61,
	0x70, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x72, 0x6f, 0x6d, 0x53, 0x6e, 0x67, 0x72, 0x61, 0x6e, 0x6e,
	0x6f, 0x64, 0x65, 0x50, 0x64, 0x63, 0x70, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x6e, 0x64,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x12, 0x66, 0x72, 0x6f, 0x6d, 0x2d,
	0x53, 0x2d, 0x4e, 0x47, 0x2d, 0x52, 0x41, 0x4e, 0x2d, 0x6e, 0x6f, 0x64, 0x65, 0x12, 0x5d, 0x0a,
	0x12, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x6d, 0x5f, 0x6e, 0x67, 0x5f, 0x72, 0x61, 0x6e, 0x5f, 0x6e,
	0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x78, 0x6e, 0x61, 0x70,
	0x2e, 0x76, 0x31, 0x2e, 0x46, 0x72, 0x6f, 0x6d, 0x4d, 0x6e, 0x67, 0x72, 0x61, 0x6e, 0x6e, 0x6f,
	0x64, 0x65, 0x50, 0x64, 0x63, 0x70, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x6e, 0x64, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x12, 0x66, 0x72, 0x6f, 0x6d, 0x2d, 0x4d,
	0x2d, 0x4e, 0x47, 0x2d, 0x52, 0x41, 0x4e, 0x2d, 0x6e, 0x6f, 0x64, 0x65, 0x12, 0x51, 0x0a, 0x10,
	0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31,
	0x2e, 0x50, 0x64, 0x63, 0x70, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x6e, 0x64, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x48, 0x00, 0x52, 0x10, 0x63,
	0x68, 0x6f, 0x69, 0x63, 0x65, 0x2d, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x42,
	0x17, 0x0a, 0x15, 0x70, 0x64, 0x63, 0x70, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x69, 0x6e,
	0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x42, 0x0a, 0x12, 0x50, 0x64, 0x63, 0x70,
	0x73, 0x6e, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x12, 0x2c,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xec, 0x01, 0x0a,
	0x0c, 0x50, 0x64, 0x63, 0x70, 0x73, 0x6e, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x4c, 0x0a,
	0x0f, 0x75, 0x6c, 0x5f, 0x70, 0x64, 0x63, 0x70, 0x73, 0x6e, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31,
	0x2e, 0x55, 0x6c, 0x50, 0x64, 0x63, 0x70, 0x73, 0x6e, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x50,
	0x64, 0x63, 0x70, 0x73, 0x6e, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x52, 0x0e, 0x75, 0x6c, 0x50,
	0x44, 0x43, 0x50, 0x53, 0x4e, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x4c, 0x0a, 0x0f, 0x64,
	0x6c, 0x5f, 0x70, 0x64, 0x63, 0x70, 0x73, 0x6e, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x44,
	0x6c, 0x50, 0x64, 0x63, 0x70, 0x73, 0x6e, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x50, 0x64, 0x63,
	0x70, 0x73, 0x6e, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x52, 0x0e, 0x64, 0x6c, 0x50, 0x44, 0x43,
	0x50, 0x53, 0x4e, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x40, 0x0a, 0x0d, 0x69, 0x5f, 0x65,
	0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x64, 0x63, 0x70, 0x73,
	0x6e, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x52, 0x0c, 0x69,
	0x45, 0x2d, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x57, 0x0a, 0x27, 0x50,
	0x64, 0x75, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61,
	0x74, 0x65, 0x4d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x42, 0x69, 0x74, 0x52, 0x61, 0x74, 0x65,
	0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x22, 0x88, 0x02, 0x0a, 0x21, 0x50, 0x64, 0x75, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x78, 0x69,
	0x6d, 0x75, 0x6d, 0x42, 0x69, 0x74, 0x52, 0x61, 0x74, 0x65, 0x12, 0x46, 0x0a, 0x15, 0x64, 0x6f,
	0x77, 0x6e, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x61,
	0x6d, 0x62, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x78, 0x6e, 0x61, 0x70,
	0x2e, 0x76, 0x31, 0x2e, 0x42, 0x69, 0x74, 0x52, 0x61, 0x74, 0x65, 0x52, 0x15, 0x64, 0x6f, 0x77,
	0x6e, 0x6c, 0x69, 0x6e, 0x6b, 0x2d, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2d, 0x41, 0x4d,
	0x42, 0x52, 0x12, 0x42, 0x0a, 0x13, 0x75, 0x70, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x6d, 0x62, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x10, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x69, 0x74, 0x52, 0x61, 0x74,
	0x65, 0x52, 0x13, 0x75, 0x70, 0x6c, 0x69, 0x6e, 0x6b, 0x2d, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x2d, 0x41, 0x4d, 0x42, 0x52, 0x12, 0x57, 0x0a, 0x0e, 0x69, 0x5f, 0x65, 0x5f, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30,
	0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x64, 0x75, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x78, 0x69,
	0x6d, 0x75, 0x6d, 0x42, 0x69, 0x74, 0x52, 0x61, 0x74, 0x65, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73,
	0x52, 0x0d, 0x69, 0x45, 0x2d, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x22,
	0x4a, 0x0a, 0x0e, 0x50, 0x64, 0x75, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x38, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x64, 0x75, 0x73, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x42, 0x0b, 0xfa, 0x42, 0x08, 0x92, 0x01, 0x05, 0x08,
	0x01, 0x10, 0x80, 0x02, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x62, 0x0a, 0x17, 0x50,
	0x64, 0x75, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x77, 0x69, 0x74,
	0x68, 0x43, 0x61, 0x75, 0x73, 0x65, 0x12, 0x47, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e,
	0x50, 0x64, 0x75, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x77, 0x69,
	0x74, 0x68, 0x43, 0x61, 0x75, 0x73, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x42, 0x0b, 0xfa, 0x42, 0x08,
	0x92, 0x01, 0x05, 0x08, 0x01, 0x10, 0x80, 0x02, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22,
	0x51, 0x0a, 0x21, 0x50, 0x64, 0x75, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73,
	0x74, 0x77, 0x69, 0x74, 0x68, 0x43, 0x61, 0x75, 0x73, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x45, 0x78,
	0x74, 0x49, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x22, 0xe0, 0x01, 0x0a, 0x1b, 0x50, 0x64, 0x75, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x4c, 0x69, 0x73, 0x74, 0x77, 0x69, 0x74, 0x68, 0x43, 0x61, 0x75, 0x73, 0x65, 0x49, 0x74,
	0x65, 0x6d, 0x12, 0x3b, 0x0a, 0x0e, 0x70, 0x64, 0x75, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x78, 0x6e, 0x61,
	0x70, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x64, 0x75, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49,
	0x44, 0x52, 0x0c, 0x70, 0x64, 0x75, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12,
	0x29, 0x0a, 0x05, 0x63, 0x61, 0x75, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e,
	0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x61, 0x75, 0x73, 0x65, 0x48, 0x00,
	0x52, 0x05, 0x63, 0x61, 0x75, 0x73, 0x65, 0x88, 0x01, 0x01, 0x12, 0x4f, 0x0a, 0x0d, 0x69, 0x5f,
	0x65, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x2a, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x64, 0x75, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x77, 0x69, 0x74, 0x68, 0x43, 0x61,
	0x75, 0x73, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x52, 0x0c, 0x69,
	0x45, 0x2d, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x08, 0x0a, 0x06, 0x5f,
	0x63, 0x61, 0x75, 0x73, 0x65, 0x22, 0x88, 0x01, 0x0a, 0x2a, 0x50, 0x64, 0x75, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x77, 0x69, 0x74, 0x68, 0x44, 0x61, 0x74, 0x61,
	0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x46, 0x72, 0x6f, 0x6d, 0x54, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x12, 0x5a, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x64,
	0x75, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x77, 0x69, 0x74, 0x68,
	0x44, 0x61, 0x74, 0x61, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x46, 0x72,
	0x6f, 0x6d, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x42, 0x0b, 0xfa, 0x42,
	0x08, 0x92, 0x01, 0x05, 0x08, 0x01, 0x10, 0x80, 0x02, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x22, 0x64, 0x0a, 0x34, 0x50, 0x64, 0x75, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4c, 0x69,
	0x73, 0x74, 0x77, 0x69, 0x74, 0x68, 0x44, 0x61, 0x74, 0x61, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72,
	0x64, 0x69, 0x6e, 0x67, 0x46, 0x72, 0x6f, 0x6d, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x74,
	0x65, 0x6d, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xbe, 0x02, 0x0a, 0x2e, 0x50, 0x64, 0x75, 0x73, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x77, 0x69, 0x74, 0x68, 0x44, 0x61, 0x74,
	0x61, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x46, 0x72, 0x6f, 0x6d, 0x54,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x3b, 0x0a, 0x0e, 0x70, 0x64, 0x75,
	0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x64, 0x75, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x52, 0x0c, 0x70, 0x64, 0x75, 0x53, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x6b, 0x0a, 0x19, 0x64, 0x61, 0x74, 0x61, 0x66, 0x6f,
	0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x74, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x78, 0x6e, 0x61, 0x70,
	0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69,
	0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x46, 0x72, 0x6f, 0x6d, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x4e, 0x67, 0x72, 0x61, 0x6e, 0x6e, 0x6f, 0x64, 0x65, 0x52, 0x18, 0x64, 0x61, 0x74, 0x61, 0x66,
	0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x69, 0x6e, 0x66, 0x6f, 0x54, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x12, 0x62, 0x0a, 0x0d, 0x69, 0x5f, 0x65, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x78, 0x6e, 0x61,
	0x70, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x64, 0x75, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4c,
	0x69, 0x73, 0x74, 0x77, 0x69, 0x74, 0x68, 0x44, 0x61, 0x74, 0x61, 0x46, 0x6f, 0x72, 0x77, 0x61,
	0x72, 0x64, 0x69, 0x6e, 0x67, 0x46, 0x72, 0x6f, 0x6d, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49,
	0x74, 0x65, 0x6d, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x52, 0x0c, 0x69, 0x45, 0x2d, 0x45, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x82, 0x01, 0x0a, 0x27, 0x50, 0x64, 0x75, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x77, 0x69, 0x74, 0x68, 0x44, 0x61,
	0x74, 0x61, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x57, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x34, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x64, 0x75,
	0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x77, 0x69, 0x74, 0x68, 0x44,
	0x61, 0x74, 0x61, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x42, 0x0b, 0xfa, 0x42, 0x08, 0x92, 0x01, 0x05,
	0x08, 0x01, 0x10, 0x80, 0x02, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x61, 0x0a, 0x31,
	0x50, 0x64, 0x75, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x77, 0x69,
	0x74, 0x68, 0x44, 0x61, 0x74, 0x61, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x45, 0x78, 0x74, 0x49, 0x65,
	0x73, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22,
	0xe6, 0x03, 0x0a, 0x2b, 0x50, 0x64, 0x75, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4c, 0x69,
	0x73, 0x74, 0x77, 0x69, 0x74, 0x68, 0x44, 0x61, 0x74, 0x61, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72,
	0x64, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x12,
	0x3b, 0x0a, 0x0e, 0x70, 0x64, 0x75, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76,
	0x31, 0x2e, 0x50, 0x64, 0x75, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x52, 0x0c,
	0x70, 0x64, 0x75, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x7d, 0x0a, 0x1e,
	0x64, 0x61, 0x74, 0x61, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x69,
	0x6e, 0x66, 0x6f, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x44,
	0x61, 0x74, 0x61, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x61, 0x6e, 0x64,
	0x4f, 0x66, 0x66, 0x6c, 0x6f, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x66, 0x72,
	0x6f, 0x6d, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x48, 0x00, 0x52, 0x1c, 0x64, 0x61, 0x74, 0x61,
	0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x66, 0x72,
	0x6f, 0x6d, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x5b, 0x0a, 0x17, 0x64,
	0x5f, 0x72, 0x62, 0x74, 0x6f, 0x5f, 0x62, 0x65, 0x5f, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65,
	0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x78,
	0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x72, 0x62, 0x74, 0x6f, 0x51, 0x6f, 0x53, 0x66,
	0x6c, 0x6f, 0x77, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x01,
	0x52, 0x13, 0x64, 0x52, 0x42, 0x74, 0x6f, 0x42, 0x65, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65,
	0x64, 0x4c, 0x69, 0x73, 0x74, 0x88, 0x01, 0x01, 0x12, 0x5f, 0x0a, 0x0d, 0x69, 0x5f, 0x65, 0x5f,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x3a, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x64, 0x75, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x77, 0x69, 0x74, 0x68, 0x44, 0x61, 0x74, 0x61,
	0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x49, 0x74, 0x65, 0x6d, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x52, 0x0c, 0x69, 0x45, 0x2d,
	0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x21, 0x0a, 0x1f, 0x5f, 0x64, 0x61,
	0x74, 0x61, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6e, 0x66,
	0x6f, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x42, 0x1a, 0x0a, 0x18,
	0x5f, 0x64, 0x5f, 0x72, 0x62, 0x74, 0x6f, 0x5f, 0x62, 0x65, 0x5f, 0x72, 0x65, 0x6c, 0x65, 0x61,
	0x73, 0x65, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x22, 0x6e, 0x0a, 0x1f, 0x50, 0x64, 0x75, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x41,
	0x64, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x4b, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x78, 0x6e, 0x61,
	0x70, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x64, 0x75, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x41, 0x64, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64,
	0x49, 0x74, 0x65, 0x6d, 0x42, 0x0b, 0xfa, 0x42, 0x08, 0x92, 0x01, 0x05, 0x08, 0x01, 0x10, 0x80,
	0x02, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x55, 0x0a, 0x25, 0x50, 0x64, 0x75, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x41,
	0x64, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x45, 0x78, 0x74, 0x49, 0x65,
	0x73, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22,
	0xaa, 0x02, 0x0a, 0x1f, 0x50, 0x64, 0x75, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x41, 0x64, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x49,
	0x74, 0x65, 0x6d, 0x12, 0x3b, 0x0a, 0x0e, 0x70, 0x64, 0x75, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x78, 0x6e,
	0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x64, 0x75, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x49, 0x44, 0x52, 0x0c, 0x70, 0x64, 0x75, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x12, 0x73, 0x0a, 0x22, 0x70, 0x64, 0x75, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x61, 0x64, 0x6d, 0x69, 0x74, 0x74, 0x65,
	0x64, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x78,
	0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x64, 0x75, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x41, 0x64, 0x6d, 0x69, 0x74, 0x74, 0x65,
	0x64, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x1e, 0x70, 0x64, 0x75, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x41, 0x64, 0x6d, 0x69, 0x74, 0x74, 0x65,
	0x64, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x55, 0x0a, 0x0e, 0x69, 0x5f, 0x65, 0x5f, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e,
	0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x64, 0x75, 0x73, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x41, 0x64, 0x6d, 0x69, 0x74,
	0x74, 0x65, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x52, 0x0d, 0x69,
	0x45, 0x2d, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x54, 0x0a, 0x24,
	0x50, 0x64, 0x75, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x41, 0x64, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x45, 0x78,
	0x74, 0x49, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x22, 0xb4, 0x05, 0x0a, 0x1e, 0x50, 0x64, 0x75, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x41, 0x64, 0x6d, 0x69, 0x74, 0x74, 0x65,
	0x64, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x97, 0x01, 0x0a, 0x22, 0x64, 0x5f, 0x6c, 0x5f, 0x6e, 0x67,
	0x5f, 0x75, 0x5f, 0x74, 0x6e, 0x6c, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x75, 0x6e, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x43, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x6c, 0x6e,
	0x67, 0x75, 0x74, 0x6e, 0x6c, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x55, 0x6e, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x50, 0x64, 0x75, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x41, 0x64, 0x6d, 0x69, 0x74,
	0x74, 0x65, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x21, 0x64, 0x4c, 0x2d, 0x4e, 0x47,
	0x2d, 0x55, 0x2d, 0x54, 0x4e, 0x4c, 0x2d, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2d, 0x55, 0x6e, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12,
	0x55, 0x0a, 0x17, 0x71, 0x6f, 0x73, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x5f, 0x61, 0x64, 0x6d,
	0x69, 0x74, 0x74, 0x65, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x6f, 0x53, 0x66, 0x6c,
	0x6f, 0x77, 0x73, 0x41, 0x64, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x15, 0x71, 0x6f, 0x73, 0x46, 0x6c, 0x6f, 0x77, 0x73, 0x41, 0x64, 0x6d, 0x69, 0x74, 0x74, 0x65,
	0x64, 0x2d, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x62, 0x0a, 0x1b, 0x71, 0x6f, 0x73, 0x5f, 0x66, 0x6c,
	0x6f, 0x77, 0x73, 0x5f, 0x6e, 0x6f, 0x74, 0x5f, 0x61, 0x64, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x78, 0x6e,
	0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x6f, 0x53, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x4c, 0x69,
	0x73, 0x74, 0x77, 0x69, 0x74, 0x68, 0x43, 0x61, 0x75, 0x73, 0x65, 0x48, 0x01, 0x52, 0x18, 0x71,
	0x6f, 0x73, 0x46, 0x6c, 0x6f, 0x77, 0x73, 0x4e, 0x6f, 0x74, 0x41, 0x64, 0x6d, 0x69, 0x74, 0x74,
	0x65, 0x64, 0x2d, 0x4c, 0x69, 0x73, 0x74, 0x88, 0x01, 0x01, 0x12, 0x7b, 0x0a, 0x20, 0x64, 0x61,
	0x74, 0x61, 0x5f, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6e,
	0x66, 0x6f, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x44,
	0x61, 0x74, 0x61, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66,
	0x6f, 0x46, 0x72, 0x6f, 0x6d, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x4e, 0x67, 0x72, 0x61, 0x6e,
	0x6e, 0x6f, 0x64, 0x65, 0x48, 0x02, 0x52, 0x1c, 0x64, 0x61, 0x74, 0x61, 0x46, 0x6f, 0x72, 0x77,
	0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x46, 0x72, 0x6f, 0x6d, 0x54, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x88, 0x01, 0x01, 0x12, 0x54, 0x0a, 0x0e, 0x69, 0x5f, 0x65, 0x5f, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2d, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x64, 0x75, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x41, 0x64, 0x6d, 0x69,
	0x74, 0x74, 0x65, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x52, 0x0d,
	0x69, 0x45, 0x2d, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x25, 0x0a,
	0x23, 0x5f, 0x64, 0x5f, 0x6c, 0x5f, 0x6e, 0x67, 0x5f, 0x75, 0x5f, 0x74, 0x6e, 0x6c, 0x5f, 0x69,
	0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x75, 0x6e, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x64, 0x42, 0x1e, 0x0a, 0x1c, 0x5f, 0x71, 0x6f, 0x73, 0x5f, 0x66, 0x6c, 0x6f,
	0x77, 0x73, 0x5f, 0x6e, 0x6f, 0x74, 0x5f, 0x61, 0x64, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x42, 0x23, 0x0a, 0x21, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x66, 0x6f,
	0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x66, 0x72,
	0x6f, 0x6d, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x22, 0x74, 0x0a, 0x22, 0x50, 0x64, 0x75,
	0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73,
	0x4e, 0x6f, 0x74, 0x41, 0x64, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x4e, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b,
	0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x64, 0x75, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x4e, 0x6f, 0x74, 0x41,
	0x64, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x42, 0x0b, 0xfa, 0x42, 0x08,
	0x92, 0x01, 0x05, 0x08, 0x01, 0x10, 0x80, 0x02, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22,
	0x5c, 0x0a, 0x2c, 0x50, 0x64, 0x75, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x4e, 0x6f, 0x74, 0x41, 0x64, 0x6d, 0x69, 0x74, 0x74, 0x65,
	0x64, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x74, 0x65, 0x6d, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x12,
	0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xf2, 0x01,
	0x0a, 0x22, 0x50, 0x64, 0x75, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x73, 0x4e, 0x6f, 0x74, 0x41, 0x64, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64,
	0x49, 0x74, 0x65, 0x6d, 0x12, 0x3b, 0x0a, 0x0e, 0x70, 0x64, 0x75, 0x5f, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x78,
	0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x64, 0x75, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x49, 0x44, 0x52, 0x0c, 0x70, 0x64, 0x75, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x12, 0x29, 0x0a, 0x05, 0x63, 0x61, 0x75, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0e, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x61, 0x75, 0x73, 0x65,
	0x48, 0x00, 0x52, 0x05, 0x63, 0x61, 0x75, 0x73, 0x65, 0x88, 0x01, 0x01, 0x12, 0x5a, 0x0a, 0x0d,
	0x69, 0x5f, 0x65, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x64,
	0x75, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x73, 0x4e, 0x6f, 0x74, 0x41, 0x64, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x49, 0x74, 0x65, 0x6d,
	0x49, 0x74, 0x65, 0x6d, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x52, 0x0c, 0x69, 0x45, 0x2d, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x63, 0x61, 0x75,
	0x73, 0x65, 0x22, 0x70, 0x0a, 0x20, 0x50, 0x64, 0x75, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x54, 0x6f, 0x42, 0x65, 0x53, 0x65, 0x74,
	0x75, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x4c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e,
	0x50, 0x64, 0x75, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x73, 0x54, 0x6f, 0x42, 0x65, 0x53, 0x65, 0x74, 0x75, 0x70, 0x49, 0x74, 0x65, 0x6d,
	0x42, 0x0b, 0xfa, 0x42, 0x08, 0x92, 0x01, 0x05, 0x08, 0x01, 0x10, 0x80, 0x02, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x22, 0xd3, 0x06, 0x0a, 0x2f, 0x50, 0x64, 0x75, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x54, 0x6f, 0x42, 0x65,
	0x53, 0x65, 0x74, 0x75, 0x70, 0x49, 0x74, 0x65, 0x6d, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x79, 0x0a, 0x24, 0x69, 0x64, 0x5f, 0x61,
	0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x75, 0x6c, 0x5f, 0x6e, 0x67, 0x5f,
	0x75, 0x5f, 0x74, 0x6e, 0x6c, 0x61, 0x74, 0x5f, 0x75, 0x70, 0x66, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31,
	0x2e, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x55, 0x4c, 0x4e, 0x47, 0x55,
	0x54, 0x4e, 0x6c, 0x61, 0x74, 0x55, 0x70, 0x66, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x00, 0x52, 0x23,
	0x69, 0x64, 0x2d, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x2d, 0x55, 0x4c,
	0x2d, 0x4e, 0x47, 0x2d, 0x55, 0x2d, 0x54, 0x4e, 0x4c, 0x61, 0x74, 0x55, 0x50, 0x46, 0x2d, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x7d, 0x0a, 0x25, 0x69, 0x64, 0x5f, 0x70, 0x64, 0x75, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x28, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x64, 0x75,
	0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x4e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x48, 0x00, 0x52, 0x22,
	0x69, 0x64, 0x2d, 0x50, 0x44, 0x55, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x12, 0x6d, 0x0a, 0x1e, 0x69, 0x64, 0x5f, 0x72, 0x65, 0x64, 0x75, 0x6e, 0x64, 0x61,
	0x6e, 0x74, 0x5f, 0x75, 0x6c, 0x5f, 0x6e, 0x67, 0x5f, 0x75, 0x5f, 0x74, 0x6e, 0x6c, 0x61, 0x74,
	0x5f, 0x75, 0x70, 0x66, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x78, 0x6e, 0x61,
	0x70, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74,
	0x4c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x48, 0x00, 0x52, 0x1d, 0x69, 0x64, 0x2d, 0x52, 0x65, 0x64, 0x75, 0x6e, 0x64, 0x61, 0x6e, 0x74,
	0x2d, 0x55, 0x4c, 0x2d, 0x4e, 0x47, 0x2d, 0x55, 0x2d, 0x54, 0x4e, 0x4c, 0x61, 0x74, 0x55, 0x50,
	0x46, 0x12, 0x8d, 0x01, 0x0a, 0x2e, 0x69, 0x64, 0x5f, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x64, 0x75, 0x6e, 0x64, 0x61, 0x6e, 0x74, 0x5f, 0x75, 0x6c,
	0x5f, 0x6e, 0x67, 0x5f, 0x75, 0x5f, 0x74, 0x6e, 0x6c, 0x61, 0x74, 0x5f, 0x75, 0x70, 0x66, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x78, 0x6e, 0x61,
	0x70, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x55,
	0x4c, 0x4e, 0x47, 0x55, 0x54, 0x4e, 0x6c, 0x61, 0x74, 0x55, 0x70, 0x66, 0x4c, 0x69, 0x73, 0x74,
	0x48, 0x00, 0x52, 0x2d, 0x69, 0x64, 0x2d, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61,
	0x6c, 0x2d, 0x52, 0x65, 0x64, 0x75, 0x6e, 0x64, 0x61, 0x6e, 0x74, 0x2d, 0x55, 0x4c, 0x2d, 0x4e,
	0x47, 0x2d, 0x55, 0x2d, 0x54, 0x4e, 0x4c, 0x61, 0x74, 0x55, 0x50, 0x46, 0x2d, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x7b, 0x0a, 0x24, 0x69, 0x64, 0x5f, 0x72, 0x65, 0x64, 0x75, 0x6e, 0x64, 0x61, 0x6e,
	0x74, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x28, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x64, 0x75, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x48, 0x00, 0x52, 0x21, 0x69, 0x64, 0x2d,
	0x52, 0x65, 0x64, 0x75, 0x6e, 0x64, 0x61, 0x6e, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x4e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x79,
	0x0a, 0x23, 0x69, 0x64, 0x5f, 0x72, 0x65, 0x64, 0x75, 0x6e, 0x64, 0x61, 0x6e, 0x74, 0x5f, 0x70,
	0x64, 0x75, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x78, 0x6e,
	0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x64, 0x75, 0x6e, 0x64, 0x61, 0x6e, 0x74, 0x50,
	0x64, 0x75, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x21, 0x69, 0x64, 0x2d, 0x52, 0x65, 0x64, 0x75, 0x6e,
	0x64, 0x61, 0x6e, 0x74, 0x50, 0x44, 0x55, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x2f, 0x0a, 0x2d, 0x70, 0x64, 0x75,
	0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x73, 0x5f, 0x74, 0x6f, 0x5f, 0x62, 0x65, 0x5f, 0x73, 0x65, 0x74, 0x75, 0x70, 0x5f, 0x69, 0x74,
	0x65, 0x6d, 0x5f, 0x65, 0x78, 0x74, 0x5f, 0x69, 0x65, 0x73, 0x22, 0xe2, 0x01, 0x0a, 0x26, 0x50,
	0x64, 0x75, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x73, 0x54, 0x6f, 0x42, 0x65, 0x53, 0x65, 0x74, 0x75, 0x70, 0x49, 0x74, 0x65, 0x6d, 0x45,
	0x78, 0x74, 0x49, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x49, 0x65, 0x49, 0x44, 0x52, 0x03, 0x26, 0x69, 0x64, 0x12, 0x37, 0x0a,
	0x0b, 0x63, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x14, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x69,
	0x74, 0x69, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x0c, 0x26, 0x63, 0x72, 0x69, 0x74, 0x69,
	0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x57, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x78, 0x6e, 0x61, 0x70,
	0x2e, 0x76, 0x31, 0x2e, 0x50, 0x64, 0x75, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x54, 0x6f, 0x42, 0x65, 0x53, 0x65, 0x74, 0x75, 0x70,
	0x49, 0x74, 0x65, 0x6d, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x26, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22,
	0xf1, 0x08, 0x0a, 0x20, 0x50, 0x64, 0x75, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x54, 0x6f, 0x42, 0x65, 0x53, 0x65, 0x74, 0x75, 0x70,
	0x49, 0x74, 0x65, 0x6d, 0x12, 0x3b, 0x0a, 0x0e, 0x70, 0x64, 0x75, 0x5f, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x78,
	0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x64, 0x75, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x49, 0x44, 0x52, 0x0c, 0x70, 0x64, 0x75, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x12, 0x29, 0x0a, 0x07, 0x73, 0x5f, 0x6e, 0x73, 0x73, 0x61, 0x69, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x4e, 0x53,
	0x73, 0x61, 0x69, 0x52, 0x07, 0x73, 0x2d, 0x4e, 0x53, 0x53, 0x41, 0x49, 0x12, 0x59, 0x0a, 0x10,
	0x70, 0x64, 0x75, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x6d, 0x62, 0x72,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31,
	0x2e, 0x50, 0x64, 0x75, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x41, 0x67, 0x67, 0x72, 0x65,
	0x67, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x42, 0x69, 0x74, 0x52, 0x61,
	0x74, 0x65, 0x48, 0x00, 0x52, 0x0e, 0x70, 0x64, 0x75, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x41, 0x4d, 0x42, 0x52, 0x88, 0x01, 0x01, 0x12, 0x52, 0x0a, 0x12, 0x75, 0x5f, 0x6c, 0x5f, 0x6e,
	0x67, 0x5f, 0x75, 0x5f, 0x74, 0x6e, 0x6c, 0x61, 0x74, 0x5f, 0x75, 0x70, 0x66, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x10, 0x75, 0x4c, 0x2d, 0x4e, 0x47,
	0x2d, 0x55, 0x2d, 0x54, 0x4e, 0x4c, 0x61, 0x74, 0x55, 0x50, 0x46, 0x12, 0x71, 0x0a, 0x1e, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x64, 0x6c, 0x5f, 0x6e, 0x67, 0x5f, 0x75, 0x5f, 0x74, 0x6e,
	0x6c, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x01, 0x52, 0x1e, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x2d, 0x44, 0x4c, 0x2d, 0x4e, 0x47, 0x2d, 0x55, 0x2d, 0x54, 0x4e, 0x4c, 0x2d,
	0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x51,
	0x0a, 0x13, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x6e, 0x64, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x78, 0x6e,
	0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x49, 0x6e,
	0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x02, 0x52, 0x12, 0x73, 0x65, 0x63, 0x75,
	0x72, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01,
	0x01, 0x12, 0x41, 0x0a, 0x10, 0x70, 0x64, 0x75, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x78, 0x6e,
	0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x64, 0x75, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x0e, 0x70, 0x64, 0x75, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x68, 0x0a, 0x1c, 0x70, 0x64, 0x75, 0x5f, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x78, 0x6e, 0x61,
	0x70, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x64, 0x75, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x48, 0x03,
	0x52, 0x19, 0x70, 0x64, 0x75, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x5a,
	0x0a, 0x1a, 0x71, 0x6f, 0x73, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x5f, 0x74, 0x6f, 0x5f, 0x62,
	0x65, 0x5f, 0x73, 0x65, 0x74, 0x75, 0x70, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x6f, 0x53,
	0x66, 0x6c, 0x6f, 0x77, 0x73, 0x54, 0x6f, 0x42, 0x65, 0x53, 0x65, 0x74, 0x75, 0x70, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x16, 0x71, 0x6f, 0x73, 0x46, 0x6c, 0x6f, 0x77, 0x73, 0x54, 0x6f, 0x42, 0x65,
	0x53, 0x65, 0x74, 0x75, 0x70, 0x2d, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x7c, 0x0a, 0x1d, 0x64, 0x61,
	0x74, 0x61, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x69, 0x6e, 0x66, 0x6f,
	0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x32, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x74, 0x61,
	0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x61, 0x6e, 0x64, 0x4f, 0x66, 0x66,
	0x6c, 0x6f, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x66, 0x72, 0x6f, 0x6d, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x48, 0x04, 0x52, 0x1c, 0x64, 0x61, 0x74, 0x61, 0x66, 0x6f, 0x72,
	0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x69, 0x6e, 0x66, 0x6f, 0x66, 0x72, 0x6f, 0x6d, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x56, 0x0a, 0x0e, 0x69, 0x5f, 0x65, 0x5f,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x2f, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x64, 0x75, 0x73, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x54, 0x6f,
	0x42, 0x65, 0x53, 0x65, 0x74, 0x75, 0x70, 0x49, 0x74, 0x65, 0x6d, 0x45, 0x78, 0x74, 0x49, 0x65,
	0x73, 0x52, 0x0d, 0x69, 0x45, 0x2d, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x42, 0x13, 0x0a, 0x11, 0x5f, 0x70, 0x64, 0x75, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x5f, 0x61, 0x6d, 0x62, 0x72, 0x42, 0x21, 0x0a, 0x1f, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x5f, 0x64, 0x6c, 0x5f, 0x6e, 0x67, 0x5f, 0x75, 0x5f, 0x74, 0x6e, 0x6c, 0x5f, 0x69, 0x6e, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x73, 0x65, 0x63,
	0x75, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x42, 0x1f, 0x0a, 0x1d, 0x5f, 0x70, 0x64, 0x75, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x5f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x42, 0x20, 0x0a, 0x1e, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72,
	0x64, 0x69, 0x6e, 0x67, 0x69, 0x6e, 0x66, 0x6f, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x22, 0xb8, 0x07, 0x0a, 0x36, 0x50, 0x64, 0x75, 0x73, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x65, 0x74, 0x75, 0x70, 0x49,
	0x6e, 0x66, 0x6f, 0x53, 0x4e, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x45,
	0x78, 0x74, 0x49, 0x65, 0x73, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x48,
	0x0a, 0x12, 0x69, 0x64, 0x5f, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x78, 0x6e, 0x61,
	0x70, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x48, 0x00, 0x52, 0x11, 0x69, 0x64, 0x2d, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69,
	0x74, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x7d, 0x0a, 0x25, 0x69, 0x64, 0x5f, 0x70,
	0x64, 0x75, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x5f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76,
	0x31, 0x2e, 0x50, 0x64, 0x75, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x48, 0x00, 0x52, 0x22, 0x69, 0x64, 0x2d, 0x50, 0x44, 0x55, 0x53, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x53, 0x0a, 0x16, 0x69, 0x64, 0x5f, 0x64, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x64, 0x72, 0x62, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76,
	0x31, 0x2e, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x44, 0x72, 0x62, 0x41, 0x6c, 0x6c, 0x6f,
	0x77, 0x65, 0x64, 0x48, 0x00, 0x52, 0x15, 0x69, 0x64, 0x2d, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x44, 0x52, 0x42, 0x2d, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x12, 0x5e, 0x0a, 0x1a,
	0x69, 0x64, 0x5f, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x1e, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x70, 0x6c, 0x69, 0x74,
	0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72,
	0x48, 0x00, 0x52, 0x18, 0x69, 0x64, 0x2d, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x53, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x62, 0x0a, 0x1b,
	0x69, 0x64, 0x5f, 0x6e, 0x6f, 0x6e, 0x5f, 0x67, 0x62, 0x72, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x73, 0x5f, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x1f, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x6e, 0x47,
	0x62, 0x72, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x4f, 0x66, 0x66, 0x65, 0x72,
	0x65, 0x64, 0x48, 0x00, 0x52, 0x1a, 0x69, 0x64, 0x2d, 0x4e, 0x6f, 0x6e, 0x47, 0x42, 0x52, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2d, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x65, 0x64,
	0x12, 0x6d, 0x0a, 0x1e, 0x69, 0x64, 0x5f, 0x72, 0x65, 0x64, 0x75, 0x6e, 0x64, 0x61, 0x6e, 0x74,
	0x5f, 0x75, 0x6c, 0x5f, 0x6e, 0x67, 0x5f, 0x75, 0x5f, 0x74, 0x6e, 0x6c, 0x61, 0x74, 0x5f, 0x75,
	0x70, 0x66, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e,
	0x76, 0x31, 0x2e, 0x55, 0x70, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x4c, 0x61,
	0x79, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00,
	0x52, 0x1d, 0x69, 0x64, 0x2d, 0x52, 0x65, 0x64, 0x75, 0x6e, 0x64, 0x61, 0x6e, 0x74, 0x2d, 0x55,
	0x4c, 0x2d, 0x4e, 0x47, 0x2d, 0x55, 0x2d, 0x54, 0x4e, 0x4c, 0x61, 0x74, 0x55, 0x50, 0x46, 0x12,
	0x7b, 0x0a, 0x24, 0x69, 0x64, 0x5f, 0x72, 0x65, 0x64, 0x75, 0x6e, 0x64, 0x61, 0x6e, 0x74, 0x5f,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e,
	0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x64, 0x75, 0x73, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x48, 0x00, 0x52, 0x21, 0x69, 0x64, 0x2d, 0x52, 0x65,
	0x64, 0x75, 0x6e, 0x64, 0x61, 0x6e, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x4e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x79, 0x0a, 0x23,
	0x69, 0x64, 0x5f, 0x72, 0x65, 0x64, 0x75, 0x6e, 0x64, 0x61, 0x6e, 0x74, 0x5f, 0x70, 0x64, 0x75,
	0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x78, 0x6e, 0x61, 0x70,
	0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x64, 0x75, 0x6e, 0x64, 0x61, 0x6e, 0x74, 0x50, 0x64, 0x75,
	0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x48, 0x00, 0x52, 0x21, 0x69, 0x64, 0x2d, 0x52, 0x65, 0x64, 0x75, 0x6e, 0x64, 0x61,
	0x6e, 0x74, 0x50, 0x44, 0x55, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x35, 0x0a, 0x33, 0x70, 0x64, 0x75, 0x73, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x73,
	0x65, 0x74, 0x75, 0x70, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x73, 0x6e, 0x74, 0x65, 0x72, 0x6d,
	0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x65, 0x78, 0x74, 0x5f, 0x69, 0x65, 0x73, 0x22, 0xf0,
	0x01, 0x0a, 0x2d, 0x50, 0x64, 0x75, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x65, 0x74, 0x75, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x53, 0x4e,
	0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73,
	0x12, 0x26, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x78,
	0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x49,
	0x65, 0x49, 0x44, 0x52, 0x03, 0x26, 0x69, 0x64, 0x12, 0x37, 0x0a, 0x0b, 0x63, 0x72, 0x69, 0x74,
	0x69, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e,
	0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c,
	0x69, 0x74, 0x79, 0x52, 0x0c, 0x26, 0x63, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x69, 0x74,
	0x79, 0x12, 0x5e, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x50,
	0x64, 0x75, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x53, 0x65, 0x74, 0x75, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x53, 0x4e, 0x74, 0x65, 0x72, 0x6d,
	0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x26, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x22, 0xa2, 0x06, 0x0a, 0x27, 0x50, 0x64, 0x75, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x65, 0x74, 0x75, 0x70, 0x49, 0x6e, 0x66,
	0x6f, 0x53, 0x4e, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x12, 0x52, 0x0a,
	0x12, 0x75, 0x5f, 0x6c, 0x5f, 0x6e, 0x67, 0x5f, 0x75, 0x5f, 0x74, 0x6e, 0x6c, 0x61, 0x74, 0x5f,
	0x75, 0x70, 0x66, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x78, 0x6e, 0x61, 0x70,
	0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x4c,
	0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x10, 0x75, 0x4c, 0x2d, 0x4e, 0x47, 0x2d, 0x55, 0x2d, 0x54, 0x4e, 0x4c, 0x61, 0x74, 0x55, 0x50,
	0x46, 0x12, 0x41, 0x0a, 0x10, 0x70, 0x64, 0x75, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x78, 0x6e,
	0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x64, 0x75, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x0e, 0x70, 0x64, 0x75, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x68, 0x0a, 0x1c, 0x70, 0x64, 0x75, 0x5f, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x78, 0x6e, 0x61,
	0x70, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x64, 0x75, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x48, 0x00,
	0x52, 0x19, 0x70, 0x64, 0x75, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x6b,
	0x0a, 0x1a, 0x71, 0x6f, 0x73, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x5f, 0x74, 0x6f, 0x5f, 0x62,
	0x65, 0x5f, 0x73, 0x65, 0x74, 0x75, 0x70, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x6f, 0x53,
	0x66, 0x6c, 0x6f, 0x77, 0x73, 0x54, 0x6f, 0x42, 0x65, 0x53, 0x65, 0x74, 0x75, 0x70, 0x4c, 0x69,
	0x73, 0x74, 0x53, 0x65, 0x74, 0x75, 0x70, 0x53, 0x4e, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61,
	0x74, 0x65, 0x64, 0x52, 0x16, 0x71, 0x6f, 0x73, 0x46, 0x6c, 0x6f, 0x77, 0x73, 0x54, 0x6f, 0x42,
	0x65, 0x53, 0x65, 0x74, 0x75, 0x70, 0x2d, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x7c, 0x0a, 0x1d, 0x64,
	0x61, 0x74, 0x61, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x69, 0x6e, 0x66,
	0x6f, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x32, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x74,
	0x61, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x61, 0x6e, 0x64, 0x4f, 0x66,
	0x66, 0x6c, 0x6f, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x66, 0x72, 0x6f, 0x6d,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x48, 0x01, 0x52, 0x1c, 0x64, 0x61, 0x74, 0x61, 0x66, 0x6f,
	0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x69, 0x6e, 0x66, 0x6f, 0x66, 0x72, 0x6f, 0x6d,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x51, 0x0a, 0x13, 0x73, 0x65, 0x63,
	0x75, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x48, 0x02, 0x52, 0x12, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x49,
	0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x5d, 0x0a, 0x0e,
	0x69, 0x5f, 0x65, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x07,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x50,
	0x64, 0x75, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x53, 0x65, 0x74, 0x75, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x53, 0x4e, 0x74, 0x65, 0x72, 0x6d,
	0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x52, 0x0d, 0x69, 0x45,
	0x2d, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x1f, 0x0a, 0x1d, 0x5f,
	0x70, 0x64, 0x75, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x42, 0x20, 0x0a, 0x1e,
	0x5f, 0x64, 0x61, 0x74, 0x61, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x69,
	0x6e, 0x66, 0x6f, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x42, 0x16,
	0x0a, 0x14, 0x5f, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x6e, 0x64, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x7f, 0x0a, 0x26, 0x51, 0x6f, 0x53, 0x66, 0x6c, 0x6f,
	0x77, 0x73, 0x54, 0x6f, 0x42, 0x65, 0x53, 0x65, 0x74, 0x75, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x53,
	0x65, 0x74, 0x75, 0x70, 0x53, 0x4e, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64,
	0x12, 0x55, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x33, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x6f, 0x53, 0x66, 0x6c, 0x6f,
	0x77, 0x73, 0x54, 0x6f, 0x42, 0x65, 0x53, 0x65, 0x74, 0x75, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x53,
	0x65, 0x74, 0x75, 0x70, 0x53, 0x4e, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64,
	0x49, 0x74, 0x65, 0x6d, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x92, 0x01, 0x04, 0x08, 0x01, 0x10, 0x40,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xd1, 0x02, 0x0a, 0x39, 0x51, 0x6f, 0x53, 0x66,
	0x6c, 0x6f, 0x77, 0x73, 0x54, 0x6f, 0x42, 0x65, 0x53, 0x65, 0x74, 0x75, 0x70, 0x4c, 0x69, 0x73,
	0x74, 0x53, 0x65, 0x74, 0x75, 0x70, 0x53, 0x4e, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74,
	0x65, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x69, 0x0a, 0x1d, 0x69, 0x64, 0x5f, 0x74, 0x73, 0x63, 0x74,
	0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x5f, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72,
	0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x78,
	0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x73, 0x63, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69,
	0x63, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73,
	0x48, 0x00, 0x52, 0x1c, 0x69, 0x64, 0x2d, 0x54, 0x53, 0x43, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69,
	0x63, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73,
	0x12, 0x6b, 0x0a, 0x1f, 0x69, 0x64, 0x5f, 0x72, 0x65, 0x64, 0x75, 0x6e, 0x64, 0x61, 0x6e, 0x74,
	0x5f, 0x71, 0x6f, 0x5f, 0x73, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61,
	0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x78, 0x6e, 0x61, 0x70,
	0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x64, 0x75, 0x6e, 0x64, 0x61, 0x6e, 0x74, 0x51, 0x6f, 0x53,
	0x66, 0x6c, 0x6f, 0x77, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x48, 0x00, 0x52,
	0x1c, 0x69, 0x64, 0x2d, 0x52, 0x65, 0x64, 0x75, 0x6e, 0x64, 0x61, 0x6e, 0x74, 0x51, 0x6f, 0x53,
	0x46, 0x6c, 0x6f, 0x77, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x42, 0x3c, 0x0a,
	0x3a, 0x71, 0x6f, 0x5f, 0x73, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x5f, 0x74, 0x6f, 0x5f, 0x62, 0x65,
	0x5f, 0x73, 0x65, 0x74, 0x75, 0x70, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x73, 0x65, 0x74, 0x75,
	0x70, 0x5f, 0x73, 0x6e, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x69,
	0x74, 0x65, 0x6d, 0x5f, 0x65, 0x78, 0x74, 0x5f, 0x69, 0x65, 0x73, 0x22, 0xf6, 0x01, 0x0a, 0x30,
	0x51, 0x6f, 0x53, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x54, 0x6f, 0x42, 0x65, 0x53, 0x65, 0x74, 0x75,
	0x70, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x74, 0x75, 0x70, 0x53, 0x4e, 0x74, 0x65, 0x72, 0x6d,
	0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73,
	0x12, 0x26, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x78,
	0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x49,
	0x65, 0x49, 0x44, 0x52, 0x03, 0x26, 0x69, 0x64, 0x12, 0x37, 0x0a, 0x0b, 0x63, 0x72, 0x69, 0x74,
	0x69, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e,
	0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c,
	0x69, 0x74, 0x79, 0x52, 0x0c, 0x26, 0x63, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x69, 0x74,
	0x79, 0x12, 0x61, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x42, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x51,
	0x6f, 0x53, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x54, 0x6f, 0x42, 0x65, 0x53, 0x65, 0x74, 0x75, 0x70,
	0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x74, 0x75, 0x70, 0x53, 0x4e, 0x74, 0x65, 0x72, 0x6d, 0x69,
	0x6e, 0x61, 0x74, 0x65, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x26, 0x45, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x22, 0x96, 0x03, 0x0a, 0x2a, 0x51, 0x6f, 0x53, 0x66, 0x6c, 0x6f, 0x77,
	0x73, 0x54, 0x6f, 0x42, 0x65, 0x53, 0x65, 0x74, 0x75, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65,
	0x74, 0x75, 0x70, 0x53, 0x4e, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x49,
	0x74, 0x65, 0x6d, 0x12, 0x2c, 0x0a, 0x03, 0x71, 0x66, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x6f, 0x53, 0x66, 0x6c,
	0x6f, 0x77, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x03, 0x71, 0x66,
	0x69, 0x12, 0x64, 0x0a, 0x1d, 0x71, 0x6f, 0x73, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x6c, 0x65,
	0x76, 0x65, 0x6c, 0x5f, 0x71, 0x6f, 0x5f, 0x73, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65,
	0x72, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e,
	0x76, 0x31, 0x2e, 0x51, 0x6f, 0x53, 0x66, 0x6c, 0x6f, 0x77, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x51,
	0x6f, 0x53, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x52, 0x19, 0x71, 0x6f,
	0x73, 0x46, 0x6c, 0x6f, 0x77, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x51, 0x6f, 0x53, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x55, 0x0a, 0x18, 0x6f, 0x66, 0x66, 0x65, 0x72,
	0x65, 0x64, 0x5f, 0x67, 0x62, 0x72, 0x71, 0x6f, 0x5f, 0x73, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x69,
	0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x78, 0x6e, 0x61, 0x70,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x62, 0x72, 0x71, 0x6f, 0x53, 0x66, 0x6c, 0x6f, 0x77, 0x49, 0x6e,
	0x66, 0x6f, 0x48, 0x00, 0x52, 0x15, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x65, 0x64, 0x47, 0x42, 0x52,
	0x51, 0x6f, 0x53, 0x46, 0x6c, 0x6f, 0x77, 0x49, 0x6e, 0x66, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x60,
	0x0a, 0x0e, 0x69, 0x5f, 0x65, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31,
	0x2e, 0x51, 0x6f, 0x53, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x54, 0x6f, 0x42, 0x65, 0x53, 0x65, 0x74,
	0x75, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x74, 0x75, 0x70, 0x53, 0x4e, 0x74, 0x65, 0x72,
	0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x45, 0x78, 0x74, 0x49, 0x65,
	0x73, 0x52, 0x0d, 0x69, 0x45, 0x2d, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x42, 0x1b, 0x0a, 0x19, 0x5f, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x65, 0x64, 0x5f, 0x67, 0x62, 0x72,
	0x71, 0x6f, 0x5f, 0x73, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x22, 0xa5, 0x03,
	0x0a, 0x3e, 0x50, 0x64, 0x75, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x53, 0x65, 0x74, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x53, 0x4e, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65,
	0x64, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x4c, 0x0a, 0x17, 0x69, 0x64, 0x5f, 0x64, 0x72, 0x62, 0x5f, 0x69, 0x64, 0x73, 0x5f, 0x74,
	0x61, 0x6b, 0x65, 0x6e, 0x69, 0x6e, 0x74, 0x6f, 0x75, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x10, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x72, 0x62, 0x4c,
	0x69, 0x73, 0x74, 0x48, 0x00, 0x52, 0x17, 0x69, 0x64, 0x2d, 0x44, 0x52, 0x42, 0x2d, 0x49, 0x44,
	0x73, 0x2d, 0x74, 0x61, 0x6b, 0x65, 0x6e, 0x69, 0x6e, 0x74, 0x6f, 0x75, 0x73, 0x65, 0x12, 0x73,
	0x0a, 0x21, 0x69, 0x64, 0x5f, 0x72, 0x65, 0x64, 0x75, 0x6e, 0x64, 0x61, 0x6e, 0x74, 0x5f, 0x64,
	0x6c, 0x5f, 0x6e, 0x67, 0x5f, 0x75, 0x5f, 0x74, 0x6e, 0x6c, 0x61, 0x74, 0x5f, 0x6e, 0x67, 0x5f,
	0x72, 0x61, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x78, 0x6e, 0x61, 0x70,
	0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x4c,
	0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48,
	0x00, 0x52, 0x20, 0x69, 0x64, 0x2d, 0x52, 0x65, 0x64, 0x75, 0x6e, 0x64, 0x61, 0x6e, 0x74, 0x2d,
	0x44, 0x4c, 0x2d, 0x4e, 0x47, 0x2d, 0x55, 0x2d, 0x54, 0x4e, 0x4c, 0x61, 0x74, 0x4e, 0x47, 0x2d,
	0x52, 0x41, 0x4e, 0x12, 0x60, 0x0a, 0x16, 0x69, 0x64, 0x5f, 0x75, 0x73, 0x65, 0x64, 0x5f, 0x72,
	0x73, 0x6e, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65,
	0x64, 0x75, 0x6e, 0x64, 0x61, 0x6e, 0x74, 0x50, 0x64, 0x75, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x15,
	0x69, 0x64, 0x2d, 0x55, 0x73, 0x65, 0x64, 0x52, 0x53, 0x4e, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x3e, 0x0a, 0x3c, 0x70, 0x64, 0x75, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x73, 0x65, 0x74,
	0x75, 0x70, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f,
	0x5f, 0x73, 0x6e, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x65, 0x78,
	0x74, 0x5f, 0x69, 0x65, 0x73, 0x22, 0x80, 0x02, 0x0a, 0x35, 0x50, 0x64, 0x75, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x65, 0x74, 0x75,
	0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x53, 0x4e, 0x74,
	0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x12,
	0x26, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x78, 0x6e,
	0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x49, 0x65,
	0x49, 0x44, 0x52, 0x03, 0x26, 0x69, 0x64, 0x12, 0x37, 0x0a, 0x0b, 0x63, 0x72, 0x69, 0x74, 0x69,
	0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x78,
	0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x69,
	0x74, 0x79, 0x52, 0x0c, 0x26, 0x63, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79,
	0x12, 0x66, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x47, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x64,
	0x75, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x53, 0x65, 0x74, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x53, 0x4e, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x45, 0x78, 0x74,
	0x49, 0x65, 0x73, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x26, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xda, 0x05, 0x0a, 0x2f, 0x50, 0x64, 0x75,
	0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53,
	0x65, 0x74, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x53, 0x4e, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x12, 0x58, 0x0a, 0x15,
	0x64, 0x5f, 0x6c, 0x5f, 0x6e, 0x67, 0x5f, 0x75, 0x5f, 0x74, 0x6e, 0x6c, 0x61, 0x74, 0x5f, 0x6e,
	0x67, 0x5f, 0x72, 0x61, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x78, 0x6e,
	0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72,
	0x74, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x13, 0x64, 0x4c, 0x2d, 0x4e, 0x47, 0x2d, 0x55, 0x2d, 0x54, 0x4e, 0x4c, 0x61, 0x74,
	0x4e, 0x47, 0x2d, 0x52, 0x41, 0x4e, 0x12, 0x62, 0x0a, 0x11, 0x64, 0x5f, 0x72, 0x62, 0x73, 0x5f,
	0x74, 0x6f, 0x5f, 0x62, 0x65, 0x5f, 0x73, 0x65, 0x74, 0x75, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x33, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x72, 0x62, 0x73,
	0x54, 0x6f, 0x42, 0x65, 0x53, 0x65, 0x74, 0x75, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x74,
	0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x4e, 0x74, 0x65, 0x72, 0x6d,
	0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x48, 0x00, 0x52, 0x0d, 0x64, 0x52, 0x42, 0x73, 0x54, 0x6f,
	0x42, 0x65, 0x53, 0x65, 0x74, 0x75, 0x70, 0x88, 0x01, 0x01, 0x12, 0x70, 0x0a, 0x19, 0x64, 0x61,
	0x74, 0x61, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x69, 0x6e, 0x66, 0x6f,
	0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e,
	0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x46, 0x6f, 0x72, 0x77,
	0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x46, 0x72, 0x6f, 0x6d, 0x54, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x4e, 0x67, 0x72, 0x61, 0x6e, 0x6e, 0x6f, 0x64, 0x65, 0x48, 0x01, 0x52,
	0x18, 0x64, 0x61, 0x74, 0x61, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x69,
	0x6e, 0x66, 0x6f, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x88, 0x01, 0x01, 0x12, 0x61, 0x0a, 0x1b,
	0x71, 0x6f, 0x73, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x5f, 0x6e, 0x6f, 0x74, 0x5f, 0x61, 0x64,
	0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x6f, 0x53, 0x66,
	0x6c, 0x6f, 0x77, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x77, 0x69, 0x74, 0x68, 0x43, 0x61, 0x75, 0x73,
	0x65, 0x48, 0x02, 0x52, 0x17, 0x71, 0x6f, 0x73, 0x46, 0x6c, 0x6f, 0x77, 0x73, 0x4e, 0x6f, 0x74,
	0x41, 0x64, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x88, 0x01, 0x01, 0x12,
	0x45, 0x0a, 0x0f, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x48, 0x03, 0x52, 0x0e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x88, 0x01, 0x01, 0x12, 0x65, 0x0a, 0x0e, 0x69, 0x5f, 0x65, 0x5f, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3e,
	0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x64, 0x75, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x65, 0x74, 0x75, 0x70,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x53, 0x4e, 0x74, 0x65,
	0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x52, 0x0d,
	0x69, 0x45, 0x2d, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x14, 0x0a,
	0x12, 0x5f, 0x64, 0x5f, 0x72, 0x62, 0x73, 0x5f, 0x74, 0x6f, 0x5f, 0x62, 0x65, 0x5f, 0x73, 0x65,
	0x74, 0x75, 0x70, 0x42, 0x1c, 0x0a, 0x1a, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x66, 0x6f, 0x72, 0x77,
	0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x42, 0x1e, 0x0a, 0x1c, 0x5f, 0x71, 0x6f, 0x73, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x5f,
	0x6e, 0x6f, 0x74, 0x5f, 0x61, 0x64, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x87, 0x01, 0x0a, 0x2a, 0x44, 0x72, 0x62, 0x73, 0x54, 0x6f,
	0x42, 0x65, 0x53, 0x65, 0x74, 0x75, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x74, 0x75, 0x70,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x4e, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e,
	0x61, 0x74, 0x65, 0x64, 0x12, 0x59, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x72,
	0x62, 0x73, 0x54, 0x6f, 0x42, 0x65, 0x53, 0x65, 0x74, 0x75, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x53,
	0x65, 0x74, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x4e, 0x74, 0x65,
	0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x42, 0x0a, 0xfa, 0x42,
	0x07, 0x92, 0x01, 0x04, 0x08, 0x01, 0x10, 0x20, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22,
	0xf4, 0x02, 0x0a, 0x3d, 0x44, 0x72, 0x62, 0x73, 0x54, 0x6f, 0x42, 0x65, 0x53, 0x65, 0x74, 0x75,
	0x70, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x74, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x53, 0x4e, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x49, 0x74,
	0x65, 0x6d, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x85, 0x01, 0x0a, 0x27, 0x69, 0x64, 0x5f, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x61, 0x6c, 0x5f, 0x70, 0x64, 0x63, 0x70, 0x5f, 0x64, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x6e, 0x6c, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x50, 0x44, 0x63, 0x70, 0x44, 0x75, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x4e, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x00,
	0x52, 0x27, 0x69, 0x64, 0x2d, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x2d,
	0x50, 0x44, 0x43, 0x50, 0x2d, 0x44, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2d, 0x54, 0x4e, 0x4c, 0x2d, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x69, 0x0a, 0x1d, 0x69, 0x64, 0x5f,
	0x72, 0x6c, 0x63, 0x64, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x22, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x6c, 0x63, 0x64, 0x75,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x1c, 0x69, 0x64, 0x2d, 0x52, 0x4c, 0x43, 0x44, 0x75,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x42, 0x40, 0x0a, 0x3e, 0x64, 0x72, 0x62, 0x73, 0x5f, 0x74, 0x6f, 0x5f,
	0x62, 0x65, 0x5f, 0x73, 0x65, 0x74, 0x75, 0x70, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x73, 0x65,
	0x74, 0x75, 0x70, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x73, 0x6e, 0x74,
	0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x65,
	0x78, 0x74, 0x5f, 0x69, 0x65, 0x73, 0x22, 0xfe, 0x01, 0x0a, 0x34, 0x44, 0x72, 0x62, 0x73, 0x54,
	0x6f, 0x42, 0x65, 0x53, 0x65, 0x74, 0x75, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x74, 0x75,
	0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x4e, 0x74, 0x65, 0x72, 0x6d, 0x69,
	0x6e, 0x61, 0x74, 0x65, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x12,
	0x26, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x78, 0x6e,
	0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x49, 0x65,
	0x49, 0x44, 0x52, 0x03, 0x26, 0x69, 0x64, 0x12, 0x37, 0x0a, 0x0b, 0x63, 0x72, 0x69, 0x74, 0x69,
	0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x78,
	0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x69,
	0x74, 0x79, 0x52, 0x0c, 0x26, 0x63, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79,
	0x12, 0x65, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x46, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x72,
	0x62, 0x73, 0x54, 0x6f, 0x42, 0x65, 0x53, 0x65, 0x74, 0x75, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x53,
	0x65, 0x74, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x4e, 0x74, 0x65,
	0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x45, 0x78, 0x74, 0x49,
	0x65, 0x73, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x26, 0x45, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xea, 0x07, 0x0a, 0x2e, 0x44, 0x72, 0x62, 0x73,
	0x54, 0x6f, 0x42, 0x65, 0x53, 0x65, 0x74, 0x75, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x74,
	0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x4e, 0x74, 0x65, 0x72, 0x6d,
	0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x26, 0x0a, 0x06, 0x64, 0x72,
	0x62, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x78, 0x6e, 0x61,
	0x70, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x72, 0x62, 0x49, 0x44, 0x52, 0x06, 0x64, 0x72, 0x62, 0x2d,
	0x49, 0x44, 0x12, 0x55, 0x0a, 0x16, 0x73, 0x5f, 0x6e, 0x5f, 0x75, 0x6c, 0x5f, 0x70, 0x64, 0x63,
	0x70, 0x5f, 0x75, 0x70, 0x5f, 0x74, 0x6e, 0x6c, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65,
	0x72, 0x73, 0x52, 0x15, 0x73, 0x4e, 0x2d, 0x55, 0x4c, 0x2d, 0x50, 0x44, 0x43, 0x50, 0x2d, 0x55,
	0x50, 0x2d, 0x54, 0x4e, 0x4c, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x3e, 0x0a, 0x09, 0x64, 0x5f, 0x72,
	0x62, 0x5f, 0x71, 0x6f, 0x5f, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x78,
	0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x6f, 0x53, 0x66, 0x6c, 0x6f, 0x77, 0x4c, 0x65,
	0x76, 0x65, 0x6c, 0x51, 0x6f, 0x53, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73,
	0x52, 0x07, 0x64, 0x52, 0x42, 0x2d, 0x51, 0x6f, 0x53, 0x12, 0x41, 0x0a, 0x0e, 0x70, 0x5f, 0x64,
	0x63, 0x70, 0x5f, 0x73, 0x6e, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x64, 0x63, 0x70,
	0x73, 0x6e, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x48, 0x00, 0x52, 0x0d, 0x70, 0x44, 0x43, 0x50,
	0x2d, 0x53, 0x4e, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a, 0x09,
	0x72, 0x5f, 0x6c, 0x63, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x10, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x6c, 0x63, 0x6d, 0x6f, 0x64,
	0x65, 0x52, 0x08, 0x72, 0x4c, 0x43, 0x2d, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x4a, 0x0a, 0x11, 0x75,
	0x5f, 0x6c, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31,
	0x2e, 0x55, 0x6c, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x48, 0x01, 0x52, 0x10, 0x75, 0x4c, 0x2d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x6d, 0x0a, 0x1f, 0x73, 0x65, 0x63, 0x6f, 0x6e,
	0x64, 0x61, 0x72, 0x79, 0x5f, 0x73, 0x6e, 0x5f, 0x75, 0x6c, 0x5f, 0x70, 0x64, 0x63, 0x70, 0x5f,
	0x75, 0x70, 0x5f, 0x74, 0x6e, 0x6c, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73,
	0x48, 0x02, 0x52, 0x1f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x2d, 0x53, 0x4e,
	0x2d, 0x55, 0x4c, 0x2d, 0x50, 0x44, 0x43, 0x50, 0x2d, 0x55, 0x50, 0x2d, 0x54, 0x4e, 0x4c, 0x49,
	0x6e, 0x66, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x5a, 0x0a, 0x16, 0x64, 0x75, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31,
	0x2e, 0x44, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x63, 0x74, 0x69,
	0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x03, 0x52, 0x15, 0x64, 0x75, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x88,
	0x01, 0x01, 0x12, 0xa1, 0x01, 0x0a, 0x32, 0x71, 0x6f, 0x5f, 0x73, 0x66, 0x6c, 0x6f, 0x77, 0x73,
	0x5f, 0x6d, 0x61, 0x70, 0x70, 0x65, 0x64, 0x74, 0x6f, 0x5f, 0x64, 0x72, 0x62, 0x5f, 0x73, 0x65,
	0x74, 0x75, 0x70, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x73, 0x6e, 0x74,
	0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x35, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x6f, 0x53, 0x66, 0x6c, 0x6f,
	0x77, 0x73, 0x4d, 0x61, 0x70, 0x70, 0x65, 0x64, 0x74, 0x6f, 0x44, 0x72, 0x62, 0x53, 0x65, 0x74,
	0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x4e, 0x74, 0x65, 0x72, 0x6d,
	0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x52, 0x2e, 0x71, 0x6f, 0x53, 0x46, 0x6c, 0x6f, 0x77, 0x73,
	0x4d, 0x61, 0x70, 0x70, 0x65, 0x64, 0x74, 0x6f, 0x44, 0x52, 0x42, 0x2d, 0x53, 0x65, 0x74, 0x75,
	0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2d, 0x53, 0x4e, 0x74, 0x65, 0x72, 0x6d,
	0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x12, 0x64, 0x0a, 0x0e, 0x69, 0x5f, 0x65, 0x5f, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3d,
	0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x72, 0x62, 0x73, 0x54, 0x6f, 0x42,
	0x65, 0x53, 0x65, 0x74, 0x75, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x74, 0x75, 0x70, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x4e, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61,
	0x74, 0x65, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x52, 0x0d, 0x69,
	0x45, 0x2d, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x11, 0x0a, 0x0f,
	0x5f, 0x70, 0x5f, 0x64, 0x63, 0x70, 0x5f, 0x73, 0x6e, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x42,
	0x14, 0x0a, 0x12, 0x5f, 0x75, 0x5f, 0x6c, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x22, 0x0a, 0x20, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64,
	0x61, 0x72, 0x79, 0x5f, 0x73, 0x6e, 0x5f, 0x75, 0x6c, 0x5f, 0x70, 0x64, 0x63, 0x70, 0x5f, 0x75,
	0x70, 0x5f, 0x74, 0x6e, 0x6c, 0x69, 0x6e, 0x66, 0x6f, 0x42, 0x19, 0x0a, 0x17, 0x5f, 0x64, 0x75,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x22, 0x8b, 0x01, 0x0a, 0x2c, 0x51, 0x6f, 0x53, 0x66, 0x6c, 0x6f, 0x77,
	0x73, 0x4d, 0x61, 0x70, 0x70, 0x65, 0x64, 0x74, 0x6f, 0x44, 0x72, 0x62, 0x53, 0x65, 0x74, 0x75,
	0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x4e, 0x74, 0x65, 0x72, 0x6d, 0x69,
	0x6e, 0x61, 0x74, 0x65, 0x64, 0x12, 0x5b, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x51,
	0x6f, 0x53, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x4d, 0x61, 0x70, 0x70, 0x65, 0x64, 0x74, 0x6f, 0x44,
	0x72, 0x62, 0x53, 0x65, 0x74, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53,
	0x4e, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x42,
	0x0a, 0xfa, 0x42, 0x07, 0x92, 0x01, 0x04, 0x08, 0x01, 0x10, 0x40, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x22, 0xce, 0x02, 0x0a, 0x3f, 0x51, 0x6f, 0x53, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x4d,
	0x61, 0x70, 0x70, 0x65, 0x64, 0x74, 0x6f, 0x44, 0x72, 0x62, 0x53, 0x65, 0x74, 0x75, 0x70, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x4e, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61,
	0x74, 0x65, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x5c, 0x0a, 0x1d, 0x69, 0x64, 0x5f, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x5f, 0x71, 0x6f, 0x5f, 0x73, 0x70, 0x61, 0x72, 0x61, 0x5f, 0x73, 0x65,
	0x74, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x6f, 0x53, 0x70, 0x61, 0x72, 0x61, 0x53,
	0x65, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x48, 0x00, 0x52, 0x19, 0x69, 0x64, 0x2d, 0x43, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x74, 0x51, 0x6f, 0x53, 0x50, 0x61, 0x72, 0x61, 0x53, 0x65, 0x74, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x12, 0x6a, 0x0a, 0x20, 0x69, 0x64, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x5f, 0x64, 0x6c, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x69,
	0x70, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f,
	0x72, 0x74, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x48, 0x00,
	0x52, 0x1e, 0x69, 0x64, 0x2d, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x44, 0x4c, 0x46, 0x6f, 0x72,
	0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x49, 0x50, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x42, 0x41, 0x0a, 0x3f, 0x71, 0x6f, 0x5f, 0x73, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x5f, 0x6d, 0x61,
	0x70, 0x70, 0x65, 0x64, 0x74, 0x6f, 0x5f, 0x64, 0x72, 0x62, 0x5f, 0x73, 0x65, 0x74, 0x75, 0x70,
	0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x73, 0x6e, 0x74, 0x65, 0x72, 0x6d,
	0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x65, 0x78, 0x74, 0x5f,
	0x69, 0x65, 0x73, 0x22, 0x82, 0x02, 0x0a, 0x36, 0x51, 0x6f, 0x53, 0x66, 0x6c, 0x6f, 0x77, 0x73,
	0x4d, 0x61, 0x70, 0x70, 0x65, 0x64, 0x74, 0x6f, 0x44, 0x72, 0x62, 0x53, 0x65, 0x74, 0x75, 0x70,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x4e, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e,
	0x61, 0x74, 0x65, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x12, 0x26,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x78, 0x6e, 0x61,
	0x70, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x49, 0x65, 0x49,
	0x44, 0x52, 0x03, 0x26, 0x69, 0x64, 0x12, 0x37, 0x0a, 0x0b, 0x63, 0x72, 0x69, 0x74, 0x69, 0x63,
	0x61, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x78, 0x6e,
	0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x69, 0x74,
	0x79, 0x52, 0x0c, 0x26, 0x63, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x12,
	0x67, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x48, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x6f, 0x53,
	0x66, 0x6c, 0x6f, 0x77, 0x73, 0x4d, 0x61, 0x70, 0x70, 0x65, 0x64, 0x74, 0x6f, 0x44, 0x72, 0x62,
	0x53, 0x65, 0x74, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x4e, 0x74,
	0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x45, 0x78, 0x74,
	0x49, 0x65, 0x73, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x26, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xf2, 0x03, 0x0a, 0x30, 0x51, 0x6f, 0x53,
	0x66, 0x6c, 0x6f, 0x77, 0x73, 0x4d, 0x61, 0x70, 0x70, 0x65, 0x64, 0x74, 0x6f, 0x44, 0x72, 0x62,
	0x53, 0x65, 0x74, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x4e, 0x74,
	0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x4a, 0x0a,
	0x13, 0x71, 0x6f, 0x5f, 0x73, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x78, 0x6e, 0x61,
	0x70, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x6f, 0x53, 0x66, 0x6c, 0x6f, 0x77, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x11, 0x71, 0x6f, 0x53, 0x46, 0x6c, 0x6f, 0x77, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x60, 0x0a, 0x1e, 0x6d, 0x5f, 0x63,
	0x67, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x67, 0x62, 0x72, 0x71, 0x6f,
	0x5f, 0x73, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x62, 0x72, 0x71,
	0x6f, 0x53, 0x66, 0x6c, 0x6f, 0x77, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x1a, 0x6d, 0x43,
	0x47, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x47, 0x42, 0x52, 0x51, 0x6f, 0x53,
	0x46, 0x6c, 0x6f, 0x77, 0x49, 0x6e, 0x66, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x65, 0x0a, 0x1b, 0x71,
	0x6f, 0x73, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x5f,
	0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x21, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x6f, 0x53, 0x66, 0x6c,
	0x6f, 0x77, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x48, 0x01, 0x52, 0x18, 0x71, 0x6f, 0x73, 0x46, 0x6c, 0x6f, 0x77, 0x4d, 0x61,
	0x70, 0x70, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x88,
	0x01, 0x01, 0x12, 0x66, 0x0a, 0x0e, 0x69, 0x5f, 0x65, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x78, 0x6e, 0x61,
	0x70, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x6f, 0x53, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x4d, 0x61, 0x70,
	0x70, 0x65, 0x64, 0x74, 0x6f, 0x44, 0x72, 0x62, 0x53, 0x65, 0x74, 0x75, 0x70, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x4e, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65,
	0x64, 0x49, 0x74, 0x65, 0x6d, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x52, 0x0d, 0x69, 0x45, 0x2d,
	0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x21, 0x0a, 0x1f, 0x5f, 0x6d,
	0x5f, 0x63, 0x67, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x67, 0x62, 0x72,
	0x71, 0x6f, 0x5f, 0x73, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x42, 0x1e, 0x0a,
	0x1c, 0x5f, 0x71, 0x6f, 0x73, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x6d, 0x61, 0x70, 0x70, 0x69,
	0x6e, 0x67, 0x5f, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x5d, 0x0a,
	0x2d, 0x50, 0x64, 0x75, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x53, 0x65, 0x74, 0x75, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x4d, 0x4e, 0x74, 0x65,
	0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x12, 0x2c,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xa2, 0x02, 0x0a,
	0x27, 0x50, 0x64, 0x75, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x53, 0x65, 0x74, 0x75, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x4d, 0x4e, 0x74, 0x65,
	0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x12, 0x41, 0x0a, 0x10, 0x70, 0x64, 0x75, 0x5f,
	0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x17, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x64, 0x75,
	0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0e, 0x70, 0x64, 0x75,
	0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x55, 0x0a, 0x11, 0x64,
	0x5f, 0x72, 0x62, 0x73, 0x5f, 0x74, 0x6f, 0x5f, 0x62, 0x65, 0x5f, 0x73, 0x65, 0x74, 0x75, 0x70,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31,
	0x2e, 0x44, 0x72, 0x62, 0x73, 0x54, 0x6f, 0x42, 0x65, 0x53, 0x65, 0x74, 0x75, 0x70, 0x4c, 0x69,
	0x73, 0x74, 0x53, 0x65, 0x74, 0x75, 0x70, 0x4d, 0x4e, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61,
	0x74, 0x65, 0x64, 0x52, 0x0d, 0x64, 0x52, 0x42, 0x73, 0x54, 0x6f, 0x42, 0x65, 0x53, 0x65, 0x74,
	0x75, 0x70, 0x12, 0x5d, 0x0a, 0x0e, 0x69, 0x5f, 0x65, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x78, 0x6e, 0x61,
	0x70, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x64, 0x75, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x65, 0x74, 0x75, 0x70, 0x49, 0x6e, 0x66, 0x6f,
	0x4d, 0x4e, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x45, 0x78, 0x74, 0x49,
	0x65, 0x73, 0x52, 0x0d, 0x69, 0x45, 0x2d, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x73, 0x22, 0x77, 0x0a, 0x22, 0x44, 0x72, 0x62, 0x73, 0x54, 0x6f, 0x42, 0x65, 0x53, 0x65, 0x74,
	0x75, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x74, 0x75, 0x70, 0x4d, 0x4e, 0x74, 0x65, 0x72,
	0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x12, 0x51, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31,
	0x2e, 0x44, 0x72, 0x62, 0x73, 0x54, 0x6f, 0x42, 0x65, 0x53, 0x65, 0x74, 0x75, 0x70, 0x4c, 0x69,
	0x73, 0x74, 0x53, 0x65, 0x74, 0x75, 0x70, 0x4d, 0x4e, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61,
	0x74, 0x65, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x92, 0x01, 0x04, 0x08,
	0x01, 0x10, 0x20, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xe3, 0x02, 0x0a, 0x35, 0x44,
	0x72, 0x62, 0x73, 0x54, 0x6f, 0x42, 0x65, 0x53, 0x65, 0x74, 0x75, 0x70, 0x4c, 0x69, 0x73, 0x74,
	0x53, 0x65, 0x74, 0x75, 0x70, 0x4d, 0x4e, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65,
	0x64, 0x49, 0x74, 0x65, 0x6d, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x45, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x85, 0x01, 0x0a, 0x27, 0x69, 0x64, 0x5f, 0x61, 0x64, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x70, 0x64, 0x63, 0x70, 0x5f, 0x64, 0x75, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x6e, 0x6c, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31,
	0x2e, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x50, 0x44, 0x63, 0x70, 0x44,
	0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x4e, 0x6c, 0x4c, 0x69, 0x73,
	0x74, 0x48, 0x00, 0x52, 0x27, 0x69, 0x64, 0x2d, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x61, 0x6c, 0x2d, 0x50, 0x44, 0x43, 0x50, 0x2d, 0x44, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2d, 0x54, 0x4e, 0x4c, 0x2d, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x69, 0x0a, 0x1d,
	0x69, 0x64, 0x5f, 0x72, 0x6c, 0x63, 0x64, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x6c,
	0x63, 0x64, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x1c, 0x69, 0x64, 0x2d, 0x52, 0x4c,
	0x43, 0x44, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x37, 0x0a, 0x35, 0x64, 0x72, 0x62, 0x73, 0x5f,
	0x74, 0x6f, 0x5f, 0x62, 0x65, 0x5f, 0x73, 0x65, 0x74, 0x75, 0x70, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x5f, 0x73, 0x65, 0x74, 0x75, 0x70, 0x5f, 0x6d, 0x6e, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x65, 0x78, 0x74, 0x5f, 0x69, 0x65, 0x73,
	0x22, 0xee, 0x01, 0x0a, 0x2c, 0x44, 0x72, 0x62, 0x73, 0x54, 0x6f, 0x42, 0x65, 0x53, 0x65, 0x74,
	0x75, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x74, 0x75, 0x70, 0x4d, 0x4e, 0x74, 0x65, 0x72,
	0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x45, 0x78, 0x74, 0x49, 0x65,
	0x73, 0x12, 0x26, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x49, 0x65, 0x49, 0x44, 0x52, 0x03, 0x26, 0x69, 0x64, 0x12, 0x37, 0x0a, 0x0b, 0x63, 0x72, 0x69,
	0x74, 0x69, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14,
	0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61,
	0x6c, 0x69, 0x74, 0x79, 0x52, 0x0c, 0x26, 0x63, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x69,
	0x74, 0x79, 0x12, 0x5d, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e,
	0x44, 0x72, 0x62, 0x73, 0x54, 0x6f, 0x42, 0x65, 0x53, 0x65, 0x74, 0x75, 0x70, 0x4c, 0x69, 0x73,
	0x74, 0x53, 0x65, 0x74, 0x75, 0x70, 0x4d, 0x4e, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74,
	0x65, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x26, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x22, 0xc1, 0x07, 0x0a, 0x26, 0x44, 0x72, 0x62, 0x73, 0x54, 0x6f, 0x42, 0x65, 0x53, 0x65,
	0x74, 0x75, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x74, 0x75, 0x70, 0x4d, 0x4e, 0x74, 0x65,
	0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x26, 0x0a, 0x06,
	0x64, 0x72, 0x62, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x78,
	0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x72, 0x62, 0x49, 0x44, 0x52, 0x06, 0x64, 0x72,
	0x62, 0x2d, 0x49, 0x44, 0x12, 0x55, 0x0a, 0x16, 0x6d, 0x5f, 0x6e, 0x5f, 0x75, 0x6c, 0x5f, 0x70,
	0x64, 0x63, 0x70, 0x5f, 0x75, 0x70, 0x5f, 0x74, 0x6e, 0x6c, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x55,
	0x70, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65,
	0x74, 0x65, 0x72, 0x73, 0x52, 0x15, 0x6d, 0x4e, 0x2d, 0x55, 0x4c, 0x2d, 0x50, 0x44, 0x43, 0x50,
	0x2d, 0x55, 0x50, 0x2d, 0x54, 0x4e, 0x4c, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2d, 0x0a, 0x09, 0x72,
	0x5f, 0x6c, 0x63, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10,
	0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x6c, 0x63, 0x6d, 0x6f, 0x64, 0x65,
	0x52, 0x08, 0x72, 0x4c, 0x43, 0x2d, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x4a, 0x0a, 0x11, 0x75, 0x5f,
	0x6c, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e,
	0x55, 0x6c, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48,
	0x00, 0x52, 0x10, 0x75, 0x4c, 0x2d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x3e, 0x0a, 0x09, 0x64, 0x5f, 0x72, 0x62, 0x5f, 0x71,
	0x6f, 0x5f, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x78, 0x6e, 0x61, 0x70,
	0x2e, 0x76, 0x31, 0x2e, 0x51, 0x6f, 0x53, 0x66, 0x6c, 0x6f, 0x77, 0x4c, 0x65, 0x76, 0x65, 0x6c,
	0x51, 0x6f, 0x53, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x52, 0x07, 0x64,
	0x52, 0x42, 0x2d, 0x51, 0x6f, 0x53, 0x12, 0x41, 0x0a, 0x0e, 0x70, 0x5f, 0x64, 0x63, 0x70, 0x5f,
	0x73, 0x6e, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x64, 0x63, 0x70, 0x73, 0x6e, 0x6c,
	0x65, 0x6e, 0x67, 0x74, 0x68, 0x48, 0x01, 0x52, 0x0d, 0x70, 0x44, 0x43, 0x50, 0x2d, 0x53, 0x4e,
	0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x88, 0x01, 0x01, 0x12, 0x6d, 0x0a, 0x1f, 0x73, 0x65, 0x63,
	0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x5f, 0x6d, 0x6e, 0x5f, 0x75, 0x6c, 0x5f, 0x70, 0x64, 0x63,
	0x70, 0x5f, 0x75, 0x70, 0x5f, 0x74, 0x6e, 0x6c, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65,
	0x72, 0x73, 0x48, 0x02, 0x52, 0x1f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x2d,
	0x4d, 0x4e, 0x2d, 0x55, 0x4c, 0x2d, 0x50, 0x44, 0x43, 0x50, 0x2d, 0x55, 0x50, 0x2d, 0x54, 0x4e,
	0x4c, 0x49, 0x6e, 0x66, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x5a, 0x0a, 0x16, 0x64, 0x75, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e,
	0x76, 0x31, 0x2e, 0x44, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x63,
	0x74, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x03, 0x52, 0x15, 0x64, 0x75, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x88, 0x01, 0x01, 0x12, 0x88, 0x01, 0x0a, 0x29, 0x71, 0x6f, 0x5f, 0x73, 0x66, 0x6c, 0x6f,
	0x77, 0x73, 0x5f, 0x6d, 0x61, 0x70, 0x70, 0x65, 0x64, 0x74, 0x6f, 0x5f, 0x64, 0x72, 0x62, 0x5f,
	0x73, 0x65, 0x74, 0x75, 0x70, 0x5f, 0x6d, 0x6e, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74,
	0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e,
	0x76, 0x31, 0x2e, 0x51, 0x6f, 0x53, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x4d, 0x61, 0x70, 0x70, 0x65,
	0x64, 0x74, 0x6f, 0x44, 0x72, 0x62, 0x53, 0x65, 0x74, 0x75, 0x70, 0x4d, 0x4e, 0x74, 0x65, 0x72,
	0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x52, 0x26, 0x71, 0x6f, 0x53, 0x46, 0x6c, 0x6f, 0x77,
	0x73, 0x4d, 0x61, 0x70, 0x70, 0x65, 0x64, 0x74, 0x6f, 0x44, 0x52, 0x42, 0x2d, 0x53, 0x65, 0x74,
	0x75, 0x70, 0x2d, 0x4d, 0x4e, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x12,
	0x5c, 0x0a, 0x0e, 0x69, 0x5f, 0x65, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76,
	0x31, 0x2e, 0x44, 0x72, 0x62, 0x73, 0x54, 0x6f, 0x42, 0x65, 0x53, 0x65, 0x74, 0x75, 0x70, 0x4c,
	0x69, 0x73, 0x74, 0x53, 0x65, 0x74, 0x75, 0x70, 0x4d, 0x4e, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e,
	0x61, 0x74, 0x65, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x52, 0x0d,
	0x69, 0x45, 0x2d, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x14, 0x0a,
	0x12, 0x5f, 0x75, 0x5f, 0x6c, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x70, 0x5f, 0x64, 0x63, 0x70, 0x5f, 0x73, 0x6e,
	0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x42, 0x22, 0x0a, 0x20, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e,
	0x64, 0x61, 0x72, 0x79, 0x5f, 0x6d, 0x6e, 0x5f, 0x75, 0x6c, 0x5f, 0x70, 0x64, 0x63, 0x70, 0x5f,
	0x75, 0x70, 0x5f, 0x74, 0x6e, 0x6c, 0x69, 0x6e, 0x66, 0x6f, 0x42, 0x19, 0x0a, 0x17, 0x5f, 0x64,
	0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x7b, 0x0a, 0x24, 0x51, 0x6f, 0x53, 0x66, 0x6c, 0x6f, 0x77,
	0x73, 0x4d, 0x61, 0x70, 0x70, 0x65, 0x64, 0x74, 0x6f, 0x44, 0x72, 0x62, 0x53, 0x65, 0x74, 0x75,
	0x70, 0x4d, 0x4e, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x12, 0x53, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x78,
	0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x6f, 0x53, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x4d,
	0x61, 0x70, 0x70, 0x65, 0x64, 0x74, 0x6f, 0x44, 0x72, 0x62, 0x53, 0x65, 0x74, 0x75, 0x70, 0x4d,
	0x4e, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x42,
	0x0a, 0xfa, 0x42, 0x07, 0x92, 0x01, 0x04, 0x08, 0x01, 0x10, 0x40, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x22, 0x5e, 0x0a, 0x2e, 0x51, 0x6f, 0x53, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x4d, 0x61,
	0x70, 0x70, 0x65, 0x64, 0x74, 0x6f, 0x44, 0x72, 0x62, 0x53, 0x65, 0x74, 0x75, 0x70, 0x4d, 0x4e,
	0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x45, 0x78,
	0x74, 0x49, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x22, 0xc3, 0x03, 0x0a, 0x28, 0x51, 0x6f, 0x53, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x4d,
	0x61, 0x70, 0x70, 0x65, 0x64, 0x74, 0x6f, 0x44, 0x72, 0x62, 0x53, 0x65, 0x74, 0x75, 0x70, 0x4d,
	0x4e, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x12,
	0x4a, 0x0a, 0x13, 0x71, 0x6f, 0x5f, 0x73, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x69, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x78,
	0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x6f, 0x53, 0x66, 0x6c, 0x6f, 0x77, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x11, 0x71, 0x6f, 0x53, 0x46, 0x6c, 0x6f,
	0x77, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x64, 0x0a, 0x1d, 0x71,
	0x6f, 0x5f, 0x73, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x71, 0x6f,
	0x5f, 0x73, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x6f, 0x53,
	0x66, 0x6c, 0x6f, 0x77, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x51, 0x6f, 0x53, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x52, 0x19, 0x71, 0x6f, 0x53, 0x46, 0x6c, 0x6f, 0x77, 0x4c,
	0x65, 0x76, 0x65, 0x6c, 0x51, 0x6f, 0x53, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72,
	0x73, 0x12, 0x65, 0x0a, 0x1b, 0x71, 0x6f, 0x73, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x6d, 0x61,
	0x70, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31,
	0x2e, 0x51, 0x6f, 0x53, 0x66, 0x6c, 0x6f, 0x77, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x49,
	0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x18, 0x71, 0x6f, 0x73,
	0x46, 0x6c, 0x6f, 0x77, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x64, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x5e, 0x0a, 0x0e, 0x69, 0x5f, 0x65, 0x5f,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x37, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x6f, 0x53, 0x66, 0x6c,
	0x6f, 0x77, 0x73, 0x4d, 0x61, 0x70, 0x70, 0x65, 0x64, 0x74, 0x6f, 0x44, 0x72, 0x62, 0x53, 0x65,
	0x74, 0x75, 0x70, 0x4d, 0x4e, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x49,
	0x74, 0x65, 0x6d, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x52, 0x0d, 0x69, 0x45, 0x2d, 0x45, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x1e, 0x0a, 0x1c, 0x5f, 0x71, 0x6f, 0x73,
	0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6e,
	0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x65, 0x0a, 0x35, 0x50, 0x64, 0x75, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x65,
	0x74, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x4d,
	0x4e, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x45, 0x78, 0x74, 0x49, 0x65,
	0x73, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22,
	0xfb, 0x01, 0x0a, 0x2f, 0x50, 0x64, 0x75, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x65, 0x74, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x4d, 0x4e, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61,
	0x74, 0x65, 0x64, 0x12, 0x61, 0x0a, 0x13, 0x64, 0x5f, 0x72, 0x62, 0x73, 0x5f, 0x61, 0x64, 0x6d,
	0x69, 0x74, 0x74, 0x65, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x32, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x72, 0x62, 0x73, 0x41,
	0x64, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x74, 0x75, 0x70,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x4e, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e,
	0x61, 0x74, 0x65, 0x64, 0x52, 0x10, 0x64, 0x52, 0x42, 0x73, 0x41, 0x64, 0x6d, 0x69, 0x74, 0x74,
	0x65, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x65, 0x0a, 0x0e, 0x69, 0x5f, 0x65, 0x5f, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3e,
	0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x64, 0x75, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x65, 0x74, 0x75, 0x70,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x4d, 0x4e, 0x74, 0x65,
	0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x52, 0x0d,
	0x69, 0x45, 0x2d, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x85, 0x01,
	0x0a, 0x29, 0x44, 0x72, 0x62, 0x73, 0x41, 0x64, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x4c, 0x69,
	0x73, 0x74, 0x53, 0x65, 0x74, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d,
	0x4e, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x12, 0x58, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x78, 0x6e, 0x61,
	0x70, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x72, 0x62, 0x73, 0x41, 0x64, 0x6d, 0x69, 0x74, 0x74, 0x65,
	0x64, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x74, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x4d, 0x4e, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x49, 0x74,
	0x65, 0x6d, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x92, 0x01, 0x04, 0x08, 0x01, 0x10, 0x20, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xb1, 0x03, 0x0a, 0x3c, 0x44, 0x72, 0x62, 0x73, 0x41, 0x64,
	0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x74, 0x75, 0x70, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x4e, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61,
	0x74, 0x65, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x85, 0x01, 0x0a, 0x27, 0x69, 0x64, 0x5f, 0x61, 0x64,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x70, 0x64, 0x63, 0x70, 0x5f, 0x64, 0x75,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x6e, 0x6c, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e,
	0x76, 0x31, 0x2e, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x50, 0x44, 0x63,
	0x70, 0x44, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x4e, 0x6c, 0x4c,
	0x69, 0x73, 0x74, 0x48, 0x00, 0x52, 0x27, 0x69, 0x64, 0x2d, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x61, 0x6c, 0x2d, 0x50, 0x44, 0x43, 0x50, 0x2d, 0x44, 0x75, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x54, 0x4e, 0x4c, 0x2d, 0x4c, 0x69, 0x73, 0x74, 0x12, 0xa9,
	0x01, 0x0a, 0x35, 0x69, 0x64, 0x5f, 0x71, 0x6f, 0x5f, 0x73, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x5f,
	0x6d, 0x61, 0x70, 0x70, 0x65, 0x64, 0x74, 0x6f, 0x5f, 0x64, 0x72, 0x62, 0x5f, 0x73, 0x65, 0x74,
	0x75, 0x70, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x6d, 0x6e, 0x74, 0x65,
	0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35,
	0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x6f, 0x53, 0x66, 0x6c, 0x6f, 0x77,
	0x73, 0x4d, 0x61, 0x70, 0x70, 0x65, 0x64, 0x74, 0x6f, 0x44, 0x72, 0x62, 0x53, 0x65, 0x74, 0x75,
	0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x4e, 0x74, 0x65, 0x72, 0x6d, 0x69,
	0x6e, 0x61, 0x74, 0x65, 0x64, 0x48, 0x00, 0x52, 0x31, 0x69, 0x64, 0x2d, 0x51, 0x6f, 0x53, 0x46,
	0x6c, 0x6f, 0x77, 0x73, 0x4d, 0x61, 0x70, 0x70, 0x65, 0x64, 0x74, 0x6f, 0x44, 0x52, 0x42, 0x2d,
	0x53, 0x65, 0x74, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2d, 0x4d, 0x4e,
	0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x42, 0x3d, 0x0a, 0x3b, 0x64, 0x72,
	0x62, 0x73, 0x5f, 0x61, 0x64, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x5f, 0x73, 0x65, 0x74, 0x75, 0x70, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f,
	0x6d, 0x6e, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x69, 0x74, 0x65,
	0x6d, 0x5f, 0x65, 0x78, 0x74, 0x5f, 0x69, 0x65, 0x73, 0x22, 0xfc, 0x01, 0x0a, 0x33, 0x44, 0x72,
	0x62, 0x73, 0x41, 0x64, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65,
	0x74, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x4e, 0x74, 0x65, 0x72,
	0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x45, 0x78, 0x74, 0x49, 0x65,
	0x73, 0x12, 0x26, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x49, 0x65, 0x49, 0x44, 0x52, 0x03, 0x26, 0x69, 0x64, 0x12, 0x37, 0x0a, 0x0b, 0x63, 0x72, 0x69,
	0x74, 0x69, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14,
	0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61,
	0x6c, 0x69, 0x74, 0x79, 0x52, 0x0c, 0x26, 0x63, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x69,
	0x74, 0x79, 0x12, 0x64, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x45, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e,
	0x44, 0x72, 0x62, 0x73, 0x41, 0x64, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x4c, 0x69, 0x73, 0x74,
	0x53, 0x65, 0x74, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x4e, 0x74,
	0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x45, 0x78, 0x74,
	0x49, 0x65, 0x73, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x26, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xd4, 0x03, 0x0a, 0x2d, 0x44, 0x72, 0x62,
	0x73, 0x41, 0x64, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x74,
	0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x4e, 0x74, 0x65, 0x72, 0x6d,
	0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x26, 0x0a, 0x06, 0x64, 0x72,
	0x62, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x78, 0x6e, 0x61,
	0x70, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x72, 0x62, 0x49, 0x44, 0x52, 0x06, 0x64, 0x72, 0x62, 0x2d,
	0x49, 0x44, 0x12, 0x53, 0x0a, 0x15, 0x73, 0x5f, 0x6e, 0x5f, 0x64, 0x6c, 0x5f, 0x73, 0x63, 0x67,
	0x5f, 0x75, 0x70, 0x5f, 0x74, 0x6e, 0x6c, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72,
	0x73, 0x52, 0x14, 0x73, 0x4e, 0x2d, 0x44, 0x4c, 0x2d, 0x53, 0x43, 0x47, 0x2d, 0x55, 0x50, 0x2d,
	0x54, 0x4e, 0x4c, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x6b, 0x0a, 0x1e, 0x73, 0x65, 0x63, 0x6f, 0x6e,
	0x64, 0x61, 0x72, 0x79, 0x5f, 0x73, 0x6e, 0x5f, 0x64, 0x6c, 0x5f, 0x73, 0x63, 0x67, 0x5f, 0x75,
	0x70, 0x5f, 0x74, 0x6e, 0x6c, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x70, 0x6f, 0x72, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x48,
	0x00, 0x52, 0x1e, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x2d, 0x53, 0x4e, 0x2d,
	0x44, 0x4c, 0x2d, 0x53, 0x43, 0x47, 0x2d, 0x55, 0x50, 0x2d, 0x54, 0x4e, 0x4c, 0x49, 0x6e, 0x66,
	0x6f, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x05, 0x6c, 0x5f, 0x63, 0x69, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x63,
	0x69, 0x64, 0x48, 0x01, 0x52, 0x04, 0x6c, 0x43, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x63, 0x0a,
	0x0e, 0x69, 0x5f, 0x65, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e,
	0x44, 0x72, 0x62, 0x73, 0x41, 0x64, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x4c, 0x69, 0x73, 0x74,
	0x53, 0x65, 0x74, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x4e, 0x74,
	0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x45, 0x78, 0x74,
	0x49, 0x65, 0x73, 0x52, 0x0d, 0x69, 0x45, 0x2d, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x42, 0x21, 0x0a, 0x1f, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79,
	0x5f, 0x73, 0x6e, 0x5f, 0x64, 0x6c, 0x5f, 0x73, 0x63, 0x67, 0x5f, 0x75, 0x70, 0x5f, 0x74, 0x6e,
	0x6c, 0x69, 0x6e, 0x66, 0x6f, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x6c, 0x5f, 0x63, 0x69, 0x64, 0x22,
	0x8b, 0x01, 0x0a, 0x2c, 0x51, 0x6f, 0x53, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x4d, 0x61, 0x70, 0x70,
	0x65, 0x64, 0x74, 0x6f, 0x44, 0x72, 0x62, 0x53, 0x65, 0x74, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x4e, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64,
	0x12, 0x5b, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x39, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x6f, 0x53, 0x66, 0x6c, 0x6f,
	0x77, 0x73, 0x4d, 0x61, 0x70, 0x70, 0x65, 0x64, 0x74, 0x6f, 0x44, 0x72, 0x62, 0x53, 0x65, 0x74,
	0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x4e, 0x74, 0x65, 0x72, 0x6d,
	0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x92,
	0x01, 0x04, 0x08, 0x01, 0x10, 0x40, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x66, 0x0a,
	0x36, 0x51, 0x6f, 0x53, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x4d, 0x61, 0x70, 0x70, 0x65, 0x64, 0x74,
	0x6f, 0x44, 0x72, 0x62, 0x53, 0x65, 0x74, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x4d, 0x4e, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x49, 0x74, 0x65,
	0x6d, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xbc, 0x02, 0x0a, 0x30, 0x51, 0x6f, 0x53, 0x66, 0x6c, 0x6f,
	0x77, 0x73, 0x4d, 0x61, 0x70, 0x70, 0x65, 0x64, 0x74, 0x6f, 0x44, 0x72, 0x62, 0x53, 0x65, 0x74,
	0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x4e, 0x74, 0x65, 0x72, 0x6d,
	0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x4a, 0x0a, 0x13, 0x71, 0x6f,
	0x5f, 0x73, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76,
	0x31, 0x2e, 0x51, 0x6f, 0x53, 0x66, 0x6c, 0x6f, 0x77, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x52, 0x11, 0x71, 0x6f, 0x53, 0x46, 0x6c, 0x6f, 0x77, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x54, 0x0a, 0x1a, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x74, 0x5f, 0x71, 0x6f, 0x5f, 0x73, 0x70, 0x61, 0x72, 0x61, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x78, 0x6e, 0x61,
	0x70, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x6f, 0x53, 0x70, 0x61, 0x72, 0x61, 0x53, 0x65, 0x74, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x52, 0x16, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x51, 0x6f, 0x53,
	0x50, 0x61, 0x72, 0x61, 0x53, 0x65, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x66, 0x0a, 0x0e,
	0x69, 0x5f, 0x65, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x51,
	0x6f, 0x53, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x4d, 0x61, 0x70, 0x70, 0x65, 0x64, 0x74, 0x6f, 0x44,
	0x72, 0x62, 0x53, 0x65, 0x74, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d,
	0x4e, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x45,
	0x78, 0x74, 0x49, 0x65, 0x73, 0x52, 0x0d, 0x69, 0x45, 0x2d, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x22, 0xf7, 0x05, 0x0a, 0x3d, 0x50, 0x64, 0x75, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x6f, 0x64, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x53, 0x4e, 0x74, 0x65, 0x72,
	0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x7d, 0x0a, 0x25, 0x69, 0x64, 0x5f, 0x70, 0x64, 0x75,
	0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e,
	0x50, 0x64, 0x75, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x48,
	0x00, 0x52, 0x22, 0x69, 0x64, 0x2d, 0x50, 0x44, 0x55, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x53, 0x0a, 0x16, 0x69, 0x64, 0x5f, 0x64, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x5f, 0x64, 0x72, 0x62, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e,
	0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x44, 0x72, 0x62, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65,
	0x64, 0x48, 0x00, 0x52, 0x15, 0x69, 0x64, 0x2d, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x44,
	0x52, 0x42, 0x2d, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x12, 0x62, 0x0a, 0x1b, 0x69, 0x64,
	0x5f, 0x6e, 0x6f, 0x6e, 0x5f, 0x67, 0x62, 0x72, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x73, 0x5f, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x1f, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x6e, 0x47, 0x62, 0x72,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x65, 0x64,
	0x48, 0x00, 0x52, 0x1a, 0x69, 0x64, 0x2d, 0x4e, 0x6f, 0x6e, 0x47, 0x42, 0x52, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2d, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x65, 0x64, 0x12, 0x6d,
	0x0a, 0x1e, 0x69, 0x64, 0x5f, 0x72, 0x65, 0x64, 0x75, 0x6e, 0x64, 0x61, 0x6e, 0x74, 0x5f, 0x75,
	0x6c, 0x5f, 0x6e, 0x67, 0x5f, 0x75, 0x5f, 0x74, 0x6e, 0x6c, 0x61, 0x74, 0x5f, 0x75, 0x70, 0x66,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31,
	0x2e, 0x55, 0x70, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x4c, 0x61, 0x79, 0x65,
	0x72, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x1d,
	0x69, 0x64, 0x2d, 0x52, 0x65, 0x64, 0x75, 0x6e, 0x64, 0x61, 0x6e, 0x74, 0x2d, 0x55, 0x4c, 0x2d,
	0x4e, 0x47, 0x2d, 0x55, 0x2d, 0x54, 0x4e, 0x4c, 0x61, 0x74, 0x55, 0x50, 0x46, 0x12, 0x7b, 0x0a,
	0x24, 0x69, 0x64, 0x5f, 0x72, 0x65, 0x64, 0x75, 0x6e, 0x64, 0x61, 0x6e, 0x74, 0x5f, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x78, 0x6e,
	0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x64, 0x75, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x48, 0x00, 0x52, 0x21, 0x69, 0x64, 0x2d, 0x52, 0x65, 0x64, 0x75,
	0x6e, 0x64, 0x61, 0x6e, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x4e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x54, 0x0a, 0x16, 0x69, 0x64,
	0x5f, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x78, 0x6e, 0x61,
	0x70, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x64,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x15, 0x69, 0x64, 0x2d, 0x53, 0x65,
	0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x42, 0x3c, 0x0a, 0x3a, 0x70, 0x64, 0x75, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x73, 0x6e, 0x74, 0x65, 0x72, 0x6d,
	0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x65, 0x78, 0x74, 0x5f, 0x69, 0x65, 0x73, 0x22, 0xfe,
	0x01, 0x0a, 0x34, 0x50, 0x64, 0x75, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x53, 0x4e, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65,
	0x64, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x49, 0x65, 0x49, 0x44, 0x52, 0x03, 0x26, 0x69, 0x64, 0x12,
	0x37, 0x0a, 0x0b, 0x63, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x0c, 0x26, 0x63, 0x72, 0x69,
	0x74, 0x69, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x65, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x46, 0x2e, 0x78, 0x6e,
	0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x64, 0x75, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x53, 0x4e, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e,
	0x61, 0x74, 0x65, 0x64, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x26, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22,
	0xde, 0x09, 0x0a, 0x2e, 0x50, 0x64, 0x75, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x53, 0x4e, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74,
	0x65, 0x64, 0x12, 0x57, 0x0a, 0x12, 0x75, 0x5f, 0x6c, 0x5f, 0x6e, 0x67, 0x5f, 0x75, 0x5f, 0x74,
	0x6e, 0x6c, 0x61, 0x74, 0x5f, 0x75, 0x70, 0x66, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24,
	0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x70, 0x6f, 0x72, 0x74, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x10, 0x75, 0x4c, 0x2d, 0x4e, 0x47, 0x2d, 0x55, 0x2d,
	0x54, 0x4e, 0x4c, 0x61, 0x74, 0x55, 0x50, 0x46, 0x88, 0x01, 0x01, 0x12, 0x68, 0x0a, 0x1c, 0x70,
	0x64, 0x75, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x64, 0x75, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x48, 0x01, 0x52, 0x19, 0x70, 0x64, 0x75, 0x53, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x70, 0x0a, 0x1a, 0x71, 0x6f, 0x73, 0x5f, 0x66, 0x6c, 0x6f,
	0x77, 0x73, 0x5f, 0x74, 0x6f, 0x5f, 0x62, 0x65, 0x5f, 0x73, 0x65, 0x74, 0x75, 0x70, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x78, 0x6e, 0x61, 0x70,
	0x2e, 0x76, 0x31, 0x2e, 0x51, 0x6f, 0x53, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x54, 0x6f, 0x42, 0x65,
	0x53, 0x65, 0x74, 0x75, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x74, 0x75, 0x70, 0x53, 0x4e,
	0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x48, 0x02, 0x52, 0x16, 0x71, 0x6f,
	0x73, 0x46, 0x6c, 0x6f, 0x77, 0x73, 0x54, 0x6f, 0x42, 0x65, 0x53, 0x65, 0x74, 0x75, 0x70, 0x2d,
	0x4c, 0x69, 0x73, 0x74, 0x88, 0x01, 0x01, 0x12, 0x7c, 0x0a, 0x1d, 0x64, 0x61, 0x74, 0x61, 0x66,
	0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x69, 0x6e, 0x66, 0x6f, 0x66, 0x72, 0x6f,
	0x6d, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32,
	0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x66, 0x6f, 0x72,
	0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x61, 0x6e, 0x64, 0x4f, 0x66, 0x66, 0x6c, 0x6f, 0x61,
	0x64, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x66, 0x72, 0x6f, 0x6d, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x48, 0x03, 0x52, 0x1c, 0x64, 0x61, 0x74, 0x61, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72,
	0x64, 0x69, 0x6e, 0x67, 0x69, 0x6e, 0x66, 0x6f, 0x66, 0x72, 0x6f, 0x6d, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x79, 0x0a, 0x1d, 0x71, 0x6f, 0x73, 0x5f, 0x66, 0x6c, 0x6f,
	0x77, 0x73, 0x5f, 0x74, 0x6f, 0x5f, 0x62, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65,
	0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x78,
	0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x6f, 0x53, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x54,
	0x6f, 0x42, 0x65, 0x53, 0x65, 0x74, 0x75, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x69,
	0x66, 0x69, 0x65, 0x64, 0x53, 0x4e, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64,
	0x48, 0x04, 0x52, 0x19, 0x71, 0x6f, 0x73, 0x46, 0x6c, 0x6f, 0x77, 0x73, 0x54, 0x6f, 0x42, 0x65,
	0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x2d, 0x4c, 0x69, 0x73, 0x74, 0x88, 0x01, 0x01,
	0x12, 0x65, 0x0a, 0x1d, 0x71, 0x6f, 0x5f, 0x73, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x5f, 0x74, 0x6f,
	0x5f, 0x62, 0x65, 0x5f, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x64, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76,
	0x31, 0x2e, 0x51, 0x6f, 0x53, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x77, 0x69,
	0x74, 0x68, 0x43, 0x61, 0x75, 0x73, 0x65, 0x48, 0x05, 0x52, 0x19, 0x71, 0x6f, 0x53, 0x46, 0x6c,
	0x6f, 0x77, 0x73, 0x54, 0x6f, 0x42, 0x65, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x64, 0x2d,
	0x4c, 0x69, 0x73, 0x74, 0x88, 0x01, 0x01, 0x12, 0x6e, 0x0a, 0x18, 0x64, 0x72, 0x62, 0x73, 0x5f,
	0x74, 0x6f, 0x5f, 0x62, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x78, 0x6e, 0x61, 0x70,
	0x2e, 0x76, 0x31, 0x2e, 0x44, 0x72, 0x62, 0x73, 0x54, 0x6f, 0x42, 0x65, 0x4d, 0x6f, 0x64, 0x69,
	0x66, 0x69, 0x65, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64,
	0x53, 0x4e, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x48, 0x06, 0x52, 0x14,
	0x64, 0x72, 0x62, 0x73, 0x54, 0x6f, 0x42, 0x65, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64,
	0x4c, 0x69, 0x73, 0x74, 0x88, 0x01, 0x01, 0x12, 0x4e, 0x0a, 0x14, 0x64, 0x5f, 0x72, 0x62, 0x73,
	0x5f, 0x74, 0x6f, 0x5f, 0x62, 0x65, 0x5f, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x64, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e,
	0x44, 0x72, 0x62, 0x4c, 0x69, 0x73, 0x74, 0x77, 0x69, 0x74, 0x68, 0x43, 0x61, 0x75, 0x73, 0x65,
	0x48, 0x07, 0x52, 0x10, 0x64, 0x52, 0x42, 0x73, 0x54, 0x6f, 0x42, 0x65, 0x52, 0x65, 0x6c, 0x65,
	0x61, 0x73, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x64, 0x0a, 0x0e, 0x69, 0x5f, 0x65, 0x5f, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x3d, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x64, 0x75, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x6f, 0x64, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x53, 0x4e, 0x74, 0x65,
	0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x52, 0x0d,
	0x69, 0x45, 0x2d, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x15, 0x0a,
	0x13, 0x5f, 0x75, 0x5f, 0x6c, 0x5f, 0x6e, 0x67, 0x5f, 0x75, 0x5f, 0x74, 0x6e, 0x6c, 0x61, 0x74,
	0x5f, 0x75, 0x70, 0x66, 0x42, 0x1f, 0x0a, 0x1d, 0x5f, 0x70, 0x64, 0x75, 0x5f, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x42, 0x1d, 0x0a, 0x1b, 0x5f, 0x71, 0x6f, 0x73, 0x5f, 0x66, 0x6c,
	0x6f, 0x77, 0x73, 0x5f, 0x74, 0x6f, 0x5f, 0x62, 0x65, 0x5f, 0x73, 0x65, 0x74, 0x75, 0x70, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x42, 0x20, 0x0a, 0x1e, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x66, 0x6f, 0x72,
	0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x69, 0x6e, 0x66, 0x6f, 0x66, 0x72, 0x6f, 0x6d, 0x5f,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x42, 0x20, 0x0a, 0x1e, 0x5f, 0x71, 0x6f, 0x73, 0x5f, 0x66,
	0x6c, 0x6f, 0x77, 0x73, 0x5f, 0x74, 0x6f, 0x5f, 0x62, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66,
	0x69, 0x65, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x42, 0x20, 0x0a, 0x1e, 0x5f, 0x71, 0x6f, 0x5f,
	0x73, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x5f, 0x74, 0x6f, 0x5f, 0x62, 0x65, 0x5f, 0x72, 0x65, 0x6c,
	0x65, 0x61, 0x73, 0x65, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x42, 0x1b, 0x0a, 0x19, 0x5f, 0x64,
	0x72, 0x62, 0x73, 0x5f, 0x74, 0x6f, 0x5f, 0x62, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69,
	0x65, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x64, 0x5f, 0x72, 0x62,
	0x73, 0x5f, 0x74, 0x6f, 0x5f, 0x62, 0x65, 0x5f, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x64,
	0x22, 0x85, 0x01, 0x0a, 0x29, 0x51, 0x6f, 0x53, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x54, 0x6f, 0x42,
	0x65, 0x53, 0x65, 0x74, 0x75, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69,
	0x65, 0x64, 0x53, 0x4e, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x12, 0x58,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x36, 0x2e,
	0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x6f, 0x53, 0x66, 0x6c, 0x6f, 0x77, 0x73,
	0x54, 0x6f, 0x42, 0x65, 0x53, 0x65, 0x74, 0x75, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x6f, 0x64,
	0x69, 0x66, 0x69, 0x65, 0x64, 0x53, 0x4e, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65,
	0x64, 0x49, 0x74, 0x65, 0x6d, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x92, 0x01, 0x04, 0x08, 0x01, 0x10,
	0x40, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xd7, 0x02, 0x0a, 0x3c, 0x51, 0x6f, 0x53,
	0x66, 0x6c, 0x6f, 0x77, 0x73, 0x54, 0x6f, 0x42, 0x65, 0x53, 0x65, 0x74, 0x75, 0x70, 0x4c, 0x69,
	0x73, 0x74, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x53, 0x4e, 0x74, 0x65, 0x72, 0x6d,
	0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73,
	0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x69, 0x0a, 0x1d, 0x69, 0x64, 0x5f,
	0x74, 0x73, 0x63, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x5f, 0x63, 0x68, 0x61, 0x72, 0x61,
	0x63, 0x74, 0x65, 0x72, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x22, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x73, 0x63, 0x74, 0x72,
	0x61, 0x66, 0x66, 0x69, 0x63, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x69, 0x73,
	0x74, 0x69, 0x63, 0x73, 0x48, 0x00, 0x52, 0x1c, 0x69, 0x64, 0x2d, 0x54, 0x53, 0x43, 0x54, 0x72,
	0x61, 0x66, 0x66, 0x69, 0x63, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x69, 0x73,
	0x74, 0x69, 0x63, 0x73, 0x12, 0x6b, 0x0a, 0x1f, 0x69, 0x64, 0x5f, 0x72, 0x65, 0x64, 0x75, 0x6e,
	0x64, 0x61, 0x6e, 0x74, 0x5f, 0x71, 0x6f, 0x5f, 0x73, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x69, 0x6e,
	0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e,
	0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x64, 0x75, 0x6e, 0x64, 0x61, 0x6e,
	0x74, 0x51, 0x6f, 0x53, 0x66, 0x6c, 0x6f, 0x77, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f,
	0x72, 0x48, 0x00, 0x52, 0x1c, 0x69, 0x64, 0x2d, 0x52, 0x65, 0x64, 0x75, 0x6e, 0x64, 0x61, 0x6e,
	0x74, 0x51, 0x6f, 0x53, 0x46, 0x6c, 0x6f, 0x77, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f,
	0x72, 0x42, 0x3f, 0x0a, 0x3d, 0x71, 0x6f, 0x5f, 0x73, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x5f, 0x74,
	0x6f, 0x5f, 0x62, 0x65, 0x5f, 0x73, 0x65, 0x74, 0x75, 0x70, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f,
	0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x5f, 0x73, 0x6e, 0x74, 0x65, 0x72, 0x6d, 0x69,
	0x6e, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x65, 0x78, 0x74, 0x5f, 0x69,
	0x65, 0x73, 0x22, 0xfc, 0x01, 0x0a, 0x33, 0x51, 0x6f, 0x53, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x54,
	0x6f, 0x42, 0x65, 0x53, 0x65, 0x74, 0x75, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x69,
	0x66, 0x69, 0x65, 0x64, 0x53, 0x4e, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64,
	0x49, 0x74, 0x65, 0x6d, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31,
	0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x49, 0x65, 0x49, 0x44, 0x52, 0x03, 0x26,
	0x69, 0x64, 0x12, 0x37, 0x0a, 0x0b, 0x63, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x69, 0x74,
	0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x0c, 0x26,
	0x63, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x64, 0x0a, 0x09, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x45,
	0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x6f, 0x53, 0x66, 0x6c, 0x6f, 0x77,
	0x73, 0x54, 0x6f, 0x42, 0x65, 0x53, 0x65, 0x74, 0x75, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x6f,
	0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x53, 0x4e, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74,
	0x65, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x26, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x22, 0xca, 0x04, 0x0a, 0x2d, 0x51, 0x6f, 0x53, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x54, 0x6f,
	0x42, 0x65, 0x53, 0x65, 0x74, 0x75, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x69, 0x66,
	0x69, 0x65, 0x64, 0x53, 0x4e, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x49,
	0x74, 0x65, 0x6d, 0x12, 0x2c, 0x0a, 0x03, 0x71, 0x66, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x6f, 0x53, 0x66, 0x6c,
	0x6f, 0x77, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x03, 0x71, 0x66,
	0x69, 0x12, 0x69, 0x0a, 0x1d, 0x71, 0x6f, 0x73, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x6c, 0x65,
	0x76, 0x65, 0x6c, 0x5f, 0x71, 0x6f, 0x5f, 0x73, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65,
	0x72, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e,
	0x76, 0x31, 0x2e, 0x51, 0x6f, 0x53, 0x66, 0x6c, 0x6f, 0x77, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x51,
	0x6f, 0x53, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x48, 0x00, 0x52, 0x19,
	0x71, 0x6f, 0x73, 0x46, 0x6c, 0x6f, 0x77, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x51, 0x6f, 0x53, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x88, 0x01, 0x01, 0x12, 0x55, 0x0a, 0x18,
	0x6f, 0x66, 0x66, 0x65, 0x72, 0x65, 0x64, 0x5f, 0x67, 0x62, 0x72, 0x71, 0x6f, 0x5f, 0x73, 0x66,
	0x6c, 0x6f, 0x77, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x62, 0x72, 0x71, 0x6f, 0x53, 0x66,
	0x6c, 0x6f, 0x77, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x01, 0x52, 0x15, 0x6f, 0x66, 0x66, 0x65, 0x72,
	0x65, 0x64, 0x47, 0x42, 0x52, 0x51, 0x6f, 0x53, 0x46, 0x6c, 0x6f, 0x77, 0x49, 0x6e, 0x66, 0x6f,
	0x88, 0x01, 0x01, 0x12, 0x65, 0x0a, 0x1b, 0x71, 0x6f, 0x73, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x5f,
	0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e,
	0x76, 0x31, 0x2e, 0x51, 0x6f, 0x53, 0x66, 0x6c, 0x6f, 0x77, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e,
	0x67, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x02, 0x52, 0x18, 0x71,
	0x6f, 0x73, 0x46, 0x6c, 0x6f, 0x77, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x64,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x63, 0x0a, 0x0e, 0x69, 0x5f,
	0x65, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x6f, 0x53,
	0x66, 0x6c, 0x6f, 0x77, 0x73, 0x54, 0x6f, 0x42, 0x65, 0x53, 0x65, 0x74, 0x75, 0x70, 0x4c, 0x69,
	0x73, 0x74, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x53, 0x4e, 0x74, 0x65, 0x72, 0x6d,
	0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73,
	0x52, 0x0d, 0x69, 0x45, 0x2d, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x42,
	0x20, 0x0a, 0x1e, 0x5f, 0x71, 0x6f, 0x73, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x6c, 0x65, 0x76,
	0x65, 0x6c, 0x5f, 0x71, 0x6f, 0x5f, 0x73, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72,
	0x73, 0x42, 0x1b, 0x0a, 0x19, 0x5f, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x65, 0x64, 0x5f, 0x67, 0x62,
	0x72, 0x71, 0x6f, 0x5f, 0x73, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x42, 0x1e,
	0x0a, 0x1c, 0x5f, 0x71, 0x6f, 0x73, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x6d, 0x61, 0x70, 0x70,
	0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x83,
	0x01, 0x0a, 0x28, 0x44, 0x72, 0x62, 0x73, 0x54, 0x6f, 0x42, 0x65, 0x4d, 0x6f, 0x64, 0x69, 0x66,
	0x69, 0x65, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x53,
	0x4e, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x12, 0x57, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x78, 0x6e, 0x61,
	0x70, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x72, 0x62, 0x73, 0x54, 0x6f, 0x42, 0x65, 0x4d, 0x6f, 0x64,
	0x69, 0x66, 0x69, 0x65, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65,
	0x64, 0x53, 0x4e, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x49, 0x74, 0x65,
	0x6d, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x92, 0x01, 0x04, 0x08, 0x01, 0x10, 0x20, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x22, 0x62, 0x0a, 0x32, 0x44, 0x72, 0x62, 0x73, 0x54, 0x6f, 0x42, 0x65,
	0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x69,
	0x66, 0x69, 0x65, 0x64, 0x53, 0x4e, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64,
	0x49, 0x74, 0x65, 0x6d, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xb9, 0x04, 0x0a, 0x2c, 0x44, 0x72, 0x62,
	0x73, 0x54, 0x6f, 0x42, 0x65, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x4c, 0x69, 0x73,
	0x74, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x53, 0x4e, 0x74, 0x65, 0x72, 0x6d, 0x69,
	0x6e, 0x61, 0x74, 0x65, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x26, 0x0a, 0x06, 0x64, 0x72, 0x62,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x78, 0x6e, 0x61, 0x70,
	0x2e, 0x76, 0x31, 0x2e, 0x44, 0x72, 0x62, 0x49, 0x44, 0x52, 0x06, 0x64, 0x72, 0x62, 0x2d, 0x49,
	0x44, 0x12, 0x58, 0x0a, 0x15, 0x6d, 0x5f, 0x6e, 0x5f, 0x64, 0x6c, 0x5f, 0x73, 0x63, 0x67, 0x5f,
	0x75, 0x70, 0x5f, 0x74, 0x6e, 0x6c, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73,
	0x48, 0x00, 0x52, 0x14, 0x6d, 0x4e, 0x2d, 0x44, 0x4c, 0x2d, 0x53, 0x43, 0x47, 0x2d, 0x55, 0x50,
	0x2d, 0x54, 0x4e, 0x4c, 0x49, 0x6e, 0x66, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x6b, 0x0a, 0x1e, 0x73,
	0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x5f, 0x6d, 0x6e, 0x5f, 0x64, 0x6c, 0x5f, 0x73,
	0x63, 0x67, 0x5f, 0x75, 0x70, 0x5f, 0x74, 0x6e, 0x6c, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74,
	0x65, 0x72, 0x73, 0x48, 0x01, 0x52, 0x1e, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79,
	0x2d, 0x4d, 0x4e, 0x2d, 0x44, 0x4c, 0x2d, 0x53, 0x43, 0x47, 0x2d, 0x55, 0x50, 0x2d, 0x54, 0x4e,
	0x4c, 0x49, 0x6e, 0x66, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x05, 0x6c, 0x5f, 0x63, 0x69,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76,
	0x31, 0x2e, 0x4c, 0x63, 0x69, 0x64, 0x48, 0x02, 0x52, 0x04, 0x6c, 0x43, 0x49, 0x44, 0x88, 0x01,
	0x01, 0x12, 0x37, 0x0a, 0x0a, 0x72, 0x6c, 0x63, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e,
	0x52, 0x6c, 0x63, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x48, 0x03, 0x52, 0x0a, 0x72, 0x6c, 0x63,
	0x2d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01, 0x01, 0x12, 0x62, 0x0a, 0x0e, 0x69, 0x5f,
	0x65, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x06, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x72, 0x62,
	0x73, 0x54, 0x6f, 0x42, 0x65, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x4c, 0x69, 0x73,
	0x74, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x53, 0x4e, 0x74, 0x65, 0x72, 0x6d, 0x69,
	0x6e, 0x61, 0x74, 0x65, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x52,
	0x0d, 0x69, 0x45, 0x2d, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x18,
	0x0a, 0x16, 0x5f, 0x6d, 0x5f, 0x6e, 0x5f, 0x64, 0x6c, 0x5f, 0x73, 0x63, 0x67, 0x5f, 0x75, 0x70,
	0x5f, 0x74, 0x6e, 0x6c, 0x69, 0x6e, 0x66, 0x6f, 0x42, 0x21, 0x0a, 0x1f, 0x5f, 0x73, 0x65, 0x63,
	0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x5f, 0x6d, 0x6e, 0x5f, 0x64, 0x6c, 0x5f, 0x73, 0x63, 0x67,
	0x5f, 0x75, 0x70, 0x5f, 0x74, 0x6e, 0x6c, 0x69, 0x6e, 0x66, 0x6f, 0x42, 0x08, 0x0a, 0x06, 0x5f,
	0x6c, 0x5f, 0x63, 0x69, 0x64, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x72, 0x6c, 0x63, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x22, 0x9b, 0x03, 0x0a, 0x45, 0x50, 0x64, 0x75, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x6f, 0x64, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x53, 0x4e, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x45,
	0x78, 0x74, 0x49, 0x65, 0x73, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4c,
	0x0a, 0x17, 0x69, 0x64, 0x5f, 0x64, 0x72, 0x62, 0x5f, 0x69, 0x64, 0x73, 0x5f, 0x74, 0x61, 0x6b,
	0x65, 0x6e, 0x69, 0x6e, 0x74, 0x6f, 0x75, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x10, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x72, 0x62, 0x4c, 0x69, 0x73,
	0x74, 0x48, 0x00, 0x52, 0x17, 0x69, 0x64, 0x2d, 0x44, 0x52, 0x42, 0x2d, 0x49, 0x44, 0x73, 0x2d,
	0x74, 0x61, 0x6b, 0x65, 0x6e, 0x69, 0x6e, 0x74, 0x6f, 0x75, 0x73, 0x65, 0x12, 0x73, 0x0a, 0x21,
	0x69, 0x64, 0x5f, 0x72, 0x65, 0x64, 0x75, 0x6e, 0x64, 0x61, 0x6e, 0x74, 0x5f, 0x64, 0x6c, 0x5f,
	0x6e, 0x67, 0x5f, 0x75, 0x5f, 0x74, 0x6e, 0x6c, 0x61, 0x74, 0x5f, 0x6e, 0x67, 0x5f, 0x72, 0x61,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76,
	0x31, 0x2e, 0x55, 0x70, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x4c, 0x61, 0x79,
	0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52,
	0x20, 0x69, 0x64, 0x2d, 0x52, 0x65, 0x64, 0x75, 0x6e, 0x64, 0x61, 0x6e, 0x74, 0x2d, 0x44, 0x4c,
	0x2d, 0x4e, 0x47, 0x2d, 0x55, 0x2d, 0x54, 0x4e, 0x4c, 0x61, 0x74, 0x4e, 0x47, 0x2d, 0x52, 0x41,
	0x4e, 0x12, 0x48, 0x0a, 0x12, 0x69, 0x64, 0x5f, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79,
	0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x48, 0x00, 0x52, 0x11, 0x69, 0x64, 0x2d, 0x53, 0x65, 0x63,
	0x75, 0x72, 0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x42, 0x45, 0x0a, 0x43, 0x70,
	0x64, 0x75, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x73, 0x6e,
	0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x65, 0x78, 0x74, 0x5f, 0x69,
	0x65, 0x73, 0x22, 0x8e, 0x02, 0x0a, 0x3c, 0x50, 0x64, 0x75, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x53, 0x4e, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x45, 0x78, 0x74,
	0x49, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x49, 0x65, 0x49, 0x44, 0x52, 0x03, 0x26, 0x69, 0x64, 0x12, 0x37, 0x0a, 0x0b, 0x63,
	0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x14, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x69, 0x74, 0x69,
	0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x0c, 0x26, 0x63, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61,
	0x6c, 0x69, 0x74, 0x79, 0x12, 0x6d, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4e, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76,
	0x31, 0x2e, 0x50, 0x64, 0x75, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x53, 0x4e, 0x74, 0x65,
	0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x45, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x26, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x22, 0xb5, 0x09, 0x0a, 0x36, 0x50, 0x64, 0x75, 0x73, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x53, 0x4e, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x12, 0x5d,
	0x0a, 0x15, 0x64, 0x5f, 0x6c, 0x5f, 0x6e, 0x67, 0x5f, 0x75, 0x5f, 0x74, 0x6e, 0x6c, 0x61, 0x74,
	0x5f, 0x6e, 0x67, 0x5f, 0x72, 0x61, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e,
	0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70,
	0x6f, 0x72, 0x74, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x13, 0x64, 0x4c, 0x2d, 0x4e, 0x47, 0x2d, 0x55, 0x2d, 0x54,
	0x4e, 0x4c, 0x61, 0x74, 0x4e, 0x47, 0x2d, 0x52, 0x41, 0x4e, 0x88, 0x01, 0x01, 0x12, 0x62, 0x0a,
	0x11, 0x64, 0x5f, 0x72, 0x62, 0x73, 0x5f, 0x74, 0x6f, 0x5f, 0x62, 0x65, 0x5f, 0x73, 0x65, 0x74,
	0x75, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e,
	0x76, 0x31, 0x2e, 0x44, 0x72, 0x62, 0x73, 0x54, 0x6f, 0x42, 0x65, 0x53, 0x65, 0x74, 0x75, 0x70,
	0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x74, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x53, 0x4e, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x48, 0x01, 0x52,
	0x0d, 0x64, 0x52, 0x42, 0x73, 0x54, 0x6f, 0x42, 0x65, 0x53, 0x65, 0x74, 0x75, 0x70, 0x88, 0x01,
	0x01, 0x12, 0x70, 0x0a, 0x19, 0x64, 0x61, 0x74, 0x61, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64,
	0x69, 0x6e, 0x67, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x44,
	0x61, 0x74, 0x61, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66,
	0x6f, 0x46, 0x72, 0x6f, 0x6d, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x4e, 0x67, 0x72, 0x61, 0x6e,
	0x6e, 0x6f, 0x64, 0x65, 0x48, 0x02, 0x52, 0x18, 0x64, 0x61, 0x74, 0x61, 0x66, 0x6f, 0x72, 0x77,
	0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x69, 0x6e, 0x66, 0x6f, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x88, 0x01, 0x01, 0x12, 0x72, 0x0a, 0x14, 0x64, 0x5f, 0x72, 0x62, 0x73, 0x5f, 0x74, 0x6f, 0x5f,
	0x62, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x3d, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x72, 0x62, 0x73,
	0x54, 0x6f, 0x42, 0x65, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x4c, 0x69, 0x73, 0x74,
	0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x53, 0x4e, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64,
	0x48, 0x03, 0x52, 0x10, 0x64, 0x52, 0x42, 0x73, 0x54, 0x6f, 0x42, 0x65, 0x4d, 0x6f, 0x64, 0x69,
	0x66, 0x69, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x4e, 0x0a, 0x14, 0x64, 0x5f, 0x72, 0x62, 0x73,
	0x5f, 0x74, 0x6f, 0x5f, 0x62, 0x65, 0x5f, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e,
	0x44, 0x72, 0x62, 0x4c, 0x69, 0x73, 0x74, 0x77, 0x69, 0x74, 0x68, 0x43, 0x61, 0x75, 0x73, 0x65,
	0x48, 0x04, 0x52, 0x10, 0x64, 0x52, 0x42, 0x73, 0x54, 0x6f, 0x42, 0x65, 0x52, 0x65, 0x6c, 0x65,
	0x61, 0x73, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x7c, 0x0a, 0x1d, 0x64, 0x61, 0x74, 0x61, 0x66,
	0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x69, 0x6e, 0x66, 0x6f, 0x66, 0x72, 0x6f,
	0x6d, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32,
	0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x66, 0x6f, 0x72,
	0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x61, 0x6e, 0x64, 0x4f, 0x66, 0x66, 0x6c, 0x6f, 0x61,
	0x64, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x66, 0x72, 0x6f, 0x6d, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x48, 0x05, 0x52, 0x1c, 0x64, 0x61, 0x74, 0x61, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72,
	0x64, 0x69, 0x6e, 0x67, 0x69, 0x6e, 0x66, 0x6f, 0x66, 0x72, 0x6f, 0x6d, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x67, 0x0a, 0x1e, 0x71, 0x6f, 0x73, 0x5f, 0x66, 0x6c, 0x6f,
	0x77, 0x73, 0x5f, 0x6e, 0x6f, 0x74, 0x5f, 0x61, 0x64, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x5f,
	0x74, 0x62, 0x61, 0x64, 0x64, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x6f, 0x53, 0x66, 0x6c, 0x6f, 0x77, 0x73,
	0x4c, 0x69, 0x73, 0x74, 0x77, 0x69, 0x74, 0x68, 0x43, 0x61, 0x75, 0x73, 0x65, 0x48, 0x06, 0x52,
	0x1a, 0x71, 0x6f, 0x73, 0x46, 0x6c, 0x6f, 0x77, 0x73, 0x4e, 0x6f, 0x74, 0x41, 0x64, 0x6d, 0x69,
	0x74, 0x74, 0x65, 0x64, 0x54, 0x42, 0x41, 0x64, 0x64, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x51,
	0x0a, 0x12, 0x71, 0x6f, 0x73, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x5f, 0x72, 0x65, 0x6c, 0x65,
	0x61, 0x73, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x78, 0x6e, 0x61,
	0x70, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x6f, 0x53, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x4c, 0x69, 0x73,
	0x74, 0x77, 0x69, 0x74, 0x68, 0x43, 0x61, 0x75, 0x73, 0x65, 0x48, 0x07, 0x52, 0x10, 0x71, 0x6f,
	0x73, 0x46, 0x6c, 0x6f, 0x77, 0x73, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x64, 0x88, 0x01,
	0x01, 0x12, 0x6c, 0x0a, 0x0e, 0x69, 0x5f, 0x65, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x45, 0x2e, 0x78, 0x6e, 0x61, 0x70,
	0x2e, 0x76, 0x31, 0x2e, 0x50, 0x64, 0x75, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x53, 0x4e,
	0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73,
	0x52, 0x0d, 0x69, 0x45, 0x2d, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x42,
	0x18, 0x0a, 0x16, 0x5f, 0x64, 0x5f, 0x6c, 0x5f, 0x6e, 0x67, 0x5f, 0x75, 0x5f, 0x74, 0x6e, 0x6c,
	0x61, 0x74, 0x5f, 0x6e, 0x67, 0x5f, 0x72, 0x61, 0x6e, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x64, 0x5f,
	0x72, 0x62, 0x73, 0x5f, 0x74, 0x6f, 0x5f, 0x62, 0x65, 0x5f, 0x73, 0x65, 0x74, 0x75, 0x70, 0x42,
	0x1c, 0x0a, 0x1a, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69,
	0x6e, 0x67, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x42, 0x17, 0x0a,
	0x15, 0x5f, 0x64, 0x5f, 0x72, 0x62, 0x73, 0x5f, 0x74, 0x6f, 0x5f, 0x62, 0x65, 0x5f, 0x6d, 0x6f,
	0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x64, 0x5f, 0x72, 0x62, 0x73,
	0x5f, 0x74, 0x6f, 0x5f, 0x62, 0x65, 0x5f, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x64, 0x42,
	0x20, 0x0a, 0x1e, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69,
	0x6e, 0x67, 0x69, 0x6e, 0x66, 0x6f, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x42, 0x21, 0x0a, 0x1f, 0x5f, 0x71, 0x6f, 0x73, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x5f,
	0x6e, 0x6f, 0x74, 0x5f, 0x61, 0x64, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x62, 0x61,
	0x64, 0x64, 0x65, 0x64, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x71, 0x6f, 0x73, 0x5f, 0x66, 0x6c, 0x6f,
	0x77, 0x73, 0x5f, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x64, 0x22, 0x9b, 0x01, 0x0a, 0x34,
	0x44, 0x72, 0x62, 0x73, 0x54, 0x6f, 0x42, 0x65, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64,
	0x4c, 0x69, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x4e, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e,
	0x61, 0x74, 0x65, 0x64, 0x12, 0x63, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x72,
	0x62, 0x73, 0x54, 0x6f, 0x42, 0x65, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x4c, 0x69,
	0x73, 0x74, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x4e, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74,
	0x65, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x92, 0x01, 0x04, 0x08, 0x01,
	0x10, 0x20, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xce, 0x05, 0x0a, 0x47, 0x44, 0x72,
	0x62, 0x73, 0x54, 0x6f, 0x42, 0x65, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x4c, 0x69,
	0x73, 0x74, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x4e, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74,
	0x65, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x85, 0x01, 0x0a, 0x27, 0x69, 0x64, 0x5f, 0x61, 0x64, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x70, 0x64, 0x63, 0x70, 0x5f, 0x64, 0x75, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x6e, 0x6c, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76,
	0x31, 0x2e, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x50, 0x44, 0x63, 0x70,
	0x44, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x4e, 0x6c, 0x4c, 0x69,
	0x73, 0x74, 0x48, 0x00, 0x52, 0x27, 0x69, 0x64, 0x2d, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x61, 0x6c, 0x2d, 0x50, 0x44, 0x43, 0x50, 0x2d, 0x44, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x54, 0x4e, 0x4c, 0x2d, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x69, 0x0a,
	0x1d, 0x69, 0x64, 0x5f, 0x72, 0x6c, 0x63, 0x64, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x52,
	0x6c, 0x63, 0x64, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x1c, 0x69, 0x64, 0x2d, 0x52,
	0x4c, 0x43, 0x44, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x70, 0x0a, 0x22, 0x69, 0x64, 0x5f, 0x73,
	0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x5f, 0x73, 0x6e, 0x5f, 0x75, 0x6c, 0x5f, 0x70,
	0x64, 0x63, 0x70, 0x5f, 0x75, 0x70, 0x5f, 0x74, 0x6e, 0x6c, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x55,
	0x70, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65,
	0x74, 0x65, 0x72, 0x73, 0x48, 0x00, 0x52, 0x22, 0x69, 0x64, 0x2d, 0x73, 0x65, 0x63, 0x6f, 0x6e,
	0x64, 0x61, 0x72, 0x79, 0x2d, 0x53, 0x4e, 0x2d, 0x55, 0x4c, 0x2d, 0x50, 0x44, 0x43, 0x50, 0x2d,
	0x55, 0x50, 0x2d, 0x54, 0x4e, 0x4c, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x73, 0x0a, 0x21, 0x69, 0x64,
	0x5f, 0x70, 0x64, 0x63, 0x70, 0x5f, 0x64, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e,
	0x50, 0x64, 0x63, 0x70, 0x64, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x1f,
	0x69, 0x64, 0x2d, 0x70, 0x64, 0x63, 0x70, 0x44, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x5d, 0x0a, 0x19, 0x69, 0x64, 0x5f, 0x64, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x75, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x48, 0x00, 0x52, 0x18, 0x69, 0x64, 0x2d, 0x64, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x4a,
	0x0a, 0x48, 0x64, 0x72, 0x62, 0x73, 0x5f, 0x74, 0x6f, 0x5f, 0x62, 0x65, 0x5f, 0x6d, 0x6f, 0x64,
	0x69, 0x66, 0x69, 0x65, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x5f, 0x73, 0x6e, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x69, 0x74,
	0x65, 0x6d, 0x5f, 0x65, 0x78, 0x74, 0x5f, 0x69, 0x65, 0x73, 0x22, 0x92, 0x02, 0x0a, 0x3e, 0x44,
	0x72, 0x62, 0x73, 0x54, 0x6f, 0x42, 0x65, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x4c,
	0x69, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x4e, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61,
	0x74, 0x65, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x12, 0x26, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x78, 0x6e, 0x61, 0x70,
	0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x49, 0x65, 0x49, 0x44,
	0x52, 0x03, 0x26, 0x69, 0x64, 0x12, 0x37, 0x0a, 0x0b, 0x63, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61,
	0x6c, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x78, 0x6e, 0x61,
	0x70, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79,
	0x52, 0x0c, 0x26, 0x63, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x6f,
	0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x50, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x72, 0x62, 0x73,
	0x54, 0x6f, 0x42, 0x65, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x4c, 0x69, 0x73, 0x74,
	0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x53, 0x4e, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64,
	0x49, 0x74, 0x65, 0x6d, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x26, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22,
	0xfc, 0x04, 0x0a, 0x38, 0x44, 0x72, 0x62, 0x73, 0x54, 0x6f, 0x42, 0x65, 0x4d, 0x6f, 0x64, 0x69,
	0x66, 0x69, 0x65, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x4e, 0x74, 0x65,
	0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x26, 0x0a, 0x06,
	0x64, 0x72, 0x62, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x78,
	0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x72, 0x62, 0x49, 0x44, 0x52, 0x06, 0x64, 0x72,
	0x62, 0x2d, 0x49, 0x44, 0x12, 0x5a, 0x0a, 0x16, 0x73, 0x5f, 0x6e, 0x5f, 0x75, 0x6c, 0x5f, 0x70,
	0x64, 0x63, 0x70, 0x5f, 0x75, 0x70, 0x5f, 0x74, 0x6e, 0x6c, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x55,
	0x70, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65,
	0x74, 0x65, 0x72, 0x73, 0x48, 0x00, 0x52, 0x15, 0x73, 0x4e, 0x2d, 0x55, 0x4c, 0x2d, 0x50, 0x44,
	0x43, 0x50, 0x2d, 0x55, 0x50, 0x2d, 0x54, 0x4e, 0x4c, 0x49, 0x6e, 0x66, 0x6f, 0x88, 0x01, 0x01,
	0x12, 0x43, 0x0a, 0x09, 0x64, 0x5f, 0x72, 0x62, 0x5f, 0x71, 0x6f, 0x5f, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x6f,
	0x53, 0x66, 0x6c, 0x6f, 0x77, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x51, 0x6f, 0x53, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x48, 0x01, 0x52, 0x07, 0x64, 0x52, 0x42, 0x2d, 0x51,
	0x6f, 0x53, 0x88, 0x01, 0x01, 0x12, 0xa6, 0x01, 0x0a, 0x32, 0x71, 0x6f, 0x5f, 0x73, 0x66, 0x6c,
	0x6f, 0x77, 0x73, 0x5f, 0x6d, 0x61, 0x70, 0x70, 0x65, 0x64, 0x74, 0x6f, 0x5f, 0x64, 0x72, 0x62,
	0x5f, 0x73, 0x65, 0x74, 0x75, 0x70, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f,
	0x73, 0x6e, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x35, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x6f, 0x53,
	0x66, 0x6c, 0x6f, 0x77, 0x73, 0x4d, 0x61, 0x70, 0x70, 0x65, 0x64, 0x74, 0x6f, 0x44, 0x72, 0x62,
	0x53, 0x65, 0x74, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x4e, 0x74,
	0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x48, 0x02, 0x52, 0x2e, 0x71, 0x6f, 0x53,
	0x46, 0x6c, 0x6f, 0x77, 0x73, 0x4d, 0x61, 0x70, 0x70, 0x65, 0x64, 0x74, 0x6f, 0x44, 0x52, 0x42,
	0x2d, 0x53, 0x65, 0x74, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2d, 0x53,
	0x4e, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x6e,
	0x0a, 0x0e, 0x69, 0x5f, 0x65, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x47, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31,
	0x2e, 0x44, 0x72, 0x62, 0x73, 0x54, 0x6f, 0x42, 0x65, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65,
	0x64, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x4e, 0x74, 0x65, 0x72, 0x6d, 0x69,
	0x6e, 0x61, 0x74, 0x65, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x52,
	0x0d, 0x69, 0x45, 0x2d, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x19,
	0x0a, 0x17, 0x5f, 0x73, 0x5f, 0x6e, 0x5f, 0x75, 0x6c, 0x5f, 0x70, 0x64, 0x63, 0x70, 0x5f, 0x75,
	0x70, 0x5f, 0x74, 0x6e, 0x6c, 0x69, 0x6e, 0x66, 0x6f, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x64, 0x5f,
	0x72, 0x62, 0x5f, 0x71, 0x6f, 0x5f, 0x73, 0x42, 0x35, 0x0a, 0x33, 0x5f, 0x71, 0x6f, 0x5f, 0x73,
	0x66, 0x6c, 0x6f, 0x77, 0x73, 0x5f, 0x6d, 0x61, 0x70, 0x70, 0x65, 0x64, 0x74, 0x6f, 0x5f, 0x64,
	0x72, 0x62, 0x5f, 0x73, 0x65, 0x74, 0x75, 0x70, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x5f, 0x73, 0x6e, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x22, 0x64,
	0x0a, 0x34, 0x50, 0x64, 0x75, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x6e, 0x66, 0x6f, 0x4d, 0x4e, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64,
	0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x22, 0xb9, 0x04, 0x0a, 0x2e, 0x50, 0x64, 0x75, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x6f, 0x64, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x4d, 0x4e, 0x74, 0x65, 0x72,
	0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x12, 0x41, 0x0a, 0x10, 0x70, 0x64, 0x75, 0x5f, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x17, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x64, 0x75, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0e, 0x70, 0x64, 0x75, 0x53,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x5a, 0x0a, 0x11, 0x64, 0x5f,
	0x72, 0x62, 0x73, 0x5f, 0x74, 0x6f, 0x5f, 0x62, 0x65, 0x5f, 0x73, 0x65, 0x74, 0x75, 0x70, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e,
	0x44, 0x72, 0x62, 0x73, 0x54, 0x6f, 0x42, 0x65, 0x53, 0x65, 0x74, 0x75, 0x70, 0x4c, 0x69, 0x73,
	0x74, 0x53, 0x65, 0x74, 0x75, 0x70, 0x4d, 0x4e, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74,
	0x65, 0x64, 0x48, 0x00, 0x52, 0x0d, 0x64, 0x52, 0x42, 0x73, 0x54, 0x6f, 0x42, 0x65, 0x53, 0x65,
	0x74, 0x75, 0x70, 0x88, 0x01, 0x01, 0x12, 0x6a, 0x0a, 0x14, 0x64, 0x5f, 0x72, 0x62, 0x73, 0x5f,
	0x74, 0x6f, 0x5f, 0x62, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x44,
	0x72, 0x62, 0x73, 0x54, 0x6f, 0x42, 0x65, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x4c,
	0x69, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d,
	0x4e, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x48, 0x01, 0x52, 0x10, 0x64,
	0x52, 0x42, 0x73, 0x54, 0x6f, 0x42, 0x65, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x88,
	0x01, 0x01, 0x12, 0x4e, 0x0a, 0x14, 0x64, 0x5f, 0x72, 0x62, 0x73, 0x5f, 0x74, 0x6f, 0x5f, 0x62,
	0x65, 0x5f, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x72, 0x62, 0x4c, 0x69,
	0x73, 0x74, 0x77, 0x69, 0x74, 0x68, 0x43, 0x61, 0x75, 0x73, 0x65, 0x48, 0x02, 0x52, 0x10, 0x64,
	0x52, 0x42, 0x73, 0x54, 0x6f, 0x42, 0x65, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x64, 0x88,
	0x01, 0x01, 0x12, 0x64, 0x0a, 0x0e, 0x69, 0x5f, 0x65, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x78, 0x6e, 0x61,
	0x70, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x64, 0x75, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x4d, 0x4e, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61,
	0x74, 0x65, 0x64, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x52, 0x0d, 0x69, 0x45, 0x2d, 0x45, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x64, 0x5f, 0x72,
	0x62, 0x73, 0x5f, 0x74, 0x6f, 0x5f, 0x62, 0x65, 0x5f, 0x73, 0x65, 0x74, 0x75, 0x70, 0x42, 0x17,
	0x0a, 0x15, 0x5f, 0x64, 0x5f, 0x72, 0x62, 0x73, 0x5f, 0x74, 0x6f, 0x5f, 0x62, 0x65, 0x5f, 0x6d,
	0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x64, 0x5f, 0x72, 0x62,
	0x73, 0x5f, 0x74, 0x6f, 0x5f, 0x62, 0x65, 0x5f, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x64,
	0x22, 0x8b, 0x01, 0x0a, 0x2c, 0x44, 0x72, 0x62, 0x73, 0x54, 0x6f, 0x42, 0x65, 0x4d, 0x6f, 0x64,
	0x69, 0x66, 0x69, 0x65, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x4e, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65,
	0x64, 0x12, 0x5b, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x39, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x72, 0x62, 0x73, 0x54,
	0x6f, 0x42, 0x65, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x4d,
	0x6f, 0x64, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x4e, 0x74, 0x65, 0x72,
	0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x42, 0x0a, 0xfa, 0x42, 0x07,
	0x92, 0x01, 0x04, 0x08, 0x01, 0x10, 0x20, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xf7,
	0x02, 0x0a, 0x3f, 0x44, 0x72, 0x62, 0x73, 0x54, 0x6f, 0x42, 0x65, 0x4d, 0x6f, 0x64, 0x69, 0x66,
	0x69, 0x65, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x4d, 0x4e, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x49,
	0x74, 0x65, 0x6d, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x85, 0x01, 0x0a, 0x27, 0x69, 0x64, 0x5f, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x70, 0x64, 0x63, 0x70, 0x5f, 0x64, 0x75, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x6e, 0x6c, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x41,
	0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x50, 0x44, 0x63, 0x70, 0x44, 0x75, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x4e, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x48,
	0x00, 0x52, 0x27, 0x69, 0x64, 0x2d, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c,
	0x2d, 0x50, 0x44, 0x43, 0x50, 0x2d, 0x44, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2d, 0x54, 0x4e, 0x4c, 0x2d, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x69, 0x0a, 0x1d, 0x69, 0x64,
	0x5f, 0x72, 0x6c, 0x63, 0x64, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x6c, 0x63, 0x64,
	0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x1c, 0x69, 0x64, 0x2d, 0x52, 0x4c, 0x43, 0x44,
	0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x41, 0x0a, 0x3f, 0x64, 0x72, 0x62, 0x73, 0x5f, 0x74, 0x6f,
	0x5f, 0x62, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d,
	0x6e, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x69, 0x74, 0x65, 0x6d,
	0x5f, 0x65, 0x78, 0x74, 0x5f, 0x69, 0x65, 0x73, 0x22, 0x82, 0x02, 0x0a, 0x36, 0x44, 0x72, 0x62,
	0x73, 0x54, 0x6f, 0x42, 0x65, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x4c, 0x69, 0x73,
	0x74, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x4e, 0x74,
	0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x45, 0x78, 0x74,
	0x49, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x49, 0x65, 0x49, 0x44, 0x52, 0x03, 0x26, 0x69, 0x64, 0x12, 0x37, 0x0a, 0x0b, 0x63,
	0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x14, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x69, 0x74, 0x69,
	0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x0c, 0x26, 0x63, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61,
	0x6c, 0x69, 0x74, 0x79, 0x12, 0x67, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x48, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76,
	0x31, 0x2e, 0x44, 0x72, 0x62, 0x73, 0x54, 0x6f, 0x42, 0x65, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69,
	0x65, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x4d, 0x4e, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x49, 0x74,
	0x65, 0x6d, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x0a, 0x26, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xcb, 0x08,
	0x0a, 0x30, 0x44, 0x72, 0x62, 0x73, 0x54, 0x6f, 0x42, 0x65, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69,
	0x65, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x4d, 0x4e, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x49, 0x74,
	0x65, 0x6d, 0x12, 0x26, 0x0a, 0x06, 0x64, 0x72, 0x62, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x72, 0x62,
	0x49, 0x44, 0x52, 0x06, 0x64, 0x72, 0x62, 0x2d, 0x49, 0x44, 0x12, 0x5a, 0x0a, 0x16, 0x6d, 0x5f,
	0x6e, 0x5f, 0x75, 0x6c, 0x5f, 0x70, 0x64, 0x63, 0x70, 0x5f, 0x75, 0x70, 0x5f, 0x74, 0x6e, 0x6c,
	0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x78, 0x6e, 0x61,
	0x70, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x48, 0x00, 0x52, 0x15, 0x6d, 0x4e,
	0x2d, 0x55, 0x4c, 0x2d, 0x50, 0x44, 0x43, 0x50, 0x2d, 0x55, 0x50, 0x2d, 0x54, 0x4e, 0x4c, 0x49,
	0x6e, 0x66, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x43, 0x0a, 0x09, 0x64, 0x5f, 0x72, 0x62, 0x5f, 0x71,
	0x6f, 0x5f, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x78, 0x6e, 0x61, 0x70,
	0x2e, 0x76, 0x31, 0x2e, 0x51, 0x6f, 0x53, 0x66, 0x6c, 0x6f, 0x77, 0x4c, 0x65, 0x76, 0x65, 0x6c,
	0x51, 0x6f, 0x53, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x48, 0x01, 0x52,
	0x07, 0x64, 0x52, 0x42, 0x2d, 0x51, 0x6f, 0x53, 0x88, 0x01, 0x01, 0x12, 0x6d, 0x0a, 0x1f, 0x73,
	0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x5f, 0x6d, 0x6e, 0x5f, 0x75, 0x6c, 0x5f, 0x70,
	0x64, 0x63, 0x70, 0x5f, 0x75, 0x70, 0x5f, 0x74, 0x6e, 0x6c, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x55,
	0x70, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65,
	0x74, 0x65, 0x72, 0x73, 0x48, 0x02, 0x52, 0x1f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72,
	0x79, 0x2d, 0x4d, 0x4e, 0x2d, 0x55, 0x4c, 0x2d, 0x50, 0x44, 0x43, 0x50, 0x2d, 0x55, 0x50, 0x2d,
	0x54, 0x4e, 0x4c, 0x49, 0x6e, 0x66, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x4a, 0x0a, 0x11, 0x75, 0x5f,
	0x6c, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e,
	0x55, 0x6c, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48,
	0x03, 0x52, 0x10, 0x75, 0x4c, 0x2d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x70, 0x0a, 0x1e, 0x70, 0x64, 0x63, 0x70, 0x5f, 0x64,
	0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25,
	0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x64, 0x63, 0x70, 0x64, 0x75, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x04, 0x52, 0x1c, 0x70, 0x64, 0x63, 0x70, 0x44, 0x75, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x5a, 0x0a, 0x16, 0x64, 0x75, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e,
	0x76, 0x31, 0x2e, 0x44, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x63,
	0x74, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x05, 0x52, 0x15, 0x64, 0x75, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x88, 0x01, 0x01, 0x12, 0x8d, 0x01, 0x0a, 0x29, 0x71, 0x6f, 0x5f, 0x73, 0x66, 0x6c, 0x6f,
	0x77, 0x73, 0x5f, 0x6d, 0x61, 0x70, 0x70, 0x65, 0x64, 0x74, 0x6f, 0x5f, 0x64, 0x72, 0x62, 0x5f,
	0x73, 0x65, 0x74, 0x75, 0x70, 0x5f, 0x6d, 0x6e, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74,
	0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e,
	0x76, 0x31, 0x2e, 0x51, 0x6f, 0x53, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x4d, 0x61, 0x70, 0x70, 0x65,
	0x64, 0x74, 0x6f, 0x44, 0x72, 0x62, 0x53, 0x65, 0x74, 0x75, 0x70, 0x4d, 0x4e, 0x74, 0x65, 0x72,
	0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x48, 0x06, 0x52, 0x26, 0x71, 0x6f, 0x53, 0x46, 0x6c,
	0x6f, 0x77, 0x73, 0x4d, 0x61, 0x70, 0x70, 0x65, 0x64, 0x74, 0x6f, 0x44, 0x52, 0x42, 0x2d, 0x53,
	0x65, 0x74, 0x75, 0x70, 0x2d, 0x4d, 0x4e, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65,
	0x64, 0x88, 0x01, 0x01, 0x12, 0x66, 0x0a, 0x0e, 0x69, 0x5f, 0x65, 0x5f, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x78,
	0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x72, 0x62, 0x73, 0x54, 0x6f, 0x42, 0x65, 0x4d,
	0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x4e, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61,
	0x74, 0x65, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x52, 0x0d, 0x69,
	0x45, 0x2d, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x19, 0x0a, 0x17,
	0x5f, 0x6d, 0x5f, 0x6e, 0x5f, 0x75, 0x6c, 0x5f, 0x70, 0x64, 0x63, 0x70, 0x5f, 0x75, 0x70, 0x5f,
	0x74, 0x6e, 0x6c, 0x69, 0x6e, 0x66, 0x6f, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x64, 0x5f, 0x72, 0x62,
	0x5f, 0x71, 0x6f, 0x5f, 0x73, 0x42, 0x22, 0x0a, 0x20, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64,
	0x61, 0x72, 0x79, 0x5f, 0x6d, 0x6e, 0x5f, 0x75, 0x6c, 0x5f, 0x70, 0x64, 0x63, 0x70, 0x5f, 0x75,
	0x70, 0x5f, 0x74, 0x6e, 0x6c, 0x69, 0x6e, 0x66, 0x6f, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x75, 0x5f,
	0x6c, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42,
	0x21, 0x0a, 0x1f, 0x5f, 0x70, 0x64, 0x63, 0x70, 0x5f, 0x64, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x42, 0x19, 0x0a, 0x17, 0x5f, 0x64, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x2c, 0x0a,
	0x2a, 0x5f, 0x71, 0x6f, 0x5f, 0x73, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x5f, 0x6d, 0x61, 0x70, 0x70,
	0x65, 0x64, 0x74, 0x6f, 0x5f, 0x64, 0x72, 0x62, 0x5f, 0x73, 0x65, 0x74, 0x75, 0x70, 0x5f, 0x6d,
	0x6e, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x22, 0x6c, 0x0a, 0x3c, 0x50,
	0x64, 0x75, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x4d, 0x4e, 0x74, 0x65, 0x72, 0x6d, 0x69,
	0x6e, 0x61, 0x74, 0x65, 0x64, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x85, 0x04, 0x0a, 0x36, 0x50, 0x64,
	0x75, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x4d, 0x4e, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e,
	0x61, 0x74, 0x65, 0x64, 0x12, 0x68, 0x0a, 0x13, 0x64, 0x5f, 0x72, 0x62, 0x73, 0x5f, 0x61, 0x64,
	0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x39, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x72, 0x62, 0x73,
	0x41, 0x64, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x4d, 0x4e, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x52, 0x10, 0x64, 0x52,
	0x42, 0x73, 0x41, 0x64, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x44,
	0x0a, 0x13, 0x64, 0x5f, 0x72, 0x62, 0x73, 0x5f, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x64,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x78, 0x6e,
	0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x72, 0x62, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x00, 0x52,
	0x10, 0x64, 0x52, 0x42, 0x73, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x64, 0x4c, 0x69, 0x73,
	0x74, 0x88, 0x01, 0x01, 0x12, 0x6c, 0x0a, 0x24, 0x64, 0x5f, 0x72, 0x62, 0x73, 0x5f, 0x6e, 0x6f,
	0x74, 0x5f, 0x61, 0x64, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x5f, 0x73, 0x65, 0x74, 0x75, 0x70,
	0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x72, 0x62,
	0x4c, 0x69, 0x73, 0x74, 0x77, 0x69, 0x74, 0x68, 0x43, 0x61, 0x75, 0x73, 0x65, 0x48, 0x01, 0x52,
	0x1e, 0x64, 0x52, 0x42, 0x73, 0x4e, 0x6f, 0x74, 0x41, 0x64, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64,
	0x53, 0x65, 0x74, 0x75, 0x70, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x88,
	0x01, 0x01, 0x12, 0x6c, 0x0a, 0x0e, 0x69, 0x5f, 0x65, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x45, 0x2e, 0x78, 0x6e, 0x61,
	0x70, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x64, 0x75, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x4d,
	0x4e, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x45, 0x78, 0x74, 0x49, 0x65,
	0x73, 0x52, 0x0d, 0x69, 0x45, 0x2d, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x42, 0x16, 0x0a, 0x14, 0x5f, 0x64, 0x5f, 0x72, 0x62, 0x73, 0x5f, 0x72, 0x65, 0x6c, 0x65, 0x61,
	0x73, 0x65, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x42, 0x27, 0x0a, 0x25, 0x5f, 0x64, 0x5f, 0x72,
	0x62, 0x73, 0x5f, 0x6e, 0x6f, 0x74, 0x5f, 0x61, 0x64, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x5f,
	0x73, 0x65, 0x74, 0x75, 0x70, 0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x22, 0x93, 0x01, 0x0a, 0x30, 0x44, 0x72, 0x62, 0x73, 0x41, 0x64, 0x6d, 0x69, 0x74, 0x74,
	0x65, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x4e, 0x74, 0x65, 0x72, 0x6d,
	0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x12, 0x5f, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e,
	0x44, 0x72, 0x62, 0x73, 0x41, 0x64, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x4c, 0x69, 0x73, 0x74,
	0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x4e, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64,
	0x49, 0x74, 0x65, 0x6d, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x92, 0x01, 0x04, 0x08, 0x01, 0x10, 0x20,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xbf, 0x03, 0x0a, 0x43, 0x44, 0x72, 0x62, 0x73,
	0x41, 0x64, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x4d, 0x4e, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x49, 0x74, 0x65, 0x6d,
	0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x85, 0x01, 0x0a, 0x27, 0x69, 0x64, 0x5f, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61,
	0x6c, 0x5f, 0x70, 0x64, 0x63, 0x70, 0x5f, 0x64, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x74, 0x6e, 0x6c, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x29, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x50, 0x44, 0x63, 0x70, 0x44, 0x75, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x4e, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x00, 0x52, 0x27,
	0x69, 0x64, 0x2d, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x2d, 0x50, 0x44,
	0x43, 0x50, 0x2d, 0x44, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x54,
	0x4e, 0x4c, 0x2d, 0x4c, 0x69, 0x73, 0x74, 0x12, 0xa9, 0x01, 0x0a, 0x35, 0x69, 0x64, 0x5f, 0x71,
	0x6f, 0x5f, 0x73, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x5f, 0x6d, 0x61, 0x70, 0x70, 0x65, 0x64, 0x74,
	0x6f, 0x5f, 0x64, 0x72, 0x62, 0x5f, 0x73, 0x65, 0x74, 0x75, 0x70, 0x5f, 0x72, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x6d, 0x6e, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76,
	0x31, 0x2e, 0x51, 0x6f, 0x53, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x4d, 0x61, 0x70, 0x70, 0x65, 0x64,
	0x74, 0x6f, 0x44, 0x72, 0x62, 0x53, 0x65, 0x74, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x4d, 0x4e, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x48, 0x00,
	0x52, 0x31, 0x69, 0x64, 0x2d, 0x51, 0x6f, 0x53, 0x46, 0x6c, 0x6f, 0x77, 0x73, 0x4d, 0x61, 0x70,
	0x70, 0x65, 0x64, 0x74, 0x6f, 0x44, 0x52, 0x42, 0x2d, 0x53, 0x65, 0x74, 0x75, 0x70, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2d, 0x4d, 0x4e, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61,
	0x74, 0x65, 0x64, 0x42, 0x44, 0x0a, 0x42, 0x64, 0x72, 0x62, 0x73, 0x5f, 0x61, 0x64, 0x6d, 0x69,
	0x74, 0x74, 0x65, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f,
	0x6d, 0x6e, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x69, 0x74, 0x65,
	0x6d, 0x5f, 0x65, 0x78, 0x74, 0x5f, 0x69, 0x65, 0x73, 0x22, 0x8a, 0x02, 0x0a, 0x3a, 0x44, 0x72,
	0x62, 0x73, 0x41, 0x64, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x6f,
	0x64, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x4d, 0x4e, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x49, 0x74,
	0x65, 0x6d, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x49, 0x65, 0x49, 0x44, 0x52, 0x03, 0x26, 0x69, 0x64,
	0x12, 0x37, 0x0a, 0x0b, 0x63, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x0c, 0x26, 0x63, 0x72,
	0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x6b, 0x0a, 0x09, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4c, 0x2e, 0x78,
	0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x72, 0x62, 0x73, 0x41, 0x64, 0x6d, 0x69, 0x74,
	0x74, 0x65, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x4e, 0x74, 0x65, 0x72,
	0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x45, 0x78, 0x74, 0x49, 0x65,
	0x73, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x26, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x81, 0x04, 0x0a, 0x34, 0x44, 0x72, 0x62, 0x73, 0x41,
	0x64, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d,
	0x4e, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x12,
	0x26, 0x0a, 0x06, 0x64, 0x72, 0x62, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0e, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x72, 0x62, 0x49, 0x44, 0x52,
	0x06, 0x64, 0x72, 0x62, 0x2d, 0x49, 0x44, 0x12, 0x58, 0x0a, 0x15, 0x73, 0x5f, 0x6e, 0x5f, 0x64,
	0x6c, 0x5f, 0x73, 0x63, 0x67, 0x5f, 0x75, 0x70, 0x5f, 0x74, 0x6e, 0x6c, 0x69, 0x6e, 0x66, 0x6f,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31,
	0x2e, 0x55, 0x70, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x48, 0x00, 0x52, 0x14, 0x73, 0x4e, 0x2d, 0x44, 0x4c, 0x2d,
	0x53, 0x43, 0x47, 0x2d, 0x55, 0x50, 0x2d, 0x54, 0x4e, 0x4c, 0x49, 0x6e, 0x66, 0x6f, 0x88, 0x01,
	0x01, 0x12, 0x6b, 0x0a, 0x1e, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x5f, 0x73,
	0x6e, 0x5f, 0x64, 0x6c, 0x5f, 0x73, 0x63, 0x67, 0x5f, 0x75, 0x70, 0x5f, 0x74, 0x6e, 0x6c, 0x69,
	0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x78, 0x6e, 0x61, 0x70,
	0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x48, 0x01, 0x52, 0x1e, 0x73, 0x65, 0x63,
	0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x2d, 0x53, 0x4e, 0x2d, 0x44, 0x4c, 0x2d, 0x53, 0x43, 0x47,
	0x2d, 0x55, 0x50, 0x2d, 0x54, 0x4e, 0x4c, 0x49, 0x6e, 0x66, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x27,
	0x0a, 0x05, 0x6c, 0x5f, 0x63, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e,
	0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x63, 0x69, 0x64, 0x48, 0x02, 0x52, 0x04,
	0x6c, 0x43, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x6a, 0x0a, 0x0e, 0x69, 0x5f, 0x65, 0x5f, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x43, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x72, 0x62, 0x73, 0x41, 0x64,
	0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x4e,
	0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x45, 0x78,
	0x74, 0x49, 0x65, 0x73, 0x52, 0x0d, 0x69, 0x45, 0x2d, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x73, 0x42, 0x18, 0x0a, 0x16, 0x5f, 0x73, 0x5f, 0x6e, 0x5f, 0x64, 0x6c, 0x5f, 0x73,
	0x63, 0x67, 0x5f, 0x75, 0x70, 0x5f, 0x74, 0x6e, 0x6c, 0x69, 0x6e, 0x66, 0x6f, 0x42, 0x21, 0x0a,
	0x1f, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x5f, 0x73, 0x6e, 0x5f, 0x64,
	0x6c, 0x5f, 0x73, 0x63, 0x67, 0x5f, 0x75, 0x70, 0x5f, 0x74, 0x6e, 0x6c, 0x69, 0x6e, 0x66, 0x6f,
	0x42, 0x08, 0x0a, 0x06, 0x5f, 0x6c, 0x5f, 0x63, 0x69, 0x64, 0x22, 0x66, 0x0a, 0x36, 0x50, 0x64,
	0x75, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x49, 0x6e,
	0x66, 0x6f, 0x53, 0x4e, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x45, 0x78,
	0x74, 0x49, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x22, 0xba, 0x02, 0x0a, 0x30, 0x50, 0x64, 0x75, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x53, 0x4e, 0x74, 0x65, 0x72,
	0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x12, 0x7c, 0x0a, 0x1d, 0x64, 0x61, 0x74, 0x61, 0x66,
	0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x69, 0x6e, 0x66, 0x6f, 0x66, 0x72, 0x6f,
	0x6d, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32,
	0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x66, 0x6f, 0x72,
	0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x61, 0x6e, 0x64, 0x4f, 0x66, 0x66, 0x6c, 0x6f, 0x61,
	0x64, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x66, 0x72, 0x6f, 0x6d, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x48, 0x00, 0x52, 0x1c, 0x64, 0x61, 0x74, 0x61, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72,
	0x64, 0x69, 0x6e, 0x67, 0x69, 0x6e, 0x66, 0x6f, 0x66, 0x72, 0x6f, 0x6d, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x66, 0x0a, 0x0e, 0x69, 0x5f, 0x65, 0x5f, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3f, 0x2e,
	0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x64, 0x75, 0x73, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x53, 0x4e, 0x74, 0x65,
	0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x52, 0x0d,
	0x69, 0x45, 0x2d, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x20, 0x0a,
	0x1e, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67,
	0x69, 0x6e, 0x66, 0x6f, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x22,
	0x65, 0x0a, 0x35, 0x50, 0x64, 0x75, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x72, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x53, 0x4e, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74,
	0x65, 0x64, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xa8, 0x02, 0x0a, 0x2f, 0x50, 0x64, 0x75, 0x73, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x53, 0x4e,
	0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x12, 0x70, 0x0a, 0x19, 0x64, 0x61,
	0x74, 0x61, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x69, 0x6e, 0x66, 0x6f,
	0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e,
	0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x46, 0x6f, 0x72, 0x77,
	0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x46, 0x72, 0x6f, 0x6d, 0x54, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x4e, 0x67, 0x72, 0x61, 0x6e, 0x6e, 0x6f, 0x64, 0x65, 0x48, 0x00, 0x52,
	0x18, 0x64, 0x61, 0x74, 0x61, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x69,
	0x6e, 0x66, 0x6f, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x88, 0x01, 0x01, 0x12, 0x65, 0x0a, 0x0e,
	0x69, 0x5f, 0x65, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x50,
	0x64, 0x75, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x49, 0x6e,
	0x66, 0x6f, 0x53, 0x4e, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x45, 0x78,
	0x74, 0x49, 0x65, 0x73, 0x52, 0x0d, 0x69, 0x45, 0x2d, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x73, 0x42, 0x1c, 0x0a, 0x1a, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x66, 0x6f, 0x72, 0x77,
	0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x22, 0x66, 0x0a, 0x36, 0x50, 0x64, 0x75, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x69, 0x72, 0x65, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x4d, 0x4e, 0x74, 0x65, 0x72, 0x6d, 0x69,
	0x6e, 0x61, 0x74, 0x65, 0x64, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x9a, 0x01, 0x0a, 0x30, 0x50, 0x64,
	0x75, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x49, 0x6e,
	0x66, 0x6f, 0x4d, 0x4e, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x12, 0x66,
	0x0a, 0x0e, 0x69, 0x5f, 0x65, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31,
	0x2e, 0x50, 0x64, 0x75, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65,
	0x64, 0x49, 0x6e, 0x66, 0x6f, 0x4d, 0x4e, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65,
	0x64, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x52, 0x0d, 0x69, 0x45, 0x2d, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x65, 0x0a, 0x35, 0x50, 0x64, 0x75, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x4d, 0x4e, 0x74,
	0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x12,
	0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x98, 0x01,
	0x0a, 0x2f, 0x50, 0x64, 0x75, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72,
	0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x4d, 0x4e, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65,
	0x64, 0x12, 0x65, 0x0a, 0x0e, 0x69, 0x5f, 0x65, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x78, 0x6e, 0x61, 0x70,
	0x2e, 0x76, 0x31, 0x2e, 0x50, 0x64, 0x75, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x72, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x4d, 0x4e, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61,
	0x74, 0x65, 0x64, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x52, 0x0d, 0x69, 0x45, 0x2d, 0x45, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x5e, 0x0a, 0x2e, 0x50, 0x64, 0x75, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x6f,
	0x64, 0x52, 0x71, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x53, 0x4e, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e,
	0x61, 0x74, 0x65, 0x64, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x9f, 0x07, 0x0a, 0x28, 0x50, 0x64, 0x75,
	0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d,
	0x6f, 0x64, 0x52, 0x71, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x53, 0x4e, 0x74, 0x65, 0x72, 0x6d, 0x69,
	0x6e, 0x61, 0x74, 0x65, 0x64, 0x12, 0x5d, 0x0a, 0x15, 0x64, 0x5f, 0x6c, 0x5f, 0x6e, 0x67, 0x5f,
	0x75, 0x5f, 0x74, 0x6e, 0x6c, 0x61, 0x74, 0x5f, 0x6e, 0x67, 0x5f, 0x72, 0x61, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x55,
	0x70, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x49,
	0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x13, 0x64, 0x4c,
	0x2d, 0x4e, 0x47, 0x2d, 0x55, 0x2d, 0x54, 0x4e, 0x4c, 0x61, 0x74, 0x4e, 0x47, 0x2d, 0x52, 0x41,
	0x4e, 0x88, 0x01, 0x01, 0x12, 0x65, 0x0a, 0x1d, 0x71, 0x6f, 0x5f, 0x73, 0x66, 0x6c, 0x6f, 0x77,
	0x73, 0x5f, 0x74, 0x6f, 0x5f, 0x62, 0x65, 0x5f, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x64,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x78, 0x6e,
	0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x6f, 0x53, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x4c, 0x69,
	0x73, 0x74, 0x77, 0x69, 0x74, 0x68, 0x43, 0x61, 0x75, 0x73, 0x65, 0x48, 0x01, 0x52, 0x19, 0x71,
	0x6f, 0x53, 0x46, 0x6c, 0x6f, 0x77, 0x73, 0x54, 0x6f, 0x42, 0x65, 0x52, 0x65, 0x6c, 0x65, 0x61,
	0x73, 0x65, 0x64, 0x2d, 0x4c, 0x69, 0x73, 0x74, 0x88, 0x01, 0x01, 0x12, 0x7c, 0x0a, 0x1d, 0x64,
	0x61, 0x74, 0x61, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x69, 0x6e, 0x66,
	0x6f, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x32, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x74,
	0x61, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x61, 0x6e, 0x64, 0x4f, 0x66,
	0x66, 0x6c, 0x6f, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x66, 0x72, 0x6f, 0x6d,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x48, 0x02, 0x52, 0x1c, 0x64, 0x61, 0x74, 0x61, 0x66, 0x6f,
	0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x69, 0x6e, 0x66, 0x6f, 0x66, 0x72, 0x6f, 0x6d,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x63, 0x0a, 0x15, 0x64, 0x72, 0x62,
	0x73, 0x5f, 0x74, 0x6f, 0x5f, 0x62, 0x65, 0x5f, 0x73, 0x65, 0x74, 0x75, 0x70, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e,
	0x76, 0x31, 0x2e, 0x44, 0x72, 0x62, 0x73, 0x54, 0x6f, 0x42, 0x65, 0x53, 0x65, 0x74, 0x75, 0x70,
	0x4c, 0x69, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x52, 0x71, 0x64, 0x53, 0x4e, 0x74, 0x65, 0x72, 0x6d,
	0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x48, 0x03, 0x52, 0x11, 0x64, 0x72, 0x62, 0x73, 0x54, 0x6f,
	0x42, 0x65, 0x53, 0x65, 0x74, 0x75, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x88, 0x01, 0x01, 0x12, 0x6c,
	0x0a, 0x18, 0x64, 0x72, 0x62, 0x73, 0x5f, 0x74, 0x6f, 0x5f, 0x62, 0x65, 0x5f, 0x6d, 0x6f, 0x64,
	0x69, 0x66, 0x69, 0x65, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2f, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x72, 0x62, 0x73, 0x54,
	0x6f, 0x42, 0x65, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x4d,
	0x6f, 0x64, 0x52, 0x71, 0x64, 0x53, 0x4e, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65,
	0x64, 0x48, 0x04, 0x52, 0x14, 0x64, 0x72, 0x62, 0x73, 0x54, 0x6f, 0x42, 0x65, 0x4d, 0x6f, 0x64,
	0x69, 0x66, 0x69, 0x65, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x88, 0x01, 0x01, 0x12, 0x4e, 0x0a, 0x14,
	0x64, 0x5f, 0x72, 0x62, 0x73, 0x5f, 0x74, 0x6f, 0x5f, 0x62, 0x65, 0x5f, 0x72, 0x65, 0x6c, 0x65,
	0x61, 0x73, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x78, 0x6e, 0x61,
	0x70, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x72, 0x62, 0x4c, 0x69, 0x73, 0x74, 0x77, 0x69, 0x74, 0x68,
	0x43, 0x61, 0x75, 0x73, 0x65, 0x48, 0x05, 0x52, 0x10, 0x64, 0x52, 0x42, 0x73, 0x54, 0x6f, 0x42,
	0x65, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x5e, 0x0a, 0x0e,
	0x69, 0x5f, 0x65, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x07,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x50,
	0x64, 0x75, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x4d, 0x6f, 0x64, 0x52, 0x71, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x53, 0x4e, 0x74, 0x65, 0x72,
	0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x52, 0x0d, 0x69,
	0x45, 0x2d, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x18, 0x0a, 0x16,
	0x5f, 0x64, 0x5f, 0x6c, 0x5f, 0x6e, 0x67, 0x5f, 0x75, 0x5f, 0x74, 0x6e, 0x6c, 0x61, 0x74, 0x5f,
	0x6e, 0x67, 0x5f, 0x72, 0x61, 0x6e, 0x42, 0x20, 0x0a, 0x1e, 0x5f, 0x71, 0x6f, 0x5f, 0x73, 0x66,
	0x6c, 0x6f, 0x77, 0x73, 0x5f, 0x74, 0x6f, 0x5f, 0x62, 0x65, 0x5f, 0x72, 0x65, 0x6c, 0x65, 0x61,
	0x73, 0x65, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x42, 0x20, 0x0a, 0x1e, 0x5f, 0x64, 0x61, 0x74,
	0x61, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x69, 0x6e, 0x66, 0x6f, 0x66,
	0x72, 0x6f, 0x6d, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x42, 0x18, 0x0a, 0x16, 0x5f, 0x64,
	0x72, 0x62, 0x73, 0x5f, 0x74, 0x6f, 0x5f, 0x62, 0x65, 0x5f, 0x73, 0x65, 0x74, 0x75, 0x70, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x42, 0x1b, 0x0a, 0x19, 0x5f, 0x64, 0x72, 0x62, 0x73, 0x5f, 0x74, 0x6f,
	0x5f, 0x62, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x64, 0x5f, 0x72, 0x62, 0x73, 0x5f, 0x74, 0x6f, 0x5f, 0x62,
	0x65, 0x5f, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x64, 0x22, 0x79, 0x0a, 0x23, 0x44, 0x72,
	0x62, 0x73, 0x54, 0x6f, 0x42, 0x65, 0x53, 0x65, 0x74, 0x75, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x4d,
	0x6f, 0x64, 0x52, 0x71, 0x64, 0x53, 0x4e, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65,
	0x64, 0x12, 0x52, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x30, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x72, 0x62, 0x73, 0x54,
	0x6f, 0x42, 0x65, 0x53, 0x65, 0x74, 0x75, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x52,
	0x71, 0x64, 0x53, 0x4e, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x49, 0x74,
	0x65, 0x6d, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x92, 0x01, 0x04, 0x08, 0x01, 0x10, 0x20, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xe6, 0x02, 0x0a, 0x36, 0x44, 0x72, 0x62, 0x73, 0x54, 0x6f,
	0x42, 0x65, 0x53, 0x65, 0x74, 0x75, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x52, 0x71,
	0x64, 0x53, 0x4e, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x49, 0x74, 0x65,
	0x6d, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x85, 0x01, 0x0a, 0x27, 0x69, 0x64, 0x5f, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x61, 0x6c, 0x5f, 0x70, 0x64, 0x63, 0x70, 0x5f, 0x64, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x6e, 0x6c, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x29, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x50, 0x44, 0x63, 0x70, 0x44, 0x75, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x4e, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x00, 0x52,
	0x27, 0x69, 0x64, 0x2d, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x2d, 0x50,
	0x44, 0x43, 0x50, 0x2d, 0x44, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d,
	0x54, 0x4e, 0x4c, 0x2d, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x69, 0x0a, 0x1d, 0x69, 0x64, 0x5f, 0x72,
	0x6c, 0x63, 0x64, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x6c, 0x63, 0x64, 0x75, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x1c, 0x69, 0x64, 0x2d, 0x52, 0x4c, 0x43, 0x44, 0x75, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x42, 0x39, 0x0a, 0x37, 0x64, 0x72, 0x62, 0x73, 0x5f, 0x74, 0x6f, 0x5f, 0x62,
	0x65, 0x5f, 0x73, 0x65, 0x74, 0x75, 0x70, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x6d, 0x6f, 0x64,
	0x5f, 0x72, 0x71, 0x64, 0x5f, 0x73, 0x6e, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x65, 0x78, 0x74, 0x5f, 0x69, 0x65, 0x73, 0x22, 0xf0,
	0x01, 0x0a, 0x2d, 0x44, 0x72, 0x62, 0x73, 0x54, 0x6f, 0x42, 0x65, 0x53, 0x65, 0x74, 0x75, 0x70,
	0x4c, 0x69, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x52, 0x71, 0x64, 0x53, 0x4e, 0x74, 0x65, 0x72, 0x6d,
	0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73,
	0x12, 0x26, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x78,
	0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x49,
	0x65, 0x49, 0x44, 0x52, 0x03, 0x26, 0x69, 0x64, 0x12, 0x37, 0x0a, 0x0b, 0x63, 0x72, 0x69, 0x74,
	0x69, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e,
	0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c,
	0x69, 0x74, 0x79, 0x52, 0x0c, 0x26, 0x63, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x69, 0x74,
	0x79, 0x12, 0x5e, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x44,
	0x72, 0x62, 0x73, 0x54, 0x6f, 0x42, 0x65, 0x53, 0x65, 0x74, 0x75, 0x70, 0x4c, 0x69, 0x73, 0x74,
	0x4d, 0x6f, 0x64, 0x52, 0x71, 0x64, 0x53, 0x4e, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74,
	0x65, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x26, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x22, 0xc9, 0x07, 0x0a, 0x27, 0x44, 0x72, 0x62, 0x73, 0x54, 0x6f, 0x42, 0x65, 0x53, 0x65,
	0x74, 0x75, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x52, 0x71, 0x64, 0x53, 0x4e, 0x74,
	0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x26, 0x0a,
	0x06, 0x64, 0x72, 0x62, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x72, 0x62, 0x49, 0x44, 0x52, 0x06, 0x64,
	0x72, 0x62, 0x2d, 0x49, 0x44, 0x12, 0x41, 0x0a, 0x0e, 0x70, 0x5f, 0x64, 0x63, 0x70, 0x5f, 0x73,
	0x6e, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x64, 0x63, 0x70, 0x73, 0x6e, 0x6c, 0x65,
	0x6e, 0x67, 0x74, 0x68, 0x48, 0x00, 0x52, 0x0d, 0x70, 0x44, 0x43, 0x50, 0x2d, 0x53, 0x4e, 0x4c,
	0x65, 0x6e, 0x67, 0x74, 0x68, 0x88, 0x01, 0x01, 0x12, 0x52, 0x0a, 0x14, 0x73, 0x6e, 0x5f, 0x75,
	0x6c, 0x5f, 0x70, 0x64, 0x63, 0x70, 0x5f, 0x75, 0x70, 0x74, 0x6e, 0x6c, 0x69, 0x6e, 0x66, 0x6f,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31,
	0x2e, 0x55, 0x70, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x52, 0x14, 0x73, 0x6e, 0x2d, 0x55, 0x4c, 0x2d, 0x50, 0x44,
	0x43, 0x50, 0x2d, 0x55, 0x50, 0x54, 0x4e, 0x4c, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x3e, 0x0a, 0x09,
	0x64, 0x5f, 0x72, 0x62, 0x5f, 0x71, 0x6f, 0x5f, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x6f, 0x53, 0x66, 0x6c, 0x6f,
	0x77, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x51, 0x6f, 0x53, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74,
	0x65, 0x72, 0x73, 0x52, 0x07, 0x64, 0x52, 0x42, 0x2d, 0x51, 0x6f, 0x53, 0x12, 0x6d, 0x0a, 0x1f,
	0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x5f, 0x73, 0x6e, 0x5f, 0x75, 0x6c, 0x5f,
	0x70, 0x64, 0x63, 0x70, 0x5f, 0x75, 0x70, 0x5f, 0x74, 0x6e, 0x6c, 0x69, 0x6e, 0x66, 0x6f, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e,
	0x55, 0x70, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x65, 0x74, 0x65, 0x72, 0x73, 0x48, 0x01, 0x52, 0x1f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61,
	0x72, 0x79, 0x2d, 0x53, 0x4e, 0x2d, 0x55, 0x4c, 0x2d, 0x50, 0x44, 0x43, 0x50, 0x2d, 0x55, 0x50,
	0x2d, 0x54, 0x4e, 0x4c, 0x49, 0x6e, 0x66, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x5a, 0x0a, 0x16, 0x64,
	0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x78, 0x6e,
	0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x02, 0x52, 0x15, 0x64,
	0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x4a, 0x0a, 0x11, 0x75, 0x5f, 0x6c, 0x5f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x6c, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x03, 0x52, 0x10,
	0x75, 0x4c, 0x2d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x88, 0x01, 0x01, 0x12, 0x91, 0x01, 0x0a, 0x2b, 0x71, 0x6f, 0x5f, 0x73, 0x66, 0x6c, 0x6f, 0x77,
	0x73, 0x5f, 0x6d, 0x61, 0x70, 0x70, 0x65, 0x64, 0x74, 0x6f, 0x5f, 0x64, 0x72, 0x62, 0x5f, 0x6d,
	0x6f, 0x64, 0x5f, 0x72, 0x71, 0x64, 0x5f, 0x73, 0x6e, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61,
	0x74, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x78, 0x6e, 0x61, 0x70,
	0x2e, 0x76, 0x31, 0x2e, 0x51, 0x6f, 0x53, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x53, 0x65, 0x74, 0x75,
	0x70, 0x4d, 0x61, 0x70, 0x70, 0x65, 0x64, 0x74, 0x6f, 0x44, 0x72, 0x62, 0x4d, 0x6f, 0x64, 0x52,
	0x71, 0x64, 0x53, 0x4e, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x52, 0x27,
	0x71, 0x6f, 0x53, 0x46, 0x6c, 0x6f, 0x77, 0x73, 0x4d, 0x61, 0x70, 0x70, 0x65, 0x64, 0x74, 0x6f,
	0x44, 0x52, 0x42, 0x2d, 0x4d, 0x6f, 0x64, 0x52, 0x71, 0x64, 0x2d, 0x53, 0x4e, 0x74, 0x65, 0x72,
	0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x12, 0x2d, 0x0a, 0x09, 0x72, 0x5f, 0x6c, 0x63, 0x5f,
	0x6d, 0x6f, 0x64, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x78, 0x6e, 0x61,
	0x70, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x6c, 0x63, 0x6d, 0x6f, 0x64, 0x65, 0x52, 0x08, 0x72, 0x4c,
	0x43, 0x2d, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x5d, 0x0a, 0x0e, 0x69, 0x5f, 0x65, 0x5f, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x36,
	0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x72, 0x62, 0x73, 0x54, 0x6f, 0x42,
	0x65, 0x53, 0x65, 0x74, 0x75, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x52, 0x71, 0x64,
	0x53, 0x4e, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x49, 0x74, 0x65, 0x6d,
	0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x52, 0x0d, 0x69, 0x45, 0x2d, 0x45, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x70, 0x5f, 0x64, 0x63, 0x70, 0x5f,
	0x73, 0x6e, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x42, 0x22, 0x0a, 0x20, 0x5f, 0x73, 0x65, 0x63,
	0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x5f, 0x73, 0x6e, 0x5f, 0x75, 0x6c, 0x5f, 0x70, 0x64, 0x63,
	0x70, 0x5f, 0x75, 0x70, 0x5f, 0x74, 0x6e, 0x6c, 0x69, 0x6e, 0x66, 0x6f, 0x42, 0x19, 0x0a, 0x17,
	0x5f, 0x64, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x75, 0x5f, 0x6c, 0x5f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x87, 0x01,
	0x0a, 0x2a, 0x51, 0x6f, 0x53, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x53, 0x65, 0x74, 0x75, 0x70, 0x4d,
	0x61, 0x70, 0x70, 0x65, 0x64, 0x74, 0x6f, 0x44, 0x72, 0x62, 0x4d, 0x6f, 0x64, 0x52, 0x71, 0x64,
	0x53, 0x4e, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x12, 0x59, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x78, 0x6e,
	0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x6f, 0x53, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x53, 0x65,
	0x74, 0x75, 0x70, 0x4d, 0x61, 0x70, 0x70, 0x65, 0x64, 0x74, 0x6f, 0x44, 0x72, 0x62, 0x4d, 0x6f,
	0x64, 0x52, 0x71, 0x64, 0x53, 0x4e, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64,
	0x49, 0x74, 0x65, 0x6d, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x92, 0x01, 0x04, 0x08, 0x01, 0x10, 0x40,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x64, 0x0a, 0x34, 0x51, 0x6f, 0x53, 0x66, 0x6c,
	0x6f, 0x77, 0x73, 0x53, 0x65, 0x74, 0x75, 0x70, 0x4d, 0x61, 0x70, 0x70, 0x65, 0x64, 0x74, 0x6f,
	0x44, 0x72, 0x62, 0x4d, 0x6f, 0x64, 0x52, 0x71, 0x64, 0x53, 0x4e, 0x74, 0x65, 0x72, 0x6d, 0x69,
	0x6e, 0x61, 0x74, 0x65, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x12,
	0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xe7, 0x02,
	0x0a, 0x2e, 0x51, 0x6f, 0x53, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x53, 0x65, 0x74, 0x75, 0x70, 0x4d,
	0x61, 0x70, 0x70, 0x65, 0x64, 0x74, 0x6f, 0x44, 0x72, 0x62, 0x4d, 0x6f, 0x64, 0x52, 0x71, 0x64,
	0x53, 0x4e, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x49, 0x74, 0x65, 0x6d,
	0x12, 0x4a, 0x0a, 0x13, 0x71, 0x6f, 0x5f, 0x73, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x69, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x6f, 0x53, 0x66, 0x6c, 0x6f, 0x77, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x11, 0x71, 0x6f, 0x53, 0x46, 0x6c,
	0x6f, 0x77, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x60, 0x0a, 0x1e,
	0x6d, 0x5f, 0x63, 0x67, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x67, 0x62,
	0x72, 0x71, 0x6f, 0x5f, 0x73, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x62, 0x72, 0x71, 0x6f, 0x53, 0x66, 0x6c, 0x6f, 0x77, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52,
	0x1a, 0x6d, 0x43, 0x47, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x47, 0x42, 0x52,
	0x51, 0x6f, 0x53, 0x46, 0x6c, 0x6f, 0x77, 0x49, 0x6e, 0x66, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x64,
	0x0a, 0x0e, 0x69, 0x5f, 0x65, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31,
	0x2e, 0x51, 0x6f, 0x53, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x53, 0x65, 0x74, 0x75, 0x70, 0x4d, 0x61,
	0x70, 0x70, 0x65, 0x64, 0x74, 0x6f, 0x44, 0x72, 0x62, 0x4d, 0x6f, 0x64, 0x52, 0x71, 0x64, 0x53,
	0x4e, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x45,
	0x78, 0x74, 0x49, 0x65, 0x73, 0x52, 0x0d, 0x69, 0x45, 0x2d, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x42, 0x21, 0x0a, 0x1f, 0x5f, 0x6d, 0x5f, 0x63, 0x67, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x67, 0x62, 0x72, 0x71, 0x6f, 0x5f, 0x73, 0x66, 0x6c,
	0x6f, 0x77, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x22, 0x7f, 0x0a, 0x26, 0x44, 0x72, 0x62, 0x73, 0x54,
	0x6f, 0x42, 0x65, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x4d,
	0x6f, 0x64, 0x52, 0x71, 0x64, 0x53, 0x4e, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65,
	0x64, 0x12, 0x55, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x33, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x72, 0x62, 0x73, 0x54,
	0x6f, 0x42, 0x65, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x4d,
	0x6f, 0x64, 0x52, 0x71, 0x64, 0x53, 0x4e, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65,
	0x64, 0x49, 0x74, 0x65, 0x6d, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x92, 0x01, 0x04, 0x08, 0x01, 0x10,
	0x20, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xec, 0x02, 0x0a, 0x39, 0x44, 0x72, 0x62,
	0x73, 0x54, 0x6f, 0x42, 0x65, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x4c, 0x69, 0x73,
	0x74, 0x4d, 0x6f, 0x64, 0x52, 0x71, 0x64, 0x53, 0x4e, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61,
	0x74, 0x65, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x85, 0x01, 0x0a, 0x27, 0x69, 0x64, 0x5f, 0x61, 0x64,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x70, 0x64, 0x63, 0x70, 0x5f, 0x64, 0x75,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x6e, 0x6c, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e,
	0x76, 0x31, 0x2e, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x50, 0x44, 0x63,
	0x70, 0x44, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x4e, 0x6c, 0x4c,
	0x69, 0x73, 0x74, 0x48, 0x00, 0x52, 0x27, 0x69, 0x64, 0x2d, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x61, 0x6c, 0x2d, 0x50, 0x44, 0x43, 0x50, 0x2d, 0x44, 0x75, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x54, 0x4e, 0x4c, 0x2d, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x69,
	0x0a, 0x1d, 0x69, 0x64, 0x5f, 0x72, 0x6c, 0x63, 0x64, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e,
	0x52, 0x6c, 0x63, 0x64, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x1c, 0x69, 0x64, 0x2d,
	0x52, 0x4c, 0x43, 0x44, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x3c, 0x0a, 0x3a, 0x64, 0x72, 0x62,
	0x73, 0x5f, 0x74, 0x6f, 0x5f, 0x62, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x5f, 0x72, 0x71, 0x64, 0x5f, 0x73, 0x6e,
	0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f,
	0x65, 0x78, 0x74, 0x5f, 0x69, 0x65, 0x73, 0x22, 0xf6, 0x01, 0x0a, 0x30, 0x44, 0x72, 0x62, 0x73,
	0x54, 0x6f, 0x42, 0x65, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x4c, 0x69, 0x73, 0x74,
	0x4d, 0x6f, 0x64, 0x52, 0x71, 0x64, 0x53, 0x4e, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74,
	0x65, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e,
	0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x49, 0x65, 0x49, 0x44, 0x52,
	0x03, 0x26, 0x69, 0x64, 0x12, 0x37, 0x0a, 0x0b, 0x63, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c,
	0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x78, 0x6e, 0x61, 0x70,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x52,
	0x0c, 0x26, 0x63, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x61, 0x0a,
	0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x42, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x72, 0x62, 0x73, 0x54,
	0x6f, 0x42, 0x65, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x4d,
	0x6f, 0x64, 0x52, 0x71, 0x64, 0x53, 0x4e, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65,
	0x64, 0x49, 0x74, 0x65, 0x6d, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x45, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x26, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x22, 0xcd, 0x08, 0x0a, 0x2a, 0x44, 0x72, 0x62, 0x73, 0x54, 0x6f, 0x42, 0x65, 0x4d, 0x6f, 0x64,
	0x69, 0x66, 0x69, 0x65, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x52, 0x71, 0x64, 0x53,
	0x4e, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x12,
	0x26, 0x0a, 0x06, 0x64, 0x72, 0x62, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0e, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x72, 0x62, 0x49, 0x44, 0x52,
	0x06, 0x64, 0x72, 0x62, 0x2d, 0x49, 0x44, 0x12, 0x5a, 0x0a, 0x16, 0x73, 0x5f, 0x6e, 0x5f, 0x75,
	0x6c, 0x5f, 0x70, 0x64, 0x63, 0x70, 0x5f, 0x75, 0x70, 0x5f, 0x74, 0x6e, 0x6c, 0x69, 0x6e, 0x66,
	0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76,
	0x31, 0x2e, 0x55, 0x70, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x48, 0x00, 0x52, 0x15, 0x73, 0x4e, 0x2d, 0x55, 0x4c,
	0x2d, 0x50, 0x44, 0x43, 0x50, 0x2d, 0x55, 0x50, 0x2d, 0x54, 0x4e, 0x4c, 0x49, 0x6e, 0x66, 0x6f,
	0x88, 0x01, 0x01, 0x12, 0x43, 0x0a, 0x09, 0x64, 0x5f, 0x72, 0x62, 0x5f, 0x71, 0x6f, 0x5f, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31,
	0x2e, 0x51, 0x6f, 0x53, 0x66, 0x6c, 0x6f, 0x77, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x51, 0x6f, 0x53,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x48, 0x01, 0x52, 0x07, 0x64, 0x52,
	0x42, 0x2d, 0x51, 0x6f, 0x53, 0x88, 0x01, 0x01, 0x12, 0x6d, 0x0a, 0x1f, 0x73, 0x65, 0x63, 0x6f,
	0x6e, 0x64, 0x61, 0x72, 0x79, 0x5f, 0x73, 0x6e, 0x5f, 0x75, 0x6c, 0x5f, 0x70, 0x64, 0x63, 0x70,
	0x5f, 0x75, 0x70, 0x5f, 0x74, 0x6e, 0x6c, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72,
	0x73, 0x48, 0x02, 0x52, 0x1f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x2d, 0x53,
	0x4e, 0x2d, 0x55, 0x4c, 0x2d, 0x50, 0x44, 0x43, 0x50, 0x2d, 0x55, 0x50, 0x2d, 0x54, 0x4e, 0x4c,
	0x49, 0x6e, 0x66, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x4a, 0x0a, 0x11, 0x75, 0x5f, 0x6c, 0x5f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x6c, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x03, 0x52, 0x10,
	0x75, 0x4c, 0x2d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x88, 0x01, 0x01, 0x12, 0x70, 0x0a, 0x1e, 0x70, 0x64, 0x63, 0x70, 0x5f, 0x64, 0x75, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x78, 0x6e,
	0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x64, 0x63, 0x70, 0x64, 0x75, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x48, 0x04, 0x52, 0x1c, 0x70, 0x64, 0x63, 0x70, 0x44, 0x75, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x5a, 0x0a, 0x16, 0x64, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e,
	0x44, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x63, 0x74, 0x69, 0x76,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x05, 0x52, 0x15, 0x64, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01,
	0x01, 0x12, 0x99, 0x01, 0x0a, 0x2b, 0x71, 0x6f, 0x5f, 0x73, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x5f,
	0x6d, 0x61, 0x70, 0x70, 0x65, 0x64, 0x74, 0x6f, 0x5f, 0x64, 0x72, 0x62, 0x5f, 0x6d, 0x6f, 0x64,
	0x5f, 0x72, 0x71, 0x64, 0x5f, 0x73, 0x6e, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65,
	0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76,
	0x31, 0x2e, 0x51, 0x6f, 0x53, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69,
	0x65, 0x64, 0x4d, 0x61, 0x70, 0x70, 0x65, 0x64, 0x74, 0x6f, 0x44, 0x72, 0x62, 0x4d, 0x6f, 0x64,
	0x52, 0x71, 0x64, 0x53, 0x4e, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x48,
	0x06, 0x52, 0x27, 0x71, 0x6f, 0x53, 0x46, 0x6c, 0x6f, 0x77, 0x73, 0x4d, 0x61, 0x70, 0x70, 0x65,
	0x64, 0x74, 0x6f, 0x44, 0x52, 0x42, 0x2d, 0x4d, 0x6f, 0x64, 0x52, 0x71, 0x64, 0x2d, 0x53, 0x4e,
	0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x60, 0x0a,
	0x0e, 0x69, 0x5f, 0x65, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e,
	0x44, 0x72, 0x62, 0x73, 0x54, 0x6f, 0x42, 0x65, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64,
	0x4c, 0x69, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x52, 0x71, 0x64, 0x53, 0x4e, 0x74, 0x65, 0x72, 0x6d,
	0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73,
	0x52, 0x0d, 0x69, 0x45, 0x2d, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x42,
	0x19, 0x0a, 0x17, 0x5f, 0x73, 0x5f, 0x6e, 0x5f, 0x75, 0x6c, 0x5f, 0x70, 0x64, 0x63, 0x70, 0x5f,
	0x75, 0x70, 0x5f, 0x74, 0x6e, 0x6c, 0x69, 0x6e, 0x66, 0x6f, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x64,
	0x5f, 0x72, 0x62, 0x5f, 0x71, 0x6f, 0x5f, 0x73, 0x42, 0x22, 0x0a, 0x20, 0x5f, 0x73, 0x65, 0x63,
	0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x5f, 0x73, 0x6e, 0x5f, 0x75, 0x6c, 0x5f, 0x70, 0x64, 0x63,
	0x70, 0x5f, 0x75, 0x70, 0x5f, 0x74, 0x6e, 0x6c, 0x69, 0x6e, 0x66, 0x6f, 0x42, 0x14, 0x0a, 0x12,
	0x5f, 0x75, 0x5f, 0x6c, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x42, 0x21, 0x0a, 0x1f, 0x5f, 0x70, 0x64, 0x63, 0x70, 0x5f, 0x64, 0x75, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x19, 0x0a, 0x17, 0x5f, 0x64, 0x75, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x42, 0x2e, 0x0a, 0x2c, 0x5f, 0x71, 0x6f, 0x5f, 0x73, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x5f, 0x6d,
	0x61, 0x70, 0x70, 0x65, 0x64, 0x74, 0x6f, 0x5f, 0x64, 0x72, 0x62, 0x5f, 0x6d, 0x6f, 0x64, 0x5f,
	0x72, 0x71, 0x64, 0x5f, 0x73, 0x6e, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64,
	0x22, 0x8d, 0x01, 0x0a, 0x2d, 0x51, 0x6f, 0x53, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x4d, 0x6f, 0x64,
	0x69, 0x66, 0x69, 0x65, 0x64, 0x4d, 0x61, 0x70, 0x70, 0x65, 0x64, 0x74, 0x6f, 0x44, 0x72, 0x62,
	0x4d, 0x6f, 0x64, 0x52, 0x71, 0x64, 0x53, 0x4e, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74,
	0x65, 0x64, 0x12, 0x5c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x3a, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x6f, 0x53, 0x66,
	0x6c, 0x6f, 0x77, 0x73, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x4d, 0x61, 0x70, 0x70,
	0x65, 0x64, 0x74, 0x6f, 0x44, 0x72, 0x62, 0x4d, 0x6f, 0x64, 0x52, 0x71, 0x64, 0x53, 0x4e, 0x74,
	0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x42, 0x0a, 0xfa,
	0x42, 0x07, 0x92, 0x01, 0x04, 0x08, 0x01, 0x10, 0x40, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x22, 0x67, 0x0a, 0x37, 0x51, 0x6f, 0x53, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x4d, 0x6f, 0x64, 0x69,
	0x66, 0x69, 0x65, 0x64, 0x4d, 0x61, 0x70, 0x70, 0x65, 0x64, 0x74, 0x6f, 0x44, 0x72, 0x62, 0x4d,
	0x6f, 0x64, 0x52, 0x71, 0x64, 0x53, 0x4e, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65,
	0x64, 0x49, 0x74, 0x65, 0x6d, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xed, 0x02, 0x0a, 0x31, 0x51, 0x6f,
	0x53, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x4d, 0x61,
	0x70, 0x70, 0x65, 0x64, 0x74, 0x6f, 0x44, 0x72, 0x62, 0x4d, 0x6f, 0x64, 0x52, 0x71, 0x64, 0x53,
	0x4e, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x12,
	0x4a, 0x0a, 0x13, 0x71, 0x6f, 0x5f, 0x73, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x69, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x78,
	0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x6f, 0x53, 0x66, 0x6c, 0x6f, 0x77, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x11, 0x71, 0x6f, 0x53, 0x46, 0x6c, 0x6f,
	0x77, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x60, 0x0a, 0x1e, 0x6d,
	0x5f, 0x63, 0x67, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x67, 0x62, 0x72,
	0x71, 0x6f, 0x5f, 0x73, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x62,
	0x72, 0x71, 0x6f, 0x53, 0x66, 0x6c, 0x6f, 0x77, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x1a,
	0x6d, 0x43, 0x47, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x47, 0x42, 0x52, 0x51,
	0x6f, 0x53, 0x46, 0x6c, 0x6f, 0x77, 0x49, 0x6e, 0x66, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x67, 0x0a,
	0x0e, 0x69, 0x5f, 0x65, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x40, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e,
	0x51, 0x6f, 0x53, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64,
	0x4d, 0x61, 0x70, 0x70, 0x65, 0x64, 0x74, 0x6f, 0x44, 0x72, 0x62, 0x4d, 0x6f, 0x64, 0x52, 0x71,
	0x64, 0x53, 0x4e, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x49, 0x74, 0x65,
	0x6d, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x52, 0x0d, 0x69, 0x45, 0x2d, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x21, 0x0a, 0x1f, 0x5f, 0x6d, 0x5f, 0x63, 0x67, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x67, 0x62, 0x72, 0x71, 0x6f, 0x5f, 0x73,
	0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x22, 0x62, 0x0a, 0x32, 0x50, 0x64, 0x75,
	0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d,
	0x6f, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x53, 0x4e, 0x74,
	0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x12,
	0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x89, 0x05,
	0x0a, 0x2c, 0x50, 0x64, 0x75, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x4d, 0x6f, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x49, 0x6e,
	0x66, 0x6f, 0x53, 0x4e, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x12, 0x57,
	0x0a, 0x12, 0x75, 0x5f, 0x6c, 0x5f, 0x6e, 0x67, 0x5f, 0x75, 0x5f, 0x74, 0x6e, 0x6c, 0x61, 0x74,
	0x5f, 0x75, 0x70, 0x66, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x78, 0x6e, 0x61,
	0x70, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74,
	0x4c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x48, 0x00, 0x52, 0x10, 0x75, 0x4c, 0x2d, 0x4e, 0x47, 0x2d, 0x55, 0x2d, 0x54, 0x4e, 0x4c, 0x61,
	0x74, 0x55, 0x50, 0x46, 0x88, 0x01, 0x01, 0x12, 0x5e, 0x0a, 0x13, 0x64, 0x5f, 0x72, 0x62, 0x73,
	0x5f, 0x61, 0x64, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x44,
	0x72, 0x62, 0x73, 0x41, 0x64, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x4d,
	0x6f, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x53, 0x4e, 0x74, 0x65, 0x72, 0x6d, 0x69,
	0x6e, 0x61, 0x74, 0x65, 0x64, 0x52, 0x10, 0x64, 0x52, 0x42, 0x73, 0x41, 0x64, 0x6d, 0x69, 0x74,
	0x74, 0x65, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x6c, 0x0a, 0x24, 0x64, 0x5f, 0x72, 0x62, 0x73,
	0x5f, 0x6e, 0x6f, 0x74, 0x5f, 0x61, 0x64, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x5f, 0x73, 0x65,
	0x74, 0x75, 0x70, 0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e,
	0x44, 0x72, 0x62, 0x4c, 0x69, 0x73, 0x74, 0x77, 0x69, 0x74, 0x68, 0x43, 0x61, 0x75, 0x73, 0x65,
	0x48, 0x01, 0x52, 0x1e, 0x64, 0x52, 0x42, 0x73, 0x4e, 0x6f, 0x74, 0x41, 0x64, 0x6d, 0x69, 0x74,
	0x74, 0x65, 0x64, 0x53, 0x65, 0x74, 0x75, 0x70, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x4c, 0x69,
	0x73, 0x74, 0x88, 0x01, 0x01, 0x12, 0x70, 0x0a, 0x19, 0x64, 0x61, 0x74, 0x61, 0x66, 0x6f, 0x72,
	0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x74, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e,
	0x76, 0x31, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e,
	0x67, 0x49, 0x6e, 0x66, 0x6f, 0x46, 0x72, 0x6f, 0x6d, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x4e,
	0x67, 0x72, 0x61, 0x6e, 0x6e, 0x6f, 0x64, 0x65, 0x48, 0x02, 0x52, 0x18, 0x64, 0x61, 0x74, 0x61,
	0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x69, 0x6e, 0x66, 0x6f, 0x54, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x88, 0x01, 0x01, 0x12, 0x62, 0x0a, 0x0e, 0x69, 0x5f, 0x65, 0x5f, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x3b, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x64, 0x75, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x6f, 0x64, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x53, 0x4e, 0x74, 0x65, 0x72, 0x6d,
	0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x52, 0x0d, 0x69, 0x45,
	0x2d, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x15, 0x0a, 0x13, 0x5f,
	0x75, 0x5f, 0x6c, 0x5f, 0x6e, 0x67, 0x5f, 0x75, 0x5f, 0x74, 0x6e, 0x6c, 0x61, 0x74, 0x5f, 0x75,
	0x70, 0x66, 0x42, 0x27, 0x0a, 0x25, 0x5f, 0x64, 0x5f, 0x72, 0x62, 0x73, 0x5f, 0x6e, 0x6f, 0x74,
	0x5f, 0x61, 0x64, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x5f, 0x73, 0x65, 0x74, 0x75, 0x70, 0x5f,
	0x6d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x42, 0x1c, 0x0a, 0x1a, 0x5f,
	0x64, 0x61, 0x74, 0x61, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x69, 0x6e,
	0x66, 0x6f, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x22, 0x7f, 0x0a, 0x26, 0x44, 0x72, 0x62,
	0x73, 0x41, 0x64, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x6f, 0x64,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x53, 0x4e, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61,
	0x74, 0x65, 0x64, 0x12, 0x55, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x33, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x72, 0x62,
	0x73, 0x41, 0x64, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x6f, 0x64,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x53, 0x4e, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61,
	0x74, 0x65, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x92, 0x01, 0x04, 0x08,
	0x01, 0x10, 0x20, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x60, 0x0a, 0x30, 0x44, 0x72,
	0x62, 0x73, 0x41, 0x64, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x6f,
	0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x53, 0x4e, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e,
	0x61, 0x74, 0x65, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x12, 0x2c,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xe7, 0x03, 0x0a,
	0x2a, 0x44, 0x72, 0x62, 0x73, 0x41, 0x64, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x4c, 0x69, 0x73,
	0x74, 0x4d, 0x6f, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x53, 0x4e, 0x74, 0x65, 0x72,
	0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x26, 0x0a, 0x06, 0x64,
	0x72, 0x62, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x78, 0x6e,
	0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x72, 0x62, 0x49, 0x44, 0x52, 0x06, 0x64, 0x72, 0x62,
	0x2d, 0x49, 0x44, 0x12, 0x56, 0x0a, 0x14, 0x6d, 0x5f, 0x6e, 0x5f, 0x64, 0x6c, 0x5f, 0x63, 0x67,
	0x5f, 0x75, 0x70, 0x5f, 0x74, 0x6e, 0x6c, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72,
	0x73, 0x48, 0x00, 0x52, 0x13, 0x6d, 0x4e, 0x2d, 0x44, 0x4c, 0x2d, 0x43, 0x47, 0x2d, 0x55, 0x50,
	0x2d, 0x54, 0x4e, 0x4c, 0x49, 0x6e, 0x66, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x69, 0x0a, 0x1d, 0x73,
	0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x5f, 0x6d, 0x6e, 0x5f, 0x64, 0x6c, 0x5f, 0x63,
	0x67, 0x5f, 0x75, 0x70, 0x5f, 0x74, 0x6e, 0x6c, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65,
	0x72, 0x73, 0x48, 0x01, 0x52, 0x1d, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x2d,
	0x4d, 0x4e, 0x2d, 0x44, 0x4c, 0x2d, 0x43, 0x47, 0x2d, 0x55, 0x50, 0x2d, 0x54, 0x4e, 0x4c, 0x49,
	0x6e, 0x66, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x05, 0x6c, 0x5f, 0x63, 0x69, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e,
	0x4c, 0x63, 0x69, 0x64, 0x48, 0x02, 0x52, 0x04, 0x6c, 0x43, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12,
	0x60, 0x0a, 0x0e, 0x69, 0x5f, 0x65, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76,
	0x31, 0x2e, 0x44, 0x72, 0x62, 0x73, 0x41, 0x64, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x4c, 0x69,
	0x73, 0x74, 0x4d, 0x6f, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x53, 0x4e, 0x74, 0x65,
	0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x45, 0x78, 0x74, 0x49,
	0x65, 0x73, 0x52, 0x0d, 0x69, 0x45, 0x2d, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x73, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x6d, 0x5f, 0x6e, 0x5f, 0x64, 0x6c, 0x5f, 0x63, 0x67, 0x5f,
	0x75, 0x70, 0x5f, 0x74, 0x6e, 0x6c, 0x69, 0x6e, 0x66, 0x6f, 0x42, 0x20, 0x0a, 0x1e, 0x5f, 0x73,
	0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x5f, 0x6d, 0x6e, 0x5f, 0x64, 0x6c, 0x5f, 0x63,
	0x67, 0x5f, 0x75, 0x70, 0x5f, 0x74, 0x6e, 0x6c, 0x69, 0x6e, 0x66, 0x6f, 0x42, 0x08, 0x0a, 0x06,
	0x5f, 0x6c, 0x5f, 0x63, 0x69, 0x64, 0x22, 0x5e, 0x0a, 0x2e, 0x50, 0x64, 0x75, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x6f, 0x64, 0x52,
	0x71, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x4d, 0x4e, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74,
	0x65, 0x64, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xf2, 0x02, 0x0a, 0x28, 0x50, 0x64, 0x75, 0x73, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x6f, 0x64,
	0x52, 0x71, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x4d, 0x4e, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61,
	0x74, 0x65, 0x64, 0x12, 0x64, 0x0a, 0x14, 0x64, 0x5f, 0x72, 0x62, 0x73, 0x5f, 0x74, 0x6f, 0x5f,
	0x62, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2f, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x72, 0x62, 0x73,
	0x54, 0x6f, 0x42, 0x65, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x4c, 0x69, 0x73, 0x74,
	0x4d, 0x6f, 0x64, 0x52, 0x71, 0x64, 0x4d, 0x4e, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74,
	0x65, 0x64, 0x48, 0x00, 0x52, 0x10, 0x64, 0x52, 0x42, 0x73, 0x54, 0x6f, 0x42, 0x65, 0x4d, 0x6f,
	0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x4e, 0x0a, 0x14, 0x64, 0x5f, 0x72,
	0x62, 0x73, 0x5f, 0x74, 0x6f, 0x5f, 0x62, 0x65, 0x5f, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76,
	0x31, 0x2e, 0x44, 0x72, 0x62, 0x4c, 0x69, 0x73, 0x74, 0x77, 0x69, 0x74, 0x68, 0x43, 0x61, 0x75,
	0x73, 0x65, 0x48, 0x01, 0x52, 0x10, 0x64, 0x52, 0x42, 0x73, 0x54, 0x6f, 0x42, 0x65, 0x52, 0x65,
	0x6c, 0x65, 0x61, 0x73, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x5e, 0x0a, 0x0e, 0x69, 0x5f, 0x65,
	0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x37, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x64, 0x75, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x6f,
	0x64, 0x52, 0x71, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x4d, 0x4e, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e,
	0x61, 0x74, 0x65, 0x64, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x52, 0x0d, 0x69, 0x45, 0x2d, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x64, 0x5f,
	0x72, 0x62, 0x73, 0x5f, 0x74, 0x6f, 0x5f, 0x62, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69,
	0x65, 0x64, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x64, 0x5f, 0x72, 0x62, 0x73, 0x5f, 0x74, 0x6f, 0x5f,
	0x62, 0x65, 0x5f, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x64, 0x22, 0x7f, 0x0a, 0x26, 0x44,
	0x72, 0x62, 0x73, 0x54, 0x6f, 0x42, 0x65, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x4c,
	0x69, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x52, 0x71, 0x64, 0x4d, 0x4e, 0x74, 0x65, 0x72, 0x6d, 0x69,
	0x6e, 0x61, 0x74, 0x65, 0x64, 0x12, 0x55, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x44,
	0x72, 0x62, 0x73, 0x54, 0x6f, 0x42, 0x65, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x4c,
	0x69, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x52, 0x71, 0x64, 0x4d, 0x4e, 0x74, 0x65, 0x72, 0x6d, 0x69,
	0x6e, 0x61, 0x74, 0x65, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x92, 0x01,
	0x04, 0x08, 0x01, 0x10, 0x20, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x60, 0x0a, 0x30,
	0x44, 0x72, 0x62, 0x73, 0x54, 0x6f, 0x42, 0x65, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64,
	0x4c, 0x69, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x52, 0x71, 0x64, 0x4d, 0x4e, 0x74, 0x65, 0x72, 0x6d,
	0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73,
	0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xa2,
	0x04, 0x0a, 0x2a, 0x44, 0x72, 0x62, 0x73, 0x54, 0x6f, 0x42, 0x65, 0x4d, 0x6f, 0x64, 0x69, 0x66,
	0x69, 0x65, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x52, 0x71, 0x64, 0x4d, 0x4e, 0x74,
	0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x26, 0x0a,
	0x06, 0x64, 0x72, 0x62, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x72, 0x62, 0x49, 0x44, 0x52, 0x06, 0x64,
	0x72, 0x62, 0x2d, 0x49, 0x44, 0x12, 0x59, 0x0a, 0x15, 0x73, 0x5f, 0x6e, 0x5f, 0x64, 0x6c, 0x5f,
	0x73, 0x63, 0x67, 0x5f, 0x75, 0x70, 0x5f, 0x74, 0x6e, 0x6c, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x55,
	0x70, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x49,
	0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x14, 0x73, 0x4e, 0x2d, 0x44,
	0x4c, 0x2d, 0x53, 0x43, 0x47, 0x2d, 0x55, 0x50, 0x2d, 0x54, 0x4e, 0x4c, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x71, 0x0a, 0x1e, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x5f, 0x73, 0x6e,
	0x5f, 0x64, 0x6c, 0x5f, 0x73, 0x63, 0x67, 0x5f, 0x75, 0x70, 0x5f, 0x74, 0x6e, 0x6c, 0x69, 0x6e,
	0x66, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e,
	0x76, 0x31, 0x2e, 0x55, 0x70, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x4c, 0x61,
	0x79, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00,
	0x52, 0x1e, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x2d, 0x53, 0x4e, 0x2d, 0x44,
	0x4c, 0x2d, 0x53, 0x43, 0x47, 0x2d, 0x55, 0x50, 0x2d, 0x54, 0x4e, 0x4c, 0x49, 0x6e, 0x66, 0x6f,
	0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x05, 0x6c, 0x5f, 0x63, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x63, 0x69,
	0x64, 0x48, 0x01, 0x52, 0x04, 0x6c, 0x43, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x37, 0x0a, 0x0a,
	0x72, 0x6c, 0x63, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x6c, 0x63, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x48, 0x02, 0x52, 0x0a, 0x72, 0x6c, 0x63, 0x2d, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x88, 0x01, 0x01, 0x12, 0x60, 0x0a, 0x0e, 0x69, 0x5f, 0x65, 0x5f, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x39, 0x2e,
	0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x72, 0x62, 0x73, 0x54, 0x6f, 0x42, 0x65,
	0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x52,
	0x71, 0x64, 0x4d, 0x4e, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x49, 0x74,
	0x65, 0x6d, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x52, 0x0d, 0x69, 0x45, 0x2d, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x21, 0x0a, 0x1f, 0x5f, 0x73, 0x65, 0x63, 0x6f,
	0x6e, 0x64, 0x61, 0x72, 0x79, 0x5f, 0x73, 0x6e, 0x5f, 0x64, 0x6c, 0x5f, 0x73, 0x63, 0x67, 0x5f,
	0x75, 0x70, 0x5f, 0x74, 0x6e, 0x6c, 0x69, 0x6e, 0x66, 0x6f, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x6c,
	0x5f, 0x63, 0x69, 0x64, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x72, 0x6c, 0x63, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x22, 0x62, 0x0a, 0x32, 0x50, 0x64, 0x75, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x6f, 0x64, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x72, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x4d, 0x4e, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61,
	0x74, 0x65, 0x64, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x92, 0x01, 0x0a, 0x2c, 0x50, 0x64, 0x75, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x6f,
	0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x4d, 0x4e, 0x74, 0x65,
	0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x12, 0x62, 0x0a, 0x0e, 0x69, 0x5f, 0x65, 0x5f,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x3b, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x64, 0x75, 0x73, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x6f, 0x64,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x4d, 0x4e, 0x74, 0x65, 0x72,
	0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x52, 0x0d, 0x69,
	0x45, 0x2d, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x6b, 0x0a, 0x3b,
	0x50, 0x64, 0x75, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x42, 0x65, 0x61, 0x72, 0x65, 0x72, 0x53, 0x65, 0x74, 0x75, 0x70, 0x43, 0x6f, 0x6d,
	0x70, 0x6c, 0x65, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x53, 0x4e, 0x74, 0x65, 0x72, 0x6d, 0x69,
	0x6e, 0x61, 0x74, 0x65, 0x64, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xa2, 0x02, 0x0a, 0x35, 0x50, 0x64,
	0x75, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x42, 0x65, 0x61, 0x72, 0x65, 0x72, 0x53, 0x65, 0x74, 0x75, 0x70, 0x43, 0x6f, 0x6d, 0x70, 0x6c,
	0x65, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x53, 0x4e, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61,
	0x74, 0x65, 0x64, 0x12, 0x7c, 0x0a, 0x16, 0x64, 0x5f, 0x72, 0x62, 0x73, 0x5f, 0x74, 0x6f, 0x5f,
	0x62, 0x65, 0x5f, 0x73, 0x65, 0x74, 0x75, 0x70, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x72,
	0x62, 0x73, 0x54, 0x6f, 0x42, 0x65, 0x53, 0x65, 0x74, 0x75, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x42,
	0x65, 0x61, 0x72, 0x65, 0x72, 0x53, 0x65, 0x74, 0x75, 0x70, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65,
	0x74, 0x65, 0x53, 0x4e, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x49, 0x74,
	0x65, 0x6d, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x92, 0x01, 0x04, 0x08, 0x01, 0x10, 0x20, 0x52, 0x11,
	0x64, 0x52, 0x42, 0x73, 0x54, 0x6f, 0x42, 0x65, 0x53, 0x65, 0x74, 0x75, 0x70, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x6b, 0x0a, 0x0e, 0x69, 0x5f, 0x65, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x44, 0x2e, 0x78, 0x6e, 0x61, 0x70,
	0x2e, 0x76, 0x31, 0x2e, 0x50, 0x64, 0x75, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x42, 0x65, 0x61, 0x72, 0x65, 0x72, 0x53, 0x65, 0x74, 0x75,
	0x70, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x53, 0x4e, 0x74,
	0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x52,
	0x0d, 0x69, 0x45, 0x2d, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x6a,
	0x0a, 0x3a, 0x44, 0x72, 0x62, 0x73, 0x54, 0x6f, 0x42, 0x65, 0x53, 0x65, 0x74, 0x75, 0x70, 0x4c,
	0x69, 0x73, 0x74, 0x42, 0x65, 0x61, 0x72, 0x65, 0x72, 0x53, 0x65, 0x74, 0x75, 0x70, 0x43, 0x6f,
	0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x4e, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74,
	0x65, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xa3, 0x02, 0x0a, 0x34, 0x44,
	0x72, 0x62, 0x73, 0x54, 0x6f, 0x42, 0x65, 0x53, 0x65, 0x74, 0x75, 0x70, 0x4c, 0x69, 0x73, 0x74,
	0x42, 0x65, 0x61, 0x72, 0x65, 0x72, 0x53, 0x65, 0x74, 0x75, 0x70, 0x43, 0x6f, 0x6d, 0x70, 0x6c,
	0x65, 0x74, 0x65, 0x53, 0x4e, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x49,
	0x74, 0x65, 0x6d, 0x12, 0x27, 0x0a, 0x07, 0x64, 0x5f, 0x72, 0x62, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x44,
	0x72, 0x62, 0x49, 0x44, 0x52, 0x06, 0x64, 0x52, 0x42, 0x2d, 0x49, 0x44, 0x12, 0x56, 0x0a, 0x14,
	0x6d, 0x5f, 0x6e, 0x5f, 0x78, 0x6e, 0x5f, 0x75, 0x5f, 0x74, 0x6e, 0x6c, 0x69, 0x6e, 0x66, 0x6f,
	0x61, 0x74, 0x5f, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x78, 0x6e, 0x61,
	0x70, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74,
	0x4c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x12, 0x6d, 0x4e, 0x2d, 0x58, 0x6e, 0x2d, 0x55, 0x2d, 0x54, 0x4e, 0x4c, 0x49, 0x6e, 0x66,
	0x6f, 0x61, 0x74, 0x4d, 0x12, 0x6a, 0x0a, 0x0e, 0x69, 0x5f, 0x65, 0x5f, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x43, 0x2e, 0x78,
	0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x72, 0x62, 0x73, 0x54, 0x6f, 0x42, 0x65, 0x53,
	0x65, 0x74, 0x75, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x65, 0x61, 0x72, 0x65, 0x72, 0x53, 0x65,
	0x74, 0x75, 0x70, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x4e, 0x74, 0x65, 0x72,
	0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x45, 0x78, 0x74, 0x49, 0x65,
	0x73, 0x52, 0x0d, 0x69, 0x45, 0x2d, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x22, 0x7e, 0x0a, 0x27, 0x50, 0x64, 0x75, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x52,
	0x61, 0x74, 0x75, 0x73, 0x61, 0x67, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x53, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x78, 0x6e, 0x61,
	0x70, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x64, 0x75, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79,
	0x52, 0x61, 0x74, 0x75, 0x73, 0x61, 0x67, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x42, 0x0b, 0xfa, 0x42,
	0x08, 0x92, 0x01, 0x05, 0x08, 0x01, 0x10, 0x80, 0x02, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x22, 0x5d, 0x0a, 0x2d, 0x50, 0x64, 0x75, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x52,
	0x61, 0x74, 0x75, 0x73, 0x61, 0x67, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x45, 0x78, 0x74, 0x49, 0x65,
	0x73, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22,
	0xb2, 0x02, 0x0a, 0x27, 0x50, 0x64, 0x75, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x52,
	0x61, 0x74, 0x75, 0x73, 0x61, 0x67, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x3b, 0x0a, 0x0e, 0x70,
	0x5f, 0x64, 0x75, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x64,
	0x75, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x52, 0x0c, 0x70, 0x44, 0x55, 0x53,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x6b, 0x0a, 0x1e, 0x73, 0x65, 0x63, 0x6f,
	0x6e, 0x64, 0x61, 0x72, 0x79, 0x5f, 0x72, 0x61, 0x74, 0x75, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x69,
	0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x25, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x63, 0x6f, 0x6e,
	0x64, 0x61, 0x72, 0x79, 0x52, 0x61, 0x74, 0x75, 0x73, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x1c, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61,
	0x72, 0x79, 0x52, 0x41, 0x54, 0x55, 0x73, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x5d, 0x0a, 0x0e, 0x69, 0x5f, 0x65, 0x5f, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x36, 0x2e,
	0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x64, 0x75, 0x73, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64,
	0x61, 0x72, 0x79, 0x52, 0x61, 0x74, 0x75, 0x73, 0x61, 0x67, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x45,
	0x78, 0x74, 0x49, 0x65, 0x73, 0x52, 0x0d, 0x69, 0x45, 0x2d, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x22, 0x4b, 0x0a, 0x1b, 0x50, 0x64, 0x75, 0x73, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x55, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x45, 0x78, 0x74,
	0x49, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x22, 0x88, 0x02, 0x0a, 0x15, 0x50, 0x64, 0x75, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x55, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x40, 0x0a, 0x08, 0x72,
	0x5f, 0x61, 0x74, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e,
	0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x61, 0x74, 0x74, 0x79, 0x70, 0x65, 0x50,
	0x64, 0x75, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x55, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x52, 0x07, 0x72, 0x41, 0x54, 0x54, 0x79, 0x70, 0x65, 0x12, 0x60, 0x0a,
	0x1d, 0x70, 0x5f, 0x64, 0x75, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x64, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x56,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x64, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x19, 0x70, 0x44, 0x55, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x54, 0x69, 0x6d, 0x65, 0x64, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x4b, 0x0a, 0x0e, 0x69, 0x5f, 0x65, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76,
	0x31, 0x2e, 0x50, 0x64, 0x75, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x55, 0x73, 0x61, 0x67,
	0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x52, 0x0d, 0x69,
	0x45, 0x2d, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x30, 0x0a, 0x0c,
	0x50, 0x64, 0x75, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x20, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0a, 0xfa, 0x42, 0x07,
	0x1a, 0x05, 0x18, 0xff, 0x01, 0x28, 0x00, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x3d,
	0x0a, 0x19, 0x50, 0x64, 0x75, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x20, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x1a,
	0x05, 0x18, 0x80, 0x02, 0x28, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x37, 0x0a,
	0x1f, 0x50, 0x64, 0x75, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x40, 0x0a, 0x10, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64,
	0x69, 0x63, 0x61, 0x6c, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x4e, 0x0a, 0x0a, 0x50, 0x65, 0x72, 0x69,
	0x6f, 0x64, 0x69, 0x63, 0x61, 0x6c, 0x12, 0x40, 0x0a, 0x0e, 0x69, 0x5f, 0x65, 0x5f, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x69,
	0x63, 0x61, 0x6c, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x52, 0x0d, 0x69, 0x45, 0x2d, 0x45, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x2f, 0x0a, 0x0c, 0x50, 0x6c, 0x6d, 0x6e,
	0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x1f, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x09, 0xfa, 0x42, 0x06, 0x7a, 0x04, 0x10, 0x03,
	0x18, 0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x41, 0x0a, 0x0d, 0x50, 0x63, 0x69,
	0x6c, 0x69, 0x73, 0x74, 0x46, 0x6f, 0x72, 0x4d, 0x64, 0x74, 0x12, 0x30, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x78, 0x6e, 0x61, 0x70,
	0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x72, 0x70, 0x63, 0x69, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x92, 0x01,
	0x04, 0x08, 0x01, 0x10, 0x20, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x36, 0x0a, 0x0a,
	0x50, 0x6f, 0x72, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x28, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x61, 0x73, 0x6e, 0x31,
	0x2e, 0x76, 0x31, 0x2e, 0x42, 0x69, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x22, 0x33, 0x0a, 0x10, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79,
	0x4c, 0x65, 0x76, 0x65, 0x6c, 0x51, 0x6f, 0x53, 0x12, 0x1f, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x09, 0xfa, 0x42, 0x06, 0x1a, 0x04, 0x18, 0x7f,
	0x28, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x56, 0x0a, 0x26, 0x50, 0x72, 0x6f,
	0x74, 0x65, 0x63, 0x74, 0x65, 0x64, 0x45, 0x55, 0x54, 0x72, 0x61, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x74,
	0x49, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x22, 0xcd, 0x03, 0x0a, 0x20, 0x50, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x65, 0x64, 0x45,
	0x55, 0x54, 0x72, 0x61, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x6e, 0x64, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3d, 0x0a, 0x0e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x66, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x66, 0x6e, 0x52, 0x0d, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x46, 0x4e, 0x12, 0x5b, 0x0a, 0x17, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74,
	0x65, 0x64, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31,
	0x2e, 0x50, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x65, 0x64, 0x45, 0x55, 0x54, 0x72, 0x61, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x15, 0x70, 0x72, 0x6f,
	0x74, 0x65, 0x63, 0x74, 0x65, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x65, 0x0a, 0x1b, 0x6d, 0x62, 0x73, 0x66, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74,
	0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76,
	0x31, 0x2e, 0x4d, 0x62, 0x73, 0x66, 0x6e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x52, 0x65,
	0x67, 0x69, 0x6f, 0x6e, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x48, 0x00, 0x52, 0x18, 0x6d, 0x62,
	0x73, 0x66, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e,
	0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x88, 0x01, 0x01, 0x12, 0x2e, 0x0a, 0x13, 0x70, 0x5f, 0x64,
	0x63, 0x63, 0x68, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x70, 0x44, 0x43, 0x43, 0x48, 0x52, 0x65, 0x67,
	0x69, 0x6f, 0x6e, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x56, 0x0a, 0x0e, 0x69, 0x5f, 0x65,
	0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x2f, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x74,
	0x65, 0x63, 0x74, 0x65, 0x64, 0x45, 0x55, 0x54, 0x72, 0x61, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x74, 0x49,
	0x65, 0x73, 0x52, 0x0d, 0x69, 0x45, 0x2d, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x73, 0x42, 0x1e, 0x0a, 0x1c, 0x5f, 0x6d, 0x62, 0x73, 0x66, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74,
	0x68, 0x22, 0x63, 0x0a, 0x1a, 0x50, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x65, 0x64, 0x45, 0x55,
	0x54, 0x72, 0x61, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x45, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23,
	0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74,
	0x65, 0x64, 0x45, 0x55, 0x54, 0x72, 0x61, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49,
	0x74, 0x65, 0x6d, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x92, 0x01, 0x04, 0x08, 0x01, 0x10, 0x10, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x50, 0x0a, 0x20, 0x50, 0x72, 0x6f, 0x74, 0x65, 0x63,
	0x74, 0x65, 0x64, 0x45, 0x55, 0x54, 0x72, 0x61, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x49, 0x74, 0x65, 0x6d, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x89, 0x04, 0x0a, 0x1a, 0x50, 0x72, 0x6f,
	0x74, 0x65, 0x63, 0x74, 0x65, 0x64, 0x45, 0x55, 0x54, 0x72, 0x61, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x54, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2f,
	0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x65, 0x64, 0x45, 0x75,
	0x74, 0x72, 0x61, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x52,
	0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x66, 0x0a,
	0x25, 0x69, 0x6e, 0x74, 0x72, 0x61, 0x5f, 0x70, 0x72, 0x62, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x63,
	0x74, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x66, 0x6f, 0x6f,
	0x74, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x61,
	0x73, 0x6e, 0x31, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x69, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x52, 0x23, 0x69, 0x6e, 0x74, 0x72, 0x61, 0x2d, 0x50, 0x52, 0x42, 0x50, 0x72, 0x6f, 0x74, 0x65,
	0x63, 0x74, 0x65, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x46, 0x6f, 0x6f, 0x74,
	0x70, 0x72, 0x69, 0x6e, 0x74, 0x12, 0x65, 0x0a, 0x25, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74,
	0x65, 0x64, 0x5f, 0x66, 0x6f, 0x6f, 0x74, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x5f, 0x66, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x61, 0x73, 0x6e, 0x31, 0x2e, 0x76, 0x31, 0x2e, 0x42,
	0x69, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x22, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x63,
	0x74, 0x65, 0x64, 0x46, 0x6f, 0x6f, 0x74, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x46, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x6e, 0x63, 0x79, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x12, 0x74, 0x0a, 0x20,
	0x70, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x66, 0x6f, 0x6f, 0x74, 0x70, 0x72,
	0x69, 0x6e, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31,
	0x2e, 0x50, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x65, 0x64, 0x45, 0x55, 0x54, 0x72, 0x61, 0x66,
	0x6f, 0x6f, 0x74, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x50, 0x61, 0x74, 0x74,
	0x65, 0x72, 0x6e, 0x52, 0x1d, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x65, 0x64, 0x46, 0x6f,
	0x6f, 0x74, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x50, 0x61, 0x74, 0x74, 0x65,
	0x72, 0x6e, 0x12, 0x50, 0x0a, 0x0e, 0x69, 0x5f, 0x65, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x78, 0x6e, 0x61,
	0x70, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x65, 0x64, 0x45, 0x55,
	0x54, 0x72, 0x61, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x45,
	0x78, 0x74, 0x49, 0x65, 0x73, 0x52, 0x0d, 0x69, 0x45, 0x2d, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x22, 0x58, 0x0a, 0x28, 0x50, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x65,
	0x64, 0x45, 0x55, 0x54, 0x72, 0x61, 0x66, 0x6f, 0x6f, 0x74, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x54,
	0x69, 0x6d, 0x65, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73,
	0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x93,
	0x02, 0x0a, 0x22, 0x50, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x65, 0x64, 0x45, 0x55, 0x54, 0x72,
	0x61, 0x66, 0x6f, 0x6f, 0x74, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x50, 0x61,
	0x74, 0x74, 0x65, 0x72, 0x6e, 0x12, 0x4e, 0x0a, 0x23, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74,
	0x65, 0x64, 0x5f, 0x66, 0x6f, 0x6f, 0x74, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x69, 0x63, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x21, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x65, 0x64, 0x46, 0x6f, 0x6f,
	0x74, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64,
	0x69, 0x63, 0x69, 0x74, 0x79, 0x12, 0x43, 0x0a, 0x1e, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74,
	0x65, 0x64, 0x5f, 0x66, 0x6f, 0x6f, 0x74, 0x72, 0x70, 0x69, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x1b, 0x70,
	0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x65, 0x64, 0x46, 0x6f, 0x6f, 0x74, 0x72, 0x70, 0x69, 0x6e,
	0x74, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x58, 0x0a, 0x0e, 0x69, 0x5f,
	0x65, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x31, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f,
	0x74, 0x65, 0x63, 0x74, 0x65, 0x64, 0x45, 0x55, 0x54, 0x72, 0x61, 0x66, 0x6f, 0x6f, 0x74, 0x70,
	0x72, 0x69, 0x6e, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x45,
	0x78, 0x74, 0x49, 0x65, 0x73, 0x52, 0x0d, 0x69, 0x45, 0x2d, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x22, 0x48, 0x0a, 0x18, 0x51, 0x6f, 0x53, 0x63, 0x68, 0x61, 0x72, 0x61,
	0x63, 0x74, 0x65, 0x72, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73,
	0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xfd,
	0x01, 0x0a, 0x12, 0x51, 0x6f, 0x53, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x69,
	0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x44, 0x0a, 0x0b, 0x6e, 0x6f, 0x6e, 0x5f, 0x64, 0x79, 0x6e,
	0x61, 0x6d, 0x69, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x78, 0x6e, 0x61,
	0x70, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x6e, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x35,
	0x51, 0x69, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x0b,
	0x6e, 0x6f, 0x6e, 0x2d, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x12, 0x39, 0x0a, 0x07, 0x64,
	0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x78,
	0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x35, 0x51,
	0x69, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x07, 0x64,
	0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x12, 0x4f, 0x0a, 0x10, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65,
	0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x6f, 0x53, 0x63, 0x68,
	0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x45, 0x78, 0x74,
	0x49, 0x65, 0x73, 0x48, 0x00, 0x52, 0x10, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x2d, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x15, 0x0a, 0x13, 0x71, 0x6f, 0x5f, 0x73, 0x63,
	0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x22, 0x34,
	0x0a, 0x11, 0x51, 0x6f, 0x53, 0x66, 0x6c, 0x6f, 0x77, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x12, 0x1f, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x42, 0x09, 0xfa, 0x42, 0x06, 0x1a, 0x04, 0x18, 0x3f, 0x28, 0x00, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x22, 0x8f, 0x03, 0x0a, 0x28, 0x51, 0x6f, 0x53, 0x66, 0x6c, 0x6f, 0x77,
	0x4c, 0x65, 0x76, 0x65, 0x6c, 0x51, 0x6f, 0x53, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65,
	0x72, 0x73, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x5b, 0x0a, 0x19, 0x69, 0x64, 0x5f, 0x71, 0x6f, 0x5f, 0x73, 0x6d, 0x6f, 0x6e, 0x69,
	0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x51,
	0x6f, 0x73, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x17, 0x69, 0x64, 0x2d, 0x51, 0x6f, 0x53, 0x4d, 0x6f, 0x6e,
	0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x7d,
	0x0a, 0x25, 0x69, 0x64, 0x5f, 0x71, 0x6f, 0x73, 0x5f, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72,
	0x69, 0x6e, 0x67, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x66, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e,
	0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x6f, 0x73, 0x4d, 0x6f, 0x6e, 0x69, 0x74,
	0x6f, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x46, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x48, 0x00, 0x52, 0x22, 0x69, 0x64, 0x2d, 0x51, 0x6f,
	0x73, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x69, 0x6e, 0x67, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x5e, 0x0a,
	0x1a, 0x69, 0x64, 0x5f, 0x71, 0x6f, 0x5f, 0x73, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69,
	0x6e, 0x67, 0x5f, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x1e, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x6f, 0x53, 0x6d,
	0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x48, 0x00, 0x52, 0x18, 0x69, 0x64, 0x2d, 0x51, 0x6f, 0x53, 0x4d, 0x6f, 0x6e, 0x69, 0x74,
	0x6f, 0x72, 0x69, 0x6e, 0x67, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x42, 0x27, 0x0a,
	0x25, 0x71, 0x6f, 0x5f, 0x73, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f,
	0x71, 0x6f, 0x5f, 0x73, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x5f, 0x65,
	0x78, 0x74, 0x5f, 0x69, 0x65, 0x73, 0x22, 0xd4, 0x01, 0x0a, 0x1f, 0x51, 0x6f, 0x53, 0x66, 0x6c,
	0x6f, 0x77, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x51, 0x6f, 0x53, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65,
	0x74, 0x65, 0x72, 0x73, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31,
	0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x49, 0x65, 0x49, 0x44, 0x52, 0x03, 0x26,
	0x69, 0x64, 0x12, 0x37, 0x0a, 0x0b, 0x63, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x69, 0x74,
	0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x0c, 0x26,
	0x63, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x50, 0x0a, 0x09, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31,
	0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x6f, 0x53, 0x66, 0x6c, 0x6f, 0x77,
	0x4c, 0x65, 0x76, 0x65, 0x6c, 0x51, 0x6f, 0x53, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65,
	0x72, 0x73, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x0a, 0x26, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xf9, 0x04,
	0x0a, 0x19, 0x51, 0x6f, 0x53, 0x66, 0x6c, 0x6f, 0x77, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x51, 0x6f,
	0x53, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x4d, 0x0a, 0x13, 0x71,
	0x6f, 0x73, 0x5f, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x69, 0x73, 0x74, 0x69,
	0x63, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e,
	0x76, 0x31, 0x2e, 0x51, 0x6f, 0x53, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x69,
	0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x13, 0x71, 0x6f, 0x73, 0x2d, 0x63, 0x68, 0x61, 0x72, 0x61,
	0x63, 0x74, 0x65, 0x72, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x6a, 0x0a, 0x1d, 0x61, 0x6c,
	0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x72, 0x65, 0x74,
	0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x72, 0x69, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x27, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x6c, 0x6c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69,
	0x6f, 0x6e, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x52, 0x1a, 0x61, 0x6c, 0x6c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6e, 0x64, 0x52, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69,
	0x6f, 0x6e, 0x50, 0x72, 0x69, 0x6f, 0x12, 0x47, 0x0a, 0x11, 0x67, 0x5f, 0x62, 0x72, 0x71, 0x6f,
	0x5f, 0x73, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x62, 0x72, 0x71,
	0x6f, 0x53, 0x66, 0x6c, 0x6f, 0x77, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x0e, 0x67, 0x42,
	0x52, 0x51, 0x6f, 0x53, 0x46, 0x6c, 0x6f, 0x77, 0x49, 0x6e, 0x66, 0x6f, 0x88, 0x01, 0x01, 0x12,
	0x4a, 0x0a, 0x0e, 0x72, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x71, 0x6f, 0x5f,
	0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76,
	0x31, 0x2e, 0x52, 0x65, 0x66, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x51, 0x6f, 0x53, 0x61,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x48, 0x01, 0x52, 0x0c, 0x72, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x51, 0x6f, 0x53, 0x88, 0x01, 0x01, 0x12, 0x75, 0x0a, 0x18, 0x61,
	0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x71, 0x6f, 0x5f, 0x73, 0x66, 0x6c,
	0x6f, 0x77, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x37, 0x2e,
	0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x61, 0x6c, 0x51, 0x6f, 0x53, 0x66, 0x6c, 0x6f, 0x77, 0x49, 0x6e, 0x66, 0x6f, 0x51, 0x6f, 0x53,
	0x66, 0x6c, 0x6f, 0x77, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x51, 0x6f, 0x53, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x48, 0x02, 0x52, 0x15, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x61, 0x6c, 0x51, 0x6f, 0x53, 0x66, 0x6c, 0x6f, 0x77, 0x49, 0x6e, 0x66, 0x6f, 0x88,
	0x01, 0x01, 0x12, 0x4f, 0x0a, 0x0e, 0x69, 0x5f, 0x65, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x78, 0x6e, 0x61,
	0x70, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x6f, 0x53, 0x66, 0x6c, 0x6f, 0x77, 0x4c, 0x65, 0x76, 0x65,
	0x6c, 0x51, 0x6f, 0x53, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x45, 0x78,
	0x74, 0x49, 0x65, 0x73, 0x52, 0x0d, 0x69, 0x45, 0x2d, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x73, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x67, 0x5f, 0x62, 0x72, 0x71, 0x6f, 0x5f, 0x73,
	0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x72, 0x65,
	0x6c, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x71, 0x6f, 0x5f, 0x73, 0x42, 0x1b, 0x0a, 0x19,
	0x5f, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x71, 0x6f, 0x5f, 0x73,
	0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x22, 0x68, 0x0a, 0x28, 0x51, 0x6f, 0x53,
	0x66, 0x6c, 0x6f, 0x77, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x3c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x51,
	0x6f, 0x53, 0x66, 0x6c, 0x6f, 0x77, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x49, 0x74, 0x65, 0x6d,
	0x42, 0x0a, 0xfa, 0x42, 0x07, 0x92, 0x01, 0x04, 0x08, 0x01, 0x10, 0x40, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x22, 0x5e, 0x0a, 0x2e, 0x51, 0x6f, 0x53, 0x66, 0x6c, 0x6f, 0x77, 0x4e, 0x6f,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x45,
	0x78, 0x74, 0x49, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x22, 0xad, 0x02, 0x0a, 0x11, 0x51, 0x6f, 0x53, 0x66, 0x6c, 0x6f, 0x77, 0x4e,
	0x6f, 0x74, 0x69, 0x66, 0x79, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x4a, 0x0a, 0x13, 0x71, 0x6f, 0x73,
	0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31,
	0x2e, 0x51, 0x6f, 0x53, 0x66, 0x6c, 0x6f, 0x77, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x52, 0x11, 0x71, 0x6f, 0x73, 0x46, 0x6c, 0x6f, 0x77, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x6c, 0x0a, 0x18, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x31, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76,
	0x31, 0x2e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x51, 0x6f, 0x53, 0x66, 0x6c, 0x6f, 0x77,
	0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x17, 0x6e, 0x6f, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x5e, 0x0a, 0x0e, 0x69, 0x5f, 0x65, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x78, 0x6e,
	0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x6f, 0x53, 0x66, 0x6c, 0x6f, 0x77, 0x4e, 0x6f, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x45, 0x78,
	0x74, 0x49, 0x65, 0x73, 0x52, 0x0d, 0x69, 0x45, 0x2d, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x73, 0x22, 0x46, 0x0a, 0x0c, 0x51, 0x6f, 0x53, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x36, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x6f, 0x53,
	0x66, 0x6c, 0x6f, 0x77, 0x49, 0x74, 0x65, 0x6d, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x92, 0x01, 0x04,
	0x08, 0x01, 0x10, 0x40, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x41, 0x0a, 0x11, 0x51,
	0x6f, 0x53, 0x66, 0x6c, 0x6f, 0x77, 0x49, 0x74, 0x65, 0x6d, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73,
	0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x83,
	0x02, 0x0a, 0x0b, 0x51, 0x6f, 0x53, 0x66, 0x6c, 0x6f, 0x77, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x2c,
	0x0a, 0x03, 0x71, 0x66, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x78, 0x6e,
	0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x6f, 0x53, 0x66, 0x6c, 0x6f, 0x77, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x03, 0x71, 0x66, 0x69, 0x12, 0x65, 0x0a, 0x1b,
	0x71, 0x6f, 0x73, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67,
	0x5f, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x21, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x6f, 0x53, 0x66,
	0x6c, 0x6f, 0x77, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x18, 0x71, 0x6f, 0x73, 0x46, 0x6c, 0x6f, 0x77, 0x4d,
	0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x88, 0x01, 0x01, 0x12, 0x3f, 0x0a, 0x0d, 0x69, 0x5f, 0x65, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x78, 0x6e, 0x61,
	0x70, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x6f, 0x53, 0x66, 0x6c, 0x6f, 0x77, 0x49, 0x74, 0x65, 0x6d,
	0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x52, 0x0c, 0x69, 0x45, 0x2d, 0x45, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x42, 0x1e, 0x0a, 0x1c, 0x5f, 0x71, 0x6f, 0x73, 0x5f, 0x66, 0x6c, 0x6f,
	0x77, 0x5f, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x22, 0x58, 0x0a, 0x15, 0x51, 0x6f, 0x53, 0x66, 0x6c, 0x6f, 0x77, 0x73,
	0x4c, 0x69, 0x73, 0x74, 0x77, 0x69, 0x74, 0x68, 0x43, 0x61, 0x75, 0x73, 0x65, 0x12, 0x3f, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x78,
	0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x6f, 0x53, 0x66, 0x6c, 0x6f, 0x77, 0x77, 0x69,
	0x74, 0x68, 0x43, 0x61, 0x75, 0x73, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x42, 0x0a, 0xfa, 0x42, 0x07,
	0x92, 0x01, 0x04, 0x08, 0x01, 0x10, 0x40, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x4a,
	0x0a, 0x1a, 0x51, 0x6f, 0x53, 0x66, 0x6c, 0x6f, 0x77, 0x77, 0x69, 0x74, 0x68, 0x43, 0x61, 0x75,
	0x73, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xc3, 0x01, 0x0a, 0x14, 0x51,
	0x6f, 0x53, 0x66, 0x6c, 0x6f, 0x77, 0x77, 0x69, 0x74, 0x68, 0x43, 0x61, 0x75, 0x73, 0x65, 0x49,
	0x74, 0x65, 0x6d, 0x12, 0x2c, 0x0a, 0x03, 0x71, 0x66, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x6f, 0x53, 0x66, 0x6c,
	0x6f, 0x77, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x03, 0x71, 0x66,
	0x69, 0x12, 0x29, 0x0a, 0x05, 0x63, 0x61, 0x75, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0e, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x61, 0x75, 0x73, 0x65,
	0x48, 0x00, 0x52, 0x05, 0x63, 0x61, 0x75, 0x73, 0x65, 0x88, 0x01, 0x01, 0x12, 0x48, 0x0a, 0x0d,
	0x69, 0x5f, 0x65, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x6f,
	0x53, 0x66, 0x6c, 0x6f, 0x77, 0x77, 0x69, 0x74, 0x68, 0x43, 0x61, 0x75, 0x73, 0x65, 0x49, 0x74,
	0x65, 0x6d, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x52, 0x0c, 0x69, 0x45, 0x2d, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x63, 0x61, 0x75, 0x73, 0x65,
	0x22, 0x4b, 0x0a, 0x1b, 0x51, 0x6f, 0x53, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x49, 0x6e,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x12,
	0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xe2, 0x01,
	0x0a, 0x15, 0x51, 0x6f, 0x53, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x04, 0x64, 0x73, 0x63, 0x70, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x61, 0x73, 0x6e, 0x31, 0x2e, 0x76, 0x31, 0x2e,
	0x42, 0x69, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x48, 0x00, 0x52, 0x04, 0x64, 0x73, 0x63,
	0x70, 0x88, 0x01, 0x01, 0x12, 0x37, 0x0a, 0x0a, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x6c, 0x61, 0x62,
	0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x61, 0x73, 0x6e, 0x31, 0x2e,
	0x76, 0x31, 0x2e, 0x42, 0x69, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x48, 0x01, 0x52, 0x0a,
	0x66, 0x6c, 0x6f, 0x77, 0x2d, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x4b, 0x0a,
	0x0e, 0x69, 0x5f, 0x65, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e,
	0x51, 0x6f, 0x53, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x52, 0x0d, 0x69, 0x45, 0x2d,
	0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x64,
	0x73, 0x63, 0x70, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x6c, 0x61, 0x62,
	0x65, 0x6c, 0x22, 0x32, 0x0a, 0x0f, 0x51, 0x6f, 0x53, 0x70, 0x61, 0x72, 0x61, 0x53, 0x65, 0x74,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1f, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x42, 0x09, 0xfa, 0x42, 0x06, 0x1a, 0x04, 0x18, 0x08, 0x28, 0x01, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x38, 0x0a, 0x15, 0x51, 0x6f, 0x53, 0x70, 0x61, 0x72,
	0x61, 0x53, 0x65, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12,
	0x1f, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x09,
	0xfa, 0x42, 0x06, 0x1a, 0x04, 0x18, 0x08, 0x28, 0x00, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x22, 0x57, 0x0a, 0x14, 0x51, 0x6f, 0x53, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x41, 0x64, 0x6d, 0x69,
	0x74, 0x74, 0x65, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x3f, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76,
	0x31, 0x2e, 0x51, 0x6f, 0x53, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x41, 0x64, 0x6d, 0x69, 0x74, 0x74,
	0x65, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x92, 0x01, 0x04, 0x08, 0x01,
	0x10, 0x40, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x4a, 0x0a, 0x1a, 0x51, 0x6f, 0x53,
	0x66, 0x6c, 0x6f, 0x77, 0x73, 0x41, 0x64, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x49, 0x74, 0x65,
	0x6d, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x8e, 0x01, 0x0a, 0x14, 0x51, 0x6f, 0x53, 0x66, 0x6c, 0x6f,
	0x77, 0x73, 0x41, 0x64, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x2c,
	0x0a, 0x03, 0x71, 0x66, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x78, 0x6e,
	0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x6f, 0x53, 0x66, 0x6c, 0x6f, 0x77, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x03, 0x71, 0x66, 0x69, 0x12, 0x48, 0x0a, 0x0d,
	0x69, 0x5f, 0x65, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x6f,
	0x53, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x41, 0x64, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x49, 0x74,
	0x65, 0x6d, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x52, 0x0c, 0x69, 0x45, 0x2d, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x59, 0x0a, 0x15, 0x51, 0x6f, 0x53, 0x66, 0x6c, 0x6f,
	0x77, 0x73, 0x54, 0x6f, 0x42, 0x65, 0x53, 0x65, 0x74, 0x75, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x40, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x6f, 0x53, 0x66, 0x6c, 0x6f, 0x77,
	0x73, 0x54, 0x6f, 0x42, 0x65, 0x53, 0x65, 0x74, 0x75, 0x70, 0x49, 0x74, 0x65, 0x6d, 0x42, 0x0a,
	0xfa, 0x42, 0x07, 0x92, 0x01, 0x04, 0x08, 0x01, 0x10, 0x40, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x22, 0xa4, 0x02, 0x0a, 0x24, 0x51, 0x6f, 0x53, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x54, 0x6f,
	0x42, 0x65, 0x53, 0x65, 0x74, 0x75, 0x70, 0x49, 0x74, 0x65, 0x6d, 0x45, 0x78, 0x74, 0x49, 0x65,
	0x73, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x69, 0x0a, 0x1d, 0x69, 0x64,
	0x5f, 0x74, 0x73, 0x63, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x5f, 0x63, 0x68, 0x61, 0x72,
	0x61, 0x63, 0x74, 0x65, 0x72, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x73, 0x63, 0x74,
	0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x69,
	0x73, 0x74, 0x69, 0x63, 0x73, 0x48, 0x00, 0x52, 0x1c, 0x69, 0x64, 0x2d, 0x54, 0x53, 0x43, 0x54,
	0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x69,
	0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x6b, 0x0a, 0x1f, 0x69, 0x64, 0x5f, 0x72, 0x65, 0x64, 0x75,
	0x6e, 0x64, 0x61, 0x6e, 0x74, 0x5f, 0x71, 0x6f, 0x5f, 0x73, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x69,
	0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22,
	0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x64, 0x75, 0x6e, 0x64, 0x61,
	0x6e, 0x74, 0x51, 0x6f, 0x53, 0x66, 0x6c, 0x6f, 0x77, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74,
	0x6f, 0x72, 0x48, 0x00, 0x52, 0x1c, 0x69, 0x64, 0x2d, 0x52, 0x65, 0x64, 0x75, 0x6e, 0x64, 0x61,
	0x6e, 0x74, 0x51, 0x6f, 0x53, 0x46, 0x6c, 0x6f, 0x77, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74,
	0x6f, 0x72, 0x42, 0x24, 0x0a, 0x22, 0x71, 0x6f, 0x5f, 0x73, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x5f,
	0x74, 0x6f, 0x5f, 0x62, 0x65, 0x5f, 0x73, 0x65, 0x74, 0x75, 0x70, 0x5f, 0x69, 0x74, 0x65, 0x6d,
	0x5f, 0x65, 0x78, 0x74, 0x5f, 0x69, 0x65, 0x73, 0x22, 0xcc, 0x01, 0x0a, 0x1b, 0x51, 0x6f, 0x53,
	0x66, 0x6c, 0x6f, 0x77, 0x73, 0x54, 0x6f, 0x42, 0x65, 0x53, 0x65, 0x74, 0x75, 0x70, 0x49, 0x74,
	0x65, 0x6d, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x49, 0x65, 0x49, 0x44, 0x52, 0x03, 0x26, 0x69, 0x64,
	0x12, 0x37, 0x0a, 0x0b, 0x63, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x0c, 0x26, 0x63, 0x72,
	0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x4c, 0x0a, 0x09, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x78,
	0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x6f, 0x53, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x54,
	0x6f, 0x42, 0x65, 0x53, 0x65, 0x74, 0x75, 0x70, 0x49, 0x74, 0x65, 0x6d, 0x45, 0x78, 0x74, 0x49,
	0x65, 0x73, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x26, 0x45, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xb5, 0x02, 0x0a, 0x15, 0x51, 0x6f, 0x53, 0x66,
	0x6c, 0x6f, 0x77, 0x73, 0x54, 0x6f, 0x42, 0x65, 0x53, 0x65, 0x74, 0x75, 0x70, 0x49, 0x74, 0x65,
	0x6d, 0x12, 0x2c, 0x0a, 0x03, 0x71, 0x66, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x6f, 0x53, 0x66, 0x6c, 0x6f, 0x77,
	0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x03, 0x71, 0x66, 0x69, 0x12,
	0x64, 0x0a, 0x1d, 0x71, 0x6f, 0x73, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x6c, 0x65, 0x76, 0x65,
	0x6c, 0x5f, 0x71, 0x6f, 0x5f, 0x73, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31,
	0x2e, 0x51, 0x6f, 0x53, 0x66, 0x6c, 0x6f, 0x77, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x51, 0x6f, 0x53,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x52, 0x19, 0x71, 0x6f, 0x73, 0x46,
	0x6c, 0x6f, 0x77, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x51, 0x6f, 0x53, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x30, 0x0a, 0x08, 0x65, 0x5f, 0x72, 0x61, 0x62, 0x5f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76,
	0x31, 0x2e, 0x45, 0x52, 0x41, 0x62, 0x49, 0x44, 0x48, 0x00, 0x52, 0x08, 0x65, 0x2d, 0x52, 0x41,
	0x42, 0x2d, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x49, 0x0a, 0x0d, 0x69, 0x5f, 0x65, 0x5f, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24,
	0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x6f, 0x53, 0x66, 0x6c, 0x6f, 0x77,
	0x73, 0x54, 0x6f, 0x42, 0x65, 0x53, 0x65, 0x74, 0x75, 0x70, 0x49, 0x74, 0x65, 0x6d, 0x45, 0x78,
	0x74, 0x49, 0x65, 0x73, 0x52, 0x0c, 0x69, 0x45, 0x2d, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x65, 0x5f, 0x72, 0x61, 0x62, 0x5f, 0x69, 0x64, 0x22,
	0x5d, 0x0a, 0x17, 0x51, 0x6f, 0x53, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x55, 0x73, 0x61, 0x67, 0x65,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x42, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x78, 0x6e, 0x61, 0x70,
	0x2e, 0x76, 0x31, 0x2e, 0x51, 0x6f, 0x53, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x55, 0x73, 0x61, 0x67,
	0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x42, 0x0a, 0xfa, 0x42, 0x07,
	0x92, 0x01, 0x04, 0x08, 0x01, 0x10, 0x40, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x4d,
	0x0a, 0x1d, 0x51, 0x6f, 0x53, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x55, 0x73, 0x61, 0x67, 0x65, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x12,
	0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xd6, 0x02,
	0x0a, 0x17, 0x51, 0x6f, 0x53, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x55, 0x73, 0x61, 0x67, 0x65, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x4a, 0x0a, 0x13, 0x71, 0x6f, 0x73,
	0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31,
	0x2e, 0x51, 0x6f, 0x53, 0x66, 0x6c, 0x6f, 0x77, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x52, 0x11, 0x71, 0x6f, 0x73, 0x46, 0x6c, 0x6f, 0x77, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x42, 0x0a, 0x08, 0x72, 0x5f, 0x61, 0x74, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76,
	0x31, 0x2e, 0x52, 0x61, 0x74, 0x74, 0x79, 0x70, 0x65, 0x51, 0x6f, 0x53, 0x66, 0x6c, 0x6f, 0x77,
	0x73, 0x55, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x74, 0x65, 0x6d,
	0x52, 0x07, 0x72, 0x41, 0x54, 0x54, 0x79, 0x70, 0x65, 0x12, 0x5c, 0x0a, 0x1b, 0x71, 0x6f, 0x5f,
	0x73, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x64, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x17,
	0x71, 0x6f, 0x53, 0x46, 0x6c, 0x6f, 0x77, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x64, 0x52, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x4d, 0x0a, 0x0e, 0x69, 0x5f, 0x65, 0x5f, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x26, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x6f, 0x53, 0x66, 0x6c, 0x6f,
	0x77, 0x73, 0x55, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x74, 0x65,
	0x6d, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x52, 0x0d, 0x69, 0x45, 0x2d, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x43, 0x0a, 0x1f, 0x51, 0x6f, 0x73, 0x4d, 0x6f, 0x6e,
	0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67,
	0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x20, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x1a, 0x05, 0x18,
	0x88, 0x0e, 0x28, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x56, 0x0a, 0x15, 0x52,
	0x61, 0x63, 0x68, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3d, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x61,
	0x63, 0x68, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x74, 0x65, 0x6d,
	0x42, 0x0a, 0xfa, 0x42, 0x07, 0x92, 0x01, 0x04, 0x08, 0x01, 0x10, 0x40, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x22, 0x48, 0x0a, 0x18, 0x52, 0x61, 0x63, 0x68, 0x72, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x12,
	0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x9d, 0x01,
	0x0a, 0x12, 0x52, 0x61, 0x63, 0x68, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x4c, 0x69, 0x73, 0x74,
	0x49, 0x74, 0x65, 0x6d, 0x12, 0x3d, 0x0a, 0x0b, 0x72, 0x5f, 0x61, 0x63, 0x68, 0x72, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x78, 0x6e, 0x61, 0x70,
	0x2e, 0x76, 0x31, 0x2e, 0x52, 0x61, 0x63, 0x68, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x6f,
	0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x52, 0x0a, 0x72, 0x41, 0x43, 0x48, 0x52, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x12, 0x48, 0x0a, 0x0e, 0x69, 0x5f, 0x65, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x78, 0x6e,
	0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x61, 0x63, 0x68, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x4c, 0x69, 0x73, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x52, 0x0d,
	0x69, 0x45, 0x2d, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x2b, 0x0a,
	0x13, 0x52, 0x61, 0x63, 0x68, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61,
	0x69, 0x6e, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x49, 0x0a, 0x19, 0x52, 0x61,
	0x64, 0x69, 0x6f, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xc8, 0x02, 0x0a, 0x13, 0x52, 0x61, 0x64, 0x69, 0x6f, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x66, 0x0a,
	0x1d, 0x6e, 0x67, 0x5f, 0x65, 0x5f, 0x6e, 0x62, 0x5f, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x5f, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x4e,
	0x67, 0x65, 0x4e, 0x62, 0x52, 0x61, 0x64, 0x69, 0x6f, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x48, 0x00, 0x52, 0x1a, 0x6e, 0x67, 0x2d, 0x65, 0x4e,
	0x42, 0x2d, 0x52, 0x61, 0x64, 0x69, 0x6f, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x5e, 0x0a, 0x1a, 0x67, 0x5f, 0x6e, 0x62, 0x5f, 0x72, 0x61,
	0x64, 0x69, 0x6f, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x78, 0x6e, 0x61, 0x70,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6e, 0x62, 0x52, 0x61, 0x64, 0x69, 0x6f, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x48, 0x00, 0x52, 0x17, 0x67, 0x4e,
	0x42, 0x2d, 0x52, 0x61, 0x64, 0x69, 0x6f, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x50, 0x0a, 0x10, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x5f,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x61, 0x64, 0x69, 0x6f, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x45, 0x78, 0x74,
	0x49, 0x65, 0x73, 0x48, 0x00, 0x52, 0x10, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x2d, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x17, 0x0a, 0x15, 0x72, 0x61, 0x64, 0x69, 0x6f,
	0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x22, 0x29, 0x0a, 0x05, 0x52, 0x61, 0x6e, 0x61, 0x63, 0x12, 0x20, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x1a, 0x05, 0x18,
	0xff, 0x01, 0x28, 0x00, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x3f, 0x0a, 0x0f, 0x52,
	0x61, 0x6e, 0x61, 0x72, 0x65, 0x61, 0x49, 0x64, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x12, 0x2c,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xa4, 0x01, 0x0a,
	0x09, 0x52, 0x61, 0x6e, 0x61, 0x72, 0x65, 0x61, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x04, 0x74, 0x5f,
	0x61, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e,
	0x76, 0x31, 0x2e, 0x54, 0x61, 0x63, 0x52, 0x03, 0x74, 0x41, 0x43, 0x12, 0x2a, 0x0a, 0x06, 0x72,
	0x5f, 0x61, 0x6e, 0x61, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x78, 0x6e,
	0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x61, 0x6e, 0x61, 0x63, 0x48, 0x00, 0x52, 0x05, 0x72,
	0x41, 0x4e, 0x41, 0x43, 0x88, 0x01, 0x01, 0x12, 0x3f, 0x0a, 0x0e, 0x69, 0x5f, 0x65, 0x5f, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x61, 0x6e, 0x61, 0x72, 0x65,
	0x61, 0x49, 0x64, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x52, 0x0d, 0x69, 0x45, 0x2d, 0x45, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x72, 0x5f, 0x61,
	0x6e, 0x61, 0x63, 0x22, 0x45, 0x0a, 0x0d, 0x52, 0x61, 0x6e, 0x61, 0x72, 0x65, 0x61, 0x49, 0x64,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x34, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x61,
	0x6e, 0x61, 0x72, 0x65, 0x61, 0x49, 0x64, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x92, 0x01, 0x04, 0x08,
	0x01, 0x10, 0x10, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x43, 0x0a, 0x13, 0x52, 0x61,
	0x6e, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x41, 0x72, 0x65, 0x61, 0x45, 0x78, 0x74, 0x49, 0x65,
	0x73, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22,
	0xe5, 0x01, 0x0a, 0x0d, 0x52, 0x61, 0x6e, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x41, 0x72, 0x65,
	0x61, 0x12, 0x3c, 0x0a, 0x0e, 0x70, 0x5f, 0x6c, 0x6d, 0x6e, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x78, 0x6e, 0x61, 0x70,
	0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6c, 0x6d, 0x6e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x52, 0x0d, 0x70, 0x4c, 0x4d, 0x4e, 0x2d, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12,
	0x51, 0x0a, 0x16, 0x72, 0x5f, 0x61, 0x6e, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x72,
	0x65, 0x61, 0x5f, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x61, 0x6e, 0x70, 0x61, 0x67,
	0x69, 0x6e, 0x67, 0x41, 0x72, 0x65, 0x61, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x52, 0x13, 0x72,
	0x41, 0x4e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x41, 0x72, 0x65, 0x61, 0x43, 0x68, 0x6f, 0x69,
	0x63, 0x65, 0x12, 0x43, 0x0a, 0x0e, 0x69, 0x5f, 0x65, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x78, 0x6e, 0x61,
	0x70, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x61, 0x6e, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x41, 0x72,
	0x65, 0x61, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x52, 0x0d, 0x69, 0x45, 0x2d, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x49, 0x0a, 0x19, 0x52, 0x61, 0x6e, 0x70, 0x61,
	0x67, 0x69, 0x6e, 0x67, 0x41, 0x72, 0x65, 0x61, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x45, 0x78,
	0x74, 0x49, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x22, 0x93, 0x02, 0x0a, 0x13, 0x52, 0x61, 0x6e, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x67,
	0x41, 0x72, 0x65, 0x61, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x12, 0x4d, 0x0a, 0x09, 0x63, 0x65,
	0x6c, 0x6c, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e,
	0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x67, 0x52, 0x41, 0x6e, 0x43, 0x65, 0x6c,
	0x6c, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x52,
	0x61, 0x6e, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x41, 0x72, 0x65, 0x61, 0x48, 0x00, 0x52, 0x09,
	0x63, 0x65, 0x6c, 0x6c, 0x2d, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x42, 0x0a, 0x10, 0x72, 0x5f, 0x61,
	0x6e, 0x61, 0x72, 0x65, 0x61, 0x5f, 0x69, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x61,
	0x6e, 0x61, 0x72, 0x65, 0x61, 0x49, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x00, 0x52, 0x0e, 0x72,
	0x41, 0x4e, 0x41, 0x72, 0x65, 0x61, 0x49, 0x44, 0x2d, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x50, 0x0a,
	0x10, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76,
	0x31, 0x2e, 0x52, 0x61, 0x6e, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x41, 0x72, 0x65, 0x61, 0x43,
	0x68, 0x6f, 0x69, 0x63, 0x65, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x48, 0x00, 0x52, 0x10, 0x63,
	0x68, 0x6f, 0x69, 0x63, 0x65, 0x2d, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x42,
	0x17, 0x0a, 0x15, 0x72, 0x61, 0x6e, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x72, 0x65,
	0x61, 0x5f, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x22, 0x4a, 0x0a, 0x1a, 0x52, 0x61, 0x6e, 0x70,
	0x61, 0x67, 0x69, 0x6e, 0x67, 0x41, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x49, 0x6e, 0x66, 0x6f,
	0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x22, 0xe7, 0x02, 0x0a, 0x14, 0x52, 0x61, 0x6e, 0x70, 0x61, 0x67, 0x69,
	0x6e, 0x67, 0x41, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x30, 0x0a,
	0x14, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x70, 0x61, 0x67,
	0x69, 0x6e, 0x67, 0x41, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x4a, 0x0a, 0x22, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x5f, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x5f, 0x6f, 0x66, 0x5f, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x74, 0x74,
	0x65, 0x6d, 0x70, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x1e, 0x69, 0x6e, 0x74,
	0x65, 0x6e, 0x64, 0x65, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x50, 0x61, 0x67,
	0x69, 0x6e, 0x67, 0x41, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x73, 0x12, 0x6a, 0x0a, 0x16, 0x6e,
	0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x72, 0x65, 0x61, 0x5f,
	0x73, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x30, 0x2e, 0x78, 0x6e,
	0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x67,
	0x41, 0x72, 0x65, 0x61, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x52, 0x61, 0x6e, 0x70, 0x61, 0x67, 0x69,
	0x6e, 0x67, 0x41, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52,
	0x13, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x41, 0x72, 0x65, 0x61, 0x53,
	0x63, 0x6f, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x4a, 0x0a, 0x0e, 0x69, 0x5f, 0x65, 0x5f, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x23, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x61, 0x6e, 0x70, 0x61, 0x67,
	0x69, 0x6e, 0x67, 0x41, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x45, 0x78,
	0x74, 0x49, 0x65, 0x73, 0x52, 0x0d, 0x69, 0x45, 0x2d, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x73, 0x42, 0x19, 0x0a, 0x17, 0x5f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67,
	0x69, 0x6e, 0x67, 0x5f, 0x61, 0x72, 0x65, 0x61, 0x5f, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x22, 0x54,
	0x0a, 0x24, 0x52, 0x65, 0x64, 0x75, 0x6e, 0x64, 0x61, 0x6e, 0x74, 0x50, 0x64, 0x75, 0x73, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x22, 0x97, 0x01, 0x0a, 0x1e, 0x52, 0x65, 0x64, 0x75, 0x6e, 0x64, 0x61,
	0x6e, 0x74, 0x50, 0x64, 0x75, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x04, 0x72, 0x5f, 0x73, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e,
	0x52, 0x73, 0x6e, 0x52, 0x03, 0x72, 0x53, 0x4e, 0x12, 0x54, 0x0a, 0x0e, 0x69, 0x5f, 0x65, 0x5f,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x2d, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x64, 0x75, 0x6e,
	0x64, 0x61, 0x6e, 0x74, 0x50, 0x64, 0x75, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x52,
	0x0d, 0x69, 0x45, 0x2d, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x2e,
	0x0a, 0x0b, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x1f, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x09, 0xfa, 0x42,
	0x06, 0x1a, 0x04, 0x18, 0x40, 0x28, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x96,
	0x01, 0x0a, 0x0a, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x35, 0x0a,
	0x0a, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x69, 0x63, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x65, 0x72, 0x69,
	0x6f, 0x64, 0x69, 0x63, 0x61, 0x6c, 0x48, 0x00, 0x52, 0x0a, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64,
	0x69, 0x63, 0x61, 0x6c, 0x12, 0x42, 0x0a, 0x0f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x72,
	0x69, 0x67, 0x67, 0x65, 0x72, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x72, 0x69,
	0x67, 0x67, 0x65, 0x72, 0x65, 0x64, 0x48, 0x00, 0x52, 0x0e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54,
	0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x65, 0x64, 0x42, 0x0d, 0x0a, 0x0b, 0x72, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x22, 0x41, 0x0a, 0x15, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73,
	0x12, 0x28, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x61, 0x73, 0x6e, 0x31, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x69, 0x74, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x35, 0x0a, 0x12, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64,
	0x12, 0x1f, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42,
	0x09, 0xfa, 0x42, 0x06, 0x1a, 0x04, 0x18, 0x40, 0x28, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x22, 0x4d, 0x0a, 0x1d, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x53, 0x75, 0x62,
	0x66, 0x72, 0x61, 0x6d, 0x65, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x45, 0x78, 0x74, 0x49,
	0x65, 0x73, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x22, 0x90, 0x03, 0x0a, 0x17, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x53, 0x75, 0x62,
	0x66, 0x72, 0x61, 0x6d, 0x65, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x12, 0x51, 0x0a, 0x0d,
	0x73, 0x75, 0x62, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x2c, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75,
	0x62, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x64, 0x53, 0x75, 0x62, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72,
	0x6e, 0x52, 0x0c, 0x73, 0x75, 0x62, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x4e, 0x0a, 0x19, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x5f, 0x73, 0x75, 0x62, 0x66,
	0x72, 0x61, 0x6d, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x61, 0x73, 0x6e, 0x31, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x69, 0x74,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x17, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64,
	0x53, 0x75, 0x62, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x12,
	0x65, 0x0a, 0x1b, 0x6d, 0x62, 0x73, 0x66, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x5f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x4d,
	0x62, 0x73, 0x66, 0x6e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x52, 0x65, 0x67, 0x69, 0x6f,
	0x6e, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x48, 0x00, 0x52, 0x18, 0x6d, 0x62, 0x73, 0x66, 0x6e,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x4c, 0x65, 0x6e,
	0x67, 0x74, 0x68, 0x88, 0x01, 0x01, 0x12, 0x4b, 0x0a, 0x0d, 0x69, 0x5f, 0x65, 0x5f, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e,
	0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64,
	0x53, 0x75, 0x62, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x45,
	0x78, 0x74, 0x49, 0x65, 0x73, 0x52, 0x0c, 0x69, 0x45, 0x2d, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x42, 0x1e, 0x0a, 0x1c, 0x5f, 0x6d, 0x62, 0x73, 0x66, 0x6e, 0x5f, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x65, 0x6e,
	0x67, 0x74, 0x68, 0x22, 0x4a, 0x0a, 0x1a, 0x52, 0x65, 0x73, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x45, 0x78, 0x74, 0x49, 0x65,
	0x73, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22,
	0x95, 0x02, 0x0a, 0x14, 0x52, 0x65, 0x73, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x42, 0x0a, 0x0a, 0x66, 0x75, 0x6c, 0x6c,
	0x5f, 0x72, 0x65, 0x73, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x78,
	0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x46, 0x75, 0x6c, 0x6c, 0x48,
	0x00, 0x52, 0x09, 0x66, 0x75, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x65, 0x74, 0x12, 0x4b, 0x0a, 0x0d,
	0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65,
	0x73, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x48, 0x00, 0x52, 0x0c, 0x70, 0x61, 0x72,
	0x74, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x65, 0x74, 0x12, 0x51, 0x0a, 0x10, 0x63, 0x68, 0x6f,
	0x69, 0x63, 0x65, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65,
	0x73, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x48, 0x00, 0x52, 0x10, 0x63, 0x68, 0x6f, 0x69,
	0x63, 0x65, 0x2d, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x19, 0x0a, 0x17,
	0x72, 0x65, 0x73, 0x65, 0x74, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x22, 0x4e, 0x0a, 0x1e, 0x52, 0x65, 0x73, 0x65, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x46,
	0x75, 0x6c, 0x6c, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x68, 0x0a, 0x18, 0x52, 0x65, 0x73, 0x65, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x46,
	0x75, 0x6c, 0x6c, 0x12, 0x4c, 0x0a, 0x0d, 0x69, 0x5f, 0x65, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x78, 0x6e, 0x61,
	0x70, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x46, 0x75, 0x6c, 0x6c, 0x45, 0x78, 0x74,
	0x49, 0x65, 0x73, 0x52, 0x0c, 0x69, 0x45, 0x2d, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x22, 0x51, 0x0a, 0x21, 0x52, 0x65, 0x73, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c,
	0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x22, 0xde, 0x01, 0x0a, 0x1b, 0x52, 0x65, 0x73, 0x65, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x50, 0x61, 0x72,
	0x74, 0x69, 0x61, 0x6c, 0x12, 0x6e, 0x0a, 0x1f, 0x75, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x73, 0x5f, 0x74, 0x6f, 0x5f, 0x62, 0x65, 0x5f, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73,
	0x65, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e,
	0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x65, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x6c, 0x65, 0x61,
	0x73, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x1c, 0x75, 0x65, 0x2d, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x73, 0x2d, 0x54, 0x6f, 0x42, 0x65, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x64,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x4f, 0x0a, 0x0d, 0x69, 0x5f, 0x65, 0x5f, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x78, 0x6e,
	0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61,
	0x6c, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x52, 0x0c, 0x69, 0x45, 0x2d, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x6c, 0x0a, 0x1e, 0x52, 0x65, 0x73, 0x65, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x6c, 0x65,
	0x61, 0x73, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x4a, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31,
	0x2e, 0x52, 0x65, 0x73, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x61, 0x72,
	0x74, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x42,
	0x0b, 0xfa, 0x42, 0x08, 0x92, 0x01, 0x05, 0x08, 0x01, 0x10, 0x80, 0x40, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x22, 0x54, 0x0a, 0x24, 0x52, 0x65, 0x73, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73,
	0x65, 0x49, 0x74, 0x65, 0x6d, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xda, 0x02, 0x0a, 0x1e, 0x52, 0x65,
	0x73, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61,
	0x6c, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x55, 0x0a, 0x16,
	0x6e, 0x67, 0x5f, 0x72, 0x61, 0x6e, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x31, 0x5f, 0x75, 0x65, 0x78,
	0x6e, 0x5f, 0x61, 0x70, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x78,
	0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x67, 0x52, 0x41, 0x6e, 0x6e, 0x6f, 0x64, 0x65,
	0x55, 0x65, 0x78, 0x6e, 0x41, 0x70, 0x69, 0x64, 0x48, 0x00, 0x52, 0x14, 0x6e, 0x67, 0x2d, 0x72,
	0x61, 0x6e, 0x2d, 0x6e, 0x6f, 0x64, 0x65, 0x31, 0x55, 0x45, 0x58, 0x6e, 0x41, 0x50, 0x49, 0x44,
	0x88, 0x01, 0x01, 0x12, 0x55, 0x0a, 0x16, 0x6e, 0x67, 0x5f, 0x72, 0x61, 0x6e, 0x5f, 0x6e, 0x6f,
	0x64, 0x65, 0x32, 0x5f, 0x75, 0x65, 0x78, 0x6e, 0x5f, 0x61, 0x70, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x67,
	0x52, 0x41, 0x6e, 0x6e, 0x6f, 0x64, 0x65, 0x55, 0x65, 0x78, 0x6e, 0x41, 0x70, 0x69, 0x64, 0x48,
	0x01, 0x52, 0x14, 0x6e, 0x67, 0x2d, 0x72, 0x61, 0x6e, 0x2d, 0x6e, 0x6f, 0x64, 0x65, 0x32, 0x55,
	0x45, 0x58, 0x6e, 0x41, 0x50, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x54, 0x0a, 0x0e, 0x69, 0x5f,
	0x65, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73,
	0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c,
	0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x45, 0x78, 0x74, 0x49, 0x65,
	0x73, 0x52, 0x0d, 0x69, 0x45, 0x2d, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x42, 0x19, 0x0a, 0x17, 0x5f, 0x6e, 0x67, 0x5f, 0x72, 0x61, 0x6e, 0x5f, 0x6e, 0x6f, 0x64, 0x65,
	0x31, 0x5f, 0x75, 0x65, 0x78, 0x6e, 0x5f, 0x61, 0x70, 0x69, 0x64, 0x42, 0x19, 0x0a, 0x17, 0x5f,
	0x6e, 0x67, 0x5f, 0x72, 0x61, 0x6e, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x32, 0x5f, 0x75, 0x65, 0x78,
	0x6e, 0x5f, 0x61, 0x70, 0x69, 0x64, 0x22, 0x4b, 0x0a, 0x1b, 0x52, 0x65, 0x73, 0x65, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x45,
	0x78, 0x74, 0x49, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x22, 0x9a, 0x02, 0x0a, 0x15, 0x52, 0x65, 0x73, 0x65, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x43, 0x0a,
	0x0a, 0x66, 0x75, 0x6c, 0x6c, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x65,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x46, 0x75, 0x6c, 0x6c, 0x48, 0x00, 0x52, 0x09, 0x66, 0x75, 0x6c, 0x6c, 0x52, 0x65, 0x73,
	0x65, 0x74, 0x12, 0x4c, 0x0a, 0x0d, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x72, 0x65,
	0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x78, 0x6e, 0x61, 0x70,
	0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c,
	0x48, 0x00, 0x52, 0x0c, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x65, 0x74,
	0x12, 0x52, 0x0a, 0x10, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x78, 0x6e, 0x61,
	0x70, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73,
	0x48, 0x00, 0x52, 0x10, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x2d, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x42, 0x1a, 0x0a, 0x18, 0x72, 0x65, 0x73, 0x65, 0x74, 0x5f, 0x72, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f,
	0x22, 0x4f, 0x0a, 0x1f, 0x52, 0x65, 0x73, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x46, 0x75, 0x6c, 0x6c, 0x45, 0x78, 0x74,
	0x49, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x22, 0x6a, 0x0a, 0x19, 0x52, 0x65, 0x73, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x46, 0x75, 0x6c, 0x6c, 0x12, 0x4d,
	0x0a, 0x0d, 0x69, 0x5f, 0x65, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e,
	0x52, 0x65, 0x73, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x46, 0x75, 0x6c, 0x6c, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x52,
	0x0c, 0x69, 0x45, 0x2d, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x52, 0x0a,
	0x22, 0x52, 0x65, 0x73, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x45, 0x78, 0x74,
	0x49, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x22, 0xf3, 0x01, 0x0a, 0x1c, 0x52, 0x65, 0x73, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x50, 0x61, 0x72, 0x74, 0x69,
	0x61, 0x6c, 0x12, 0x80, 0x01, 0x0a, 0x28, 0x75, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78,
	0x74, 0x73, 0x5f, 0x61, 0x64, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x6f, 0x5f, 0x62,
	0x65, 0x5f, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e,
	0x52, 0x65, 0x73, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x61, 0x72,
	0x74, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x24, 0x75, 0x65, 0x2d, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x73, 0x2d, 0x41, 0x64, 0x6d,
	0x69, 0x74, 0x74, 0x65, 0x64, 0x54, 0x6f, 0x42, 0x65, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65,
	0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x50, 0x0a, 0x0d, 0x69, 0x5f, 0x65, 0x5f, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x78,
	0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x50, 0x61, 0x72, 0x74,
	0x69, 0x61, 0x6c, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x52, 0x0c, 0x69, 0x45, 0x2d, 0x45, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x6e, 0x0a, 0x1f, 0x52, 0x65, 0x73, 0x65, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x52,
	0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x4b, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x78, 0x6e, 0x61, 0x70,
	0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x49,
	0x74, 0x65, 0x6d, 0x42, 0x0b, 0xfa, 0x42, 0x08, 0x92, 0x01, 0x05, 0x08, 0x01, 0x10, 0x80, 0x40,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x55, 0x0a, 0x25, 0x52, 0x65, 0x73, 0x65, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x52,
	0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73,
	0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xdc,
	0x02, 0x0a, 0x1f, 0x52, 0x65, 0x73, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x49, 0x74,
	0x65, 0x6d, 0x12, 0x55, 0x0a, 0x16, 0x6e, 0x67, 0x5f, 0x72, 0x61, 0x6e, 0x5f, 0x6e, 0x6f, 0x64,
	0x65, 0x31, 0x5f, 0x75, 0x65, 0x78, 0x6e, 0x5f, 0x61, 0x70, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x67, 0x52,
	0x41, 0x6e, 0x6e, 0x6f, 0x64, 0x65, 0x55, 0x65, 0x78, 0x6e, 0x41, 0x70, 0x69, 0x64, 0x48, 0x00,
	0x52, 0x14, 0x6e, 0x67, 0x2d, 0x72, 0x61, 0x6e, 0x2d, 0x6e, 0x6f, 0x64, 0x65, 0x31, 0x55, 0x45,
	0x58, 0x6e, 0x41, 0x50, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x55, 0x0a, 0x16, 0x6e, 0x67, 0x5f,
	0x72, 0x61, 0x6e, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x32, 0x5f, 0x75, 0x65, 0x78, 0x6e, 0x5f, 0x61,
	0x70, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x78, 0x6e, 0x61, 0x70,
	0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x67, 0x52, 0x41, 0x6e, 0x6e, 0x6f, 0x64, 0x65, 0x55, 0x65, 0x78,
	0x6e, 0x41, 0x70, 0x69, 0x64, 0x48, 0x01, 0x52, 0x14, 0x6e, 0x67, 0x2d, 0x72, 0x61, 0x6e, 0x2d,
	0x6e, 0x6f, 0x64, 0x65, 0x32, 0x55, 0x45, 0x58, 0x6e, 0x41, 0x50, 0x49, 0x44, 0x88, 0x01, 0x01,
	0x12, 0x55, 0x0a, 0x0e, 0x69, 0x5f, 0x65, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e,
	0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x49, 0x74,
	0x65, 0x6d, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x52, 0x0d, 0x69, 0x45, 0x2d, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x19, 0x0a, 0x17, 0x5f, 0x6e, 0x67, 0x5f, 0x72,
	0x61, 0x6e, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x31, 0x5f, 0x75, 0x65, 0x78, 0x6e, 0x5f, 0x61, 0x70,
	0x69, 0x64, 0x42, 0x19, 0x0a, 0x17, 0x5f, 0x6e, 0x67, 0x5f, 0x72, 0x61, 0x6e, 0x5f, 0x6e, 0x6f,
	0x64, 0x65, 0x32, 0x5f, 0x75, 0x65, 0x78, 0x6e, 0x5f, 0x61, 0x70, 0x69, 0x64, 0x22, 0x3f, 0x0a,
	0x0f, 0x52, 0x6c, 0x63, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73,
	0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xb0,
	0x01, 0x0a, 0x09, 0x52, 0x6c, 0x63, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x62, 0x0a, 0x1a,
	0x72, 0x65, 0x65, 0x73, 0x74, 0x61, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x5f,
	0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x22, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x65, 0x73, 0x74,
	0x61, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x1a, 0x72, 0x65, 0x65, 0x73, 0x74, 0x61, 0x62, 0x6c, 0x69, 0x73,
	0x68, 0x6d, 0x65, 0x6e, 0x74, 0x2d, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x3f, 0x0a, 0x0e, 0x69, 0x5f, 0x65, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e,
	0x76, 0x31, 0x2e, 0x52, 0x6c, 0x63, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x45, 0x78, 0x74, 0x49,
	0x65, 0x73, 0x52, 0x0d, 0x69, 0x45, 0x2d, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x73, 0x22, 0x53, 0x0a, 0x23, 0x52, 0x6c, 0x63, 0x64, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x74,
	0x65, 0x6d, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xdc, 0x02, 0x0a, 0x19, 0x52, 0x6c, 0x63, 0x64, 0x75,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x5d, 0x0a, 0x1a, 0x72, 0x5f, 0x6c, 0x63, 0x64, 0x75, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e,
	0x76, 0x31, 0x2e, 0x52, 0x6c, 0x63, 0x64, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x17, 0x72, 0x4c, 0x43, 0x44,
	0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x70, 0x0a, 0x16, 0x72, 0x5f, 0x6c, 0x63, 0x5f, 0x70, 0x72, 0x69, 0x6d,
	0x61, 0x72, 0x79, 0x5f, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x35, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x6c,
	0x63, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f,
	0x72, 0x52, 0x6c, 0x63, 0x64, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x14, 0x72, 0x4c,
	0x43, 0x2d, 0x50, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74,
	0x6f, 0x72, 0x88, 0x01, 0x01, 0x12, 0x53, 0x0a, 0x0e, 0x69, 0x5f, 0x65, 0x5f, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e,
	0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x6c, 0x63, 0x64, 0x75, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x74, 0x65, 0x6d, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x52, 0x0d, 0x69, 0x45, 0x2d,
	0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x19, 0x0a, 0x17, 0x5f, 0x72,
	0x5f, 0x6c, 0x63, 0x5f, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x69, 0x6e, 0x64, 0x69,
	0x63, 0x61, 0x74, 0x6f, 0x72, 0x22, 0x5d, 0x0a, 0x17, 0x52, 0x6c, 0x63, 0x64, 0x75, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x42, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x20, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x6c, 0x63, 0x64, 0x75, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x49, 0x74, 0x65,
	0x6d, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x92, 0x01, 0x04, 0x08, 0x01, 0x10, 0x03, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x22, 0x4d, 0x0a, 0x1d, 0x52, 0x6c, 0x63, 0x64, 0x75, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x45,
	0x78, 0x74, 0x49, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x22, 0xc7, 0x01, 0x0a, 0x17, 0x52, 0x6c, 0x63, 0x64, 0x75, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x12,
	0x5d, 0x0a, 0x11, 0x64, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x30, 0x2e, 0x78, 0x6e, 0x61,
	0x70, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x6c, 0x63, 0x64, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x10, 0x64, 0x75,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x4d,
	0x0a, 0x0e, 0x69, 0x5f, 0x65, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31,
	0x2e, 0x52, 0x6c, 0x63, 0x64, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x52, 0x0d,
	0x69, 0x45, 0x2d, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x2d, 0x0a,
	0x09, 0x52, 0x66, 0x73, 0x70, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x20, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x1a, 0x05,
	0x18, 0x80, 0x02, 0x28, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x44, 0x0a, 0x14,
	0x52, 0x72, 0x63, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x78,
	0x74, 0x49, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x22, 0xa8, 0x02, 0x0a, 0x0e, 0x52, 0x72, 0x63, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x4c, 0x0a, 0x13, 0x6e, 0x6f, 0x6f, 0x66, 0x5f, 0x72, 0x72,
	0x63, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x6f,
	0x66, 0x52, 0x72, 0x63, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52,
	0x12, 0x6e, 0x6f, 0x6f, 0x66, 0x52, 0x52, 0x43, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x81, 0x01, 0x0a, 0x26, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c,
	0x65, 0x5f, 0x72, 0x72, 0x63, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x41,
	0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x72, 0x63, 0x63, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x23, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x52, 0x43,
	0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69,
	0x74, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x44, 0x0a, 0x0e, 0x69, 0x5f, 0x65, 0x5f, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x72, 0x63, 0x63, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x52, 0x0d,
	0x69, 0x45, 0x2d, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x49, 0x0a,
	0x19, 0x52, 0x72, 0x63, 0x72, 0x65, 0x65, 0x73, 0x74, 0x61, 0x62, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x61, 0x74, 0x65, 0x64, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xd2, 0x01, 0x0a, 0x13, 0x52, 0x72, 0x63,
	0x72, 0x65, 0x65, 0x73, 0x74, 0x61, 0x62, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x65, 0x64,
	0x12, 0x70, 0x0a, 0x20, 0x72, 0x5f, 0x72, 0x72, 0x63, 0x72, 0x65, 0x65, 0x73, 0x74, 0x61, 0x62,
	0x5f, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x78, 0x6e, 0x61,
	0x70, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x72, 0x63, 0x72, 0x65, 0x65, 0x73, 0x74, 0x61, 0x62, 0x49,
	0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x65, 0x64, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e,
	0x67, 0x52, 0x1f, 0x72, 0x52, 0x52, 0x43, 0x52, 0x65, 0x65, 0x73, 0x74, 0x61, 0x62, 0x2d, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x65, 0x64, 0x2d, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69,
	0x6e, 0x67, 0x12, 0x49, 0x0a, 0x0e, 0x69, 0x5f, 0x65, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x78, 0x6e, 0x61,
	0x70, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x72, 0x63, 0x72, 0x65, 0x65, 0x73, 0x74, 0x61, 0x62, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x65, 0x64, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x52, 0x0d,
	0x69, 0x45, 0x2d, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x52, 0x0a,
	0x22, 0x52, 0x72, 0x63, 0x72, 0x65, 0x65, 0x73, 0x74, 0x61, 0x62, 0x49, 0x6e, 0x69, 0x74, 0x69,
	0x61, 0x74, 0x65, 0x64, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x45, 0x78, 0x74,
	0x49, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x22, 0xb5, 0x03, 0x0a, 0x1c, 0x52, 0x72, 0x63, 0x72, 0x65, 0x65, 0x73, 0x74, 0x61, 0x62,
	0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x65, 0x64, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69,
	0x6e, 0x67, 0x12, 0x87, 0x01, 0x0a, 0x24, 0x72, 0x5f, 0x72, 0x63, 0x72, 0x65, 0x65, 0x73, 0x74,
	0x61, 0x62, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x77, 0x6f, 0x5f,
	0x75, 0x65, 0x72, 0x6c, 0x66, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x32, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x72, 0x63, 0x72,
	0x65, 0x65, 0x73, 0x74, 0x61, 0x62, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x65, 0x64, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x77, 0x6f, 0x55, 0x45, 0x72, 0x6c, 0x66, 0x72,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x48, 0x00, 0x52, 0x23, 0x72, 0x52, 0x43, 0x52, 0x65, 0x65, 0x73,
	0x74, 0x61, 0x62, 0x2d, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2d, 0x77, 0x6f,
	0x2d, 0x55, 0x45, 0x52, 0x4c, 0x46, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x8d, 0x01, 0x0a,
	0x26, 0x72, 0x5f, 0x72, 0x63, 0x72, 0x65, 0x65, 0x73, 0x74, 0x61, 0x62, 0x5f, 0x72, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x75, 0x65, 0x72, 0x6c,
	0x66, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e,
	0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x72, 0x63, 0x72, 0x65, 0x65, 0x73, 0x74,
	0x61, 0x62, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x65, 0x64, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x69, 0x6e, 0x67, 0x77, 0x69, 0x74, 0x68, 0x55, 0x45, 0x72, 0x6c, 0x66, 0x72, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x48, 0x00, 0x52, 0x25, 0x72, 0x52, 0x43, 0x52, 0x65, 0x65, 0x73, 0x74, 0x61,
	0x62, 0x2d, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2d, 0x77, 0x69, 0x74, 0x68,
	0x2d, 0x55, 0x45, 0x52, 0x4c, 0x46, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x59, 0x0a, 0x10,
	0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31,
	0x2e, 0x52, 0x72, 0x63, 0x72, 0x65, 0x65, 0x73, 0x74, 0x61, 0x62, 0x49, 0x6e, 0x69, 0x74, 0x69,
	0x61, 0x74, 0x65, 0x64, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x45, 0x78, 0x74,
	0x49, 0x65, 0x73, 0x48, 0x00, 0x52, 0x10, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x2d, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x20, 0x0a, 0x1e, 0x72, 0x72, 0x63, 0x72, 0x65,
	0x65, 0x73, 0x74, 0x61, 0x62, 0x5f, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x22, 0x5f, 0x0a, 0x2f, 0x52, 0x72, 0x63,
	0x72, 0x65, 0x65, 0x73, 0x74, 0x61, 0x62, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x65, 0x64,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x77, 0x6f, 0x55, 0x45, 0x72, 0x6c, 0x66,
	0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xeb, 0x02, 0x0a, 0x29, 0x52,
	0x72, 0x63, 0x72, 0x65, 0x65, 0x73, 0x74, 0x61, 0x62, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74,
	0x65, 0x64, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x77, 0x6f, 0x55, 0x45, 0x72,
	0x6c, 0x66, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x3f, 0x0a, 0x10, 0x66, 0x61, 0x69, 0x6c,
	0x75, 0x72, 0x65, 0x5f, 0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x70, 0x63, 0x69, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x67, 0x52,
	0x41, 0x6e, 0x43, 0x65, 0x6c, 0x6c, 0x50, 0x63, 0x69, 0x52, 0x0e, 0x66, 0x61, 0x69, 0x6c, 0x75,
	0x72, 0x65, 0x43, 0x65, 0x6c, 0x6c, 0x50, 0x43, 0x49, 0x12, 0x44, 0x0a, 0x10, 0x72, 0x65, 0x65,
	0x73, 0x74, 0x61, 0x62, 0x5f, 0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x63, 0x67, 0x69, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6c,
	0x6f, 0x62, 0x61, 0x6c, 0x4e, 0x67, 0x52, 0x41, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x49, 0x44, 0x52,
	0x0e, 0x72, 0x65, 0x65, 0x73, 0x74, 0x61, 0x62, 0x43, 0x65, 0x6c, 0x6c, 0x43, 0x47, 0x49, 0x12,
	0x26, 0x0a, 0x06, 0x63, 0x5f, 0x72, 0x6e, 0x74, 0x69, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0e, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x52, 0x4e, 0x74, 0x69, 0x52,
	0x06, 0x63, 0x2d, 0x52, 0x4e, 0x54, 0x49, 0x12, 0x2e, 0x0a, 0x0b, 0x73, 0x68, 0x6f, 0x72, 0x74,
	0x5f, 0x6d, 0x61, 0x63, 0x5f, 0x69, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x78,
	0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x63, 0x49, 0x52, 0x0a, 0x73, 0x68, 0x6f,
	0x72, 0x74, 0x4d, 0x41, 0x43, 0x2d, 0x49, 0x12, 0x5f, 0x0a, 0x0e, 0x69, 0x5f, 0x65, 0x5f, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x38, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x72, 0x63, 0x72, 0x65, 0x65,
	0x73, 0x74, 0x61, 0x62, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x65, 0x64, 0x52, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x77, 0x6f, 0x55, 0x45, 0x72, 0x6c, 0x66, 0x72, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x52, 0x0d, 0x69, 0x45, 0x2d, 0x45, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x61, 0x0a, 0x31, 0x52, 0x72, 0x63, 0x72,
	0x65, 0x65, 0x73, 0x74, 0x61, 0x62, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x65, 0x64, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x77, 0x69, 0x74, 0x68, 0x55, 0x45, 0x72, 0x6c,
	0x66, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x12, 0x2c, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xe5, 0x01, 0x0a, 0x2b,
	0x52, 0x72, 0x63, 0x72, 0x65, 0x65, 0x73, 0x74, 0x61, 0x62, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61,
	0x74, 0x65, 0x64, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x77, 0x69, 0x74, 0x68,
	0x55, 0x45, 0x72, 0x6c, 0x66, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x53, 0x0a, 0x16, 0x75,
	0x5f, 0x65, 0x72, 0x6c, 0x66, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x78, 0x6e,
	0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x65, 0x72, 0x6c, 0x66, 0x72, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x52, 0x14, 0x75, 0x45, 0x52, 0x4c,
	0x46, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72,
	0x12, 0x61, 0x0a, 0x0e, 0x69, 0x5f, 0x65, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e,
	0x76, 0x31, 0x2e, 0x52, 0x72, 0x63, 0x72, 0x65, 0x65, 0x73, 0x74, 0x61, 0x62, 0x49, 0x6e, 0x69,
	0x74, 0x69, 0x61, 0x74, 0x65, 0x64, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x77,
	0x69, 0x74, 0x68, 0x55, 0x45, 0x72, 0x6c, 0x66, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x45, 0x78,
	0x74, 0x49, 0x65, 0x73, 0x52, 0x0d, 0x69, 0x45, 0x2d, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x73, 0x22, 0x47, 0x0a, 0x17, 0x52, 0x72, 0x63, 0x73, 0x65, 0x74, 0x75, 0x70, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x65, 0x64, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x12, 0x2c,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xbd, 0x02, 0x0a,
	0x11, 0x52, 0x72, 0x63, 0x73, 0x65, 0x74, 0x75, 0x70, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74,
	0x65, 0x64, 0x12, 0x6a, 0x0a, 0x1e, 0x72, 0x5f, 0x72, 0x72, 0x63, 0x73, 0x65, 0x74, 0x75, 0x70,
	0x5f, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x78, 0x6e, 0x61,
	0x70, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x72, 0x63, 0x73, 0x65, 0x74, 0x75, 0x70, 0x49, 0x6e, 0x69,
	0x74, 0x69, 0x61, 0x74, 0x65, 0x64, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x52,
	0x1d, 0x72, 0x52, 0x52, 0x43, 0x53, 0x65, 0x74, 0x75, 0x70, 0x2d, 0x49, 0x6e, 0x69, 0x74, 0x69,
	0x61, 0x74, 0x65, 0x64, 0x2d, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x58,
	0x0a, 0x16, 0x75, 0x5f, 0x65, 0x72, 0x6c, 0x66, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x63,
	0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x65, 0x72, 0x6c, 0x66, 0x72, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x48, 0x00, 0x52,
	0x14, 0x75, 0x45, 0x52, 0x4c, 0x46, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x47, 0x0a, 0x0e, 0x69, 0x5f, 0x65, 0x5f,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x20, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x72, 0x63, 0x73, 0x65,
	0x74, 0x75, 0x70, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x65, 0x64, 0x45, 0x78, 0x74, 0x49,
	0x65, 0x73, 0x52, 0x0d, 0x69, 0x45, 0x2d, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x73, 0x42, 0x19, 0x0a, 0x17, 0x5f, 0x75, 0x5f, 0x65, 0x72, 0x6c, 0x66, 0x72, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x22, 0x50, 0x0a, 0x20,
	0x52, 0x72, 0x63, 0x73, 0x65, 0x74, 0x75, 0x70, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x65,
	0x64, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73,
	0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x9f,
	0x02, 0x0a, 0x1a, 0x52, 0x72, 0x63, 0x73, 0x65, 0x74, 0x75, 0x70, 0x49, 0x6e, 0x69, 0x74, 0x69,
	0x61, 0x74, 0x65, 0x64, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x87, 0x01,
	0x0a, 0x24, 0x72, 0x5f, 0x72, 0x63, 0x73, 0x65, 0x74, 0x75, 0x70, 0x5f, 0x72, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x75, 0x65, 0x72, 0x6c, 0x66,
	0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x78,
	0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x72, 0x63, 0x73, 0x65, 0x74, 0x75, 0x70, 0x49,
	0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x65, 0x64, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e,
	0x67, 0x77, 0x69, 0x74, 0x68, 0x55, 0x45, 0x72, 0x6c, 0x66, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x48, 0x00, 0x52, 0x23, 0x72, 0x52, 0x43, 0x53, 0x65, 0x74, 0x75, 0x70, 0x2d, 0x72, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2d, 0x77, 0x69, 0x74, 0x68, 0x2d, 0x55, 0x45, 0x52, 0x4c,
	0x46, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x57, 0x0a, 0x10, 0x63, 0x68, 0x6f, 0x69, 0x63,
	0x65, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x29, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x72, 0x63, 0x73,
	0x65, 0x74, 0x75, 0x70, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x65, 0x64, 0x52, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x48, 0x00, 0x52, 0x10,
	0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x2d, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x42, 0x1e, 0x0a, 0x1c, 0x72, 0x72, 0x63, 0x73, 0x65, 0x74, 0x75, 0x70, 0x5f, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67,
	0x22, 0x5f, 0x0a, 0x2f, 0x52, 0x72, 0x63, 0x73, 0x65, 0x74, 0x75, 0x70, 0x49, 0x6e, 0x69, 0x74,
	0x69, 0x61, 0x74, 0x65, 0x64, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x77, 0x69,
	0x74, 0x68, 0x55, 0x45, 0x72, 0x6c, 0x66, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x45, 0x78, 0x74,
	0x49, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x22, 0xe1, 0x01, 0x0a, 0x29, 0x52, 0x72, 0x63, 0x73, 0x65, 0x74, 0x75, 0x70, 0x49, 0x6e,
	0x69, 0x74, 0x69, 0x61, 0x74, 0x65, 0x64, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67,
	0x77, 0x69, 0x74, 0x68, 0x55, 0x45, 0x72, 0x6c, 0x66, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12,
	0x53, 0x0a, 0x16, 0x75, 0x5f, 0x65, 0x72, 0x6c, 0x66, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f,
	0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x65, 0x72, 0x6c, 0x66, 0x72,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x52, 0x14,
	0x75, 0x45, 0x52, 0x4c, 0x46, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61,
	0x69, 0x6e, 0x65, 0x72, 0x12, 0x5f, 0x0a, 0x0e, 0x69, 0x5f, 0x65, 0x5f, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x78,
	0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x72, 0x63, 0x73, 0x65, 0x74, 0x75, 0x70, 0x49,
	0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x65, 0x64, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e,
	0x67, 0x77, 0x69, 0x74, 0x68, 0x55, 0x45, 0x72, 0x6c, 0x66, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x52, 0x0d, 0x69, 0x45, 0x2d, 0x45, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x5f, 0x0a, 0x2f, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61,
	0x72, 0x79, 0x64, 0x61, 0x74, 0x61, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67,
	0x49, 0x6e, 0x66, 0x6f, 0x46, 0x72, 0x6f, 0x6d, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x74,
	0x65, 0x6d, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x97, 0x02, 0x0a, 0x29, 0x53, 0x65, 0x63, 0x6f, 0x6e,
	0x64, 0x61, 0x72, 0x79, 0x64, 0x61, 0x74, 0x61, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69,
	0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x46, 0x72, 0x6f, 0x6d, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x49, 0x74, 0x65, 0x6d, 0x12, 0x88, 0x01, 0x0a, 0x29, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61,
	0x72, 0x79, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e,
	0x67, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x74, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e,
	0x76, 0x31, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e,
	0x67, 0x49, 0x6e, 0x66, 0x6f, 0x46, 0x72, 0x6f, 0x6d, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x4e,
	0x67, 0x72, 0x61, 0x6e, 0x6e, 0x6f, 0x64, 0x65, 0x52, 0x25, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64,
	0x61, 0x72, 0x79, 0x64, 0x61, 0x74, 0x61, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e,
	0x67, 0x49, 0x6e, 0x66, 0x6f, 0x46, 0x72, 0x6f, 0x6d, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12,
	0x5f, 0x0a, 0x0e, 0x69, 0x5f, 0x65, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x64, 0x61, 0x74, 0x61, 0x46,
	0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x46, 0x72, 0x6f,
	0x6d, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x45, 0x78, 0x74, 0x49, 0x65,
	0x73, 0x52, 0x0d, 0x69, 0x45, 0x2d, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x22, 0x81, 0x01, 0x0a, 0x29, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x64, 0x61,
	0x74, 0x61, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f,
	0x46, 0x72, 0x6f, 0x6d, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x54,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e,
	0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72,
	0x79, 0x64, 0x61, 0x74, 0x61, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x49,
	0x6e, 0x66, 0x6f, 0x46, 0x72, 0x6f, 0x6d, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x74, 0x65,
	0x6d, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x92, 0x01, 0x04, 0x08, 0x01, 0x10, 0x03, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x22, 0x52, 0x0a, 0x22, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72,
	0x79, 0x52, 0x61, 0x74, 0x75, 0x73, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xf0, 0x02, 0x0a, 0x1c, 0x53, 0x65, 0x63,
	0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x52, 0x61, 0x74, 0x75, 0x73, 0x61, 0x67, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x5c, 0x0a, 0x18, 0x70, 0x5f, 0x64,
	0x75, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x72,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x78, 0x6e,
	0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x64, 0x75, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x55, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x48, 0x00, 0x52, 0x15, 0x70,
	0x44, 0x55, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x55, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x88, 0x01, 0x01, 0x12, 0x63, 0x0a, 0x1b, 0x71, 0x6f, 0x73, 0x5f, 0x66,
	0x6c, 0x6f, 0x77, 0x73, 0x5f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x78,
	0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x6f, 0x53, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x55,
	0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x01,
	0x52, 0x17, 0x71, 0x6f, 0x73, 0x46, 0x6c, 0x6f, 0x77, 0x73, 0x55, 0x73, 0x61, 0x67, 0x65, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x88, 0x01, 0x01, 0x12, 0x50, 0x0a, 0x0d,
	0x69, 0x5f, 0x65, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65,
	0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x52, 0x61, 0x74, 0x75, 0x73, 0x61, 0x67, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73,
	0x52, 0x0c, 0x69, 0x45, 0x2d, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x1b,
	0x0a, 0x19, 0x5f, 0x70, 0x5f, 0x64, 0x75, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x75,
	0x73, 0x61, 0x67, 0x65, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x42, 0x1e, 0x0a, 0x1c, 0x5f,
	0x71, 0x6f, 0x73, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x5f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x5f,
	0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x22, 0x48, 0x0a, 0x18, 0x53,
	0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xdd, 0x03, 0x0a, 0x12, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69,
	0x74, 0x79, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x80, 0x01, 0x0a,
	0x1f, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x38, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31,
	0x2e, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x74, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65,
	0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x1d, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x74, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x92, 0x01, 0x0a, 0x25, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c,
	0x69, 0x74, 0x79, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x3e, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x63,
	0x75, 0x72, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x23, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x69, 0x74, 0x79,
	0x50, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4e, 0x0a, 0x12, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x5f,
	0x69, 0x70, 0x64, 0x61, 0x74, 0x61, 0x72, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x78, 0x69, 0x6d,
	0x75, 0x6d, 0x49, 0x70, 0x64, 0x61, 0x74, 0x61, 0x72, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x11,
	0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x49, 0x50, 0x64, 0x61, 0x74, 0x61, 0x72, 0x61, 0x74,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x48, 0x0a, 0x0e, 0x69, 0x5f, 0x65, 0x5f, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x78,
	0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x49,
	0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x52,
	0x0d, 0x69, 0x45, 0x2d, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x15,
	0x0a, 0x13, 0x5f, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x5f, 0x69, 0x70, 0x64, 0x61, 0x74,
	0x61, 0x72, 0x61, 0x74, 0x65, 0x22, 0x44, 0x0a, 0x14, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74,
	0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x12, 0x2c, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xcd, 0x02, 0x0a, 0x0e,
	0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x70,
	0x0a, 0x1b, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x70, 0x72, 0x6f, 0x74,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x30, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e,
	0x74, 0x65, 0x67, 0x72, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x19, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x69, 0x74, 0x79,
	0x50, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x12, 0x82, 0x01, 0x0a, 0x21, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61,
	0x6c, 0x69, 0x74, 0x79, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x36, 0x2e, 0x78,
	0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x52, 0x1f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x61, 0x6c, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x44, 0x0a, 0x0e, 0x69, 0x5f, 0x65, 0x5f, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x52, 0x0d, 0x69, 0x45,
	0x2d, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x54, 0x0a, 0x24, 0x53,
	0x65, 0x6e, 0x73, 0x6f, 0x72, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x74,
	0x49, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x22, 0xc8, 0x02, 0x0a, 0x1e, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x4d, 0x65, 0x61, 0x73,
	0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x47, 0x0a, 0x12, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x5f, 0x6d,
	0x65, 0x61, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x19, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x6e, 0x73, 0x6f,
	0x72, 0x4d, 0x65, 0x61, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x10, 0x73, 0x65, 0x6e,
	0x73, 0x6f, 0x72, 0x4d, 0x65, 0x61, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x66, 0x0a,
	0x1c, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x5f, 0x6d, 0x65, 0x61, 0x73, 0x5f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65,
	0x6e, 0x73, 0x6f, 0x72, 0x4d, 0x65, 0x61, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4e, 0x61,
	0x6d, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x00, 0x52, 0x18, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72,
	0x4d, 0x65, 0x61, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x4c, 0x69,
	0x73, 0x74, 0x88, 0x01, 0x01, 0x12, 0x54, 0x0a, 0x0e, 0x69, 0x5f, 0x65, 0x5f, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e,
	0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x4d, 0x65,
	0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x52, 0x0d, 0x69, 0x45,
	0x2d, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x1f, 0x0a, 0x1d, 0x5f,
	0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x5f, 0x6d, 0x65, 0x61, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x22, 0x51, 0x0a, 0x18,
	0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x4d, 0x65, 0x61, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x4e, 0x61, 0x6d, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x35, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x42, 0x0a, 0xfa, 0x42,
	0x07, 0x92, 0x01, 0x04, 0x08, 0x01, 0x10, 0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22,
	0x46, 0x0a, 0x16, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xd5, 0x03, 0x0a, 0x0a, 0x53, 0x65, 0x6e, 0x73,
	0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x7d, 0x0a, 0x1f, 0x75, 0x6e, 0x63, 0x6f, 0x6d, 0x70,
	0x65, 0x6e, 0x73, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x61, 0x72, 0x6f, 0x6d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x30, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x6e, 0x63, 0x6f, 0x6d, 0x70,
	0x65, 0x6e, 0x73, 0x61, 0x74, 0x65, 0x64, 0x42, 0x61, 0x72, 0x6f, 0x6d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x4e, 0x61, 0x6d,
	0x65, 0x48, 0x00, 0x52, 0x1d, 0x75, 0x6e, 0x63, 0x6f, 0x6d, 0x70, 0x65, 0x6e, 0x73, 0x61, 0x74,
	0x65, 0x64, 0x42, 0x61, 0x72, 0x6f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x88, 0x01, 0x01, 0x12, 0x4d, 0x0a, 0x0f, 0x75, 0x65, 0x5f, 0x73, 0x70, 0x65, 0x65,
	0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20,
	0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x65, 0x53, 0x70, 0x65, 0x65, 0x64,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65,
	0x48, 0x01, 0x52, 0x0d, 0x75, 0x65, 0x53, 0x70, 0x65, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x88, 0x01, 0x01, 0x12, 0x5f, 0x0a, 0x15, 0x75, 0x65, 0x5f, 0x6f, 0x72, 0x69, 0x65, 0x6e,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x65,
	0x4f, 0x72, 0x69, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x48, 0x02, 0x52, 0x13, 0x75,
	0x65, 0x4f, 0x72, 0x69, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x88, 0x01, 0x01, 0x12, 0x46, 0x0a, 0x0e, 0x69, 0x5f, 0x65, 0x5f, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x4e, 0x61,
	0x6d, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x52, 0x0d,
	0x69, 0x45, 0x2d, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x22, 0x0a,
	0x20, 0x5f, 0x75, 0x6e, 0x63, 0x6f, 0x6d, 0x70, 0x65, 0x6e, 0x73, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x62, 0x61, 0x72, 0x6f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x75, 0x65, 0x5f, 0x73, 0x70, 0x65, 0x65, 0x64, 0x5f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x18, 0x0a, 0x16, 0x5f, 0x75, 0x65, 0x5f, 0x6f, 0x72, 0x69,
	0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22,
	0x82, 0x02, 0x0a, 0x29, 0x53, 0x65, 0x72, 0x76, 0x65, 0x64, 0x43, 0x65, 0x6c, 0x6c, 0x49, 0x6e,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x55, 0x54, 0x72, 0x61, 0x45, 0x78,
	0x74, 0x49, 0x65, 0x73, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x53, 0x0a,
	0x16, 0x69, 0x64, 0x5f, 0x62, 0x70, 0x6c, 0x6d, 0x6e, 0x5f, 0x69, 0x64, 0x5f, 0x69, 0x6e, 0x66,
	0x6f, 0x5f, 0x65, 0x75, 0x74, 0x72, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x70, 0x6c, 0x6d, 0x6e, 0x49, 0x44, 0x49,
	0x6e, 0x66, 0x6f, 0x45, 0x55, 0x74, 0x72, 0x61, 0x48, 0x00, 0x52, 0x16, 0x69, 0x64, 0x2d, 0x42,
	0x50, 0x4c, 0x4d, 0x4e, 0x2d, 0x49, 0x44, 0x2d, 0x49, 0x6e, 0x66, 0x6f, 0x2d, 0x45, 0x55, 0x54,
	0x52, 0x41, 0x12, 0x56, 0x0a, 0x16, 0x69, 0x64, 0x5f, 0x6e, 0x70, 0x72, 0x61, 0x63, 0x68, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x70, 0x72,
	0x61, 0x63, 0x68, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x48, 0x00, 0x52, 0x16, 0x69, 0x64, 0x2d, 0x4e, 0x50, 0x52, 0x41, 0x43, 0x48, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x28, 0x0a, 0x26, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x64, 0x5f, 0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x5f, 0x75, 0x74, 0x72, 0x61, 0x5f, 0x65, 0x78, 0x74,
	0x5f, 0x69, 0x65, 0x73, 0x22, 0xd6, 0x01, 0x0a, 0x20, 0x53, 0x65, 0x72, 0x76, 0x65, 0x64, 0x43,
	0x65, 0x6c, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x55,
	0x54, 0x72, 0x61, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x49, 0x65, 0x49, 0x44, 0x52, 0x03, 0x26, 0x69,
	0x64, 0x12, 0x37, 0x0a, 0x0b, 0x63, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x0c, 0x26, 0x63,
	0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x51, 0x0a, 0x09, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e,
	0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x64, 0x43, 0x65,
	0x6c, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x55, 0x54,
	0x72, 0x61, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x0a, 0x26, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xf2, 0x0a,
	0x0a, 0x1a, 0x53, 0x65, 0x72, 0x76, 0x65, 0x64, 0x43, 0x65, 0x6c, 0x6c, 0x49, 0x6e, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x55, 0x54, 0x72, 0x61, 0x12, 0x31, 0x0a, 0x0a,
	0x65, 0x5f, 0x75, 0x74, 0x72, 0x61, 0x5f, 0x70, 0x63, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x11, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x55, 0x54, 0x72, 0x61,
	0x70, 0x63, 0x69, 0x52, 0x0a, 0x65, 0x2d, 0x75, 0x74, 0x72, 0x61, 0x2d, 0x70, 0x63, 0x69, 0x12,
	0x31, 0x0a, 0x0a, 0x65, 0x5f, 0x75, 0x74, 0x72, 0x61, 0x5f, 0x63, 0x67, 0x69, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x55,
	0x54, 0x72, 0x61, 0x43, 0x47, 0x69, 0x52, 0x0a, 0x65, 0x2d, 0x75, 0x74, 0x72, 0x61, 0x2d, 0x63,
	0x67, 0x69, 0x12, 0x1e, 0x0a, 0x03, 0x74, 0x61, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0c, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x63, 0x52, 0x03, 0x74,
	0x61, 0x63, 0x12, 0x29, 0x0a, 0x05, 0x72, 0x61, 0x6e, 0x61, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0e, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x61, 0x6e, 0x61,
	0x63, 0x48, 0x00, 0x52, 0x05, 0x72, 0x61, 0x6e, 0x61, 0x63, 0x88, 0x01, 0x01, 0x12, 0x60, 0x0a,
	0x0f, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x70, 0x6c, 0x6d, 0x6e, 0x73,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x64, 0x43, 0x65, 0x6c, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x55, 0x54, 0x72, 0x61, 0x70, 0x65, 0x72, 0x42, 0x70,
	0x6c, 0x6d, 0x6e, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x92, 0x01, 0x04, 0x08, 0x01, 0x10, 0x0c, 0x52,
	0x0e, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x50, 0x4c, 0x4d, 0x4e, 0x73, 0x12,
	0x57, 0x0a, 0x10, 0x65, 0x5f, 0x75, 0x74, 0x72, 0x61, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x5f, 0x69,
	0x6e, 0x66, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x78, 0x6e, 0x61, 0x70,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x64, 0x43, 0x65, 0x6c, 0x6c, 0x49, 0x6e,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x55, 0x54, 0x72, 0x61, 0x4d, 0x6f,
	0x64, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x10, 0x65, 0x2d, 0x75, 0x74, 0x72, 0x61, 0x2d, 0x6d,
	0x6f, 0x64, 0x65, 0x2d, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x5d, 0x0a, 0x16, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x6f, 0x66, 0x5f, 0x61, 0x6e, 0x74, 0x65, 0x6e, 0x6e, 0x61, 0x5f, 0x70, 0x6f, 0x72,
	0x74, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e,
	0x76, 0x31, 0x2e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x41, 0x6e, 0x74, 0x65, 0x6e,
	0x6e, 0x61, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x45, 0x55, 0x54, 0x72, 0x61, 0x48, 0x01, 0x52, 0x14,
	0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x6f, 0x66, 0x41, 0x6e, 0x74, 0x65, 0x6e, 0x6e, 0x61, 0x50,
	0x6f, 0x72, 0x74, 0x73, 0x88, 0x01, 0x01, 0x12, 0x57, 0x0a, 0x13, 0x70, 0x72, 0x61, 0x63, 0x68,
	0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x45,
	0x55, 0x54, 0x72, 0x61, 0x70, 0x72, 0x61, 0x63, 0x68, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x02, 0x52, 0x13, 0x70, 0x72, 0x61, 0x63, 0x68, 0x2d,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01,
	0x12, 0x54, 0x0a, 0x13, 0x6d, 0x5f, 0x62, 0x73, 0x66, 0x6e, 0x73, 0x75, 0x62, 0x66, 0x72, 0x61,
	0x6d, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x62, 0x73, 0x66, 0x6e, 0x73, 0x75, 0x62,
	0x66, 0x72, 0x61, 0x6d, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x45, 0x55, 0x54, 0x72, 0x61, 0x48, 0x03,
	0x52, 0x11, 0x6d, 0x42, 0x53, 0x46, 0x4e, 0x73, 0x75, 0x62, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x4b, 0x0a, 0x0e, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x62,
	0x61, 0x6e, 0x64, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x55, 0x54, 0x72, 0x61, 0x6d, 0x75,
	0x6c, 0x74, 0x69, 0x62, 0x61, 0x6e, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x48,
	0x04, 0x52, 0x0d, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x62, 0x61, 0x6e, 0x64, 0x49, 0x6e, 0x66, 0x6f,
	0x88, 0x01, 0x01, 0x12, 0x82, 0x01, 0x0a, 0x1c, 0x66, 0x72, 0x65, 0x71, 0x5f, 0x62, 0x61, 0x6e,
	0x64, 0x5f, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x70, 0x72, 0x69, 0x6f,
	0x72, 0x69, 0x74, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3c, 0x2e, 0x78, 0x6e, 0x61,
	0x70, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x72, 0x65, 0x71, 0x42, 0x61, 0x6e, 0x64, 0x49, 0x6e, 0x64,
	0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x64, 0x43, 0x65, 0x6c, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x45, 0x75, 0x74, 0x72, 0x61, 0x48, 0x05, 0x52, 0x19, 0x66, 0x72, 0x65, 0x71,
	0x42, 0x61, 0x6e, 0x64, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x69,
	0x6f, 0x72, 0x69, 0x74, 0x79, 0x88, 0x01, 0x01, 0x12, 0x6c, 0x0a, 0x14, 0x62, 0x61, 0x6e, 0x64,
	0x77, 0x69, 0x64, 0x74, 0x68, 0x5f, 0x72, 0x65, 0x64, 0x75, 0x63, 0x65, 0x64, 0x5f, 0x73, 0x69,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x35, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31,
	0x2e, 0x42, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x52, 0x65, 0x64, 0x75, 0x63, 0x65,
	0x64, 0x53, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x43, 0x65, 0x6c, 0x6c, 0x49, 0x6e, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x75, 0x74, 0x72, 0x61, 0x48, 0x06, 0x52,
	0x12, 0x62, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x52, 0x65, 0x64, 0x75, 0x63, 0x65,
	0x64, 0x53, 0x49, 0x88, 0x01, 0x01, 0x12, 0x7e, 0x0a, 0x23, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x63,
	0x74, 0x65, 0x64, 0x5f, 0x65, 0x5f, 0x75, 0x74, 0x72, 0x61, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x5f, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72,
	0x6f, 0x74, 0x65, 0x63, 0x74, 0x65, 0x64, 0x45, 0x55, 0x54, 0x72, 0x61, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x07,
	0x52, 0x21, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x65, 0x64, 0x45, 0x2d, 0x55, 0x54, 0x52,
	0x41, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x50, 0x0a, 0x0e, 0x69, 0x5f, 0x65, 0x5f, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29,
	0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x64, 0x43,
	0x65, 0x6c, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x55,
	0x54, 0x72, 0x61, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x52, 0x0d, 0x69, 0x45, 0x2d, 0x45, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x72, 0x61, 0x6e,
	0x61, 0x63, 0x42, 0x19, 0x0a, 0x17, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x6f, 0x66, 0x5f,
	0x61, 0x6e, 0x74, 0x65, 0x6e, 0x6e, 0x61, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x42, 0x16, 0x0a,
	0x14, 0x5f, 0x70, 0x72, 0x61, 0x63, 0x68, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x6d, 0x5f, 0x62, 0x73, 0x66, 0x6e,
	0x73, 0x75, 0x62, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x42, 0x11, 0x0a,
	0x0f, 0x5f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x62, 0x61, 0x6e, 0x64, 0x5f, 0x69, 0x6e, 0x66, 0x6f,
	0x42, 0x1f, 0x0a, 0x1d, 0x5f, 0x66, 0x72, 0x65, 0x71, 0x5f, 0x62, 0x61, 0x6e, 0x64, 0x5f, 0x69,
	0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74,
	0x79, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x62, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x5f,
	0x72, 0x65, 0x64, 0x75, 0x63, 0x65, 0x64, 0x5f, 0x73, 0x69, 0x42, 0x26, 0x0a, 0x24, 0x5f, 0x70,
	0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x65, 0x5f, 0x75, 0x74, 0x72, 0x61, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x22, 0x58, 0x0a, 0x28, 0x53, 0x65, 0x72, 0x76, 0x65, 0x64, 0x43, 0x65, 0x6c, 0x6c,
	0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x55, 0x54, 0x72, 0x61,
	0x70, 0x65, 0x72, 0x42, 0x70, 0x6c, 0x6d, 0x6e, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x12, 0x2c,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xaf, 0x01, 0x0a,
	0x22, 0x53, 0x65, 0x72, 0x76, 0x65, 0x64, 0x43, 0x65, 0x6c, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x55, 0x54, 0x72, 0x61, 0x70, 0x65, 0x72, 0x42, 0x70,
	0x6c, 0x6d, 0x6e, 0x12, 0x2f, 0x0a, 0x07, 0x70, 0x6c, 0x6d, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x50,
	0x6c, 0x6d, 0x6e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x07, 0x70, 0x6c, 0x6d,
	0x6e, 0x2d, 0x69, 0x64, 0x12, 0x58, 0x0a, 0x0e, 0x69, 0x5f, 0x65, 0x5f, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x78,
	0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x64, 0x43, 0x65, 0x6c,
	0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x55, 0x54, 0x72,
	0x61, 0x70, 0x65, 0x72, 0x42, 0x70, 0x6c, 0x6d, 0x6e, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x52,
	0x0d, 0x69, 0x45, 0x2d, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x58,
	0x0a, 0x28, 0x53, 0x65, 0x72, 0x76, 0x65, 0x64, 0x43, 0x65, 0x6c, 0x6c, 0x49, 0x6e, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x55, 0x54, 0x72, 0x61, 0x4d, 0x6f, 0x64, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xb1, 0x02, 0x0a, 0x22, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x64, 0x43, 0x65, 0x6c, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x45, 0x55, 0x54, 0x72, 0x61, 0x4d, 0x6f, 0x64, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x3e, 0x0a, 0x03, 0x66, 0x64, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x78,
	0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x64, 0x43, 0x65, 0x6c,
	0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x55, 0x54, 0x72,
	0x61, 0x46, 0x44, 0x64, 0x69, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x03, 0x66, 0x64, 0x64, 0x12,
	0x3e, 0x0a, 0x03, 0x74, 0x64, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x78,
	0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x64, 0x43, 0x65, 0x6c,
	0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x55, 0x54, 0x72,
	0x61, 0x54, 0x44, 0x64, 0x69, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x03, 0x74, 0x64, 0x64, 0x12,
	0x5f, 0x0a, 0x10, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x78, 0x6e, 0x61, 0x70,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x64, 0x43, 0x65, 0x6c, 0x6c, 0x49, 0x6e,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x55, 0x54, 0x72, 0x61, 0x4d, 0x6f,
	0x64, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x48, 0x00, 0x52, 0x10,
	0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x2d, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x42, 0x2a, 0x0a, 0x28, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x5f, 0x63, 0x65, 0x6c, 0x6c, 0x5f,
	0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x5f, 0x75, 0x74,
	0x72, 0x61, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x22, 0x88, 0x03, 0x0a,
	0x30, 0x53, 0x65, 0x72, 0x76, 0x65, 0x64, 0x43, 0x65, 0x6c, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x55, 0x54, 0x72, 0x61, 0x46, 0x44, 0x64, 0x69, 0x6e,
	0x66, 0x6f, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x8f, 0x01, 0x0a, 0x2e, 0x69, 0x64, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x5f,
	0x6f, 0x66, 0x5f, 0x6e, 0x62, 0x69, 0x6f, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x74, 0x6f, 0x5f, 0x64, 0x6c, 0x5f, 0x65, 0x61,
	0x72, 0x66, 0x63, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x78, 0x6e, 0x61,
	0x70, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x4f, 0x66, 0x4e, 0x62, 0x69,
	0x6f, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x54,
	0x6f, 0x45, 0x61, 0x72, 0x66, 0x63, 0x6e, 0x48, 0x00, 0x52, 0x28, 0x69, 0x64, 0x2d, 0x4f, 0x66,
	0x66, 0x73, 0x65, 0x74, 0x4f, 0x66, 0x4e, 0x62, 0x69, 0x6f, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x54, 0x6f, 0x44, 0x4c, 0x2d, 0x45, 0x41, 0x52,
	0x46, 0x43, 0x4e, 0x12, 0x8f, 0x01, 0x0a, 0x2e, 0x69, 0x64, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x5f, 0x6f, 0x66, 0x5f, 0x6e, 0x62, 0x69, 0x6f, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x74, 0x6f, 0x5f, 0x75, 0x6c, 0x5f,
	0x65, 0x61, 0x72, 0x66, 0x63, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x78,
	0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x4f, 0x66, 0x4e,
	0x62, 0x69, 0x6f, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x54, 0x6f, 0x45, 0x61, 0x72, 0x66, 0x63, 0x6e, 0x48, 0x00, 0x52, 0x28, 0x69, 0x64, 0x2d,
	0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x4f, 0x66, 0x4e, 0x62, 0x69, 0x6f, 0x74, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x54, 0x6f, 0x55, 0x4c, 0x2d, 0x45,
	0x41, 0x52, 0x46, 0x43, 0x4e, 0x42, 0x30, 0x0a, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x5f,
	0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x65, 0x5f, 0x75, 0x74, 0x72, 0x61, 0x5f, 0x66, 0x64, 0x64, 0x69, 0x6e, 0x66, 0x6f, 0x5f,
	0x65, 0x78, 0x74, 0x5f, 0x69, 0x65, 0x73, 0x22, 0xe4, 0x01, 0x0a, 0x27, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x64, 0x43, 0x65, 0x6c, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x45, 0x55, 0x54, 0x72, 0x61, 0x46, 0x44, 0x64, 0x69, 0x6e, 0x66, 0x6f, 0x45, 0x78, 0x74,
	0x49, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x49, 0x65, 0x49, 0x44, 0x52, 0x03, 0x26, 0x69, 0x64, 0x12, 0x37, 0x0a, 0x0b, 0x63,
	0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x14, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x69, 0x74, 0x69,
	0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x0c, 0x26, 0x63, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61,
	0x6c, 0x69, 0x74, 0x79, 0x12, 0x58, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x64, 0x43, 0x65, 0x6c, 0x6c, 0x49, 0x6e, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x55, 0x54, 0x72, 0x61, 0x46, 0x44, 0x64, 0x69,
	0x6e, 0x66, 0x6f, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x0a, 0x26, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xfc,
	0x02, 0x0a, 0x21, 0x53, 0x65, 0x72, 0x76, 0x65, 0x64, 0x43, 0x65, 0x6c, 0x6c, 0x49, 0x6e, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x55, 0x54, 0x72, 0x61, 0x46, 0x44, 0x64,
	0x69, 0x6e, 0x66, 0x6f, 0x12, 0x31, 0x0a, 0x09, 0x75, 0x6c, 0x5f, 0x65, 0x61, 0x72, 0x66, 0x63,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76,
	0x31, 0x2e, 0x45, 0x55, 0x54, 0x72, 0x61, 0x61, 0x72, 0x66, 0x63, 0x6e, 0x52, 0x09, 0x75, 0x6c,
	0x2d, 0x65, 0x61, 0x72, 0x66, 0x63, 0x6e, 0x12, 0x31, 0x0a, 0x09, 0x64, 0x6c, 0x5f, 0x65, 0x61,
	0x72, 0x66, 0x63, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x78, 0x6e, 0x61,
	0x70, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x55, 0x54, 0x72, 0x61, 0x61, 0x72, 0x66, 0x63, 0x6e, 0x52,
	0x09, 0x64, 0x6c, 0x2d, 0x65, 0x61, 0x72, 0x66, 0x63, 0x6e, 0x12, 0x4b, 0x0a, 0x0f, 0x75, 0x6c,
	0x5f, 0x65, 0x5f, 0x75, 0x74, 0x72, 0x61, 0x5f, 0x74, 0x78, 0x5f, 0x62, 0x77, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x55,
	0x54, 0x72, 0x61, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x42,
	0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x52, 0x0d, 0x75, 0x6c, 0x2d, 0x65, 0x2d, 0x75,
	0x74, 0x72, 0x61, 0x54, 0x78, 0x42, 0x57, 0x12, 0x4b, 0x0a, 0x0f, 0x64, 0x6c, 0x5f, 0x65, 0x5f,
	0x75, 0x74, 0x72, 0x61, 0x5f, 0x74, 0x78, 0x5f, 0x62, 0x77, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x23, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x55, 0x54, 0x72, 0x61,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x61, 0x6e, 0x64,
	0x77, 0x69, 0x64, 0x74, 0x68, 0x52, 0x0d, 0x64, 0x6c, 0x2d, 0x65, 0x2d, 0x75, 0x74, 0x72, 0x61,
	0x54, 0x78, 0x42, 0x57, 0x12, 0x57, 0x0a, 0x0e, 0x69, 0x5f, 0x65, 0x5f, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x78,
	0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x64, 0x43, 0x65, 0x6c,
	0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x55, 0x54, 0x72,
	0x61, 0x46, 0x44, 0x64, 0x69, 0x6e, 0x66, 0x6f, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x52, 0x0d,
	0x69, 0x45, 0x2d, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xe5, 0x02,
	0x0a, 0x30, 0x53, 0x65, 0x72, 0x76, 0x65, 0x64, 0x43, 0x65, 0x6c, 0x6c, 0x49, 0x6e, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x55, 0x54, 0x72, 0x61, 0x54, 0x44, 0x64, 0x69,
	0x6e, 0x66, 0x6f, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x8f, 0x01, 0x0a, 0x2e, 0x69, 0x64, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74,
	0x5f, 0x6f, 0x66, 0x5f, 0x6e, 0x62, 0x69, 0x6f, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x74, 0x6f, 0x5f, 0x64, 0x6c, 0x5f, 0x65,
	0x61, 0x72, 0x66, 0x63, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x78, 0x6e,
	0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x4f, 0x66, 0x4e, 0x62,
	0x69, 0x6f, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x54, 0x6f, 0x45, 0x61, 0x72, 0x66, 0x63, 0x6e, 0x48, 0x00, 0x52, 0x28, 0x69, 0x64, 0x2d, 0x4f,
	0x66, 0x66, 0x73, 0x65, 0x74, 0x4f, 0x66, 0x4e, 0x62, 0x69, 0x6f, 0x74, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x54, 0x6f, 0x44, 0x4c, 0x2d, 0x45, 0x41,
	0x52, 0x46, 0x43, 0x4e, 0x12, 0x6d, 0x0a, 0x20, 0x69, 0x64, 0x5f, 0x6e, 0x62, 0x69, 0x6f, 0x5f,
	0x74, 0x5f, 0x75, 0x6c, 0x5f, 0x64, 0x6c, 0x5f, 0x61, 0x6c, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e,
	0x74, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21,
	0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x62, 0x69, 0x6f, 0x54, 0x55, 0x4c,
	0x44, 0x4c, 0x41, 0x6c, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x48, 0x00, 0x52, 0x1e, 0x69, 0x64, 0x2d, 0x4e, 0x42, 0x49, 0x6f, 0x54, 0x2d, 0x55, 0x4c,
	0x2d, 0x44, 0x4c, 0x2d, 0x41, 0x6c, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x66, 0x66,
	0x73, 0x65, 0x74, 0x42, 0x30, 0x0a, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x5f, 0x63, 0x65,
	0x6c, 0x6c, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65,
	0x5f, 0x75, 0x74, 0x72, 0x61, 0x5f, 0x74, 0x64, 0x64, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x65, 0x78,
	0x74, 0x5f, 0x69, 0x65, 0x73, 0x22, 0xe4, 0x01, 0x0a, 0x27, 0x53, 0x65, 0x72, 0x76, 0x65, 0x64,
	0x43, 0x65, 0x6c, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45,
	0x55, 0x54, 0x72, 0x61, 0x54, 0x44, 0x64, 0x69, 0x6e, 0x66, 0x6f, 0x45, 0x78, 0x74, 0x49, 0x65,
	0x73, 0x12, 0x26, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x49, 0x65, 0x49, 0x44, 0x52, 0x03, 0x26, 0x69, 0x64, 0x12, 0x37, 0x0a, 0x0b, 0x63, 0x72, 0x69,
	0x74, 0x69, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14,
	0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61,
	0x6c, 0x69, 0x74, 0x79, 0x52, 0x0c, 0x26, 0x63, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x69,
	0x74, 0x79, 0x12, 0x58, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x64, 0x43, 0x65, 0x6c, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x55, 0x54, 0x72, 0x61, 0x54, 0x44, 0x64, 0x69, 0x6e, 0x66,
	0x6f, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x0a, 0x26, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xb6, 0x03, 0x0a,
	0x21, 0x53, 0x65, 0x72, 0x76, 0x65, 0x64, 0x43, 0x65, 0x6c, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x55, 0x54, 0x72, 0x61, 0x54, 0x44, 0x64, 0x69, 0x6e,
	0x66, 0x6f, 0x12, 0x2b, 0x0a, 0x06, 0x65, 0x61, 0x72, 0x66, 0x63, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x55, 0x54,
	0x72, 0x61, 0x61, 0x72, 0x66, 0x63, 0x6e, 0x52, 0x06, 0x65, 0x61, 0x72, 0x66, 0x63, 0x6e, 0x12,
	0x45, 0x0a, 0x0c, 0x65, 0x5f, 0x75, 0x74, 0x72, 0x61, 0x5f, 0x74, 0x78, 0x5f, 0x62, 0x77, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e,
	0x45, 0x55, 0x54, 0x72, 0x61, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x42, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x52, 0x0a, 0x65, 0x2d, 0x75, 0x74,
	0x72, 0x61, 0x54, 0x78, 0x42, 0x57, 0x12, 0x6d, 0x0a, 0x13, 0x73, 0x75, 0x62, 0x66, 0x72, 0x61,
	0x6d, 0x65, 0x5f, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x6e, 0x65, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x3c, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75,
	0x62, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x6e, 0x65, 0x74,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x64, 0x43, 0x65, 0x6c, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x75, 0x74, 0x72, 0x61, 0x74, 0x64, 0x64, 0x69, 0x6e, 0x66,
	0x6f, 0x52, 0x12, 0x73, 0x75, 0x62, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x41, 0x73, 0x73, 0x69, 0x67,
	0x6e, 0x6d, 0x6e, 0x65, 0x74, 0x12, 0x55, 0x0a, 0x15, 0x73, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c,
	0x5f, 0x73, 0x75, 0x62, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x53, 0x75, 0x62, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x45, 0x55, 0x54, 0x72, 0x61, 0x52, 0x13, 0x73, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c,
	0x53, 0x75, 0x62, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x57, 0x0a, 0x0e,
	0x69, 0x5f, 0x65, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x05,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x64, 0x43, 0x65, 0x6c, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x45, 0x55, 0x54, 0x72, 0x61, 0x54, 0x44, 0x64, 0x69, 0x6e, 0x66, 0x6f,
	0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x52, 0x0d, 0x69, 0x45, 0x2d, 0x45, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x55, 0x0a, 0x10, 0x53, 0x65, 0x72, 0x76, 0x65, 0x64, 0x43,
	0x65, 0x6c, 0x6c, 0x73, 0x45, 0x55, 0x54, 0x72, 0x61, 0x12, 0x41, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x64, 0x43, 0x65, 0x6c, 0x6c, 0x73, 0x45, 0x55,
	0x54, 0x72, 0x61, 0x49, 0x74, 0x65, 0x6d, 0x42, 0x0c, 0xfa, 0x42, 0x09, 0x92, 0x01, 0x06, 0x08,
	0x01, 0x10, 0x80, 0x80, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x4a, 0x0a, 0x1a,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x64, 0x43, 0x65, 0x6c, 0x6c, 0x73, 0x45, 0x55, 0x54, 0x72, 0x61,
	0x49, 0x74, 0x65, 0x6d, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xa4, 0x03, 0x0a, 0x14, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x64, 0x43, 0x65, 0x6c, 0x6c, 0x73, 0x45, 0x55, 0x54, 0x72, 0x61, 0x49, 0x74, 0x65,
	0x6d, 0x12, 0x5d, 0x0a, 0x17, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x5f, 0x63, 0x65, 0x6c, 0x6c,
	0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x65, 0x5f, 0x75, 0x74, 0x72, 0x61, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x23, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x64, 0x43, 0x65, 0x6c, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x45, 0x55, 0x54, 0x72, 0x61, 0x52, 0x17, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x2d,
	0x63, 0x65, 0x6c, 0x6c, 0x2d, 0x69, 0x6e, 0x66, 0x6f, 0x2d, 0x45, 0x2d, 0x55, 0x54, 0x52, 0x41,
	0x12, 0x52, 0x0a, 0x11, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x75, 0x72, 0x5f, 0x69, 0x6e,
	0x66, 0x6f, 0x5f, 0x6e, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x78, 0x6e,
	0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x75, 0x72, 0x49,
	0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x52, 0x48, 0x00, 0x52, 0x11,
	0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x75, 0x72, 0x2d, 0x69, 0x6e, 0x66, 0x6f, 0x2d, 0x4e,
	0x52, 0x88, 0x01, 0x01, 0x12, 0x5d, 0x0a, 0x15, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x75,
	0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x65, 0x5f, 0x75, 0x74, 0x72, 0x61, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x65,
	0x69, 0x67, 0x68, 0x62, 0x6f, 0x75, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x45, 0x55, 0x54, 0x72, 0x61, 0x48, 0x01, 0x52, 0x15, 0x6e, 0x65, 0x69, 0x67, 0x68,
	0x62, 0x6f, 0x75, 0x72, 0x2d, 0x69, 0x6e, 0x66, 0x6f, 0x2d, 0x45, 0x2d, 0x55, 0x54, 0x52, 0x41,
	0x88, 0x01, 0x01, 0x12, 0x4a, 0x0a, 0x0e, 0x69, 0x5f, 0x65, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x78, 0x6e,
	0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x64, 0x43, 0x65, 0x6c, 0x6c,
	0x73, 0x45, 0x55, 0x54, 0x72, 0x61, 0x49, 0x74, 0x65, 0x6d, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73,
	0x52, 0x0d, 0x69, 0x45, 0x2d, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x42,
	0x14, 0x0a, 0x12, 0x5f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x75, 0x72, 0x5f, 0x69, 0x6e,
	0x66, 0x6f, 0x5f, 0x6e, 0x72, 0x42, 0x18, 0x0a, 0x16, 0x5f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62,
	0x6f, 0x75, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x65, 0x5f, 0x75, 0x74, 0x72, 0x61, 0x22,
	0x4e, 0x0a, 0x1e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x64, 0x43, 0x65, 0x6c, 0x6c, 0x73, 0x54, 0x6f,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x45, 0x55, 0x54, 0x72, 0x61, 0x45, 0x78, 0x74, 0x49, 0x65,
	0x73, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22,
	0xdd, 0x03, 0x0a, 0x18, 0x53, 0x65, 0x72, 0x76, 0x65, 0x64, 0x43, 0x65, 0x6c, 0x6c, 0x73, 0x54,
	0x6f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x45, 0x55, 0x54, 0x72, 0x61, 0x12, 0x5d, 0x0a, 0x1a,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x5f, 0x63, 0x65, 0x6c, 0x6c, 0x73, 0x5f, 0x74, 0x6f, 0x5f,
	0x61, 0x64, 0x64, 0x5f, 0x65, 0x5f, 0x75, 0x74, 0x72, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x64, 0x43, 0x65, 0x6c, 0x6c, 0x73, 0x45, 0x55, 0x54, 0x72, 0x61, 0x48, 0x00, 0x52, 0x19, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x64, 0x2d, 0x43, 0x65, 0x6c, 0x6c, 0x73, 0x2d, 0x54, 0x6f, 0x41, 0x64,
	0x64, 0x2d, 0x45, 0x2d, 0x55, 0x54, 0x52, 0x41, 0x88, 0x01, 0x01, 0x12, 0x6b, 0x0a, 0x1d, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x64, 0x5f, 0x63, 0x65, 0x6c, 0x6c, 0x73, 0x5f, 0x74, 0x6f, 0x5f, 0x6d,
	0x6f, 0x64, 0x69, 0x66, 0x79, 0x5f, 0x65, 0x5f, 0x75, 0x74, 0x72, 0x61, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x64, 0x43, 0x65, 0x6c, 0x6c, 0x73, 0x54, 0x6f, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79,
	0x45, 0x55, 0x54, 0x72, 0x61, 0x48, 0x01, 0x52, 0x1c, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x2d,
	0x43, 0x65, 0x6c, 0x6c, 0x73, 0x2d, 0x54, 0x6f, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x2d, 0x45,
	0x2d, 0x55, 0x54, 0x52, 0x41, 0x88, 0x01, 0x01, 0x12, 0x64, 0x0a, 0x1d, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x64, 0x5f, 0x63, 0x65, 0x6c, 0x6c, 0x73, 0x5f, 0x74, 0x6f, 0x5f, 0x64, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x5f, 0x65, 0x5f, 0x75, 0x74, 0x72, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x11, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x55, 0x54, 0x72, 0x61, 0x43,
	0x47, 0x69, 0x42, 0x0c, 0xfa, 0x42, 0x09, 0x92, 0x01, 0x06, 0x08, 0x01, 0x10, 0x80, 0x80, 0x01,
	0x52, 0x1c, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x2d, 0x43, 0x65, 0x6c, 0x6c, 0x73, 0x2d, 0x54,
	0x6f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x2d, 0x45, 0x2d, 0x55, 0x54, 0x52, 0x41, 0x12, 0x4e,
	0x0a, 0x0e, 0x69, 0x5f, 0x65, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x64, 0x43, 0x65, 0x6c, 0x6c, 0x73, 0x54, 0x6f, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x45, 0x55, 0x54, 0x72, 0x61, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x52,
	0x0d, 0x69, 0x45, 0x2d, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x1d,
	0x0a, 0x1b, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x5f, 0x63, 0x65, 0x6c, 0x6c, 0x73, 0x5f,
	0x74, 0x6f, 0x5f, 0x61, 0x64, 0x64, 0x5f, 0x65, 0x5f, 0x75, 0x74, 0x72, 0x61, 0x42, 0x20, 0x0a,
	0x1e, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x5f, 0x63, 0x65, 0x6c, 0x6c, 0x73, 0x5f, 0x74,
	0x6f, 0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x5f, 0x65, 0x5f, 0x75, 0x74, 0x72, 0x61, 0x22,
	0x65, 0x0a, 0x18, 0x53, 0x65, 0x72, 0x76, 0x65, 0x64, 0x43, 0x65, 0x6c, 0x6c, 0x73, 0x54, 0x6f,
	0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x45, 0x55, 0x54, 0x72, 0x61, 0x12, 0x49, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x78, 0x6e, 0x61,
	0x70, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x64, 0x43, 0x65, 0x6c, 0x6c, 0x73,
	0x54, 0x6f, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x45, 0x55, 0x54, 0x72, 0x61, 0x49, 0x74, 0x65,
	0x6d, 0x42, 0x0c, 0xfa, 0x42, 0x09, 0x92, 0x01, 0x06, 0x08, 0x01, 0x10, 0x80, 0x80, 0x01, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x52, 0x0a, 0x22, 0x53, 0x65, 0x72, 0x76, 0x65, 0x64,
	0x63, 0x65, 0x6c, 0x6c, 0x73, 0x54, 0x6f, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x45, 0x55, 0x54,
	0x72, 0x61, 0x49, 0x74, 0x65, 0x6d, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xfb, 0x04, 0x0a, 0x1c, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x64, 0x43, 0x65, 0x6c, 0x6c, 0x73, 0x54, 0x6f, 0x4d, 0x6f, 0x64, 0x69,
	0x66, 0x79, 0x45, 0x55, 0x54, 0x72, 0x61, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x2d, 0x0a, 0x08, 0x6f,
	0x6c, 0x64, 0x5f, 0x65, 0x63, 0x67, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e,
	0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x55, 0x54, 0x72, 0x61, 0x43, 0x47, 0x69,
	0x52, 0x08, 0x6f, 0x6c, 0x64, 0x2d, 0x45, 0x43, 0x47, 0x49, 0x12, 0x5d, 0x0a, 0x17, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x64, 0x5f, 0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x65,
	0x5f, 0x75, 0x74, 0x72, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x78, 0x6e,
	0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x64, 0x43, 0x65, 0x6c, 0x6c,
	0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x55, 0x54, 0x72, 0x61,
	0x52, 0x17, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x2d, 0x63, 0x65, 0x6c, 0x6c, 0x2d, 0x69, 0x6e,
	0x66, 0x6f, 0x2d, 0x45, 0x2d, 0x55, 0x54, 0x52, 0x41, 0x12, 0x52, 0x0a, 0x11, 0x6e, 0x65, 0x69,
	0x67, 0x68, 0x62, 0x6f, 0x75, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x6e, 0x72, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x4e,
	0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x75, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x4e, 0x52, 0x48, 0x00, 0x52, 0x11, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f,
	0x75, 0x72, 0x2d, 0x69, 0x6e, 0x66, 0x6f, 0x2d, 0x4e, 0x52, 0x88, 0x01, 0x01, 0x12, 0x5d, 0x0a,
	0x15, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x75, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f,
	0x65, 0x5f, 0x75, 0x74, 0x72, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x78,
	0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x75, 0x72,
	0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x55, 0x54, 0x72, 0x61,
	0x48, 0x01, 0x52, 0x15, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x75, 0x72, 0x2d, 0x69, 0x6e,
	0x66, 0x6f, 0x2d, 0x45, 0x2d, 0x55, 0x54, 0x52, 0x41, 0x88, 0x01, 0x01, 0x12, 0x7a, 0x0a, 0x17,
	0x64, 0x65, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x64,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3b, 0x2e,
	0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x64, 0x43, 0x65, 0x6c, 0x6c, 0x73, 0x54, 0x6f, 0x4d, 0x6f, 0x64, 0x69, 0x66,
	0x79, 0x45, 0x75, 0x74, 0x72, 0x61, 0x69, 0x74, 0x65, 0x6d, 0x48, 0x02, 0x52, 0x17, 0x64, 0x65,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x69, 0x6e, 0x64, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x52, 0x0a, 0x0e, 0x69, 0x5f, 0x65, 0x5f,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x2b, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x64, 0x63, 0x65, 0x6c, 0x6c, 0x73, 0x54, 0x6f, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x45, 0x55,
	0x54, 0x72, 0x61, 0x49, 0x74, 0x65, 0x6d, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x52, 0x0d, 0x69,
	0x45, 0x2d, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x14, 0x0a, 0x12,
	0x5f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x75, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f,
	0x6e, 0x72, 0x42, 0x18, 0x0a, 0x16, 0x5f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x75, 0x72,
	0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x65, 0x5f, 0x75, 0x74, 0x72, 0x61, 0x42, 0x1a, 0x0a, 0x18,
	0x5f, 0x64, 0x65, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e,
	0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xc5, 0x05, 0x0a, 0x26, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x64, 0x43, 0x65, 0x6c, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x4e, 0x52, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x4a, 0x0a, 0x13, 0x69, 0x64, 0x5f, 0x62, 0x70, 0x6c, 0x6d, 0x6e, 0x5f,
	0x69, 0x64, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x6e, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x70, 0x6c, 0x6d, 0x6e,
	0x49, 0x44, 0x49, 0x6e, 0x66, 0x6f, 0x4e, 0x52, 0x48, 0x00, 0x52, 0x13, 0x69, 0x64, 0x2d, 0x42,
	0x50, 0x4c, 0x4d, 0x4e, 0x2d, 0x49, 0x44, 0x2d, 0x49, 0x6e, 0x66, 0x6f, 0x2d, 0x4e, 0x52, 0x12,
	0x63, 0x0a, 0x1b, 0x69, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x64,
	0x5f, 0x74, 0x61, 0x63, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x64, 0x54, 0x61, 0x63, 0x69, 0x6e, 0x64, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x1a, 0x69, 0x64, 0x2d, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x64, 0x54, 0x41, 0x43, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x5a, 0x0a, 0x19, 0x69, 0x64, 0x5f, 0x73, 0x73, 0x62, 0x5f, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x69, 0x6e, 0x5f, 0x62, 0x75, 0x72, 0x73,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x73, 0x62, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x49, 0x6e,
	0x42, 0x75, 0x72, 0x73, 0x74, 0x48, 0x00, 0x52, 0x17, 0x69, 0x64, 0x2d, 0x53, 0x53, 0x42, 0x2d,
	0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x49, 0x6e, 0x42, 0x75, 0x72, 0x73, 0x74,
	0x12, 0x51, 0x0a, 0x15, 0x69, 0x64, 0x5f, 0x6e, 0x72, 0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x70, 0x72,
	0x61, 0x63, 0x68, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x72, 0x63, 0x65, 0x6c, 0x6c,
	0x50, 0x72, 0x61, 0x63, 0x68, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x00, 0x52, 0x14, 0x69,
	0x64, 0x2d, 0x4e, 0x52, 0x43, 0x65, 0x6c, 0x6c, 0x50, 0x52, 0x41, 0x43, 0x48, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0x66, 0x0a, 0x1c, 0x69, 0x64, 0x5f, 0x6e, 0x70, 0x6e, 0x5f, 0x62, 0x72,
	0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x78, 0x6e, 0x61, 0x70,
	0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x70, 0x6e, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74,
	0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x1c, 0x69,
	0x64, 0x2d, 0x4e, 0x50, 0x4e, 0x2d, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x2d,
	0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x71, 0x0a, 0x20, 0x69,
	0x64, 0x5f, 0x63, 0x73, 0x69, 0x5f, 0x72, 0x73, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x73, 0x69, 0x52, 0x53, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x1f, 0x69,
	0x64, 0x2d, 0x43, 0x53, 0x49, 0x2d, 0x52, 0x53, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3a,
	0x0a, 0x0d, 0x69, 0x64, 0x5f, 0x73, 0x66, 0x6e, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x66, 0x6e, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x48, 0x00, 0x52, 0x0d, 0x69, 0x64, 0x2d,
	0x53, 0x46, 0x4e, 0x2d, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x42, 0x24, 0x0a, 0x22, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x64, 0x5f, 0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x5f, 0x69, 0x65, 0x73,
	0x22, 0xd0, 0x01, 0x0a, 0x1d, 0x53, 0x65, 0x72, 0x76, 0x65, 0x64, 0x43, 0x65, 0x6c, 0x6c, 0x49,
	0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x52, 0x45, 0x78, 0x74, 0x49,
	0x65, 0x73, 0x12, 0x26, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x49, 0x65, 0x49, 0x44, 0x52, 0x03, 0x26, 0x69, 0x64, 0x12, 0x37, 0x0a, 0x0b, 0x63, 0x72,
	0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x14, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x69, 0x74, 0x69, 0x63,
	0x61, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x0c, 0x26, 0x63, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c,
	0x69, 0x74, 0x79, 0x12, 0x4e, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x64, 0x43, 0x65, 0x6c, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x52, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x45, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x26, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x22, 0x9f, 0x04, 0x0a, 0x17, 0x53, 0x65, 0x72, 0x76, 0x65, 0x64, 0x43, 0x65,
	0x6c, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x52, 0x12,
	0x25, 0x0a, 0x06, 0x6e, 0x72, 0x5f, 0x70, 0x63, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0e, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x72, 0x70, 0x63, 0x69, 0x52,
	0x05, 0x6e, 0x72, 0x50, 0x43, 0x49, 0x12, 0x27, 0x0a, 0x07, 0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76,
	0x31, 0x2e, 0x4e, 0x72, 0x43, 0x47, 0x69, 0x52, 0x06, 0x63, 0x65, 0x6c, 0x6c, 0x49, 0x44, 0x12,
	0x1e, 0x0a, 0x03, 0x74, 0x61, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x78,
	0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x63, 0x52, 0x03, 0x74, 0x61, 0x63, 0x12,
	0x29, 0x0a, 0x05, 0x72, 0x61, 0x6e, 0x61, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e,
	0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x61, 0x6e, 0x61, 0x63, 0x48, 0x00,
	0x52, 0x05, 0x72, 0x61, 0x6e, 0x61, 0x63, 0x88, 0x01, 0x01, 0x12, 0x3e, 0x0a, 0x0e, 0x62, 0x72,
	0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x70, 0x6c, 0x6d, 0x6e, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x72, 0x6f,
	0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x50, 0x6c, 0x6d, 0x6e, 0x73, 0x52, 0x0d, 0x62, 0x72, 0x6f,
	0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x50, 0x4c, 0x4d, 0x4e, 0x12, 0x35, 0x0a, 0x0c, 0x6e, 0x72,
	0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x72, 0x6d, 0x6f, 0x64,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x6e, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x48, 0x0a, 0x20, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x74, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x1e, 0x6d, 0x65, 0x61,
	0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4f, 0x0a, 0x14, 0x63,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x75, 0x70, 0x70,
	0x6f, 0x72, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x78, 0x6e, 0x61, 0x70,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79,
	0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x13, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x76, 0x69, 0x74, 0x79, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x4d, 0x0a, 0x0e,
	0x69, 0x5f, 0x65, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x09,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x64, 0x43, 0x65, 0x6c, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x52, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x52, 0x0d, 0x69, 0x45,
	0x2d, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x08, 0x0a, 0x06, 0x5f,
	0x72, 0x61, 0x6e, 0x61, 0x63, 0x22, 0x3f, 0x0a, 0x0f, 0x53, 0x66, 0x6e, 0x4f, 0x66, 0x66, 0x73,
	0x65, 0x74, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x8b, 0x01, 0x0a, 0x09, 0x53, 0x66, 0x6e, 0x4f, 0x66,
	0x66, 0x73, 0x65, 0x74, 0x12, 0x3d, 0x0a, 0x10, 0x73, 0x5f, 0x66, 0x6e, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12,
	0x2e, 0x61, 0x73, 0x6e, 0x31, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x69, 0x74, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x52, 0x0f, 0x73, 0x46, 0x4e, 0x2d, 0x54, 0x69, 0x6d, 0x65, 0x2d, 0x4f, 0x66, 0x66,
	0x73, 0x65, 0x74, 0x12, 0x3f, 0x0a, 0x0e, 0x69, 0x5f, 0x65, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x78, 0x6e,
	0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x66, 0x6e, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x45,
	0x78, 0x74, 0x49, 0x65, 0x73, 0x52, 0x0d, 0x69, 0x45, 0x2d, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x22, 0x4f, 0x0a, 0x0d, 0x53, 0x65, 0x72, 0x76, 0x65, 0x64, 0x43, 0x65,
	0x6c, 0x6c, 0x73, 0x4e, 0x52, 0x12, 0x3e, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x64, 0x43, 0x65, 0x6c, 0x6c, 0x73, 0x4e, 0x52, 0x49, 0x74, 0x65, 0x6d,
	0x42, 0x0c, 0xfa, 0x42, 0x09, 0x92, 0x01, 0x06, 0x08, 0x01, 0x10, 0x80, 0x80, 0x01, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x47, 0x0a, 0x17, 0x53, 0x65, 0x72, 0x76, 0x65, 0x64, 0x43,
	0x65, 0x6c, 0x6c, 0x73, 0x4e, 0x52, 0x49, 0x74, 0x65, 0x6d, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73,
	0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x93,
	0x03, 0x0a, 0x11, 0x53, 0x65, 0x72, 0x76, 0x65, 0x64, 0x43, 0x65, 0x6c, 0x6c, 0x73, 0x4e, 0x52,
	0x49, 0x74, 0x65, 0x6d, 0x12, 0x52, 0x0a, 0x13, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x5f, 0x63,
	0x65, 0x6c, 0x6c, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x6e, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x64, 0x43, 0x65, 0x6c, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x4e, 0x52, 0x52, 0x13, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x2d, 0x63, 0x65, 0x6c, 0x6c,
	0x2d, 0x69, 0x6e, 0x66, 0x6f, 0x2d, 0x4e, 0x52, 0x12, 0x52, 0x0a, 0x11, 0x6e, 0x65, 0x69, 0x67,
	0x68, 0x62, 0x6f, 0x75, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x6e, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x65,
	0x69, 0x67, 0x68, 0x62, 0x6f, 0x75, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x4e, 0x52, 0x48, 0x00, 0x52, 0x11, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x75,
	0x72, 0x2d, 0x69, 0x6e, 0x66, 0x6f, 0x2d, 0x4e, 0x52, 0x88, 0x01, 0x01, 0x12, 0x5d, 0x0a, 0x15,
	0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x75, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x65,
	0x5f, 0x75, 0x74, 0x72, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x78, 0x6e,
	0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x75, 0x72, 0x49,
	0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x55, 0x54, 0x72, 0x61, 0x48,
	0x01, 0x52, 0x15, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x75, 0x72, 0x2d, 0x69, 0x6e, 0x66,
	0x6f, 0x2d, 0x45, 0x2d, 0x55, 0x54, 0x52, 0x41, 0x88, 0x01, 0x01, 0x12, 0x47, 0x0a, 0x0e, 0x69,
	0x5f, 0x65, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x64, 0x43, 0x65, 0x6c, 0x6c, 0x73, 0x4e, 0x52, 0x49, 0x74, 0x65, 0x6d, 0x45,
	0x78, 0x74, 0x49, 0x65, 0x73, 0x52, 0x0d, 0x69, 0x45, 0x2d, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f,
	0x75, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x6e, 0x72, 0x42, 0x18, 0x0a, 0x16, 0x5f, 0x6e,
	0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x75, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x65, 0x5f,
	0x75, 0x74, 0x72, 0x61, 0x22, 0x5f, 0x0a, 0x15, 0x53, 0x65, 0x72, 0x76, 0x65, 0x64, 0x43, 0x65,
	0x6c, 0x6c, 0x73, 0x54, 0x6f, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x4e, 0x52, 0x12, 0x46, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x78,
	0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x64, 0x43, 0x65, 0x6c,
	0x6c, 0x73, 0x54, 0x6f, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x4e, 0x52, 0x49, 0x74, 0x65, 0x6d,
	0x42, 0x0c, 0xfa, 0x42, 0x09, 0x92, 0x01, 0x06, 0x08, 0x01, 0x10, 0x80, 0x80, 0x01, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x4f, 0x0a, 0x1f, 0x53, 0x65, 0x72, 0x76, 0x65, 0x64, 0x63,
	0x65, 0x6c, 0x6c, 0x73, 0x54, 0x6f, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x4e, 0x52, 0x49, 0x74,
	0x65, 0x6d, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xe8, 0x04, 0x0a, 0x19, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x64, 0x43, 0x65, 0x6c, 0x6c, 0x73, 0x54, 0x6f, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x4e, 0x52,
	0x49, 0x74, 0x65, 0x6d, 0x12, 0x2e, 0x0a, 0x0a, 0x6f, 0x6c, 0x64, 0x5f, 0x6e, 0x72, 0x5f, 0x63,
	0x67, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e,
	0x76, 0x31, 0x2e, 0x4e, 0x72, 0x43, 0x47, 0x69, 0x52, 0x0a, 0x6f, 0x6c, 0x64, 0x2d, 0x4e, 0x52,
	0x2d, 0x43, 0x47, 0x49, 0x12, 0x52, 0x0a, 0x13, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x5f, 0x63,
	0x65, 0x6c, 0x6c, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x6e, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x64, 0x43, 0x65, 0x6c, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x4e, 0x52, 0x52, 0x13, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x2d, 0x63, 0x65, 0x6c, 0x6c,
	0x2d, 0x69, 0x6e, 0x66, 0x6f, 0x2d, 0x4e, 0x52, 0x12, 0x52, 0x0a, 0x11, 0x6e, 0x65, 0x69, 0x67,
	0x68, 0x62, 0x6f, 0x75, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x6e, 0x72, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x65,
	0x69, 0x67, 0x68, 0x62, 0x6f, 0x75, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x4e, 0x52, 0x48, 0x00, 0x52, 0x11, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x75,
	0x72, 0x2d, 0x69, 0x6e, 0x66, 0x6f, 0x2d, 0x4e, 0x52, 0x88, 0x01, 0x01, 0x12, 0x5d, 0x0a, 0x15,
	0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x75, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x65,
	0x5f, 0x75, 0x74, 0x72, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x78, 0x6e,
	0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x75, 0x72, 0x49,
	0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x55, 0x54, 0x72, 0x61, 0x48,
	0x01, 0x52, 0x15, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x75, 0x72, 0x2d, 0x69, 0x6e, 0x66,
	0x6f, 0x2d, 0x45, 0x2d, 0x55, 0x54, 0x52, 0x41, 0x88, 0x01, 0x01, 0x12, 0x77, 0x0a, 0x17, 0x64,
	0x65, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x64, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x38, 0x2e, 0x78,
	0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x64, 0x43, 0x65, 0x6c, 0x6c, 0x73, 0x54, 0x6f, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79,
	0x4e, 0x72, 0x69, 0x74, 0x65, 0x6d, 0x48, 0x02, 0x52, 0x17, 0x64, 0x65, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x88, 0x01, 0x01, 0x12, 0x4f, 0x0a, 0x0e, 0x69, 0x5f, 0x65, 0x5f, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x78,
	0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x64, 0x63, 0x65, 0x6c,
	0x6c, 0x73, 0x54, 0x6f, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x4e, 0x52, 0x49, 0x74, 0x65, 0x6d,
	0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x52, 0x0d, 0x69, 0x45, 0x2d, 0x45, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62,
	0x6f, 0x75, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x6e, 0x72, 0x42, 0x18, 0x0a, 0x16, 0x5f,
	0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x75, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x65,
	0x5f, 0x75, 0x74, 0x72, 0x61, 0x42, 0x1a, 0x0a, 0x18, 0x5f, 0x64, 0x65, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x22, 0x4b, 0x0a, 0x1b, 0x53, 0x65, 0x72, 0x76, 0x65, 0x64, 0x43, 0x65, 0x6c, 0x6c, 0x73,
	0x54, 0x6f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x52, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73,
	0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xae,
	0x03, 0x0a, 0x15, 0x53, 0x65, 0x72, 0x76, 0x65, 0x64, 0x43, 0x65, 0x6c, 0x6c, 0x73, 0x54, 0x6f,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x52, 0x12, 0x52, 0x0a, 0x16, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x64, 0x5f, 0x63, 0x65, 0x6c, 0x6c, 0x73, 0x5f, 0x74, 0x6f, 0x5f, 0x61, 0x64, 0x64, 0x5f,
	0x6e, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x64, 0x43, 0x65, 0x6c, 0x6c, 0x73, 0x4e, 0x52,
	0x48, 0x00, 0x52, 0x15, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x2d, 0x43, 0x65, 0x6c, 0x6c, 0x73,
	0x2d, 0x54, 0x6f, 0x41, 0x64, 0x64, 0x2d, 0x4e, 0x52, 0x88, 0x01, 0x01, 0x12, 0x60, 0x0a, 0x19,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x5f, 0x63, 0x65, 0x6c, 0x6c, 0x73, 0x5f, 0x74, 0x6f, 0x5f,
	0x6d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x5f, 0x6e, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x64,
	0x43, 0x65, 0x6c, 0x6c, 0x73, 0x54, 0x6f, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x4e, 0x52, 0x48,
	0x01, 0x52, 0x18, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x2d, 0x43, 0x65, 0x6c, 0x6c, 0x73, 0x2d,
	0x54, 0x6f, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x2d, 0x4e, 0x52, 0x88, 0x01, 0x01, 0x12, 0x59,
	0x0a, 0x19, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x5f, 0x63, 0x65, 0x6c, 0x6c, 0x73, 0x5f, 0x74,
	0x6f, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x6e, 0x72, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0e, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x72, 0x43, 0x47,
	0x69, 0x42, 0x0c, 0xfa, 0x42, 0x09, 0x92, 0x01, 0x06, 0x08, 0x01, 0x10, 0x80, 0x80, 0x01, 0x52,
	0x18, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x2d, 0x43, 0x65, 0x6c, 0x6c, 0x73, 0x2d, 0x54, 0x6f,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x2d, 0x4e, 0x52, 0x12, 0x4b, 0x0a, 0x0e, 0x69, 0x5f, 0x65,
	0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x24, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x64, 0x43, 0x65, 0x6c, 0x6c, 0x73, 0x54, 0x6f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e,
	0x52, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x52, 0x0d, 0x69, 0x45, 0x2d, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x19, 0x0a, 0x17, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x64, 0x5f, 0x63, 0x65, 0x6c, 0x6c, 0x73, 0x5f, 0x74, 0x6f, 0x5f, 0x61, 0x64, 0x64, 0x5f, 0x6e,
	0x72, 0x42, 0x1c, 0x0a, 0x1a, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x5f, 0x63, 0x65, 0x6c,
	0x6c, 0x73, 0x5f, 0x74, 0x6f, 0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x5f, 0x6e, 0x72, 0x22,
	0x48, 0x0a, 0x18, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xaa, 0x02, 0x0a, 0x12, 0x53, 0x68,
	0x61, 0x72, 0x65, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x53, 0x0a, 0x0f, 0x75, 0x6c, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x5f, 0x73, 0x68, 0x61, 0x72,
	0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x78, 0x6e, 0x61, 0x70,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x55, 0x4c, 0x4f, 0x6e, 0x6c, 0x79, 0x53, 0x68, 0x61, 0x72,
	0x69, 0x6e, 0x67, 0x48, 0x00, 0x52, 0x0e, 0x75, 0x6c, 0x2d, 0x6f, 0x6e, 0x6c, 0x79, 0x53, 0x68,
	0x61, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x56, 0x0a, 0x11, 0x75, 0x6c, 0x5f, 0x61, 0x6e, 0x64, 0x5f,
	0x64, 0x6c, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x26, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x65,
	0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x55, 0x4c, 0x64,
	0x6c, 0x53, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x48, 0x00, 0x52, 0x11, 0x75, 0x6c, 0x2d, 0x61,
	0x6e, 0x64, 0x2d, 0x64, 0x6c, 0x2d, 0x53, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x4f, 0x0a,
	0x10, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x48, 0x00, 0x52, 0x10, 0x63, 0x68,
	0x6f, 0x69, 0x63, 0x65, 0x2d, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x16,
	0x0a, 0x14, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x22, 0x55, 0x0a, 0x25, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x55, 0x4c, 0x4f, 0x6e,
	0x6c, 0x79, 0x53, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x12,
	0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xc6, 0x01,
	0x0a, 0x1f, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x55, 0x4c, 0x4f, 0x6e, 0x6c, 0x79, 0x53, 0x68, 0x61, 0x72, 0x69, 0x6e,
	0x67, 0x12, 0x4c, 0x0a, 0x12, 0x75, 0x6c, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x5f, 0x62, 0x69, 0x74, 0x6d, 0x61, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x54, 0x72, 0x61, 0x66,
	0x66, 0x69, 0x63, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x52, 0x11, 0x75, 0x6c,
	0x2d, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x42, 0x69, 0x74, 0x6d, 0x61, 0x70, 0x12,
	0x55, 0x0a, 0x0e, 0x69, 0x5f, 0x65, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x55, 0x4c, 0x4f, 0x6e, 0x6c, 0x79, 0x53, 0x68, 0x61, 0x72, 0x69, 0x6e,
	0x67, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x52, 0x0d, 0x69, 0x45, 0x2d, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x53, 0x0a, 0x23, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x55, 0x4c, 0x64, 0x6c,
	0x53, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x12, 0x2c, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xd2, 0x02, 0x0a, 0x1d,
	0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x55, 0x4c, 0x64, 0x6c, 0x53, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x57, 0x0a,
	0x0c, 0x75, 0x6c, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x68,
	0x61, 0x72, 0x65, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x55, 0x4c, 0x64, 0x6c, 0x53, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x55, 0x4c, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x48, 0x00, 0x52, 0x0c, 0x75, 0x6c, 0x2d, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x57, 0x0a, 0x0c, 0x64, 0x6c, 0x5f, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x78,
	0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x55, 0x4c, 0x64, 0x6c, 0x53, 0x68, 0x61,
	0x72, 0x69, 0x6e, 0x67, 0x44, 0x4c, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x48,
	0x00, 0x52, 0x0c, 0x64, 0x6c, 0x2d, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x12,
	0x5a, 0x0a, 0x10, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x78, 0x6e, 0x61, 0x70,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x55, 0x4c, 0x64, 0x6c, 0x53, 0x68, 0x61, 0x72, 0x69, 0x6e,
	0x67, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x48, 0x00, 0x52, 0x10, 0x63, 0x68, 0x6f, 0x69, 0x63,
	0x65, 0x2d, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x23, 0x0a, 0x21, 0x73,
	0x68, 0x61, 0x72, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x5f, 0x75, 0x6c, 0x64, 0x6c, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67,
	0x22, 0x5e, 0x0a, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x55, 0x4c, 0x64, 0x6c, 0x53, 0x68, 0x61, 0x72, 0x69, 0x6e,
	0x67, 0x55, 0x4c, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x45, 0x78, 0x74, 0x49,
	0x65, 0x73, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x22, 0xb9, 0x02, 0x0a, 0x28, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x55, 0x4c, 0x64, 0x6c, 0x53, 0x68, 0x61, 0x72, 0x69,
	0x6e, 0x67, 0x55, 0x4c, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x1e, 0x0a,
	0x09, 0x75, 0x6e, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x48, 0x00, 0x52, 0x09, 0x75, 0x6e, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x12, 0x54, 0x0a,
	0x07, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38,
	0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x55, 0x4c, 0x64, 0x6c, 0x53,
	0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x55, 0x4c, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x73, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x48, 0x00, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x64, 0x12, 0x65, 0x0a, 0x10, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x5f, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e,
	0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x55, 0x4c, 0x64, 0x6c, 0x53, 0x68,
	0x61, 0x72, 0x69, 0x6e, 0x67, 0x55, 0x4c, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73,
	0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x48, 0x00, 0x52, 0x10, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65,
	0x2d, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x30, 0x0a, 0x2e, 0x73, 0x68,
	0x61, 0x72, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x5f, 0x75, 0x6c, 0x64, 0x6c, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x5f,
	0x75, 0x6c, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x22, 0x65, 0x0a, 0x35,
	0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x55, 0x4c, 0x64, 0x6c, 0x53, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x55, 0x4c, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x45,
	0x78, 0x74, 0x49, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x22, 0xe6, 0x01, 0x0a, 0x2f, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x55, 0x4c, 0x64, 0x6c, 0x53, 0x68,
	0x61, 0x72, 0x69, 0x6e, 0x67, 0x55, 0x4c, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73,
	0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x12, 0x4c, 0x0a, 0x12, 0x75, 0x6c, 0x5f, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x62, 0x69, 0x74, 0x6d, 0x61, 0x70, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61,
	0x74, 0x61, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x73, 0x52, 0x11, 0x75, 0x6c, 0x2d, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x42,
	0x69, 0x74, 0x6d, 0x61, 0x70, 0x12, 0x65, 0x0a, 0x0e, 0x69, 0x5f, 0x65, 0x5f, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3e, 0x2e,
	0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x55, 0x4c, 0x64, 0x6c, 0x53, 0x68,
	0x61, 0x72, 0x69, 0x6e, 0x67, 0x55, 0x4c, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73,
	0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x52, 0x0d, 0x69,
	0x45, 0x2d, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x5e, 0x0a, 0x2e,
	0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x55, 0x4c, 0x64, 0x6c, 0x53, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x44, 0x4c, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x12, 0x2c,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xb9, 0x02, 0x0a,
	0x28, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x55, 0x4c, 0x64, 0x6c, 0x53, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x44, 0x4c,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x1e, 0x0a, 0x09, 0x75, 0x6e, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x09,
	0x75, 0x6e, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x12, 0x54, 0x0a, 0x07, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x78, 0x6e, 0x61,
	0x70, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x55, 0x4c, 0x64, 0x6c, 0x53, 0x68, 0x61, 0x72, 0x69,
	0x6e, 0x67, 0x44, 0x4c, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x43, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x64, 0x48, 0x00, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x12,
	0x65, 0x0a, 0x10, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x78, 0x6e, 0x61, 0x70,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x55, 0x4c, 0x64, 0x6c, 0x53, 0x68, 0x61, 0x72, 0x69, 0x6e,
	0x67, 0x44, 0x4c, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x45, 0x78, 0x74, 0x49,
	0x65, 0x73, 0x48, 0x00, 0x52, 0x10, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x2d, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x30, 0x0a, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64,
	0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x75,
	0x6c, 0x64, 0x6c, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x6c, 0x5f, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x22, 0x65, 0x0a, 0x35, 0x53, 0x68, 0x61, 0x72,
	0x65, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x55, 0x4c,
	0x64, 0x6c, 0x53, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x44, 0x4c, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x73, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x45, 0x78, 0x74, 0x49, 0x65,
	0x73, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22,
	0xe6, 0x01, 0x0a, 0x2f, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x55, 0x4c, 0x64, 0x6c, 0x53, 0x68, 0x61, 0x72, 0x69, 0x6e,
	0x67, 0x44, 0x4c, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x43, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x64, 0x12, 0x4c, 0x0a, 0x12, 0x64, 0x6c, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x5f, 0x62, 0x69, 0x74, 0x6d, 0x61, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x54, 0x72,
	0x61, 0x66, 0x66, 0x69, 0x63, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x52, 0x11,
	0x64, 0x6c, 0x2d, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x42, 0x69, 0x74, 0x6d, 0x61,
	0x70, 0x12, 0x65, 0x0a, 0x0e, 0x69, 0x5f, 0x65, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x78, 0x6e, 0x61, 0x70,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x55, 0x4c, 0x64, 0x6c, 0x53, 0x68, 0x61, 0x72, 0x69, 0x6e,
	0x67, 0x44, 0x4c, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x43, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x64, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x52, 0x0d, 0x69, 0x45, 0x2d, 0x45, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x5f, 0x0a, 0x16, 0x53, 0x6c, 0x69, 0x63,
	0x65, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69,
	0x74, 0x79, 0x12, 0x45, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x23, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6c, 0x69, 0x63,
	0x65, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69,
	0x74, 0x79, 0x49, 0x74, 0x65, 0x6d, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x92, 0x01, 0x04, 0x08, 0x01,
	0x10, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x50, 0x0a, 0x20, 0x53, 0x6c, 0x69,
	0x63, 0x65, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x61, 0x70, 0x61, 0x63,
	0x69, 0x74, 0x79, 0x49, 0x74, 0x65, 0x6d, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x12, 0x2c, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x96, 0x02, 0x0a, 0x1a,
	0x53, 0x6c, 0x69, 0x63, 0x65, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x61,
	0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x3a, 0x0a, 0x0d, 0x70, 0x5f,
	0x6c, 0x6d, 0x6e, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6c, 0x6d, 0x6e,
	0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x0c, 0x70, 0x4c, 0x4d, 0x4e, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x6a, 0x0a, 0x1e, 0x73, 0x5f, 0x6e, 0x73, 0x73, 0x61,
	0x69, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x63, 0x61, 0x70, 0x61, 0x63,
	0x69, 0x74, 0x79, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24,
	0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6e, 0x73, 0x73, 0x61, 0x69, 0x61,
	0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x1c, 0x73, 0x4e, 0x53, 0x53, 0x41, 0x49, 0x41, 0x76, 0x61, 0x69,
	0x6c, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x2d, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x50, 0x0a, 0x0e, 0x69, 0x5f, 0x65, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x78, 0x6e, 0x61,
	0x70, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6c, 0x69, 0x63, 0x65, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61,
	0x62, 0x6c, 0x65, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x49, 0x74, 0x65, 0x6d, 0x45,
	0x78, 0x74, 0x49, 0x65, 0x73, 0x52, 0x0d, 0x69, 0x45, 0x2d, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x22, 0x66, 0x0a, 0x1b, 0x53, 0x6e, 0x73, 0x73, 0x61, 0x69, 0x61, 0x76,
	0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x47, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6e, 0x73,
	0x73, 0x61, 0x69, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x61, 0x70, 0x61,
	0x63, 0x69, 0x74, 0x79, 0x49, 0x74, 0x65, 0x6d, 0x42, 0x0b, 0xfa, 0x42, 0x08, 0x92, 0x01, 0x05,
	0x08, 0x01, 0x10, 0x80, 0x08, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x51, 0x0a, 0x21,
	0x53, 0x6e, 0x73, 0x73, 0x61, 0x69, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x43,
	0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x49, 0x74, 0x65, 0x6d, 0x45, 0x78, 0x74, 0x49, 0x65,
	0x73, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22,
	0xc2, 0x02, 0x0a, 0x1b, 0x53, 0x6e, 0x73, 0x73, 0x61, 0x69, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61,
	0x62, 0x6c, 0x65, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x49, 0x74, 0x65, 0x6d, 0x12,
	0x28, 0x0a, 0x07, 0x73, 0x5f, 0x6e, 0x73, 0x73, 0x61, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0f, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x4e, 0x53, 0x73, 0x61,
	0x69, 0x52, 0x06, 0x73, 0x4e, 0x53, 0x53, 0x41, 0x49, 0x12, 0x54, 0x0a, 0x27, 0x73, 0x6c, 0x69,
	0x63, 0x65, 0x5f, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x63, 0x61, 0x70,
	0x61, 0x63, 0x69, 0x74, 0x79, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x64, 0x6f, 0x77, 0x6e,
	0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x23, 0x73, 0x6c, 0x69, 0x63,
	0x65, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69,
	0x74, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x69, 0x6e, 0x6b, 0x12,
	0x50, 0x0a, 0x25, 0x73, 0x6c, 0x69, 0x63, 0x65, 0x5f, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62,
	0x6c, 0x65, 0x5f, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x5f, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x5f, 0x75, 0x70, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x21,
	0x73, 0x6c, 0x69, 0x63, 0x65, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x61,
	0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x55, 0x70, 0x6c, 0x69, 0x6e,
	0x6b, 0x12, 0x51, 0x0a, 0x0e, 0x69, 0x5f, 0x65, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x78, 0x6e, 0x61, 0x70,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6e, 0x73, 0x73, 0x61, 0x69, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61,
	0x62, 0x6c, 0x65, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x49, 0x74, 0x65, 0x6d, 0x45,
	0x78, 0x74, 0x49, 0x65, 0x73, 0x52, 0x0d, 0x69, 0x45, 0x2d, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x22, 0x46, 0x0a, 0x10, 0x53, 0x6c, 0x69, 0x63, 0x65, 0x53, 0x75, 0x70,
	0x70, 0x6f, 0x72, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x32, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x4e, 0x53, 0x73, 0x61, 0x69, 0x42, 0x0b, 0xfa, 0x42, 0x08, 0x92, 0x01, 0x05,
	0x08, 0x01, 0x10, 0x80, 0x08, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x55, 0x0a, 0x11,
	0x53, 0x6c, 0x69, 0x63, 0x65, 0x54, 0x6f, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x40, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6c, 0x69, 0x63, 0x65,
	0x54, 0x6f, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x74, 0x65, 0x6d,
	0x42, 0x0a, 0xfa, 0x42, 0x07, 0x92, 0x01, 0x04, 0x08, 0x01, 0x10, 0x0c, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x22, 0x4b, 0x0a, 0x1b, 0x53, 0x6c, 0x69, 0x63, 0x65, 0x54, 0x6f, 0x52, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x45, 0x78, 0x74, 0x49,
	0x65, 0x73, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x22, 0xd6, 0x01, 0x0a, 0x15, 0x53, 0x6c, 0x69, 0x63, 0x65, 0x54, 0x6f, 0x52, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x3a, 0x0a, 0x0d, 0x70, 0x5f,
	0x6c, 0x6d, 0x6e, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6c, 0x6d, 0x6e,
	0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x0c, 0x70, 0x4c, 0x4d, 0x4e, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x34, 0x0a, 0x0b, 0x73, 0x5f, 0x6e, 0x73, 0x73, 0x61,
	0x69, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x78, 0x6e,
	0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6e, 0x73, 0x73, 0x61, 0x69, 0x6c, 0x69, 0x73, 0x74,
	0x52, 0x0a, 0x73, 0x4e, 0x53, 0x53, 0x41, 0x49, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x4b, 0x0a, 0x0e,
	0x69, 0x5f, 0x65, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x6c, 0x69, 0x63, 0x65, 0x54, 0x6f, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x4c, 0x69, 0x73, 0x74,
	0x49, 0x74, 0x65, 0x6d, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x52, 0x0d, 0x69, 0x45, 0x2d, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x44, 0x0a, 0x0a, 0x53, 0x6e, 0x73,
	0x73, 0x61, 0x69, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x36, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x6e, 0x73, 0x73, 0x61, 0x69, 0x49, 0x74, 0x65, 0x6d, 0x42, 0x0b, 0xfa, 0x42, 0x08,
	0x92, 0x01, 0x05, 0x08, 0x01, 0x10, 0x80, 0x08, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22,
	0x40, 0x0a, 0x10, 0x53, 0x6e, 0x73, 0x73, 0x61, 0x69, 0x49, 0x74, 0x65, 0x6d, 0x45, 0x78, 0x74,
	0x49, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x22, 0x78, 0x0a, 0x0a, 0x53, 0x6e, 0x73, 0x73, 0x61, 0x69, 0x49, 0x74, 0x65, 0x6d, 0x12,
	0x28, 0x0a, 0x07, 0x73, 0x5f, 0x6e, 0x73, 0x73, 0x61, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0f, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x4e, 0x53, 0x73, 0x61,
	0x69, 0x52, 0x06, 0x73, 0x4e, 0x53, 0x53, 0x41, 0x49, 0x12, 0x40, 0x0a, 0x0e, 0x69, 0x5f, 0x65,
	0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6e, 0x73, 0x73,
	0x61, 0x69, 0x49, 0x74, 0x65, 0x6d, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x52, 0x0d, 0x69, 0x45,
	0x2d, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x5e, 0x0a, 0x15, 0x53,
	0x6c, 0x6f, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x45, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6c,
	0x6f, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c,
	0x69, 0x73, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x42, 0x0b, 0xfa, 0x42, 0x08, 0x92, 0x01, 0x05, 0x08,
	0x01, 0x10, 0x80, 0x28, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x4f, 0x0a, 0x1f, 0x53,
	0x6c, 0x6f, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x4c, 0x69, 0x73, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x12, 0x2c,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xe9, 0x01, 0x0a,
	0x19, 0x53, 0x6c, 0x6f, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x6c,
	0x6f, 0x74, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09,
	0x73, 0x6c, 0x6f, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x5c, 0x0a, 0x19, 0x73, 0x79, 0x6d,
	0x62, 0x6f, 0x6c, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x6e, 0x5f, 0x73, 0x6c, 0x6f, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x78,
	0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x41, 0x6c, 0x6c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x53, 0x6c, 0x6f, 0x74, 0x52, 0x18, 0x73,
	0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d,
	0x69, 0x6e, 0x2d, 0x53, 0x6c, 0x6f, 0x74, 0x12, 0x4f, 0x0a, 0x0e, 0x69, 0x5f, 0x65, 0x5f, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x28, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6c, 0x6f, 0x74, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x49,
	0x74, 0x65, 0x6d, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x52, 0x0d, 0x69, 0x45, 0x2d, 0x45, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x41, 0x0a, 0x15, 0x53, 0x4e, 0x47, 0x52,
	0x41, 0x6e, 0x6e, 0x6f, 0x64, 0x65, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x4b, 0x65,
	0x79, 0x12, 0x28, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x61, 0x73, 0x6e, 0x31, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x69, 0x74, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x3c, 0x0a, 0x0c, 0x53,
	0x4e, 0x53, 0x73, 0x61, 0x69, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x8a, 0x01, 0x0a, 0x06, 0x53, 0x4e,
	0x53, 0x73, 0x61, 0x69, 0x12, 0x1b, 0x0a, 0x03, 0x73, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0c, 0x42, 0x09, 0xfa, 0x42, 0x06, 0x7a, 0x04, 0x10, 0x01, 0x18, 0x01, 0x52, 0x03, 0x73, 0x73,
	0x74, 0x12, 0x1e, 0x0a, 0x02, 0x73, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x09, 0xfa,
	0x42, 0x06, 0x7a, 0x04, 0x10, 0x03, 0x18, 0x03, 0x48, 0x00, 0x52, 0x02, 0x73, 0x64, 0x88, 0x01,
	0x01, 0x12, 0x3c, 0x0a, 0x0e, 0x69, 0x5f, 0x65, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x78, 0x6e, 0x61, 0x70,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x4e, 0x53, 0x73, 0x61, 0x69, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73,
	0x52, 0x0d, 0x69, 0x45, 0x2d, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x42,
	0x05, 0x0a, 0x03, 0x5f, 0x73, 0x64, 0x22, 0x4e, 0x0a, 0x1e, 0x53, 0x70, 0x65, 0x63, 0x69, 0x61,
	0x6c, 0x53, 0x75, 0x62, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x45, 0x55, 0x54,
	0x72, 0x61, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xdb, 0x02, 0x0a, 0x18, 0x53, 0x70, 0x65, 0x63, 0x69,
	0x61, 0x6c, 0x53, 0x75, 0x62, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x45, 0x55,
	0x54, 0x72, 0x61, 0x12, 0x5f, 0x0a, 0x18, 0x73, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x73,
	0x75, 0x62, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x53, 0x75, 0x62, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x50,
	0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x73, 0x45, 0x55, 0x54, 0x72, 0x61, 0x52, 0x16, 0x73, 0x70,
	0x65, 0x63, 0x69, 0x61, 0x6c, 0x53, 0x75, 0x62, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x50, 0x61, 0x74,
	0x74, 0x65, 0x72, 0x6e, 0x12, 0x46, 0x0a, 0x10, 0x63, 0x79, 0x63, 0x6c, 0x69, 0x63, 0x5f, 0x70,
	0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x64, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c,
	0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x79, 0x63, 0x6c, 0x69, 0x63, 0x50,
	0x72, 0x65, 0x66, 0x69, 0x78, 0x45, 0x55, 0x54, 0x72, 0x61, 0x44, 0x4c, 0x52, 0x0e, 0x63, 0x79,
	0x63, 0x6c, 0x69, 0x63, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x44, 0x4c, 0x12, 0x46, 0x0a, 0x10,
	0x63, 0x79, 0x63, 0x6c, 0x69, 0x63, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x75, 0x6c,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x79, 0x63, 0x6c, 0x69, 0x63, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x45, 0x55, 0x54,
	0x72, 0x61, 0x55, 0x4c, 0x52, 0x0e, 0x63, 0x79, 0x63, 0x6c, 0x69, 0x63, 0x50, 0x72, 0x65, 0x66,
	0x69, 0x78, 0x55, 0x4c, 0x12, 0x4e, 0x0a, 0x0e, 0x69, 0x5f, 0x65, 0x5f, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x78,
	0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x53, 0x75,
	0x62, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x45, 0x55, 0x54, 0x72, 0x61, 0x45,
	0x78, 0x74, 0x49, 0x65, 0x73, 0x52, 0x0d, 0x69, 0x45, 0x2d, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x22, 0x3b, 0x0a, 0x16, 0x53, 0x70, 0x65, 0x63, 0x74, 0x72, 0x75, 0x6d,
	0x53, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x21,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0b, 0xfa,
	0x42, 0x08, 0x1a, 0x06, 0x18, 0x80, 0x80, 0x01, 0x28, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x22, 0x63, 0x0a, 0x18, 0x53, 0x73, 0x62, 0x61, 0x72, 0x65, 0x61, 0x43, 0x61, 0x70, 0x61,
	0x63, 0x69, 0x74, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x47, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x78,
	0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x73, 0x62, 0x61, 0x72, 0x65, 0x61, 0x43, 0x61,
	0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x49,
	0x74, 0x65, 0x6d, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x92, 0x01, 0x04, 0x08, 0x01, 0x10, 0x40, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x52, 0x0a, 0x22, 0x53, 0x73, 0x62, 0x61, 0x72, 0x65,
	0x61, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x4c, 0x69,
	0x73, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xc6, 0x01, 0x0a, 0x1c, 0x53,
	0x73, 0x62, 0x61, 0x72, 0x65, 0x61, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x1b, 0x0a, 0x09, 0x73,
	0x5f, 0x73, 0x62, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08,
	0x73, 0x53, 0x42, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x35, 0x0a, 0x17, 0x73, 0x73, 0x62, 0x5f,
	0x61, 0x72, 0x65, 0x61, 0x5f, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x5f, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x14, 0x73, 0x73, 0x62, 0x41, 0x72,
	0x65, 0x61, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x52, 0x0a, 0x0e, 0x69, 0x5f, 0x65, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x73, 0x62, 0x61, 0x72, 0x65, 0x61, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74,
	0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x45, 0x78,
	0x74, 0x49, 0x65, 0x73, 0x52, 0x0d, 0x69, 0x45, 0x2d, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x73, 0x22, 0x6f, 0x0a, 0x1e, 0x53, 0x73, 0x62, 0x61, 0x72, 0x65, 0x61, 0x52, 0x61,
	0x64, 0x69, 0x6f, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x4d, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x73, 0x62, 0x61, 0x72, 0x65, 0x61, 0x52, 0x61, 0x64, 0x69, 0x6f, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x74, 0x65,
	0x6d, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x92, 0x01, 0x04, 0x08, 0x01, 0x10, 0x40, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x22, 0xca, 0x02, 0x0a, 0x31, 0x53, 0x73, 0x62, 0x61, 0x72, 0x65, 0x61,
	0x52, 0x61, 0x64, 0x69, 0x6f, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x45, 0x78, 0x74, 0x49, 0x65,
	0x73, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x70, 0x0a, 0x20, 0x69, 0x64,
	0x5f, 0x64, 0x6c, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x70,
	0x64, 0x63, 0x63, 0x68, 0x5f, 0x63, 0x63, 0x65, 0x5f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x44,
	0x6c, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x50, 0x44, 0x63, 0x63, 0x68,
	0x43, 0x43, 0x65, 0x75, 0x73, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x20, 0x69, 0x64, 0x2d, 0x44,
	0x4c, 0x2d, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x2d, 0x50, 0x44, 0x43,
	0x43, 0x48, 0x2d, 0x43, 0x43, 0x45, 0x2d, 0x75, 0x73, 0x61, 0x67, 0x65, 0x12, 0x70, 0x0a, 0x20,
	0x69, 0x64, 0x5f, 0x75, 0x6c, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67,
	0x5f, 0x70, 0x64, 0x63, 0x63, 0x68, 0x5f, 0x63, 0x63, 0x65, 0x5f, 0x75, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31,
	0x2e, 0x55, 0x6c, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x50, 0x44, 0x63,
	0x63, 0x68, 0x43, 0x43, 0x65, 0x75, 0x73, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x20, 0x69, 0x64,
	0x2d, 0x55, 0x4c, 0x2d, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x2d, 0x50,
	0x44, 0x43, 0x43, 0x48, 0x2d, 0x43, 0x43, 0x45, 0x2d, 0x75, 0x73, 0x61, 0x67, 0x65, 0x42, 0x31,
	0x0a, 0x2f, 0x73, 0x73, 0x62, 0x61, 0x72, 0x65, 0x61, 0x5f, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x5f,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x65, 0x78, 0x74, 0x5f, 0x69, 0x65,
	0x73, 0x22, 0xe6, 0x01, 0x0a, 0x28, 0x53, 0x73, 0x62, 0x61, 0x72, 0x65, 0x61, 0x52, 0x61, 0x64,
	0x69, 0x6f, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x4c, 0x69, 0x73, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x12, 0x26,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x78, 0x6e, 0x61,
	0x70, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x49, 0x65, 0x49,
	0x44, 0x52, 0x03, 0x26, 0x69, 0x64, 0x12, 0x37, 0x0a, 0x0b, 0x63, 0x72, 0x69, 0x74, 0x69, 0x63,
	0x61, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x78, 0x6e,
	0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x69, 0x74,
	0x79, 0x52, 0x0c, 0x26, 0x63, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x12,
	0x59, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x73, 0x62,
	0x61, 0x72, 0x65, 0x61, 0x52, 0x61, 0x64, 0x69, 0x6f, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x45,
	0x78, 0x74, 0x49, 0x65, 0x73, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0a,
	0x26, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xc5, 0x05, 0x0a, 0x22, 0x53,
	0x73, 0x62, 0x61, 0x72, 0x65, 0x61, 0x52, 0x61, 0x64, 0x69, 0x6f, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x74, 0x65,
	0x6d, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x5f, 0x73, 0x62, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x73, 0x53, 0x42, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x54,
	0x0a, 0x19, 0x73, 0x73, 0x62, 0x5f, 0x61, 0x72, 0x65, 0x61, 0x5f, 0x64, 0x6c, 0x5f, 0x67, 0x62,
	0x72, 0x5f, 0x70, 0x72, 0x62, 0x5f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x6c, 0x47, 0x42,
	0x72, 0x50, 0x52, 0x62, 0x75, 0x73, 0x61, 0x67, 0x65, 0x52, 0x19, 0x73, 0x73, 0x62, 0x2d, 0x41,
	0x72, 0x65, 0x61, 0x2d, 0x44, 0x4c, 0x2d, 0x47, 0x42, 0x52, 0x2d, 0x50, 0x52, 0x42, 0x2d, 0x75,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x54, 0x0a, 0x19, 0x73, 0x73, 0x62, 0x5f, 0x61, 0x72, 0x65, 0x61,
	0x5f, 0x75, 0x6c, 0x5f, 0x67, 0x62, 0x72, 0x5f, 0x70, 0x72, 0x62, 0x5f, 0x75, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76,
	0x31, 0x2e, 0x55, 0x6c, 0x47, 0x42, 0x72, 0x50, 0x52, 0x62, 0x75, 0x73, 0x61, 0x67, 0x65, 0x52,
	0x19, 0x73, 0x73, 0x62, 0x2d, 0x41, 0x72, 0x65, 0x61, 0x2d, 0x55, 0x4c, 0x2d, 0x47, 0x42, 0x52,
	0x2d, 0x50, 0x52, 0x42, 0x2d, 0x75, 0x73, 0x61, 0x67, 0x65, 0x12, 0x60, 0x0a, 0x1e, 0x73, 0x73,
	0x62, 0x5f, 0x61, 0x72, 0x65, 0x61, 0x5f, 0x64, 0x5f, 0x6c, 0x5f, 0x6e, 0x6f, 0x6e, 0x5f, 0x67,
	0x62, 0x72, 0x5f, 0x70, 0x72, 0x62, 0x5f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x6c, 0x6e,
	0x6f, 0x6e, 0x47, 0x42, 0x72, 0x50, 0x52, 0x62, 0x75, 0x73, 0x61, 0x67, 0x65, 0x52, 0x1d, 0x73,
	0x73, 0x62, 0x2d, 0x41, 0x72, 0x65, 0x61, 0x2d, 0x64, 0x4c, 0x2d, 0x6e, 0x6f, 0x6e, 0x2d, 0x47,
	0x42, 0x52, 0x2d, 0x50, 0x52, 0x42, 0x2d, 0x75, 0x73, 0x61, 0x67, 0x65, 0x12, 0x60, 0x0a, 0x1e,
	0x73, 0x73, 0x62, 0x5f, 0x61, 0x72, 0x65, 0x61, 0x5f, 0x75, 0x5f, 0x6c, 0x5f, 0x6e, 0x6f, 0x6e,
	0x5f, 0x67, 0x62, 0x72, 0x5f, 0x70, 0x72, 0x62, 0x5f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x55,
	0x6c, 0x6e, 0x6f, 0x6e, 0x47, 0x42, 0x72, 0x50, 0x52, 0x62, 0x75, 0x73, 0x61, 0x67, 0x65, 0x52,
	0x1d, 0x73, 0x73, 0x62, 0x2d, 0x41, 0x72, 0x65, 0x61, 0x2d, 0x75, 0x4c, 0x2d, 0x6e, 0x6f, 0x6e,
	0x2d, 0x47, 0x42, 0x52, 0x2d, 0x50, 0x52, 0x42, 0x2d, 0x75, 0x73, 0x61, 0x67, 0x65, 0x12, 0x5b,
	0x0a, 0x1c, 0x73, 0x73, 0x62, 0x5f, 0x61, 0x72, 0x65, 0x61, 0x5f, 0x64, 0x5f, 0x6c, 0x5f, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x70, 0x72, 0x62, 0x5f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x44,
	0x6c, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x52, 0x62, 0x75, 0x73, 0x61, 0x67, 0x65, 0x52, 0x1b,
	0x73, 0x73, 0x62, 0x2d, 0x41, 0x72, 0x65, 0x61, 0x2d, 0x64, 0x4c, 0x2d, 0x54, 0x6f, 0x74, 0x61,
	0x6c, 0x2d, 0x50, 0x52, 0x42, 0x2d, 0x75, 0x73, 0x61, 0x67, 0x65, 0x12, 0x5b, 0x0a, 0x1c, 0x73,
	0x73, 0x62, 0x5f, 0x61, 0x72, 0x65, 0x61, 0x5f, 0x75, 0x5f, 0x6c, 0x5f, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x5f, 0x70, 0x72, 0x62, 0x5f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x6c, 0x54, 0x6f,
	0x74, 0x61, 0x6c, 0x50, 0x52, 0x62, 0x75, 0x73, 0x61, 0x67, 0x65, 0x52, 0x1b, 0x73, 0x73, 0x62,
	0x2d, 0x41, 0x72, 0x65, 0x61, 0x2d, 0x75, 0x4c, 0x2d, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x2d, 0x50,
	0x52, 0x42, 0x2d, 0x75, 0x73, 0x61, 0x67, 0x65, 0x12, 0x58, 0x0a, 0x0e, 0x69, 0x5f, 0x65, 0x5f,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x31, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x73, 0x62, 0x61, 0x72,
	0x65, 0x61, 0x52, 0x61, 0x64, 0x69, 0x6f, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x45, 0x78, 0x74,
	0x49, 0x65, 0x73, 0x52, 0x0d, 0x69, 0x45, 0x2d, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x22, 0x49, 0x0a, 0x19, 0x53, 0x73, 0x62, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x49, 0x6e, 0x42, 0x75, 0x72, 0x73, 0x74, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x12,
	0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xac, 0x02,
	0x0a, 0x13, 0x53, 0x73, 0x62, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x49, 0x6e,
	0x42, 0x75, 0x72, 0x73, 0x74, 0x12, 0x37, 0x0a, 0x0c, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x5f, 0x62,
	0x69, 0x74, 0x6d, 0x61, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x61, 0x73,
	0x6e, 0x31, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x69, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x48,
	0x00, 0x52, 0x0b, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x42, 0x69, 0x74, 0x6d, 0x61, 0x70, 0x12, 0x39,
	0x0a, 0x0d, 0x6d, 0x65, 0x64, 0x69, 0x75, 0x6d, 0x5f, 0x62, 0x69, 0x74, 0x6d, 0x61, 0x70, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x61, 0x73, 0x6e, 0x31, 0x2e, 0x76, 0x31, 0x2e,
	0x42, 0x69, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x48, 0x00, 0x52, 0x0c, 0x6d, 0x65, 0x64,
	0x69, 0x75, 0x6d, 0x42, 0x69, 0x74, 0x6d, 0x61, 0x70, 0x12, 0x35, 0x0a, 0x0b, 0x6c, 0x6f, 0x6e,
	0x67, 0x5f, 0x62, 0x69, 0x74, 0x6d, 0x61, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12,
	0x2e, 0x61, 0x73, 0x6e, 0x31, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x69, 0x74, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x48, 0x00, 0x52, 0x0a, 0x6c, 0x6f, 0x6e, 0x67, 0x42, 0x69, 0x74, 0x6d, 0x61, 0x70,
	0x12, 0x50, 0x0a, 0x10, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x78, 0x6e, 0x61,
	0x70, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x73, 0x62, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x49, 0x6e, 0x42, 0x75, 0x72, 0x73, 0x74, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x48, 0x00,
	0x52, 0x10, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x2d, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x42, 0x18, 0x0a, 0x16, 0x73, 0x73, 0x62, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x5f, 0x69, 0x6e, 0x5f, 0x62, 0x75, 0x72, 0x73, 0x74, 0x22, 0x51, 0x0a, 0x0f,
	0x53, 0x73, 0x62, 0x74, 0x6f, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x3e, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x73, 0x62, 0x74, 0x6f, 0x52, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x42, 0x0a, 0xfa, 0x42,
	0x07, 0x92, 0x01, 0x04, 0x08, 0x01, 0x10, 0x40, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22,
	0x49, 0x0a, 0x19, 0x53, 0x73, 0x62, 0x74, 0x6f, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x4c, 0x69,
	0x73, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x7d, 0x0a, 0x13, 0x53, 0x73,
	0x62, 0x74, 0x6f, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x74, 0x65,
	0x6d, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x5f, 0x73, 0x62, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x73, 0x53, 0x42, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x49,
	0x0a, 0x0e, 0x69, 0x5f, 0x65, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x73, 0x62, 0x74, 0x6f, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x4c, 0x69, 0x73, 0x74,
	0x49, 0x74, 0x65, 0x6d, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x52, 0x0d, 0x69, 0x45, 0x2d, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x34, 0x0a, 0x10, 0x53, 0x75, 0x6c,
	0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x42, 0x61, 0x6e, 0x64, 0x12, 0x20, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0a, 0xfa, 0x42,
	0x07, 0x1a, 0x05, 0x18, 0x80, 0x08, 0x28, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22,
	0xd9, 0x01, 0x0a, 0x1d, 0x53, 0x75, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x41, 0x0a, 0x0f, 0x69, 0x64, 0x5f, 0x63, 0x61, 0x72, 0x72, 0x69, 0x65, 0x72, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x78, 0x6e, 0x61,
	0x70, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x72, 0x63, 0x61, 0x72, 0x72, 0x69, 0x65, 0x72, 0x4c, 0x69,
	0x73, 0x74, 0x48, 0x00, 0x52, 0x0e, 0x69, 0x64, 0x2d, 0x43, 0x61, 0x72, 0x72, 0x69, 0x65, 0x72,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x5a, 0x0a, 0x18, 0x69, 0x64, 0x5f, 0x66, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x6e, 0x63, 0x79, 0x5f, 0x73, 0x68, 0x69, 0x66, 0x74, 0x37, 0x70, 0x35, 0x6b, 0x68, 0x7a,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31,
	0x2e, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x53, 0x68, 0x69, 0x66, 0x74, 0x37,
	0x70, 0x35, 0x6b, 0x68, 0x7a, 0x48, 0x00, 0x52, 0x17, 0x69, 0x64, 0x2d, 0x46, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x6e, 0x63, 0x79, 0x53, 0x68, 0x69, 0x66, 0x74, 0x37, 0x70, 0x35, 0x6b, 0x68, 0x7a,
	0x42, 0x19, 0x0a, 0x17, 0x73, 0x75, 0x6c, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x78, 0x74, 0x5f, 0x69, 0x65, 0x73, 0x22, 0xbe, 0x01, 0x0a, 0x14,
	0x53, 0x75, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78,
	0x74, 0x49, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x49, 0x65, 0x49, 0x44, 0x52, 0x03, 0x26, 0x69, 0x64, 0x12, 0x37, 0x0a, 0x0b,
	0x63, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x14, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x69, 0x74,
	0x69, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x0c, 0x26, 0x63, 0x72, 0x69, 0x74, 0x69, 0x63,
	0x61, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x45, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x75, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x0a, 0x26, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xf6, 0x01, 0x0a,
	0x0e, 0x53, 0x75, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x3e, 0x0a, 0x12, 0x73, 0x75, 0x6c, 0x5f, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79,
	0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x78, 0x6e,
	0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x72, 0x61, 0x72, 0x66, 0x63, 0x6e, 0x52, 0x10, 0x73,
	0x75, 0x6c, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x5e, 0x0a, 0x1a, 0x73, 0x75, 0x6c, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x5f, 0x62, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x72,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x61, 0x6e, 0x64,
	0x77, 0x69, 0x64, 0x74, 0x68, 0x52, 0x18, 0x73, 0x75, 0x6c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x12,
	0x44, 0x0a, 0x0e, 0x69, 0x5f, 0x65, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x75, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x52, 0x0d, 0x69, 0x45, 0x2d, 0x45, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x57, 0x0a, 0x14, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74,
	0x65, 0x64, 0x53, 0x75, 0x6c, 0x62, 0x61, 0x6e, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x3f, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x78,
	0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64,
	0x53, 0x75, 0x6c, 0x62, 0x61, 0x6e, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x42, 0x0a, 0xfa, 0x42, 0x07,
	0x92, 0x01, 0x04, 0x08, 0x01, 0x10, 0x20, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x4a,
	0x0a, 0x1a, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x53, 0x75, 0x6c, 0x62, 0x61,
	0x6e, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xa1, 0x01, 0x0a, 0x14, 0x53,
	0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x53, 0x75, 0x6c, 0x62, 0x61, 0x6e, 0x64, 0x49,
	0x74, 0x65, 0x6d, 0x12, 0x3d, 0x0a, 0x0d, 0x73, 0x75, 0x6c, 0x5f, 0x62, 0x61, 0x6e, 0x64, 0x5f,
	0x69, 0x74, 0x65, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x78, 0x6e, 0x61,
	0x70, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x6c, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63,
	0x79, 0x42, 0x61, 0x6e, 0x64, 0x52, 0x0b, 0x73, 0x75, 0x6c, 0x42, 0x61, 0x6e, 0x64, 0x49, 0x74,
	0x65, 0x6d, 0x12, 0x4a, 0x0a, 0x0e, 0x69, 0x5f, 0x65, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x78, 0x6e, 0x61,
	0x70, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x53, 0x75,
	0x6c, 0x62, 0x61, 0x6e, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x52,
	0x0d, 0x69, 0x45, 0x2d, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x4c,
	0x0a, 0x1c, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x69, 0x6e, 0x53, 0x6c, 0x6f, 0x74, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x12, 0x2c,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xda, 0x02, 0x0a,
	0x16, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x69, 0x6e, 0x53, 0x6c, 0x6f, 0x74, 0x12, 0x3d, 0x0a, 0x06, 0x61, 0x6c, 0x6c, 0x5f, 0x64,
	0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x69, 0x6e, 0x53, 0x6c, 0x6f, 0x74, 0x41, 0x6c, 0x6c, 0x44, 0x6c, 0x48, 0x00, 0x52,
	0x05, 0x61, 0x6c, 0x6c, 0x44, 0x4c, 0x12, 0x3d, 0x0a, 0x06, 0x61, 0x6c, 0x6c, 0x5f, 0x75, 0x6c,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x69, 0x6e, 0x53, 0x6c, 0x6f, 0x74, 0x41, 0x6c, 0x6c, 0x55, 0x6c, 0x48, 0x00, 0x52, 0x05,
	0x61, 0x6c, 0x6c, 0x55, 0x4c, 0x12, 0x50, 0x0a, 0x0d, 0x62, 0x6f, 0x74, 0x68, 0x5f, 0x64, 0x6c,
	0x61, 0x6e, 0x64, 0x5f, 0x75, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x78,
	0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x41, 0x6c, 0x6c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x53, 0x6c, 0x6f, 0x74, 0x42, 0x6f, 0x74,
	0x68, 0x44, 0x6c, 0x61, 0x6e, 0x64, 0x55, 0x6c, 0x48, 0x00, 0x52, 0x0b, 0x62, 0x6f, 0x74, 0x68,
	0x44, 0x4c, 0x61, 0x6e, 0x64, 0x55, 0x4c, 0x12, 0x53, 0x0a, 0x10, 0x63, 0x68, 0x6f, 0x69, 0x63,
	0x65, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x25, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x79, 0x6d, 0x62,
	0x6f, 0x6c, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x53, 0x6c,
	0x6f, 0x74, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x48, 0x00, 0x52, 0x10, 0x63, 0x68, 0x6f, 0x69,
	0x63, 0x65, 0x2d, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x1b, 0x0a, 0x19,
	0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x6e, 0x5f, 0x73, 0x6c, 0x6f, 0x74, 0x22, 0x51, 0x0a, 0x21, 0x53, 0x79, 0x6d,
	0x62, 0x6f, 0x6c, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x53,
	0x6c, 0x6f, 0x74, 0x41, 0x6c, 0x6c, 0x44, 0x6c, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x12, 0x2c,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x6e, 0x0a, 0x1b,
	0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x69, 0x6e, 0x53, 0x6c, 0x6f, 0x74, 0x41, 0x6c, 0x6c, 0x44, 0x6c, 0x12, 0x4f, 0x0a, 0x0d, 0x69,
	0x5f, 0x65, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x79, 0x6d,
	0x62, 0x6f, 0x6c, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x53,
	0x6c, 0x6f, 0x74, 0x41, 0x6c, 0x6c, 0x44, 0x6c, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x52, 0x0c,
	0x69, 0x45, 0x2d, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x51, 0x0a, 0x21,
	0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x69, 0x6e, 0x53, 0x6c, 0x6f, 0x74, 0x41, 0x6c, 0x6c, 0x55, 0x6c, 0x45, 0x78, 0x74, 0x49, 0x65,
	0x73, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22,
	0x6e, 0x0a, 0x1b, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x53, 0x6c, 0x6f, 0x74, 0x41, 0x6c, 0x6c, 0x55, 0x6c, 0x12, 0x4f,
	0x0a, 0x0d, 0x69, 0x5f, 0x65, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x69, 0x6e, 0x53, 0x6c, 0x6f, 0x74, 0x41, 0x6c, 0x6c, 0x55, 0x6c, 0x45, 0x78, 0x74, 0x49, 0x65,
	0x73, 0x52, 0x0c, 0x69, 0x45, 0x2d, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22,
	0x57, 0x0a, 0x27, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x53, 0x6c, 0x6f, 0x74, 0x42, 0x6f, 0x74, 0x68, 0x44, 0x6c, 0x61,
	0x6e, 0x64, 0x55, 0x6c, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xd8, 0x01, 0x0a, 0x21, 0x53, 0x79, 0x6d,
	0x62, 0x6f, 0x6c, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x53,
	0x6c, 0x6f, 0x74, 0x42, 0x6f, 0x74, 0x68, 0x44, 0x6c, 0x61, 0x6e, 0x64, 0x55, 0x6c, 0x12, 0x2d,
	0x0a, 0x12, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x6f, 0x66, 0x5f, 0x64, 0x6c, 0x73, 0x79, 0x6d,
	0x62, 0x6f, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x6f, 0x66, 0x44, 0x4c, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x73, 0x12, 0x2d, 0x0a,
	0x12, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x6f, 0x66, 0x5f, 0x75, 0x6c, 0x73, 0x79, 0x6d, 0x62,
	0x6f, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x6f, 0x66, 0x55, 0x4c, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x73, 0x12, 0x55, 0x0a, 0x0d,
	0x69, 0x5f, 0x65, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x79,
	0x6d, 0x62, 0x6f, 0x6c, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x69, 0x6e,
	0x53, 0x6c, 0x6f, 0x74, 0x42, 0x6f, 0x74, 0x68, 0x44, 0x6c, 0x61, 0x6e, 0x64, 0x55, 0x6c, 0x45,
	0x78, 0x74, 0x49, 0x65, 0x73, 0x52, 0x0c, 0x69, 0x45, 0x2d, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x22, 0x40, 0x0a, 0x10, 0x54, 0x61, 0x62, 0x61, 0x73, 0x65, 0x64, 0x4d, 0x64,
	0x74, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x8b, 0x01, 0x0a, 0x0a, 0x54, 0x61, 0x62, 0x61, 0x73, 0x65,
	0x64, 0x4d, 0x64, 0x74, 0x12, 0x3b, 0x0a, 0x0e, 0x74, 0x5f, 0x61, 0x6c, 0x69, 0x73, 0x74, 0x66,
	0x6f, 0x72, 0x5f, 0x6d, 0x64, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x78,
	0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x6c, 0x69, 0x73, 0x74, 0x66, 0x6f, 0x72,
	0x4d, 0x64, 0x74, 0x52, 0x0c, 0x74, 0x41, 0x4c, 0x69, 0x73, 0x74, 0x66, 0x6f, 0x72, 0x4d, 0x44,
	0x54, 0x12, 0x40, 0x0a, 0x0e, 0x69, 0x5f, 0x65, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x78, 0x6e, 0x61, 0x70,
	0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x62, 0x61, 0x73, 0x65, 0x64, 0x4d, 0x64, 0x74, 0x45, 0x78,
	0x74, 0x49, 0x65, 0x73, 0x52, 0x0d, 0x69, 0x45, 0x2d, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x73, 0x22, 0x41, 0x0a, 0x11, 0x54, 0x61, 0x69, 0x62, 0x61, 0x73, 0x65, 0x64, 0x4d,
	0x64, 0x74, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x90, 0x01, 0x0a, 0x0b, 0x54, 0x61, 0x69, 0x62, 0x61,
	0x73, 0x65, 0x64, 0x4d, 0x64, 0x74, 0x12, 0x3e, 0x0a, 0x0f, 0x74, 0x5f, 0x61, 0x69, 0x6c, 0x69,
	0x73, 0x74, 0x66, 0x6f, 0x72, 0x5f, 0x6d, 0x64, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x69, 0x6c, 0x69, 0x73,
	0x74, 0x66, 0x6f, 0x72, 0x4d, 0x64, 0x74, 0x52, 0x0d, 0x74, 0x41, 0x49, 0x4c, 0x69, 0x73, 0x74,
	0x66, 0x6f, 0x72, 0x4d, 0x44, 0x54, 0x12, 0x41, 0x0a, 0x0e, 0x69, 0x5f, 0x65, 0x5f, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x69, 0x62, 0x61, 0x73, 0x65,
	0x64, 0x4d, 0x64, 0x74, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x52, 0x0d, 0x69, 0x45, 0x2d, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x49, 0x0a, 0x0d, 0x54, 0x61, 0x69,
	0x6c, 0x69, 0x73, 0x74, 0x66, 0x6f, 0x72, 0x4d, 0x64, 0x74, 0x12, 0x38, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x78, 0x6e, 0x61, 0x70,
	0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x69, 0x66, 0x6f, 0x72, 0x4d, 0x64, 0x74, 0x49, 0x74, 0x65,
	0x6d, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x92, 0x01, 0x04, 0x08, 0x01, 0x10, 0x08, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x22, 0x43, 0x0a, 0x13, 0x54, 0x61, 0x69, 0x66, 0x6f, 0x72, 0x4d, 0x64,
	0x74, 0x49, 0x74, 0x65, 0x6d, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xa6, 0x01, 0x0a, 0x0d, 0x54, 0x61,
	0x69, 0x66, 0x6f, 0x72, 0x4d, 0x64, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x2f, 0x0a, 0x07, 0x70,
	0x6c, 0x6d, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x78,
	0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6c, 0x6d, 0x6e, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x52, 0x07, 0x70, 0x6c, 0x6d, 0x6e, 0x2d, 0x49, 0x44, 0x12, 0x1f, 0x0a, 0x04,
	0x74, 0x5f, 0x61, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x78, 0x6e, 0x61,
	0x70, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x63, 0x52, 0x03, 0x74, 0x41, 0x43, 0x12, 0x43, 0x0a,
	0x0e, 0x69, 0x5f, 0x65, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e,
	0x54, 0x61, 0x69, 0x66, 0x6f, 0x72, 0x4d, 0x64, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x45, 0x78, 0x74,
	0x49, 0x65, 0x73, 0x52, 0x0d, 0x69, 0x45, 0x2d, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x22, 0x26, 0x0a, 0x03, 0x54, 0x61, 0x63, 0x12, 0x1f, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x09, 0xfa, 0x42, 0x06, 0x7a, 0x04, 0x10,
	0x03, 0x18, 0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x4c, 0x0a, 0x0e, 0x54, 0x61,
	0x69, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x78, 0x6e,
	0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x69, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74,
	0x49, 0x74, 0x65, 0x6d, 0x42, 0x0b, 0xfa, 0x42, 0x08, 0x92, 0x01, 0x05, 0x08, 0x01, 0x10, 0x80,
	0x02, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x44, 0x0a, 0x14, 0x54, 0x61, 0x69, 0x73,
	0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73,
	0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xd3,
	0x01, 0x0a, 0x0e, 0x54, 0x61, 0x69, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x74, 0x65,
	0x6d, 0x12, 0x1e, 0x0a, 0x03, 0x74, 0x61, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c,
	0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x63, 0x52, 0x03, 0x74, 0x61,
	0x63, 0x12, 0x5b, 0x0a, 0x0f, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x70,
	0x6c, 0x6d, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x78, 0x6e, 0x61,
	0x70, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x50, 0x6c,
	0x6d, 0x6e, 0x69, 0x6e, 0x54, 0x61, 0x69, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x74,
	0x65, 0x6d, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x92, 0x01, 0x04, 0x08, 0x01, 0x10, 0x0c, 0x52, 0x0e,
	0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x50, 0x4c, 0x4d, 0x4e, 0x73, 0x12, 0x44,
	0x0a, 0x0e, 0x69, 0x5f, 0x65, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31,
	0x2e, 0x54, 0x61, 0x69, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x45,
	0x78, 0x74, 0x49, 0x65, 0x73, 0x52, 0x0d, 0x69, 0x45, 0x2d, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x22, 0x3e, 0x0a, 0x0c, 0x54, 0x61, 0x6c, 0x69, 0x73, 0x74, 0x66, 0x6f,
	0x72, 0x4d, 0x64, 0x74, 0x12, 0x2e, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61,
	0x63, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x92, 0x01, 0x04, 0x08, 0x01, 0x10, 0x08, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x22, 0x2a, 0x0a, 0x12, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x43, 0x65,
	0x6c, 0x6c, 0x69, 0x6e, 0x45, 0x75, 0x74, 0x72, 0x61, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x22, 0x3f, 0x0a, 0x0f, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x43, 0x67, 0x69, 0x45, 0x78, 0x74,
	0x49, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x22, 0xb0, 0x01, 0x0a, 0x09, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x43, 0x47, 0x69, 0x12,
	0x20, 0x0a, 0x02, 0x6e, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x78, 0x6e,
	0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x72, 0x43, 0x47, 0x69, 0x48, 0x00, 0x52, 0x02, 0x6e,
	0x72, 0x12, 0x2b, 0x0a, 0x06, 0x65, 0x5f, 0x75, 0x74, 0x72, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x11, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x55, 0x54, 0x72,
	0x61, 0x43, 0x47, 0x69, 0x48, 0x00, 0x52, 0x06, 0x65, 0x2d, 0x75, 0x74, 0x72, 0x61, 0x12, 0x46,
	0x0a, 0x10, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e,
	0x76, 0x31, 0x2e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x43, 0x67, 0x69, 0x45, 0x78, 0x74, 0x49,
	0x65, 0x73, 0x48, 0x00, 0x52, 0x10, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x2d, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x0c, 0x0a, 0x0a, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x5f, 0x63, 0x67, 0x69, 0x22, 0x34, 0x0a, 0x1c, 0x54, 0x64, 0x64, 0x75, 0x6c, 0x64, 0x6c, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x4e, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x4f, 0x0a, 0x0e, 0x54, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x43, 0x65, 0x6c, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x3d, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x78, 0x6e,
	0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x43, 0x65, 0x6c, 0x6c,
	0x4c, 0x69, 0x73, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x92, 0x01, 0x04,
	0x08, 0x01, 0x10, 0x08, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x48, 0x0a, 0x18, 0x54,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x43, 0x65, 0x6c, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x74, 0x65,
	0x6d, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x94, 0x01, 0x0a, 0x12, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x43, 0x65, 0x6c, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x34, 0x0a, 0x0b,
	0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x63, 0x65, 0x6c, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x43, 0x47, 0x69, 0x52, 0x0b, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x2d, 0x63, 0x65,
	0x6c, 0x6c, 0x12, 0x48, 0x0a, 0x0e, 0x69, 0x5f, 0x65, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x78, 0x6e, 0x61,
	0x70, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x43, 0x65, 0x6c, 0x6c, 0x4c,
	0x69, 0x73, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x52, 0x0d, 0x69,
	0x45, 0x2d, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x30, 0x0a, 0x0d,
	0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x52, 0x53, 0x72, 0x71, 0x12, 0x1f, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x09, 0xfa, 0x42,
	0x06, 0x1a, 0x04, 0x18, 0x22, 0x28, 0x00, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x30,
	0x0a, 0x0d, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x52, 0x53, 0x72, 0x70, 0x12,
	0x1f, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x09,
	0xfa, 0x42, 0x06, 0x1a, 0x04, 0x18, 0x61, 0x28, 0x00, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x22, 0x30, 0x0a, 0x0d, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x53, 0x49, 0x6e,
	0x72, 0x12, 0x1f, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x42, 0x09, 0xfa, 0x42, 0x06, 0x1a, 0x04, 0x18, 0x7f, 0x28, 0x00, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x22, 0x4a, 0x0a, 0x1a, 0x54, 0x6e, 0x6c, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73,
	0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xb3,
	0x03, 0x0a, 0x14, 0x54, 0x6e, 0x6c, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x72, 0x0a, 0x2b, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x64, 0x65, 0x64, 0x5f, 0x75, 0x70, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x5f,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x5f,
	0x74, 0x6f, 0x5f, 0x61, 0x64, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x78,
	0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x74, 0x54, 0x6c, 0x61, 0x73, 0x48, 0x00,
	0x52, 0x26, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x55, 0x50, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x70, 0x6f, 0x72, 0x74, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x65, 0x73, 0x54, 0x6f, 0x41, 0x64, 0x64, 0x88, 0x01, 0x01, 0x12, 0x78, 0x0a, 0x2e, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x5f, 0x75, 0x70, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70,
	0x6f, 0x72, 0x74, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x65, 0x73, 0x5f, 0x74, 0x6f, 0x5f, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78,
	0x74, 0x54, 0x6c, 0x61, 0x73, 0x48, 0x01, 0x52, 0x29, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65,
	0x64, 0x55, 0x50, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x4c, 0x61, 0x79, 0x65,
	0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x54, 0x6f, 0x52, 0x65, 0x6d, 0x6f,
	0x76, 0x65, 0x88, 0x01, 0x01, 0x12, 0x4a, 0x0a, 0x0e, 0x69, 0x5f, 0x65, 0x5f, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e,
	0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x6e, 0x6c, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x45, 0x78, 0x74, 0x49,
	0x65, 0x73, 0x52, 0x0d, 0x69, 0x45, 0x2d, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x73, 0x42, 0x2e, 0x0a, 0x2c, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x5f, 0x75,
	0x70, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x5f, 0x74, 0x6f, 0x5f, 0x61, 0x64,
	0x64, 0x42, 0x31, 0x0a, 0x2f, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x5f, 0x75,
	0x70, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x5f, 0x74, 0x6f, 0x5f, 0x72, 0x65,
	0x6d, 0x6f, 0x76, 0x65, 0x22, 0x49, 0x0a, 0x0d, 0x54, 0x6e, 0x6c, 0x61, 0x54, 0x6f, 0x41, 0x64,
	0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x38, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x54,
	0x6e, 0x6c, 0x61, 0x54, 0x6f, 0x41, 0x64, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x42, 0x0a, 0xfa, 0x42,
	0x07, 0x92, 0x01, 0x04, 0x08, 0x01, 0x10, 0x20, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22,
	0x43, 0x0a, 0x13, 0x54, 0x6e, 0x6c, 0x61, 0x54, 0x6f, 0x41, 0x64, 0x64, 0x49, 0x74, 0x65, 0x6d,
	0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x22, 0xa2, 0x02, 0x0a, 0x0d, 0x54, 0x6e, 0x6c, 0x61, 0x54, 0x6f, 0x41,
	0x64, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x7a, 0x0a, 0x27, 0x74, 0x5f, 0x6e, 0x6c, 0x61, 0x73,
	0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70,
	0x6f, 0x72, 0x74, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x70, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x4c, 0x61, 0x79,
	0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x23, 0x74,
	0x4e, 0x4c, 0x41, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x12, 0x50, 0x0a, 0x15, 0x74, 0x5f, 0x6e, 0x6c, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x1c, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x6e, 0x6c, 0x61,
	0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x73, 0x61, 0x67, 0x65, 0x52,
	0x13, 0x74, 0x4e, 0x4c, 0x41, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x43, 0x0a, 0x0e, 0x69, 0x5f, 0x65, 0x5f, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x78,
	0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x6e, 0x6c, 0x61, 0x54, 0x6f, 0x41, 0x64, 0x64,
	0x49, 0x74, 0x65, 0x6d, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x52, 0x0d, 0x69, 0x45, 0x2d, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x4f, 0x0a, 0x10, 0x54, 0x6e, 0x6c,
	0x61, 0x54, 0x6f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x3b, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x78,
	0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x6e, 0x6c, 0x61, 0x54, 0x6f, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x92, 0x01, 0x04, 0x08,
	0x01, 0x10, 0x20, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x46, 0x0a, 0x16, 0x54, 0x6e,
	0x6c, 0x61, 0x54, 0x6f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x45, 0x78,
	0x74, 0x49, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x22, 0xc7, 0x02, 0x0a, 0x10, 0x54, 0x6e, 0x6c, 0x61, 0x54, 0x6f, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x7a, 0x0a, 0x27, 0x74, 0x5f, 0x6e, 0x6c, 0x61,
	0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x70, 0x6f, 0x72, 0x74, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x70, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x4c, 0x61,
	0x79, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x23,
	0x74, 0x4e, 0x4c, 0x41, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x12, 0x55, 0x0a, 0x15, 0x74, 0x5f, 0x6e, 0x6c, 0x61, 0x73, 0x73, 0x6f, 0x63,
	0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x6e, 0x6c,
	0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x73, 0x61, 0x67, 0x65,
	0x48, 0x00, 0x52, 0x13, 0x74, 0x4e, 0x4c, 0x41, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x55, 0x73, 0x61, 0x67, 0x65, 0x88, 0x01, 0x01, 0x12, 0x46, 0x0a, 0x0e, 0x69, 0x5f,
	0x65, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x6e, 0x6c,
	0x61, 0x54, 0x6f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x45, 0x78, 0x74,
	0x49, 0x65, 0x73, 0x52, 0x0d, 0x69, 0x45, 0x2d, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x42, 0x18, 0x0a, 0x16, 0x5f, 0x74, 0x5f, 0x6e, 0x6c, 0x61, 0x73, 0x73, 0x6f, 0x63,
	0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x22, 0x4f, 0x0a, 0x10,
	0x54, 0x6e, 0x6c, 0x61, 0x54, 0x6f, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x3b, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x6e, 0x6c, 0x61, 0x54, 0x6f,
	0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x92,
	0x01, 0x04, 0x08, 0x01, 0x10, 0x20, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x46, 0x0a,
	0x16, 0x54, 0x6e, 0x6c, 0x61, 0x54, 0x6f, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x49, 0x74, 0x65,
	0x6d, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xd6, 0x01, 0x0a, 0x10, 0x54, 0x6e, 0x6c, 0x61, 0x54, 0x6f,
	0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x7a, 0x0a, 0x27, 0x74, 0x5f,
	0x6e, 0x6c, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x78, 0x6e,
	0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x70, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72,
	0x74, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x23, 0x74, 0x4e, 0x4c, 0x41, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x46, 0x0a, 0x0e, 0x69, 0x5f, 0x65, 0x5f, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x6e, 0x6c, 0x61, 0x54, 0x6f, 0x52,
	0x65, 0x6d, 0x6f, 0x76, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x52,
	0x0d, 0x69, 0x45, 0x2d, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x49,
	0x0a, 0x0d, 0x54, 0x6e, 0x6c, 0x61, 0x53, 0x65, 0x74, 0x75, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x38, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x6e, 0x6c, 0x61, 0x53, 0x65, 0x74,
	0x75, 0x70, 0x49, 0x74, 0x65, 0x6d, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x92, 0x01, 0x04, 0x08, 0x01,
	0x10, 0x20, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x43, 0x0a, 0x13, 0x54, 0x6e, 0x6c,
	0x61, 0x53, 0x65, 0x74, 0x75, 0x70, 0x49, 0x74, 0x65, 0x6d, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73,
	0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xd0,
	0x01, 0x0a, 0x0d, 0x54, 0x6e, 0x6c, 0x61, 0x53, 0x65, 0x74, 0x75, 0x70, 0x49, 0x74, 0x65, 0x6d,
	0x12, 0x7a, 0x0a, 0x27, 0x74, 0x5f, 0x6e, 0x6c, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x24, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x70, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x23, 0x74, 0x4e, 0x4c, 0x41, 0x73, 0x73, 0x6f,
	0x63, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74,
	0x4c, 0x61, 0x79, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x43, 0x0a, 0x0e,
	0x69, 0x5f, 0x65, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x54,
	0x6e, 0x6c, 0x61, 0x53, 0x65, 0x74, 0x75, 0x70, 0x49, 0x74, 0x65, 0x6d, 0x45, 0x78, 0x74, 0x49,
	0x65, 0x73, 0x52, 0x0d, 0x69, 0x45, 0x2d, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x73, 0x22, 0x59, 0x0a, 0x15, 0x54, 0x6e, 0x6c, 0x61, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x54,
	0x6f, 0x53, 0x65, 0x74, 0x75, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x40, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x78, 0x6e, 0x61, 0x70,
	0x2e, 0x76, 0x31, 0x2e, 0x54, 0x6e, 0x6c, 0x61, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x54, 0x6f,
	0x53, 0x65, 0x74, 0x75, 0x70, 0x49, 0x74, 0x65, 0x6d, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x92, 0x01,
	0x04, 0x08, 0x01, 0x10, 0x20, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x4b, 0x0a, 0x1b,
	0x54, 0x6e, 0x6c, 0x61, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x54, 0x6f, 0x53, 0x65, 0x74, 0x75,
	0x70, 0x49, 0x74, 0x65, 0x6d, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x86, 0x02, 0x0a, 0x15, 0x54, 0x6e,
	0x6c, 0x61, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x54, 0x6f, 0x53, 0x65, 0x74, 0x75, 0x70, 0x49,
	0x74, 0x65, 0x6d, 0x12, 0x7a, 0x0a, 0x27, 0x74, 0x5f, 0x6e, 0x6c, 0x61, 0x73, 0x73, 0x6f, 0x63,
	0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74,
	0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x70, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x49,
	0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x23, 0x74, 0x4e, 0x4c, 0x41,
	0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70,
	0x6f, 0x72, 0x74, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12,
	0x24, 0x0a, 0x05, 0x63, 0x61, 0x75, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e,
	0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x61, 0x75, 0x73, 0x65, 0x52, 0x05,
	0x63, 0x61, 0x75, 0x73, 0x65, 0x12, 0x4b, 0x0a, 0x0e, 0x69, 0x5f, 0x65, 0x5f, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e,
	0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x6e, 0x6c, 0x61, 0x46, 0x61, 0x69, 0x6c,
	0x65, 0x64, 0x54, 0x6f, 0x53, 0x65, 0x74, 0x75, 0x70, 0x49, 0x74, 0x65, 0x6d, 0x45, 0x78, 0x74,
	0x49, 0x65, 0x73, 0x52, 0x0d, 0x69, 0x45, 0x2d, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x22, 0x41, 0x0a, 0x15, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x4c,
	0x61, 0x79, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x28, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x61, 0x73, 0x6e,
	0x31, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x69, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xe9, 0x01, 0x0a, 0x1e, 0x54, 0x72, 0x61, 0x63, 0x65, 0x41,
	0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x5a, 0x0a, 0x1e, 0x69, 0x64, 0x5f, 0x74,
	0x72, 0x61, 0x63, 0x65, 0x5f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x75, 0x72, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x72, 0x69, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x48, 0x00, 0x52, 0x1b, 0x69, 0x64, 0x2d, 0x54, 0x72, 0x61, 0x63,
	0x65, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x55, 0x52, 0x49, 0x12, 0x4f, 0x0a, 0x14, 0x69, 0x64, 0x5f, 0x6d, 0x64, 0x74, 0x5f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x64, 0x74,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52,
	0x14, 0x69, 0x64, 0x2d, 0x4d, 0x44, 0x54, 0x2d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x1a, 0x0a, 0x18, 0x74, 0x72, 0x61, 0x63, 0x65, 0x5f, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x78, 0x74, 0x5f, 0x69, 0x65,
	0x73, 0x22, 0xc0, 0x01, 0x0a, 0x15, 0x54, 0x72, 0x61, 0x63, 0x65, 0x41, 0x63, 0x74, 0x69, 0x76,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76,
	0x31, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x49, 0x65, 0x49, 0x44, 0x52, 0x03,
	0x26, 0x69, 0x64, 0x12, 0x37, 0x0a, 0x0b, 0x63, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x69,
	0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x0c,
	0x26, 0x63, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x46, 0x0a, 0x09,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x27, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x65, 0x41,
	0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x26, 0x45, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x22, 0xe2, 0x02, 0x0a, 0x0f, 0x54, 0x72, 0x61, 0x63, 0x65, 0x41, 0x63,
	0x74, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3e, 0x0a, 0x0f, 0x6e, 0x67, 0x5f, 0x72,
	0x61, 0x6e, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x67, 0x52, 0x41,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x65, 0x49, 0x64, 0x52, 0x0e, 0x6e, 0x67, 0x2d, 0x72, 0x61, 0x6e,
	0x2d, 0x54, 0x72, 0x61, 0x63, 0x65, 0x49, 0x44, 0x12, 0x44, 0x0a, 0x13, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x5f, 0x74, 0x6f, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x61, 0x73, 0x6e, 0x31, 0x2e, 0x76, 0x31, 0x2e,
	0x42, 0x69, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x13, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x73, 0x2d, 0x74, 0x6f, 0x2d, 0x74, 0x72, 0x61, 0x63, 0x65, 0x12, 0x35,
	0x0a, 0x0b, 0x74, 0x72, 0x61, 0x63, 0x65, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72,
	0x61, 0x63, 0x65, 0x44, 0x65, 0x70, 0x74, 0x68, 0x52, 0x0b, 0x74, 0x72, 0x61, 0x63, 0x65, 0x2d,
	0x64, 0x65, 0x70, 0x74, 0x68, 0x12, 0x4e, 0x0a, 0x12, 0x74, 0x72, 0x61, 0x63, 0x65, 0x5f, 0x63,
	0x6f, 0x6c, 0x6c, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x70, 0x6f, 0x72, 0x74, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x52, 0x12, 0x74, 0x72, 0x61, 0x63, 0x65, 0x2d, 0x63, 0x6f, 0x6c, 0x6c, 0x2d, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x42, 0x0a, 0x0c, 0x69, 0x65, 0x5f, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x78, 0x6e,
	0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x65, 0x41, 0x63, 0x74, 0x69, 0x76,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x52, 0x0c, 0x69, 0x65, 0x2d,
	0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x4f, 0x0a, 0x1f, 0x54, 0x73, 0x63,
	0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72,
	0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xa1, 0x03, 0x0a, 0x19, 0x54,
	0x73, 0x63, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74,
	0x65, 0x72, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x75, 0x0a, 0x23, 0x74, 0x5f, 0x73, 0x63,
	0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x69, 0x6e, 0x6b, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e,
	0x54, 0x73, 0x63, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x20, 0x74, 0x53, 0x43, 0x41,
	0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x69, 0x6e, 0x6b, 0x88, 0x01, 0x01, 0x12,
	0x71, 0x0a, 0x21, 0x74, 0x5f, 0x73, 0x63, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x75, 0x70,
	0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x78, 0x6e, 0x61,
	0x70, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x73, 0x63, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x01, 0x52,
	0x1e, 0x74, 0x53, 0x43, 0x41, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x70, 0x6c, 0x69, 0x6e, 0x6b, 0x88,
	0x01, 0x01, 0x12, 0x4c, 0x0a, 0x0c, 0x69, 0x65, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e,
	0x76, 0x31, 0x2e, 0x54, 0x73, 0x63, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x43, 0x68, 0x61,
	0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x45, 0x78, 0x74, 0x49,
	0x65, 0x73, 0x52, 0x0c, 0x69, 0x65, 0x2d, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x42, 0x26, 0x0a, 0x24, 0x5f, 0x74, 0x5f, 0x73, 0x63, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x69, 0x6e, 0x6b, 0x42, 0x24, 0x0a, 0x22, 0x5f, 0x74, 0x5f, 0x73,
	0x63, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x75, 0x70, 0x6c, 0x69, 0x6e, 0x6b, 0x22, 0x4e,
	0x0a, 0x1e, 0x54, 0x73, 0x63, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73,
	0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xd3,
	0x01, 0x0a, 0x18, 0x54, 0x73, 0x63, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x70,
	0x65, 0x72, 0x69, 0x6f, 0x64, 0x69, 0x63, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0b, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x69, 0x63, 0x69, 0x74, 0x79, 0x12, 0x31, 0x0a,
	0x12, 0x62, 0x75, 0x72, 0x73, 0x74, 0x5f, 0x61, 0x72, 0x72, 0x69, 0x76, 0x61, 0x6c, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x10, 0x62, 0x75, 0x72,
	0x73, 0x74, 0x41, 0x72, 0x72, 0x69, 0x76, 0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x4b, 0x0a, 0x0c, 0x69, 0x65, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31,
	0x2e, 0x54, 0x73, 0x63, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x52,
	0x0c, 0x69, 0x65, 0x2d, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x15, 0x0a,
	0x13, 0x5f, 0x62, 0x75, 0x72, 0x73, 0x74, 0x5f, 0x61, 0x72, 0x72, 0x69, 0x76, 0x61, 0x6c, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x22, 0x4f, 0x0a, 0x1f, 0x55, 0x65, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67,
	0x61, 0x74, 0x65, 0x4d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x42, 0x69, 0x74, 0x52, 0x61, 0x74,
	0x65, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xce, 0x01, 0x0a, 0x19, 0x55, 0x65, 0x61, 0x67, 0x67, 0x72,
	0x65, 0x67, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x42, 0x69, 0x74, 0x52,
	0x61, 0x74, 0x65, 0x12, 0x30, 0x0a, 0x0a, 0x64, 0x6c, 0x5f, 0x75, 0x65, 0x5f, 0x61, 0x6d, 0x62,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76,
	0x31, 0x2e, 0x42, 0x69, 0x74, 0x52, 0x61, 0x74, 0x65, 0x52, 0x0a, 0x64, 0x6c, 0x2d, 0x55, 0x45,
	0x2d, 0x41, 0x4d, 0x42, 0x52, 0x12, 0x30, 0x0a, 0x0a, 0x75, 0x6c, 0x5f, 0x75, 0x65, 0x5f, 0x61,
	0x6d, 0x62, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x78, 0x6e, 0x61, 0x70,
	0x2e, 0x76, 0x31, 0x2e, 0x42, 0x69, 0x74, 0x52, 0x61, 0x74, 0x65, 0x52, 0x0a, 0x75, 0x6c, 0x2d,
	0x55, 0x45, 0x2d, 0x41, 0x4d, 0x42, 0x52, 0x12, 0x4d, 0x0a, 0x0d, 0x69, 0x5f, 0x65, 0x5f, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28,
	0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x65, 0x61, 0x67, 0x67, 0x72, 0x65,
	0x67, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x42, 0x69, 0x74, 0x52, 0x61,
	0x74, 0x65, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x52, 0x0c, 0x69, 0x45, 0x2d, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x41, 0x0a, 0x11, 0x55, 0x65, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x78, 0x74, 0x49, 0x64, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x8a, 0x02, 0x0a, 0x0b, 0x55, 0x65,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x49, 0x64, 0x12, 0x41, 0x0a, 0x0a, 0x72, 0x5f, 0x72,
	0x63, 0x72, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x65, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78,
	0x74, 0x49, 0x64, 0x66, 0x6f, 0x72, 0x52, 0x72, 0x63, 0x72, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x48,
	0x00, 0x52, 0x09, 0x72, 0x52, 0x43, 0x52, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x12, 0x5e, 0x0a, 0x14,
	0x72, 0x5f, 0x72, 0x72, 0x63, 0x72, 0x65, 0x65, 0x73, 0x74, 0x61, 0x62, 0x6c, 0x69, 0x73, 0x68,
	0x6d, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x78, 0x6e, 0x61,
	0x70, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x65, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x49, 0x64,
	0x66, 0x6f, 0x72, 0x52, 0x72, 0x63, 0x72, 0x65, 0x65, 0x73, 0x74, 0x61, 0x62, 0x6c, 0x69, 0x73,
	0x68, 0x6d, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x13, 0x72, 0x52, 0x52, 0x43, 0x52, 0x65, 0x65,
	0x73, 0x74, 0x61, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x48, 0x0a, 0x10,
	0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31,
	0x2e, 0x55, 0x65, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x49, 0x64, 0x45, 0x78, 0x74, 0x49,
	0x65, 0x73, 0x48, 0x00, 0x52, 0x10, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x2d, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x0e, 0x0a, 0x0c, 0x75, 0x65, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x78, 0x74, 0x5f, 0x69, 0x64, 0x22, 0x4d, 0x0a, 0x1d, 0x55, 0x65, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x78, 0x74, 0x49, 0x64, 0x66, 0x6f, 0x72, 0x52, 0x72, 0x63, 0x72, 0x65, 0x73, 0x75, 0x6d,
	0x65, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x80, 0x02, 0x0a, 0x17, 0x55, 0x65, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x78, 0x74, 0x49, 0x64, 0x66, 0x6f, 0x72, 0x52, 0x72, 0x63, 0x72, 0x65, 0x73, 0x75, 0x6d,
	0x65, 0x12, 0x26, 0x0a, 0x06, 0x69, 0x5f, 0x72, 0x6e, 0x74, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0e, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x52, 0x4e, 0x74,
	0x69, 0x52, 0x06, 0x69, 0x2d, 0x72, 0x6e, 0x74, 0x69, 0x12, 0x3a, 0x0a, 0x10, 0x61, 0x6c, 0x6c,
	0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x5f, 0x72, 0x6e, 0x74, 0x69, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x52,
	0x4e, 0x74, 0x69, 0x52, 0x10, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x2d, 0x63,
	0x2d, 0x72, 0x6e, 0x74, 0x69, 0x12, 0x34, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f,
	0x70, 0x63, 0x69, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x78, 0x6e, 0x61, 0x70,
	0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x67, 0x52, 0x41, 0x6e, 0x43, 0x65, 0x6c, 0x6c, 0x50, 0x63, 0x69,
	0x52, 0x09, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x43, 0x49, 0x12, 0x4b, 0x0a, 0x0d, 0x69,
	0x5f, 0x65, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x26, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x65, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x49, 0x64, 0x66, 0x6f, 0x72, 0x52, 0x72, 0x63, 0x72, 0x65,
	0x73, 0x75, 0x6d, 0x65, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x52, 0x0c, 0x69, 0x45, 0x2d, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x56, 0x0a, 0x26, 0x55, 0x65, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x78, 0x74, 0x49, 0x64, 0x66, 0x6f, 0x72, 0x52, 0x72, 0x63, 0x72, 0x65, 0x65,
	0x73, 0x74, 0x61, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x45, 0x78, 0x74, 0x49,
	0x65, 0x73, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x22, 0xe1, 0x01, 0x0a, 0x20, 0x55, 0x65, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x49, 0x64,
	0x66, 0x6f, 0x72, 0x52, 0x72, 0x63, 0x72, 0x65, 0x65, 0x73, 0x74, 0x61, 0x62, 0x6c, 0x69, 0x73,
	0x68, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x26, 0x0a, 0x06, 0x63, 0x5f, 0x72, 0x6e, 0x74, 0x69, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x52, 0x4e, 0x74, 0x69, 0x52, 0x06, 0x63, 0x2d, 0x72, 0x6e, 0x74, 0x69, 0x12, 0x3f, 0x0a,
	0x10, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x5f, 0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x70, 0x63,
	0x69, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76,
	0x31, 0x2e, 0x4e, 0x67, 0x52, 0x41, 0x6e, 0x43, 0x65, 0x6c, 0x6c, 0x50, 0x63, 0x69, 0x52, 0x0e,
	0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x43, 0x65, 0x6c, 0x6c, 0x50, 0x43, 0x49, 0x12, 0x54,
	0x0a, 0x0d, 0x69, 0x5f, 0x65, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e,
	0x55, 0x65, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x49, 0x64, 0x66, 0x6f, 0x72, 0x52, 0x72,
	0x63, 0x72, 0x65, 0x65, 0x73, 0x74, 0x61, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x6d, 0x65, 0x6e, 0x74,
	0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x52, 0x0c, 0x69, 0x45, 0x2d, 0x45, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x22, 0xe4, 0x04, 0x0a, 0x2a, 0x55, 0x65, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x74, 0x72, 0x55, 0x65, 0x63, 0x74, 0x78, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x93, 0x01, 0x0a, 0x2d, 0x69, 0x64, 0x5f, 0x66, 0x69, 0x76, 0x65, 0x5f,
	0x67, 0x63, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x72, 0x65, 0x73, 0x74, 0x72,
	0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x78, 0x6e,
	0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x76, 0x65, 0x47, 0x63, 0x6d, 0x6f, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c,
	0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x48, 0x00, 0x52, 0x29,
	0x69, 0x64, 0x2d, 0x46, 0x69, 0x76, 0x65, 0x47, 0x43, 0x4d, 0x6f, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x79, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74,
	0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x12, 0x8a, 0x01, 0x0a, 0x2a, 0x69, 0x64,
	0x5f, 0x6e, 0x72, 0x75, 0x65, 0x73, 0x69, 0x64, 0x65, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x61, 0x67,
	0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x5f,
	0x62, 0x69, 0x74, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c,
	0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x72, 0x75, 0x65, 0x73, 0x69, 0x64,
	0x65, 0x6c, 0x69, 0x6e, 0x6b, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x4d, 0x61,
	0x78, 0x69, 0x6d, 0x75, 0x6d, 0x42, 0x69, 0x74, 0x52, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x26,
	0x69, 0x64, 0x2d, 0x4e, 0x52, 0x55, 0x45, 0x53, 0x69, 0x64, 0x65, 0x6c, 0x69, 0x6e, 0x6b, 0x41,
	0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x42,
	0x69, 0x74, 0x52, 0x61, 0x74, 0x65, 0x12, 0x8d, 0x01, 0x0a, 0x2b, 0x69, 0x64, 0x5f, 0x6c, 0x74,
	0x65, 0x75, 0x65, 0x73, 0x69, 0x64, 0x65, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x61, 0x67, 0x67, 0x72,
	0x65, 0x67, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x5f, 0x62, 0x69,
	0x74, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x78,
	0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x74, 0x65, 0x75, 0x65, 0x73, 0x69, 0x64, 0x65,
	0x6c, 0x69, 0x6e, 0x6b, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x78,
	0x69, 0x6d, 0x75, 0x6d, 0x42, 0x69, 0x74, 0x52, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x27, 0x69,
	0x64, 0x2d, 0x4c, 0x54, 0x45, 0x55, 0x45, 0x53, 0x69, 0x64, 0x65, 0x6c, 0x69, 0x6e, 0x6b, 0x41,
	0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x42,
	0x69, 0x74, 0x52, 0x61, 0x74, 0x65, 0x12, 0x58, 0x0a, 0x18, 0x69, 0x64, 0x5f, 0x75, 0x65, 0x72,
	0x61, 0x64, 0x69, 0x6f, 0x5f, 0x63, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f,
	0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e,
	0x76, 0x31, 0x2e, 0x55, 0x65, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x49, 0x64, 0x48, 0x00, 0x52, 0x16, 0x69, 0x64, 0x2d, 0x55, 0x45, 0x52,
	0x61, 0x64, 0x69, 0x6f, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x49, 0x44,
	0x42, 0x29, 0x0a, 0x27, 0x75, 0x65, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x69, 0x6e,
	0x66, 0x6f, 0x5f, 0x72, 0x65, 0x74, 0x72, 0x5f, 0x75, 0x65, 0x63, 0x74, 0x78, 0x74, 0x5f, 0x72,
	0x65, 0x73, 0x70, 0x5f, 0x65, 0x78, 0x74, 0x5f, 0x69, 0x65, 0x73, 0x22, 0xd8, 0x01, 0x0a, 0x21,
	0x55, 0x65, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x74,
	0x72, 0x55, 0x65, 0x63, 0x74, 0x78, 0x74, 0x52, 0x65, 0x73, 0x70, 0x45, 0x78, 0x74, 0x49, 0x65,
	0x73, 0x12, 0x26, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x49, 0x65, 0x49, 0x44, 0x52, 0x03, 0x26, 0x69, 0x64, 0x12, 0x37, 0x0a, 0x0b, 0x63, 0x72, 0x69,
	0x74, 0x69, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14,
	0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61,
	0x6c, 0x69, 0x74, 0x79, 0x52, 0x0c, 0x26, 0x63, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x69,
	0x74, 0x79, 0x12, 0x52, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e,
	0x55, 0x65, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x74,
	0x72, 0x55, 0x65, 0x63, 0x74, 0x78, 0x74, 0x52, 0x65, 0x73, 0x70, 0x45, 0x78, 0x74, 0x49, 0x65,
	0x73, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x26, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xcb, 0x07, 0x0a, 0x1b, 0x55, 0x65, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x78, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x74, 0x72, 0x55, 0x65, 0x63, 0x74,
	0x78, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x4c, 0x0a, 0x16, 0x6e, 0x67, 0x5f, 0x63, 0x5f, 0x75,
	0x65, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x65, 0x66,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31,
	0x2e, 0x41, 0x6d, 0x66, 0x55, 0x45, 0x4e, 0x47, 0x61, 0x70, 0x49, 0x44, 0x52, 0x16, 0x6e, 0x67,
	0x2d, 0x63, 0x2d, 0x55, 0x45, 0x2d, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x6c, 0x69, 0x6e, 0x67,
	0x2d, 0x72, 0x65, 0x66, 0x12, 0x60, 0x0a, 0x18, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x6c, 0x69,
	0x6e, 0x67, 0x5f, 0x74, 0x6e, 0x6c, 0x5f, 0x61, 0x74, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x70, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x4c, 0x61, 0x79, 0x65,
	0x72, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x18, 0x73, 0x69,
	0x67, 0x6e, 0x61, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2d, 0x54, 0x4e, 0x4c, 0x2d, 0x61, 0x74, 0x2d,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x59, 0x0a, 0x18, 0x75, 0x65, 0x5f, 0x73, 0x65, 0x63,
	0x75, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x63, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69,
	0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e,
	0x76, 0x31, 0x2e, 0x55, 0x65, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x43, 0x61, 0x70,
	0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x52, 0x16, 0x75, 0x65, 0x53, 0x65, 0x63,
	0x75, 0x72, 0x69, 0x74, 0x79, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65,
	0x73, 0x12, 0x51, 0x0a, 0x14, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x6e,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x73, 0x53, 0x65, 0x63, 0x75,
	0x72, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x13, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3c, 0x0a, 0x07, 0x75, 0x65, 0x5f, 0x61, 0x6d, 0x62, 0x72, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e,
	0x55, 0x65, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x78, 0x69, 0x6d,
	0x75, 0x6d, 0x42, 0x69, 0x74, 0x52, 0x61, 0x74, 0x65, 0x52, 0x07, 0x75, 0x65, 0x2d, 0x41, 0x4d,
	0x42, 0x52, 0x12, 0x7c, 0x0a, 0x26, 0x70, 0x64, 0x75, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x5f, 0x74, 0x6f, 0x5f, 0x62,
	0x65, 0x5f, 0x73, 0x65, 0x74, 0x75, 0x70, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x29, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x64, 0x75,
	0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73,
	0x54, 0x6f, 0x42, 0x65, 0x53, 0x65, 0x74, 0x75, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x21, 0x70,
	0x64, 0x75, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x73, 0x54, 0x6f, 0x42, 0x65, 0x53, 0x65, 0x74, 0x75, 0x70, 0x2d, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x20, 0x0a, 0x0b, 0x72, 0x72, 0x63, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x72, 0x72, 0x63, 0x2d, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x12, 0x61, 0x0a, 0x19, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x72,
	0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e,
	0x4d, 0x6f, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x00, 0x52, 0x17, 0x6d, 0x6f, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69,
	0x73, 0x74, 0x88, 0x01, 0x01, 0x12, 0x70, 0x0a, 0x29, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x5f, 0x74,
	0x6f, 0x5f, 0x72, 0x61, 0x74, 0x5f, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x5f,
	0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69,
	0x74, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e,
	0x76, 0x31, 0x2e, 0x52, 0x66, 0x73, 0x70, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x48, 0x01, 0x52, 0x24,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x54, 0x6f, 0x52, 0x61, 0x74, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x6e, 0x63, 0x79, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x69, 0x6f,
	0x72, 0x69, 0x74, 0x79, 0x88, 0x01, 0x01, 0x12, 0x4f, 0x0a, 0x0d, 0x69, 0x5f, 0x65, 0x5f, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a,
	0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x65, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x74, 0x72, 0x55, 0x65, 0x63, 0x74, 0x78, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x52, 0x0c, 0x69, 0x45, 0x2d, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x1c, 0x0a, 0x1a, 0x5f, 0x6d, 0x6f, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x42, 0x2c, 0x0a, 0x2a, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x5f, 0x74, 0x6f, 0x5f, 0x72, 0x61, 0x74, 0x5f, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63,
	0x79, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x72, 0x69, 0x6f,
	0x72, 0x69, 0x74, 0x79, 0x22, 0x56, 0x0a, 0x14, 0x55, 0x65, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72,
	0x79, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3e, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x78, 0x6e,
	0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x61, 0x73, 0x74, 0x56, 0x69, 0x73, 0x69, 0x74, 0x65,
	0x64, 0x43, 0x65, 0x6c, 0x6c, 0x49, 0x74, 0x65, 0x6d, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x92, 0x01,
	0x04, 0x08, 0x01, 0x10, 0x10, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x53, 0x0a, 0x23,
	0x55, 0x65, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x46, 0x72, 0x6f, 0x6d, 0x54, 0x68, 0x65, 0x55, 0x65, 0x45, 0x78, 0x74,
	0x49, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x22, 0xd5, 0x01, 0x0a, 0x1d, 0x55, 0x65, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x49,
	0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x72, 0x6f, 0x6d, 0x54, 0x68,
	0x65, 0x55, 0x65, 0x12, 0x33, 0x0a, 0x03, 0x6e, 0x5f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x20, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x72, 0x6d, 0x6f, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x48, 0x00, 0x52, 0x02, 0x6e, 0x52, 0x12, 0x5a, 0x0a, 0x10, 0x63, 0x68, 0x6f, 0x69,
	0x63, 0x65, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x65, 0x68,
	0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x46, 0x72, 0x6f, 0x6d, 0x54, 0x68, 0x65, 0x55, 0x65, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73,
	0x48, 0x00, 0x52, 0x10, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x2d, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x42, 0x23, 0x0a, 0x21, 0x75, 0x65, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72,
	0x79, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x72,
	0x6f, 0x6d, 0x5f, 0x74, 0x68, 0x65, 0x5f, 0x75, 0x65, 0x22, 0x4a, 0x0a, 0x1a, 0x55, 0x65, 0x69,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xc0, 0x01, 0x0a, 0x14, 0x55, 0x65, 0x69, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x3b,
	0x0a, 0x0e, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x31, 0x30,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x61, 0x73, 0x6e, 0x31, 0x2e, 0x76, 0x31,
	0x2e, 0x42, 0x69, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x48, 0x00, 0x52, 0x0d, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x31, 0x30, 0x12, 0x51, 0x0a, 0x10, 0x63,
	0x68, 0x6f, 0x69, 0x63, 0x65, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e,
	0x55, 0x65, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x48, 0x00, 0x52, 0x10, 0x63, 0x68,
	0x6f, 0x69, 0x63, 0x65, 0x2d, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x18,
	0x0a, 0x16, 0x75, 0x65, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x50, 0x0a, 0x20, 0x55, 0x65, 0x72, 0x61,
	0x64, 0x69, 0x6f, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x46, 0x6f, 0x72,
	0x50, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xc5, 0x03, 0x0a, 0x1a, 0x55,
	0x65, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x46, 0x6f, 0x72, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x12, 0x7a, 0x0a, 0x24, 0x75, 0x5f, 0x65,
	0x72, 0x61, 0x64, 0x69, 0x6f, 0x5f, 0x63, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x5f, 0x6f, 0x66, 0x5f, 0x6e,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76,
	0x31, 0x2e, 0x55, 0x65, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x46, 0x6f, 0x72, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x4f, 0x66, 0x4e, 0x72,
	0x48, 0x00, 0x52, 0x1e, 0x75, 0x45, 0x52, 0x61, 0x64, 0x69, 0x6f, 0x43, 0x61, 0x70, 0x61, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x46, 0x6f, 0x72, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x4f, 0x66,
	0x4e, 0x52, 0x88, 0x01, 0x01, 0x12, 0x83, 0x01, 0x0a, 0x27, 0x75, 0x5f, 0x65, 0x72, 0x61, 0x64,
	0x69, 0x6f, 0x5f, 0x63, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x66, 0x6f,
	0x72, 0x5f, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x5f, 0x6f, 0x66, 0x5f, 0x65, 0x75, 0x74, 0x72,
	0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76,
	0x31, 0x2e, 0x55, 0x65, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x46, 0x6f, 0x72, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x4f, 0x66, 0x45, 0x75,
	0x74, 0x72, 0x61, 0x48, 0x01, 0x52, 0x21, 0x75, 0x45, 0x52, 0x61, 0x64, 0x69, 0x6f, 0x43, 0x61,
	0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x46, 0x6f, 0x72, 0x50, 0x61, 0x67, 0x69, 0x6e,
	0x67, 0x4f, 0x66, 0x45, 0x55, 0x54, 0x52, 0x41, 0x88, 0x01, 0x01, 0x12, 0x50, 0x0a, 0x0e, 0x69,
	0x5f, 0x65, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x65,
	0x72, 0x61, 0x64, 0x69, 0x6f, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x46,
	0x6f, 0x72, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x52, 0x0d,
	0x69, 0x45, 0x2d, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x27, 0x0a,
	0x25, 0x5f, 0x75, 0x5f, 0x65, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x5f, 0x63, 0x61, 0x70, 0x61, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x67,
	0x5f, 0x6f, 0x66, 0x5f, 0x6e, 0x72, 0x42, 0x2a, 0x0a, 0x28, 0x5f, 0x75, 0x5f, 0x65, 0x72, 0x61,
	0x64, 0x69, 0x6f, 0x5f, 0x63, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x66,
	0x6f, 0x72, 0x5f, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x5f, 0x6f, 0x66, 0x5f, 0x65, 0x75, 0x74,
	0x72, 0x61, 0x22, 0x36, 0x0a, 0x1e, 0x55, 0x65, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x43, 0x61, 0x70,
	0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x46, 0x6f, 0x72, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x67,
	0x4f, 0x66, 0x4e, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x39, 0x0a, 0x21, 0x55, 0x65,
	0x72, 0x61, 0x64, 0x69, 0x6f, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x46,
	0x6f, 0x72, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x4f, 0x66, 0x45, 0x75, 0x74, 0x72, 0x61, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x2b, 0x0a, 0x13, 0x55, 0x65, 0x72, 0x61, 0x64, 0x69, 0x6f,
	0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x22, 0x49, 0x0a, 0x19, 0x55, 0x65, 0x72, 0x61, 0x6e, 0x70, 0x61, 0x67, 0x69, 0x6e,
	0x67, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x12,
	0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xb7, 0x01,
	0x0a, 0x13, 0x55, 0x65, 0x72, 0x61, 0x6e, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x36, 0x0a, 0x0b, 0x69, 0x5f, 0x72, 0x6e, 0x74, 0x69, 0x5f,
	0x66, 0x75, 0x6c, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x61, 0x73, 0x6e,
	0x31, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x69, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x48, 0x00,
	0x52, 0x0b, 0x69, 0x2d, 0x52, 0x4e, 0x54, 0x49, 0x2d, 0x66, 0x75, 0x6c, 0x6c, 0x12, 0x50, 0x0a,
	0x10, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76,
	0x31, 0x2e, 0x55, 0x65, 0x72, 0x61, 0x6e, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x48, 0x00, 0x52, 0x10, 0x63,
	0x68, 0x6f, 0x69, 0x63, 0x65, 0x2d, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x42,
	0x16, 0x0a, 0x14, 0x75, 0x65, 0x72, 0x61, 0x6e, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x5f, 0x69,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x22, 0x4a, 0x0a, 0x1a, 0x55, 0x65, 0x72, 0x6c, 0x66,
	0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x45,
	0x78, 0x74, 0x49, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x22, 0xc3, 0x02, 0x0a, 0x14, 0x55, 0x65, 0x72, 0x6c, 0x66, 0x72, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x12, 0x5d, 0x0a, 0x19,
	0x6e, 0x5f, 0x72, 0x5f, 0x75, 0x65, 0x72, 0x6c, 0x66, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f,
	0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x65, 0x72, 0x6c, 0x66, 0x72,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x4e, 0x72,
	0x48, 0x00, 0x52, 0x17, 0x6e, 0x52, 0x2d, 0x55, 0x45, 0x52, 0x4c, 0x46, 0x52, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x12, 0x60, 0x0a, 0x1a, 0x6c,
	0x5f, 0x74, 0x65, 0x5f, 0x75, 0x65, 0x72, 0x6c, 0x66, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f,
	0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x20, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x65, 0x72, 0x6c, 0x66, 0x72,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x4c, 0x74,
	0x65, 0x48, 0x00, 0x52, 0x18, 0x6c, 0x54, 0x45, 0x2d, 0x55, 0x45, 0x52, 0x4c, 0x46, 0x52, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x12, 0x51, 0x0a,
	0x10, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76,
	0x31, 0x2e, 0x55, 0x65, 0x72, 0x6c, 0x66, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x6e,
	0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x48, 0x00, 0x52, 0x10,
	0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x2d, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x42, 0x17, 0x0a, 0x15, 0x75, 0x65, 0x72, 0x6c, 0x66, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f,
	0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x22, 0x2f, 0x0a, 0x17, 0x55, 0x65, 0x72,
	0x6c, 0x66, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65,
	0x72, 0x4c, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x2e, 0x0a, 0x16, 0x55, 0x65,
	0x72, 0x6c, 0x66, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x65, 0x72, 0x4e, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x4c, 0x0a, 0x1c, 0x55, 0x65,
	0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x69, 0x65, 0x73, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xd2, 0x03, 0x0a, 0x16, 0x55, 0x65, 0x73,
	0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x69, 0x65, 0x73, 0x12, 0x4b, 0x0a, 0x17, 0x6e, 0x72, 0x5f, 0x65, 0x6e, 0x63, 0x79, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x61, 0x73, 0x6e, 0x31, 0x2e, 0x76, 0x31, 0x2e, 0x42,
	0x69, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x16, 0x6e, 0x72, 0x2d, 0x45, 0x6e, 0x63,
	0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x73,
	0x12, 0x60, 0x0a, 0x22, 0x6e, 0x72, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x69, 0x74, 0x79,
	0x5f, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x6c, 0x67, 0x6f,
	0x72, 0x69, 0x74, 0x68, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x61,
	0x73, 0x6e, 0x31, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x69, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x52, 0x20, 0x6e, 0x72, 0x2d, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x69, 0x74, 0x79, 0x50, 0x72,
	0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68,
	0x6d, 0x73, 0x12, 0x53, 0x0a, 0x1b, 0x65, 0x5f, 0x75, 0x74, 0x72, 0x61, 0x5f, 0x65, 0x6e, 0x63,
	0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x61, 0x73, 0x6e, 0x31, 0x2e, 0x76,
	0x31, 0x2e, 0x42, 0x69, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x1a, 0x65, 0x2d, 0x75,
	0x74, 0x72, 0x61, 0x2d, 0x45, 0x6e, 0x63, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6c, 0x67,
	0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x73, 0x12, 0x68, 0x0a, 0x26, 0x65, 0x5f, 0x75, 0x74, 0x72,
	0x61, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x70, 0x72, 0x6f, 0x74,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d,
	0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x61, 0x73, 0x6e, 0x31, 0x2e, 0x76,
	0x31, 0x2e, 0x42, 0x69, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x24, 0x65, 0x2d, 0x75,
	0x74, 0x72, 0x61, 0x2d, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f,
	0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d,
	0x73, 0x12, 0x4a, 0x0a, 0x0d, 0x69, 0x5f, 0x65, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e,
	0x76, 0x31, 0x2e, 0x55, 0x65, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x43, 0x61, 0x70,
	0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x52,
	0x0c, 0x69, 0x45, 0x2d, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x45, 0x0a,
	0x15, 0x55, 0x6c, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x22, 0x8f, 0x01, 0x0a, 0x0f, 0x55, 0x6c, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x35, 0x0a, 0x08, 0x75, 0x5f, 0x6c, 0x5f,
	0x70, 0x64, 0x63, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x78, 0x6e, 0x61,
	0x70, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x6c, 0x55, 0x45, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x75, 0x4c, 0x2d, 0x50, 0x44, 0x43, 0x50, 0x12,
	0x45, 0x0a, 0x0e, 0x69, 0x5f, 0x65, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76,
	0x31, 0x2e, 0x55, 0x6c, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x52, 0x0d, 0x69, 0x45, 0x2d, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x30, 0x0a, 0x0d, 0x55, 0x6c, 0x47, 0x42, 0x72, 0x50,
	0x52, 0x62, 0x75, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1f, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x09, 0xfa, 0x42, 0x06, 0x1a, 0x04, 0x18, 0x64, 0x28,
	0x00, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x33, 0x0a, 0x10, 0x55, 0x6c, 0x6e, 0x6f,
	0x6e, 0x47, 0x42, 0x72, 0x50, 0x52, 0x62, 0x75, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1f, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x09, 0xfa, 0x42, 0x06,
	0x1a, 0x04, 0x18, 0x64, 0x28, 0x00, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x32, 0x0a,
	0x0f, 0x55, 0x6c, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x52, 0x62, 0x75, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x1f, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42,
	0x09, 0xfa, 0x42, 0x06, 0x1a, 0x04, 0x18, 0x64, 0x28, 0x00, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x22, 0x51, 0x0a, 0x21, 0x55, 0x70, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74,
	0x4c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x22, 0xe6, 0x01, 0x0a, 0x1b, 0x55, 0x70, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x70, 0x6f, 0x72, 0x74, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4c, 0x0a, 0x0a, 0x67, 0x74, 0x70, 0x5f, 0x74, 0x75, 0x6e, 0x6e,
	0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x74, 0x70, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x70, 0x6f, 0x72, 0x74, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x09, 0x67, 0x74, 0x70, 0x54, 0x75, 0x6e, 0x6e,
	0x65, 0x6c, 0x12, 0x58, 0x0a, 0x10, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x5f, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x78,
	0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f,
	0x72, 0x74, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x48, 0x00, 0x52, 0x10, 0x63, 0x68, 0x6f, 0x69,
	0x63, 0x65, 0x2d, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x1f, 0x0a, 0x1d,
	0x75, 0x70, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x5d, 0x0a,
	0x15, 0x55, 0x70, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x44, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e,
	0x55, 0x70, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x65, 0x74, 0x65, 0x72, 0x73, 0x49, 0x74, 0x65, 0x6d, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x92, 0x01,
	0x04, 0x08, 0x01, 0x10, 0x04, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x4f, 0x0a, 0x1f,
	0x55, 0x70, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x65, 0x74, 0x65, 0x72, 0x73, 0x49, 0x74, 0x65, 0x6d, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x12,
	0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xe9, 0x01,
	0x0a, 0x19, 0x55, 0x70, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x43, 0x0a, 0x0a, 0x75,
	0x70, 0x5f, 0x74, 0x6e, 0x6c, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x24, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x70, 0x6f, 0x72, 0x74, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x75, 0x70, 0x54, 0x4e, 0x4c, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x38, 0x0a, 0x0d, 0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x52, 0x0b, 0x63,
	0x65, 0x6c, 0x6c, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x12, 0x4d, 0x0a, 0x0d, 0x69, 0x5f,
	0x65, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x28, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72,
	0x73, 0x49, 0x74, 0x65, 0x6d, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x52, 0x0c, 0x69, 0x45, 0x2d,
	0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x22, 0x0a, 0x0a, 0x55, 0x72, 0x69,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x59, 0x0a,
	0x15, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x64, 0x52, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x40, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e,
	0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x64, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x49, 0x74, 0x65, 0x6d, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x92, 0x01, 0x04, 0x08, 0x01, 0x10,
	0x02, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x4b, 0x0a, 0x1b, 0x56, 0x6f, 0x6c, 0x75,
	0x6d, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x64, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x74, 0x65,
	0x6d, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x96, 0x02, 0x0a, 0x15, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x64, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x12,
	0x33, 0x0a, 0x10, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x09, 0xfa, 0x42, 0x06, 0x7a, 0x04,
	0x10, 0x04, 0x18, 0x04, 0x52, 0x0e, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x53,
	0x74, 0x61, 0x6d, 0x70, 0x12, 0x2f, 0x0a, 0x0e, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x5f, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x09, 0xfa, 0x42,
	0x06, 0x7a, 0x04, 0x10, 0x04, 0x18, 0x04, 0x52, 0x0c, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65,
	0x53, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x24, 0x0a, 0x0e, 0x75, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x75, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x75,
	0x73, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x55, 0x4c, 0x12, 0x24, 0x0a, 0x0e, 0x75,
	0x73, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x64, 0x6c, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0c, 0x75, 0x73, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x44,
	0x4c, 0x12, 0x4b, 0x0a, 0x0e, 0x69, 0x5f, 0x65, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x78, 0x6e, 0x61, 0x70,
	0x2e, 0x76, 0x31, 0x2e, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x64, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x52,
	0x0d, 0x69, 0x45, 0x2d, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x52,
	0x0a, 0x22, 0x57, 0x6c, 0x61, 0x6e, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78,
	0x74, 0x49, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x22, 0xf2, 0x03, 0x0a, 0x1c, 0x57, 0x6c, 0x61, 0x6e, 0x6d, 0x65, 0x61, 0x73, 0x75,
	0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x41, 0x0a, 0x10, 0x77, 0x6c, 0x61, 0x6e, 0x5f, 0x6d, 0x65, 0x61, 0x73,
	0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e,
	0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x6c, 0x61, 0x6e, 0x6d, 0x65, 0x61, 0x73,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0e, 0x77, 0x6c, 0x61, 0x6e, 0x4d, 0x65, 0x61, 0x73,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x60, 0x0a, 0x1a, 0x77, 0x6c, 0x61, 0x6e, 0x5f, 0x6d,
	0x65, 0x61, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x78, 0x6e, 0x61,
	0x70, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x6c, 0x61, 0x6e, 0x6d, 0x65, 0x61, 0x73, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x00, 0x52, 0x16, 0x77,
	0x6c, 0x61, 0x6e, 0x4d, 0x65, 0x61, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4e, 0x61, 0x6d,
	0x65, 0x4c, 0x69, 0x73, 0x74, 0x88, 0x01, 0x01, 0x12, 0x50, 0x0a, 0x09, 0x77, 0x6c, 0x61, 0x6e,
	0x5f, 0x72, 0x73, 0x73, 0x69, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2d, 0x2e, 0x78, 0x6e,
	0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x6c, 0x61, 0x6e, 0x72, 0x73, 0x73, 0x69, 0x57, 0x6c,
	0x61, 0x6e, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x01, 0x52, 0x09, 0x77, 0x6c,
	0x61, 0x6e, 0x2d, 0x72, 0x73, 0x73, 0x69, 0x88, 0x01, 0x01, 0x12, 0x4d, 0x0a, 0x08, 0x77, 0x6c,
	0x61, 0x6e, 0x5f, 0x72, 0x74, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2c, 0x2e, 0x78,
	0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x6c, 0x61, 0x6e, 0x72, 0x74, 0x74, 0x57, 0x6c,
	0x61, 0x6e, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x02, 0x52, 0x08, 0x77, 0x6c,
	0x61, 0x6e, 0x2d, 0x72, 0x74, 0x74, 0x88, 0x01, 0x01, 0x12, 0x52, 0x0a, 0x0e, 0x69, 0x5f, 0x65,
	0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x2b, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x6c, 0x61, 0x6e,
	0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x74, 0x49, 0x65, 0x73, 0x52, 0x0d,
	0x69, 0x45, 0x2d, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x1d, 0x0a,
	0x1b, 0x5f, 0x77, 0x6c, 0x61, 0x6e, 0x5f, 0x6d, 0x65, 0x61, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x42, 0x0c, 0x0a, 0x0a,
	0x5f, 0x77, 0x6c, 0x61, 0x6e, 0x5f, 0x72, 0x73, 0x73, 0x69, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x77,
	0x6c, 0x61, 0x6e, 0x5f, 0x72, 0x74, 0x74, 0x22, 0x4d, 0x0a, 0x16, 0x57, 0x6c, 0x61, 0x6e, 0x6d,
	0x65, 0x61, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x33, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x11, 0x2e, 0x78, 0x6e, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x6c, 0x61, 0x6e, 0x6e,
	0x61, 0x6d, 0x65, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x92, 0x01, 0x04, 0x08, 0x01, 0x10, 0x04, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x2b, 0x0a, 0x08, 0x57, 0x6c, 0x61, 0x6e, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0c, 0x42, 0x09, 0xfa, 0x42, 0x06, 0x7a, 0x04, 0x10, 0x01, 0x18, 0x20, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x22, 0x31, 0x0a, 0x0e, 0x58, 0x6e, 0x42, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x74,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1f, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x42, 0x09, 0xfa, 0x42, 0x06, 0x1a, 0x04, 0x18, 0x08, 0x28, 0x01, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x2a, 0x4f, 0x0a, 0x1b, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x30, 0x0a, 0x2c, 0x41, 0x44, 0x44, 0x49, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x4c, 0x4f, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x52,
	0x4d, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x4e, 0x43, 0x4c, 0x55, 0x44, 0x45, 0x5f, 0x50,
	0x53, 0x43, 0x45, 0x4c, 0x4c, 0x10, 0x00, 0x2a, 0xe3, 0x01, 0x0a, 0x32, 0x50, 0x72, 0x65, 0x65,
	0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x63, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x74,
	0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x5b,
	0x0a, 0x57, 0x50, 0x52, 0x45, 0x45, 0x4d, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x43, 0x41, 0x50, 0x41,
	0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x41, 0x4c, 0x4c, 0x4f, 0x43, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x41, 0x4e, 0x44, 0x5f, 0x52, 0x45, 0x54, 0x45, 0x4e, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x50,
	0x52, 0x49, 0x4f, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x48, 0x41, 0x4c, 0x4c, 0x5f, 0x4e, 0x4f,
	0x54, 0x5f, 0x54, 0x52, 0x49, 0x47, 0x47, 0x45, 0x52, 0x5f, 0x50, 0x52, 0x45, 0x45, 0x4d, 0x50,
	0x54, 0x44, 0x41, 0x54, 0x5f, 0x44, 0x49, 0x4f, 0x4e, 0x10, 0x00, 0x12, 0x50, 0x0a, 0x4c, 0x50,
	0x52, 0x45, 0x45, 0x4d, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x43, 0x41, 0x50, 0x41, 0x42, 0x49, 0x4c,
	0x49, 0x54, 0x59, 0x5f, 0x41, 0x4c, 0x4c, 0x4f, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x4e,
	0x44, 0x5f, 0x52, 0x45, 0x54, 0x45, 0x4e, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x50, 0x52, 0x49, 0x4f,
	0x52, 0x49, 0x54, 0x59, 0x5f, 0x4d, 0x41, 0x59, 0x5f, 0x54, 0x52, 0x49, 0x47, 0x47, 0x45, 0x52,
	0x5f, 0x50, 0x52, 0x45, 0x45, 0x4d, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x01, 0x2a, 0xcf, 0x01,
	0x0a, 0x35, 0x50, 0x72, 0x65, 0x65, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x76, 0x75, 0x6c, 0x6e,
	0x65, 0x72, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x50,
	0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x4c, 0x0a, 0x48, 0x50, 0x52, 0x45, 0x45, 0x4d,
	0x50, 0x54, 0x49, 0x4f, 0x4e, 0x56, 0x55, 0x4c, 0x4e, 0x45, 0x52, 0x41, 0x42, 0x49, 0x4c, 0x49,
	0x54, 0x59, 0x5f, 0x41, 0x4c, 0x4c, 0x4f, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x4e, 0x44,
	0x5f, 0x52, 0x45, 0x54, 0x45, 0x4e, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x50, 0x52, 0x49, 0x4f, 0x52,
	0x49, 0x54, 0x59, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x50, 0x52, 0x45, 0x45, 0x4d, 0x50, 0x54, 0x41,
	0x42, 0x4c, 0x45, 0x10, 0x00, 0x12, 0x48, 0x0a, 0x44, 0x50, 0x52, 0x45, 0x45, 0x4d, 0x50, 0x54,
	0x49, 0x4f, 0x4e, 0x56, 0x55, 0x4c, 0x4e, 0x45, 0x52, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59,
	0x5f, 0x41, 0x4c, 0x4c, 0x4f, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x4e, 0x44, 0x5f, 0x52,
	0x45, 0x54, 0x45, 0x4e, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x50, 0x52, 0x49, 0x4f, 0x52, 0x49, 0x54,
	0x59, 0x5f, 0x50, 0x52, 0x45, 0x45, 0x4d, 0x50, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x01, 0x2a,
	0x5e, 0x0a, 0x27, 0x42, 0x74, 0x72, 0x73, 0x73, 0x69, 0x42, 0x6c, 0x75, 0x65, 0x74, 0x6f, 0x6f,
	0x74, 0x68, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x33, 0x0a, 0x2f, 0x42, 0x54,
	0x52, 0x53, 0x53, 0x49, 0x5f, 0x42, 0x4c, 0x55, 0x45, 0x54, 0x4f, 0x4f, 0x54, 0x48, 0x5f, 0x4d,
	0x45, 0x41, 0x53, 0x55, 0x52, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49,
	0x47, 0x55, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x52, 0x55, 0x45, 0x10, 0x00, 0x2a,
	0x36, 0x0a, 0x13, 0x42, 0x6c, 0x75, 0x65, 0x74, 0x6f, 0x6f, 0x74, 0x68, 0x4d, 0x65, 0x61, 0x73,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1f, 0x0a, 0x1b, 0x42, 0x4c, 0x55, 0x45, 0x54, 0x4f,
	0x4f, 0x54, 0x48, 0x5f, 0x4d, 0x45, 0x41, 0x53, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f,
	0x53, 0x45, 0x54, 0x55, 0x50, 0x10, 0x00, 0x2a, 0xcd, 0x1e, 0x0a, 0x16, 0x43, 0x61, 0x75, 0x73,
	0x65, 0x52, 0x61, 0x64, 0x69, 0x6f, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x4c, 0x61, 0x79,
	0x65, 0x72, 0x12, 0x30, 0x0a, 0x2c, 0x43, 0x41, 0x55, 0x53, 0x45, 0x5f, 0x52, 0x41, 0x44, 0x49,
	0x4f, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x5f,
	0x43, 0x45, 0x4c, 0x4c, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x41, 0x56, 0x41, 0x49, 0x4c, 0x41, 0x42,
	0x4c, 0x45, 0x10, 0x00, 0x12, 0x42, 0x0a, 0x3e, 0x43, 0x41, 0x55, 0x53, 0x45, 0x5f, 0x52, 0x41,
	0x44, 0x49, 0x4f, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x4c, 0x41, 0x59, 0x45,
	0x52, 0x5f, 0x48, 0x41, 0x4e, 0x44, 0x4f, 0x56, 0x45, 0x52, 0x5f, 0x44, 0x45, 0x53, 0x49, 0x52,
	0x41, 0x42, 0x4c, 0x45, 0x5f, 0x46, 0x4f, 0x52, 0x5f, 0x52, 0x41, 0x44, 0x49, 0x4f, 0x5f, 0x52,
	0x45, 0x41, 0x53, 0x4f, 0x4e, 0x53, 0x10, 0x01, 0x12, 0x39, 0x0a, 0x35, 0x43, 0x41, 0x55, 0x53,
	0x45, 0x5f, 0x52, 0x41, 0x44, 0x49, 0x4f, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f,
	0x4c, 0x41, 0x59, 0x45, 0x52, 0x5f, 0x48, 0x41, 0x4e, 0x44, 0x4f, 0x56, 0x45, 0x52, 0x5f, 0x54,
	0x41, 0x52, 0x47, 0x45, 0x54, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x41, 0x4c, 0x4c, 0x4f, 0x57, 0x45,
	0x44, 0x10, 0x02, 0x12, 0x30, 0x0a, 0x2c, 0x43, 0x41, 0x55, 0x53, 0x45, 0x5f, 0x52, 0x41, 0x44,
	0x49, 0x4f, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x4c, 0x41, 0x59, 0x45, 0x52,
	0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x41, 0x4d, 0x46, 0x5f, 0x53, 0x45, 0x54,
	0x5f, 0x49, 0x44, 0x10, 0x03, 0x12, 0x49, 0x0a, 0x45, 0x43, 0x41, 0x55, 0x53, 0x45, 0x5f, 0x52,
	0x41, 0x44, 0x49, 0x4f, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x4c, 0x41, 0x59,
	0x45, 0x52, 0x5f, 0x4e, 0x4f, 0x5f, 0x52, 0x41, 0x44, 0x49, 0x4f, 0x5f, 0x52, 0x45, 0x53, 0x4f,
	0x55, 0x52, 0x43, 0x45, 0x53, 0x5f, 0x41, 0x56, 0x41, 0x49, 0x4c, 0x41, 0x42, 0x4c, 0x45, 0x5f,
	0x49, 0x4e, 0x5f, 0x54, 0x41, 0x52, 0x47, 0x45, 0x54, 0x5f, 0x43, 0x45, 0x4c, 0x4c, 0x10, 0x04,
	0x12, 0x2e, 0x0a, 0x2a, 0x43, 0x41, 0x55, 0x53, 0x45, 0x5f, 0x52, 0x41, 0x44, 0x49, 0x4f, 0x5f,
	0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x5f, 0x50, 0x41,
	0x52, 0x54, 0x49, 0x41, 0x4c, 0x5f, 0x48, 0x41, 0x4e, 0x44, 0x4f, 0x56, 0x45, 0x52, 0x10, 0x05,
	0x12, 0x39, 0x0a, 0x35, 0x43, 0x41, 0x55, 0x53, 0x45, 0x5f, 0x52, 0x41, 0x44, 0x49, 0x4f, 0x5f,
	0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x5f, 0x52, 0x45,
	0x44, 0x55, 0x43, 0x45, 0x5f, 0x4c, 0x4f, 0x41, 0x44, 0x5f, 0x49, 0x4e, 0x5f, 0x53, 0x45, 0x52,
	0x56, 0x49, 0x4e, 0x47, 0x5f, 0x43, 0x45, 0x4c, 0x4c, 0x10, 0x06, 0x12, 0x3c, 0x0a, 0x38, 0x43,
	0x41, 0x55, 0x53, 0x45, 0x5f, 0x52, 0x41, 0x44, 0x49, 0x4f, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f,
	0x52, 0x4b, 0x5f, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43,
	0x45, 0x5f, 0x4f, 0x50, 0x54, 0x49, 0x4d, 0x49, 0x53, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x48,
	0x41, 0x4e, 0x44, 0x4f, 0x56, 0x45, 0x52, 0x10, 0x07, 0x12, 0x34, 0x0a, 0x30, 0x43, 0x41, 0x55,
	0x53, 0x45, 0x5f, 0x52, 0x41, 0x44, 0x49, 0x4f, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b,
	0x5f, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x43, 0x52, 0x49, 0x54,
	0x49, 0x43, 0x41, 0x4c, 0x5f, 0x48, 0x41, 0x4e, 0x44, 0x4f, 0x56, 0x45, 0x52, 0x10, 0x08, 0x12,
	0x36, 0x0a, 0x32, 0x43, 0x41, 0x55, 0x53, 0x45, 0x5f, 0x52, 0x41, 0x44, 0x49, 0x4f, 0x5f, 0x4e,
	0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x5f, 0x54, 0x5f, 0x58,
	0x4e, 0x5f, 0x52, 0x45, 0x4c, 0x4f, 0x43, 0x4f, 0x56, 0x45, 0x52, 0x41, 0x4c, 0x4c, 0x5f, 0x45,
	0x58, 0x50, 0x49, 0x52, 0x59, 0x10, 0x09, 0x12, 0x33, 0x0a, 0x2f, 0x43, 0x41, 0x55, 0x53, 0x45,
	0x5f, 0x52, 0x41, 0x44, 0x49, 0x4f, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x4c,
	0x41, 0x59, 0x45, 0x52, 0x5f, 0x54, 0x5f, 0x58, 0x4e, 0x5f, 0x52, 0x45, 0x4c, 0x4f, 0x43, 0x50,
	0x52, 0x45, 0x50, 0x5f, 0x45, 0x58, 0x50, 0x49, 0x52, 0x59, 0x10, 0x0a, 0x12, 0x2e, 0x0a, 0x2a,
	0x43, 0x41, 0x55, 0x53, 0x45, 0x5f, 0x52, 0x41, 0x44, 0x49, 0x4f, 0x5f, 0x4e, 0x45, 0x54, 0x57,
	0x4f, 0x52, 0x4b, 0x5f, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57,
	0x4e, 0x5f, 0x47, 0x55, 0x41, 0x4d, 0x49, 0x5f, 0x49, 0x44, 0x10, 0x0b, 0x12, 0x43, 0x0a, 0x3f,
	0x43, 0x41, 0x55, 0x53, 0x45, 0x5f, 0x52, 0x41, 0x44, 0x49, 0x4f, 0x5f, 0x4e, 0x45, 0x54, 0x57,
	0x4f, 0x52, 0x4b, 0x5f, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57,
	0x4e, 0x5f, 0x4c, 0x4f, 0x43, 0x41, 0x4c, 0x5f, 0x4e, 0x47, 0x5f, 0x52, 0x41, 0x4e, 0x5f, 0x4e,
	0x4f, 0x44, 0x45, 0x5f, 0x55, 0x45, 0x5f, 0x58, 0x4e, 0x5f, 0x41, 0x50, 0x5f, 0x49, 0x44, 0x10,
	0x0c, 0x12, 0x49, 0x0a, 0x45, 0x43, 0x41, 0x55, 0x53, 0x45, 0x5f, 0x52, 0x41, 0x44, 0x49, 0x4f,
	0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x5f, 0x49,
	0x4e, 0x43, 0x4f, 0x4e, 0x53, 0x49, 0x53, 0x54, 0x45, 0x4e, 0x54, 0x5f, 0x52, 0x45, 0x4d, 0x4f,
	0x54, 0x45, 0x5f, 0x4e, 0x47, 0x5f, 0x52, 0x41, 0x4e, 0x5f, 0x4e, 0x4f, 0x44, 0x45, 0x5f, 0x55,
	0x45, 0x5f, 0x58, 0x4e, 0x5f, 0x41, 0x50, 0x5f, 0x49, 0x44, 0x10, 0x0d, 0x12, 0x5d, 0x0a, 0x59,
	0x43, 0x41, 0x55, 0x53, 0x45, 0x5f, 0x52, 0x41, 0x44, 0x49, 0x4f, 0x5f, 0x4e, 0x45, 0x54, 0x57,
	0x4f, 0x52, 0x4b, 0x5f, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x5f, 0x45, 0x4e, 0x43, 0x52, 0x59, 0x50,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x4e, 0x44, 0x5f, 0x4f, 0x52, 0x5f, 0x49, 0x4e, 0x54, 0x45,
	0x47, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x41, 0x4c, 0x47, 0x4f, 0x52, 0x49, 0x54, 0x48, 0x4d, 0x53, 0x5f, 0x4e, 0x4f, 0x54, 0x5f,
	0x53, 0x55, 0x50, 0x50, 0x4f, 0x52, 0x54, 0x45, 0x44, 0x10, 0x0e, 0x12, 0x41, 0x0a, 0x3d, 0x43,
	0x41, 0x55, 0x53, 0x45, 0x5f, 0x52, 0x41, 0x44, 0x49, 0x4f, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f,
	0x52, 0x4b, 0x5f, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x45, 0x43, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x4c, 0x47, 0x4f, 0x52, 0x49, 0x54, 0x48, 0x4d, 0x53, 0x5f, 0x4e,
	0x4f, 0x54, 0x5f, 0x53, 0x55, 0x50, 0x50, 0x4f, 0x52, 0x54, 0x45, 0x44, 0x10, 0x0f, 0x12, 0x3f,
	0x0a, 0x3b, 0x43, 0x41, 0x55, 0x53, 0x45, 0x5f, 0x52, 0x41, 0x44, 0x49, 0x4f, 0x5f, 0x4e, 0x45,
	0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x5f, 0x4d, 0x55, 0x4c, 0x54,
	0x49, 0x50, 0x4c, 0x45, 0x5f, 0x50, 0x44, 0x55, 0x5f, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e,
	0x5f, 0x49, 0x44, 0x5f, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x53, 0x10, 0x10, 0x12,
	0x34, 0x0a, 0x30, 0x43, 0x41, 0x55, 0x53, 0x45, 0x5f, 0x52, 0x41, 0x44, 0x49, 0x4f, 0x5f, 0x4e,
	0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x5f, 0x55, 0x4e, 0x4b,
	0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x50, 0x44, 0x55, 0x5f, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e,
	0x5f, 0x49, 0x44, 0x10, 0x11, 0x12, 0x32, 0x0a, 0x2e, 0x43, 0x41, 0x55, 0x53, 0x45, 0x5f, 0x52,
	0x41, 0x44, 0x49, 0x4f, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x4c, 0x41, 0x59,
	0x45, 0x52, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x51, 0x4f, 0x5f, 0x53, 0x5f,
	0x46, 0x4c, 0x4f, 0x57, 0x5f, 0x49, 0x44, 0x10, 0x12, 0x12, 0x3d, 0x0a, 0x39, 0x43, 0x41, 0x55,
	0x53, 0x45, 0x5f, 0x52, 0x41, 0x44, 0x49, 0x4f, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b,
	0x5f, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x5f, 0x4d, 0x55, 0x4c, 0x54, 0x49, 0x50, 0x4c, 0x45, 0x5f,
	0x51, 0x4f, 0x5f, 0x53, 0x5f, 0x46, 0x4c, 0x4f, 0x57, 0x5f, 0x49, 0x44, 0x5f, 0x49, 0x4e, 0x53,
	0x54, 0x41, 0x4e, 0x43, 0x45, 0x53, 0x10, 0x13, 0x12, 0x30, 0x0a, 0x2c, 0x43, 0x41, 0x55, 0x53,
	0x45, 0x5f, 0x52, 0x41, 0x44, 0x49, 0x4f, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f,
	0x4c, 0x41, 0x59, 0x45, 0x52, 0x5f, 0x53, 0x57, 0x49, 0x54, 0x43, 0x48, 0x5f, 0x4f, 0x46, 0x46,
	0x5f, 0x4f, 0x4e, 0x47, 0x4f, 0x49, 0x4e, 0x47, 0x10, 0x14, 0x12, 0x36, 0x0a, 0x32, 0x43, 0x41,
	0x55, 0x53, 0x45, 0x5f, 0x52, 0x41, 0x44, 0x49, 0x4f, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52,
	0x4b, 0x5f, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x53, 0x55, 0x50, 0x50,
	0x4f, 0x52, 0x54, 0x45, 0x44, 0x5f, 0x35, 0x5f, 0x51, 0x49, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45,
	0x10, 0x15, 0x12, 0x33, 0x0a, 0x2f, 0x43, 0x41, 0x55, 0x53, 0x45, 0x5f, 0x52, 0x41, 0x44, 0x49,
	0x4f, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x5f,
	0x54, 0x5f, 0x58, 0x4e, 0x5f, 0x44, 0x43, 0x4f, 0x56, 0x45, 0x52, 0x41, 0x4c, 0x4c, 0x5f, 0x45,
	0x58, 0x50, 0x49, 0x52, 0x59, 0x10, 0x16, 0x12, 0x30, 0x0a, 0x2c, 0x43, 0x41, 0x55, 0x53, 0x45,
	0x5f, 0x52, 0x41, 0x44, 0x49, 0x4f, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x4c,
	0x41, 0x59, 0x45, 0x52, 0x5f, 0x54, 0x5f, 0x58, 0x4e, 0x5f, 0x44, 0x43, 0x50, 0x52, 0x45, 0x50,
	0x5f, 0x45, 0x58, 0x50, 0x49, 0x52, 0x59, 0x10, 0x17, 0x12, 0x40, 0x0a, 0x3c, 0x43, 0x41, 0x55,
	0x53, 0x45, 0x5f, 0x52, 0x41, 0x44, 0x49, 0x4f, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b,
	0x5f, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x45,
	0x53, 0x49, 0x52, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x46, 0x4f, 0x52, 0x5f, 0x52, 0x41, 0x44, 0x49,
	0x4f, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x53, 0x10, 0x18, 0x12, 0x29, 0x0a, 0x25, 0x43,
	0x41, 0x55, 0x53, 0x45, 0x5f, 0x52, 0x41, 0x44, 0x49, 0x4f, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f,
	0x52, 0x4b, 0x5f, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x5f, 0x52, 0x45, 0x44, 0x55, 0x43, 0x45, 0x5f,
	0x4c, 0x4f, 0x41, 0x44, 0x10, 0x19, 0x12, 0x33, 0x0a, 0x2f, 0x43, 0x41, 0x55, 0x53, 0x45, 0x5f,
	0x52, 0x41, 0x44, 0x49, 0x4f, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x4c, 0x41,
	0x59, 0x45, 0x52, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x4f, 0x50, 0x54,
	0x49, 0x4d, 0x49, 0x53, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x1a, 0x12, 0x32, 0x0a, 0x2e, 0x43,
	0x41, 0x55, 0x53, 0x45, 0x5f, 0x52, 0x41, 0x44, 0x49, 0x4f, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f,
	0x52, 0x4b, 0x5f, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x43, 0x52,
	0x49, 0x54, 0x49, 0x43, 0x41, 0x4c, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x1b, 0x12,
	0x30, 0x0a, 0x2c, 0x43, 0x41, 0x55, 0x53, 0x45, 0x5f, 0x52, 0x41, 0x44, 0x49, 0x4f, 0x5f, 0x4e,
	0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x5f, 0x54, 0x41, 0x52,
	0x47, 0x45, 0x54, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x41, 0x4c, 0x4c, 0x4f, 0x57, 0x45, 0x44, 0x10,
	0x1c, 0x12, 0x3a, 0x0a, 0x36, 0x43, 0x41, 0x55, 0x53, 0x45, 0x5f, 0x52, 0x41, 0x44, 0x49, 0x4f,
	0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x5f, 0x4e,
	0x4f, 0x5f, 0x52, 0x41, 0x44, 0x49, 0x4f, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45,
	0x53, 0x5f, 0x41, 0x56, 0x41, 0x49, 0x4c, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x1d, 0x12, 0x36, 0x0a,
	0x32, 0x43, 0x41, 0x55, 0x53, 0x45, 0x5f, 0x52, 0x41, 0x44, 0x49, 0x4f, 0x5f, 0x4e, 0x45, 0x54,
	0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c,
	0x49, 0x44, 0x5f, 0x51, 0x4f, 0x5f, 0x53, 0x5f, 0x43, 0x4f, 0x4d, 0x42, 0x49, 0x4e, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x10, 0x1e, 0x12, 0x41, 0x0a, 0x3d, 0x43, 0x41, 0x55, 0x53, 0x45, 0x5f, 0x52,
	0x41, 0x44, 0x49, 0x4f, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x4c, 0x41, 0x59,
	0x45, 0x52, 0x5f, 0x45, 0x4e, 0x43, 0x52, 0x59, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x4c,
	0x47, 0x4f, 0x52, 0x49, 0x54, 0x48, 0x4d, 0x53, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x53, 0x55, 0x50,
	0x50, 0x4f, 0x52, 0x54, 0x45, 0x44, 0x10, 0x1f, 0x12, 0x31, 0x0a, 0x2d, 0x43, 0x41, 0x55, 0x53,
	0x45, 0x5f, 0x52, 0x41, 0x44, 0x49, 0x4f, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f,
	0x4c, 0x41, 0x59, 0x45, 0x52, 0x5f, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x44, 0x55, 0x52, 0x45, 0x5f,
	0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x4c, 0x45, 0x44, 0x10, 0x20, 0x12, 0x2a, 0x0a, 0x26, 0x43,
	0x41, 0x55, 0x53, 0x45, 0x5f, 0x52, 0x41, 0x44, 0x49, 0x4f, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f,
	0x52, 0x4b, 0x5f, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x5f, 0x52, 0x5f, 0x52, 0x4d, 0x5f, 0x50, 0x55,
	0x52, 0x50, 0x4f, 0x53, 0x45, 0x10, 0x21, 0x12, 0x33, 0x0a, 0x2f, 0x43, 0x41, 0x55, 0x53, 0x45,
	0x5f, 0x52, 0x41, 0x44, 0x49, 0x4f, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x4c,
	0x41, 0x59, 0x45, 0x52, 0x5f, 0x49, 0x4d, 0x50, 0x52, 0x4f, 0x56, 0x45, 0x5f, 0x55, 0x53, 0x45,
	0x52, 0x5f, 0x42, 0x49, 0x54, 0x5f, 0x52, 0x41, 0x54, 0x45, 0x10, 0x22, 0x12, 0x2d, 0x0a, 0x29,
	0x43, 0x41, 0x55, 0x53, 0x45, 0x5f, 0x52, 0x41, 0x44, 0x49, 0x4f, 0x5f, 0x4e, 0x45, 0x54, 0x57,
	0x4f, 0x52, 0x4b, 0x5f, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x49,
	0x4e, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x10, 0x23, 0x12, 0x3b, 0x0a, 0x37, 0x43,
	0x41, 0x55, 0x53, 0x45, 0x5f, 0x52, 0x41, 0x44, 0x49, 0x4f, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f,
	0x52, 0x4b, 0x5f, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x5f, 0x52, 0x41, 0x44, 0x49, 0x4f, 0x5f, 0x43,
	0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x55,
	0x45, 0x5f, 0x4c, 0x4f, 0x53, 0x54, 0x10, 0x24, 0x12, 0x46, 0x0a, 0x42, 0x43, 0x41, 0x55, 0x53,
	0x45, 0x5f, 0x52, 0x41, 0x44, 0x49, 0x4f, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f,
	0x4c, 0x41, 0x59, 0x45, 0x52, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x5f, 0x49, 0x4e,
	0x5f, 0x54, 0x48, 0x45, 0x5f, 0x52, 0x41, 0x44, 0x49, 0x4f, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52,
	0x46, 0x41, 0x43, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x44, 0x55, 0x52, 0x45, 0x10, 0x25,
	0x12, 0x39, 0x0a, 0x35, 0x43, 0x41, 0x55, 0x53, 0x45, 0x5f, 0x52, 0x41, 0x44, 0x49, 0x4f, 0x5f,
	0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x5f, 0x42, 0x45,
	0x41, 0x52, 0x45, 0x52, 0x5f, 0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4e, 0x4f, 0x54, 0x5f,
	0x53, 0x55, 0x50, 0x50, 0x4f, 0x52, 0x54, 0x45, 0x44, 0x10, 0x26, 0x12, 0x42, 0x0a, 0x3e, 0x43,
	0x41, 0x55, 0x53, 0x45, 0x5f, 0x52, 0x41, 0x44, 0x49, 0x4f, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f,
	0x52, 0x4b, 0x5f, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x5f, 0x55, 0x50, 0x5f, 0x49, 0x4e, 0x54, 0x45,
	0x47, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x50, 0x4f, 0x53, 0x53, 0x49, 0x42, 0x4c, 0x45, 0x10, 0x27, 0x12,
	0x48, 0x0a, 0x44, 0x43, 0x41, 0x55, 0x53, 0x45, 0x5f, 0x52, 0x41, 0x44, 0x49, 0x4f, 0x5f, 0x4e,
	0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x5f, 0x55, 0x50, 0x5f,
	0x43, 0x4f, 0x4e, 0x46, 0x49, 0x44, 0x45, 0x4e, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x54, 0x59, 0x5f,
	0x50, 0x52, 0x4f, 0x54, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x50,
	0x4f, 0x53, 0x53, 0x49, 0x42, 0x4c, 0x45, 0x10, 0x28, 0x12, 0x45, 0x0a, 0x41, 0x43, 0x41, 0x55,
	0x53, 0x45, 0x5f, 0x52, 0x41, 0x44, 0x49, 0x4f, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b,
	0x5f, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x53,
	0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x41, 0x56, 0x41, 0x49, 0x4c, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x46,
	0x4f, 0x52, 0x5f, 0x54, 0x48, 0x45, 0x5f, 0x53, 0x4c, 0x49, 0x43, 0x45, 0x5f, 0x53, 0x10, 0x29,
	0x12, 0x38, 0x0a, 0x34, 0x43, 0x41, 0x55, 0x53, 0x45, 0x5f, 0x52, 0x41, 0x44, 0x49, 0x4f, 0x5f,
	0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x5f, 0x55, 0x45,
	0x5f, 0x4d, 0x41, 0x58, 0x5f, 0x49, 0x50, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x52, 0x41, 0x54,
	0x45, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x10, 0x2a, 0x12, 0x3e, 0x0a, 0x3a, 0x43, 0x41,
	0x55, 0x53, 0x45, 0x5f, 0x52, 0x41, 0x44, 0x49, 0x4f, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52,
	0x4b, 0x5f, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x5f, 0x43, 0x5f, 0x50, 0x5f, 0x49, 0x4e, 0x54, 0x45,
	0x47, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x10, 0x2b, 0x12, 0x3e, 0x0a, 0x3a, 0x43, 0x41,
	0x55, 0x53, 0x45, 0x5f, 0x52, 0x41, 0x44, 0x49, 0x4f, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52,
	0x4b, 0x5f, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x5f, 0x55, 0x5f, 0x50, 0x5f, 0x49, 0x4e, 0x54, 0x45,
	0x47, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x10, 0x2c, 0x12, 0x3b, 0x0a, 0x37, 0x43, 0x41,
	0x55, 0x53, 0x45, 0x5f, 0x52, 0x41, 0x44, 0x49, 0x4f, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52,
	0x4b, 0x5f, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x5f, 0x53, 0x4c, 0x49, 0x43, 0x45, 0x5f, 0x4e, 0x4f,
	0x54, 0x5f, 0x53, 0x55, 0x50, 0x50, 0x4f, 0x52, 0x54, 0x45, 0x44, 0x5f, 0x42, 0x59, 0x5f, 0x4e,
	0x47, 0x5f, 0x52, 0x41, 0x4e, 0x10, 0x2d, 0x12, 0x2a, 0x0a, 0x26, 0x43, 0x41, 0x55, 0x53, 0x45,
	0x5f, 0x52, 0x41, 0x44, 0x49, 0x4f, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x4c,
	0x41, 0x59, 0x45, 0x52, 0x5f, 0x4d, 0x5f, 0x4e, 0x5f, 0x4d, 0x4f, 0x42, 0x49, 0x4c, 0x49, 0x54,
	0x59, 0x10, 0x2e, 0x12, 0x2a, 0x0a, 0x26, 0x43, 0x41, 0x55, 0x53, 0x45, 0x5f, 0x52, 0x41, 0x44,
	0x49, 0x4f, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x4c, 0x41, 0x59, 0x45, 0x52,
	0x5f, 0x53, 0x5f, 0x4e, 0x5f, 0x4d, 0x4f, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x10, 0x2f, 0x12,
	0x35, 0x0a, 0x31, 0x43, 0x41, 0x55, 0x53, 0x45, 0x5f, 0x52, 0x41, 0x44, 0x49, 0x4f, 0x5f, 0x4e,
	0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x5f, 0x43, 0x4f, 0x55,
	0x4e, 0x54, 0x5f, 0x52, 0x45, 0x41, 0x43, 0x48, 0x45, 0x53, 0x5f, 0x4d, 0x41, 0x58, 0x5f, 0x56,
	0x41, 0x4c, 0x55, 0x45, 0x10, 0x30, 0x12, 0x41, 0x0a, 0x3d, 0x43, 0x41, 0x55, 0x53, 0x45, 0x5f,
	0x52, 0x41, 0x44, 0x49, 0x4f, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x4c, 0x41,
	0x59, 0x45, 0x52, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x4f, 0x4c, 0x44, 0x5f,
	0x4e, 0x47, 0x5f, 0x52, 0x41, 0x4e, 0x5f, 0x4e, 0x4f, 0x44, 0x45, 0x5f, 0x55, 0x45, 0x5f, 0x58,
	0x4e, 0x5f, 0x41, 0x50, 0x5f, 0x49, 0x44, 0x10, 0x31, 0x12, 0x2c, 0x0a, 0x28, 0x43, 0x41, 0x55,
	0x53, 0x45, 0x5f, 0x52, 0x41, 0x44, 0x49, 0x4f, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b,
	0x5f, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x5f, 0x50, 0x5f, 0x44, 0x43, 0x50, 0x5f, 0x4f, 0x56, 0x45,
	0x52, 0x4c, 0x4f, 0x41, 0x44, 0x10, 0x32, 0x12, 0x32, 0x0a, 0x2e, 0x43, 0x41, 0x55, 0x53, 0x45,
	0x5f, 0x52, 0x41, 0x44, 0x49, 0x4f, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x4c,
	0x41, 0x59, 0x45, 0x52, 0x5f, 0x44, 0x52, 0x42, 0x5f, 0x49, 0x44, 0x5f, 0x4e, 0x4f, 0x54, 0x5f,
	0x41, 0x56, 0x41, 0x49, 0x4c, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x33, 0x12, 0x29, 0x0a, 0x25, 0x43,
	0x41, 0x55, 0x53, 0x45, 0x5f, 0x52, 0x41, 0x44, 0x49, 0x4f, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f,
	0x52, 0x4b, 0x5f, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49,
	0x46, 0x49, 0x45, 0x44, 0x10, 0x34, 0x12, 0x35, 0x0a, 0x31, 0x43, 0x41, 0x55, 0x53, 0x45, 0x5f,
	0x52, 0x41, 0x44, 0x49, 0x4f, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x4c, 0x41,
	0x59, 0x45, 0x52, 0x5f, 0x55, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x45, 0x58, 0x54, 0x5f, 0x49,
	0x44, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x35, 0x12, 0x37, 0x0a,
	0x33, 0x43, 0x41, 0x55, 0x53, 0x45, 0x5f, 0x52, 0x41, 0x44, 0x49, 0x4f, 0x5f, 0x4e, 0x45, 0x54,
	0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x5f, 0x4e, 0x4f, 0x4e, 0x5f, 0x52,
	0x45, 0x4c, 0x4f, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4f, 0x46, 0x5f, 0x43, 0x4f, 0x4e,
	0x54, 0x45, 0x58, 0x54, 0x10, 0x36, 0x12, 0x3b, 0x0a, 0x37, 0x43, 0x41, 0x55, 0x53, 0x45, 0x5f,
	0x52, 0x41, 0x44, 0x49, 0x4f, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x4c, 0x41,
	0x59, 0x45, 0x52, 0x5f, 0x43, 0x48, 0x4f, 0x5f, 0x43, 0x50, 0x43, 0x5f, 0x52, 0x45, 0x53, 0x4f,
	0x55, 0x52, 0x43, 0x45, 0x53, 0x5f, 0x54, 0x4f, 0x42, 0x45, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45,
	0x44, 0x10, 0x37, 0x12, 0x3b, 0x0a, 0x37, 0x43, 0x41, 0x55, 0x53, 0x45, 0x5f, 0x52, 0x41, 0x44,
	0x49, 0x4f, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x4c, 0x41, 0x59, 0x45, 0x52,
	0x5f, 0x52, 0x5f, 0x53, 0x4e, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x41, 0x56, 0x41, 0x49, 0x4c, 0x41,
	0x42, 0x4c, 0x45, 0x5f, 0x46, 0x4f, 0x52, 0x5f, 0x54, 0x48, 0x45, 0x5f, 0x55, 0x50, 0x10, 0x38,
	0x12, 0x2f, 0x0a, 0x2b, 0x43, 0x41, 0x55, 0x53, 0x45, 0x5f, 0x52, 0x41, 0x44, 0x49, 0x4f, 0x5f,
	0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x5f, 0x4e, 0x50,
	0x4e, 0x5f, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x44, 0x45, 0x4e, 0x49, 0x45, 0x44, 0x10,
	0x39, 0x12, 0x3a, 0x0a, 0x36, 0x43, 0x41, 0x55, 0x53, 0x45, 0x5f, 0x52, 0x41, 0x44, 0x49, 0x4f,
	0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x5f, 0x52,
	0x45, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x43, 0x48, 0x41, 0x52, 0x41, 0x43, 0x54, 0x45, 0x52, 0x49,
	0x53, 0x54, 0x49, 0x43, 0x53, 0x5f, 0x45, 0x4d, 0x50, 0x54, 0x59, 0x10, 0x3a, 0x12, 0x35, 0x0a,
	0x31, 0x43, 0x41, 0x55, 0x53, 0x45, 0x5f, 0x52, 0x41, 0x44, 0x49, 0x4f, 0x5f, 0x4e, 0x45, 0x54,
	0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x5f, 0x45, 0x58, 0x49, 0x53, 0x54,
	0x49, 0x4e, 0x47, 0x5f, 0x4d, 0x45, 0x41, 0x53, 0x55, 0x52, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f,
	0x49, 0x44, 0x10, 0x3b, 0x12, 0x43, 0x0a, 0x3f, 0x43, 0x41, 0x55, 0x53, 0x45, 0x5f, 0x52, 0x41,
	0x44, 0x49, 0x4f, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x4c, 0x41, 0x59, 0x45,
	0x52, 0x5f, 0x4d, 0x45, 0x41, 0x53, 0x55, 0x52, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x45,
	0x4d, 0x50, 0x4f, 0x52, 0x41, 0x52, 0x49, 0x4c, 0x59, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x41, 0x56,
	0x41, 0x49, 0x4c, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x3c, 0x12, 0x46, 0x0a, 0x42, 0x43, 0x41, 0x55,
	0x53, 0x45, 0x5f, 0x52, 0x41, 0x44, 0x49, 0x4f, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b,
	0x5f, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x5f, 0x4d, 0x45, 0x41, 0x53, 0x55, 0x52, 0x45, 0x4d, 0x45,
	0x4e, 0x54, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x53, 0x55, 0x50, 0x50, 0x4f, 0x52, 0x54, 0x45, 0x44,
	0x5f, 0x46, 0x4f, 0x52, 0x5f, 0x54, 0x48, 0x45, 0x5f, 0x4f, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x10,
	0x3d, 0x12, 0x2d, 0x0a, 0x29, 0x43, 0x41, 0x55, 0x53, 0x45, 0x5f, 0x52, 0x41, 0x44, 0x49, 0x4f,
	0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x5f, 0x55,
	0x45, 0x5f, 0x50, 0x4f, 0x57, 0x45, 0x52, 0x5f, 0x53, 0x41, 0x56, 0x49, 0x4e, 0x47, 0x10, 0x3e,
	0x12, 0x41, 0x0a, 0x3d, 0x43, 0x41, 0x55, 0x53, 0x45, 0x5f, 0x52, 0x41, 0x44, 0x49, 0x4f, 0x5f,
	0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x5f, 0x55, 0x4e,
	0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x4e, 0x47, 0x5f, 0x52, 0x41, 0x4e, 0x5f, 0x4e, 0x4f, 0x44,
	0x45, 0x32, 0x5f, 0x4d, 0x45, 0x41, 0x53, 0x55, 0x52, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x49,
	0x44, 0x10, 0x3f, 0x12, 0x3a, 0x0a, 0x36, 0x43, 0x41, 0x55, 0x53, 0x45, 0x5f, 0x52, 0x41, 0x44,
	0x49, 0x4f, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x4c, 0x41, 0x59, 0x45, 0x52,
	0x5f, 0x49, 0x4e, 0x53, 0x55, 0x46, 0x46, 0x49, 0x43, 0x49, 0x45, 0x4e, 0x54, 0x5f, 0x55, 0x45,
	0x5f, 0x43, 0x41, 0x50, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x49, 0x45, 0x53, 0x10, 0x40, 0x12,
	0x2c, 0x0a, 0x28, 0x43, 0x41, 0x55, 0x53, 0x45, 0x5f, 0x52, 0x41, 0x44, 0x49, 0x4f, 0x5f, 0x4e,
	0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x5f, 0x4e, 0x4f, 0x52,
	0x4d, 0x41, 0x4c, 0x5f, 0x52, 0x45, 0x4c, 0x45, 0x41, 0x53, 0x45, 0x10, 0x41, 0x12, 0x38, 0x0a,
	0x34, 0x43, 0x41, 0x55, 0x53, 0x45, 0x5f, 0x52, 0x41, 0x44, 0x49, 0x4f, 0x5f, 0x4e, 0x45, 0x54,
	0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45,
	0x5f, 0x4f, 0x55, 0x54, 0x5f, 0x4f, 0x46, 0x5f, 0x41, 0x4c, 0x4c, 0x4f, 0x57, 0x45, 0x44, 0x5f,
	0x52, 0x41, 0x4e, 0x47, 0x45, 0x10, 0x42, 0x2a, 0x76, 0x0a, 0x13, 0x43, 0x61, 0x75, 0x73, 0x65,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x12, 0x38,
	0x0a, 0x34, 0x43, 0x41, 0x55, 0x53, 0x45, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x50, 0x4f, 0x52,
	0x54, 0x5f, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x50, 0x4f, 0x52,
	0x54, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x55, 0x4e, 0x41, 0x56, 0x41,
	0x49, 0x4c, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x00, 0x12, 0x25, 0x0a, 0x21, 0x43, 0x41, 0x55, 0x53,
	0x45, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x4c, 0x41, 0x59, 0x45,
	0x52, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x01, 0x2a,
	0xee, 0x02, 0x0a, 0x0d, 0x43, 0x61, 0x75, 0x73, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x12, 0x28, 0x0a, 0x24, 0x43, 0x41, 0x55, 0x53, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f,
	0x43, 0x4f, 0x4c, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x46, 0x45, 0x52, 0x5f, 0x53, 0x59, 0x4e,
	0x54, 0x41, 0x58, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x00, 0x12, 0x2f, 0x0a, 0x2b, 0x43,
	0x41, 0x55, 0x53, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x5f, 0x41, 0x42,
	0x53, 0x54, 0x52, 0x41, 0x43, 0x54, 0x5f, 0x53, 0x59, 0x4e, 0x54, 0x41, 0x58, 0x5f, 0x45, 0x52,
	0x52, 0x4f, 0x52, 0x5f, 0x52, 0x45, 0x4a, 0x45, 0x43, 0x54, 0x10, 0x01, 0x12, 0x3a, 0x0a, 0x36,
	0x43, 0x41, 0x55, 0x53, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x5f, 0x41,
	0x42, 0x53, 0x54, 0x52, 0x41, 0x43, 0x54, 0x5f, 0x53, 0x59, 0x4e, 0x54, 0x41, 0x58, 0x5f, 0x45,
	0x52, 0x52, 0x4f, 0x52, 0x5f, 0x49, 0x47, 0x4e, 0x4f, 0x52, 0x45, 0x5f, 0x41, 0x4e, 0x44, 0x5f,
	0x4e, 0x4f, 0x54, 0x49, 0x46, 0x59, 0x10, 0x02, 0x12, 0x3d, 0x0a, 0x39, 0x43, 0x41, 0x55, 0x53,
	0x45, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41,
	0x47, 0x45, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x41, 0x54, 0x49, 0x42, 0x4c,
	0x45, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x52, 0x45, 0x43, 0x45, 0x49, 0x56, 0x45, 0x52, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x45, 0x10, 0x03, 0x12, 0x21, 0x0a, 0x1d, 0x43, 0x41, 0x55, 0x53, 0x45,
	0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x5f, 0x53, 0x45, 0x4d, 0x41, 0x4e, 0x54,
	0x49, 0x43, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x04, 0x12, 0x44, 0x0a, 0x40, 0x43, 0x41,
	0x55, 0x53, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x5f, 0x41, 0x42, 0x53,
	0x54, 0x52, 0x41, 0x43, 0x54, 0x5f, 0x53, 0x59, 0x4e, 0x54, 0x41, 0x58, 0x5f, 0x45, 0x52, 0x52,
	0x4f, 0x52, 0x5f, 0x46, 0x41, 0x4c, 0x53, 0x45, 0x4c, 0x59, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x54,
	0x52, 0x55, 0x43, 0x54, 0x45, 0x44, 0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x10, 0x05,
	0x12, 0x1e, 0x0a, 0x1a, 0x43, 0x41, 0x55, 0x53, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43,
	0x4f, 0x4c, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x06,
	0x2a, 0xd4, 0x01, 0x0a, 0x09, 0x43, 0x61, 0x75, 0x73, 0x65, 0x4d, 0x69, 0x73, 0x63, 0x12, 0x2a,
	0x0a, 0x26, 0x43, 0x41, 0x55, 0x53, 0x45, 0x5f, 0x4d, 0x49, 0x53, 0x43, 0x5f, 0x43, 0x4f, 0x4e,
	0x54, 0x52, 0x4f, 0x4c, 0x5f, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x49, 0x4e, 0x47, 0x5f,
	0x4f, 0x56, 0x45, 0x52, 0x4c, 0x4f, 0x41, 0x44, 0x10, 0x00, 0x12, 0x1f, 0x0a, 0x1b, 0x43, 0x41,
	0x55, 0x53, 0x45, 0x5f, 0x4d, 0x49, 0x53, 0x43, 0x5f, 0x48, 0x41, 0x52, 0x44, 0x57, 0x41, 0x52,
	0x45, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x10, 0x01, 0x12, 0x23, 0x0a, 0x1f, 0x43,
	0x41, 0x55, 0x53, 0x45, 0x5f, 0x4d, 0x49, 0x53, 0x43, 0x5f, 0x4f, 0x5f, 0x41, 0x4e, 0x44, 0x5f,
	0x4d, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x56, 0x45, 0x4e, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x02,
	0x12, 0x39, 0x0a, 0x35, 0x43, 0x41, 0x55, 0x53, 0x45, 0x5f, 0x4d, 0x49, 0x53, 0x43, 0x5f, 0x4e,
	0x4f, 0x54, 0x5f, 0x45, 0x4e, 0x4f, 0x55, 0x47, 0x48, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x50,
	0x4c, 0x41, 0x4e, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x49, 0x4e, 0x47, 0x5f,
	0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x53, 0x10, 0x03, 0x12, 0x1a, 0x0a, 0x16, 0x43,
	0x41, 0x55, 0x53, 0x45, 0x5f, 0x4d, 0x49, 0x53, 0x43, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43,
	0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x04, 0x2a, 0x59, 0x0a, 0x1c, 0x46, 0x75, 0x6c, 0x6c, 0x4c,
	0x69, 0x73, 0x74, 0x43, 0x65, 0x6c, 0x6c, 0x41, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x4e, 0x72, 0x12, 0x39, 0x0a, 0x35, 0x46, 0x55, 0x4c, 0x4c, 0x5f,
	0x4c, 0x49, 0x53, 0x54, 0x5f, 0x43, 0x45, 0x4c, 0x4c, 0x5f, 0x41, 0x53, 0x53, 0x49, 0x53, 0x54,
	0x41, 0x4e, 0x43, 0x45, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x4e, 0x52, 0x5f, 0x41, 0x4c, 0x4c,
	0x5f, 0x53, 0x45, 0x52, 0x56, 0x45, 0x44, 0x5f, 0x43, 0x45, 0x4c, 0x4c, 0x53, 0x5f, 0x4e, 0x52,
	0x10, 0x00, 0x2a, 0x63, 0x0a, 0x1f, 0x46, 0x75, 0x6c, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x65,
	0x6c, 0x6c, 0x41, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x45, 0x75, 0x74, 0x72, 0x61, 0x12, 0x40, 0x0a, 0x3c, 0x46, 0x55, 0x4c, 0x4c, 0x5f, 0x4c, 0x49,
	0x53, 0x54, 0x5f, 0x43, 0x45, 0x4c, 0x4c, 0x5f, 0x41, 0x53, 0x53, 0x49, 0x53, 0x54, 0x41, 0x4e,
	0x43, 0x45, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x45, 0x55, 0x54, 0x52, 0x41, 0x5f, 0x41, 0x4c,
	0x4c, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x45, 0x44, 0x5f, 0x43, 0x45, 0x4c, 0x4c, 0x53, 0x5f, 0x45,
	0x5f, 0x55, 0x54, 0x52, 0x41, 0x10, 0x00, 0x2a, 0x45, 0x0a, 0x1a, 0x43, 0x68, 0x6f, 0x4d, 0x52,
	0x64, 0x63, 0x45, 0x61, 0x72, 0x6c, 0x79, 0x44, 0x61, 0x74, 0x61, 0x46, 0x6f, 0x72, 0x77, 0x61,
	0x72, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x27, 0x0a, 0x23, 0x43, 0x48, 0x4f, 0x5f, 0x4d, 0x52, 0x44,
	0x43, 0x5f, 0x45, 0x41, 0x52, 0x4c, 0x59, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x46, 0x4f, 0x52,
	0x57, 0x41, 0x52, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x54, 0x4f, 0x50, 0x10, 0x00, 0x2a, 0x2f,
	0x0a, 0x10, 0x43, 0x68, 0x6f, 0x4d, 0x52, 0x64, 0x63, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74,
	0x6f, 0x72, 0x12, 0x1b, 0x0a, 0x17, 0x43, 0x48, 0x4f, 0x5f, 0x4d, 0x52, 0x44, 0x43, 0x5f, 0x49,
	0x4e, 0x44, 0x49, 0x43, 0x41, 0x54, 0x4f, 0x52, 0x5f, 0x54, 0x52, 0x55, 0x45, 0x10, 0x00, 0x2a,
	0x47, 0x0a, 0x0a, 0x43, 0x68, 0x6f, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x12, 0x1d, 0x0a,
	0x19, 0x43, 0x48, 0x4f, 0x54, 0x52, 0x49, 0x47, 0x47, 0x45, 0x52, 0x5f, 0x43, 0x48, 0x4f, 0x5f,
	0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x00, 0x12, 0x1a, 0x0a, 0x16,
	0x43, 0x48, 0x4f, 0x54, 0x52, 0x49, 0x47, 0x47, 0x45, 0x52, 0x5f, 0x43, 0x48, 0x4f, 0x5f, 0x52,
	0x45, 0x50, 0x4c, 0x41, 0x43, 0x45, 0x10, 0x01, 0x2a, 0x3c, 0x0a, 0x17, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x75, 0x72, 0x65, 0x64, 0x54, 0x61, 0x63, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x1d, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x55, 0x52, 0x45,
	0x44, 0x5f, 0x54, 0x41, 0x43, 0x49, 0x4e, 0x44, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x54, 0x52, 0x55, 0x45, 0x10, 0x00, 0x2a, 0x86, 0x01, 0x0a, 0x1e, 0x45, 0x6e, 0x64, 0x63, 0x73,
	0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x2f, 0x0a, 0x2b, 0x45, 0x5f, 0x4e,
	0x44, 0x43, 0x53, 0x55, 0x50, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43,
	0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x55, 0x50, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x53,
	0x55, 0x50, 0x50, 0x4f, 0x52, 0x54, 0x45, 0x44, 0x10, 0x00, 0x12, 0x33, 0x0a, 0x2f, 0x45, 0x5f,
	0x4e, 0x44, 0x43, 0x53, 0x55, 0x50, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x43, 0x4f, 0x4e, 0x4e, 0x45,
	0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x55, 0x50, 0x50, 0x4f, 0x52, 0x54, 0x5f,
	0x4e, 0x4f, 0x54, 0x5f, 0x53, 0x55, 0x50, 0x50, 0x4f, 0x52, 0x54, 0x45, 0x44, 0x10, 0x01, 0x2a,
	0x5f, 0x0a, 0x13, 0x43, 0x79, 0x63, 0x6c, 0x69, 0x63, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x45,
	0x55, 0x54, 0x72, 0x61, 0x44, 0x4c, 0x12, 0x22, 0x0a, 0x1e, 0x43, 0x59, 0x43, 0x4c, 0x49, 0x43,
	0x5f, 0x50, 0x52, 0x45, 0x46, 0x49, 0x58, 0x5f, 0x45, 0x5f, 0x55, 0x54, 0x52, 0x41, 0x5f, 0x44,
	0x4c, 0x5f, 0x4e, 0x4f, 0x52, 0x4d, 0x41, 0x4c, 0x10, 0x00, 0x12, 0x24, 0x0a, 0x20, 0x43, 0x59,
	0x43, 0x4c, 0x49, 0x43, 0x5f, 0x50, 0x52, 0x45, 0x46, 0x49, 0x58, 0x5f, 0x45, 0x5f, 0x55, 0x54,
	0x52, 0x41, 0x5f, 0x44, 0x4c, 0x5f, 0x45, 0x58, 0x54, 0x45, 0x4e, 0x44, 0x45, 0x44, 0x10, 0x01,
	0x2a, 0x5f, 0x0a, 0x13, 0x43, 0x79, 0x63, 0x6c, 0x69, 0x63, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78,
	0x45, 0x55, 0x54, 0x72, 0x61, 0x55, 0x4c, 0x12, 0x22, 0x0a, 0x1e, 0x43, 0x59, 0x43, 0x4c, 0x49,
	0x43, 0x5f, 0x50, 0x52, 0x45, 0x46, 0x49, 0x58, 0x5f, 0x45, 0x5f, 0x55, 0x54, 0x52, 0x41, 0x5f,
	0x55, 0x4c, 0x5f, 0x4e, 0x4f, 0x52, 0x4d, 0x41, 0x4c, 0x10, 0x00, 0x12, 0x24, 0x0a, 0x20, 0x43,
	0x59, 0x43, 0x4c, 0x49, 0x43, 0x5f, 0x50, 0x52, 0x45, 0x46, 0x49, 0x58, 0x5f, 0x45, 0x5f, 0x55,
	0x54, 0x52, 0x41, 0x5f, 0x55, 0x4c, 0x5f, 0x45, 0x58, 0x54, 0x45, 0x4e, 0x44, 0x45, 0x44, 0x10,
	0x01, 0x2a, 0x79, 0x0a, 0x1b, 0x43, 0x73, 0x69, 0x52, 0x53, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x2b, 0x0a, 0x27, 0x43, 0x53, 0x49, 0x5f, 0x52, 0x53, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x4d,
	0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x4e, 0x44, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x41, 0x54, 0x45, 0x44, 0x10, 0x00, 0x12, 0x2d, 0x0a,
	0x29, 0x43, 0x53, 0x49, 0x5f, 0x52, 0x53, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x4d, 0x49, 0x53, 0x53,
	0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x4e, 0x44, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x44,
	0x45, 0x41, 0x43, 0x54, 0x49, 0x56, 0x41, 0x54, 0x45, 0x44, 0x10, 0x01, 0x2a, 0x4f, 0x0a, 0x16,
	0x44, 0x61, 0x74, 0x61, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x41, 0x63,
	0x63, 0x65, 0x70, 0x74, 0x65, 0x64, 0x12, 0x35, 0x0a, 0x31, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x46,
	0x4f, 0x52, 0x57, 0x41, 0x52, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x41, 0x43, 0x43, 0x45, 0x50, 0x54,
	0x45, 0x44, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x46, 0x4f, 0x52, 0x57, 0x41, 0x52, 0x44, 0x49,
	0x4e, 0x47, 0x5f, 0x41, 0x43, 0x43, 0x45, 0x50, 0x54, 0x45, 0x44, 0x10, 0x00, 0x2a, 0x54, 0x0a,
	0x1c, 0x44, 0x61, 0x70, 0x73, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x44, 0x61,
	0x70, 0x73, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x34, 0x0a,
	0x30, 0x44, 0x41, 0x50, 0x53, 0x5f, 0x49, 0x4e, 0x44, 0x49, 0x43, 0x41, 0x54, 0x4f, 0x52, 0x5f,
	0x44, 0x41, 0x50, 0x53, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x49, 0x4e, 0x46, 0x4f,
	0x5f, 0x44, 0x41, 0x50, 0x53, 0x5f, 0x48, 0x4f, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x49, 0x52, 0x45,
	0x44, 0x10, 0x00, 0x2a, 0xb9, 0x01, 0x0a, 0x29, 0x44, 0x61, 0x70, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x44, 0x61, 0x70,
	0x73, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x49, 0x74, 0x65,
	0x6d, 0x12, 0x43, 0x0a, 0x3f, 0x44, 0x41, 0x50, 0x53, 0x5f, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e,
	0x53, 0x45, 0x5f, 0x49, 0x4e, 0x44, 0x49, 0x43, 0x41, 0x54, 0x4f, 0x52, 0x5f, 0x44, 0x41, 0x50,
	0x53, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x49,
	0x54, 0x45, 0x4d, 0x5f, 0x44, 0x41, 0x50, 0x53, 0x5f, 0x48, 0x4f, 0x5f, 0x41, 0x43, 0x43, 0x45,
	0x50, 0x54, 0x45, 0x44, 0x10, 0x00, 0x12, 0x47, 0x0a, 0x43, 0x44, 0x41, 0x50, 0x53, 0x5f, 0x52,
	0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45, 0x5f, 0x49, 0x4e, 0x44, 0x49, 0x43, 0x41, 0x54, 0x4f,
	0x52, 0x5f, 0x44, 0x41, 0x50, 0x53, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45, 0x5f, 0x49,
	0x4e, 0x46, 0x4f, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x44, 0x41, 0x50, 0x53, 0x5f, 0x48, 0x4f,
	0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x41, 0x43, 0x43, 0x45, 0x50, 0x54, 0x45, 0x44, 0x10, 0x01, 0x2a,
	0xd0, 0x01, 0x0a, 0x1b, 0x44, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x41, 0x63, 0x74, 0x4e, 0x6f,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12,
	0x27, 0x0a, 0x23, 0x44, 0x45, 0x53, 0x49, 0x52, 0x45, 0x44, 0x5f, 0x41, 0x43, 0x54, 0x5f, 0x4e,
	0x4f, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4c, 0x45, 0x56, 0x45,
	0x4c, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x2b, 0x0a, 0x27, 0x44, 0x45, 0x53, 0x49,
	0x52, 0x45, 0x44, 0x5f, 0x41, 0x43, 0x54, 0x5f, 0x4e, 0x4f, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x51, 0x4f, 0x53, 0x5f, 0x46,
	0x4c, 0x4f, 0x57, 0x10, 0x01, 0x12, 0x2e, 0x0a, 0x2a, 0x44, 0x45, 0x53, 0x49, 0x52, 0x45, 0x44,
	0x5f, 0x41, 0x43, 0x54, 0x5f, 0x4e, 0x4f, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x50, 0x44, 0x55, 0x5f, 0x53, 0x45, 0x53, 0x53,
	0x49, 0x4f, 0x4e, 0x10, 0x02, 0x12, 0x2b, 0x0a, 0x27, 0x44, 0x45, 0x53, 0x49, 0x52, 0x45, 0x44,
	0x5f, 0x41, 0x43, 0x54, 0x5f, 0x4e, 0x4f, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x55, 0x45, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c,
	0x10, 0x03, 0x2a, 0x50, 0x0a, 0x11, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x44, 0x72, 0x62,
	0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x12, 0x1c, 0x0a, 0x18, 0x44, 0x45, 0x46, 0x41, 0x55,
	0x4c, 0x54, 0x5f, 0x44, 0x52, 0x42, 0x5f, 0x41, 0x4c, 0x4c, 0x4f, 0x57, 0x45, 0x44, 0x5f, 0x54,
	0x52, 0x55, 0x45, 0x10, 0x00, 0x12, 0x1d, 0x0a, 0x19, 0x44, 0x45, 0x46, 0x41, 0x55, 0x4c, 0x54,
	0x5f, 0x44, 0x52, 0x42, 0x5f, 0x41, 0x4c, 0x4c, 0x4f, 0x57, 0x45, 0x44, 0x5f, 0x46, 0x41, 0x4c,
	0x53, 0x45, 0x10, 0x01, 0x2a, 0x61, 0x0a, 0x20, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x46, 0x6f,
	0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x74, 0x68, 0x41, 0x76, 0x61, 0x69,
	0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x3d, 0x0a, 0x39, 0x44, 0x49, 0x52, 0x45,
	0x43, 0x54, 0x5f, 0x46, 0x4f, 0x52, 0x57, 0x41, 0x52, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x50, 0x41,
	0x54, 0x48, 0x5f, 0x41, 0x56, 0x41, 0x49, 0x4c, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f,
	0x44, 0x49, 0x52, 0x45, 0x43, 0x54, 0x5f, 0x50, 0x41, 0x54, 0x48, 0x5f, 0x41, 0x56, 0x41, 0x49,
	0x4c, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x00, 0x2a, 0x37, 0x0a, 0x0c, 0x44, 0x6c, 0x66, 0x6f, 0x72,
	0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x27, 0x0a, 0x23, 0x44, 0x4c, 0x46, 0x4f, 0x52,
	0x57, 0x41, 0x52, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x44, 0x4c, 0x5f, 0x46, 0x4f, 0x52, 0x57, 0x41,
	0x52, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x50, 0x52, 0x4f, 0x50, 0x4f, 0x53, 0x45, 0x44, 0x10, 0x00,
	0x2a, 0x5f, 0x0a, 0x15, 0x44, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41,
	0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x1d, 0x44, 0x55, 0x50,
	0x4c, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x00, 0x12, 0x23, 0x0a, 0x1f,
	0x44, 0x55, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x56, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x4e, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10,
	0x01, 0x2a, 0x99, 0x01, 0x0a, 0x21, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x43, 0x72, 0x69, 0x74, 0x69,
	0x63, 0x61, 0x6c, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x35, 0x51, 0x69, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x12, 0x37, 0x0a, 0x33, 0x44, 0x45, 0x4c, 0x41, 0x59,
	0x5f, 0x43, 0x52, 0x49, 0x54, 0x49, 0x43, 0x41, 0x4c, 0x5f, 0x44, 0x59, 0x4e, 0x41, 0x4d, 0x49,
	0x43, 0x35, 0x5f, 0x51, 0x49, 0x44, 0x45, 0x53, 0x43, 0x52, 0x49, 0x50, 0x54, 0x4f, 0x52, 0x5f,
	0x44, 0x45, 0x4c, 0x41, 0x59, 0x5f, 0x43, 0x52, 0x49, 0x54, 0x49, 0x43, 0x41, 0x4c, 0x10, 0x00,
	0x12, 0x3b, 0x0a, 0x37, 0x44, 0x45, 0x4c, 0x41, 0x59, 0x5f, 0x43, 0x52, 0x49, 0x54, 0x49, 0x43,
	0x41, 0x4c, 0x5f, 0x44, 0x59, 0x4e, 0x41, 0x4d, 0x49, 0x43, 0x35, 0x5f, 0x51, 0x49, 0x44, 0x45,
	0x53, 0x43, 0x52, 0x49, 0x50, 0x54, 0x4f, 0x52, 0x5f, 0x4e, 0x4f, 0x4e, 0x5f, 0x44, 0x45, 0x4c,
	0x41, 0x59, 0x5f, 0x43, 0x52, 0x49, 0x54, 0x49, 0x43, 0x41, 0x4c, 0x10, 0x01, 0x2a, 0x8b, 0x01,
	0x0a, 0x24, 0x48, 0x69, 0x67, 0x68, 0x53, 0x70, 0x65, 0x65, 0x64, 0x46, 0x6c, 0x61, 0x67, 0x45,
	0x75, 0x74, 0x72, 0x61, 0x70, 0x72, 0x61, 0x63, 0x68, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x30, 0x0a, 0x2c, 0x48, 0x49, 0x47, 0x48, 0x5f, 0x53,
	0x50, 0x45, 0x45, 0x44, 0x5f, 0x46, 0x4c, 0x41, 0x47, 0x5f, 0x45, 0x55, 0x54, 0x52, 0x41, 0x50,
	0x52, 0x41, 0x43, 0x48, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x55, 0x52, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x54, 0x52, 0x55, 0x45, 0x10, 0x00, 0x12, 0x31, 0x0a, 0x2d, 0x48, 0x49, 0x47, 0x48,
	0x5f, 0x53, 0x50, 0x45, 0x45, 0x44, 0x5f, 0x46, 0x4c, 0x41, 0x47, 0x5f, 0x45, 0x55, 0x54, 0x52,
	0x41, 0x50, 0x52, 0x41, 0x43, 0x48, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x55, 0x52, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x41, 0x4c, 0x53, 0x45, 0x10, 0x01, 0x2a, 0xac, 0x02, 0x0a, 0x1a,
	0x45, 0x55, 0x54, 0x72, 0x61, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x42, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x12, 0x24, 0x0a, 0x20, 0x45, 0x5f,
	0x55, 0x54, 0x52, 0x41, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e,
	0x5f, 0x42, 0x41, 0x4e, 0x44, 0x57, 0x49, 0x44, 0x54, 0x48, 0x5f, 0x42, 0x57, 0x36, 0x10, 0x00,
	0x12, 0x25, 0x0a, 0x21, 0x45, 0x5f, 0x55, 0x54, 0x52, 0x41, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x4d,
	0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x42, 0x41, 0x4e, 0x44, 0x57, 0x49, 0x44, 0x54, 0x48,
	0x5f, 0x42, 0x57, 0x31, 0x35, 0x10, 0x01, 0x12, 0x25, 0x0a, 0x21, 0x45, 0x5f, 0x55, 0x54, 0x52,
	0x41, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x42, 0x41,
	0x4e, 0x44, 0x57, 0x49, 0x44, 0x54, 0x48, 0x5f, 0x42, 0x57, 0x32, 0x35, 0x10, 0x02, 0x12, 0x25,
	0x0a, 0x21, 0x45, 0x5f, 0x55, 0x54, 0x52, 0x41, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x4d, 0x49, 0x53,
	0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x42, 0x41, 0x4e, 0x44, 0x57, 0x49, 0x44, 0x54, 0x48, 0x5f, 0x42,
	0x57, 0x35, 0x30, 0x10, 0x03, 0x12, 0x25, 0x0a, 0x21, 0x45, 0x5f, 0x55, 0x54, 0x52, 0x41, 0x54,
	0x52, 0x41, 0x4e, 0x53, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x42, 0x41, 0x4e, 0x44,
	0x57, 0x49, 0x44, 0x54, 0x48, 0x5f, 0x42, 0x57, 0x37, 0x35, 0x10, 0x04, 0x12, 0x26, 0x0a, 0x22,
	0x45, 0x5f, 0x55, 0x54, 0x52, 0x41, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x4d, 0x49, 0x53, 0x53, 0x49,
	0x4f, 0x4e, 0x5f, 0x42, 0x41, 0x4e, 0x44, 0x57, 0x49, 0x44, 0x54, 0x48, 0x5f, 0x42, 0x57, 0x31,
	0x30, 0x30, 0x10, 0x05, 0x12, 0x24, 0x0a, 0x20, 0x45, 0x5f, 0x55, 0x54, 0x52, 0x41, 0x54, 0x52,
	0x41, 0x4e, 0x53, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x42, 0x41, 0x4e, 0x44, 0x57,
	0x49, 0x44, 0x54, 0x48, 0x5f, 0x42, 0x57, 0x31, 0x10, 0x06, 0x2a, 0xd4, 0x01, 0x0a, 0x09, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x31, 0x0a, 0x2d, 0x45, 0x56, 0x45, 0x4e,
	0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x45, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x55, 0x50,
	0x4f, 0x4e, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x4f, 0x46, 0x5f, 0x53, 0x45, 0x52,
	0x56, 0x49, 0x4e, 0x47, 0x5f, 0x43, 0x45, 0x4c, 0x4c, 0x10, 0x00, 0x12, 0x4c, 0x0a, 0x48, 0x45,
	0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x45, 0x50, 0x4f, 0x52, 0x54,
	0x5f, 0x55, 0x45, 0x5f, 0x4d, 0x4f, 0x56, 0x49, 0x4e, 0x47, 0x5f, 0x50, 0x52, 0x45, 0x53, 0x45,
	0x4e, 0x43, 0x45, 0x5f, 0x49, 0x4e, 0x54, 0x4f, 0x5f, 0x4f, 0x52, 0x5f, 0x4f, 0x55, 0x54, 0x5f,
	0x4f, 0x46, 0x5f, 0x54, 0x48, 0x45, 0x5f, 0x41, 0x52, 0x45, 0x41, 0x5f, 0x4f, 0x46, 0x5f, 0x49,
	0x4e, 0x54, 0x45, 0x52, 0x45, 0x53, 0x54, 0x10, 0x01, 0x12, 0x46, 0x0a, 0x42, 0x45, 0x56, 0x45,
	0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x45, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x55,
	0x50, 0x4f, 0x4e, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x4f, 0x46, 0x5f, 0x53, 0x45,
	0x52, 0x56, 0x49, 0x4e, 0x47, 0x5f, 0x43, 0x45, 0x4c, 0x4c, 0x5f, 0x41, 0x4e, 0x44, 0x5f, 0x41,
	0x52, 0x45, 0x41, 0x5f, 0x4f, 0x46, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x45, 0x53, 0x54, 0x10,
	0x02, 0x2a, 0x4c, 0x0a, 0x1d, 0x4f, 0x75, 0x74, 0x4f, 0x66, 0x43, 0x6f, 0x76, 0x65, 0x72, 0x61,
	0x67, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x54, 0x72, 0x69, 0x67, 0x67,
	0x65, 0x72, 0x12, 0x2b, 0x0a, 0x27, 0x4f, 0x55, 0x54, 0x5f, 0x4f, 0x46, 0x5f, 0x43, 0x4f, 0x56,
	0x45, 0x52, 0x41, 0x47, 0x45, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x54, 0x52, 0x49, 0x47, 0x47, 0x45, 0x52, 0x5f, 0x54, 0x52, 0x55, 0x45, 0x10, 0x00, 0x2a,
	0xf3, 0x01, 0x0a, 0x12, 0x45, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x48, 0x6f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x1d, 0x0a, 0x19, 0x45, 0x58, 0x50, 0x45, 0x43, 0x54,
	0x45, 0x44, 0x5f, 0x48, 0x4f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x56, 0x41, 0x4c, 0x5f, 0x53, 0x45,
	0x43, 0x31, 0x35, 0x10, 0x00, 0x12, 0x1d, 0x0a, 0x19, 0x45, 0x58, 0x50, 0x45, 0x43, 0x54, 0x45,
	0x44, 0x5f, 0x48, 0x4f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x56, 0x41, 0x4c, 0x5f, 0x53, 0x45, 0x43,
	0x33, 0x30, 0x10, 0x01, 0x12, 0x1d, 0x0a, 0x19, 0x45, 0x58, 0x50, 0x45, 0x43, 0x54, 0x45, 0x44,
	0x5f, 0x48, 0x4f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x56, 0x41, 0x4c, 0x5f, 0x53, 0x45, 0x43, 0x36,
	0x30, 0x10, 0x02, 0x12, 0x1d, 0x0a, 0x19, 0x45, 0x58, 0x50, 0x45, 0x43, 0x54, 0x45, 0x44, 0x5f,
	0x48, 0x4f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x56, 0x41, 0x4c, 0x5f, 0x53, 0x45, 0x43, 0x39, 0x30,
	0x10, 0x03, 0x12, 0x1e, 0x0a, 0x1a, 0x45, 0x58, 0x50, 0x45, 0x43, 0x54, 0x45, 0x44, 0x5f, 0x48,
	0x4f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x56, 0x41, 0x4c, 0x5f, 0x53, 0x45, 0x43, 0x31, 0x32, 0x30,
	0x10, 0x04, 0x12, 0x1e, 0x0a, 0x1a, 0x45, 0x58, 0x50, 0x45, 0x43, 0x54, 0x45, 0x44, 0x5f, 0x48,
	0x4f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x56, 0x41, 0x4c, 0x5f, 0x53, 0x45, 0x43, 0x31, 0x38, 0x30,
	0x10, 0x05, 0x12, 0x21, 0x0a, 0x1d, 0x45, 0x58, 0x50, 0x45, 0x43, 0x54, 0x45, 0x44, 0x5f, 0x48,
	0x4f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x56, 0x41, 0x4c, 0x5f, 0x4c, 0x4f, 0x4e, 0x47, 0x5f, 0x54,
	0x49, 0x4d, 0x45, 0x10, 0x06, 0x2a, 0x58, 0x0a, 0x12, 0x45, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65,
	0x64, 0x55, 0x65, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x22, 0x0a, 0x1e, 0x45,
	0x58, 0x50, 0x45, 0x43, 0x54, 0x45, 0x44, 0x5f, 0x55, 0x45, 0x4d, 0x4f, 0x42, 0x49, 0x4c, 0x49,
	0x54, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x52, 0x59, 0x10, 0x00, 0x12,
	0x1e, 0x0a, 0x1a, 0x45, 0x58, 0x50, 0x45, 0x43, 0x54, 0x45, 0x44, 0x5f, 0x55, 0x45, 0x4d, 0x4f,
	0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x4d, 0x4f, 0x42, 0x49, 0x4c, 0x45, 0x10, 0x01, 0x2a,
	0xac, 0x01, 0x0a, 0x26, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4f, 0x66, 0x55, 0x65, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x75, 0x72, 0x49,
	0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x47, 0x0a, 0x43, 0x53, 0x4f,
	0x55, 0x52, 0x43, 0x45, 0x5f, 0x4f, 0x46, 0x5f, 0x55, 0x45, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49,
	0x54, 0x59, 0x5f, 0x42, 0x45, 0x48, 0x41, 0x56, 0x49, 0x4f, 0x55, 0x52, 0x5f, 0x49, 0x4e, 0x46,
	0x4f, 0x52, 0x4d, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x55, 0x42, 0x53, 0x43, 0x52, 0x49,
	0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x10, 0x00, 0x12, 0x39, 0x0a, 0x35, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x4f, 0x46,
	0x5f, 0x55, 0x45, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x42, 0x45, 0x48, 0x41,
	0x56, 0x49, 0x4f, 0x55, 0x52, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x49, 0x53, 0x54, 0x49, 0x43, 0x53, 0x10, 0x01, 0x2a, 0x57,
	0x0a, 0x14, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x53, 0x68, 0x69, 0x66, 0x74,
	0x37, 0x70, 0x35, 0x6b, 0x68, 0x7a, 0x12, 0x1f, 0x0a, 0x1b, 0x46, 0x52, 0x45, 0x51, 0x55, 0x45,
	0x4e, 0x43, 0x59, 0x5f, 0x53, 0x48, 0x49, 0x46, 0x54, 0x37, 0x50, 0x35, 0x4b, 0x48, 0x5a, 0x5f,
	0x46, 0x41, 0x4c, 0x53, 0x45, 0x10, 0x00, 0x12, 0x1e, 0x0a, 0x1a, 0x46, 0x52, 0x45, 0x51, 0x55,
	0x45, 0x4e, 0x43, 0x59, 0x5f, 0x53, 0x48, 0x49, 0x46, 0x54, 0x37, 0x50, 0x35, 0x4b, 0x48, 0x5a,
	0x5f, 0x54, 0x52, 0x55, 0x45, 0x10, 0x01, 0x2a, 0x65, 0x0a, 0x21, 0x4e, 0x6f, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x47, 0x62,
	0x72, 0x71, 0x6f, 0x53, 0x66, 0x6c, 0x6f, 0x77, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x40, 0x0a, 0x3c,
	0x4e, 0x4f, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x4f, 0x4e,
	0x54, 0x52, 0x4f, 0x4c, 0x5f, 0x47, 0x42, 0x52, 0x51, 0x4f, 0x5f, 0x53, 0x46, 0x4c, 0x4f, 0x57,
	0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x4e, 0x4f, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x45, 0x44, 0x10, 0x00, 0x2a, 0x94,
	0x01, 0x0a, 0x12, 0x48, 0x61, 0x6e, 0x64, 0x6f, 0x76, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x25, 0x0a, 0x21, 0x48, 0x41, 0x4e, 0x44, 0x4f, 0x56, 0x45,
	0x52, 0x5f, 0x52, 0x45, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x48, 0x4f,
	0x5f, 0x54, 0x4f, 0x4f, 0x5f, 0x45, 0x41, 0x52, 0x4c, 0x59, 0x10, 0x00, 0x12, 0x29, 0x0a, 0x25,
	0x48, 0x41, 0x4e, 0x44, 0x4f, 0x56, 0x45, 0x52, 0x5f, 0x52, 0x45, 0x50, 0x4f, 0x52, 0x54, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x48, 0x4f, 0x5f, 0x54, 0x4f, 0x5f, 0x57, 0x52, 0x4f, 0x4e, 0x47,
	0x5f, 0x43, 0x45, 0x4c, 0x4c, 0x10, 0x01, 0x12, 0x2c, 0x0a, 0x28, 0x48, 0x41, 0x4e, 0x44, 0x4f,
	0x56, 0x45, 0x52, 0x5f, 0x52, 0x45, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x49, 0x4e, 0x54, 0x45, 0x52, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x50, 0x49, 0x4e, 0x47, 0x50,
	0x4f, 0x4e, 0x47, 0x10, 0x02, 0x2a, 0x30, 0x0a, 0x11, 0x49, 0x61, 0x62, 0x6e, 0x6f, 0x64, 0x65,
	0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x17, 0x49, 0x41,
	0x42, 0x4e, 0x4f, 0x44, 0x45, 0x5f, 0x49, 0x4e, 0x44, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x54, 0x52, 0x55, 0x45, 0x10, 0x00, 0x2a, 0x6b, 0x0a, 0x0a, 0x4c, 0x69, 0x6e, 0x6b, 0x73,
	0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x12, 0x17, 0x0a, 0x13, 0x4c, 0x49, 0x4e, 0x4b, 0x53, 0x5f, 0x54,
	0x4f, 0x5f, 0x4c, 0x4f, 0x47, 0x5f, 0x55, 0x50, 0x4c, 0x49, 0x4e, 0x4b, 0x10, 0x00, 0x12, 0x19,
	0x0a, 0x15, 0x4c, 0x49, 0x4e, 0x4b, 0x53, 0x5f, 0x54, 0x4f, 0x5f, 0x4c, 0x4f, 0x47, 0x5f, 0x44,
	0x4f, 0x57, 0x4e, 0x4c, 0x49, 0x4e, 0x4b, 0x10, 0x01, 0x12, 0x29, 0x0a, 0x25, 0x4c, 0x49, 0x4e,
	0x4b, 0x53, 0x5f, 0x54, 0x4f, 0x5f, 0x4c, 0x4f, 0x47, 0x5f, 0x42, 0x4f, 0x54, 0x48, 0x5f, 0x55,
	0x50, 0x4c, 0x49, 0x4e, 0x4b, 0x5f, 0x41, 0x4e, 0x44, 0x5f, 0x44, 0x4f, 0x57, 0x4e, 0x4c, 0x49,
	0x4e, 0x4b, 0x10, 0x02, 0x2a, 0x4e, 0x0a, 0x1e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x6e, 0x72, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x2c, 0x0a, 0x28, 0x4c, 0x4f, 0x43, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53,
	0x4e, 0x52, 0x45, 0x50, 0x4f, 0x52, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x50, 0x5f, 0x53, 0x43, 0x45,
	0x4c, 0x4c, 0x10, 0x00, 0x2a, 0xb6, 0x02, 0x0a, 0x0f, 0x4c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x1a, 0x0a, 0x16, 0x4c, 0x4f, 0x47, 0x47,
	0x49, 0x4e, 0x47, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x56, 0x41, 0x4c, 0x5f, 0x4d, 0x53, 0x33,
	0x32, 0x30, 0x10, 0x00, 0x12, 0x1a, 0x0a, 0x16, 0x4c, 0x4f, 0x47, 0x47, 0x49, 0x4e, 0x47, 0x5f,
	0x49, 0x4e, 0x54, 0x45, 0x52, 0x56, 0x41, 0x4c, 0x5f, 0x4d, 0x53, 0x36, 0x34, 0x30, 0x10, 0x01,
	0x12, 0x1b, 0x0a, 0x17, 0x4c, 0x4f, 0x47, 0x47, 0x49, 0x4e, 0x47, 0x5f, 0x49, 0x4e, 0x54, 0x45,
	0x52, 0x56, 0x41, 0x4c, 0x5f, 0x4d, 0x53, 0x31, 0x32, 0x38, 0x30, 0x10, 0x02, 0x12, 0x1b, 0x0a,
	0x17, 0x4c, 0x4f, 0x47, 0x47, 0x49, 0x4e, 0x47, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x56, 0x41,
	0x4c, 0x5f, 0x4d, 0x53, 0x32, 0x35, 0x36, 0x30, 0x10, 0x03, 0x12, 0x1b, 0x0a, 0x17, 0x4c, 0x4f,
	0x47, 0x47, 0x49, 0x4e, 0x47, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x56, 0x41, 0x4c, 0x5f, 0x4d,
	0x53, 0x35, 0x31, 0x32, 0x30, 0x10, 0x04, 0x12, 0x1c, 0x0a, 0x18, 0x4c, 0x4f, 0x47, 0x47, 0x49,
	0x4e, 0x47, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x56, 0x41, 0x4c, 0x5f, 0x4d, 0x53, 0x31, 0x30,
	0x32, 0x34, 0x30, 0x10, 0x05, 0x12, 0x1c, 0x0a, 0x18, 0x4c, 0x4f, 0x47, 0x47, 0x49, 0x4e, 0x47,
	0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x56, 0x41, 0x4c, 0x5f, 0x4d, 0x53, 0x32, 0x30, 0x34, 0x38,
	0x30, 0x10, 0x06, 0x12, 0x1c, 0x0a, 0x18, 0x4c, 0x4f, 0x47, 0x47, 0x49, 0x4e, 0x47, 0x5f, 0x49,
	0x4e, 0x54, 0x45, 0x52, 0x56, 0x41, 0x4c, 0x5f, 0x4d, 0x53, 0x33, 0x30, 0x37, 0x32, 0x30, 0x10,
	0x07, 0x12, 0x1c, 0x0a, 0x18, 0x4c, 0x4f, 0x47, 0x47, 0x49, 0x4e, 0x47, 0x5f, 0x49, 0x4e, 0x54,
	0x45, 0x52, 0x56, 0x41, 0x4c, 0x5f, 0x4d, 0x53, 0x34, 0x30, 0x39, 0x36, 0x30, 0x10, 0x08, 0x12,
	0x1c, 0x0a, 0x18, 0x4c, 0x4f, 0x47, 0x47, 0x49, 0x4e, 0x47, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52,
	0x56, 0x41, 0x4c, 0x5f, 0x4d, 0x53, 0x36, 0x31, 0x34, 0x34, 0x30, 0x10, 0x09, 0x2a, 0xae, 0x01,
	0x0a, 0x0f, 0x4c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x18, 0x0a, 0x14, 0x4c, 0x4f, 0x47, 0x47, 0x49, 0x4e, 0x47, 0x5f, 0x44, 0x55, 0x52,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4d, 0x31, 0x30, 0x10, 0x00, 0x12, 0x18, 0x0a, 0x14, 0x4c,
	0x4f, 0x47, 0x47, 0x49, 0x4e, 0x47, 0x5f, 0x44, 0x55, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x4d, 0x32, 0x30, 0x10, 0x01, 0x12, 0x18, 0x0a, 0x14, 0x4c, 0x4f, 0x47, 0x47, 0x49, 0x4e, 0x47,
	0x5f, 0x44, 0x55, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4d, 0x34, 0x30, 0x10, 0x02, 0x12,
	0x18, 0x0a, 0x14, 0x4c, 0x4f, 0x47, 0x47, 0x49, 0x4e, 0x47, 0x5f, 0x44, 0x55, 0x52, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x4d, 0x36, 0x30, 0x10, 0x03, 0x12, 0x18, 0x0a, 0x14, 0x4c, 0x4f, 0x47,
	0x47, 0x49, 0x4e, 0x47, 0x5f, 0x44, 0x55, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4d, 0x39,
	0x30, 0x10, 0x04, 0x12, 0x19, 0x0a, 0x15, 0x4c, 0x4f, 0x47, 0x47, 0x49, 0x4e, 0x47, 0x5f, 0x44,
	0x55, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4d, 0x31, 0x32, 0x30, 0x10, 0x05, 0x2a, 0x98,
	0x02, 0x0a, 0x1e, 0x4c, 0x6f, 0x77, 0x65, 0x72, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x50, 0x72, 0x65,
	0x73, 0x65, 0x6e, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x12, 0x3b, 0x0a, 0x37, 0x4c, 0x4f, 0x57, 0x45, 0x52, 0x5f, 0x4c, 0x41, 0x59, 0x45, 0x52,
	0x5f, 0x50, 0x52, 0x45, 0x53, 0x45, 0x4e, 0x43, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x52, 0x45, 0x4c, 0x45, 0x41, 0x53, 0x45, 0x5f,
	0x4c, 0x4f, 0x57, 0x45, 0x52, 0x5f, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x53, 0x10, 0x00, 0x12, 0x40,
	0x0a, 0x3c, 0x4c, 0x4f, 0x57, 0x45, 0x52, 0x5f, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x5f, 0x50, 0x52,
	0x45, 0x53, 0x45, 0x4e, 0x43, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x43, 0x48,
	0x41, 0x4e, 0x47, 0x45, 0x5f, 0x52, 0x45, 0x5f, 0x45, 0x53, 0x54, 0x41, 0x42, 0x4c, 0x49, 0x53,
	0x48, 0x5f, 0x4c, 0x4f, 0x57, 0x45, 0x52, 0x5f, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x53, 0x10, 0x01,
	0x12, 0x3b, 0x0a, 0x37, 0x4c, 0x4f, 0x57, 0x45, 0x52, 0x5f, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x5f,
	0x50, 0x52, 0x45, 0x53, 0x45, 0x4e, 0x43, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x53, 0x55, 0x53, 0x50, 0x45, 0x4e, 0x44, 0x5f, 0x4c,
	0x4f, 0x57, 0x45, 0x52, 0x5f, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x53, 0x10, 0x02, 0x12, 0x3a, 0x0a,
	0x36, 0x4c, 0x4f, 0x57, 0x45, 0x52, 0x5f, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x5f, 0x50, 0x52, 0x45,
	0x53, 0x45, 0x4e, 0x43, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x43, 0x48, 0x41,
	0x4e, 0x47, 0x45, 0x5f, 0x52, 0x45, 0x53, 0x55, 0x4d, 0x45, 0x5f, 0x4c, 0x4f, 0x57, 0x45, 0x52,
	0x5f, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x53, 0x10, 0x03, 0x2a, 0x96, 0x01, 0x0a, 0x12, 0x4d, 0x31,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72,
	0x12, 0x21, 0x0a, 0x1d, 0x4d, 0x31, 0x5f, 0x52, 0x45, 0x50, 0x4f, 0x52, 0x54, 0x49, 0x4e, 0x47,
	0x5f, 0x54, 0x52, 0x49, 0x47, 0x47, 0x45, 0x52, 0x5f, 0x50, 0x45, 0x52, 0x49, 0x4f, 0x44, 0x49,
	0x43, 0x10, 0x00, 0x12, 0x29, 0x0a, 0x25, 0x4d, 0x31, 0x5f, 0x52, 0x45, 0x50, 0x4f, 0x52, 0x54,
	0x49, 0x4e, 0x47, 0x5f, 0x54, 0x52, 0x49, 0x47, 0x47, 0x45, 0x52, 0x5f, 0x41, 0x32, 0x45, 0x56,
	0x45, 0x4e, 0x54, 0x54, 0x52, 0x49, 0x47, 0x47, 0x45, 0x52, 0x45, 0x44, 0x10, 0x01, 0x12, 0x32,
	0x0a, 0x2e, 0x4d, 0x31, 0x5f, 0x52, 0x45, 0x50, 0x4f, 0x52, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x54,
	0x52, 0x49, 0x47, 0x47, 0x45, 0x52, 0x5f, 0x41, 0x32, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x54, 0x52,
	0x49, 0x47, 0x47, 0x45, 0x52, 0x45, 0x44, 0x5f, 0x50, 0x45, 0x52, 0x49, 0x4f, 0x44, 0x49, 0x43,
	0x10, 0x02, 0x2a, 0x72, 0x0a, 0x08, 0x4d, 0x34, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x13,
	0x0a, 0x0f, 0x4d, 0x34, 0x50, 0x45, 0x52, 0x49, 0x4f, 0x44, 0x5f, 0x4d, 0x53, 0x31, 0x30, 0x32,
	0x34, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x4d, 0x34, 0x50, 0x45, 0x52, 0x49, 0x4f, 0x44, 0x5f,
	0x4d, 0x53, 0x32, 0x30, 0x34, 0x38, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x4d, 0x34, 0x50, 0x45,
	0x52, 0x49, 0x4f, 0x44, 0x5f, 0x4d, 0x53, 0x35, 0x31, 0x32, 0x30, 0x10, 0x02, 0x12, 0x14, 0x0a,
	0x10, 0x4d, 0x34, 0x50, 0x45, 0x52, 0x49, 0x4f, 0x44, 0x5f, 0x4d, 0x53, 0x31, 0x30, 0x32, 0x34,
	0x30, 0x10, 0x03, 0x12, 0x11, 0x0a, 0x0d, 0x4d, 0x34, 0x50, 0x45, 0x52, 0x49, 0x4f, 0x44, 0x5f,
	0x4d, 0x49, 0x4e, 0x31, 0x10, 0x04, 0x2a, 0x72, 0x0a, 0x08, 0x4d, 0x35, 0x70, 0x65, 0x72, 0x69,
	0x6f, 0x64, 0x12, 0x13, 0x0a, 0x0f, 0x4d, 0x35, 0x50, 0x45, 0x52, 0x49, 0x4f, 0x44, 0x5f, 0x4d,
	0x53, 0x31, 0x30, 0x32, 0x34, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x4d, 0x35, 0x50, 0x45, 0x52,
	0x49, 0x4f, 0x44, 0x5f, 0x4d, 0x53, 0x32, 0x30, 0x34, 0x38, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f,
	0x4d, 0x35, 0x50, 0x45, 0x52, 0x49, 0x4f, 0x44, 0x5f, 0x4d, 0x53, 0x35, 0x31, 0x32, 0x30, 0x10,
	0x02, 0x12, 0x14, 0x0a, 0x10, 0x4d, 0x35, 0x50, 0x45, 0x52, 0x49, 0x4f, 0x44, 0x5f, 0x4d, 0x53,
	0x31, 0x30, 0x32, 0x34, 0x30, 0x10, 0x03, 0x12, 0x11, 0x0a, 0x0d, 0x4d, 0x35, 0x50, 0x45, 0x52,
	0x49, 0x4f, 0x44, 0x5f, 0x4d, 0x49, 0x4e, 0x31, 0x10, 0x04, 0x2a, 0xaf, 0x03, 0x0a, 0x10, 0x4d,
	0x36, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12,
	0x1b, 0x0a, 0x17, 0x4d, 0x36, 0x52, 0x45, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x49, 0x4e, 0x54, 0x45,
	0x52, 0x56, 0x41, 0x4c, 0x5f, 0x4d, 0x53, 0x31, 0x32, 0x30, 0x10, 0x00, 0x12, 0x1b, 0x0a, 0x17,
	0x4d, 0x36, 0x52, 0x45, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x56, 0x41,
	0x4c, 0x5f, 0x4d, 0x53, 0x32, 0x34, 0x30, 0x10, 0x01, 0x12, 0x1b, 0x0a, 0x17, 0x4d, 0x36, 0x52,
	0x45, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x56, 0x41, 0x4c, 0x5f, 0x4d,
	0x53, 0x34, 0x38, 0x30, 0x10, 0x02, 0x12, 0x1b, 0x0a, 0x17, 0x4d, 0x36, 0x52, 0x45, 0x50, 0x4f,
	0x52, 0x54, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x56, 0x41, 0x4c, 0x5f, 0x4d, 0x53, 0x36, 0x34,
	0x30, 0x10, 0x03, 0x12, 0x1c, 0x0a, 0x18, 0x4d, 0x36, 0x52, 0x45, 0x50, 0x4f, 0x52, 0x54, 0x5f,
	0x49, 0x4e, 0x54, 0x45, 0x52, 0x56, 0x41, 0x4c, 0x5f, 0x4d, 0x53, 0x31, 0x30, 0x32, 0x34, 0x10,
	0x04, 0x12, 0x1c, 0x0a, 0x18, 0x4d, 0x36, 0x52, 0x45, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x49, 0x4e,
	0x54, 0x45, 0x52, 0x56, 0x41, 0x4c, 0x5f, 0x4d, 0x53, 0x32, 0x30, 0x34, 0x38, 0x10, 0x05, 0x12,
	0x1c, 0x0a, 0x18, 0x4d, 0x36, 0x52, 0x45, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x49, 0x4e, 0x54, 0x45,
	0x52, 0x56, 0x41, 0x4c, 0x5f, 0x4d, 0x53, 0x35, 0x31, 0x32, 0x30, 0x10, 0x06, 0x12, 0x1d, 0x0a,
	0x19, 0x4d, 0x36, 0x52, 0x45, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x56,
	0x41, 0x4c, 0x5f, 0x4d, 0x53, 0x31, 0x30, 0x32, 0x34, 0x30, 0x10, 0x07, 0x12, 0x1d, 0x0a, 0x19,
	0x4d, 0x36, 0x52, 0x45, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x56, 0x41,
	0x4c, 0x5f, 0x4d, 0x53, 0x32, 0x30, 0x34, 0x38, 0x30, 0x10, 0x08, 0x12, 0x1d, 0x0a, 0x19, 0x4d,
	0x36, 0x52, 0x45, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x56, 0x41, 0x4c,
	0x5f, 0x4d, 0x53, 0x34, 0x30, 0x39, 0x36, 0x30, 0x10, 0x09, 0x12, 0x1a, 0x0a, 0x16, 0x4d, 0x36,
	0x52, 0x45, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x56, 0x41, 0x4c, 0x5f,
	0x4d, 0x49, 0x4e, 0x31, 0x10, 0x0a, 0x12, 0x1a, 0x0a, 0x16, 0x4d, 0x36, 0x52, 0x45, 0x50, 0x4f,
	0x52, 0x54, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x56, 0x41, 0x4c, 0x5f, 0x4d, 0x49, 0x4e, 0x36,
	0x10, 0x0b, 0x12, 0x1b, 0x0a, 0x17, 0x4d, 0x36, 0x52, 0x45, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x49,
	0x4e, 0x54, 0x45, 0x52, 0x56, 0x41, 0x4c, 0x5f, 0x4d, 0x49, 0x4e, 0x31, 0x32, 0x10, 0x0c, 0x12,
	0x1b, 0x0a, 0x17, 0x4d, 0x36, 0x52, 0x45, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x49, 0x4e, 0x54, 0x45,
	0x52, 0x56, 0x41, 0x4c, 0x5f, 0x4d, 0x49, 0x4e, 0x33, 0x30, 0x10, 0x0d, 0x2a, 0x43, 0x0a, 0x09,
	0x4d, 0x61, 0x78, 0x49, 0x70, 0x72, 0x61, 0x74, 0x65, 0x12, 0x1b, 0x0a, 0x17, 0x4d, 0x41, 0x58,
	0x5f, 0x49, 0x50, 0x52, 0x41, 0x54, 0x45, 0x5f, 0x42, 0x49, 0x54, 0x52, 0x41, 0x54, 0x45, 0x36,
	0x34, 0x4b, 0x42, 0x53, 0x10, 0x00, 0x12, 0x19, 0x0a, 0x15, 0x4d, 0x41, 0x58, 0x5f, 0x49, 0x50,
	0x52, 0x41, 0x54, 0x45, 0x5f, 0x4d, 0x41, 0x58, 0x5f, 0x55, 0x45, 0x52, 0x41, 0x54, 0x45, 0x10,
	0x01, 0x2a, 0xc4, 0x03, 0x0a, 0x34, 0x52, 0x61, 0x64, 0x69, 0x6f, 0x66, 0x72, 0x61, 0x6d, 0x65,
	0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64,
	0x4d, 0x62, 0x73, 0x66, 0x6e, 0x73, 0x75, 0x62, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x45, 0x75, 0x74, 0x72, 0x61, 0x69, 0x74, 0x65, 0x6d, 0x12, 0x40, 0x0a, 0x3c, 0x52, 0x41,
	0x44, 0x49, 0x4f, 0x46, 0x52, 0x41, 0x4d, 0x45, 0x5f, 0x41, 0x4c, 0x4c, 0x4f, 0x43, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x50, 0x45, 0x52, 0x49, 0x4f, 0x44, 0x5f, 0x4d, 0x42, 0x53, 0x46, 0x4e,
	0x53, 0x55, 0x42, 0x46, 0x52, 0x41, 0x4d, 0x45, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x45, 0x55,
	0x54, 0x52, 0x41, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x4e, 0x31, 0x10, 0x00, 0x12, 0x40, 0x0a, 0x3c,
	0x52, 0x41, 0x44, 0x49, 0x4f, 0x46, 0x52, 0x41, 0x4d, 0x45, 0x5f, 0x41, 0x4c, 0x4c, 0x4f, 0x43,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x50, 0x45, 0x52, 0x49, 0x4f, 0x44, 0x5f, 0x4d, 0x42, 0x53,
	0x46, 0x4e, 0x53, 0x55, 0x42, 0x46, 0x52, 0x41, 0x4d, 0x45, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f,
	0x45, 0x55, 0x54, 0x52, 0x41, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x4e, 0x32, 0x10, 0x01, 0x12, 0x40,
	0x0a, 0x3c, 0x52, 0x41, 0x44, 0x49, 0x4f, 0x46, 0x52, 0x41, 0x4d, 0x45, 0x5f, 0x41, 0x4c, 0x4c,
	0x4f, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x50, 0x45, 0x52, 0x49, 0x4f, 0x44, 0x5f, 0x4d,
	0x42, 0x53, 0x46, 0x4e, 0x53, 0x55, 0x42, 0x46, 0x52, 0x41, 0x4d, 0x45, 0x5f, 0x49, 0x4e, 0x46,
	0x4f, 0x5f, 0x45, 0x55, 0x54, 0x52, 0x41, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x4e, 0x34, 0x10, 0x02,
	0x12, 0x40, 0x0a, 0x3c, 0x52, 0x41, 0x44, 0x49, 0x4f, 0x46, 0x52, 0x41, 0x4d, 0x45, 0x5f, 0x41,
	0x4c, 0x4c, 0x4f, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x50, 0x45, 0x52, 0x49, 0x4f, 0x44,
	0x5f, 0x4d, 0x42, 0x53, 0x46, 0x4e, 0x53, 0x55, 0x42, 0x46, 0x52, 0x41, 0x4d, 0x45, 0x5f, 0x49,
	0x4e, 0x46, 0x4f, 0x5f, 0x45, 0x55, 0x54, 0x52, 0x41, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x4e, 0x38,
	0x10, 0x03, 0x12, 0x41, 0x0a, 0x3d, 0x52, 0x41, 0x44, 0x49, 0x4f, 0x46, 0x52, 0x41, 0x4d, 0x45,
	0x5f, 0x41, 0x4c, 0x4c, 0x4f, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x50, 0x45, 0x52, 0x49,
	0x4f, 0x44, 0x5f, 0x4d, 0x42, 0x53, 0x46, 0x4e, 0x53, 0x55, 0x42, 0x46, 0x52, 0x41, 0x4d, 0x45,
	0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x45, 0x55, 0x54, 0x52, 0x41, 0x49, 0x54, 0x45, 0x4d, 0x5f,
	0x4e, 0x31, 0x36, 0x10, 0x04, 0x12, 0x41, 0x0a, 0x3d, 0x52, 0x41, 0x44, 0x49, 0x4f, 0x46, 0x52,
	0x41, 0x4d, 0x45, 0x5f, 0x41, 0x4c, 0x4c, 0x4f, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x50,
	0x45, 0x52, 0x49, 0x4f, 0x44, 0x5f, 0x4d, 0x42, 0x53, 0x46, 0x4e, 0x53, 0x55, 0x42, 0x46, 0x52,
	0x41, 0x4d, 0x45, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x45, 0x55, 0x54, 0x52, 0x41, 0x49, 0x54,
	0x45, 0x4d, 0x5f, 0x4e, 0x33, 0x32, 0x10, 0x05, 0x2a, 0x86, 0x01, 0x0a, 0x0d, 0x4d, 0x64, 0x74,
	0x41, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x21, 0x4d, 0x44,
	0x54, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x4d, 0x4d,
	0x45, 0x44, 0x49, 0x41, 0x54, 0x45, 0x5f, 0x4d, 0x44, 0x54, 0x5f, 0x4f, 0x4e, 0x4c, 0x59, 0x10,
	0x00, 0x12, 0x2a, 0x0a, 0x26, 0x4d, 0x44, 0x54, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x4d, 0x4d, 0x45, 0x44, 0x49, 0x41, 0x54, 0x45, 0x5f, 0x4d, 0x44,
	0x54, 0x5f, 0x41, 0x4e, 0x44, 0x5f, 0x54, 0x52, 0x41, 0x43, 0x45, 0x10, 0x01, 0x12, 0x22, 0x0a,
	0x1e, 0x4d, 0x44, 0x54, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x4c, 0x4f, 0x47, 0x47, 0x45, 0x44, 0x5f, 0x4d, 0x44, 0x54, 0x5f, 0x4f, 0x4e, 0x4c, 0x59, 0x10,
	0x02, 0x2a, 0xb5, 0x01, 0x0a, 0x29, 0x43, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6e, 0x74, 0x79,
	0x70, 0x65, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x46, 0x6f,
	0x72, 0x45, 0x71, 0x75, 0x69, 0x76, 0x61, 0x6c, 0x65, 0x6e, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x12,
	0x41, 0x0a, 0x3d, 0x43, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x4e, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x52, 0x45, 0x53, 0x54, 0x52, 0x49, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x53, 0x5f, 0x46,
	0x4f, 0x52, 0x5f, 0x45, 0x51, 0x55, 0x49, 0x56, 0x41, 0x4c, 0x45, 0x4e, 0x54, 0x5f, 0x49, 0x54,
	0x45, 0x4d, 0x5f, 0x45, 0x50, 0x43, 0x5f, 0x46, 0x4f, 0x52, 0x42, 0x49, 0x44, 0x44, 0x45, 0x4e,
	0x10, 0x00, 0x12, 0x45, 0x0a, 0x41, 0x43, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x4e,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x45, 0x53, 0x54, 0x52, 0x49, 0x43, 0x54, 0x49, 0x4f, 0x4e,
	0x53, 0x5f, 0x46, 0x4f, 0x52, 0x5f, 0x45, 0x51, 0x55, 0x49, 0x56, 0x41, 0x4c, 0x45, 0x4e, 0x54,
	0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x46, 0x49, 0x56, 0x45, 0x5f, 0x47, 0x43, 0x5f, 0x46, 0x4f,
	0x52, 0x42, 0x49, 0x44, 0x44, 0x45, 0x4e, 0x10, 0x01, 0x2a, 0x51, 0x0a, 0x1c, 0x43, 0x6e, 0x74,
	0x79, 0x70, 0x65, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x46,
	0x6f, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x6e, 0x67, 0x12, 0x31, 0x0a, 0x2d, 0x43, 0x4e, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x52, 0x45, 0x53, 0x54, 0x52, 0x49, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x53,
	0x5f, 0x46, 0x4f, 0x52, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x4e, 0x47, 0x5f, 0x45, 0x50, 0x43,
	0x5f, 0x46, 0x4f, 0x52, 0x42, 0x49, 0x44, 0x44, 0x45, 0x4e, 0x10, 0x00, 0x2a, 0x64, 0x0a, 0x1f,
	0x45, 0x55, 0x54, 0x72, 0x61, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x41, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x41, 0x0a, 0x3d, 0x45, 0x5f, 0x55, 0x54, 0x52, 0x41, 0x5f, 0x43, 0x4f, 0x4f, 0x52, 0x44, 0x49,
	0x4e, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x53, 0x53, 0x49, 0x53, 0x54, 0x41, 0x4e, 0x43,
	0x45, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x43, 0x4f, 0x4f, 0x52, 0x44, 0x49, 0x4e, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x49, 0x52, 0x45, 0x44,
	0x10, 0x00, 0x2a, 0x5d, 0x0a, 0x1c, 0x4e, 0x72, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x41, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x3d, 0x0a, 0x39, 0x4e, 0x52, 0x5f, 0x43, 0x4f, 0x4f, 0x52, 0x44, 0x49, 0x4e,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x53, 0x53, 0x49, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45,
	0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x43, 0x4f, 0x4f, 0x52, 0x44, 0x49, 0x4e, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x49, 0x52, 0x45, 0x44, 0x10,
	0x00, 0x2a, 0xa2, 0x01, 0x0a, 0x18, 0x4e, 0x62, 0x69, 0x6f, 0x54, 0x55, 0x4c, 0x44, 0x4c, 0x41,
	0x6c, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x2b,
	0x0a, 0x27, 0x4e, 0x42, 0x49, 0x4f, 0x5f, 0x54, 0x5f, 0x55, 0x4c, 0x5f, 0x44, 0x4c, 0x5f, 0x41,
	0x4c, 0x49, 0x47, 0x4e, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x4f, 0x46, 0x46, 0x53, 0x45, 0x54, 0x5f,
	0x4b, 0x48, 0x5a, 0x5f, 0x37, 0x44, 0x4f, 0x54, 0x35, 0x10, 0x00, 0x12, 0x26, 0x0a, 0x22, 0x4e,
	0x42, 0x49, 0x4f, 0x5f, 0x54, 0x5f, 0x55, 0x4c, 0x5f, 0x44, 0x4c, 0x5f, 0x41, 0x4c, 0x49, 0x47,
	0x4e, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x4f, 0x46, 0x46, 0x53, 0x45, 0x54, 0x5f, 0x4b, 0x48, 0x5a,
	0x30, 0x10, 0x01, 0x12, 0x31, 0x0a, 0x2d, 0x4e, 0x42, 0x49, 0x4f, 0x5f, 0x54, 0x5f, 0x55, 0x4c,
	0x5f, 0x44, 0x4c, 0x5f, 0x41, 0x4c, 0x49, 0x47, 0x4e, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x4f, 0x46,
	0x46, 0x53, 0x45, 0x54, 0x5f, 0x4b, 0x48, 0x5a, 0x37, 0x44, 0x4f, 0x54, 0x35, 0x5f, 0x53, 0x45,
	0x43, 0x4f, 0x4e, 0x44, 0x10, 0x02, 0x2a, 0xd6, 0x02, 0x0a, 0x20, 0x53, 0x75, 0x62, 0x66, 0x72,
	0x61, 0x6d, 0x65, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x65, 0x64,
	0x63, 0x74, 0x64, 0x6d, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x12, 0x2a, 0x0a, 0x26, 0x53,
	0x55, 0x42, 0x46, 0x52, 0x41, 0x4d, 0x45, 0x5f, 0x41, 0x53, 0x53, 0x49, 0x47, 0x4e, 0x4d, 0x45,
	0x4e, 0x54, 0x5f, 0x4e, 0x45, 0x44, 0x43, 0x54, 0x44, 0x4d, 0x50, 0x41, 0x54, 0x54, 0x45, 0x52,
	0x4e, 0x5f, 0x53, 0x41, 0x30, 0x10, 0x00, 0x12, 0x2a, 0x0a, 0x26, 0x53, 0x55, 0x42, 0x46, 0x52,
	0x41, 0x4d, 0x45, 0x5f, 0x41, 0x53, 0x53, 0x49, 0x47, 0x4e, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x4e,
	0x45, 0x44, 0x43, 0x54, 0x44, 0x4d, 0x50, 0x41, 0x54, 0x54, 0x45, 0x52, 0x4e, 0x5f, 0x53, 0x41,
	0x31, 0x10, 0x01, 0x12, 0x2a, 0x0a, 0x26, 0x53, 0x55, 0x42, 0x46, 0x52, 0x41, 0x4d, 0x45, 0x5f,
	0x41, 0x53, 0x53, 0x49, 0x47, 0x4e, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x4e, 0x45, 0x44, 0x43, 0x54,
	0x44, 0x4d, 0x50, 0x41, 0x54, 0x54, 0x45, 0x52, 0x4e, 0x5f, 0x53, 0x41, 0x32, 0x10, 0x02, 0x12,
	0x2a, 0x0a, 0x26, 0x53, 0x55, 0x42, 0x46, 0x52, 0x41, 0x4d, 0x45, 0x5f, 0x41, 0x53, 0x53, 0x49,
	0x47, 0x4e, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x4e, 0x45, 0x44, 0x43, 0x54, 0x44, 0x4d, 0x50, 0x41,
	0x54, 0x54, 0x45, 0x52, 0x4e, 0x5f, 0x53, 0x41, 0x33, 0x10, 0x03, 0x12, 0x2a, 0x0a, 0x26, 0x53,
	0x55, 0x42, 0x46, 0x52, 0x41, 0x4d, 0x45, 0x5f, 0x41, 0x53, 0x53, 0x49, 0x47, 0x4e, 0x4d, 0x45,
	0x4e, 0x54, 0x5f, 0x4e, 0x45, 0x44, 0x43, 0x54, 0x44, 0x4d, 0x50, 0x41, 0x54, 0x54, 0x45, 0x52,
	0x4e, 0x5f, 0x53, 0x41, 0x34, 0x10, 0x04, 0x12, 0x2a, 0x0a, 0x26, 0x53, 0x55, 0x42, 0x46, 0x52,
	0x41, 0x4d, 0x45, 0x5f, 0x41, 0x53, 0x53, 0x49, 0x47, 0x4e, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x4e,
	0x45, 0x44, 0x43, 0x54, 0x44, 0x4d, 0x50, 0x41, 0x54, 0x54, 0x45, 0x52, 0x4e, 0x5f, 0x53, 0x41,
	0x35, 0x10, 0x05, 0x12, 0x2a, 0x0a, 0x26, 0x53, 0x55, 0x42, 0x46, 0x52, 0x41, 0x4d, 0x45, 0x5f,
	0x41, 0x53, 0x53, 0x49, 0x47, 0x4e, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x4e, 0x45, 0x44, 0x43, 0x54,
	0x44, 0x4d, 0x50, 0x41, 0x54, 0x54, 0x45, 0x52, 0x4e, 0x5f, 0x53, 0x41, 0x36, 0x10, 0x06, 0x2a,
	0x4f, 0x0a, 0x0e, 0x4e, 0x70, 0x72, 0x61, 0x63, 0x68, 0x43, 0x50, 0x4c, 0x65, 0x6e, 0x67, 0x74,
	0x68, 0x12, 0x1d, 0x0a, 0x19, 0x4e, 0x50, 0x52, 0x41, 0x43, 0x48, 0x5f, 0x43, 0x50, 0x5f, 0x4c,
	0x45, 0x4e, 0x47, 0x54, 0x48, 0x5f, 0x55, 0x53, 0x36, 0x36, 0x44, 0x4f, 0x54, 0x37, 0x10, 0x00,
	0x12, 0x1e, 0x0a, 0x1a, 0x4e, 0x50, 0x52, 0x41, 0x43, 0x48, 0x5f, 0x43, 0x50, 0x5f, 0x4c, 0x45,
	0x4e, 0x47, 0x54, 0x48, 0x5f, 0x55, 0x53, 0x32, 0x36, 0x36, 0x44, 0x4f, 0x54, 0x37, 0x10, 0x01,
	0x2a, 0xbd, 0x01, 0x0a, 0x14, 0x4e, 0x70, 0x72, 0x61, 0x63, 0x68, 0x70, 0x72, 0x65, 0x61, 0x6d,
	0x62, 0x6c, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x1f, 0x0a, 0x1b, 0x4e, 0x50, 0x52,
	0x41, 0x43, 0x48, 0x5f, 0x50, 0x52, 0x45, 0x41, 0x4d, 0x42, 0x4c, 0x45, 0x5f, 0x46, 0x4f, 0x52,
	0x4d, 0x41, 0x54, 0x5f, 0x46, 0x4d, 0x54, 0x30, 0x10, 0x00, 0x12, 0x1f, 0x0a, 0x1b, 0x4e, 0x50,
	0x52, 0x41, 0x43, 0x48, 0x5f, 0x50, 0x52, 0x45, 0x41, 0x4d, 0x42, 0x4c, 0x45, 0x5f, 0x46, 0x4f,
	0x52, 0x4d, 0x41, 0x54, 0x5f, 0x46, 0x4d, 0x54, 0x31, 0x10, 0x01, 0x12, 0x1f, 0x0a, 0x1b, 0x4e,
	0x50, 0x52, 0x41, 0x43, 0x48, 0x5f, 0x50, 0x52, 0x45, 0x41, 0x4d, 0x42, 0x4c, 0x45, 0x5f, 0x46,
	0x4f, 0x52, 0x4d, 0x41, 0x54, 0x5f, 0x46, 0x4d, 0x54, 0x32, 0x10, 0x02, 0x12, 0x20, 0x0a, 0x1c,
	0x4e, 0x50, 0x52, 0x41, 0x43, 0x48, 0x5f, 0x50, 0x52, 0x45, 0x41, 0x4d, 0x42, 0x4c, 0x45, 0x5f,
	0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x5f, 0x46, 0x4d, 0x54, 0x30, 0x41, 0x10, 0x03, 0x12, 0x20,
	0x0a, 0x1c, 0x4e, 0x50, 0x52, 0x41, 0x43, 0x48, 0x5f, 0x50, 0x52, 0x45, 0x41, 0x4d, 0x42, 0x4c,
	0x45, 0x5f, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x5f, 0x46, 0x4d, 0x54, 0x31, 0x41, 0x10, 0x04,
	0x2a, 0x4a, 0x0a, 0x0e, 0x4e, 0x72, 0x63, 0x79, 0x63, 0x6c, 0x69, 0x63, 0x50, 0x72, 0x65, 0x66,
	0x69, 0x78, 0x12, 0x1a, 0x0a, 0x16, 0x4e, 0x52, 0x43, 0x59, 0x43, 0x4c, 0x49, 0x43, 0x5f, 0x50,
	0x52, 0x45, 0x46, 0x49, 0x58, 0x5f, 0x4e, 0x4f, 0x52, 0x4d, 0x41, 0x4c, 0x10, 0x00, 0x12, 0x1c,
	0x0a, 0x18, 0x4e, 0x52, 0x43, 0x59, 0x43, 0x4c, 0x49, 0x43, 0x5f, 0x50, 0x52, 0x45, 0x46, 0x49,
	0x58, 0x5f, 0x45, 0x58, 0x54, 0x45, 0x4e, 0x44, 0x45, 0x44, 0x10, 0x01, 0x2a, 0x99, 0x06, 0x0a,
	0x1d, 0x4e, 0x72, 0x64, 0x6c, 0x55, 0x4c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x69, 0x63, 0x69, 0x74, 0x79, 0x12, 0x29,
	0x0a, 0x25, 0x4e, 0x52, 0x44, 0x4c, 0x5f, 0x55, 0x4c, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x4d, 0x49,
	0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x50, 0x45, 0x52, 0x49, 0x4f, 0x44, 0x49, 0x43, 0x49, 0x54,
	0x59, 0x5f, 0x4d, 0x53, 0x30, 0x50, 0x35, 0x10, 0x00, 0x12, 0x2b, 0x0a, 0x27, 0x4e, 0x52, 0x44,
	0x4c, 0x5f, 0x55, 0x4c, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e,
	0x5f, 0x50, 0x45, 0x52, 0x49, 0x4f, 0x44, 0x49, 0x43, 0x49, 0x54, 0x59, 0x5f, 0x4d, 0x53, 0x30,
	0x50, 0x36, 0x32, 0x35, 0x10, 0x01, 0x12, 0x27, 0x0a, 0x23, 0x4e, 0x52, 0x44, 0x4c, 0x5f, 0x55,
	0x4c, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x50, 0x45,
	0x52, 0x49, 0x4f, 0x44, 0x49, 0x43, 0x49, 0x54, 0x59, 0x5f, 0x4d, 0x53, 0x31, 0x10, 0x02, 0x12,
	0x2a, 0x0a, 0x26, 0x4e, 0x52, 0x44, 0x4c, 0x5f, 0x55, 0x4c, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x4d,
	0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x50, 0x45, 0x52, 0x49, 0x4f, 0x44, 0x49, 0x43, 0x49,
	0x54, 0x59, 0x5f, 0x4d, 0x53, 0x31, 0x50, 0x32, 0x35, 0x10, 0x03, 0x12, 0x27, 0x0a, 0x23, 0x4e,
	0x52, 0x44, 0x4c, 0x5f, 0x55, 0x4c, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x4d, 0x49, 0x53, 0x53, 0x49,
	0x4f, 0x4e, 0x5f, 0x50, 0x45, 0x52, 0x49, 0x4f, 0x44, 0x49, 0x43, 0x49, 0x54, 0x59, 0x5f, 0x4d,
	0x53, 0x32, 0x10, 0x04, 0x12, 0x29, 0x0a, 0x25, 0x4e, 0x52, 0x44, 0x4c, 0x5f, 0x55, 0x4c, 0x54,
	0x52, 0x41, 0x4e, 0x53, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x50, 0x45, 0x52, 0x49,
	0x4f, 0x44, 0x49, 0x43, 0x49, 0x54, 0x59, 0x5f, 0x4d, 0x53, 0x32, 0x50, 0x35, 0x10, 0x05, 0x12,
	0x27, 0x0a, 0x23, 0x4e, 0x52, 0x44, 0x4c, 0x5f, 0x55, 0x4c, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x4d,
	0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x50, 0x45, 0x52, 0x49, 0x4f, 0x44, 0x49, 0x43, 0x49,
	0x54, 0x59, 0x5f, 0x4d, 0x53, 0x33, 0x10, 0x06, 0x12, 0x27, 0x0a, 0x23, 0x4e, 0x52, 0x44, 0x4c,
	0x5f, 0x55, 0x4c, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f,
	0x50, 0x45, 0x52, 0x49, 0x4f, 0x44, 0x49, 0x43, 0x49, 0x54, 0x59, 0x5f, 0x4d, 0x53, 0x34, 0x10,
	0x07, 0x12, 0x27, 0x0a, 0x23, 0x4e, 0x52, 0x44, 0x4c, 0x5f, 0x55, 0x4c, 0x54, 0x52, 0x41, 0x4e,
	0x53, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x50, 0x45, 0x52, 0x49, 0x4f, 0x44, 0x49,
	0x43, 0x49, 0x54, 0x59, 0x5f, 0x4d, 0x53, 0x35, 0x10, 0x08, 0x12, 0x28, 0x0a, 0x24, 0x4e, 0x52,
	0x44, 0x4c, 0x5f, 0x55, 0x4c, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f,
	0x4e, 0x5f, 0x50, 0x45, 0x52, 0x49, 0x4f, 0x44, 0x49, 0x43, 0x49, 0x54, 0x59, 0x5f, 0x4d, 0x53,
	0x31, 0x30, 0x10, 0x09, 0x12, 0x28, 0x0a, 0x24, 0x4e, 0x52, 0x44, 0x4c, 0x5f, 0x55, 0x4c, 0x54,
	0x52, 0x41, 0x4e, 0x53, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x50, 0x45, 0x52, 0x49,
	0x4f, 0x44, 0x49, 0x43, 0x49, 0x54, 0x59, 0x5f, 0x4d, 0x53, 0x32, 0x30, 0x10, 0x0a, 0x12, 0x28,
	0x0a, 0x24, 0x4e, 0x52, 0x44, 0x4c, 0x5f, 0x55, 0x4c, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x4d, 0x49,
	0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x50, 0x45, 0x52, 0x49, 0x4f, 0x44, 0x49, 0x43, 0x49, 0x54,
	0x59, 0x5f, 0x4d, 0x53, 0x34, 0x30, 0x10, 0x0b, 0x12, 0x28, 0x0a, 0x24, 0x4e, 0x52, 0x44, 0x4c,
	0x5f, 0x55, 0x4c, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f,
	0x50, 0x45, 0x52, 0x49, 0x4f, 0x44, 0x49, 0x43, 0x49, 0x54, 0x59, 0x5f, 0x4d, 0x53, 0x36, 0x30,
	0x10, 0x0c, 0x12, 0x28, 0x0a, 0x24, 0x4e, 0x52, 0x44, 0x4c, 0x5f, 0x55, 0x4c, 0x54, 0x52, 0x41,
	0x4e, 0x53, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x50, 0x45, 0x52, 0x49, 0x4f, 0x44,
	0x49, 0x43, 0x49, 0x54, 0x59, 0x5f, 0x4d, 0x53, 0x38, 0x30, 0x10, 0x0d, 0x12, 0x29, 0x0a, 0x25,
	0x4e, 0x52, 0x44, 0x4c, 0x5f, 0x55, 0x4c, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x4d, 0x49, 0x53, 0x53,
	0x49, 0x4f, 0x4e, 0x5f, 0x50, 0x45, 0x52, 0x49, 0x4f, 0x44, 0x49, 0x43, 0x49, 0x54, 0x59, 0x5f,
	0x4d, 0x53, 0x31, 0x30, 0x30, 0x10, 0x0e, 0x12, 0x29, 0x0a, 0x25, 0x4e, 0x52, 0x44, 0x4c, 0x5f,
	0x55, 0x4c, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x50,
	0x45, 0x52, 0x49, 0x4f, 0x44, 0x49, 0x43, 0x49, 0x54, 0x59, 0x5f, 0x4d, 0x53, 0x31, 0x32, 0x30,
	0x10, 0x0f, 0x12, 0x29, 0x0a, 0x25, 0x4e, 0x52, 0x44, 0x4c, 0x5f, 0x55, 0x4c, 0x54, 0x52, 0x41,
	0x4e, 0x53, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x50, 0x45, 0x52, 0x49, 0x4f, 0x44,
	0x49, 0x43, 0x49, 0x54, 0x59, 0x5f, 0x4d, 0x53, 0x31, 0x34, 0x30, 0x10, 0x10, 0x12, 0x29, 0x0a,
	0x25, 0x4e, 0x52, 0x44, 0x4c, 0x5f, 0x55, 0x4c, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x4d, 0x49, 0x53,
	0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x50, 0x45, 0x52, 0x49, 0x4f, 0x44, 0x49, 0x43, 0x49, 0x54, 0x59,
	0x5f, 0x4d, 0x53, 0x31, 0x36, 0x30, 0x10, 0x11, 0x2a, 0x83, 0x04, 0x0a, 0x05, 0x4e, 0x72, 0x6e,
	0x72, 0x62, 0x12, 0x0f, 0x0a, 0x0b, 0x4e, 0x52, 0x4e, 0x52, 0x42, 0x5f, 0x4e, 0x52, 0x42, 0x31,
	0x31, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x4e, 0x52, 0x4e, 0x52, 0x42, 0x5f, 0x4e, 0x52, 0x42,
	0x31, 0x38, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x4e, 0x52, 0x4e, 0x52, 0x42, 0x5f, 0x4e, 0x52,
	0x42, 0x32, 0x34, 0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x4e, 0x52, 0x4e, 0x52, 0x42, 0x5f, 0x4e,
	0x52, 0x42, 0x32, 0x35, 0x10, 0x03, 0x12, 0x0f, 0x0a, 0x0b, 0x4e, 0x52, 0x4e, 0x52, 0x42, 0x5f,
	0x4e, 0x52, 0x42, 0x33, 0x31, 0x10, 0x04, 0x12, 0x0f, 0x0a, 0x0b, 0x4e, 0x52, 0x4e, 0x52, 0x42,
	0x5f, 0x4e, 0x52, 0x42, 0x33, 0x32, 0x10, 0x05, 0x12, 0x0f, 0x0a, 0x0b, 0x4e, 0x52, 0x4e, 0x52,
	0x42, 0x5f, 0x4e, 0x52, 0x42, 0x33, 0x38, 0x10, 0x06, 0x12, 0x0f, 0x0a, 0x0b, 0x4e, 0x52, 0x4e,
	0x52, 0x42, 0x5f, 0x4e, 0x52, 0x42, 0x35, 0x31, 0x10, 0x07, 0x12, 0x0f, 0x0a, 0x0b, 0x4e, 0x52,
	0x4e, 0x52, 0x42, 0x5f, 0x4e, 0x52, 0x42, 0x35, 0x32, 0x10, 0x08, 0x12, 0x0f, 0x0a, 0x0b, 0x4e,
	0x52, 0x4e, 0x52, 0x42, 0x5f, 0x4e, 0x52, 0x42, 0x36, 0x35, 0x10, 0x09, 0x12, 0x0f, 0x0a, 0x0b,
	0x4e, 0x52, 0x4e, 0x52, 0x42, 0x5f, 0x4e, 0x52, 0x42, 0x36, 0x36, 0x10, 0x0a, 0x12, 0x0f, 0x0a,
	0x0b, 0x4e, 0x52, 0x4e, 0x52, 0x42, 0x5f, 0x4e, 0x52, 0x42, 0x37, 0x38, 0x10, 0x0b, 0x12, 0x0f,
	0x0a, 0x0b, 0x4e, 0x52, 0x4e, 0x52, 0x42, 0x5f, 0x4e, 0x52, 0x42, 0x37, 0x39, 0x10, 0x0c, 0x12,
	0x0f, 0x0a, 0x0b, 0x4e, 0x52, 0x4e, 0x52, 0x42, 0x5f, 0x4e, 0x52, 0x42, 0x39, 0x33, 0x10, 0x0d,
	0x12, 0x10, 0x0a, 0x0c, 0x4e, 0x52, 0x4e, 0x52, 0x42, 0x5f, 0x4e, 0x52, 0x42, 0x31, 0x30, 0x36,
	0x10, 0x0e, 0x12, 0x10, 0x0a, 0x0c, 0x4e, 0x52, 0x4e, 0x52, 0x42, 0x5f, 0x4e, 0x52, 0x42, 0x31,
	0x30, 0x37, 0x10, 0x0f, 0x12, 0x10, 0x0a, 0x0c, 0x4e, 0x52, 0x4e, 0x52, 0x42, 0x5f, 0x4e, 0x52,
	0x42, 0x31, 0x32, 0x31, 0x10, 0x10, 0x12, 0x10, 0x0a, 0x0c, 0x4e, 0x52, 0x4e, 0x52, 0x42, 0x5f,
	0x4e, 0x52, 0x42, 0x31, 0x33, 0x32, 0x10, 0x11, 0x12, 0x10, 0x0a, 0x0c, 0x4e, 0x52, 0x4e, 0x52,
	0x42, 0x5f, 0x4e, 0x52, 0x42, 0x31, 0x33, 0x33, 0x10, 0x12, 0x12, 0x10, 0x0a, 0x0c, 0x4e, 0x52,
	0x4e, 0x52, 0x42, 0x5f, 0x4e, 0x52, 0x42, 0x31, 0x33, 0x35, 0x10, 0x13, 0x12, 0x10, 0x0a, 0x0c,
	0x4e, 0x52, 0x4e, 0x52, 0x42, 0x5f, 0x4e, 0x52, 0x42, 0x31, 0x36, 0x30, 0x10, 0x14, 0x12, 0x10,
	0x0a, 0x0c, 0x4e, 0x52, 0x4e, 0x52, 0x42, 0x5f, 0x4e, 0x52, 0x42, 0x31, 0x36, 0x32, 0x10, 0x15,
	0x12, 0x10, 0x0a, 0x0c, 0x4e, 0x52, 0x4e, 0x52, 0x42, 0x5f, 0x4e, 0x52, 0x42, 0x31, 0x38, 0x39,
	0x10, 0x16, 0x12, 0x10, 0x0a, 0x0c, 0x4e, 0x52, 0x4e, 0x52, 0x42, 0x5f, 0x4e, 0x52, 0x42, 0x32,
	0x31, 0x36, 0x10, 0x17, 0x12, 0x10, 0x0a, 0x0c, 0x4e, 0x52, 0x4e, 0x52, 0x42, 0x5f, 0x4e, 0x52,
	0x42, 0x32, 0x31, 0x37, 0x10, 0x18, 0x12, 0x10, 0x0a, 0x0c, 0x4e, 0x52, 0x4e, 0x52, 0x42, 0x5f,
	0x4e, 0x52, 0x42, 0x32, 0x34, 0x35, 0x10, 0x19, 0x12, 0x10, 0x0a, 0x0c, 0x4e, 0x52, 0x4e, 0x52,
	0x42, 0x5f, 0x4e, 0x52, 0x42, 0x32, 0x36, 0x34, 0x10, 0x1a, 0x12, 0x10, 0x0a, 0x0c, 0x4e, 0x52,
	0x4e, 0x52, 0x42, 0x5f, 0x4e, 0x52, 0x42, 0x32, 0x37, 0x30, 0x10, 0x1b, 0x12, 0x10, 0x0a, 0x0c,
	0x4e, 0x52, 0x4e, 0x52, 0x42, 0x5f, 0x4e, 0x52, 0x42, 0x32, 0x37, 0x33, 0x10, 0x1c, 0x2a, 0x4c,
	0x0a, 0x05, 0x4e, 0x72, 0x73, 0x63, 0x73, 0x12, 0x0f, 0x0a, 0x0b, 0x4e, 0x52, 0x53, 0x43, 0x53,
	0x5f, 0x53, 0x43, 0x53, 0x31, 0x35, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x4e, 0x52, 0x53, 0x43,
	0x53, 0x5f, 0x53, 0x43, 0x53, 0x33, 0x30, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x4e, 0x52, 0x53,
	0x43, 0x53, 0x5f, 0x53, 0x43, 0x53, 0x36, 0x30, 0x10, 0x02, 0x12, 0x10, 0x0a, 0x0c, 0x4e, 0x52,
	0x53, 0x43, 0x53, 0x5f, 0x53, 0x43, 0x53, 0x31, 0x32, 0x30, 0x10, 0x03, 0x2a, 0x93, 0x01, 0x0a,
	0x19, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x41, 0x6e, 0x74, 0x65, 0x6e, 0x6e, 0x61,
	0x50, 0x6f, 0x72, 0x74, 0x73, 0x45, 0x55, 0x54, 0x72, 0x61, 0x12, 0x26, 0x0a, 0x22, 0x4e, 0x55,
	0x4d, 0x42, 0x45, 0x52, 0x5f, 0x4f, 0x46, 0x5f, 0x41, 0x4e, 0x54, 0x45, 0x4e, 0x4e, 0x41, 0x5f,
	0x50, 0x4f, 0x52, 0x54, 0x53, 0x5f, 0x45, 0x5f, 0x55, 0x54, 0x52, 0x41, 0x5f, 0x41, 0x4e, 0x31,
	0x10, 0x00, 0x12, 0x26, 0x0a, 0x22, 0x4e, 0x55, 0x4d, 0x42, 0x45, 0x52, 0x5f, 0x4f, 0x46, 0x5f,
	0x41, 0x4e, 0x54, 0x45, 0x4e, 0x4e, 0x41, 0x5f, 0x50, 0x4f, 0x52, 0x54, 0x53, 0x5f, 0x45, 0x5f,
	0x55, 0x54, 0x52, 0x41, 0x5f, 0x41, 0x4e, 0x32, 0x10, 0x01, 0x12, 0x26, 0x0a, 0x22, 0x4e, 0x55,
	0x4d, 0x42, 0x45, 0x52, 0x5f, 0x4f, 0x46, 0x5f, 0x41, 0x4e, 0x54, 0x45, 0x4e, 0x4e, 0x41, 0x5f,
	0x50, 0x4f, 0x52, 0x54, 0x53, 0x5f, 0x45, 0x5f, 0x55, 0x54, 0x52, 0x41, 0x5f, 0x41, 0x4e, 0x34,
	0x10, 0x02, 0x2a, 0x3b, 0x0a, 0x16, 0x4e, 0x6f, 0x6e, 0x47, 0x62, 0x72, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x73, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x65, 0x64, 0x12, 0x21, 0x0a, 0x1d,
	0x4e, 0x4f, 0x4e, 0x5f, 0x47, 0x42, 0x52, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x53,
	0x5f, 0x4f, 0x46, 0x46, 0x45, 0x52, 0x45, 0x44, 0x5f, 0x54, 0x52, 0x55, 0x45, 0x10, 0x00, 0x2a,
	0x9c, 0x0b, 0x0a, 0x22, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x4f, 0x66, 0x4e, 0x62, 0x69, 0x6f,
	0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x54, 0x6f,
	0x45, 0x61, 0x72, 0x66, 0x63, 0x6e, 0x12, 0x36, 0x0a, 0x32, 0x4f, 0x46, 0x46, 0x53, 0x45, 0x54,
	0x5f, 0x4f, 0x46, 0x5f, 0x4e, 0x42, 0x49, 0x4f, 0x54, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45,
	0x4c, 0x5f, 0x4e, 0x55, 0x4d, 0x42, 0x45, 0x52, 0x5f, 0x54, 0x4f, 0x5f, 0x45, 0x41, 0x52, 0x46,
	0x43, 0x4e, 0x5f, 0x4d, 0x49, 0x4e, 0x55, 0x53, 0x5f, 0x54, 0x45, 0x4e, 0x10, 0x00, 0x12, 0x37,
	0x0a, 0x33, 0x4f, 0x46, 0x46, 0x53, 0x45, 0x54, 0x5f, 0x4f, 0x46, 0x5f, 0x4e, 0x42, 0x49, 0x4f,
	0x54, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x4e, 0x55, 0x4d, 0x42, 0x45, 0x52,
	0x5f, 0x54, 0x4f, 0x5f, 0x45, 0x41, 0x52, 0x46, 0x43, 0x4e, 0x5f, 0x4d, 0x49, 0x4e, 0x55, 0x53,
	0x5f, 0x4e, 0x49, 0x4e, 0x45, 0x10, 0x01, 0x12, 0x41, 0x0a, 0x3d, 0x4f, 0x46, 0x46, 0x53, 0x45,
	0x54, 0x5f, 0x4f, 0x46, 0x5f, 0x4e, 0x42, 0x49, 0x4f, 0x54, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x4e,
	0x45, 0x4c, 0x5f, 0x4e, 0x55, 0x4d, 0x42, 0x45, 0x52, 0x5f, 0x54, 0x4f, 0x5f, 0x45, 0x41, 0x52,
	0x46, 0x43, 0x4e, 0x5f, 0x4d, 0x49, 0x4e, 0x55, 0x53, 0x5f, 0x45, 0x49, 0x47, 0x48, 0x54, 0x5f,
	0x44, 0x4f, 0x54, 0x5f, 0x46, 0x49, 0x56, 0x45, 0x10, 0x02, 0x12, 0x38, 0x0a, 0x34, 0x4f, 0x46,
	0x46, 0x53, 0x45, 0x54, 0x5f, 0x4f, 0x46, 0x5f, 0x4e, 0x42, 0x49, 0x4f, 0x54, 0x5f, 0x43, 0x48,
	0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x4e, 0x55, 0x4d, 0x42, 0x45, 0x52, 0x5f, 0x54, 0x4f, 0x5f,
	0x45, 0x41, 0x52, 0x46, 0x43, 0x4e, 0x5f, 0x4d, 0x49, 0x4e, 0x55, 0x53, 0x5f, 0x45, 0x49, 0x47,
	0x48, 0x54, 0x10, 0x03, 0x12, 0x38, 0x0a, 0x34, 0x4f, 0x46, 0x46, 0x53, 0x45, 0x54, 0x5f, 0x4f,
	0x46, 0x5f, 0x4e, 0x42, 0x49, 0x4f, 0x54, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x5f,
	0x4e, 0x55, 0x4d, 0x42, 0x45, 0x52, 0x5f, 0x54, 0x4f, 0x5f, 0x45, 0x41, 0x52, 0x46, 0x43, 0x4e,
	0x5f, 0x4d, 0x49, 0x4e, 0x55, 0x53, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x4e, 0x10, 0x04, 0x12, 0x36,
	0x0a, 0x32, 0x4f, 0x46, 0x46, 0x53, 0x45, 0x54, 0x5f, 0x4f, 0x46, 0x5f, 0x4e, 0x42, 0x49, 0x4f,
	0x54, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x4e, 0x55, 0x4d, 0x42, 0x45, 0x52,
	0x5f, 0x54, 0x4f, 0x5f, 0x45, 0x41, 0x52, 0x46, 0x43, 0x4e, 0x5f, 0x4d, 0x49, 0x4e, 0x55, 0x53,
	0x5f, 0x53, 0x49, 0x58, 0x10, 0x05, 0x12, 0x37, 0x0a, 0x33, 0x4f, 0x46, 0x46, 0x53, 0x45, 0x54,
	0x5f, 0x4f, 0x46, 0x5f, 0x4e, 0x42, 0x49, 0x4f, 0x54, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45,
	0x4c, 0x5f, 0x4e, 0x55, 0x4d, 0x42, 0x45, 0x52, 0x5f, 0x54, 0x4f, 0x5f, 0x45, 0x41, 0x52, 0x46,
	0x43, 0x4e, 0x5f, 0x4d, 0x49, 0x4e, 0x55, 0x53, 0x5f, 0x46, 0x49, 0x56, 0x45, 0x10, 0x06, 0x12,
	0x40, 0x0a, 0x3c, 0x4f, 0x46, 0x46, 0x53, 0x45, 0x54, 0x5f, 0x4f, 0x46, 0x5f, 0x4e, 0x42, 0x49,
	0x4f, 0x54, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x4e, 0x55, 0x4d, 0x42, 0x45,
	0x52, 0x5f, 0x54, 0x4f, 0x5f, 0x45, 0x41, 0x52, 0x46, 0x43, 0x4e, 0x5f, 0x4d, 0x49, 0x4e, 0x55,
	0x53, 0x5f, 0x46, 0x4f, 0x55, 0x52, 0x5f, 0x44, 0x4f, 0x54, 0x5f, 0x46, 0x49, 0x56, 0x45, 0x10,
	0x07, 0x12, 0x37, 0x0a, 0x33, 0x4f, 0x46, 0x46, 0x53, 0x45, 0x54, 0x5f, 0x4f, 0x46, 0x5f, 0x4e,
	0x42, 0x49, 0x4f, 0x54, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x4e, 0x55, 0x4d,
	0x42, 0x45, 0x52, 0x5f, 0x54, 0x4f, 0x5f, 0x45, 0x41, 0x52, 0x46, 0x43, 0x4e, 0x5f, 0x4d, 0x49,
	0x4e, 0x55, 0x53, 0x5f, 0x46, 0x4f, 0x55, 0x52, 0x10, 0x08, 0x12, 0x38, 0x0a, 0x34, 0x4f, 0x46,
	0x46, 0x53, 0x45, 0x54, 0x5f, 0x4f, 0x46, 0x5f, 0x4e, 0x42, 0x49, 0x4f, 0x54, 0x5f, 0x43, 0x48,
	0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x4e, 0x55, 0x4d, 0x42, 0x45, 0x52, 0x5f, 0x54, 0x4f, 0x5f,
	0x45, 0x41, 0x52, 0x46, 0x43, 0x4e, 0x5f, 0x4d, 0x49, 0x4e, 0x55, 0x53, 0x5f, 0x54, 0x48, 0x52,
	0x45, 0x45, 0x10, 0x09, 0x12, 0x36, 0x0a, 0x32, 0x4f, 0x46, 0x46, 0x53, 0x45, 0x54, 0x5f, 0x4f,
	0x46, 0x5f, 0x4e, 0x42, 0x49, 0x4f, 0x54, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x5f,
	0x4e, 0x55, 0x4d, 0x42, 0x45, 0x52, 0x5f, 0x54, 0x4f, 0x5f, 0x45, 0x41, 0x52, 0x46, 0x43, 0x4e,
	0x5f, 0x4d, 0x49, 0x4e, 0x55, 0x53, 0x5f, 0x54, 0x57, 0x4f, 0x10, 0x0a, 0x12, 0x36, 0x0a, 0x32,
	0x4f, 0x46, 0x46, 0x53, 0x45, 0x54, 0x5f, 0x4f, 0x46, 0x5f, 0x4e, 0x42, 0x49, 0x4f, 0x54, 0x5f,
	0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x4e, 0x55, 0x4d, 0x42, 0x45, 0x52, 0x5f, 0x54,
	0x4f, 0x5f, 0x45, 0x41, 0x52, 0x46, 0x43, 0x4e, 0x5f, 0x4d, 0x49, 0x4e, 0x55, 0x53, 0x5f, 0x4f,
	0x4e, 0x45, 0x10, 0x0b, 0x12, 0x40, 0x0a, 0x3c, 0x4f, 0x46, 0x46, 0x53, 0x45, 0x54, 0x5f, 0x4f,
	0x46, 0x5f, 0x4e, 0x42, 0x49, 0x4f, 0x54, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x5f,
	0x4e, 0x55, 0x4d, 0x42, 0x45, 0x52, 0x5f, 0x54, 0x4f, 0x5f, 0x45, 0x41, 0x52, 0x46, 0x43, 0x4e,
	0x5f, 0x4d, 0x49, 0x4e, 0x55, 0x53, 0x5f, 0x5a, 0x45, 0x52, 0x4f, 0x5f, 0x44, 0x4f, 0x54, 0x5f,
	0x46, 0x49, 0x56, 0x45, 0x10, 0x0c, 0x12, 0x31, 0x0a, 0x2d, 0x4f, 0x46, 0x46, 0x53, 0x45, 0x54,
	0x5f, 0x4f, 0x46, 0x5f, 0x4e, 0x42, 0x49, 0x4f, 0x54, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45,
	0x4c, 0x5f, 0x4e, 0x55, 0x4d, 0x42, 0x45, 0x52, 0x5f, 0x54, 0x4f, 0x5f, 0x45, 0x41, 0x52, 0x46,
	0x43, 0x4e, 0x5f, 0x5a, 0x45, 0x52, 0x4f, 0x10, 0x0d, 0x12, 0x30, 0x0a, 0x2c, 0x4f, 0x46, 0x46,
	0x53, 0x45, 0x54, 0x5f, 0x4f, 0x46, 0x5f, 0x4e, 0x42, 0x49, 0x4f, 0x54, 0x5f, 0x43, 0x48, 0x41,
	0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x4e, 0x55, 0x4d, 0x42, 0x45, 0x52, 0x5f, 0x54, 0x4f, 0x5f, 0x45,
	0x41, 0x52, 0x46, 0x43, 0x4e, 0x5f, 0x4f, 0x4e, 0x45, 0x10, 0x0e, 0x12, 0x30, 0x0a, 0x2c, 0x4f,
	0x46, 0x46, 0x53, 0x45, 0x54, 0x5f, 0x4f, 0x46, 0x5f, 0x4e, 0x42, 0x49, 0x4f, 0x54, 0x5f, 0x43,
	0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x4e, 0x55, 0x4d, 0x42, 0x45, 0x52, 0x5f, 0x54, 0x4f,
	0x5f, 0x45, 0x41, 0x52, 0x46, 0x43, 0x4e, 0x5f, 0x54, 0x57, 0x4f, 0x10, 0x0f, 0x12, 0x32, 0x0a,
	0x2e, 0x4f, 0x46, 0x46, 0x53, 0x45, 0x54, 0x5f, 0x4f, 0x46, 0x5f, 0x4e, 0x42, 0x49, 0x4f, 0x54,
	0x5f, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x4e, 0x55, 0x4d, 0x42, 0x45, 0x52, 0x5f,
	0x54, 0x4f, 0x5f, 0x45, 0x41, 0x52, 0x46, 0x43, 0x4e, 0x5f, 0x54, 0x48, 0x52, 0x45, 0x45, 0x10,
	0x10, 0x12, 0x3b, 0x0a, 0x37, 0x4f, 0x46, 0x46, 0x53, 0x45, 0x54, 0x5f, 0x4f, 0x46, 0x5f, 0x4e,
	0x42, 0x49, 0x4f, 0x54, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x4e, 0x55, 0x4d,
	0x42, 0x45, 0x52, 0x5f, 0x54, 0x4f, 0x5f, 0x45, 0x41, 0x52, 0x46, 0x43, 0x4e, 0x5f, 0x54, 0x48,
	0x52, 0x45, 0x45, 0x5f, 0x44, 0x4f, 0x54, 0x5f, 0x46, 0x49, 0x56, 0x45, 0x10, 0x11, 0x12, 0x31,
	0x0a, 0x2d, 0x4f, 0x46, 0x46, 0x53, 0x45, 0x54, 0x5f, 0x4f, 0x46, 0x5f, 0x4e, 0x42, 0x49, 0x4f,
	0x54, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x4e, 0x55, 0x4d, 0x42, 0x45, 0x52,
	0x5f, 0x54, 0x4f, 0x5f, 0x45, 0x41, 0x52, 0x46, 0x43, 0x4e, 0x5f, 0x46, 0x4f, 0x55, 0x52, 0x10,
	0x12, 0x12, 0x31, 0x0a, 0x2d, 0x4f, 0x46, 0x46, 0x53, 0x45, 0x54, 0x5f, 0x4f, 0x46, 0x5f, 0x4e,
	0x42, 0x49, 0x4f, 0x54, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x4e, 0x55, 0x4d,
	0x42, 0x45, 0x52, 0x5f, 0x54, 0x4f, 0x5f, 0x45, 0x41, 0x52, 0x46, 0x43, 0x4e, 0x5f, 0x46, 0x49,
	0x56, 0x45, 0x10, 0x13, 0x12, 0x30, 0x0a, 0x2c, 0x4f, 0x46, 0x46, 0x53, 0x45, 0x54, 0x5f, 0x4f,
	0x46, 0x5f, 0x4e, 0x42, 0x49, 0x4f, 0x54, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x5f,
	0x4e, 0x55, 0x4d, 0x42, 0x45, 0x52, 0x5f, 0x54, 0x4f, 0x5f, 0x45, 0x41, 0x52, 0x46, 0x43, 0x4e,
	0x5f, 0x53, 0x49, 0x58, 0x10, 0x14, 0x12, 0x32, 0x0a, 0x2e, 0x4f, 0x46, 0x46, 0x53, 0x45, 0x54,
	0x5f, 0x4f, 0x46, 0x5f, 0x4e, 0x42, 0x49, 0x4f, 0x54, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45,
	0x4c, 0x5f, 0x4e, 0x55, 0x4d, 0x42, 0x45, 0x52, 0x5f, 0x54, 0x4f, 0x5f, 0x45, 0x41, 0x52, 0x46,
	0x43, 0x4e, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x4e, 0x10, 0x15, 0x12, 0x3b, 0x0a, 0x37, 0x4f, 0x46,
	0x46, 0x53, 0x45, 0x54, 0x5f, 0x4f, 0x46, 0x5f, 0x4e, 0x42, 0x49, 0x4f, 0x54, 0x5f, 0x43, 0x48,
	0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x4e, 0x55, 0x4d, 0x42, 0x45, 0x52, 0x5f, 0x54, 0x4f, 0x5f,
	0x45, 0x41, 0x52, 0x46, 0x43, 0x4e, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x4e, 0x5f, 0x44, 0x4f, 0x54,
	0x5f, 0x46, 0x49, 0x56, 0x45, 0x10, 0x16, 0x12, 0x32, 0x0a, 0x2e, 0x4f, 0x46, 0x46, 0x53, 0x45,
	0x54, 0x5f, 0x4f, 0x46, 0x5f, 0x4e, 0x42, 0x49, 0x4f, 0x54, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x4e,
	0x45, 0x4c, 0x5f, 0x4e, 0x55, 0x4d, 0x42, 0x45, 0x52, 0x5f, 0x54, 0x4f, 0x5f, 0x45, 0x41, 0x52,
	0x46, 0x43, 0x4e, 0x5f, 0x45, 0x49, 0x47, 0x48, 0x54, 0x10, 0x17, 0x12, 0x31, 0x0a, 0x2d, 0x4f,
	0x46, 0x46, 0x53, 0x45, 0x54, 0x5f, 0x4f, 0x46, 0x5f, 0x4e, 0x42, 0x49, 0x4f, 0x54, 0x5f, 0x43,
	0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x4e, 0x55, 0x4d, 0x42, 0x45, 0x52, 0x5f, 0x54, 0x4f,
	0x5f, 0x45, 0x41, 0x52, 0x46, 0x43, 0x4e, 0x5f, 0x4e, 0x49, 0x4e, 0x45, 0x10, 0x18, 0x2a, 0x4e,
	0x0a, 0x0c, 0x50, 0x65, 0x64, 0x65, 0x73, 0x74, 0x72, 0x69, 0x61, 0x6e, 0x55, 0x65, 0x12, 0x1c,
	0x0a, 0x18, 0x50, 0x45, 0x44, 0x45, 0x53, 0x54, 0x52, 0x49, 0x41, 0x4e, 0x5f, 0x55, 0x45, 0x5f,
	0x41, 0x55, 0x54, 0x48, 0x4f, 0x52, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x20, 0x0a, 0x1c,
	0x50, 0x45, 0x44, 0x45, 0x53, 0x54, 0x52, 0x49, 0x41, 0x4e, 0x5f, 0x55, 0x45, 0x5f, 0x4e, 0x4f,
	0x54, 0x5f, 0x41, 0x55, 0x54, 0x48, 0x4f, 0x52, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x01, 0x2a, 0x88,
	0x01, 0x0a, 0x09, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x44, 0x72, 0x78, 0x12, 0x12, 0x0a, 0x0e,
	0x50, 0x41, 0x47, 0x49, 0x4e, 0x47, 0x5f, 0x44, 0x52, 0x58, 0x5f, 0x56, 0x33, 0x32, 0x10, 0x00,
	0x12, 0x12, 0x0a, 0x0e, 0x50, 0x41, 0x47, 0x49, 0x4e, 0x47, 0x5f, 0x44, 0x52, 0x58, 0x5f, 0x56,
	0x36, 0x34, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x50, 0x41, 0x47, 0x49, 0x4e, 0x47, 0x5f, 0x44,
	0x52, 0x58, 0x5f, 0x56, 0x31, 0x32, 0x38, 0x10, 0x02, 0x12, 0x13, 0x0a, 0x0f, 0x50, 0x41, 0x47,
	0x49, 0x4e, 0x47, 0x5f, 0x44, 0x52, 0x58, 0x5f, 0x56, 0x32, 0x35, 0x36, 0x10, 0x03, 0x12, 0x13,
	0x0a, 0x0f, 0x50, 0x41, 0x47, 0x49, 0x4e, 0x47, 0x5f, 0x44, 0x52, 0x58, 0x5f, 0x56, 0x35, 0x31,
	0x32, 0x10, 0x04, 0x12, 0x14, 0x0a, 0x10, 0x50, 0x41, 0x47, 0x49, 0x4e, 0x47, 0x5f, 0x44, 0x52,
	0x58, 0x5f, 0x56, 0x31, 0x30, 0x32, 0x34, 0x10, 0x05, 0x2a, 0xa6, 0x03, 0x0a, 0x0f, 0x50, 0x61,
	0x67, 0x69, 0x6e, 0x67, 0x65, 0x44, 0x72, 0x78, 0x43, 0x79, 0x63, 0x6c, 0x65, 0x12, 0x1d, 0x0a,
	0x19, 0x50, 0x41, 0x47, 0x49, 0x4e, 0x47, 0x5f, 0x45, 0x5f, 0x44, 0x52, 0x58, 0x5f, 0x43, 0x59,
	0x43, 0x4c, 0x45, 0x5f, 0x48, 0x46, 0x48, 0x41, 0x4c, 0x46, 0x10, 0x00, 0x12, 0x1a, 0x0a, 0x16,
	0x50, 0x41, 0x47, 0x49, 0x4e, 0x47, 0x5f, 0x45, 0x5f, 0x44, 0x52, 0x58, 0x5f, 0x43, 0x59, 0x43,
	0x4c, 0x45, 0x5f, 0x48, 0x46, 0x31, 0x10, 0x01, 0x12, 0x1a, 0x0a, 0x16, 0x50, 0x41, 0x47, 0x49,
	0x4e, 0x47, 0x5f, 0x45, 0x5f, 0x44, 0x52, 0x58, 0x5f, 0x43, 0x59, 0x43, 0x4c, 0x45, 0x5f, 0x48,
	0x46, 0x32, 0x10, 0x02, 0x12, 0x1a, 0x0a, 0x16, 0x50, 0x41, 0x47, 0x49, 0x4e, 0x47, 0x5f, 0x45,
	0x5f, 0x44, 0x52, 0x58, 0x5f, 0x43, 0x59, 0x43, 0x4c, 0x45, 0x5f, 0x48, 0x46, 0x34, 0x10, 0x03,
	0x12, 0x1a, 0x0a, 0x16, 0x50, 0x41, 0x47, 0x49, 0x4e, 0x47, 0x5f, 0x45, 0x5f, 0x44, 0x52, 0x58,
	0x5f, 0x43, 0x59, 0x43, 0x4c, 0x45, 0x5f, 0x48, 0x46, 0x36, 0x10, 0x04, 0x12, 0x1a, 0x0a, 0x16,
	0x50, 0x41, 0x47, 0x49, 0x4e, 0x47, 0x5f, 0x45, 0x5f, 0x44, 0x52, 0x58, 0x5f, 0x43, 0x59, 0x43,
	0x4c, 0x45, 0x5f, 0x48, 0x46, 0x38, 0x10, 0x05, 0x12, 0x1b, 0x0a, 0x17, 0x50, 0x41, 0x47, 0x49,
	0x4e, 0x47, 0x5f, 0x45, 0x5f, 0x44, 0x52, 0x58, 0x5f, 0x43, 0x59, 0x43, 0x4c, 0x45, 0x5f, 0x48,
	0x46, 0x31, 0x30, 0x10, 0x06, 0x12, 0x1b, 0x0a, 0x17, 0x50, 0x41, 0x47, 0x49, 0x4e, 0x47, 0x5f,
	0x45, 0x5f, 0x44, 0x52, 0x58, 0x5f, 0x43, 0x59, 0x43, 0x4c, 0x45, 0x5f, 0x48, 0x46, 0x31, 0x32,
	0x10, 0x07, 0x12, 0x1b, 0x0a, 0x17, 0x50, 0x41, 0x47, 0x49, 0x4e, 0x47, 0x5f, 0x45, 0x5f, 0x44,
	0x52, 0x58, 0x5f, 0x43, 0x59, 0x43, 0x4c, 0x45, 0x5f, 0x48, 0x46, 0x31, 0x34, 0x10, 0x08, 0x12,
	0x1b, 0x0a, 0x17, 0x50, 0x41, 0x47, 0x49, 0x4e, 0x47, 0x5f, 0x45, 0x5f, 0x44, 0x52, 0x58, 0x5f,
	0x43, 0x59, 0x43, 0x4c, 0x45, 0x5f, 0x48, 0x46, 0x31, 0x36, 0x10, 0x09, 0x12, 0x1b, 0x0a, 0x17,
	0x50, 0x41, 0x47, 0x49, 0x4e, 0x47, 0x5f, 0x45, 0x5f, 0x44, 0x52, 0x58, 0x5f, 0x43, 0x59, 0x43,
	0x4c, 0x45, 0x5f, 0x48, 0x46, 0x33, 0x32, 0x10, 0x0a, 0x12, 0x1b, 0x0a, 0x17, 0x50, 0x41, 0x47,
	0x49, 0x4e, 0x47, 0x5f, 0x45, 0x5f, 0x44, 0x52, 0x58, 0x5f, 0x43, 0x59, 0x43, 0x4c, 0x45, 0x5f,
	0x48, 0x46, 0x36, 0x34, 0x10, 0x0b, 0x12, 0x1c, 0x0a, 0x18, 0x50, 0x41, 0x47, 0x49, 0x4e, 0x47,
	0x5f, 0x45, 0x5f, 0x44, 0x52, 0x58, 0x5f, 0x43, 0x59, 0x43, 0x4c, 0x45, 0x5f, 0x48, 0x46, 0x31,
	0x32, 0x38, 0x10, 0x0c, 0x12, 0x1c, 0x0a, 0x18, 0x50, 0x41, 0x47, 0x49, 0x4e, 0x47, 0x5f, 0x45,
	0x5f, 0x44, 0x52, 0x58, 0x5f, 0x43, 0x59, 0x43, 0x4c, 0x45, 0x5f, 0x48, 0x46, 0x32, 0x35, 0x36,
	0x10, 0x0d, 0x2a, 0xc9, 0x03, 0x0a, 0x10, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x54, 0x69, 0x6d,
	0x65, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x12, 0x19, 0x0a, 0x15, 0x50, 0x41, 0x47, 0x49, 0x4e,
	0x47, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x57, 0x49, 0x4e, 0x44, 0x4f, 0x57, 0x5f, 0x53, 0x31,
	0x10, 0x00, 0x12, 0x19, 0x0a, 0x15, 0x50, 0x41, 0x47, 0x49, 0x4e, 0x47, 0x5f, 0x54, 0x49, 0x4d,
	0x45, 0x5f, 0x57, 0x49, 0x4e, 0x44, 0x4f, 0x57, 0x5f, 0x53, 0x32, 0x10, 0x01, 0x12, 0x19, 0x0a,
	0x15, 0x50, 0x41, 0x47, 0x49, 0x4e, 0x47, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x57, 0x49, 0x4e,
	0x44, 0x4f, 0x57, 0x5f, 0x53, 0x33, 0x10, 0x02, 0x12, 0x19, 0x0a, 0x15, 0x50, 0x41, 0x47, 0x49,
	0x4e, 0x47, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x57, 0x49, 0x4e, 0x44, 0x4f, 0x57, 0x5f, 0x53,
	0x34, 0x10, 0x03, 0x12, 0x19, 0x0a, 0x15, 0x50, 0x41, 0x47, 0x49, 0x4e, 0x47, 0x5f, 0x54, 0x49,
	0x4d, 0x45, 0x5f, 0x57, 0x49, 0x4e, 0x44, 0x4f, 0x57, 0x5f, 0x53, 0x35, 0x10, 0x04, 0x12, 0x19,
	0x0a, 0x15, 0x50, 0x41, 0x47, 0x49, 0x4e, 0x47, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x57, 0x49,
	0x4e, 0x44, 0x4f, 0x57, 0x5f, 0x53, 0x36, 0x10, 0x05, 0x12, 0x19, 0x0a, 0x15, 0x50, 0x41, 0x47,
	0x49, 0x4e, 0x47, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x57, 0x49, 0x4e, 0x44, 0x4f, 0x57, 0x5f,
	0x53, 0x37, 0x10, 0x06, 0x12, 0x19, 0x0a, 0x15, 0x50, 0x41, 0x47, 0x49, 0x4e, 0x47, 0x5f, 0x54,
	0x49, 0x4d, 0x45, 0x5f, 0x57, 0x49, 0x4e, 0x44, 0x4f, 0x57, 0x5f, 0x53, 0x38, 0x10, 0x07, 0x12,
	0x19, 0x0a, 0x15, 0x50, 0x41, 0x47, 0x49, 0x4e, 0x47, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x57,
	0x49, 0x4e, 0x44, 0x4f, 0x57, 0x5f, 0x53, 0x39, 0x10, 0x08, 0x12, 0x1a, 0x0a, 0x16, 0x50, 0x41,
	0x47, 0x49, 0x4e, 0x47, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x57, 0x49, 0x4e, 0x44, 0x4f, 0x57,
	0x5f, 0x53, 0x31, 0x30, 0x10, 0x09, 0x12, 0x1a, 0x0a, 0x16, 0x50, 0x41, 0x47, 0x49, 0x4e, 0x47,
	0x5f, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x57, 0x49, 0x4e, 0x44, 0x4f, 0x57, 0x5f, 0x53, 0x31, 0x31,
	0x10, 0x0a, 0x12, 0x1a, 0x0a, 0x16, 0x50, 0x41, 0x47, 0x49, 0x4e, 0x47, 0x5f, 0x54, 0x49, 0x4d,
	0x45, 0x5f, 0x57, 0x49, 0x4e, 0x44, 0x4f, 0x57, 0x5f, 0x53, 0x31, 0x32, 0x10, 0x0b, 0x12, 0x1a,
	0x0a, 0x16, 0x50, 0x41, 0x47, 0x49, 0x4e, 0x47, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x57, 0x49,
	0x4e, 0x44, 0x4f, 0x57, 0x5f, 0x53, 0x31, 0x33, 0x10, 0x0c, 0x12, 0x1a, 0x0a, 0x16, 0x50, 0x41,
	0x47, 0x49, 0x4e, 0x47, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x57, 0x49, 0x4e, 0x44, 0x4f, 0x57,
	0x5f, 0x53, 0x31, 0x34, 0x10, 0x0d, 0x12, 0x1a, 0x0a, 0x16, 0x50, 0x41, 0x47, 0x49, 0x4e, 0x47,
	0x5f, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x57, 0x49, 0x4e, 0x44, 0x4f, 0x57, 0x5f, 0x53, 0x31, 0x35,
	0x10, 0x0e, 0x12, 0x1a, 0x0a, 0x16, 0x50, 0x41, 0x47, 0x49, 0x4e, 0x47, 0x5f, 0x54, 0x49, 0x4d,
	0x45, 0x5f, 0x57, 0x49, 0x4e, 0x44, 0x4f, 0x57, 0x5f, 0x53, 0x31, 0x36, 0x10, 0x0f, 0x2a, 0x90,
	0x02, 0x0a, 0x0e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74,
	0x79, 0x12, 0x1e, 0x0a, 0x1a, 0x50, 0x41, 0x47, 0x49, 0x4e, 0x47, 0x5f, 0x50, 0x52, 0x49, 0x4f,
	0x52, 0x49, 0x54, 0x59, 0x5f, 0x50, 0x52, 0x49, 0x4f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x31, 0x10,
	0x00, 0x12, 0x1e, 0x0a, 0x1a, 0x50, 0x41, 0x47, 0x49, 0x4e, 0x47, 0x5f, 0x50, 0x52, 0x49, 0x4f,
	0x52, 0x49, 0x54, 0x59, 0x5f, 0x50, 0x52, 0x49, 0x4f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x32, 0x10,
	0x01, 0x12, 0x1e, 0x0a, 0x1a, 0x50, 0x41, 0x47, 0x49, 0x4e, 0x47, 0x5f, 0x50, 0x52, 0x49, 0x4f,
	0x52, 0x49, 0x54, 0x59, 0x5f, 0x50, 0x52, 0x49, 0x4f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x33, 0x10,
	0x02, 0x12, 0x1e, 0x0a, 0x1a, 0x50, 0x41, 0x47, 0x49, 0x4e, 0x47, 0x5f, 0x50, 0x52, 0x49, 0x4f,
	0x52, 0x49, 0x54, 0x59, 0x5f, 0x50, 0x52, 0x49, 0x4f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x34, 0x10,
	0x03, 0x12, 0x1e, 0x0a, 0x1a, 0x50, 0x41, 0x47, 0x49, 0x4e, 0x47, 0x5f, 0x50, 0x52, 0x49, 0x4f,
	0x52, 0x49, 0x54, 0x59, 0x5f, 0x50, 0x52, 0x49, 0x4f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x35, 0x10,
	0x04, 0x12, 0x1e, 0x0a, 0x1a, 0x50, 0x41, 0x47, 0x49, 0x4e, 0x47, 0x5f, 0x50, 0x52, 0x49, 0x4f,
	0x52, 0x49, 0x54, 0x59, 0x5f, 0x50, 0x52, 0x49, 0x4f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x36, 0x10,
	0x05, 0x12, 0x1e, 0x0a, 0x1a, 0x50, 0x41, 0x47, 0x49, 0x4e, 0x47, 0x5f, 0x50, 0x52, 0x49, 0x4f,
	0x52, 0x49, 0x54, 0x59, 0x5f, 0x50, 0x52, 0x49, 0x4f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x37, 0x10,
	0x06, 0x12, 0x1e, 0x0a, 0x1a, 0x50, 0x41, 0x47, 0x49, 0x4e, 0x47, 0x5f, 0x50, 0x52, 0x49, 0x4f,
	0x52, 0x49, 0x54, 0x59, 0x5f, 0x50, 0x52, 0x49, 0x4f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x38, 0x10,
	0x07, 0x2a, 0x3a, 0x0a, 0x14, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x4c, 0x69, 0x73, 0x74,
	0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x22, 0x0a, 0x1e, 0x50, 0x41, 0x52,
	0x54, 0x49, 0x41, 0x4c, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x5f, 0x49, 0x4e, 0x44, 0x49, 0x43, 0x41,
	0x54, 0x4f, 0x52, 0x5f, 0x50, 0x41, 0x52, 0x54, 0x49, 0x41, 0x4c, 0x10, 0x00, 0x2a, 0xb8, 0x01,
	0x0a, 0x22, 0x46, 0x72, 0x6f, 0x6d, 0x53, 0x6e, 0x67, 0x72, 0x61, 0x6e, 0x6e, 0x6f, 0x64, 0x65,
	0x50, 0x64, 0x63, 0x70, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4b, 0x0a, 0x47, 0x46, 0x52, 0x4f, 0x4d, 0x5f, 0x53, 0x4e, 0x47,
	0x52, 0x41, 0x4e, 0x4e, 0x4f, 0x44, 0x45, 0x5f, 0x50, 0x44, 0x43, 0x50, 0x43, 0x48, 0x41, 0x4e,
	0x47, 0x45, 0x5f, 0x49, 0x4e, 0x44, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x5f,
	0x4e, 0x47, 0x5f, 0x52, 0x41, 0x4e, 0x5f, 0x4e, 0x4f, 0x44, 0x45, 0x5f, 0x4b, 0x45, 0x59, 0x5f,
	0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x49, 0x52, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x45, 0x0a, 0x41, 0x46, 0x52, 0x4f, 0x4d, 0x5f, 0x53, 0x4e, 0x47, 0x52, 0x41, 0x4e,
	0x4e, 0x4f, 0x44, 0x45, 0x5f, 0x50, 0x44, 0x43, 0x50, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f,
	0x49, 0x4e, 0x44, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x50, 0x44, 0x43, 0x50, 0x5f,
	0x44, 0x41, 0x54, 0x41, 0x5f, 0x52, 0x45, 0x43, 0x4f, 0x56, 0x45, 0x52, 0x59, 0x5f, 0x52, 0x45,
	0x51, 0x55, 0x49, 0x52, 0x45, 0x44, 0x10, 0x01, 0x2a, 0x6b, 0x0a, 0x22, 0x46, 0x72, 0x6f, 0x6d,
	0x4d, 0x6e, 0x67, 0x72, 0x61, 0x6e, 0x6e, 0x6f, 0x64, 0x65, 0x50, 0x64, 0x63, 0x70, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x45,
	0x0a, 0x41, 0x46, 0x52, 0x4f, 0x4d, 0x5f, 0x4d, 0x4e, 0x47, 0x52, 0x41, 0x4e, 0x4e, 0x4f, 0x44,
	0x45, 0x5f, 0x50, 0x44, 0x43, 0x50, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x49, 0x4e, 0x44,
	0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x50, 0x44, 0x43, 0x50, 0x5f, 0x44, 0x41, 0x54,
	0x41, 0x5f, 0x52, 0x45, 0x43, 0x4f, 0x56, 0x45, 0x52, 0x59, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x49,
	0x52, 0x45, 0x44, 0x10, 0x00, 0x2a, 0x7d, 0x0a, 0x1c, 0x50, 0x64, 0x63, 0x70, 0x64, 0x75, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2c, 0x0a, 0x28, 0x50, 0x44, 0x43, 0x50, 0x44, 0x55, 0x50,
	0x4c, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x55,
	0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x55, 0x52, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x2f, 0x0a, 0x2b, 0x50, 0x44, 0x43, 0x50, 0x44, 0x55, 0x50, 0x4c, 0x49,
	0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x55, 0x52, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x55, 0x52,
	0x45, 0x44, 0x10, 0x01, 0x2a, 0x70, 0x0a, 0x1a, 0x55, 0x6c, 0x50, 0x64, 0x63, 0x70, 0x73, 0x6e,
	0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x50, 0x64, 0x63, 0x70, 0x73, 0x6e, 0x6c, 0x65, 0x6e, 0x67,
	0x74, 0x68, 0x12, 0x28, 0x0a, 0x24, 0x55, 0x4c, 0x5f, 0x50, 0x44, 0x43, 0x50, 0x53, 0x4e, 0x4c,
	0x45, 0x4e, 0x47, 0x54, 0x48, 0x5f, 0x50, 0x44, 0x43, 0x50, 0x53, 0x4e, 0x4c, 0x45, 0x4e, 0x47,
	0x54, 0x48, 0x5f, 0x56, 0x31, 0x32, 0x42, 0x49, 0x54, 0x53, 0x10, 0x00, 0x12, 0x28, 0x0a, 0x24,
	0x55, 0x4c, 0x5f, 0x50, 0x44, 0x43, 0x50, 0x53, 0x4e, 0x4c, 0x45, 0x4e, 0x47, 0x54, 0x48, 0x5f,
	0x50, 0x44, 0x43, 0x50, 0x53, 0x4e, 0x4c, 0x45, 0x4e, 0x47, 0x54, 0x48, 0x5f, 0x56, 0x31, 0x38,
	0x42, 0x49, 0x54, 0x53, 0x10, 0x01, 0x2a, 0x70, 0x0a, 0x1a, 0x44, 0x6c, 0x50, 0x64, 0x63, 0x70,
	0x73, 0x6e, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x50, 0x64, 0x63, 0x70, 0x73, 0x6e, 0x6c, 0x65,
	0x6e, 0x67, 0x74, 0x68, 0x12, 0x28, 0x0a, 0x24, 0x44, 0x4c, 0x5f, 0x50, 0x44, 0x43, 0x50, 0x53,
	0x4e, 0x4c, 0x45, 0x4e, 0x47, 0x54, 0x48, 0x5f, 0x50, 0x44, 0x43, 0x50, 0x53, 0x4e, 0x4c, 0x45,
	0x4e, 0x47, 0x54, 0x48, 0x5f, 0x56, 0x31, 0x32, 0x42, 0x49, 0x54, 0x53, 0x10, 0x00, 0x12, 0x28,
	0x0a, 0x24, 0x44, 0x4c, 0x5f, 0x50, 0x44, 0x43, 0x50, 0x53, 0x4e, 0x4c, 0x45, 0x4e, 0x47, 0x54,
	0x48, 0x5f, 0x50, 0x44, 0x43, 0x50, 0x53, 0x4e, 0x4c, 0x45, 0x4e, 0x47, 0x54, 0x48, 0x5f, 0x56,
	0x31, 0x38, 0x42, 0x49, 0x54, 0x53, 0x10, 0x01, 0x2a, 0x87, 0x01, 0x0a, 0x3a, 0x44, 0x6c, 0x6e,
	0x67, 0x75, 0x74, 0x6e, 0x6c, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x55, 0x6e, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x50, 0x64, 0x75, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x41, 0x64, 0x6d, 0x69, 0x74,
	0x74, 0x65, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x49, 0x0a, 0x45, 0x44, 0x5f, 0x4c, 0x4e, 0x47,
	0x55, 0x54, 0x4e, 0x4c, 0x49, 0x4e, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x55, 0x4e, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x44, 0x5f, 0x50, 0x44, 0x55, 0x53, 0x45, 0x53,
	0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x41, 0x44,
	0x4d, 0x49, 0x54, 0x54, 0x45, 0x44, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x54, 0x52, 0x55, 0x45,
	0x10, 0x00, 0x2a, 0xdf, 0x01, 0x0a, 0x1c, 0x52, 0x61, 0x74, 0x74, 0x79, 0x70, 0x65, 0x50, 0x64,
	0x75, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x55, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x12, 0x27, 0x0a, 0x23, 0x52, 0x5f, 0x41, 0x54, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x50, 0x44, 0x55, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x53, 0x41, 0x47, 0x45,
	0x5f, 0x52, 0x45, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x4e, 0x52, 0x10, 0x00, 0x12, 0x2a, 0x0a, 0x26,
	0x52, 0x5f, 0x41, 0x54, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x44, 0x55, 0x53, 0x45, 0x53, 0x53,
	0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x52, 0x45, 0x50, 0x4f, 0x52, 0x54,
	0x5f, 0x45, 0x55, 0x54, 0x52, 0x41, 0x10, 0x01, 0x12, 0x32, 0x0a, 0x2e, 0x52, 0x5f, 0x41, 0x54,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x44, 0x55, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f,
	0x55, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x52, 0x45, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x4e, 0x52, 0x5f,
	0x55, 0x4e, 0x4c, 0x49, 0x43, 0x45, 0x4e, 0x53, 0x45, 0x44, 0x10, 0x02, 0x12, 0x36, 0x0a, 0x32,
	0x52, 0x5f, 0x41, 0x54, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x44, 0x55, 0x53, 0x45, 0x53, 0x53,
	0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x52, 0x45, 0x50, 0x4f, 0x52, 0x54,
	0x5f, 0x45, 0x5f, 0x55, 0x54, 0x52, 0x41, 0x5f, 0x55, 0x4e, 0x4c, 0x49, 0x43, 0x45, 0x4e, 0x53,
	0x45, 0x44, 0x10, 0x03, 0x2a, 0xa0, 0x01, 0x0a, 0x0e, 0x50, 0x64, 0x75, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x14, 0x50, 0x44, 0x55, 0x53, 0x45,
	0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x50, 0x56, 0x34, 0x10,
	0x00, 0x12, 0x18, 0x0a, 0x14, 0x50, 0x44, 0x55, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x50, 0x56, 0x36, 0x10, 0x01, 0x12, 0x1a, 0x0a, 0x16, 0x50,
	0x44, 0x55, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49,
	0x50, 0x56, 0x34, 0x56, 0x36, 0x10, 0x02, 0x12, 0x1c, 0x0a, 0x18, 0x50, 0x44, 0x55, 0x53, 0x45,
	0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x45, 0x54, 0x48, 0x45, 0x52,
	0x4e, 0x45, 0x54, 0x10, 0x03, 0x12, 0x20, 0x0a, 0x1c, 0x50, 0x44, 0x55, 0x53, 0x45, 0x53, 0x53,
	0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x54, 0x52, 0x55, 0x43,
	0x54, 0x55, 0x52, 0x45, 0x44, 0x10, 0x04, 0x2a, 0x7e, 0x0a, 0x1b, 0x50, 0x6e, 0x69, 0x4e, 0x50,
	0x6e, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x65, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2c, 0x0a, 0x28, 0x50, 0x4e, 0x49, 0x5f, 0x4e, 0x50,
	0x4e, 0x5f, 0x52, 0x45, 0x53, 0x54, 0x52, 0x49, 0x43, 0x54, 0x45, 0x44, 0x5f, 0x49, 0x4e, 0x46,
	0x4f, 0x52, 0x4d, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x53, 0x54, 0x52, 0x49, 0x43,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x31, 0x0a, 0x2d, 0x50, 0x4e, 0x49, 0x5f, 0x4e, 0x50, 0x4e, 0x5f,
	0x52, 0x45, 0x53, 0x54, 0x52, 0x49, 0x43, 0x54, 0x45, 0x44, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x52,
	0x4d, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x52, 0x45, 0x53, 0x54, 0x52,
	0x49, 0x43, 0x54, 0x45, 0x44, 0x10, 0x01, 0x2a, 0xd4, 0x01, 0x0a, 0x26, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x65,
	0x64, 0x45, 0x75, 0x74, 0x72, 0x61, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x74,
	0x65, 0x6d, 0x12, 0x3e, 0x0a, 0x3a, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x45, 0x43, 0x54, 0x45, 0x44, 0x5f, 0x45, 0x55,
	0x54, 0x52, 0x41, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x49, 0x54, 0x45, 0x4d,
	0x5f, 0x44, 0x4f, 0x57, 0x4e, 0x4c, 0x49, 0x4e, 0x4b, 0x4e, 0x4f, 0x4e, 0x5f, 0x43, 0x52, 0x53,
	0x10, 0x00, 0x12, 0x33, 0x0a, 0x2f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x45, 0x43, 0x54, 0x45, 0x44, 0x5f, 0x45, 0x55,
	0x54, 0x52, 0x41, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x49, 0x54, 0x45, 0x4d,
	0x5f, 0x43, 0x5f, 0x52, 0x53, 0x10, 0x01, 0x12, 0x35, 0x0a, 0x31, 0x52, 0x45, 0x53, 0x4f, 0x55,
	0x52, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x45, 0x43, 0x54,
	0x45, 0x44, 0x5f, 0x45, 0x55, 0x54, 0x52, 0x41, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45,
	0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x55, 0x50, 0x4c, 0x49, 0x4e, 0x4b, 0x10, 0x02, 0x2a, 0x78,
	0x0a, 0x2e, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x51, 0x6f, 0x53, 0x66,
	0x6c, 0x6f, 0x77, 0x49, 0x6e, 0x66, 0x6f, 0x51, 0x6f, 0x53, 0x66, 0x6c, 0x6f, 0x77, 0x4c, 0x65,
	0x76, 0x65, 0x6c, 0x51, 0x6f, 0x53, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73,
	0x12, 0x46, 0x0a, 0x42, 0x41, 0x44, 0x44, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x5f, 0x51,
	0x4f, 0x5f, 0x53, 0x46, 0x4c, 0x4f, 0x57, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x51, 0x4f, 0x5f,
	0x53, 0x46, 0x4c, 0x4f, 0x57, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x51, 0x4f, 0x5f, 0x53,
	0x50, 0x41, 0x52, 0x41, 0x4d, 0x45, 0x54, 0x45, 0x52, 0x53, 0x5f, 0x4d, 0x4f, 0x52, 0x45, 0x5f,
	0x4c, 0x49, 0x4b, 0x45, 0x4c, 0x59, 0x10, 0x00, 0x2a, 0x62, 0x0a, 0x18, 0x51, 0x6f, 0x53, 0x66,
	0x6c, 0x6f, 0x77, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x1e, 0x51, 0x4f, 0x5f, 0x53, 0x46, 0x4c, 0x4f, 0x57,
	0x5f, 0x4d, 0x41, 0x50, 0x50, 0x49, 0x4e, 0x47, 0x5f, 0x49, 0x4e, 0x44, 0x49, 0x43, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x4c, 0x10, 0x00, 0x12, 0x22, 0x0a, 0x1e, 0x51, 0x4f, 0x5f, 0x53,
	0x46, 0x4c, 0x4f, 0x57, 0x5f, 0x4d, 0x41, 0x50, 0x50, 0x49, 0x4e, 0x47, 0x5f, 0x49, 0x4e, 0x44,
	0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x4c, 0x10, 0x01, 0x2a, 0xa8, 0x01, 0x0a,
	0x28, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x51, 0x6f, 0x53, 0x66, 0x6c, 0x6f, 0x77, 0x4e,
	0x6f, 0x74, 0x69, 0x66, 0x79, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x3b, 0x0a, 0x37, 0x4e, 0x4f, 0x54,
	0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x52, 0x4d,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x51, 0x4f, 0x5f, 0x53, 0x46, 0x4c, 0x4f, 0x57, 0x5f, 0x4e,
	0x4f, 0x54, 0x49, 0x46, 0x59, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x46, 0x55, 0x4c, 0x46, 0x49,
	0x4c, 0x4c, 0x45, 0x44, 0x10, 0x00, 0x12, 0x3f, 0x0a, 0x3b, 0x4e, 0x4f, 0x54, 0x49, 0x46, 0x49,
	0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x51, 0x4f, 0x5f, 0x53, 0x46, 0x4c, 0x4f, 0x57, 0x5f, 0x4e, 0x4f, 0x54, 0x49,
	0x46, 0x59, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x55, 0x4c, 0x46,
	0x49, 0x4c, 0x4c, 0x45, 0x44, 0x10, 0x01, 0x2a, 0xf1, 0x01, 0x0a, 0x1e, 0x52, 0x61, 0x74, 0x74,
	0x79, 0x70, 0x65, 0x51, 0x6f, 0x53, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x55, 0x73, 0x61, 0x67, 0x65,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x2b, 0x0a, 0x27, 0x52, 0x5f,
	0x41, 0x54, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x51, 0x4f, 0x5f, 0x53, 0x46, 0x4c, 0x4f, 0x57, 0x53,
	0x5f, 0x55, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x52, 0x45, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x49, 0x54,
	0x45, 0x4d, 0x5f, 0x4e, 0x52, 0x10, 0x00, 0x12, 0x2e, 0x0a, 0x2a, 0x52, 0x5f, 0x41, 0x54, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x51, 0x4f, 0x5f, 0x53, 0x46, 0x4c, 0x4f, 0x57, 0x53, 0x5f, 0x55, 0x53,
	0x41, 0x47, 0x45, 0x5f, 0x52, 0x45, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f,
	0x45, 0x55, 0x54, 0x52, 0x41, 0x10, 0x01, 0x12, 0x36, 0x0a, 0x32, 0x52, 0x5f, 0x41, 0x54, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x51, 0x4f, 0x5f, 0x53, 0x46, 0x4c, 0x4f, 0x57, 0x53, 0x5f, 0x55, 0x53,
	0x41, 0x47, 0x45, 0x5f, 0x52, 0x45, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f,
	0x4e, 0x52, 0x5f, 0x55, 0x4e, 0x4c, 0x49, 0x43, 0x45, 0x4e, 0x53, 0x45, 0x44, 0x10, 0x02, 0x12,
	0x3a, 0x0a, 0x36, 0x52, 0x5f, 0x41, 0x54, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x51, 0x4f, 0x5f, 0x53,
	0x46, 0x4c, 0x4f, 0x57, 0x53, 0x5f, 0x55, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x52, 0x45, 0x50, 0x4f,
	0x52, 0x54, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x45, 0x5f, 0x55, 0x54, 0x52, 0x41, 0x5f, 0x55,
	0x4e, 0x4c, 0x49, 0x43, 0x45, 0x4e, 0x53, 0x45, 0x44, 0x10, 0x03, 0x2a, 0x75, 0x0a, 0x14, 0x51,
	0x6f, 0x73, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x19, 0x51, 0x4f, 0x53, 0x5f, 0x4d, 0x4f, 0x4e, 0x49, 0x54,
	0x4f, 0x52, 0x49, 0x4e, 0x47, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x55, 0x4c,
	0x10, 0x00, 0x12, 0x1d, 0x0a, 0x19, 0x51, 0x4f, 0x53, 0x5f, 0x4d, 0x4f, 0x4e, 0x49, 0x54, 0x4f,
	0x52, 0x49, 0x4e, 0x47, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x44, 0x4c, 0x10,
	0x01, 0x12, 0x1f, 0x0a, 0x1b, 0x51, 0x4f, 0x53, 0x5f, 0x4d, 0x4f, 0x4e, 0x49, 0x54, 0x4f, 0x52,
	0x49, 0x4e, 0x47, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x42, 0x4f, 0x54, 0x48,
	0x10, 0x02, 0x2a, 0x39, 0x0a, 0x15, 0x51, 0x6f, 0x53, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72,
	0x69, 0x6e, 0x67, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x20, 0x0a, 0x1c, 0x51,
	0x4f, 0x5f, 0x53, 0x4d, 0x4f, 0x4e, 0x49, 0x54, 0x4f, 0x52, 0x49, 0x4e, 0x47, 0x5f, 0x44, 0x49,
	0x53, 0x41, 0x42, 0x4c, 0x45, 0x44, 0x5f, 0x54, 0x52, 0x55, 0x45, 0x10, 0x00, 0x2a, 0x96, 0x01,
	0x0a, 0x05, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x0d, 0x0a, 0x09, 0x52, 0x41, 0x4e, 0x47, 0x45,
	0x5f, 0x4d, 0x35, 0x30, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x52, 0x41, 0x4e, 0x47, 0x45, 0x5f,
	0x4d, 0x38, 0x30, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x52, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x4d,
	0x31, 0x38, 0x30, 0x10, 0x02, 0x12, 0x0e, 0x0a, 0x0a, 0x52, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x4d,
	0x32, 0x30, 0x30, 0x10, 0x03, 0x12, 0x0e, 0x0a, 0x0a, 0x52, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x4d,
	0x33, 0x35, 0x30, 0x10, 0x04, 0x12, 0x0e, 0x0a, 0x0a, 0x52, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x4d,
	0x34, 0x30, 0x30, 0x10, 0x05, 0x12, 0x0e, 0x0a, 0x0a, 0x52, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x4d,
	0x35, 0x30, 0x30, 0x10, 0x06, 0x12, 0x0e, 0x0a, 0x0a, 0x52, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x4d,
	0x37, 0x30, 0x30, 0x10, 0x07, 0x12, 0x0f, 0x0a, 0x0b, 0x52, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x4d,
	0x31, 0x30, 0x30, 0x30, 0x10, 0x08, 0x2a, 0x9c, 0x01, 0x0a, 0x27, 0x4e, 0x65, 0x78, 0x74, 0x50,
	0x61, 0x67, 0x69, 0x6e, 0x67, 0x41, 0x72, 0x65, 0x61, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x52, 0x61,
	0x6e, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x41, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x36, 0x0a, 0x32, 0x4e, 0x45, 0x58, 0x54, 0x5f, 0x50, 0x41, 0x47, 0x49, 0x4e,
	0x47, 0x5f, 0x41, 0x52, 0x45, 0x41, 0x5f, 0x53, 0x43, 0x4f, 0x50, 0x45, 0x5f, 0x52, 0x41, 0x4e,
	0x50, 0x41, 0x47, 0x49, 0x4e, 0x47, 0x5f, 0x41, 0x54, 0x54, 0x45, 0x4d, 0x50, 0x54, 0x5f, 0x49,
	0x4e, 0x46, 0x4f, 0x5f, 0x53, 0x41, 0x4d, 0x45, 0x10, 0x00, 0x12, 0x39, 0x0a, 0x35, 0x4e, 0x45,
	0x58, 0x54, 0x5f, 0x50, 0x41, 0x47, 0x49, 0x4e, 0x47, 0x5f, 0x41, 0x52, 0x45, 0x41, 0x5f, 0x53,
	0x43, 0x4f, 0x50, 0x45, 0x5f, 0x52, 0x41, 0x4e, 0x50, 0x41, 0x47, 0x49, 0x4e, 0x47, 0x5f, 0x41,
	0x54, 0x54, 0x45, 0x4d, 0x50, 0x54, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x43, 0x48, 0x41, 0x4e,
	0x47, 0x45, 0x44, 0x10, 0x01, 0x2a, 0x2e, 0x0a, 0x10, 0x52, 0x61, 0x6e, 0x70, 0x61, 0x67, 0x69,
	0x6e, 0x67, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x12, 0x1a, 0x0a, 0x16, 0x52, 0x41, 0x4e,
	0x50, 0x41, 0x47, 0x49, 0x4e, 0x47, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x5f, 0x54,
	0x52, 0x55, 0x45, 0x10, 0x00, 0x2a, 0x6a, 0x0a, 0x19, 0x52, 0x65, 0x64, 0x75, 0x6e, 0x64, 0x61,
	0x6e, 0x74, 0x51, 0x6f, 0x53, 0x66, 0x6c, 0x6f, 0x77, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74,
	0x6f, 0x72, 0x12, 0x25, 0x0a, 0x21, 0x52, 0x45, 0x44, 0x55, 0x4e, 0x44, 0x41, 0x4e, 0x54, 0x5f,
	0x51, 0x4f, 0x5f, 0x53, 0x46, 0x4c, 0x4f, 0x57, 0x5f, 0x49, 0x4e, 0x44, 0x49, 0x43, 0x41, 0x54,
	0x4f, 0x52, 0x5f, 0x54, 0x52, 0x55, 0x45, 0x10, 0x00, 0x12, 0x26, 0x0a, 0x22, 0x52, 0x45, 0x44,
	0x55, 0x4e, 0x44, 0x41, 0x4e, 0x54, 0x5f, 0x51, 0x4f, 0x5f, 0x53, 0x46, 0x4c, 0x4f, 0x57, 0x5f,
	0x49, 0x4e, 0x44, 0x49, 0x43, 0x41, 0x54, 0x4f, 0x52, 0x5f, 0x46, 0x41, 0x4c, 0x53, 0x45, 0x10,
	0x01, 0x2a, 0x1d, 0x0a, 0x03, 0x52, 0x73, 0x6e, 0x12, 0x0a, 0x0a, 0x06, 0x52, 0x53, 0x4e, 0x5f,
	0x56, 0x31, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x52, 0x53, 0x4e, 0x5f, 0x56, 0x32, 0x10, 0x01,
	0x2a, 0x51, 0x0a, 0x16, 0x52, 0x65, 0x66, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x51, 0x6f,
	0x53, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0x37, 0x0a, 0x33, 0x52, 0x45,
	0x46, 0x4c, 0x45, 0x43, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x51, 0x4f, 0x5f, 0x53, 0x41, 0x54, 0x54,
	0x52, 0x49, 0x42, 0x55, 0x54, 0x45, 0x5f, 0x53, 0x55, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x54,
	0x4f, 0x5f, 0x52, 0x45, 0x46, 0x4c, 0x45, 0x43, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x51, 0x4f, 0x5f,
	0x53, 0x10, 0x00, 0x2a, 0xea, 0x01, 0x0a, 0x0f, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x4d, 0x64, 0x74, 0x12, 0x18, 0x0a, 0x14, 0x52, 0x45, 0x50, 0x4f, 0x52,
	0x54, 0x5f, 0x41, 0x4d, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x4d, 0x44, 0x54, 0x5f, 0x52, 0x31, 0x10,
	0x00, 0x12, 0x18, 0x0a, 0x14, 0x52, 0x45, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x41, 0x4d, 0x4f, 0x55,
	0x4e, 0x54, 0x5f, 0x4d, 0x44, 0x54, 0x5f, 0x52, 0x32, 0x10, 0x01, 0x12, 0x18, 0x0a, 0x14, 0x52,
	0x45, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x41, 0x4d, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x4d, 0x44, 0x54,
	0x5f, 0x52, 0x34, 0x10, 0x02, 0x12, 0x18, 0x0a, 0x14, 0x52, 0x45, 0x50, 0x4f, 0x52, 0x54, 0x5f,
	0x41, 0x4d, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x4d, 0x44, 0x54, 0x5f, 0x52, 0x38, 0x10, 0x03, 0x12,
	0x19, 0x0a, 0x15, 0x52, 0x45, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x41, 0x4d, 0x4f, 0x55, 0x4e, 0x54,
	0x5f, 0x4d, 0x44, 0x54, 0x5f, 0x52, 0x31, 0x36, 0x10, 0x04, 0x12, 0x19, 0x0a, 0x15, 0x52, 0x45,
	0x50, 0x4f, 0x52, 0x54, 0x5f, 0x41, 0x4d, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x4d, 0x44, 0x54, 0x5f,
	0x52, 0x33, 0x32, 0x10, 0x05, 0x12, 0x19, 0x0a, 0x15, 0x52, 0x45, 0x50, 0x4f, 0x52, 0x54, 0x5f,
	0x41, 0x4d, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x4d, 0x44, 0x54, 0x5f, 0x52, 0x36, 0x34, 0x10, 0x06,
	0x12, 0x1e, 0x0a, 0x1a, 0x52, 0x45, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x41, 0x4d, 0x4f, 0x55, 0x4e,
	0x54, 0x5f, 0x4d, 0x44, 0x54, 0x5f, 0x49, 0x4e, 0x46, 0x49, 0x4e, 0x49, 0x54, 0x59, 0x10, 0x07,
	0x2a, 0x22, 0x0a, 0x0a, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x41, 0x72, 0x65, 0x61, 0x12, 0x14,
	0x0a, 0x10, 0x52, 0x45, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x41, 0x52, 0x45, 0x41, 0x5f, 0x43, 0x45,
	0x4c, 0x4c, 0x10, 0x00, 0x2a, 0xa9, 0x03, 0x0a, 0x11, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x4d, 0x64, 0x74, 0x12, 0x1d, 0x0a, 0x19, 0x52, 0x45,
	0x50, 0x4f, 0x52, 0x54, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x56, 0x41, 0x4c, 0x5f, 0x4d, 0x44,
	0x54, 0x5f, 0x4d, 0x53, 0x31, 0x32, 0x30, 0x10, 0x00, 0x12, 0x1d, 0x0a, 0x19, 0x52, 0x45, 0x50,
	0x4f, 0x52, 0x54, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x56, 0x41, 0x4c, 0x5f, 0x4d, 0x44, 0x54,
	0x5f, 0x4d, 0x53, 0x32, 0x34, 0x30, 0x10, 0x01, 0x12, 0x1d, 0x0a, 0x19, 0x52, 0x45, 0x50, 0x4f,
	0x52, 0x54, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x56, 0x41, 0x4c, 0x5f, 0x4d, 0x44, 0x54, 0x5f,
	0x4d, 0x53, 0x34, 0x38, 0x30, 0x10, 0x02, 0x12, 0x1d, 0x0a, 0x19, 0x52, 0x45, 0x50, 0x4f, 0x52,
	0x54, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x56, 0x41, 0x4c, 0x5f, 0x4d, 0x44, 0x54, 0x5f, 0x4d,
	0x53, 0x36, 0x34, 0x30, 0x10, 0x03, 0x12, 0x1e, 0x0a, 0x1a, 0x52, 0x45, 0x50, 0x4f, 0x52, 0x54,
	0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x56, 0x41, 0x4c, 0x5f, 0x4d, 0x44, 0x54, 0x5f, 0x4d, 0x53,
	0x31, 0x30, 0x32, 0x34, 0x10, 0x04, 0x12, 0x1e, 0x0a, 0x1a, 0x52, 0x45, 0x50, 0x4f, 0x52, 0x54,
	0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x56, 0x41, 0x4c, 0x5f, 0x4d, 0x44, 0x54, 0x5f, 0x4d, 0x53,
	0x32, 0x30, 0x34, 0x38, 0x10, 0x05, 0x12, 0x1e, 0x0a, 0x1a, 0x52, 0x45, 0x50, 0x4f, 0x52, 0x54,
	0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x56, 0x41, 0x4c, 0x5f, 0x4d, 0x44, 0x54, 0x5f, 0x4d, 0x53,
	0x35, 0x31, 0x32, 0x30, 0x10, 0x06, 0x12, 0x1f, 0x0a, 0x1b, 0x52, 0x45, 0x50, 0x4f, 0x52, 0x54,
	0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x56, 0x41, 0x4c, 0x5f, 0x4d, 0x44, 0x54, 0x5f, 0x4d, 0x53,
	0x31, 0x30, 0x32, 0x34, 0x30, 0x10, 0x07, 0x12, 0x1c, 0x0a, 0x18, 0x52, 0x45, 0x50, 0x4f, 0x52,
	0x54, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x56, 0x41, 0x4c, 0x5f, 0x4d, 0x44, 0x54, 0x5f, 0x4d,
	0x49, 0x4e, 0x31, 0x10, 0x08, 0x12, 0x1c, 0x0a, 0x18, 0x52, 0x45, 0x50, 0x4f, 0x52, 0x54, 0x5f,
	0x49, 0x4e, 0x54, 0x45, 0x52, 0x56, 0x41, 0x4c, 0x5f, 0x4d, 0x44, 0x54, 0x5f, 0x4d, 0x49, 0x4e,
	0x36, 0x10, 0x09, 0x12, 0x1d, 0x0a, 0x19, 0x52, 0x45, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x49, 0x4e,
	0x54, 0x45, 0x52, 0x56, 0x41, 0x4c, 0x5f, 0x4d, 0x44, 0x54, 0x5f, 0x4d, 0x49, 0x4e, 0x31, 0x32,
	0x10, 0x0a, 0x12, 0x1d, 0x0a, 0x19, 0x52, 0x45, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x49, 0x4e, 0x54,
	0x45, 0x52, 0x56, 0x41, 0x4c, 0x5f, 0x4d, 0x44, 0x54, 0x5f, 0x4d, 0x49, 0x4e, 0x33, 0x30, 0x10,
	0x0b, 0x12, 0x1d, 0x0a, 0x19, 0x52, 0x45, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x49, 0x4e, 0x54, 0x45,
	0x52, 0x56, 0x41, 0x4c, 0x5f, 0x4d, 0x44, 0x54, 0x5f, 0x4d, 0x49, 0x4e, 0x36, 0x30, 0x10, 0x0c,
	0x2a, 0x6f, 0x0a, 0x19, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x52, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x4d, 0x64, 0x74, 0x12, 0x28, 0x0a,
	0x24, 0x45, 0x58, 0x54, 0x45, 0x4e, 0x44, 0x45, 0x44, 0x5f, 0x52, 0x45, 0x50, 0x4f, 0x52, 0x54,
	0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x56, 0x41, 0x4c, 0x5f, 0x4d, 0x44, 0x54, 0x5f, 0x4d, 0x53,
	0x32, 0x30, 0x34, 0x38, 0x30, 0x10, 0x00, 0x12, 0x28, 0x0a, 0x24, 0x45, 0x58, 0x54, 0x45, 0x4e,
	0x44, 0x45, 0x44, 0x5f, 0x52, 0x45, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52,
	0x56, 0x41, 0x4c, 0x5f, 0x4d, 0x44, 0x54, 0x5f, 0x4d, 0x53, 0x34, 0x30, 0x39, 0x36, 0x30, 0x10,
	0x01, 0x2a, 0xef, 0x01, 0x0a, 0x14, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x50,
	0x65, 0x72, 0x69, 0x6f, 0x64, 0x69, 0x63, 0x69, 0x74, 0x79, 0x12, 0x2a, 0x0a, 0x26, 0x52, 0x45,
	0x50, 0x4f, 0x52, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x50, 0x45, 0x52, 0x49, 0x4f, 0x44, 0x49, 0x43,
	0x49, 0x54, 0x59, 0x5f, 0x48, 0x41, 0x4c, 0x46, 0x5f, 0x54, 0x48, 0x4f, 0x55, 0x53, 0x41, 0x4e,
	0x44, 0x5f, 0x4d, 0x53, 0x10, 0x00, 0x12, 0x29, 0x0a, 0x25, 0x52, 0x45, 0x50, 0x4f, 0x52, 0x54,
	0x49, 0x4e, 0x47, 0x5f, 0x50, 0x45, 0x52, 0x49, 0x4f, 0x44, 0x49, 0x43, 0x49, 0x54, 0x59, 0x5f,
	0x4f, 0x4e, 0x45, 0x5f, 0x54, 0x48, 0x4f, 0x55, 0x53, 0x41, 0x4e, 0x44, 0x5f, 0x4d, 0x53, 0x10,
	0x01, 0x12, 0x29, 0x0a, 0x25, 0x52, 0x45, 0x50, 0x4f, 0x52, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x50,
	0x45, 0x52, 0x49, 0x4f, 0x44, 0x49, 0x43, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x57, 0x4f, 0x5f, 0x54,
	0x48, 0x4f, 0x55, 0x53, 0x41, 0x4e, 0x44, 0x5f, 0x4d, 0x53, 0x10, 0x02, 0x12, 0x2a, 0x0a, 0x26,
	0x52, 0x45, 0x50, 0x4f, 0x52, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x50, 0x45, 0x52, 0x49, 0x4f, 0x44,
	0x49, 0x43, 0x49, 0x54, 0x59, 0x5f, 0x46, 0x49, 0x56, 0x45, 0x5f, 0x54, 0x48, 0x4f, 0x55, 0x53,
	0x41, 0x4e, 0x44, 0x5f, 0x4d, 0x53, 0x10, 0x03, 0x12, 0x29, 0x0a, 0x25, 0x52, 0x45, 0x50, 0x4f,
	0x52, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x50, 0x45, 0x52, 0x49, 0x4f, 0x44, 0x49, 0x43, 0x49, 0x54,
	0x59, 0x5f, 0x54, 0x45, 0x4e, 0x5f, 0x54, 0x48, 0x4f, 0x55, 0x53, 0x41, 0x4e, 0x44, 0x5f, 0x4d,
	0x53, 0x10, 0x04, 0x2a, 0x72, 0x0a, 0x13, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x1a, 0x52, 0x45,
	0x47, 0x49, 0x53, 0x54, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45,
	0x53, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x10, 0x00, 0x12, 0x1d, 0x0a, 0x19, 0x52, 0x45,
	0x47, 0x49, 0x53, 0x54, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45,
	0x53, 0x54, 0x5f, 0x53, 0x54, 0x4f, 0x50, 0x10, 0x01, 0x12, 0x1c, 0x0a, 0x18, 0x52, 0x45, 0x47,
	0x49, 0x53, 0x54, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53,
	0x54, 0x5f, 0x41, 0x44, 0x44, 0x10, 0x02, 0x2a, 0x8f, 0x01, 0x0a, 0x23, 0x53, 0x75, 0x62, 0x66,
	0x72, 0x61, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64,
	0x53, 0x75, 0x62, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x12,
	0x31, 0x0a, 0x2d, 0x53, 0x55, 0x42, 0x46, 0x52, 0x41, 0x4d, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x52, 0x45, 0x53, 0x45, 0x52, 0x56, 0x45, 0x44, 0x5f, 0x53, 0x55, 0x42, 0x46, 0x52, 0x41,
	0x4d, 0x45, 0x5f, 0x50, 0x41, 0x54, 0x54, 0x45, 0x52, 0x4e, 0x5f, 0x4d, 0x42, 0x53, 0x46, 0x4e,
	0x10, 0x00, 0x12, 0x35, 0x0a, 0x31, 0x53, 0x55, 0x42, 0x46, 0x52, 0x41, 0x4d, 0x45, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x52, 0x45, 0x53, 0x45, 0x52, 0x56, 0x45, 0x44, 0x5f, 0x53, 0x55, 0x42,
	0x46, 0x52, 0x41, 0x4d, 0x45, 0x5f, 0x50, 0x41, 0x54, 0x54, 0x45, 0x52, 0x4e, 0x5f, 0x4e, 0x4f,
	0x4e, 0x5f, 0x4d, 0x42, 0x53, 0x46, 0x4e, 0x10, 0x01, 0x2a, 0x8b, 0x01, 0x0a, 0x07, 0x52, 0x6c,
	0x63, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x0e, 0x52, 0x4c, 0x43, 0x4d, 0x4f, 0x44, 0x45,
	0x5f, 0x52, 0x4c, 0x43, 0x5f, 0x41, 0x4d, 0x10, 0x00, 0x12, 0x20, 0x0a, 0x1c, 0x52, 0x4c, 0x43,
	0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x52, 0x4c, 0x43, 0x5f, 0x55, 0x4d, 0x5f, 0x42, 0x49, 0x44, 0x49,
	0x52, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x10, 0x01, 0x12, 0x24, 0x0a, 0x20, 0x52,
	0x4c, 0x43, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x52, 0x4c, 0x43, 0x5f, 0x55, 0x4d, 0x5f, 0x55, 0x4e,
	0x49, 0x44, 0x49, 0x52, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x5f, 0x55, 0x4c, 0x10,
	0x02, 0x12, 0x24, 0x0a, 0x20, 0x52, 0x4c, 0x43, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x52, 0x4c, 0x43,
	0x5f, 0x55, 0x4d, 0x5f, 0x55, 0x4e, 0x49, 0x44, 0x49, 0x52, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e,
	0x41, 0x4c, 0x5f, 0x44, 0x4c, 0x10, 0x03, 0x2a, 0xa5, 0x01, 0x0a, 0x2c, 0x52, 0x6c, 0x63, 0x70,
	0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x52,
	0x6c, 0x63, 0x64, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x39, 0x0a, 0x35, 0x52, 0x5f, 0x4c, 0x43,
	0x50, 0x52, 0x49, 0x4d, 0x41, 0x52, 0x59, 0x5f, 0x49, 0x4e, 0x44, 0x49, 0x43, 0x41, 0x54, 0x4f,
	0x52, 0x5f, 0x52, 0x4c, 0x43, 0x44, 0x55, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x52, 0x55,
	0x45, 0x10, 0x00, 0x12, 0x3a, 0x0a, 0x36, 0x52, 0x5f, 0x4c, 0x43, 0x50, 0x52, 0x49, 0x4d, 0x41,
	0x52, 0x59, 0x5f, 0x49, 0x4e, 0x44, 0x49, 0x43, 0x41, 0x54, 0x4f, 0x52, 0x5f, 0x52, 0x4c, 0x43,
	0x44, 0x55, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x4e, 0x46, 0x4f,
	0x52, 0x4d, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x41, 0x4c, 0x53, 0x45, 0x10, 0x01, 0x2a,
	0x9b, 0x01, 0x0a, 0x27, 0x44, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x52, 0x6c, 0x63, 0x64, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x36, 0x0a, 0x32, 0x44,
	0x55, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45,
	0x5f, 0x52, 0x4c, 0x43, 0x44, 0x55, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x45, 0x10, 0x00, 0x12, 0x38, 0x0a, 0x34, 0x44, 0x55, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x52, 0x4c, 0x43, 0x44, 0x55, 0x50, 0x4c,
	0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x49, 0x54,
	0x45, 0x4d, 0x5f, 0x49, 0x4e, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x01, 0x2a, 0x49, 0x0a,
	0x19, 0x52, 0x65, 0x65, 0x73, 0x74, 0x61, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x6d, 0x65, 0x6e, 0x74,
	0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2c, 0x0a, 0x28, 0x52, 0x45,
	0x45, 0x53, 0x54, 0x41, 0x42, 0x4c, 0x49, 0x53, 0x48, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x49, 0x4e,
	0x44, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x45, 0x53, 0x54, 0x41, 0x42,
	0x4c, 0x49, 0x53, 0x48, 0x45, 0x44, 0x10, 0x00, 0x2a, 0x62, 0x0a, 0x13, 0x52, 0x72, 0x63, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x24, 0x0a, 0x20, 0x52, 0x52, 0x43, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x49, 0x4e, 0x44,
	0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x55, 0x4c, 0x4c, 0x5f, 0x43, 0x4f, 0x4e,
	0x46, 0x49, 0x47, 0x10, 0x00, 0x12, 0x25, 0x0a, 0x21, 0x52, 0x52, 0x43, 0x43, 0x4f, 0x4e, 0x46,
	0x49, 0x47, 0x5f, 0x49, 0x4e, 0x44, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x45,
	0x4c, 0x54, 0x41, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x10, 0x01, 0x2a, 0xad, 0x01, 0x0a,
	0x17, 0x52, 0x72, 0x63, 0x63, 0x6f, 0x6e, 0x6e, 0x52, 0x65, 0x65, 0x73, 0x74, 0x61, 0x62, 0x49,
	0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x35, 0x0a, 0x31, 0x52, 0x52, 0x43, 0x43,
	0x4f, 0x4e, 0x4e, 0x5f, 0x52, 0x45, 0x45, 0x53, 0x54, 0x41, 0x42, 0x5f, 0x49, 0x4e, 0x44, 0x49,
	0x43, 0x41, 0x54, 0x4f, 0x52, 0x5f, 0x52, 0x45, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x55, 0x52,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x10, 0x00, 0x12,
	0x2e, 0x0a, 0x2a, 0x52, 0x52, 0x43, 0x43, 0x4f, 0x4e, 0x4e, 0x5f, 0x52, 0x45, 0x45, 0x53, 0x54,
	0x41, 0x42, 0x5f, 0x49, 0x4e, 0x44, 0x49, 0x43, 0x41, 0x54, 0x4f, 0x52, 0x5f, 0x48, 0x41, 0x4e,
	0x44, 0x4f, 0x56, 0x45, 0x52, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x10, 0x01, 0x12,
	0x2b, 0x0a, 0x27, 0x52, 0x52, 0x43, 0x43, 0x4f, 0x4e, 0x4e, 0x5f, 0x52, 0x45, 0x45, 0x53, 0x54,
	0x41, 0x42, 0x5f, 0x49, 0x4e, 0x44, 0x49, 0x43, 0x41, 0x54, 0x4f, 0x52, 0x5f, 0x4f, 0x54, 0x48,
	0x45, 0x52, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x10, 0x02, 0x2a, 0x30, 0x0a, 0x0e,
	0x52, 0x72, 0x63, 0x72, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x43, 0x61, 0x75, 0x73, 0x65, 0x12, 0x1e,
	0x0a, 0x1a, 0x52, 0x52, 0x43, 0x52, 0x45, 0x53, 0x55, 0x4d, 0x45, 0x5f, 0x43, 0x41, 0x55, 0x53,
	0x45, 0x5f, 0x52, 0x4e, 0x41, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x10, 0x00, 0x2a, 0x38,
	0x0a, 0x15, 0x53, 0x63, 0x67, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x1f, 0x0a, 0x1b, 0x53, 0x43, 0x47, 0x43, 0x4f,
	0x4e, 0x46, 0x49, 0x47, 0x55, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x51, 0x55, 0x45, 0x52,
	0x59, 0x5f, 0x54, 0x52, 0x55, 0x45, 0x10, 0x00, 0x2a, 0x29, 0x0a, 0x0c, 0x53, 0x63, 0x67, 0x69,
	0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x19, 0x0a, 0x15, 0x53, 0x43, 0x47, 0x49,
	0x4e, 0x44, 0x49, 0x43, 0x41, 0x54, 0x4f, 0x52, 0x5f, 0x52, 0x45, 0x4c, 0x45, 0x41, 0x53, 0x45,
	0x44, 0x10, 0x00, 0x2a, 0xfa, 0x01, 0x0a, 0x2f, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x69, 0x74,
	0x79, 0x50, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x64, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x64,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x40, 0x0a, 0x3c, 0x49, 0x4e, 0x54, 0x45, 0x47,
	0x52, 0x49, 0x54, 0x59, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x49, 0x4e, 0x44, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x45, 0x43, 0x55, 0x52,
	0x49, 0x54, 0x59, 0x5f, 0x49, 0x4e, 0x44, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52,
	0x45, 0x51, 0x55, 0x49, 0x52, 0x45, 0x44, 0x10, 0x00, 0x12, 0x41, 0x0a, 0x3d, 0x49, 0x4e, 0x54,
	0x45, 0x47, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x45, 0x43, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x49, 0x4e, 0x44, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x45, 0x43,
	0x55, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x4e, 0x44, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x50, 0x52, 0x45, 0x46, 0x45, 0x52, 0x52, 0x45, 0x44, 0x10, 0x01, 0x12, 0x42, 0x0a, 0x3e,
	0x49, 0x4e, 0x54, 0x45, 0x47, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x45, 0x43,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x4e, 0x44, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x53, 0x45, 0x43, 0x55, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x4e, 0x44, 0x49, 0x43, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x4e, 0x45, 0x45, 0x44, 0x45, 0x44, 0x10, 0x02,
	0x2a, 0x92, 0x02, 0x0a, 0x35, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61,
	0x6c, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e,
	0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79,
	0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x46, 0x0a, 0x42, 0x43, 0x4f,
	0x4e, 0x46, 0x49, 0x44, 0x45, 0x4e, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x50, 0x52,
	0x4f, 0x54, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x4e, 0x44, 0x49, 0x43, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x45, 0x43, 0x55, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x4e, 0x44,
	0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x49, 0x52, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x47, 0x0a, 0x43, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x44, 0x45, 0x4e, 0x54, 0x49,
	0x41, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x49, 0x4e, 0x44, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x45, 0x43, 0x55,
	0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x4e, 0x44, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x50, 0x52, 0x45, 0x46, 0x45, 0x52, 0x52, 0x45, 0x44, 0x10, 0x01, 0x12, 0x48, 0x0a, 0x44, 0x43,
	0x4f, 0x4e, 0x46, 0x49, 0x44, 0x45, 0x4e, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x50,
	0x52, 0x4f, 0x54, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x4e, 0x44, 0x49, 0x43, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x45, 0x43, 0x55, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x4e,
	0x44, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x4e, 0x45, 0x45,
	0x44, 0x45, 0x44, 0x10, 0x02, 0x2a, 0xa3, 0x01, 0x0a, 0x27, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72,
	0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x12, 0x39, 0x0a, 0x35, 0x49, 0x4e, 0x54, 0x45, 0x47, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x50,
	0x52, 0x4f, 0x54, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54,
	0x5f, 0x53, 0x45, 0x43, 0x55, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54,
	0x5f, 0x50, 0x45, 0x52, 0x46, 0x4f, 0x52, 0x4d, 0x45, 0x44, 0x10, 0x00, 0x12, 0x3d, 0x0a, 0x39,
	0x49, 0x4e, 0x54, 0x45, 0x47, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x45, 0x43,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x53, 0x45, 0x43, 0x55,
	0x52, 0x49, 0x54, 0x59, 0x5f, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x4e, 0x4f, 0x54, 0x5f,
	0x50, 0x45, 0x52, 0x46, 0x4f, 0x52, 0x4d, 0x45, 0x44, 0x10, 0x01, 0x2a, 0xb5, 0x01, 0x0a, 0x2d,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x50,
	0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x53,
	0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x3f, 0x0a,
	0x3b, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x44, 0x45, 0x4e, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x54, 0x59,
	0x5f, 0x50, 0x52, 0x4f, 0x54, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x53, 0x55,
	0x4c, 0x54, 0x5f, 0x53, 0x45, 0x43, 0x55, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x52, 0x45, 0x53, 0x55,
	0x4c, 0x54, 0x5f, 0x50, 0x45, 0x52, 0x46, 0x4f, 0x52, 0x4d, 0x45, 0x44, 0x10, 0x00, 0x12, 0x43,
	0x0a, 0x3f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x44, 0x45, 0x4e, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x54,
	0x59, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x53,
	0x55, 0x4c, 0x54, 0x5f, 0x53, 0x45, 0x43, 0x55, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x52, 0x45, 0x53,
	0x55, 0x4c, 0x54, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x50, 0x45, 0x52, 0x46, 0x4f, 0x52, 0x4d, 0x45,
	0x44, 0x10, 0x01, 0x2a, 0x30, 0x0a, 0x10, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x4d, 0x65, 0x61,
	0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1c, 0x0a, 0x18, 0x53, 0x45, 0x4e, 0x53, 0x4f,
	0x52, 0x5f, 0x4d, 0x45, 0x41, 0x53, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x53, 0x45,
	0x54, 0x55, 0x50, 0x10, 0x00, 0x2a, 0x5f, 0x0a, 0x27, 0x55, 0x6e, 0x63, 0x6f, 0x6d, 0x70, 0x65,
	0x6e, 0x73, 0x61, 0x74, 0x65, 0x64, 0x42, 0x61, 0x72, 0x6f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x34, 0x0a, 0x30, 0x55, 0x4e, 0x43, 0x4f, 0x4d, 0x50, 0x45, 0x4e, 0x53, 0x41, 0x54, 0x45,
	0x44, 0x5f, 0x42, 0x41, 0x52, 0x4f, 0x4d, 0x45, 0x54, 0x52, 0x49, 0x43, 0x5f, 0x43, 0x4f, 0x4e,
	0x46, 0x49, 0x47, 0x5f, 0x53, 0x45, 0x4e, 0x53, 0x4f, 0x52, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x5f,
	0x54, 0x52, 0x55, 0x45, 0x10, 0x00, 0x2a, 0x3f, 0x0a, 0x17, 0x55, 0x65, 0x53, 0x70, 0x65, 0x65,
	0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x24, 0x0a, 0x20, 0x55, 0x45, 0x5f, 0x53, 0x50, 0x45, 0x45, 0x44, 0x5f, 0x43, 0x4f,
	0x4e, 0x46, 0x49, 0x47, 0x5f, 0x53, 0x45, 0x4e, 0x53, 0x4f, 0x52, 0x5f, 0x4e, 0x41, 0x4d, 0x45,
	0x5f, 0x54, 0x52, 0x55, 0x45, 0x10, 0x00, 0x2a, 0x4b, 0x0a, 0x1d, 0x55, 0x65, 0x4f, 0x72, 0x69,
	0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x65,
	0x6e, 0x73, 0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x26, 0x55, 0x45, 0x5f, 0x4f,
	0x52, 0x49, 0x45, 0x4e, 0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49,
	0x47, 0x5f, 0x53, 0x45, 0x4e, 0x53, 0x4f, 0x52, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x5f, 0x54, 0x52,
	0x55, 0x45, 0x10, 0x00, 0x2a, 0xcd, 0x01, 0x0a, 0x33, 0x46, 0x72, 0x65, 0x71, 0x42, 0x61, 0x6e,
	0x64, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69,
	0x74, 0x79, 0x53, 0x65, 0x72, 0x76, 0x65, 0x64, 0x43, 0x65, 0x6c, 0x6c, 0x49, 0x6e, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x75, 0x74, 0x72, 0x61, 0x12, 0x4c, 0x0a, 0x48,
	0x46, 0x52, 0x45, 0x51, 0x5f, 0x42, 0x41, 0x4e, 0x44, 0x5f, 0x49, 0x4e, 0x44, 0x49, 0x43, 0x41,
	0x54, 0x4f, 0x52, 0x5f, 0x50, 0x52, 0x49, 0x4f, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x45, 0x52,
	0x56, 0x45, 0x44, 0x5f, 0x43, 0x45, 0x4c, 0x4c, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x52, 0x4d, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x45, 0x55, 0x54, 0x52, 0x41, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x42,
	0x52, 0x4f, 0x41, 0x44, 0x43, 0x41, 0x53, 0x54, 0x10, 0x00, 0x12, 0x48, 0x0a, 0x44, 0x46, 0x52,
	0x45, 0x51, 0x5f, 0x42, 0x41, 0x4e, 0x44, 0x5f, 0x49, 0x4e, 0x44, 0x49, 0x43, 0x41, 0x54, 0x4f,
	0x52, 0x5f, 0x50, 0x52, 0x49, 0x4f, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x45,
	0x44, 0x5f, 0x43, 0x45, 0x4c, 0x4c, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x45, 0x55, 0x54, 0x52, 0x41, 0x5f, 0x42, 0x52, 0x4f, 0x41, 0x44, 0x43, 0x41,
	0x53, 0x54, 0x10, 0x01, 0x2a, 0x6f, 0x0a, 0x2c, 0x42, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74,
	0x68, 0x52, 0x65, 0x64, 0x75, 0x63, 0x65, 0x64, 0x53, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64,
	0x43, 0x65, 0x6c, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45,
	0x75, 0x74, 0x72, 0x61, 0x12, 0x3f, 0x0a, 0x3b, 0x42, 0x41, 0x4e, 0x44, 0x57, 0x49, 0x44, 0x54,
	0x48, 0x5f, 0x52, 0x45, 0x44, 0x55, 0x43, 0x45, 0x44, 0x5f, 0x53, 0x49, 0x53, 0x45, 0x52, 0x56,
	0x45, 0x44, 0x5f, 0x43, 0x45, 0x4c, 0x4c, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x45, 0x55, 0x54, 0x52, 0x41, 0x5f, 0x53, 0x43, 0x48, 0x45, 0x44, 0x55,
	0x4c, 0x45, 0x44, 0x10, 0x00, 0x2a, 0x83, 0x04, 0x0a, 0x33, 0x53, 0x75, 0x62, 0x66, 0x72, 0x61,
	0x6d, 0x65, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x6e, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x64, 0x43, 0x65, 0x6c, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x45, 0x75, 0x74, 0x72, 0x61, 0x74, 0x64, 0x64, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x40, 0x0a,
	0x3c, 0x53, 0x55, 0x42, 0x46, 0x52, 0x41, 0x4d, 0x45, 0x5f, 0x41, 0x53, 0x53, 0x49, 0x47, 0x4e,
	0x4d, 0x4e, 0x45, 0x54, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x45, 0x44, 0x5f, 0x43, 0x45, 0x4c, 0x4c,
	0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x45, 0x55, 0x54,
	0x52, 0x41, 0x54, 0x44, 0x44, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x53, 0x41, 0x30, 0x10, 0x00, 0x12,
	0x40, 0x0a, 0x3c, 0x53, 0x55, 0x42, 0x46, 0x52, 0x41, 0x4d, 0x45, 0x5f, 0x41, 0x53, 0x53, 0x49,
	0x47, 0x4e, 0x4d, 0x4e, 0x45, 0x54, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x45, 0x44, 0x5f, 0x43, 0x45,
	0x4c, 0x4c, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x45,
	0x55, 0x54, 0x52, 0x41, 0x54, 0x44, 0x44, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x53, 0x41, 0x31, 0x10,
	0x01, 0x12, 0x40, 0x0a, 0x3c, 0x53, 0x55, 0x42, 0x46, 0x52, 0x41, 0x4d, 0x45, 0x5f, 0x41, 0x53,
	0x53, 0x49, 0x47, 0x4e, 0x4d, 0x4e, 0x45, 0x54, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x45, 0x44, 0x5f,
	0x43, 0x45, 0x4c, 0x4c, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x45, 0x55, 0x54, 0x52, 0x41, 0x54, 0x44, 0x44, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x53, 0x41,
	0x32, 0x10, 0x02, 0x12, 0x40, 0x0a, 0x3c, 0x53, 0x55, 0x42, 0x46, 0x52, 0x41, 0x4d, 0x45, 0x5f,
	0x41, 0x53, 0x53, 0x49, 0x47, 0x4e, 0x4d, 0x4e, 0x45, 0x54, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x45,
	0x44, 0x5f, 0x43, 0x45, 0x4c, 0x4c, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x45, 0x55, 0x54, 0x52, 0x41, 0x54, 0x44, 0x44, 0x49, 0x4e, 0x46, 0x4f, 0x5f,
	0x53, 0x41, 0x33, 0x10, 0x03, 0x12, 0x40, 0x0a, 0x3c, 0x53, 0x55, 0x42, 0x46, 0x52, 0x41, 0x4d,
	0x45, 0x5f, 0x41, 0x53, 0x53, 0x49, 0x47, 0x4e, 0x4d, 0x4e, 0x45, 0x54, 0x5f, 0x53, 0x45, 0x52,
	0x56, 0x45, 0x44, 0x5f, 0x43, 0x45, 0x4c, 0x4c, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x52, 0x4d, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x45, 0x55, 0x54, 0x52, 0x41, 0x54, 0x44, 0x44, 0x49, 0x4e, 0x46,
	0x4f, 0x5f, 0x53, 0x41, 0x34, 0x10, 0x04, 0x12, 0x40, 0x0a, 0x3c, 0x53, 0x55, 0x42, 0x46, 0x52,
	0x41, 0x4d, 0x45, 0x5f, 0x41, 0x53, 0x53, 0x49, 0x47, 0x4e, 0x4d, 0x4e, 0x45, 0x54, 0x5f, 0x53,
	0x45, 0x52, 0x56, 0x45, 0x44, 0x5f, 0x43, 0x45, 0x4c, 0x4c, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x52,
	0x4d, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x45, 0x55, 0x54, 0x52, 0x41, 0x54, 0x44, 0x44, 0x49,
	0x4e, 0x46, 0x4f, 0x5f, 0x53, 0x41, 0x35, 0x10, 0x05, 0x12, 0x40, 0x0a, 0x3c, 0x53, 0x55, 0x42,
	0x46, 0x52, 0x41, 0x4d, 0x45, 0x5f, 0x41, 0x53, 0x53, 0x49, 0x47, 0x4e, 0x4d, 0x4e, 0x45, 0x54,
	0x5f, 0x53, 0x45, 0x52, 0x56, 0x45, 0x44, 0x5f, 0x43, 0x45, 0x4c, 0x4c, 0x5f, 0x49, 0x4e, 0x46,
	0x4f, 0x52, 0x4d, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x45, 0x55, 0x54, 0x52, 0x41, 0x54, 0x44,
	0x44, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x53, 0x41, 0x36, 0x10, 0x06, 0x2a, 0x7d, 0x0a, 0x32, 0x44,
	0x65, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x64, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x64, 0x43, 0x65, 0x6c, 0x6c, 0x73,
	0x54, 0x6f, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x45, 0x75, 0x74, 0x72, 0x61, 0x69, 0x74, 0x65,
	0x6d, 0x12, 0x47, 0x0a, 0x43, 0x44, 0x45, 0x41, 0x43, 0x54, 0x49, 0x56, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x49, 0x4e, 0x44, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x45, 0x52, 0x56,
	0x45, 0x44, 0x5f, 0x43, 0x45, 0x4c, 0x4c, 0x53, 0x5f, 0x54, 0x4f, 0x5f, 0x4d, 0x4f, 0x44, 0x49,
	0x46, 0x59, 0x5f, 0x45, 0x55, 0x54, 0x52, 0x41, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x44, 0x45, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x41, 0x54, 0x45, 0x44, 0x10, 0x00, 0x2a, 0x77, 0x0a, 0x2f, 0x44, 0x65,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x64, 0x43, 0x65, 0x6c, 0x6c, 0x73, 0x54,
	0x6f, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x4e, 0x72, 0x69, 0x74, 0x65, 0x6d, 0x12, 0x44, 0x0a,
	0x40, 0x44, 0x45, 0x41, 0x43, 0x54, 0x49, 0x56, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x49, 0x4e, 0x44,
	0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x45, 0x44, 0x5f, 0x43,
	0x45, 0x4c, 0x4c, 0x53, 0x5f, 0x54, 0x4f, 0x5f, 0x4d, 0x4f, 0x44, 0x49, 0x46, 0x59, 0x5f, 0x4e,
	0x52, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x44, 0x45, 0x41, 0x43, 0x54, 0x49, 0x56, 0x41, 0x54, 0x45,
	0x44, 0x10, 0x00, 0x2a, 0xb5, 0x01, 0x0a, 0x1c, 0x53, 0x4e, 0x47, 0x52, 0x41, 0x6e, 0x6e, 0x6f,
	0x64, 0x65, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65,
	0x72, 0x49, 0x6e, 0x64, 0x12, 0x2f, 0x0a, 0x2b, 0x53, 0x5f, 0x4e, 0x47, 0x5f, 0x52, 0x41, 0x4e,
	0x4e, 0x4f, 0x44, 0x45, 0x5f, 0x41, 0x44, 0x44, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x52,
	0x49, 0x47, 0x47, 0x45, 0x52, 0x5f, 0x49, 0x4e, 0x44, 0x5f, 0x53, 0x4e, 0x5f, 0x43, 0x48, 0x41,
	0x4e, 0x47, 0x45, 0x10, 0x00, 0x12, 0x31, 0x0a, 0x2d, 0x53, 0x5f, 0x4e, 0x47, 0x5f, 0x52, 0x41,
	0x4e, 0x4e, 0x4f, 0x44, 0x45, 0x5f, 0x41, 0x44, 0x44, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54,
	0x52, 0x49, 0x47, 0x47, 0x45, 0x52, 0x5f, 0x49, 0x4e, 0x44, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52,
	0x5f, 0x4d, 0x4e, 0x5f, 0x48, 0x4f, 0x10, 0x01, 0x12, 0x31, 0x0a, 0x2d, 0x53, 0x5f, 0x4e, 0x47,
	0x5f, 0x52, 0x41, 0x4e, 0x4e, 0x4f, 0x44, 0x45, 0x5f, 0x41, 0x44, 0x44, 0x49, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x54, 0x52, 0x49, 0x47, 0x47, 0x45, 0x52, 0x5f, 0x49, 0x4e, 0x44, 0x5f, 0x49, 0x4e,
	0x54, 0x52, 0x41, 0x5f, 0x4d, 0x4e, 0x5f, 0x48, 0x4f, 0x10, 0x02, 0x2a, 0x23, 0x0a, 0x0b, 0x53,
	0x6e, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x65, 0x64, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x4e,
	0x54, 0x52, 0x49, 0x47, 0x47, 0x45, 0x52, 0x45, 0x44, 0x5f, 0x54, 0x52, 0x55, 0x45, 0x10, 0x00,
	0x2a, 0xf8, 0x03, 0x0a, 0x1c, 0x53, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x53, 0x75, 0x62, 0x66,
	0x72, 0x61, 0x6d, 0x65, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x73, 0x45, 0x55, 0x54, 0x72,
	0x61, 0x12, 0x29, 0x0a, 0x25, 0x53, 0x50, 0x45, 0x43, 0x49, 0x41, 0x4c, 0x5f, 0x53, 0x55, 0x42,
	0x46, 0x52, 0x41, 0x4d, 0x45, 0x5f, 0x50, 0x41, 0x54, 0x54, 0x45, 0x52, 0x4e, 0x53, 0x5f, 0x45,
	0x5f, 0x55, 0x54, 0x52, 0x41, 0x5f, 0x53, 0x53, 0x50, 0x30, 0x10, 0x00, 0x12, 0x29, 0x0a, 0x25,
	0x53, 0x50, 0x45, 0x43, 0x49, 0x41, 0x4c, 0x5f, 0x53, 0x55, 0x42, 0x46, 0x52, 0x41, 0x4d, 0x45,
	0x5f, 0x50, 0x41, 0x54, 0x54, 0x45, 0x52, 0x4e, 0x53, 0x5f, 0x45, 0x5f, 0x55, 0x54, 0x52, 0x41,
	0x5f, 0x53, 0x53, 0x50, 0x31, 0x10, 0x01, 0x12, 0x29, 0x0a, 0x25, 0x53, 0x50, 0x45, 0x43, 0x49,
	0x41, 0x4c, 0x5f, 0x53, 0x55, 0x42, 0x46, 0x52, 0x41, 0x4d, 0x45, 0x5f, 0x50, 0x41, 0x54, 0x54,
	0x45, 0x52, 0x4e, 0x53, 0x5f, 0x45, 0x5f, 0x55, 0x54, 0x52, 0x41, 0x5f, 0x53, 0x53, 0x50, 0x32,
	0x10, 0x02, 0x12, 0x29, 0x0a, 0x25, 0x53, 0x50, 0x45, 0x43, 0x49, 0x41, 0x4c, 0x5f, 0x53, 0x55,
	0x42, 0x46, 0x52, 0x41, 0x4d, 0x45, 0x5f, 0x50, 0x41, 0x54, 0x54, 0x45, 0x52, 0x4e, 0x53, 0x5f,
	0x45, 0x5f, 0x55, 0x54, 0x52, 0x41, 0x5f, 0x53, 0x53, 0x50, 0x33, 0x10, 0x03, 0x12, 0x29, 0x0a,
	0x25, 0x53, 0x50, 0x45, 0x43, 0x49, 0x41, 0x4c, 0x5f, 0x53, 0x55, 0x42, 0x46, 0x52, 0x41, 0x4d,
	0x45, 0x5f, 0x50, 0x41, 0x54, 0x54, 0x45, 0x52, 0x4e, 0x53, 0x5f, 0x45, 0x5f, 0x55, 0x54, 0x52,
	0x41, 0x5f, 0x53, 0x53, 0x50, 0x34, 0x10, 0x04, 0x12, 0x29, 0x0a, 0x25, 0x53, 0x50, 0x45, 0x43,
	0x49, 0x41, 0x4c, 0x5f, 0x53, 0x55, 0x42, 0x46, 0x52, 0x41, 0x4d, 0x45, 0x5f, 0x50, 0x41, 0x54,
	0x54, 0x45, 0x52, 0x4e, 0x53, 0x5f, 0x45, 0x5f, 0x55, 0x54, 0x52, 0x41, 0x5f, 0x53, 0x53, 0x50,
	0x35, 0x10, 0x05, 0x12, 0x29, 0x0a, 0x25, 0x53, 0x50, 0x45, 0x43, 0x49, 0x41, 0x4c, 0x5f, 0x53,
	0x55, 0x42, 0x46, 0x52, 0x41, 0x4d, 0x45, 0x5f, 0x50, 0x41, 0x54, 0x54, 0x45, 0x52, 0x4e, 0x53,
	0x5f, 0x45, 0x5f, 0x55, 0x54, 0x52, 0x41, 0x5f, 0x53, 0x53, 0x50, 0x36, 0x10, 0x06, 0x12, 0x29,
	0x0a, 0x25, 0x53, 0x50, 0x45, 0x43, 0x49, 0x41, 0x4c, 0x5f, 0x53, 0x55, 0x42, 0x46, 0x52, 0x41,
	0x4d, 0x45, 0x5f, 0x50, 0x41, 0x54, 0x54, 0x45, 0x52, 0x4e, 0x53, 0x5f, 0x45, 0x5f, 0x55, 0x54,
	0x52, 0x41, 0x5f, 0x53, 0x53, 0x50, 0x37, 0x10, 0x07, 0x12, 0x29, 0x0a, 0x25, 0x53, 0x50, 0x45,
	0x43, 0x49, 0x41, 0x4c, 0x5f, 0x53, 0x55, 0x42, 0x46, 0x52, 0x41, 0x4d, 0x45, 0x5f, 0x50, 0x41,
	0x54, 0x54, 0x45, 0x52, 0x4e, 0x53, 0x5f, 0x45, 0x5f, 0x55, 0x54, 0x52, 0x41, 0x5f, 0x53, 0x53,
	0x50, 0x38, 0x10, 0x08, 0x12, 0x29, 0x0a, 0x25, 0x53, 0x50, 0x45, 0x43, 0x49, 0x41, 0x4c, 0x5f,
	0x53, 0x55, 0x42, 0x46, 0x52, 0x41, 0x4d, 0x45, 0x5f, 0x50, 0x41, 0x54, 0x54, 0x45, 0x52, 0x4e,
	0x53, 0x5f, 0x45, 0x5f, 0x55, 0x54, 0x52, 0x41, 0x5f, 0x53, 0x53, 0x50, 0x39, 0x10, 0x09, 0x12,
	0x2a, 0x0a, 0x26, 0x53, 0x50, 0x45, 0x43, 0x49, 0x41, 0x4c, 0x5f, 0x53, 0x55, 0x42, 0x46, 0x52,
	0x41, 0x4d, 0x45, 0x5f, 0x50, 0x41, 0x54, 0x54, 0x45, 0x52, 0x4e, 0x53, 0x5f, 0x45, 0x5f, 0x55,
	0x54, 0x52, 0x41, 0x5f, 0x53, 0x53, 0x50, 0x31, 0x30, 0x10, 0x0a, 0x2a, 0x3a, 0x0a, 0x15, 0x53,
	0x70, 0x6c, 0x69, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x64, 0x69, 0x63,
	0x61, 0x74, 0x6f, 0x72, 0x12, 0x21, 0x0a, 0x1d, 0x53, 0x50, 0x4c, 0x49, 0x54, 0x5f, 0x53, 0x45,
	0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x4e, 0x44, 0x49, 0x43, 0x41, 0x54, 0x4f, 0x52, 0x5f,
	0x53, 0x50, 0x4c, 0x49, 0x54, 0x10, 0x00, 0x2a, 0x65, 0x0a, 0x0e, 0x53, 0x70, 0x6c, 0x69, 0x74,
	0x53, 0x72, 0x62, 0x73, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x19, 0x0a, 0x15, 0x53, 0x50, 0x4c,
	0x49, 0x54, 0x5f, 0x53, 0x52, 0x42, 0x53, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x53, 0x5f, 0x53, 0x52,
	0x42, 0x31, 0x10, 0x00, 0x12, 0x19, 0x0a, 0x15, 0x53, 0x50, 0x4c, 0x49, 0x54, 0x5f, 0x53, 0x52,
	0x42, 0x53, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x53, 0x5f, 0x53, 0x52, 0x42, 0x32, 0x10, 0x01, 0x12,
	0x1d, 0x0a, 0x19, 0x53, 0x50, 0x4c, 0x49, 0x54, 0x5f, 0x53, 0x52, 0x42, 0x53, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x53, 0x5f, 0x53, 0x52, 0x42, 0x31, 0x41, 0x4e, 0x44, 0x32, 0x10, 0x02, 0x2a, 0xbe,
	0x03, 0x0a, 0x0d, 0x54, 0x69, 0x6d, 0x65, 0x54, 0x6f, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72,
	0x12, 0x17, 0x0a, 0x13, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x54, 0x4f, 0x5f, 0x54, 0x52, 0x49, 0x47,
	0x47, 0x45, 0x52, 0x5f, 0x4d, 0x53, 0x30, 0x10, 0x00, 0x12, 0x18, 0x0a, 0x14, 0x54, 0x49, 0x4d,
	0x45, 0x5f, 0x54, 0x4f, 0x5f, 0x54, 0x52, 0x49, 0x47, 0x47, 0x45, 0x52, 0x5f, 0x4d, 0x53, 0x34,
	0x30, 0x10, 0x01, 0x12, 0x18, 0x0a, 0x14, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x54, 0x4f, 0x5f, 0x54,
	0x52, 0x49, 0x47, 0x47, 0x45, 0x52, 0x5f, 0x4d, 0x53, 0x36, 0x34, 0x10, 0x02, 0x12, 0x18, 0x0a,
	0x14, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x54, 0x4f, 0x5f, 0x54, 0x52, 0x49, 0x47, 0x47, 0x45, 0x52,
	0x5f, 0x4d, 0x53, 0x38, 0x30, 0x10, 0x03, 0x12, 0x19, 0x0a, 0x15, 0x54, 0x49, 0x4d, 0x45, 0x5f,
	0x54, 0x4f, 0x5f, 0x54, 0x52, 0x49, 0x47, 0x47, 0x45, 0x52, 0x5f, 0x4d, 0x53, 0x31, 0x30, 0x30,
	0x10, 0x04, 0x12, 0x19, 0x0a, 0x15, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x54, 0x4f, 0x5f, 0x54, 0x52,
	0x49, 0x47, 0x47, 0x45, 0x52, 0x5f, 0x4d, 0x53, 0x31, 0x32, 0x38, 0x10, 0x05, 0x12, 0x19, 0x0a,
	0x15, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x54, 0x4f, 0x5f, 0x54, 0x52, 0x49, 0x47, 0x47, 0x45, 0x52,
	0x5f, 0x4d, 0x53, 0x31, 0x36, 0x30, 0x10, 0x06, 0x12, 0x19, 0x0a, 0x15, 0x54, 0x49, 0x4d, 0x45,
	0x5f, 0x54, 0x4f, 0x5f, 0x54, 0x52, 0x49, 0x47, 0x47, 0x45, 0x52, 0x5f, 0x4d, 0x53, 0x32, 0x35,
	0x36, 0x10, 0x07, 0x12, 0x19, 0x0a, 0x15, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x54, 0x4f, 0x5f, 0x54,
	0x52, 0x49, 0x47, 0x47, 0x45, 0x52, 0x5f, 0x4d, 0x53, 0x33, 0x32, 0x30, 0x10, 0x08, 0x12, 0x19,
	0x0a, 0x15, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x54, 0x4f, 0x5f, 0x54, 0x52, 0x49, 0x47, 0x47, 0x45,
	0x52, 0x5f, 0x4d, 0x53, 0x34, 0x38, 0x30, 0x10, 0x09, 0x12, 0x19, 0x0a, 0x15, 0x54, 0x49, 0x4d,
	0x45, 0x5f, 0x54, 0x4f, 0x5f, 0x54, 0x52, 0x49, 0x47, 0x47, 0x45, 0x52, 0x5f, 0x4d, 0x53, 0x35,
	0x31, 0x32, 0x10, 0x0a, 0x12, 0x19, 0x0a, 0x15, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x54, 0x4f, 0x5f,
	0x54, 0x52, 0x49, 0x47, 0x47, 0x45, 0x52, 0x5f, 0x4d, 0x53, 0x36, 0x34, 0x30, 0x10, 0x0b, 0x12,
	0x1a, 0x0a, 0x16, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x54, 0x4f, 0x5f, 0x54, 0x52, 0x49, 0x47, 0x47,
	0x45, 0x52, 0x5f, 0x4d, 0x53, 0x31, 0x30, 0x32, 0x34, 0x10, 0x0c, 0x12, 0x1a, 0x0a, 0x16, 0x54,
	0x49, 0x4d, 0x45, 0x5f, 0x54, 0x4f, 0x5f, 0x54, 0x52, 0x49, 0x47, 0x47, 0x45, 0x52, 0x5f, 0x4d,
	0x53, 0x31, 0x32, 0x38, 0x30, 0x10, 0x0d, 0x12, 0x1a, 0x0a, 0x16, 0x54, 0x49, 0x4d, 0x45, 0x5f,
	0x54, 0x4f, 0x5f, 0x54, 0x52, 0x49, 0x47, 0x47, 0x45, 0x52, 0x5f, 0x4d, 0x53, 0x32, 0x35, 0x36,
	0x30, 0x10, 0x0e, 0x12, 0x1a, 0x0a, 0x16, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x54, 0x4f, 0x5f, 0x54,
	0x52, 0x49, 0x47, 0x47, 0x45, 0x52, 0x5f, 0x4d, 0x53, 0x35, 0x31, 0x32, 0x30, 0x10, 0x0f, 0x2a,
	0x93, 0x01, 0x0a, 0x0a, 0x54, 0x69, 0x6d, 0x65, 0x54, 0x6f, 0x57, 0x61, 0x69, 0x74, 0x12, 0x14,
	0x0a, 0x10, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x54, 0x4f, 0x5f, 0x57, 0x41, 0x49, 0x54, 0x5f, 0x56,
	0x31, 0x53, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x54, 0x4f, 0x5f,
	0x57, 0x41, 0x49, 0x54, 0x5f, 0x56, 0x32, 0x53, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x54, 0x49,
	0x4d, 0x45, 0x5f, 0x54, 0x4f, 0x5f, 0x57, 0x41, 0x49, 0x54, 0x5f, 0x56, 0x35, 0x53, 0x10, 0x02,
	0x12, 0x15, 0x0a, 0x11, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x54, 0x4f, 0x5f, 0x57, 0x41, 0x49, 0x54,
	0x5f, 0x56, 0x31, 0x30, 0x53, 0x10, 0x03, 0x12, 0x15, 0x0a, 0x11, 0x54, 0x49, 0x4d, 0x45, 0x5f,
	0x54, 0x4f, 0x5f, 0x57, 0x41, 0x49, 0x54, 0x5f, 0x56, 0x32, 0x30, 0x53, 0x10, 0x04, 0x12, 0x15,
	0x0a, 0x11, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x54, 0x4f, 0x5f, 0x57, 0x41, 0x49, 0x54, 0x5f, 0x56,
	0x36, 0x30, 0x53, 0x10, 0x05, 0x2a, 0x72, 0x0a, 0x13, 0x54, 0x6e, 0x6c, 0x61, 0x73, 0x73, 0x6f,
	0x63, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1b, 0x0a, 0x17,
	0x54, 0x4e, 0x4c, 0x41, 0x53, 0x53, 0x4f, 0x43, 0x49, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x55,
	0x53, 0x41, 0x47, 0x45, 0x5f, 0x55, 0x45, 0x10, 0x00, 0x12, 0x1f, 0x0a, 0x1b, 0x54, 0x4e, 0x4c,
	0x41, 0x53, 0x53, 0x4f, 0x43, 0x49, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x53, 0x41, 0x47,
	0x45, 0x5f, 0x4e, 0x4f, 0x4e, 0x5f, 0x55, 0x45, 0x10, 0x01, 0x12, 0x1d, 0x0a, 0x19, 0x54, 0x4e,
	0x4c, 0x41, 0x53, 0x53, 0x4f, 0x43, 0x49, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x53, 0x41,
	0x47, 0x45, 0x5f, 0x42, 0x4f, 0x54, 0x48, 0x10, 0x02, 0x2a, 0x86, 0x02, 0x0a, 0x0a, 0x54, 0x72,
	0x61, 0x63, 0x65, 0x44, 0x65, 0x70, 0x74, 0x68, 0x12, 0x17, 0x0a, 0x13, 0x54, 0x52, 0x41, 0x43,
	0x45, 0x5f, 0x44, 0x45, 0x50, 0x54, 0x48, 0x5f, 0x4d, 0x49, 0x4e, 0x49, 0x4d, 0x55, 0x4d, 0x10,
	0x00, 0x12, 0x16, 0x0a, 0x12, 0x54, 0x52, 0x41, 0x43, 0x45, 0x5f, 0x44, 0x45, 0x50, 0x54, 0x48,
	0x5f, 0x4d, 0x45, 0x44, 0x49, 0x55, 0x4d, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x54, 0x52, 0x41,
	0x43, 0x45, 0x5f, 0x44, 0x45, 0x50, 0x54, 0x48, 0x5f, 0x4d, 0x41, 0x58, 0x49, 0x4d, 0x55, 0x4d,
	0x10, 0x02, 0x12, 0x39, 0x0a, 0x35, 0x54, 0x52, 0x41, 0x43, 0x45, 0x5f, 0x44, 0x45, 0x50, 0x54,
	0x48, 0x5f, 0x4d, 0x49, 0x4e, 0x49, 0x4d, 0x55, 0x4d, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x4f, 0x55,
	0x54, 0x5f, 0x56, 0x45, 0x4e, 0x44, 0x4f, 0x52, 0x5f, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49,
	0x43, 0x5f, 0x45, 0x58, 0x54, 0x45, 0x4e, 0x53, 0x49, 0x4f, 0x4e, 0x10, 0x03, 0x12, 0x38, 0x0a,
	0x34, 0x54, 0x52, 0x41, 0x43, 0x45, 0x5f, 0x44, 0x45, 0x50, 0x54, 0x48, 0x5f, 0x4d, 0x45, 0x44,
	0x49, 0x55, 0x4d, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x4f, 0x55, 0x54, 0x5f, 0x56, 0x45, 0x4e, 0x44,
	0x4f, 0x52, 0x5f, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x43, 0x5f, 0x45, 0x58, 0x54, 0x45,
	0x4e, 0x53, 0x49, 0x4f, 0x4e, 0x10, 0x04, 0x12, 0x39, 0x0a, 0x35, 0x54, 0x52, 0x41, 0x43, 0x45,
	0x5f, 0x44, 0x45, 0x50, 0x54, 0x48, 0x5f, 0x4d, 0x41, 0x58, 0x49, 0x4d, 0x55, 0x4d, 0x5f, 0x57,
	0x49, 0x54, 0x48, 0x4f, 0x55, 0x54, 0x5f, 0x56, 0x45, 0x4e, 0x44, 0x4f, 0x52, 0x5f, 0x53, 0x50,
	0x45, 0x43, 0x49, 0x46, 0x49, 0x43, 0x5f, 0x45, 0x58, 0x54, 0x45, 0x4e, 0x53, 0x49, 0x4f, 0x4e,
	0x10, 0x05, 0x2a, 0x4a, 0x0a, 0x0b, 0x54, 0x79, 0x70, 0x65, 0x4f, 0x66, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x12, 0x20, 0x0a, 0x1c, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4f, 0x46, 0x5f, 0x45, 0x52, 0x52,
	0x4f, 0x52, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x55, 0x4e, 0x44, 0x45, 0x52, 0x53, 0x54, 0x4f, 0x4f,
	0x44, 0x10, 0x00, 0x12, 0x19, 0x0a, 0x15, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4f, 0x46, 0x5f, 0x45,
	0x52, 0x52, 0x4f, 0x52, 0x5f, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x2a, 0x3b,
	0x0a, 0x16, 0x55, 0x65, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x4b, 0x65, 0x70, 0x74, 0x49,
	0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x21, 0x0a, 0x1d, 0x55, 0x45, 0x43, 0x4f,
	0x4e, 0x54, 0x45, 0x58, 0x54, 0x5f, 0x4b, 0x45, 0x50, 0x54, 0x5f, 0x49, 0x4e, 0x44, 0x49, 0x43,
	0x41, 0x54, 0x4f, 0x52, 0x5f, 0x54, 0x52, 0x55, 0x45, 0x10, 0x00, 0x2a, 0x71, 0x0a, 0x0d, 0x55,
	0x65, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x44, 0x72, 0x78, 0x12, 0x16, 0x0a, 0x12,
	0x55, 0x45, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x43, 0x5f, 0x44, 0x52, 0x58, 0x5f, 0x56,
	0x33, 0x32, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x55, 0x45, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46,
	0x49, 0x43, 0x5f, 0x44, 0x52, 0x58, 0x5f, 0x56, 0x36, 0x34, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13,
	0x55, 0x45, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x43, 0x5f, 0x44, 0x52, 0x58, 0x5f, 0x56,
	0x31, 0x32, 0x38, 0x10, 0x02, 0x12, 0x17, 0x0a, 0x13, 0x55, 0x45, 0x53, 0x50, 0x45, 0x43, 0x49,
	0x46, 0x49, 0x43, 0x5f, 0x44, 0x52, 0x58, 0x5f, 0x56, 0x32, 0x35, 0x36, 0x10, 0x03, 0x2a, 0x72,
	0x0a, 0x11, 0x55, 0x6c, 0x55, 0x45, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x1b, 0x55, 0x4c, 0x5f, 0x55, 0x45, 0x5f, 0x43, 0x4f, 0x4e,
	0x46, 0x49, 0x47, 0x55, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4e, 0x4f, 0x5f, 0x44, 0x41,
	0x54, 0x41, 0x10, 0x00, 0x12, 0x1e, 0x0a, 0x1a, 0x55, 0x4c, 0x5f, 0x55, 0x45, 0x5f, 0x43, 0x4f,
	0x4e, 0x46, 0x49, 0x47, 0x55, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x48, 0x41, 0x52,
	0x45, 0x44, 0x10, 0x01, 0x12, 0x1c, 0x0a, 0x18, 0x55, 0x4c, 0x5f, 0x55, 0x45, 0x5f, 0x43, 0x4f,
	0x4e, 0x46, 0x49, 0x47, 0x55, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4f, 0x4e, 0x4c, 0x59,
	0x10, 0x02, 0x2a, 0x37, 0x0a, 0x0c, 0x55, 0x6c, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69,
	0x6e, 0x67, 0x12, 0x27, 0x0a, 0x23, 0x55, 0x4c, 0x46, 0x4f, 0x52, 0x57, 0x41, 0x52, 0x44, 0x49,
	0x4e, 0x47, 0x5f, 0x55, 0x4c, 0x5f, 0x46, 0x4f, 0x52, 0x57, 0x41, 0x52, 0x44, 0x49, 0x4e, 0x47,
	0x5f, 0x50, 0x52, 0x4f, 0x50, 0x4f, 0x53, 0x45, 0x44, 0x10, 0x00, 0x2a, 0x48, 0x0a, 0x14, 0x55,
	0x6c, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x70, 0x6f,
	0x73, 0x61, 0x6c, 0x12, 0x30, 0x0a, 0x2c, 0x55, 0x4c, 0x46, 0x4f, 0x52, 0x57, 0x41, 0x52, 0x44,
	0x49, 0x4e, 0x47, 0x5f, 0x50, 0x52, 0x4f, 0x50, 0x4f, 0x53, 0x41, 0x4c, 0x5f, 0x55, 0x4c, 0x5f,
	0x46, 0x4f, 0x52, 0x57, 0x41, 0x52, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x50, 0x52, 0x4f, 0x50, 0x4f,
	0x53, 0x45, 0x44, 0x10, 0x00, 0x2a, 0x86, 0x01, 0x0a, 0x1e, 0x55, 0x73, 0x65, 0x72, 0x50, 0x6c,
	0x61, 0x6e, 0x65, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x2f, 0x0a, 0x2b, 0x55, 0x53, 0x45, 0x52,
	0x5f, 0x50, 0x4c, 0x41, 0x4e, 0x45, 0x5f, 0x54, 0x52, 0x41, 0x46, 0x46, 0x49, 0x43, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x52, 0x45, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x49,
	0x4e, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x00, 0x12, 0x33, 0x0a, 0x2f, 0x55, 0x53, 0x45,
	0x52, 0x5f, 0x50, 0x4c, 0x41, 0x4e, 0x45, 0x5f, 0x54, 0x52, 0x41, 0x46, 0x46, 0x49, 0x43, 0x5f,
	0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x52, 0x45, 0x50, 0x4f, 0x52, 0x54, 0x5f,
	0x52, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x41, 0x54, 0x45, 0x44, 0x10, 0x01, 0x2a, 0x45,
	0x0a, 0x09, 0x56, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x55, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x56,
	0x45, 0x48, 0x49, 0x43, 0x4c, 0x45, 0x5f, 0x55, 0x45, 0x5f, 0x41, 0x55, 0x54, 0x48, 0x4f, 0x52,
	0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1d, 0x0a, 0x19, 0x56, 0x45, 0x48, 0x49, 0x43, 0x4c,
	0x45, 0x5f, 0x55, 0x45, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x41, 0x55, 0x54, 0x48, 0x4f, 0x52, 0x49,
	0x5a, 0x45, 0x44, 0x10, 0x01, 0x2a, 0x57, 0x0a, 0x24, 0x57, 0x6c, 0x61, 0x6e, 0x72, 0x73, 0x73,
	0x69, 0x57, 0x6c, 0x61, 0x6e, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2f, 0x0a,
	0x2b, 0x57, 0x4c, 0x41, 0x4e, 0x52, 0x53, 0x53, 0x49, 0x5f, 0x57, 0x4c, 0x41, 0x4e, 0x4d, 0x45,
	0x41, 0x53, 0x55, 0x52, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47,
	0x55, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x52, 0x55, 0x45, 0x10, 0x00, 0x2a, 0x55,
	0x0a, 0x23, 0x57, 0x6c, 0x61, 0x6e, 0x72, 0x74, 0x74, 0x57, 0x6c, 0x61, 0x6e, 0x6d, 0x65, 0x61,
	0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x2a, 0x57, 0x4c, 0x41, 0x4e, 0x52, 0x54, 0x54,
	0x5f, 0x57, 0x4c, 0x41, 0x4e, 0x4d, 0x45, 0x41, 0x53, 0x55, 0x52, 0x45, 0x4d, 0x45, 0x4e, 0x54,
	0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x55, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54,
	0x52, 0x55, 0x45, 0x10, 0x00, 0x2a, 0x2b, 0x0a, 0x0e, 0x57, 0x6c, 0x61, 0x6e, 0x6d, 0x65, 0x61,
	0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x19, 0x0a, 0x15, 0x57, 0x4c, 0x41, 0x4e, 0x4d,
	0x45, 0x41, 0x53, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x53, 0x45, 0x54, 0x55, 0x50,
	0x10, 0x00, 0x42, 0x40, 0x5a, 0x3e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x6f, 0x6e, 0x6f, 0x73, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2f, 0x6f, 0x6e, 0x6f,
	0x73, 0x2d, 0x65, 0x32, 0x74, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x78, 0x6e, 0x61, 0x70, 0x2f, 0x76,
	0x31, 0x2f, 0x78, 0x6e, 0x61, 0x70, 0x2d, 0x69, 0x65, 0x73, 0x3b, 0x78, 0x6e, 0x61, 0x70, 0x69,
	0x65, 0x73, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_api_xnap_v1_xnap_ies_proto_rawDescOnce sync.Once
	file_api_xnap_v1_xnap_ies_proto_rawDescData = file_api_xnap_v1_xnap_ies_proto_rawDesc
)

func file_api_xnap_v1_xnap_ies_proto_rawDescGZIP() []byte {
	file_api_xnap_v1_xnap_ies_proto_rawDescOnce.Do(func() {
		file_api_xnap_v1_xnap_ies_proto_rawDescData = protoimpl.X.CompressGZIP(file_api_xnap_v1_xnap_ies_proto_rawDescData)
	})
	return file_api_xnap_v1_xnap_ies_proto_rawDescData
}

var file_api_xnap_v1_xnap_ies_proto_enumTypes = make([]protoimpl.EnumInfo, 143)
var file_api_xnap_v1_xnap_ies_proto_msgTypes = make([]protoimpl.MessageInfo, 931)
var file_api_xnap_v1_xnap_ies_proto_goTypes = []interface{}{
	(AdditionLocationInformation)(0),                                // 0: xnap.v1.AdditionLocationInformation
	(PreemptioncapabilityAllocationandRetentionPriority)(0),         // 1: xnap.v1.PreemptioncapabilityAllocationandRetentionPriority
	(PreemptionvulnerabilityAllocationandRetentionPriority)(0),      // 2: xnap.v1.PreemptionvulnerabilityAllocationandRetentionPriority
	(BtrssiBluetoothMeasurementConfiguration)(0),                    // 3: xnap.v1.BtrssiBluetoothMeasurementConfiguration
	(BluetoothMeasConfig)(0),                                        // 4: xnap.v1.BluetoothMeasConfig
	(CauseRadioNetworkLayer)(0),                                     // 5: xnap.v1.CauseRadioNetworkLayer
	(CauseTransportLayer)(0),                                        // 6: xnap.v1.CauseTransportLayer
	(CauseProtocol)(0),                                              // 7: xnap.v1.CauseProtocol
	(CauseMisc)(0),                                                  // 8: xnap.v1.CauseMisc
	(FullListCellAssistanceInfoNr)(0),                               // 9: xnap.v1.FullListCellAssistanceInfoNr
	(FullListCellAssistanceInfoEutra)(0),                            // 10: xnap.v1.FullListCellAssistanceInfoEutra
	(ChoMRdcEarlyDataForwarding)(0),                                 // 11: xnap.v1.ChoMRdcEarlyDataForwarding
	(ChoMRdcIndicator)(0),                                           // 12: xnap.v1.ChoMRdcIndicator
	(Chotrigger)(0),                                                 // 13: xnap.v1.Chotrigger
	(ConfiguredTacindication)(0),                                    // 14: xnap.v1.ConfiguredTacindication
	(EndcsupportConnectivitySupport)(0),                             // 15: xnap.v1.EndcsupportConnectivitySupport
	(CyclicPrefixEUTraDL)(0),                                        // 16: xnap.v1.CyclicPrefixEUTraDL
	(CyclicPrefixEUTraUL)(0),                                        // 17: xnap.v1.CyclicPrefixEUTraUL
	(CsiRStransmissionIndication)(0),                                // 18: xnap.v1.CsiRStransmissionIndication
	(DataForwardingAccepted)(0),                                     // 19: xnap.v1.DataForwardingAccepted
	(DapsIndicatorDapsrequestInfo)(0),                               // 20: xnap.v1.DapsIndicatorDapsrequestInfo
	(DapsResponseIndicatorDapsresponseInfoItem)(0),                  // 21: xnap.v1.DapsResponseIndicatorDapsresponseInfoItem
	(DesiredActNotificationLevel)(0),                                // 22: xnap.v1.DesiredActNotificationLevel
	(DefaultDrbAllowed)(0),                                          // 23: xnap.v1.DefaultDrbAllowed
	(DirectForwardingPathAvailability)(0),                           // 24: xnap.v1.DirectForwardingPathAvailability
	(Dlforwarding)(0),                                               // 25: xnap.v1.Dlforwarding
	(DuplicationActivation)(0),                                      // 26: xnap.v1.DuplicationActivation
	(DelayCriticalDynamic5Qidescriptor)(0),                          // 27: xnap.v1.DelayCriticalDynamic5Qidescriptor
	(HighSpeedFlagEutraprachconfiguration)(0),                       // 28: xnap.v1.HighSpeedFlagEutraprachconfiguration
	(EUTratransmissionBandwidth)(0),                                 // 29: xnap.v1.EUTratransmissionBandwidth
	(EventType)(0),                                                  // 30: xnap.v1.EventType
	(OutOfCoverageEventTypeTrigger)(0),                              // 31: xnap.v1.OutOfCoverageEventTypeTrigger
	(ExpectedHointerval)(0),                                         // 32: xnap.v1.ExpectedHointerval
	(ExpectedUemobility)(0),                                         // 33: xnap.v1.ExpectedUemobility
	(SourceOfUeactivityBehaviourInformation)(0),                     // 34: xnap.v1.SourceOfUeactivityBehaviourInformation
	(FrequencyShift7P5Khz)(0),                                       // 35: xnap.v1.FrequencyShift7p5khz
	(NotificationControlGbrqoSflowInfo)(0),                          // 36: xnap.v1.NotificationControlGbrqoSflowInfo
	(HandoverReportType)(0),                                         // 37: xnap.v1.HandoverReportType
	(IabnodeIndication)(0),                                          // 38: xnap.v1.IabnodeIndication
	(Linkstolog)(0),                                                 // 39: xnap.v1.Linkstolog
	(LocationInformationSnreporting)(0),                             // 40: xnap.v1.LocationInformationSnreporting
	(LoggingInterval)(0),                                            // 41: xnap.v1.LoggingInterval
	(LoggingDuration)(0),                                            // 42: xnap.v1.LoggingDuration
	(LowerLayerPresenceStatusChange)(0),                             // 43: xnap.v1.LowerLayerPresenceStatusChange
	(M1ReportingTrigger)(0),                                         // 44: xnap.v1.M1ReportingTrigger
	(M4Period)(0),                                                   // 45: xnap.v1.M4period
	(M5Period)(0),                                                   // 46: xnap.v1.M5period
	(M6ReportInterval)(0),                                           // 47: xnap.v1.M6reportInterval
	(MaxIprate)(0),                                                  // 48: xnap.v1.MaxIprate
	(RadioframeAllocationPeriodMbsfnsubframeInfoEutraitem)(0),       // 49: xnap.v1.RadioframeAllocationPeriodMbsfnsubframeInfoEutraitem
	(MdtActivation)(0),                                              // 50: xnap.v1.MdtActivation
	(CnTypeCntypeRestrictionsForEquivalentItem)(0),                  // 51: xnap.v1.CnTypeCntypeRestrictionsForEquivalentItem
	(CntypeRestrictionsForServing)(0),                               // 52: xnap.v1.CntypeRestrictionsForServing
	(EUTraCoordinationAssistanceInfo)(0),                            // 53: xnap.v1.EUTraCoordinationAssistanceInfo
	(NrCoordinationAssistanceInfo)(0),                               // 54: xnap.v1.NrCoordinationAssistanceInfo
	(NbioTULDLAlignmentOffset)(0),                                   // 55: xnap.v1.NbioTULDLAlignmentOffset
	(SubframeAssignmentNedctdmpattern)(0),                           // 56: xnap.v1.SubframeAssignmentNedctdmpattern
	(NprachCPLength)(0),                                             // 57: xnap.v1.NprachCPLength
	(NprachpreambleFormat)(0),                                       // 58: xnap.v1.NprachpreambleFormat
	(NrcyclicPrefix)(0),                                             // 59: xnap.v1.NrcyclicPrefix
	(NrdlULtransmissionPeriodicity)(0),                              // 60: xnap.v1.NrdlULtransmissionPeriodicity
	(Nrnrb)(0),                                                      // 61: xnap.v1.Nrnrb
	(Nrscs)(0),                                                      // 62: xnap.v1.Nrscs
	(NumberOfAntennaPortsEUTra)(0),                                  // 63: xnap.v1.NumberOfAntennaPortsEUTra
	(NonGbrresourcesOffered)(0),                                     // 64: xnap.v1.NonGbrresourcesOffered
	(OffsetOfNbiotChannelNumberToEarfcn)(0),                         // 65: xnap.v1.OffsetOfNbiotChannelNumberToEarfcn
	(PedestrianUe)(0),                                               // 66: xnap.v1.PedestrianUe
	(PagingDrx)(0),                                                  // 67: xnap.v1.PagingDrx
	(PagingeDrxCycle)(0),                                            // 68: xnap.v1.PagingeDrxCycle
	(PagingTimeWindow)(0),                                           // 69: xnap.v1.PagingTimeWindow
	(PagingPriority)(0),                                             // 70: xnap.v1.PagingPriority
	(PartialListIndicator)(0),                                       // 71: xnap.v1.PartialListIndicator
	(FromSngrannodePdcpchangeIndication)(0),                         // 72: xnap.v1.FromSngrannodePdcpchangeIndication
	(FromMngrannodePdcpchangeIndication)(0),                         // 73: xnap.v1.FromMngrannodePdcpchangeIndication
	(PdcpduplicationConfiguration)(0),                               // 74: xnap.v1.PdcpduplicationConfiguration
	(UlPdcpsnlengthPdcpsnlength)(0),                                 // 75: xnap.v1.UlPdcpsnlengthPdcpsnlength
	(DlPdcpsnlengthPdcpsnlength)(0),                                 // 76: xnap.v1.DlPdcpsnlengthPdcpsnlength
	(DlngutnlinformationUnchangedPdusessionResourceAdmittedInfo)(0), // 77: xnap.v1.DlngutnlinformationUnchangedPdusessionResourceAdmittedInfo
	(RattypePdusessionUsageReport)(0),                               // 78: xnap.v1.RattypePdusessionUsageReport
	(PdusessionType)(0),                                             // 79: xnap.v1.PdusessionType
	(PniNPnRestrictedInformation)(0),                                // 80: xnap.v1.PniNPnRestrictedInformation
	(ResourceTypeProtectedEutraresourceItem)(0),                     // 81: xnap.v1.ResourceTypeProtectedEutraresourceItem
	(AdditionalQoSflowInfoQoSflowLevelQoSparameters)(0),             // 82: xnap.v1.AdditionalQoSflowInfoQoSflowLevelQoSparameters
	(QoSflowMappingIndication)(0),                                   // 83: xnap.v1.QoSflowMappingIndication
	(NotificationInformationQoSflowNotifyItem)(0),                   // 84: xnap.v1.NotificationInformationQoSflowNotifyItem
	(RattypeQoSflowsUsageReportItem)(0),                             // 85: xnap.v1.RattypeQoSflowsUsageReportItem
	(QosMonitoringRequest)(0),                                       // 86: xnap.v1.QosMonitoringRequest
	(QoSmonitoringDisabled)(0),                                      // 87: xnap.v1.QoSmonitoringDisabled
	(Range)(0),                                                      // 88: xnap.v1.Range
	(NextPagingAreaScopeRanpagingAttemptInfo)(0),                    // 89: xnap.v1.NextPagingAreaScopeRanpagingAttemptInfo
	(RanpagingFailure)(0),                                           // 90: xnap.v1.RanpagingFailure
	(RedundantQoSflowIndicator)(0),                                  // 91: xnap.v1.RedundantQoSflowIndicator
	(Rsn)(0),                                                        // 92: xnap.v1.Rsn
	(ReflectiveQoSattribute)(0),                                     // 93: xnap.v1.ReflectiveQoSattribute
	(ReportAmountMdt)(0),                                            // 94: xnap.v1.ReportAmountMdt
	(ReportArea)(0),                                                 // 95: xnap.v1.ReportArea
	(ReportIntervalMdt)(0),                                          // 96: xnap.v1.ReportIntervalMdt
	(ExtendedReportIntervalMdt)(0),                                  // 97: xnap.v1.ExtendedReportIntervalMdt
	(ReportingPeriodicity)(0),                                       // 98: xnap.v1.ReportingPeriodicity
	(RegistrationRequest)(0),                                        // 99: xnap.v1.RegistrationRequest
	(SubframeTypeReservedSubframePattern)(0),                        // 100: xnap.v1.SubframeTypeReservedSubframePattern
	(Rlcmode)(0),                                                    // 101: xnap.v1.Rlcmode
	(RlcprimaryIndicatorRlcduplicationInformation)(0),               // 102: xnap.v1.RlcprimaryIndicatorRlcduplicationInformation
	(DuplicationStateRlcduplicationStateItem)(0),                    // 103: xnap.v1.DuplicationStateRlcduplicationStateItem
	(ReestablishmentIndication)(0),                                  // 104: xnap.v1.ReestablishmentIndication
	(RrcconfigIndication)(0),                                        // 105: xnap.v1.RrcconfigIndication
	(RrcconnReestabIndicator)(0),                                    // 106: xnap.v1.RrcconnReestabIndicator
	(RrcresumeCause)(0),                                             // 107: xnap.v1.RrcresumeCause
	(ScgconfigurationQuery)(0),                                      // 108: xnap.v1.ScgconfigurationQuery
	(Scgindicator)(0),                                               // 109: xnap.v1.Scgindicator
	(IntegrityProtectionIndicationSecurityIndication)(0),            // 110: xnap.v1.IntegrityProtectionIndicationSecurityIndication
	(ConfidentialityProtectionIndicationSecurityIndication)(0),      // 111: xnap.v1.ConfidentialityProtectionIndicationSecurityIndication
	(IntegrityProtectionResultSecurityResult)(0),                    // 112: xnap.v1.IntegrityProtectionResultSecurityResult
	(ConfidentialityProtectionResultSecurityResult)(0),              // 113: xnap.v1.ConfidentialityProtectionResultSecurityResult
	(SensorMeasConfig)(0),                                           // 114: xnap.v1.SensorMeasConfig
	(UncompensatedBarometricConfigSensorName)(0),                    // 115: xnap.v1.UncompensatedBarometricConfigSensorName
	(UeSpeedConfigSensorName)(0),                                    // 116: xnap.v1.UeSpeedConfigSensorName
	(UeOrientationConfigSensorName)(0),                              // 117: xnap.v1.UeOrientationConfigSensorName
	(FreqBandIndicatorPriorityServedCellInformationEutra)(0),        // 118: xnap.v1.FreqBandIndicatorPriorityServedCellInformationEutra
	(BandwidthReducedSiservedCellInformationEutra)(0),               // 119: xnap.v1.BandwidthReducedSiservedCellInformationEutra
	(SubframeAssignmnetServedCellInformationEutratddinfo)(0),        // 120: xnap.v1.SubframeAssignmnetServedCellInformationEutratddinfo
	(DeactivationindicationServedCellsToModifyEutraitem)(0),         // 121: xnap.v1.DeactivationindicationServedCellsToModifyEutraitem
	(DeactivationindicationServedCellsToModifyNritem)(0),            // 122: xnap.v1.DeactivationindicationServedCellsToModifyNritem
	(SNGRAnnodeAdditionTriggerInd)(0),                               // 123: xnap.v1.SNGRAnnodeAdditionTriggerInd
	(Sntriggered)(0),                                                // 124: xnap.v1.Sntriggered
	(SpecialSubframePatternsEUTra)(0),                               // 125: xnap.v1.SpecialSubframePatternsEUTra
	(SplitSessionIndicator)(0),                                      // 126: xnap.v1.SplitSessionIndicator
	(SplitSrbsTypes)(0),                                             // 127: xnap.v1.SplitSrbsTypes
	(TimeToTrigger)(0),                                              // 128: xnap.v1.TimeToTrigger
	(TimeToWait)(0),                                                 // 129: xnap.v1.TimeToWait
	(TnlassociationUsage)(0),                                        // 130: xnap.v1.TnlassociationUsage
	(TraceDepth)(0),                                                 // 131: xnap.v1.TraceDepth
	(TypeOfError)(0),                                                // 132: xnap.v1.TypeOfError
	(UecontextKeptIndicator)(0),                                     // 133: xnap.v1.UecontextKeptIndicator
	(UespecificDrx)(0),                                              // 134: xnap.v1.UespecificDrx
	(UlUEConfiguration)(0),                                          // 135: xnap.v1.UlUEConfiguration
	(Ulforwarding)(0),                                               // 136: xnap.v1.Ulforwarding
	(UlforwardingProposal)(0),                                       // 137: xnap.v1.UlforwardingProposal
	(UserPlaneTrafficActivityReport)(0),                             // 138: xnap.v1.UserPlaneTrafficActivityReport
	(VehicleUe)(0),                                                  // 139: xnap.v1.VehicleUe
	(WlanrssiWlanmeasurementConfiguration)(0),                       // 140: xnap.v1.WlanrssiWlanmeasurementConfiguration
	(WlanrttWlanmeasurementConfiguration)(0),                        // 141: xnap.v1.WlanrttWlanmeasurementConfiguration
	(WlanmeasConfig)(0),                                             // 142: xnap.v1.WlanmeasConfig
	(*AdditionalPDcpDuplicationTNlList)(nil),                        // 143: xnap.v1.AdditionalPDcpDuplicationTNlList
	(*AdditionalPDcpDuplicationTNlExtIes)(nil),                      // 144: xnap.v1.AdditionalPDcpDuplicationTNlExtIes
	(*AdditionalPDcpDuplicationTNlItem)(nil),                        // 145: xnap.v1.AdditionalPDcpDuplicationTNlItem
	(*AdditionalULNGUTNlatUpfItemExtIes)(nil),                       // 146: xnap.v1.AdditionalULNGUTNlatUpfItemExtIes
	(*AdditionalULNGUTNlatUpfItem)(nil),                             // 147: xnap.v1.AdditionalULNGUTNlatUpfItem
	(*AdditionalULNGUTNlatUpfList)(nil),                             // 148: xnap.v1.AdditionalULNGUTNlatUpfList
	(*ActivationIdforCellActivation)(nil),                           // 149: xnap.v1.ActivationIdforCellActivation
	(*AllocationandRetentionPriorityExtIes)(nil),                    // 150: xnap.v1.AllocationandRetentionPriorityExtIes
	(*AllocationandRetentionPriority)(nil),                          // 151: xnap.v1.AllocationandRetentionPriority
	(*ActivationSfn)(nil),                                           // 152: xnap.v1.ActivationSfn
	(*AllowedCagIDListperPlmn)(nil),                                 // 153: xnap.v1.AllowedCagIDListperPlmn
	(*AllowedPniNPnIDList)(nil),                                     // 154: xnap.v1.AllowedPniNPnIDList
	(*AllowedPniNPnIDItemExtIes)(nil),                               // 155: xnap.v1.AllowedPniNPnIDItemExtIes
	(*AllowedPniNPnIDItem)(nil),                                     // 156: xnap.v1.AllowedPniNPnIDItem
	(*AlternativeQoSparaSetList)(nil),                               // 157: xnap.v1.AlternativeQoSparaSetList
	(*AlternativeQoSparaSetItemExtIes)(nil),                         // 158: xnap.v1.AlternativeQoSparaSetItemExtIes
	(*AlternativeQoSparaSetItem)(nil),                               // 159: xnap.v1.AlternativeQoSparaSetItem
	(*AmfRegionInformation)(nil),                                    // 160: xnap.v1.AmfRegionInformation
	(*GlobalAmfRegionInformationExtIes)(nil),                        // 161: xnap.v1.GlobalAmfRegionInformationExtIes
	(*GlobalAmfRegionInformation)(nil),                              // 162: xnap.v1.GlobalAmfRegionInformation
	(*AmfUENGapID)(nil),                                             // 163: xnap.v1.AmfUENGapID
	(*AreaOfInterestInformation)(nil),                               // 164: xnap.v1.AreaOfInterestInformation
	(*AreaOfInterestItemExtIes)(nil),                                // 165: xnap.v1.AreaOfInterestItemExtIes
	(*AreaOfInterestItem)(nil),                                      // 166: xnap.v1.AreaOfInterestItem
	(*AreaScopeOfMdtNR)(nil),                                        // 167: xnap.v1.AreaScopeOfMdtNR
	(*AreaScopeOfMdtEUtra)(nil),                                     // 168: xnap.v1.AreaScopeOfMdtEUtra
	(*AreaScopeOfNeighCellsList)(nil),                               // 169: xnap.v1.AreaScopeOfNeighCellsList
	(*AreaScopeOfNeighCellsItemExtIes)(nil),                         // 170: xnap.v1.AreaScopeOfNeighCellsItemExtIes
	(*AreaScopeOfNeighCellsItem)(nil),                               // 171: xnap.v1.AreaScopeOfNeighCellsItem
	(*AsSecurityInformationExtIes)(nil),                             // 172: xnap.v1.AsSecurityInformationExtIes
	(*AsSecurityInformation)(nil),                                   // 173: xnap.v1.AsSecurityInformation
	(*AssistanceDataForRanpagingExtIes)(nil),                        // 174: xnap.v1.AssistanceDataForRanpagingExtIes
	(*AssistanceDataForRanpaging)(nil),                              // 175: xnap.v1.AssistanceDataForRanpaging
	(*AvailableCapacity)(nil),                                       // 176: xnap.v1.AvailableCapacity
	(*AvailableRrcconnectionCapacityValue)(nil),                     // 177: xnap.v1.AvailableRrcconnectionCapacityValue
	(*AveragingWindow)(nil),                                         // 178: xnap.v1.AveragingWindow
	(*BluetoothMeasurementConfigurationExtIes)(nil),                 // 179: xnap.v1.BluetoothMeasurementConfigurationExtIes
	(*BluetoothMeasurementConfiguration)(nil),                       // 180: xnap.v1.BluetoothMeasurementConfiguration
	(*BluetoothMeasConfigNameList)(nil),                             // 181: xnap.v1.BluetoothMeasConfigNameList
	(*BluetoothName)(nil),                                           // 182: xnap.v1.BluetoothName
	(*BplmnIDInfoEUtra)(nil),                                        // 183: xnap.v1.BplmnIDInfoEUtra
	(*BplmnIDInfoEUtraItemExtIes)(nil),                              // 184: xnap.v1.BplmnIDInfoEUtraItemExtIes
	(*BplmnIDInfoEUtraItem)(nil),                                    // 185: xnap.v1.BplmnIDInfoEUtraItem
	(*BplmnIDInfoNR)(nil),                                           // 186: xnap.v1.BplmnIDInfoNR
	(*BplmnIDInfoNRItemExtIesExtension)(nil),                        // 187: xnap.v1.BplmnIDInfoNRItemExtIesExtension
	(*BplmnIDInfoNRItemExtIes)(nil),                                 // 188: xnap.v1.BplmnIDInfoNRItemExtIes
	(*BplmnIDInfoNRItem)(nil),                                       // 189: xnap.v1.BplmnIDInfoNRItem
	(*BitRate)(nil),                                                 // 190: xnap.v1.BitRate
	(*BroadcastCagIdentifierList)(nil),                              // 191: xnap.v1.BroadcastCagIdentifierList
	(*BroadcastCagIdentifierItemExtIes)(nil),                        // 192: xnap.v1.BroadcastCagIdentifierItemExtIes
	(*BroadcastCagIdentifierItem)(nil),                              // 193: xnap.v1.BroadcastCagIdentifierItem
	(*BroadcastNidList)(nil),                                        // 194: xnap.v1.BroadcastNidList
	(*BroadcastNidItemExtIes)(nil),                                  // 195: xnap.v1.BroadcastNidItemExtIes
	(*BroadcastNidItem)(nil),                                        // 196: xnap.v1.BroadcastNidItem
	(*BroadcastPlmns)(nil),                                          // 197: xnap.v1.BroadcastPlmns
	(*BroadcastEutraplmns)(nil),                                     // 198: xnap.v1.BroadcastEutraplmns
	(*BroadcastPlmninTaisupportItemExtIesExtension)(nil),            // 199: xnap.v1.BroadcastPlmninTaisupportItemExtIesExtension
	(*BroadcastPlmninTaisupportItemExtIes)(nil),                     // 200: xnap.v1.BroadcastPlmninTaisupportItemExtIes
	(*BroadcastPlmninTaisupportItem)(nil),                           // 201: xnap.v1.BroadcastPlmninTaisupportItem
	(*BroadcastPniNPnIDInformation)(nil),                            // 202: xnap.v1.BroadcastPniNPnIDInformation
	(*BroadcastPniNPnIDInformationItemExtIes)(nil),                  // 203: xnap.v1.BroadcastPniNPnIDInformationItemExtIes
	(*BroadcastPniNPnIDInformationItem)(nil),                        // 204: xnap.v1.BroadcastPniNPnIDInformationItem
	(*BroadcastSnpnidList)(nil),                                     // 205: xnap.v1.BroadcastSnpnidList
	(*BroadcastSnpnidExtIes)(nil),                                   // 206: xnap.v1.BroadcastSnpnidExtIes
	(*BroadcastSnpnid)(nil),                                         // 207: xnap.v1.BroadcastSnpnid
	(*CagIdentifier)(nil),                                           // 208: xnap.v1.CagIdentifier
	(*CapacityValue)(nil),                                           // 209: xnap.v1.CapacityValue
	(*CapacityValueInfoExtIes)(nil),                                 // 210: xnap.v1.CapacityValueInfoExtIes
	(*CapacityValueInfo)(nil),                                       // 211: xnap.v1.CapacityValueInfo
	(*CauseExtIes)(nil),                                             // 212: xnap.v1.CauseExtIes
	(*Cause)(nil),                                                   // 213: xnap.v1.Cause
	(*LimitedNrListCellAssistanceInfoNR)(nil),                       // 214: xnap.v1.LimitedNrListCellAssistanceInfoNR
	(*CellAssistanceInfoNRExtIes)(nil),                              // 215: xnap.v1.CellAssistanceInfoNRExtIes
	(*CellAssistanceInfoNR)(nil),                                    // 216: xnap.v1.CellAssistanceInfoNR
	(*CellAndCapacityAssistanceInfoNRExtIes)(nil),                   // 217: xnap.v1.CellAndCapacityAssistanceInfoNRExtIes
	(*CellAndCapacityAssistanceInfoNR)(nil),                         // 218: xnap.v1.CellAndCapacityAssistanceInfoNR
	(*CellAndCapacityAssistanceInfoEUtraExtIes)(nil),                // 219: xnap.v1.CellAndCapacityAssistanceInfoEUtraExtIes
	(*CellAndCapacityAssistanceInfoEUtra)(nil),                      // 220: xnap.v1.CellAndCapacityAssistanceInfoEUtra
	(*LimitedEutraListCellAssistanceInfoEUtra)(nil),                 // 221: xnap.v1.LimitedEutraListCellAssistanceInfoEUtra
	(*CellAssistanceInfoEUtraExtIes)(nil),                           // 222: xnap.v1.CellAssistanceInfoEUtraExtIes
	(*CellAssistanceInfoEUtra)(nil),                                 // 223: xnap.v1.CellAssistanceInfoEUtra
	(*CellBasedMdtNRExtIes)(nil),                                    // 224: xnap.v1.CellBasedMdtNRExtIes
	(*CellBasedMdtNR)(nil),                                          // 225: xnap.v1.CellBasedMdtNR
	(*CellIdListforMdtNR)(nil),                                      // 226: xnap.v1.CellIdListforMdtNR
	(*CellBasedMdtEUtraExtIes)(nil),                                 // 227: xnap.v1.CellBasedMdtEUtraExtIes
	(*CellBasedMdtEUtra)(nil),                                       // 228: xnap.v1.CellBasedMdtEUtra
	(*CellIdListforMdtEUtra)(nil),                                   // 229: xnap.v1.CellIdListforMdtEUtra
	(*CellCapacityClassValue)(nil),                                  // 230: xnap.v1.CellCapacityClassValue
	(*CellGroupId)(nil),                                             // 231: xnap.v1.CellGroupId
	(*CellMeasurementResult)(nil),                                   // 232: xnap.v1.CellMeasurementResult
	(*CellMeasurementResultItemExtIes)(nil),                         // 233: xnap.v1.CellMeasurementResultItemExtIes
	(*CellMeasurementResultItem)(nil),                               // 234: xnap.v1.CellMeasurementResultItem
	(*CellToReport)(nil),                                            // 235: xnap.v1.CellToReport
	(*CellToReportItemExtIes)(nil),                                  // 236: xnap.v1.CellToReportItemExtIes
	(*CellToReportItem)(nil),                                        // 237: xnap.v1.CellToReportItem
	(*CellTypeChoiceExtIes)(nil),                                    // 238: xnap.v1.CellTypeChoiceExtIes
	(*CellTypeChoice)(nil),                                          // 239: xnap.v1.CellTypeChoice
	(*CompositeAvailableCapacityGroupExtIes)(nil),                   // 240: xnap.v1.CompositeAvailableCapacityGroupExtIes
	(*CompositeAvailableCapacityGroup)(nil),                         // 241: xnap.v1.CompositeAvailableCapacityGroup
	(*CompositeAvailableCapacityExtIes)(nil),                        // 242: xnap.v1.CompositeAvailableCapacityExtIes
	(*CompositeAvailableCapacity)(nil),                              // 243: xnap.v1.CompositeAvailableCapacity
	(*ChoinformationReqExtIes)(nil),                                 // 244: xnap.v1.ChoinformationReqExtIes
	(*ChoinformationReq)(nil),                                       // 245: xnap.v1.ChoinformationReq
	(*ChoinformationAckExtIes)(nil),                                 // 246: xnap.v1.ChoinformationAckExtIes
	(*ChoinformationAck)(nil),                                       // 247: xnap.v1.ChoinformationAck
	(*ChoProbability)(nil),                                          // 248: xnap.v1.ChoProbability
	(*ConnectivitySupportExtIes)(nil),                               // 249: xnap.v1.ConnectivitySupportExtIes
	(*ConnectivitySupport)(nil),                                     // 250: xnap.v1.ConnectivitySupport
	(*CountPDcpSN12ExtIes)(nil),                                     // 251: xnap.v1.CountPDcpSN12ExtIes
	(*CountPDcpSN12)(nil),                                           // 252: xnap.v1.CountPDcpSN12
	(*CountPDcpSN18ExtIes)(nil),                                     // 253: xnap.v1.CountPDcpSN18ExtIes
	(*CountPDcpSN18)(nil),                                           // 254: xnap.v1.CountPDcpSN18
	(*CptransportLayerInformationExtIes)(nil),                       // 255: xnap.v1.CptransportLayerInformationExtIes
	(*CptransportLayerInformation)(nil),                             // 256: xnap.v1.CptransportLayerInformation
	(*CriticalityDiagnosticsExtIes)(nil),                            // 257: xnap.v1.CriticalityDiagnosticsExtIes
	(*CriticalityDiagnostics)(nil),                                  // 258: xnap.v1.CriticalityDiagnostics
	(*CriticalityDiagnosticsIEListExtIes)(nil),                      // 259: xnap.v1.CriticalityDiagnosticsIEListExtIes
	(*NestedCriticalityDiagnosticsIEList)(nil),                      // 260: xnap.v1.NestedCriticalityDiagnosticsIEList
	(*CriticalityDiagnosticsIEList)(nil),                            // 261: xnap.v1.CriticalityDiagnosticsIEList
	(*CRNti)(nil),                                                   // 262: xnap.v1.CRNti
	(*XnUaddressInfoperPdusessionList)(nil),                         // 263: xnap.v1.XnUaddressInfoperPdusessionList
	(*XnUaddressInfoperPdusessionItemExtIesExtension)(nil),          // 264: xnap.v1.XnUaddressInfoperPdusessionItemExtIesExtension
	(*XnUaddressInfoperPdusessionItemExtIes)(nil),                   // 265: xnap.v1.XnUaddressInfoperPdusessionItemExtIes
	(*XnUaddressInfoperPdusessionItem)(nil),                         // 266: xnap.v1.XnUaddressInfoperPdusessionItem
	(*DataForwardingInfoFromTargetEUTrannodeExtIes)(nil),            // 267: xnap.v1.DataForwardingInfoFromTargetEUTrannodeExtIes
	(*DataForwardingInfoFromTargetEUTrannode)(nil),                  // 268: xnap.v1.DataForwardingInfoFromTargetEUTrannode
	(*DataForwardingInfoFromTargetEUTrannodeList)(nil),              // 269: xnap.v1.DataForwardingInfoFromTargetEUTrannodeList
	(*DataForwardingInfoFromTargetEUTrannodeItemExtIes)(nil),        // 270: xnap.v1.DataForwardingInfoFromTargetEUTrannodeItemExtIes
	(*DataForwardingInfoFromTargetEUTrannodeItem)(nil),              // 271: xnap.v1.DataForwardingInfoFromTargetEUTrannodeItem
	(*QoSflowsToBeForwardedList)(nil),                               // 272: xnap.v1.QoSflowsToBeForwardedList
	(*QoSflowsToBeForwardedItemExtIes)(nil),                         // 273: xnap.v1.QoSflowsToBeForwardedItemExtIes
	(*QoSflowsToBeForwardedItem)(nil),                               // 274: xnap.v1.QoSflowsToBeForwardedItem
	(*DataForwardingInfoFromTargetNgrannodeExtIes)(nil),             // 275: xnap.v1.DataForwardingInfoFromTargetNgrannodeExtIes
	(*DataForwardingInfoFromTargetNgrannode)(nil),                   // 276: xnap.v1.DataForwardingInfoFromTargetNgrannode
	(*QoSflowsAcceptedToBeForwardedList)(nil),                       // 277: xnap.v1.QoSflowsAcceptedToBeForwardedList
	(*QoSflowsAcceptedToBeForwardedItemExtIes)(nil),                 // 278: xnap.v1.QoSflowsAcceptedToBeForwardedItemExtIes
	(*QoSflowsAcceptedToBeForwardedItem)(nil),                       // 279: xnap.v1.QoSflowsAcceptedToBeForwardedItem
	(*DataforwardingandOffloadingInfofromSourceExtIes)(nil),         // 280: xnap.v1.DataforwardingandOffloadingInfofromSourceExtIes
	(*DataforwardingandOffloadingInfofromSource)(nil),               // 281: xnap.v1.DataforwardingandOffloadingInfofromSource
	(*QoSflowsToBeForwardedList1)(nil),                              // 282: xnap.v1.QoSflowsToBeForwardedList1
	(*QoSflowsToBeForwardedItemExtIesExtension)(nil),                // 283: xnap.v1.QoSflowsToBeForwardedItemExtIesExtension
	(*QoSflowsToBeForwardedItem1)(nil),                              // 284: xnap.v1.QoSflowsToBeForwardedItem1
	(*DataForwardingResponseDrbitemList)(nil),                       // 285: xnap.v1.DataForwardingResponseDrbitemList
	(*DataForwardingResponseDrbitemExtIes)(nil),                     // 286: xnap.v1.DataForwardingResponseDrbitemExtIes
	(*DataForwardingResponseDrbitem)(nil),                           // 287: xnap.v1.DataForwardingResponseDrbitem
	(*DataTrafficResources)(nil),                                    // 288: xnap.v1.DataTrafficResources
	(*DataTrafficResourceIndicationExtIes)(nil),                     // 289: xnap.v1.DataTrafficResourceIndicationExtIes
	(*DataTrafficResourceIndication)(nil),                           // 290: xnap.v1.DataTrafficResourceIndication
	(*DapsrequestInfoExtIes)(nil),                                   // 291: xnap.v1.DapsrequestInfoExtIes
	(*DapsrequestInfo)(nil),                                         // 292: xnap.v1.DapsrequestInfo
	(*DapsresponseInfoList)(nil),                                    // 293: xnap.v1.DapsresponseInfoList
	(*DapsresponseInfoItemExtIes)(nil),                              // 294: xnap.v1.DapsresponseInfoItemExtIes
	(*DapsresponseInfoItem)(nil),                                    // 295: xnap.v1.DapsresponseInfoItem
	(*DeliveryStatus)(nil),                                          // 296: xnap.v1.DeliveryStatus
	(*DlcountChoiceExtIes)(nil),                                     // 297: xnap.v1.DlcountChoiceExtIes
	(*DlcountChoice)(nil),                                           // 298: xnap.v1.DlcountChoice
	(*DlGBrPRbusage)(nil),                                           // 299: xnap.v1.DlGBrPRbusage
	(*DlnonGBrPRbusage)(nil),                                        // 300: xnap.v1.DlnonGBrPRbusage
	(*DlTotalPRbusage)(nil),                                         // 301: xnap.v1.DlTotalPRbusage
	(*DrbID)(nil),                                                   // 302: xnap.v1.DrbID
	(*DrbList)(nil),                                                 // 303: xnap.v1.DrbList
	(*DrbListwithCause)(nil),                                        // 304: xnap.v1.DrbListwithCause
	(*DrbListwithCauseItemExtIes)(nil),                              // 305: xnap.v1.DrbListwithCauseItemExtIes
	(*DrbListwithCauseItem)(nil),                                    // 306: xnap.v1.DrbListwithCauseItem
	(*DrbNumber)(nil),                                               // 307: xnap.v1.DrbNumber
	(*DrbsSubjectToDldiscardingList)(nil),                           // 308: xnap.v1.DrbsSubjectToDldiscardingList
	(*DrbsSubjectToDldiscardingItemExtIes)(nil),                     // 309: xnap.v1.DrbsSubjectToDldiscardingItemExtIes
	(*DrbsSubjectToDldiscardingItem)(nil),                           // 310: xnap.v1.DrbsSubjectToDldiscardingItem
	(*DrbsSubjectToEarlyStatusTransferList)(nil),                    // 311: xnap.v1.DrbsSubjectToEarlyStatusTransferList
	(*DrbsSubjectToEarlyStatusTransferItemExtIes)(nil),              // 312: xnap.v1.DrbsSubjectToEarlyStatusTransferItemExtIes
	(*DrbsSubjectToEarlyStatusTransferItem)(nil),                    // 313: xnap.v1.DrbsSubjectToEarlyStatusTransferItem
	(*DrbsSubjectToStatusTransferList)(nil),                         // 314: xnap.v1.DrbsSubjectToStatusTransferList
	(*DrbsSubjectToStatusTransferItemExtIes)(nil),                   // 315: xnap.v1.DrbsSubjectToStatusTransferItemExtIes
	(*DrbsSubjectToStatusTransferItem)(nil),                         // 316: xnap.v1.DrbsSubjectToStatusTransferItem
	(*DrbbstatusTransferChoiceExtIes)(nil),                          // 317: xnap.v1.DrbbstatusTransferChoiceExtIes
	(*DrbbstatusTransferChoice)(nil),                                // 318: xnap.v1.DrbbstatusTransferChoice
	(*DrbbstatusTransfer12BitsSnExtIes)(nil),                        // 319: xnap.v1.DrbbstatusTransfer12bitsSnExtIes
	(*DrbbstatusTransfer12BitsSn)(nil),                              // 320: xnap.v1.DrbbstatusTransfer12bitsSn
	(*DrbbstatusTransfer18BitsSnExtIes)(nil),                        // 321: xnap.v1.DrbbstatusTransfer18bitsSnExtIes
	(*DrbbstatusTransfer18BitsSn)(nil),                              // 322: xnap.v1.DrbbstatusTransfer18bitsSn
	(*DrbtoQoSflowMappingList)(nil),                                 // 323: xnap.v1.DrbtoQoSflowMappingList
	(*DrbtoQoSflowMappingItemExtIes)(nil),                           // 324: xnap.v1.DrbtoQoSflowMappingItemExtIes
	(*DrbtoQoSflowMappingItem)(nil),                                 // 325: xnap.v1.DrbtoQoSflowMappingItem
	(*Dynamic5QidescriptorExtIesExtension)(nil),                     // 326: xnap.v1.Dynamic5QidescriptorExtIesExtension
	(*Dynamic5QidescriptorExtIes)(nil),                              // 327: xnap.v1.Dynamic5QidescriptorExtIes
	(*Dynamic5Qidescriptor)(nil),                                    // 328: xnap.v1.Dynamic5Qidescriptor
	(*ERAbID)(nil),                                                  // 329: xnap.v1.ERAbID
	(*EUTraarfcn)(nil),                                              // 330: xnap.v1.EUTraarfcn
	(*EUTraCellIdentity)(nil),                                       // 331: xnap.v1.EUTraCellIdentity
	(*EUTraCGiExtIes)(nil),                                          // 332: xnap.v1.EUTraCGiExtIes
	(*EUTraCGi)(nil),                                                // 333: xnap.v1.EUTraCGi
	(*EUTrafrequencyBandIndicator)(nil),                             // 334: xnap.v1.EUTrafrequencyBandIndicator
	(*EUTramultibandInfoList)(nil),                                  // 335: xnap.v1.EUTramultibandInfoList
	(*EUTrapci)(nil),                                                // 336: xnap.v1.EUTrapci
	(*EUTraprachconfigurationExtIes)(nil),                           // 337: xnap.v1.EUTraprachconfigurationExtIes
	(*EUTraprachconfiguration)(nil),                                 // 338: xnap.v1.EUTraprachconfiguration
	(*EndpointIpaddressAndPortExtIes)(nil),                          // 339: xnap.v1.EndpointIpaddressAndPortExtIes
	(*EndpointIpaddressAndPort)(nil),                                // 340: xnap.v1.EndpointIpaddressAndPort
	(*EventTriggeredExtIes)(nil),                                    // 341: xnap.v1.EventTriggeredExtIes
	(*EventTriggered)(nil),                                          // 342: xnap.v1.EventTriggered
	(*EventTypeTriggerExtIes)(nil),                                  // 343: xnap.v1.EventTypeTriggerExtIes
	(*EventTypeTrigger)(nil),                                        // 344: xnap.v1.EventTypeTrigger
	(*EventL1ExtIes)(nil),                                           // 345: xnap.v1.EventL1ExtIes
	(*EventL1)(nil),                                                 // 346: xnap.v1.EventL1
	(*MeasurementThresholdL1LoggedMdt)(nil),                         // 347: xnap.v1.MeasurementThresholdL1LoggedMdt
	(*ExpectedActivityPeriod)(nil),                                  // 348: xnap.v1.ExpectedActivityPeriod
	(*ExpectedIdlePeriod)(nil),                                      // 349: xnap.v1.ExpectedIdlePeriod
	(*ExpectedUeactivityBehaviourExtIes)(nil),                       // 350: xnap.v1.ExpectedUeactivityBehaviourExtIes
	(*ExpectedUeactivityBehaviour)(nil),                             // 351: xnap.v1.ExpectedUeactivityBehaviour
	(*ExpectedUebehaviourExtIes)(nil),                               // 352: xnap.v1.ExpectedUebehaviourExtIes
	(*ExpectedUebehaviour)(nil),                                     // 353: xnap.v1.ExpectedUebehaviour
	(*ExpectedUemovingTrajectory)(nil),                              // 354: xnap.v1.ExpectedUemovingTrajectory
	(*ExpectedUemovingTrajectoryItemExtIes)(nil),                    // 355: xnap.v1.ExpectedUemovingTrajectoryItemExtIes
	(*ExpectedUemovingTrajectoryItem)(nil),                          // 356: xnap.v1.ExpectedUemovingTrajectoryItem
	(*ExtendedRatrestrictionInformationExtIes)(nil),                 // 357: xnap.v1.ExtendedRatrestrictionInformationExtIes
	(*ExtendedRatrestrictionInformation)(nil),                       // 358: xnap.v1.ExtendedRatrestrictionInformation
	(*ExtendedPacketDelayBudget)(nil),                               // 359: xnap.v1.ExtendedPacketDelayBudget
	(*ExtendedSliceSupportList)(nil),                                // 360: xnap.v1.ExtendedSliceSupportList
	(*ExtendedUeidentityIndexValue)(nil),                            // 361: xnap.v1.ExtendedUeidentityIndexValue
	(*ExtTlas)(nil),                                                 // 362: xnap.v1.ExtTlas
	(*ExtTlaItemExtIes)(nil),                                        // 363: xnap.v1.ExtTlaItemExtIes
	(*ExtTlaItem)(nil),                                              // 364: xnap.v1.ExtTlaItem
	(*Gtptlas)(nil),                                                 // 365: xnap.v1.Gtptlas
	(*GtptlaItemExtIes)(nil),                                        // 366: xnap.v1.GtptlaItemExtIes
	(*GtptlaItem)(nil),                                              // 367: xnap.v1.GtptlaItem
	(*FiveGcmobilityRestrictionListContainer)(nil),                  // 368: xnap.v1.FiveGcmobilityRestrictionListContainer
	(*FiveQi)(nil),                                                  // 369: xnap.v1.FiveQi
	(*GbrqoSflowInfoExtIes)(nil),                                    // 370: xnap.v1.GbrqoSflowInfoExtIes
	(*GbrqoSflowInfo)(nil),                                          // 371: xnap.v1.GbrqoSflowInfo
	(*GlobalgNbIDExtIes)(nil),                                       // 372: xnap.v1.GlobalgNbIDExtIes
	(*GlobalgNbID)(nil),                                             // 373: xnap.v1.GlobalgNbID
	(*GnbIDChoiceExtIes)(nil),                                       // 374: xnap.v1.GnbIDChoiceExtIes
	(*GnbIDChoice)(nil),                                             // 375: xnap.v1.GnbIDChoice
	(*GnbRadioResourceStatusExtIes)(nil),                            // 376: xnap.v1.GnbRadioResourceStatusExtIes
	(*GnbRadioResourceStatus)(nil),                                  // 377: xnap.v1.GnbRadioResourceStatus
	(*GlobalCellIDExtIes)(nil),                                      // 378: xnap.v1.GlobalCellIDExtIes
	(*GlobalCellID)(nil),                                            // 379: xnap.v1.GlobalCellID
	(*GlobaleNbIDExtIes)(nil),                                       // 380: xnap.v1.GlobaleNbIDExtIes
	(*GlobalngeNbID)(nil),                                           // 381: xnap.v1.GlobalngeNbID
	(*EnbIDChoiceExtIes)(nil),                                       // 382: xnap.v1.EnbIDChoiceExtIes
	(*EnbIDChoice)(nil),                                             // 383: xnap.v1.EnbIDChoice
	(*GlobalNgRAncellIDExtIes)(nil),                                 // 384: xnap.v1.GlobalNgRAncellIDExtIes
	(*GlobalNgRAncellID)(nil),                                       // 385: xnap.v1.GlobalNgRAncellID
	(*GlobalNgRAnnodeIDExtIes)(nil),                                 // 386: xnap.v1.GlobalNgRAnnodeIDExtIes
	(*GlobalNgRAnnodeID)(nil),                                       // 387: xnap.v1.GlobalNgRAnnodeID
	(*GtpTEid)(nil),                                                 // 388: xnap.v1.GtpTEid
	(*GtptunnelTransportLayerInformationExtIes)(nil),                // 389: xnap.v1.GtptunnelTransportLayerInformationExtIes
	(*GtptunnelTransportLayerInformation)(nil),                      // 390: xnap.v1.GtptunnelTransportLayerInformation
	(*GuamiExtIes)(nil),                                             // 391: xnap.v1.GuamiExtIes
	(*Guami)(nil),                                                   // 392: xnap.v1.Guami
	(*Hysteresis)(nil),                                              // 393: xnap.v1.Hysteresis
	(*ImmediateMdtEUtra)(nil),                                       // 394: xnap.v1.ImmediateMdtEUtra
	(*ImmediateMdtNRExtIes)(nil),                                    // 395: xnap.v1.ImmediateMdtNRExtIes
	(*ImmediateMdtNR)(nil),                                          // 396: xnap.v1.ImmediateMdtNR
	(*InitiatingConditionFailureIndicationExtIes)(nil),              // 397: xnap.v1.InitiatingConditionFailureIndicationExtIes
	(*InitiatingConditionFailureIndication)(nil),                    // 398: xnap.v1.InitiatingConditionFailureIndication
	(*IntendedTddDLULconfigurationNRExtIes)(nil),                    // 399: xnap.v1.IntendedTddDLULconfigurationNRExtIes
	(*IntendedTddDLULconfigurationNR)(nil),                          // 400: xnap.v1.IntendedTddDLULconfigurationNR
	(*InterfaceInstanceIndication)(nil),                             // 401: xnap.v1.InterfaceInstanceIndication
	(*InterfacesToTrace)(nil),                                       // 402: xnap.v1.InterfacesToTrace
	(*IRNtiExtIes)(nil),                                             // 403: xnap.v1.IRNtiExtIes
	(*IRNti)(nil),                                                   // 404: xnap.v1.IRNti
	(*LastVisitedCellItemExtIes)(nil),                               // 405: xnap.v1.LastVisitedCellItemExtIes
	(*LastVisitedCellItem)(nil),                                     // 406: xnap.v1.LastVisitedCellItem
	(*LastVisitedEutrancellInformation)(nil),                        // 407: xnap.v1.LastVisitedEutrancellInformation
	(*LastVisitedGerancellInformation)(nil),                         // 408: xnap.v1.LastVisitedGerancellInformation
	(*LastVisitedNgrancellInformation)(nil),                         // 409: xnap.v1.LastVisitedNgrancellInformation
	(*LastVisitedUtrancellInformation)(nil),                         // 410: xnap.v1.LastVisitedUtrancellInformation
	(*Lcid)(nil),                                                    // 411: xnap.v1.Lcid
	(*ListOfCells)(nil),                                             // 412: xnap.v1.ListOfCells
	(*CellsinAoIItemExtIes)(nil),                                    // 413: xnap.v1.CellsinAoIItemExtIes
	(*CellsinAoIItem)(nil),                                          // 414: xnap.v1.CellsinAoIItem
	(*ListOfRannodesinAoI)(nil),                                     // 415: xnap.v1.ListOfRannodesinAoI
	(*GlobalNgRAnnodesinAoIItemExtIes)(nil),                         // 416: xnap.v1.GlobalNgRAnnodesinAoIItemExtIes
	(*GlobalNgRAnnodesinAoIItem)(nil),                               // 417: xnap.v1.GlobalNgRAnnodesinAoIItem
	(*ListOfTaisinAoI)(nil),                                         // 418: xnap.v1.ListOfTaisinAoI
	(*TaisinAoIItemExtIes)(nil),                                     // 419: xnap.v1.TaisinAoIItemExtIes
	(*TaisinAoIItem)(nil),                                           // 420: xnap.v1.TaisinAoIItem
	(*LocationReportingInformationExtIes)(nil),                      // 421: xnap.v1.LocationReportingInformationExtIes
	(*LocationReportingInformation)(nil),                            // 422: xnap.v1.LocationReportingInformation
	(*LoggedMdtEUtraExtIes)(nil),                                    // 423: xnap.v1.LoggedMdtEUtraExtIes
	(*LoggedMdtEUtra)(nil),                                          // 424: xnap.v1.LoggedMdtEUtra
	(*LoggedEventTriggeredConfigExtIes)(nil),                        // 425: xnap.v1.LoggedEventTriggeredConfigExtIes
	(*LoggedEventTriggeredConfig)(nil),                              // 426: xnap.v1.LoggedEventTriggeredConfig
	(*LoggedMdtNRExtIes)(nil),                                       // 427: xnap.v1.LoggedMdtNRExtIes
	(*LoggedMdtNR)(nil),                                             // 428: xnap.v1.LoggedMdtNR
	(*Ltev2XservicesAuthorizedExtIes)(nil),                          // 429: xnap.v1.Ltev2XservicesAuthorizedExtIes
	(*Ltev2XservicesAuthorized)(nil),                                // 430: xnap.v1.Ltev2XservicesAuthorized
	(*LteuesidelinkAggregateMaximumBitRateExtIes)(nil),              // 431: xnap.v1.LteuesidelinkAggregateMaximumBitRateExtIes
	(*LteuesidelinkAggregateMaximumBitRate)(nil),                    // 432: xnap.v1.LteuesidelinkAggregateMaximumBitRate
	(*M1ConfigurationExtIes)(nil),                                   // 433: xnap.v1.M1ConfigurationExtIes
	(*M1Configuration)(nil),                                         // 434: xnap.v1.M1Configuration
	(*M1PeriodicReportingExtIes)(nil),                               // 435: xnap.v1.M1PeriodicReportingExtIes
	(*M1PeriodicReporting)(nil),                                     // 436: xnap.v1.M1PeriodicReporting
	(*M1ThresholdEventA2ExtIes)(nil),                                // 437: xnap.v1.M1ThresholdEventA2ExtIes
	(*M1ThresholdEventA2)(nil),                                      // 438: xnap.v1.M1ThresholdEventA2
	(*M4ConfigurationExtIes)(nil),                                   // 439: xnap.v1.M4ConfigurationExtIes
	(*M4Configuration)(nil),                                         // 440: xnap.v1.M4Configuration
	(*M5ConfigurationExtIes)(nil),                                   // 441: xnap.v1.M5ConfigurationExtIes
	(*M5Configuration)(nil),                                         // 442: xnap.v1.M5Configuration
	(*M6ConfigurationExtIes)(nil),                                   // 443: xnap.v1.M6ConfigurationExtIes
	(*M6Configuration)(nil),                                         // 444: xnap.v1.M6Configuration
	(*M7ConfigurationExtIes)(nil),                                   // 445: xnap.v1.M7ConfigurationExtIes
	(*M7Configuration)(nil),                                         // 446: xnap.v1.M7Configuration
	(*M7Period)(nil),                                                // 447: xnap.v1.M7period
	(*MacI)(nil),                                                    // 448: xnap.v1.MacI
	(*MaskedImeisv)(nil),                                            // 449: xnap.v1.MaskedImeisv
	(*MaxChopreparations)(nil),                                      // 450: xnap.v1.MaxChopreparations
	(*MaximumDataBurstVolume)(nil),                                  // 451: xnap.v1.MaximumDataBurstVolume
	(*MaximumIpdatarateExtIes)(nil),                                 // 452: xnap.v1.MaximumIpdatarateExtIes
	(*MaximumIpdatarate)(nil),                                       // 453: xnap.v1.MaximumIpdatarate
	(*MbsfncontrolRegionLength)(nil),                                // 454: xnap.v1.MbsfncontrolRegionLength
	(*MbsfnsubframeAllocationEUTraExtIes)(nil),                      // 455: xnap.v1.MbsfnsubframeAllocationEUTraExtIes
	(*MbsfnsubframeAllocationEUTra)(nil),                            // 456: xnap.v1.MbsfnsubframeAllocationEUTra
	(*MbsfnsubframeInfoEUTra)(nil),                                  // 457: xnap.v1.MbsfnsubframeInfoEUTra
	(*MbsfnsubframeInfoEUTraItemExtIes)(nil),                        // 458: xnap.v1.MbsfnsubframeInfoEUTraItemExtIes
	(*MbsfnsubframeInfoEUTraItem)(nil),                              // 459: xnap.v1.MbsfnsubframeInfoEUTraItem
	(*MdtConfigurationExtIes)(nil),                                  // 460: xnap.v1.MdtConfigurationExtIes
	(*MdtConfiguration)(nil),                                        // 461: xnap.v1.MdtConfiguration
	(*MdtConfigurationNRExtIes)(nil),                                // 462: xnap.v1.MdtConfigurationNRExtIes
	(*MdtConfigurationNR)(nil),                                      // 463: xnap.v1.MdtConfigurationNR
	(*MdtConfigurationEUtraExtIes)(nil),                             // 464: xnap.v1.MdtConfigurationEUtraExtIes
	(*MdtConfigurationEUtra)(nil),                                   // 465: xnap.v1.MdtConfigurationEUtra
	(*MdtLocationInfo)(nil),                                         // 466: xnap.v1.MdtLocationInfo
	(*Mdtplmnlist)(nil),                                             // 467: xnap.v1.Mdtplmnlist
	(*MdtmodeNR)(nil),                                               // 468: xnap.v1.MdtmodeNR
	(*MdtmodeNRExtension)(nil),                                      // 469: xnap.v1.MdtmodeNRExtension
	(*MdtmodeNRExtensionIe)(nil),                                    // 470: xnap.v1.MdtmodeNRExtensionIe
	(*MdtmodeEUtra)(nil),                                            // 471: xnap.v1.MdtmodeEUtra
	(*MdtmodeEUtraExtension)(nil),                                   // 472: xnap.v1.MdtmodeEUtraExtension
	(*MdtmodeEUtraExtensionIe)(nil),                                 // 473: xnap.v1.MdtmodeEUtraExtensionIe
	(*MeasurementsToActivate)(nil),                                  // 474: xnap.v1.MeasurementsToActivate
	(*MeasurementThresholdA2ExtIes)(nil),                            // 475: xnap.v1.MeasurementThresholdA2ExtIes
	(*MeasurementThresholdA2)(nil),                                  // 476: xnap.v1.MeasurementThresholdA2
	(*MeasurementID)(nil),                                           // 477: xnap.v1.MeasurementID
	(*MobilityInformation)(nil),                                     // 478: xnap.v1.MobilityInformation
	(*MobilityParametersModificationRange)(nil),                     // 479: xnap.v1.MobilityParametersModificationRange
	(*MobilityParametersInformation)(nil),                           // 480: xnap.v1.MobilityParametersInformation
	(*MobilityRestrictionListExtIesExtension)(nil),                  // 481: xnap.v1.MobilityRestrictionListExtIesExtension
	(*MobilityRestrictionListExtIes)(nil),                           // 482: xnap.v1.MobilityRestrictionListExtIes
	(*MobilityRestrictionList)(nil),                                 // 483: xnap.v1.MobilityRestrictionList
	(*CntypeRestrictionsForEquivalent)(nil),                         // 484: xnap.v1.CntypeRestrictionsForEquivalent
	(*CntypeRestrictionsForEquivalentItemExtIes)(nil),               // 485: xnap.v1.CntypeRestrictionsForEquivalentItemExtIes
	(*CntypeRestrictionsForEquivalentItem)(nil),                     // 486: xnap.v1.CntypeRestrictionsForEquivalentItem
	(*RatRestrictionsList)(nil),                                     // 487: xnap.v1.RatRestrictionsList
	(*RatRestrictionsItemExtIes)(nil),                               // 488: xnap.v1.RatRestrictionsItemExtIes
	(*RatRestrictionsItem)(nil),                                     // 489: xnap.v1.RatRestrictionsItem
	(*RatRestrictionInformation)(nil),                               // 490: xnap.v1.RatRestrictionInformation
	(*ForbiddenAreaList)(nil),                                       // 491: xnap.v1.ForbiddenAreaList
	(*ForbiddenAreaItemExtIes)(nil),                                 // 492: xnap.v1.ForbiddenAreaItemExtIes
	(*ForbiddenAreaItem)(nil),                                       // 493: xnap.v1.ForbiddenAreaItem
	(*ServiceAreaList)(nil),                                         // 494: xnap.v1.ServiceAreaList
	(*ServiceAreaItemExtIes)(nil),                                   // 495: xnap.v1.ServiceAreaItemExtIes
	(*ServiceAreaItem)(nil),                                         // 496: xnap.v1.ServiceAreaItem
	(*MrDCResourceCoordinationInfoExtIes)(nil),                      // 497: xnap.v1.MrDCResourceCoordinationInfoExtIes
	(*MrDCResourceCoordinationInfo)(nil),                            // 498: xnap.v1.MrDCResourceCoordinationInfo
	(*NgRAnNodeResourceCoordinationInfo)(nil),                       // 499: xnap.v1.NgRAnNodeResourceCoordinationInfo
	(*EUTraResourceCoordinationInfoExtIes)(nil),                     // 500: xnap.v1.EUTraResourceCoordinationInfoExtIes
	(*EUTraResourceCoordinationInfo)(nil),                           // 501: xnap.v1.EUTraResourceCoordinationInfo
	(*NrResourceCoordinationInfoExtIes)(nil),                        // 502: xnap.v1.NrResourceCoordinationInfoExtIes
	(*NrResourceCoordinationInfo)(nil),                              // 503: xnap.v1.NrResourceCoordinationInfo
	(*MessageOversizeNotificationExtIes)(nil),                       // 504: xnap.v1.MessageOversizeNotificationExtIes
	(*MessageOversizeNotification)(nil),                             // 505: xnap.v1.MessageOversizeNotification
	(*MaximumCellListSize)(nil),                                     // 506: xnap.v1.MaximumCellListSize
	(*NeDCTDmPatternExtIes)(nil),                                    // 507: xnap.v1.NeDCTDmPatternExtIes
	(*NeDCTDmPattern)(nil),                                          // 508: xnap.v1.NeDCTDmPattern
	(*NeighbourInformationEUTra)(nil),                               // 509: xnap.v1.NeighbourInformationEUTra
	(*NeighbourInformationEUTraItemExtIes)(nil),                     // 510: xnap.v1.NeighbourInformationEUTraItemExtIes
	(*NeighbourInformationEUTraItem)(nil),                           // 511: xnap.v1.NeighbourInformationEUTraItem
	(*NeighbourInformationNR)(nil),                                  // 512: xnap.v1.NeighbourInformationNR
	(*NeighbourInformationNRItemExtIes)(nil),                        // 513: xnap.v1.NeighbourInformationNRItemExtIes
	(*NeighbourInformationNRItem)(nil),                              // 514: xnap.v1.NeighbourInformationNRItem
	(*NeighbourInformationNRModeInfoExtIes)(nil),                    // 515: xnap.v1.NeighbourInformationNRModeInfoExtIes
	(*NeighbourInformationNRModeInfo)(nil),                          // 516: xnap.v1.NeighbourInformationNRModeInfo
	(*NeighbourInformationNRModeFddinfoExtIes)(nil),                 // 517: xnap.v1.NeighbourInformationNRModeFddinfoExtIes
	(*NeighbourInformationNRModeFddinfo)(nil),                       // 518: xnap.v1.NeighbourInformationNRModeFddinfo
	(*NeighbourInformationNRModeTddinfoExtIes)(nil),                 // 519: xnap.v1.NeighbourInformationNRModeTddinfoExtIes
	(*NeighbourInformationNRModeTddinfo)(nil),                       // 520: xnap.v1.NeighbourInformationNRModeTddinfo
	(*Nid)(nil),                                                                     // 521: xnap.v1.Nid
	(*NrcarrierList)(nil),                                                           // 522: xnap.v1.NrcarrierList
	(*NrcarrierItemExtIes)(nil),                                                     // 523: xnap.v1.NrcarrierItemExtIes
	(*NrcarrierItem)(nil),                                                           // 524: xnap.v1.NrcarrierItem
	(*NrcellPrachconfig)(nil),                                                       // 525: xnap.v1.NrcellPrachconfig
	(*NgRAnCellIdentityExtIes)(nil),                                                 // 526: xnap.v1.NgRAnCellIdentityExtIes
	(*NgRAnCellIdentity)(nil),                                                       // 527: xnap.v1.NgRAnCellIdentity
	(*NgRAnCellPciExtIes)(nil),                                                      // 528: xnap.v1.NgRAnCellPciExtIes
	(*NgRAnCellPci)(nil),                                                            // 529: xnap.v1.NgRAnCellPci
	(*NgRAnnodeUexnApid)(nil),                                                       // 530: xnap.v1.NgRAnnodeUexnApid
	(*NumberofActiveUes)(nil),                                                       // 531: xnap.v1.NumberofActiveUes
	(*NoofRrcconnections)(nil),                                                      // 532: xnap.v1.NoofRrcconnections
	(*NonDynamic5QidescriptorExtIesExtension)(nil),                                  // 533: xnap.v1.NonDynamic5QidescriptorExtIesExtension
	(*NonDynamic5QidescriptorExtIes)(nil),                                           // 534: xnap.v1.NonDynamic5QidescriptorExtIes
	(*NonDynamic5Qidescriptor)(nil),                                                 // 535: xnap.v1.NonDynamic5Qidescriptor
	(*Nrarfcn)(nil),                                                                 // 536: xnap.v1.Nrarfcn
	(*NgeNbRadioResourceStatusExtIesExtension)(nil),                                 // 537: xnap.v1.NgeNbRadioResourceStatusExtIesExtension
	(*NgeNbRadioResourceStatusExtIes)(nil),                                          // 538: xnap.v1.NgeNbRadioResourceStatusExtIes
	(*NgeNbRadioResourceStatus)(nil),                                                // 539: xnap.v1.NgeNbRadioResourceStatus
	(*DlschedulingPDcchCCeusage)(nil),                                               // 540: xnap.v1.DlschedulingPDcchCCeusage
	(*UlschedulingPDcchCCeusage)(nil),                                               // 541: xnap.v1.UlschedulingPDcchCCeusage
	(*TnlcapacityIndicatorExtIes)(nil),                                              // 542: xnap.v1.TnlcapacityIndicatorExtIes
	(*TnlcapacityIndicator)(nil),                                                    // 543: xnap.v1.TnlcapacityIndicator
	(*NpnBroadcastInformationExtIes)(nil),                                           // 544: xnap.v1.NpnBroadcastInformationExtIes
	(*NpnBroadcastInformation)(nil),                                                 // 545: xnap.v1.NpnBroadcastInformation
	(*NpnBroadcastInformationSNpnExtIes)(nil),                                       // 546: xnap.v1.NpnBroadcastInformationSNpnExtIes
	(*NpnBroadcastInformationSNpn)(nil),                                             // 547: xnap.v1.NpnBroadcastInformationSNpn
	(*NpnBroadcastInformationPNiNPnExtIes)(nil),                                     // 548: xnap.v1.NpnBroadcastInformationPNiNPnExtIes
	(*NpnBroadcastInformationPNiNPn)(nil),                                           // 549: xnap.v1.NpnBroadcastInformationPNiNPn
	(*NpnmobilityInformationExtIes)(nil),                                            // 550: xnap.v1.NpnmobilityInformationExtIes
	(*NpnmobilityInformation)(nil),                                                  // 551: xnap.v1.NpnmobilityInformation
	(*NpnmobilityInformationSNpnExtIes)(nil),                                        // 552: xnap.v1.NpnmobilityInformationSNpnExtIes
	(*NpnmobilityInformationSNpn)(nil),                                              // 553: xnap.v1.NpnmobilityInformationSNpn
	(*NpnmobilityInformationPNiNPnExtIes)(nil),                                      // 554: xnap.v1.NpnmobilityInformationPNiNPnExtIes
	(*NpnmobilityInformationPNiNPn)(nil),                                            // 555: xnap.v1.NpnmobilityInformationPNiNPn
	(*NpnpagingAssistanceInformationExtIes)(nil),                                    // 556: xnap.v1.NpnpagingAssistanceInformationExtIes
	(*NpnpagingAssistanceInformation)(nil),                                          // 557: xnap.v1.NpnpagingAssistanceInformation
	(*NpnpagingAssistanceInformationPNiNPnExtIes)(nil),                              // 558: xnap.v1.NpnpagingAssistanceInformationPNiNPnExtIes
	(*NpnpagingAssistanceInformationPNiNPn)(nil),                                    // 559: xnap.v1.NpnpagingAssistanceInformationPNiNPn
	(*NpnSupportExtIes)(nil),                                                        // 560: xnap.v1.NpnSupportExtIes
	(*NpnSupport)(nil),                                                              // 561: xnap.v1.NpnSupport
	(*NpnSupportSNpnExtIes)(nil),                                                    // 562: xnap.v1.NpnSupportSNpnExtIes
	(*NpnSupportSNpn)(nil),                                                          // 563: xnap.v1.NpnSupportSNpn
	(*FddorTDdinNPrachconfigurationChoiceExtIes)(nil),                               // 564: xnap.v1.FddorTDdinNPrachconfigurationChoiceExtIes
	(*FddortddNprachconfiguration)(nil),                                             // 565: xnap.v1.FddortddNprachconfiguration
	(*NprachconfigurationExtIes)(nil),                                               // 566: xnap.v1.NprachconfigurationExtIes
	(*Nprachconfiguration)(nil),                                                     // 567: xnap.v1.Nprachconfiguration
	(*NprachconfigurationFDdExtIes)(nil),                                            // 568: xnap.v1.NprachconfigurationFDdExtIes
	(*NprachconfigurationFDd)(nil),                                                  // 569: xnap.v1.NprachconfigurationFDd
	(*NprachconfigurationTDdExtIes)(nil),                                            // 570: xnap.v1.NprachconfigurationTDdExtIes
	(*NprachconfigurationTDd)(nil),                                                  // 571: xnap.v1.NprachconfigurationTDd
	(*NonAnchorCarrierFrequencylistExtIes)(nil),                                     // 572: xnap.v1.NonAnchorCarrierFrequencylistExtIes
	(*NestedNonAnchorCarrierFrequencylist)(nil),                                     // 573: xnap.v1.NestedNonAnchorCarrierFrequencylist
	(*NonAnchorCarrierFrequencylist)(nil),                                           // 574: xnap.v1.NonAnchorCarrierFrequencylist
	(*NrCellIdentity)(nil),                                                          // 575: xnap.v1.NrCellIdentity
	(*NgRAnCellIdentityListinRanpagingArea)(nil),                                    // 576: xnap.v1.NgRAnCellIdentityListinRanpagingArea
	(*NrCGiExtIes)(nil),                                                             // 577: xnap.v1.NrCGiExtIes
	(*NrCGi)(nil),                                                                   // 578: xnap.v1.NrCGi
	(*NrfrequencyBand)(nil),                                                         // 579: xnap.v1.NrfrequencyBand
	(*NrfrequencyBandList)(nil),                                                     // 580: xnap.v1.NrfrequencyBandList
	(*NrfrequencyBandItemExtIes)(nil),                                               // 581: xnap.v1.NrfrequencyBandItemExtIes
	(*NrfrequencyBandItem)(nil),                                                     // 582: xnap.v1.NrfrequencyBandItem
	(*NrfrequencyInfoExtIes)(nil),                                                   // 583: xnap.v1.NrfrequencyInfoExtIes
	(*NrfrequencyInfo)(nil),                                                         // 584: xnap.v1.NrfrequencyInfo
	(*NrmobilityHistoryReport)(nil),                                                 // 585: xnap.v1.NrmobilityHistoryReport
	(*NrmodeInfoExtIes)(nil),                                                        // 586: xnap.v1.NrmodeInfoExtIes
	(*NrmodeInfo)(nil),                                                              // 587: xnap.v1.NrmodeInfo
	(*NrmodeInfoFddExtIesExtension)(nil),                                            // 588: xnap.v1.NrmodeInfoFddExtIesExtension
	(*NrmodeInfoFddExtIes)(nil),                                                     // 589: xnap.v1.NrmodeInfoFddExtIes
	(*NrmodeInfoFdd)(nil),                                                           // 590: xnap.v1.NrmodeInfoFdd
	(*NrmodeInfoTddExtIesExtension)(nil),                                            // 591: xnap.v1.NrmodeInfoTddExtIesExtension
	(*NrmodeInfoTddExtIes)(nil),                                                     // 592: xnap.v1.NrmodeInfoTddExtIes
	(*NrmodeInfoTdd)(nil),                                                           // 593: xnap.v1.NrmodeInfoTdd
	(*Nrpci)(nil),                                                                   // 594: xnap.v1.Nrpci
	(*NrtransmissionBandwidthExtIes)(nil),                                           // 595: xnap.v1.NrtransmissionBandwidthExtIes
	(*NrtransmissionBandwidth)(nil),                                                 // 596: xnap.v1.NrtransmissionBandwidth
	(*NgRAntraceId)(nil),                                                            // 597: xnap.v1.NgRAntraceId
	(*Nrv2XservicesAuthorizedExtIes)(nil),                                           // 598: xnap.v1.Nrv2XservicesAuthorizedExtIes
	(*Nrv2XservicesAuthorized)(nil),                                                 // 599: xnap.v1.Nrv2XservicesAuthorized
	(*NruesidelinkAggregateMaximumBitRateExtIes)(nil),                               // 600: xnap.v1.NruesidelinkAggregateMaximumBitRateExtIes
	(*NruesidelinkAggregateMaximumBitRate)(nil),                                     // 601: xnap.v1.NruesidelinkAggregateMaximumBitRate
	(*OfferedCapacity)(nil),                                                         // 602: xnap.v1.OfferedCapacity
	(*PacketDelayBudget)(nil),                                                       // 603: xnap.v1.PacketDelayBudget
	(*PacketErrorRateExtIes)(nil),                                                   // 604: xnap.v1.PacketErrorRateExtIes
	(*PacketErrorRate)(nil),                                                         // 605: xnap.v1.PacketErrorRate
	(*PerScalar)(nil),                                                               // 606: xnap.v1.PerScalar
	(*PerExponent)(nil),                                                             // 607: xnap.v1.PerExponent
	(*PacketLossRate)(nil),                                                          // 608: xnap.v1.PacketLossRate
	(*PagingeDrxinformationExtIes)(nil),                                             // 609: xnap.v1.PagingeDrxinformationExtIes
	(*PagingeDrxinformation)(nil),                                                   // 610: xnap.v1.PagingeDrxinformation
	(*Pc5QoSparametersExtIes)(nil),                                                  // 611: xnap.v1.Pc5QoSparametersExtIes
	(*Pc5QoSparameters)(nil),                                                        // 612: xnap.v1.Pc5QoSparameters
	(*Pc5QoSflowList)(nil),                                                          // 613: xnap.v1.Pc5QoSflowList
	(*Pc5QoSflowItemExtIes)(nil),                                                    // 614: xnap.v1.Pc5QoSflowItemExtIes
	(*Pc5QoSflowItem)(nil),                                                          // 615: xnap.v1.Pc5QoSflowItem
	(*Pc5FlowBitRatesExtIes)(nil),                                                   // 616: xnap.v1.Pc5FlowBitRatesExtIes
	(*Pc5FlowBitRates)(nil),                                                         // 617: xnap.v1.Pc5FlowBitRates
	(*PdcpchangeIndicationExtIes)(nil),                                              // 618: xnap.v1.PdcpchangeIndicationExtIes
	(*PdcpchangeIndication)(nil),                                                    // 619: xnap.v1.PdcpchangeIndication
	(*PdcpsnlengthExtIes)(nil),                                                      // 620: xnap.v1.PdcpsnlengthExtIes
	(*Pdcpsnlength)(nil),                                                            // 621: xnap.v1.Pdcpsnlength
	(*PdusessionAggregateMaximumBitRateExtIes)(nil),                                 // 622: xnap.v1.PdusessionAggregateMaximumBitRateExtIes
	(*PdusessionAggregateMaximumBitRate)(nil),                                       // 623: xnap.v1.PdusessionAggregateMaximumBitRate
	(*PdusessionList)(nil),                                                          // 624: xnap.v1.PdusessionList
	(*PdusessionListwithCause)(nil),                                                 // 625: xnap.v1.PdusessionListwithCause
	(*PdusessionListwithCauseItemExtIes)(nil),                                       // 626: xnap.v1.PdusessionListwithCauseItemExtIes
	(*PdusessionListwithCauseItem)(nil),                                             // 627: xnap.v1.PdusessionListwithCauseItem
	(*PdusessionListwithDataForwardingFromTarget)(nil),                              // 628: xnap.v1.PdusessionListwithDataForwardingFromTarget
	(*PdusessionListwithDataForwardingFromTargetItemExtIes)(nil),                    // 629: xnap.v1.PdusessionListwithDataForwardingFromTargetItemExtIes
	(*PdusessionListwithDataForwardingFromTargetItem)(nil),                          // 630: xnap.v1.PdusessionListwithDataForwardingFromTargetItem
	(*PdusessionListwithDataForwardingRequest)(nil),                                 // 631: xnap.v1.PdusessionListwithDataForwardingRequest
	(*PdusessionListwithDataForwardingRequestItemExtIes)(nil),                       // 632: xnap.v1.PdusessionListwithDataForwardingRequestItemExtIes
	(*PdusessionListwithDataForwardingRequestItem)(nil),                             // 633: xnap.v1.PdusessionListwithDataForwardingRequestItem
	(*PdusessionResourcesAdmittedList)(nil),                                         // 634: xnap.v1.PdusessionResourcesAdmittedList
	(*PdusessionResourcesAdmittedItemExtIes)(nil),                                   // 635: xnap.v1.PdusessionResourcesAdmittedItemExtIes
	(*PdusessionResourcesAdmittedItem)(nil),                                         // 636: xnap.v1.PdusessionResourcesAdmittedItem
	(*PdusessionResourceAdmittedInfoExtIes)(nil),                                    // 637: xnap.v1.PdusessionResourceAdmittedInfoExtIes
	(*PdusessionResourceAdmittedInfo)(nil),                                          // 638: xnap.v1.PdusessionResourceAdmittedInfo
	(*PdusessionResourcesNotAdmittedList)(nil),                                      // 639: xnap.v1.PdusessionResourcesNotAdmittedList
	(*PdusessionResourcesNotAdmittedItemItemExtIes)(nil),                            // 640: xnap.v1.PdusessionResourcesNotAdmittedItemItemExtIes
	(*PdusessionResourcesNotAdmittedItem)(nil),                                      // 641: xnap.v1.PdusessionResourcesNotAdmittedItem
	(*PdusessionResourcesToBeSetupList)(nil),                                        // 642: xnap.v1.PdusessionResourcesToBeSetupList
	(*PdusessionResourcesToBeSetupItemExtIesExtension)(nil),                         // 643: xnap.v1.PdusessionResourcesToBeSetupItemExtIesExtension
	(*PdusessionResourcesToBeSetupItemExtIes)(nil),                                  // 644: xnap.v1.PdusessionResourcesToBeSetupItemExtIes
	(*PdusessionResourcesToBeSetupItem)(nil),                                        // 645: xnap.v1.PdusessionResourcesToBeSetupItem
	(*PdusessionResourceSetupInfoSNterminatedExtIesExtension)(nil),                  // 646: xnap.v1.PdusessionResourceSetupInfoSNterminatedExtIesExtension
	(*PdusessionResourceSetupInfoSNterminatedExtIes)(nil),                           // 647: xnap.v1.PdusessionResourceSetupInfoSNterminatedExtIes
	(*PdusessionResourceSetupInfoSNterminated)(nil),                                 // 648: xnap.v1.PdusessionResourceSetupInfoSNterminated
	(*QoSflowsToBeSetupListSetupSNterminated)(nil),                                  // 649: xnap.v1.QoSflowsToBeSetupListSetupSNterminated
	(*QoSflowsToBeSetupListSetupSNterminatedItemExtIesExtension)(nil),               // 650: xnap.v1.QoSflowsToBeSetupListSetupSNterminatedItemExtIesExtension
	(*QoSflowsToBeSetupListSetupSNterminatedItemExtIes)(nil),                        // 651: xnap.v1.QoSflowsToBeSetupListSetupSNterminatedItemExtIes
	(*QoSflowsToBeSetupListSetupSNterminatedItem)(nil),                              // 652: xnap.v1.QoSflowsToBeSetupListSetupSNterminatedItem
	(*PdusessionResourceSetupResponseInfoSNterminatedExtIesExtension)(nil),          // 653: xnap.v1.PdusessionResourceSetupResponseInfoSNterminatedExtIesExtension
	(*PdusessionResourceSetupResponseInfoSNterminatedExtIes)(nil),                   // 654: xnap.v1.PdusessionResourceSetupResponseInfoSNterminatedExtIes
	(*PdusessionResourceSetupResponseInfoSNterminated)(nil),                         // 655: xnap.v1.PdusessionResourceSetupResponseInfoSNterminated
	(*DrbsToBeSetupListSetupResponseSNterminated)(nil),                              // 656: xnap.v1.DrbsToBeSetupListSetupResponseSNterminated
	(*DrbsToBeSetupListSetupResponseSNterminatedItemExtIesExtension)(nil),           // 657: xnap.v1.DrbsToBeSetupListSetupResponseSNterminatedItemExtIesExtension
	(*DrbsToBeSetupListSetupResponseSNterminatedItemExtIes)(nil),                    // 658: xnap.v1.DrbsToBeSetupListSetupResponseSNterminatedItemExtIes
	(*DrbsToBeSetupListSetupResponseSNterminatedItem)(nil),                          // 659: xnap.v1.DrbsToBeSetupListSetupResponseSNterminatedItem
	(*QoSflowsMappedtoDrbSetupResponseSNterminated)(nil),                            // 660: xnap.v1.QoSflowsMappedtoDrbSetupResponseSNterminated
	(*QoSflowsMappedtoDrbSetupResponseSNterminatedItemExtIesExtension)(nil),         // 661: xnap.v1.QoSflowsMappedtoDrbSetupResponseSNterminatedItemExtIesExtension
	(*QoSflowsMappedtoDrbSetupResponseSNterminatedItemExtIes)(nil),                  // 662: xnap.v1.QoSflowsMappedtoDrbSetupResponseSNterminatedItemExtIes
	(*QoSflowsMappedtoDrbSetupResponseSNterminatedItem)(nil),                        // 663: xnap.v1.QoSflowsMappedtoDrbSetupResponseSNterminatedItem
	(*PdusessionResourceSetupInfoMNterminatedExtIes)(nil),                           // 664: xnap.v1.PdusessionResourceSetupInfoMNterminatedExtIes
	(*PdusessionResourceSetupInfoMNterminated)(nil),                                 // 665: xnap.v1.PdusessionResourceSetupInfoMNterminated
	(*DrbsToBeSetupListSetupMNterminated)(nil),                                      // 666: xnap.v1.DrbsToBeSetupListSetupMNterminated
	(*DrbsToBeSetupListSetupMNterminatedItemExtIesExtension)(nil),                   // 667: xnap.v1.DrbsToBeSetupListSetupMNterminatedItemExtIesExtension
	(*DrbsToBeSetupListSetupMNterminatedItemExtIes)(nil),                            // 668: xnap.v1.DrbsToBeSetupListSetupMNterminatedItemExtIes
	(*DrbsToBeSetupListSetupMNterminatedItem)(nil),                                  // 669: xnap.v1.DrbsToBeSetupListSetupMNterminatedItem
	(*QoSflowsMappedtoDrbSetupMNterminated)(nil),                                    // 670: xnap.v1.QoSflowsMappedtoDrbSetupMNterminated
	(*QoSflowsMappedtoDrbSetupMNterminatedItemExtIes)(nil),                          // 671: xnap.v1.QoSflowsMappedtoDrbSetupMNterminatedItemExtIes
	(*QoSflowsMappedtoDrbSetupMNterminatedItem)(nil),                                // 672: xnap.v1.QoSflowsMappedtoDrbSetupMNterminatedItem
	(*PdusessionResourceSetupResponseInfoMNterminatedExtIes)(nil),                   // 673: xnap.v1.PdusessionResourceSetupResponseInfoMNterminatedExtIes
	(*PdusessionResourceSetupResponseInfoMNterminated)(nil),                         // 674: xnap.v1.PdusessionResourceSetupResponseInfoMNterminated
	(*DrbsAdmittedListSetupResponseMNterminated)(nil),                               // 675: xnap.v1.DrbsAdmittedListSetupResponseMNterminated
	(*DrbsAdmittedListSetupResponseMNterminatedItemExtIesExtension)(nil),            // 676: xnap.v1.DrbsAdmittedListSetupResponseMNterminatedItemExtIesExtension
	(*DrbsAdmittedListSetupResponseMNterminatedItemExtIes)(nil),                     // 677: xnap.v1.DrbsAdmittedListSetupResponseMNterminatedItemExtIes
	(*DrbsAdmittedListSetupResponseMNterminatedItem)(nil),                           // 678: xnap.v1.DrbsAdmittedListSetupResponseMNterminatedItem
	(*QoSflowsMappedtoDrbSetupResponseMNterminated)(nil),                            // 679: xnap.v1.QoSflowsMappedtoDrbSetupResponseMNterminated
	(*QoSflowsMappedtoDrbSetupResponseMNterminatedItemExtIes)(nil),                  // 680: xnap.v1.QoSflowsMappedtoDrbSetupResponseMNterminatedItemExtIes
	(*QoSflowsMappedtoDrbSetupResponseMNterminatedItem)(nil),                        // 681: xnap.v1.QoSflowsMappedtoDrbSetupResponseMNterminatedItem
	(*PdusessionResourceModificationInfoSNterminatedExtIesExtension)(nil),           // 682: xnap.v1.PdusessionResourceModificationInfoSNterminatedExtIesExtension
	(*PdusessionResourceModificationInfoSNterminatedExtIes)(nil),                    // 683: xnap.v1.PdusessionResourceModificationInfoSNterminatedExtIes
	(*PdusessionResourceModificationInfoSNterminated)(nil),                          // 684: xnap.v1.PdusessionResourceModificationInfoSNterminated
	(*QoSflowsToBeSetupListModifiedSNterminated)(nil),                               // 685: xnap.v1.QoSflowsToBeSetupListModifiedSNterminated
	(*QoSflowsToBeSetupListModifiedSNterminatedItemExtIesExtension)(nil),            // 686: xnap.v1.QoSflowsToBeSetupListModifiedSNterminatedItemExtIesExtension
	(*QoSflowsToBeSetupListModifiedSNterminatedItemExtIes)(nil),                     // 687: xnap.v1.QoSflowsToBeSetupListModifiedSNterminatedItemExtIes
	(*QoSflowsToBeSetupListModifiedSNterminatedItem)(nil),                           // 688: xnap.v1.QoSflowsToBeSetupListModifiedSNterminatedItem
	(*DrbsToBeModifiedListModifiedSNterminated)(nil),                                // 689: xnap.v1.DrbsToBeModifiedListModifiedSNterminated
	(*DrbsToBeModifiedListModifiedSNterminatedItemExtIes)(nil),                      // 690: xnap.v1.DrbsToBeModifiedListModifiedSNterminatedItemExtIes
	(*DrbsToBeModifiedListModifiedSNterminatedItem)(nil),                            // 691: xnap.v1.DrbsToBeModifiedListModifiedSNterminatedItem
	(*PdusessionResourceModificationResponseInfoSNterminatedExtIesExtension)(nil),   // 692: xnap.v1.PdusessionResourceModificationResponseInfoSNterminatedExtIesExtension
	(*PdusessionResourceModificationResponseInfoSNterminatedExtIes)(nil),            // 693: xnap.v1.PdusessionResourceModificationResponseInfoSNterminatedExtIes
	(*PdusessionResourceModificationResponseInfoSNterminated)(nil),                  // 694: xnap.v1.PdusessionResourceModificationResponseInfoSNterminated
	(*DrbsToBeModifiedListModificationResponseSNterminated)(nil),                    // 695: xnap.v1.DrbsToBeModifiedListModificationResponseSNterminated
	(*DrbsToBeModifiedListModificationResponseSNterminatedItemExtIesExtension)(nil), // 696: xnap.v1.DrbsToBeModifiedListModificationResponseSNterminatedItemExtIesExtension
	(*DrbsToBeModifiedListModificationResponseSNterminatedItemExtIes)(nil),          // 697: xnap.v1.DrbsToBeModifiedListModificationResponseSNterminatedItemExtIes
	(*DrbsToBeModifiedListModificationResponseSNterminatedItem)(nil),                // 698: xnap.v1.DrbsToBeModifiedListModificationResponseSNterminatedItem
	(*PdusessionResourceModificationInfoMNterminatedExtIes)(nil),                    // 699: xnap.v1.PdusessionResourceModificationInfoMNterminatedExtIes
	(*PdusessionResourceModificationInfoMNterminated)(nil),                          // 700: xnap.v1.PdusessionResourceModificationInfoMNterminated
	(*DrbsToBeModifiedListModificationMNterminated)(nil),                            // 701: xnap.v1.DrbsToBeModifiedListModificationMNterminated
	(*DrbsToBeModifiedListModificationMNterminatedItemExtIesExtension)(nil),         // 702: xnap.v1.DrbsToBeModifiedListModificationMNterminatedItemExtIesExtension
	(*DrbsToBeModifiedListModificationMNterminatedItemExtIes)(nil),                  // 703: xnap.v1.DrbsToBeModifiedListModificationMNterminatedItemExtIes
	(*DrbsToBeModifiedListModificationMNterminatedItem)(nil),                        // 704: xnap.v1.DrbsToBeModifiedListModificationMNterminatedItem
	(*PdusessionResourceModificationResponseInfoMNterminatedExtIes)(nil),            // 705: xnap.v1.PdusessionResourceModificationResponseInfoMNterminatedExtIes
	(*PdusessionResourceModificationResponseInfoMNterminated)(nil),                  // 706: xnap.v1.PdusessionResourceModificationResponseInfoMNterminated
	(*DrbsAdmittedListModificationResponseMNterminated)(nil),                        // 707: xnap.v1.DrbsAdmittedListModificationResponseMNterminated
	(*DrbsAdmittedListModificationResponseMNterminatedItemExtIesExtension)(nil),     // 708: xnap.v1.DrbsAdmittedListModificationResponseMNterminatedItemExtIesExtension
	(*DrbsAdmittedListModificationResponseMNterminatedItemExtIes)(nil),              // 709: xnap.v1.DrbsAdmittedListModificationResponseMNterminatedItemExtIes
	(*DrbsAdmittedListModificationResponseMNterminatedItem)(nil),                    // 710: xnap.v1.DrbsAdmittedListModificationResponseMNterminatedItem
	(*PdusessionResourceChangeRequiredInfoSNterminatedExtIes)(nil),                  // 711: xnap.v1.PdusessionResourceChangeRequiredInfoSNterminatedExtIes
	(*PdusessionResourceChangeRequiredInfoSNterminated)(nil),                        // 712: xnap.v1.PdusessionResourceChangeRequiredInfoSNterminated
	(*PdusessionResourceChangeConfirmInfoSNterminatedExtIes)(nil),                   // 713: xnap.v1.PdusessionResourceChangeConfirmInfoSNterminatedExtIes
	(*PdusessionResourceChangeConfirmInfoSNterminated)(nil),                         // 714: xnap.v1.PdusessionResourceChangeConfirmInfoSNterminated
	(*PdusessionResourceChangeRequiredInfoMNterminatedExtIes)(nil),                  // 715: xnap.v1.PdusessionResourceChangeRequiredInfoMNterminatedExtIes
	(*PdusessionResourceChangeRequiredInfoMNterminated)(nil),                        // 716: xnap.v1.PdusessionResourceChangeRequiredInfoMNterminated
	(*PdusessionResourceChangeConfirmInfoMNterminatedExtIes)(nil),                   // 717: xnap.v1.PdusessionResourceChangeConfirmInfoMNterminatedExtIes
	(*PdusessionResourceChangeConfirmInfoMNterminated)(nil),                         // 718: xnap.v1.PdusessionResourceChangeConfirmInfoMNterminated
	(*PdusessionResourceModRqdInfoSNterminatedExtIes)(nil),                          // 719: xnap.v1.PdusessionResourceModRqdInfoSNterminatedExtIes
	(*PdusessionResourceModRqdInfoSNterminated)(nil),                                // 720: xnap.v1.PdusessionResourceModRqdInfoSNterminated
	(*DrbsToBeSetupListModRqdSNterminated)(nil),                                     // 721: xnap.v1.DrbsToBeSetupListModRqdSNterminated
	(*DrbsToBeSetupListModRqdSNterminatedItemExtIesExtension)(nil),                  // 722: xnap.v1.DrbsToBeSetupListModRqdSNterminatedItemExtIesExtension
	(*DrbsToBeSetupListModRqdSNterminatedItemExtIes)(nil),                           // 723: xnap.v1.DrbsToBeSetupListModRqdSNterminatedItemExtIes
	(*DrbsToBeSetupListModRqdSNterminatedItem)(nil),                                 // 724: xnap.v1.DrbsToBeSetupListModRqdSNterminatedItem
	(*QoSflowsSetupMappedtoDrbModRqdSNterminated)(nil),                              // 725: xnap.v1.QoSflowsSetupMappedtoDrbModRqdSNterminated
	(*QoSflowsSetupMappedtoDrbModRqdSNterminatedItemExtIes)(nil),                    // 726: xnap.v1.QoSflowsSetupMappedtoDrbModRqdSNterminatedItemExtIes
	(*QoSflowsSetupMappedtoDrbModRqdSNterminatedItem)(nil),                          // 727: xnap.v1.QoSflowsSetupMappedtoDrbModRqdSNterminatedItem
	(*DrbsToBeModifiedListModRqdSNterminated)(nil),                                  // 728: xnap.v1.DrbsToBeModifiedListModRqdSNterminated
	(*DrbsToBeModifiedListModRqdSNterminatedItemExtIesExtension)(nil),               // 729: xnap.v1.DrbsToBeModifiedListModRqdSNterminatedItemExtIesExtension
	(*DrbsToBeModifiedListModRqdSNterminatedItemExtIes)(nil),                        // 730: xnap.v1.DrbsToBeModifiedListModRqdSNterminatedItemExtIes
	(*DrbsToBeModifiedListModRqdSNterminatedItem)(nil),                              // 731: xnap.v1.DrbsToBeModifiedListModRqdSNterminatedItem
	(*QoSflowsModifiedMappedtoDrbModRqdSNterminated)(nil),                           // 732: xnap.v1.QoSflowsModifiedMappedtoDrbModRqdSNterminated
	(*QoSflowsModifiedMappedtoDrbModRqdSNterminatedItemExtIes)(nil),                 // 733: xnap.v1.QoSflowsModifiedMappedtoDrbModRqdSNterminatedItemExtIes
	(*QoSflowsModifiedMappedtoDrbModRqdSNterminatedItem)(nil),                       // 734: xnap.v1.QoSflowsModifiedMappedtoDrbModRqdSNterminatedItem
	(*PdusessionResourceModConfirmInfoSNterminatedExtIes)(nil),                      // 735: xnap.v1.PdusessionResourceModConfirmInfoSNterminatedExtIes
	(*PdusessionResourceModConfirmInfoSNterminated)(nil),                            // 736: xnap.v1.PdusessionResourceModConfirmInfoSNterminated
	(*DrbsAdmittedListModConfirmSNterminated)(nil),                                  // 737: xnap.v1.DrbsAdmittedListModConfirmSNterminated
	(*DrbsAdmittedListModConfirmSNterminatedItemExtIes)(nil),                        // 738: xnap.v1.DrbsAdmittedListModConfirmSNterminatedItemExtIes
	(*DrbsAdmittedListModConfirmSNterminatedItem)(nil),                              // 739: xnap.v1.DrbsAdmittedListModConfirmSNterminatedItem
	(*PdusessionResourceModRqdInfoMNterminatedExtIes)(nil),                          // 740: xnap.v1.PdusessionResourceModRqdInfoMNterminatedExtIes
	(*PdusessionResourceModRqdInfoMNterminated)(nil),                                // 741: xnap.v1.PdusessionResourceModRqdInfoMNterminated
	(*DrbsToBeModifiedListModRqdMNterminated)(nil),                                  // 742: xnap.v1.DrbsToBeModifiedListModRqdMNterminated
	(*DrbsToBeModifiedListModRqdMNterminatedItemExtIes)(nil),                        // 743: xnap.v1.DrbsToBeModifiedListModRqdMNterminatedItemExtIes
	(*DrbsToBeModifiedListModRqdMNterminatedItem)(nil),                              // 744: xnap.v1.DrbsToBeModifiedListModRqdMNterminatedItem
	(*PdusessionResourceModConfirmInfoMNterminatedExtIes)(nil),                      // 745: xnap.v1.PdusessionResourceModConfirmInfoMNterminatedExtIes
	(*PdusessionResourceModConfirmInfoMNterminated)(nil),                            // 746: xnap.v1.PdusessionResourceModConfirmInfoMNterminated
	(*PdusessionResourceBearerSetupCompleteInfoSNterminatedExtIes)(nil),             // 747: xnap.v1.PdusessionResourceBearerSetupCompleteInfoSNterminatedExtIes
	(*PdusessionResourceBearerSetupCompleteInfoSNterminated)(nil),                   // 748: xnap.v1.PdusessionResourceBearerSetupCompleteInfoSNterminated
	(*DrbsToBeSetupListBearerSetupCompleteSNterminatedItemExtIes)(nil),              // 749: xnap.v1.DrbsToBeSetupListBearerSetupCompleteSNterminatedItemExtIes
	(*DrbsToBeSetupListBearerSetupCompleteSNterminatedItem)(nil),                    // 750: xnap.v1.DrbsToBeSetupListBearerSetupCompleteSNterminatedItem
	(*PdusessionResourceSecondaryRatusageList)(nil),                                 // 751: xnap.v1.PdusessionResourceSecondaryRatusageList
	(*PdusessionResourceSecondaryRatusageItemExtIes)(nil),                           // 752: xnap.v1.PdusessionResourceSecondaryRatusageItemExtIes
	(*PdusessionResourceSecondaryRatusageItem)(nil),                                 // 753: xnap.v1.PdusessionResourceSecondaryRatusageItem
	(*PdusessionUsageReportExtIes)(nil),                                             // 754: xnap.v1.PdusessionUsageReportExtIes
	(*PdusessionUsageReport)(nil),                                                   // 755: xnap.v1.PdusessionUsageReport
	(*PdusessionID)(nil),                                                            // 756: xnap.v1.PdusessionID
	(*PdusessionNetworkInstance)(nil),                                               // 757: xnap.v1.PdusessionNetworkInstance
	(*PdusessionCommonNetworkInstance)(nil),                                         // 758: xnap.v1.PdusessionCommonNetworkInstance
	(*PeriodicalExtIes)(nil),                                                        // 759: xnap.v1.PeriodicalExtIes
	(*Periodical)(nil),                                                              // 760: xnap.v1.Periodical
	(*PlmnIdentity)(nil),                                                            // 761: xnap.v1.PlmnIdentity
	(*PcilistForMdt)(nil),                                                           // 762: xnap.v1.PcilistForMdt
	(*PortNumber)(nil),                                                              // 763: xnap.v1.PortNumber
	(*PriorityLevelQoS)(nil),                                                        // 764: xnap.v1.PriorityLevelQoS
	(*ProtectedEUTraresourceIndicationExtIes)(nil),                                  // 765: xnap.v1.ProtectedEUTraresourceIndicationExtIes
	(*ProtectedEUTraresourceIndication)(nil),                                        // 766: xnap.v1.ProtectedEUTraresourceIndication
	(*ProtectedEUTraresourceList)(nil),                                              // 767: xnap.v1.ProtectedEUTraresourceList
	(*ProtectedEUTraresourceItemExtIes)(nil),                                        // 768: xnap.v1.ProtectedEUTraresourceItemExtIes
	(*ProtectedEUTraresourceItem)(nil),                                              // 769: xnap.v1.ProtectedEUTraresourceItem
	(*ProtectedEUTrafootprintTimePatternExtIes)(nil),                                // 770: xnap.v1.ProtectedEUTrafootprintTimePatternExtIes
	(*ProtectedEUTrafootprintTimePattern)(nil),                                      // 771: xnap.v1.ProtectedEUTrafootprintTimePattern
	(*QoScharacteristicsExtIes)(nil),                                                // 772: xnap.v1.QoScharacteristicsExtIes
	(*QoScharacteristics)(nil),                                                      // 773: xnap.v1.QoScharacteristics
	(*QoSflowIdentifier)(nil),                                                       // 774: xnap.v1.QoSflowIdentifier
	(*QoSflowLevelQoSparametersExtIesExtension)(nil),                                // 775: xnap.v1.QoSflowLevelQoSparametersExtIesExtension
	(*QoSflowLevelQoSparametersExtIes)(nil),                                         // 776: xnap.v1.QoSflowLevelQoSparametersExtIes
	(*QoSflowLevelQoSparameters)(nil),                                               // 777: xnap.v1.QoSflowLevelQoSparameters
	(*QoSflowNotificationControlIndicationInfo)(nil),                                // 778: xnap.v1.QoSflowNotificationControlIndicationInfo
	(*QoSflowNotificationControlIndicationInfoExtIes)(nil),                          // 779: xnap.v1.QoSflowNotificationControlIndicationInfoExtIes
	(*QoSflowNotifyItem)(nil),                                                       // 780: xnap.v1.QoSflowNotifyItem
	(*QoSflowsList)(nil),                                                            // 781: xnap.v1.QoSflowsList
	(*QoSflowItemExtIes)(nil),                                                       // 782: xnap.v1.QoSflowItemExtIes
	(*QoSflowItem)(nil),                                                             // 783: xnap.v1.QoSflowItem
	(*QoSflowsListwithCause)(nil),                                                   // 784: xnap.v1.QoSflowsListwithCause
	(*QoSflowwithCauseItemExtIes)(nil),                                              // 785: xnap.v1.QoSflowwithCauseItemExtIes
	(*QoSflowwithCauseItem)(nil),                                                    // 786: xnap.v1.QoSflowwithCauseItem
	(*QoSMappingInformationExtIes)(nil),                                             // 787: xnap.v1.QoSMappingInformationExtIes
	(*QoSMappingInformation)(nil),                                                   // 788: xnap.v1.QoSMappingInformation
	(*QoSparaSetIndex)(nil),                                                         // 789: xnap.v1.QoSparaSetIndex
	(*QoSparaSetNotifyIndex)(nil),                                                   // 790: xnap.v1.QoSparaSetNotifyIndex
	(*QoSflowsAdmittedList)(nil),                                                    // 791: xnap.v1.QoSflowsAdmittedList
	(*QoSflowsAdmittedItemExtIes)(nil),                                              // 792: xnap.v1.QoSflowsAdmittedItemExtIes
	(*QoSflowsAdmittedItem)(nil),                                                    // 793: xnap.v1.QoSflowsAdmittedItem
	(*QoSflowsToBeSetupList)(nil),                                                   // 794: xnap.v1.QoSflowsToBeSetupList
	(*QoSflowsToBeSetupItemExtIesExtension)(nil),                                    // 795: xnap.v1.QoSflowsToBeSetupItemExtIesExtension
	(*QoSflowsToBeSetupItemExtIes)(nil),                                             // 796: xnap.v1.QoSflowsToBeSetupItemExtIes
	(*QoSflowsToBeSetupItem)(nil),                                                   // 797: xnap.v1.QoSflowsToBeSetupItem
	(*QoSflowsUsageReportList)(nil),                                                 // 798: xnap.v1.QoSflowsUsageReportList
	(*QoSflowsUsageReportItemExtIes)(nil),                                           // 799: xnap.v1.QoSflowsUsageReportItemExtIes
	(*QoSflowsUsageReportItem)(nil),                                                 // 800: xnap.v1.QoSflowsUsageReportItem
	(*QosMonitoringReportingFrequency)(nil),                                         // 801: xnap.v1.QosMonitoringReportingFrequency
	(*RachreportInformation)(nil),                                                   // 802: xnap.v1.RachreportInformation
	(*RachreportListItemExtIes)(nil),                                                // 803: xnap.v1.RachreportListItemExtIes
	(*RachreportListItem)(nil),                                                      // 804: xnap.v1.RachreportListItem
	(*RachreportContainer)(nil),                                                     // 805: xnap.v1.RachreportContainer
	(*RadioResourceStatusExtIes)(nil),                                               // 806: xnap.v1.RadioResourceStatusExtIes
	(*RadioResourceStatus)(nil),                                                     // 807: xnap.v1.RadioResourceStatus
	(*Ranac)(nil),                                                                   // 808: xnap.v1.Ranac
	(*RanareaIdExtIes)(nil),                                                         // 809: xnap.v1.RanareaIdExtIes
	(*RanareaId)(nil),                                                               // 810: xnap.v1.RanareaId
	(*RanareaIdList)(nil),                                                           // 811: xnap.v1.RanareaIdList
	(*RanpagingAreaExtIes)(nil),                                                     // 812: xnap.v1.RanpagingAreaExtIes
	(*RanpagingArea)(nil),                                                           // 813: xnap.v1.RanpagingArea
	(*RanpagingAreaChoiceExtIes)(nil),                                               // 814: xnap.v1.RanpagingAreaChoiceExtIes
	(*RanpagingAreaChoice)(nil),                                                     // 815: xnap.v1.RanpagingAreaChoice
	(*RanpagingAttemptInfoExtIes)(nil),                                              // 816: xnap.v1.RanpagingAttemptInfoExtIes
	(*RanpagingAttemptInfo)(nil),                                                    // 817: xnap.v1.RanpagingAttemptInfo
	(*RedundantPdusessionInformationExtIes)(nil),                                    // 818: xnap.v1.RedundantPdusessionInformationExtIes
	(*RedundantPdusessionInformation)(nil),                                          // 819: xnap.v1.RedundantPdusessionInformation
	(*ReferenceId)(nil),                                                             // 820: xnap.v1.ReferenceId
	(*ReportType)(nil),                                                              // 821: xnap.v1.ReportType
	(*ReportCharacteristics)(nil),                                                   // 822: xnap.v1.ReportCharacteristics
	(*RequestReferenceId)(nil),                                                      // 823: xnap.v1.RequestReferenceId
	(*ReservedSubframePatternExtIes)(nil),                                           // 824: xnap.v1.ReservedSubframePatternExtIes
	(*ReservedSubframePattern)(nil),                                                 // 825: xnap.v1.ReservedSubframePattern
	(*ResetRequestTypeInfoExtIes)(nil),                                              // 826: xnap.v1.ResetRequestTypeInfoExtIes
	(*ResetRequestTypeInfo)(nil),                                                    // 827: xnap.v1.ResetRequestTypeInfo
	(*ResetRequestTypeInfoFullExtIes)(nil),                                          // 828: xnap.v1.ResetRequestTypeInfoFullExtIes
	(*ResetRequestTypeInfoFull)(nil),                                                // 829: xnap.v1.ResetRequestTypeInfoFull
	(*ResetRequestTypeInfoPartialExtIes)(nil),                                       // 830: xnap.v1.ResetRequestTypeInfoPartialExtIes
	(*ResetRequestTypeInfoPartial)(nil),                                             // 831: xnap.v1.ResetRequestTypeInfoPartial
	(*ResetRequestPartialReleaseList)(nil),                                          // 832: xnap.v1.ResetRequestPartialReleaseList
	(*ResetRequestPartialReleaseItemExtIes)(nil),                                    // 833: xnap.v1.ResetRequestPartialReleaseItemExtIes
	(*ResetRequestPartialReleaseItem)(nil),                                          // 834: xnap.v1.ResetRequestPartialReleaseItem
	(*ResetResponseTypeInfoExtIes)(nil),                                             // 835: xnap.v1.ResetResponseTypeInfoExtIes
	(*ResetResponseTypeInfo)(nil),                                                   // 836: xnap.v1.ResetResponseTypeInfo
	(*ResetResponseTypeInfoFullExtIes)(nil),                                         // 837: xnap.v1.ResetResponseTypeInfoFullExtIes
	(*ResetResponseTypeInfoFull)(nil),                                               // 838: xnap.v1.ResetResponseTypeInfoFull
	(*ResetResponseTypeInfoPartialExtIes)(nil),                                      // 839: xnap.v1.ResetResponseTypeInfoPartialExtIes
	(*ResetResponseTypeInfoPartial)(nil),                                            // 840: xnap.v1.ResetResponseTypeInfoPartial
	(*ResetResponsePartialReleaseList)(nil),                                         // 841: xnap.v1.ResetResponsePartialReleaseList
	(*ResetResponsePartialReleaseItemExtIes)(nil),                                   // 842: xnap.v1.ResetResponsePartialReleaseItemExtIes
	(*ResetResponsePartialReleaseItem)(nil),                                         // 843: xnap.v1.ResetResponsePartialReleaseItem
	(*RlcStatusExtIes)(nil),                                                         // 844: xnap.v1.RlcStatusExtIes
	(*RlcStatus)(nil),                                                               // 845: xnap.v1.RlcStatus
	(*RlcduplicationInformationItemExtIes)(nil),                                     // 846: xnap.v1.RlcduplicationInformationItemExtIes
	(*RlcduplicationInformation)(nil),                                               // 847: xnap.v1.RlcduplicationInformation
	(*RlcduplicationStateList)(nil),                                                 // 848: xnap.v1.RlcduplicationStateList
	(*RlcduplicationStateItemExtIes)(nil),                                           // 849: xnap.v1.RlcduplicationStateItemExtIes
	(*RlcduplicationStateItem)(nil),                                                 // 850: xnap.v1.RlcduplicationStateItem
	(*RfspIndex)(nil),                                                               // 851: xnap.v1.RfspIndex
	(*RrcconnectionsExtIes)(nil),                                                    // 852: xnap.v1.RrcconnectionsExtIes
	(*Rrcconnections)(nil),                                                          // 853: xnap.v1.Rrcconnections
	(*RrcreestabinitiatedExtIes)(nil),                                               // 854: xnap.v1.RrcreestabinitiatedExtIes
	(*Rrcreestabinitiated)(nil),                                                     // 855: xnap.v1.Rrcreestabinitiated
	(*RrcreestabInitiatedReportingExtIes)(nil),                                      // 856: xnap.v1.RrcreestabInitiatedReportingExtIes
	(*RrcreestabInitiatedReporting)(nil),                                            // 857: xnap.v1.RrcreestabInitiatedReporting
	(*RrcreestabInitiatedReportingwoUErlfreportExtIes)(nil),                         // 858: xnap.v1.RrcreestabInitiatedReportingwoUErlfreportExtIes
	(*RrcreestabInitiatedReportingwoUErlfreport)(nil),                               // 859: xnap.v1.RrcreestabInitiatedReportingwoUErlfreport
	(*RrcreestabInitiatedReportingwithUErlfreportExtIes)(nil),                       // 860: xnap.v1.RrcreestabInitiatedReportingwithUErlfreportExtIes
	(*RrcreestabInitiatedReportingwithUErlfreport)(nil),                             // 861: xnap.v1.RrcreestabInitiatedReportingwithUErlfreport
	(*RrcsetupinitiatedExtIes)(nil),                                                 // 862: xnap.v1.RrcsetupinitiatedExtIes
	(*Rrcsetupinitiated)(nil),                                                       // 863: xnap.v1.Rrcsetupinitiated
	(*RrcsetupInitiatedReportingExtIes)(nil),                                        // 864: xnap.v1.RrcsetupInitiatedReportingExtIes
	(*RrcsetupInitiatedReporting)(nil),                                              // 865: xnap.v1.RrcsetupInitiatedReporting
	(*RrcsetupInitiatedReportingwithUErlfreportExtIes)(nil),                         // 866: xnap.v1.RrcsetupInitiatedReportingwithUErlfreportExtIes
	(*RrcsetupInitiatedReportingwithUErlfreport)(nil),                               // 867: xnap.v1.RrcsetupInitiatedReportingwithUErlfreport
	(*SecondarydataForwardingInfoFromTargetItemExtIes)(nil),                         // 868: xnap.v1.SecondarydataForwardingInfoFromTargetItemExtIes
	(*SecondarydataForwardingInfoFromTargetItem)(nil),                               // 869: xnap.v1.SecondarydataForwardingInfoFromTargetItem
	(*SecondarydataForwardingInfoFromTargetList)(nil),                               // 870: xnap.v1.SecondarydataForwardingInfoFromTargetList
	(*SecondaryRatusageInformationExtIes)(nil),                                      // 871: xnap.v1.SecondaryRatusageInformationExtIes
	(*SecondaryRatusageInformation)(nil),                                            // 872: xnap.v1.SecondaryRatusageInformation
	(*SecurityIndicationExtIes)(nil),                                                // 873: xnap.v1.SecurityIndicationExtIes
	(*SecurityIndication)(nil),                                                      // 874: xnap.v1.SecurityIndication
	(*SecurityResultExtIes)(nil),                                                    // 875: xnap.v1.SecurityResultExtIes
	(*SecurityResult)(nil),                                                          // 876: xnap.v1.SecurityResult
	(*SensorMeasurementConfigurationExtIes)(nil),                                    // 877: xnap.v1.SensorMeasurementConfigurationExtIes
	(*SensorMeasurementConfiguration)(nil),                                          // 878: xnap.v1.SensorMeasurementConfiguration
	(*SensorMeasConfigNameList)(nil),                                                // 879: xnap.v1.SensorMeasConfigNameList
	(*SensorNameConfigExtIes)(nil),                                                  // 880: xnap.v1.SensorNameConfigExtIes
	(*SensorName)(nil),                                                              // 881: xnap.v1.SensorName
	(*ServedCellInformationEUTraExtIesExtension)(nil),                               // 882: xnap.v1.ServedCellInformationEUTraExtIesExtension
	(*ServedCellInformationEUTraExtIes)(nil),                                        // 883: xnap.v1.ServedCellInformationEUTraExtIes
	(*ServedCellInformationEUTra)(nil),                                              // 884: xnap.v1.ServedCellInformationEUTra
	(*ServedCellInformationEUTraperBplmnExtIes)(nil),                                // 885: xnap.v1.ServedCellInformationEUTraperBplmnExtIes
	(*ServedCellInformationEUTraperBplmn)(nil),                                      // 886: xnap.v1.ServedCellInformationEUTraperBplmn
	(*ServedCellInformationEUTraModeInfoExtIes)(nil),                                // 887: xnap.v1.ServedCellInformationEUTraModeInfoExtIes
	(*ServedCellInformationEUTraModeInfo)(nil),                                      // 888: xnap.v1.ServedCellInformationEUTraModeInfo
	(*ServedCellInformationEUTraFDdinfoExtIesExtension)(nil),                        // 889: xnap.v1.ServedCellInformationEUTraFDdinfoExtIesExtension
	(*ServedCellInformationEUTraFDdinfoExtIes)(nil),                                 // 890: xnap.v1.ServedCellInformationEUTraFDdinfoExtIes
	(*ServedCellInformationEUTraFDdinfo)(nil),                                       // 891: xnap.v1.ServedCellInformationEUTraFDdinfo
	(*ServedCellInformationEUTraTDdinfoExtIesExtension)(nil),                        // 892: xnap.v1.ServedCellInformationEUTraTDdinfoExtIesExtension
	(*ServedCellInformationEUTraTDdinfoExtIes)(nil),                                 // 893: xnap.v1.ServedCellInformationEUTraTDdinfoExtIes
	(*ServedCellInformationEUTraTDdinfo)(nil),                                       // 894: xnap.v1.ServedCellInformationEUTraTDdinfo
	(*ServedCellsEUTra)(nil),                                                        // 895: xnap.v1.ServedCellsEUTra
	(*ServedCellsEUTraItemExtIes)(nil),                                              // 896: xnap.v1.ServedCellsEUTraItemExtIes
	(*ServedCellsEUTraItem)(nil),                                                    // 897: xnap.v1.ServedCellsEUTraItem
	(*ServedCellsToUpdateEUTraExtIes)(nil),                                          // 898: xnap.v1.ServedCellsToUpdateEUTraExtIes
	(*ServedCellsToUpdateEUTra)(nil),                                                // 899: xnap.v1.ServedCellsToUpdateEUTra
	(*ServedCellsToModifyEUTra)(nil),                                                // 900: xnap.v1.ServedCellsToModifyEUTra
	(*ServedcellsToModifyEUTraItemExtIes)(nil),                                      // 901: xnap.v1.ServedcellsToModifyEUTraItemExtIes
	(*ServedCellsToModifyEUTraItem)(nil),                                            // 902: xnap.v1.ServedCellsToModifyEUTraItem
	(*ServedCellInformationNRExtIesExtension)(nil),                                  // 903: xnap.v1.ServedCellInformationNRExtIesExtension
	(*ServedCellInformationNRExtIes)(nil),                                           // 904: xnap.v1.ServedCellInformationNRExtIes
	(*ServedCellInformationNR)(nil),                                                 // 905: xnap.v1.ServedCellInformationNR
	(*SfnOffsetExtIes)(nil),                                                         // 906: xnap.v1.SfnOffsetExtIes
	(*SfnOffset)(nil),                                                               // 907: xnap.v1.SfnOffset
	(*ServedCellsNR)(nil),                                                           // 908: xnap.v1.ServedCellsNR
	(*ServedCellsNRItemExtIes)(nil),                                                 // 909: xnap.v1.ServedCellsNRItemExtIes
	(*ServedCellsNRItem)(nil),                                                       // 910: xnap.v1.ServedCellsNRItem
	(*ServedCellsToModifyNR)(nil),                                                   // 911: xnap.v1.ServedCellsToModifyNR
	(*ServedcellsToModifyNRItemExtIes)(nil),                                         // 912: xnap.v1.ServedcellsToModifyNRItemExtIes
	(*ServedCellsToModifyNRItem)(nil),                                               // 913: xnap.v1.ServedCellsToModifyNRItem
	(*ServedCellsToUpdateNRExtIes)(nil),                                             // 914: xnap.v1.ServedCellsToUpdateNRExtIes
	(*ServedCellsToUpdateNR)(nil),                                                   // 915: xnap.v1.ServedCellsToUpdateNR
	(*SharedResourceTypeExtIes)(nil),                                                // 916: xnap.v1.SharedResourceTypeExtIes
	(*SharedResourceType)(nil),                                                      // 917: xnap.v1.SharedResourceType
	(*SharedResourceTypeULOnlySharingExtIes)(nil),                                   // 918: xnap.v1.SharedResourceTypeULOnlySharingExtIes
	(*SharedResourceTypeULOnlySharing)(nil),                                         // 919: xnap.v1.SharedResourceTypeULOnlySharing
	(*SharedResourceTypeULdlSharingExtIes)(nil),                                     // 920: xnap.v1.SharedResourceTypeULdlSharingExtIes
	(*SharedResourceTypeULdlSharing)(nil),                                           // 921: xnap.v1.SharedResourceTypeULdlSharing
	(*SharedResourceTypeULdlSharingULResourcesExtIes)(nil),                          // 922: xnap.v1.SharedResourceTypeULdlSharingULResourcesExtIes
	(*SharedResourceTypeULdlSharingULResources)(nil),                                // 923: xnap.v1.SharedResourceTypeULdlSharingULResources
	(*SharedResourceTypeULdlSharingULResourcesChangedExtIes)(nil),                   // 924: xnap.v1.SharedResourceTypeULdlSharingULResourcesChangedExtIes
	(*SharedResourceTypeULdlSharingULResourcesChanged)(nil),                         // 925: xnap.v1.SharedResourceTypeULdlSharingULResourcesChanged
	(*SharedResourceTypeULdlSharingDLResourcesExtIes)(nil),                          // 926: xnap.v1.SharedResourceTypeULdlSharingDLResourcesExtIes
	(*SharedResourceTypeULdlSharingDLResources)(nil),                                // 927: xnap.v1.SharedResourceTypeULdlSharingDLResources
	(*SharedResourceTypeULdlSharingDLResourcesChangedExtIes)(nil),                   // 928: xnap.v1.SharedResourceTypeULdlSharingDLResourcesChangedExtIes
	(*SharedResourceTypeULdlSharingDLResourcesChanged)(nil),                         // 929: xnap.v1.SharedResourceTypeULdlSharingDLResourcesChanged
	(*SliceAvailableCapacity)(nil),                                                  // 930: xnap.v1.SliceAvailableCapacity
	(*SliceAvailableCapacityItemExtIes)(nil),                                        // 931: xnap.v1.SliceAvailableCapacityItemExtIes
	(*SliceAvailableCapacityItem)(nil),                                              // 932: xnap.v1.SliceAvailableCapacityItem
	(*SnssaiavailableCapacityList)(nil),                                             // 933: xnap.v1.SnssaiavailableCapacityList
	(*SnssaiavailableCapacityItemExtIes)(nil),                                       // 934: xnap.v1.SnssaiavailableCapacityItemExtIes
	(*SnssaiavailableCapacityItem)(nil),                                             // 935: xnap.v1.SnssaiavailableCapacityItem
	(*SliceSupportList)(nil),                                                        // 936: xnap.v1.SliceSupportList
	(*SliceToReportList)(nil),                                                       // 937: xnap.v1.SliceToReportList
	(*SliceToReportListItemExtIes)(nil),                                             // 938: xnap.v1.SliceToReportListItemExtIes
	(*SliceToReportListItem)(nil),                                                   // 939: xnap.v1.SliceToReportListItem
	(*Snssailist)(nil),                                                              // 940: xnap.v1.Snssailist
	(*SnssaiItemExtIes)(nil),                                                        // 941: xnap.v1.SnssaiItemExtIes
	(*SnssaiItem)(nil),                                                              // 942: xnap.v1.SnssaiItem
	(*SlotConfigurationList)(nil),                                                   // 943: xnap.v1.SlotConfigurationList
	(*SlotConfigurationListItemExtIes)(nil),                                         // 944: xnap.v1.SlotConfigurationListItemExtIes
	(*SlotConfigurationListItem)(nil),                                               // 945: xnap.v1.SlotConfigurationListItem
	(*SNGRAnnodeSecurityKey)(nil),                                                   // 946: xnap.v1.SNGRAnnodeSecurityKey
	(*SNSsaiExtIes)(nil),                                                            // 947: xnap.v1.SNSsaiExtIes
	(*SNSsai)(nil),                                                                  // 948: xnap.v1.SNSsai
	(*SpecialSubframeInfoEUTraExtIes)(nil),                                          // 949: xnap.v1.SpecialSubframeInfoEUTraExtIes
	(*SpecialSubframeInfoEUTra)(nil),                                                // 950: xnap.v1.SpecialSubframeInfoEUTra
	(*SpectrumSharingGroupId)(nil),                                                  // 951: xnap.v1.SpectrumSharingGroupId
	(*SsbareaCapacityValueList)(nil),                                                // 952: xnap.v1.SsbareaCapacityValueList
	(*SsbareaCapacityValueListItemExtIes)(nil),                                      // 953: xnap.v1.SsbareaCapacityValueListItemExtIes
	(*SsbareaCapacityValueListItem)(nil),                                            // 954: xnap.v1.SsbareaCapacityValueListItem
	(*SsbareaRadioResourceStatusList)(nil),                                          // 955: xnap.v1.SsbareaRadioResourceStatusList
	(*SsbareaRadioResourceStatusListItemExtIesExtension)(nil),                       // 956: xnap.v1.SsbareaRadioResourceStatusListItemExtIesExtension
	(*SsbareaRadioResourceStatusListItemExtIes)(nil),                                // 957: xnap.v1.SsbareaRadioResourceStatusListItemExtIes
	(*SsbareaRadioResourceStatusListItem)(nil),                                      // 958: xnap.v1.SsbareaRadioResourceStatusListItem
	(*SsbPositionsInBurstExtIes)(nil),                                               // 959: xnap.v1.SsbPositionsInBurstExtIes
	(*SsbPositionsInBurst)(nil),                                                     // 960: xnap.v1.SsbPositionsInBurst
	(*SsbtoReportList)(nil),                                                         // 961: xnap.v1.SsbtoReportList
	(*SsbtoReportListItemExtIes)(nil),                                               // 962: xnap.v1.SsbtoReportListItemExtIes
	(*SsbtoReportListItem)(nil),                                                     // 963: xnap.v1.SsbtoReportListItem
	(*SulFrequencyBand)(nil),                                                        // 964: xnap.v1.SulFrequencyBand
	(*SulInformationExtIesExtension)(nil),                                           // 965: xnap.v1.SulInformationExtIesExtension
	(*SulInformationExtIes)(nil),                                                    // 966: xnap.v1.SulInformationExtIes
	(*SulInformation)(nil),                                                          // 967: xnap.v1.SulInformation
	(*SupportedSulbandList)(nil),                                                    // 968: xnap.v1.SupportedSulbandList
	(*SupportedSulbandItemExtIes)(nil),                                              // 969: xnap.v1.SupportedSulbandItemExtIes
	(*SupportedSulbandItem)(nil),                                                    // 970: xnap.v1.SupportedSulbandItem
	(*SymbolAllocationinSlotExtIes)(nil),                                            // 971: xnap.v1.SymbolAllocationinSlotExtIes
	(*SymbolAllocationinSlot)(nil),                                                  // 972: xnap.v1.SymbolAllocationinSlot
	(*SymbolAllocationinSlotAllDlExtIes)(nil),                                       // 973: xnap.v1.SymbolAllocationinSlotAllDlExtIes
	(*SymbolAllocationinSlotAllDl)(nil),                                             // 974: xnap.v1.SymbolAllocationinSlotAllDl
	(*SymbolAllocationinSlotAllUlExtIes)(nil),                                       // 975: xnap.v1.SymbolAllocationinSlotAllUlExtIes
	(*SymbolAllocationinSlotAllUl)(nil),                                             // 976: xnap.v1.SymbolAllocationinSlotAllUl
	(*SymbolAllocationinSlotBothDlandUlExtIes)(nil),                                 // 977: xnap.v1.SymbolAllocationinSlotBothDlandUlExtIes
	(*SymbolAllocationinSlotBothDlandUl)(nil),                                       // 978: xnap.v1.SymbolAllocationinSlotBothDlandUl
	(*TabasedMdtExtIes)(nil),                                                        // 979: xnap.v1.TabasedMdtExtIes
	(*TabasedMdt)(nil),                                                              // 980: xnap.v1.TabasedMdt
	(*TaibasedMdtExtIes)(nil),                                                       // 981: xnap.v1.TaibasedMdtExtIes
	(*TaibasedMdt)(nil),                                                             // 982: xnap.v1.TaibasedMdt
	(*TailistforMdt)(nil),                                                           // 983: xnap.v1.TailistforMdt
	(*TaiforMdtItemExtIes)(nil),                                                     // 984: xnap.v1.TaiforMdtItemExtIes
	(*TaiforMdtItem)(nil),                                                           // 985: xnap.v1.TaiforMdtItem
	(*Tac)(nil),                                                                     // 986: xnap.v1.Tac
	(*TaisupportList)(nil),                                                          // 987: xnap.v1.TaisupportList
	(*TaisupportItemExtIes)(nil),                                                    // 988: xnap.v1.TaisupportItemExtIes
	(*TaisupportItem)(nil),                                                          // 989: xnap.v1.TaisupportItem
	(*TalistforMdt)(nil),                                                            // 990: xnap.v1.TalistforMdt
	(*TargetCellinEutran)(nil),                                                      // 991: xnap.v1.TargetCellinEutran
	(*TargetCgiExtIes)(nil),                                                         // 992: xnap.v1.TargetCgiExtIes
	(*TargetCGi)(nil),                                                               // 993: xnap.v1.TargetCGi
	(*TdduldlconfigurationCommonNr)(nil),                                            // 994: xnap.v1.TdduldlconfigurationCommonNr
	(*TargetCellList)(nil),                                                          // 995: xnap.v1.TargetCellList
	(*TargetCellListItemExtIes)(nil),                                                // 996: xnap.v1.TargetCellListItemExtIes
	(*TargetCellListItem)(nil),                                                      // 997: xnap.v1.TargetCellListItem
	(*ThresholdRSrq)(nil),                                                           // 998: xnap.v1.ThresholdRSrq
	(*ThresholdRSrp)(nil),                                                           // 999: xnap.v1.ThresholdRSrp
	(*ThresholdSInr)(nil),                                                           // 1000: xnap.v1.ThresholdSInr
	(*TnlconfigurationInfoExtIes)(nil),                                              // 1001: xnap.v1.TnlconfigurationInfoExtIes
	(*TnlconfigurationInfo)(nil),                                                    // 1002: xnap.v1.TnlconfigurationInfo
	(*TnlaToAddList)(nil),                                                           // 1003: xnap.v1.TnlaToAddList
	(*TnlaToAddItemExtIes)(nil),                                                     // 1004: xnap.v1.TnlaToAddItemExtIes
	(*TnlaToAddItem)(nil),                                                           // 1005: xnap.v1.TnlaToAddItem
	(*TnlaToUpdateList)(nil),                                                        // 1006: xnap.v1.TnlaToUpdateList
	(*TnlaToUpdateItemExtIes)(nil),                                                  // 1007: xnap.v1.TnlaToUpdateItemExtIes
	(*TnlaToUpdateItem)(nil),                                                        // 1008: xnap.v1.TnlaToUpdateItem
	(*TnlaToRemoveList)(nil),                                                        // 1009: xnap.v1.TnlaToRemoveList
	(*TnlaToRemoveItemExtIes)(nil),                                                  // 1010: xnap.v1.TnlaToRemoveItemExtIes
	(*TnlaToRemoveItem)(nil),                                                        // 1011: xnap.v1.TnlaToRemoveItem
	(*TnlaSetupList)(nil),                                                           // 1012: xnap.v1.TnlaSetupList
	(*TnlaSetupItemExtIes)(nil),                                                     // 1013: xnap.v1.TnlaSetupItemExtIes
	(*TnlaSetupItem)(nil),                                                           // 1014: xnap.v1.TnlaSetupItem
	(*TnlaFailedToSetupList)(nil),                                                   // 1015: xnap.v1.TnlaFailedToSetupList
	(*TnlaFailedToSetupItemExtIes)(nil),                                             // 1016: xnap.v1.TnlaFailedToSetupItemExtIes
	(*TnlaFailedToSetupItem)(nil),                                                   // 1017: xnap.v1.TnlaFailedToSetupItem
	(*TransportLayerAddress)(nil),                                                   // 1018: xnap.v1.TransportLayerAddress
	(*TraceActivationExtIesExtension)(nil),                                          // 1019: xnap.v1.TraceActivationExtIesExtension
	(*TraceActivationExtIes)(nil),                                                   // 1020: xnap.v1.TraceActivationExtIes
	(*TraceActivation)(nil),                                                         // 1021: xnap.v1.TraceActivation
	(*TsctrafficCharacteristicsExtIes)(nil),                                         // 1022: xnap.v1.TsctrafficCharacteristicsExtIes
	(*TsctrafficCharacteristics)(nil),                                               // 1023: xnap.v1.TsctrafficCharacteristics
	(*TscassistanceInformationExtIes)(nil),                                          // 1024: xnap.v1.TscassistanceInformationExtIes
	(*TscassistanceInformation)(nil),                                                // 1025: xnap.v1.TscassistanceInformation
	(*UeaggregateMaximumBitRateExtIes)(nil),                                         // 1026: xnap.v1.UeaggregateMaximumBitRateExtIes
	(*UeaggregateMaximumBitRate)(nil),                                               // 1027: xnap.v1.UeaggregateMaximumBitRate
	(*UecontextIdExtIes)(nil),                                                       // 1028: xnap.v1.UecontextIdExtIes
	(*UecontextId)(nil),                                                             // 1029: xnap.v1.UecontextId
	(*UecontextIdforRrcresumeExtIes)(nil),                                           // 1030: xnap.v1.UecontextIdforRrcresumeExtIes
	(*UecontextIdforRrcresume)(nil),                                                 // 1031: xnap.v1.UecontextIdforRrcresume
	(*UecontextIdforRrcreestablishmentExtIes)(nil),                                  // 1032: xnap.v1.UecontextIdforRrcreestablishmentExtIes
	(*UecontextIdforRrcreestablishment)(nil),                                        // 1033: xnap.v1.UecontextIdforRrcreestablishment
	(*UecontextInfoRetrUectxtRespExtIesExtension)(nil),                              // 1034: xnap.v1.UecontextInfoRetrUectxtRespExtIesExtension
	(*UecontextInfoRetrUectxtRespExtIes)(nil),                                       // 1035: xnap.v1.UecontextInfoRetrUectxtRespExtIes
	(*UecontextInfoRetrUectxtResp)(nil),                                             // 1036: xnap.v1.UecontextInfoRetrUectxtResp
	(*UehistoryInformation)(nil),                                                    // 1037: xnap.v1.UehistoryInformation
	(*UehistoryInformationFromTheUeExtIes)(nil),                                     // 1038: xnap.v1.UehistoryInformationFromTheUeExtIes
	(*UehistoryInformationFromTheUe)(nil),                                           // 1039: xnap.v1.UehistoryInformationFromTheUe
	(*UeidentityIndexValueExtIes)(nil),                                              // 1040: xnap.v1.UeidentityIndexValueExtIes
	(*UeidentityIndexValue)(nil),                                                    // 1041: xnap.v1.UeidentityIndexValue
	(*UeradioCapabilityForPagingExtIes)(nil),                                        // 1042: xnap.v1.UeradioCapabilityForPagingExtIes
	(*UeradioCapabilityForPaging)(nil),                                              // 1043: xnap.v1.UeradioCapabilityForPaging
	(*UeradioCapabilityForPagingOfNr)(nil),                                          // 1044: xnap.v1.UeradioCapabilityForPagingOfNr
	(*UeradioCapabilityForPagingOfEutra)(nil),                                       // 1045: xnap.v1.UeradioCapabilityForPagingOfEutra
	(*UeradioCapabilityId)(nil),                                                     // 1046: xnap.v1.UeradioCapabilityId
	(*UeranpagingIdentityExtIes)(nil),                                               // 1047: xnap.v1.UeranpagingIdentityExtIes
	(*UeranpagingIdentity)(nil),                                                     // 1048: xnap.v1.UeranpagingIdentity
	(*UerlfreportContainerExtIes)(nil),                                              // 1049: xnap.v1.UerlfreportContainerExtIes
	(*UerlfreportContainer)(nil),                                                    // 1050: xnap.v1.UerlfreportContainer
	(*UerlfreportContainerLte)(nil),                                                 // 1051: xnap.v1.UerlfreportContainerLte
	(*UerlfreportContainerNr)(nil),                                                  // 1052: xnap.v1.UerlfreportContainerNr
	(*UesecurityCapabilitiesExtIes)(nil),                                            // 1053: xnap.v1.UesecurityCapabilitiesExtIes
	(*UesecurityCapabilities)(nil),                                                  // 1054: xnap.v1.UesecurityCapabilities
	(*UlconfigurationExtIes)(nil),                                                   // 1055: xnap.v1.UlconfigurationExtIes
	(*Ulconfiguration)(nil),                                                         // 1056: xnap.v1.Ulconfiguration
	(*UlGBrPRbusage)(nil),                                                           // 1057: xnap.v1.UlGBrPRbusage
	(*UlnonGBrPRbusage)(nil),                                                        // 1058: xnap.v1.UlnonGBrPRbusage
	(*UlTotalPRbusage)(nil),                                                         // 1059: xnap.v1.UlTotalPRbusage
	(*UptransportLayerInformationExtIes)(nil),                                       // 1060: xnap.v1.UptransportLayerInformationExtIes
	(*UptransportLayerInformation)(nil),                                             // 1061: xnap.v1.UptransportLayerInformation
	(*UptransportParameters)(nil),                                                   // 1062: xnap.v1.UptransportParameters
	(*UptransportParametersItemExtIes)(nil),                                         // 1063: xnap.v1.UptransportParametersItemExtIes
	(*UptransportParametersItem)(nil),                                               // 1064: xnap.v1.UptransportParametersItem
	(*Uriaddress)(nil),                                                              // 1065: xnap.v1.Uriaddress
	(*VolumeTimedReportList)(nil),                                                   // 1066: xnap.v1.VolumeTimedReportList
	(*VolumeTimedReportItemExtIes)(nil),                                             // 1067: xnap.v1.VolumeTimedReportItemExtIes
	(*VolumeTimedReportItem)(nil),                                                   // 1068: xnap.v1.VolumeTimedReportItem
	(*WlanmeasurementConfigurationExtIes)(nil),                                      // 1069: xnap.v1.WlanmeasurementConfigurationExtIes
	(*WlanmeasurementConfiguration)(nil),                                            // 1070: xnap.v1.WlanmeasurementConfiguration
	(*WlanmeasConfigNameList)(nil),                                                  // 1071: xnap.v1.WlanmeasConfigNameList
	(*Wlanname)(nil),                                                                // 1072: xnap.v1.Wlanname
	(*XnBenefitValue)(nil),                                                          // 1073: xnap.v1.XnBenefitValue
	(*emptypb.Empty)(nil),                                                           // 1074: google.protobuf.Empty
	(*asn1.BitString)(nil),                                                          // 1075: asn1.v1.BitString
	(*xnap_commondatatypes.ProtocolIeID)(nil),                                       // 1076: xnap.v1.ProtocolIeID
	(xnap_commondatatypes.Criticality)(0),                                           // 1077: xnap.v1.Criticality
	(*xnap_commondatatypes.ProcedureCode)(nil),                                      // 1078: xnap.v1.ProcedureCode
	(xnap_commondatatypes.TriggeringMessage)(0),                                     // 1079: xnap.v1.TriggeringMessage
}
var file_api_xnap_v1_xnap_ies_proto_depIdxs = []int32{
	145,  // 0: xnap.v1.AdditionalPDcpDuplicationTNlList.value:type_name -> xnap.v1.AdditionalPDcpDuplicationTNlItem
	1074, // 1: xnap.v1.AdditionalPDcpDuplicationTNlExtIes.value:type_name -> google.protobuf.Empty
	1061, // 2: xnap.v1.AdditionalPDcpDuplicationTNlItem.additional_pdcp_duplication_up_tnl_information:type_name -> xnap.v1.UptransportLayerInformation
	144,  // 3: xnap.v1.AdditionalPDcpDuplicationTNlItem.i_e_extensions:type_name -> xnap.v1.AdditionalPDcpDuplicationTNlExtIes
	1074, // 4: xnap.v1.AdditionalULNGUTNlatUpfItemExtIes.value:type_name -> google.protobuf.Empty
	1061, // 5: xnap.v1.AdditionalULNGUTNlatUpfItem.additional_ul_ng_u_tnlat_upf:type_name -> xnap.v1.UptransportLayerInformation
	146,  // 6: xnap.v1.AdditionalULNGUTNlatUpfItem.i_e_extensions:type_name -> xnap.v1.AdditionalULNGUTNlatUpfItemExtIes
	147,  // 7: xnap.v1.AdditionalULNGUTNlatUpfList.value:type_name -> xnap.v1.AdditionalULNGUTNlatUpfItem
	1074, // 8: xnap.v1.AllocationandRetentionPriorityExtIes.value:type_name -> google.protobuf.Empty
	1,    // 9: xnap.v1.AllocationandRetentionPriority.pre_emption_capability:type_name -> xnap.v1.PreemptioncapabilityAllocationandRetentionPriority
	2,    // 10: xnap.v1.AllocationandRetentionPriority.pre_emption_vulnerability:type_name -> xnap.v1.PreemptionvulnerabilityAllocationandRetentionPriority
	150,  // 11: xnap.v1.AllocationandRetentionPriority.i_e_extensions:type_name -> xnap.v1.AllocationandRetentionPriorityExtIes
	208,  // 12: xnap.v1.AllowedCagIDListperPlmn.value:type_name -> xnap.v1.CagIdentifier
	156,  // 13: xnap.v1.AllowedPniNPnIDList.value:type_name -> xnap.v1.AllowedPniNPnIDItem
	1074, // 14: xnap.v1.AllowedPniNPnIDItemExtIes.value:type_name -> google.protobuf.Empty
	761,  // 15: xnap.v1.AllowedPniNPnIDItem.plmn_id:type_name -> xnap.v1.PlmnIdentity
	80,   // 16: xnap.v1.AllowedPniNPnIDItem.pni_npn_restricted_information:type_name -> xnap.v1.PniNPnRestrictedInformation
	153,  // 17: xnap.v1.AllowedPniNPnIDItem.allowed_cag_id_list_per_plmn:type_name -> xnap.v1.AllowedCagIDListperPlmn
	155,  // 18: xnap.v1.AllowedPniNPnIDItem.i_e_extensions:type_name -> xnap.v1.AllowedPniNPnIDItemExtIes
	159,  // 19: xnap.v1.AlternativeQoSparaSetList.value:type_name -> xnap.v1.AlternativeQoSparaSetItem
	1074, // 20: xnap.v1.AlternativeQoSparaSetItemExtIes.value:type_name -> google.protobuf.Empty
	789,  // 21: xnap.v1.AlternativeQoSparaSetItem.alternative_qo_spara_set_index:type_name -> xnap.v1.QoSparaSetIndex
	190,  // 22: xnap.v1.AlternativeQoSparaSetItem.guaranteed_flow_bit_rate_dl:type_name -> xnap.v1.BitRate
	190,  // 23: xnap.v1.AlternativeQoSparaSetItem.guaranteed_flow_bit_rate_ul:type_name -> xnap.v1.BitRate
	603,  // 24: xnap.v1.AlternativeQoSparaSetItem.packet_delay_budget:type_name -> xnap.v1.PacketDelayBudget
	605,  // 25: xnap.v1.AlternativeQoSparaSetItem.packet_error_rate:type_name -> xnap.v1.PacketErrorRate
	158,  // 26: xnap.v1.AlternativeQoSparaSetItem.i_e_extensions:type_name -> xnap.v1.AlternativeQoSparaSetItemExtIes
	162,  // 27: xnap.v1.AmfRegionInformation.value:type_name -> xnap.v1.GlobalAmfRegionInformation
	1074, // 28: xnap.v1.GlobalAmfRegionInformationExtIes.value:type_name -> google.protobuf.Empty
	761,  // 29: xnap.v1.GlobalAmfRegionInformation.plmn_id:type_name -> xnap.v1.PlmnIdentity
	1075, // 30: xnap.v1.GlobalAmfRegionInformation.amf_region_id:type_name -> asn1.v1.BitString
	161,  // 31: xnap.v1.GlobalAmfRegionInformation.i_e_extensions:type_name -> xnap.v1.GlobalAmfRegionInformationExtIes
	166,  // 32: xnap.v1.AreaOfInterestInformation.value:type_name -> xnap.v1.AreaOfInterestItem
	1074, // 33: xnap.v1.AreaOfInterestItemExtIes.value:type_name -> google.protobuf.Empty
	418,  // 34: xnap.v1.AreaOfInterestItem.list_of_taisin_ao_i:type_name -> xnap.v1.ListOfTaisinAoI
	412,  // 35: xnap.v1.AreaOfInterestItem.list_of_cellsin_ao_i:type_name -> xnap.v1.ListOfCells
	415,  // 36: xnap.v1.AreaOfInterestItem.list_of_rannodesin_ao_i:type_name -> xnap.v1.ListOfRannodesinAoI
	823,  // 37: xnap.v1.AreaOfInterestItem.request_reference_id:type_name -> xnap.v1.RequestReferenceId
	165,  // 38: xnap.v1.AreaOfInterestItem.i_e_extensions:type_name -> xnap.v1.AreaOfInterestItemExtIes
	225,  // 39: xnap.v1.AreaScopeOfMdtNR.cell_based:type_name -> xnap.v1.CellBasedMdtNR
	980,  // 40: xnap.v1.AreaScopeOfMdtNR.t_abased:type_name -> xnap.v1.TabasedMdt
	982,  // 41: xnap.v1.AreaScopeOfMdtNR.t_aibased:type_name -> xnap.v1.TaibasedMdt
	228,  // 42: xnap.v1.AreaScopeOfMdtEUtra.cell_based:type_name -> xnap.v1.CellBasedMdtEUtra
	980,  // 43: xnap.v1.AreaScopeOfMdtEUtra.t_abased:type_name -> xnap.v1.TabasedMdt
	982,  // 44: xnap.v1.AreaScopeOfMdtEUtra.t_aibased:type_name -> xnap.v1.TaibasedMdt
	171,  // 45: xnap.v1.AreaScopeOfNeighCellsList.value:type_name -> xnap.v1.AreaScopeOfNeighCellsItem
	1074, // 46: xnap.v1.AreaScopeOfNeighCellsItemExtIes.value:type_name -> google.protobuf.Empty
	584,  // 47: xnap.v1.AreaScopeOfNeighCellsItem.nr_frequency_info:type_name -> xnap.v1.NrfrequencyInfo
	762,  // 48: xnap.v1.AreaScopeOfNeighCellsItem.pci_list_for_mdt:type_name -> xnap.v1.PcilistForMdt
	170,  // 49: xnap.v1.AreaScopeOfNeighCellsItem.i_e_extensions:type_name -> xnap.v1.AreaScopeOfNeighCellsItemExtIes
	1074, // 50: xnap.v1.AsSecurityInformationExtIes.value:type_name -> google.protobuf.Empty
	1075, // 51: xnap.v1.AsSecurityInformation.key_ng_ran_star:type_name -> asn1.v1.BitString
	172,  // 52: xnap.v1.AsSecurityInformation.i_e_extensions:type_name -> xnap.v1.AsSecurityInformationExtIes
	1074, // 53: xnap.v1.AssistanceDataForRanpagingExtIes.value:type_name -> google.protobuf.Empty
	817,  // 54: xnap.v1.AssistanceDataForRanpaging.ran_paging_attempt_info:type_name -> xnap.v1.RanpagingAttemptInfo
	174,  // 55: xnap.v1.AssistanceDataForRanpaging.i_e_extensions:type_name -> xnap.v1.AssistanceDataForRanpagingExtIes
	1074, // 56: xnap.v1.BluetoothMeasurementConfigurationExtIes.value:type_name -> google.protobuf.Empty
	4,    // 57: xnap.v1.BluetoothMeasurementConfiguration.bluetooth_meas_config:type_name -> xnap.v1.BluetoothMeasConfig
	181,  // 58: xnap.v1.BluetoothMeasurementConfiguration.bluetooth_meas_config_name_list:type_name -> xnap.v1.BluetoothMeasConfigNameList
	3,    // 59: xnap.v1.BluetoothMeasurementConfiguration.bt_rssi:type_name -> xnap.v1.BtrssiBluetoothMeasurementConfiguration
	179,  // 60: xnap.v1.BluetoothMeasurementConfiguration.i_e_extensions:type_name -> xnap.v1.BluetoothMeasurementConfigurationExtIes
	182,  // 61: xnap.v1.BluetoothMeasConfigNameList.value:type_name -> xnap.v1.BluetoothName
	185,  // 62: xnap.v1.BplmnIDInfoEUtra.value:type_name -> xnap.v1.BplmnIDInfoEUtraItem
	1074, // 63: xnap.v1.BplmnIDInfoEUtraItemExtIes.value:type_name -> google.protobuf.Empty
	198,  // 64: xnap.v1.BplmnIDInfoEUtraItem.broadcast_plmns:type_name -> xnap.v1.BroadcastEutraplmns
	986,  // 65: xnap.v1.BplmnIDInfoEUtraItem.tac:type_name -> xnap.v1.Tac
	331,  // 66: xnap.v1.BplmnIDInfoEUtraItem.e_utra_ci:type_name -> xnap.v1.EUTraCellIdentity
	808,  // 67: xnap.v1.BplmnIDInfoEUtraItem.ranac:type_name -> xnap.v1.Ranac
	184,  // 68: xnap.v1.BplmnIDInfoEUtraItem.i_e_extension:type_name -> xnap.v1.BplmnIDInfoEUtraItemExtIes
	189,  // 69: xnap.v1.BplmnIDInfoNR.value:type_name -> xnap.v1.BplmnIDInfoNRItem
	14,   // 70: xnap.v1.BplmnIDInfoNRItemExtIesExtension.id_configured_tacindication:type_name -> xnap.v1.ConfiguredTacindication
	545,  // 71: xnap.v1.BplmnIDInfoNRItemExtIesExtension.id_npn_broadcast_information:type_name -> xnap.v1.NpnBroadcastInformation
	1076, // 72: xnap.v1.BplmnIDInfoNRItemExtIes.id:type_name -> xnap.v1.ProtocolIeID
	1077, // 73: xnap.v1.BplmnIDInfoNRItemExtIes.criticality:type_name -> xnap.v1.Criticality
	187,  // 74: xnap.v1.BplmnIDInfoNRItemExtIes.extension:type_name -> xnap.v1.BplmnIDInfoNRItemExtIesExtension
	197,  // 75: xnap.v1.BplmnIDInfoNRItem.broadcast_plmns:type_name -> xnap.v1.BroadcastPlmns
	986,  // 76: xnap.v1.BplmnIDInfoNRItem.tac:type_name -> xnap.v1.Tac
	575,  // 77: xnap.v1.BplmnIDInfoNRItem.nr_ci:type_name -> xnap.v1.NrCellIdentity
	808,  // 78: xnap.v1.BplmnIDInfoNRItem.ranac:type_name -> xnap.v1.Ranac
	188,  // 79: xnap.v1.BplmnIDInfoNRItem.i_e_extension:type_name -> xnap.v1.BplmnIDInfoNRItemExtIes
	193,  // 80: xnap.v1.BroadcastCagIdentifierList.value:type_name -> xnap.v1.BroadcastCagIdentifierItem
	1074, // 81: xnap.v1.BroadcastCagIdentifierItemExtIes.value:type_name -> google.protobuf.Empty
	208,  // 82: xnap.v1.BroadcastCagIdentifierItem.cag_identifier:type_name -> xnap.v1.CagIdentifier
	192,  // 83: xnap.v1.BroadcastCagIdentifierItem.i_e_extension:type_name -> xnap.v1.BroadcastCagIdentifierItemExtIes
	196,  // 84: xnap.v1.BroadcastNidList.value:type_name -> xnap.v1.BroadcastNidItem
	1074, // 85: xnap.v1.BroadcastNidItemExtIes.value:type_name -> google.protobuf.Empty
	521,  // 86: xnap.v1.BroadcastNidItem.nid:type_name -> xnap.v1.Nid
	195,  // 87: xnap.v1.BroadcastNidItem.i_e_extension:type_name -> xnap.v1.BroadcastNidItemExtIes
	761,  // 88: xnap.v1.BroadcastPlmns.value:type_name -> xnap.v1.PlmnIdentity
	761,  // 89: xnap.v1.BroadcastEutraplmns.value:type_name -> xnap.v1.PlmnIdentity
	561,  // 90: xnap.v1.BroadcastPlmninTaisupportItemExtIesExtension.id_npn_support:type_name -> xnap.v1.NpnSupport
	360,  // 91: xnap.v1.BroadcastPlmninTaisupportItemExtIesExtension.id_extended_taislice_support_list:type_name -> xnap.v1.ExtendedSliceSupportList
	1076, // 92: xnap.v1.BroadcastPlmninTaisupportItemExtIes.id:type_name -> xnap.v1.ProtocolIeID
	1077, // 93: xnap.v1.BroadcastPlmninTaisupportItemExtIes.criticality:type_name -> xnap.v1.Criticality
	199,  // 94: xnap.v1.BroadcastPlmninTaisupportItemExtIes.extension:type_name -> xnap.v1.BroadcastPlmninTaisupportItemExtIesExtension
	761,  // 95: xnap.v1.BroadcastPlmninTaisupportItem.plmn_id:type_name -> xnap.v1.PlmnIdentity
	936,  // 96: xnap.v1.BroadcastPlmninTaisupportItem.t_aislice_support_list:type_name -> xnap.v1.SliceSupportList
	200,  // 97: xnap.v1.BroadcastPlmninTaisupportItem.i_e_extension:type_name -> xnap.v1.BroadcastPlmninTaisupportItemExtIes
	204,  // 98: xnap.v1.BroadcastPniNPnIDInformation.value:type_name -> xnap.v1.BroadcastPniNPnIDInformationItem
	1074, // 99: xnap.v1.BroadcastPniNPnIDInformationItemExtIes.value:type_name -> google.protobuf.Empty
	761,  // 100: xnap.v1.BroadcastPniNPnIDInformationItem.plmn_id:type_name -> xnap.v1.PlmnIdentity
	191,  // 101: xnap.v1.BroadcastPniNPnIDInformationItem.broadcast_cag_identifier_list:type_name -> xnap.v1.BroadcastCagIdentifierList
	203,  // 102: xnap.v1.BroadcastPniNPnIDInformationItem.i_e_extension:type_name -> xnap.v1.BroadcastPniNPnIDInformationItemExtIes
	207,  // 103: xnap.v1.BroadcastSnpnidList.value:type_name -> xnap.v1.BroadcastSnpnid
	1074, // 104: xnap.v1.BroadcastSnpnidExtIes.value:type_name -> google.protobuf.Empty
	761,  // 105: xnap.v1.BroadcastSnpnid.plmn_id:type_name -> xnap.v1.PlmnIdentity
	194,  // 106: xnap.v1.BroadcastSnpnid.broadcast_nid_list:type_name -> xnap.v1.BroadcastNidList
	206,  // 107: xnap.v1.BroadcastSnpnid.i_e_extension:type_name -> xnap.v1.BroadcastSnpnidExtIes
	1075, // 108: xnap.v1.CagIdentifier.value:type_name -> asn1.v1.BitString
	1074, // 109: xnap.v1.CapacityValueInfoExtIes.value:type_name -> google.protobuf.Empty
	209,  // 110: xnap.v1.CapacityValueInfo.capacity_value:type_name -> xnap.v1.CapacityValue
	952,  // 111: xnap.v1.CapacityValueInfo.ssb_area_capacity_value_list:type_name -> xnap.v1.SsbareaCapacityValueList
	210,  // 112: xnap.v1.CapacityValueInfo.i_e_extension:type_name -> xnap.v1.CapacityValueInfoExtIes
	1074, // 113: xnap.v1.CauseExtIes.value:type_name -> google.protobuf.Empty
	5,    // 114: xnap.v1.Cause.radio_network:type_name -> xnap.v1.CauseRadioNetworkLayer
	6,    // 115: xnap.v1.Cause.transport:type_name -> xnap.v1.CauseTransportLayer
	7,    // 116: xnap.v1.Cause.protocol:type_name -> xnap.v1.CauseProtocol
	8,    // 117: xnap.v1.Cause.misc:type_name -> xnap.v1.CauseMisc
	212,  // 118: xnap.v1.Cause.choice_extension:type_name -> xnap.v1.CauseExtIes
	578,  // 119: xnap.v1.LimitedNrListCellAssistanceInfoNR.limited_nr_list:type_name -> xnap.v1.NrCGi
	1074, // 120: xnap.v1.CellAssistanceInfoNRExtIes.value:type_name -> google.protobuf.Empty
	214,  // 121: xnap.v1.CellAssistanceInfoNR.limited_nr_list:type_name -> xnap.v1.LimitedNrListCellAssistanceInfoNR
	9,    // 122: xnap.v1.CellAssistanceInfoNR.full_list:type_name -> xnap.v1.FullListCellAssistanceInfoNr
	215,  // 123: xnap.v1.CellAssistanceInfoNR.choice_extension:type_name -> xnap.v1.CellAssistanceInfoNRExtIes
	1074, // 124: xnap.v1.CellAndCapacityAssistanceInfoNRExtIes.value:type_name -> google.protobuf.Empty
	506,  // 125: xnap.v1.CellAndCapacityAssistanceInfoNR.maximum_cell_list_size:type_name -> xnap.v1.MaximumCellListSize
	216,  // 126: xnap.v1.CellAndCapacityAssistanceInfoNR.cell_assistance_info_nr:type_name -> xnap.v1.CellAssistanceInfoNR
	217,  // 127: xnap.v1.CellAndCapacityAssistanceInfoNR.i_e_extensions:type_name -> xnap.v1.CellAndCapacityAssistanceInfoNRExtIes
	1074, // 128: xnap.v1.CellAndCapacityAssistanceInfoEUtraExtIes.value:type_name -> google.protobuf.Empty
	506,  // 129: xnap.v1.CellAndCapacityAssistanceInfoEUtra.maximum_cell_list_size:type_name -> xnap.v1.MaximumCellListSize
	223,  // 130: xnap.v1.CellAndCapacityAssistanceInfoEUtra.cell_assistance_info_eutra:type_name -> xnap.v1.CellAssistanceInfoEUtra
	219,  // 131: xnap.v1.CellAndCapacityAssistanceInfoEUtra.i_e_extensions:type_name -> xnap.v1.CellAndCapacityAssistanceInfoEUtraExtIes
	333,  // 132: xnap.v1.LimitedEutraListCellAssistanceInfoEUtra.limited_eutra_list:type_name -> xnap.v1.EUTraCGi
	1074, // 133: xnap.v1.CellAssistanceInfoEUtraExtIes.value:type_name -> google.protobuf.Empty
	221,  // 134: xnap.v1.CellAssistanceInfoEUtra.limited_eutra_list:type_name -> xnap.v1.LimitedEutraListCellAssistanceInfoEUtra
	10,   // 135: xnap.v1.CellAssistanceInfoEUtra.full_list:type_name -> xnap.v1.FullListCellAssistanceInfoEutra
	222,  // 136: xnap.v1.CellAssistanceInfoEUtra.choice_extension:type_name -> xnap.v1.CellAssistanceInfoEUtraExtIes
	1074, // 137: xnap.v1.CellBasedMdtNRExtIes.value:type_name -> google.protobuf.Empty
	226,  // 138: xnap.v1.CellBasedMdtNR.cell_id_listfor_mdt_nr:type_name -> xnap.v1.CellIdListforMdtNR
	224,  // 139: xnap.v1.CellBasedMdtNR.i_e_extensions:type_name -> xnap.v1.CellBasedMdtNRExtIes
	578,  // 140: xnap.v1.CellIdListforMdtNR.value:type_name -> xnap.v1.NrCGi
	1074, // 141: xnap.v1.CellBasedMdtEUtraExtIes.value:type_name -> google.protobuf.Empty
	229,  // 142: xnap.v1.CellBasedMdtEUtra.cell_id_listfor_mdt_eutra:type_name -> xnap.v1.CellIdListforMdtEUtra
	227,  // 143: xnap.v1.CellBasedMdtEUtra.i_e_extensions:type_name -> xnap.v1.CellBasedMdtEUtraExtIes
	333,  // 144: xnap.v1.CellIdListforMdtEUtra.value:type_name -> xnap.v1.EUTraCGi
	234,  // 145: xnap.v1.CellMeasurementResult.value:type_name -> xnap.v1.CellMeasurementResultItem
	1074, // 146: xnap.v1.CellMeasurementResultItemExtIes.value:type_name -> google.protobuf.Empty
	385,  // 147: xnap.v1.CellMeasurementResultItem.cell_id:type_name -> xnap.v1.GlobalNgRAncellID
	807,  // 148: xnap.v1.CellMeasurementResultItem.radio_resource_status:type_name -> xnap.v1.RadioResourceStatus
	543,  // 149: xnap.v1.CellMeasurementResultItem.t_nlcapacity_indicator:type_name -> xnap.v1.TnlcapacityIndicator
	241,  // 150: xnap.v1.CellMeasurementResultItem.composite_available_capacity_group:type_name -> xnap.v1.CompositeAvailableCapacityGroup
	930,  // 151: xnap.v1.CellMeasurementResultItem.slice_available_capacity:type_name -> xnap.v1.SliceAvailableCapacity
	531,  // 152: xnap.v1.CellMeasurementResultItem.numberof_active_ues:type_name -> xnap.v1.NumberofActiveUes
	853,  // 153: xnap.v1.CellMeasurementResultItem.r_rcconnections:type_name -> xnap.v1.Rrcconnections
	233,  // 154: xnap.v1.CellMeasurementResultItem.i_e_extensions:type_name -> xnap.v1.CellMeasurementResultItemExtIes
	237,  // 155: xnap.v1.CellToReport.value:type_name -> xnap.v1.CellToReportItem
	1074, // 156: xnap.v1.CellToReportItemExtIes.value:type_name -> google.protobuf.Empty
	385,  // 157: xnap.v1.CellToReportItem.cell_id:type_name -> xnap.v1.GlobalNgRAncellID
	961,  // 158: xnap.v1.CellToReportItem.s_sbto_report_list:type_name -> xnap.v1.SsbtoReportList
	937,  // 159: xnap.v1.CellToReportItem.slice_to_report_list:type_name -> xnap.v1.SliceToReportList
	236,  // 160: xnap.v1.CellToReportItem.i_e_extensions:type_name -> xnap.v1.CellToReportItemExtIes
	1074, // 161: xnap.v1.CellTypeChoiceExtIes.value:type_name -> google.protobuf.Empty
	331,  // 162: xnap.v1.CellTypeChoice.ng_ran_e_utra:type_name -> xnap.v1.EUTraCellIdentity
	575,  // 163: xnap.v1.CellTypeChoice.ng_ran_nr:type_name -> xnap.v1.NrCellIdentity
	331,  // 164: xnap.v1.CellTypeChoice.e_utran:type_name -> xnap.v1.EUTraCellIdentity
	238,  // 165: xnap.v1.CellTypeChoice.choice_extension:type_name -> xnap.v1.CellTypeChoiceExtIes
	1074, // 166: xnap.v1.CompositeAvailableCapacityGroupExtIes.value:type_name -> google.protobuf.Empty
	243,  // 167: xnap.v1.CompositeAvailableCapacityGroup.composite_available_capacity_downlink:type_name -> xnap.v1.CompositeAvailableCapacity
	243,  // 168: xnap.v1.CompositeAvailableCapacityGroup.composite_available_capacity_uplink:type_name -> xnap.v1.CompositeAvailableCapacity
	240,  // 169: xnap.v1.CompositeAvailableCapacityGroup.i_e_extensions:type_name -> xnap.v1.CompositeAvailableCapacityGroupExtIes
	1074, // 170: xnap.v1.CompositeAvailableCapacityExtIes.value:type_name -> google.protobuf.Empty
	230,  // 171: xnap.v1.CompositeAvailableCapacity.cell_capacity_class_value:type_name -> xnap.v1.CellCapacityClassValue
	211,  // 172: xnap.v1.CompositeAvailableCapacity.capacity_value_info:type_name -> xnap.v1.CapacityValueInfo
	242,  // 173: xnap.v1.CompositeAvailableCapacity.i_e_extensions:type_name -> xnap.v1.CompositeAvailableCapacityExtIes
	1074, // 174: xnap.v1.ChoinformationReqExtIes.value:type_name -> google.protobuf.Empty
	13,   // 175: xnap.v1.ChoinformationReq.cho_trigger:type_name -> xnap.v1.Chotrigger
	530,  // 176: xnap.v1.ChoinformationReq.target_ng_rannode_uexn_apid:type_name -> xnap.v1.NgRAnnodeUexnApid
	248,  // 177: xnap.v1.ChoinformationReq.c_ho_estimated_arrival_probability:type_name -> xnap.v1.ChoProbability
	244,  // 178: xnap.v1.ChoinformationReq.i_e_extensions:type_name -> xnap.v1.ChoinformationReqExtIes
	1074, // 179: xnap.v1.ChoinformationAckExtIes.value:type_name -> google.protobuf.Empty
	993,  // 180: xnap.v1.ChoinformationAck.requested_target_cell_global_id:type_name -> xnap.v1.TargetCGi
	450,  // 181: xnap.v1.ChoinformationAck.max_chooperations:type_name -> xnap.v1.MaxChopreparations
	246,  // 182: xnap.v1.ChoinformationAck.i_e_extensions:type_name -> xnap.v1.ChoinformationAckExtIes
	1074, // 183: xnap.v1.ConnectivitySupportExtIes.value:type_name -> google.protobuf.Empty
	15,   // 184: xnap.v1.ConnectivitySupport.e_ndc_support:type_name -> xnap.v1.EndcsupportConnectivitySupport
	249,  // 185: xnap.v1.ConnectivitySupport.i_e_extensions:type_name -> xnap.v1.ConnectivitySupportExtIes
	1074, // 186: xnap.v1.CountPDcpSN12ExtIes.value:type_name -> google.protobuf.Empty
	251,  // 187: xnap.v1.CountPDcpSN12.i_e_extensions:type_name -> xnap.v1.CountPDcpSN12ExtIes
	1074, // 188: xnap.v1.CountPDcpSN18ExtIes.value:type_name -> google.protobuf.Empty
	253,  // 189: xnap.v1.CountPDcpSN18.i_e_extensions:type_name -> xnap.v1.CountPDcpSN18ExtIes
	1074, // 190: xnap.v1.CptransportLayerInformationExtIes.value:type_name -> google.protobuf.Empty
	1018, // 191: xnap.v1.CptransportLayerInformation.endpoint_ipaddress:type_name -> xnap.v1.TransportLayerAddress
	255,  // 192: xnap.v1.CptransportLayerInformation.choice_extension:type_name -> xnap.v1.CptransportLayerInformationExtIes
	1074, // 193: xnap.v1.CriticalityDiagnosticsExtIes.value:type_name -> google.protobuf.Empty
	1078, // 194: xnap.v1.CriticalityDiagnostics.procedure_code:type_name -> xnap.v1.ProcedureCode
	1079, // 195: xnap.v1.CriticalityDiagnostics.triggering_message:type_name -> xnap.v1.TriggeringMessage
	1077, // 196: xnap.v1.CriticalityDiagnostics.procedure_criticality:type_name -> xnap.v1.Criticality
	261,  // 197: xnap.v1.CriticalityDiagnostics.i_es_criticality_diagnostics:type_name -> xnap.v1.CriticalityDiagnosticsIEList
	257,  // 198: xnap.v1.CriticalityDiagnostics.i_e_extensions:type_name -> xnap.v1.CriticalityDiagnosticsExtIes
	1074, // 199: xnap.v1.CriticalityDiagnosticsIEListExtIes.value:type_name -> google.protobuf.Empty
	1077, // 200: xnap.v1.NestedCriticalityDiagnosticsIEList.i_ecriticality:type_name -> xnap.v1.Criticality
	1076, // 201: xnap.v1.NestedCriticalityDiagnosticsIEList.i_e_id:type_name -> xnap.v1.ProtocolIeID
	132,  // 202: xnap.v1.NestedCriticalityDiagnosticsIEList.type_of_error:type_name -> xnap.v1.TypeOfError
	259,  // 203: xnap.v1.NestedCriticalityDiagnosticsIEList.i_e_extensions:type_name -> xnap.v1.CriticalityDiagnosticsIEListExtIes
	260,  // 204: xnap.v1.CriticalityDiagnosticsIEList.value:type_name -> xnap.v1.NestedCriticalityDiagnosticsIEList
	1075, // 205: xnap.v1.CRNti.value:type_name -> asn1.v1.BitString
	266,  // 206: xnap.v1.XnUaddressInfoperPdusessionList.value:type_name -> xnap.v1.XnUaddressInfoperPdusessionItem
	870,  // 207: xnap.v1.XnUaddressInfoperPdusessionItemExtIesExtension.id_secondarydata_forwarding_info_from_target_list:type_name -> xnap.v1.SecondarydataForwardingInfoFromTargetList
	303,  // 208: xnap.v1.XnUaddressInfoperPdusessionItemExtIesExtension.id_drb_ids_takenintouse:type_name -> xnap.v1.DrbList
	268,  // 209: xnap.v1.XnUaddressInfoperPdusessionItemExtIesExtension.id_data_forwarding_info_from_target_e_utrannode:type_name -> xnap.v1.DataForwardingInfoFromTargetEUTrannode
	1076, // 210: xnap.v1.XnUaddressInfoperPdusessionItemExtIes.id:type_name -> xnap.v1.ProtocolIeID
	1077, // 211: xnap.v1.XnUaddressInfoperPdusessionItemExtIes.criticality:type_name -> xnap.v1.Criticality
	264,  // 212: xnap.v1.XnUaddressInfoperPdusessionItemExtIes.extension:type_name -> xnap.v1.XnUaddressInfoperPdusessionItemExtIesExtension
	756,  // 213: xnap.v1.XnUaddressInfoperPdusessionItem.pdu_session_id:type_name -> xnap.v1.PdusessionID
	276,  // 214: xnap.v1.XnUaddressInfoperPdusessionItem.data_forwarding_info_from_target_ngrannode:type_name -> xnap.v1.DataForwardingInfoFromTargetNgrannode
	748,  // 215: xnap.v1.XnUaddressInfoperPdusessionItem.pdu_session_resource_setup_complete_info_snterm:type_name -> xnap.v1.PdusessionResourceBearerSetupCompleteInfoSNterminated
	265,  // 216: xnap.v1.XnUaddressInfoperPdusessionItem.i_e_extension:type_name -> xnap.v1.XnUaddressInfoperPdusessionItemExtIes
	1074, // 217: xnap.v1.DataForwardingInfoFromTargetEUTrannodeExtIes.value:type_name -> google.protobuf.Empty
	269,  // 218: xnap.v1.DataForwardingInfoFromTargetEUTrannode.data_forwarding_info_from_target_e_utrannode_list:type_name -> xnap.v1.DataForwardingInfoFromTargetEUTrannodeList
	267,  // 219: xnap.v1.DataForwardingInfoFromTargetEUTrannode.i_e_extension:type_name -> xnap.v1.DataForwardingInfoFromTargetEUTrannodeExtIes
	271,  // 220: xnap.v1.DataForwardingInfoFromTargetEUTrannodeList.value:type_name -> xnap.v1.DataForwardingInfoFromTargetEUTrannodeItem
	1074, // 221: xnap.v1.DataForwardingInfoFromTargetEUTrannodeItemExtIes.value:type_name -> google.protobuf.Empty
	1061, // 222: xnap.v1.DataForwardingInfoFromTargetEUTrannodeItem.dl_forwarding_uptnlinformation:type_name -> xnap.v1.UptransportLayerInformation
	272,  // 223: xnap.v1.DataForwardingInfoFromTargetEUTrannodeItem.qos_flows_to_be_forwarded_list:type_name -> xnap.v1.QoSflowsToBeForwardedList
	270,  // 224: xnap.v1.DataForwardingInfoFromTargetEUTrannodeItem.i_e_extension:type_name -> xnap.v1.DataForwardingInfoFromTargetEUTrannodeItemExtIes
	274,  // 225: xnap.v1.QoSflowsToBeForwardedList.value:type_name -> xnap.v1.QoSflowsToBeForwardedItem
	1074, // 226: xnap.v1.QoSflowsToBeForwardedItemExtIes.value:type_name -> google.protobuf.Empty
	774,  // 227: xnap.v1.QoSflowsToBeForwardedItem.qos_flow_identifier:type_name -> xnap.v1.QoSflowIdentifier
	273,  // 228: xnap.v1.QoSflowsToBeForwardedItem.i_e_extension:type_name -> xnap.v1.QoSflowsToBeForwardedItemExtIes
	1074, // 229: xnap.v1.DataForwardingInfoFromTargetNgrannodeExtIes.value:type_name -> google.protobuf.Empty
	277,  // 230: xnap.v1.DataForwardingInfoFromTargetNgrannode.qos_flows_accepted_for_data_forwarding_list:type_name -> xnap.v1.QoSflowsAcceptedToBeForwardedList
	1061, // 231: xnap.v1.DataForwardingInfoFromTargetNgrannode.pdu_session_level_dldata_forwarding_info:type_name -> xnap.v1.UptransportLayerInformation
	1061, // 232: xnap.v1.DataForwardingInfoFromTargetNgrannode.pdu_session_level_uldata_forwarding_info:type_name -> xnap.v1.UptransportLayerInformation
	285,  // 233: xnap.v1.DataForwardingInfoFromTargetNgrannode.data_forwarding_response_drbitem_list:type_name -> xnap.v1.DataForwardingResponseDrbitemList
	275,  // 234: xnap.v1.DataForwardingInfoFromTargetNgrannode.i_e_extension:type_name -> xnap.v1.DataForwardingInfoFromTargetNgrannodeExtIes
	279,  // 235: xnap.v1.QoSflowsAcceptedToBeForwardedList.value:type_name -> xnap.v1.QoSflowsAcceptedToBeForwardedItem
	1074, // 236: xnap.v1.QoSflowsAcceptedToBeForwardedItemExtIes.value:type_name -> google.protobuf.Empty
	774,  // 237: xnap.v1.QoSflowsAcceptedToBeForwardedItem.qos_flow_identifier:type_name -> xnap.v1.QoSflowIdentifier
	278,  // 238: xnap.v1.QoSflowsAcceptedToBeForwardedItem.i_e_extension:type_name -> xnap.v1.QoSflowsAcceptedToBeForwardedItemExtIes
	1074, // 239: xnap.v1.DataforwardingandOffloadingInfofromSourceExtIes.value:type_name -> google.protobuf.Empty
	282,  // 240: xnap.v1.DataforwardingandOffloadingInfofromSource.qos_flows_to_be_forwarded:type_name -> xnap.v1.QoSflowsToBeForwardedList1
	323,  // 241: xnap.v1.DataforwardingandOffloadingInfofromSource.source_drbto_qo_sflow_mapping:type_name -> xnap.v1.DrbtoQoSflowMappingList
	280,  // 242: xnap.v1.DataforwardingandOffloadingInfofromSource.i_e_extension:type_name -> xnap.v1.DataforwardingandOffloadingInfofromSourceExtIes
	284,  // 243: xnap.v1.QoSflowsToBeForwardedList1.value:type_name -> xnap.v1.QoSflowsToBeForwardedItem1
	137,  // 244: xnap.v1.QoSflowsToBeForwardedItemExtIesExtension.id_ulforwarding_proposal:type_name -> xnap.v1.UlforwardingProposal
	1018, // 245: xnap.v1.QoSflowsToBeForwardedItemExtIesExtension.id_source_dlforwarding_ipaddress:type_name -> xnap.v1.TransportLayerAddress
	1018, // 246: xnap.v1.QoSflowsToBeForwardedItemExtIesExtension.id_source_node_dlforwarding_ipaddress:type_name -> xnap.v1.TransportLayerAddress
	774,  // 247: xnap.v1.QoSflowsToBeForwardedItem1.qos_flow_identifier:type_name -> xnap.v1.QoSflowIdentifier
	25,   // 248: xnap.v1.QoSflowsToBeForwardedItem1.dl_dataforwarding:type_name -> xnap.v1.Dlforwarding
	136,  // 249: xnap.v1.QoSflowsToBeForwardedItem1.ul_dataforwarding:type_name -> xnap.v1.Ulforwarding
	273,  // 250: xnap.v1.QoSflowsToBeForwardedItem1.i_e_extension:type_name -> xnap.v1.QoSflowsToBeForwardedItemExtIes
	287,  // 251: xnap.v1.DataForwardingResponseDrbitemList.value:type_name -> xnap.v1.DataForwardingResponseDrbitem
	1074, // 252: xnap.v1.DataForwardingResponseDrbitemExtIes.value:type_name -> google.protobuf.Empty
	302,  // 253: xnap.v1.DataForwardingResponseDrbitem.drb_id:type_name -> xnap.v1.DrbID
	1061, // 254: xnap.v1.DataForwardingResponseDrbitem.dl_forwarding_uptnl:type_name -> xnap.v1.UptransportLayerInformation
	1061, // 255: xnap.v1.DataForwardingResponseDrbitem.ul_forwarding_uptnl:type_name -> xnap.v1.UptransportLayerInformation
	286,  // 256: xnap.v1.DataForwardingResponseDrbitem.i_e_extension:type_name -> xnap.v1.DataForwardingResponseDrbitemExtIes
	1075, // 257: xnap.v1.DataTrafficResources.value:type_name -> asn1.v1.BitString
	1074, // 258: xnap.v1.DataTrafficResourceIndicationExtIes.value:type_name -> google.protobuf.Empty
	152,  // 259: xnap.v1.DataTrafficResourceIndication.activation_sfn:type_name -> xnap.v1.ActivationSfn
	917,  // 260: xnap.v1.DataTrafficResourceIndication.shared_resource_type:type_name -> xnap.v1.SharedResourceType
	825,  // 261: xnap.v1.DataTrafficResourceIndication.reserved_subframe_pattern:type_name -> xnap.v1.ReservedSubframePattern
	289,  // 262: xnap.v1.DataTrafficResourceIndication.i_e_extension:type_name -> xnap.v1.DataTrafficResourceIndicationExtIes
	1074, // 263: xnap.v1.DapsrequestInfoExtIes.value:type_name -> google.protobuf.Empty
	20,   // 264: xnap.v1.DapsrequestInfo.daps_indicator:type_name -> xnap.v1.DapsIndicatorDapsrequestInfo
	291,  // 265: xnap.v1.DapsrequestInfo.i_e_extensions:type_name -> xnap.v1.DapsrequestInfoExtIes
	295,  // 266: xnap.v1.DapsresponseInfoList.value:type_name -> xnap.v1.DapsresponseInfoItem
	1074, // 267: xnap.v1.DapsresponseInfoItemExtIes.value:type_name -> google.protobuf.Empty
	302,  // 268: xnap.v1.DapsresponseInfoItem.drb_id:type_name -> xnap.v1.DrbID
	21,   // 269: xnap.v1.DapsresponseInfoItem.daps_response_indicator:type_name -> xnap.v1.DapsResponseIndicatorDapsresponseInfoItem
	294,  // 270: xnap.v1.DapsresponseInfoItem.i_e_extensions:type_name -> xnap.v1.DapsresponseInfoItemExtIes
	1074, // 271: xnap.v1.DlcountChoiceExtIes.value:type_name -> google.protobuf.Empty
	252,  // 272: xnap.v1.DlcountChoice.count12bits:type_name -> xnap.v1.CountPDcpSN12
	254,  // 273: xnap.v1.DlcountChoice.count18bits:type_name -> xnap.v1.CountPDcpSN18
	297,  // 274: xnap.v1.DlcountChoice.choice_extension:type_name -> xnap.v1.DlcountChoiceExtIes
	302,  // 275: xnap.v1.DrbList.value:type_name -> xnap.v1.DrbID
	306,  // 276: xnap.v1.DrbListwithCause.value:type_name -> xnap.v1.DrbListwithCauseItem
	1074, // 277: xnap.v1.DrbListwithCauseItemExtIes.value:type_name -> google.protobuf.Empty
	302,  // 278: xnap.v1.DrbListwithCauseItem.drb_id:type_name -> xnap.v1.DrbID
	213,  // 279: xnap.v1.DrbListwithCauseItem.cause:type_name -> xnap.v1.Cause
	101,  // 280: xnap.v1.DrbListwithCauseItem.r_lc_mode:type_name -> xnap.v1.Rlcmode
	305,  // 281: xnap.v1.DrbListwithCauseItem.i_e_extension:type_name -> xnap.v1.DrbListwithCauseItemExtIes
	310,  // 282: xnap.v1.DrbsSubjectToDldiscardingList.value:type_name -> xnap.v1.DrbsSubjectToDldiscardingItem
	1074, // 283: xnap.v1.DrbsSubjectToDldiscardingItemExtIes.value:type_name -> google.protobuf.Empty
	302,  // 284: xnap.v1.DrbsSubjectToDldiscardingItem.drb_id:type_name -> xnap.v1.DrbID
	298,  // 285: xnap.v1.DrbsSubjectToDldiscardingItem.dl_count:type_name -> xnap.v1.DlcountChoice
	309,  // 286: xnap.v1.DrbsSubjectToDldiscardingItem.i_e_extension:type_name -> xnap.v1.DrbsSubjectToDldiscardingItemExtIes
	313,  // 287: xnap.v1.DrbsSubjectToEarlyStatusTransferList.value:type_name -> xnap.v1.DrbsSubjectToEarlyStatusTransferItem
	1074, // 288: xnap.v1.DrbsSubjectToEarlyStatusTransferItemExtIes.value:type_name -> google.protobuf.Empty
	302,  // 289: xnap.v1.DrbsSubjectToEarlyStatusTransferItem.drb_id:type_name -> xnap.v1.DrbID
	298,  // 290: xnap.v1.DrbsSubjectToEarlyStatusTransferItem.dl_count:type_name -> xnap.v1.DlcountChoice
	312,  // 291: xnap.v1.DrbsSubjectToEarlyStatusTransferItem.i_e_extension:type_name -> xnap.v1.DrbsSubjectToEarlyStatusTransferItemExtIes
	316,  // 292: xnap.v1.DrbsSubjectToStatusTransferList.value:type_name -> xnap.v1.DrbsSubjectToStatusTransferItem
	1074, // 293: xnap.v1.DrbsSubjectToStatusTransferItemExtIes.value:type_name -> google.protobuf.Empty
	302,  // 294: xnap.v1.DrbsSubjectToStatusTransferItem.drb_id:type_name -> xnap.v1.DrbID
	318,  // 295: xnap.v1.DrbsSubjectToStatusTransferItem.pdcp_status_transfer_ul:type_name -> xnap.v1.DrbbstatusTransferChoice
	318,  // 296: xnap.v1.DrbsSubjectToStatusTransferItem.pdcp_status_transfer_dl:type_name -> xnap.v1.DrbbstatusTransferChoice
	315,  // 297: xnap.v1.DrbsSubjectToStatusTransferItem.i_e_extension:type_name -> xnap.v1.DrbsSubjectToStatusTransferItemExtIes
	1074, // 298: xnap.v1.DrbbstatusTransferChoiceExtIes.value:type_name -> google.protobuf.Empty
	320,  // 299: xnap.v1.DrbbstatusTransferChoice.pdcp_sn_12bits:type_name -> xnap.v1.DrbbstatusTransfer12bitsSn
	322,  // 300: xnap.v1.DrbbstatusTransferChoice.pdcp_sn_18bits:type_name -> xnap.v1.DrbbstatusTransfer18bitsSn
	317,  // 301: xnap.v1.DrbbstatusTransferChoice.choice_extension:type_name -> xnap.v1.DrbbstatusTransferChoiceExtIes
	1074, // 302: xnap.v1.DrbbstatusTransfer12bitsSnExtIes.value:type_name -> google.protobuf.Empty
	1075, // 303: xnap.v1.DrbbstatusTransfer12bitsSn.receive_statusof_pdcpsdu:type_name -> asn1.v1.BitString
	252,  // 304: xnap.v1.DrbbstatusTransfer12bitsSn.c_ountvalue:type_name -> xnap.v1.CountPDcpSN12
	319,  // 305: xnap.v1.DrbbstatusTransfer12bitsSn.i_e_extension:type_name -> xnap.v1.DrbbstatusTransfer12bitsSnExtIes
	1074, // 306: xnap.v1.DrbbstatusTransfer18bitsSnExtIes.value:type_name -> google.protobuf.Empty
	1075, // 307: xnap.v1.DrbbstatusTransfer18bitsSn.receive_statusof_pdcpsdu:type_name -> asn1.v1.BitString
	254,  // 308: xnap.v1.DrbbstatusTransfer18bitsSn.c_ountvalue:type_name -> xnap.v1.CountPDcpSN18
	321,  // 309: xnap.v1.DrbbstatusTransfer18bitsSn.i_e_extension:type_name -> xnap.v1.DrbbstatusTransfer18bitsSnExtIes
	325,  // 310: xnap.v1.DrbtoQoSflowMappingList.value:type_name -> xnap.v1.DrbtoQoSflowMappingItem
	1074, // 311: xnap.v1.DrbtoQoSflowMappingItemExtIes.value:type_name -> google.protobuf.Empty
	302,  // 312: xnap.v1.DrbtoQoSflowMappingItem.drb_id:type_name -> xnap.v1.DrbID
	781,  // 313: xnap.v1.DrbtoQoSflowMappingItem.qos_flows_list:type_name -> xnap.v1.QoSflowsList
	101,  // 314: xnap.v1.DrbtoQoSflowMappingItem.r_lc_mode:type_name -> xnap.v1.Rlcmode
	324,  // 315: xnap.v1.DrbtoQoSflowMappingItem.i_e_extension:type_name -> xnap.v1.DrbtoQoSflowMappingItemExtIes
	359,  // 316: xnap.v1.Dynamic5QidescriptorExtIesExtension.id_extended_packet_delay_budget:type_name -> xnap.v1.ExtendedPacketDelayBudget
	359,  // 317: xnap.v1.Dynamic5QidescriptorExtIesExtension.id_cnpacket_delay_budget_downlink:type_name -> xnap.v1.ExtendedPacketDelayBudget
	359,  // 318: xnap.v1.Dynamic5QidescriptorExtIesExtension.id_cnpacket_delay_budget_uplink:type_name -> xnap.v1.ExtendedPacketDelayBudget
	1076, // 319: xnap.v1.Dynamic5QidescriptorExtIes.id:type_name -> xnap.v1.ProtocolIeID
	1077, // 320: xnap.v1.Dynamic5QidescriptorExtIes.criticality:type_name -> xnap.v1.Criticality
	326,  // 321: xnap.v1.Dynamic5QidescriptorExtIes.extension:type_name -> xnap.v1.Dynamic5QidescriptorExtIesExtension
	764,  // 322: xnap.v1.Dynamic5Qidescriptor.priority_level_qo_s:type_name -> xnap.v1.PriorityLevelQoS
	603,  // 323: xnap.v1.Dynamic5Qidescriptor.packet_delay_budget:type_name -> xnap.v1.PacketDelayBudget
	605,  // 324: xnap.v1.Dynamic5Qidescriptor.packet_error_rate:type_name -> xnap.v1.PacketErrorRate
	369,  // 325: xnap.v1.Dynamic5Qidescriptor.five_qi:type_name -> xnap.v1.FiveQi
	27,   // 326: xnap.v1.Dynamic5Qidescriptor.delay_critical:type_name -> xnap.v1.DelayCriticalDynamic5Qidescriptor
	178,  // 327: xnap.v1.Dynamic5Qidescriptor.averaging_window:type_name -> xnap.v1.AveragingWindow
	451,  // 328: xnap.v1.Dynamic5Qidescriptor.maximum_data_burst_volume:type_name -> xnap.v1.MaximumDataBurstVolume
	327,  // 329: xnap.v1.Dynamic5Qidescriptor.i_e_extension:type_name -> xnap.v1.Dynamic5QidescriptorExtIes
	1075, // 330: xnap.v1.EUTraCellIdentity.value:type_name -> asn1.v1.BitString
	1074, // 331: xnap.v1.EUTraCGiExtIes.value:type_name -> google.protobuf.Empty
	761,  // 332: xnap.v1.EUTraCGi.plmn_id:type_name -> xnap.v1.PlmnIdentity
	331,  // 333: xnap.v1.EUTraCGi.e_utra_ci:type_name -> xnap.v1.EUTraCellIdentity
	332,  // 334: xnap.v1.EUTraCGi.i_e_extension:type_name -> xnap.v1.EUTraCGiExtIes
	334,  // 335: xnap.v1.EUTramultibandInfoList.value:type_name -> xnap.v1.EUTrafrequencyBandIndicator
	1074, // 336: xnap.v1.EUTraprachconfigurationExtIes.value:type_name -> google.protobuf.Empty
	28,   // 337: xnap.v1.EUTraprachconfiguration.high_speed_flag:type_name -> xnap.v1.HighSpeedFlagEutraprachconfiguration
	337,  // 338: xnap.v1.EUTraprachconfiguration.i_e_extensions:type_name -> xnap.v1.EUTraprachconfigurationExtIes
	1074, // 339: xnap.v1.EndpointIpaddressAndPortExtIes.value:type_name -> google.protobuf.Empty
	1018, // 340: xnap.v1.EndpointIpaddressAndPort.endpoint_ipaddress:type_name -> xnap.v1.TransportLayerAddress
	763,  // 341: xnap.v1.EndpointIpaddressAndPort.port_number:type_name -> xnap.v1.PortNumber
	339,  // 342: xnap.v1.EndpointIpaddressAndPort.i_e_extensions:type_name -> xnap.v1.EndpointIpaddressAndPortExtIes
	1074, // 343: xnap.v1.EventTriggeredExtIes.value:type_name -> google.protobuf.Empty
	426,  // 344: xnap.v1.EventTriggered.logged_event_triggered_config:type_name -> xnap.v1.LoggedEventTriggeredConfig
	341,  // 345: xnap.v1.EventTriggered.i_e_extensions:type_name -> xnap.v1.EventTriggeredExtIes
	1074, // 346: xnap.v1.EventTypeTriggerExtIes.value:type_name -> google.protobuf.Empty
	31,   // 347: xnap.v1.EventTypeTrigger.out_of_coverage:type_name -> xnap.v1.OutOfCoverageEventTypeTrigger
	346,  // 348: xnap.v1.EventTypeTrigger.event_l1:type_name -> xnap.v1.EventL1
	343,  // 349: xnap.v1.EventTypeTrigger.choice_extensions:type_name -> xnap.v1.EventTypeTriggerExtIes
	1074, // 350: xnap.v1.EventL1ExtIes.value:type_name -> google.protobuf.Empty
	347,  // 351: xnap.v1.EventL1.l1_threshold:type_name -> xnap.v1.MeasurementThresholdL1LoggedMdt
	393,  // 352: xnap.v1.EventL1.hysteresis:type_name -> xnap.v1.Hysteresis
	128,  // 353: xnap.v1.EventL1.time_to_trigger:type_name -> xnap.v1.TimeToTrigger
	345,  // 354: xnap.v1.EventL1.i_e_extensions:type_name -> xnap.v1.EventL1ExtIes
	999,  // 355: xnap.v1.MeasurementThresholdL1LoggedMdt.threshold_rsrp:type_name -> xnap.v1.ThresholdRSrp
	998,  // 356: xnap.v1.MeasurementThresholdL1LoggedMdt.threshold_rsrq:type_name -> xnap.v1.ThresholdRSrq
	1074, // 357: xnap.v1.ExpectedUeactivityBehaviourExtIes.value:type_name -> google.protobuf.Empty
	348,  // 358: xnap.v1.ExpectedUeactivityBehaviour.expected_activity_period:type_name -> xnap.v1.ExpectedActivityPeriod
	349,  // 359: xnap.v1.ExpectedUeactivityBehaviour.expected_idle_period:type_name -> xnap.v1.ExpectedIdlePeriod
	34,   // 360: xnap.v1.ExpectedUeactivityBehaviour.source_of_ueactivity_behaviour_information:type_name -> xnap.v1.SourceOfUeactivityBehaviourInformation
	350,  // 361: xnap.v1.ExpectedUeactivityBehaviour.i_e_extensions:type_name -> xnap.v1.ExpectedUeactivityBehaviourExtIes
	1074, // 362: xnap.v1.ExpectedUebehaviourExtIes.value:type_name -> google.protobuf.Empty
	351,  // 363: xnap.v1.ExpectedUebehaviour.expected_ueactivity_behaviour:type_name -> xnap.v1.ExpectedUeactivityBehaviour
	32,   // 364: xnap.v1.ExpectedUebehaviour.expected_hointerval:type_name -> xnap.v1.ExpectedHointerval
	33,   // 365: xnap.v1.ExpectedUebehaviour.expected_uemobility:type_name -> xnap.v1.ExpectedUemobility
	354,  // 366: xnap.v1.ExpectedUebehaviour.expected_uemoving_trajectory:type_name -> xnap.v1.ExpectedUemovingTrajectory
	352,  // 367: xnap.v1.ExpectedUebehaviour.i_e_extensions:type_name -> xnap.v1.ExpectedUebehaviourExtIes
	356,  // 368: xnap.v1.ExpectedUemovingTrajectory.value:type_name -> xnap.v1.ExpectedUemovingTrajectoryItem
	1074, // 369: xnap.v1.ExpectedUemovingTrajectoryItemExtIes.value:type_name -> google.protobuf.Empty
	385,  // 370: xnap.v1.ExpectedUemovingTrajectoryItem.n_gran_cgi:type_name -> xnap.v1.GlobalNgRAncellID
	355,  // 371: xnap.v1.ExpectedUemovingTrajectoryItem.i_e_extensions:type_name -> xnap.v1.ExpectedUemovingTrajectoryItemExtIes
	1074, // 372: xnap.v1.ExtendedRatrestrictionInformationExtIes.value:type_name -> google.protobuf.Empty
	1075, // 373: xnap.v1.ExtendedRatrestrictionInformation.primary_ratrestriction:type_name -> asn1.v1.BitString
	1075, // 374: xnap.v1.ExtendedRatrestrictionInformation.secondary_ratrestriction:type_name -> asn1.v1.BitString
	357,  // 375: xnap.v1.ExtendedRatrestrictionInformation.i_e_extensions:type_name -> xnap.v1.ExtendedRatrestrictionInformationExtIes
	948,  // 376: xnap.v1.ExtendedSliceSupportList.value:type_name -> xnap.v1.SNSsai
	1075, // 377: xnap.v1.ExtendedUeidentityIndexValue.value:type_name -> asn1.v1.BitString
	364,  // 378: xnap.v1.ExtTlas.value:type_name -> xnap.v1.ExtTlaItem
	1074, // 379: xnap.v1.ExtTlaItemExtIes.value:type_name -> google.protobuf.Empty
	1018, // 380: xnap.v1.ExtTlaItem.i_psec_tla:type_name -> xnap.v1.TransportLayerAddress
	365,  // 381: xnap.v1.ExtTlaItem.g_tptransport_layer_addresses:type_name -> xnap.v1.Gtptlas
	363,  // 382: xnap.v1.ExtTlaItem.i_e_extensions:type_name -> xnap.v1.ExtTlaItemExtIes
	367,  // 383: xnap.v1.Gtptlas.value:type_name -> xnap.v1.GtptlaItem
	1074, // 384: xnap.v1.GtptlaItemExtIes.value:type_name -> google.protobuf.Empty
	1018, // 385: xnap.v1.GtptlaItem.g_tptransport_layer_addresses:type_name -> xnap.v1.TransportLayerAddress
	366,  // 386: xnap.v1.GtptlaItem.i_e_extensions:type_name -> xnap.v1.GtptlaItemExtIes
	1074, // 387: xnap.v1.GbrqoSflowInfoExtIes.value:type_name -> google.protobuf.Empty
	190,  // 388: xnap.v1.GbrqoSflowInfo.max_flow_bit_rate_dl:type_name -> xnap.v1.BitRate
	190,  // 389: xnap.v1.GbrqoSflowInfo.max_flow_bit_rate_ul:type_name -> xnap.v1.BitRate
	190,  // 390: xnap.v1.GbrqoSflowInfo.guaranteed_flow_bit_rate_dl:type_name -> xnap.v1.BitRate
	190,  // 391: xnap.v1.GbrqoSflowInfo.guaranteed_flow_bit_rate_ul:type_name -> xnap.v1.BitRate
	36,   // 392: xnap.v1.GbrqoSflowInfo.notification_control:type_name -> xnap.v1.NotificationControlGbrqoSflowInfo
	608,  // 393: xnap.v1.GbrqoSflowInfo.max_packet_loss_rate_dl:type_name -> xnap.v1.PacketLossRate
	608,  // 394: xnap.v1.GbrqoSflowInfo.max_packet_loss_rate_ul:type_name -> xnap.v1.PacketLossRate
	370,  // 395: xnap.v1.GbrqoSflowInfo.i_e_extensions:type_name -> xnap.v1.GbrqoSflowInfoExtIes
	1074, // 396: xnap.v1.GlobalgNbIDExtIes.value:type_name -> google.protobuf.Empty
	761,  // 397: xnap.v1.GlobalgNbID.plmn_id:type_name -> xnap.v1.PlmnIdentity
	375,  // 398: xnap.v1.GlobalgNbID.gnb_id:type_name -> xnap.v1.GnbIDChoice
	372,  // 399: xnap.v1.GlobalgNbID.i_e_extensions:type_name -> xnap.v1.GlobalgNbIDExtIes
	1074, // 400: xnap.v1.GnbIDChoiceExtIes.value:type_name -> google.protobuf.Empty
	1075, // 401: xnap.v1.GnbIDChoice.gnb_id:type_name -> asn1.v1.BitString
	374,  // 402: xnap.v1.GnbIDChoice.choice_extension:type_name -> xnap.v1.GnbIDChoiceExtIes
	1074, // 403: xnap.v1.GnbRadioResourceStatusExtIes.value:type_name -> google.protobuf.Empty
	955,  // 404: xnap.v1.GnbRadioResourceStatus.ssb_area_radio_resource_status_list:type_name -> xnap.v1.SsbareaRadioResourceStatusList
	376,  // 405: xnap.v1.GnbRadioResourceStatus.i_e_extensions:type_name -> xnap.v1.GnbRadioResourceStatusExtIes
	1074, // 406: xnap.v1.GlobalCellIDExtIes.value:type_name -> google.protobuf.Empty
	761,  // 407: xnap.v1.GlobalCellID.plmn_id:type_name -> xnap.v1.PlmnIdentity
	239,  // 408: xnap.v1.GlobalCellID.cell_type:type_name -> xnap.v1.CellTypeChoice
	378,  // 409: xnap.v1.GlobalCellID.i_e_extensions:type_name -> xnap.v1.GlobalCellIDExtIes
	1074, // 410: xnap.v1.GlobaleNbIDExtIes.value:type_name -> google.protobuf.Empty
	761,  // 411: xnap.v1.GlobalngeNbID.plmn_id:type_name -> xnap.v1.PlmnIdentity
	383,  // 412: xnap.v1.GlobalngeNbID.enb_id:type_name -> xnap.v1.EnbIDChoice
	380,  // 413: xnap.v1.GlobalngeNbID.i_e_extensions:type_name -> xnap.v1.GlobaleNbIDExtIes
	1074, // 414: xnap.v1.EnbIDChoiceExtIes.value:type_name -> google.protobuf.Empty
	1075, // 415: xnap.v1.EnbIDChoice.enb_id_macro:type_name -> asn1.v1.BitString
	1075, // 416: xnap.v1.EnbIDChoice.enb_id_shortmacro:type_name -> asn1.v1.BitString
	1075, // 417: xnap.v1.EnbIDChoice.enb_id_longmacro:type_name -> asn1.v1.BitString
	382,  // 418: xnap.v1.EnbIDChoice.choice_extension:type_name -> xnap.v1.EnbIDChoiceExtIes
	1074, // 419: xnap.v1.GlobalNgRAncellIDExtIes.value:type_name -> google.protobuf.Empty
	761,  // 420: xnap.v1.GlobalNgRAncellID.plmn_id:type_name -> xnap.v1.PlmnIdentity
	527,  // 421: xnap.v1.GlobalNgRAncellID.ng_ran_cell_id:type_name -> xnap.v1.NgRAnCellIdentity
	384,  // 422: xnap.v1.GlobalNgRAncellID.i_e_extensions:type_name -> xnap.v1.GlobalNgRAncellIDExtIes
	1074, // 423: xnap.v1.GlobalNgRAnnodeIDExtIes.value:type_name -> google.protobuf.Empty
	373,  // 424: xnap.v1.GlobalNgRAnnodeID.g_nb:type_name -> xnap.v1.GlobalgNbID
	381,  // 425: xnap.v1.GlobalNgRAnnodeID.ng_e_nb:type_name -> xnap.v1.GlobalngeNbID
	386,  // 426: xnap.v1.GlobalNgRAnnodeID.choice_extension:type_name -> xnap.v1.GlobalNgRAnnodeIDExtIes
	1074, // 427: xnap.v1.GtptunnelTransportLayerInformationExtIes.value:type_name -> google.protobuf.Empty
	1018, // 428: xnap.v1.GtptunnelTransportLayerInformation.tnl_address:type_name -> xnap.v1.TransportLayerAddress
	388,  // 429: xnap.v1.GtptunnelTransportLayerInformation.gtp_teid:type_name -> xnap.v1.GtpTEid
	389,  // 430: xnap.v1.GtptunnelTransportLayerInformation.i_e_extensions:type_name -> xnap.v1.GtptunnelTransportLayerInformationExtIes
	1074, // 431: xnap.v1.GuamiExtIes.value:type_name -> google.protobuf.Empty
	761,  // 432: xnap.v1.Guami.plmn_id:type_name -> xnap.v1.PlmnIdentity
	1075, // 433: xnap.v1.Guami.amf_region_id:type_name -> asn1.v1.BitString
	1075, // 434: xnap.v1.Guami.amf_set_id:type_name -> asn1.v1.BitString
	1075, // 435: xnap.v1.Guami.amf_pointer:type_name -> asn1.v1.BitString
	391,  // 436: xnap.v1.Guami.i_e_extensions:type_name -> xnap.v1.GuamiExtIes
	1074, // 437: xnap.v1.ImmediateMdtNRExtIes.value:type_name -> google.protobuf.Empty
	474,  // 438: xnap.v1.ImmediateMdtNR.measurements_to_activate:type_name -> xnap.v1.MeasurementsToActivate
	434,  // 439: xnap.v1.ImmediateMdtNR.m1_configuration:type_name -> xnap.v1.M1Configuration
	440,  // 440: xnap.v1.ImmediateMdtNR.m4_configuration:type_name -> xnap.v1.M4Configuration
	442,  // 441: xnap.v1.ImmediateMdtNR.m5_configuration:type_name -> xnap.v1.M5Configuration
	466,  // 442: xnap.v1.ImmediateMdtNR.m_dt_location_info:type_name -> xnap.v1.MdtLocationInfo
	444,  // 443: xnap.v1.ImmediateMdtNR.m6_configuration:type_name -> xnap.v1.M6Configuration
	446,  // 444: xnap.v1.ImmediateMdtNR.m7_configuration:type_name -> xnap.v1.M7Configuration
	180,  // 445: xnap.v1.ImmediateMdtNR.bluetooth_measurement_configuration:type_name -> xnap.v1.BluetoothMeasurementConfiguration
	1070, // 446: xnap.v1.ImmediateMdtNR.w_lanmeasurement_configuration:type_name -> xnap.v1.WlanmeasurementConfiguration
	878,  // 447: xnap.v1.ImmediateMdtNR.sensor_measurement_configuration:type_name -> xnap.v1.SensorMeasurementConfiguration
	395,  // 448: xnap.v1.ImmediateMdtNR.i_e_extensions:type_name -> xnap.v1.ImmediateMdtNRExtIes
	1074, // 449: xnap.v1.InitiatingConditionFailureIndicationExtIes.value:type_name -> google.protobuf.Empty
	855,  // 450: xnap.v1.InitiatingConditionFailureIndication.r_rcreestab:type_name -> xnap.v1.Rrcreestabinitiated
	863,  // 451: xnap.v1.InitiatingConditionFailureIndication.r_rcsetup:type_name -> xnap.v1.Rrcsetupinitiated
	397,  // 452: xnap.v1.InitiatingConditionFailureIndication.choice_extension:type_name -> xnap.v1.InitiatingConditionFailureIndicationExtIes
	1074, // 453: xnap.v1.IntendedTddDLULconfigurationNRExtIes.value:type_name -> google.protobuf.Empty
	62,   // 454: xnap.v1.IntendedTddDLULconfigurationNR.nrscs:type_name -> xnap.v1.Nrscs
	59,   // 455: xnap.v1.IntendedTddDLULconfigurationNR.nr_cyclic_prefix:type_name -> xnap.v1.NrcyclicPrefix
	60,   // 456: xnap.v1.IntendedTddDLULconfigurationNR.nr_dl_ultransmission_periodicity:type_name -> xnap.v1.NrdlULtransmissionPeriodicity
	943,  // 457: xnap.v1.IntendedTddDLULconfigurationNR.slot_configuration_list:type_name -> xnap.v1.SlotConfigurationList
	399,  // 458: xnap.v1.IntendedTddDLULconfigurationNR.i_e_extensions:type_name -> xnap.v1.IntendedTddDLULconfigurationNRExtIes
	1075, // 459: xnap.v1.InterfacesToTrace.value:type_name -> asn1.v1.BitString
	1074, // 460: xnap.v1.IRNtiExtIes.value:type_name -> google.protobuf.Empty
	1075, // 461: xnap.v1.IRNti.i_rnti_full:type_name -> asn1.v1.BitString
	1075, // 462: xnap.v1.IRNti.i_rnti_short:type_name -> asn1.v1.BitString
	403,  // 463: xnap.v1.IRNti.choice_extension:type_name -> xnap.v1.IRNtiExtIes
	1074, // 464: xnap.v1.LastVisitedCellItemExtIes.value:type_name -> google.protobuf.Empty
	409,  // 465: xnap.v1.LastVisitedCellItem.n_g_ran_cell:type_name -> xnap.v1.LastVisitedNgrancellInformation
	407,  // 466: xnap.v1.LastVisitedCellItem.e_utran_cell:type_name -> xnap.v1.LastVisitedEutrancellInformation
	410,  // 467: xnap.v1.LastVisitedCellItem.u_tran_cell:type_name -> xnap.v1.LastVisitedUtrancellInformation
	408,  // 468: xnap.v1.LastVisitedCellItem.g_eran_cell:type_name -> xnap.v1.LastVisitedGerancellInformation
	405,  // 469: xnap.v1.LastVisitedCellItem.choice_extension:type_name -> xnap.v1.LastVisitedCellItemExtIes
	414,  // 470: xnap.v1.ListOfCells.value:type_name -> xnap.v1.CellsinAoIItem
	1074, // 471: xnap.v1.CellsinAoIItemExtIes.value:type_name -> google.protobuf.Empty
	761,  // 472: xnap.v1.CellsinAoIItem.p_lmn_identity:type_name -> xnap.v1.PlmnIdentity
	527,  // 473: xnap.v1.CellsinAoIItem.ng_ran_cell_id:type_name -> xnap.v1.NgRAnCellIdentity
	413,  // 474: xnap.v1.CellsinAoIItem.i_e_extensions:type_name -> xnap.v1.CellsinAoIItemExtIes
	417,  // 475: xnap.v1.ListOfRannodesinAoI.value:type_name -> xnap.v1.GlobalNgRAnnodesinAoIItem
	1074, // 476: xnap.v1.GlobalNgRAnnodesinAoIItemExtIes.value:type_name -> google.protobuf.Empty
	387,  // 477: xnap.v1.GlobalNgRAnnodesinAoIItem.global_ng_ran_node_id:type_name -> xnap.v1.GlobalNgRAnnodeID
	416,  // 478: xnap.v1.GlobalNgRAnnodesinAoIItem.i_e_extensions:type_name -> xnap.v1.GlobalNgRAnnodesinAoIItemExtIes
	420,  // 479: xnap.v1.ListOfTaisinAoI.value:type_name -> xnap.v1.TaisinAoIItem
	1074, // 480: xnap.v1.TaisinAoIItemExtIes.value:type_name -> google.protobuf.Empty
	761,  // 481: xnap.v1.TaisinAoIItem.p_lmn_identity:type_name -> xnap.v1.PlmnIdentity
	986,  // 482: xnap.v1.TaisinAoIItem.t_ac:type_name -> xnap.v1.Tac
	419,  // 483: xnap.v1.TaisinAoIItem.i_e_extensions:type_name -> xnap.v1.TaisinAoIItemExtIes
	1074, // 484: xnap.v1.LocationReportingInformationExtIes.value:type_name -> google.protobuf.Empty
	30,   // 485: xnap.v1.LocationReportingInformation.event_type:type_name -> xnap.v1.EventType
	95,   // 486: xnap.v1.LocationReportingInformation.report_area:type_name -> xnap.v1.ReportArea
	164,  // 487: xnap.v1.LocationReportingInformation.area_of_interest:type_name -> xnap.v1.AreaOfInterestInformation
	421,  // 488: xnap.v1.LocationReportingInformation.i_e_extensions:type_name -> xnap.v1.LocationReportingInformationExtIes
	1074, // 489: xnap.v1.LoggedMdtEUtraExtIes.value:type_name -> google.protobuf.Empty
	41,   // 490: xnap.v1.LoggedMdtEUtra.logging_interval:type_name -> xnap.v1.LoggingInterval
	42,   // 491: xnap.v1.LoggedMdtEUtra.logging_duration:type_name -> xnap.v1.LoggingDuration
	180,  // 492: xnap.v1.LoggedMdtEUtra.bluetooth_measurement_configuration:type_name -> xnap.v1.BluetoothMeasurementConfiguration
	1070, // 493: xnap.v1.LoggedMdtEUtra.w_lanmeasurement_configuration:type_name -> xnap.v1.WlanmeasurementConfiguration
	423,  // 494: xnap.v1.LoggedMdtEUtra.i_e_extensions:type_name -> xnap.v1.LoggedMdtEUtraExtIes
	1074, // 495: xnap.v1.LoggedEventTriggeredConfigExtIes.value:type_name -> google.protobuf.Empty
	344,  // 496: xnap.v1.LoggedEventTriggeredConfig.event_type_trigger:type_name -> xnap.v1.EventTypeTrigger
	425,  // 497: xnap.v1.LoggedEventTriggeredConfig.i_e_extensions:type_name -> xnap.v1.LoggedEventTriggeredConfigExtIes
	1074, // 498: xnap.v1.LoggedMdtNRExtIes.value:type_name -> google.protobuf.Empty
	41,   // 499: xnap.v1.LoggedMdtNR.logging_interval:type_name -> xnap.v1.LoggingInterval
	42,   // 500: xnap.v1.LoggedMdtNR.logging_duration:type_name -> xnap.v1.LoggingDuration
	821,  // 501: xnap.v1.LoggedMdtNR.report_type:type_name -> xnap.v1.ReportType
	180,  // 502: xnap.v1.LoggedMdtNR.bluetooth_measurement_configuration:type_name -> xnap.v1.BluetoothMeasurementConfiguration
	1070, // 503: xnap.v1.LoggedMdtNR.w_lanmeasurement_configuration:type_name -> xnap.v1.WlanmeasurementConfiguration
	878,  // 504: xnap.v1.LoggedMdtNR.sensor_measurement_configuration:type_name -> xnap.v1.SensorMeasurementConfiguration
	169,  // 505: xnap.v1.LoggedMdtNR.area_scope_of_neigh_cells_list:type_name -> xnap.v1.AreaScopeOfNeighCellsList
	427,  // 506: xnap.v1.LoggedMdtNR.i_e_extensions:type_name -> xnap.v1.LoggedMdtNRExtIes
	1074, // 507: xnap.v1.Ltev2XservicesAuthorizedExtIes.value:type_name -> google.protobuf.Empty
	139,  // 508: xnap.v1.Ltev2XservicesAuthorized.vehicle_ue:type_name -> xnap.v1.VehicleUe
	66,   // 509: xnap.v1.Ltev2XservicesAuthorized.pedestrian_ue:type_name -> xnap.v1.PedestrianUe
	429,  // 510: xnap.v1.Ltev2XservicesAuthorized.i_e_extensions:type_name -> xnap.v1.Ltev2XservicesAuthorizedExtIes
	1074, // 511: xnap.v1.LteuesidelinkAggregateMaximumBitRateExtIes.value:type_name -> google.protobuf.Empty
	190,  // 512: xnap.v1.LteuesidelinkAggregateMaximumBitRate.u_esidelink_aggregate_maximum_bit_rate:type_name -> xnap.v1.BitRate
	431,  // 513: xnap.v1.LteuesidelinkAggregateMaximumBitRate.i_e_extensions:type_name -> xnap.v1.LteuesidelinkAggregateMaximumBitRateExtIes
	1074, // 514: xnap.v1.M1ConfigurationExtIes.value:type_name -> google.protobuf.Empty
	44,   // 515: xnap.v1.M1Configuration.m1reporting_trigger:type_name -> xnap.v1.M1ReportingTrigger
	438,  // 516: xnap.v1.M1Configuration.m1thresholdevent_a2:type_name -> xnap.v1.M1ThresholdEventA2
	436,  // 517: xnap.v1.M1Configuration.m1periodic_reporting:type_name -> xnap.v1.M1PeriodicReporting
	433,  // 518: xnap.v1.M1Configuration.i_e_extensions:type_name -> xnap.v1.M1ConfigurationExtIes
	1074, // 519: xnap.v1.M1PeriodicReportingExtIes.value:type_name -> google.protobuf.Empty
	96,   // 520: xnap.v1.M1PeriodicReporting.report_interval:type_name -> xnap.v1.ReportIntervalMdt
	94,   // 521: xnap.v1.M1PeriodicReporting.report_amount:type_name -> xnap.v1.ReportAmountMdt
	435,  // 522: xnap.v1.M1PeriodicReporting.i_e_extensions:type_name -> xnap.v1.M1PeriodicReportingExtIes
	1074, // 523: xnap.v1.M1ThresholdEventA2ExtIes.value:type_name -> google.protobuf.Empty
	476,  // 524: xnap.v1.M1ThresholdEventA2.measurement_threshold:type_name -> xnap.v1.MeasurementThresholdA2
	437,  // 525: xnap.v1.M1ThresholdEventA2.i_e_extensions:type_name -> xnap.v1.M1ThresholdEventA2ExtIes
	1074, // 526: xnap.v1.M4ConfigurationExtIes.value:type_name -> google.protobuf.Empty
	45,   // 527: xnap.v1.M4Configuration.m4period:type_name -> xnap.v1.M4period
	39,   // 528: xnap.v1.M4Configuration.m4_links_to_log:type_name -> xnap.v1.Linkstolog
	439,  // 529: xnap.v1.M4Configuration.i_e_extensions:type_name -> xnap.v1.M4ConfigurationExtIes
	1074, // 530: xnap.v1.M5ConfigurationExtIes.value:type_name -> google.protobuf.Empty
	46,   // 531: xnap.v1.M5Configuration.m5period:type_name -> xnap.v1.M5period
	39,   // 532: xnap.v1.M5Configuration.m5_links_to_log:type_name -> xnap.v1.Linkstolog
	441,  // 533: xnap.v1.M5Configuration.i_e_extensions:type_name -> xnap.v1.M5ConfigurationExtIes
	1074, // 534: xnap.v1.M6ConfigurationExtIes.value:type_name -> google.protobuf.Empty
	47,   // 535: xnap.v1.M6Configuration.m6report_interval:type_name -> xnap.v1.M6reportInterval
	39,   // 536: xnap.v1.M6Configuration.m6_links_to_log:type_name -> xnap.v1.Linkstolog
	443,  // 537: xnap.v1.M6Configuration.i_e_extensions:type_name -> xnap.v1.M6ConfigurationExtIes
	1074, // 538: xnap.v1.M7ConfigurationExtIes.value:type_name -> google.protobuf.Empty
	447,  // 539: xnap.v1.M7Configuration.m7period:type_name -> xnap.v1.M7period
	39,   // 540: xnap.v1.M7Configuration.m7_links_to_log:type_name -> xnap.v1.Linkstolog
	445,  // 541: xnap.v1.M7Configuration.i_e_extensions:type_name -> xnap.v1.M7ConfigurationExtIes
	1075, // 542: xnap.v1.MacI.value:type_name -> asn1.v1.BitString
	1075, // 543: xnap.v1.MaskedImeisv.value:type_name -> asn1.v1.BitString
	1074, // 544: xnap.v1.MaximumIpdatarateExtIes.value:type_name -> google.protobuf.Empty
	48,   // 545: xnap.v1.MaximumIpdatarate.max_iprate_ul:type_name -> xnap.v1.MaxIprate
	452,  // 546: xnap.v1.MaximumIpdatarate.i_e_extensions:type_name -> xnap.v1.MaximumIpdatarateExtIes
	1074, // 547: xnap.v1.MbsfnsubframeAllocationEUTraExtIes.value:type_name -> google.protobuf.Empty
	1075, // 548: xnap.v1.MbsfnsubframeAllocationEUTra.oneframe:type_name -> asn1.v1.BitString
	1075, // 549: xnap.v1.MbsfnsubframeAllocationEUTra.fourframes:type_name -> asn1.v1.BitString
	455,  // 550: xnap.v1.MbsfnsubframeAllocationEUTra.choice_extension:type_name -> xnap.v1.MbsfnsubframeAllocationEUTraExtIes
	459,  // 551: xnap.v1.MbsfnsubframeInfoEUTra.value:type_name -> xnap.v1.MbsfnsubframeInfoEUTraItem
	1074, // 552: xnap.v1.MbsfnsubframeInfoEUTraItemExtIes.value:type_name -> google.protobuf.Empty
	49,   // 553: xnap.v1.MbsfnsubframeInfoEUTraItem.radioframe_allocation_period:type_name -> xnap.v1.RadioframeAllocationPeriodMbsfnsubframeInfoEutraitem
	456,  // 554: xnap.v1.MbsfnsubframeInfoEUTraItem.subframe_allocation:type_name -> xnap.v1.MbsfnsubframeAllocationEUTra
	458,  // 555: xnap.v1.MbsfnsubframeInfoEUTraItem.i_e_extensions:type_name -> xnap.v1.MbsfnsubframeInfoEUTraItemExtIes
	1074, // 556: xnap.v1.MdtConfigurationExtIes.value:type_name -> google.protobuf.Empty
	463,  // 557: xnap.v1.MdtConfiguration.m_dt_configuration_nr:type_name -> xnap.v1.MdtConfigurationNR
	465,  // 558: xnap.v1.MdtConfiguration.m_dt_configuration_eutra:type_name -> xnap.v1.MdtConfigurationEUtra
	460,  // 559: xnap.v1.MdtConfiguration.i_e_extensions:type_name -> xnap.v1.MdtConfigurationExtIes
	1074, // 560: xnap.v1.MdtConfigurationNRExtIes.value:type_name -> google.protobuf.Empty
	50,   // 561: xnap.v1.MdtConfigurationNR.mdt_activation:type_name -> xnap.v1.MdtActivation
	167,  // 562: xnap.v1.MdtConfigurationNR.area_scope_of_mdt_nr:type_name -> xnap.v1.AreaScopeOfMdtNR
	468,  // 563: xnap.v1.MdtConfigurationNR.m_dtmode_nr:type_name -> xnap.v1.MdtmodeNR
	467,  // 564: xnap.v1.MdtConfigurationNR.signalling_based_mdtplmnlist:type_name -> xnap.v1.Mdtplmnlist
	462,  // 565: xnap.v1.MdtConfigurationNR.i_e_extensions:type_name -> xnap.v1.MdtConfigurationNRExtIes
	1074, // 566: xnap.v1.MdtConfigurationEUtraExtIes.value:type_name -> google.protobuf.Empty
	50,   // 567: xnap.v1.MdtConfigurationEUtra.mdt_activation:type_name -> xnap.v1.MdtActivation
	168,  // 568: xnap.v1.MdtConfigurationEUtra.area_scope_of_mdt_eutra:type_name -> xnap.v1.AreaScopeOfMdtEUtra
	471,  // 569: xnap.v1.MdtConfigurationEUtra.m_dtmode_eutra:type_name -> xnap.v1.MdtmodeEUtra
	467,  // 570: xnap.v1.MdtConfigurationEUtra.signalling_based_mdtplmnlist:type_name -> xnap.v1.Mdtplmnlist
	464,  // 571: xnap.v1.MdtConfigurationEUtra.i_e_extensions:type_name -> xnap.v1.MdtConfigurationEUtraExtIes
	1075, // 572: xnap.v1.MdtLocationInfo.value:type_name -> asn1.v1.BitString
	761,  // 573: xnap.v1.Mdtplmnlist.value:type_name -> xnap.v1.PlmnIdentity
	396,  // 574: xnap.v1.MdtmodeNR.immediate_mdt:type_name -> xnap.v1.ImmediateMdtNR
	428,  // 575: xnap.v1.MdtmodeNR.logged_mdt:type_name -> xnap.v1.LoggedMdtNR
	469,  // 576: xnap.v1.MdtmodeNR.m_dtmode_nr_extension:type_name -> xnap.v1.MdtmodeNRExtension
	470,  // 577: xnap.v1.MdtmodeNRExtension.value:type_name -> xnap.v1.MdtmodeNRExtensionIe
	1074, // 578: xnap.v1.MdtmodeNRExtensionIe.value:type_name -> google.protobuf.Empty
	394,  // 579: xnap.v1.MdtmodeEUtra.immediate_mdt:type_name -> xnap.v1.ImmediateMdtEUtra
	424,  // 580: xnap.v1.MdtmodeEUtra.logged_mdt:type_name -> xnap.v1.LoggedMdtEUtra
	472,  // 581: xnap.v1.MdtmodeEUtra.m_dtmode_eutra_extension:type_name -> xnap.v1.MdtmodeEUtraExtension
	473,  // 582: xnap.v1.MdtmodeEUtraExtension.value:type_name -> xnap.v1.MdtmodeEUtraExtensionIe
	1074, // 583: xnap.v1.MdtmodeEUtraExtensionIe.value:type_name -> google.protobuf.Empty
	1075, // 584: xnap.v1.MeasurementsToActivate.value:type_name -> asn1.v1.BitString
	1074, // 585: xnap.v1.MeasurementThresholdA2ExtIes.value:type_name -> google.protobuf.Empty
	999,  // 586: xnap.v1.MeasurementThresholdA2.threshold_rsrp:type_name -> xnap.v1.ThresholdRSrp
	998,  // 587: xnap.v1.MeasurementThresholdA2.threshold_rsrq:type_name -> xnap.v1.ThresholdRSrq
	1000, // 588: xnap.v1.MeasurementThresholdA2.threshold_sinr:type_name -> xnap.v1.ThresholdSInr
	475,  // 589: xnap.v1.MeasurementThresholdA2.choice_extension:type_name -> xnap.v1.MeasurementThresholdA2ExtIes
	1075, // 590: xnap.v1.MobilityInformation.value:type_name -> asn1.v1.BitString
	761,  // 591: xnap.v1.MobilityRestrictionListExtIesExtension.id_last_e_utranplmnidentity:type_name -> xnap.v1.PlmnIdentity
	52,   // 592: xnap.v1.MobilityRestrictionListExtIesExtension.id_cntype_restrictions_for_serving:type_name -> xnap.v1.CntypeRestrictionsForServing
	484,  // 593: xnap.v1.MobilityRestrictionListExtIesExtension.id_cntype_restrictions_for_equivalent:type_name -> xnap.v1.CntypeRestrictionsForEquivalent
	551,  // 594: xnap.v1.MobilityRestrictionListExtIesExtension.id_npnmobility_information:type_name -> xnap.v1.NpnmobilityInformation
	1076, // 595: xnap.v1.MobilityRestrictionListExtIes.id:type_name -> xnap.v1.ProtocolIeID
	1077, // 596: xnap.v1.MobilityRestrictionListExtIes.criticality:type_name -> xnap.v1.Criticality
	481,  // 597: xnap.v1.MobilityRestrictionListExtIes.extension:type_name -> xnap.v1.MobilityRestrictionListExtIesExtension
	761,  // 598: xnap.v1.MobilityRestrictionList.serving_plmn:type_name -> xnap.v1.PlmnIdentity
	761,  // 599: xnap.v1.MobilityRestrictionList.equivalent_plmns:type_name -> xnap.v1.PlmnIdentity
	487,  // 600: xnap.v1.MobilityRestrictionList.rat_restrictions:type_name -> xnap.v1.RatRestrictionsList
	491,  // 601: xnap.v1.MobilityRestrictionList.forbidden_area_information:type_name -> xnap.v1.ForbiddenAreaList
	494,  // 602: xnap.v1.MobilityRestrictionList.service_area_information:type_name -> xnap.v1.ServiceAreaList
	482,  // 603: xnap.v1.MobilityRestrictionList.i_e_extensions:type_name -> xnap.v1.MobilityRestrictionListExtIes
	486,  // 604: xnap.v1.CntypeRestrictionsForEquivalent.value:type_name -> xnap.v1.CntypeRestrictionsForEquivalentItem
	1074, // 605: xnap.v1.CntypeRestrictionsForEquivalentItemExtIes.value:type_name -> google.protobuf.Empty
	761,  // 606: xnap.v1.CntypeRestrictionsForEquivalentItem.plmn_identity:type_name -> xnap.v1.PlmnIdentity
	51,   // 607: xnap.v1.CntypeRestrictionsForEquivalentItem.cn_type:type_name -> xnap.v1.CnTypeCntypeRestrictionsForEquivalentItem
	485,  // 608: xnap.v1.CntypeRestrictionsForEquivalentItem.i_e_extensions:type_name -> xnap.v1.CntypeRestrictionsForEquivalentItemExtIes
	489,  // 609: xnap.v1.RatRestrictionsList.value:type_name -> xnap.v1.RatRestrictionsItem
	1074, // 610: xnap.v1.RatRestrictionsItemExtIes.value:type_name -> google.protobuf.Empty
	761,  // 611: xnap.v1.RatRestrictionsItem.plmn_identity:type_name -> xnap.v1.PlmnIdentity
	490,  // 612: xnap.v1.RatRestrictionsItem.rat_restriction_information:type_name -> xnap.v1.RatRestrictionInformation
	488,  // 613: xnap.v1.RatRestrictionsItem.i_e_extensions:type_name -> xnap.v1.RatRestrictionsItemExtIes
	1075, // 614: xnap.v1.RatRestrictionInformation.value:type_name -> asn1.v1.BitString
	493,  // 615: xnap.v1.ForbiddenAreaList.value:type_name -> xnap.v1.ForbiddenAreaItem
	1074, // 616: xnap.v1.ForbiddenAreaItemExtIes.value:type_name -> google.protobuf.Empty
	761,  // 617: xnap.v1.ForbiddenAreaItem.plmn_identity:type_name -> xnap.v1.PlmnIdentity
	986,  // 618: xnap.v1.ForbiddenAreaItem.forbidden_tacs:type_name -> xnap.v1.Tac
	492,  // 619: xnap.v1.ForbiddenAreaItem.i_e_extensions:type_name -> xnap.v1.ForbiddenAreaItemExtIes
	496,  // 620: xnap.v1.ServiceAreaList.value:type_name -> xnap.v1.ServiceAreaItem
	1074, // 621: xnap.v1.ServiceAreaItemExtIes.value:type_name -> google.protobuf.Empty
	761,  // 622: xnap.v1.ServiceAreaItem.plmn_identity:type_name -> xnap.v1.PlmnIdentity
	986,  // 623: xnap.v1.ServiceAreaItem.allowed_tacs_service_area:type_name -> xnap.v1.Tac
	986,  // 624: xnap.v1.ServiceAreaItem.not_allowed_tacs_service_area:type_name -> xnap.v1.Tac
	495,  // 625: xnap.v1.ServiceAreaItem.i_e_extensions:type_name -> xnap.v1.ServiceAreaItemExtIes
	1074, // 626: xnap.v1.MrDCResourceCoordinationInfoExtIes.value:type_name -> google.protobuf.Empty
	499,  // 627: xnap.v1.MrDCResourceCoordinationInfo.ng_ran_node_resource_coordination_info:type_name -> xnap.v1.NgRAnNodeResourceCoordinationInfo
	497,  // 628: xnap.v1.MrDCResourceCoordinationInfo.i_e_extension:type_name -> xnap.v1.MrDCResourceCoordinationInfoExtIes
	501,  // 629: xnap.v1.NgRAnNodeResourceCoordinationInfo.eutra_resource_coordination_info:type_name -> xnap.v1.EUTraResourceCoordinationInfo
	503,  // 630: xnap.v1.NgRAnNodeResourceCoordinationInfo.nr_resource_coordination_info:type_name -> xnap.v1.NrResourceCoordinationInfo
	1074, // 631: xnap.v1.EUTraResourceCoordinationInfoExtIes.value:type_name -> google.protobuf.Empty
	333,  // 632: xnap.v1.EUTraResourceCoordinationInfo.e_utra_cell:type_name -> xnap.v1.EUTraCGi
	1075, // 633: xnap.v1.EUTraResourceCoordinationInfo.ul_coordination_info:type_name -> asn1.v1.BitString
	1075, // 634: xnap.v1.EUTraResourceCoordinationInfo.dl_coordination_info:type_name -> asn1.v1.BitString
	578,  // 635: xnap.v1.EUTraResourceCoordinationInfo.nr_cell:type_name -> xnap.v1.NrCGi
	53,   // 636: xnap.v1.EUTraResourceCoordinationInfo.e_utra_coordination_assistance_info:type_name -> xnap.v1.EUTraCoordinationAssistanceInfo
	500,  // 637: xnap.v1.EUTraResourceCoordinationInfo.i_e_extension:type_name -> xnap.v1.EUTraResourceCoordinationInfoExtIes
	1074, // 638: xnap.v1.NrResourceCoordinationInfoExtIes.value:type_name -> google.protobuf.Empty
	578,  // 639: xnap.v1.NrResourceCoordinationInfo.nr_cell:type_name -> xnap.v1.NrCGi
	1075, // 640: xnap.v1.NrResourceCoordinationInfo.ul_coordination_info:type_name -> asn1.v1.BitString
	1075, // 641: xnap.v1.NrResourceCoordinationInfo.dl_coordination_info:type_name -> asn1.v1.BitString
	333,  // 642: xnap.v1.NrResourceCoordinationInfo.e_utra_cell:type_name -> xnap.v1.EUTraCGi
	54,   // 643: xnap.v1.NrResourceCoordinationInfo.nr_coordination_assistance_info:type_name -> xnap.v1.NrCoordinationAssistanceInfo
	502,  // 644: xnap.v1.NrResourceCoordinationInfo.i_e_extension:type_name -> xnap.v1.NrResourceCoordinationInfoExtIes
	1074, // 645: xnap.v1.MessageOversizeNotificationExtIes.value:type_name -> google.protobuf.Empty
	506,  // 646: xnap.v1.MessageOversizeNotification.maximum_cell_list_size:type_name -> xnap.v1.MaximumCellListSize
	504,  // 647: xnap.v1.MessageOversizeNotification.i_e_extension:type_name -> xnap.v1.MessageOversizeNotificationExtIes
	1074, // 648: xnap.v1.NeDCTDmPatternExtIes.value:type_name -> google.protobuf.Empty
	56,   // 649: xnap.v1.NeDCTDmPattern.subframe_assignment:type_name -> xnap.v1.SubframeAssignmentNedctdmpattern
	507,  // 650: xnap.v1.NeDCTDmPattern.i_e_extension:type_name -> xnap.v1.NeDCTDmPatternExtIes
	511,  // 651: xnap.v1.NeighbourInformationEUTra.value:type_name -> xnap.v1.NeighbourInformationEUTraItem
	1074, // 652: xnap.v1.NeighbourInformationEUTraItemExtIes.value:type_name -> google.protobuf.Empty
	336,  // 653: xnap.v1.NeighbourInformationEUTraItem.e_utra_pci:type_name -> xnap.v1.EUTrapci
	333,  // 654: xnap.v1.NeighbourInformationEUTraItem.e_utra_cgi:type_name -> xnap.v1.EUTraCGi
	330,  // 655: xnap.v1.NeighbourInformationEUTraItem.earfcn:type_name -> xnap.v1.EUTraarfcn
	986,  // 656: xnap.v1.NeighbourInformationEUTraItem.tac:type_name -> xnap.v1.Tac
	808,  // 657: xnap.v1.NeighbourInformationEUTraItem.ranac:type_name -> xnap.v1.Ranac
	510,  // 658: xnap.v1.NeighbourInformationEUTraItem.i_e_extensions:type_name -> xnap.v1.NeighbourInformationEUTraItemExtIes
	514,  // 659: xnap.v1.NeighbourInformationNR.value:type_name -> xnap.v1.NeighbourInformationNRItem
	1074, // 660: xnap.v1.NeighbourInformationNRItemExtIes.value:type_name -> google.protobuf.Empty
	594,  // 661: xnap.v1.NeighbourInformationNRItem.nr_pci:type_name -> xnap.v1.Nrpci
	578,  // 662: xnap.v1.NeighbourInformationNRItem.nr_cgi:type_name -> xnap.v1.NrCGi
	986,  // 663: xnap.v1.NeighbourInformationNRItem.tac:type_name -> xnap.v1.Tac
	808,  // 664: xnap.v1.NeighbourInformationNRItem.ranac:type_name -> xnap.v1.Ranac
	516,  // 665: xnap.v1.NeighbourInformationNRItem.nr_mode_info:type_name -> xnap.v1.NeighbourInformationNRModeInfo
	250,  // 666: xnap.v1.NeighbourInformationNRItem.connectivity_support:type_name -> xnap.v1.ConnectivitySupport
	513,  // 667: xnap.v1.NeighbourInformationNRItem.i_e_extensions:type_name -> xnap.v1.NeighbourInformationNRItemExtIes
	1074, // 668: xnap.v1.NeighbourInformationNRModeInfoExtIes.value:type_name -> google.protobuf.Empty
	518,  // 669: xnap.v1.NeighbourInformationNRModeInfo.fdd_info:type_name -> xnap.v1.NeighbourInformationNRModeFddinfo
	520,  // 670: xnap.v1.NeighbourInformationNRModeInfo.tdd_info:type_name -> xnap.v1.NeighbourInformationNRModeTddinfo
	515,  // 671: xnap.v1.NeighbourInformationNRModeInfo.choice_extension:type_name -> xnap.v1.NeighbourInformationNRModeInfoExtIes
	1074, // 672: xnap.v1.NeighbourInformationNRModeFddinfoExtIes.value:type_name -> google.protobuf.Empty
	584,  // 673: xnap.v1.NeighbourInformationNRModeFddinfo.ul_nr_freq_info:type_name -> xnap.v1.NrfrequencyInfo
	584,  // 674: xnap.v1.NeighbourInformationNRModeFddinfo.dl_nr_fequ_info:type_name -> xnap.v1.NrfrequencyInfo
	517,  // 675: xnap.v1.NeighbourInformationNRModeFddinfo.ie_extensions:type_name -> xnap.v1.NeighbourInformationNRModeFddinfoExtIes
	1074, // 676: xnap.v1.NeighbourInformationNRModeTddinfoExtIes.value:type_name -> google.protobuf.Empty
	584,  // 677: xnap.v1.NeighbourInformationNRModeTddinfo.nr_freq_info:type_name -> xnap.v1.NrfrequencyInfo
	519,  // 678: xnap.v1.NeighbourInformationNRModeTddinfo.ie_extensions:type_name -> xnap.v1.NeighbourInformationNRModeTddinfoExtIes
	1075, // 679: xnap.v1.Nid.value:type_name -> asn1.v1.BitString
	524,  // 680: xnap.v1.NrcarrierList.value:type_name -> xnap.v1.NrcarrierItem
	1074, // 681: xnap.v1.NrcarrierItemExtIes.value:type_name -> google.protobuf.Empty
	62,   // 682: xnap.v1.NrcarrierItem.carrier_scs:type_name -> xnap.v1.Nrscs
	523,  // 683: xnap.v1.NrcarrierItem.i_e_extension:type_name -> xnap.v1.NrcarrierItemExtIes
	1074, // 684: xnap.v1.NgRAnCellIdentityExtIes.value:type_name -> google.protobuf.Empty
	575,  // 685: xnap.v1.NgRAnCellIdentity.nr:type_name -> xnap.v1.NrCellIdentity
	331,  // 686: xnap.v1.NgRAnCellIdentity.e_utra:type_name -> xnap.v1.EUTraCellIdentity
	526,  // 687: xnap.v1.NgRAnCellIdentity.choice_extension:type_name -> xnap.v1.NgRAnCellIdentityExtIes
	1074, // 688: xnap.v1.NgRAnCellPciExtIes.value:type_name -> google.protobuf.Empty
	594,  // 689: xnap.v1.NgRAnCellPci.nr:type_name -> xnap.v1.Nrpci
	336,  // 690: xnap.v1.NgRAnCellPci.e_utra:type_name -> xnap.v1.EUTrapci
	528,  // 691: xnap.v1.NgRAnCellPci.choice_extension:type_name -> xnap.v1.NgRAnCellPciExtIes
	359,  // 692: xnap.v1.NonDynamic5QidescriptorExtIesExtension.id_cnpacket_delay_budget_downlink:type_name -> xnap.v1.ExtendedPacketDelayBudget
	359,  // 693: xnap.v1.NonDynamic5QidescriptorExtIesExtension.id_cnpacket_delay_budget_uplink:type_name -> xnap.v1.ExtendedPacketDelayBudget
	1076, // 694: xnap.v1.NonDynamic5QidescriptorExtIes.id:type_name -> xnap.v1.ProtocolIeID
	1077, // 695: xnap.v1.NonDynamic5QidescriptorExtIes.criticality:type_name -> xnap.v1.Criticality
	533,  // 696: xnap.v1.NonDynamic5QidescriptorExtIes.extension:type_name -> xnap.v1.NonDynamic5QidescriptorExtIesExtension
	369,  // 697: xnap.v1.NonDynamic5Qidescriptor.five_qi:type_name -> xnap.v1.FiveQi
	764,  // 698: xnap.v1.NonDynamic5Qidescriptor.priority_level_qo_s:type_name -> xnap.v1.PriorityLevelQoS
	178,  // 699: xnap.v1.NonDynamic5Qidescriptor.averaging_window:type_name -> xnap.v1.AveragingWindow
	451,  // 700: xnap.v1.NonDynamic5Qidescriptor.maximum_data_burst_volume:type_name -> xnap.v1.MaximumDataBurstVolume
	534,  // 701: xnap.v1.NonDynamic5Qidescriptor.i_e_extension:type_name -> xnap.v1.NonDynamic5QidescriptorExtIes
	540,  // 702: xnap.v1.NgeNbRadioResourceStatusExtIesExtension.id_dl_scheduling_pdcch_cce_usage:type_name -> xnap.v1.DlschedulingPDcchCCeusage
	541,  // 703: xnap.v1.NgeNbRadioResourceStatusExtIesExtension.id_ul_scheduling_pdcch_cce_usage:type_name -> xnap.v1.UlschedulingPDcchCCeusage
	1076, // 704: xnap.v1.NgeNbRadioResourceStatusExtIes.id:type_name -> xnap.v1.ProtocolIeID
	1077, // 705: xnap.v1.NgeNbRadioResourceStatusExtIes.criticality:type_name -> xnap.v1.Criticality
	537,  // 706: xnap.v1.NgeNbRadioResourceStatusExtIes.extension:type_name -> xnap.v1.NgeNbRadioResourceStatusExtIesExtension
	299,  // 707: xnap.v1.NgeNbRadioResourceStatus.d_l_gbr_prb_usage:type_name -> xnap.v1.DlGBrPRbusage
	1057, // 708: xnap.v1.NgeNbRadioResourceStatus.u_l_gbr_prb_usage:type_name -> xnap.v1.UlGBrPRbusage
	300,  // 709: xnap.v1.NgeNbRadioResourceStatus.d_l_non_gbr_prb_usage:type_name -> xnap.v1.DlnonGBrPRbusage
	1058, // 710: xnap.v1.NgeNbRadioResourceStatus.u_l_non_gbr_prb_usage:type_name -> xnap.v1.UlnonGBrPRbusage
	301,  // 711: xnap.v1.NgeNbRadioResourceStatus.d_l_total_prb_usage:type_name -> xnap.v1.DlTotalPRbusage
	1059, // 712: xnap.v1.NgeNbRadioResourceStatus.u_l_total_prb_usage:type_name -> xnap.v1.UlTotalPRbusage
	538,  // 713: xnap.v1.NgeNbRadioResourceStatus.i_e_extensions:type_name -> xnap.v1.NgeNbRadioResourceStatusExtIes
	1074, // 714: xnap.v1.TnlcapacityIndicatorExtIes.value:type_name -> google.protobuf.Empty
	602,  // 715: xnap.v1.TnlcapacityIndicator.d_ltnloffered_capacity:type_name -> xnap.v1.OfferedCapacity
	176,  // 716: xnap.v1.TnlcapacityIndicator.d_ltnlavailable_capacity:type_name -> xnap.v1.AvailableCapacity
	602,  // 717: xnap.v1.TnlcapacityIndicator.u_ltnloffered_capacity:type_name -> xnap.v1.OfferedCapacity
	176,  // 718: xnap.v1.TnlcapacityIndicator.u_ltnlavailable_capacity:type_name -> xnap.v1.AvailableCapacity
	542,  // 719: xnap.v1.TnlcapacityIndicator.i_e_extensions:type_name -> xnap.v1.TnlcapacityIndicatorExtIes
	1074, // 720: xnap.v1.NpnBroadcastInformationExtIes.value:type_name -> google.protobuf.Empty
	547,  // 721: xnap.v1.NpnBroadcastInformation.snpn_information:type_name -> xnap.v1.NpnBroadcastInformationSNpn
	549,  // 722: xnap.v1.NpnBroadcastInformation.pni_npn_information:type_name -> xnap.v1.NpnBroadcastInformationPNiNPn
	544,  // 723: xnap.v1.NpnBroadcastInformation.choice_extension:type_name -> xnap.v1.NpnBroadcastInformationExtIes
	1074, // 724: xnap.v1.NpnBroadcastInformationSNpnExtIes.value:type_name -> google.protobuf.Empty
	205,  // 725: xnap.v1.NpnBroadcastInformationSNpn.broadcast_snpnid_list:type_name -> xnap.v1.BroadcastSnpnidList
	546,  // 726: xnap.v1.NpnBroadcastInformationSNpn.i_e_extension:type_name -> xnap.v1.NpnBroadcastInformationSNpnExtIes
	1074, // 727: xnap.v1.NpnBroadcastInformationPNiNPnExtIes.value:type_name -> google.protobuf.Empty
	202,  // 728: xnap.v1.NpnBroadcastInformationPNiNPn.broadcast_pni_npn_id_information:type_name -> xnap.v1.BroadcastPniNPnIDInformation
	548,  // 729: xnap.v1.NpnBroadcastInformationPNiNPn.i_e_extension:type_name -> xnap.v1.NpnBroadcastInformationPNiNPnExtIes
	1074, // 730: xnap.v1.NpnmobilityInformationExtIes.value:type_name -> google.protobuf.Empty
	553,  // 731: xnap.v1.NpnmobilityInformation.snpn_mobility_information:type_name -> xnap.v1.NpnmobilityInformationSNpn
	555,  // 732: xnap.v1.NpnmobilityInformation.pni_npn_mobility_information:type_name -> xnap.v1.NpnmobilityInformationPNiNPn
	550,  // 733: xnap.v1.NpnmobilityInformation.choice_extension:type_name -> xnap.v1.NpnmobilityInformationExtIes
	1074, // 734: xnap.v1.NpnmobilityInformationSNpnExtIes.value:type_name -> google.protobuf.Empty
	521,  // 735: xnap.v1.NpnmobilityInformationSNpn.serving_nid:type_name -> xnap.v1.Nid
	552,  // 736: xnap.v1.NpnmobilityInformationSNpn.i_e_extension:type_name -> xnap.v1.NpnmobilityInformationSNpnExtIes
	1074, // 737: xnap.v1.NpnmobilityInformationPNiNPnExtIes.value:type_name -> google.protobuf.Empty
	154,  // 738: xnap.v1.NpnmobilityInformationPNiNPn.allowed_pni_npn_id_list:type_name -> xnap.v1.AllowedPniNPnIDList
	554,  // 739: xnap.v1.NpnmobilityInformationPNiNPn.i_e_extension:type_name -> xnap.v1.NpnmobilityInformationPNiNPnExtIes
	1074, // 740: xnap.v1.NpnpagingAssistanceInformationExtIes.value:type_name -> google.protobuf.Empty
	559,  // 741: xnap.v1.NpnpagingAssistanceInformation.pni_npn_information:type_name -> xnap.v1.NpnpagingAssistanceInformationPNiNPn
	556,  // 742: xnap.v1.NpnpagingAssistanceInformation.choice_extension:type_name -> xnap.v1.NpnpagingAssistanceInformationExtIes
	1074, // 743: xnap.v1.NpnpagingAssistanceInformationPNiNPnExtIes.value:type_name -> google.protobuf.Empty
	154,  // 744: xnap.v1.NpnpagingAssistanceInformationPNiNPn.allowed_pni_npn_id_list:type_name -> xnap.v1.AllowedPniNPnIDList
	558,  // 745: xnap.v1.NpnpagingAssistanceInformationPNiNPn.i_e_extension:type_name -> xnap.v1.NpnpagingAssistanceInformationPNiNPnExtIes
	1074, // 746: xnap.v1.NpnSupportExtIes.value:type_name -> google.protobuf.Empty
	563,  // 747: xnap.v1.NpnSupport.s_npn:type_name -> xnap.v1.NpnSupportSNpn
	560,  // 748: xnap.v1.NpnSupport.choice_extensions:type_name -> xnap.v1.NpnSupportExtIes
	1074, // 749: xnap.v1.NpnSupportSNpnExtIes.value:type_name -> google.protobuf.Empty
	521,  // 750: xnap.v1.NpnSupportSNpn.nid:type_name -> xnap.v1.Nid
	562,  // 751: xnap.v1.NpnSupportSNpn.ie_extension:type_name -> xnap.v1.NpnSupportSNpnExtIes
	1074, // 752: xnap.v1.FddorTDdinNPrachconfigurationChoiceExtIes.value:type_name -> google.protobuf.Empty
	569,  // 753: xnap.v1.FddortddNprachconfiguration.fdd:type_name -> xnap.v1.NprachconfigurationFDd
	571,  // 754: xnap.v1.FddortddNprachconfiguration.tdd:type_name -> xnap.v1.NprachconfigurationTDd
	564,  // 755: xnap.v1.FddortddNprachconfiguration.choice_extension:type_name -> xnap.v1.FddorTDdinNPrachconfigurationChoiceExtIes
	1074, // 756: xnap.v1.NprachconfigurationExtIes.value:type_name -> google.protobuf.Empty
	565,  // 757: xnap.v1.Nprachconfiguration.fdd_or_tdd:type_name -> xnap.v1.FddortddNprachconfiguration
	566,  // 758: xnap.v1.Nprachconfiguration.i_e_extensions:type_name -> xnap.v1.NprachconfigurationExtIes
	1074, // 759: xnap.v1.NprachconfigurationFDdExtIes.value:type_name -> google.protobuf.Empty
	57,   // 760: xnap.v1.NprachconfigurationFDd.nprach_cp_length:type_name -> xnap.v1.NprachCPLength
	568,  // 761: xnap.v1.NprachconfigurationFDd.i_e_extensions:type_name -> xnap.v1.NprachconfigurationFDdExtIes
	1074, // 762: xnap.v1.NprachconfigurationTDdExtIes.value:type_name -> google.protobuf.Empty
	58,   // 763: xnap.v1.NprachconfigurationTDd.nprach_preamble_format:type_name -> xnap.v1.NprachpreambleFormat
	574,  // 764: xnap.v1.NprachconfigurationTDd.non_anchor_carrier_fequency_configlist:type_name -> xnap.v1.NonAnchorCarrierFrequencylist
	570,  // 765: xnap.v1.NprachconfigurationTDd.i_e_extensions:type_name -> xnap.v1.NprachconfigurationTDdExtIes
	1074, // 766: xnap.v1.NonAnchorCarrierFrequencylistExtIes.value:type_name -> google.protobuf.Empty
	572,  // 767: xnap.v1.NestedNonAnchorCarrierFrequencylist.i_e_extensions:type_name -> xnap.v1.NonAnchorCarrierFrequencylistExtIes
	573,  // 768: xnap.v1.NonAnchorCarrierFrequencylist.value:type_name -> xnap.v1.NestedNonAnchorCarrierFrequencylist
	1075, // 769: xnap.v1.NrCellIdentity.value:type_name -> asn1.v1.BitString
	527,  // 770: xnap.v1.NgRAnCellIdentityListinRanpagingArea.value:type_name -> xnap.v1.NgRAnCellIdentity
	1074, // 771: xnap.v1.NrCGiExtIes.value:type_name -> google.protobuf.Empty
	761,  // 772: xnap.v1.NrCGi.plmn_id:type_name -> xnap.v1.PlmnIdentity
	575,  // 773: xnap.v1.NrCGi.nr_ci:type_name -> xnap.v1.NrCellIdentity
	577,  // 774: xnap.v1.NrCGi.i_e_extension:type_name -> xnap.v1.NrCGiExtIes
	582,  // 775: xnap.v1.NrfrequencyBandList.value:type_name -> xnap.v1.NrfrequencyBandItem
	1074, // 776: xnap.v1.NrfrequencyBandItemExtIes.value:type_name -> google.protobuf.Empty
	579,  // 777: xnap.v1.NrfrequencyBandItem.nr_frequency_band:type_name -> xnap.v1.NrfrequencyBand
	968,  // 778: xnap.v1.NrfrequencyBandItem.supported_sul_band_list:type_name -> xnap.v1.SupportedSulbandList
	581,  // 779: xnap.v1.NrfrequencyBandItem.i_e_extension:type_name -> xnap.v1.NrfrequencyBandItemExtIes
	1074, // 780: xnap.v1.NrfrequencyInfoExtIes.value:type_name -> google.protobuf.Empty
	536,  // 781: xnap.v1.NrfrequencyInfo.nr_arfcn:type_name -> xnap.v1.Nrarfcn
	967,  // 782: xnap.v1.NrfrequencyInfo.sul_information:type_name -> xnap.v1.SulInformation
	580,  // 783: xnap.v1.NrfrequencyInfo.frequency_band_list:type_name -> xnap.v1.NrfrequencyBandList
	583,  // 784: xnap.v1.NrfrequencyInfo.i_e_extension:type_name -> xnap.v1.NrfrequencyInfoExtIes
	1074, // 785: xnap.v1.NrmodeInfoExtIes.value:type_name -> google.protobuf.Empty
	590,  // 786: xnap.v1.NrmodeInfo.fdd:type_name -> xnap.v1.NrmodeInfoFdd
	593,  // 787: xnap.v1.NrmodeInfo.tdd:type_name -> xnap.v1.NrmodeInfoTdd
	586,  // 788: xnap.v1.NrmodeInfo.choice_extension:type_name -> xnap.v1.NrmodeInfoExtIes
	522,  // 789: xnap.v1.NrmodeInfoFddExtIesExtension.id_ulcarrier_list:type_name -> xnap.v1.NrcarrierList
	522,  // 790: xnap.v1.NrmodeInfoFddExtIesExtension.id_dlcarrier_list:type_name -> xnap.v1.NrcarrierList
	1076, // 791: xnap.v1.NrmodeInfoFddExtIes.id:type_name -> xnap.v1.ProtocolIeID
	1077, // 792: xnap.v1.NrmodeInfoFddExtIes.criticality:type_name -> xnap.v1.Criticality
	588,  // 793: xnap.v1.NrmodeInfoFddExtIes.extension:type_name -> xnap.v1.NrmodeInfoFddExtIesExtension
	584,  // 794: xnap.v1.NrmodeInfoFdd.ul_nrfrequency_info:type_name -> xnap.v1.NrfrequencyInfo
	584,  // 795: xnap.v1.NrmodeInfoFdd.dl_nrfrequency_info:type_name -> xnap.v1.NrfrequencyInfo
	596,  // 796: xnap.v1.NrmodeInfoFdd.ul_nrtransmisson_bandwidth:type_name -> xnap.v1.NrtransmissionBandwidth
	596,  // 797: xnap.v1.NrmodeInfoFdd.dl_nrtransmisson_bandwidth:type_name -> xnap.v1.NrtransmissionBandwidth
	589,  // 798: xnap.v1.NrmodeInfoFdd.i_e_extension:type_name -> xnap.v1.NrmodeInfoFddExtIes
	400,  // 799: xnap.v1.NrmodeInfoTddExtIesExtension.id_intended_tdd_dl_ulconfiguration_nr:type_name -> xnap.v1.IntendedTddDLULconfigurationNR
	994,  // 800: xnap.v1.NrmodeInfoTddExtIesExtension.id_tdduldlconfiguration_common_nr:type_name -> xnap.v1.TdduldlconfigurationCommonNr
	522,  // 801: xnap.v1.NrmodeInfoTddExtIesExtension.id_carrier_list:type_name -> xnap.v1.NrcarrierList
	1076, // 802: xnap.v1.NrmodeInfoTddExtIes.id:type_name -> xnap.v1.ProtocolIeID
	1077, // 803: xnap.v1.NrmodeInfoTddExtIes.criticality:type_name -> xnap.v1.Criticality
	591,  // 804: xnap.v1.NrmodeInfoTddExtIes.extension:type_name -> xnap.v1.NrmodeInfoTddExtIesExtension
	584,  // 805: xnap.v1.NrmodeInfoTdd.nr_frequency_info:type_name -> xnap.v1.NrfrequencyInfo
	596,  // 806: xnap.v1.NrmodeInfoTdd.nr_transmisson_bandwidth:type_name -> xnap.v1.NrtransmissionBandwidth
	592,  // 807: xnap.v1.NrmodeInfoTdd.i_e_extension:type_name -> xnap.v1.NrmodeInfoTddExtIes
	1074, // 808: xnap.v1.NrtransmissionBandwidthExtIes.value:type_name -> google.protobuf.Empty
	62,   // 809: xnap.v1.NrtransmissionBandwidth.n_rscs:type_name -> xnap.v1.Nrscs
	61,   // 810: xnap.v1.NrtransmissionBandwidth.n_rnrb:type_name -> xnap.v1.Nrnrb
	595,  // 811: xnap.v1.NrtransmissionBandwidth.i_e_extensions:type_name -> xnap.v1.NrtransmissionBandwidthExtIes
	1074, // 812: xnap.v1.Nrv2XservicesAuthorizedExtIes.value:type_name -> google.protobuf.Empty
	139,  // 813: xnap.v1.Nrv2XservicesAuthorized.vehicle_ue:type_name -> xnap.v1.VehicleUe
	66,   // 814: xnap.v1.Nrv2XservicesAuthorized.pedestrian_ue:type_name -> xnap.v1.PedestrianUe
	598,  // 815: xnap.v1.Nrv2XservicesAuthorized.i_e_extensions:type_name -> xnap.v1.Nrv2XservicesAuthorizedExtIes
	1074, // 816: xnap.v1.NruesidelinkAggregateMaximumBitRateExtIes.value:type_name -> google.protobuf.Empty
	190,  // 817: xnap.v1.NruesidelinkAggregateMaximumBitRate.u_esidelink_aggregate_maximum_bit_rate:type_name -> xnap.v1.BitRate
	600,  // 818: xnap.v1.NruesidelinkAggregateMaximumBitRate.i_e_extensions:type_name -> xnap.v1.NruesidelinkAggregateMaximumBitRateExtIes
	1074, // 819: xnap.v1.PacketErrorRateExtIes.value:type_name -> google.protobuf.Empty
	606,  // 820: xnap.v1.PacketErrorRate.p_er_scalar:type_name -> xnap.v1.PerScalar
	607,  // 821: xnap.v1.PacketErrorRate.p_er_exponent:type_name -> xnap.v1.PerExponent
	604,  // 822: xnap.v1.PacketErrorRate.i_e_extensions:type_name -> xnap.v1.PacketErrorRateExtIes
	1074, // 823: xnap.v1.PagingeDrxinformationExtIes.value:type_name -> google.protobuf.Empty
	68,   // 824: xnap.v1.PagingeDrxinformation.paging_e_drx_cycle:type_name -> xnap.v1.PagingeDrxCycle
	69,   // 825: xnap.v1.PagingeDrxinformation.paging_time_window:type_name -> xnap.v1.PagingTimeWindow
	609,  // 826: xnap.v1.PagingeDrxinformation.i_e_extensions:type_name -> xnap.v1.PagingeDrxinformationExtIes
	1074, // 827: xnap.v1.Pc5QoSparametersExtIes.value:type_name -> google.protobuf.Empty
	613,  // 828: xnap.v1.Pc5QoSparameters.pc5_qo_sflow_list:type_name -> xnap.v1.Pc5QoSflowList
	190,  // 829: xnap.v1.Pc5QoSparameters.pc5_link_aggregate_bit_rates:type_name -> xnap.v1.BitRate
	611,  // 830: xnap.v1.Pc5QoSparameters.i_e_extensions:type_name -> xnap.v1.Pc5QoSparametersExtIes
	615,  // 831: xnap.v1.Pc5QoSflowList.value:type_name -> xnap.v1.Pc5QoSflowItem
	1074, // 832: xnap.v1.Pc5QoSflowItemExtIes.value:type_name -> google.protobuf.Empty
	369,  // 833: xnap.v1.Pc5QoSflowItem.p_qi:type_name -> xnap.v1.FiveQi
	617,  // 834: xnap.v1.Pc5QoSflowItem.pc5_flow_bit_rates:type_name -> xnap.v1.Pc5FlowBitRates
	88,   // 835: xnap.v1.Pc5QoSflowItem.range:type_name -> xnap.v1.Range
	614,  // 836: xnap.v1.Pc5QoSflowItem.i_e_extensions:type_name -> xnap.v1.Pc5QoSflowItemExtIes
	1074, // 837: xnap.v1.Pc5FlowBitRatesExtIes.value:type_name -> google.protobuf.Empty
	190,  // 838: xnap.v1.Pc5FlowBitRates.guaranteed_flow_bit_rate:type_name -> xnap.v1.BitRate
	190,  // 839: xnap.v1.Pc5FlowBitRates.maximum_flow_bit_rate:type_name -> xnap.v1.BitRate
	616,  // 840: xnap.v1.Pc5FlowBitRates.i_e_extensions:type_name -> xnap.v1.Pc5FlowBitRatesExtIes
	1074, // 841: xnap.v1.PdcpchangeIndicationExtIes.value:type_name -> google.protobuf.Empty
	72,   // 842: xnap.v1.PdcpchangeIndication.from_s_ng_ran_node:type_name -> xnap.v1.FromSngrannodePdcpchangeIndication
	73,   // 843: xnap.v1.PdcpchangeIndication.from_m_ng_ran_node:type_name -> xnap.v1.FromMngrannodePdcpchangeIndication
	618,  // 844: xnap.v1.PdcpchangeIndication.choice_extension:type_name -> xnap.v1.PdcpchangeIndicationExtIes
	1074, // 845: xnap.v1.PdcpsnlengthExtIes.value:type_name -> google.protobuf.Empty
	75,   // 846: xnap.v1.Pdcpsnlength.ul_pdcpsnlength:type_name -> xnap.v1.UlPdcpsnlengthPdcpsnlength
	76,   // 847: xnap.v1.Pdcpsnlength.dl_pdcpsnlength:type_name -> xnap.v1.DlPdcpsnlengthPdcpsnlength
	620,  // 848: xnap.v1.Pdcpsnlength.i_e_extension:type_name -> xnap.v1.PdcpsnlengthExtIes
	1074, // 849: xnap.v1.PdusessionAggregateMaximumBitRateExtIes.value:type_name -> google.protobuf.Empty
	190,  // 850: xnap.v1.PdusessionAggregateMaximumBitRate.downlink_session_ambr:type_name -> xnap.v1.BitRate
	190,  // 851: xnap.v1.PdusessionAggregateMaximumBitRate.uplink_session_ambr:type_name -> xnap.v1.BitRate
	622,  // 852: xnap.v1.PdusessionAggregateMaximumBitRate.i_e_extensions:type_name -> xnap.v1.PdusessionAggregateMaximumBitRateExtIes
	756,  // 853: xnap.v1.PdusessionList.value:type_name -> xnap.v1.PdusessionID
	627,  // 854: xnap.v1.PdusessionListwithCause.value:type_name -> xnap.v1.PdusessionListwithCauseItem
	1074, // 855: xnap.v1.PdusessionListwithCauseItemExtIes.value:type_name -> google.protobuf.Empty
	756,  // 856: xnap.v1.PdusessionListwithCauseItem.pdu_session_id:type_name -> xnap.v1.PdusessionID
	213,  // 857: xnap.v1.PdusessionListwithCauseItem.cause:type_name -> xnap.v1.Cause
	626,  // 858: xnap.v1.PdusessionListwithCauseItem.i_e_extension:type_name -> xnap.v1.PdusessionListwithCauseItemExtIes
	630,  // 859: xnap.v1.PdusessionListwithDataForwardingFromTarget.value:type_name -> xnap.v1.PdusessionListwithDataForwardingFromTargetItem
	1074, // 860: xnap.v1.PdusessionListwithDataForwardingFromTargetItemExtIes.value:type_name -> google.protobuf.Empty
	756,  // 861: xnap.v1.PdusessionListwithDataForwardingFromTargetItem.pdu_session_id:type_name -> xnap.v1.PdusessionID
	276,  // 862: xnap.v1.PdusessionListwithDataForwardingFromTargetItem.dataforwardinginfo_target:type_name -> xnap.v1.DataForwardingInfoFromTargetNgrannode
	629,  // 863: xnap.v1.PdusessionListwithDataForwardingFromTargetItem.i_e_extension:type_name -> xnap.v1.PdusessionListwithDataForwardingFromTargetItemExtIes
	633,  // 864: xnap.v1.PdusessionListwithDataForwardingRequest.value:type_name -> xnap.v1.PdusessionListwithDataForwardingRequestItem
	1074, // 865: xnap.v1.PdusessionListwithDataForwardingRequestItemExtIes.value:type_name -> google.protobuf.Empty
	756,  // 866: xnap.v1.PdusessionListwithDataForwardingRequestItem.pdu_session_id:type_name -> xnap.v1.PdusessionID
	281,  // 867: xnap.v1.PdusessionListwithDataForwardingRequestItem.dataforwarding_infofrom_source:type_name -> xnap.v1.DataforwardingandOffloadingInfofromSource
	323,  // 868: xnap.v1.PdusessionListwithDataForwardingRequestItem.d_rbto_be_released_list:type_name -> xnap.v1.DrbtoQoSflowMappingList
	632,  // 869: xnap.v1.PdusessionListwithDataForwardingRequestItem.i_e_extension:type_name -> xnap.v1.PdusessionListwithDataForwardingRequestItemExtIes
	636,  // 870: xnap.v1.PdusessionResourcesAdmittedList.value:type_name -> xnap.v1.PdusessionResourcesAdmittedItem
	1074, // 871: xnap.v1.PdusessionResourcesAdmittedItemExtIes.value:type_name -> google.protobuf.Empty
	756,  // 872: xnap.v1.PdusessionResourcesAdmittedItem.pdu_session_id:type_name -> xnap.v1.PdusessionID
	638,  // 873: xnap.v1.PdusessionResourcesAdmittedItem.pdu_session_resource_admitted_info:type_name -> xnap.v1.PdusessionResourceAdmittedInfo
	635,  // 874: xnap.v1.PdusessionResourcesAdmittedItem.i_e_extensions:type_name -> xnap.v1.PdusessionResourcesAdmittedItemExtIes
	1074, // 875: xnap.v1.PdusessionResourceAdmittedInfoExtIes.value:type_name -> google.protobuf.Empty
	77,   // 876: xnap.v1.PdusessionResourceAdmittedInfo.d_l_ng_u_tnl_information_unchanged:type_name -> xnap.v1.DlngutnlinformationUnchangedPdusessionResourceAdmittedInfo
	791,  // 877: xnap.v1.PdusessionResourceAdmittedInfo.qos_flows_admitted_list:type_name -> xnap.v1.QoSflowsAdmittedList
	784,  // 878: xnap.v1.PdusessionResourceAdmittedInfo.qos_flows_not_admitted_list:type_name -> xnap.v1.QoSflowsListwithCause
	276,  // 879: xnap.v1.PdusessionResourceAdmittedInfo.data_forwarding_info_from_target:type_name -> xnap.v1.DataForwardingInfoFromTargetNgrannode
	637,  // 880: xnap.v1.PdusessionResourceAdmittedInfo.i_e_extensions:type_name -> xnap.v1.PdusessionResourceAdmittedInfoExtIes
	641,  // 881: xnap.v1.PdusessionResourcesNotAdmittedList.value:type_name -> xnap.v1.PdusessionResourcesNotAdmittedItem
	1074, // 882: xnap.v1.PdusessionResourcesNotAdmittedItemItemExtIes.value:type_name -> google.protobuf.Empty
	756,  // 883: xnap.v1.PdusessionResourcesNotAdmittedItem.pdu_session_id:type_name -> xnap.v1.PdusessionID
	213,  // 884: xnap.v1.PdusessionResourcesNotAdmittedItem.cause:type_name -> xnap.v1.Cause
	640,  // 885: xnap.v1.PdusessionResourcesNotAdmittedItem.i_e_extension:type_name -> xnap.v1.PdusessionResourcesNotAdmittedItemItemExtIes
	645,  // 886: xnap.v1.PdusessionResourcesToBeSetupList.value:type_name -> xnap.v1.PdusessionResourcesToBeSetupItem
	148,  // 887: xnap.v1.PdusessionResourcesToBeSetupItemExtIesExtension.id_additional_ul_ng_u_tnlat_upf_list:type_name -> xnap.v1.AdditionalULNGUTNlatUpfList
	758,  // 888: xnap.v1.PdusessionResourcesToBeSetupItemExtIesExtension.id_pdusession_common_network_instance:type_name -> xnap.v1.PdusessionCommonNetworkInstance
	1061, // 889: xnap.v1.PdusessionResourcesToBeSetupItemExtIesExtension.id_redundant_ul_ng_u_tnlat_upf:type_name -> xnap.v1.UptransportLayerInformation
	148,  // 890: xnap.v1.PdusessionResourcesToBeSetupItemExtIesExtension.id_additional_redundant_ul_ng_u_tnlat_upf_list:type_name -> xnap.v1.AdditionalULNGUTNlatUpfList
	758,  // 891: xnap.v1.PdusessionResourcesToBeSetupItemExtIesExtension.id_redundant_common_network_instance:type_name -> xnap.v1.PdusessionCommonNetworkInstance
	819,  // 892: xnap.v1.PdusessionResourcesToBeSetupItemExtIesExtension.id_redundant_pdusession_information:type_name -> xnap.v1.RedundantPdusessionInformation
	1076, // 893: xnap.v1.PdusessionResourcesToBeSetupItemExtIes.id:type_name -> xnap.v1.ProtocolIeID
	1077, // 894: xnap.v1.PdusessionResourcesToBeSetupItemExtIes.criticality:type_name -> xnap.v1.Criticality
	643,  // 895: xnap.v1.PdusessionResourcesToBeSetupItemExtIes.extension:type_name -> xnap.v1.PdusessionResourcesToBeSetupItemExtIesExtension
	756,  // 896: xnap.v1.PdusessionResourcesToBeSetupItem.pdu_session_id:type_name -> xnap.v1.PdusessionID
	948,  // 897: xnap.v1.PdusessionResourcesToBeSetupItem.s_nssai:type_name -> xnap.v1.SNSsai
	623,  // 898: xnap.v1.PdusessionResourcesToBeSetupItem.pdu_session_ambr:type_name -> xnap.v1.PdusessionAggregateMaximumBitRate
	1061, // 899: xnap.v1.PdusessionResourcesToBeSetupItem.u_l_ng_u_tnlat_upf:type_name -> xnap.v1.UptransportLayerInformation
	1061, // 900: xnap.v1.PdusessionResourcesToBeSetupItem.source_dl_ng_u_tnl_information:type_name -> xnap.v1.UptransportLayerInformation
	874,  // 901: xnap.v1.PdusessionResourcesToBeSetupItem.security_indication:type_name -> xnap.v1.SecurityIndication
	79,   // 902: xnap.v1.PdusessionResourcesToBeSetupItem.pdu_session_type:type_name -> xnap.v1.PdusessionType
	757,  // 903: xnap.v1.PdusessionResourcesToBeSetupItem.pdu_session_network_instance:type_name -> xnap.v1.PdusessionNetworkInstance
	794,  // 904: xnap.v1.PdusessionResourcesToBeSetupItem.qos_flows_to_be_setup_list:type_name -> xnap.v1.QoSflowsToBeSetupList
	281,  // 905: xnap.v1.PdusessionResourcesToBeSetupItem.dataforwardinginfofrom_source:type_name -> xnap.v1.DataforwardingandOffloadingInfofromSource
	644,  // 906: xnap.v1.PdusessionResourcesToBeSetupItem.i_e_extensions:type_name -> xnap.v1.PdusessionResourcesToBeSetupItemExtIes
	876,  // 907: xnap.v1.PdusessionResourceSetupInfoSNterminatedExtIesExtension.id_security_result:type_name -> xnap.v1.SecurityResult
	758,  // 908: xnap.v1.PdusessionResourceSetupInfoSNterminatedExtIesExtension.id_pdusession_common_network_instance:type_name -> xnap.v1.PdusessionCommonNetworkInstance
	23,   // 909: xnap.v1.PdusessionResourceSetupInfoSNterminatedExtIesExtension.id_default_drb_allowed:type_name -> xnap.v1.DefaultDrbAllowed
	126,  // 910: xnap.v1.PdusessionResourceSetupInfoSNterminatedExtIesExtension.id_split_session_indicator:type_name -> xnap.v1.SplitSessionIndicator
	64,   // 911: xnap.v1.PdusessionResourceSetupInfoSNterminatedExtIesExtension.id_non_gbrresources_offered:type_name -> xnap.v1.NonGbrresourcesOffered
	1061, // 912: xnap.v1.PdusessionResourceSetupInfoSNterminatedExtIesExtension.id_redundant_ul_ng_u_tnlat_upf:type_name -> xnap.v1.UptransportLayerInformation
	758,  // 913: xnap.v1.PdusessionResourceSetupInfoSNterminatedExtIesExtension.id_redundant_common_network_instance:type_name -> xnap.v1.PdusessionCommonNetworkInstance
	819,  // 914: xnap.v1.PdusessionResourceSetupInfoSNterminatedExtIesExtension.id_redundant_pdusession_information:type_name -> xnap.v1.RedundantPdusessionInformation
	1076, // 915: xnap.v1.PdusessionResourceSetupInfoSNterminatedExtIes.id:type_name -> xnap.v1.ProtocolIeID
	1077, // 916: xnap.v1.PdusessionResourceSetupInfoSNterminatedExtIes.criticality:type_name -> xnap.v1.Criticality
	646,  // 917: xnap.v1.PdusessionResourceSetupInfoSNterminatedExtIes.extension:type_name -> xnap.v1.PdusessionResourceSetupInfoSNterminatedExtIesExtension
	1061, // 918: xnap.v1.PdusessionResourceSetupInfoSNterminated.u_l_ng_u_tnlat_upf:type_name -> xnap.v1.UptransportLayerInformation
	79,   // 919: xnap.v1.PdusessionResourceSetupInfoSNterminated.pdu_session_type:type_name -> xnap.v1.PdusessionType
	757,  // 920: xnap.v1.PdusessionResourceSetupInfoSNterminated.pdu_session_network_instance:type_name -> xnap.v1.PdusessionNetworkInstance
	649,  // 921: xnap.v1.PdusessionResourceSetupInfoSNterminated.qos_flows_to_be_setup_list:type_name -> xnap.v1.QoSflowsToBeSetupListSetupSNterminated
	281,  // 922: xnap.v1.PdusessionResourceSetupInfoSNterminated.dataforwardinginfofrom_source:type_name -> xnap.v1.DataforwardingandOffloadingInfofromSource
	874,  // 923: xnap.v1.PdusessionResourceSetupInfoSNterminated.security_indication:type_name -> xnap.v1.SecurityIndication
	647,  // 924: xnap.v1.PdusessionResourceSetupInfoSNterminated.i_e_extensions:type_name -> xnap.v1.PdusessionResourceSetupInfoSNterminatedExtIes
	652,  // 925: xnap.v1.QoSflowsToBeSetupListSetupSNterminated.value:type_name -> xnap.v1.QoSflowsToBeSetupListSetupSNterminatedItem
	1023, // 926: xnap.v1.QoSflowsToBeSetupListSetupSNterminatedItemExtIesExtension.id_tsctraffic_characteristics:type_name -> xnap.v1.TsctrafficCharacteristics
	91,   // 927: xnap.v1.QoSflowsToBeSetupListSetupSNterminatedItemExtIesExtension.id_redundant_qo_sflow_indicator:type_name -> xnap.v1.RedundantQoSflowIndicator
	1076, // 928: xnap.v1.QoSflowsToBeSetupListSetupSNterminatedItemExtIes.id:type_name -> xnap.v1.ProtocolIeID
	1077, // 929: xnap.v1.QoSflowsToBeSetupListSetupSNterminatedItemExtIes.criticality:type_name -> xnap.v1.Criticality
	650,  // 930: xnap.v1.QoSflowsToBeSetupListSetupSNterminatedItemExtIes.extension:type_name -> xnap.v1.QoSflowsToBeSetupListSetupSNterminatedItemExtIesExtension
	774,  // 931: xnap.v1.QoSflowsToBeSetupListSetupSNterminatedItem.qfi:type_name -> xnap.v1.QoSflowIdentifier
	777,  // 932: xnap.v1.QoSflowsToBeSetupListSetupSNterminatedItem.qos_flow_level_qo_sparameters:type_name -> xnap.v1.QoSflowLevelQoSparameters
	371,  // 933: xnap.v1.QoSflowsToBeSetupListSetupSNterminatedItem.offered_gbrqo_sflow_info:type_name -> xnap.v1.GbrqoSflowInfo
	651,  // 934: xnap.v1.QoSflowsToBeSetupListSetupSNterminatedItem.i_e_extensions:type_name -> xnap.v1.QoSflowsToBeSetupListSetupSNterminatedItemExtIes
	303,  // 935: xnap.v1.PdusessionResourceSetupResponseInfoSNterminatedExtIesExtension.id_drb_ids_takenintouse:type_name -> xnap.v1.DrbList
	1061, // 936: xnap.v1.PdusessionResourceSetupResponseInfoSNterminatedExtIesExtension.id_redundant_dl_ng_u_tnlat_ng_ran:type_name -> xnap.v1.UptransportLayerInformation
	819,  // 937: xnap.v1.PdusessionResourceSetupResponseInfoSNterminatedExtIesExtension.id_used_rsninformation:type_name -> xnap.v1.RedundantPdusessionInformation
	1076, // 938: xnap.v1.PdusessionResourceSetupResponseInfoSNterminatedExtIes.id:type_name -> xnap.v1.ProtocolIeID
	1077, // 939: xnap.v1.PdusessionResourceSetupResponseInfoSNterminatedExtIes.criticality:type_name -> xnap.v1.Criticality
	653,  // 940: xnap.v1.PdusessionResourceSetupResponseInfoSNterminatedExtIes.extension:type_name -> xnap.v1.PdusessionResourceSetupResponseInfoSNterminatedExtIesExtension
	1061, // 941: xnap.v1.PdusessionResourceSetupResponseInfoSNterminated.d_l_ng_u_tnlat_ng_ran:type_name -> xnap.v1.UptransportLayerInformation
	656,  // 942: xnap.v1.PdusessionResourceSetupResponseInfoSNterminated.d_rbs_to_be_setup:type_name -> xnap.v1.DrbsToBeSetupListSetupResponseSNterminated
	276,  // 943: xnap.v1.PdusessionResourceSetupResponseInfoSNterminated.dataforwardinginfo_target:type_name -> xnap.v1.DataForwardingInfoFromTargetNgrannode
	784,  // 944: xnap.v1.PdusessionResourceSetupResponseInfoSNterminated.qos_flows_not_admitted_list:type_name -> xnap.v1.QoSflowsListwithCause
	876,  // 945: xnap.v1.PdusessionResourceSetupResponseInfoSNterminated.security_result:type_name -> xnap.v1.SecurityResult
	654,  // 946: xnap.v1.PdusessionResourceSetupResponseInfoSNterminated.i_e_extensions:type_name -> xnap.v1.PdusessionResourceSetupResponseInfoSNterminatedExtIes
	659,  // 947: xnap.v1.DrbsToBeSetupListSetupResponseSNterminated.value:type_name -> xnap.v1.DrbsToBeSetupListSetupResponseSNterminatedItem
	143,  // 948: xnap.v1.DrbsToBeSetupListSetupResponseSNterminatedItemExtIesExtension.id_additional_pdcp_duplication_tnl_list:type_name -> xnap.v1.AdditionalPDcpDuplicationTNlList
	847,  // 949: xnap.v1.DrbsToBeSetupListSetupResponseSNterminatedItemExtIesExtension.id_rlcduplication_information:type_name -> xnap.v1.RlcduplicationInformation
	1076, // 950: xnap.v1.DrbsToBeSetupListSetupResponseSNterminatedItemExtIes.id:type_name -> xnap.v1.ProtocolIeID
	1077, // 951: xnap.v1.DrbsToBeSetupListSetupResponseSNterminatedItemExtIes.criticality:type_name -> xnap.v1.Criticality
	657,  // 952: xnap.v1.DrbsToBeSetupListSetupResponseSNterminatedItemExtIes.extension:type_name -> xnap.v1.DrbsToBeSetupListSetupResponseSNterminatedItemExtIesExtension
	302,  // 953: xnap.v1.DrbsToBeSetupListSetupResponseSNterminatedItem.drb_id:type_name -> xnap.v1.DrbID
	1062, // 954: xnap.v1.DrbsToBeSetupListSetupResponseSNterminatedItem.s_n_ul_pdcp_up_tnlinfo:type_name -> xnap.v1.UptransportParameters
	777,  // 955: xnap.v1.DrbsToBeSetupListSetupResponseSNterminatedItem.d_rb_qo_s:type_name -> xnap.v1.QoSflowLevelQoSparameters
	621,  // 956: xnap.v1.DrbsToBeSetupListSetupResponseSNterminatedItem.p_dcp_snlength:type_name -> xnap.v1.Pdcpsnlength
	101,  // 957: xnap.v1.DrbsToBeSetupListSetupResponseSNterminatedItem.r_lc_mode:type_name -> xnap.v1.Rlcmode
	1056, // 958: xnap.v1.DrbsToBeSetupListSetupResponseSNterminatedItem.u_l_configuration:type_name -> xnap.v1.Ulconfiguration
	1062, // 959: xnap.v1.DrbsToBeSetupListSetupResponseSNterminatedItem.secondary_sn_ul_pdcp_up_tnlinfo:type_name -> xnap.v1.UptransportParameters
	26,   // 960: xnap.v1.DrbsToBeSetupListSetupResponseSNterminatedItem.duplication_activation:type_name -> xnap.v1.DuplicationActivation
	660,  // 961: xnap.v1.DrbsToBeSetupListSetupResponseSNterminatedItem.qo_sflows_mappedto_drb_setup_response_snterminated:type_name -> xnap.v1.QoSflowsMappedtoDrbSetupResponseSNterminated
	658,  // 962: xnap.v1.DrbsToBeSetupListSetupResponseSNterminatedItem.i_e_extensions:type_name -> xnap.v1.DrbsToBeSetupListSetupResponseSNterminatedItemExtIes
	663,  // 963: xnap.v1.QoSflowsMappedtoDrbSetupResponseSNterminated.value:type_name -> xnap.v1.QoSflowsMappedtoDrbSetupResponseSNterminatedItem
	789,  // 964: xnap.v1.QoSflowsMappedtoDrbSetupResponseSNterminatedItemExtIesExtension.id_current_qo_spara_set_index:type_name -> xnap.v1.QoSparaSetIndex
	1018, // 965: xnap.v1.QoSflowsMappedtoDrbSetupResponseSNterminatedItemExtIesExtension.id_source_dlforwarding_ipaddress:type_name -> xnap.v1.TransportLayerAddress
	1076, // 966: xnap.v1.QoSflowsMappedtoDrbSetupResponseSNterminatedItemExtIes.id:type_name -> xnap.v1.ProtocolIeID
	1077, // 967: xnap.v1.QoSflowsMappedtoDrbSetupResponseSNterminatedItemExtIes.criticality:type_name -> xnap.v1.Criticality
	661,  // 968: xnap.v1.QoSflowsMappedtoDrbSetupResponseSNterminatedItemExtIes.extension:type_name -> xnap.v1.QoSflowsMappedtoDrbSetupResponseSNterminatedItemExtIesExtension
	774,  // 969: xnap.v1.QoSflowsMappedtoDrbSetupResponseSNterminatedItem.qo_sflow_identifier:type_name -> xnap.v1.QoSflowIdentifier
	371,  // 970: xnap.v1.QoSflowsMappedtoDrbSetupResponseSNterminatedItem.m_cgrequested_gbrqo_sflow_info:type_name -> xnap.v1.GbrqoSflowInfo
	83,   // 971: xnap.v1.QoSflowsMappedtoDrbSetupResponseSNterminatedItem.qos_flow_mapping_indication:type_name -> xnap.v1.QoSflowMappingIndication
	662,  // 972: xnap.v1.QoSflowsMappedtoDrbSetupResponseSNterminatedItem.i_e_extensions:type_name -> xnap.v1.QoSflowsMappedtoDrbSetupResponseSNterminatedItemExtIes
	1074, // 973: xnap.v1.PdusessionResourceSetupInfoMNterminatedExtIes.value:type_name -> google.protobuf.Empty
	79,   // 974: xnap.v1.PdusessionResourceSetupInfoMNterminated.pdu_session_type:type_name -> xnap.v1.PdusessionType
	666,  // 975: xnap.v1.PdusessionResourceSetupInfoMNterminated.d_rbs_to_be_setup:type_name -> xnap.v1.DrbsToBeSetupListSetupMNterminated
	664,  // 976: xnap.v1.PdusessionResourceSetupInfoMNterminated.i_e_extensions:type_name -> xnap.v1.PdusessionResourceSetupInfoMNterminatedExtIes
	669,  // 977: xnap.v1.DrbsToBeSetupListSetupMNterminated.value:type_name -> xnap.v1.DrbsToBeSetupListSetupMNterminatedItem
	143,  // 978: xnap.v1.DrbsToBeSetupListSetupMNterminatedItemExtIesExtension.id_additional_pdcp_duplication_tnl_list:type_name -> xnap.v1.AdditionalPDcpDuplicationTNlList
	847,  // 979: xnap.v1.DrbsToBeSetupListSetupMNterminatedItemExtIesExtension.id_rlcduplication_information:type_name -> xnap.v1.RlcduplicationInformation
	1076, // 980: xnap.v1.DrbsToBeSetupListSetupMNterminatedItemExtIes.id:type_name -> xnap.v1.ProtocolIeID
	1077, // 981: xnap.v1.DrbsToBeSetupListSetupMNterminatedItemExtIes.criticality:type_name -> xnap.v1.Criticality
	667,  // 982: xnap.v1.DrbsToBeSetupListSetupMNterminatedItemExtIes.extension:type_name -> xnap.v1.DrbsToBeSetupListSetupMNterminatedItemExtIesExtension
	302,  // 983: xnap.v1.DrbsToBeSetupListSetupMNterminatedItem.drb_id:type_name -> xnap.v1.DrbID
	1062, // 984: xnap.v1.DrbsToBeSetupListSetupMNterminatedItem.m_n_ul_pdcp_up_tnlinfo:type_name -> xnap.v1.UptransportParameters
	101,  // 985: xnap.v1.DrbsToBeSetupListSetupMNterminatedItem.r_lc_mode:type_name -> xnap.v1.Rlcmode
	1056, // 986: xnap.v1.DrbsToBeSetupListSetupMNterminatedItem.u_l_configuration:type_name -> xnap.v1.Ulconfiguration
	777,  // 987: xnap.v1.DrbsToBeSetupListSetupMNterminatedItem.d_rb_qo_s:type_name -> xnap.v1.QoSflowLevelQoSparameters
	621,  // 988: xnap.v1.DrbsToBeSetupListSetupMNterminatedItem.p_dcp_snlength:type_name -> xnap.v1.Pdcpsnlength
	1062, // 989: xnap.v1.DrbsToBeSetupListSetupMNterminatedItem.secondary_mn_ul_pdcp_up_tnlinfo:type_name -> xnap.v1.UptransportParameters
	26,   // 990: xnap.v1.DrbsToBeSetupListSetupMNterminatedItem.duplication_activation:type_name -> xnap.v1.DuplicationActivation
	670,  // 991: xnap.v1.DrbsToBeSetupListSetupMNterminatedItem.qo_sflows_mappedto_drb_setup_mnterminated:type_name -> xnap.v1.QoSflowsMappedtoDrbSetupMNterminated
	668,  // 992: xnap.v1.DrbsToBeSetupListSetupMNterminatedItem.i_e_extensions:type_name -> xnap.v1.DrbsToBeSetupListSetupMNterminatedItemExtIes
	672,  // 993: xnap.v1.QoSflowsMappedtoDrbSetupMNterminated.value:type_name -> xnap.v1.QoSflowsMappedtoDrbSetupMNterminatedItem
	1074, // 994: xnap.v1.QoSflowsMappedtoDrbSetupMNterminatedItemExtIes.value:type_name -> google.protobuf.Empty
	774,  // 995: xnap.v1.QoSflowsMappedtoDrbSetupMNterminatedItem.qo_sflow_identifier:type_name -> xnap.v1.QoSflowIdentifier
	777,  // 996: xnap.v1.QoSflowsMappedtoDrbSetupMNterminatedItem.qo_sflow_level_qo_sparameters:type_name -> xnap.v1.QoSflowLevelQoSparameters
	83,   // 997: xnap.v1.QoSflowsMappedtoDrbSetupMNterminatedItem.qos_flow_mapping_indication:type_name -> xnap.v1.QoSflowMappingIndication
	671,  // 998: xnap.v1.QoSflowsMappedtoDrbSetupMNterminatedItem.i_e_extensions:type_name -> xnap.v1.QoSflowsMappedtoDrbSetupMNterminatedItemExtIes
	1074, // 999: xnap.v1.PdusessionResourceSetupResponseInfoMNterminatedExtIes.value:type_name -> google.protobuf.Empty
	675,  // 1000: xnap.v1.PdusessionResourceSetupResponseInfoMNterminated.d_rbs_admitted_list:type_name -> xnap.v1.DrbsAdmittedListSetupResponseMNterminated
	673,  // 1001: xnap.v1.PdusessionResourceSetupResponseInfoMNterminated.i_e_extensions:type_name -> xnap.v1.PdusessionResourceSetupResponseInfoMNterminatedExtIes
	678,  // 1002: xnap.v1.DrbsAdmittedListSetupResponseMNterminated.value:type_name -> xnap.v1.DrbsAdmittedListSetupResponseMNterminatedItem
	143,  // 1003: xnap.v1.DrbsAdmittedListSetupResponseMNterminatedItemExtIesExtension.id_additional_pdcp_duplication_tnl_list:type_name -> xnap.v1.AdditionalPDcpDuplicationTNlList
	679,  // 1004: xnap.v1.DrbsAdmittedListSetupResponseMNterminatedItemExtIesExtension.id_qo_sflows_mappedto_drb_setup_response_mnterminated:type_name -> xnap.v1.QoSflowsMappedtoDrbSetupResponseMNterminated
	1076, // 1005: xnap.v1.DrbsAdmittedListSetupResponseMNterminatedItemExtIes.id:type_name -> xnap.v1.ProtocolIeID
	1077, // 1006: xnap.v1.DrbsAdmittedListSetupResponseMNterminatedItemExtIes.criticality:type_name -> xnap.v1.Criticality
	676,  // 1007: xnap.v1.DrbsAdmittedListSetupResponseMNterminatedItemExtIes.extension:type_name -> xnap.v1.DrbsAdmittedListSetupResponseMNterminatedItemExtIesExtension
	302,  // 1008: xnap.v1.DrbsAdmittedListSetupResponseMNterminatedItem.drb_id:type_name -> xnap.v1.DrbID
	1062, // 1009: xnap.v1.DrbsAdmittedListSetupResponseMNterminatedItem.s_n_dl_scg_up_tnlinfo:type_name -> xnap.v1.UptransportParameters
	1062, // 1010: xnap.v1.DrbsAdmittedListSetupResponseMNterminatedItem.secondary_sn_dl_scg_up_tnlinfo:type_name -> xnap.v1.UptransportParameters
	411,  // 1011: xnap.v1.DrbsAdmittedListSetupResponseMNterminatedItem.l_cid:type_name -> xnap.v1.Lcid
	677,  // 1012: xnap.v1.DrbsAdmittedListSetupResponseMNterminatedItem.i_e_extensions:type_name -> xnap.v1.DrbsAdmittedListSetupResponseMNterminatedItemExtIes
	681,  // 1013: xnap.v1.QoSflowsMappedtoDrbSetupResponseMNterminated.value:type_name -> xnap.v1.QoSflowsMappedtoDrbSetupResponseMNterminatedItem
	1074, // 1014: xnap.v1.QoSflowsMappedtoDrbSetupResponseMNterminatedItemExtIes.value:type_name -> google.protobuf.Empty
	774,  // 1015: xnap.v1.QoSflowsMappedtoDrbSetupResponseMNterminatedItem.qo_sflow_identifier:type_name -> xnap.v1.QoSflowIdentifier
	789,  // 1016: xnap.v1.QoSflowsMappedtoDrbSetupResponseMNterminatedItem.current_qo_spara_set_index:type_name -> xnap.v1.QoSparaSetIndex
	680,  // 1017: xnap.v1.QoSflowsMappedtoDrbSetupResponseMNterminatedItem.i_e_extensions:type_name -> xnap.v1.QoSflowsMappedtoDrbSetupResponseMNterminatedItemExtIes
	758,  // 1018: xnap.v1.PdusessionResourceModificationInfoSNterminatedExtIesExtension.id_pdusession_common_network_instance:type_name -> xnap.v1.PdusessionCommonNetworkInstance
	23,   // 1019: xnap.v1.PdusessionResourceModificationInfoSNterminatedExtIesExtension.id_default_drb_allowed:type_name -> xnap.v1.DefaultDrbAllowed
	64,   // 1020: xnap.v1.PdusessionResourceModificationInfoSNterminatedExtIesExtension.id_non_gbrresources_offered:type_name -> xnap.v1.NonGbrresourcesOffered
	1061, // 1021: xnap.v1.PdusessionResourceModificationInfoSNterminatedExtIesExtension.id_redundant_ul_ng_u_tnlat_upf:type_name -> xnap.v1.UptransportLayerInformation
	758,  // 1022: xnap.v1.PdusessionResourceModificationInfoSNterminatedExtIesExtension.id_redundant_common_network_instance:type_name -> xnap.v1.PdusessionCommonNetworkInstance
	874,  // 1023: xnap.v1.PdusessionResourceModificationInfoSNterminatedExtIesExtension.id_security_indication:type_name -> xnap.v1.SecurityIndication
	1076, // 1024: xnap.v1.PdusessionResourceModificationInfoSNterminatedExtIes.id:type_name -> xnap.v1.ProtocolIeID
	1077, // 1025: xnap.v1.PdusessionResourceModificationInfoSNterminatedExtIes.criticality:type_name -> xnap.v1.Criticality
	682,  // 1026: xnap.v1.PdusessionResourceModificationInfoSNterminatedExtIes.extension:type_name -> xnap.v1.PdusessionResourceModificationInfoSNterminatedExtIesExtension
	1061, // 1027: xnap.v1.PdusessionResourceModificationInfoSNterminated.u_l_ng_u_tnlat_upf:type_name -> xnap.v1.UptransportLayerInformation
	757,  // 1028: xnap.v1.PdusessionResourceModificationInfoSNterminated.pdu_session_network_instance:type_name -> xnap.v1.PdusessionNetworkInstance
	649,  // 1029: xnap.v1.PdusessionResourceModificationInfoSNterminated.qos_flows_to_be_setup_list:type_name -> xnap.v1.QoSflowsToBeSetupListSetupSNterminated
	281,  // 1030: xnap.v1.PdusessionResourceModificationInfoSNterminated.dataforwardinginfofrom_source:type_name -> xnap.v1.DataforwardingandOffloadingInfofromSource
	685,  // 1031: xnap.v1.PdusessionResourceModificationInfoSNterminated.qos_flows_to_be_modified_list:type_name -> xnap.v1.QoSflowsToBeSetupListModifiedSNterminated
	784,  // 1032: xnap.v1.PdusessionResourceModificationInfoSNterminated.qo_sflows_to_be_released_list:type_name -> xnap.v1.QoSflowsListwithCause
	689,  // 1033: xnap.v1.PdusessionResourceModificationInfoSNterminated.drbs_to_be_modified_list:type_name -> xnap.v1.DrbsToBeModifiedListModifiedSNterminated
	304,  // 1034: xnap.v1.PdusessionResourceModificationInfoSNterminated.d_rbs_to_be_released:type_name -> xnap.v1.DrbListwithCause
	683,  // 1035: xnap.v1.PdusessionResourceModificationInfoSNterminated.i_e_extensions:type_name -> xnap.v1.PdusessionResourceModificationInfoSNterminatedExtIes
	688,  // 1036: xnap.v1.QoSflowsToBeSetupListModifiedSNterminated.value:type_name -> xnap.v1.QoSflowsToBeSetupListModifiedSNterminatedItem
	1023, // 1037: xnap.v1.QoSflowsToBeSetupListModifiedSNterminatedItemExtIesExtension.id_tsctraffic_characteristics:type_name -> xnap.v1.TsctrafficCharacteristics
	91,   // 1038: xnap.v1.QoSflowsToBeSetupListModifiedSNterminatedItemExtIesExtension.id_redundant_qo_sflow_indicator:type_name -> xnap.v1.RedundantQoSflowIndicator
	1076, // 1039: xnap.v1.QoSflowsToBeSetupListModifiedSNterminatedItemExtIes.id:type_name -> xnap.v1.ProtocolIeID
	1077, // 1040: xnap.v1.QoSflowsToBeSetupListModifiedSNterminatedItemExtIes.criticality:type_name -> xnap.v1.Criticality
	686,  // 1041: xnap.v1.QoSflowsToBeSetupListModifiedSNterminatedItemExtIes.extension:type_name -> xnap.v1.QoSflowsToBeSetupListModifiedSNterminatedItemExtIesExtension
	774,  // 1042: xnap.v1.QoSflowsToBeSetupListModifiedSNterminatedItem.qfi:type_name -> xnap.v1.QoSflowIdentifier
	777,  // 1043: xnap.v1.QoSflowsToBeSetupListModifiedSNterminatedItem.qos_flow_level_qo_sparameters:type_name -> xnap.v1.QoSflowLevelQoSparameters
	371,  // 1044: xnap.v1.QoSflowsToBeSetupListModifiedSNterminatedItem.offered_gbrqo_sflow_info:type_name -> xnap.v1.GbrqoSflowInfo
	83,   // 1045: xnap.v1.QoSflowsToBeSetupListModifiedSNterminatedItem.qos_flow_mapping_indication:type_name -> xnap.v1.QoSflowMappingIndication
	687,  // 1046: xnap.v1.QoSflowsToBeSetupListModifiedSNterminatedItem.i_e_extensions:type_name -> xnap.v1.QoSflowsToBeSetupListModifiedSNterminatedItemExtIes
	691,  // 1047: xnap.v1.DrbsToBeModifiedListModifiedSNterminated.value:type_name -> xnap.v1.DrbsToBeModifiedListModifiedSNterminatedItem
	1074, // 1048: xnap.v1.DrbsToBeModifiedListModifiedSNterminatedItemExtIes.value:type_name -> google.protobuf.Empty
	302,  // 1049: xnap.v1.DrbsToBeModifiedListModifiedSNterminatedItem.drb_id:type_name -> xnap.v1.DrbID
	1062, // 1050: xnap.v1.DrbsToBeModifiedListModifiedSNterminatedItem.m_n_dl_scg_up_tnlinfo:type_name -> xnap.v1.UptransportParameters
	1062, // 1051: xnap.v1.DrbsToBeModifiedListModifiedSNterminatedItem.secondary_mn_dl_scg_up_tnlinfo:type_name -> xnap.v1.UptransportParameters
	411,  // 1052: xnap.v1.DrbsToBeModifiedListModifiedSNterminatedItem.l_cid:type_name -> xnap.v1.Lcid
	845,  // 1053: xnap.v1.DrbsToBeModifiedListModifiedSNterminatedItem.rlc_status:type_name -> xnap.v1.RlcStatus
	690,  // 1054: xnap.v1.DrbsToBeModifiedListModifiedSNterminatedItem.i_e_extensions:type_name -> xnap.v1.DrbsToBeModifiedListModifiedSNterminatedItemExtIes
	303,  // 1055: xnap.v1.PdusessionResourceModificationResponseInfoSNterminatedExtIesExtension.id_drb_ids_takenintouse:type_name -> xnap.v1.DrbList
	1061, // 1056: xnap.v1.PdusessionResourceModificationResponseInfoSNterminatedExtIesExtension.id_redundant_dl_ng_u_tnlat_ng_ran:type_name -> xnap.v1.UptransportLayerInformation
	876,  // 1057: xnap.v1.PdusessionResourceModificationResponseInfoSNterminatedExtIesExtension.id_security_result:type_name -> xnap.v1.SecurityResult
	1076, // 1058: xnap.v1.PdusessionResourceModificationResponseInfoSNterminatedExtIes.id:type_name -> xnap.v1.ProtocolIeID
	1077, // 1059: xnap.v1.PdusessionResourceModificationResponseInfoSNterminatedExtIes.criticality:type_name -> xnap.v1.Criticality
	692,  // 1060: xnap.v1.PdusessionResourceModificationResponseInfoSNterminatedExtIes.extension:type_name -> xnap.v1.PdusessionResourceModificationResponseInfoSNterminatedExtIesExtension
	1061, // 1061: xnap.v1.PdusessionResourceModificationResponseInfoSNterminated.d_l_ng_u_tnlat_ng_ran:type_name -> xnap.v1.UptransportLayerInformation
	656,  // 1062: xnap.v1.PdusessionResourceModificationResponseInfoSNterminated.d_rbs_to_be_setup:type_name -> xnap.v1.DrbsToBeSetupListSetupResponseSNterminated
	276,  // 1063: xnap.v1.PdusessionResourceModificationResponseInfoSNterminated.dataforwardinginfo_target:type_name -> xnap.v1.DataForwardingInfoFromTargetNgrannode
	695,  // 1064: xnap.v1.PdusessionResourceModificationResponseInfoSNterminated.d_rbs_to_be_modified:type_name -> xnap.v1.DrbsToBeModifiedListModificationResponseSNterminated
	304,  // 1065: xnap.v1.PdusessionResourceModificationResponseInfoSNterminated.d_rbs_to_be_released:type_name -> xnap.v1.DrbListwithCause
	281,  // 1066: xnap.v1.PdusessionResourceModificationResponseInfoSNterminated.dataforwardinginfofrom_source:type_name -> xnap.v1.DataforwardingandOffloadingInfofromSource
	784,  // 1067: xnap.v1.PdusessionResourceModificationResponseInfoSNterminated.qos_flows_not_admitted_tbadded:type_name -> xnap.v1.QoSflowsListwithCause
	784,  // 1068: xnap.v1.PdusessionResourceModificationResponseInfoSNterminated.qos_flows_released:type_name -> xnap.v1.QoSflowsListwithCause
	693,  // 1069: xnap.v1.PdusessionResourceModificationResponseInfoSNterminated.i_e_extensions:type_name -> xnap.v1.PdusessionResourceModificationResponseInfoSNterminatedExtIes
	698,  // 1070: xnap.v1.DrbsToBeModifiedListModificationResponseSNterminated.value:type_name -> xnap.v1.DrbsToBeModifiedListModificationResponseSNterminatedItem
	143,  // 1071: xnap.v1.DrbsToBeModifiedListModificationResponseSNterminatedItemExtIesExtension.id_additional_pdcp_duplication_tnl_list:type_name -> xnap.v1.AdditionalPDcpDuplicationTNlList
	847,  // 1072: xnap.v1.DrbsToBeModifiedListModificationResponseSNterminatedItemExtIesExtension.id_rlcduplication_information:type_name -> xnap.v1.RlcduplicationInformation
	1062, // 1073: xnap.v1.DrbsToBeModifiedListModificationResponseSNterminatedItemExtIesExtension.id_secondary_sn_ul_pdcp_up_tnlinfo:type_name -> xnap.v1.UptransportParameters
	74,   // 1074: xnap.v1.DrbsToBeModifiedListModificationResponseSNterminatedItemExtIesExtension.id_pdcp_duplication_configuration:type_name -> xnap.v1.PdcpduplicationConfiguration
	26,   // 1075: xnap.v1.DrbsToBeModifiedListModificationResponseSNterminatedItemExtIesExtension.id_duplication_activation:type_name -> xnap.v1.DuplicationActivation
	1076, // 1076: xnap.v1.DrbsToBeModifiedListModificationResponseSNterminatedItemExtIes.id:type_name -> xnap.v1.ProtocolIeID
	1077, // 1077: xnap.v1.DrbsToBeModifiedListModificationResponseSNterminatedItemExtIes.criticality:type_name -> xnap.v1.Criticality
	696,  // 1078: xnap.v1.DrbsToBeModifiedListModificationResponseSNterminatedItemExtIes.extension:type_name -> xnap.v1.DrbsToBeModifiedListModificationResponseSNterminatedItemExtIesExtension
	302,  // 1079: xnap.v1.DrbsToBeModifiedListModificationResponseSNterminatedItem.drb_id:type_name -> xnap.v1.DrbID
	1062, // 1080: xnap.v1.DrbsToBeModifiedListModificationResponseSNterminatedItem.s_n_ul_pdcp_up_tnlinfo:type_name -> xnap.v1.UptransportParameters
	777,  // 1081: xnap.v1.DrbsToBeModifiedListModificationResponseSNterminatedItem.d_rb_qo_s:type_name -> xnap.v1.QoSflowLevelQoSparameters
	660,  // 1082: xnap.v1.DrbsToBeModifiedListModificationResponseSNterminatedItem.qo_sflows_mappedto_drb_setup_response_snterminated:type_name -> xnap.v1.QoSflowsMappedtoDrbSetupResponseSNterminated
	697,  // 1083: xnap.v1.DrbsToBeModifiedListModificationResponseSNterminatedItem.i_e_extensions:type_name -> xnap.v1.DrbsToBeModifiedListModificationResponseSNterminatedItemExtIes
	1074, // 1084: xnap.v1.PdusessionResourceModificationInfoMNterminatedExtIes.value:type_name -> google.protobuf.Empty
	79,   // 1085: xnap.v1.PdusessionResourceModificationInfoMNterminated.pdu_session_type:type_name -> xnap.v1.PdusessionType
	666,  // 1086: xnap.v1.PdusessionResourceModificationInfoMNterminated.d_rbs_to_be_setup:type_name -> xnap.v1.DrbsToBeSetupListSetupMNterminated
	701,  // 1087: xnap.v1.PdusessionResourceModificationInfoMNterminated.d_rbs_to_be_modified:type_name -> xnap.v1.DrbsToBeModifiedListModificationMNterminated
	304,  // 1088: xnap.v1.PdusessionResourceModificationInfoMNterminated.d_rbs_to_be_released:type_name -> xnap.v1.DrbListwithCause
	699,  // 1089: xnap.v1.PdusessionResourceModificationInfoMNterminated.i_e_extensions:type_name -> xnap.v1.PdusessionResourceModificationInfoMNterminatedExtIes
	704,  // 1090: xnap.v1.DrbsToBeModifiedListModificationMNterminated.value:type_name -> xnap.v1.DrbsToBeModifiedListModificationMNterminatedItem
	143,  // 1091: xnap.v1.DrbsToBeModifiedListModificationMNterminatedItemExtIesExtension.id_additional_pdcp_duplication_tnl_list:type_name -> xnap.v1.AdditionalPDcpDuplicationTNlList
	847,  // 1092: xnap.v1.DrbsToBeModifiedListModificationMNterminatedItemExtIesExtension.id_rlcduplication_information:type_name -> xnap.v1.RlcduplicationInformation
	1076, // 1093: xnap.v1.DrbsToBeModifiedListModificationMNterminatedItemExtIes.id:type_name -> xnap.v1.ProtocolIeID
	1077, // 1094: xnap.v1.DrbsToBeModifiedListModificationMNterminatedItemExtIes.criticality:type_name -> xnap.v1.Criticality
	702,  // 1095: xnap.v1.DrbsToBeModifiedListModificationMNterminatedItemExtIes.extension:type_name -> xnap.v1.DrbsToBeModifiedListModificationMNterminatedItemExtIesExtension
	302,  // 1096: xnap.v1.DrbsToBeModifiedListModificationMNterminatedItem.drb_id:type_name -> xnap.v1.DrbID
	1062, // 1097: xnap.v1.DrbsToBeModifiedListModificationMNterminatedItem.m_n_ul_pdcp_up_tnlinfo:type_name -> xnap.v1.UptransportParameters
	777,  // 1098: xnap.v1.DrbsToBeModifiedListModificationMNterminatedItem.d_rb_qo_s:type_name -> xnap.v1.QoSflowLevelQoSparameters
	1062, // 1099: xnap.v1.DrbsToBeModifiedListModificationMNterminatedItem.secondary_mn_ul_pdcp_up_tnlinfo:type_name -> xnap.v1.UptransportParameters
	1056, // 1100: xnap.v1.DrbsToBeModifiedListModificationMNterminatedItem.u_l_configuration:type_name -> xnap.v1.Ulconfiguration
	74,   // 1101: xnap.v1.DrbsToBeModifiedListModificationMNterminatedItem.pdcp_duplication_configuration:type_name -> xnap.v1.PdcpduplicationConfiguration
	26,   // 1102: xnap.v1.DrbsToBeModifiedListModificationMNterminatedItem.duplication_activation:type_name -> xnap.v1.DuplicationActivation
	670,  // 1103: xnap.v1.DrbsToBeModifiedListModificationMNterminatedItem.qo_sflows_mappedto_drb_setup_mnterminated:type_name -> xnap.v1.QoSflowsMappedtoDrbSetupMNterminated
	703,  // 1104: xnap.v1.DrbsToBeModifiedListModificationMNterminatedItem.i_e_extensions:type_name -> xnap.v1.DrbsToBeModifiedListModificationMNterminatedItemExtIes
	1074, // 1105: xnap.v1.PdusessionResourceModificationResponseInfoMNterminatedExtIes.value:type_name -> google.protobuf.Empty
	707,  // 1106: xnap.v1.PdusessionResourceModificationResponseInfoMNterminated.d_rbs_admitted_list:type_name -> xnap.v1.DrbsAdmittedListModificationResponseMNterminated
	303,  // 1107: xnap.v1.PdusessionResourceModificationResponseInfoMNterminated.d_rbs_released_list:type_name -> xnap.v1.DrbList
	304,  // 1108: xnap.v1.PdusessionResourceModificationResponseInfoMNterminated.d_rbs_not_admitted_setup_modify_list:type_name -> xnap.v1.DrbListwithCause
	705,  // 1109: xnap.v1.PdusessionResourceModificationResponseInfoMNterminated.i_e_extensions:type_name -> xnap.v1.PdusessionResourceModificationResponseInfoMNterminatedExtIes
	710,  // 1110: xnap.v1.DrbsAdmittedListModificationResponseMNterminated.value:type_name -> xnap.v1.DrbsAdmittedListModificationResponseMNterminatedItem
	143,  // 1111: xnap.v1.DrbsAdmittedListModificationResponseMNterminatedItemExtIesExtension.id_additional_pdcp_duplication_tnl_list:type_name -> xnap.v1.AdditionalPDcpDuplicationTNlList
	679,  // 1112: xnap.v1.DrbsAdmittedListModificationResponseMNterminatedItemExtIesExtension.id_qo_sflows_mappedto_drb_setup_response_mnterminated:type_name -> xnap.v1.QoSflowsMappedtoDrbSetupResponseMNterminated
	1076, // 1113: xnap.v1.DrbsAdmittedListModificationResponseMNterminatedItemExtIes.id:type_name -> xnap.v1.ProtocolIeID
	1077, // 1114: xnap.v1.DrbsAdmittedListModificationResponseMNterminatedItemExtIes.criticality:type_name -> xnap.v1.Criticality
	708,  // 1115: xnap.v1.DrbsAdmittedListModificationResponseMNterminatedItemExtIes.extension:type_name -> xnap.v1.DrbsAdmittedListModificationResponseMNterminatedItemExtIesExtension
	302,  // 1116: xnap.v1.DrbsAdmittedListModificationResponseMNterminatedItem.drb_id:type_name -> xnap.v1.DrbID
	1062, // 1117: xnap.v1.DrbsAdmittedListModificationResponseMNterminatedItem.s_n_dl_scg_up_tnlinfo:type_name -> xnap.v1.UptransportParameters
	1062, // 1118: xnap.v1.DrbsAdmittedListModificationResponseMNterminatedItem.secondary_sn_dl_scg_up_tnlinfo:type_name -> xnap.v1.UptransportParameters
	411,  // 1119: xnap.v1.DrbsAdmittedListModificationResponseMNterminatedItem.l_cid:type_name -> xnap.v1.Lcid
	709,  // 1120: xnap.v1.DrbsAdmittedListModificationResponseMNterminatedItem.i_e_extensions:type_name -> xnap.v1.DrbsAdmittedListModificationResponseMNterminatedItemExtIes
	1074, // 1121: xnap.v1.PdusessionResourceChangeRequiredInfoSNterminatedExtIes.value:type_name -> google.protobuf.Empty
	281,  // 1122: xnap.v1.PdusessionResourceChangeRequiredInfoSNterminated.dataforwardinginfofrom_source:type_name -> xnap.v1.DataforwardingandOffloadingInfofromSource
	711,  // 1123: xnap.v1.PdusessionResourceChangeRequiredInfoSNterminated.i_e_extensions:type_name -> xnap.v1.PdusessionResourceChangeRequiredInfoSNterminatedExtIes
	1074, // 1124: xnap.v1.PdusessionResourceChangeConfirmInfoSNterminatedExtIes.value:type_name -> google.protobuf.Empty
	276,  // 1125: xnap.v1.PdusessionResourceChangeConfirmInfoSNterminated.dataforwardinginfo_target:type_name -> xnap.v1.DataForwardingInfoFromTargetNgrannode
	713,  // 1126: xnap.v1.PdusessionResourceChangeConfirmInfoSNterminated.i_e_extensions:type_name -> xnap.v1.PdusessionResourceChangeConfirmInfoSNterminatedExtIes
	1074, // 1127: xnap.v1.PdusessionResourceChangeRequiredInfoMNterminatedExtIes.value:type_name -> google.protobuf.Empty
	715,  // 1128: xnap.v1.PdusessionResourceChangeRequiredInfoMNterminated.i_e_extensions:type_name -> xnap.v1.PdusessionResourceChangeRequiredInfoMNterminatedExtIes
	1074, // 1129: xnap.v1.PdusessionResourceChangeConfirmInfoMNterminatedExtIes.value:type_name -> google.protobuf.Empty
	717,  // 1130: xnap.v1.PdusessionResourceChangeConfirmInfoMNterminated.i_e_extensions:type_name -> xnap.v1.PdusessionResourceChangeConfirmInfoMNterminatedExtIes
	1074, // 1131: xnap.v1.PdusessionResourceModRqdInfoSNterminatedExtIes.value:type_name -> google.protobuf.Empty
	1061, // 1132: xnap.v1.PdusessionResourceModRqdInfoSNterminated.d_l_ng_u_tnlat_ng_ran:type_name -> xnap.v1.UptransportLayerInformation
	784,  // 1133: xnap.v1.PdusessionResourceModRqdInfoSNterminated.qo_sflows_to_be_released_list:type_name -> xnap.v1.QoSflowsListwithCause
	281,  // 1134: xnap.v1.PdusessionResourceModRqdInfoSNterminated.dataforwardinginfofrom_source:type_name -> xnap.v1.DataforwardingandOffloadingInfofromSource
	721,  // 1135: xnap.v1.PdusessionResourceModRqdInfoSNterminated.drbs_to_be_setup_list:type_name -> xnap.v1.DrbsToBeSetupListModRqdSNterminated
	728,  // 1136: xnap.v1.PdusessionResourceModRqdInfoSNterminated.drbs_to_be_modified_list:type_name -> xnap.v1.DrbsToBeModifiedListModRqdSNterminated
	304,  // 1137: xnap.v1.PdusessionResourceModRqdInfoSNterminated.d_rbs_to_be_released:type_name -> xnap.v1.DrbListwithCause
	719,  // 1138: xnap.v1.PdusessionResourceModRqdInfoSNterminated.i_e_extensions:type_name -> xnap.v1.PdusessionResourceModRqdInfoSNterminatedExtIes
	724,  // 1139: xnap.v1.DrbsToBeSetupListModRqdSNterminated.value:type_name -> xnap.v1.DrbsToBeSetupListModRqdSNterminatedItem
	143,  // 1140: xnap.v1.DrbsToBeSetupListModRqdSNterminatedItemExtIesExtension.id_additional_pdcp_duplication_tnl_list:type_name -> xnap.v1.AdditionalPDcpDuplicationTNlList
	847,  // 1141: xnap.v1.DrbsToBeSetupListModRqdSNterminatedItemExtIesExtension.id_rlcduplication_information:type_name -> xnap.v1.RlcduplicationInformation
	1076, // 1142: xnap.v1.DrbsToBeSetupListModRqdSNterminatedItemExtIes.id:type_name -> xnap.v1.ProtocolIeID
	1077, // 1143: xnap.v1.DrbsToBeSetupListModRqdSNterminatedItemExtIes.criticality:type_name -> xnap.v1.Criticality
	722,  // 1144: xnap.v1.DrbsToBeSetupListModRqdSNterminatedItemExtIes.extension:type_name -> xnap.v1.DrbsToBeSetupListModRqdSNterminatedItemExtIesExtension
	302,  // 1145: xnap.v1.DrbsToBeSetupListModRqdSNterminatedItem.drb_id:type_name -> xnap.v1.DrbID
	621,  // 1146: xnap.v1.DrbsToBeSetupListModRqdSNterminatedItem.p_dcp_snlength:type_name -> xnap.v1.Pdcpsnlength
	1062, // 1147: xnap.v1.DrbsToBeSetupListModRqdSNterminatedItem.sn_ul_pdcp_uptnlinfo:type_name -> xnap.v1.UptransportParameters
	777,  // 1148: xnap.v1.DrbsToBeSetupListModRqdSNterminatedItem.d_rb_qo_s:type_name -> xnap.v1.QoSflowLevelQoSparameters
	1062, // 1149: xnap.v1.DrbsToBeSetupListModRqdSNterminatedItem.secondary_sn_ul_pdcp_up_tnlinfo:type_name -> xnap.v1.UptransportParameters
	26,   // 1150: xnap.v1.DrbsToBeSetupListModRqdSNterminatedItem.duplication_activation:type_name -> xnap.v1.DuplicationActivation
	1056, // 1151: xnap.v1.DrbsToBeSetupListModRqdSNterminatedItem.u_l_configuration:type_name -> xnap.v1.Ulconfiguration
	725,  // 1152: xnap.v1.DrbsToBeSetupListModRqdSNterminatedItem.qo_sflows_mappedto_drb_mod_rqd_snterminated:type_name -> xnap.v1.QoSflowsSetupMappedtoDrbModRqdSNterminated
	101,  // 1153: xnap.v1.DrbsToBeSetupListModRqdSNterminatedItem.r_lc_mode:type_name -> xnap.v1.Rlcmode
	723,  // 1154: xnap.v1.DrbsToBeSetupListModRqdSNterminatedItem.i_e_extensions:type_name -> xnap.v1.DrbsToBeSetupListModRqdSNterminatedItemExtIes
	727,  // 1155: xnap.v1.QoSflowsSetupMappedtoDrbModRqdSNterminated.value:type_name -> xnap.v1.QoSflowsSetupMappedtoDrbModRqdSNterminatedItem
	1074, // 1156: xnap.v1.QoSflowsSetupMappedtoDrbModRqdSNterminatedItemExtIes.value:type_name -> google.protobuf.Empty
	774,  // 1157: xnap.v1.QoSflowsSetupMappedtoDrbModRqdSNterminatedItem.qo_sflow_identifier:type_name -> xnap.v1.QoSflowIdentifier
	371,  // 1158: xnap.v1.QoSflowsSetupMappedtoDrbModRqdSNterminatedItem.m_cgrequested_gbrqo_sflow_info:type_name -> xnap.v1.GbrqoSflowInfo
	726,  // 1159: xnap.v1.QoSflowsSetupMappedtoDrbModRqdSNterminatedItem.i_e_extensions:type_name -> xnap.v1.QoSflowsSetupMappedtoDrbModRqdSNterminatedItemExtIes
	731,  // 1160: xnap.v1.DrbsToBeModifiedListModRqdSNterminated.value:type_name -> xnap.v1.DrbsToBeModifiedListModRqdSNterminatedItem
	143,  // 1161: xnap.v1.DrbsToBeModifiedListModRqdSNterminatedItemExtIesExtension.id_additional_pdcp_duplication_tnl_list:type_name -> xnap.v1.AdditionalPDcpDuplicationTNlList
	847,  // 1162: xnap.v1.DrbsToBeModifiedListModRqdSNterminatedItemExtIesExtension.id_rlcduplication_information:type_name -> xnap.v1.RlcduplicationInformation
	1076, // 1163: xnap.v1.DrbsToBeModifiedListModRqdSNterminatedItemExtIes.id:type_name -> xnap.v1.ProtocolIeID
	1077, // 1164: xnap.v1.DrbsToBeModifiedListModRqdSNterminatedItemExtIes.criticality:type_name -> xnap.v1.Criticality
	729,  // 1165: xnap.v1.DrbsToBeModifiedListModRqdSNterminatedItemExtIes.extension:type_name -> xnap.v1.DrbsToBeModifiedListModRqdSNterminatedItemExtIesExtension
	302,  // 1166: xnap.v1.DrbsToBeModifiedListModRqdSNterminatedItem.drb_id:type_name -> xnap.v1.DrbID
	1062, // 1167: xnap.v1.DrbsToBeModifiedListModRqdSNterminatedItem.s_n_ul_pdcp_up_tnlinfo:type_name -> xnap.v1.UptransportParameters
	777,  // 1168: xnap.v1.DrbsToBeModifiedListModRqdSNterminatedItem.d_rb_qo_s:type_name -> xnap.v1.QoSflowLevelQoSparameters
	1062, // 1169: xnap.v1.DrbsToBeModifiedListModRqdSNterminatedItem.secondary_sn_ul_pdcp_up_tnlinfo:type_name -> xnap.v1.UptransportParameters
	1056, // 1170: xnap.v1.DrbsToBeModifiedListModRqdSNterminatedItem.u_l_configuration:type_name -> xnap.v1.Ulconfiguration
	74,   // 1171: xnap.v1.DrbsToBeModifiedListModRqdSNterminatedItem.pdcp_duplication_configuration:type_name -> xnap.v1.PdcpduplicationConfiguration
	26,   // 1172: xnap.v1.DrbsToBeModifiedListModRqdSNterminatedItem.duplication_activation:type_name -> xnap.v1.DuplicationActivation
	732,  // 1173: xnap.v1.DrbsToBeModifiedListModRqdSNterminatedItem.qo_sflows_mappedto_drb_mod_rqd_snterminated:type_name -> xnap.v1.QoSflowsModifiedMappedtoDrbModRqdSNterminated
	730,  // 1174: xnap.v1.DrbsToBeModifiedListModRqdSNterminatedItem.i_e_extensions:type_name -> xnap.v1.DrbsToBeModifiedListModRqdSNterminatedItemExtIes
	734,  // 1175: xnap.v1.QoSflowsModifiedMappedtoDrbModRqdSNterminated.value:type_name -> xnap.v1.QoSflowsModifiedMappedtoDrbModRqdSNterminatedItem
	1074, // 1176: xnap.v1.QoSflowsModifiedMappedtoDrbModRqdSNterminatedItemExtIes.value:type_name -> google.protobuf.Empty
	774,  // 1177: xnap.v1.QoSflowsModifiedMappedtoDrbModRqdSNterminatedItem.qo_sflow_identifier:type_name -> xnap.v1.QoSflowIdentifier
	371,  // 1178: xnap.v1.QoSflowsModifiedMappedtoDrbModRqdSNterminatedItem.m_cgrequested_gbrqo_sflow_info:type_name -> xnap.v1.GbrqoSflowInfo
	733,  // 1179: xnap.v1.QoSflowsModifiedMappedtoDrbModRqdSNterminatedItem.i_e_extensions:type_name -> xnap.v1.QoSflowsModifiedMappedtoDrbModRqdSNterminatedItemExtIes
	1074, // 1180: xnap.v1.PdusessionResourceModConfirmInfoSNterminatedExtIes.value:type_name -> google.protobuf.Empty
	1061, // 1181: xnap.v1.PdusessionResourceModConfirmInfoSNterminated.u_l_ng_u_tnlat_upf:type_name -> xnap.v1.UptransportLayerInformation
	737,  // 1182: xnap.v1.PdusessionResourceModConfirmInfoSNterminated.d_rbs_admitted_list:type_name -> xnap.v1.DrbsAdmittedListModConfirmSNterminated
	304,  // 1183: xnap.v1.PdusessionResourceModConfirmInfoSNterminated.d_rbs_not_admitted_setup_modify_list:type_name -> xnap.v1.DrbListwithCause
	276,  // 1184: xnap.v1.PdusessionResourceModConfirmInfoSNterminated.dataforwardinginfo_target:type_name -> xnap.v1.DataForwardingInfoFromTargetNgrannode
	735,  // 1185: xnap.v1.PdusessionResourceModConfirmInfoSNterminated.i_e_extensions:type_name -> xnap.v1.PdusessionResourceModConfirmInfoSNterminatedExtIes
	739,  // 1186: xnap.v1.DrbsAdmittedListModConfirmSNterminated.value:type_name -> xnap.v1.DrbsAdmittedListModConfirmSNterminatedItem
	1074, // 1187: xnap.v1.DrbsAdmittedListModConfirmSNterminatedItemExtIes.value:type_name -> google.protobuf.Empty
	302,  // 1188: xnap.v1.DrbsAdmittedListModConfirmSNterminatedItem.drb_id:type_name -> xnap.v1.DrbID
	1062, // 1189: xnap.v1.DrbsAdmittedListModConfirmSNterminatedItem.m_n_dl_cg_up_tnlinfo:type_name -> xnap.v1.UptransportParameters
	1062, // 1190: xnap.v1.DrbsAdmittedListModConfirmSNterminatedItem.secondary_mn_dl_cg_up_tnlinfo:type_name -> xnap.v1.UptransportParameters
	411,  // 1191: xnap.v1.DrbsAdmittedListModConfirmSNterminatedItem.l_cid:type_name -> xnap.v1.Lcid
	738,  // 1192: xnap.v1.DrbsAdmittedListModConfirmSNterminatedItem.i_e_extensions:type_name -> xnap.v1.DrbsAdmittedListModConfirmSNterminatedItemExtIes
	1074, // 1193: xnap.v1.PdusessionResourceModRqdInfoMNterminatedExtIes.value:type_name -> google.protobuf.Empty
	742,  // 1194: xnap.v1.PdusessionResourceModRqdInfoMNterminated.d_rbs_to_be_modified:type_name -> xnap.v1.DrbsToBeModifiedListModRqdMNterminated
	304,  // 1195: xnap.v1.PdusessionResourceModRqdInfoMNterminated.d_rbs_to_be_released:type_name -> xnap.v1.DrbListwithCause
	740,  // 1196: xnap.v1.PdusessionResourceModRqdInfoMNterminated.i_e_extensions:type_name -> xnap.v1.PdusessionResourceModRqdInfoMNterminatedExtIes
	744,  // 1197: xnap.v1.DrbsToBeModifiedListModRqdMNterminated.value:type_name -> xnap.v1.DrbsToBeModifiedListModRqdMNterminatedItem
	1074, // 1198: xnap.v1.DrbsToBeModifiedListModRqdMNterminatedItemExtIes.value:type_name -> google.protobuf.Empty
	302,  // 1199: xnap.v1.DrbsToBeModifiedListModRqdMNterminatedItem.drb_id:type_name -> xnap.v1.DrbID
	1061, // 1200: xnap.v1.DrbsToBeModifiedListModRqdMNterminatedItem.s_n_dl_scg_up_tnlinfo:type_name -> xnap.v1.UptransportLayerInformation
	1061, // 1201: xnap.v1.DrbsToBeModifiedListModRqdMNterminatedItem.secondary_sn_dl_scg_up_tnlinfo:type_name -> xnap.v1.UptransportLayerInformation
	411,  // 1202: xnap.v1.DrbsToBeModifiedListModRqdMNterminatedItem.l_cid:type_name -> xnap.v1.Lcid
	845,  // 1203: xnap.v1.DrbsToBeModifiedListModRqdMNterminatedItem.rlc_status:type_name -> xnap.v1.RlcStatus
	743,  // 1204: xnap.v1.DrbsToBeModifiedListModRqdMNterminatedItem.i_e_extensions:type_name -> xnap.v1.DrbsToBeModifiedListModRqdMNterminatedItemExtIes
	1074, // 1205: xnap.v1.PdusessionResourceModConfirmInfoMNterminatedExtIes.value:type_name -> google.protobuf.Empty
	745,  // 1206: xnap.v1.PdusessionResourceModConfirmInfoMNterminated.i_e_extensions:type_name -> xnap.v1.PdusessionResourceModConfirmInfoMNterminatedExtIes
	1074, // 1207: xnap.v1.PdusessionResourceBearerSetupCompleteInfoSNterminatedExtIes.value:type_name -> google.protobuf.Empty
	750,  // 1208: xnap.v1.PdusessionResourceBearerSetupCompleteInfoSNterminated.d_rbs_to_be_setup_list:type_name -> xnap.v1.DrbsToBeSetupListBearerSetupCompleteSNterminatedItem
	747,  // 1209: xnap.v1.PdusessionResourceBearerSetupCompleteInfoSNterminated.i_e_extensions:type_name -> xnap.v1.PdusessionResourceBearerSetupCompleteInfoSNterminatedExtIes
	1074, // 1210: xnap.v1.DrbsToBeSetupListBearerSetupCompleteSNterminatedItemExtIes.value:type_name -> google.protobuf.Empty
	302,  // 1211: xnap.v1.DrbsToBeSetupListBearerSetupCompleteSNterminatedItem.d_rb_id:type_name -> xnap.v1.DrbID
	1061, // 1212: xnap.v1.DrbsToBeSetupListBearerSetupCompleteSNterminatedItem.m_n_xn_u_tnlinfoat_m:type_name -> xnap.v1.UptransportLayerInformation
	749,  // 1213: xnap.v1.DrbsToBeSetupListBearerSetupCompleteSNterminatedItem.i_e_extensions:type_name -> xnap.v1.DrbsToBeSetupListBearerSetupCompleteSNterminatedItemExtIes
	753,  // 1214: xnap.v1.PdusessionResourceSecondaryRatusageList.value:type_name -> xnap.v1.PdusessionResourceSecondaryRatusageItem
	1074, // 1215: xnap.v1.PdusessionResourceSecondaryRatusageItemExtIes.value:type_name -> google.protobuf.Empty
	756,  // 1216: xnap.v1.PdusessionResourceSecondaryRatusageItem.p_dusession_id:type_name -> xnap.v1.PdusessionID
	872,  // 1217: xnap.v1.PdusessionResourceSecondaryRatusageItem.secondary_ratusage_information:type_name -> xnap.v1.SecondaryRatusageInformation
	752,  // 1218: xnap.v1.PdusessionResourceSecondaryRatusageItem.i_e_extensions:type_name -> xnap.v1.PdusessionResourceSecondaryRatusageItemExtIes
	1074, // 1219: xnap.v1.PdusessionUsageReportExtIes.value:type_name -> google.protobuf.Empty
	78,   // 1220: xnap.v1.PdusessionUsageReport.r_attype:type_name -> xnap.v1.RattypePdusessionUsageReport
	1066, // 1221: xnap.v1.PdusessionUsageReport.p_dusession_timed_report_list:type_name -> xnap.v1.VolumeTimedReportList
	754,  // 1222: xnap.v1.PdusessionUsageReport.i_e_extensions:type_name -> xnap.v1.PdusessionUsageReportExtIes
	1074, // 1223: xnap.v1.PeriodicalExtIes.value:type_name -> google.protobuf.Empty
	759,  // 1224: xnap.v1.Periodical.i_e_extensions:type_name -> xnap.v1.PeriodicalExtIes
	594,  // 1225: xnap.v1.PcilistForMdt.value:type_name -> xnap.v1.Nrpci
	1075, // 1226: xnap.v1.PortNumber.value:type_name -> asn1.v1.BitString
	1074, // 1227: xnap.v1.ProtectedEUTraresourceIndicationExtIes.value:type_name -> google.protobuf.Empty
	152,  // 1228: xnap.v1.ProtectedEUTraresourceIndication.activation_sfn:type_name -> xnap.v1.ActivationSfn
	767,  // 1229: xnap.v1.ProtectedEUTraresourceIndication.protected_resource_list:type_name -> xnap.v1.ProtectedEUTraresourceList
	454,  // 1230: xnap.v1.ProtectedEUTraresourceIndication.mbsfn_control_region_length:type_name -> xnap.v1.MbsfncontrolRegionLength
	765,  // 1231: xnap.v1.ProtectedEUTraresourceIndication.i_e_extensions:type_name -> xnap.v1.ProtectedEUTraresourceIndicationExtIes
	769,  // 1232: xnap.v1.ProtectedEUTraresourceList.value:type_name -> xnap.v1.ProtectedEUTraresourceItem
	1074, // 1233: xnap.v1.ProtectedEUTraresourceItemExtIes.value:type_name -> google.protobuf.Empty
	81,   // 1234: xnap.v1.ProtectedEUTraresourceItem.resource_type:type_name -> xnap.v1.ResourceTypeProtectedEutraresourceItem
	1075, // 1235: xnap.v1.ProtectedEUTraresourceItem.intra_prbprotected_resource_footprint:type_name -> asn1.v1.BitString
	1075, // 1236: xnap.v1.ProtectedEUTraresourceItem.protected_footprint_frequency_pattern:type_name -> asn1.v1.BitString
	771,  // 1237: xnap.v1.ProtectedEUTraresourceItem.protected_footprint_time_pattern:type_name -> xnap.v1.ProtectedEUTrafootprintTimePattern
	768,  // 1238: xnap.v1.ProtectedEUTraresourceItem.i_e_extensions:type_name -> xnap.v1.ProtectedEUTraresourceItemExtIes
	1074, // 1239: xnap.v1.ProtectedEUTrafootprintTimePatternExtIes.value:type_name -> google.protobuf.Empty
	770,  // 1240: xnap.v1.ProtectedEUTrafootprintTimePattern.i_e_extensions:type_name -> xnap.v1.ProtectedEUTrafootprintTimePatternExtIes
	1074, // 1241: xnap.v1.QoScharacteristicsExtIes.value:type_name -> google.protobuf.Empty
	535,  // 1242: xnap.v1.QoScharacteristics.non_dynamic:type_name -> xnap.v1.NonDynamic5Qidescriptor
	328,  // 1243: xnap.v1.QoScharacteristics.dynamic:type_name -> xnap.v1.Dynamic5Qidescriptor
	772,  // 1244: xnap.v1.QoScharacteristics.choice_extension:type_name -> xnap.v1.QoScharacteristicsExtIes
	86,   // 1245: xnap.v1.QoSflowLevelQoSparametersExtIesExtension.id_qo_smonitoring_request:type_name -> xnap.v1.QosMonitoringRequest
	801,  // 1246: xnap.v1.QoSflowLevelQoSparametersExtIesExtension.id_qos_monitoring_reporting_frequency:type_name -> xnap.v1.QosMonitoringReportingFrequency
	87,   // 1247: xnap.v1.QoSflowLevelQoSparametersExtIesExtension.id_qo_smonitoring_disabled:type_name -> xnap.v1.QoSmonitoringDisabled
	1076, // 1248: xnap.v1.QoSflowLevelQoSparametersExtIes.id:type_name -> xnap.v1.ProtocolIeID
	1077, // 1249: xnap.v1.QoSflowLevelQoSparametersExtIes.criticality:type_name -> xnap.v1.Criticality
	775,  // 1250: xnap.v1.QoSflowLevelQoSparametersExtIes.extension:type_name -> xnap.v1.QoSflowLevelQoSparametersExtIesExtension
	773,  // 1251: xnap.v1.QoSflowLevelQoSparameters.qos_characteristics:type_name -> xnap.v1.QoScharacteristics
	151,  // 1252: xnap.v1.QoSflowLevelQoSparameters.allocation_and_retention_prio:type_name -> xnap.v1.AllocationandRetentionPriority
	371,  // 1253: xnap.v1.QoSflowLevelQoSparameters.g_brqo_sflow_info:type_name -> xnap.v1.GbrqoSflowInfo
	93,   // 1254: xnap.v1.QoSflowLevelQoSparameters.relective_qo_s:type_name -> xnap.v1.ReflectiveQoSattribute
	82,   // 1255: xnap.v1.QoSflowLevelQoSparameters.additional_qo_sflow_info:type_name -> xnap.v1.AdditionalQoSflowInfoQoSflowLevelQoSparameters
	776,  // 1256: xnap.v1.QoSflowLevelQoSparameters.i_e_extensions:type_name -> xnap.v1.QoSflowLevelQoSparametersExtIes
	780,  // 1257: xnap.v1.QoSflowNotificationControlIndicationInfo.value:type_name -> xnap.v1.QoSflowNotifyItem
	1074, // 1258: xnap.v1.QoSflowNotificationControlIndicationInfoExtIes.value:type_name -> google.protobuf.Empty
	774,  // 1259: xnap.v1.QoSflowNotifyItem.qos_flow_identifier:type_name -> xnap.v1.QoSflowIdentifier
	84,   // 1260: xnap.v1.QoSflowNotifyItem.notification_information:type_name -> xnap.v1.NotificationInformationQoSflowNotifyItem
	779,  // 1261: xnap.v1.QoSflowNotifyItem.i_e_extensions:type_name -> xnap.v1.QoSflowNotificationControlIndicationInfoExtIes
	783,  // 1262: xnap.v1.QoSflowsList.value:type_name -> xnap.v1.QoSflowItem
	1074, // 1263: xnap.v1.QoSflowItemExtIes.value:type_name -> google.protobuf.Empty
	774,  // 1264: xnap.v1.QoSflowItem.qfi:type_name -> xnap.v1.QoSflowIdentifier
	83,   // 1265: xnap.v1.QoSflowItem.qos_flow_mapping_indication:type_name -> xnap.v1.QoSflowMappingIndication
	782,  // 1266: xnap.v1.QoSflowItem.i_e_extension:type_name -> xnap.v1.QoSflowItemExtIes
	786,  // 1267: xnap.v1.QoSflowsListwithCause.value:type_name -> xnap.v1.QoSflowwithCauseItem
	1074, // 1268: xnap.v1.QoSflowwithCauseItemExtIes.value:type_name -> google.protobuf.Empty
	774,  // 1269: xnap.v1.QoSflowwithCauseItem.qfi:type_name -> xnap.v1.QoSflowIdentifier
	213,  // 1270: xnap.v1.QoSflowwithCauseItem.cause:type_name -> xnap.v1.Cause
	785,  // 1271: xnap.v1.QoSflowwithCauseItem.i_e_extension:type_name -> xnap.v1.QoSflowwithCauseItemExtIes
	1074, // 1272: xnap.v1.QoSMappingInformationExtIes.value:type_name -> google.protobuf.Empty
	1075, // 1273: xnap.v1.QoSMappingInformation.dscp:type_name -> asn1.v1.BitString
	1075, // 1274: xnap.v1.QoSMappingInformation.flow_label:type_name -> asn1.v1.BitString
	787,  // 1275: xnap.v1.QoSMappingInformation.i_e_extensions:type_name -> xnap.v1.QoSMappingInformationExtIes
	793,  // 1276: xnap.v1.QoSflowsAdmittedList.value:type_name -> xnap.v1.QoSflowsAdmittedItem
	1074, // 1277: xnap.v1.QoSflowsAdmittedItemExtIes.value:type_name -> google.protobuf.Empty
	774,  // 1278: xnap.v1.QoSflowsAdmittedItem.qfi:type_name -> xnap.v1.QoSflowIdentifier
	792,  // 1279: xnap.v1.QoSflowsAdmittedItem.i_e_extension:type_name -> xnap.v1.QoSflowsAdmittedItemExtIes
	797,  // 1280: xnap.v1.QoSflowsToBeSetupList.value:type_name -> xnap.v1.QoSflowsToBeSetupItem
	1023, // 1281: xnap.v1.QoSflowsToBeSetupItemExtIesExtension.id_tsctraffic_characteristics:type_name -> xnap.v1.TsctrafficCharacteristics
	91,   // 1282: xnap.v1.QoSflowsToBeSetupItemExtIesExtension.id_redundant_qo_sflow_indicator:type_name -> xnap.v1.RedundantQoSflowIndicator
	1076, // 1283: xnap.v1.QoSflowsToBeSetupItemExtIes.id:type_name -> xnap.v1.ProtocolIeID
	1077, // 1284: xnap.v1.QoSflowsToBeSetupItemExtIes.criticality:type_name -> xnap.v1.Criticality
	795,  // 1285: xnap.v1.QoSflowsToBeSetupItemExtIes.extension:type_name -> xnap.v1.QoSflowsToBeSetupItemExtIesExtension
	774,  // 1286: xnap.v1.QoSflowsToBeSetupItem.qfi:type_name -> xnap.v1.QoSflowIdentifier
	777,  // 1287: xnap.v1.QoSflowsToBeSetupItem.qos_flow_level_qo_sparameters:type_name -> xnap.v1.QoSflowLevelQoSparameters
	329,  // 1288: xnap.v1.QoSflowsToBeSetupItem.e_rab_id:type_name -> xnap.v1.ERAbID
	796,  // 1289: xnap.v1.QoSflowsToBeSetupItem.i_e_extension:type_name -> xnap.v1.QoSflowsToBeSetupItemExtIes
	800,  // 1290: xnap.v1.QoSflowsUsageReportList.value:type_name -> xnap.v1.QoSflowsUsageReportItem
	1074, // 1291: xnap.v1.QoSflowsUsageReportItemExtIes.value:type_name -> google.protobuf.Empty
	774,  // 1292: xnap.v1.QoSflowsUsageReportItem.qos_flow_identifier:type_name -> xnap.v1.QoSflowIdentifier
	85,   // 1293: xnap.v1.QoSflowsUsageReportItem.r_attype:type_name -> xnap.v1.RattypeQoSflowsUsageReportItem
	1066, // 1294: xnap.v1.QoSflowsUsageReportItem.qo_sflows_timed_report_list:type_name -> xnap.v1.VolumeTimedReportList
	799,  // 1295: xnap.v1.QoSflowsUsageReportItem.i_e_extensions:type_name -> xnap.v1.QoSflowsUsageReportItemExtIes
	804,  // 1296: xnap.v1.RachreportInformation.value:type_name -> xnap.v1.RachreportListItem
	1074, // 1297: xnap.v1.RachreportListItemExtIes.value:type_name -> google.protobuf.Empty
	805,  // 1298: xnap.v1.RachreportListItem.r_achreport:type_name -> xnap.v1.RachreportContainer
	803,  // 1299: xnap.v1.RachreportListItem.i_e_extensions:type_name -> xnap.v1.RachreportListItemExtIes
	1074, // 1300: xnap.v1.RadioResourceStatusExtIes.value:type_name -> google.protobuf.Empty
	539,  // 1301: xnap.v1.RadioResourceStatus.ng_e_nb_radio_resource_status:type_name -> xnap.v1.NgeNbRadioResourceStatus
	377,  // 1302: xnap.v1.RadioResourceStatus.g_nb_radio_resource_status:type_name -> xnap.v1.GnbRadioResourceStatus
	806,  // 1303: xnap.v1.RadioResourceStatus.choice_extension:type_name -> xnap.v1.RadioResourceStatusExtIes
	1074, // 1304: xnap.v1.RanareaIdExtIes.value:type_name -> google.protobuf.Empty
	986,  // 1305: xnap.v1.RanareaId.t_ac:type_name -> xnap.v1.Tac
	808,  // 1306: xnap.v1.RanareaId.r_anac:type_name -> xnap.v1.Ranac
	809,  // 1307: xnap.v1.RanareaId.i_e_extensions:type_name -> xnap.v1.RanareaIdExtIes
	810,  // 1308: xnap.v1.RanareaIdList.value:type_name -> xnap.v1.RanareaId
	1074, // 1309: xnap.v1.RanpagingAreaExtIes.value:type_name -> google.protobuf.Empty
	761,  // 1310: xnap.v1.RanpagingArea.p_lmn_identity:type_name -> xnap.v1.PlmnIdentity
	815,  // 1311: xnap.v1.RanpagingArea.r_anpaging_area_choice:type_name -> xnap.v1.RanpagingAreaChoice
	812,  // 1312: xnap.v1.RanpagingArea.i_e_extensions:type_name -> xnap.v1.RanpagingAreaExtIes
	1074, // 1313: xnap.v1.RanpagingAreaChoiceExtIes.value:type_name -> google.protobuf.Empty
	576,  // 1314: xnap.v1.RanpagingAreaChoice.cell_list:type_name -> xnap.v1.NgRAnCellIdentityListinRanpagingArea
	811,  // 1315: xnap.v1.RanpagingAreaChoice.r_anarea_id_list:type_name -> xnap.v1.RanareaIdList
	814,  // 1316: xnap.v1.RanpagingAreaChoice.choice_extension:type_name -> xnap.v1.RanpagingAreaChoiceExtIes
	1074, // 1317: xnap.v1.RanpagingAttemptInfoExtIes.value:type_name -> google.protobuf.Empty
	89,   // 1318: xnap.v1.RanpagingAttemptInfo.next_paging_area_scope:type_name -> xnap.v1.NextPagingAreaScopeRanpagingAttemptInfo
	816,  // 1319: xnap.v1.RanpagingAttemptInfo.i_e_extensions:type_name -> xnap.v1.RanpagingAttemptInfoExtIes
	1074, // 1320: xnap.v1.RedundantPdusessionInformationExtIes.value:type_name -> google.protobuf.Empty
	92,   // 1321: xnap.v1.RedundantPdusessionInformation.r_sn:type_name -> xnap.v1.Rsn
	818,  // 1322: xnap.v1.RedundantPdusessionInformation.i_e_extensions:type_name -> xnap.v1.RedundantPdusessionInformationExtIes
	760,  // 1323: xnap.v1.ReportType.periodical:type_name -> xnap.v1.Periodical
	342,  // 1324: xnap.v1.ReportType.event_triggered:type_name -> xnap.v1.EventTriggered
	1075, // 1325: xnap.v1.ReportCharacteristics.value:type_name -> asn1.v1.BitString
	1074, // 1326: xnap.v1.ReservedSubframePatternExtIes.value:type_name -> google.protobuf.Empty
	100,  // 1327: xnap.v1.ReservedSubframePattern.subframe_type:type_name -> xnap.v1.SubframeTypeReservedSubframePattern
	1075, // 1328: xnap.v1.ReservedSubframePattern.reserved_subframe_pattern:type_name -> asn1.v1.BitString
	454,  // 1329: xnap.v1.ReservedSubframePattern.mbsfn_control_region_length:type_name -> xnap.v1.MbsfncontrolRegionLength
	824,  // 1330: xnap.v1.ReservedSubframePattern.i_e_extension:type_name -> xnap.v1.ReservedSubframePatternExtIes
	1074, // 1331: xnap.v1.ResetRequestTypeInfoExtIes.value:type_name -> google.protobuf.Empty
	829,  // 1332: xnap.v1.ResetRequestTypeInfo.full_reset:type_name -> xnap.v1.ResetRequestTypeInfoFull
	831,  // 1333: xnap.v1.ResetRequestTypeInfo.partial_reset:type_name -> xnap.v1.ResetRequestTypeInfoPartial
	826,  // 1334: xnap.v1.ResetRequestTypeInfo.choice_extension:type_name -> xnap.v1.ResetRequestTypeInfoExtIes
	1074, // 1335: xnap.v1.ResetRequestTypeInfoFullExtIes.value:type_name -> google.protobuf.Empty
	828,  // 1336: xnap.v1.ResetRequestTypeInfoFull.i_e_extension:type_name -> xnap.v1.ResetRequestTypeInfoFullExtIes
	1074, // 1337: xnap.v1.ResetRequestTypeInfoPartialExtIes.value:type_name -> google.protobuf.Empty
	832,  // 1338: xnap.v1.ResetRequestTypeInfoPartial.ue_contexts_to_be_released_list:type_name -> xnap.v1.ResetRequestPartialReleaseList
	830,  // 1339: xnap.v1.ResetRequestTypeInfoPartial.i_e_extension:type_name -> xnap.v1.ResetRequestTypeInfoPartialExtIes
	834,  // 1340: xnap.v1.ResetRequestPartialReleaseList.value:type_name -> xnap.v1.ResetRequestPartialReleaseItem
	1074, // 1341: xnap.v1.ResetRequestPartialReleaseItemExtIes.value:type_name -> google.protobuf.Empty
	530,  // 1342: xnap.v1.ResetRequestPartialReleaseItem.ng_ran_node1_uexn_apid:type_name -> xnap.v1.NgRAnnodeUexnApid
	530,  // 1343: xnap.v1.ResetRequestPartialReleaseItem.ng_ran_node2_uexn_apid:type_name -> xnap.v1.NgRAnnodeUexnApid
	833,  // 1344: xnap.v1.ResetRequestPartialReleaseItem.i_e_extensions:type_name -> xnap.v1.ResetRequestPartialReleaseItemExtIes
	1074, // 1345: xnap.v1.ResetResponseTypeInfoExtIes.value:type_name -> google.protobuf.Empty
	838,  // 1346: xnap.v1.ResetResponseTypeInfo.full_reset:type_name -> xnap.v1.ResetResponseTypeInfoFull
	840,  // 1347: xnap.v1.ResetResponseTypeInfo.partial_reset:type_name -> xnap.v1.ResetResponseTypeInfoPartial
	835,  // 1348: xnap.v1.ResetResponseTypeInfo.choice_extension:type_name -> xnap.v1.ResetResponseTypeInfoExtIes
	1074, // 1349: xnap.v1.ResetResponseTypeInfoFullExtIes.value:type_name -> google.protobuf.Empty
	837,  // 1350: xnap.v1.ResetResponseTypeInfoFull.i_e_extension:type_name -> xnap.v1.ResetResponseTypeInfoFullExtIes
	1074, // 1351: xnap.v1.ResetResponseTypeInfoPartialExtIes.value:type_name -> google.protobuf.Empty
	841,  // 1352: xnap.v1.ResetResponseTypeInfoPartial.ue_contexts_admitted_to_be_released_list:type_name -> xnap.v1.ResetResponsePartialReleaseList
	839,  // 1353: xnap.v1.ResetResponseTypeInfoPartial.i_e_extension:type_name -> xnap.v1.ResetResponseTypeInfoPartialExtIes
	843,  // 1354: xnap.v1.ResetResponsePartialReleaseList.value:type_name -> xnap.v1.ResetResponsePartialReleaseItem
	1074, // 1355: xnap.v1.ResetResponsePartialReleaseItemExtIes.value:type_name -> google.protobuf.Empty
	530,  // 1356: xnap.v1.ResetResponsePartialReleaseItem.ng_ran_node1_uexn_apid:type_name -> xnap.v1.NgRAnnodeUexnApid
	530,  // 1357: xnap.v1.ResetResponsePartialReleaseItem.ng_ran_node2_uexn_apid:type_name -> xnap.v1.NgRAnnodeUexnApid
	842,  // 1358: xnap.v1.ResetResponsePartialReleaseItem.i_e_extensions:type_name -> xnap.v1.ResetResponsePartialReleaseItemExtIes
	1074, // 1359: xnap.v1.RlcStatusExtIes.value:type_name -> google.protobuf.Empty
	104,  // 1360: xnap.v1.RlcStatus.reestablishment_indication:type_name -> xnap.v1.ReestablishmentIndication
	844,  // 1361: xnap.v1.RlcStatus.i_e_extensions:type_name -> xnap.v1.RlcStatusExtIes
	1074, // 1362: xnap.v1.RlcduplicationInformationItemExtIes.value:type_name -> google.protobuf.Empty
	848,  // 1363: xnap.v1.RlcduplicationInformation.r_lcduplication_state_list:type_name -> xnap.v1.RlcduplicationStateList
	102,  // 1364: xnap.v1.RlcduplicationInformation.r_lc_primary_indicator:type_name -> xnap.v1.RlcprimaryIndicatorRlcduplicationInformation
	846,  // 1365: xnap.v1.RlcduplicationInformation.i_e_extensions:type_name -> xnap.v1.RlcduplicationInformationItemExtIes
	850,  // 1366: xnap.v1.RlcduplicationStateList.value:type_name -> xnap.v1.RlcduplicationStateItem
	1074, // 1367: xnap.v1.RlcduplicationStateItemExtIes.value:type_name -> google.protobuf.Empty
	103,  // 1368: xnap.v1.RlcduplicationStateItem.duplication_state:type_name -> xnap.v1.DuplicationStateRlcduplicationStateItem
	849,  // 1369: xnap.v1.RlcduplicationStateItem.i_e_extensions:type_name -> xnap.v1.RlcduplicationStateItemExtIes
	1074, // 1370: xnap.v1.RrcconnectionsExtIes.value:type_name -> google.protobuf.Empty
	532,  // 1371: xnap.v1.Rrcconnections.noof_rrcconnections:type_name -> xnap.v1.NoofRrcconnections
	177,  // 1372: xnap.v1.Rrcconnections.available_rrcconnection_capacity_value:type_name -> xnap.v1.AvailableRrcconnectionCapacityValue
	852,  // 1373: xnap.v1.Rrcconnections.i_e_extensions:type_name -> xnap.v1.RrcconnectionsExtIes
	1074, // 1374: xnap.v1.RrcreestabinitiatedExtIes.value:type_name -> google.protobuf.Empty
	857,  // 1375: xnap.v1.Rrcreestabinitiated.r_rrcreestab_initiated_reporting:type_name -> xnap.v1.RrcreestabInitiatedReporting
	854,  // 1376: xnap.v1.Rrcreestabinitiated.i_e_extensions:type_name -> xnap.v1.RrcreestabinitiatedExtIes
	1074, // 1377: xnap.v1.RrcreestabInitiatedReportingExtIes.value:type_name -> google.protobuf.Empty
	859,  // 1378: xnap.v1.RrcreestabInitiatedReporting.r_rcreestab_reporting_wo_uerlfreport:type_name -> xnap.v1.RrcreestabInitiatedReportingwoUErlfreport
	861,  // 1379: xnap.v1.RrcreestabInitiatedReporting.r_rcreestab_reporting_with_uerlfreport:type_name -> xnap.v1.RrcreestabInitiatedReportingwithUErlfreport
	856,  // 1380: xnap.v1.RrcreestabInitiatedReporting.choice_extension:type_name -> xnap.v1.RrcreestabInitiatedReportingExtIes
	1074, // 1381: xnap.v1.RrcreestabInitiatedReportingwoUErlfreportExtIes.value:type_name -> google.protobuf.Empty
	529,  // 1382: xnap.v1.RrcreestabInitiatedReportingwoUErlfreport.failure_cell_pci:type_name -> xnap.v1.NgRAnCellPci
	385,  // 1383: xnap.v1.RrcreestabInitiatedReportingwoUErlfreport.reestab_cell_cgi:type_name -> xnap.v1.GlobalNgRAncellID
	262,  // 1384: xnap.v1.RrcreestabInitiatedReportingwoUErlfreport.c_rnti:type_name -> xnap.v1.CRNti
	448,  // 1385: xnap.v1.RrcreestabInitiatedReportingwoUErlfreport.short_mac_i:type_name -> xnap.v1.MacI
	858,  // 1386: xnap.v1.RrcreestabInitiatedReportingwoUErlfreport.i_e_extensions:type_name -> xnap.v1.RrcreestabInitiatedReportingwoUErlfreportExtIes
	1074, // 1387: xnap.v1.RrcreestabInitiatedReportingwithUErlfreportExtIes.value:type_name -> google.protobuf.Empty
	1050, // 1388: xnap.v1.RrcreestabInitiatedReportingwithUErlfreport.u_erlfreport_container:type_name -> xnap.v1.UerlfreportContainer
	860,  // 1389: xnap.v1.RrcreestabInitiatedReportingwithUErlfreport.i_e_extensions:type_name -> xnap.v1.RrcreestabInitiatedReportingwithUErlfreportExtIes
	1074, // 1390: xnap.v1.RrcsetupinitiatedExtIes.value:type_name -> google.protobuf.Empty
	865,  // 1391: xnap.v1.Rrcsetupinitiated.r_rrcsetup_initiated_reporting:type_name -> xnap.v1.RrcsetupInitiatedReporting
	1050, // 1392: xnap.v1.Rrcsetupinitiated.u_erlfreport_container:type_name -> xnap.v1.UerlfreportContainer
	862,  // 1393: xnap.v1.Rrcsetupinitiated.i_e_extensions:type_name -> xnap.v1.RrcsetupinitiatedExtIes
	1074, // 1394: xnap.v1.RrcsetupInitiatedReportingExtIes.value:type_name -> google.protobuf.Empty
	867,  // 1395: xnap.v1.RrcsetupInitiatedReporting.r_rcsetup_reporting_with_uerlfreport:type_name -> xnap.v1.RrcsetupInitiatedReportingwithUErlfreport
	864,  // 1396: xnap.v1.RrcsetupInitiatedReporting.choice_extension:type_name -> xnap.v1.RrcsetupInitiatedReportingExtIes
	1074, // 1397: xnap.v1.RrcsetupInitiatedReportingwithUErlfreportExtIes.value:type_name -> google.protobuf.Empty
	1050, // 1398: xnap.v1.RrcsetupInitiatedReportingwithUErlfreport.u_erlfreport_container:type_name -> xnap.v1.UerlfreportContainer
	866,  // 1399: xnap.v1.RrcsetupInitiatedReportingwithUErlfreport.i_e_extensions:type_name -> xnap.v1.RrcsetupInitiatedReportingwithUErlfreportExtIes
	1074, // 1400: xnap.v1.SecondarydataForwardingInfoFromTargetItemExtIes.value:type_name -> google.protobuf.Empty
	276,  // 1401: xnap.v1.SecondarydataForwardingInfoFromTargetItem.secondarydata_forwarding_info_from_target:type_name -> xnap.v1.DataForwardingInfoFromTargetNgrannode
	868,  // 1402: xnap.v1.SecondarydataForwardingInfoFromTargetItem.i_e_extensions:type_name -> xnap.v1.SecondarydataForwardingInfoFromTargetItemExtIes
	869,  // 1403: xnap.v1.SecondarydataForwardingInfoFromTargetList.value:type_name -> xnap.v1.SecondarydataForwardingInfoFromTargetItem
	1074, // 1404: xnap.v1.SecondaryRatusageInformationExtIes.value:type_name -> google.protobuf.Empty
	755,  // 1405: xnap.v1.SecondaryRatusageInformation.p_dusession_usage_report:type_name -> xnap.v1.PdusessionUsageReport
	798,  // 1406: xnap.v1.SecondaryRatusageInformation.qos_flows_usage_report_list:type_name -> xnap.v1.QoSflowsUsageReportList
	871,  // 1407: xnap.v1.SecondaryRatusageInformation.i_e_extension:type_name -> xnap.v1.SecondaryRatusageInformationExtIes
	1074, // 1408: xnap.v1.SecurityIndicationExtIes.value:type_name -> google.protobuf.Empty
	110,  // 1409: xnap.v1.SecurityIndication.integrity_protection_indication:type_name -> xnap.v1.IntegrityProtectionIndicationSecurityIndication
	111,  // 1410: xnap.v1.SecurityIndication.confidentiality_protection_indication:type_name -> xnap.v1.ConfidentialityProtectionIndicationSecurityIndication
	453,  // 1411: xnap.v1.SecurityIndication.maximum_ipdatarate:type_name -> xnap.v1.MaximumIpdatarate
	873,  // 1412: xnap.v1.SecurityIndication.i_e_extensions:type_name -> xnap.v1.SecurityIndicationExtIes
	1074, // 1413: xnap.v1.SecurityResultExtIes.value:type_name -> google.protobuf.Empty
	112,  // 1414: xnap.v1.SecurityResult.integrity_protection_result:type_name -> xnap.v1.IntegrityProtectionResultSecurityResult
	113,  // 1415: xnap.v1.SecurityResult.confidentiality_protection_result:type_name -> xnap.v1.ConfidentialityProtectionResultSecurityResult
	875,  // 1416: xnap.v1.SecurityResult.i_e_extensions:type_name -> xnap.v1.SecurityResultExtIes
	1074, // 1417: xnap.v1.SensorMeasurementConfigurationExtIes.value:type_name -> google.protobuf.Empty
	114,  // 1418: xnap.v1.SensorMeasurementConfiguration.sensor_meas_config:type_name -> xnap.v1.SensorMeasConfig
	879,  // 1419: xnap.v1.SensorMeasurementConfiguration.sensor_meas_config_name_list:type_name -> xnap.v1.SensorMeasConfigNameList
	877,  // 1420: xnap.v1.SensorMeasurementConfiguration.i_e_extensions:type_name -> xnap.v1.SensorMeasurementConfigurationExtIes
	881,  // 1421: xnap.v1.SensorMeasConfigNameList.value:type_name -> xnap.v1.SensorName
	1074, // 1422: xnap.v1.SensorNameConfigExtIes.value:type_name -> google.protobuf.Empty
	115,  // 1423: xnap.v1.SensorName.uncompensated_barometric_config:type_name -> xnap.v1.UncompensatedBarometricConfigSensorName
	116,  // 1424: xnap.v1.SensorName.ue_speed_config:type_name -> xnap.v1.UeSpeedConfigSensorName
	117,  // 1425: xnap.v1.SensorName.ue_orientation_config:type_name -> xnap.v1.UeOrientationConfigSensorName
	880,  // 1426: xnap.v1.SensorName.i_e_extensions:type_name -> xnap.v1.SensorNameConfigExtIes
	183,  // 1427: xnap.v1.ServedCellInformationEUTraExtIesExtension.id_bplmn_id_info_eutra:type_name -> xnap.v1.BplmnIDInfoEUtra
	567,  // 1428: xnap.v1.ServedCellInformationEUTraExtIesExtension.id_nprachconfiguration:type_name -> xnap.v1.Nprachconfiguration
	1076, // 1429: xnap.v1.ServedCellInformationEUTraExtIes.id:type_name -> xnap.v1.ProtocolIeID
	1077, // 1430: xnap.v1.ServedCellInformationEUTraExtIes.criticality:type_name -> xnap.v1.Criticality
	882,  // 1431: xnap.v1.ServedCellInformationEUTraExtIes.extension:type_name -> xnap.v1.ServedCellInformationEUTraExtIesExtension
	336,  // 1432: xnap.v1.ServedCellInformationEUTra.e_utra_pci:type_name -> xnap.v1.EUTrapci
	333,  // 1433: xnap.v1.ServedCellInformationEUTra.e_utra_cgi:type_name -> xnap.v1.EUTraCGi
	986,  // 1434: xnap.v1.ServedCellInformationEUTra.tac:type_name -> xnap.v1.Tac
	808,  // 1435: xnap.v1.ServedCellInformationEUTra.ranac:type_name -> xnap.v1.Ranac
	886,  // 1436: xnap.v1.ServedCellInformationEUTra.broadcast_plmns:type_name -> xnap.v1.ServedCellInformationEUTraperBplmn
	888,  // 1437: xnap.v1.ServedCellInformationEUTra.e_utra_mode_info:type_name -> xnap.v1.ServedCellInformationEUTraModeInfo
	63,   // 1438: xnap.v1.ServedCellInformationEUTra.numberof_antenna_ports:type_name -> xnap.v1.NumberOfAntennaPortsEUTra
	338,  // 1439: xnap.v1.ServedCellInformationEUTra.prach_configuration:type_name -> xnap.v1.EUTraprachconfiguration
	457,  // 1440: xnap.v1.ServedCellInformationEUTra.m_bsfnsubframe_info:type_name -> xnap.v1.MbsfnsubframeInfoEUTra
	335,  // 1441: xnap.v1.ServedCellInformationEUTra.multiband_info:type_name -> xnap.v1.EUTramultibandInfoList
	118,  // 1442: xnap.v1.ServedCellInformationEUTra.freq_band_indicator_priority:type_name -> xnap.v1.FreqBandIndicatorPriorityServedCellInformationEutra
	119,  // 1443: xnap.v1.ServedCellInformationEUTra.bandwidth_reduced_si:type_name -> xnap.v1.BandwidthReducedSiservedCellInformationEutra
	766,  // 1444: xnap.v1.ServedCellInformationEUTra.protected_e_utraresource_indication:type_name -> xnap.v1.ProtectedEUTraresourceIndication
	883,  // 1445: xnap.v1.ServedCellInformationEUTra.i_e_extensions:type_name -> xnap.v1.ServedCellInformationEUTraExtIes
	1074, // 1446: xnap.v1.ServedCellInformationEUTraperBplmnExtIes.value:type_name -> google.protobuf.Empty
	761,  // 1447: xnap.v1.ServedCellInformationEUTraperBplmn.plmn_id:type_name -> xnap.v1.PlmnIdentity
	885,  // 1448: xnap.v1.ServedCellInformationEUTraperBplmn.i_e_extensions:type_name -> xnap.v1.ServedCellInformationEUTraperBplmnExtIes
	1074, // 1449: xnap.v1.ServedCellInformationEUTraModeInfoExtIes.value:type_name -> google.protobuf.Empty
	891,  // 1450: xnap.v1.ServedCellInformationEUTraModeInfo.fdd:type_name -> xnap.v1.ServedCellInformationEUTraFDdinfo
	894,  // 1451: xnap.v1.ServedCellInformationEUTraModeInfo.tdd:type_name -> xnap.v1.ServedCellInformationEUTraTDdinfo
	887,  // 1452: xnap.v1.ServedCellInformationEUTraModeInfo.choice_extension:type_name -> xnap.v1.ServedCellInformationEUTraModeInfoExtIes
	65,   // 1453: xnap.v1.ServedCellInformationEUTraFDdinfoExtIesExtension.id_offset_of_nbiot_channel_number_to_dl_earfcn:type_name -> xnap.v1.OffsetOfNbiotChannelNumberToEarfcn
	65,   // 1454: xnap.v1.ServedCellInformationEUTraFDdinfoExtIesExtension.id_offset_of_nbiot_channel_number_to_ul_earfcn:type_name -> xnap.v1.OffsetOfNbiotChannelNumberToEarfcn
	1076, // 1455: xnap.v1.ServedCellInformationEUTraFDdinfoExtIes.id:type_name -> xnap.v1.ProtocolIeID
	1077, // 1456: xnap.v1.ServedCellInformationEUTraFDdinfoExtIes.criticality:type_name -> xnap.v1.Criticality
	889,  // 1457: xnap.v1.ServedCellInformationEUTraFDdinfoExtIes.extension:type_name -> xnap.v1.ServedCellInformationEUTraFDdinfoExtIesExtension
	330,  // 1458: xnap.v1.ServedCellInformationEUTraFDdinfo.ul_earfcn:type_name -> xnap.v1.EUTraarfcn
	330,  // 1459: xnap.v1.ServedCellInformationEUTraFDdinfo.dl_earfcn:type_name -> xnap.v1.EUTraarfcn
	29,   // 1460: xnap.v1.ServedCellInformationEUTraFDdinfo.ul_e_utra_tx_bw:type_name -> xnap.v1.EUTratransmissionBandwidth
	29,   // 1461: xnap.v1.ServedCellInformationEUTraFDdinfo.dl_e_utra_tx_bw:type_name -> xnap.v1.EUTratransmissionBandwidth
	890,  // 1462: xnap.v1.ServedCellInformationEUTraFDdinfo.i_e_extensions:type_name -> xnap.v1.ServedCellInformationEUTraFDdinfoExtIes
	65,   // 1463: xnap.v1.ServedCellInformationEUTraTDdinfoExtIesExtension.id_offset_of_nbiot_channel_number_to_dl_earfcn:type_name -> xnap.v1.OffsetOfNbiotChannelNumberToEarfcn
	55,   // 1464: xnap.v1.ServedCellInformationEUTraTDdinfoExtIesExtension.id_nbio_t_ul_dl_alignment_offset:type_name -> xnap.v1.NbioTULDLAlignmentOffset
	1076, // 1465: xnap.v1.ServedCellInformationEUTraTDdinfoExtIes.id:type_name -> xnap.v1.ProtocolIeID
	1077, // 1466: xnap.v1.ServedCellInformationEUTraTDdinfoExtIes.criticality:type_name -> xnap.v1.Criticality
	892,  // 1467: xnap.v1.ServedCellInformationEUTraTDdinfoExtIes.extension:type_name -> xnap.v1.ServedCellInformationEUTraTDdinfoExtIesExtension
	330,  // 1468: xnap.v1.ServedCellInformationEUTraTDdinfo.earfcn:type_name -> xnap.v1.EUTraarfcn
	29,   // 1469: xnap.v1.ServedCellInformationEUTraTDdinfo.e_utra_tx_bw:type_name -> xnap.v1.EUTratransmissionBandwidth
	120,  // 1470: xnap.v1.ServedCellInformationEUTraTDdinfo.subframe_assignmnet:type_name -> xnap.v1.SubframeAssignmnetServedCellInformationEutratddinfo
	950,  // 1471: xnap.v1.ServedCellInformationEUTraTDdinfo.special_subframe_info:type_name -> xnap.v1.SpecialSubframeInfoEUTra
	893,  // 1472: xnap.v1.ServedCellInformationEUTraTDdinfo.i_e_extensions:type_name -> xnap.v1.ServedCellInformationEUTraTDdinfoExtIes
	897,  // 1473: xnap.v1.ServedCellsEUTra.value:type_name -> xnap.v1.ServedCellsEUTraItem
	1074, // 1474: xnap.v1.ServedCellsEUTraItemExtIes.value:type_name -> google.protobuf.Empty
	884,  // 1475: xnap.v1.ServedCellsEUTraItem.served_cell_info_e_utra:type_name -> xnap.v1.ServedCellInformationEUTra
	512,  // 1476: xnap.v1.ServedCellsEUTraItem.neighbour_info_nr:type_name -> xnap.v1.NeighbourInformationNR
	509,  // 1477: xnap.v1.ServedCellsEUTraItem.neighbour_info_e_utra:type_name -> xnap.v1.NeighbourInformationEUTra
	896,  // 1478: xnap.v1.ServedCellsEUTraItem.i_e_extensions:type_name -> xnap.v1.ServedCellsEUTraItemExtIes
	1074, // 1479: xnap.v1.ServedCellsToUpdateEUTraExtIes.value:type_name -> google.protobuf.Empty
	895,  // 1480: xnap.v1.ServedCellsToUpdateEUTra.served_cells_to_add_e_utra:type_name -> xnap.v1.ServedCellsEUTra
	900,  // 1481: xnap.v1.ServedCellsToUpdateEUTra.served_cells_to_modify_e_utra:type_name -> xnap.v1.ServedCellsToModifyEUTra
	333,  // 1482: xnap.v1.ServedCellsToUpdateEUTra.served_cells_to_delete_e_utra:type_name -> xnap.v1.EUTraCGi
	898,  // 1483: xnap.v1.ServedCellsToUpdateEUTra.i_e_extensions:type_name -> xnap.v1.ServedCellsToUpdateEUTraExtIes
	902,  // 1484: xnap.v1.ServedCellsToModifyEUTra.value:type_name -> xnap.v1.ServedCellsToModifyEUTraItem
	1074, // 1485: xnap.v1.ServedcellsToModifyEUTraItemExtIes.value:type_name -> google.protobuf.Empty
	333,  // 1486: xnap.v1.ServedCellsToModifyEUTraItem.old_ecgi:type_name -> xnap.v1.EUTraCGi
	884,  // 1487: xnap.v1.ServedCellsToModifyEUTraItem.served_cell_info_e_utra:type_name -> xnap.v1.ServedCellInformationEUTra
	512,  // 1488: xnap.v1.ServedCellsToModifyEUTraItem.neighbour_info_nr:type_name -> xnap.v1.NeighbourInformationNR
	509,  // 1489: xnap.v1.ServedCellsToModifyEUTraItem.neighbour_info_e_utra:type_name -> xnap.v1.NeighbourInformationEUTra
	121,  // 1490: xnap.v1.ServedCellsToModifyEUTraItem.deactivation_indication:type_name -> xnap.v1.DeactivationindicationServedCellsToModifyEutraitem
	901,  // 1491: xnap.v1.ServedCellsToModifyEUTraItem.i_e_extensions:type_name -> xnap.v1.ServedcellsToModifyEUTraItemExtIes
	186,  // 1492: xnap.v1.ServedCellInformationNRExtIesExtension.id_bplmn_id_info_nr:type_name -> xnap.v1.BplmnIDInfoNR
	14,   // 1493: xnap.v1.ServedCellInformationNRExtIesExtension.id_configured_tacindication:type_name -> xnap.v1.ConfiguredTacindication
	960,  // 1494: xnap.v1.ServedCellInformationNRExtIesExtension.id_ssb_positions_in_burst:type_name -> xnap.v1.SsbPositionsInBurst
	525,  // 1495: xnap.v1.ServedCellInformationNRExtIesExtension.id_nrcell_prachconfig:type_name -> xnap.v1.NrcellPrachconfig
	545,  // 1496: xnap.v1.ServedCellInformationNRExtIesExtension.id_npn_broadcast_information:type_name -> xnap.v1.NpnBroadcastInformation
	18,   // 1497: xnap.v1.ServedCellInformationNRExtIesExtension.id_csi_rstransmission_indication:type_name -> xnap.v1.CsiRStransmissionIndication
	907,  // 1498: xnap.v1.ServedCellInformationNRExtIesExtension.id_sfn_offset:type_name -> xnap.v1.SfnOffset
	1076, // 1499: xnap.v1.ServedCellInformationNRExtIes.id:type_name -> xnap.v1.ProtocolIeID
	1077, // 1500: xnap.v1.ServedCellInformationNRExtIes.criticality:type_name -> xnap.v1.Criticality
	903,  // 1501: xnap.v1.ServedCellInformationNRExtIes.extension:type_name -> xnap.v1.ServedCellInformationNRExtIesExtension
	594,  // 1502: xnap.v1.ServedCellInformationNR.nr_pci:type_name -> xnap.v1.Nrpci
	578,  // 1503: xnap.v1.ServedCellInformationNR.cell_id:type_name -> xnap.v1.NrCGi
	986,  // 1504: xnap.v1.ServedCellInformationNR.tac:type_name -> xnap.v1.Tac
	808,  // 1505: xnap.v1.ServedCellInformationNR.ranac:type_name -> xnap.v1.Ranac
	197,  // 1506: xnap.v1.ServedCellInformationNR.broadcast_plmn:type_name -> xnap.v1.BroadcastPlmns
	587,  // 1507: xnap.v1.ServedCellInformationNR.nr_mode_info:type_name -> xnap.v1.NrmodeInfo
	250,  // 1508: xnap.v1.ServedCellInformationNR.connectivity_support:type_name -> xnap.v1.ConnectivitySupport
	904,  // 1509: xnap.v1.ServedCellInformationNR.i_e_extensions:type_name -> xnap.v1.ServedCellInformationNRExtIes
	1074, // 1510: xnap.v1.SfnOffsetExtIes.value:type_name -> google.protobuf.Empty
	1075, // 1511: xnap.v1.SfnOffset.s_fn_time_offset:type_name -> asn1.v1.BitString
	906,  // 1512: xnap.v1.SfnOffset.i_e_extensions:type_name -> xnap.v1.SfnOffsetExtIes
	910,  // 1513: xnap.v1.ServedCellsNR.value:type_name -> xnap.v1.ServedCellsNRItem
	1074, // 1514: xnap.v1.ServedCellsNRItemExtIes.value:type_name -> google.protobuf.Empty
	905,  // 1515: xnap.v1.ServedCellsNRItem.served_cell_info_nr:type_name -> xnap.v1.ServedCellInformationNR
	512,  // 1516: xnap.v1.ServedCellsNRItem.neighbour_info_nr:type_name -> xnap.v1.NeighbourInformationNR
	509,  // 1517: xnap.v1.ServedCellsNRItem.neighbour_info_e_utra:type_name -> xnap.v1.NeighbourInformationEUTra
	909,  // 1518: xnap.v1.ServedCellsNRItem.i_e_extensions:type_name -> xnap.v1.ServedCellsNRItemExtIes
	913,  // 1519: xnap.v1.ServedCellsToModifyNR.value:type_name -> xnap.v1.ServedCellsToModifyNRItem
	1074, // 1520: xnap.v1.ServedcellsToModifyNRItemExtIes.value:type_name -> google.protobuf.Empty
	578,  // 1521: xnap.v1.ServedCellsToModifyNRItem.old_nr_cgi:type_name -> xnap.v1.NrCGi
	905,  // 1522: xnap.v1.ServedCellsToModifyNRItem.served_cell_info_nr:type_name -> xnap.v1.ServedCellInformationNR
	512,  // 1523: xnap.v1.ServedCellsToModifyNRItem.neighbour_info_nr:type_name -> xnap.v1.NeighbourInformationNR
	509,  // 1524: xnap.v1.ServedCellsToModifyNRItem.neighbour_info_e_utra:type_name -> xnap.v1.NeighbourInformationEUTra
	122,  // 1525: xnap.v1.ServedCellsToModifyNRItem.deactivation_indication:type_name -> xnap.v1.DeactivationindicationServedCellsToModifyNritem
	912,  // 1526: xnap.v1.ServedCellsToModifyNRItem.i_e_extensions:type_name -> xnap.v1.ServedcellsToModifyNRItemExtIes
	1074, // 1527: xnap.v1.ServedCellsToUpdateNRExtIes.value:type_name -> google.protobuf.Empty
	908,  // 1528: xnap.v1.ServedCellsToUpdateNR.served_cells_to_add_nr:type_name -> xnap.v1.ServedCellsNR
	911,  // 1529: xnap.v1.ServedCellsToUpdateNR.served_cells_to_modify_nr:type_name -> xnap.v1.ServedCellsToModifyNR
	578,  // 1530: xnap.v1.ServedCellsToUpdateNR.served_cells_to_delete_nr:type_name -> xnap.v1.NrCGi
	914,  // 1531: xnap.v1.ServedCellsToUpdateNR.i_e_extensions:type_name -> xnap.v1.ServedCellsToUpdateNRExtIes
	1074, // 1532: xnap.v1.SharedResourceTypeExtIes.value:type_name -> google.protobuf.Empty
	919,  // 1533: xnap.v1.SharedResourceType.ul_only_sharing:type_name -> xnap.v1.SharedResourceTypeULOnlySharing
	921,  // 1534: xnap.v1.SharedResourceType.ul_and_dl_sharing:type_name -> xnap.v1.SharedResourceTypeULdlSharing
	916,  // 1535: xnap.v1.SharedResourceType.choice_extension:type_name -> xnap.v1.SharedResourceTypeExtIes
	1074, // 1536: xnap.v1.SharedResourceTypeULOnlySharingExtIes.value:type_name -> google.protobuf.Empty
	288,  // 1537: xnap.v1.SharedResourceTypeULOnlySharing.ul_resource_bitmap:type_name -> xnap.v1.DataTrafficResources
	918,  // 1538: xnap.v1.SharedResourceTypeULOnlySharing.i_e_extensions:type_name -> xnap.v1.SharedResourceTypeULOnlySharingExtIes
	1074, // 1539: xnap.v1.SharedResourceTypeULdlSharingExtIes.value:type_name -> google.protobuf.Empty
	923,  // 1540: xnap.v1.SharedResourceTypeULdlSharing.ul_resources:type_name -> xnap.v1.SharedResourceTypeULdlSharingULResources
	927,  // 1541: xnap.v1.SharedResourceTypeULdlSharing.dl_resources:type_name -> xnap.v1.SharedResourceTypeULdlSharingDLResources
	920,  // 1542: xnap.v1.SharedResourceTypeULdlSharing.choice_extension:type_name -> xnap.v1.SharedResourceTypeULdlSharingExtIes
	1074, // 1543: xnap.v1.SharedResourceTypeULdlSharingULResourcesExtIes.value:type_name -> google.protobuf.Empty
	925,  // 1544: xnap.v1.SharedResourceTypeULdlSharingULResources.changed:type_name -> xnap.v1.SharedResourceTypeULdlSharingULResourcesChanged
	922,  // 1545: xnap.v1.SharedResourceTypeULdlSharingULResources.choice_extension:type_name -> xnap.v1.SharedResourceTypeULdlSharingULResourcesExtIes
	1074, // 1546: xnap.v1.SharedResourceTypeULdlSharingULResourcesChangedExtIes.value:type_name -> google.protobuf.Empty
	288,  // 1547: xnap.v1.SharedResourceTypeULdlSharingULResourcesChanged.ul_resource_bitmap:type_name -> xnap.v1.DataTrafficResources
	924,  // 1548: xnap.v1.SharedResourceTypeULdlSharingULResourcesChanged.i_e_extensions:type_name -> xnap.v1.SharedResourceTypeULdlSharingULResourcesChangedExtIes
	1074, // 1549: xnap.v1.SharedResourceTypeULdlSharingDLResourcesExtIes.value:type_name -> google.protobuf.Empty
	929,  // 1550: xnap.v1.SharedResourceTypeULdlSharingDLResources.changed:type_name -> xnap.v1.SharedResourceTypeULdlSharingDLResourcesChanged
	926,  // 1551: xnap.v1.SharedResourceTypeULdlSharingDLResources.choice_extension:type_name -> xnap.v1.SharedResourceTypeULdlSharingDLResourcesExtIes
	1074, // 1552: xnap.v1.SharedResourceTypeULdlSharingDLResourcesChangedExtIes.value:type_name -> google.protobuf.Empty
	288,  // 1553: xnap.v1.SharedResourceTypeULdlSharingDLResourcesChanged.dl_resource_bitmap:type_name -> xnap.v1.DataTrafficResources
	928,  // 1554: xnap.v1.SharedResourceTypeULdlSharingDLResourcesChanged.i_e_extensions:type_name -> xnap.v1.SharedResourceTypeULdlSharingDLResourcesChangedExtIes
	932,  // 1555: xnap.v1.SliceAvailableCapacity.value:type_name -> xnap.v1.SliceAvailableCapacityItem
	1074, // 1556: xnap.v1.SliceAvailableCapacityItemExtIes.value:type_name -> google.protobuf.Empty
	761,  // 1557: xnap.v1.SliceAvailableCapacityItem.p_lmnidentity:type_name -> xnap.v1.PlmnIdentity
	933,  // 1558: xnap.v1.SliceAvailableCapacityItem.s_nssaiavailable_capacity_list:type_name -> xnap.v1.SnssaiavailableCapacityList
	931,  // 1559: xnap.v1.SliceAvailableCapacityItem.i_e_extensions:type_name -> xnap.v1.SliceAvailableCapacityItemExtIes
	935,  // 1560: xnap.v1.SnssaiavailableCapacityList.value:type_name -> xnap.v1.SnssaiavailableCapacityItem
	1074, // 1561: xnap.v1.SnssaiavailableCapacityItemExtIes.value:type_name -> google.protobuf.Empty
	948,  // 1562: xnap.v1.SnssaiavailableCapacityItem.s_nssai:type_name -> xnap.v1.SNSsai
	934,  // 1563: xnap.v1.SnssaiavailableCapacityItem.i_e_extensions:type_name -> xnap.v1.SnssaiavailableCapacityItemExtIes
	948,  // 1564: xnap.v1.SliceSupportList.value:type_name -> xnap.v1.SNSsai
	939,  // 1565: xnap.v1.SliceToReportList.value:type_name -> xnap.v1.SliceToReportListItem
	1074, // 1566: xnap.v1.SliceToReportListItemExtIes.value:type_name -> google.protobuf.Empty
	761,  // 1567: xnap.v1.SliceToReportListItem.p_lmnidentity:type_name -> xnap.v1.PlmnIdentity
	940,  // 1568: xnap.v1.SliceToReportListItem.s_nssailist:type_name -> xnap.v1.Snssailist
	938,  // 1569: xnap.v1.SliceToReportListItem.i_e_extensions:type_name -> xnap.v1.SliceToReportListItemExtIes
	942,  // 1570: xnap.v1.Snssailist.value:type_name -> xnap.v1.SnssaiItem
	1074, // 1571: xnap.v1.SnssaiItemExtIes.value:type_name -> google.protobuf.Empty
	948,  // 1572: xnap.v1.SnssaiItem.s_nssai:type_name -> xnap.v1.SNSsai
	941,  // 1573: xnap.v1.SnssaiItem.i_e_extensions:type_name -> xnap.v1.SnssaiItemExtIes
	945,  // 1574: xnap.v1.SlotConfigurationList.value:type_name -> xnap.v1.SlotConfigurationListItem
	1074, // 1575: xnap.v1.SlotConfigurationListItemExtIes.value:type_name -> google.protobuf.Empty
	972,  // 1576: xnap.v1.SlotConfigurationListItem.symbol_allocation_in_slot:type_name -> xnap.v1.SymbolAllocationinSlot
	944,  // 1577: xnap.v1.SlotConfigurationListItem.i_e_extensions:type_name -> xnap.v1.SlotConfigurationListItemExtIes
	1075, // 1578: xnap.v1.SNGRAnnodeSecurityKey.value:type_name -> asn1.v1.BitString
	1074, // 1579: xnap.v1.SNSsaiExtIes.value:type_name -> google.protobuf.Empty
	947,  // 1580: xnap.v1.SNSsai.i_e_extensions:type_name -> xnap.v1.SNSsaiExtIes
	1074, // 1581: xnap.v1.SpecialSubframeInfoEUTraExtIes.value:type_name -> google.protobuf.Empty
	125,  // 1582: xnap.v1.SpecialSubframeInfoEUTra.special_subframe_pattern:type_name -> xnap.v1.SpecialSubframePatternsEUTra
	16,   // 1583: xnap.v1.SpecialSubframeInfoEUTra.cyclic_prefix_dl:type_name -> xnap.v1.CyclicPrefixEUTraDL
	17,   // 1584: xnap.v1.SpecialSubframeInfoEUTra.cyclic_prefix_ul:type_name -> xnap.v1.CyclicPrefixEUTraUL
	949,  // 1585: xnap.v1.SpecialSubframeInfoEUTra.i_e_extensions:type_name -> xnap.v1.SpecialSubframeInfoEUTraExtIes
	954,  // 1586: xnap.v1.SsbareaCapacityValueList.value:type_name -> xnap.v1.SsbareaCapacityValueListItem
	1074, // 1587: xnap.v1.SsbareaCapacityValueListItemExtIes.value:type_name -> google.protobuf.Empty
	953,  // 1588: xnap.v1.SsbareaCapacityValueListItem.i_e_extensions:type_name -> xnap.v1.SsbareaCapacityValueListItemExtIes
	958,  // 1589: xnap.v1.SsbareaRadioResourceStatusList.value:type_name -> xnap.v1.SsbareaRadioResourceStatusListItem
	540,  // 1590: xnap.v1.SsbareaRadioResourceStatusListItemExtIesExtension.id_dl_scheduling_pdcch_cce_usage:type_name -> xnap.v1.DlschedulingPDcchCCeusage
	541,  // 1591: xnap.v1.SsbareaRadioResourceStatusListItemExtIesExtension.id_ul_scheduling_pdcch_cce_usage:type_name -> xnap.v1.UlschedulingPDcchCCeusage
	1076, // 1592: xnap.v1.SsbareaRadioResourceStatusListItemExtIes.id:type_name -> xnap.v1.ProtocolIeID
	1077, // 1593: xnap.v1.SsbareaRadioResourceStatusListItemExtIes.criticality:type_name -> xnap.v1.Criticality
	956,  // 1594: xnap.v1.SsbareaRadioResourceStatusListItemExtIes.extension:type_name -> xnap.v1.SsbareaRadioResourceStatusListItemExtIesExtension
	299,  // 1595: xnap.v1.SsbareaRadioResourceStatusListItem.ssb_area_dl_gbr_prb_usage:type_name -> xnap.v1.DlGBrPRbusage
	1057, // 1596: xnap.v1.SsbareaRadioResourceStatusListItem.ssb_area_ul_gbr_prb_usage:type_name -> xnap.v1.UlGBrPRbusage
	300,  // 1597: xnap.v1.SsbareaRadioResourceStatusListItem.ssb_area_d_l_non_gbr_prb_usage:type_name -> xnap.v1.DlnonGBrPRbusage
	1058, // 1598: xnap.v1.SsbareaRadioResourceStatusListItem.ssb_area_u_l_non_gbr_prb_usage:type_name -> xnap.v1.UlnonGBrPRbusage
	301,  // 1599: xnap.v1.SsbareaRadioResourceStatusListItem.ssb_area_d_l_total_prb_usage:type_name -> xnap.v1.DlTotalPRbusage
	1059, // 1600: xnap.v1.SsbareaRadioResourceStatusListItem.ssb_area_u_l_total_prb_usage:type_name -> xnap.v1.UlTotalPRbusage
	957,  // 1601: xnap.v1.SsbareaRadioResourceStatusListItem.i_e_extensions:type_name -> xnap.v1.SsbareaRadioResourceStatusListItemExtIes
	1074, // 1602: xnap.v1.SsbPositionsInBurstExtIes.value:type_name -> google.protobuf.Empty
	1075, // 1603: xnap.v1.SsbPositionsInBurst.short_bitmap:type_name -> asn1.v1.BitString
	1075, // 1604: xnap.v1.SsbPositionsInBurst.medium_bitmap:type_name -> asn1.v1.BitString
	1075, // 1605: xnap.v1.SsbPositionsInBurst.long_bitmap:type_name -> asn1.v1.BitString
	959,  // 1606: xnap.v1.SsbPositionsInBurst.choice_extension:type_name -> xnap.v1.SsbPositionsInBurstExtIes
	963,  // 1607: xnap.v1.SsbtoReportList.value:type_name -> xnap.v1.SsbtoReportListItem
	1074, // 1608: xnap.v1.SsbtoReportListItemExtIes.value:type_name -> google.protobuf.Empty
	962,  // 1609: xnap.v1.SsbtoReportListItem.i_e_extensions:type_name -> xnap.v1.SsbtoReportListItemExtIes
	522,  // 1610: xnap.v1.SulInformationExtIesExtension.id_carrier_list:type_name -> xnap.v1.NrcarrierList
	35,   // 1611: xnap.v1.SulInformationExtIesExtension.id_frequency_shift7p5khz:type_name -> xnap.v1.FrequencyShift7p5khz
	1076, // 1612: xnap.v1.SulInformationExtIes.id:type_name -> xnap.v1.ProtocolIeID
	1077, // 1613: xnap.v1.SulInformationExtIes.criticality:type_name -> xnap.v1.Criticality
	965,  // 1614: xnap.v1.SulInformationExtIes.extension:type_name -> xnap.v1.SulInformationExtIesExtension
	536,  // 1615: xnap.v1.SulInformation.sul_frequency_info:type_name -> xnap.v1.Nrarfcn
	596,  // 1616: xnap.v1.SulInformation.sul_transmission_bandwidth:type_name -> xnap.v1.NrtransmissionBandwidth
	966,  // 1617: xnap.v1.SulInformation.i_e_extensions:type_name -> xnap.v1.SulInformationExtIes
	970,  // 1618: xnap.v1.SupportedSulbandList.value:type_name -> xnap.v1.SupportedSulbandItem
	1074, // 1619: xnap.v1.SupportedSulbandItemExtIes.value:type_name -> google.protobuf.Empty
	964,  // 1620: xnap.v1.SupportedSulbandItem.sul_band_item:type_name -> xnap.v1.SulFrequencyBand
	969,  // 1621: xnap.v1.SupportedSulbandItem.i_e_extensions:type_name -> xnap.v1.SupportedSulbandItemExtIes
	1074, // 1622: xnap.v1.SymbolAllocationinSlotExtIes.value:type_name -> google.protobuf.Empty
	974,  // 1623: xnap.v1.SymbolAllocationinSlot.all_dl:type_name -> xnap.v1.SymbolAllocationinSlotAllDl
	976,  // 1624: xnap.v1.SymbolAllocationinSlot.all_ul:type_name -> xnap.v1.SymbolAllocationinSlotAllUl
	978,  // 1625: xnap.v1.SymbolAllocationinSlot.both_dland_ul:type_name -> xnap.v1.SymbolAllocationinSlotBothDlandUl
	971,  // 1626: xnap.v1.SymbolAllocationinSlot.choice_extension:type_name -> xnap.v1.SymbolAllocationinSlotExtIes
	1074, // 1627: xnap.v1.SymbolAllocationinSlotAllDlExtIes.value:type_name -> google.protobuf.Empty
	973,  // 1628: xnap.v1.SymbolAllocationinSlotAllDl.i_e_extension:type_name -> xnap.v1.SymbolAllocationinSlotAllDlExtIes
	1074, // 1629: xnap.v1.SymbolAllocationinSlotAllUlExtIes.value:type_name -> google.protobuf.Empty
	975,  // 1630: xnap.v1.SymbolAllocationinSlotAllUl.i_e_extension:type_name -> xnap.v1.SymbolAllocationinSlotAllUlExtIes
	1074, // 1631: xnap.v1.SymbolAllocationinSlotBothDlandUlExtIes.value:type_name -> google.protobuf.Empty
	977,  // 1632: xnap.v1.SymbolAllocationinSlotBothDlandUl.i_e_extension:type_name -> xnap.v1.SymbolAllocationinSlotBothDlandUlExtIes
	1074, // 1633: xnap.v1.TabasedMdtExtIes.value:type_name -> google.protobuf.Empty
	990,  // 1634: xnap.v1.TabasedMdt.t_alistfor_mdt:type_name -> xnap.v1.TalistforMdt
	979,  // 1635: xnap.v1.TabasedMdt.i_e_extensions:type_name -> xnap.v1.TabasedMdtExtIes
	1074, // 1636: xnap.v1.TaibasedMdtExtIes.value:type_name -> google.protobuf.Empty
	983,  // 1637: xnap.v1.TaibasedMdt.t_ailistfor_mdt:type_name -> xnap.v1.TailistforMdt
	981,  // 1638: xnap.v1.TaibasedMdt.i_e_extensions:type_name -> xnap.v1.TaibasedMdtExtIes
	985,  // 1639: xnap.v1.TailistforMdt.value:type_name -> xnap.v1.TaiforMdtItem
	1074, // 1640: xnap.v1.TaiforMdtItemExtIes.value:type_name -> google.protobuf.Empty
	761,  // 1641: xnap.v1.TaiforMdtItem.plmn_id:type_name -> xnap.v1.PlmnIdentity
	986,  // 1642: xnap.v1.TaiforMdtItem.t_ac:type_name -> xnap.v1.Tac
	984,  // 1643: xnap.v1.TaiforMdtItem.i_e_extensions:type_name -> xnap.v1.TaiforMdtItemExtIes
	989,  // 1644: xnap.v1.TaisupportList.value:type_name -> xnap.v1.TaisupportItem
	1074, // 1645: xnap.v1.TaisupportItemExtIes.value:type_name -> google.protobuf.Empty
	986,  // 1646: xnap.v1.TaisupportItem.tac:type_name -> xnap.v1.Tac
	201,  // 1647: xnap.v1.TaisupportItem.broadcast_plmns:type_name -> xnap.v1.BroadcastPlmninTaisupportItem
	988,  // 1648: xnap.v1.TaisupportItem.i_e_extensions:type_name -> xnap.v1.TaisupportItemExtIes
	986,  // 1649: xnap.v1.TalistforMdt.value:type_name -> xnap.v1.Tac
	1074, // 1650: xnap.v1.TargetCgiExtIes.value:type_name -> google.protobuf.Empty
	578,  // 1651: xnap.v1.TargetCGi.nr:type_name -> xnap.v1.NrCGi
	333,  // 1652: xnap.v1.TargetCGi.e_utra:type_name -> xnap.v1.EUTraCGi
	992,  // 1653: xnap.v1.TargetCGi.choice_extension:type_name -> xnap.v1.TargetCgiExtIes
	997,  // 1654: xnap.v1.TargetCellList.value:type_name -> xnap.v1.TargetCellListItem
	1074, // 1655: xnap.v1.TargetCellListItemExtIes.value:type_name -> google.protobuf.Empty
	993,  // 1656: xnap.v1.TargetCellListItem.target_cell:type_name -> xnap.v1.TargetCGi
	996,  // 1657: xnap.v1.TargetCellListItem.i_e_extensions:type_name -> xnap.v1.TargetCellListItemExtIes
	1074, // 1658: xnap.v1.TnlconfigurationInfoExtIes.value:type_name -> google.protobuf.Empty
	362,  // 1659: xnap.v1.TnlconfigurationInfo.extended_uptransport_layer_addresses_to_add:type_name -> xnap.v1.ExtTlas
	362,  // 1660: xnap.v1.TnlconfigurationInfo.extended_uptransport_layer_addresses_to_remove:type_name -> xnap.v1.ExtTlas
	1001, // 1661: xnap.v1.TnlconfigurationInfo.i_e_extensions:type_name -> xnap.v1.TnlconfigurationInfoExtIes
	1005, // 1662: xnap.v1.TnlaToAddList.value:type_name -> xnap.v1.TnlaToAddItem
	1074, // 1663: xnap.v1.TnlaToAddItemExtIes.value:type_name -> google.protobuf.Empty
	256,  // 1664: xnap.v1.TnlaToAddItem.t_nlassociation_transport_layer_address:type_name -> xnap.v1.CptransportLayerInformation
	130,  // 1665: xnap.v1.TnlaToAddItem.t_nlassociation_usage:type_name -> xnap.v1.TnlassociationUsage
	1004, // 1666: xnap.v1.TnlaToAddItem.i_e_extensions:type_name -> xnap.v1.TnlaToAddItemExtIes
	1008, // 1667: xnap.v1.TnlaToUpdateList.value:type_name -> xnap.v1.TnlaToUpdateItem
	1074, // 1668: xnap.v1.TnlaToUpdateItemExtIes.value:type_name -> google.protobuf.Empty
	256,  // 1669: xnap.v1.TnlaToUpdateItem.t_nlassociation_transport_layer_address:type_name -> xnap.v1.CptransportLayerInformation
	130,  // 1670: xnap.v1.TnlaToUpdateItem.t_nlassociation_usage:type_name -> xnap.v1.TnlassociationUsage
	1007, // 1671: xnap.v1.TnlaToUpdateItem.i_e_extensions:type_name -> xnap.v1.TnlaToUpdateItemExtIes
	1011, // 1672: xnap.v1.TnlaToRemoveList.value:type_name -> xnap.v1.TnlaToRemoveItem
	1074, // 1673: xnap.v1.TnlaToRemoveItemExtIes.value:type_name -> google.protobuf.Empty
	256,  // 1674: xnap.v1.TnlaToRemoveItem.t_nlassociation_transport_layer_address:type_name -> xnap.v1.CptransportLayerInformation
	1010, // 1675: xnap.v1.TnlaToRemoveItem.i_e_extensions:type_name -> xnap.v1.TnlaToRemoveItemExtIes
	1014, // 1676: xnap.v1.TnlaSetupList.value:type_name -> xnap.v1.TnlaSetupItem
	1074, // 1677: xnap.v1.TnlaSetupItemExtIes.value:type_name -> google.protobuf.Empty
	256,  // 1678: xnap.v1.TnlaSetupItem.t_nlassociation_transport_layer_address:type_name -> xnap.v1.CptransportLayerInformation
	1013, // 1679: xnap.v1.TnlaSetupItem.i_e_extensions:type_name -> xnap.v1.TnlaSetupItemExtIes
	1017, // 1680: xnap.v1.TnlaFailedToSetupList.value:type_name -> xnap.v1.TnlaFailedToSetupItem
	1074, // 1681: xnap.v1.TnlaFailedToSetupItemExtIes.value:type_name -> google.protobuf.Empty
	256,  // 1682: xnap.v1.TnlaFailedToSetupItem.t_nlassociation_transport_layer_address:type_name -> xnap.v1.CptransportLayerInformation
	213,  // 1683: xnap.v1.TnlaFailedToSetupItem.cause:type_name -> xnap.v1.Cause
	1016, // 1684: xnap.v1.TnlaFailedToSetupItem.i_e_extensions:type_name -> xnap.v1.TnlaFailedToSetupItemExtIes
	1075, // 1685: xnap.v1.TransportLayerAddress.value:type_name -> asn1.v1.BitString
	1065, // 1686: xnap.v1.TraceActivationExtIesExtension.id_trace_collection_entity_uri:type_name -> xnap.v1.Uriaddress
	461,  // 1687: xnap.v1.TraceActivationExtIesExtension.id_mdt_configuration:type_name -> xnap.v1.MdtConfiguration
	1076, // 1688: xnap.v1.TraceActivationExtIes.id:type_name -> xnap.v1.ProtocolIeID
	1077, // 1689: xnap.v1.TraceActivationExtIes.criticality:type_name -> xnap.v1.Criticality
	1019, // 1690: xnap.v1.TraceActivationExtIes.extension:type_name -> xnap.v1.TraceActivationExtIesExtension
	597,  // 1691: xnap.v1.TraceActivation.ng_ran_trace_id:type_name -> xnap.v1.NgRAntraceId
	1075, // 1692: xnap.v1.TraceActivation.interfaces_to_trace:type_name -> asn1.v1.BitString
	131,  // 1693: xnap.v1.TraceActivation.trace_depth:type_name -> xnap.v1.TraceDepth
	1018, // 1694: xnap.v1.TraceActivation.trace_coll_address:type_name -> xnap.v1.TransportLayerAddress
	1020, // 1695: xnap.v1.TraceActivation.ie_extension:type_name -> xnap.v1.TraceActivationExtIes
	1074, // 1696: xnap.v1.TsctrafficCharacteristicsExtIes.value:type_name -> google.protobuf.Empty
	1025, // 1697: xnap.v1.TsctrafficCharacteristics.t_scassistance_information_downlink:type_name -> xnap.v1.TscassistanceInformation
	1025, // 1698: xnap.v1.TsctrafficCharacteristics.t_scassistance_information_uplink:type_name -> xnap.v1.TscassistanceInformation
	1022, // 1699: xnap.v1.TsctrafficCharacteristics.ie_extension:type_name -> xnap.v1.TsctrafficCharacteristicsExtIes
	1074, // 1700: xnap.v1.TscassistanceInformationExtIes.value:type_name -> google.protobuf.Empty
	1024, // 1701: xnap.v1.TscassistanceInformation.ie_extension:type_name -> xnap.v1.TscassistanceInformationExtIes
	1074, // 1702: xnap.v1.UeaggregateMaximumBitRateExtIes.value:type_name -> google.protobuf.Empty
	190,  // 1703: xnap.v1.UeaggregateMaximumBitRate.dl_ue_ambr:type_name -> xnap.v1.BitRate
	190,  // 1704: xnap.v1.UeaggregateMaximumBitRate.ul_ue_ambr:type_name -> xnap.v1.BitRate
	1026, // 1705: xnap.v1.UeaggregateMaximumBitRate.i_e_extension:type_name -> xnap.v1.UeaggregateMaximumBitRateExtIes
	1074, // 1706: xnap.v1.UecontextIdExtIes.value:type_name -> google.protobuf.Empty
	1031, // 1707: xnap.v1.UecontextId.r_rcresume:type_name -> xnap.v1.UecontextIdforRrcresume
	1033, // 1708: xnap.v1.UecontextId.r_rrcreestablishment:type_name -> xnap.v1.UecontextIdforRrcreestablishment
	1028, // 1709: xnap.v1.UecontextId.choice_extension:type_name -> xnap.v1.UecontextIdExtIes
	1074, // 1710: xnap.v1.UecontextIdforRrcresumeExtIes.value:type_name -> google.protobuf.Empty
	404,  // 1711: xnap.v1.UecontextIdforRrcresume.i_rnti:type_name -> xnap.v1.IRNti
	262,  // 1712: xnap.v1.UecontextIdforRrcresume.allocated_c_rnti:type_name -> xnap.v1.CRNti
	529,  // 1713: xnap.v1.UecontextIdforRrcresume.access_pci:type_name -> xnap.v1.NgRAnCellPci
	1030, // 1714: xnap.v1.UecontextIdforRrcresume.i_e_extension:type_name -> xnap.v1.UecontextIdforRrcresumeExtIes
	1074, // 1715: xnap.v1.UecontextIdforRrcreestablishmentExtIes.value:type_name -> google.protobuf.Empty
	262,  // 1716: xnap.v1.UecontextIdforRrcreestablishment.c_rnti:type_name -> xnap.v1.CRNti
	529,  // 1717: xnap.v1.UecontextIdforRrcreestablishment.failure_cell_pci:type_name -> xnap.v1.NgRAnCellPci
	1032, // 1718: xnap.v1.UecontextIdforRrcreestablishment.i_e_extension:type_name -> xnap.v1.UecontextIdforRrcreestablishmentExtIes
	368,  // 1719: xnap.v1.UecontextInfoRetrUectxtRespExtIesExtension.id_five_gcmobility_restriction_list_container:type_name -> xnap.v1.FiveGcmobilityRestrictionListContainer
	601,  // 1720: xnap.v1.UecontextInfoRetrUectxtRespExtIesExtension.id_nruesidelink_aggregate_maximum_bit_rate:type_name -> xnap.v1.NruesidelinkAggregateMaximumBitRate
	432,  // 1721: xnap.v1.UecontextInfoRetrUectxtRespExtIesExtension.id_lteuesidelink_aggregate_maximum_bit_rate:type_name -> xnap.v1.LteuesidelinkAggregateMaximumBitRate
	1046, // 1722: xnap.v1.UecontextInfoRetrUectxtRespExtIesExtension.id_ueradio_capability_id:type_name -> xnap.v1.UeradioCapabilityId
	1076, // 1723: xnap.v1.UecontextInfoRetrUectxtRespExtIes.id:type_name -> xnap.v1.ProtocolIeID
	1077, // 1724: xnap.v1.UecontextInfoRetrUectxtRespExtIes.criticality:type_name -> xnap.v1.Criticality
	1034, // 1725: xnap.v1.UecontextInfoRetrUectxtRespExtIes.extension:type_name -> xnap.v1.UecontextInfoRetrUectxtRespExtIesExtension
	163,  // 1726: xnap.v1.UecontextInfoRetrUectxtResp.ng_c_ue_signalling_ref:type_name -> xnap.v1.AmfUENGapID
	256,  // 1727: xnap.v1.UecontextInfoRetrUectxtResp.signalling_tnl_at_source:type_name -> xnap.v1.CptransportLayerInformation
	1054, // 1728: xnap.v1.UecontextInfoRetrUectxtResp.ue_security_capabilities:type_name -> xnap.v1.UesecurityCapabilities
	173,  // 1729: xnap.v1.UecontextInfoRetrUectxtResp.security_information:type_name -> xnap.v1.AsSecurityInformation
	1027, // 1730: xnap.v1.UecontextInfoRetrUectxtResp.ue_ambr:type_name -> xnap.v1.UeaggregateMaximumBitRate
	642,  // 1731: xnap.v1.UecontextInfoRetrUectxtResp.pdu_session_resources_to_be_setup_list:type_name -> xnap.v1.PdusessionResourcesToBeSetupList
	483,  // 1732: xnap.v1.UecontextInfoRetrUectxtResp.mobility_restriction_list:type_name -> xnap.v1.MobilityRestrictionList
	851,  // 1733: xnap.v1.UecontextInfoRetrUectxtResp.index_to_rat_frequency_selection_priority:type_name -> xnap.v1.RfspIndex
	1035, // 1734: xnap.v1.UecontextInfoRetrUectxtResp.i_e_extension:type_name -> xnap.v1.UecontextInfoRetrUectxtRespExtIes
	406,  // 1735: xnap.v1.UehistoryInformation.value:type_name -> xnap.v1.LastVisitedCellItem
	1074, // 1736: xnap.v1.UehistoryInformationFromTheUeExtIes.value:type_name -> google.protobuf.Empty
	585,  // 1737: xnap.v1.UehistoryInformationFromTheUe.n_r:type_name -> xnap.v1.NrmobilityHistoryReport
	1038, // 1738: xnap.v1.UehistoryInformationFromTheUe.choice_extension:type_name -> xnap.v1.UehistoryInformationFromTheUeExtIes
	1074, // 1739: xnap.v1.UeidentityIndexValueExtIes.value:type_name -> google.protobuf.Empty
	1075, // 1740: xnap.v1.UeidentityIndexValue.index_length10:type_name -> asn1.v1.BitString
	1040, // 1741: xnap.v1.UeidentityIndexValue.choice_extension:type_name -> xnap.v1.UeidentityIndexValueExtIes
	1074, // 1742: xnap.v1.UeradioCapabilityForPagingExtIes.value:type_name -> google.protobuf.Empty
	1044, // 1743: xnap.v1.UeradioCapabilityForPaging.u_eradio_capability_for_paging_of_nr:type_name -> xnap.v1.UeradioCapabilityForPagingOfNr
	1045, // 1744: xnap.v1.UeradioCapabilityForPaging.u_eradio_capability_for_paging_of_eutra:type_name -> xnap.v1.UeradioCapabilityForPagingOfEutra
	1042, // 1745: xnap.v1.UeradioCapabilityForPaging.i_e_extensions:type_name -> xnap.v1.UeradioCapabilityForPagingExtIes
	1074, // 1746: xnap.v1.UeranpagingIdentityExtIes.value:type_name -> google.protobuf.Empty
	1075, // 1747: xnap.v1.UeranpagingIdentity.i_rnti_full:type_name -> asn1.v1.BitString
	1047, // 1748: xnap.v1.UeranpagingIdentity.choice_extension:type_name -> xnap.v1.UeranpagingIdentityExtIes
	1074, // 1749: xnap.v1.UerlfreportContainerExtIes.value:type_name -> google.protobuf.Empty
	1052, // 1750: xnap.v1.UerlfreportContainer.n_r_uerlfreport_container:type_name -> xnap.v1.UerlfreportContainerNr
	1051, // 1751: xnap.v1.UerlfreportContainer.l_te_uerlfreport_container:type_name -> xnap.v1.UerlfreportContainerLte
	1049, // 1752: xnap.v1.UerlfreportContainer.choice_extension:type_name -> xnap.v1.UerlfreportContainerExtIes
	1074, // 1753: xnap.v1.UesecurityCapabilitiesExtIes.value:type_name -> google.protobuf.Empty
	1075, // 1754: xnap.v1.UesecurityCapabilities.nr_encyption_algorithms:type_name -> asn1.v1.BitString
	1075, // 1755: xnap.v1.UesecurityCapabilities.nr_integrity_protection_algorithms:type_name -> asn1.v1.BitString
	1075, // 1756: xnap.v1.UesecurityCapabilities.e_utra_encyption_algorithms:type_name -> asn1.v1.BitString
	1075, // 1757: xnap.v1.UesecurityCapabilities.e_utra_integrity_protection_algorithms:type_name -> asn1.v1.BitString
	1053, // 1758: xnap.v1.UesecurityCapabilities.i_e_extension:type_name -> xnap.v1.UesecurityCapabilitiesExtIes
	1074, // 1759: xnap.v1.UlconfigurationExtIes.value:type_name -> google.protobuf.Empty
	135,  // 1760: xnap.v1.Ulconfiguration.u_l_pdcp:type_name -> xnap.v1.UlUEConfiguration
	1055, // 1761: xnap.v1.Ulconfiguration.i_e_extensions:type_name -> xnap.v1.UlconfigurationExtIes
	1074, // 1762: xnap.v1.UptransportLayerInformationExtIes.value:type_name -> google.protobuf.Empty
	390,  // 1763: xnap.v1.UptransportLayerInformation.gtp_tunnel:type_name -> xnap.v1.GtptunnelTransportLayerInformation
	1060, // 1764: xnap.v1.UptransportLayerInformation.choice_extension:type_name -> xnap.v1.UptransportLayerInformationExtIes
	1064, // 1765: xnap.v1.UptransportParameters.value:type_name -> xnap.v1.UptransportParametersItem
	1074, // 1766: xnap.v1.UptransportParametersItemExtIes.value:type_name -> google.protobuf.Empty
	1061, // 1767: xnap.v1.UptransportParametersItem.up_tnlinfo:type_name -> xnap.v1.UptransportLayerInformation
	231,  // 1768: xnap.v1.UptransportParametersItem.cell_group_id:type_name -> xnap.v1.CellGroupId
	1063, // 1769: xnap.v1.UptransportParametersItem.i_e_extension:type_name -> xnap.v1.UptransportParametersItemExtIes
	1068, // 1770: xnap.v1.VolumeTimedReportList.value:type_name -> xnap.v1.VolumeTimedReportItem
	1074, // 1771: xnap.v1.VolumeTimedReportItemExtIes.value:type_name -> google.protobuf.Empty
	1067, // 1772: xnap.v1.VolumeTimedReportItem.i_e_extensions:type_name -> xnap.v1.VolumeTimedReportItemExtIes
	1074, // 1773: xnap.v1.WlanmeasurementConfigurationExtIes.value:type_name -> google.protobuf.Empty
	142,  // 1774: xnap.v1.WlanmeasurementConfiguration.wlan_meas_config:type_name -> xnap.v1.WlanmeasConfig
	1071, // 1775: xnap.v1.WlanmeasurementConfiguration.wlan_meas_config_name_list:type_name -> xnap.v1.WlanmeasConfigNameList
	140,  // 1776: xnap.v1.WlanmeasurementConfiguration.wlan_rssi:type_name -> xnap.v1.WlanrssiWlanmeasurementConfiguration
	141,  // 1777: xnap.v1.WlanmeasurementConfiguration.wlan_rtt:type_name -> xnap.v1.WlanrttWlanmeasurementConfiguration
	1069, // 1778: xnap.v1.WlanmeasurementConfiguration.i_e_extensions:type_name -> xnap.v1.WlanmeasurementConfigurationExtIes
	1072, // 1779: xnap.v1.WlanmeasConfigNameList.value:type_name -> xnap.v1.Wlanname
	1780, // [1780:1780] is the sub-list for method output_type
	1780, // [1780:1780] is the sub-list for method input_type
	1780, // [1780:1780] is the sub-list for extension type_name
	1780, // [1780:1780] is the sub-list for extension extendee
	0,    // [0:1780] is the sub-list for field type_name
}

func init() { file_api_xnap_v1_xnap_ies_proto_init() }
func file_api_xnap_v1_xnap_ies_proto_init() {
	if File_api_xnap_v1_xnap_ies_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_api_xnap_v1_xnap_ies_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdditionalPDcpDuplicationTNlList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdditionalPDcpDuplicationTNlExtIes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdditionalPDcpDuplicationTNlItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdditionalULNGUTNlatUpfItemExtIes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdditionalULNGUTNlatUpfItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdditionalULNGUTNlatUpfList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActivationIdforCellActivation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AllocationandRetentionPriorityExtIes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AllocationandRetentionPriority); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActivationSfn); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AllowedCagIDListperPlmn); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AllowedPniNPnIDList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AllowedPniNPnIDItemExtIes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AllowedPniNPnIDItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AlternativeQoSparaSetList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AlternativeQoSparaSetItemExtIes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AlternativeQoSparaSetItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AmfRegionInformation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GlobalAmfRegionInformationExtIes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GlobalAmfRegionInformation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AmfUENGapID); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AreaOfInterestInformation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AreaOfInterestItemExtIes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AreaOfInterestItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AreaScopeOfMdtNR); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AreaScopeOfMdtEUtra); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AreaScopeOfNeighCellsList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AreaScopeOfNeighCellsItemExtIes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AreaScopeOfNeighCellsItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AsSecurityInformationExtIes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AsSecurityInformation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AssistanceDataForRanpagingExtIes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AssistanceDataForRanpaging); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AvailableCapacity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AvailableRrcconnectionCapacityValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AveragingWindow); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BluetoothMeasurementConfigurationExtIes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BluetoothMeasurementConfiguration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BluetoothMeasConfigNameList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BluetoothName); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BplmnIDInfoEUtra); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BplmnIDInfoEUtraItemExtIes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BplmnIDInfoEUtraItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BplmnIDInfoNR); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BplmnIDInfoNRItemExtIesExtension); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BplmnIDInfoNRItemExtIes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BplmnIDInfoNRItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BitRate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BroadcastCagIdentifierList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BroadcastCagIdentifierItemExtIes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BroadcastCagIdentifierItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BroadcastNidList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BroadcastNidItemExtIes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BroadcastNidItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BroadcastPlmns); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BroadcastEutraplmns); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BroadcastPlmninTaisupportItemExtIesExtension); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BroadcastPlmninTaisupportItemExtIes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BroadcastPlmninTaisupportItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BroadcastPniNPnIDInformation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BroadcastPniNPnIDInformationItemExtIes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BroadcastPniNPnIDInformationItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BroadcastSnpnidList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BroadcastSnpnidExtIes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BroadcastSnpnid); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CagIdentifier); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CapacityValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CapacityValueInfoExtIes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CapacityValueInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CauseExtIes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Cause); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LimitedNrListCellAssistanceInfoNR); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CellAssistanceInfoNRExtIes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CellAssistanceInfoNR); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[74].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CellAndCapacityAssistanceInfoNRExtIes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[75].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CellAndCapacityAssistanceInfoNR); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[76].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CellAndCapacityAssistanceInfoEUtraExtIes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[77].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CellAndCapacityAssistanceInfoEUtra); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[78].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LimitedEutraListCellAssistanceInfoEUtra); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[79].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CellAssistanceInfoEUtraExtIes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[80].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CellAssistanceInfoEUtra); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[81].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CellBasedMdtNRExtIes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[82].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CellBasedMdtNR); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[83].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CellIdListforMdtNR); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[84].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CellBasedMdtEUtraExtIes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[85].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CellBasedMdtEUtra); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[86].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CellIdListforMdtEUtra); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[87].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CellCapacityClassValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[88].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CellGroupId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[89].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CellMeasurementResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[90].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CellMeasurementResultItemExtIes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[91].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CellMeasurementResultItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[92].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CellToReport); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[93].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CellToReportItemExtIes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[94].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CellToReportItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[95].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CellTypeChoiceExtIes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[96].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CellTypeChoice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[97].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CompositeAvailableCapacityGroupExtIes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[98].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CompositeAvailableCapacityGroup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[99].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CompositeAvailableCapacityExtIes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[100].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CompositeAvailableCapacity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[101].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChoinformationReqExtIes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[102].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChoinformationReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[103].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChoinformationAckExtIes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[104].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChoinformationAck); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[105].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChoProbability); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[106].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConnectivitySupportExtIes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[107].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConnectivitySupport); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[108].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CountPDcpSN12ExtIes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[109].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CountPDcpSN12); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[110].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CountPDcpSN18ExtIes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[111].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CountPDcpSN18); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[112].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CptransportLayerInformationExtIes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[113].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CptransportLayerInformation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[114].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CriticalityDiagnosticsExtIes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[115].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CriticalityDiagnostics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[116].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CriticalityDiagnosticsIEListExtIes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[117].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NestedCriticalityDiagnosticsIEList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[118].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CriticalityDiagnosticsIEList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[119].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CRNti); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[120].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*XnUaddressInfoperPdusessionList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[121].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*XnUaddressInfoperPdusessionItemExtIesExtension); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[122].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*XnUaddressInfoperPdusessionItemExtIes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[123].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*XnUaddressInfoperPdusessionItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[124].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataForwardingInfoFromTargetEUTrannodeExtIes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[125].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataForwardingInfoFromTargetEUTrannode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[126].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataForwardingInfoFromTargetEUTrannodeList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[127].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataForwardingInfoFromTargetEUTrannodeItemExtIes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[128].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataForwardingInfoFromTargetEUTrannodeItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[129].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QoSflowsToBeForwardedList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[130].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QoSflowsToBeForwardedItemExtIes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[131].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QoSflowsToBeForwardedItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[132].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataForwardingInfoFromTargetNgrannodeExtIes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[133].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataForwardingInfoFromTargetNgrannode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[134].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QoSflowsAcceptedToBeForwardedList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[135].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QoSflowsAcceptedToBeForwardedItemExtIes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[136].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QoSflowsAcceptedToBeForwardedItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[137].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataforwardingandOffloadingInfofromSourceExtIes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[138].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataforwardingandOffloadingInfofromSource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[139].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QoSflowsToBeForwardedList1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[140].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QoSflowsToBeForwardedItemExtIesExtension); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[141].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QoSflowsToBeForwardedItem1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[142].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataForwardingResponseDrbitemList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[143].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataForwardingResponseDrbitemExtIes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[144].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataForwardingResponseDrbitem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[145].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataTrafficResources); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[146].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataTrafficResourceIndicationExtIes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[147].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataTrafficResourceIndication); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[148].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DapsrequestInfoExtIes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[149].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DapsrequestInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[150].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DapsresponseInfoList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[151].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DapsresponseInfoItemExtIes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[152].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DapsresponseInfoItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[153].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeliveryStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[154].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DlcountChoiceExtIes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[155].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DlcountChoice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[156].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DlGBrPRbusage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[157].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DlnonGBrPRbusage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[158].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DlTotalPRbusage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[159].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DrbID); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[160].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DrbList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[161].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DrbListwithCause); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[162].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DrbListwithCauseItemExtIes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[163].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DrbListwithCauseItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[164].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DrbNumber); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[165].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DrbsSubjectToDldiscardingList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[166].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DrbsSubjectToDldiscardingItemExtIes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[167].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DrbsSubjectToDldiscardingItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[168].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DrbsSubjectToEarlyStatusTransferList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[169].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DrbsSubjectToEarlyStatusTransferItemExtIes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[170].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DrbsSubjectToEarlyStatusTransferItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[171].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DrbsSubjectToStatusTransferList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[172].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DrbsSubjectToStatusTransferItemExtIes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[173].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DrbsSubjectToStatusTransferItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[174].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DrbbstatusTransferChoiceExtIes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[175].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DrbbstatusTransferChoice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[176].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DrbbstatusTransfer12BitsSnExtIes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[177].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DrbbstatusTransfer12BitsSn); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[178].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DrbbstatusTransfer18BitsSnExtIes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[179].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DrbbstatusTransfer18BitsSn); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[180].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DrbtoQoSflowMappingList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[181].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DrbtoQoSflowMappingItemExtIes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[182].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DrbtoQoSflowMappingItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[183].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Dynamic5QidescriptorExtIesExtension); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[184].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Dynamic5QidescriptorExtIes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[185].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Dynamic5Qidescriptor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[186].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ERAbID); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[187].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EUTraarfcn); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[188].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EUTraCellIdentity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[189].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EUTraCGiExtIes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[190].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EUTraCGi); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[191].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EUTrafrequencyBandIndicator); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[192].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EUTramultibandInfoList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[193].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EUTrapci); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[194].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EUTraprachconfigurationExtIes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[195].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EUTraprachconfiguration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[196].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EndpointIpaddressAndPortExtIes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[197].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EndpointIpaddressAndPort); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[198].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventTriggeredExtIes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[199].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventTriggered); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[200].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventTypeTriggerExtIes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[201].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventTypeTrigger); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[202].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventL1ExtIes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[203].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventL1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[204].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MeasurementThresholdL1LoggedMdt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[205].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExpectedActivityPeriod); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[206].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExpectedIdlePeriod); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[207].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExpectedUeactivityBehaviourExtIes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[208].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExpectedUeactivityBehaviour); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[209].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExpectedUebehaviourExtIes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[210].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExpectedUebehaviour); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[211].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExpectedUemovingTrajectory); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[212].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExpectedUemovingTrajectoryItemExtIes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[213].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExpectedUemovingTrajectoryItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[214].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExtendedRatrestrictionInformationExtIes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[215].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExtendedRatrestrictionInformation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[216].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExtendedPacketDelayBudget); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[217].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExtendedSliceSupportList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[218].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExtendedUeidentityIndexValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[219].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExtTlas); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[220].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExtTlaItemExtIes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[221].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExtTlaItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[222].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Gtptlas); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[223].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GtptlaItemExtIes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[224].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GtptlaItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[225].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FiveGcmobilityRestrictionListContainer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[226].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FiveQi); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[227].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GbrqoSflowInfoExtIes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[228].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GbrqoSflowInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[229].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GlobalgNbIDExtIes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[230].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GlobalgNbID); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[231].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GnbIDChoiceExtIes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[232].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GnbIDChoice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[233].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GnbRadioResourceStatusExtIes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[234].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GnbRadioResourceStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[235].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GlobalCellIDExtIes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[236].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GlobalCellID); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[237].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GlobaleNbIDExtIes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[238].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GlobalngeNbID); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[239].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnbIDChoiceExtIes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[240].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnbIDChoice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[241].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GlobalNgRAncellIDExtIes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[242].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GlobalNgRAncellID); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[243].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GlobalNgRAnnodeIDExtIes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[244].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GlobalNgRAnnodeID); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[245].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GtpTEid); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[246].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GtptunnelTransportLayerInformationExtIes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[247].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GtptunnelTransportLayerInformation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[248].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GuamiExtIes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[249].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Guami); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[250].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Hysteresis); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[251].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImmediateMdtEUtra); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[252].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImmediateMdtNRExtIes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[253].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImmediateMdtNR); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[254].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InitiatingConditionFailureIndicationExtIes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[255].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InitiatingConditionFailureIndication); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[256].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IntendedTddDLULconfigurationNRExtIes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[257].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IntendedTddDLULconfigurationNR); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[258].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InterfaceInstanceIndication); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[259].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InterfacesToTrace); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[260].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IRNtiExtIes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[261].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IRNti); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[262].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LastVisitedCellItemExtIes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[263].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LastVisitedCellItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[264].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LastVisitedEutrancellInformation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[265].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LastVisitedGerancellInformation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[266].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LastVisitedNgrancellInformation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[267].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LastVisitedUtrancellInformation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[268].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Lcid); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[269].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListOfCells); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[270].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CellsinAoIItemExtIes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[271].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CellsinAoIItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[272].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListOfRannodesinAoI); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[273].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GlobalNgRAnnodesinAoIItemExtIes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[274].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GlobalNgRAnnodesinAoIItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[275].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListOfTaisinAoI); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[276].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaisinAoIItemExtIes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[277].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaisinAoIItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[278].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LocationReportingInformationExtIes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[279].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LocationReportingInformation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[280].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoggedMdtEUtraExtIes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[281].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoggedMdtEUtra); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[282].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoggedEventTriggeredConfigExtIes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[283].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoggedEventTriggeredConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[284].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoggedMdtNRExtIes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[285].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoggedMdtNR); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[286].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ltev2XservicesAuthorizedExtIes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[287].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ltev2XservicesAuthorized); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[288].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LteuesidelinkAggregateMaximumBitRateExtIes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[289].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LteuesidelinkAggregateMaximumBitRate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[290].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*M1ConfigurationExtIes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[291].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*M1Configuration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[292].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*M1PeriodicReportingExtIes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[293].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*M1PeriodicReporting); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[294].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*M1ThresholdEventA2ExtIes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[295].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*M1ThresholdEventA2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[296].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*M4ConfigurationExtIes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[297].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*M4Configuration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[298].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*M5ConfigurationExtIes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[299].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*M5Configuration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[300].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*M6ConfigurationExtIes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[301].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*M6Configuration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[302].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*M7ConfigurationExtIes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[303].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*M7Configuration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[304].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*M7Period); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[305].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MacI); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[306].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MaskedImeisv); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[307].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MaxChopreparations); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[308].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MaximumDataBurstVolume); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[309].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MaximumIpdatarateExtIes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[310].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MaximumIpdatarate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[311].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MbsfncontrolRegionLength); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[312].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MbsfnsubframeAllocationEUTraExtIes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[313].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MbsfnsubframeAllocationEUTra); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[314].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MbsfnsubframeInfoEUTra); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[315].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MbsfnsubframeInfoEUTraItemExtIes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[316].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MbsfnsubframeInfoEUTraItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[317].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MdtConfigurationExtIes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[318].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MdtConfiguration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[319].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MdtConfigurationNRExtIes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[320].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MdtConfigurationNR); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[321].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MdtConfigurationEUtraExtIes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[322].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MdtConfigurationEUtra); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[323].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MdtLocationInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[324].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Mdtplmnlist); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[325].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MdtmodeNR); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[326].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MdtmodeNRExtension); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[327].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MdtmodeNRExtensionIe); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[328].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MdtmodeEUtra); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[329].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MdtmodeEUtraExtension); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[330].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MdtmodeEUtraExtensionIe); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[331].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MeasurementsToActivate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[332].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MeasurementThresholdA2ExtIes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[333].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MeasurementThresholdA2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[334].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MeasurementID); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[335].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MobilityInformation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[336].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MobilityParametersModificationRange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[337].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MobilityParametersInformation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[338].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MobilityRestrictionListExtIesExtension); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[339].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MobilityRestrictionListExtIes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[340].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MobilityRestrictionList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[341].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CntypeRestrictionsForEquivalent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[342].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CntypeRestrictionsForEquivalentItemExtIes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[343].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CntypeRestrictionsForEquivalentItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[344].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RatRestrictionsList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[345].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RatRestrictionsItemExtIes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[346].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RatRestrictionsItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[347].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RatRestrictionInformation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[348].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ForbiddenAreaList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[349].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ForbiddenAreaItemExtIes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[350].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ForbiddenAreaItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[351].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServiceAreaList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[352].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServiceAreaItemExtIes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[353].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServiceAreaItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[354].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MrDCResourceCoordinationInfoExtIes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[355].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MrDCResourceCoordinationInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[356].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NgRAnNodeResourceCoordinationInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[357].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EUTraResourceCoordinationInfoExtIes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[358].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EUTraResourceCoordinationInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[359].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NrResourceCoordinationInfoExtIes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[360].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NrResourceCoordinationInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[361].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessageOversizeNotificationExtIes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[362].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessageOversizeNotification); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[363].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MaximumCellListSize); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[364].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NeDCTDmPatternExtIes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[365].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NeDCTDmPattern); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[366].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NeighbourInformationEUTra); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[367].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NeighbourInformationEUTraItemExtIes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[368].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NeighbourInformationEUTraItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[369].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NeighbourInformationNR); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[370].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NeighbourInformationNRItemExtIes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[371].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NeighbourInformationNRItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[372].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NeighbourInformationNRModeInfoExtIes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[373].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NeighbourInformationNRModeInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[374].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NeighbourInformationNRModeFddinfoExtIes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[375].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NeighbourInformationNRModeFddinfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[376].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NeighbourInformationNRModeTddinfoExtIes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[377].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NeighbourInformationNRModeTddinfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[378].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Nid); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[379].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NrcarrierList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[380].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NrcarrierItemExtIes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[381].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NrcarrierItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[382].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NrcellPrachconfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[383].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NgRAnCellIdentityExtIes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[384].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NgRAnCellIdentity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[385].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NgRAnCellPciExtIes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[386].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NgRAnCellPci); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[387].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NgRAnnodeUexnApid); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[388].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NumberofActiveUes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[389].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NoofRrcconnections); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[390].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NonDynamic5QidescriptorExtIesExtension); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[391].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NonDynamic5QidescriptorExtIes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[392].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NonDynamic5Qidescriptor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[393].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Nrarfcn); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[394].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NgeNbRadioResourceStatusExtIesExtension); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[395].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NgeNbRadioResourceStatusExtIes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[396].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NgeNbRadioResourceStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[397].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DlschedulingPDcchCCeusage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[398].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UlschedulingPDcchCCeusage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[399].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TnlcapacityIndicatorExtIes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[400].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TnlcapacityIndicator); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[401].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NpnBroadcastInformationExtIes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[402].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NpnBroadcastInformation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[403].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NpnBroadcastInformationSNpnExtIes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[404].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NpnBroadcastInformationSNpn); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[405].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NpnBroadcastInformationPNiNPnExtIes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[406].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NpnBroadcastInformationPNiNPn); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[407].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NpnmobilityInformationExtIes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[408].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NpnmobilityInformation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[409].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NpnmobilityInformationSNpnExtIes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[410].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NpnmobilityInformationSNpn); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[411].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NpnmobilityInformationPNiNPnExtIes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[412].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NpnmobilityInformationPNiNPn); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[413].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NpnpagingAssistanceInformationExtIes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[414].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NpnpagingAssistanceInformation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[415].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NpnpagingAssistanceInformationPNiNPnExtIes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[416].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NpnpagingAssistanceInformationPNiNPn); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[417].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NpnSupportExtIes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[418].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NpnSupport); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[419].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NpnSupportSNpnExtIes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[420].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NpnSupportSNpn); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[421].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FddorTDdinNPrachconfigurationChoiceExtIes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[422].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FddortddNprachconfiguration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[423].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NprachconfigurationExtIes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[424].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Nprachconfiguration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[425].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NprachconfigurationFDdExtIes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[426].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NprachconfigurationFDd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[427].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NprachconfigurationTDdExtIes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[428].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NprachconfigurationTDd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[429].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NonAnchorCarrierFrequencylistExtIes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[430].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NestedNonAnchorCarrierFrequencylist); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[431].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NonAnchorCarrierFrequencylist); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[432].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NrCellIdentity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[433].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NgRAnCellIdentityListinRanpagingArea); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[434].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NrCGiExtIes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[435].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NrCGi); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[436].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NrfrequencyBand); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[437].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NrfrequencyBandList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[438].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NrfrequencyBandItemExtIes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[439].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NrfrequencyBandItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[440].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NrfrequencyInfoExtIes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[441].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NrfrequencyInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[442].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NrmobilityHistoryReport); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[443].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NrmodeInfoExtIes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[444].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NrmodeInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[445].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NrmodeInfoFddExtIesExtension); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[446].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NrmodeInfoFddExtIes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[447].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NrmodeInfoFdd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[448].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NrmodeInfoTddExtIesExtension); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[449].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NrmodeInfoTddExtIes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[450].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NrmodeInfoTdd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[451].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Nrpci); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[452].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NrtransmissionBandwidthExtIes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[453].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NrtransmissionBandwidth); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[454].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NgRAntraceId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[455].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Nrv2XservicesAuthorizedExtIes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[456].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Nrv2XservicesAuthorized); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[457].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NruesidelinkAggregateMaximumBitRateExtIes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[458].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NruesidelinkAggregateMaximumBitRate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[459].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OfferedCapacity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[460].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PacketDelayBudget); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[461].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PacketErrorRateExtIes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[462].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PacketErrorRate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[463].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PerScalar); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[464].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PerExponent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[465].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PacketLossRate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[466].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PagingeDrxinformationExtIes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[467].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PagingeDrxinformation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[468].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Pc5QoSparametersExtIes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[469].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Pc5QoSparameters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[470].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Pc5QoSflowList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[471].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Pc5QoSflowItemExtIes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[472].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Pc5QoSflowItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[473].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Pc5FlowBitRatesExtIes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[474].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Pc5FlowBitRates); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[475].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PdcpchangeIndicationExtIes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[476].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PdcpchangeIndication); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[477].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PdcpsnlengthExtIes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[478].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Pdcpsnlength); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[479].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PdusessionAggregateMaximumBitRateExtIes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[480].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PdusessionAggregateMaximumBitRate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[481].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PdusessionList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[482].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PdusessionListwithCause); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[483].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PdusessionListwithCauseItemExtIes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[484].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PdusessionListwithCauseItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[485].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PdusessionListwithDataForwardingFromTarget); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[486].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PdusessionListwithDataForwardingFromTargetItemExtIes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[487].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PdusessionListwithDataForwardingFromTargetItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[488].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PdusessionListwithDataForwardingRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[489].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PdusessionListwithDataForwardingRequestItemExtIes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[490].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PdusessionListwithDataForwardingRequestItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[491].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PdusessionResourcesAdmittedList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[492].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PdusessionResourcesAdmittedItemExtIes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[493].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PdusessionResourcesAdmittedItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[494].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PdusessionResourceAdmittedInfoExtIes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[495].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PdusessionResourceAdmittedInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[496].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PdusessionResourcesNotAdmittedList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[497].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PdusessionResourcesNotAdmittedItemItemExtIes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[498].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PdusessionResourcesNotAdmittedItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[499].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PdusessionResourcesToBeSetupList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[500].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PdusessionResourcesToBeSetupItemExtIesExtension); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[501].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PdusessionResourcesToBeSetupItemExtIes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[502].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PdusessionResourcesToBeSetupItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[503].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PdusessionResourceSetupInfoSNterminatedExtIesExtension); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[504].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PdusessionResourceSetupInfoSNterminatedExtIes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[505].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PdusessionResourceSetupInfoSNterminated); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[506].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QoSflowsToBeSetupListSetupSNterminated); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[507].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QoSflowsToBeSetupListSetupSNterminatedItemExtIesExtension); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[508].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QoSflowsToBeSetupListSetupSNterminatedItemExtIes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[509].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QoSflowsToBeSetupListSetupSNterminatedItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[510].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PdusessionResourceSetupResponseInfoSNterminatedExtIesExtension); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[511].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PdusessionResourceSetupResponseInfoSNterminatedExtIes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[512].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PdusessionResourceSetupResponseInfoSNterminated); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[513].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DrbsToBeSetupListSetupResponseSNterminated); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[514].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DrbsToBeSetupListSetupResponseSNterminatedItemExtIesExtension); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[515].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DrbsToBeSetupListSetupResponseSNterminatedItemExtIes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[516].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DrbsToBeSetupListSetupResponseSNterminatedItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[517].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QoSflowsMappedtoDrbSetupResponseSNterminated); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[518].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QoSflowsMappedtoDrbSetupResponseSNterminatedItemExtIesExtension); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[519].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QoSflowsMappedtoDrbSetupResponseSNterminatedItemExtIes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[520].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QoSflowsMappedtoDrbSetupResponseSNterminatedItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[521].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PdusessionResourceSetupInfoMNterminatedExtIes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[522].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PdusessionResourceSetupInfoMNterminated); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[523].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DrbsToBeSetupListSetupMNterminated); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[524].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DrbsToBeSetupListSetupMNterminatedItemExtIesExtension); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[525].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DrbsToBeSetupListSetupMNterminatedItemExtIes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[526].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DrbsToBeSetupListSetupMNterminatedItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[527].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QoSflowsMappedtoDrbSetupMNterminated); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[528].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QoSflowsMappedtoDrbSetupMNterminatedItemExtIes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[529].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QoSflowsMappedtoDrbSetupMNterminatedItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[530].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PdusessionResourceSetupResponseInfoMNterminatedExtIes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[531].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PdusessionResourceSetupResponseInfoMNterminated); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[532].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DrbsAdmittedListSetupResponseMNterminated); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[533].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DrbsAdmittedListSetupResponseMNterminatedItemExtIesExtension); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[534].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DrbsAdmittedListSetupResponseMNterminatedItemExtIes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[535].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DrbsAdmittedListSetupResponseMNterminatedItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[536].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QoSflowsMappedtoDrbSetupResponseMNterminated); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[537].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QoSflowsMappedtoDrbSetupResponseMNterminatedItemExtIes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[538].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QoSflowsMappedtoDrbSetupResponseMNterminatedItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[539].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PdusessionResourceModificationInfoSNterminatedExtIesExtension); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[540].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PdusessionResourceModificationInfoSNterminatedExtIes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[541].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PdusessionResourceModificationInfoSNterminated); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[542].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QoSflowsToBeSetupListModifiedSNterminated); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[543].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QoSflowsToBeSetupListModifiedSNterminatedItemExtIesExtension); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[544].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QoSflowsToBeSetupListModifiedSNterminatedItemExtIes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[545].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QoSflowsToBeSetupListModifiedSNterminatedItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[546].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DrbsToBeModifiedListModifiedSNterminated); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[547].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DrbsToBeModifiedListModifiedSNterminatedItemExtIes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[548].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DrbsToBeModifiedListModifiedSNterminatedItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[549].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PdusessionResourceModificationResponseInfoSNterminatedExtIesExtension); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[550].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PdusessionResourceModificationResponseInfoSNterminatedExtIes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[551].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PdusessionResourceModificationResponseInfoSNterminated); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[552].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DrbsToBeModifiedListModificationResponseSNterminated); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[553].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DrbsToBeModifiedListModificationResponseSNterminatedItemExtIesExtension); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[554].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DrbsToBeModifiedListModificationResponseSNterminatedItemExtIes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[555].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DrbsToBeModifiedListModificationResponseSNterminatedItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[556].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PdusessionResourceModificationInfoMNterminatedExtIes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[557].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PdusessionResourceModificationInfoMNterminated); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[558].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DrbsToBeModifiedListModificationMNterminated); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[559].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DrbsToBeModifiedListModificationMNterminatedItemExtIesExtension); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[560].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DrbsToBeModifiedListModificationMNterminatedItemExtIes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[561].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DrbsToBeModifiedListModificationMNterminatedItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[562].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PdusessionResourceModificationResponseInfoMNterminatedExtIes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[563].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PdusessionResourceModificationResponseInfoMNterminated); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[564].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DrbsAdmittedListModificationResponseMNterminated); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[565].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DrbsAdmittedListModificationResponseMNterminatedItemExtIesExtension); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[566].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DrbsAdmittedListModificationResponseMNterminatedItemExtIes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[567].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DrbsAdmittedListModificationResponseMNterminatedItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[568].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PdusessionResourceChangeRequiredInfoSNterminatedExtIes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[569].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PdusessionResourceChangeRequiredInfoSNterminated); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[570].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PdusessionResourceChangeConfirmInfoSNterminatedExtIes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[571].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PdusessionResourceChangeConfirmInfoSNterminated); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[572].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PdusessionResourceChangeRequiredInfoMNterminatedExtIes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[573].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PdusessionResourceChangeRequiredInfoMNterminated); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[574].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PdusessionResourceChangeConfirmInfoMNterminatedExtIes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[575].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PdusessionResourceChangeConfirmInfoMNterminated); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[576].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PdusessionResourceModRqdInfoSNterminatedExtIes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[577].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PdusessionResourceModRqdInfoSNterminated); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[578].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DrbsToBeSetupListModRqdSNterminated); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[579].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DrbsToBeSetupListModRqdSNterminatedItemExtIesExtension); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[580].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DrbsToBeSetupListModRqdSNterminatedItemExtIes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[581].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DrbsToBeSetupListModRqdSNterminatedItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[582].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QoSflowsSetupMappedtoDrbModRqdSNterminated); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[583].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QoSflowsSetupMappedtoDrbModRqdSNterminatedItemExtIes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[584].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QoSflowsSetupMappedtoDrbModRqdSNterminatedItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[585].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DrbsToBeModifiedListModRqdSNterminated); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[586].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DrbsToBeModifiedListModRqdSNterminatedItemExtIesExtension); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[587].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DrbsToBeModifiedListModRqdSNterminatedItemExtIes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[588].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DrbsToBeModifiedListModRqdSNterminatedItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[589].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QoSflowsModifiedMappedtoDrbModRqdSNterminated); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[590].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QoSflowsModifiedMappedtoDrbModRqdSNterminatedItemExtIes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[591].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QoSflowsModifiedMappedtoDrbModRqdSNterminatedItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[592].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PdusessionResourceModConfirmInfoSNterminatedExtIes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[593].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PdusessionResourceModConfirmInfoSNterminated); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[594].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DrbsAdmittedListModConfirmSNterminated); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[595].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DrbsAdmittedListModConfirmSNterminatedItemExtIes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[596].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DrbsAdmittedListModConfirmSNterminatedItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[597].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PdusessionResourceModRqdInfoMNterminatedExtIes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[598].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PdusessionResourceModRqdInfoMNterminated); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[599].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DrbsToBeModifiedListModRqdMNterminated); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[600].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DrbsToBeModifiedListModRqdMNterminatedItemExtIes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[601].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DrbsToBeModifiedListModRqdMNterminatedItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[602].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PdusessionResourceModConfirmInfoMNterminatedExtIes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[603].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PdusessionResourceModConfirmInfoMNterminated); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[604].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PdusessionResourceBearerSetupCompleteInfoSNterminatedExtIes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[605].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PdusessionResourceBearerSetupCompleteInfoSNterminated); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[606].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DrbsToBeSetupListBearerSetupCompleteSNterminatedItemExtIes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[607].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DrbsToBeSetupListBearerSetupCompleteSNterminatedItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[608].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PdusessionResourceSecondaryRatusageList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[609].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PdusessionResourceSecondaryRatusageItemExtIes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[610].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PdusessionResourceSecondaryRatusageItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[611].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PdusessionUsageReportExtIes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[612].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PdusessionUsageReport); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[613].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PdusessionID); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[614].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PdusessionNetworkInstance); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[615].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PdusessionCommonNetworkInstance); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[616].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PeriodicalExtIes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[617].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Periodical); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[618].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlmnIdentity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[619].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PcilistForMdt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[620].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PortNumber); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[621].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PriorityLevelQoS); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[622].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProtectedEUTraresourceIndicationExtIes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[623].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProtectedEUTraresourceIndication); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[624].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProtectedEUTraresourceList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[625].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProtectedEUTraresourceItemExtIes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[626].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProtectedEUTraresourceItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[627].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProtectedEUTrafootprintTimePatternExtIes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[628].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProtectedEUTrafootprintTimePattern); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[629].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QoScharacteristicsExtIes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[630].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QoScharacteristics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[631].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QoSflowIdentifier); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[632].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QoSflowLevelQoSparametersExtIesExtension); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[633].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QoSflowLevelQoSparametersExtIes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[634].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QoSflowLevelQoSparameters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[635].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QoSflowNotificationControlIndicationInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[636].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QoSflowNotificationControlIndicationInfoExtIes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[637].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QoSflowNotifyItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[638].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QoSflowsList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[639].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QoSflowItemExtIes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[640].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QoSflowItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[641].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QoSflowsListwithCause); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[642].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QoSflowwithCauseItemExtIes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[643].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QoSflowwithCauseItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[644].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QoSMappingInformationExtIes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[645].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QoSMappingInformation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[646].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QoSparaSetIndex); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[647].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QoSparaSetNotifyIndex); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[648].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QoSflowsAdmittedList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[649].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QoSflowsAdmittedItemExtIes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[650].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QoSflowsAdmittedItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[651].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QoSflowsToBeSetupList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[652].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QoSflowsToBeSetupItemExtIesExtension); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[653].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QoSflowsToBeSetupItemExtIes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[654].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QoSflowsToBeSetupItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[655].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QoSflowsUsageReportList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[656].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QoSflowsUsageReportItemExtIes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[657].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QoSflowsUsageReportItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[658].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QosMonitoringReportingFrequency); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[659].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RachreportInformation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[660].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RachreportListItemExtIes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[661].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RachreportListItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[662].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RachreportContainer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[663].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RadioResourceStatusExtIes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[664].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RadioResourceStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[665].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ranac); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[666].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RanareaIdExtIes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[667].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RanareaId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[668].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RanareaIdList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[669].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RanpagingAreaExtIes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[670].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RanpagingArea); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[671].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RanpagingAreaChoiceExtIes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[672].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RanpagingAreaChoice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[673].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RanpagingAttemptInfoExtIes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[674].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RanpagingAttemptInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[675].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RedundantPdusessionInformationExtIes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[676].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RedundantPdusessionInformation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[677].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReferenceId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[678].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReportType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[679].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReportCharacteristics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[680].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestReferenceId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[681].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReservedSubframePatternExtIes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[682].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReservedSubframePattern); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[683].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResetRequestTypeInfoExtIes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[684].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResetRequestTypeInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[685].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResetRequestTypeInfoFullExtIes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[686].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResetRequestTypeInfoFull); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[687].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResetRequestTypeInfoPartialExtIes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[688].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResetRequestTypeInfoPartial); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[689].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResetRequestPartialReleaseList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[690].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResetRequestPartialReleaseItemExtIes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[691].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResetRequestPartialReleaseItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[692].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResetResponseTypeInfoExtIes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[693].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResetResponseTypeInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[694].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResetResponseTypeInfoFullExtIes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[695].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResetResponseTypeInfoFull); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[696].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResetResponseTypeInfoPartialExtIes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[697].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResetResponseTypeInfoPartial); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[698].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResetResponsePartialReleaseList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[699].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResetResponsePartialReleaseItemExtIes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[700].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResetResponsePartialReleaseItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[701].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RlcStatusExtIes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[702].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RlcStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[703].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RlcduplicationInformationItemExtIes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[704].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RlcduplicationInformation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[705].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RlcduplicationStateList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[706].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RlcduplicationStateItemExtIes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[707].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RlcduplicationStateItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[708].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RfspIndex); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[709].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RrcconnectionsExtIes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[710].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Rrcconnections); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[711].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RrcreestabinitiatedExtIes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[712].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Rrcreestabinitiated); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[713].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RrcreestabInitiatedReportingExtIes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[714].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RrcreestabInitiatedReporting); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[715].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RrcreestabInitiatedReportingwoUErlfreportExtIes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[716].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RrcreestabInitiatedReportingwoUErlfreport); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[717].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RrcreestabInitiatedReportingwithUErlfreportExtIes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[718].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RrcreestabInitiatedReportingwithUErlfreport); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[719].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RrcsetupinitiatedExtIes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[720].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Rrcsetupinitiated); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[721].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RrcsetupInitiatedReportingExtIes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[722].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RrcsetupInitiatedReporting); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[723].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RrcsetupInitiatedReportingwithUErlfreportExtIes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[724].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RrcsetupInitiatedReportingwithUErlfreport); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[725].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SecondarydataForwardingInfoFromTargetItemExtIes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[726].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SecondarydataForwardingInfoFromTargetItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[727].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SecondarydataForwardingInfoFromTargetList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[728].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SecondaryRatusageInformationExtIes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[729].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SecondaryRatusageInformation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[730].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SecurityIndicationExtIes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[731].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SecurityIndication); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[732].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SecurityResultExtIes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[733].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SecurityResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[734].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SensorMeasurementConfigurationExtIes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[735].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SensorMeasurementConfiguration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[736].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SensorMeasConfigNameList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[737].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SensorNameConfigExtIes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[738].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SensorName); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[739].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServedCellInformationEUTraExtIesExtension); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[740].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServedCellInformationEUTraExtIes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[741].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServedCellInformationEUTra); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[742].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServedCellInformationEUTraperBplmnExtIes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[743].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServedCellInformationEUTraperBplmn); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[744].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServedCellInformationEUTraModeInfoExtIes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[745].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServedCellInformationEUTraModeInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[746].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServedCellInformationEUTraFDdinfoExtIesExtension); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[747].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServedCellInformationEUTraFDdinfoExtIes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[748].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServedCellInformationEUTraFDdinfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[749].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServedCellInformationEUTraTDdinfoExtIesExtension); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[750].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServedCellInformationEUTraTDdinfoExtIes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[751].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServedCellInformationEUTraTDdinfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[752].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServedCellsEUTra); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[753].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServedCellsEUTraItemExtIes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[754].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServedCellsEUTraItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[755].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServedCellsToUpdateEUTraExtIes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[756].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServedCellsToUpdateEUTra); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[757].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServedCellsToModifyEUTra); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[758].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServedcellsToModifyEUTraItemExtIes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[759].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServedCellsToModifyEUTraItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[760].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServedCellInformationNRExtIesExtension); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[761].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServedCellInformationNRExtIes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[762].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServedCellInformationNR); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[763].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SfnOffsetExtIes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[764].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SfnOffset); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[765].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServedCellsNR); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[766].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServedCellsNRItemExtIes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[767].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServedCellsNRItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[768].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServedCellsToModifyNR); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[769].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServedcellsToModifyNRItemExtIes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[770].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServedCellsToModifyNRItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[771].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServedCellsToUpdateNRExtIes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[772].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServedCellsToUpdateNR); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[773].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SharedResourceTypeExtIes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[774].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SharedResourceType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[775].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SharedResourceTypeULOnlySharingExtIes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[776].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SharedResourceTypeULOnlySharing); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[777].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SharedResourceTypeULdlSharingExtIes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[778].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SharedResourceTypeULdlSharing); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[779].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SharedResourceTypeULdlSharingULResourcesExtIes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[780].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SharedResourceTypeULdlSharingULResources); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[781].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SharedResourceTypeULdlSharingULResourcesChangedExtIes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[782].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SharedResourceTypeULdlSharingULResourcesChanged); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[783].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SharedResourceTypeULdlSharingDLResourcesExtIes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[784].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SharedResourceTypeULdlSharingDLResources); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[785].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SharedResourceTypeULdlSharingDLResourcesChangedExtIes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[786].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SharedResourceTypeULdlSharingDLResourcesChanged); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[787].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SliceAvailableCapacity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[788].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SliceAvailableCapacityItemExtIes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[789].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SliceAvailableCapacityItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[790].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SnssaiavailableCapacityList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[791].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SnssaiavailableCapacityItemExtIes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[792].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SnssaiavailableCapacityItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[793].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SliceSupportList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[794].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SliceToReportList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[795].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SliceToReportListItemExtIes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[796].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SliceToReportListItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[797].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Snssailist); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[798].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SnssaiItemExtIes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[799].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SnssaiItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[800].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SlotConfigurationList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[801].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SlotConfigurationListItemExtIes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[802].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SlotConfigurationListItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[803].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SNGRAnnodeSecurityKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[804].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SNSsaiExtIes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[805].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SNSsai); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[806].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpecialSubframeInfoEUTraExtIes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[807].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpecialSubframeInfoEUTra); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[808].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpectrumSharingGroupId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[809].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SsbareaCapacityValueList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[810].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SsbareaCapacityValueListItemExtIes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[811].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SsbareaCapacityValueListItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[812].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SsbareaRadioResourceStatusList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[813].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SsbareaRadioResourceStatusListItemExtIesExtension); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[814].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SsbareaRadioResourceStatusListItemExtIes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[815].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SsbareaRadioResourceStatusListItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[816].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SsbPositionsInBurstExtIes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[817].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SsbPositionsInBurst); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[818].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SsbtoReportList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[819].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SsbtoReportListItemExtIes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[820].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SsbtoReportListItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[821].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SulFrequencyBand); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[822].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SulInformationExtIesExtension); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[823].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SulInformationExtIes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[824].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SulInformation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[825].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SupportedSulbandList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[826].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SupportedSulbandItemExtIes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[827].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SupportedSulbandItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[828].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SymbolAllocationinSlotExtIes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[829].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SymbolAllocationinSlot); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[830].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SymbolAllocationinSlotAllDlExtIes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[831].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SymbolAllocationinSlotAllDl); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[832].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SymbolAllocationinSlotAllUlExtIes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[833].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SymbolAllocationinSlotAllUl); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[834].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SymbolAllocationinSlotBothDlandUlExtIes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[835].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SymbolAllocationinSlotBothDlandUl); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[836].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TabasedMdtExtIes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[837].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TabasedMdt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[838].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaibasedMdtExtIes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[839].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaibasedMdt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[840].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TailistforMdt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[841].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaiforMdtItemExtIes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[842].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaiforMdtItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[843].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Tac); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[844].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaisupportList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[845].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaisupportItemExtIes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[846].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaisupportItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[847].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TalistforMdt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[848].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TargetCellinEutran); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[849].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TargetCgiExtIes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[850].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TargetCGi); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[851].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TdduldlconfigurationCommonNr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[852].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TargetCellList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[853].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TargetCellListItemExtIes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[854].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TargetCellListItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[855].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ThresholdRSrq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[856].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ThresholdRSrp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[857].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ThresholdSInr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[858].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TnlconfigurationInfoExtIes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[859].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TnlconfigurationInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[860].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TnlaToAddList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[861].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TnlaToAddItemExtIes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[862].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TnlaToAddItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[863].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TnlaToUpdateList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[864].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TnlaToUpdateItemExtIes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[865].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TnlaToUpdateItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[866].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TnlaToRemoveList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[867].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TnlaToRemoveItemExtIes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[868].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TnlaToRemoveItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[869].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TnlaSetupList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[870].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TnlaSetupItemExtIes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[871].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TnlaSetupItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[872].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TnlaFailedToSetupList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[873].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TnlaFailedToSetupItemExtIes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[874].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TnlaFailedToSetupItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[875].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransportLayerAddress); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[876].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TraceActivationExtIesExtension); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[877].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TraceActivationExtIes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[878].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TraceActivation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[879].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TsctrafficCharacteristicsExtIes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[880].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TsctrafficCharacteristics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[881].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TscassistanceInformationExtIes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[882].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TscassistanceInformation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[883].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UeaggregateMaximumBitRateExtIes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[884].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UeaggregateMaximumBitRate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[885].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UecontextIdExtIes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[886].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UecontextId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[887].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UecontextIdforRrcresumeExtIes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[888].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UecontextIdforRrcresume); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[889].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UecontextIdforRrcreestablishmentExtIes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[890].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UecontextIdforRrcreestablishment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[891].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UecontextInfoRetrUectxtRespExtIesExtension); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[892].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UecontextInfoRetrUectxtRespExtIes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[893].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UecontextInfoRetrUectxtResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[894].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UehistoryInformation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[895].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UehistoryInformationFromTheUeExtIes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[896].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UehistoryInformationFromTheUe); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[897].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UeidentityIndexValueExtIes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[898].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UeidentityIndexValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[899].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UeradioCapabilityForPagingExtIes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[900].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UeradioCapabilityForPaging); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[901].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UeradioCapabilityForPagingOfNr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[902].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UeradioCapabilityForPagingOfEutra); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[903].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UeradioCapabilityId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[904].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UeranpagingIdentityExtIes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[905].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UeranpagingIdentity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[906].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UerlfreportContainerExtIes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[907].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UerlfreportContainer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[908].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UerlfreportContainerLte); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[909].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UerlfreportContainerNr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[910].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UesecurityCapabilitiesExtIes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[911].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UesecurityCapabilities); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[912].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UlconfigurationExtIes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[913].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ulconfiguration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[914].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UlGBrPRbusage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[915].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UlnonGBrPRbusage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[916].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UlTotalPRbusage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[917].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UptransportLayerInformationExtIes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[918].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UptransportLayerInformation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[919].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UptransportParameters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[920].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UptransportParametersItemExtIes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[921].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UptransportParametersItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[922].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Uriaddress); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[923].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VolumeTimedReportList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[924].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VolumeTimedReportItemExtIes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[925].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VolumeTimedReportItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[926].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WlanmeasurementConfigurationExtIes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[927].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WlanmeasurementConfiguration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[928].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WlanmeasConfigNameList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[929].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Wlanname); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xnap_v1_xnap_ies_proto_msgTypes[930].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*XnBenefitValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_api_xnap_v1_xnap_ies_proto_msgTypes[16].OneofWrappers = []interface{}{}
	file_api_xnap_v1_xnap_ies_proto_msgTypes[23].OneofWrappers = []interface{}{}
	file_api_xnap_v1_xnap_ies_proto_msgTypes[24].OneofWrappers = []interface{}{
		(*AreaScopeOfMdtNR_CellBased)(nil),
		(*AreaScopeOfMdtNR_TAbased)(nil),
		(*AreaScopeOfMdtNR_TAibased)(nil),
	}
	file_api_xnap_v1_xnap_ies_proto_msgTypes[25].OneofWrappers = []interface{}{
		(*AreaScopeOfMdtEUtra_CellBased)(nil),
		(*AreaScopeOfMdtEUtra_TAbased)(nil),
		(*AreaScopeOfMdtEUtra_TAibased)(nil),
	}
	file_api_xnap_v1_xnap_ies_proto_msgTypes[28].OneofWrappers = []interface{}{}
	file_api_xnap_v1_xnap_ies_proto_msgTypes[32].OneofWrappers = []interface{}{}
	file_api_xnap_v1_xnap_ies_proto_msgTypes[37].OneofWrappers = []interface{}{}
	file_api_xnap_v1_xnap_ies_proto_msgTypes[42].OneofWrappers = []interface{}{}
	file_api_xnap_v1_xnap_ies_proto_msgTypes[44].OneofWrappers = []interface{}{
		(*BplmnIDInfoNRItemExtIesExtension_IdConfiguredTacindication)(nil),
		(*BplmnIDInfoNRItemExtIesExtension_IdNpnBroadcastInformation)(nil),
	}
	file_api_xnap_v1_xnap_ies_proto_msgTypes[46].OneofWrappers = []interface{}{}
	file_api_xnap_v1_xnap_ies_proto_msgTypes[56].OneofWrappers = []interface{}{
		(*BroadcastPlmninTaisupportItemExtIesExtension_IdNpnSupport)(nil),
		(*BroadcastPlmninTaisupportItemExtIesExtension_IdExtendedTaisliceSupportList)(nil),
	}
	file_api_xnap_v1_xnap_ies_proto_msgTypes[68].OneofWrappers = []interface{}{}
	file_api_xnap_v1_xnap_ies_proto_msgTypes[70].OneofWrappers = []interface{}{
		(*Cause_RadioNetwork)(nil),
		(*Cause_Transport)(nil),
		(*Cause_Protocol)(nil),
		(*Cause_Misc)(nil),
		(*Cause_ChoiceExtension)(nil),
	}
	file_api_xnap_v1_xnap_ies_proto_msgTypes[73].OneofWrappers = []interface{}{
		(*CellAssistanceInfoNR_LimitedNrList)(nil),
		(*CellAssistanceInfoNR_FullList)(nil),
		(*CellAssistanceInfoNR_ChoiceExtension)(nil),
	}
	file_api_xnap_v1_xnap_ies_proto_msgTypes[75].OneofWrappers = []interface{}{}
	file_api_xnap_v1_xnap_ies_proto_msgTypes[77].OneofWrappers = []interface{}{}
	file_api_xnap_v1_xnap_ies_proto_msgTypes[80].OneofWrappers = []interface{}{
		(*CellAssistanceInfoEUtra_LimitedEutraList)(nil),
		(*CellAssistanceInfoEUtra_FullList)(nil),
		(*CellAssistanceInfoEUtra_ChoiceExtension)(nil),
	}
	file_api_xnap_v1_xnap_ies_proto_msgTypes[91].OneofWrappers = []interface{}{}
	file_api_xnap_v1_xnap_ies_proto_msgTypes[94].OneofWrappers = []interface{}{}
	file_api_xnap_v1_xnap_ies_proto_msgTypes[96].OneofWrappers = []interface{}{
		(*CellTypeChoice_NgRanEUtra)(nil),
		(*CellTypeChoice_NgRanNr)(nil),
		(*CellTypeChoice_EUtran)(nil),
		(*CellTypeChoice_ChoiceExtension)(nil),
	}
	file_api_xnap_v1_xnap_ies_proto_msgTypes[100].OneofWrappers = []interface{}{}
	file_api_xnap_v1_xnap_ies_proto_msgTypes[102].OneofWrappers = []interface{}{}
	file_api_xnap_v1_xnap_ies_proto_msgTypes[104].OneofWrappers = []interface{}{}
	file_api_xnap_v1_xnap_ies_proto_msgTypes[113].OneofWrappers = []interface{}{
		(*CptransportLayerInformation_EndpointIpaddress)(nil),
		(*CptransportLayerInformation_ChoiceExtension)(nil),
	}
	file_api_xnap_v1_xnap_ies_proto_msgTypes[115].OneofWrappers = []interface{}{}
	file_api_xnap_v1_xnap_ies_proto_msgTypes[121].OneofWrappers = []interface{}{
		(*XnUaddressInfoperPdusessionItemExtIesExtension_IdSecondarydataForwardingInfoFromTargetList)(nil),
		(*XnUaddressInfoperPdusessionItemExtIesExtension_IdDrbIdsTakenintouse)(nil),
		(*XnUaddressInfoperPdusessionItemExtIesExtension_IdDataForwardingInfoFromTargetEUtrannode)(nil),
	}
	file_api_xnap_v1_xnap_ies_proto_msgTypes[123].OneofWrappers = []interface{}{}
	file_api_xnap_v1_xnap_ies_proto_msgTypes[133].OneofWrappers = []interface{}{}
	file_api_xnap_v1_xnap_ies_proto_msgTypes[138].OneofWrappers = []interface{}{}
	file_api_xnap_v1_xnap_ies_proto_msgTypes[140].OneofWrappers = []interface{}{
		(*QoSflowsToBeForwardedItemExtIesExtension_IdUlforwardingProposal)(nil),
		(*QoSflowsToBeForwardedItemExtIesExtension_IdSourceDlforwardingIpaddress)(nil),
		(*QoSflowsToBeForwardedItemExtIesExtension_IdSourceNodeDlforwardingIpaddress)(nil),
	}
	file_api_xnap_v1_xnap_ies_proto_msgTypes[144].OneofWrappers = []interface{}{}
	file_api_xnap_v1_xnap_ies_proto_msgTypes[147].OneofWrappers = []interface{}{}
	file_api_xnap_v1_xnap_ies_proto_msgTypes[155].OneofWrappers = []interface{}{
		(*DlcountChoice_Count12Bits)(nil),
		(*DlcountChoice_Count18Bits)(nil),
		(*DlcountChoice_ChoiceExtension)(nil),
	}
	file_api_xnap_v1_xnap_ies_proto_msgTypes[163].OneofWrappers = []interface{}{}
	file_api_xnap_v1_xnap_ies_proto_msgTypes[175].OneofWrappers = []interface{}{
		(*DrbbstatusTransferChoice_PdcpSn_12Bits)(nil),
		(*DrbbstatusTransferChoice_PdcpSn_18Bits)(nil),
		(*DrbbstatusTransferChoice_ChoiceExtension)(nil),
	}
	file_api_xnap_v1_xnap_ies_proto_msgTypes[177].OneofWrappers = []interface{}{}
	file_api_xnap_v1_xnap_ies_proto_msgTypes[179].OneofWrappers = []interface{}{}
	file_api_xnap_v1_xnap_ies_proto_msgTypes[182].OneofWrappers = []interface{}{}
	file_api_xnap_v1_xnap_ies_proto_msgTypes[183].OneofWrappers = []interface{}{
		(*Dynamic5QidescriptorExtIesExtension_IdExtendedPacketDelayBudget)(nil),
		(*Dynamic5QidescriptorExtIesExtension_IdCnpacketDelayBudgetDownlink)(nil),
		(*Dynamic5QidescriptorExtIesExtension_IdCnpacketDelayBudgetUplink)(nil),
	}
	file_api_xnap_v1_xnap_ies_proto_msgTypes[185].OneofWrappers = []interface{}{}
	file_api_xnap_v1_xnap_ies_proto_msgTypes[195].OneofWrappers = []interface{}{}
	file_api_xnap_v1_xnap_ies_proto_msgTypes[201].OneofWrappers = []interface{}{
		(*EventTypeTrigger_OutOfCoverage)(nil),
		(*EventTypeTrigger_EventL1)(nil),
		(*EventTypeTrigger_ChoiceExtensions)(nil),
	}
	file_api_xnap_v1_xnap_ies_proto_msgTypes[204].OneofWrappers = []interface{}{
		(*MeasurementThresholdL1LoggedMdt_ThresholdRsrp)(nil),
		(*MeasurementThresholdL1LoggedMdt_ThresholdRsrq)(nil),
	}
	file_api_xnap_v1_xnap_ies_proto_msgTypes[208].OneofWrappers = []interface{}{}
	file_api_xnap_v1_xnap_ies_proto_msgTypes[210].OneofWrappers = []interface{}{}
	file_api_xnap_v1_xnap_ies_proto_msgTypes[213].OneofWrappers = []interface{}{}
	file_api_xnap_v1_xnap_ies_proto_msgTypes[221].OneofWrappers = []interface{}{}
	file_api_xnap_v1_xnap_ies_proto_msgTypes[228].OneofWrappers = []interface{}{}
	file_api_xnap_v1_xnap_ies_proto_msgTypes[232].OneofWrappers = []interface{}{
		(*GnbIDChoice_GnbId)(nil),
		(*GnbIDChoice_ChoiceExtension)(nil),
	}
	file_api_xnap_v1_xnap_ies_proto_msgTypes[240].OneofWrappers = []interface{}{
		(*EnbIDChoice_EnbIdMacro)(nil),
		(*EnbIDChoice_EnbIdShortmacro)(nil),
		(*EnbIDChoice_EnbIdLongmacro)(nil),
		(*EnbIDChoice_ChoiceExtension)(nil),
	}
	file_api_xnap_v1_xnap_ies_proto_msgTypes[244].OneofWrappers = []interface{}{
		(*GlobalNgRAnnodeID_GNb)(nil),
		(*GlobalNgRAnnodeID_NgENb)(nil),
		(*GlobalNgRAnnodeID_ChoiceExtension)(nil),
	}
	file_api_xnap_v1_xnap_ies_proto_msgTypes[253].OneofWrappers = []interface{}{}
	file_api_xnap_v1_xnap_ies_proto_msgTypes[255].OneofWrappers = []interface{}{
		(*InitiatingConditionFailureIndication_RRcreestab)(nil),
		(*InitiatingConditionFailureIndication_RRcsetup)(nil),
		(*InitiatingConditionFailureIndication_ChoiceExtension)(nil),
	}
	file_api_xnap_v1_xnap_ies_proto_msgTypes[261].OneofWrappers = []interface{}{
		(*IRNti_IRntiFull)(nil),
		(*IRNti_IRntiShort)(nil),
		(*IRNti_ChoiceExtension)(nil),
	}
	file_api_xnap_v1_xnap_ies_proto_msgTypes[263].OneofWrappers = []interface{}{
		(*LastVisitedCellItem_NGRanCell)(nil),
		(*LastVisitedCellItem_EUtranCell)(nil),
		(*LastVisitedCellItem_UTranCell)(nil),
		(*LastVisitedCellItem_GEranCell)(nil),
		(*LastVisitedCellItem_ChoiceExtension)(nil),
	}
	file_api_xnap_v1_xnap_ies_proto_msgTypes[279].OneofWrappers = []interface{}{}
	file_api_xnap_v1_xnap_ies_proto_msgTypes[281].OneofWrappers = []interface{}{}
	file_api_xnap_v1_xnap_ies_proto_msgTypes[285].OneofWrappers = []interface{}{}
	file_api_xnap_v1_xnap_ies_proto_msgTypes[287].OneofWrappers = []interface{}{}
	file_api_xnap_v1_xnap_ies_proto_msgTypes[291].OneofWrappers = []interface{}{}
	file_api_xnap_v1_xnap_ies_proto_msgTypes[313].OneofWrappers = []interface{}{
		(*MbsfnsubframeAllocationEUTra_Oneframe)(nil),
		(*MbsfnsubframeAllocationEUTra_Fourframes)(nil),
		(*MbsfnsubframeAllocationEUTra_ChoiceExtension)(nil),
	}
	file_api_xnap_v1_xnap_ies_proto_msgTypes[318].OneofWrappers = []interface{}{}
	file_api_xnap_v1_xnap_ies_proto_msgTypes[320].OneofWrappers = []interface{}{}
	file_api_xnap_v1_xnap_ies_proto_msgTypes[322].OneofWrappers = []interface{}{}
	file_api_xnap_v1_xnap_ies_proto_msgTypes[325].OneofWrappers = []interface{}{
		(*MdtmodeNR_ImmediateMdt)(nil),
		(*MdtmodeNR_LoggedMdt)(nil),
		(*MdtmodeNR_MDtmodeNrExtension)(nil),
	}
	file_api_xnap_v1_xnap_ies_proto_msgTypes[328].OneofWrappers = []interface{}{
		(*MdtmodeEUtra_ImmediateMdt)(nil),
		(*MdtmodeEUtra_LoggedMdt)(nil),
		(*MdtmodeEUtra_MDtmodeEutraExtension)(nil),
	}
	file_api_xnap_v1_xnap_ies_proto_msgTypes[333].OneofWrappers = []interface{}{
		(*MeasurementThresholdA2_ThresholdRsrp)(nil),
		(*MeasurementThresholdA2_ThresholdRsrq)(nil),
		(*MeasurementThresholdA2_ThresholdSinr)(nil),
		(*MeasurementThresholdA2_ChoiceExtension)(nil),
	}
	file_api_xnap_v1_xnap_ies_proto_msgTypes[338].OneofWrappers = []interface{}{
		(*MobilityRestrictionListExtIesExtension_IdLastEUtranplmnidentity)(nil),
		(*MobilityRestrictionListExtIesExtension_IdCntypeRestrictionsForServing)(nil),
		(*MobilityRestrictionListExtIesExtension_IdCntypeRestrictionsForEquivalent)(nil),
		(*MobilityRestrictionListExtIesExtension_IdNpnmobilityInformation)(nil),
	}
	file_api_xnap_v1_xnap_ies_proto_msgTypes[340].OneofWrappers = []interface{}{}
	file_api_xnap_v1_xnap_ies_proto_msgTypes[356].OneofWrappers = []interface{}{
		(*NgRAnNodeResourceCoordinationInfo_EutraResourceCoordinationInfo)(nil),
		(*NgRAnNodeResourceCoordinationInfo_NrResourceCoordinationInfo)(nil),
	}
	file_api_xnap_v1_xnap_ies_proto_msgTypes[358].OneofWrappers = []interface{}{}
	file_api_xnap_v1_xnap_ies_proto_msgTypes[360].OneofWrappers = []interface{}{}
	file_api_xnap_v1_xnap_ies_proto_msgTypes[368].OneofWrappers = []interface{}{}
	file_api_xnap_v1_xnap_ies_proto_msgTypes[371].OneofWrappers = []interface{}{}
	file_api_xnap_v1_xnap_ies_proto_msgTypes[373].OneofWrappers = []interface{}{
		(*NeighbourInformationNRModeInfo_FddInfo)(nil),
		(*NeighbourInformationNRModeInfo_TddInfo)(nil),
		(*NeighbourInformationNRModeInfo_ChoiceExtension)(nil),
	}
	file_api_xnap_v1_xnap_ies_proto_msgTypes[384].OneofWrappers = []interface{}{
		(*NgRAnCellIdentity_Nr)(nil),
		(*NgRAnCellIdentity_EUtra)(nil),
		(*NgRAnCellIdentity_ChoiceExtension)(nil),
	}
	file_api_xnap_v1_xnap_ies_proto_msgTypes[386].OneofWrappers = []interface{}{
		(*NgRAnCellPci_Nr)(nil),
		(*NgRAnCellPci_EUtra)(nil),
		(*NgRAnCellPci_ChoiceExtension)(nil),
	}
	file_api_xnap_v1_xnap_ies_proto_msgTypes[390].OneofWrappers = []interface{}{
		(*NonDynamic5QidescriptorExtIesExtension_IdCnpacketDelayBudgetDownlink)(nil),
		(*NonDynamic5QidescriptorExtIesExtension_IdCnpacketDelayBudgetUplink)(nil),
	}
	file_api_xnap_v1_xnap_ies_proto_msgTypes[392].OneofWrappers = []interface{}{}
	file_api_xnap_v1_xnap_ies_proto_msgTypes[394].OneofWrappers = []interface{}{
		(*NgeNbRadioResourceStatusExtIesExtension_IdDlSchedulingPdcchCceUsage)(nil),
		(*NgeNbRadioResourceStatusExtIesExtension_IdUlSchedulingPdcchCceUsage)(nil),
	}
	file_api_xnap_v1_xnap_ies_proto_msgTypes[402].OneofWrappers = []interface{}{
		(*NpnBroadcastInformation_SnpnInformation)(nil),
		(*NpnBroadcastInformation_PniNpnInformation)(nil),
		(*NpnBroadcastInformation_ChoiceExtension)(nil),
	}
	file_api_xnap_v1_xnap_ies_proto_msgTypes[408].OneofWrappers = []interface{}{
		(*NpnmobilityInformation_SnpnMobilityInformation)(nil),
		(*NpnmobilityInformation_PniNpnMobilityInformation)(nil),
		(*NpnmobilityInformation_ChoiceExtension)(nil),
	}
	file_api_xnap_v1_xnap_ies_proto_msgTypes[414].OneofWrappers = []interface{}{
		(*NpnpagingAssistanceInformation_PniNpnInformation)(nil),
		(*NpnpagingAssistanceInformation_ChoiceExtension)(nil),
	}
	file_api_xnap_v1_xnap_ies_proto_msgTypes[418].OneofWrappers = []interface{}{
		(*NpnSupport_SNpn)(nil),
		(*NpnSupport_ChoiceExtensions)(nil),
	}
	file_api_xnap_v1_xnap_ies_proto_msgTypes[422].OneofWrappers = []interface{}{
		(*FddortddNprachconfiguration_Fdd)(nil),
		(*FddortddNprachconfiguration_Tdd)(nil),
		(*FddortddNprachconfiguration_ChoiceExtension)(nil),
	}
	file_api_xnap_v1_xnap_ies_proto_msgTypes[426].OneofWrappers = []interface{}{}
	file_api_xnap_v1_xnap_ies_proto_msgTypes[428].OneofWrappers = []interface{}{}
	file_api_xnap_v1_xnap_ies_proto_msgTypes[439].OneofWrappers = []interface{}{}
	file_api_xnap_v1_xnap_ies_proto_msgTypes[441].OneofWrappers = []interface{}{}
	file_api_xnap_v1_xnap_ies_proto_msgTypes[444].OneofWrappers = []interface{}{
		(*NrmodeInfo_Fdd)(nil),
		(*NrmodeInfo_Tdd)(nil),
		(*NrmodeInfo_ChoiceExtension)(nil),
	}
	file_api_xnap_v1_xnap_ies_proto_msgTypes[445].OneofWrappers = []interface{}{
		(*NrmodeInfoFddExtIesExtension_IdUlcarrierList)(nil),
		(*NrmodeInfoFddExtIesExtension_IdDlcarrierList)(nil),
	}
	file_api_xnap_v1_xnap_ies_proto_msgTypes[448].OneofWrappers = []interface{}{
		(*NrmodeInfoTddExtIesExtension_IdIntendedTddDlUlconfigurationNr)(nil),
		(*NrmodeInfoTddExtIesExtension_IdTdduldlconfigurationCommonNr)(nil),
		(*NrmodeInfoTddExtIesExtension_IdCarrierList)(nil),
	}
	file_api_xnap_v1_xnap_ies_proto_msgTypes[456].OneofWrappers = []interface{}{}
	file_api_xnap_v1_xnap_ies_proto_msgTypes[467].OneofWrappers = []interface{}{}
	file_api_xnap_v1_xnap_ies_proto_msgTypes[469].OneofWrappers = []interface{}{}
	file_api_xnap_v1_xnap_ies_proto_msgTypes[472].OneofWrappers = []interface{}{}
	file_api_xnap_v1_xnap_ies_proto_msgTypes[476].OneofWrappers = []interface{}{
		(*PdcpchangeIndication_FromSNgRanNode)(nil),
		(*PdcpchangeIndication_FromMNgRanNode)(nil),
		(*PdcpchangeIndication_ChoiceExtension)(nil),
	}
	file_api_xnap_v1_xnap_ies_proto_msgTypes[484].OneofWrappers = []interface{}{}
	file_api_xnap_v1_xnap_ies_proto_msgTypes[490].OneofWrappers = []interface{}{}
	file_api_xnap_v1_xnap_ies_proto_msgTypes[495].OneofWrappers = []interface{}{}
	file_api_xnap_v1_xnap_ies_proto_msgTypes[498].OneofWrappers = []interface{}{}
	file_api_xnap_v1_xnap_ies_proto_msgTypes[500].OneofWrappers = []interface{}{
		(*PdusessionResourcesToBeSetupItemExtIesExtension_IdAdditionalUlNgUTnlatUpfList)(nil),
		(*PdusessionResourcesToBeSetupItemExtIesExtension_IdPdusessionCommonNetworkInstance)(nil),
		(*PdusessionResourcesToBeSetupItemExtIesExtension_IdRedundantUlNgUTnlatUpf)(nil),
		(*PdusessionResourcesToBeSetupItemExtIesExtension_IdAdditionalRedundantUlNgUTnlatUpfList)(nil),
		(*PdusessionResourcesToBeSetupItemExtIesExtension_IdRedundantCommonNetworkInstance)(nil),
		(*PdusessionResourcesToBeSetupItemExtIesExtension_IdRedundantPdusessionInformation)(nil),
	}
	file_api_xnap_v1_xnap_ies_proto_msgTypes[502].OneofWrappers = []interface{}{}
	file_api_xnap_v1_xnap_ies_proto_msgTypes[503].OneofWrappers = []interface{}{
		(*PdusessionResourceSetupInfoSNterminatedExtIesExtension_IdSecurityResult)(nil),
		(*PdusessionResourceSetupInfoSNterminatedExtIesExtension_IdPdusessionCommonNetworkInstance)(nil),
		(*PdusessionResourceSetupInfoSNterminatedExtIesExtension_IdDefaultDrbAllowed)(nil),
		(*PdusessionResourceSetupInfoSNterminatedExtIesExtension_IdSplitSessionIndicator)(nil),
		(*PdusessionResourceSetupInfoSNterminatedExtIesExtension_IdNonGbrresourcesOffered)(nil),
		(*PdusessionResourceSetupInfoSNterminatedExtIesExtension_IdRedundantUlNgUTnlatUpf)(nil),
		(*PdusessionResourceSetupInfoSNterminatedExtIesExtension_IdRedundantCommonNetworkInstance)(nil),
		(*PdusessionResourceSetupInfoSNterminatedExtIesExtension_IdRedundantPdusessionInformation)(nil),
	}
	file_api_xnap_v1_xnap_ies_proto_msgTypes[505].OneofWrappers = []interface{}{}
	file_api_xnap_v1_xnap_ies_proto_msgTypes[507].OneofWrappers = []interface{}{
		(*QoSflowsToBeSetupListSetupSNterminatedItemExtIesExtension_IdTsctrafficCharacteristics)(nil),
		(*QoSflowsToBeSetupListSetupSNterminatedItemExtIesExtension_IdRedundantQoSflowIndicator)(nil),
	}
	file_api_xnap_v1_xnap_ies_proto_msgTypes[509].OneofWrappers = []interface{}{}
	file_api_xnap_v1_xnap_ies_proto_msgTypes[510].OneofWrappers = []interface{}{
		(*PdusessionResourceSetupResponseInfoSNterminatedExtIesExtension_IdDrbIdsTakenintouse)(nil),
		(*PdusessionResourceSetupResponseInfoSNterminatedExtIesExtension_IdRedundantDlNgUTnlatNgRan)(nil),
		(*PdusessionResourceSetupResponseInfoSNterminatedExtIesExtension_IdUsedRsninformation)(nil),
	}
	file_api_xnap_v1_xnap_ies_proto_msgTypes[512].OneofWrappers = []interface{}{}
	file_api_xnap_v1_xnap_ies_proto_msgTypes[514].OneofWrappers = []interface{}{
		(*DrbsToBeSetupListSetupResponseSNterminatedItemExtIesExtension_IdAdditionalPdcpDuplicationTnlList)(nil),
		(*DrbsToBeSetupListSetupResponseSNterminatedItemExtIesExtension_IdRlcduplicationInformation)(nil),
	}
	file_api_xnap_v1_xnap_ies_proto_msgTypes[516].OneofWrappers = []interface{}{}
	file_api_xnap_v1_xnap_ies_proto_msgTypes[518].OneofWrappers = []interface{}{
		(*QoSflowsMappedtoDrbSetupResponseSNterminatedItemExtIesExtension_IdCurrentQoSparaSetIndex)(nil),
		(*QoSflowsMappedtoDrbSetupResponseSNterminatedItemExtIesExtension_IdSourceDlforwardingIpaddress)(nil),
	}
	file_api_xnap_v1_xnap_ies_proto_msgTypes[520].OneofWrappers = []interface{}{}
	file_api_xnap_v1_xnap_ies_proto_msgTypes[524].OneofWrappers = []interface{}{
		(*DrbsToBeSetupListSetupMNterminatedItemExtIesExtension_IdAdditionalPdcpDuplicationTnlList)(nil),
		(*DrbsToBeSetupListSetupMNterminatedItemExtIesExtension_IdRlcduplicationInformation)(nil),
	}
	file_api_xnap_v1_xnap_ies_proto_msgTypes[526].OneofWrappers = []interface{}{}
	file_api_xnap_v1_xnap_ies_proto_msgTypes[529].OneofWrappers = []interface{}{}
	file_api_xnap_v1_xnap_ies_proto_msgTypes[533].OneofWrappers = []interface{}{
		(*DrbsAdmittedListSetupResponseMNterminatedItemExtIesExtension_IdAdditionalPdcpDuplicationTnlList)(nil),
		(*DrbsAdmittedListSetupResponseMNterminatedItemExtIesExtension_IdQoSflowsMappedtoDrbSetupResponseMnterminated)(nil),
	}
	file_api_xnap_v1_xnap_ies_proto_msgTypes[535].OneofWrappers = []interface{}{}
	file_api_xnap_v1_xnap_ies_proto_msgTypes[539].OneofWrappers = []interface{}{
		(*PdusessionResourceModificationInfoSNterminatedExtIesExtension_IdPdusessionCommonNetworkInstance)(nil),
		(*PdusessionResourceModificationInfoSNterminatedExtIesExtension_IdDefaultDrbAllowed)(nil),
		(*PdusessionResourceModificationInfoSNterminatedExtIesExtension_IdNonGbrresourcesOffered)(nil),
		(*PdusessionResourceModificationInfoSNterminatedExtIesExtension_IdRedundantUlNgUTnlatUpf)(nil),
		(*PdusessionResourceModificationInfoSNterminatedExtIesExtension_IdRedundantCommonNetworkInstance)(nil),
		(*PdusessionResourceModificationInfoSNterminatedExtIesExtension_IdSecurityIndication)(nil),
	}
	file_api_xnap_v1_xnap_ies_proto_msgTypes[541].OneofWrappers = []interface{}{}
	file_api_xnap_v1_xnap_ies_proto_msgTypes[543].OneofWrappers = []interface{}{
		(*QoSflowsToBeSetupListModifiedSNterminatedItemExtIesExtension_IdTsctrafficCharacteristics)(nil),
		(*QoSflowsToBeSetupListModifiedSNterminatedItemExtIesExtension_IdRedundantQoSflowIndicator)(nil),
	}
	file_api_xnap_v1_xnap_ies_proto_msgTypes[545].OneofWrappers = []interface{}{}
	file_api_xnap_v1_xnap_ies_proto_msgTypes[548].OneofWrappers = []interface{}{}
	file_api_xnap_v1_xnap_ies_proto_msgTypes[549].OneofWrappers = []interface{}{
		(*PdusessionResourceModificationResponseInfoSNterminatedExtIesExtension_IdDrbIdsTakenintouse)(nil),
		(*PdusessionResourceModificationResponseInfoSNterminatedExtIesExtension_IdRedundantDlNgUTnlatNgRan)(nil),
		(*PdusessionResourceModificationResponseInfoSNterminatedExtIesExtension_IdSecurityResult)(nil),
	}
	file_api_xnap_v1_xnap_ies_proto_msgTypes[551].OneofWrappers = []interface{}{}
	file_api_xnap_v1_xnap_ies_proto_msgTypes[553].OneofWrappers = []interface{}{
		(*DrbsToBeModifiedListModificationResponseSNterminatedItemExtIesExtension_IdAdditionalPdcpDuplicationTnlList)(nil),
		(*DrbsToBeModifiedListModificationResponseSNterminatedItemExtIesExtension_IdRlcduplicationInformation)(nil),
		(*DrbsToBeModifiedListModificationResponseSNterminatedItemExtIesExtension_IdSecondarySnUlPdcpUpTnlinfo)(nil),
		(*DrbsToBeModifiedListModificationResponseSNterminatedItemExtIesExtension_IdPdcpDuplicationConfiguration)(nil),
		(*DrbsToBeModifiedListModificationResponseSNterminatedItemExtIesExtension_IdDuplicationActivation)(nil),
	}
	file_api_xnap_v1_xnap_ies_proto_msgTypes[555].OneofWrappers = []interface{}{}
	file_api_xnap_v1_xnap_ies_proto_msgTypes[557].OneofWrappers = []interface{}{}
	file_api_xnap_v1_xnap_ies_proto_msgTypes[559].OneofWrappers = []interface{}{
		(*DrbsToBeModifiedListModificationMNterminatedItemExtIesExtension_IdAdditionalPdcpDuplicationTnlList)(nil),
		(*DrbsToBeModifiedListModificationMNterminatedItemExtIesExtension_IdRlcduplicationInformation)(nil),
	}
	file_api_xnap_v1_xnap_ies_proto_msgTypes[561].OneofWrappers = []interface{}{}
	file_api_xnap_v1_xnap_ies_proto_msgTypes[563].OneofWrappers = []interface{}{}
	file_api_xnap_v1_xnap_ies_proto_msgTypes[565].OneofWrappers = []interface{}{
		(*DrbsAdmittedListModificationResponseMNterminatedItemExtIesExtension_IdAdditionalPdcpDuplicationTnlList)(nil),
		(*DrbsAdmittedListModificationResponseMNterminatedItemExtIesExtension_IdQoSflowsMappedtoDrbSetupResponseMnterminated)(nil),
	}
	file_api_xnap_v1_xnap_ies_proto_msgTypes[567].OneofWrappers = []interface{}{}
	file_api_xnap_v1_xnap_ies_proto_msgTypes[569].OneofWrappers = []interface{}{}
	file_api_xnap_v1_xnap_ies_proto_msgTypes[571].OneofWrappers = []interface{}{}
	file_api_xnap_v1_xnap_ies_proto_msgTypes[577].OneofWrappers = []interface{}{}
	file_api_xnap_v1_xnap_ies_proto_msgTypes[579].OneofWrappers = []interface{}{
		(*DrbsToBeSetupListModRqdSNterminatedItemExtIesExtension_IdAdditionalPdcpDuplicationTnlList)(nil),
		(*DrbsToBeSetupListModRqdSNterminatedItemExtIesExtension_IdRlcduplicationInformation)(nil),
	}
	file_api_xnap_v1_xnap_ies_proto_msgTypes[581].OneofWrappers = []interface{}{}
	file_api_xnap_v1_xnap_ies_proto_msgTypes[584].OneofWrappers = []interface{}{}
	file_api_xnap_v1_xnap_ies_proto_msgTypes[586].OneofWrappers = []interface{}{
		(*DrbsToBeModifiedListModRqdSNterminatedItemExtIesExtension_IdAdditionalPdcpDuplicationTnlList)(nil),
		(*DrbsToBeModifiedListModRqdSNterminatedItemExtIesExtension_IdRlcduplicationInformation)(nil),
	}
	file_api_xnap_v1_xnap_ies_proto_msgTypes[588].OneofWrappers = []interface{}{}
	file_api_xnap_v1_xnap_ies_proto_msgTypes[591].OneofWrappers = []interface{}{}
	file_api_xnap_v1_xnap_ies_proto_msgTypes[593].OneofWrappers = []interface{}{}
	file_api_xnap_v1_xnap_ies_proto_msgTypes[596].OneofWrappers = []interface{}{}
	file_api_xnap_v1_xnap_ies_proto_msgTypes[598].OneofWrappers = []interface{}{}
	file_api_xnap_v1_xnap_ies_proto_msgTypes[601].OneofWrappers = []interface{}{}
	file_api_xnap_v1_xnap_ies_proto_msgTypes[623].OneofWrappers = []interface{}{}
	file_api_xnap_v1_xnap_ies_proto_msgTypes[630].OneofWrappers = []interface{}{
		(*QoScharacteristics_NonDynamic)(nil),
		(*QoScharacteristics_Dynamic)(nil),
		(*QoScharacteristics_ChoiceExtension)(nil),
	}
	file_api_xnap_v1_xnap_ies_proto_msgTypes[632].OneofWrappers = []interface{}{
		(*QoSflowLevelQoSparametersExtIesExtension_IdQoSmonitoringRequest)(nil),
		(*QoSflowLevelQoSparametersExtIesExtension_IdQosMonitoringReportingFrequency)(nil),
		(*QoSflowLevelQoSparametersExtIesExtension_IdQoSmonitoringDisabled)(nil),
	}
	file_api_xnap_v1_xnap_ies_proto_msgTypes[634].OneofWrappers = []interface{}{}
	file_api_xnap_v1_xnap_ies_proto_msgTypes[640].OneofWrappers = []interface{}{}
	file_api_xnap_v1_xnap_ies_proto_msgTypes[643].OneofWrappers = []interface{}{}
	file_api_xnap_v1_xnap_ies_proto_msgTypes[645].OneofWrappers = []interface{}{}
	file_api_xnap_v1_xnap_ies_proto_msgTypes[652].OneofWrappers = []interface{}{
		(*QoSflowsToBeSetupItemExtIesExtension_IdTsctrafficCharacteristics)(nil),
		(*QoSflowsToBeSetupItemExtIesExtension_IdRedundantQoSflowIndicator)(nil),
	}
	file_api_xnap_v1_xnap_ies_proto_msgTypes[654].OneofWrappers = []interface{}{}
	file_api_xnap_v1_xnap_ies_proto_msgTypes[664].OneofWrappers = []interface{}{
		(*RadioResourceStatus_NgENbRadioResourceStatus)(nil),
		(*RadioResourceStatus_GNbRadioResourceStatus)(nil),
		(*RadioResourceStatus_ChoiceExtension)(nil),
	}
	file_api_xnap_v1_xnap_ies_proto_msgTypes[667].OneofWrappers = []interface{}{}
	file_api_xnap_v1_xnap_ies_proto_msgTypes[672].OneofWrappers = []interface{}{
		(*RanpagingAreaChoice_CellList)(nil),
		(*RanpagingAreaChoice_RAnareaIdList)(nil),
		(*RanpagingAreaChoice_ChoiceExtension)(nil),
	}
	file_api_xnap_v1_xnap_ies_proto_msgTypes[674].OneofWrappers = []interface{}{}
	file_api_xnap_v1_xnap_ies_proto_msgTypes[678].OneofWrappers = []interface{}{
		(*ReportType_Periodical)(nil),
		(*ReportType_EventTriggered)(nil),
	}
	file_api_xnap_v1_xnap_ies_proto_msgTypes[682].OneofWrappers = []interface{}{}
	file_api_xnap_v1_xnap_ies_proto_msgTypes[684].OneofWrappers = []interface{}{
		(*ResetRequestTypeInfo_FullReset)(nil),
		(*ResetRequestTypeInfo_PartialReset)(nil),
		(*ResetRequestTypeInfo_ChoiceExtension)(nil),
	}
	file_api_xnap_v1_xnap_ies_proto_msgTypes[691].OneofWrappers = []interface{}{}
	file_api_xnap_v1_xnap_ies_proto_msgTypes[693].OneofWrappers = []interface{}{
		(*ResetResponseTypeInfo_FullReset)(nil),
		(*ResetResponseTypeInfo_PartialReset)(nil),
		(*ResetResponseTypeInfo_ChoiceExtension)(nil),
	}
	file_api_xnap_v1_xnap_ies_proto_msgTypes[700].OneofWrappers = []interface{}{}
	file_api_xnap_v1_xnap_ies_proto_msgTypes[704].OneofWrappers = []interface{}{}
	file_api_xnap_v1_xnap_ies_proto_msgTypes[714].OneofWrappers = []interface{}{
		(*RrcreestabInitiatedReporting_RRcreestabReportingWoUerlfreport)(nil),
		(*RrcreestabInitiatedReporting_RRcreestabReportingWithUerlfreport)(nil),
		(*RrcreestabInitiatedReporting_ChoiceExtension)(nil),
	}
	file_api_xnap_v1_xnap_ies_proto_msgTypes[720].OneofWrappers = []interface{}{}
	file_api_xnap_v1_xnap_ies_proto_msgTypes[722].OneofWrappers = []interface{}{
		(*RrcsetupInitiatedReporting_RRcsetupReportingWithUerlfreport)(nil),
		(*RrcsetupInitiatedReporting_ChoiceExtension)(nil),
	}
	file_api_xnap_v1_xnap_ies_proto_msgTypes[729].OneofWrappers = []interface{}{}
	file_api_xnap_v1_xnap_ies_proto_msgTypes[731].OneofWrappers = []interface{}{}
	file_api_xnap_v1_xnap_ies_proto_msgTypes[735].OneofWrappers = []interface{}{}
	file_api_xnap_v1_xnap_ies_proto_msgTypes[738].OneofWrappers = []interface{}{}
	file_api_xnap_v1_xnap_ies_proto_msgTypes[739].OneofWrappers = []interface{}{
		(*ServedCellInformationEUTraExtIesExtension_IdBplmnIdInfoEutra)(nil),
		(*ServedCellInformationEUTraExtIesExtension_IdNprachconfiguration)(nil),
	}
	file_api_xnap_v1_xnap_ies_proto_msgTypes[741].OneofWrappers = []interface{}{}
	file_api_xnap_v1_xnap_ies_proto_msgTypes[745].OneofWrappers = []interface{}{
		(*ServedCellInformationEUTraModeInfo_Fdd)(nil),
		(*ServedCellInformationEUTraModeInfo_Tdd)(nil),
		(*ServedCellInformationEUTraModeInfo_ChoiceExtension)(nil),
	}
	file_api_xnap_v1_xnap_ies_proto_msgTypes[746].OneofWrappers = []interface{}{
		(*ServedCellInformationEUTraFDdinfoExtIesExtension_IdOffsetOfNbiotChannelNumberToDlEarfcn)(nil),
		(*ServedCellInformationEUTraFDdinfoExtIesExtension_IdOffsetOfNbiotChannelNumberToUlEarfcn)(nil),
	}
	file_api_xnap_v1_xnap_ies_proto_msgTypes[749].OneofWrappers = []interface{}{
		(*ServedCellInformationEUTraTDdinfoExtIesExtension_IdOffsetOfNbiotChannelNumberToDlEarfcn)(nil),
		(*ServedCellInformationEUTraTDdinfoExtIesExtension_IdNbioTUlDlAlignmentOffset)(nil),
	}
	file_api_xnap_v1_xnap_ies_proto_msgTypes[754].OneofWrappers = []interface{}{}
	file_api_xnap_v1_xnap_ies_proto_msgTypes[756].OneofWrappers = []interface{}{}
	file_api_xnap_v1_xnap_ies_proto_msgTypes[759].OneofWrappers = []interface{}{}
	file_api_xnap_v1_xnap_ies_proto_msgTypes[760].OneofWrappers = []interface{}{
		(*ServedCellInformationNRExtIesExtension_IdBplmnIdInfoNr)(nil),
		(*ServedCellInformationNRExtIesExtension_IdConfiguredTacindication)(nil),
		(*ServedCellInformationNRExtIesExtension_IdSsbPositionsInBurst)(nil),
		(*ServedCellInformationNRExtIesExtension_IdNrcellPrachconfig)(nil),
		(*ServedCellInformationNRExtIesExtension_IdNpnBroadcastInformation)(nil),
		(*ServedCellInformationNRExtIesExtension_IdCsiRstransmissionIndication)(nil),
		(*ServedCellInformationNRExtIesExtension_IdSfnOffset)(nil),
	}
	file_api_xnap_v1_xnap_ies_proto_msgTypes[762].OneofWrappers = []interface{}{}
	file_api_xnap_v1_xnap_ies_proto_msgTypes[767].OneofWrappers = []interface{}{}
	file_api_xnap_v1_xnap_ies_proto_msgTypes[770].OneofWrappers = []interface{}{}
	file_api_xnap_v1_xnap_ies_proto_msgTypes[772].OneofWrappers = []interface{}{}
	file_api_xnap_v1_xnap_ies_proto_msgTypes[774].OneofWrappers = []interface{}{
		(*SharedResourceType_UlOnlySharing)(nil),
		(*SharedResourceType_UlAndDlSharing)(nil),
		(*SharedResourceType_ChoiceExtension)(nil),
	}
	file_api_xnap_v1_xnap_ies_proto_msgTypes[778].OneofWrappers = []interface{}{
		(*SharedResourceTypeULdlSharing_UlResources)(nil),
		(*SharedResourceTypeULdlSharing_DlResources)(nil),
		(*SharedResourceTypeULdlSharing_ChoiceExtension)(nil),
	}
	file_api_xnap_v1_xnap_ies_proto_msgTypes[780].OneofWrappers = []interface{}{
		(*SharedResourceTypeULdlSharingULResources_Unchanged)(nil),
		(*SharedResourceTypeULdlSharingULResources_Changed)(nil),
		(*SharedResourceTypeULdlSharingULResources_ChoiceExtension)(nil),
	}
	file_api_xnap_v1_xnap_ies_proto_msgTypes[784].OneofWrappers = []interface{}{
		(*SharedResourceTypeULdlSharingDLResources_Unchanged)(nil),
		(*SharedResourceTypeULdlSharingDLResources_Changed)(nil),
		(*SharedResourceTypeULdlSharingDLResources_ChoiceExtension)(nil),
	}
	file_api_xnap_v1_xnap_ies_proto_msgTypes[805].OneofWrappers = []interface{}{}
	file_api_xnap_v1_xnap_ies_proto_msgTypes[813].OneofWrappers = []interface{}{
		(*SsbareaRadioResourceStatusListItemExtIesExtension_IdDlSchedulingPdcchCceUsage)(nil),
		(*SsbareaRadioResourceStatusListItemExtIesExtension_IdUlSchedulingPdcchCceUsage)(nil),
	}
	file_api_xnap_v1_xnap_ies_proto_msgTypes[817].OneofWrappers = []interface{}{
		(*SsbPositionsInBurst_ShortBitmap)(nil),
		(*SsbPositionsInBurst_MediumBitmap)(nil),
		(*SsbPositionsInBurst_LongBitmap)(nil),
		(*SsbPositionsInBurst_ChoiceExtension)(nil),
	}
	file_api_xnap_v1_xnap_ies_proto_msgTypes[822].OneofWrappers = []interface{}{
		(*SulInformationExtIesExtension_IdCarrierList)(nil),
		(*SulInformationExtIesExtension_IdFrequencyShift7P5Khz)(nil),
	}
	file_api_xnap_v1_xnap_ies_proto_msgTypes[829].OneofWrappers = []interface{}{
		(*SymbolAllocationinSlot_AllDl)(nil),
		(*SymbolAllocationinSlot_AllUl)(nil),
		(*SymbolAllocationinSlot_BothDlandUl)(nil),
		(*SymbolAllocationinSlot_ChoiceExtension)(nil),
	}
	file_api_xnap_v1_xnap_ies_proto_msgTypes[850].OneofWrappers = []interface{}{
		(*TargetCGi_Nr)(nil),
		(*TargetCGi_EUtra)(nil),
		(*TargetCGi_ChoiceExtension)(nil),
	}
	file_api_xnap_v1_xnap_ies_proto_msgTypes[859].OneofWrappers = []interface{}{}
	file_api_xnap_v1_xnap_ies_proto_msgTypes[865].OneofWrappers = []interface{}{}
	file_api_xnap_v1_xnap_ies_proto_msgTypes[876].OneofWrappers = []interface{}{
		(*TraceActivationExtIesExtension_IdTraceCollectionEntityUri)(nil),
		(*TraceActivationExtIesExtension_IdMdtConfiguration)(nil),
	}
	file_api_xnap_v1_xnap_ies_proto_msgTypes[880].OneofWrappers = []interface{}{}
	file_api_xnap_v1_xnap_ies_proto_msgTypes[882].OneofWrappers = []interface{}{}
	file_api_xnap_v1_xnap_ies_proto_msgTypes[886].OneofWrappers = []interface{}{
		(*UecontextId_RRcresume)(nil),
		(*UecontextId_RRrcreestablishment)(nil),
		(*UecontextId_ChoiceExtension)(nil),
	}
	file_api_xnap_v1_xnap_ies_proto_msgTypes[891].OneofWrappers = []interface{}{
		(*UecontextInfoRetrUectxtRespExtIesExtension_IdFiveGcmobilityRestrictionListContainer)(nil),
		(*UecontextInfoRetrUectxtRespExtIesExtension_IdNruesidelinkAggregateMaximumBitRate)(nil),
		(*UecontextInfoRetrUectxtRespExtIesExtension_IdLteuesidelinkAggregateMaximumBitRate)(nil),
		(*UecontextInfoRetrUectxtRespExtIesExtension_IdUeradioCapabilityId)(nil),
	}
	file_api_xnap_v1_xnap_ies_proto_msgTypes[893].OneofWrappers = []interface{}{}
	file_api_xnap_v1_xnap_ies_proto_msgTypes[896].OneofWrappers = []interface{}{
		(*UehistoryInformationFromTheUe_NR)(nil),
		(*UehistoryInformationFromTheUe_ChoiceExtension)(nil),
	}
	file_api_xnap_v1_xnap_ies_proto_msgTypes[898].OneofWrappers = []interface{}{
		(*UeidentityIndexValue_IndexLength10)(nil),
		(*UeidentityIndexValue_ChoiceExtension)(nil),
	}
	file_api_xnap_v1_xnap_ies_proto_msgTypes[900].OneofWrappers = []interface{}{}
	file_api_xnap_v1_xnap_ies_proto_msgTypes[905].OneofWrappers = []interface{}{
		(*UeranpagingIdentity_IRntiFull)(nil),
		(*UeranpagingIdentity_ChoiceExtension)(nil),
	}
	file_api_xnap_v1_xnap_ies_proto_msgTypes[907].OneofWrappers = []interface{}{
		(*UerlfreportContainer_NRUerlfreportContainer)(nil),
		(*UerlfreportContainer_LTeUerlfreportContainer)(nil),
		(*UerlfreportContainer_ChoiceExtension)(nil),
	}
	file_api_xnap_v1_xnap_ies_proto_msgTypes[918].OneofWrappers = []interface{}{
		(*UptransportLayerInformation_GtpTunnel)(nil),
		(*UptransportLayerInformation_ChoiceExtension)(nil),
	}
	file_api_xnap_v1_xnap_ies_proto_msgTypes[927].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_api_xnap_v1_xnap_ies_proto_rawDesc,
			NumEnums:      143,
			NumMessages:   931,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_api_xnap_v1_xnap_ies_proto_goTypes,
		DependencyIndexes: file_api_xnap_v1_xnap_ies_proto_depIdxs,
		EnumInfos:         file_api_xnap_v1_xnap_ies_proto_enumTypes,
		MessageInfos:      file_api_xnap_v1_xnap_ies_proto_msgTypes,
	}.Build()
	File_api_xnap_v1_xnap_ies_proto = out.File
	file_api_xnap_v1_xnap_ies_proto_rawDesc = nil
	file_api_xnap_v1_xnap_ies_proto_goTypes = nil
	file_api_xnap_v1_xnap_ies_proto_depIdxs = nil
}
