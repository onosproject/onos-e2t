// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/xnap/v1/xnap_constants.proto

package xnapconstantsv1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on IdhandoverPreparation with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdhandoverPreparation) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdhandoverPreparation with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdhandoverPreparationMultiError, or nil if none found.
func (m *IdhandoverPreparation) ValidateAll() error {
	return m.validate(true)
}

func (m *IdhandoverPreparation) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 0 {
		err := IdhandoverPreparationValidationError{
			field:  "Value",
			reason: "value must equal 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdhandoverPreparationMultiError(errors)
	}

	return nil
}

// IdhandoverPreparationMultiError is an error wrapping multiple validation
// errors returned by IdhandoverPreparation.ValidateAll() if the designated
// constraints aren't met.
type IdhandoverPreparationMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdhandoverPreparationMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdhandoverPreparationMultiError) AllErrors() []error { return m }

// IdhandoverPreparationValidationError is the validation error returned by
// IdhandoverPreparation.Validate if the designated constraints aren't met.
type IdhandoverPreparationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdhandoverPreparationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdhandoverPreparationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdhandoverPreparationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdhandoverPreparationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdhandoverPreparationValidationError) ErrorName() string {
	return "IdhandoverPreparationValidationError"
}

// Error satisfies the builtin error interface
func (e IdhandoverPreparationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdhandoverPreparation.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdhandoverPreparationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdhandoverPreparationValidationError{}

// Validate checks the field values on IdsNstatusTransfer with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdsNstatusTransfer) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdsNstatusTransfer with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdsNstatusTransferMultiError, or nil if none found.
func (m *IdsNstatusTransfer) ValidateAll() error {
	return m.validate(true)
}

func (m *IdsNstatusTransfer) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 1 {
		err := IdsNstatusTransferValidationError{
			field:  "Value",
			reason: "value must equal 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdsNstatusTransferMultiError(errors)
	}

	return nil
}

// IdsNstatusTransferMultiError is an error wrapping multiple validation errors
// returned by IdsNstatusTransfer.ValidateAll() if the designated constraints
// aren't met.
type IdsNstatusTransferMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdsNstatusTransferMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdsNstatusTransferMultiError) AllErrors() []error { return m }

// IdsNstatusTransferValidationError is the validation error returned by
// IdsNstatusTransfer.Validate if the designated constraints aren't met.
type IdsNstatusTransferValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdsNstatusTransferValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdsNstatusTransferValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdsNstatusTransferValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdsNstatusTransferValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdsNstatusTransferValidationError) ErrorName() string {
	return "IdsNstatusTransferValidationError"
}

// Error satisfies the builtin error interface
func (e IdsNstatusTransferValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdsNstatusTransfer.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdsNstatusTransferValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdsNstatusTransferValidationError{}

// Validate checks the field values on IdhandoverCancel with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *IdhandoverCancel) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdhandoverCancel with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdhandoverCancelMultiError, or nil if none found.
func (m *IdhandoverCancel) ValidateAll() error {
	return m.validate(true)
}

func (m *IdhandoverCancel) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 2 {
		err := IdhandoverCancelValidationError{
			field:  "Value",
			reason: "value must equal 2",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdhandoverCancelMultiError(errors)
	}

	return nil
}

// IdhandoverCancelMultiError is an error wrapping multiple validation errors
// returned by IdhandoverCancel.ValidateAll() if the designated constraints
// aren't met.
type IdhandoverCancelMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdhandoverCancelMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdhandoverCancelMultiError) AllErrors() []error { return m }

// IdhandoverCancelValidationError is the validation error returned by
// IdhandoverCancel.Validate if the designated constraints aren't met.
type IdhandoverCancelValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdhandoverCancelValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdhandoverCancelValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdhandoverCancelValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdhandoverCancelValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdhandoverCancelValidationError) ErrorName() string { return "IdhandoverCancelValidationError" }

// Error satisfies the builtin error interface
func (e IdhandoverCancelValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdhandoverCancel.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdhandoverCancelValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdhandoverCancelValidationError{}

// Validate checks the field values on IdretrieveUecontext with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdretrieveUecontext) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdretrieveUecontext with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdretrieveUecontextMultiError, or nil if none found.
func (m *IdretrieveUecontext) ValidateAll() error {
	return m.validate(true)
}

func (m *IdretrieveUecontext) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 3 {
		err := IdretrieveUecontextValidationError{
			field:  "Value",
			reason: "value must equal 3",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdretrieveUecontextMultiError(errors)
	}

	return nil
}

// IdretrieveUecontextMultiError is an error wrapping multiple validation
// errors returned by IdretrieveUecontext.ValidateAll() if the designated
// constraints aren't met.
type IdretrieveUecontextMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdretrieveUecontextMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdretrieveUecontextMultiError) AllErrors() []error { return m }

// IdretrieveUecontextValidationError is the validation error returned by
// IdretrieveUecontext.Validate if the designated constraints aren't met.
type IdretrieveUecontextValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdretrieveUecontextValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdretrieveUecontextValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdretrieveUecontextValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdretrieveUecontextValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdretrieveUecontextValidationError) ErrorName() string {
	return "IdretrieveUecontextValidationError"
}

// Error satisfies the builtin error interface
func (e IdretrieveUecontextValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdretrieveUecontext.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdretrieveUecontextValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdretrieveUecontextValidationError{}

// Validate checks the field values on IdrAnpaging with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *IdrAnpaging) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdrAnpaging with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in IdrAnpagingMultiError, or
// nil if none found.
func (m *IdrAnpaging) ValidateAll() error {
	return m.validate(true)
}

func (m *IdrAnpaging) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 4 {
		err := IdrAnpagingValidationError{
			field:  "Value",
			reason: "value must equal 4",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdrAnpagingMultiError(errors)
	}

	return nil
}

// IdrAnpagingMultiError is an error wrapping multiple validation errors
// returned by IdrAnpaging.ValidateAll() if the designated constraints aren't met.
type IdrAnpagingMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdrAnpagingMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdrAnpagingMultiError) AllErrors() []error { return m }

// IdrAnpagingValidationError is the validation error returned by
// IdrAnpaging.Validate if the designated constraints aren't met.
type IdrAnpagingValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdrAnpagingValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdrAnpagingValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdrAnpagingValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdrAnpagingValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdrAnpagingValidationError) ErrorName() string { return "IdrAnpagingValidationError" }

// Error satisfies the builtin error interface
func (e IdrAnpagingValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdrAnpaging.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdrAnpagingValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdrAnpagingValidationError{}

// Validate checks the field values on IdxnUaddressIndication with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdxnUaddressIndication) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdxnUaddressIndication with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdxnUaddressIndicationMultiError, or nil if none found.
func (m *IdxnUaddressIndication) ValidateAll() error {
	return m.validate(true)
}

func (m *IdxnUaddressIndication) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 5 {
		err := IdxnUaddressIndicationValidationError{
			field:  "Value",
			reason: "value must equal 5",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdxnUaddressIndicationMultiError(errors)
	}

	return nil
}

// IdxnUaddressIndicationMultiError is an error wrapping multiple validation
// errors returned by IdxnUaddressIndication.ValidateAll() if the designated
// constraints aren't met.
type IdxnUaddressIndicationMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdxnUaddressIndicationMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdxnUaddressIndicationMultiError) AllErrors() []error { return m }

// IdxnUaddressIndicationValidationError is the validation error returned by
// IdxnUaddressIndication.Validate if the designated constraints aren't met.
type IdxnUaddressIndicationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdxnUaddressIndicationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdxnUaddressIndicationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdxnUaddressIndicationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdxnUaddressIndicationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdxnUaddressIndicationValidationError) ErrorName() string {
	return "IdxnUaddressIndicationValidationError"
}

// Error satisfies the builtin error interface
func (e IdxnUaddressIndicationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdxnUaddressIndication.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdxnUaddressIndicationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdxnUaddressIndicationValidationError{}

// Validate checks the field values on IduEcontextRelease with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IduEcontextRelease) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IduEcontextRelease with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IduEcontextReleaseMultiError, or nil if none found.
func (m *IduEcontextRelease) ValidateAll() error {
	return m.validate(true)
}

func (m *IduEcontextRelease) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 6 {
		err := IduEcontextReleaseValidationError{
			field:  "Value",
			reason: "value must equal 6",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IduEcontextReleaseMultiError(errors)
	}

	return nil
}

// IduEcontextReleaseMultiError is an error wrapping multiple validation errors
// returned by IduEcontextRelease.ValidateAll() if the designated constraints
// aren't met.
type IduEcontextReleaseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IduEcontextReleaseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IduEcontextReleaseMultiError) AllErrors() []error { return m }

// IduEcontextReleaseValidationError is the validation error returned by
// IduEcontextRelease.Validate if the designated constraints aren't met.
type IduEcontextReleaseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IduEcontextReleaseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IduEcontextReleaseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IduEcontextReleaseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IduEcontextReleaseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IduEcontextReleaseValidationError) ErrorName() string {
	return "IduEcontextReleaseValidationError"
}

// Error satisfies the builtin error interface
func (e IduEcontextReleaseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIduEcontextRelease.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IduEcontextReleaseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IduEcontextReleaseValidationError{}

// Validate checks the field values on IdsNgrannodeAdditionPreparation with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdsNgrannodeAdditionPreparation) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdsNgrannodeAdditionPreparation with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// IdsNgrannodeAdditionPreparationMultiError, or nil if none found.
func (m *IdsNgrannodeAdditionPreparation) ValidateAll() error {
	return m.validate(true)
}

func (m *IdsNgrannodeAdditionPreparation) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 7 {
		err := IdsNgrannodeAdditionPreparationValidationError{
			field:  "Value",
			reason: "value must equal 7",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdsNgrannodeAdditionPreparationMultiError(errors)
	}

	return nil
}

// IdsNgrannodeAdditionPreparationMultiError is an error wrapping multiple
// validation errors returned by IdsNgrannodeAdditionPreparation.ValidateAll()
// if the designated constraints aren't met.
type IdsNgrannodeAdditionPreparationMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdsNgrannodeAdditionPreparationMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdsNgrannodeAdditionPreparationMultiError) AllErrors() []error { return m }

// IdsNgrannodeAdditionPreparationValidationError is the validation error
// returned by IdsNgrannodeAdditionPreparation.Validate if the designated
// constraints aren't met.
type IdsNgrannodeAdditionPreparationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdsNgrannodeAdditionPreparationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdsNgrannodeAdditionPreparationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdsNgrannodeAdditionPreparationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdsNgrannodeAdditionPreparationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdsNgrannodeAdditionPreparationValidationError) ErrorName() string {
	return "IdsNgrannodeAdditionPreparationValidationError"
}

// Error satisfies the builtin error interface
func (e IdsNgrannodeAdditionPreparationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdsNgrannodeAdditionPreparation.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdsNgrannodeAdditionPreparationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdsNgrannodeAdditionPreparationValidationError{}

// Validate checks the field values on IdsNgrannodeReconfigurationCompletion
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *IdsNgrannodeReconfigurationCompletion) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdsNgrannodeReconfigurationCompletion
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// IdsNgrannodeReconfigurationCompletionMultiError, or nil if none found.
func (m *IdsNgrannodeReconfigurationCompletion) ValidateAll() error {
	return m.validate(true)
}

func (m *IdsNgrannodeReconfigurationCompletion) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 8 {
		err := IdsNgrannodeReconfigurationCompletionValidationError{
			field:  "Value",
			reason: "value must equal 8",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdsNgrannodeReconfigurationCompletionMultiError(errors)
	}

	return nil
}

// IdsNgrannodeReconfigurationCompletionMultiError is an error wrapping
// multiple validation errors returned by
// IdsNgrannodeReconfigurationCompletion.ValidateAll() if the designated
// constraints aren't met.
type IdsNgrannodeReconfigurationCompletionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdsNgrannodeReconfigurationCompletionMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdsNgrannodeReconfigurationCompletionMultiError) AllErrors() []error { return m }

// IdsNgrannodeReconfigurationCompletionValidationError is the validation error
// returned by IdsNgrannodeReconfigurationCompletion.Validate if the
// designated constraints aren't met.
type IdsNgrannodeReconfigurationCompletionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdsNgrannodeReconfigurationCompletionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdsNgrannodeReconfigurationCompletionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdsNgrannodeReconfigurationCompletionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdsNgrannodeReconfigurationCompletionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdsNgrannodeReconfigurationCompletionValidationError) ErrorName() string {
	return "IdsNgrannodeReconfigurationCompletionValidationError"
}

// Error satisfies the builtin error interface
func (e IdsNgrannodeReconfigurationCompletionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdsNgrannodeReconfigurationCompletion.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdsNgrannodeReconfigurationCompletionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdsNgrannodeReconfigurationCompletionValidationError{}

// Validate checks the field values on
// IdmNgrannodeinitiatedSngrannodeModificationPreparation with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdmNgrannodeinitiatedSngrannodeModificationPreparation) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// IdmNgrannodeinitiatedSngrannodeModificationPreparation with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdmNgrannodeinitiatedSngrannodeModificationPreparationMultiError, or nil if
// none found.
func (m *IdmNgrannodeinitiatedSngrannodeModificationPreparation) ValidateAll() error {
	return m.validate(true)
}

func (m *IdmNgrannodeinitiatedSngrannodeModificationPreparation) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 9 {
		err := IdmNgrannodeinitiatedSngrannodeModificationPreparationValidationError{
			field:  "Value",
			reason: "value must equal 9",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdmNgrannodeinitiatedSngrannodeModificationPreparationMultiError(errors)
	}

	return nil
}

// IdmNgrannodeinitiatedSngrannodeModificationPreparationMultiError is an error
// wrapping multiple validation errors returned by
// IdmNgrannodeinitiatedSngrannodeModificationPreparation.ValidateAll() if the
// designated constraints aren't met.
type IdmNgrannodeinitiatedSngrannodeModificationPreparationMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdmNgrannodeinitiatedSngrannodeModificationPreparationMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdmNgrannodeinitiatedSngrannodeModificationPreparationMultiError) AllErrors() []error {
	return m
}

// IdmNgrannodeinitiatedSngrannodeModificationPreparationValidationError is the
// validation error returned by
// IdmNgrannodeinitiatedSngrannodeModificationPreparation.Validate if the
// designated constraints aren't met.
type IdmNgrannodeinitiatedSngrannodeModificationPreparationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdmNgrannodeinitiatedSngrannodeModificationPreparationValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e IdmNgrannodeinitiatedSngrannodeModificationPreparationValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e IdmNgrannodeinitiatedSngrannodeModificationPreparationValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e IdmNgrannodeinitiatedSngrannodeModificationPreparationValidationError) Key() bool {
	return e.key
}

// ErrorName returns error name.
func (e IdmNgrannodeinitiatedSngrannodeModificationPreparationValidationError) ErrorName() string {
	return "IdmNgrannodeinitiatedSngrannodeModificationPreparationValidationError"
}

// Error satisfies the builtin error interface
func (e IdmNgrannodeinitiatedSngrannodeModificationPreparationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdmNgrannodeinitiatedSngrannodeModificationPreparation.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdmNgrannodeinitiatedSngrannodeModificationPreparationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdmNgrannodeinitiatedSngrannodeModificationPreparationValidationError{}

// Validate checks the field values on
// IdsNgrannodeinitiatedSngrannodeModificationPreparation with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdsNgrannodeinitiatedSngrannodeModificationPreparation) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// IdsNgrannodeinitiatedSngrannodeModificationPreparation with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdsNgrannodeinitiatedSngrannodeModificationPreparationMultiError, or nil if
// none found.
func (m *IdsNgrannodeinitiatedSngrannodeModificationPreparation) ValidateAll() error {
	return m.validate(true)
}

func (m *IdsNgrannodeinitiatedSngrannodeModificationPreparation) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 10 {
		err := IdsNgrannodeinitiatedSngrannodeModificationPreparationValidationError{
			field:  "Value",
			reason: "value must equal 10",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdsNgrannodeinitiatedSngrannodeModificationPreparationMultiError(errors)
	}

	return nil
}

// IdsNgrannodeinitiatedSngrannodeModificationPreparationMultiError is an error
// wrapping multiple validation errors returned by
// IdsNgrannodeinitiatedSngrannodeModificationPreparation.ValidateAll() if the
// designated constraints aren't met.
type IdsNgrannodeinitiatedSngrannodeModificationPreparationMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdsNgrannodeinitiatedSngrannodeModificationPreparationMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdsNgrannodeinitiatedSngrannodeModificationPreparationMultiError) AllErrors() []error {
	return m
}

// IdsNgrannodeinitiatedSngrannodeModificationPreparationValidationError is the
// validation error returned by
// IdsNgrannodeinitiatedSngrannodeModificationPreparation.Validate if the
// designated constraints aren't met.
type IdsNgrannodeinitiatedSngrannodeModificationPreparationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdsNgrannodeinitiatedSngrannodeModificationPreparationValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e IdsNgrannodeinitiatedSngrannodeModificationPreparationValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e IdsNgrannodeinitiatedSngrannodeModificationPreparationValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e IdsNgrannodeinitiatedSngrannodeModificationPreparationValidationError) Key() bool {
	return e.key
}

// ErrorName returns error name.
func (e IdsNgrannodeinitiatedSngrannodeModificationPreparationValidationError) ErrorName() string {
	return "IdsNgrannodeinitiatedSngrannodeModificationPreparationValidationError"
}

// Error satisfies the builtin error interface
func (e IdsNgrannodeinitiatedSngrannodeModificationPreparationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdsNgrannodeinitiatedSngrannodeModificationPreparation.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdsNgrannodeinitiatedSngrannodeModificationPreparationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdsNgrannodeinitiatedSngrannodeModificationPreparationValidationError{}

// Validate checks the field values on IdmNgrannodeinitiatedSngrannodeRelease
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *IdmNgrannodeinitiatedSngrannodeRelease) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// IdmNgrannodeinitiatedSngrannodeRelease with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// IdmNgrannodeinitiatedSngrannodeReleaseMultiError, or nil if none found.
func (m *IdmNgrannodeinitiatedSngrannodeRelease) ValidateAll() error {
	return m.validate(true)
}

func (m *IdmNgrannodeinitiatedSngrannodeRelease) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 11 {
		err := IdmNgrannodeinitiatedSngrannodeReleaseValidationError{
			field:  "Value",
			reason: "value must equal 11",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdmNgrannodeinitiatedSngrannodeReleaseMultiError(errors)
	}

	return nil
}

// IdmNgrannodeinitiatedSngrannodeReleaseMultiError is an error wrapping
// multiple validation errors returned by
// IdmNgrannodeinitiatedSngrannodeRelease.ValidateAll() if the designated
// constraints aren't met.
type IdmNgrannodeinitiatedSngrannodeReleaseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdmNgrannodeinitiatedSngrannodeReleaseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdmNgrannodeinitiatedSngrannodeReleaseMultiError) AllErrors() []error { return m }

// IdmNgrannodeinitiatedSngrannodeReleaseValidationError is the validation
// error returned by IdmNgrannodeinitiatedSngrannodeRelease.Validate if the
// designated constraints aren't met.
type IdmNgrannodeinitiatedSngrannodeReleaseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdmNgrannodeinitiatedSngrannodeReleaseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdmNgrannodeinitiatedSngrannodeReleaseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdmNgrannodeinitiatedSngrannodeReleaseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdmNgrannodeinitiatedSngrannodeReleaseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdmNgrannodeinitiatedSngrannodeReleaseValidationError) ErrorName() string {
	return "IdmNgrannodeinitiatedSngrannodeReleaseValidationError"
}

// Error satisfies the builtin error interface
func (e IdmNgrannodeinitiatedSngrannodeReleaseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdmNgrannodeinitiatedSngrannodeRelease.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdmNgrannodeinitiatedSngrannodeReleaseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdmNgrannodeinitiatedSngrannodeReleaseValidationError{}

// Validate checks the field values on IdsNgrannodeinitiatedSngrannodeRelease
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *IdsNgrannodeinitiatedSngrannodeRelease) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// IdsNgrannodeinitiatedSngrannodeRelease with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// IdsNgrannodeinitiatedSngrannodeReleaseMultiError, or nil if none found.
func (m *IdsNgrannodeinitiatedSngrannodeRelease) ValidateAll() error {
	return m.validate(true)
}

func (m *IdsNgrannodeinitiatedSngrannodeRelease) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 12 {
		err := IdsNgrannodeinitiatedSngrannodeReleaseValidationError{
			field:  "Value",
			reason: "value must equal 12",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdsNgrannodeinitiatedSngrannodeReleaseMultiError(errors)
	}

	return nil
}

// IdsNgrannodeinitiatedSngrannodeReleaseMultiError is an error wrapping
// multiple validation errors returned by
// IdsNgrannodeinitiatedSngrannodeRelease.ValidateAll() if the designated
// constraints aren't met.
type IdsNgrannodeinitiatedSngrannodeReleaseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdsNgrannodeinitiatedSngrannodeReleaseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdsNgrannodeinitiatedSngrannodeReleaseMultiError) AllErrors() []error { return m }

// IdsNgrannodeinitiatedSngrannodeReleaseValidationError is the validation
// error returned by IdsNgrannodeinitiatedSngrannodeRelease.Validate if the
// designated constraints aren't met.
type IdsNgrannodeinitiatedSngrannodeReleaseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdsNgrannodeinitiatedSngrannodeReleaseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdsNgrannodeinitiatedSngrannodeReleaseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdsNgrannodeinitiatedSngrannodeReleaseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdsNgrannodeinitiatedSngrannodeReleaseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdsNgrannodeinitiatedSngrannodeReleaseValidationError) ErrorName() string {
	return "IdsNgrannodeinitiatedSngrannodeReleaseValidationError"
}

// Error satisfies the builtin error interface
func (e IdsNgrannodeinitiatedSngrannodeReleaseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdsNgrannodeinitiatedSngrannodeRelease.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdsNgrannodeinitiatedSngrannodeReleaseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdsNgrannodeinitiatedSngrannodeReleaseValidationError{}

// Validate checks the field values on IdsNgrannodeCounterCheck with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdsNgrannodeCounterCheck) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdsNgrannodeCounterCheck with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdsNgrannodeCounterCheckMultiError, or nil if none found.
func (m *IdsNgrannodeCounterCheck) ValidateAll() error {
	return m.validate(true)
}

func (m *IdsNgrannodeCounterCheck) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 13 {
		err := IdsNgrannodeCounterCheckValidationError{
			field:  "Value",
			reason: "value must equal 13",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdsNgrannodeCounterCheckMultiError(errors)
	}

	return nil
}

// IdsNgrannodeCounterCheckMultiError is an error wrapping multiple validation
// errors returned by IdsNgrannodeCounterCheck.ValidateAll() if the designated
// constraints aren't met.
type IdsNgrannodeCounterCheckMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdsNgrannodeCounterCheckMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdsNgrannodeCounterCheckMultiError) AllErrors() []error { return m }

// IdsNgrannodeCounterCheckValidationError is the validation error returned by
// IdsNgrannodeCounterCheck.Validate if the designated constraints aren't met.
type IdsNgrannodeCounterCheckValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdsNgrannodeCounterCheckValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdsNgrannodeCounterCheckValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdsNgrannodeCounterCheckValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdsNgrannodeCounterCheckValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdsNgrannodeCounterCheckValidationError) ErrorName() string {
	return "IdsNgrannodeCounterCheckValidationError"
}

// Error satisfies the builtin error interface
func (e IdsNgrannodeCounterCheckValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdsNgrannodeCounterCheck.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdsNgrannodeCounterCheckValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdsNgrannodeCounterCheckValidationError{}

// Validate checks the field values on IdsNgrannodeChange with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdsNgrannodeChange) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdsNgrannodeChange with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdsNgrannodeChangeMultiError, or nil if none found.
func (m *IdsNgrannodeChange) ValidateAll() error {
	return m.validate(true)
}

func (m *IdsNgrannodeChange) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 14 {
		err := IdsNgrannodeChangeValidationError{
			field:  "Value",
			reason: "value must equal 14",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdsNgrannodeChangeMultiError(errors)
	}

	return nil
}

// IdsNgrannodeChangeMultiError is an error wrapping multiple validation errors
// returned by IdsNgrannodeChange.ValidateAll() if the designated constraints
// aren't met.
type IdsNgrannodeChangeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdsNgrannodeChangeMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdsNgrannodeChangeMultiError) AllErrors() []error { return m }

// IdsNgrannodeChangeValidationError is the validation error returned by
// IdsNgrannodeChange.Validate if the designated constraints aren't met.
type IdsNgrannodeChangeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdsNgrannodeChangeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdsNgrannodeChangeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdsNgrannodeChangeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdsNgrannodeChangeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdsNgrannodeChangeValidationError) ErrorName() string {
	return "IdsNgrannodeChangeValidationError"
}

// Error satisfies the builtin error interface
func (e IdsNgrannodeChangeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdsNgrannodeChange.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdsNgrannodeChangeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdsNgrannodeChangeValidationError{}

// Validate checks the field values on IdrRctransfer with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *IdrRctransfer) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdrRctransfer with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in IdrRctransferMultiError, or
// nil if none found.
func (m *IdrRctransfer) ValidateAll() error {
	return m.validate(true)
}

func (m *IdrRctransfer) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 15 {
		err := IdrRctransferValidationError{
			field:  "Value",
			reason: "value must equal 15",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdrRctransferMultiError(errors)
	}

	return nil
}

// IdrRctransferMultiError is an error wrapping multiple validation errors
// returned by IdrRctransfer.ValidateAll() if the designated constraints
// aren't met.
type IdrRctransferMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdrRctransferMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdrRctransferMultiError) AllErrors() []error { return m }

// IdrRctransferValidationError is the validation error returned by
// IdrRctransfer.Validate if the designated constraints aren't met.
type IdrRctransferValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdrRctransferValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdrRctransferValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdrRctransferValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdrRctransferValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdrRctransferValidationError) ErrorName() string { return "IdrRctransferValidationError" }

// Error satisfies the builtin error interface
func (e IdrRctransferValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdrRctransfer.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdrRctransferValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdrRctransferValidationError{}

// Validate checks the field values on IdxnRemoval with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *IdxnRemoval) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdxnRemoval with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in IdxnRemovalMultiError, or
// nil if none found.
func (m *IdxnRemoval) ValidateAll() error {
	return m.validate(true)
}

func (m *IdxnRemoval) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 16 {
		err := IdxnRemovalValidationError{
			field:  "Value",
			reason: "value must equal 16",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdxnRemovalMultiError(errors)
	}

	return nil
}

// IdxnRemovalMultiError is an error wrapping multiple validation errors
// returned by IdxnRemoval.ValidateAll() if the designated constraints aren't met.
type IdxnRemovalMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdxnRemovalMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdxnRemovalMultiError) AllErrors() []error { return m }

// IdxnRemovalValidationError is the validation error returned by
// IdxnRemoval.Validate if the designated constraints aren't met.
type IdxnRemovalValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdxnRemovalValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdxnRemovalValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdxnRemovalValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdxnRemovalValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdxnRemovalValidationError) ErrorName() string { return "IdxnRemovalValidationError" }

// Error satisfies the builtin error interface
func (e IdxnRemovalValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdxnRemoval.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdxnRemovalValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdxnRemovalValidationError{}

// Validate checks the field values on IdxnSetup with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *IdxnSetup) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdxnSetup with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in IdxnSetupMultiError, or nil
// if none found.
func (m *IdxnSetup) ValidateAll() error {
	return m.validate(true)
}

func (m *IdxnSetup) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 17 {
		err := IdxnSetupValidationError{
			field:  "Value",
			reason: "value must equal 17",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdxnSetupMultiError(errors)
	}

	return nil
}

// IdxnSetupMultiError is an error wrapping multiple validation errors returned
// by IdxnSetup.ValidateAll() if the designated constraints aren't met.
type IdxnSetupMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdxnSetupMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdxnSetupMultiError) AllErrors() []error { return m }

// IdxnSetupValidationError is the validation error returned by
// IdxnSetup.Validate if the designated constraints aren't met.
type IdxnSetupValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdxnSetupValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdxnSetupValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdxnSetupValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdxnSetupValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdxnSetupValidationError) ErrorName() string { return "IdxnSetupValidationError" }

// Error satisfies the builtin error interface
func (e IdxnSetupValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdxnSetup.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdxnSetupValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdxnSetupValidationError{}

// Validate checks the field values on IdnGrannodeConfigurationUpdate with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdnGrannodeConfigurationUpdate) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdnGrannodeConfigurationUpdate with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// IdnGrannodeConfigurationUpdateMultiError, or nil if none found.
func (m *IdnGrannodeConfigurationUpdate) ValidateAll() error {
	return m.validate(true)
}

func (m *IdnGrannodeConfigurationUpdate) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 18 {
		err := IdnGrannodeConfigurationUpdateValidationError{
			field:  "Value",
			reason: "value must equal 18",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdnGrannodeConfigurationUpdateMultiError(errors)
	}

	return nil
}

// IdnGrannodeConfigurationUpdateMultiError is an error wrapping multiple
// validation errors returned by IdnGrannodeConfigurationUpdate.ValidateAll()
// if the designated constraints aren't met.
type IdnGrannodeConfigurationUpdateMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdnGrannodeConfigurationUpdateMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdnGrannodeConfigurationUpdateMultiError) AllErrors() []error { return m }

// IdnGrannodeConfigurationUpdateValidationError is the validation error
// returned by IdnGrannodeConfigurationUpdate.Validate if the designated
// constraints aren't met.
type IdnGrannodeConfigurationUpdateValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdnGrannodeConfigurationUpdateValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdnGrannodeConfigurationUpdateValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdnGrannodeConfigurationUpdateValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdnGrannodeConfigurationUpdateValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdnGrannodeConfigurationUpdateValidationError) ErrorName() string {
	return "IdnGrannodeConfigurationUpdateValidationError"
}

// Error satisfies the builtin error interface
func (e IdnGrannodeConfigurationUpdateValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdnGrannodeConfigurationUpdate.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdnGrannodeConfigurationUpdateValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdnGrannodeConfigurationUpdateValidationError{}

// Validate checks the field values on IdcellActivation with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *IdcellActivation) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdcellActivation with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdcellActivationMultiError, or nil if none found.
func (m *IdcellActivation) ValidateAll() error {
	return m.validate(true)
}

func (m *IdcellActivation) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 19 {
		err := IdcellActivationValidationError{
			field:  "Value",
			reason: "value must equal 19",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdcellActivationMultiError(errors)
	}

	return nil
}

// IdcellActivationMultiError is an error wrapping multiple validation errors
// returned by IdcellActivation.ValidateAll() if the designated constraints
// aren't met.
type IdcellActivationMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdcellActivationMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdcellActivationMultiError) AllErrors() []error { return m }

// IdcellActivationValidationError is the validation error returned by
// IdcellActivation.Validate if the designated constraints aren't met.
type IdcellActivationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdcellActivationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdcellActivationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdcellActivationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdcellActivationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdcellActivationValidationError) ErrorName() string { return "IdcellActivationValidationError" }

// Error satisfies the builtin error interface
func (e IdcellActivationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdcellActivation.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdcellActivationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdcellActivationValidationError{}

// Validate checks the field values on Idreset with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Idreset) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Idreset with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in IdresetMultiError, or nil if none found.
func (m *Idreset) ValidateAll() error {
	return m.validate(true)
}

func (m *Idreset) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 20 {
		err := IdresetValidationError{
			field:  "Value",
			reason: "value must equal 20",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdresetMultiError(errors)
	}

	return nil
}

// IdresetMultiError is an error wrapping multiple validation errors returned
// by Idreset.ValidateAll() if the designated constraints aren't met.
type IdresetMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdresetMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdresetMultiError) AllErrors() []error { return m }

// IdresetValidationError is the validation error returned by Idreset.Validate
// if the designated constraints aren't met.
type IdresetValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdresetValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdresetValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdresetValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdresetValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdresetValidationError) ErrorName() string { return "IdresetValidationError" }

// Error satisfies the builtin error interface
func (e IdresetValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdreset.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdresetValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdresetValidationError{}

// Validate checks the field values on IderrorIndication with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *IderrorIndication) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IderrorIndication with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IderrorIndicationMultiError, or nil if none found.
func (m *IderrorIndication) ValidateAll() error {
	return m.validate(true)
}

func (m *IderrorIndication) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 21 {
		err := IderrorIndicationValidationError{
			field:  "Value",
			reason: "value must equal 21",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IderrorIndicationMultiError(errors)
	}

	return nil
}

// IderrorIndicationMultiError is an error wrapping multiple validation errors
// returned by IderrorIndication.ValidateAll() if the designated constraints
// aren't met.
type IderrorIndicationMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IderrorIndicationMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IderrorIndicationMultiError) AllErrors() []error { return m }

// IderrorIndicationValidationError is the validation error returned by
// IderrorIndication.Validate if the designated constraints aren't met.
type IderrorIndicationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IderrorIndicationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IderrorIndicationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IderrorIndicationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IderrorIndicationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IderrorIndicationValidationError) ErrorName() string {
	return "IderrorIndicationValidationError"
}

// Error satisfies the builtin error interface
func (e IderrorIndicationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIderrorIndication.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IderrorIndicationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IderrorIndicationValidationError{}

// Validate checks the field values on IdprivateMessage with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *IdprivateMessage) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdprivateMessage with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdprivateMessageMultiError, or nil if none found.
func (m *IdprivateMessage) ValidateAll() error {
	return m.validate(true)
}

func (m *IdprivateMessage) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 22 {
		err := IdprivateMessageValidationError{
			field:  "Value",
			reason: "value must equal 22",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdprivateMessageMultiError(errors)
	}

	return nil
}

// IdprivateMessageMultiError is an error wrapping multiple validation errors
// returned by IdprivateMessage.ValidateAll() if the designated constraints
// aren't met.
type IdprivateMessageMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdprivateMessageMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdprivateMessageMultiError) AllErrors() []error { return m }

// IdprivateMessageValidationError is the validation error returned by
// IdprivateMessage.Validate if the designated constraints aren't met.
type IdprivateMessageValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdprivateMessageValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdprivateMessageValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdprivateMessageValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdprivateMessageValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdprivateMessageValidationError) ErrorName() string { return "IdprivateMessageValidationError" }

// Error satisfies the builtin error interface
func (e IdprivateMessageValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdprivateMessage.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdprivateMessageValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdprivateMessageValidationError{}

// Validate checks the field values on IdnotificationControl with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdnotificationControl) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdnotificationControl with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdnotificationControlMultiError, or nil if none found.
func (m *IdnotificationControl) ValidateAll() error {
	return m.validate(true)
}

func (m *IdnotificationControl) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 23 {
		err := IdnotificationControlValidationError{
			field:  "Value",
			reason: "value must equal 23",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdnotificationControlMultiError(errors)
	}

	return nil
}

// IdnotificationControlMultiError is an error wrapping multiple validation
// errors returned by IdnotificationControl.ValidateAll() if the designated
// constraints aren't met.
type IdnotificationControlMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdnotificationControlMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdnotificationControlMultiError) AllErrors() []error { return m }

// IdnotificationControlValidationError is the validation error returned by
// IdnotificationControl.Validate if the designated constraints aren't met.
type IdnotificationControlValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdnotificationControlValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdnotificationControlValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdnotificationControlValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdnotificationControlValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdnotificationControlValidationError) ErrorName() string {
	return "IdnotificationControlValidationError"
}

// Error satisfies the builtin error interface
func (e IdnotificationControlValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdnotificationControl.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdnotificationControlValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdnotificationControlValidationError{}

// Validate checks the field values on IdactivityNotification with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdactivityNotification) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdactivityNotification with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdactivityNotificationMultiError, or nil if none found.
func (m *IdactivityNotification) ValidateAll() error {
	return m.validate(true)
}

func (m *IdactivityNotification) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 24 {
		err := IdactivityNotificationValidationError{
			field:  "Value",
			reason: "value must equal 24",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdactivityNotificationMultiError(errors)
	}

	return nil
}

// IdactivityNotificationMultiError is an error wrapping multiple validation
// errors returned by IdactivityNotification.ValidateAll() if the designated
// constraints aren't met.
type IdactivityNotificationMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdactivityNotificationMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdactivityNotificationMultiError) AllErrors() []error { return m }

// IdactivityNotificationValidationError is the validation error returned by
// IdactivityNotification.Validate if the designated constraints aren't met.
type IdactivityNotificationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdactivityNotificationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdactivityNotificationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdactivityNotificationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdactivityNotificationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdactivityNotificationValidationError) ErrorName() string {
	return "IdactivityNotificationValidationError"
}

// Error satisfies the builtin error interface
func (e IdactivityNotificationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdactivityNotification.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdactivityNotificationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdactivityNotificationValidationError{}

// Validate checks the field values on IdeUTraNRCellResourceCoordination with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *IdeUTraNRCellResourceCoordination) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdeUTraNRCellResourceCoordination
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// IdeUTraNRCellResourceCoordinationMultiError, or nil if none found.
func (m *IdeUTraNRCellResourceCoordination) ValidateAll() error {
	return m.validate(true)
}

func (m *IdeUTraNRCellResourceCoordination) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 25 {
		err := IdeUTraNRCellResourceCoordinationValidationError{
			field:  "Value",
			reason: "value must equal 25",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdeUTraNRCellResourceCoordinationMultiError(errors)
	}

	return nil
}

// IdeUTraNRCellResourceCoordinationMultiError is an error wrapping multiple
// validation errors returned by
// IdeUTraNRCellResourceCoordination.ValidateAll() if the designated
// constraints aren't met.
type IdeUTraNRCellResourceCoordinationMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdeUTraNRCellResourceCoordinationMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdeUTraNRCellResourceCoordinationMultiError) AllErrors() []error { return m }

// IdeUTraNRCellResourceCoordinationValidationError is the validation error
// returned by IdeUTraNRCellResourceCoordination.Validate if the designated
// constraints aren't met.
type IdeUTraNRCellResourceCoordinationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdeUTraNRCellResourceCoordinationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdeUTraNRCellResourceCoordinationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdeUTraNRCellResourceCoordinationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdeUTraNRCellResourceCoordinationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdeUTraNRCellResourceCoordinationValidationError) ErrorName() string {
	return "IdeUTraNRCellResourceCoordinationValidationError"
}

// Error satisfies the builtin error interface
func (e IdeUTraNRCellResourceCoordinationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdeUTraNRCellResourceCoordination.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdeUTraNRCellResourceCoordinationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdeUTraNRCellResourceCoordinationValidationError{}

// Validate checks the field values on IdsecondaryRatdataUsageReport with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdsecondaryRatdataUsageReport) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdsecondaryRatdataUsageReport with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// IdsecondaryRatdataUsageReportMultiError, or nil if none found.
func (m *IdsecondaryRatdataUsageReport) ValidateAll() error {
	return m.validate(true)
}

func (m *IdsecondaryRatdataUsageReport) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 26 {
		err := IdsecondaryRatdataUsageReportValidationError{
			field:  "Value",
			reason: "value must equal 26",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdsecondaryRatdataUsageReportMultiError(errors)
	}

	return nil
}

// IdsecondaryRatdataUsageReportMultiError is an error wrapping multiple
// validation errors returned by IdsecondaryRatdataUsageReport.ValidateAll()
// if the designated constraints aren't met.
type IdsecondaryRatdataUsageReportMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdsecondaryRatdataUsageReportMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdsecondaryRatdataUsageReportMultiError) AllErrors() []error { return m }

// IdsecondaryRatdataUsageReportValidationError is the validation error
// returned by IdsecondaryRatdataUsageReport.Validate if the designated
// constraints aren't met.
type IdsecondaryRatdataUsageReportValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdsecondaryRatdataUsageReportValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdsecondaryRatdataUsageReportValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdsecondaryRatdataUsageReportValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdsecondaryRatdataUsageReportValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdsecondaryRatdataUsageReportValidationError) ErrorName() string {
	return "IdsecondaryRatdataUsageReportValidationError"
}

// Error satisfies the builtin error interface
func (e IdsecondaryRatdataUsageReportValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdsecondaryRatdataUsageReport.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdsecondaryRatdataUsageReportValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdsecondaryRatdataUsageReportValidationError{}

// Validate checks the field values on IddeactivateTrace with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *IddeactivateTrace) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IddeactivateTrace with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IddeactivateTraceMultiError, or nil if none found.
func (m *IddeactivateTrace) ValidateAll() error {
	return m.validate(true)
}

func (m *IddeactivateTrace) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 27 {
		err := IddeactivateTraceValidationError{
			field:  "Value",
			reason: "value must equal 27",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IddeactivateTraceMultiError(errors)
	}

	return nil
}

// IddeactivateTraceMultiError is an error wrapping multiple validation errors
// returned by IddeactivateTrace.ValidateAll() if the designated constraints
// aren't met.
type IddeactivateTraceMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IddeactivateTraceMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IddeactivateTraceMultiError) AllErrors() []error { return m }

// IddeactivateTraceValidationError is the validation error returned by
// IddeactivateTrace.Validate if the designated constraints aren't met.
type IddeactivateTraceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IddeactivateTraceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IddeactivateTraceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IddeactivateTraceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IddeactivateTraceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IddeactivateTraceValidationError) ErrorName() string {
	return "IddeactivateTraceValidationError"
}

// Error satisfies the builtin error interface
func (e IddeactivateTraceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIddeactivateTrace.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IddeactivateTraceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IddeactivateTraceValidationError{}

// Validate checks the field values on IdtraceStart with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *IdtraceStart) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdtraceStart with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in IdtraceStartMultiError, or
// nil if none found.
func (m *IdtraceStart) ValidateAll() error {
	return m.validate(true)
}

func (m *IdtraceStart) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 28 {
		err := IdtraceStartValidationError{
			field:  "Value",
			reason: "value must equal 28",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdtraceStartMultiError(errors)
	}

	return nil
}

// IdtraceStartMultiError is an error wrapping multiple validation errors
// returned by IdtraceStart.ValidateAll() if the designated constraints aren't met.
type IdtraceStartMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdtraceStartMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdtraceStartMultiError) AllErrors() []error { return m }

// IdtraceStartValidationError is the validation error returned by
// IdtraceStart.Validate if the designated constraints aren't met.
type IdtraceStartValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdtraceStartValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdtraceStartValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdtraceStartValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdtraceStartValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdtraceStartValidationError) ErrorName() string { return "IdtraceStartValidationError" }

// Error satisfies the builtin error interface
func (e IdtraceStartValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdtraceStart.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdtraceStartValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdtraceStartValidationError{}

// Validate checks the field values on IdhandoverSuccess with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *IdhandoverSuccess) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdhandoverSuccess with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdhandoverSuccessMultiError, or nil if none found.
func (m *IdhandoverSuccess) ValidateAll() error {
	return m.validate(true)
}

func (m *IdhandoverSuccess) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 29 {
		err := IdhandoverSuccessValidationError{
			field:  "Value",
			reason: "value must equal 29",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdhandoverSuccessMultiError(errors)
	}

	return nil
}

// IdhandoverSuccessMultiError is an error wrapping multiple validation errors
// returned by IdhandoverSuccess.ValidateAll() if the designated constraints
// aren't met.
type IdhandoverSuccessMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdhandoverSuccessMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdhandoverSuccessMultiError) AllErrors() []error { return m }

// IdhandoverSuccessValidationError is the validation error returned by
// IdhandoverSuccess.Validate if the designated constraints aren't met.
type IdhandoverSuccessValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdhandoverSuccessValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdhandoverSuccessValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdhandoverSuccessValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdhandoverSuccessValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdhandoverSuccessValidationError) ErrorName() string {
	return "IdhandoverSuccessValidationError"
}

// Error satisfies the builtin error interface
func (e IdhandoverSuccessValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdhandoverSuccess.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdhandoverSuccessValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdhandoverSuccessValidationError{}

// Validate checks the field values on IdconditionalHandoverCancel with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdconditionalHandoverCancel) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdconditionalHandoverCancel with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdconditionalHandoverCancelMultiError, or nil if none found.
func (m *IdconditionalHandoverCancel) ValidateAll() error {
	return m.validate(true)
}

func (m *IdconditionalHandoverCancel) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 30 {
		err := IdconditionalHandoverCancelValidationError{
			field:  "Value",
			reason: "value must equal 30",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdconditionalHandoverCancelMultiError(errors)
	}

	return nil
}

// IdconditionalHandoverCancelMultiError is an error wrapping multiple
// validation errors returned by IdconditionalHandoverCancel.ValidateAll() if
// the designated constraints aren't met.
type IdconditionalHandoverCancelMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdconditionalHandoverCancelMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdconditionalHandoverCancelMultiError) AllErrors() []error { return m }

// IdconditionalHandoverCancelValidationError is the validation error returned
// by IdconditionalHandoverCancel.Validate if the designated constraints
// aren't met.
type IdconditionalHandoverCancelValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdconditionalHandoverCancelValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdconditionalHandoverCancelValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdconditionalHandoverCancelValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdconditionalHandoverCancelValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdconditionalHandoverCancelValidationError) ErrorName() string {
	return "IdconditionalHandoverCancelValidationError"
}

// Error satisfies the builtin error interface
func (e IdconditionalHandoverCancelValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdconditionalHandoverCancel.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdconditionalHandoverCancelValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdconditionalHandoverCancelValidationError{}

// Validate checks the field values on IdearlyStatusTransfer with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdearlyStatusTransfer) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdearlyStatusTransfer with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdearlyStatusTransferMultiError, or nil if none found.
func (m *IdearlyStatusTransfer) ValidateAll() error {
	return m.validate(true)
}

func (m *IdearlyStatusTransfer) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 31 {
		err := IdearlyStatusTransferValidationError{
			field:  "Value",
			reason: "value must equal 31",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdearlyStatusTransferMultiError(errors)
	}

	return nil
}

// IdearlyStatusTransferMultiError is an error wrapping multiple validation
// errors returned by IdearlyStatusTransfer.ValidateAll() if the designated
// constraints aren't met.
type IdearlyStatusTransferMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdearlyStatusTransferMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdearlyStatusTransferMultiError) AllErrors() []error { return m }

// IdearlyStatusTransferValidationError is the validation error returned by
// IdearlyStatusTransfer.Validate if the designated constraints aren't met.
type IdearlyStatusTransferValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdearlyStatusTransferValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdearlyStatusTransferValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdearlyStatusTransferValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdearlyStatusTransferValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdearlyStatusTransferValidationError) ErrorName() string {
	return "IdearlyStatusTransferValidationError"
}

// Error satisfies the builtin error interface
func (e IdearlyStatusTransferValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdearlyStatusTransfer.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdearlyStatusTransferValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdearlyStatusTransferValidationError{}

// Validate checks the field values on IdfailureIndication with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdfailureIndication) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdfailureIndication with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdfailureIndicationMultiError, or nil if none found.
func (m *IdfailureIndication) ValidateAll() error {
	return m.validate(true)
}

func (m *IdfailureIndication) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 32 {
		err := IdfailureIndicationValidationError{
			field:  "Value",
			reason: "value must equal 32",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdfailureIndicationMultiError(errors)
	}

	return nil
}

// IdfailureIndicationMultiError is an error wrapping multiple validation
// errors returned by IdfailureIndication.ValidateAll() if the designated
// constraints aren't met.
type IdfailureIndicationMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdfailureIndicationMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdfailureIndicationMultiError) AllErrors() []error { return m }

// IdfailureIndicationValidationError is the validation error returned by
// IdfailureIndication.Validate if the designated constraints aren't met.
type IdfailureIndicationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdfailureIndicationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdfailureIndicationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdfailureIndicationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdfailureIndicationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdfailureIndicationValidationError) ErrorName() string {
	return "IdfailureIndicationValidationError"
}

// Error satisfies the builtin error interface
func (e IdfailureIndicationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdfailureIndication.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdfailureIndicationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdfailureIndicationValidationError{}

// Validate checks the field values on IdhandoverReport with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *IdhandoverReport) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdhandoverReport with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdhandoverReportMultiError, or nil if none found.
func (m *IdhandoverReport) ValidateAll() error {
	return m.validate(true)
}

func (m *IdhandoverReport) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 33 {
		err := IdhandoverReportValidationError{
			field:  "Value",
			reason: "value must equal 33",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdhandoverReportMultiError(errors)
	}

	return nil
}

// IdhandoverReportMultiError is an error wrapping multiple validation errors
// returned by IdhandoverReport.ValidateAll() if the designated constraints
// aren't met.
type IdhandoverReportMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdhandoverReportMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdhandoverReportMultiError) AllErrors() []error { return m }

// IdhandoverReportValidationError is the validation error returned by
// IdhandoverReport.Validate if the designated constraints aren't met.
type IdhandoverReportValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdhandoverReportValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdhandoverReportValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdhandoverReportValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdhandoverReportValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdhandoverReportValidationError) ErrorName() string { return "IdhandoverReportValidationError" }

// Error satisfies the builtin error interface
func (e IdhandoverReportValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdhandoverReport.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdhandoverReportValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdhandoverReportValidationError{}

// Validate checks the field values on IdresourceStatusReportingInitiation with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *IdresourceStatusReportingInitiation) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdresourceStatusReportingInitiation
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// IdresourceStatusReportingInitiationMultiError, or nil if none found.
func (m *IdresourceStatusReportingInitiation) ValidateAll() error {
	return m.validate(true)
}

func (m *IdresourceStatusReportingInitiation) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 34 {
		err := IdresourceStatusReportingInitiationValidationError{
			field:  "Value",
			reason: "value must equal 34",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdresourceStatusReportingInitiationMultiError(errors)
	}

	return nil
}

// IdresourceStatusReportingInitiationMultiError is an error wrapping multiple
// validation errors returned by
// IdresourceStatusReportingInitiation.ValidateAll() if the designated
// constraints aren't met.
type IdresourceStatusReportingInitiationMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdresourceStatusReportingInitiationMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdresourceStatusReportingInitiationMultiError) AllErrors() []error { return m }

// IdresourceStatusReportingInitiationValidationError is the validation error
// returned by IdresourceStatusReportingInitiation.Validate if the designated
// constraints aren't met.
type IdresourceStatusReportingInitiationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdresourceStatusReportingInitiationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdresourceStatusReportingInitiationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdresourceStatusReportingInitiationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdresourceStatusReportingInitiationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdresourceStatusReportingInitiationValidationError) ErrorName() string {
	return "IdresourceStatusReportingInitiationValidationError"
}

// Error satisfies the builtin error interface
func (e IdresourceStatusReportingInitiationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdresourceStatusReportingInitiation.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdresourceStatusReportingInitiationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdresourceStatusReportingInitiationValidationError{}

// Validate checks the field values on IdresourceStatusReporting with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdresourceStatusReporting) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdresourceStatusReporting with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdresourceStatusReportingMultiError, or nil if none found.
func (m *IdresourceStatusReporting) ValidateAll() error {
	return m.validate(true)
}

func (m *IdresourceStatusReporting) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 35 {
		err := IdresourceStatusReportingValidationError{
			field:  "Value",
			reason: "value must equal 35",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdresourceStatusReportingMultiError(errors)
	}

	return nil
}

// IdresourceStatusReportingMultiError is an error wrapping multiple validation
// errors returned by IdresourceStatusReporting.ValidateAll() if the
// designated constraints aren't met.
type IdresourceStatusReportingMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdresourceStatusReportingMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdresourceStatusReportingMultiError) AllErrors() []error { return m }

// IdresourceStatusReportingValidationError is the validation error returned by
// IdresourceStatusReporting.Validate if the designated constraints aren't met.
type IdresourceStatusReportingValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdresourceStatusReportingValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdresourceStatusReportingValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdresourceStatusReportingValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdresourceStatusReportingValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdresourceStatusReportingValidationError) ErrorName() string {
	return "IdresourceStatusReportingValidationError"
}

// Error satisfies the builtin error interface
func (e IdresourceStatusReportingValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdresourceStatusReporting.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdresourceStatusReportingValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdresourceStatusReportingValidationError{}

// Validate checks the field values on IdmobilitySettingsChange with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdmobilitySettingsChange) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdmobilitySettingsChange with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdmobilitySettingsChangeMultiError, or nil if none found.
func (m *IdmobilitySettingsChange) ValidateAll() error {
	return m.validate(true)
}

func (m *IdmobilitySettingsChange) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 36 {
		err := IdmobilitySettingsChangeValidationError{
			field:  "Value",
			reason: "value must equal 36",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdmobilitySettingsChangeMultiError(errors)
	}

	return nil
}

// IdmobilitySettingsChangeMultiError is an error wrapping multiple validation
// errors returned by IdmobilitySettingsChange.ValidateAll() if the designated
// constraints aren't met.
type IdmobilitySettingsChangeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdmobilitySettingsChangeMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdmobilitySettingsChangeMultiError) AllErrors() []error { return m }

// IdmobilitySettingsChangeValidationError is the validation error returned by
// IdmobilitySettingsChange.Validate if the designated constraints aren't met.
type IdmobilitySettingsChangeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdmobilitySettingsChangeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdmobilitySettingsChangeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdmobilitySettingsChangeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdmobilitySettingsChangeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdmobilitySettingsChangeValidationError) ErrorName() string {
	return "IdmobilitySettingsChangeValidationError"
}

// Error satisfies the builtin error interface
func (e IdmobilitySettingsChangeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdmobilitySettingsChange.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdmobilitySettingsChangeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdmobilitySettingsChangeValidationError{}

// Validate checks the field values on IdaccessAndMobilityIndication with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdaccessAndMobilityIndication) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdaccessAndMobilityIndication with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// IdaccessAndMobilityIndicationMultiError, or nil if none found.
func (m *IdaccessAndMobilityIndication) ValidateAll() error {
	return m.validate(true)
}

func (m *IdaccessAndMobilityIndication) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 37 {
		err := IdaccessAndMobilityIndicationValidationError{
			field:  "Value",
			reason: "value must equal 37",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdaccessAndMobilityIndicationMultiError(errors)
	}

	return nil
}

// IdaccessAndMobilityIndicationMultiError is an error wrapping multiple
// validation errors returned by IdaccessAndMobilityIndication.ValidateAll()
// if the designated constraints aren't met.
type IdaccessAndMobilityIndicationMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdaccessAndMobilityIndicationMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdaccessAndMobilityIndicationMultiError) AllErrors() []error { return m }

// IdaccessAndMobilityIndicationValidationError is the validation error
// returned by IdaccessAndMobilityIndication.Validate if the designated
// constraints aren't met.
type IdaccessAndMobilityIndicationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdaccessAndMobilityIndicationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdaccessAndMobilityIndicationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdaccessAndMobilityIndicationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdaccessAndMobilityIndicationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdaccessAndMobilityIndicationValidationError) ErrorName() string {
	return "IdaccessAndMobilityIndicationValidationError"
}

// Error satisfies the builtin error interface
func (e IdaccessAndMobilityIndicationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdaccessAndMobilityIndication.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdaccessAndMobilityIndicationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdaccessAndMobilityIndicationValidationError{}

// Validate checks the field values on MaxEarfcn with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *MaxEarfcn) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MaxEarfcn with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in MaxEarfcnMultiError, or nil
// if none found.
func (m *MaxEarfcn) ValidateAll() error {
	return m.validate(true)
}

func (m *MaxEarfcn) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 262143 {
		err := MaxEarfcnValidationError{
			field:  "Value",
			reason: "value must equal 262143",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MaxEarfcnMultiError(errors)
	}

	return nil
}

// MaxEarfcnMultiError is an error wrapping multiple validation errors returned
// by MaxEarfcn.ValidateAll() if the designated constraints aren't met.
type MaxEarfcnMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MaxEarfcnMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MaxEarfcnMultiError) AllErrors() []error { return m }

// MaxEarfcnValidationError is the validation error returned by
// MaxEarfcn.Validate if the designated constraints aren't met.
type MaxEarfcnValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MaxEarfcnValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MaxEarfcnValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MaxEarfcnValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MaxEarfcnValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MaxEarfcnValidationError) ErrorName() string { return "MaxEarfcnValidationError" }

// Error satisfies the builtin error interface
func (e MaxEarfcnValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMaxEarfcn.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MaxEarfcnValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MaxEarfcnValidationError{}

// Validate checks the field values on MaxnoofAllowedAreas with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *MaxnoofAllowedAreas) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MaxnoofAllowedAreas with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MaxnoofAllowedAreasMultiError, or nil if none found.
func (m *MaxnoofAllowedAreas) ValidateAll() error {
	return m.validate(true)
}

func (m *MaxnoofAllowedAreas) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 16 {
		err := MaxnoofAllowedAreasValidationError{
			field:  "Value",
			reason: "value must equal 16",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MaxnoofAllowedAreasMultiError(errors)
	}

	return nil
}

// MaxnoofAllowedAreasMultiError is an error wrapping multiple validation
// errors returned by MaxnoofAllowedAreas.ValidateAll() if the designated
// constraints aren't met.
type MaxnoofAllowedAreasMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MaxnoofAllowedAreasMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MaxnoofAllowedAreasMultiError) AllErrors() []error { return m }

// MaxnoofAllowedAreasValidationError is the validation error returned by
// MaxnoofAllowedAreas.Validate if the designated constraints aren't met.
type MaxnoofAllowedAreasValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MaxnoofAllowedAreasValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MaxnoofAllowedAreasValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MaxnoofAllowedAreasValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MaxnoofAllowedAreasValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MaxnoofAllowedAreasValidationError) ErrorName() string {
	return "MaxnoofAllowedAreasValidationError"
}

// Error satisfies the builtin error interface
func (e MaxnoofAllowedAreasValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMaxnoofAllowedAreas.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MaxnoofAllowedAreasValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MaxnoofAllowedAreasValidationError{}

// Validate checks the field values on MaxnoofAmfregions with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *MaxnoofAmfregions) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MaxnoofAmfregions with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MaxnoofAmfregionsMultiError, or nil if none found.
func (m *MaxnoofAmfregions) ValidateAll() error {
	return m.validate(true)
}

func (m *MaxnoofAmfregions) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 16 {
		err := MaxnoofAmfregionsValidationError{
			field:  "Value",
			reason: "value must equal 16",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MaxnoofAmfregionsMultiError(errors)
	}

	return nil
}

// MaxnoofAmfregionsMultiError is an error wrapping multiple validation errors
// returned by MaxnoofAmfregions.ValidateAll() if the designated constraints
// aren't met.
type MaxnoofAmfregionsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MaxnoofAmfregionsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MaxnoofAmfregionsMultiError) AllErrors() []error { return m }

// MaxnoofAmfregionsValidationError is the validation error returned by
// MaxnoofAmfregions.Validate if the designated constraints aren't met.
type MaxnoofAmfregionsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MaxnoofAmfregionsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MaxnoofAmfregionsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MaxnoofAmfregionsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MaxnoofAmfregionsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MaxnoofAmfregionsValidationError) ErrorName() string {
	return "MaxnoofAmfregionsValidationError"
}

// Error satisfies the builtin error interface
func (e MaxnoofAmfregionsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMaxnoofAmfregions.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MaxnoofAmfregionsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MaxnoofAmfregionsValidationError{}

// Validate checks the field values on MaxnoofAoIs with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *MaxnoofAoIs) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MaxnoofAoIs with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in MaxnoofAoIsMultiError, or
// nil if none found.
func (m *MaxnoofAoIs) ValidateAll() error {
	return m.validate(true)
}

func (m *MaxnoofAoIs) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 64 {
		err := MaxnoofAoIsValidationError{
			field:  "Value",
			reason: "value must equal 64",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MaxnoofAoIsMultiError(errors)
	}

	return nil
}

// MaxnoofAoIsMultiError is an error wrapping multiple validation errors
// returned by MaxnoofAoIs.ValidateAll() if the designated constraints aren't met.
type MaxnoofAoIsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MaxnoofAoIsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MaxnoofAoIsMultiError) AllErrors() []error { return m }

// MaxnoofAoIsValidationError is the validation error returned by
// MaxnoofAoIs.Validate if the designated constraints aren't met.
type MaxnoofAoIsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MaxnoofAoIsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MaxnoofAoIsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MaxnoofAoIsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MaxnoofAoIsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MaxnoofAoIsValidationError) ErrorName() string { return "MaxnoofAoIsValidationError" }

// Error satisfies the builtin error interface
func (e MaxnoofAoIsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMaxnoofAoIs.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MaxnoofAoIsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MaxnoofAoIsValidationError{}

// Validate checks the field values on MaxnoofBluetoothName with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *MaxnoofBluetoothName) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MaxnoofBluetoothName with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MaxnoofBluetoothNameMultiError, or nil if none found.
func (m *MaxnoofBluetoothName) ValidateAll() error {
	return m.validate(true)
}

func (m *MaxnoofBluetoothName) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 4 {
		err := MaxnoofBluetoothNameValidationError{
			field:  "Value",
			reason: "value must equal 4",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MaxnoofBluetoothNameMultiError(errors)
	}

	return nil
}

// MaxnoofBluetoothNameMultiError is an error wrapping multiple validation
// errors returned by MaxnoofBluetoothName.ValidateAll() if the designated
// constraints aren't met.
type MaxnoofBluetoothNameMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MaxnoofBluetoothNameMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MaxnoofBluetoothNameMultiError) AllErrors() []error { return m }

// MaxnoofBluetoothNameValidationError is the validation error returned by
// MaxnoofBluetoothName.Validate if the designated constraints aren't met.
type MaxnoofBluetoothNameValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MaxnoofBluetoothNameValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MaxnoofBluetoothNameValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MaxnoofBluetoothNameValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MaxnoofBluetoothNameValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MaxnoofBluetoothNameValidationError) ErrorName() string {
	return "MaxnoofBluetoothNameValidationError"
}

// Error satisfies the builtin error interface
func (e MaxnoofBluetoothNameValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMaxnoofBluetoothName.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MaxnoofBluetoothNameValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MaxnoofBluetoothNameValidationError{}

// Validate checks the field values on MaxnoofBplmns with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *MaxnoofBplmns) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MaxnoofBplmns with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in MaxnoofBplmnsMultiError, or
// nil if none found.
func (m *MaxnoofBplmns) ValidateAll() error {
	return m.validate(true)
}

func (m *MaxnoofBplmns) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 12 {
		err := MaxnoofBplmnsValidationError{
			field:  "Value",
			reason: "value must equal 12",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MaxnoofBplmnsMultiError(errors)
	}

	return nil
}

// MaxnoofBplmnsMultiError is an error wrapping multiple validation errors
// returned by MaxnoofBplmns.ValidateAll() if the designated constraints
// aren't met.
type MaxnoofBplmnsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MaxnoofBplmnsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MaxnoofBplmnsMultiError) AllErrors() []error { return m }

// MaxnoofBplmnsValidationError is the validation error returned by
// MaxnoofBplmns.Validate if the designated constraints aren't met.
type MaxnoofBplmnsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MaxnoofBplmnsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MaxnoofBplmnsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MaxnoofBplmnsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MaxnoofBplmnsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MaxnoofBplmnsValidationError) ErrorName() string { return "MaxnoofBplmnsValidationError" }

// Error satisfies the builtin error interface
func (e MaxnoofBplmnsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMaxnoofBplmns.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MaxnoofBplmnsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MaxnoofBplmnsValidationError{}

// Validate checks the field values on MaxnoofCags with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *MaxnoofCags) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MaxnoofCags with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in MaxnoofCagsMultiError, or
// nil if none found.
func (m *MaxnoofCags) ValidateAll() error {
	return m.validate(true)
}

func (m *MaxnoofCags) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 12 {
		err := MaxnoofCagsValidationError{
			field:  "Value",
			reason: "value must equal 12",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MaxnoofCagsMultiError(errors)
	}

	return nil
}

// MaxnoofCagsMultiError is an error wrapping multiple validation errors
// returned by MaxnoofCags.ValidateAll() if the designated constraints aren't met.
type MaxnoofCagsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MaxnoofCagsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MaxnoofCagsMultiError) AllErrors() []error { return m }

// MaxnoofCagsValidationError is the validation error returned by
// MaxnoofCags.Validate if the designated constraints aren't met.
type MaxnoofCagsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MaxnoofCagsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MaxnoofCagsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MaxnoofCagsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MaxnoofCagsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MaxnoofCagsValidationError) ErrorName() string { return "MaxnoofCagsValidationError" }

// Error satisfies the builtin error interface
func (e MaxnoofCagsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMaxnoofCags.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MaxnoofCagsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MaxnoofCagsValidationError{}

// Validate checks the field values on MaxnoofCagsperPlmn with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *MaxnoofCagsperPlmn) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MaxnoofCagsperPlmn with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MaxnoofCagsperPlmnMultiError, or nil if none found.
func (m *MaxnoofCagsperPlmn) ValidateAll() error {
	return m.validate(true)
}

func (m *MaxnoofCagsperPlmn) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 256 {
		err := MaxnoofCagsperPlmnValidationError{
			field:  "Value",
			reason: "value must equal 256",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MaxnoofCagsperPlmnMultiError(errors)
	}

	return nil
}

// MaxnoofCagsperPlmnMultiError is an error wrapping multiple validation errors
// returned by MaxnoofCagsperPlmn.ValidateAll() if the designated constraints
// aren't met.
type MaxnoofCagsperPlmnMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MaxnoofCagsperPlmnMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MaxnoofCagsperPlmnMultiError) AllErrors() []error { return m }

// MaxnoofCagsperPlmnValidationError is the validation error returned by
// MaxnoofCagsperPlmn.Validate if the designated constraints aren't met.
type MaxnoofCagsperPlmnValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MaxnoofCagsperPlmnValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MaxnoofCagsperPlmnValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MaxnoofCagsperPlmnValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MaxnoofCagsperPlmnValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MaxnoofCagsperPlmnValidationError) ErrorName() string {
	return "MaxnoofCagsperPlmnValidationError"
}

// Error satisfies the builtin error interface
func (e MaxnoofCagsperPlmnValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMaxnoofCagsperPlmn.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MaxnoofCagsperPlmnValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MaxnoofCagsperPlmnValidationError{}

// Validate checks the field values on MaxnoofCellIdforMdt with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *MaxnoofCellIdforMdt) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MaxnoofCellIdforMdt with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MaxnoofCellIdforMdtMultiError, or nil if none found.
func (m *MaxnoofCellIdforMdt) ValidateAll() error {
	return m.validate(true)
}

func (m *MaxnoofCellIdforMdt) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 32 {
		err := MaxnoofCellIdforMdtValidationError{
			field:  "Value",
			reason: "value must equal 32",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MaxnoofCellIdforMdtMultiError(errors)
	}

	return nil
}

// MaxnoofCellIdforMdtMultiError is an error wrapping multiple validation
// errors returned by MaxnoofCellIdforMdt.ValidateAll() if the designated
// constraints aren't met.
type MaxnoofCellIdforMdtMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MaxnoofCellIdforMdtMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MaxnoofCellIdforMdtMultiError) AllErrors() []error { return m }

// MaxnoofCellIdforMdtValidationError is the validation error returned by
// MaxnoofCellIdforMdt.Validate if the designated constraints aren't met.
type MaxnoofCellIdforMdtValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MaxnoofCellIdforMdtValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MaxnoofCellIdforMdtValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MaxnoofCellIdforMdtValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MaxnoofCellIdforMdtValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MaxnoofCellIdforMdtValidationError) ErrorName() string {
	return "MaxnoofCellIdforMdtValidationError"
}

// Error satisfies the builtin error interface
func (e MaxnoofCellIdforMdtValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMaxnoofCellIdforMdt.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MaxnoofCellIdforMdtValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MaxnoofCellIdforMdtValidationError{}

// Validate checks the field values on MaxnoofCellsinAoI with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *MaxnoofCellsinAoI) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MaxnoofCellsinAoI with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MaxnoofCellsinAoIMultiError, or nil if none found.
func (m *MaxnoofCellsinAoI) ValidateAll() error {
	return m.validate(true)
}

func (m *MaxnoofCellsinAoI) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 256 {
		err := MaxnoofCellsinAoIValidationError{
			field:  "Value",
			reason: "value must equal 256",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MaxnoofCellsinAoIMultiError(errors)
	}

	return nil
}

// MaxnoofCellsinAoIMultiError is an error wrapping multiple validation errors
// returned by MaxnoofCellsinAoI.ValidateAll() if the designated constraints
// aren't met.
type MaxnoofCellsinAoIMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MaxnoofCellsinAoIMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MaxnoofCellsinAoIMultiError) AllErrors() []error { return m }

// MaxnoofCellsinAoIValidationError is the validation error returned by
// MaxnoofCellsinAoI.Validate if the designated constraints aren't met.
type MaxnoofCellsinAoIValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MaxnoofCellsinAoIValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MaxnoofCellsinAoIValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MaxnoofCellsinAoIValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MaxnoofCellsinAoIValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MaxnoofCellsinAoIValidationError) ErrorName() string {
	return "MaxnoofCellsinAoIValidationError"
}

// Error satisfies the builtin error interface
func (e MaxnoofCellsinAoIValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMaxnoofCellsinAoI.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MaxnoofCellsinAoIValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MaxnoofCellsinAoIValidationError{}

// Validate checks the field values on MaxnoofCellsinUehistoryInfo with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *MaxnoofCellsinUehistoryInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MaxnoofCellsinUehistoryInfo with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MaxnoofCellsinUehistoryInfoMultiError, or nil if none found.
func (m *MaxnoofCellsinUehistoryInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *MaxnoofCellsinUehistoryInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 16 {
		err := MaxnoofCellsinUehistoryInfoValidationError{
			field:  "Value",
			reason: "value must equal 16",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MaxnoofCellsinUehistoryInfoMultiError(errors)
	}

	return nil
}

// MaxnoofCellsinUehistoryInfoMultiError is an error wrapping multiple
// validation errors returned by MaxnoofCellsinUehistoryInfo.ValidateAll() if
// the designated constraints aren't met.
type MaxnoofCellsinUehistoryInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MaxnoofCellsinUehistoryInfoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MaxnoofCellsinUehistoryInfoMultiError) AllErrors() []error { return m }

// MaxnoofCellsinUehistoryInfoValidationError is the validation error returned
// by MaxnoofCellsinUehistoryInfo.Validate if the designated constraints
// aren't met.
type MaxnoofCellsinUehistoryInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MaxnoofCellsinUehistoryInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MaxnoofCellsinUehistoryInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MaxnoofCellsinUehistoryInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MaxnoofCellsinUehistoryInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MaxnoofCellsinUehistoryInfoValidationError) ErrorName() string {
	return "MaxnoofCellsinUehistoryInfoValidationError"
}

// Error satisfies the builtin error interface
func (e MaxnoofCellsinUehistoryInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMaxnoofCellsinUehistoryInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MaxnoofCellsinUehistoryInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MaxnoofCellsinUehistoryInfoValidationError{}

// Validate checks the field values on MaxnoofCellsinNgRAnnode with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *MaxnoofCellsinNgRAnnode) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MaxnoofCellsinNgRAnnode with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MaxnoofCellsinNgRAnnodeMultiError, or nil if none found.
func (m *MaxnoofCellsinNgRAnnode) ValidateAll() error {
	return m.validate(true)
}

func (m *MaxnoofCellsinNgRAnnode) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 16384 {
		err := MaxnoofCellsinNgRAnnodeValidationError{
			field:  "Value",
			reason: "value must equal 16384",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MaxnoofCellsinNgRAnnodeMultiError(errors)
	}

	return nil
}

// MaxnoofCellsinNgRAnnodeMultiError is an error wrapping multiple validation
// errors returned by MaxnoofCellsinNgRAnnode.ValidateAll() if the designated
// constraints aren't met.
type MaxnoofCellsinNgRAnnodeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MaxnoofCellsinNgRAnnodeMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MaxnoofCellsinNgRAnnodeMultiError) AllErrors() []error { return m }

// MaxnoofCellsinNgRAnnodeValidationError is the validation error returned by
// MaxnoofCellsinNgRAnnode.Validate if the designated constraints aren't met.
type MaxnoofCellsinNgRAnnodeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MaxnoofCellsinNgRAnnodeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MaxnoofCellsinNgRAnnodeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MaxnoofCellsinNgRAnnodeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MaxnoofCellsinNgRAnnodeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MaxnoofCellsinNgRAnnodeValidationError) ErrorName() string {
	return "MaxnoofCellsinNgRAnnodeValidationError"
}

// Error satisfies the builtin error interface
func (e MaxnoofCellsinNgRAnnodeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMaxnoofCellsinNgRAnnode.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MaxnoofCellsinNgRAnnodeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MaxnoofCellsinNgRAnnodeValidationError{}

// Validate checks the field values on MaxnoofCellsinRna with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *MaxnoofCellsinRna) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MaxnoofCellsinRna with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MaxnoofCellsinRnaMultiError, or nil if none found.
func (m *MaxnoofCellsinRna) ValidateAll() error {
	return m.validate(true)
}

func (m *MaxnoofCellsinRna) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 32 {
		err := MaxnoofCellsinRnaValidationError{
			field:  "Value",
			reason: "value must equal 32",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MaxnoofCellsinRnaMultiError(errors)
	}

	return nil
}

// MaxnoofCellsinRnaMultiError is an error wrapping multiple validation errors
// returned by MaxnoofCellsinRna.ValidateAll() if the designated constraints
// aren't met.
type MaxnoofCellsinRnaMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MaxnoofCellsinRnaMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MaxnoofCellsinRnaMultiError) AllErrors() []error { return m }

// MaxnoofCellsinRnaValidationError is the validation error returned by
// MaxnoofCellsinRna.Validate if the designated constraints aren't met.
type MaxnoofCellsinRnaValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MaxnoofCellsinRnaValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MaxnoofCellsinRnaValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MaxnoofCellsinRnaValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MaxnoofCellsinRnaValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MaxnoofCellsinRnaValidationError) ErrorName() string {
	return "MaxnoofCellsinRnaValidationError"
}

// Error satisfies the builtin error interface
func (e MaxnoofCellsinRnaValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMaxnoofCellsinRna.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MaxnoofCellsinRnaValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MaxnoofCellsinRnaValidationError{}

// Validate checks the field values on MaxnoofCellsUemovingTrajectory with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *MaxnoofCellsUemovingTrajectory) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MaxnoofCellsUemovingTrajectory with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// MaxnoofCellsUemovingTrajectoryMultiError, or nil if none found.
func (m *MaxnoofCellsUemovingTrajectory) ValidateAll() error {
	return m.validate(true)
}

func (m *MaxnoofCellsUemovingTrajectory) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 16 {
		err := MaxnoofCellsUemovingTrajectoryValidationError{
			field:  "Value",
			reason: "value must equal 16",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MaxnoofCellsUemovingTrajectoryMultiError(errors)
	}

	return nil
}

// MaxnoofCellsUemovingTrajectoryMultiError is an error wrapping multiple
// validation errors returned by MaxnoofCellsUemovingTrajectory.ValidateAll()
// if the designated constraints aren't met.
type MaxnoofCellsUemovingTrajectoryMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MaxnoofCellsUemovingTrajectoryMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MaxnoofCellsUemovingTrajectoryMultiError) AllErrors() []error { return m }

// MaxnoofCellsUemovingTrajectoryValidationError is the validation error
// returned by MaxnoofCellsUemovingTrajectory.Validate if the designated
// constraints aren't met.
type MaxnoofCellsUemovingTrajectoryValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MaxnoofCellsUemovingTrajectoryValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MaxnoofCellsUemovingTrajectoryValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MaxnoofCellsUemovingTrajectoryValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MaxnoofCellsUemovingTrajectoryValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MaxnoofCellsUemovingTrajectoryValidationError) ErrorName() string {
	return "MaxnoofCellsUemovingTrajectoryValidationError"
}

// Error satisfies the builtin error interface
func (e MaxnoofCellsUemovingTrajectoryValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMaxnoofCellsUemovingTrajectory.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MaxnoofCellsUemovingTrajectoryValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MaxnoofCellsUemovingTrajectoryValidationError{}

// Validate checks the field values on MaxnoofDrbs with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *MaxnoofDrbs) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MaxnoofDrbs with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in MaxnoofDrbsMultiError, or
// nil if none found.
func (m *MaxnoofDrbs) ValidateAll() error {
	return m.validate(true)
}

func (m *MaxnoofDrbs) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 32 {
		err := MaxnoofDrbsValidationError{
			field:  "Value",
			reason: "value must equal 32",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MaxnoofDrbsMultiError(errors)
	}

	return nil
}

// MaxnoofDrbsMultiError is an error wrapping multiple validation errors
// returned by MaxnoofDrbs.ValidateAll() if the designated constraints aren't met.
type MaxnoofDrbsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MaxnoofDrbsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MaxnoofDrbsMultiError) AllErrors() []error { return m }

// MaxnoofDrbsValidationError is the validation error returned by
// MaxnoofDrbs.Validate if the designated constraints aren't met.
type MaxnoofDrbsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MaxnoofDrbsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MaxnoofDrbsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MaxnoofDrbsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MaxnoofDrbsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MaxnoofDrbsValidationError) ErrorName() string { return "MaxnoofDrbsValidationError" }

// Error satisfies the builtin error interface
func (e MaxnoofDrbsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMaxnoofDrbs.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MaxnoofDrbsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MaxnoofDrbsValidationError{}

// Validate checks the field values on MaxnoofEutrabands with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *MaxnoofEutrabands) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MaxnoofEutrabands with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MaxnoofEutrabandsMultiError, or nil if none found.
func (m *MaxnoofEutrabands) ValidateAll() error {
	return m.validate(true)
}

func (m *MaxnoofEutrabands) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 16 {
		err := MaxnoofEutrabandsValidationError{
			field:  "Value",
			reason: "value must equal 16",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MaxnoofEutrabandsMultiError(errors)
	}

	return nil
}

// MaxnoofEutrabandsMultiError is an error wrapping multiple validation errors
// returned by MaxnoofEutrabands.ValidateAll() if the designated constraints
// aren't met.
type MaxnoofEutrabandsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MaxnoofEutrabandsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MaxnoofEutrabandsMultiError) AllErrors() []error { return m }

// MaxnoofEutrabandsValidationError is the validation error returned by
// MaxnoofEutrabands.Validate if the designated constraints aren't met.
type MaxnoofEutrabandsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MaxnoofEutrabandsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MaxnoofEutrabandsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MaxnoofEutrabandsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MaxnoofEutrabandsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MaxnoofEutrabandsValidationError) ErrorName() string {
	return "MaxnoofEutrabandsValidationError"
}

// Error satisfies the builtin error interface
func (e MaxnoofEutrabandsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMaxnoofEutrabands.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MaxnoofEutrabandsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MaxnoofEutrabandsValidationError{}

// Validate checks the field values on MaxnoofEutrabplmns with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *MaxnoofEutrabplmns) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MaxnoofEutrabplmns with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MaxnoofEutrabplmnsMultiError, or nil if none found.
func (m *MaxnoofEutrabplmns) ValidateAll() error {
	return m.validate(true)
}

func (m *MaxnoofEutrabplmns) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 6 {
		err := MaxnoofEutrabplmnsValidationError{
			field:  "Value",
			reason: "value must equal 6",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MaxnoofEutrabplmnsMultiError(errors)
	}

	return nil
}

// MaxnoofEutrabplmnsMultiError is an error wrapping multiple validation errors
// returned by MaxnoofEutrabplmns.ValidateAll() if the designated constraints
// aren't met.
type MaxnoofEutrabplmnsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MaxnoofEutrabplmnsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MaxnoofEutrabplmnsMultiError) AllErrors() []error { return m }

// MaxnoofEutrabplmnsValidationError is the validation error returned by
// MaxnoofEutrabplmns.Validate if the designated constraints aren't met.
type MaxnoofEutrabplmnsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MaxnoofEutrabplmnsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MaxnoofEutrabplmnsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MaxnoofEutrabplmnsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MaxnoofEutrabplmnsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MaxnoofEutrabplmnsValidationError) ErrorName() string {
	return "MaxnoofEutrabplmnsValidationError"
}

// Error satisfies the builtin error interface
func (e MaxnoofEutrabplmnsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMaxnoofEutrabplmns.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MaxnoofEutrabplmnsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MaxnoofEutrabplmnsValidationError{}

// Validate checks the field values on MaxnoofEplmns with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *MaxnoofEplmns) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MaxnoofEplmns with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in MaxnoofEplmnsMultiError, or
// nil if none found.
func (m *MaxnoofEplmns) ValidateAll() error {
	return m.validate(true)
}

func (m *MaxnoofEplmns) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 15 {
		err := MaxnoofEplmnsValidationError{
			field:  "Value",
			reason: "value must equal 15",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MaxnoofEplmnsMultiError(errors)
	}

	return nil
}

// MaxnoofEplmnsMultiError is an error wrapping multiple validation errors
// returned by MaxnoofEplmns.ValidateAll() if the designated constraints
// aren't met.
type MaxnoofEplmnsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MaxnoofEplmnsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MaxnoofEplmnsMultiError) AllErrors() []error { return m }

// MaxnoofEplmnsValidationError is the validation error returned by
// MaxnoofEplmns.Validate if the designated constraints aren't met.
type MaxnoofEplmnsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MaxnoofEplmnsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MaxnoofEplmnsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MaxnoofEplmnsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MaxnoofEplmnsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MaxnoofEplmnsValidationError) ErrorName() string { return "MaxnoofEplmnsValidationError" }

// Error satisfies the builtin error interface
func (e MaxnoofEplmnsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMaxnoofEplmns.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MaxnoofEplmnsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MaxnoofEplmnsValidationError{}

// Validate checks the field values on MaxnoofExtSliceItems with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *MaxnoofExtSliceItems) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MaxnoofExtSliceItems with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MaxnoofExtSliceItemsMultiError, or nil if none found.
func (m *MaxnoofExtSliceItems) ValidateAll() error {
	return m.validate(true)
}

func (m *MaxnoofExtSliceItems) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 65535 {
		err := MaxnoofExtSliceItemsValidationError{
			field:  "Value",
			reason: "value must equal 65535",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MaxnoofExtSliceItemsMultiError(errors)
	}

	return nil
}

// MaxnoofExtSliceItemsMultiError is an error wrapping multiple validation
// errors returned by MaxnoofExtSliceItems.ValidateAll() if the designated
// constraints aren't met.
type MaxnoofExtSliceItemsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MaxnoofExtSliceItemsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MaxnoofExtSliceItemsMultiError) AllErrors() []error { return m }

// MaxnoofExtSliceItemsValidationError is the validation error returned by
// MaxnoofExtSliceItems.Validate if the designated constraints aren't met.
type MaxnoofExtSliceItemsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MaxnoofExtSliceItemsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MaxnoofExtSliceItemsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MaxnoofExtSliceItemsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MaxnoofExtSliceItemsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MaxnoofExtSliceItemsValidationError) ErrorName() string {
	return "MaxnoofExtSliceItemsValidationError"
}

// Error satisfies the builtin error interface
func (e MaxnoofExtSliceItemsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMaxnoofExtSliceItems.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MaxnoofExtSliceItemsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MaxnoofExtSliceItemsValidationError{}

// Validate checks the field values on MaxnoofEplmnsplus1 with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *MaxnoofEplmnsplus1) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MaxnoofEplmnsplus1 with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MaxnoofEplmnsplus1MultiError, or nil if none found.
func (m *MaxnoofEplmnsplus1) ValidateAll() error {
	return m.validate(true)
}

func (m *MaxnoofEplmnsplus1) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 16 {
		err := MaxnoofEplmnsplus1ValidationError{
			field:  "Value",
			reason: "value must equal 16",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MaxnoofEplmnsplus1MultiError(errors)
	}

	return nil
}

// MaxnoofEplmnsplus1MultiError is an error wrapping multiple validation errors
// returned by MaxnoofEplmnsplus1.ValidateAll() if the designated constraints
// aren't met.
type MaxnoofEplmnsplus1MultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MaxnoofEplmnsplus1MultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MaxnoofEplmnsplus1MultiError) AllErrors() []error { return m }

// MaxnoofEplmnsplus1ValidationError is the validation error returned by
// MaxnoofEplmnsplus1.Validate if the designated constraints aren't met.
type MaxnoofEplmnsplus1ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MaxnoofEplmnsplus1ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MaxnoofEplmnsplus1ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MaxnoofEplmnsplus1ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MaxnoofEplmnsplus1ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MaxnoofEplmnsplus1ValidationError) ErrorName() string {
	return "MaxnoofEplmnsplus1ValidationError"
}

// Error satisfies the builtin error interface
func (e MaxnoofEplmnsplus1ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMaxnoofEplmnsplus1.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MaxnoofEplmnsplus1ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MaxnoofEplmnsplus1ValidationError{}

// Validate checks the field values on MaxnoofForbiddenTacs with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *MaxnoofForbiddenTacs) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MaxnoofForbiddenTacs with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MaxnoofForbiddenTacsMultiError, or nil if none found.
func (m *MaxnoofForbiddenTacs) ValidateAll() error {
	return m.validate(true)
}

func (m *MaxnoofForbiddenTacs) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 4096 {
		err := MaxnoofForbiddenTacsValidationError{
			field:  "Value",
			reason: "value must equal 4096",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MaxnoofForbiddenTacsMultiError(errors)
	}

	return nil
}

// MaxnoofForbiddenTacsMultiError is an error wrapping multiple validation
// errors returned by MaxnoofForbiddenTacs.ValidateAll() if the designated
// constraints aren't met.
type MaxnoofForbiddenTacsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MaxnoofForbiddenTacsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MaxnoofForbiddenTacsMultiError) AllErrors() []error { return m }

// MaxnoofForbiddenTacsValidationError is the validation error returned by
// MaxnoofForbiddenTacs.Validate if the designated constraints aren't met.
type MaxnoofForbiddenTacsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MaxnoofForbiddenTacsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MaxnoofForbiddenTacsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MaxnoofForbiddenTacsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MaxnoofForbiddenTacsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MaxnoofForbiddenTacsValidationError) ErrorName() string {
	return "MaxnoofForbiddenTacsValidationError"
}

// Error satisfies the builtin error interface
func (e MaxnoofForbiddenTacsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMaxnoofForbiddenTacs.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MaxnoofForbiddenTacsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MaxnoofForbiddenTacsValidationError{}

// Validate checks the field values on MaxnoofFreqforMdt with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *MaxnoofFreqforMdt) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MaxnoofFreqforMdt with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MaxnoofFreqforMdtMultiError, or nil if none found.
func (m *MaxnoofFreqforMdt) ValidateAll() error {
	return m.validate(true)
}

func (m *MaxnoofFreqforMdt) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 8 {
		err := MaxnoofFreqforMdtValidationError{
			field:  "Value",
			reason: "value must equal 8",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MaxnoofFreqforMdtMultiError(errors)
	}

	return nil
}

// MaxnoofFreqforMdtMultiError is an error wrapping multiple validation errors
// returned by MaxnoofFreqforMdt.ValidateAll() if the designated constraints
// aren't met.
type MaxnoofFreqforMdtMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MaxnoofFreqforMdtMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MaxnoofFreqforMdtMultiError) AllErrors() []error { return m }

// MaxnoofFreqforMdtValidationError is the validation error returned by
// MaxnoofFreqforMdt.Validate if the designated constraints aren't met.
type MaxnoofFreqforMdtValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MaxnoofFreqforMdtValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MaxnoofFreqforMdtValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MaxnoofFreqforMdtValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MaxnoofFreqforMdtValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MaxnoofFreqforMdtValidationError) ErrorName() string {
	return "MaxnoofFreqforMdtValidationError"
}

// Error satisfies the builtin error interface
func (e MaxnoofFreqforMdtValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMaxnoofFreqforMdt.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MaxnoofFreqforMdtValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MaxnoofFreqforMdtValidationError{}

// Validate checks the field values on MaxnoofMbsfneutra with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *MaxnoofMbsfneutra) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MaxnoofMbsfneutra with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MaxnoofMbsfneutraMultiError, or nil if none found.
func (m *MaxnoofMbsfneutra) ValidateAll() error {
	return m.validate(true)
}

func (m *MaxnoofMbsfneutra) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 8 {
		err := MaxnoofMbsfneutraValidationError{
			field:  "Value",
			reason: "value must equal 8",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MaxnoofMbsfneutraMultiError(errors)
	}

	return nil
}

// MaxnoofMbsfneutraMultiError is an error wrapping multiple validation errors
// returned by MaxnoofMbsfneutra.ValidateAll() if the designated constraints
// aren't met.
type MaxnoofMbsfneutraMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MaxnoofMbsfneutraMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MaxnoofMbsfneutraMultiError) AllErrors() []error { return m }

// MaxnoofMbsfneutraValidationError is the validation error returned by
// MaxnoofMbsfneutra.Validate if the designated constraints aren't met.
type MaxnoofMbsfneutraValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MaxnoofMbsfneutraValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MaxnoofMbsfneutraValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MaxnoofMbsfneutraValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MaxnoofMbsfneutraValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MaxnoofMbsfneutraValidationError) ErrorName() string {
	return "MaxnoofMbsfneutraValidationError"
}

// Error satisfies the builtin error interface
func (e MaxnoofMbsfneutraValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMaxnoofMbsfneutra.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MaxnoofMbsfneutraValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MaxnoofMbsfneutraValidationError{}

// Validate checks the field values on MaxnoofMdtplmns with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *MaxnoofMdtplmns) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MaxnoofMdtplmns with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MaxnoofMdtplmnsMultiError, or nil if none found.
func (m *MaxnoofMdtplmns) ValidateAll() error {
	return m.validate(true)
}

func (m *MaxnoofMdtplmns) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 16 {
		err := MaxnoofMdtplmnsValidationError{
			field:  "Value",
			reason: "value must equal 16",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MaxnoofMdtplmnsMultiError(errors)
	}

	return nil
}

// MaxnoofMdtplmnsMultiError is an error wrapping multiple validation errors
// returned by MaxnoofMdtplmns.ValidateAll() if the designated constraints
// aren't met.
type MaxnoofMdtplmnsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MaxnoofMdtplmnsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MaxnoofMdtplmnsMultiError) AllErrors() []error { return m }

// MaxnoofMdtplmnsValidationError is the validation error returned by
// MaxnoofMdtplmns.Validate if the designated constraints aren't met.
type MaxnoofMdtplmnsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MaxnoofMdtplmnsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MaxnoofMdtplmnsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MaxnoofMdtplmnsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MaxnoofMdtplmnsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MaxnoofMdtplmnsValidationError) ErrorName() string { return "MaxnoofMdtplmnsValidationError" }

// Error satisfies the builtin error interface
func (e MaxnoofMdtplmnsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMaxnoofMdtplmns.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MaxnoofMdtplmnsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MaxnoofMdtplmnsValidationError{}

// Validate checks the field values on MaxnoofMultiConnectivityMinusOne with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *MaxnoofMultiConnectivityMinusOne) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MaxnoofMultiConnectivityMinusOne with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// MaxnoofMultiConnectivityMinusOneMultiError, or nil if none found.
func (m *MaxnoofMultiConnectivityMinusOne) ValidateAll() error {
	return m.validate(true)
}

func (m *MaxnoofMultiConnectivityMinusOne) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 3 {
		err := MaxnoofMultiConnectivityMinusOneValidationError{
			field:  "Value",
			reason: "value must equal 3",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MaxnoofMultiConnectivityMinusOneMultiError(errors)
	}

	return nil
}

// MaxnoofMultiConnectivityMinusOneMultiError is an error wrapping multiple
// validation errors returned by
// MaxnoofMultiConnectivityMinusOne.ValidateAll() if the designated
// constraints aren't met.
type MaxnoofMultiConnectivityMinusOneMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MaxnoofMultiConnectivityMinusOneMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MaxnoofMultiConnectivityMinusOneMultiError) AllErrors() []error { return m }

// MaxnoofMultiConnectivityMinusOneValidationError is the validation error
// returned by MaxnoofMultiConnectivityMinusOne.Validate if the designated
// constraints aren't met.
type MaxnoofMultiConnectivityMinusOneValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MaxnoofMultiConnectivityMinusOneValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MaxnoofMultiConnectivityMinusOneValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MaxnoofMultiConnectivityMinusOneValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MaxnoofMultiConnectivityMinusOneValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MaxnoofMultiConnectivityMinusOneValidationError) ErrorName() string {
	return "MaxnoofMultiConnectivityMinusOneValidationError"
}

// Error satisfies the builtin error interface
func (e MaxnoofMultiConnectivityMinusOneValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMaxnoofMultiConnectivityMinusOne.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MaxnoofMultiConnectivityMinusOneValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MaxnoofMultiConnectivityMinusOneValidationError{}

// Validate checks the field values on MaxnoofNeighbours with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *MaxnoofNeighbours) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MaxnoofNeighbours with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MaxnoofNeighboursMultiError, or nil if none found.
func (m *MaxnoofNeighbours) ValidateAll() error {
	return m.validate(true)
}

func (m *MaxnoofNeighbours) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 1024 {
		err := MaxnoofNeighboursValidationError{
			field:  "Value",
			reason: "value must equal 1024",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MaxnoofNeighboursMultiError(errors)
	}

	return nil
}

// MaxnoofNeighboursMultiError is an error wrapping multiple validation errors
// returned by MaxnoofNeighbours.ValidateAll() if the designated constraints
// aren't met.
type MaxnoofNeighboursMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MaxnoofNeighboursMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MaxnoofNeighboursMultiError) AllErrors() []error { return m }

// MaxnoofNeighboursValidationError is the validation error returned by
// MaxnoofNeighbours.Validate if the designated constraints aren't met.
type MaxnoofNeighboursValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MaxnoofNeighboursValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MaxnoofNeighboursValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MaxnoofNeighboursValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MaxnoofNeighboursValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MaxnoofNeighboursValidationError) ErrorName() string {
	return "MaxnoofNeighboursValidationError"
}

// Error satisfies the builtin error interface
func (e MaxnoofNeighboursValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMaxnoofNeighbours.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MaxnoofNeighboursValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MaxnoofNeighboursValidationError{}

// Validate checks the field values on MaxnoofNeighPciforMdt with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *MaxnoofNeighPciforMdt) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MaxnoofNeighPciforMdt with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MaxnoofNeighPciforMdtMultiError, or nil if none found.
func (m *MaxnoofNeighPciforMdt) ValidateAll() error {
	return m.validate(true)
}

func (m *MaxnoofNeighPciforMdt) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 32 {
		err := MaxnoofNeighPciforMdtValidationError{
			field:  "Value",
			reason: "value must equal 32",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MaxnoofNeighPciforMdtMultiError(errors)
	}

	return nil
}

// MaxnoofNeighPciforMdtMultiError is an error wrapping multiple validation
// errors returned by MaxnoofNeighPciforMdt.ValidateAll() if the designated
// constraints aren't met.
type MaxnoofNeighPciforMdtMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MaxnoofNeighPciforMdtMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MaxnoofNeighPciforMdtMultiError) AllErrors() []error { return m }

// MaxnoofNeighPciforMdtValidationError is the validation error returned by
// MaxnoofNeighPciforMdt.Validate if the designated constraints aren't met.
type MaxnoofNeighPciforMdtValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MaxnoofNeighPciforMdtValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MaxnoofNeighPciforMdtValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MaxnoofNeighPciforMdtValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MaxnoofNeighPciforMdtValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MaxnoofNeighPciforMdtValidationError) ErrorName() string {
	return "MaxnoofNeighPciforMdtValidationError"
}

// Error satisfies the builtin error interface
func (e MaxnoofNeighPciforMdtValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMaxnoofNeighPciforMdt.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MaxnoofNeighPciforMdtValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MaxnoofNeighPciforMdtValidationError{}

// Validate checks the field values on MaxnoofNids with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *MaxnoofNids) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MaxnoofNids with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in MaxnoofNidsMultiError, or
// nil if none found.
func (m *MaxnoofNids) ValidateAll() error {
	return m.validate(true)
}

func (m *MaxnoofNids) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 12 {
		err := MaxnoofNidsValidationError{
			field:  "Value",
			reason: "value must equal 12",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MaxnoofNidsMultiError(errors)
	}

	return nil
}

// MaxnoofNidsMultiError is an error wrapping multiple validation errors
// returned by MaxnoofNids.ValidateAll() if the designated constraints aren't met.
type MaxnoofNidsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MaxnoofNidsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MaxnoofNidsMultiError) AllErrors() []error { return m }

// MaxnoofNidsValidationError is the validation error returned by
// MaxnoofNids.Validate if the designated constraints aren't met.
type MaxnoofNidsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MaxnoofNidsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MaxnoofNidsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MaxnoofNidsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MaxnoofNidsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MaxnoofNidsValidationError) ErrorName() string { return "MaxnoofNidsValidationError" }

// Error satisfies the builtin error interface
func (e MaxnoofNidsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMaxnoofNids.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MaxnoofNidsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MaxnoofNidsValidationError{}

// Validate checks the field values on MaxnoofNrcellBands with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *MaxnoofNrcellBands) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MaxnoofNrcellBands with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MaxnoofNrcellBandsMultiError, or nil if none found.
func (m *MaxnoofNrcellBands) ValidateAll() error {
	return m.validate(true)
}

func (m *MaxnoofNrcellBands) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 32 {
		err := MaxnoofNrcellBandsValidationError{
			field:  "Value",
			reason: "value must equal 32",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MaxnoofNrcellBandsMultiError(errors)
	}

	return nil
}

// MaxnoofNrcellBandsMultiError is an error wrapping multiple validation errors
// returned by MaxnoofNrcellBands.ValidateAll() if the designated constraints
// aren't met.
type MaxnoofNrcellBandsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MaxnoofNrcellBandsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MaxnoofNrcellBandsMultiError) AllErrors() []error { return m }

// MaxnoofNrcellBandsValidationError is the validation error returned by
// MaxnoofNrcellBands.Validate if the designated constraints aren't met.
type MaxnoofNrcellBandsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MaxnoofNrcellBandsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MaxnoofNrcellBandsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MaxnoofNrcellBandsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MaxnoofNrcellBandsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MaxnoofNrcellBandsValidationError) ErrorName() string {
	return "MaxnoofNrcellBandsValidationError"
}

// Error satisfies the builtin error interface
func (e MaxnoofNrcellBandsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMaxnoofNrcellBands.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MaxnoofNrcellBandsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MaxnoofNrcellBandsValidationError{}

// Validate checks the field values on MaxnoofPlmns with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *MaxnoofPlmns) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MaxnoofPlmns with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in MaxnoofPlmnsMultiError, or
// nil if none found.
func (m *MaxnoofPlmns) ValidateAll() error {
	return m.validate(true)
}

func (m *MaxnoofPlmns) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 16 {
		err := MaxnoofPlmnsValidationError{
			field:  "Value",
			reason: "value must equal 16",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MaxnoofPlmnsMultiError(errors)
	}

	return nil
}

// MaxnoofPlmnsMultiError is an error wrapping multiple validation errors
// returned by MaxnoofPlmns.ValidateAll() if the designated constraints aren't met.
type MaxnoofPlmnsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MaxnoofPlmnsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MaxnoofPlmnsMultiError) AllErrors() []error { return m }

// MaxnoofPlmnsValidationError is the validation error returned by
// MaxnoofPlmns.Validate if the designated constraints aren't met.
type MaxnoofPlmnsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MaxnoofPlmnsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MaxnoofPlmnsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MaxnoofPlmnsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MaxnoofPlmnsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MaxnoofPlmnsValidationError) ErrorName() string { return "MaxnoofPlmnsValidationError" }

// Error satisfies the builtin error interface
func (e MaxnoofPlmnsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMaxnoofPlmns.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MaxnoofPlmnsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MaxnoofPlmnsValidationError{}

// Validate checks the field values on MaxnoofPdusessions with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *MaxnoofPdusessions) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MaxnoofPdusessions with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MaxnoofPdusessionsMultiError, or nil if none found.
func (m *MaxnoofPdusessions) ValidateAll() error {
	return m.validate(true)
}

func (m *MaxnoofPdusessions) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 256 {
		err := MaxnoofPdusessionsValidationError{
			field:  "Value",
			reason: "value must equal 256",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MaxnoofPdusessionsMultiError(errors)
	}

	return nil
}

// MaxnoofPdusessionsMultiError is an error wrapping multiple validation errors
// returned by MaxnoofPdusessions.ValidateAll() if the designated constraints
// aren't met.
type MaxnoofPdusessionsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MaxnoofPdusessionsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MaxnoofPdusessionsMultiError) AllErrors() []error { return m }

// MaxnoofPdusessionsValidationError is the validation error returned by
// MaxnoofPdusessions.Validate if the designated constraints aren't met.
type MaxnoofPdusessionsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MaxnoofPdusessionsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MaxnoofPdusessionsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MaxnoofPdusessionsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MaxnoofPdusessionsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MaxnoofPdusessionsValidationError) ErrorName() string {
	return "MaxnoofPdusessionsValidationError"
}

// Error satisfies the builtin error interface
func (e MaxnoofPdusessionsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMaxnoofPdusessions.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MaxnoofPdusessionsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MaxnoofPdusessionsValidationError{}

// Validate checks the field values on MaxnoofProtectedResourcePatterns with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *MaxnoofProtectedResourcePatterns) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MaxnoofProtectedResourcePatterns with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// MaxnoofProtectedResourcePatternsMultiError, or nil if none found.
func (m *MaxnoofProtectedResourcePatterns) ValidateAll() error {
	return m.validate(true)
}

func (m *MaxnoofProtectedResourcePatterns) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 16 {
		err := MaxnoofProtectedResourcePatternsValidationError{
			field:  "Value",
			reason: "value must equal 16",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MaxnoofProtectedResourcePatternsMultiError(errors)
	}

	return nil
}

// MaxnoofProtectedResourcePatternsMultiError is an error wrapping multiple
// validation errors returned by
// MaxnoofProtectedResourcePatterns.ValidateAll() if the designated
// constraints aren't met.
type MaxnoofProtectedResourcePatternsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MaxnoofProtectedResourcePatternsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MaxnoofProtectedResourcePatternsMultiError) AllErrors() []error { return m }

// MaxnoofProtectedResourcePatternsValidationError is the validation error
// returned by MaxnoofProtectedResourcePatterns.Validate if the designated
// constraints aren't met.
type MaxnoofProtectedResourcePatternsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MaxnoofProtectedResourcePatternsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MaxnoofProtectedResourcePatternsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MaxnoofProtectedResourcePatternsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MaxnoofProtectedResourcePatternsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MaxnoofProtectedResourcePatternsValidationError) ErrorName() string {
	return "MaxnoofProtectedResourcePatternsValidationError"
}

// Error satisfies the builtin error interface
func (e MaxnoofProtectedResourcePatternsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMaxnoofProtectedResourcePatterns.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MaxnoofProtectedResourcePatternsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MaxnoofProtectedResourcePatternsValidationError{}

// Validate checks the field values on MaxnoofQoSflows with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *MaxnoofQoSflows) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MaxnoofQoSflows with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MaxnoofQoSflowsMultiError, or nil if none found.
func (m *MaxnoofQoSflows) ValidateAll() error {
	return m.validate(true)
}

func (m *MaxnoofQoSflows) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 64 {
		err := MaxnoofQoSflowsValidationError{
			field:  "Value",
			reason: "value must equal 64",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MaxnoofQoSflowsMultiError(errors)
	}

	return nil
}

// MaxnoofQoSflowsMultiError is an error wrapping multiple validation errors
// returned by MaxnoofQoSflows.ValidateAll() if the designated constraints
// aren't met.
type MaxnoofQoSflowsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MaxnoofQoSflowsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MaxnoofQoSflowsMultiError) AllErrors() []error { return m }

// MaxnoofQoSflowsValidationError is the validation error returned by
// MaxnoofQoSflows.Validate if the designated constraints aren't met.
type MaxnoofQoSflowsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MaxnoofQoSflowsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MaxnoofQoSflowsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MaxnoofQoSflowsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MaxnoofQoSflowsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MaxnoofQoSflowsValidationError) ErrorName() string { return "MaxnoofQoSflowsValidationError" }

// Error satisfies the builtin error interface
func (e MaxnoofQoSflowsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMaxnoofQoSflows.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MaxnoofQoSflowsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MaxnoofQoSflowsValidationError{}

// Validate checks the field values on MaxnoofQoSparaSets with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *MaxnoofQoSparaSets) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MaxnoofQoSparaSets with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MaxnoofQoSparaSetsMultiError, or nil if none found.
func (m *MaxnoofQoSparaSets) ValidateAll() error {
	return m.validate(true)
}

func (m *MaxnoofQoSparaSets) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 8 {
		err := MaxnoofQoSparaSetsValidationError{
			field:  "Value",
			reason: "value must equal 8",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MaxnoofQoSparaSetsMultiError(errors)
	}

	return nil
}

// MaxnoofQoSparaSetsMultiError is an error wrapping multiple validation errors
// returned by MaxnoofQoSparaSets.ValidateAll() if the designated constraints
// aren't met.
type MaxnoofQoSparaSetsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MaxnoofQoSparaSetsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MaxnoofQoSparaSetsMultiError) AllErrors() []error { return m }

// MaxnoofQoSparaSetsValidationError is the validation error returned by
// MaxnoofQoSparaSets.Validate if the designated constraints aren't met.
type MaxnoofQoSparaSetsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MaxnoofQoSparaSetsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MaxnoofQoSparaSetsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MaxnoofQoSparaSetsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MaxnoofQoSparaSetsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MaxnoofQoSparaSetsValidationError) ErrorName() string {
	return "MaxnoofQoSparaSetsValidationError"
}

// Error satisfies the builtin error interface
func (e MaxnoofQoSparaSetsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMaxnoofQoSparaSets.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MaxnoofQoSparaSetsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MaxnoofQoSparaSetsValidationError{}

// Validate checks the field values on MaxnoofRanareaCodes with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *MaxnoofRanareaCodes) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MaxnoofRanareaCodes with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MaxnoofRanareaCodesMultiError, or nil if none found.
func (m *MaxnoofRanareaCodes) ValidateAll() error {
	return m.validate(true)
}

func (m *MaxnoofRanareaCodes) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 32 {
		err := MaxnoofRanareaCodesValidationError{
			field:  "Value",
			reason: "value must equal 32",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MaxnoofRanareaCodesMultiError(errors)
	}

	return nil
}

// MaxnoofRanareaCodesMultiError is an error wrapping multiple validation
// errors returned by MaxnoofRanareaCodes.ValidateAll() if the designated
// constraints aren't met.
type MaxnoofRanareaCodesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MaxnoofRanareaCodesMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MaxnoofRanareaCodesMultiError) AllErrors() []error { return m }

// MaxnoofRanareaCodesValidationError is the validation error returned by
// MaxnoofRanareaCodes.Validate if the designated constraints aren't met.
type MaxnoofRanareaCodesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MaxnoofRanareaCodesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MaxnoofRanareaCodesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MaxnoofRanareaCodesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MaxnoofRanareaCodesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MaxnoofRanareaCodesValidationError) ErrorName() string {
	return "MaxnoofRanareaCodesValidationError"
}

// Error satisfies the builtin error interface
func (e MaxnoofRanareaCodesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMaxnoofRanareaCodes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MaxnoofRanareaCodesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MaxnoofRanareaCodesValidationError{}

// Validate checks the field values on MaxnoofRanareasinRna with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *MaxnoofRanareasinRna) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MaxnoofRanareasinRna with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MaxnoofRanareasinRnaMultiError, or nil if none found.
func (m *MaxnoofRanareasinRna) ValidateAll() error {
	return m.validate(true)
}

func (m *MaxnoofRanareasinRna) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 16 {
		err := MaxnoofRanareasinRnaValidationError{
			field:  "Value",
			reason: "value must equal 16",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MaxnoofRanareasinRnaMultiError(errors)
	}

	return nil
}

// MaxnoofRanareasinRnaMultiError is an error wrapping multiple validation
// errors returned by MaxnoofRanareasinRna.ValidateAll() if the designated
// constraints aren't met.
type MaxnoofRanareasinRnaMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MaxnoofRanareasinRnaMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MaxnoofRanareasinRnaMultiError) AllErrors() []error { return m }

// MaxnoofRanareasinRnaValidationError is the validation error returned by
// MaxnoofRanareasinRna.Validate if the designated constraints aren't met.
type MaxnoofRanareasinRnaValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MaxnoofRanareasinRnaValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MaxnoofRanareasinRnaValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MaxnoofRanareasinRnaValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MaxnoofRanareasinRnaValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MaxnoofRanareasinRnaValidationError) ErrorName() string {
	return "MaxnoofRanareasinRnaValidationError"
}

// Error satisfies the builtin error interface
func (e MaxnoofRanareasinRnaValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMaxnoofRanareasinRna.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MaxnoofRanareasinRnaValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MaxnoofRanareasinRnaValidationError{}

// Validate checks the field values on MaxnoofRannodesinAoI with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *MaxnoofRannodesinAoI) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MaxnoofRannodesinAoI with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MaxnoofRannodesinAoIMultiError, or nil if none found.
func (m *MaxnoofRannodesinAoI) ValidateAll() error {
	return m.validate(true)
}

func (m *MaxnoofRannodesinAoI) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 64 {
		err := MaxnoofRannodesinAoIValidationError{
			field:  "Value",
			reason: "value must equal 64",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MaxnoofRannodesinAoIMultiError(errors)
	}

	return nil
}

// MaxnoofRannodesinAoIMultiError is an error wrapping multiple validation
// errors returned by MaxnoofRannodesinAoI.ValidateAll() if the designated
// constraints aren't met.
type MaxnoofRannodesinAoIMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MaxnoofRannodesinAoIMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MaxnoofRannodesinAoIMultiError) AllErrors() []error { return m }

// MaxnoofRannodesinAoIValidationError is the validation error returned by
// MaxnoofRannodesinAoI.Validate if the designated constraints aren't met.
type MaxnoofRannodesinAoIValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MaxnoofRannodesinAoIValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MaxnoofRannodesinAoIValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MaxnoofRannodesinAoIValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MaxnoofRannodesinAoIValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MaxnoofRannodesinAoIValidationError) ErrorName() string {
	return "MaxnoofRannodesinAoIValidationError"
}

// Error satisfies the builtin error interface
func (e MaxnoofRannodesinAoIValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMaxnoofRannodesinAoI.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MaxnoofRannodesinAoIValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MaxnoofRannodesinAoIValidationError{}

// Validate checks the field values on MaxnoofScellGroups with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *MaxnoofScellGroups) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MaxnoofScellGroups with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MaxnoofScellGroupsMultiError, or nil if none found.
func (m *MaxnoofScellGroups) ValidateAll() error {
	return m.validate(true)
}

func (m *MaxnoofScellGroups) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 3 {
		err := MaxnoofScellGroupsValidationError{
			field:  "Value",
			reason: "value must equal 3",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MaxnoofScellGroupsMultiError(errors)
	}

	return nil
}

// MaxnoofScellGroupsMultiError is an error wrapping multiple validation errors
// returned by MaxnoofScellGroups.ValidateAll() if the designated constraints
// aren't met.
type MaxnoofScellGroupsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MaxnoofScellGroupsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MaxnoofScellGroupsMultiError) AllErrors() []error { return m }

// MaxnoofScellGroupsValidationError is the validation error returned by
// MaxnoofScellGroups.Validate if the designated constraints aren't met.
type MaxnoofScellGroupsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MaxnoofScellGroupsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MaxnoofScellGroupsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MaxnoofScellGroupsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MaxnoofScellGroupsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MaxnoofScellGroupsValidationError) ErrorName() string {
	return "MaxnoofScellGroupsValidationError"
}

// Error satisfies the builtin error interface
func (e MaxnoofScellGroupsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMaxnoofScellGroups.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MaxnoofScellGroupsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MaxnoofScellGroupsValidationError{}

// Validate checks the field values on MaxnoofScellGroupsplus1 with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *MaxnoofScellGroupsplus1) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MaxnoofScellGroupsplus1 with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MaxnoofScellGroupsplus1MultiError, or nil if none found.
func (m *MaxnoofScellGroupsplus1) ValidateAll() error {
	return m.validate(true)
}

func (m *MaxnoofScellGroupsplus1) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 4 {
		err := MaxnoofScellGroupsplus1ValidationError{
			field:  "Value",
			reason: "value must equal 4",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MaxnoofScellGroupsplus1MultiError(errors)
	}

	return nil
}

// MaxnoofScellGroupsplus1MultiError is an error wrapping multiple validation
// errors returned by MaxnoofScellGroupsplus1.ValidateAll() if the designated
// constraints aren't met.
type MaxnoofScellGroupsplus1MultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MaxnoofScellGroupsplus1MultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MaxnoofScellGroupsplus1MultiError) AllErrors() []error { return m }

// MaxnoofScellGroupsplus1ValidationError is the validation error returned by
// MaxnoofScellGroupsplus1.Validate if the designated constraints aren't met.
type MaxnoofScellGroupsplus1ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MaxnoofScellGroupsplus1ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MaxnoofScellGroupsplus1ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MaxnoofScellGroupsplus1ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MaxnoofScellGroupsplus1ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MaxnoofScellGroupsplus1ValidationError) ErrorName() string {
	return "MaxnoofScellGroupsplus1ValidationError"
}

// Error satisfies the builtin error interface
func (e MaxnoofScellGroupsplus1ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMaxnoofScellGroupsplus1.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MaxnoofScellGroupsplus1ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MaxnoofScellGroupsplus1ValidationError{}

// Validate checks the field values on MaxnoofSensorName with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *MaxnoofSensorName) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MaxnoofSensorName with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MaxnoofSensorNameMultiError, or nil if none found.
func (m *MaxnoofSensorName) ValidateAll() error {
	return m.validate(true)
}

func (m *MaxnoofSensorName) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 3 {
		err := MaxnoofSensorNameValidationError{
			field:  "Value",
			reason: "value must equal 3",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MaxnoofSensorNameMultiError(errors)
	}

	return nil
}

// MaxnoofSensorNameMultiError is an error wrapping multiple validation errors
// returned by MaxnoofSensorName.ValidateAll() if the designated constraints
// aren't met.
type MaxnoofSensorNameMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MaxnoofSensorNameMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MaxnoofSensorNameMultiError) AllErrors() []error { return m }

// MaxnoofSensorNameValidationError is the validation error returned by
// MaxnoofSensorName.Validate if the designated constraints aren't met.
type MaxnoofSensorNameValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MaxnoofSensorNameValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MaxnoofSensorNameValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MaxnoofSensorNameValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MaxnoofSensorNameValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MaxnoofSensorNameValidationError) ErrorName() string {
	return "MaxnoofSensorNameValidationError"
}

// Error satisfies the builtin error interface
func (e MaxnoofSensorNameValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMaxnoofSensorName.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MaxnoofSensorNameValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MaxnoofSensorNameValidationError{}

// Validate checks the field values on MaxnoofSliceItems with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *MaxnoofSliceItems) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MaxnoofSliceItems with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MaxnoofSliceItemsMultiError, or nil if none found.
func (m *MaxnoofSliceItems) ValidateAll() error {
	return m.validate(true)
}

func (m *MaxnoofSliceItems) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 1024 {
		err := MaxnoofSliceItemsValidationError{
			field:  "Value",
			reason: "value must equal 1024",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MaxnoofSliceItemsMultiError(errors)
	}

	return nil
}

// MaxnoofSliceItemsMultiError is an error wrapping multiple validation errors
// returned by MaxnoofSliceItems.ValidateAll() if the designated constraints
// aren't met.
type MaxnoofSliceItemsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MaxnoofSliceItemsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MaxnoofSliceItemsMultiError) AllErrors() []error { return m }

// MaxnoofSliceItemsValidationError is the validation error returned by
// MaxnoofSliceItems.Validate if the designated constraints aren't met.
type MaxnoofSliceItemsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MaxnoofSliceItemsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MaxnoofSliceItemsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MaxnoofSliceItemsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MaxnoofSliceItemsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MaxnoofSliceItemsValidationError) ErrorName() string {
	return "MaxnoofSliceItemsValidationError"
}

// Error satisfies the builtin error interface
func (e MaxnoofSliceItemsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMaxnoofSliceItems.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MaxnoofSliceItemsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MaxnoofSliceItemsValidationError{}

// Validate checks the field values on MaxnoofSnpnids with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *MaxnoofSnpnids) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MaxnoofSnpnids with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in MaxnoofSnpnidsMultiError,
// or nil if none found.
func (m *MaxnoofSnpnids) ValidateAll() error {
	return m.validate(true)
}

func (m *MaxnoofSnpnids) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 12 {
		err := MaxnoofSnpnidsValidationError{
			field:  "Value",
			reason: "value must equal 12",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MaxnoofSnpnidsMultiError(errors)
	}

	return nil
}

// MaxnoofSnpnidsMultiError is an error wrapping multiple validation errors
// returned by MaxnoofSnpnids.ValidateAll() if the designated constraints
// aren't met.
type MaxnoofSnpnidsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MaxnoofSnpnidsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MaxnoofSnpnidsMultiError) AllErrors() []error { return m }

// MaxnoofSnpnidsValidationError is the validation error returned by
// MaxnoofSnpnids.Validate if the designated constraints aren't met.
type MaxnoofSnpnidsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MaxnoofSnpnidsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MaxnoofSnpnidsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MaxnoofSnpnidsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MaxnoofSnpnidsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MaxnoofSnpnidsValidationError) ErrorName() string { return "MaxnoofSnpnidsValidationError" }

// Error satisfies the builtin error interface
func (e MaxnoofSnpnidsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMaxnoofSnpnids.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MaxnoofSnpnidsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MaxnoofSnpnidsValidationError{}

// Validate checks the field values on MaxnoofsupportedPlmns with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *MaxnoofsupportedPlmns) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MaxnoofsupportedPlmns with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MaxnoofsupportedPlmnsMultiError, or nil if none found.
func (m *MaxnoofsupportedPlmns) ValidateAll() error {
	return m.validate(true)
}

func (m *MaxnoofsupportedPlmns) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 12 {
		err := MaxnoofsupportedPlmnsValidationError{
			field:  "Value",
			reason: "value must equal 12",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MaxnoofsupportedPlmnsMultiError(errors)
	}

	return nil
}

// MaxnoofsupportedPlmnsMultiError is an error wrapping multiple validation
// errors returned by MaxnoofsupportedPlmns.ValidateAll() if the designated
// constraints aren't met.
type MaxnoofsupportedPlmnsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MaxnoofsupportedPlmnsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MaxnoofsupportedPlmnsMultiError) AllErrors() []error { return m }

// MaxnoofsupportedPlmnsValidationError is the validation error returned by
// MaxnoofsupportedPlmns.Validate if the designated constraints aren't met.
type MaxnoofsupportedPlmnsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MaxnoofsupportedPlmnsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MaxnoofsupportedPlmnsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MaxnoofsupportedPlmnsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MaxnoofsupportedPlmnsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MaxnoofsupportedPlmnsValidationError) ErrorName() string {
	return "MaxnoofsupportedPlmnsValidationError"
}

// Error satisfies the builtin error interface
func (e MaxnoofsupportedPlmnsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMaxnoofsupportedPlmns.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MaxnoofsupportedPlmnsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MaxnoofsupportedPlmnsValidationError{}

// Validate checks the field values on MaxnoofsupportedTacs with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *MaxnoofsupportedTacs) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MaxnoofsupportedTacs with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MaxnoofsupportedTacsMultiError, or nil if none found.
func (m *MaxnoofsupportedTacs) ValidateAll() error {
	return m.validate(true)
}

func (m *MaxnoofsupportedTacs) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 256 {
		err := MaxnoofsupportedTacsValidationError{
			field:  "Value",
			reason: "value must equal 256",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MaxnoofsupportedTacsMultiError(errors)
	}

	return nil
}

// MaxnoofsupportedTacsMultiError is an error wrapping multiple validation
// errors returned by MaxnoofsupportedTacs.ValidateAll() if the designated
// constraints aren't met.
type MaxnoofsupportedTacsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MaxnoofsupportedTacsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MaxnoofsupportedTacsMultiError) AllErrors() []error { return m }

// MaxnoofsupportedTacsValidationError is the validation error returned by
// MaxnoofsupportedTacs.Validate if the designated constraints aren't met.
type MaxnoofsupportedTacsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MaxnoofsupportedTacsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MaxnoofsupportedTacsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MaxnoofsupportedTacsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MaxnoofsupportedTacsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MaxnoofsupportedTacsValidationError) ErrorName() string {
	return "MaxnoofsupportedTacsValidationError"
}

// Error satisfies the builtin error interface
func (e MaxnoofsupportedTacsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMaxnoofsupportedTacs.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MaxnoofsupportedTacsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MaxnoofsupportedTacsValidationError{}

// Validate checks the field values on MaxnoofTaforMdt with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *MaxnoofTaforMdt) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MaxnoofTaforMdt with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MaxnoofTaforMdtMultiError, or nil if none found.
func (m *MaxnoofTaforMdt) ValidateAll() error {
	return m.validate(true)
}

func (m *MaxnoofTaforMdt) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 8 {
		err := MaxnoofTaforMdtValidationError{
			field:  "Value",
			reason: "value must equal 8",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MaxnoofTaforMdtMultiError(errors)
	}

	return nil
}

// MaxnoofTaforMdtMultiError is an error wrapping multiple validation errors
// returned by MaxnoofTaforMdt.ValidateAll() if the designated constraints
// aren't met.
type MaxnoofTaforMdtMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MaxnoofTaforMdtMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MaxnoofTaforMdtMultiError) AllErrors() []error { return m }

// MaxnoofTaforMdtValidationError is the validation error returned by
// MaxnoofTaforMdt.Validate if the designated constraints aren't met.
type MaxnoofTaforMdtValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MaxnoofTaforMdtValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MaxnoofTaforMdtValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MaxnoofTaforMdtValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MaxnoofTaforMdtValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MaxnoofTaforMdtValidationError) ErrorName() string { return "MaxnoofTaforMdtValidationError" }

// Error satisfies the builtin error interface
func (e MaxnoofTaforMdtValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMaxnoofTaforMdt.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MaxnoofTaforMdtValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MaxnoofTaforMdtValidationError{}

// Validate checks the field values on MaxnoofTai with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *MaxnoofTai) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MaxnoofTai with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in MaxnoofTaiMultiError, or
// nil if none found.
func (m *MaxnoofTai) ValidateAll() error {
	return m.validate(true)
}

func (m *MaxnoofTai) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 16 {
		err := MaxnoofTaiValidationError{
			field:  "Value",
			reason: "value must equal 16",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MaxnoofTaiMultiError(errors)
	}

	return nil
}

// MaxnoofTaiMultiError is an error wrapping multiple validation errors
// returned by MaxnoofTai.ValidateAll() if the designated constraints aren't met.
type MaxnoofTaiMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MaxnoofTaiMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MaxnoofTaiMultiError) AllErrors() []error { return m }

// MaxnoofTaiValidationError is the validation error returned by
// MaxnoofTai.Validate if the designated constraints aren't met.
type MaxnoofTaiValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MaxnoofTaiValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MaxnoofTaiValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MaxnoofTaiValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MaxnoofTaiValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MaxnoofTaiValidationError) ErrorName() string { return "MaxnoofTaiValidationError" }

// Error satisfies the builtin error interface
func (e MaxnoofTaiValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMaxnoofTai.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MaxnoofTaiValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MaxnoofTaiValidationError{}

// Validate checks the field values on MaxnoofTaisinAoI with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *MaxnoofTaisinAoI) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MaxnoofTaisinAoI with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MaxnoofTaisinAoIMultiError, or nil if none found.
func (m *MaxnoofTaisinAoI) ValidateAll() error {
	return m.validate(true)
}

func (m *MaxnoofTaisinAoI) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 16 {
		err := MaxnoofTaisinAoIValidationError{
			field:  "Value",
			reason: "value must equal 16",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MaxnoofTaisinAoIMultiError(errors)
	}

	return nil
}

// MaxnoofTaisinAoIMultiError is an error wrapping multiple validation errors
// returned by MaxnoofTaisinAoI.ValidateAll() if the designated constraints
// aren't met.
type MaxnoofTaisinAoIMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MaxnoofTaisinAoIMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MaxnoofTaisinAoIMultiError) AllErrors() []error { return m }

// MaxnoofTaisinAoIValidationError is the validation error returned by
// MaxnoofTaisinAoI.Validate if the designated constraints aren't met.
type MaxnoofTaisinAoIValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MaxnoofTaisinAoIValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MaxnoofTaisinAoIValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MaxnoofTaisinAoIValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MaxnoofTaisinAoIValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MaxnoofTaisinAoIValidationError) ErrorName() string { return "MaxnoofTaisinAoIValidationError" }

// Error satisfies the builtin error interface
func (e MaxnoofTaisinAoIValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMaxnoofTaisinAoI.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MaxnoofTaisinAoIValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MaxnoofTaisinAoIValidationError{}

// Validate checks the field values on Maxnooftimeperiods with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *Maxnooftimeperiods) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Maxnooftimeperiods with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MaxnooftimeperiodsMultiError, or nil if none found.
func (m *Maxnooftimeperiods) ValidateAll() error {
	return m.validate(true)
}

func (m *Maxnooftimeperiods) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 2 {
		err := MaxnooftimeperiodsValidationError{
			field:  "Value",
			reason: "value must equal 2",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MaxnooftimeperiodsMultiError(errors)
	}

	return nil
}

// MaxnooftimeperiodsMultiError is an error wrapping multiple validation errors
// returned by Maxnooftimeperiods.ValidateAll() if the designated constraints
// aren't met.
type MaxnooftimeperiodsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MaxnooftimeperiodsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MaxnooftimeperiodsMultiError) AllErrors() []error { return m }

// MaxnooftimeperiodsValidationError is the validation error returned by
// Maxnooftimeperiods.Validate if the designated constraints aren't met.
type MaxnooftimeperiodsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MaxnooftimeperiodsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MaxnooftimeperiodsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MaxnooftimeperiodsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MaxnooftimeperiodsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MaxnooftimeperiodsValidationError) ErrorName() string {
	return "MaxnooftimeperiodsValidationError"
}

// Error satisfies the builtin error interface
func (e MaxnooftimeperiodsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMaxnooftimeperiods.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MaxnooftimeperiodsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MaxnooftimeperiodsValidationError{}

// Validate checks the field values on MaxnoofTnlassociations with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *MaxnoofTnlassociations) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MaxnoofTnlassociations with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MaxnoofTnlassociationsMultiError, or nil if none found.
func (m *MaxnoofTnlassociations) ValidateAll() error {
	return m.validate(true)
}

func (m *MaxnoofTnlassociations) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 32 {
		err := MaxnoofTnlassociationsValidationError{
			field:  "Value",
			reason: "value must equal 32",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MaxnoofTnlassociationsMultiError(errors)
	}

	return nil
}

// MaxnoofTnlassociationsMultiError is an error wrapping multiple validation
// errors returned by MaxnoofTnlassociations.ValidateAll() if the designated
// constraints aren't met.
type MaxnoofTnlassociationsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MaxnoofTnlassociationsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MaxnoofTnlassociationsMultiError) AllErrors() []error { return m }

// MaxnoofTnlassociationsValidationError is the validation error returned by
// MaxnoofTnlassociations.Validate if the designated constraints aren't met.
type MaxnoofTnlassociationsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MaxnoofTnlassociationsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MaxnoofTnlassociationsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MaxnoofTnlassociationsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MaxnoofTnlassociationsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MaxnoofTnlassociationsValidationError) ErrorName() string {
	return "MaxnoofTnlassociationsValidationError"
}

// Error satisfies the builtin error interface
func (e MaxnoofTnlassociationsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMaxnoofTnlassociations.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MaxnoofTnlassociationsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MaxnoofTnlassociationsValidationError{}

// Validate checks the field values on MaxnoofUecontexts with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *MaxnoofUecontexts) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MaxnoofUecontexts with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MaxnoofUecontextsMultiError, or nil if none found.
func (m *MaxnoofUecontexts) ValidateAll() error {
	return m.validate(true)
}

func (m *MaxnoofUecontexts) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 8192 {
		err := MaxnoofUecontextsValidationError{
			field:  "Value",
			reason: "value must equal 8192",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MaxnoofUecontextsMultiError(errors)
	}

	return nil
}

// MaxnoofUecontextsMultiError is an error wrapping multiple validation errors
// returned by MaxnoofUecontexts.ValidateAll() if the designated constraints
// aren't met.
type MaxnoofUecontextsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MaxnoofUecontextsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MaxnoofUecontextsMultiError) AllErrors() []error { return m }

// MaxnoofUecontextsValidationError is the validation error returned by
// MaxnoofUecontexts.Validate if the designated constraints aren't met.
type MaxnoofUecontextsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MaxnoofUecontextsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MaxnoofUecontextsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MaxnoofUecontextsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MaxnoofUecontextsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MaxnoofUecontextsValidationError) ErrorName() string {
	return "MaxnoofUecontextsValidationError"
}

// Error satisfies the builtin error interface
func (e MaxnoofUecontextsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMaxnoofUecontexts.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MaxnoofUecontextsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MaxnoofUecontextsValidationError{}

// Validate checks the field values on MaxNrarfcn with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *MaxNrarfcn) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MaxNrarfcn with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in MaxNrarfcnMultiError, or
// nil if none found.
func (m *MaxNrarfcn) ValidateAll() error {
	return m.validate(true)
}

func (m *MaxNrarfcn) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 3279165 {
		err := MaxNrarfcnValidationError{
			field:  "Value",
			reason: "value must equal 3279165",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MaxNrarfcnMultiError(errors)
	}

	return nil
}

// MaxNrarfcnMultiError is an error wrapping multiple validation errors
// returned by MaxNrarfcn.ValidateAll() if the designated constraints aren't met.
type MaxNrarfcnMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MaxNrarfcnMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MaxNrarfcnMultiError) AllErrors() []error { return m }

// MaxNrarfcnValidationError is the validation error returned by
// MaxNrarfcn.Validate if the designated constraints aren't met.
type MaxNrarfcnValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MaxNrarfcnValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MaxNrarfcnValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MaxNrarfcnValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MaxNrarfcnValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MaxNrarfcnValidationError) ErrorName() string { return "MaxNrarfcnValidationError" }

// Error satisfies the builtin error interface
func (e MaxNrarfcnValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMaxNrarfcn.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MaxNrarfcnValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MaxNrarfcnValidationError{}

// Validate checks the field values on MaxNrOfErrors with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *MaxNrOfErrors) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MaxNrOfErrors with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in MaxNrOfErrorsMultiError, or
// nil if none found.
func (m *MaxNrOfErrors) ValidateAll() error {
	return m.validate(true)
}

func (m *MaxNrOfErrors) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 256 {
		err := MaxNrOfErrorsValidationError{
			field:  "Value",
			reason: "value must equal 256",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MaxNrOfErrorsMultiError(errors)
	}

	return nil
}

// MaxNrOfErrorsMultiError is an error wrapping multiple validation errors
// returned by MaxNrOfErrors.ValidateAll() if the designated constraints
// aren't met.
type MaxNrOfErrorsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MaxNrOfErrorsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MaxNrOfErrorsMultiError) AllErrors() []error { return m }

// MaxNrOfErrorsValidationError is the validation error returned by
// MaxNrOfErrors.Validate if the designated constraints aren't met.
type MaxNrOfErrorsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MaxNrOfErrorsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MaxNrOfErrorsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MaxNrOfErrorsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MaxNrOfErrorsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MaxNrOfErrorsValidationError) ErrorName() string { return "MaxNrOfErrorsValidationError" }

// Error satisfies the builtin error interface
func (e MaxNrOfErrorsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMaxNrOfErrors.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MaxNrOfErrorsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MaxNrOfErrorsValidationError{}

// Validate checks the field values on Maxnoofslots with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Maxnoofslots) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Maxnoofslots with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in MaxnoofslotsMultiError, or
// nil if none found.
func (m *Maxnoofslots) ValidateAll() error {
	return m.validate(true)
}

func (m *Maxnoofslots) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 5120 {
		err := MaxnoofslotsValidationError{
			field:  "Value",
			reason: "value must equal 5120",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MaxnoofslotsMultiError(errors)
	}

	return nil
}

// MaxnoofslotsMultiError is an error wrapping multiple validation errors
// returned by Maxnoofslots.ValidateAll() if the designated constraints aren't met.
type MaxnoofslotsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MaxnoofslotsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MaxnoofslotsMultiError) AllErrors() []error { return m }

// MaxnoofslotsValidationError is the validation error returned by
// Maxnoofslots.Validate if the designated constraints aren't met.
type MaxnoofslotsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MaxnoofslotsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MaxnoofslotsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MaxnoofslotsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MaxnoofslotsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MaxnoofslotsValidationError) ErrorName() string { return "MaxnoofslotsValidationError" }

// Error satisfies the builtin error interface
func (e MaxnoofslotsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMaxnoofslots.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MaxnoofslotsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MaxnoofslotsValidationError{}

// Validate checks the field values on MaxnoofExtTlas with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *MaxnoofExtTlas) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MaxnoofExtTlas with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in MaxnoofExtTlasMultiError,
// or nil if none found.
func (m *MaxnoofExtTlas) ValidateAll() error {
	return m.validate(true)
}

func (m *MaxnoofExtTlas) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 16 {
		err := MaxnoofExtTlasValidationError{
			field:  "Value",
			reason: "value must equal 16",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MaxnoofExtTlasMultiError(errors)
	}

	return nil
}

// MaxnoofExtTlasMultiError is an error wrapping multiple validation errors
// returned by MaxnoofExtTlas.ValidateAll() if the designated constraints
// aren't met.
type MaxnoofExtTlasMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MaxnoofExtTlasMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MaxnoofExtTlasMultiError) AllErrors() []error { return m }

// MaxnoofExtTlasValidationError is the validation error returned by
// MaxnoofExtTlas.Validate if the designated constraints aren't met.
type MaxnoofExtTlasValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MaxnoofExtTlasValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MaxnoofExtTlasValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MaxnoofExtTlasValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MaxnoofExtTlasValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MaxnoofExtTlasValidationError) ErrorName() string { return "MaxnoofExtTlasValidationError" }

// Error satisfies the builtin error interface
func (e MaxnoofExtTlasValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMaxnoofExtTlas.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MaxnoofExtTlasValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MaxnoofExtTlasValidationError{}

// Validate checks the field values on MaxnoofGtptlas with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *MaxnoofGtptlas) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MaxnoofGtptlas with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in MaxnoofGtptlasMultiError,
// or nil if none found.
func (m *MaxnoofGtptlas) ValidateAll() error {
	return m.validate(true)
}

func (m *MaxnoofGtptlas) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 16 {
		err := MaxnoofGtptlasValidationError{
			field:  "Value",
			reason: "value must equal 16",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MaxnoofGtptlasMultiError(errors)
	}

	return nil
}

// MaxnoofGtptlasMultiError is an error wrapping multiple validation errors
// returned by MaxnoofGtptlas.ValidateAll() if the designated constraints
// aren't met.
type MaxnoofGtptlasMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MaxnoofGtptlasMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MaxnoofGtptlasMultiError) AllErrors() []error { return m }

// MaxnoofGtptlasValidationError is the validation error returned by
// MaxnoofGtptlas.Validate if the designated constraints aren't met.
type MaxnoofGtptlasValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MaxnoofGtptlasValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MaxnoofGtptlasValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MaxnoofGtptlasValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MaxnoofGtptlasValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MaxnoofGtptlasValidationError) ErrorName() string { return "MaxnoofGtptlasValidationError" }

// Error satisfies the builtin error interface
func (e MaxnoofGtptlasValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMaxnoofGtptlas.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MaxnoofGtptlasValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MaxnoofGtptlasValidationError{}

// Validate checks the field values on MaxnoofChocells with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *MaxnoofChocells) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MaxnoofChocells with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MaxnoofChocellsMultiError, or nil if none found.
func (m *MaxnoofChocells) ValidateAll() error {
	return m.validate(true)
}

func (m *MaxnoofChocells) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 8 {
		err := MaxnoofChocellsValidationError{
			field:  "Value",
			reason: "value must equal 8",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MaxnoofChocellsMultiError(errors)
	}

	return nil
}

// MaxnoofChocellsMultiError is an error wrapping multiple validation errors
// returned by MaxnoofChocells.ValidateAll() if the designated constraints
// aren't met.
type MaxnoofChocellsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MaxnoofChocellsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MaxnoofChocellsMultiError) AllErrors() []error { return m }

// MaxnoofChocellsValidationError is the validation error returned by
// MaxnoofChocells.Validate if the designated constraints aren't met.
type MaxnoofChocellsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MaxnoofChocellsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MaxnoofChocellsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MaxnoofChocellsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MaxnoofChocellsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MaxnoofChocellsValidationError) ErrorName() string { return "MaxnoofChocellsValidationError" }

// Error satisfies the builtin error interface
func (e MaxnoofChocellsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMaxnoofChocells.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MaxnoofChocellsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MaxnoofChocellsValidationError{}

// Validate checks the field values on MaxnoofPc5QoSflows with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *MaxnoofPc5QoSflows) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MaxnoofPc5QoSflows with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MaxnoofPc5QoSflowsMultiError, or nil if none found.
func (m *MaxnoofPc5QoSflows) ValidateAll() error {
	return m.validate(true)
}

func (m *MaxnoofPc5QoSflows) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 2064 {
		err := MaxnoofPc5QoSflowsValidationError{
			field:  "Value",
			reason: "value must equal 2064",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MaxnoofPc5QoSflowsMultiError(errors)
	}

	return nil
}

// MaxnoofPc5QoSflowsMultiError is an error wrapping multiple validation errors
// returned by MaxnoofPc5QoSflows.ValidateAll() if the designated constraints
// aren't met.
type MaxnoofPc5QoSflowsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MaxnoofPc5QoSflowsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MaxnoofPc5QoSflowsMultiError) AllErrors() []error { return m }

// MaxnoofPc5QoSflowsValidationError is the validation error returned by
// MaxnoofPc5QoSflows.Validate if the designated constraints aren't met.
type MaxnoofPc5QoSflowsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MaxnoofPc5QoSflowsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MaxnoofPc5QoSflowsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MaxnoofPc5QoSflowsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MaxnoofPc5QoSflowsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MaxnoofPc5QoSflowsValidationError) ErrorName() string {
	return "MaxnoofPc5QoSflowsValidationError"
}

// Error satisfies the builtin error interface
func (e MaxnoofPc5QoSflowsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMaxnoofPc5QoSflows.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MaxnoofPc5QoSflowsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MaxnoofPc5QoSflowsValidationError{}

// Validate checks the field values on MaxnoofSsbareas with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *MaxnoofSsbareas) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MaxnoofSsbareas with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MaxnoofSsbareasMultiError, or nil if none found.
func (m *MaxnoofSsbareas) ValidateAll() error {
	return m.validate(true)
}

func (m *MaxnoofSsbareas) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 64 {
		err := MaxnoofSsbareasValidationError{
			field:  "Value",
			reason: "value must equal 64",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MaxnoofSsbareasMultiError(errors)
	}

	return nil
}

// MaxnoofSsbareasMultiError is an error wrapping multiple validation errors
// returned by MaxnoofSsbareas.ValidateAll() if the designated constraints
// aren't met.
type MaxnoofSsbareasMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MaxnoofSsbareasMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MaxnoofSsbareasMultiError) AllErrors() []error { return m }

// MaxnoofSsbareasValidationError is the validation error returned by
// MaxnoofSsbareas.Validate if the designated constraints aren't met.
type MaxnoofSsbareasValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MaxnoofSsbareasValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MaxnoofSsbareasValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MaxnoofSsbareasValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MaxnoofSsbareasValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MaxnoofSsbareasValidationError) ErrorName() string { return "MaxnoofSsbareasValidationError" }

// Error satisfies the builtin error interface
func (e MaxnoofSsbareasValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMaxnoofSsbareas.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MaxnoofSsbareasValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MaxnoofSsbareasValidationError{}

// Validate checks the field values on MaxnoofRachreports with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *MaxnoofRachreports) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MaxnoofRachreports with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MaxnoofRachreportsMultiError, or nil if none found.
func (m *MaxnoofRachreports) ValidateAll() error {
	return m.validate(true)
}

func (m *MaxnoofRachreports) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 64 {
		err := MaxnoofRachreportsValidationError{
			field:  "Value",
			reason: "value must equal 64",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MaxnoofRachreportsMultiError(errors)
	}

	return nil
}

// MaxnoofRachreportsMultiError is an error wrapping multiple validation errors
// returned by MaxnoofRachreports.ValidateAll() if the designated constraints
// aren't met.
type MaxnoofRachreportsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MaxnoofRachreportsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MaxnoofRachreportsMultiError) AllErrors() []error { return m }

// MaxnoofRachreportsValidationError is the validation error returned by
// MaxnoofRachreports.Validate if the designated constraints aren't met.
type MaxnoofRachreportsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MaxnoofRachreportsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MaxnoofRachreportsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MaxnoofRachreportsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MaxnoofRachreportsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MaxnoofRachreportsValidationError) ErrorName() string {
	return "MaxnoofRachreportsValidationError"
}

// Error satisfies the builtin error interface
func (e MaxnoofRachreportsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMaxnoofRachreports.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MaxnoofRachreportsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MaxnoofRachreportsValidationError{}

// Validate checks the field values on MaxnoofNrscss with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *MaxnoofNrscss) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MaxnoofNrscss with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in MaxnoofNrscssMultiError, or
// nil if none found.
func (m *MaxnoofNrscss) ValidateAll() error {
	return m.validate(true)
}

func (m *MaxnoofNrscss) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 5 {
		err := MaxnoofNrscssValidationError{
			field:  "Value",
			reason: "value must equal 5",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MaxnoofNrscssMultiError(errors)
	}

	return nil
}

// MaxnoofNrscssMultiError is an error wrapping multiple validation errors
// returned by MaxnoofNrscss.ValidateAll() if the designated constraints
// aren't met.
type MaxnoofNrscssMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MaxnoofNrscssMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MaxnoofNrscssMultiError) AllErrors() []error { return m }

// MaxnoofNrscssValidationError is the validation error returned by
// MaxnoofNrscss.Validate if the designated constraints aren't met.
type MaxnoofNrscssValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MaxnoofNrscssValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MaxnoofNrscssValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MaxnoofNrscssValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MaxnoofNrscssValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MaxnoofNrscssValidationError) ErrorName() string { return "MaxnoofNrscssValidationError" }

// Error satisfies the builtin error interface
func (e MaxnoofNrscssValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMaxnoofNrscss.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MaxnoofNrscssValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MaxnoofNrscssValidationError{}

// Validate checks the field values on MaxnoofPhysicalResourceBlocks with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *MaxnoofPhysicalResourceBlocks) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MaxnoofPhysicalResourceBlocks with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// MaxnoofPhysicalResourceBlocksMultiError, or nil if none found.
func (m *MaxnoofPhysicalResourceBlocks) ValidateAll() error {
	return m.validate(true)
}

func (m *MaxnoofPhysicalResourceBlocks) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 275 {
		err := MaxnoofPhysicalResourceBlocksValidationError{
			field:  "Value",
			reason: "value must equal 275",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MaxnoofPhysicalResourceBlocksMultiError(errors)
	}

	return nil
}

// MaxnoofPhysicalResourceBlocksMultiError is an error wrapping multiple
// validation errors returned by MaxnoofPhysicalResourceBlocks.ValidateAll()
// if the designated constraints aren't met.
type MaxnoofPhysicalResourceBlocksMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MaxnoofPhysicalResourceBlocksMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MaxnoofPhysicalResourceBlocksMultiError) AllErrors() []error { return m }

// MaxnoofPhysicalResourceBlocksValidationError is the validation error
// returned by MaxnoofPhysicalResourceBlocks.Validate if the designated
// constraints aren't met.
type MaxnoofPhysicalResourceBlocksValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MaxnoofPhysicalResourceBlocksValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MaxnoofPhysicalResourceBlocksValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MaxnoofPhysicalResourceBlocksValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MaxnoofPhysicalResourceBlocksValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MaxnoofPhysicalResourceBlocksValidationError) ErrorName() string {
	return "MaxnoofPhysicalResourceBlocksValidationError"
}

// Error satisfies the builtin error interface
func (e MaxnoofPhysicalResourceBlocksValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMaxnoofPhysicalResourceBlocks.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MaxnoofPhysicalResourceBlocksValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MaxnoofPhysicalResourceBlocksValidationError{}

// Validate checks the field values on MaxnoofAdditionalPdcpduplicationTnl with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *MaxnoofAdditionalPdcpduplicationTnl) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MaxnoofAdditionalPdcpduplicationTnl
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// MaxnoofAdditionalPdcpduplicationTnlMultiError, or nil if none found.
func (m *MaxnoofAdditionalPdcpduplicationTnl) ValidateAll() error {
	return m.validate(true)
}

func (m *MaxnoofAdditionalPdcpduplicationTnl) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 2 {
		err := MaxnoofAdditionalPdcpduplicationTnlValidationError{
			field:  "Value",
			reason: "value must equal 2",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MaxnoofAdditionalPdcpduplicationTnlMultiError(errors)
	}

	return nil
}

// MaxnoofAdditionalPdcpduplicationTnlMultiError is an error wrapping multiple
// validation errors returned by
// MaxnoofAdditionalPdcpduplicationTnl.ValidateAll() if the designated
// constraints aren't met.
type MaxnoofAdditionalPdcpduplicationTnlMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MaxnoofAdditionalPdcpduplicationTnlMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MaxnoofAdditionalPdcpduplicationTnlMultiError) AllErrors() []error { return m }

// MaxnoofAdditionalPdcpduplicationTnlValidationError is the validation error
// returned by MaxnoofAdditionalPdcpduplicationTnl.Validate if the designated
// constraints aren't met.
type MaxnoofAdditionalPdcpduplicationTnlValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MaxnoofAdditionalPdcpduplicationTnlValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MaxnoofAdditionalPdcpduplicationTnlValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MaxnoofAdditionalPdcpduplicationTnlValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MaxnoofAdditionalPdcpduplicationTnlValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MaxnoofAdditionalPdcpduplicationTnlValidationError) ErrorName() string {
	return "MaxnoofAdditionalPdcpduplicationTnlValidationError"
}

// Error satisfies the builtin error interface
func (e MaxnoofAdditionalPdcpduplicationTnlValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMaxnoofAdditionalPdcpduplicationTnl.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MaxnoofAdditionalPdcpduplicationTnlValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MaxnoofAdditionalPdcpduplicationTnlValidationError{}

// Validate checks the field values on MaxnoofRlcduplicationstate with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *MaxnoofRlcduplicationstate) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MaxnoofRlcduplicationstate with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MaxnoofRlcduplicationstateMultiError, or nil if none found.
func (m *MaxnoofRlcduplicationstate) ValidateAll() error {
	return m.validate(true)
}

func (m *MaxnoofRlcduplicationstate) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 3 {
		err := MaxnoofRlcduplicationstateValidationError{
			field:  "Value",
			reason: "value must equal 3",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MaxnoofRlcduplicationstateMultiError(errors)
	}

	return nil
}

// MaxnoofRlcduplicationstateMultiError is an error wrapping multiple
// validation errors returned by MaxnoofRlcduplicationstate.ValidateAll() if
// the designated constraints aren't met.
type MaxnoofRlcduplicationstateMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MaxnoofRlcduplicationstateMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MaxnoofRlcduplicationstateMultiError) AllErrors() []error { return m }

// MaxnoofRlcduplicationstateValidationError is the validation error returned
// by MaxnoofRlcduplicationstate.Validate if the designated constraints aren't met.
type MaxnoofRlcduplicationstateValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MaxnoofRlcduplicationstateValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MaxnoofRlcduplicationstateValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MaxnoofRlcduplicationstateValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MaxnoofRlcduplicationstateValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MaxnoofRlcduplicationstateValidationError) ErrorName() string {
	return "MaxnoofRlcduplicationstateValidationError"
}

// Error satisfies the builtin error interface
func (e MaxnoofRlcduplicationstateValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMaxnoofRlcduplicationstate.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MaxnoofRlcduplicationstateValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MaxnoofRlcduplicationstateValidationError{}

// Validate checks the field values on MaxnoofWlanname with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *MaxnoofWlanname) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MaxnoofWlanname with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MaxnoofWlannameMultiError, or nil if none found.
func (m *MaxnoofWlanname) ValidateAll() error {
	return m.validate(true)
}

func (m *MaxnoofWlanname) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 4 {
		err := MaxnoofWlannameValidationError{
			field:  "Value",
			reason: "value must equal 4",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MaxnoofWlannameMultiError(errors)
	}

	return nil
}

// MaxnoofWlannameMultiError is an error wrapping multiple validation errors
// returned by MaxnoofWlanname.ValidateAll() if the designated constraints
// aren't met.
type MaxnoofWlannameMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MaxnoofWlannameMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MaxnoofWlannameMultiError) AllErrors() []error { return m }

// MaxnoofWlannameValidationError is the validation error returned by
// MaxnoofWlanname.Validate if the designated constraints aren't met.
type MaxnoofWlannameValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MaxnoofWlannameValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MaxnoofWlannameValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MaxnoofWlannameValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MaxnoofWlannameValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MaxnoofWlannameValidationError) ErrorName() string { return "MaxnoofWlannameValidationError" }

// Error satisfies the builtin error interface
func (e MaxnoofWlannameValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMaxnoofWlanname.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MaxnoofWlannameValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MaxnoofWlannameValidationError{}

// Validate checks the field values on MaxnoofNonAnchorCarrierFreqConfig with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *MaxnoofNonAnchorCarrierFreqConfig) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MaxnoofNonAnchorCarrierFreqConfig
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// MaxnoofNonAnchorCarrierFreqConfigMultiError, or nil if none found.
func (m *MaxnoofNonAnchorCarrierFreqConfig) ValidateAll() error {
	return m.validate(true)
}

func (m *MaxnoofNonAnchorCarrierFreqConfig) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 15 {
		err := MaxnoofNonAnchorCarrierFreqConfigValidationError{
			field:  "Value",
			reason: "value must equal 15",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MaxnoofNonAnchorCarrierFreqConfigMultiError(errors)
	}

	return nil
}

// MaxnoofNonAnchorCarrierFreqConfigMultiError is an error wrapping multiple
// validation errors returned by
// MaxnoofNonAnchorCarrierFreqConfig.ValidateAll() if the designated
// constraints aren't met.
type MaxnoofNonAnchorCarrierFreqConfigMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MaxnoofNonAnchorCarrierFreqConfigMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MaxnoofNonAnchorCarrierFreqConfigMultiError) AllErrors() []error { return m }

// MaxnoofNonAnchorCarrierFreqConfigValidationError is the validation error
// returned by MaxnoofNonAnchorCarrierFreqConfig.Validate if the designated
// constraints aren't met.
type MaxnoofNonAnchorCarrierFreqConfigValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MaxnoofNonAnchorCarrierFreqConfigValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MaxnoofNonAnchorCarrierFreqConfigValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MaxnoofNonAnchorCarrierFreqConfigValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MaxnoofNonAnchorCarrierFreqConfigValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MaxnoofNonAnchorCarrierFreqConfigValidationError) ErrorName() string {
	return "MaxnoofNonAnchorCarrierFreqConfigValidationError"
}

// Error satisfies the builtin error interface
func (e MaxnoofNonAnchorCarrierFreqConfigValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMaxnoofNonAnchorCarrierFreqConfig.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MaxnoofNonAnchorCarrierFreqConfigValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MaxnoofNonAnchorCarrierFreqConfigValidationError{}

// Validate checks the field values on MaxnoofDataForwardingTunneltoEUTran with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *MaxnoofDataForwardingTunneltoEUTran) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MaxnoofDataForwardingTunneltoEUTran
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// MaxnoofDataForwardingTunneltoEUTranMultiError, or nil if none found.
func (m *MaxnoofDataForwardingTunneltoEUTran) ValidateAll() error {
	return m.validate(true)
}

func (m *MaxnoofDataForwardingTunneltoEUTran) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 256 {
		err := MaxnoofDataForwardingTunneltoEUTranValidationError{
			field:  "Value",
			reason: "value must equal 256",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MaxnoofDataForwardingTunneltoEUTranMultiError(errors)
	}

	return nil
}

// MaxnoofDataForwardingTunneltoEUTranMultiError is an error wrapping multiple
// validation errors returned by
// MaxnoofDataForwardingTunneltoEUTran.ValidateAll() if the designated
// constraints aren't met.
type MaxnoofDataForwardingTunneltoEUTranMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MaxnoofDataForwardingTunneltoEUTranMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MaxnoofDataForwardingTunneltoEUTranMultiError) AllErrors() []error { return m }

// MaxnoofDataForwardingTunneltoEUTranValidationError is the validation error
// returned by MaxnoofDataForwardingTunneltoEUTran.Validate if the designated
// constraints aren't met.
type MaxnoofDataForwardingTunneltoEUTranValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MaxnoofDataForwardingTunneltoEUTranValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MaxnoofDataForwardingTunneltoEUTranValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MaxnoofDataForwardingTunneltoEUTranValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MaxnoofDataForwardingTunneltoEUTranValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MaxnoofDataForwardingTunneltoEUTranValidationError) ErrorName() string {
	return "MaxnoofDataForwardingTunneltoEUTranValidationError"
}

// Error satisfies the builtin error interface
func (e MaxnoofDataForwardingTunneltoEUTranValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMaxnoofDataForwardingTunneltoEUTran.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MaxnoofDataForwardingTunneltoEUTranValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MaxnoofDataForwardingTunneltoEUTranValidationError{}

// Validate checks the field values on IdActivatedServedCells with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdActivatedServedCells) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdActivatedServedCells with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdActivatedServedCellsMultiError, or nil if none found.
func (m *IdActivatedServedCells) ValidateAll() error {
	return m.validate(true)
}

func (m *IdActivatedServedCells) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 0 {
		err := IdActivatedServedCellsValidationError{
			field:  "Value",
			reason: "value must equal 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdActivatedServedCellsMultiError(errors)
	}

	return nil
}

// IdActivatedServedCellsMultiError is an error wrapping multiple validation
// errors returned by IdActivatedServedCells.ValidateAll() if the designated
// constraints aren't met.
type IdActivatedServedCellsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdActivatedServedCellsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdActivatedServedCellsMultiError) AllErrors() []error { return m }

// IdActivatedServedCellsValidationError is the validation error returned by
// IdActivatedServedCells.Validate if the designated constraints aren't met.
type IdActivatedServedCellsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdActivatedServedCellsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdActivatedServedCellsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdActivatedServedCellsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdActivatedServedCellsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdActivatedServedCellsValidationError) ErrorName() string {
	return "IdActivatedServedCellsValidationError"
}

// Error satisfies the builtin error interface
func (e IdActivatedServedCellsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdActivatedServedCells.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdActivatedServedCellsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdActivatedServedCellsValidationError{}

// Validate checks the field values on IdActivationIdforCellActivation with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdActivationIdforCellActivation) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdActivationIdforCellActivation with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// IdActivationIdforCellActivationMultiError, or nil if none found.
func (m *IdActivationIdforCellActivation) ValidateAll() error {
	return m.validate(true)
}

func (m *IdActivationIdforCellActivation) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 1 {
		err := IdActivationIdforCellActivationValidationError{
			field:  "Value",
			reason: "value must equal 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdActivationIdforCellActivationMultiError(errors)
	}

	return nil
}

// IdActivationIdforCellActivationMultiError is an error wrapping multiple
// validation errors returned by IdActivationIdforCellActivation.ValidateAll()
// if the designated constraints aren't met.
type IdActivationIdforCellActivationMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdActivationIdforCellActivationMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdActivationIdforCellActivationMultiError) AllErrors() []error { return m }

// IdActivationIdforCellActivationValidationError is the validation error
// returned by IdActivationIdforCellActivation.Validate if the designated
// constraints aren't met.
type IdActivationIdforCellActivationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdActivationIdforCellActivationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdActivationIdforCellActivationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdActivationIdforCellActivationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdActivationIdforCellActivationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdActivationIdforCellActivationValidationError) ErrorName() string {
	return "IdActivationIdforCellActivationValidationError"
}

// Error satisfies the builtin error interface
func (e IdActivationIdforCellActivationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdActivationIdforCellActivation.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdActivationIdforCellActivationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdActivationIdforCellActivationValidationError{}

// Validate checks the field values on IdadmittedSplitSrb with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdadmittedSplitSrb) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdadmittedSplitSrb with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdadmittedSplitSrbMultiError, or nil if none found.
func (m *IdadmittedSplitSrb) ValidateAll() error {
	return m.validate(true)
}

func (m *IdadmittedSplitSrb) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 2 {
		err := IdadmittedSplitSrbValidationError{
			field:  "Value",
			reason: "value must equal 2",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdadmittedSplitSrbMultiError(errors)
	}

	return nil
}

// IdadmittedSplitSrbMultiError is an error wrapping multiple validation errors
// returned by IdadmittedSplitSrb.ValidateAll() if the designated constraints
// aren't met.
type IdadmittedSplitSrbMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdadmittedSplitSrbMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdadmittedSplitSrbMultiError) AllErrors() []error { return m }

// IdadmittedSplitSrbValidationError is the validation error returned by
// IdadmittedSplitSrb.Validate if the designated constraints aren't met.
type IdadmittedSplitSrbValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdadmittedSplitSrbValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdadmittedSplitSrbValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdadmittedSplitSrbValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdadmittedSplitSrbValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdadmittedSplitSrbValidationError) ErrorName() string {
	return "IdadmittedSplitSrbValidationError"
}

// Error satisfies the builtin error interface
func (e IdadmittedSplitSrbValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdadmittedSplitSrb.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdadmittedSplitSrbValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdadmittedSplitSrbValidationError{}

// Validate checks the field values on IdadmittedSplitSrbrelease with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdadmittedSplitSrbrelease) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdadmittedSplitSrbrelease with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdadmittedSplitSrbreleaseMultiError, or nil if none found.
func (m *IdadmittedSplitSrbrelease) ValidateAll() error {
	return m.validate(true)
}

func (m *IdadmittedSplitSrbrelease) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 3 {
		err := IdadmittedSplitSrbreleaseValidationError{
			field:  "Value",
			reason: "value must equal 3",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdadmittedSplitSrbreleaseMultiError(errors)
	}

	return nil
}

// IdadmittedSplitSrbreleaseMultiError is an error wrapping multiple validation
// errors returned by IdadmittedSplitSrbrelease.ValidateAll() if the
// designated constraints aren't met.
type IdadmittedSplitSrbreleaseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdadmittedSplitSrbreleaseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdadmittedSplitSrbreleaseMultiError) AllErrors() []error { return m }

// IdadmittedSplitSrbreleaseValidationError is the validation error returned by
// IdadmittedSplitSrbrelease.Validate if the designated constraints aren't met.
type IdadmittedSplitSrbreleaseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdadmittedSplitSrbreleaseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdadmittedSplitSrbreleaseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdadmittedSplitSrbreleaseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdadmittedSplitSrbreleaseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdadmittedSplitSrbreleaseValidationError) ErrorName() string {
	return "IdadmittedSplitSrbreleaseValidationError"
}

// Error satisfies the builtin error interface
func (e IdadmittedSplitSrbreleaseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdadmittedSplitSrbrelease.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdadmittedSplitSrbreleaseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdadmittedSplitSrbreleaseValidationError{}

// Validate checks the field values on IdAMfRegionInformation with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdAMfRegionInformation) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdAMfRegionInformation with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdAMfRegionInformationMultiError, or nil if none found.
func (m *IdAMfRegionInformation) ValidateAll() error {
	return m.validate(true)
}

func (m *IdAMfRegionInformation) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 4 {
		err := IdAMfRegionInformationValidationError{
			field:  "Value",
			reason: "value must equal 4",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdAMfRegionInformationMultiError(errors)
	}

	return nil
}

// IdAMfRegionInformationMultiError is an error wrapping multiple validation
// errors returned by IdAMfRegionInformation.ValidateAll() if the designated
// constraints aren't met.
type IdAMfRegionInformationMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdAMfRegionInformationMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdAMfRegionInformationMultiError) AllErrors() []error { return m }

// IdAMfRegionInformationValidationError is the validation error returned by
// IdAMfRegionInformation.Validate if the designated constraints aren't met.
type IdAMfRegionInformationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdAMfRegionInformationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdAMfRegionInformationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdAMfRegionInformationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdAMfRegionInformationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdAMfRegionInformationValidationError) ErrorName() string {
	return "IdAMfRegionInformationValidationError"
}

// Error satisfies the builtin error interface
func (e IdAMfRegionInformationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdAMfRegionInformation.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdAMfRegionInformationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdAMfRegionInformationValidationError{}

// Validate checks the field values on IdAssistanceDataForRanpaging with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdAssistanceDataForRanpaging) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdAssistanceDataForRanpaging with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdAssistanceDataForRanpagingMultiError, or nil if none found.
func (m *IdAssistanceDataForRanpaging) ValidateAll() error {
	return m.validate(true)
}

func (m *IdAssistanceDataForRanpaging) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 5 {
		err := IdAssistanceDataForRanpagingValidationError{
			field:  "Value",
			reason: "value must equal 5",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdAssistanceDataForRanpagingMultiError(errors)
	}

	return nil
}

// IdAssistanceDataForRanpagingMultiError is an error wrapping multiple
// validation errors returned by IdAssistanceDataForRanpaging.ValidateAll() if
// the designated constraints aren't met.
type IdAssistanceDataForRanpagingMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdAssistanceDataForRanpagingMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdAssistanceDataForRanpagingMultiError) AllErrors() []error { return m }

// IdAssistanceDataForRanpagingValidationError is the validation error returned
// by IdAssistanceDataForRanpaging.Validate if the designated constraints
// aren't met.
type IdAssistanceDataForRanpagingValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdAssistanceDataForRanpagingValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdAssistanceDataForRanpagingValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdAssistanceDataForRanpagingValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdAssistanceDataForRanpagingValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdAssistanceDataForRanpagingValidationError) ErrorName() string {
	return "IdAssistanceDataForRanpagingValidationError"
}

// Error satisfies the builtin error interface
func (e IdAssistanceDataForRanpagingValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdAssistanceDataForRanpaging.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdAssistanceDataForRanpagingValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdAssistanceDataForRanpagingValidationError{}

// Validate checks the field values on IdBearersSubjectToCounterCheck with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdBearersSubjectToCounterCheck) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdBearersSubjectToCounterCheck with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// IdBearersSubjectToCounterCheckMultiError, or nil if none found.
func (m *IdBearersSubjectToCounterCheck) ValidateAll() error {
	return m.validate(true)
}

func (m *IdBearersSubjectToCounterCheck) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 6 {
		err := IdBearersSubjectToCounterCheckValidationError{
			field:  "Value",
			reason: "value must equal 6",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdBearersSubjectToCounterCheckMultiError(errors)
	}

	return nil
}

// IdBearersSubjectToCounterCheckMultiError is an error wrapping multiple
// validation errors returned by IdBearersSubjectToCounterCheck.ValidateAll()
// if the designated constraints aren't met.
type IdBearersSubjectToCounterCheckMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdBearersSubjectToCounterCheckMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdBearersSubjectToCounterCheckMultiError) AllErrors() []error { return m }

// IdBearersSubjectToCounterCheckValidationError is the validation error
// returned by IdBearersSubjectToCounterCheck.Validate if the designated
// constraints aren't met.
type IdBearersSubjectToCounterCheckValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdBearersSubjectToCounterCheckValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdBearersSubjectToCounterCheckValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdBearersSubjectToCounterCheckValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdBearersSubjectToCounterCheckValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdBearersSubjectToCounterCheckValidationError) ErrorName() string {
	return "IdBearersSubjectToCounterCheckValidationError"
}

// Error satisfies the builtin error interface
func (e IdBearersSubjectToCounterCheckValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdBearersSubjectToCounterCheck.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdBearersSubjectToCounterCheckValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdBearersSubjectToCounterCheckValidationError{}

// Validate checks the field values on IdCause with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *IdCause) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdCause with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in IdCauseMultiError, or nil if none found.
func (m *IdCause) ValidateAll() error {
	return m.validate(true)
}

func (m *IdCause) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 7 {
		err := IdCauseValidationError{
			field:  "Value",
			reason: "value must equal 7",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdCauseMultiError(errors)
	}

	return nil
}

// IdCauseMultiError is an error wrapping multiple validation errors returned
// by IdCause.ValidateAll() if the designated constraints aren't met.
type IdCauseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdCauseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdCauseMultiError) AllErrors() []error { return m }

// IdCauseValidationError is the validation error returned by IdCause.Validate
// if the designated constraints aren't met.
type IdCauseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdCauseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdCauseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdCauseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdCauseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdCauseValidationError) ErrorName() string { return "IdCauseValidationError" }

// Error satisfies the builtin error interface
func (e IdCauseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdCause.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdCauseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdCauseValidationError{}

// Validate checks the field values on IdcellAssistanceInfoNR with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdcellAssistanceInfoNR) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdcellAssistanceInfoNR with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdcellAssistanceInfoNRMultiError, or nil if none found.
func (m *IdcellAssistanceInfoNR) ValidateAll() error {
	return m.validate(true)
}

func (m *IdcellAssistanceInfoNR) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 8 {
		err := IdcellAssistanceInfoNRValidationError{
			field:  "Value",
			reason: "value must equal 8",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdcellAssistanceInfoNRMultiError(errors)
	}

	return nil
}

// IdcellAssistanceInfoNRMultiError is an error wrapping multiple validation
// errors returned by IdcellAssistanceInfoNR.ValidateAll() if the designated
// constraints aren't met.
type IdcellAssistanceInfoNRMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdcellAssistanceInfoNRMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdcellAssistanceInfoNRMultiError) AllErrors() []error { return m }

// IdcellAssistanceInfoNRValidationError is the validation error returned by
// IdcellAssistanceInfoNR.Validate if the designated constraints aren't met.
type IdcellAssistanceInfoNRValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdcellAssistanceInfoNRValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdcellAssistanceInfoNRValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdcellAssistanceInfoNRValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdcellAssistanceInfoNRValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdcellAssistanceInfoNRValidationError) ErrorName() string {
	return "IdcellAssistanceInfoNRValidationError"
}

// Error satisfies the builtin error interface
func (e IdcellAssistanceInfoNRValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdcellAssistanceInfoNR.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdcellAssistanceInfoNRValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdcellAssistanceInfoNRValidationError{}

// Validate checks the field values on
// IdConfigurationUpdateInitiatingNodeChoice with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *IdConfigurationUpdateInitiatingNodeChoice) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// IdConfigurationUpdateInitiatingNodeChoice with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// IdConfigurationUpdateInitiatingNodeChoiceMultiError, or nil if none found.
func (m *IdConfigurationUpdateInitiatingNodeChoice) ValidateAll() error {
	return m.validate(true)
}

func (m *IdConfigurationUpdateInitiatingNodeChoice) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 9 {
		err := IdConfigurationUpdateInitiatingNodeChoiceValidationError{
			field:  "Value",
			reason: "value must equal 9",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdConfigurationUpdateInitiatingNodeChoiceMultiError(errors)
	}

	return nil
}

// IdConfigurationUpdateInitiatingNodeChoiceMultiError is an error wrapping
// multiple validation errors returned by
// IdConfigurationUpdateInitiatingNodeChoice.ValidateAll() if the designated
// constraints aren't met.
type IdConfigurationUpdateInitiatingNodeChoiceMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdConfigurationUpdateInitiatingNodeChoiceMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdConfigurationUpdateInitiatingNodeChoiceMultiError) AllErrors() []error { return m }

// IdConfigurationUpdateInitiatingNodeChoiceValidationError is the validation
// error returned by IdConfigurationUpdateInitiatingNodeChoice.Validate if the
// designated constraints aren't met.
type IdConfigurationUpdateInitiatingNodeChoiceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdConfigurationUpdateInitiatingNodeChoiceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdConfigurationUpdateInitiatingNodeChoiceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdConfigurationUpdateInitiatingNodeChoiceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdConfigurationUpdateInitiatingNodeChoiceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdConfigurationUpdateInitiatingNodeChoiceValidationError) ErrorName() string {
	return "IdConfigurationUpdateInitiatingNodeChoiceValidationError"
}

// Error satisfies the builtin error interface
func (e IdConfigurationUpdateInitiatingNodeChoiceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdConfigurationUpdateInitiatingNodeChoice.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdConfigurationUpdateInitiatingNodeChoiceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdConfigurationUpdateInitiatingNodeChoiceValidationError{}

// Validate checks the field values on IdCriticalityDiagnostics with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdCriticalityDiagnostics) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdCriticalityDiagnostics with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdCriticalityDiagnosticsMultiError, or nil if none found.
func (m *IdCriticalityDiagnostics) ValidateAll() error {
	return m.validate(true)
}

func (m *IdCriticalityDiagnostics) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 10 {
		err := IdCriticalityDiagnosticsValidationError{
			field:  "Value",
			reason: "value must equal 10",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdCriticalityDiagnosticsMultiError(errors)
	}

	return nil
}

// IdCriticalityDiagnosticsMultiError is an error wrapping multiple validation
// errors returned by IdCriticalityDiagnostics.ValidateAll() if the designated
// constraints aren't met.
type IdCriticalityDiagnosticsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdCriticalityDiagnosticsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdCriticalityDiagnosticsMultiError) AllErrors() []error { return m }

// IdCriticalityDiagnosticsValidationError is the validation error returned by
// IdCriticalityDiagnostics.Validate if the designated constraints aren't met.
type IdCriticalityDiagnosticsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdCriticalityDiagnosticsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdCriticalityDiagnosticsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdCriticalityDiagnosticsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdCriticalityDiagnosticsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdCriticalityDiagnosticsValidationError) ErrorName() string {
	return "IdCriticalityDiagnosticsValidationError"
}

// Error satisfies the builtin error interface
func (e IdCriticalityDiagnosticsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdCriticalityDiagnostics.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdCriticalityDiagnosticsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdCriticalityDiagnosticsValidationError{}

// Validate checks the field values on IdXnUaddressInfoperPdusessionList with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *IdXnUaddressInfoperPdusessionList) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdXnUaddressInfoperPdusessionList
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// IdXnUaddressInfoperPdusessionListMultiError, or nil if none found.
func (m *IdXnUaddressInfoperPdusessionList) ValidateAll() error {
	return m.validate(true)
}

func (m *IdXnUaddressInfoperPdusessionList) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 11 {
		err := IdXnUaddressInfoperPdusessionListValidationError{
			field:  "Value",
			reason: "value must equal 11",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdXnUaddressInfoperPdusessionListMultiError(errors)
	}

	return nil
}

// IdXnUaddressInfoperPdusessionListMultiError is an error wrapping multiple
// validation errors returned by
// IdXnUaddressInfoperPdusessionList.ValidateAll() if the designated
// constraints aren't met.
type IdXnUaddressInfoperPdusessionListMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdXnUaddressInfoperPdusessionListMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdXnUaddressInfoperPdusessionListMultiError) AllErrors() []error { return m }

// IdXnUaddressInfoperPdusessionListValidationError is the validation error
// returned by IdXnUaddressInfoperPdusessionList.Validate if the designated
// constraints aren't met.
type IdXnUaddressInfoperPdusessionListValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdXnUaddressInfoperPdusessionListValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdXnUaddressInfoperPdusessionListValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdXnUaddressInfoperPdusessionListValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdXnUaddressInfoperPdusessionListValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdXnUaddressInfoperPdusessionListValidationError) ErrorName() string {
	return "IdXnUaddressInfoperPdusessionListValidationError"
}

// Error satisfies the builtin error interface
func (e IdXnUaddressInfoperPdusessionListValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdXnUaddressInfoperPdusessionList.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdXnUaddressInfoperPdusessionListValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdXnUaddressInfoperPdusessionListValidationError{}

// Validate checks the field values on IdDRbsSubjectToStatusTransferList with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *IdDRbsSubjectToStatusTransferList) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdDRbsSubjectToStatusTransferList
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// IdDRbsSubjectToStatusTransferListMultiError, or nil if none found.
func (m *IdDRbsSubjectToStatusTransferList) ValidateAll() error {
	return m.validate(true)
}

func (m *IdDRbsSubjectToStatusTransferList) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 12 {
		err := IdDRbsSubjectToStatusTransferListValidationError{
			field:  "Value",
			reason: "value must equal 12",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdDRbsSubjectToStatusTransferListMultiError(errors)
	}

	return nil
}

// IdDRbsSubjectToStatusTransferListMultiError is an error wrapping multiple
// validation errors returned by
// IdDRbsSubjectToStatusTransferList.ValidateAll() if the designated
// constraints aren't met.
type IdDRbsSubjectToStatusTransferListMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdDRbsSubjectToStatusTransferListMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdDRbsSubjectToStatusTransferListMultiError) AllErrors() []error { return m }

// IdDRbsSubjectToStatusTransferListValidationError is the validation error
// returned by IdDRbsSubjectToStatusTransferList.Validate if the designated
// constraints aren't met.
type IdDRbsSubjectToStatusTransferListValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdDRbsSubjectToStatusTransferListValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdDRbsSubjectToStatusTransferListValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdDRbsSubjectToStatusTransferListValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdDRbsSubjectToStatusTransferListValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdDRbsSubjectToStatusTransferListValidationError) ErrorName() string {
	return "IdDRbsSubjectToStatusTransferListValidationError"
}

// Error satisfies the builtin error interface
func (e IdDRbsSubjectToStatusTransferListValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdDRbsSubjectToStatusTransferList.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdDRbsSubjectToStatusTransferListValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdDRbsSubjectToStatusTransferListValidationError{}

// Validate checks the field values on IdExpectedUebehaviour with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdExpectedUebehaviour) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdExpectedUebehaviour with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdExpectedUebehaviourMultiError, or nil if none found.
func (m *IdExpectedUebehaviour) ValidateAll() error {
	return m.validate(true)
}

func (m *IdExpectedUebehaviour) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 13 {
		err := IdExpectedUebehaviourValidationError{
			field:  "Value",
			reason: "value must equal 13",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdExpectedUebehaviourMultiError(errors)
	}

	return nil
}

// IdExpectedUebehaviourMultiError is an error wrapping multiple validation
// errors returned by IdExpectedUebehaviour.ValidateAll() if the designated
// constraints aren't met.
type IdExpectedUebehaviourMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdExpectedUebehaviourMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdExpectedUebehaviourMultiError) AllErrors() []error { return m }

// IdExpectedUebehaviourValidationError is the validation error returned by
// IdExpectedUebehaviour.Validate if the designated constraints aren't met.
type IdExpectedUebehaviourValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdExpectedUebehaviourValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdExpectedUebehaviourValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdExpectedUebehaviourValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdExpectedUebehaviourValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdExpectedUebehaviourValidationError) ErrorName() string {
	return "IdExpectedUebehaviourValidationError"
}

// Error satisfies the builtin error interface
func (e IdExpectedUebehaviourValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdExpectedUebehaviour.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdExpectedUebehaviourValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdExpectedUebehaviourValidationError{}

// Validate checks the field values on IdGlobalNgRAnnodeID with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdGlobalNgRAnnodeID) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdGlobalNgRAnnodeID with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdGlobalNgRAnnodeIDMultiError, or nil if none found.
func (m *IdGlobalNgRAnnodeID) ValidateAll() error {
	return m.validate(true)
}

func (m *IdGlobalNgRAnnodeID) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 14 {
		err := IdGlobalNgRAnnodeIDValidationError{
			field:  "Value",
			reason: "value must equal 14",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdGlobalNgRAnnodeIDMultiError(errors)
	}

	return nil
}

// IdGlobalNgRAnnodeIDMultiError is an error wrapping multiple validation
// errors returned by IdGlobalNgRAnnodeID.ValidateAll() if the designated
// constraints aren't met.
type IdGlobalNgRAnnodeIDMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdGlobalNgRAnnodeIDMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdGlobalNgRAnnodeIDMultiError) AllErrors() []error { return m }

// IdGlobalNgRAnnodeIDValidationError is the validation error returned by
// IdGlobalNgRAnnodeID.Validate if the designated constraints aren't met.
type IdGlobalNgRAnnodeIDValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdGlobalNgRAnnodeIDValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdGlobalNgRAnnodeIDValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdGlobalNgRAnnodeIDValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdGlobalNgRAnnodeIDValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdGlobalNgRAnnodeIDValidationError) ErrorName() string {
	return "IdGlobalNgRAnnodeIDValidationError"
}

// Error satisfies the builtin error interface
func (e IdGlobalNgRAnnodeIDValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdGlobalNgRAnnodeID.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdGlobalNgRAnnodeIDValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdGlobalNgRAnnodeIDValidationError{}

// Validate checks the field values on IdGUami with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *IdGUami) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdGUami with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in IdGUamiMultiError, or nil if none found.
func (m *IdGUami) ValidateAll() error {
	return m.validate(true)
}

func (m *IdGUami) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 15 {
		err := IdGUamiValidationError{
			field:  "Value",
			reason: "value must equal 15",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdGUamiMultiError(errors)
	}

	return nil
}

// IdGUamiMultiError is an error wrapping multiple validation errors returned
// by IdGUami.ValidateAll() if the designated constraints aren't met.
type IdGUamiMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdGUamiMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdGUamiMultiError) AllErrors() []error { return m }

// IdGUamiValidationError is the validation error returned by IdGUami.Validate
// if the designated constraints aren't met.
type IdGUamiValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdGUamiValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdGUamiValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdGUamiValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdGUamiValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdGUamiValidationError) ErrorName() string { return "IdGUamiValidationError" }

// Error satisfies the builtin error interface
func (e IdGUamiValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdGUami.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdGUamiValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdGUamiValidationError{}

// Validate checks the field values on IdindexToRatFrequSelectionPriority with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *IdindexToRatFrequSelectionPriority) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdindexToRatFrequSelectionPriority
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// IdindexToRatFrequSelectionPriorityMultiError, or nil if none found.
func (m *IdindexToRatFrequSelectionPriority) ValidateAll() error {
	return m.validate(true)
}

func (m *IdindexToRatFrequSelectionPriority) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 16 {
		err := IdindexToRatFrequSelectionPriorityValidationError{
			field:  "Value",
			reason: "value must equal 16",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdindexToRatFrequSelectionPriorityMultiError(errors)
	}

	return nil
}

// IdindexToRatFrequSelectionPriorityMultiError is an error wrapping multiple
// validation errors returned by
// IdindexToRatFrequSelectionPriority.ValidateAll() if the designated
// constraints aren't met.
type IdindexToRatFrequSelectionPriorityMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdindexToRatFrequSelectionPriorityMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdindexToRatFrequSelectionPriorityMultiError) AllErrors() []error { return m }

// IdindexToRatFrequSelectionPriorityValidationError is the validation error
// returned by IdindexToRatFrequSelectionPriority.Validate if the designated
// constraints aren't met.
type IdindexToRatFrequSelectionPriorityValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdindexToRatFrequSelectionPriorityValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdindexToRatFrequSelectionPriorityValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdindexToRatFrequSelectionPriorityValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdindexToRatFrequSelectionPriorityValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdindexToRatFrequSelectionPriorityValidationError) ErrorName() string {
	return "IdindexToRatFrequSelectionPriorityValidationError"
}

// Error satisfies the builtin error interface
func (e IdindexToRatFrequSelectionPriorityValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdindexToRatFrequSelectionPriority.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdindexToRatFrequSelectionPriorityValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdindexToRatFrequSelectionPriorityValidationError{}

// Validate checks the field values on IdinitiatingNodeTypeResourceCoordRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *IdinitiatingNodeTypeResourceCoordRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// IdinitiatingNodeTypeResourceCoordRequest with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// IdinitiatingNodeTypeResourceCoordRequestMultiError, or nil if none found.
func (m *IdinitiatingNodeTypeResourceCoordRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *IdinitiatingNodeTypeResourceCoordRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 17 {
		err := IdinitiatingNodeTypeResourceCoordRequestValidationError{
			field:  "Value",
			reason: "value must equal 17",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdinitiatingNodeTypeResourceCoordRequestMultiError(errors)
	}

	return nil
}

// IdinitiatingNodeTypeResourceCoordRequestMultiError is an error wrapping
// multiple validation errors returned by
// IdinitiatingNodeTypeResourceCoordRequest.ValidateAll() if the designated
// constraints aren't met.
type IdinitiatingNodeTypeResourceCoordRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdinitiatingNodeTypeResourceCoordRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdinitiatingNodeTypeResourceCoordRequestMultiError) AllErrors() []error { return m }

// IdinitiatingNodeTypeResourceCoordRequestValidationError is the validation
// error returned by IdinitiatingNodeTypeResourceCoordRequest.Validate if the
// designated constraints aren't met.
type IdinitiatingNodeTypeResourceCoordRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdinitiatingNodeTypeResourceCoordRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdinitiatingNodeTypeResourceCoordRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdinitiatingNodeTypeResourceCoordRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdinitiatingNodeTypeResourceCoordRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdinitiatingNodeTypeResourceCoordRequestValidationError) ErrorName() string {
	return "IdinitiatingNodeTypeResourceCoordRequestValidationError"
}

// Error satisfies the builtin error interface
func (e IdinitiatingNodeTypeResourceCoordRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdinitiatingNodeTypeResourceCoordRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdinitiatingNodeTypeResourceCoordRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdinitiatingNodeTypeResourceCoordRequestValidationError{}

// Validate checks the field values on IdListofservedcellsEUTra with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdListofservedcellsEUTra) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdListofservedcellsEUTra with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdListofservedcellsEUTraMultiError, or nil if none found.
func (m *IdListofservedcellsEUTra) ValidateAll() error {
	return m.validate(true)
}

func (m *IdListofservedcellsEUTra) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 18 {
		err := IdListofservedcellsEUTraValidationError{
			field:  "Value",
			reason: "value must equal 18",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdListofservedcellsEUTraMultiError(errors)
	}

	return nil
}

// IdListofservedcellsEUTraMultiError is an error wrapping multiple validation
// errors returned by IdListofservedcellsEUTra.ValidateAll() if the designated
// constraints aren't met.
type IdListofservedcellsEUTraMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdListofservedcellsEUTraMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdListofservedcellsEUTraMultiError) AllErrors() []error { return m }

// IdListofservedcellsEUTraValidationError is the validation error returned by
// IdListofservedcellsEUTra.Validate if the designated constraints aren't met.
type IdListofservedcellsEUTraValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdListofservedcellsEUTraValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdListofservedcellsEUTraValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdListofservedcellsEUTraValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdListofservedcellsEUTraValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdListofservedcellsEUTraValidationError) ErrorName() string {
	return "IdListofservedcellsEUTraValidationError"
}

// Error satisfies the builtin error interface
func (e IdListofservedcellsEUTraValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdListofservedcellsEUTra.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdListofservedcellsEUTraValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdListofservedcellsEUTraValidationError{}

// Validate checks the field values on IdListofservedcellsNR with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdListofservedcellsNR) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdListofservedcellsNR with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdListofservedcellsNRMultiError, or nil if none found.
func (m *IdListofservedcellsNR) ValidateAll() error {
	return m.validate(true)
}

func (m *IdListofservedcellsNR) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 19 {
		err := IdListofservedcellsNRValidationError{
			field:  "Value",
			reason: "value must equal 19",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdListofservedcellsNRMultiError(errors)
	}

	return nil
}

// IdListofservedcellsNRMultiError is an error wrapping multiple validation
// errors returned by IdListofservedcellsNR.ValidateAll() if the designated
// constraints aren't met.
type IdListofservedcellsNRMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdListofservedcellsNRMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdListofservedcellsNRMultiError) AllErrors() []error { return m }

// IdListofservedcellsNRValidationError is the validation error returned by
// IdListofservedcellsNR.Validate if the designated constraints aren't met.
type IdListofservedcellsNRValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdListofservedcellsNRValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdListofservedcellsNRValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdListofservedcellsNRValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdListofservedcellsNRValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdListofservedcellsNRValidationError) ErrorName() string {
	return "IdListofservedcellsNRValidationError"
}

// Error satisfies the builtin error interface
func (e IdListofservedcellsNRValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdListofservedcellsNR.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdListofservedcellsNRValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdListofservedcellsNRValidationError{}

// Validate checks the field values on IdLocationReportingInformation with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdLocationReportingInformation) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdLocationReportingInformation with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// IdLocationReportingInformationMultiError, or nil if none found.
func (m *IdLocationReportingInformation) ValidateAll() error {
	return m.validate(true)
}

func (m *IdLocationReportingInformation) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 20 {
		err := IdLocationReportingInformationValidationError{
			field:  "Value",
			reason: "value must equal 20",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdLocationReportingInformationMultiError(errors)
	}

	return nil
}

// IdLocationReportingInformationMultiError is an error wrapping multiple
// validation errors returned by IdLocationReportingInformation.ValidateAll()
// if the designated constraints aren't met.
type IdLocationReportingInformationMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdLocationReportingInformationMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdLocationReportingInformationMultiError) AllErrors() []error { return m }

// IdLocationReportingInformationValidationError is the validation error
// returned by IdLocationReportingInformation.Validate if the designated
// constraints aren't met.
type IdLocationReportingInformationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdLocationReportingInformationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdLocationReportingInformationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdLocationReportingInformationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdLocationReportingInformationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdLocationReportingInformationValidationError) ErrorName() string {
	return "IdLocationReportingInformationValidationError"
}

// Error satisfies the builtin error interface
func (e IdLocationReportingInformationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdLocationReportingInformation.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdLocationReportingInformationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdLocationReportingInformationValidationError{}

// Validate checks the field values on IdMAcI with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *IdMAcI) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdMAcI with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in IdMAcIMultiError, or nil if none found.
func (m *IdMAcI) ValidateAll() error {
	return m.validate(true)
}

func (m *IdMAcI) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 21 {
		err := IdMAcIValidationError{
			field:  "Value",
			reason: "value must equal 21",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdMAcIMultiError(errors)
	}

	return nil
}

// IdMAcIMultiError is an error wrapping multiple validation errors returned by
// IdMAcI.ValidateAll() if the designated constraints aren't met.
type IdMAcIMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdMAcIMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdMAcIMultiError) AllErrors() []error { return m }

// IdMAcIValidationError is the validation error returned by IdMAcI.Validate if
// the designated constraints aren't met.
type IdMAcIValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdMAcIValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdMAcIValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdMAcIValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdMAcIValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdMAcIValidationError) ErrorName() string { return "IdMAcIValidationError" }

// Error satisfies the builtin error interface
func (e IdMAcIValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdMAcI.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdMAcIValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdMAcIValidationError{}

// Validate checks the field values on IdMaskedImeisv with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *IdMaskedImeisv) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdMaskedImeisv with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in IdMaskedImeisvMultiError,
// or nil if none found.
func (m *IdMaskedImeisv) ValidateAll() error {
	return m.validate(true)
}

func (m *IdMaskedImeisv) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 22 {
		err := IdMaskedImeisvValidationError{
			field:  "Value",
			reason: "value must equal 22",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdMaskedImeisvMultiError(errors)
	}

	return nil
}

// IdMaskedImeisvMultiError is an error wrapping multiple validation errors
// returned by IdMaskedImeisv.ValidateAll() if the designated constraints
// aren't met.
type IdMaskedImeisvMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdMaskedImeisvMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdMaskedImeisvMultiError) AllErrors() []error { return m }

// IdMaskedImeisvValidationError is the validation error returned by
// IdMaskedImeisv.Validate if the designated constraints aren't met.
type IdMaskedImeisvValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdMaskedImeisvValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdMaskedImeisvValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdMaskedImeisvValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdMaskedImeisvValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdMaskedImeisvValidationError) ErrorName() string { return "IdMaskedImeisvValidationError" }

// Error satisfies the builtin error interface
func (e IdMaskedImeisvValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdMaskedImeisv.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdMaskedImeisvValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdMaskedImeisvValidationError{}

// Validate checks the field values on IdMNGRAnnodeUexnApid with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdMNGRAnnodeUexnApid) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdMNGRAnnodeUexnApid with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdMNGRAnnodeUexnApidMultiError, or nil if none found.
func (m *IdMNGRAnnodeUexnApid) ValidateAll() error {
	return m.validate(true)
}

func (m *IdMNGRAnnodeUexnApid) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 23 {
		err := IdMNGRAnnodeUexnApidValidationError{
			field:  "Value",
			reason: "value must equal 23",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdMNGRAnnodeUexnApidMultiError(errors)
	}

	return nil
}

// IdMNGRAnnodeUexnApidMultiError is an error wrapping multiple validation
// errors returned by IdMNGRAnnodeUexnApid.ValidateAll() if the designated
// constraints aren't met.
type IdMNGRAnnodeUexnApidMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdMNGRAnnodeUexnApidMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdMNGRAnnodeUexnApidMultiError) AllErrors() []error { return m }

// IdMNGRAnnodeUexnApidValidationError is the validation error returned by
// IdMNGRAnnodeUexnApid.Validate if the designated constraints aren't met.
type IdMNGRAnnodeUexnApidValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdMNGRAnnodeUexnApidValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdMNGRAnnodeUexnApidValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdMNGRAnnodeUexnApidValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdMNGRAnnodeUexnApidValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdMNGRAnnodeUexnApidValidationError) ErrorName() string {
	return "IdMNGRAnnodeUexnApidValidationError"
}

// Error satisfies the builtin error interface
func (e IdMNGRAnnodeUexnApidValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdMNGRAnnodeUexnApid.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdMNGRAnnodeUexnApidValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdMNGRAnnodeUexnApidValidationError{}

// Validate checks the field values on IdMNtoSNContainer with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *IdMNtoSNContainer) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdMNtoSNContainer with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdMNtoSNContainerMultiError, or nil if none found.
func (m *IdMNtoSNContainer) ValidateAll() error {
	return m.validate(true)
}

func (m *IdMNtoSNContainer) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 24 {
		err := IdMNtoSNContainerValidationError{
			field:  "Value",
			reason: "value must equal 24",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdMNtoSNContainerMultiError(errors)
	}

	return nil
}

// IdMNtoSNContainerMultiError is an error wrapping multiple validation errors
// returned by IdMNtoSNContainer.ValidateAll() if the designated constraints
// aren't met.
type IdMNtoSNContainerMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdMNtoSNContainerMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdMNtoSNContainerMultiError) AllErrors() []error { return m }

// IdMNtoSNContainerValidationError is the validation error returned by
// IdMNtoSNContainer.Validate if the designated constraints aren't met.
type IdMNtoSNContainerValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdMNtoSNContainerValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdMNtoSNContainerValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdMNtoSNContainerValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdMNtoSNContainerValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdMNtoSNContainerValidationError) ErrorName() string {
	return "IdMNtoSNContainerValidationError"
}

// Error satisfies the builtin error interface
func (e IdMNtoSNContainerValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdMNtoSNContainer.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdMNtoSNContainerValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdMNtoSNContainerValidationError{}

// Validate checks the field values on IdMobilityRestrictionList with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdMobilityRestrictionList) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdMobilityRestrictionList with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdMobilityRestrictionListMultiError, or nil if none found.
func (m *IdMobilityRestrictionList) ValidateAll() error {
	return m.validate(true)
}

func (m *IdMobilityRestrictionList) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 25 {
		err := IdMobilityRestrictionListValidationError{
			field:  "Value",
			reason: "value must equal 25",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdMobilityRestrictionListMultiError(errors)
	}

	return nil
}

// IdMobilityRestrictionListMultiError is an error wrapping multiple validation
// errors returned by IdMobilityRestrictionList.ValidateAll() if the
// designated constraints aren't met.
type IdMobilityRestrictionListMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdMobilityRestrictionListMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdMobilityRestrictionListMultiError) AllErrors() []error { return m }

// IdMobilityRestrictionListValidationError is the validation error returned by
// IdMobilityRestrictionList.Validate if the designated constraints aren't met.
type IdMobilityRestrictionListValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdMobilityRestrictionListValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdMobilityRestrictionListValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdMobilityRestrictionListValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdMobilityRestrictionListValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdMobilityRestrictionListValidationError) ErrorName() string {
	return "IdMobilityRestrictionListValidationError"
}

// Error satisfies the builtin error interface
func (e IdMobilityRestrictionListValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdMobilityRestrictionList.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdMobilityRestrictionListValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdMobilityRestrictionListValidationError{}

// Validate checks the field values on IdnewNGRAnCellIdentity with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdnewNGRAnCellIdentity) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdnewNGRAnCellIdentity with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdnewNGRAnCellIdentityMultiError, or nil if none found.
func (m *IdnewNGRAnCellIdentity) ValidateAll() error {
	return m.validate(true)
}

func (m *IdnewNGRAnCellIdentity) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 26 {
		err := IdnewNGRAnCellIdentityValidationError{
			field:  "Value",
			reason: "value must equal 26",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdnewNGRAnCellIdentityMultiError(errors)
	}

	return nil
}

// IdnewNGRAnCellIdentityMultiError is an error wrapping multiple validation
// errors returned by IdnewNGRAnCellIdentity.ValidateAll() if the designated
// constraints aren't met.
type IdnewNGRAnCellIdentityMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdnewNGRAnCellIdentityMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdnewNGRAnCellIdentityMultiError) AllErrors() []error { return m }

// IdnewNGRAnCellIdentityValidationError is the validation error returned by
// IdnewNGRAnCellIdentity.Validate if the designated constraints aren't met.
type IdnewNGRAnCellIdentityValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdnewNGRAnCellIdentityValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdnewNGRAnCellIdentityValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdnewNGRAnCellIdentityValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdnewNGRAnCellIdentityValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdnewNGRAnCellIdentityValidationError) ErrorName() string {
	return "IdnewNGRAnCellIdentityValidationError"
}

// Error satisfies the builtin error interface
func (e IdnewNGRAnCellIdentityValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdnewNGRAnCellIdentity.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdnewNGRAnCellIdentityValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdnewNGRAnCellIdentityValidationError{}

// Validate checks the field values on IdnewNgRAnnodeUexnApid with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdnewNgRAnnodeUexnApid) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdnewNgRAnnodeUexnApid with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdnewNgRAnnodeUexnApidMultiError, or nil if none found.
func (m *IdnewNgRAnnodeUexnApid) ValidateAll() error {
	return m.validate(true)
}

func (m *IdnewNgRAnnodeUexnApid) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 27 {
		err := IdnewNgRAnnodeUexnApidValidationError{
			field:  "Value",
			reason: "value must equal 27",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdnewNgRAnnodeUexnApidMultiError(errors)
	}

	return nil
}

// IdnewNgRAnnodeUexnApidMultiError is an error wrapping multiple validation
// errors returned by IdnewNgRAnnodeUexnApid.ValidateAll() if the designated
// constraints aren't met.
type IdnewNgRAnnodeUexnApidMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdnewNgRAnnodeUexnApidMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdnewNgRAnnodeUexnApidMultiError) AllErrors() []error { return m }

// IdnewNgRAnnodeUexnApidValidationError is the validation error returned by
// IdnewNgRAnnodeUexnApid.Validate if the designated constraints aren't met.
type IdnewNgRAnnodeUexnApidValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdnewNgRAnnodeUexnApidValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdnewNgRAnnodeUexnApidValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdnewNgRAnnodeUexnApidValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdnewNgRAnnodeUexnApidValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdnewNgRAnnodeUexnApidValidationError) ErrorName() string {
	return "IdnewNgRAnnodeUexnApidValidationError"
}

// Error satisfies the builtin error interface
func (e IdnewNgRAnnodeUexnApidValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdnewNgRAnnodeUexnApid.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdnewNgRAnnodeUexnApidValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdnewNgRAnnodeUexnApidValidationError{}

// Validate checks the field values on IdUEreportRrctransfer with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdUEreportRrctransfer) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdUEreportRrctransfer with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdUEreportRrctransferMultiError, or nil if none found.
func (m *IdUEreportRrctransfer) ValidateAll() error {
	return m.validate(true)
}

func (m *IdUEreportRrctransfer) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 28 {
		err := IdUEreportRrctransferValidationError{
			field:  "Value",
			reason: "value must equal 28",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdUEreportRrctransferMultiError(errors)
	}

	return nil
}

// IdUEreportRrctransferMultiError is an error wrapping multiple validation
// errors returned by IdUEreportRrctransfer.ValidateAll() if the designated
// constraints aren't met.
type IdUEreportRrctransferMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdUEreportRrctransferMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdUEreportRrctransferMultiError) AllErrors() []error { return m }

// IdUEreportRrctransferValidationError is the validation error returned by
// IdUEreportRrctransfer.Validate if the designated constraints aren't met.
type IdUEreportRrctransferValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdUEreportRrctransferValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdUEreportRrctransferValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdUEreportRrctransferValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdUEreportRrctransferValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdUEreportRrctransferValidationError) ErrorName() string {
	return "IdUEreportRrctransferValidationError"
}

// Error satisfies the builtin error interface
func (e IdUEreportRrctransferValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdUEreportRrctransfer.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdUEreportRrctransferValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdUEreportRrctransferValidationError{}

// Validate checks the field values on IdoldNgRAnnodeUexnApid with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdoldNgRAnnodeUexnApid) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdoldNgRAnnodeUexnApid with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdoldNgRAnnodeUexnApidMultiError, or nil if none found.
func (m *IdoldNgRAnnodeUexnApid) ValidateAll() error {
	return m.validate(true)
}

func (m *IdoldNgRAnnodeUexnApid) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 29 {
		err := IdoldNgRAnnodeUexnApidValidationError{
			field:  "Value",
			reason: "value must equal 29",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdoldNgRAnnodeUexnApidMultiError(errors)
	}

	return nil
}

// IdoldNgRAnnodeUexnApidMultiError is an error wrapping multiple validation
// errors returned by IdoldNgRAnnodeUexnApid.ValidateAll() if the designated
// constraints aren't met.
type IdoldNgRAnnodeUexnApidMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdoldNgRAnnodeUexnApidMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdoldNgRAnnodeUexnApidMultiError) AllErrors() []error { return m }

// IdoldNgRAnnodeUexnApidValidationError is the validation error returned by
// IdoldNgRAnnodeUexnApid.Validate if the designated constraints aren't met.
type IdoldNgRAnnodeUexnApidValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdoldNgRAnnodeUexnApidValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdoldNgRAnnodeUexnApidValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdoldNgRAnnodeUexnApidValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdoldNgRAnnodeUexnApidValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdoldNgRAnnodeUexnApidValidationError) ErrorName() string {
	return "IdoldNgRAnnodeUexnApidValidationError"
}

// Error satisfies the builtin error interface
func (e IdoldNgRAnnodeUexnApidValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdoldNgRAnnodeUexnApid.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdoldNgRAnnodeUexnApidValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdoldNgRAnnodeUexnApidValidationError{}

// Validate checks the field values on IdOldtoNewNgRAnnodeResumeContainer with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *IdOldtoNewNgRAnnodeResumeContainer) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdOldtoNewNgRAnnodeResumeContainer
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// IdOldtoNewNgRAnnodeResumeContainerMultiError, or nil if none found.
func (m *IdOldtoNewNgRAnnodeResumeContainer) ValidateAll() error {
	return m.validate(true)
}

func (m *IdOldtoNewNgRAnnodeResumeContainer) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 30 {
		err := IdOldtoNewNgRAnnodeResumeContainerValidationError{
			field:  "Value",
			reason: "value must equal 30",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdOldtoNewNgRAnnodeResumeContainerMultiError(errors)
	}

	return nil
}

// IdOldtoNewNgRAnnodeResumeContainerMultiError is an error wrapping multiple
// validation errors returned by
// IdOldtoNewNgRAnnodeResumeContainer.ValidateAll() if the designated
// constraints aren't met.
type IdOldtoNewNgRAnnodeResumeContainerMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdOldtoNewNgRAnnodeResumeContainerMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdOldtoNewNgRAnnodeResumeContainerMultiError) AllErrors() []error { return m }

// IdOldtoNewNgRAnnodeResumeContainerValidationError is the validation error
// returned by IdOldtoNewNgRAnnodeResumeContainer.Validate if the designated
// constraints aren't met.
type IdOldtoNewNgRAnnodeResumeContainerValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdOldtoNewNgRAnnodeResumeContainerValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdOldtoNewNgRAnnodeResumeContainerValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdOldtoNewNgRAnnodeResumeContainerValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdOldtoNewNgRAnnodeResumeContainerValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdOldtoNewNgRAnnodeResumeContainerValidationError) ErrorName() string {
	return "IdOldtoNewNgRAnnodeResumeContainerValidationError"
}

// Error satisfies the builtin error interface
func (e IdOldtoNewNgRAnnodeResumeContainerValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdOldtoNewNgRAnnodeResumeContainer.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdOldtoNewNgRAnnodeResumeContainerValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdOldtoNewNgRAnnodeResumeContainerValidationError{}

// Validate checks the field values on IdPagingDrx with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *IdPagingDrx) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdPagingDrx with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in IdPagingDrxMultiError, or
// nil if none found.
func (m *IdPagingDrx) ValidateAll() error {
	return m.validate(true)
}

func (m *IdPagingDrx) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 31 {
		err := IdPagingDrxValidationError{
			field:  "Value",
			reason: "value must equal 31",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdPagingDrxMultiError(errors)
	}

	return nil
}

// IdPagingDrxMultiError is an error wrapping multiple validation errors
// returned by IdPagingDrx.ValidateAll() if the designated constraints aren't met.
type IdPagingDrxMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdPagingDrxMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdPagingDrxMultiError) AllErrors() []error { return m }

// IdPagingDrxValidationError is the validation error returned by
// IdPagingDrx.Validate if the designated constraints aren't met.
type IdPagingDrxValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdPagingDrxValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdPagingDrxValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdPagingDrxValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdPagingDrxValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdPagingDrxValidationError) ErrorName() string { return "IdPagingDrxValidationError" }

// Error satisfies the builtin error interface
func (e IdPagingDrxValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdPagingDrx.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdPagingDrxValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdPagingDrxValidationError{}

// Validate checks the field values on IdPCellId with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *IdPCellId) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdPCellId with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in IdPCellIdMultiError, or nil
// if none found.
func (m *IdPCellId) ValidateAll() error {
	return m.validate(true)
}

func (m *IdPCellId) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 32 {
		err := IdPCellIdValidationError{
			field:  "Value",
			reason: "value must equal 32",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdPCellIdMultiError(errors)
	}

	return nil
}

// IdPCellIdMultiError is an error wrapping multiple validation errors returned
// by IdPCellId.ValidateAll() if the designated constraints aren't met.
type IdPCellIdMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdPCellIdMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdPCellIdMultiError) AllErrors() []error { return m }

// IdPCellIdValidationError is the validation error returned by
// IdPCellId.Validate if the designated constraints aren't met.
type IdPCellIdValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdPCellIdValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdPCellIdValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdPCellIdValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdPCellIdValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdPCellIdValidationError) ErrorName() string { return "IdPCellIdValidationError" }

// Error satisfies the builtin error interface
func (e IdPCellIdValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdPCellId.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdPCellIdValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdPCellIdValidationError{}

// Validate checks the field values on IdPDcpchangeIndication with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdPDcpchangeIndication) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdPDcpchangeIndication with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdPDcpchangeIndicationMultiError, or nil if none found.
func (m *IdPDcpchangeIndication) ValidateAll() error {
	return m.validate(true)
}

func (m *IdPDcpchangeIndication) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 33 {
		err := IdPDcpchangeIndicationValidationError{
			field:  "Value",
			reason: "value must equal 33",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdPDcpchangeIndicationMultiError(errors)
	}

	return nil
}

// IdPDcpchangeIndicationMultiError is an error wrapping multiple validation
// errors returned by IdPDcpchangeIndication.ValidateAll() if the designated
// constraints aren't met.
type IdPDcpchangeIndicationMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdPDcpchangeIndicationMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdPDcpchangeIndicationMultiError) AllErrors() []error { return m }

// IdPDcpchangeIndicationValidationError is the validation error returned by
// IdPDcpchangeIndication.Validate if the designated constraints aren't met.
type IdPDcpchangeIndicationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdPDcpchangeIndicationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdPDcpchangeIndicationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdPDcpchangeIndicationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdPDcpchangeIndicationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdPDcpchangeIndicationValidationError) ErrorName() string {
	return "IdPDcpchangeIndicationValidationError"
}

// Error satisfies the builtin error interface
func (e IdPDcpchangeIndicationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdPDcpchangeIndication.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdPDcpchangeIndicationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdPDcpchangeIndicationValidationError{}

// Validate checks the field values on IdPDusessionAdmittedAddedAddReqAck with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *IdPDusessionAdmittedAddedAddReqAck) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdPDusessionAdmittedAddedAddReqAck
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// IdPDusessionAdmittedAddedAddReqAckMultiError, or nil if none found.
func (m *IdPDusessionAdmittedAddedAddReqAck) ValidateAll() error {
	return m.validate(true)
}

func (m *IdPDusessionAdmittedAddedAddReqAck) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 34 {
		err := IdPDusessionAdmittedAddedAddReqAckValidationError{
			field:  "Value",
			reason: "value must equal 34",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdPDusessionAdmittedAddedAddReqAckMultiError(errors)
	}

	return nil
}

// IdPDusessionAdmittedAddedAddReqAckMultiError is an error wrapping multiple
// validation errors returned by
// IdPDusessionAdmittedAddedAddReqAck.ValidateAll() if the designated
// constraints aren't met.
type IdPDusessionAdmittedAddedAddReqAckMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdPDusessionAdmittedAddedAddReqAckMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdPDusessionAdmittedAddedAddReqAckMultiError) AllErrors() []error { return m }

// IdPDusessionAdmittedAddedAddReqAckValidationError is the validation error
// returned by IdPDusessionAdmittedAddedAddReqAck.Validate if the designated
// constraints aren't met.
type IdPDusessionAdmittedAddedAddReqAckValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdPDusessionAdmittedAddedAddReqAckValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdPDusessionAdmittedAddedAddReqAckValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdPDusessionAdmittedAddedAddReqAckValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdPDusessionAdmittedAddedAddReqAckValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdPDusessionAdmittedAddedAddReqAckValidationError) ErrorName() string {
	return "IdPDusessionAdmittedAddedAddReqAckValidationError"
}

// Error satisfies the builtin error interface
func (e IdPDusessionAdmittedAddedAddReqAckValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdPDusessionAdmittedAddedAddReqAck.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdPDusessionAdmittedAddedAddReqAckValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdPDusessionAdmittedAddedAddReqAckValidationError{}

// Validate checks the field values on IdPDusessionAdmittedModSnmodConfirm with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *IdPDusessionAdmittedModSnmodConfirm) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdPDusessionAdmittedModSnmodConfirm
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// IdPDusessionAdmittedModSnmodConfirmMultiError, or nil if none found.
func (m *IdPDusessionAdmittedModSnmodConfirm) ValidateAll() error {
	return m.validate(true)
}

func (m *IdPDusessionAdmittedModSnmodConfirm) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 35 {
		err := IdPDusessionAdmittedModSnmodConfirmValidationError{
			field:  "Value",
			reason: "value must equal 35",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdPDusessionAdmittedModSnmodConfirmMultiError(errors)
	}

	return nil
}

// IdPDusessionAdmittedModSnmodConfirmMultiError is an error wrapping multiple
// validation errors returned by
// IdPDusessionAdmittedModSnmodConfirm.ValidateAll() if the designated
// constraints aren't met.
type IdPDusessionAdmittedModSnmodConfirmMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdPDusessionAdmittedModSnmodConfirmMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdPDusessionAdmittedModSnmodConfirmMultiError) AllErrors() []error { return m }

// IdPDusessionAdmittedModSnmodConfirmValidationError is the validation error
// returned by IdPDusessionAdmittedModSnmodConfirm.Validate if the designated
// constraints aren't met.
type IdPDusessionAdmittedModSnmodConfirmValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdPDusessionAdmittedModSnmodConfirmValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdPDusessionAdmittedModSnmodConfirmValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdPDusessionAdmittedModSnmodConfirmValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdPDusessionAdmittedModSnmodConfirmValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdPDusessionAdmittedModSnmodConfirmValidationError) ErrorName() string {
	return "IdPDusessionAdmittedModSnmodConfirmValidationError"
}

// Error satisfies the builtin error interface
func (e IdPDusessionAdmittedModSnmodConfirmValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdPDusessionAdmittedModSnmodConfirm.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdPDusessionAdmittedModSnmodConfirmValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdPDusessionAdmittedModSnmodConfirmValidationError{}

// Validate checks the field values on IdPDusessionAdmittedSNmodResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *IdPDusessionAdmittedSNmodResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdPDusessionAdmittedSNmodResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// IdPDusessionAdmittedSNmodResponseMultiError, or nil if none found.
func (m *IdPDusessionAdmittedSNmodResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *IdPDusessionAdmittedSNmodResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 36 {
		err := IdPDusessionAdmittedSNmodResponseValidationError{
			field:  "Value",
			reason: "value must equal 36",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdPDusessionAdmittedSNmodResponseMultiError(errors)
	}

	return nil
}

// IdPDusessionAdmittedSNmodResponseMultiError is an error wrapping multiple
// validation errors returned by
// IdPDusessionAdmittedSNmodResponse.ValidateAll() if the designated
// constraints aren't met.
type IdPDusessionAdmittedSNmodResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdPDusessionAdmittedSNmodResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdPDusessionAdmittedSNmodResponseMultiError) AllErrors() []error { return m }

// IdPDusessionAdmittedSNmodResponseValidationError is the validation error
// returned by IdPDusessionAdmittedSNmodResponse.Validate if the designated
// constraints aren't met.
type IdPDusessionAdmittedSNmodResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdPDusessionAdmittedSNmodResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdPDusessionAdmittedSNmodResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdPDusessionAdmittedSNmodResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdPDusessionAdmittedSNmodResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdPDusessionAdmittedSNmodResponseValidationError) ErrorName() string {
	return "IdPDusessionAdmittedSNmodResponseValidationError"
}

// Error satisfies the builtin error interface
func (e IdPDusessionAdmittedSNmodResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdPDusessionAdmittedSNmodResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdPDusessionAdmittedSNmodResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdPDusessionAdmittedSNmodResponseValidationError{}

// Validate checks the field values on IdPDusessionNotAdmittedAddReqAck with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *IdPDusessionNotAdmittedAddReqAck) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdPDusessionNotAdmittedAddReqAck with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// IdPDusessionNotAdmittedAddReqAckMultiError, or nil if none found.
func (m *IdPDusessionNotAdmittedAddReqAck) ValidateAll() error {
	return m.validate(true)
}

func (m *IdPDusessionNotAdmittedAddReqAck) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 37 {
		err := IdPDusessionNotAdmittedAddReqAckValidationError{
			field:  "Value",
			reason: "value must equal 37",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdPDusessionNotAdmittedAddReqAckMultiError(errors)
	}

	return nil
}

// IdPDusessionNotAdmittedAddReqAckMultiError is an error wrapping multiple
// validation errors returned by
// IdPDusessionNotAdmittedAddReqAck.ValidateAll() if the designated
// constraints aren't met.
type IdPDusessionNotAdmittedAddReqAckMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdPDusessionNotAdmittedAddReqAckMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdPDusessionNotAdmittedAddReqAckMultiError) AllErrors() []error { return m }

// IdPDusessionNotAdmittedAddReqAckValidationError is the validation error
// returned by IdPDusessionNotAdmittedAddReqAck.Validate if the designated
// constraints aren't met.
type IdPDusessionNotAdmittedAddReqAckValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdPDusessionNotAdmittedAddReqAckValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdPDusessionNotAdmittedAddReqAckValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdPDusessionNotAdmittedAddReqAckValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdPDusessionNotAdmittedAddReqAckValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdPDusessionNotAdmittedAddReqAckValidationError) ErrorName() string {
	return "IdPDusessionNotAdmittedAddReqAckValidationError"
}

// Error satisfies the builtin error interface
func (e IdPDusessionNotAdmittedAddReqAckValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdPDusessionNotAdmittedAddReqAck.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdPDusessionNotAdmittedAddReqAckValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdPDusessionNotAdmittedAddReqAckValidationError{}

// Validate checks the field values on IdPDusessionNotAdmittedSNmodResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *IdPDusessionNotAdmittedSNmodResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdPDusessionNotAdmittedSNmodResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// IdPDusessionNotAdmittedSNmodResponseMultiError, or nil if none found.
func (m *IdPDusessionNotAdmittedSNmodResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *IdPDusessionNotAdmittedSNmodResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 38 {
		err := IdPDusessionNotAdmittedSNmodResponseValidationError{
			field:  "Value",
			reason: "value must equal 38",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdPDusessionNotAdmittedSNmodResponseMultiError(errors)
	}

	return nil
}

// IdPDusessionNotAdmittedSNmodResponseMultiError is an error wrapping multiple
// validation errors returned by
// IdPDusessionNotAdmittedSNmodResponse.ValidateAll() if the designated
// constraints aren't met.
type IdPDusessionNotAdmittedSNmodResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdPDusessionNotAdmittedSNmodResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdPDusessionNotAdmittedSNmodResponseMultiError) AllErrors() []error { return m }

// IdPDusessionNotAdmittedSNmodResponseValidationError is the validation error
// returned by IdPDusessionNotAdmittedSNmodResponse.Validate if the designated
// constraints aren't met.
type IdPDusessionNotAdmittedSNmodResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdPDusessionNotAdmittedSNmodResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdPDusessionNotAdmittedSNmodResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdPDusessionNotAdmittedSNmodResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdPDusessionNotAdmittedSNmodResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdPDusessionNotAdmittedSNmodResponseValidationError) ErrorName() string {
	return "IdPDusessionNotAdmittedSNmodResponseValidationError"
}

// Error satisfies the builtin error interface
func (e IdPDusessionNotAdmittedSNmodResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdPDusessionNotAdmittedSNmodResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdPDusessionNotAdmittedSNmodResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdPDusessionNotAdmittedSNmodResponseValidationError{}

// Validate checks the field values on IdPDusessionReleasedListRelConf with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdPDusessionReleasedListRelConf) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdPDusessionReleasedListRelConf with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// IdPDusessionReleasedListRelConfMultiError, or nil if none found.
func (m *IdPDusessionReleasedListRelConf) ValidateAll() error {
	return m.validate(true)
}

func (m *IdPDusessionReleasedListRelConf) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 39 {
		err := IdPDusessionReleasedListRelConfValidationError{
			field:  "Value",
			reason: "value must equal 39",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdPDusessionReleasedListRelConfMultiError(errors)
	}

	return nil
}

// IdPDusessionReleasedListRelConfMultiError is an error wrapping multiple
// validation errors returned by IdPDusessionReleasedListRelConf.ValidateAll()
// if the designated constraints aren't met.
type IdPDusessionReleasedListRelConfMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdPDusessionReleasedListRelConfMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdPDusessionReleasedListRelConfMultiError) AllErrors() []error { return m }

// IdPDusessionReleasedListRelConfValidationError is the validation error
// returned by IdPDusessionReleasedListRelConf.Validate if the designated
// constraints aren't met.
type IdPDusessionReleasedListRelConfValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdPDusessionReleasedListRelConfValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdPDusessionReleasedListRelConfValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdPDusessionReleasedListRelConfValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdPDusessionReleasedListRelConfValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdPDusessionReleasedListRelConfValidationError) ErrorName() string {
	return "IdPDusessionReleasedListRelConfValidationError"
}

// Error satisfies the builtin error interface
func (e IdPDusessionReleasedListRelConfValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdPDusessionReleasedListRelConf.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdPDusessionReleasedListRelConfValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdPDusessionReleasedListRelConfValidationError{}

// Validate checks the field values on IdPDusessionReleasedSnmodConfirm with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *IdPDusessionReleasedSnmodConfirm) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdPDusessionReleasedSnmodConfirm with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// IdPDusessionReleasedSnmodConfirmMultiError, or nil if none found.
func (m *IdPDusessionReleasedSnmodConfirm) ValidateAll() error {
	return m.validate(true)
}

func (m *IdPDusessionReleasedSnmodConfirm) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 40 {
		err := IdPDusessionReleasedSnmodConfirmValidationError{
			field:  "Value",
			reason: "value must equal 40",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdPDusessionReleasedSnmodConfirmMultiError(errors)
	}

	return nil
}

// IdPDusessionReleasedSnmodConfirmMultiError is an error wrapping multiple
// validation errors returned by
// IdPDusessionReleasedSnmodConfirm.ValidateAll() if the designated
// constraints aren't met.
type IdPDusessionReleasedSnmodConfirmMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdPDusessionReleasedSnmodConfirmMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdPDusessionReleasedSnmodConfirmMultiError) AllErrors() []error { return m }

// IdPDusessionReleasedSnmodConfirmValidationError is the validation error
// returned by IdPDusessionReleasedSnmodConfirm.Validate if the designated
// constraints aren't met.
type IdPDusessionReleasedSnmodConfirmValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdPDusessionReleasedSnmodConfirmValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdPDusessionReleasedSnmodConfirmValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdPDusessionReleasedSnmodConfirmValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdPDusessionReleasedSnmodConfirmValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdPDusessionReleasedSnmodConfirmValidationError) ErrorName() string {
	return "IdPDusessionReleasedSnmodConfirmValidationError"
}

// Error satisfies the builtin error interface
func (e IdPDusessionReleasedSnmodConfirmValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdPDusessionReleasedSnmodConfirm.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdPDusessionReleasedSnmodConfirmValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdPDusessionReleasedSnmodConfirmValidationError{}

// Validate checks the field values on IdPDusessionResourcesActivityNotifyList
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *IdPDusessionResourcesActivityNotifyList) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// IdPDusessionResourcesActivityNotifyList with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// IdPDusessionResourcesActivityNotifyListMultiError, or nil if none found.
func (m *IdPDusessionResourcesActivityNotifyList) ValidateAll() error {
	return m.validate(true)
}

func (m *IdPDusessionResourcesActivityNotifyList) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 41 {
		err := IdPDusessionResourcesActivityNotifyListValidationError{
			field:  "Value",
			reason: "value must equal 41",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdPDusessionResourcesActivityNotifyListMultiError(errors)
	}

	return nil
}

// IdPDusessionResourcesActivityNotifyListMultiError is an error wrapping
// multiple validation errors returned by
// IdPDusessionResourcesActivityNotifyList.ValidateAll() if the designated
// constraints aren't met.
type IdPDusessionResourcesActivityNotifyListMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdPDusessionResourcesActivityNotifyListMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdPDusessionResourcesActivityNotifyListMultiError) AllErrors() []error { return m }

// IdPDusessionResourcesActivityNotifyListValidationError is the validation
// error returned by IdPDusessionResourcesActivityNotifyList.Validate if the
// designated constraints aren't met.
type IdPDusessionResourcesActivityNotifyListValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdPDusessionResourcesActivityNotifyListValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdPDusessionResourcesActivityNotifyListValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdPDusessionResourcesActivityNotifyListValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdPDusessionResourcesActivityNotifyListValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdPDusessionResourcesActivityNotifyListValidationError) ErrorName() string {
	return "IdPDusessionResourcesActivityNotifyListValidationError"
}

// Error satisfies the builtin error interface
func (e IdPDusessionResourcesActivityNotifyListValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdPDusessionResourcesActivityNotifyList.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdPDusessionResourcesActivityNotifyListValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdPDusessionResourcesActivityNotifyListValidationError{}

// Validate checks the field values on IdPDusessionResourcesAdmittedList with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *IdPDusessionResourcesAdmittedList) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdPDusessionResourcesAdmittedList
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// IdPDusessionResourcesAdmittedListMultiError, or nil if none found.
func (m *IdPDusessionResourcesAdmittedList) ValidateAll() error {
	return m.validate(true)
}

func (m *IdPDusessionResourcesAdmittedList) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 42 {
		err := IdPDusessionResourcesAdmittedListValidationError{
			field:  "Value",
			reason: "value must equal 42",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdPDusessionResourcesAdmittedListMultiError(errors)
	}

	return nil
}

// IdPDusessionResourcesAdmittedListMultiError is an error wrapping multiple
// validation errors returned by
// IdPDusessionResourcesAdmittedList.ValidateAll() if the designated
// constraints aren't met.
type IdPDusessionResourcesAdmittedListMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdPDusessionResourcesAdmittedListMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdPDusessionResourcesAdmittedListMultiError) AllErrors() []error { return m }

// IdPDusessionResourcesAdmittedListValidationError is the validation error
// returned by IdPDusessionResourcesAdmittedList.Validate if the designated
// constraints aren't met.
type IdPDusessionResourcesAdmittedListValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdPDusessionResourcesAdmittedListValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdPDusessionResourcesAdmittedListValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdPDusessionResourcesAdmittedListValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdPDusessionResourcesAdmittedListValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdPDusessionResourcesAdmittedListValidationError) ErrorName() string {
	return "IdPDusessionResourcesAdmittedListValidationError"
}

// Error satisfies the builtin error interface
func (e IdPDusessionResourcesAdmittedListValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdPDusessionResourcesAdmittedList.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdPDusessionResourcesAdmittedListValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdPDusessionResourcesAdmittedListValidationError{}

// Validate checks the field values on IdPDusessionResourcesNotAdmittedList
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *IdPDusessionResourcesNotAdmittedList) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdPDusessionResourcesNotAdmittedList
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// IdPDusessionResourcesNotAdmittedListMultiError, or nil if none found.
func (m *IdPDusessionResourcesNotAdmittedList) ValidateAll() error {
	return m.validate(true)
}

func (m *IdPDusessionResourcesNotAdmittedList) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 43 {
		err := IdPDusessionResourcesNotAdmittedListValidationError{
			field:  "Value",
			reason: "value must equal 43",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdPDusessionResourcesNotAdmittedListMultiError(errors)
	}

	return nil
}

// IdPDusessionResourcesNotAdmittedListMultiError is an error wrapping multiple
// validation errors returned by
// IdPDusessionResourcesNotAdmittedList.ValidateAll() if the designated
// constraints aren't met.
type IdPDusessionResourcesNotAdmittedListMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdPDusessionResourcesNotAdmittedListMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdPDusessionResourcesNotAdmittedListMultiError) AllErrors() []error { return m }

// IdPDusessionResourcesNotAdmittedListValidationError is the validation error
// returned by IdPDusessionResourcesNotAdmittedList.Validate if the designated
// constraints aren't met.
type IdPDusessionResourcesNotAdmittedListValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdPDusessionResourcesNotAdmittedListValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdPDusessionResourcesNotAdmittedListValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdPDusessionResourcesNotAdmittedListValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdPDusessionResourcesNotAdmittedListValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdPDusessionResourcesNotAdmittedListValidationError) ErrorName() string {
	return "IdPDusessionResourcesNotAdmittedListValidationError"
}

// Error satisfies the builtin error interface
func (e IdPDusessionResourcesNotAdmittedListValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdPDusessionResourcesNotAdmittedList.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdPDusessionResourcesNotAdmittedListValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdPDusessionResourcesNotAdmittedListValidationError{}

// Validate checks the field values on IdPDusessionResourcesNotifyList with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdPDusessionResourcesNotifyList) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdPDusessionResourcesNotifyList with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// IdPDusessionResourcesNotifyListMultiError, or nil if none found.
func (m *IdPDusessionResourcesNotifyList) ValidateAll() error {
	return m.validate(true)
}

func (m *IdPDusessionResourcesNotifyList) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 44 {
		err := IdPDusessionResourcesNotifyListValidationError{
			field:  "Value",
			reason: "value must equal 44",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdPDusessionResourcesNotifyListMultiError(errors)
	}

	return nil
}

// IdPDusessionResourcesNotifyListMultiError is an error wrapping multiple
// validation errors returned by IdPDusessionResourcesNotifyList.ValidateAll()
// if the designated constraints aren't met.
type IdPDusessionResourcesNotifyListMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdPDusessionResourcesNotifyListMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdPDusessionResourcesNotifyListMultiError) AllErrors() []error { return m }

// IdPDusessionResourcesNotifyListValidationError is the validation error
// returned by IdPDusessionResourcesNotifyList.Validate if the designated
// constraints aren't met.
type IdPDusessionResourcesNotifyListValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdPDusessionResourcesNotifyListValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdPDusessionResourcesNotifyListValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdPDusessionResourcesNotifyListValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdPDusessionResourcesNotifyListValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdPDusessionResourcesNotifyListValidationError) ErrorName() string {
	return "IdPDusessionResourcesNotifyListValidationError"
}

// Error satisfies the builtin error interface
func (e IdPDusessionResourcesNotifyListValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdPDusessionResourcesNotifyList.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdPDusessionResourcesNotifyListValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdPDusessionResourcesNotifyListValidationError{}

// Validate checks the field values on IdPDusessionSNchangeConfirmList with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdPDusessionSNchangeConfirmList) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdPDusessionSNchangeConfirmList with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// IdPDusessionSNchangeConfirmListMultiError, or nil if none found.
func (m *IdPDusessionSNchangeConfirmList) ValidateAll() error {
	return m.validate(true)
}

func (m *IdPDusessionSNchangeConfirmList) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 45 {
		err := IdPDusessionSNchangeConfirmListValidationError{
			field:  "Value",
			reason: "value must equal 45",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdPDusessionSNchangeConfirmListMultiError(errors)
	}

	return nil
}

// IdPDusessionSNchangeConfirmListMultiError is an error wrapping multiple
// validation errors returned by IdPDusessionSNchangeConfirmList.ValidateAll()
// if the designated constraints aren't met.
type IdPDusessionSNchangeConfirmListMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdPDusessionSNchangeConfirmListMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdPDusessionSNchangeConfirmListMultiError) AllErrors() []error { return m }

// IdPDusessionSNchangeConfirmListValidationError is the validation error
// returned by IdPDusessionSNchangeConfirmList.Validate if the designated
// constraints aren't met.
type IdPDusessionSNchangeConfirmListValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdPDusessionSNchangeConfirmListValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdPDusessionSNchangeConfirmListValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdPDusessionSNchangeConfirmListValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdPDusessionSNchangeConfirmListValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdPDusessionSNchangeConfirmListValidationError) ErrorName() string {
	return "IdPDusessionSNchangeConfirmListValidationError"
}

// Error satisfies the builtin error interface
func (e IdPDusessionSNchangeConfirmListValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdPDusessionSNchangeConfirmList.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdPDusessionSNchangeConfirmListValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdPDusessionSNchangeConfirmListValidationError{}

// Validate checks the field values on IdPDusessionSNchangeRequiredList with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *IdPDusessionSNchangeRequiredList) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdPDusessionSNchangeRequiredList with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// IdPDusessionSNchangeRequiredListMultiError, or nil if none found.
func (m *IdPDusessionSNchangeRequiredList) ValidateAll() error {
	return m.validate(true)
}

func (m *IdPDusessionSNchangeRequiredList) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 46 {
		err := IdPDusessionSNchangeRequiredListValidationError{
			field:  "Value",
			reason: "value must equal 46",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdPDusessionSNchangeRequiredListMultiError(errors)
	}

	return nil
}

// IdPDusessionSNchangeRequiredListMultiError is an error wrapping multiple
// validation errors returned by
// IdPDusessionSNchangeRequiredList.ValidateAll() if the designated
// constraints aren't met.
type IdPDusessionSNchangeRequiredListMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdPDusessionSNchangeRequiredListMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdPDusessionSNchangeRequiredListMultiError) AllErrors() []error { return m }

// IdPDusessionSNchangeRequiredListValidationError is the validation error
// returned by IdPDusessionSNchangeRequiredList.Validate if the designated
// constraints aren't met.
type IdPDusessionSNchangeRequiredListValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdPDusessionSNchangeRequiredListValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdPDusessionSNchangeRequiredListValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdPDusessionSNchangeRequiredListValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdPDusessionSNchangeRequiredListValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdPDusessionSNchangeRequiredListValidationError) ErrorName() string {
	return "IdPDusessionSNchangeRequiredListValidationError"
}

// Error satisfies the builtin error interface
func (e IdPDusessionSNchangeRequiredListValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdPDusessionSNchangeRequiredList.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdPDusessionSNchangeRequiredListValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdPDusessionSNchangeRequiredListValidationError{}

// Validate checks the field values on IdPDusessionToBeAddedAddReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdPDusessionToBeAddedAddReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdPDusessionToBeAddedAddReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdPDusessionToBeAddedAddReqMultiError, or nil if none found.
func (m *IdPDusessionToBeAddedAddReq) ValidateAll() error {
	return m.validate(true)
}

func (m *IdPDusessionToBeAddedAddReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 47 {
		err := IdPDusessionToBeAddedAddReqValidationError{
			field:  "Value",
			reason: "value must equal 47",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdPDusessionToBeAddedAddReqMultiError(errors)
	}

	return nil
}

// IdPDusessionToBeAddedAddReqMultiError is an error wrapping multiple
// validation errors returned by IdPDusessionToBeAddedAddReq.ValidateAll() if
// the designated constraints aren't met.
type IdPDusessionToBeAddedAddReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdPDusessionToBeAddedAddReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdPDusessionToBeAddedAddReqMultiError) AllErrors() []error { return m }

// IdPDusessionToBeAddedAddReqValidationError is the validation error returned
// by IdPDusessionToBeAddedAddReq.Validate if the designated constraints
// aren't met.
type IdPDusessionToBeAddedAddReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdPDusessionToBeAddedAddReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdPDusessionToBeAddedAddReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdPDusessionToBeAddedAddReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdPDusessionToBeAddedAddReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdPDusessionToBeAddedAddReqValidationError) ErrorName() string {
	return "IdPDusessionToBeAddedAddReqValidationError"
}

// Error satisfies the builtin error interface
func (e IdPDusessionToBeAddedAddReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdPDusessionToBeAddedAddReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdPDusessionToBeAddedAddReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdPDusessionToBeAddedAddReqValidationError{}

// Validate checks the field values on IdPDusessionToBeModifiedSnmodRequired
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *IdPDusessionToBeModifiedSnmodRequired) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdPDusessionToBeModifiedSnmodRequired
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// IdPDusessionToBeModifiedSnmodRequiredMultiError, or nil if none found.
func (m *IdPDusessionToBeModifiedSnmodRequired) ValidateAll() error {
	return m.validate(true)
}

func (m *IdPDusessionToBeModifiedSnmodRequired) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 48 {
		err := IdPDusessionToBeModifiedSnmodRequiredValidationError{
			field:  "Value",
			reason: "value must equal 48",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdPDusessionToBeModifiedSnmodRequiredMultiError(errors)
	}

	return nil
}

// IdPDusessionToBeModifiedSnmodRequiredMultiError is an error wrapping
// multiple validation errors returned by
// IdPDusessionToBeModifiedSnmodRequired.ValidateAll() if the designated
// constraints aren't met.
type IdPDusessionToBeModifiedSnmodRequiredMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdPDusessionToBeModifiedSnmodRequiredMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdPDusessionToBeModifiedSnmodRequiredMultiError) AllErrors() []error { return m }

// IdPDusessionToBeModifiedSnmodRequiredValidationError is the validation error
// returned by IdPDusessionToBeModifiedSnmodRequired.Validate if the
// designated constraints aren't met.
type IdPDusessionToBeModifiedSnmodRequiredValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdPDusessionToBeModifiedSnmodRequiredValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdPDusessionToBeModifiedSnmodRequiredValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdPDusessionToBeModifiedSnmodRequiredValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdPDusessionToBeModifiedSnmodRequiredValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdPDusessionToBeModifiedSnmodRequiredValidationError) ErrorName() string {
	return "IdPDusessionToBeModifiedSnmodRequiredValidationError"
}

// Error satisfies the builtin error interface
func (e IdPDusessionToBeModifiedSnmodRequiredValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdPDusessionToBeModifiedSnmodRequired.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdPDusessionToBeModifiedSnmodRequiredValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdPDusessionToBeModifiedSnmodRequiredValidationError{}

// Validate checks the field values on IdPDusessionToBeReleasedListRelRqd with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *IdPDusessionToBeReleasedListRelRqd) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdPDusessionToBeReleasedListRelRqd
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// IdPDusessionToBeReleasedListRelRqdMultiError, or nil if none found.
func (m *IdPDusessionToBeReleasedListRelRqd) ValidateAll() error {
	return m.validate(true)
}

func (m *IdPDusessionToBeReleasedListRelRqd) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 49 {
		err := IdPDusessionToBeReleasedListRelRqdValidationError{
			field:  "Value",
			reason: "value must equal 49",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdPDusessionToBeReleasedListRelRqdMultiError(errors)
	}

	return nil
}

// IdPDusessionToBeReleasedListRelRqdMultiError is an error wrapping multiple
// validation errors returned by
// IdPDusessionToBeReleasedListRelRqd.ValidateAll() if the designated
// constraints aren't met.
type IdPDusessionToBeReleasedListRelRqdMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdPDusessionToBeReleasedListRelRqdMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdPDusessionToBeReleasedListRelRqdMultiError) AllErrors() []error { return m }

// IdPDusessionToBeReleasedListRelRqdValidationError is the validation error
// returned by IdPDusessionToBeReleasedListRelRqd.Validate if the designated
// constraints aren't met.
type IdPDusessionToBeReleasedListRelRqdValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdPDusessionToBeReleasedListRelRqdValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdPDusessionToBeReleasedListRelRqdValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdPDusessionToBeReleasedListRelRqdValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdPDusessionToBeReleasedListRelRqdValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdPDusessionToBeReleasedListRelRqdValidationError) ErrorName() string {
	return "IdPDusessionToBeReleasedListRelRqdValidationError"
}

// Error satisfies the builtin error interface
func (e IdPDusessionToBeReleasedListRelRqdValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdPDusessionToBeReleasedListRelRqd.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdPDusessionToBeReleasedListRelRqdValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdPDusessionToBeReleasedListRelRqdValidationError{}

// Validate checks the field values on IdPDusessionToBeReleasedRelReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdPDusessionToBeReleasedRelReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdPDusessionToBeReleasedRelReq with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// IdPDusessionToBeReleasedRelReqMultiError, or nil if none found.
func (m *IdPDusessionToBeReleasedRelReq) ValidateAll() error {
	return m.validate(true)
}

func (m *IdPDusessionToBeReleasedRelReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 50 {
		err := IdPDusessionToBeReleasedRelReqValidationError{
			field:  "Value",
			reason: "value must equal 50",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdPDusessionToBeReleasedRelReqMultiError(errors)
	}

	return nil
}

// IdPDusessionToBeReleasedRelReqMultiError is an error wrapping multiple
// validation errors returned by IdPDusessionToBeReleasedRelReq.ValidateAll()
// if the designated constraints aren't met.
type IdPDusessionToBeReleasedRelReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdPDusessionToBeReleasedRelReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdPDusessionToBeReleasedRelReqMultiError) AllErrors() []error { return m }

// IdPDusessionToBeReleasedRelReqValidationError is the validation error
// returned by IdPDusessionToBeReleasedRelReq.Validate if the designated
// constraints aren't met.
type IdPDusessionToBeReleasedRelReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdPDusessionToBeReleasedRelReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdPDusessionToBeReleasedRelReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdPDusessionToBeReleasedRelReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdPDusessionToBeReleasedRelReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdPDusessionToBeReleasedRelReqValidationError) ErrorName() string {
	return "IdPDusessionToBeReleasedRelReqValidationError"
}

// Error satisfies the builtin error interface
func (e IdPDusessionToBeReleasedRelReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdPDusessionToBeReleasedRelReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdPDusessionToBeReleasedRelReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdPDusessionToBeReleasedRelReqValidationError{}

// Validate checks the field values on IdPDusessionToBeReleasedSnmodRequired
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *IdPDusessionToBeReleasedSnmodRequired) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdPDusessionToBeReleasedSnmodRequired
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// IdPDusessionToBeReleasedSnmodRequiredMultiError, or nil if none found.
func (m *IdPDusessionToBeReleasedSnmodRequired) ValidateAll() error {
	return m.validate(true)
}

func (m *IdPDusessionToBeReleasedSnmodRequired) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 51 {
		err := IdPDusessionToBeReleasedSnmodRequiredValidationError{
			field:  "Value",
			reason: "value must equal 51",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdPDusessionToBeReleasedSnmodRequiredMultiError(errors)
	}

	return nil
}

// IdPDusessionToBeReleasedSnmodRequiredMultiError is an error wrapping
// multiple validation errors returned by
// IdPDusessionToBeReleasedSnmodRequired.ValidateAll() if the designated
// constraints aren't met.
type IdPDusessionToBeReleasedSnmodRequiredMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdPDusessionToBeReleasedSnmodRequiredMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdPDusessionToBeReleasedSnmodRequiredMultiError) AllErrors() []error { return m }

// IdPDusessionToBeReleasedSnmodRequiredValidationError is the validation error
// returned by IdPDusessionToBeReleasedSnmodRequired.Validate if the
// designated constraints aren't met.
type IdPDusessionToBeReleasedSnmodRequiredValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdPDusessionToBeReleasedSnmodRequiredValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdPDusessionToBeReleasedSnmodRequiredValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdPDusessionToBeReleasedSnmodRequiredValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdPDusessionToBeReleasedSnmodRequiredValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdPDusessionToBeReleasedSnmodRequiredValidationError) ErrorName() string {
	return "IdPDusessionToBeReleasedSnmodRequiredValidationError"
}

// Error satisfies the builtin error interface
func (e IdPDusessionToBeReleasedSnmodRequiredValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdPDusessionToBeReleasedSnmodRequired.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdPDusessionToBeReleasedSnmodRequiredValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdPDusessionToBeReleasedSnmodRequiredValidationError{}

// Validate checks the field values on IdRAnpagingArea with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *IdRAnpagingArea) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdRAnpagingArea with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdRAnpagingAreaMultiError, or nil if none found.
func (m *IdRAnpagingArea) ValidateAll() error {
	return m.validate(true)
}

func (m *IdRAnpagingArea) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 52 {
		err := IdRAnpagingAreaValidationError{
			field:  "Value",
			reason: "value must equal 52",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdRAnpagingAreaMultiError(errors)
	}

	return nil
}

// IdRAnpagingAreaMultiError is an error wrapping multiple validation errors
// returned by IdRAnpagingArea.ValidateAll() if the designated constraints
// aren't met.
type IdRAnpagingAreaMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdRAnpagingAreaMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdRAnpagingAreaMultiError) AllErrors() []error { return m }

// IdRAnpagingAreaValidationError is the validation error returned by
// IdRAnpagingArea.Validate if the designated constraints aren't met.
type IdRAnpagingAreaValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdRAnpagingAreaValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdRAnpagingAreaValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdRAnpagingAreaValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdRAnpagingAreaValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdRAnpagingAreaValidationError) ErrorName() string { return "IdRAnpagingAreaValidationError" }

// Error satisfies the builtin error interface
func (e IdRAnpagingAreaValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdRAnpagingArea.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdRAnpagingAreaValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdRAnpagingAreaValidationError{}

// Validate checks the field values on IdPagingPriority with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *IdPagingPriority) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdPagingPriority with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdPagingPriorityMultiError, or nil if none found.
func (m *IdPagingPriority) ValidateAll() error {
	return m.validate(true)
}

func (m *IdPagingPriority) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 53 {
		err := IdPagingPriorityValidationError{
			field:  "Value",
			reason: "value must equal 53",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdPagingPriorityMultiError(errors)
	}

	return nil
}

// IdPagingPriorityMultiError is an error wrapping multiple validation errors
// returned by IdPagingPriority.ValidateAll() if the designated constraints
// aren't met.
type IdPagingPriorityMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdPagingPriorityMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdPagingPriorityMultiError) AllErrors() []error { return m }

// IdPagingPriorityValidationError is the validation error returned by
// IdPagingPriority.Validate if the designated constraints aren't met.
type IdPagingPriorityValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdPagingPriorityValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdPagingPriorityValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdPagingPriorityValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdPagingPriorityValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdPagingPriorityValidationError) ErrorName() string { return "IdPagingPriorityValidationError" }

// Error satisfies the builtin error interface
func (e IdPagingPriorityValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdPagingPriority.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdPagingPriorityValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdPagingPriorityValidationError{}

// Validate checks the field values on IdrequestedSplitSrb with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdrequestedSplitSrb) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdrequestedSplitSrb with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdrequestedSplitSrbMultiError, or nil if none found.
func (m *IdrequestedSplitSrb) ValidateAll() error {
	return m.validate(true)
}

func (m *IdrequestedSplitSrb) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 54 {
		err := IdrequestedSplitSrbValidationError{
			field:  "Value",
			reason: "value must equal 54",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdrequestedSplitSrbMultiError(errors)
	}

	return nil
}

// IdrequestedSplitSrbMultiError is an error wrapping multiple validation
// errors returned by IdrequestedSplitSrb.ValidateAll() if the designated
// constraints aren't met.
type IdrequestedSplitSrbMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdrequestedSplitSrbMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdrequestedSplitSrbMultiError) AllErrors() []error { return m }

// IdrequestedSplitSrbValidationError is the validation error returned by
// IdrequestedSplitSrb.Validate if the designated constraints aren't met.
type IdrequestedSplitSrbValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdrequestedSplitSrbValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdrequestedSplitSrbValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdrequestedSplitSrbValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdrequestedSplitSrbValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdrequestedSplitSrbValidationError) ErrorName() string {
	return "IdrequestedSplitSrbValidationError"
}

// Error satisfies the builtin error interface
func (e IdrequestedSplitSrbValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdrequestedSplitSrb.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdrequestedSplitSrbValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdrequestedSplitSrbValidationError{}

// Validate checks the field values on IdrequestedSplitSrbrelease with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdrequestedSplitSrbrelease) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdrequestedSplitSrbrelease with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdrequestedSplitSrbreleaseMultiError, or nil if none found.
func (m *IdrequestedSplitSrbrelease) ValidateAll() error {
	return m.validate(true)
}

func (m *IdrequestedSplitSrbrelease) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 55 {
		err := IdrequestedSplitSrbreleaseValidationError{
			field:  "Value",
			reason: "value must equal 55",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdrequestedSplitSrbreleaseMultiError(errors)
	}

	return nil
}

// IdrequestedSplitSrbreleaseMultiError is an error wrapping multiple
// validation errors returned by IdrequestedSplitSrbrelease.ValidateAll() if
// the designated constraints aren't met.
type IdrequestedSplitSrbreleaseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdrequestedSplitSrbreleaseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdrequestedSplitSrbreleaseMultiError) AllErrors() []error { return m }

// IdrequestedSplitSrbreleaseValidationError is the validation error returned
// by IdrequestedSplitSrbrelease.Validate if the designated constraints aren't met.
type IdrequestedSplitSrbreleaseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdrequestedSplitSrbreleaseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdrequestedSplitSrbreleaseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdrequestedSplitSrbreleaseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdrequestedSplitSrbreleaseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdrequestedSplitSrbreleaseValidationError) ErrorName() string {
	return "IdrequestedSplitSrbreleaseValidationError"
}

// Error satisfies the builtin error interface
func (e IdrequestedSplitSrbreleaseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdrequestedSplitSrbrelease.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdrequestedSplitSrbreleaseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdrequestedSplitSrbreleaseValidationError{}

// Validate checks the field values on IdResetRequestTypeInfo with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdResetRequestTypeInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdResetRequestTypeInfo with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdResetRequestTypeInfoMultiError, or nil if none found.
func (m *IdResetRequestTypeInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *IdResetRequestTypeInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 56 {
		err := IdResetRequestTypeInfoValidationError{
			field:  "Value",
			reason: "value must equal 56",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdResetRequestTypeInfoMultiError(errors)
	}

	return nil
}

// IdResetRequestTypeInfoMultiError is an error wrapping multiple validation
// errors returned by IdResetRequestTypeInfo.ValidateAll() if the designated
// constraints aren't met.
type IdResetRequestTypeInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdResetRequestTypeInfoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdResetRequestTypeInfoMultiError) AllErrors() []error { return m }

// IdResetRequestTypeInfoValidationError is the validation error returned by
// IdResetRequestTypeInfo.Validate if the designated constraints aren't met.
type IdResetRequestTypeInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdResetRequestTypeInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdResetRequestTypeInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdResetRequestTypeInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdResetRequestTypeInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdResetRequestTypeInfoValidationError) ErrorName() string {
	return "IdResetRequestTypeInfoValidationError"
}

// Error satisfies the builtin error interface
func (e IdResetRequestTypeInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdResetRequestTypeInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdResetRequestTypeInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdResetRequestTypeInfoValidationError{}

// Validate checks the field values on IdResetResponseTypeInfo with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdResetResponseTypeInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdResetResponseTypeInfo with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdResetResponseTypeInfoMultiError, or nil if none found.
func (m *IdResetResponseTypeInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *IdResetResponseTypeInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 57 {
		err := IdResetResponseTypeInfoValidationError{
			field:  "Value",
			reason: "value must equal 57",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdResetResponseTypeInfoMultiError(errors)
	}

	return nil
}

// IdResetResponseTypeInfoMultiError is an error wrapping multiple validation
// errors returned by IdResetResponseTypeInfo.ValidateAll() if the designated
// constraints aren't met.
type IdResetResponseTypeInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdResetResponseTypeInfoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdResetResponseTypeInfoMultiError) AllErrors() []error { return m }

// IdResetResponseTypeInfoValidationError is the validation error returned by
// IdResetResponseTypeInfo.Validate if the designated constraints aren't met.
type IdResetResponseTypeInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdResetResponseTypeInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdResetResponseTypeInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdResetResponseTypeInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdResetResponseTypeInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdResetResponseTypeInfoValidationError) ErrorName() string {
	return "IdResetResponseTypeInfoValidationError"
}

// Error satisfies the builtin error interface
func (e IdResetResponseTypeInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdResetResponseTypeInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdResetResponseTypeInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdResetResponseTypeInfoValidationError{}

// Validate checks the field values on IdRespondingNodeTypeConfigUpdateAck with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *IdRespondingNodeTypeConfigUpdateAck) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdRespondingNodeTypeConfigUpdateAck
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// IdRespondingNodeTypeConfigUpdateAckMultiError, or nil if none found.
func (m *IdRespondingNodeTypeConfigUpdateAck) ValidateAll() error {
	return m.validate(true)
}

func (m *IdRespondingNodeTypeConfigUpdateAck) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 58 {
		err := IdRespondingNodeTypeConfigUpdateAckValidationError{
			field:  "Value",
			reason: "value must equal 58",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdRespondingNodeTypeConfigUpdateAckMultiError(errors)
	}

	return nil
}

// IdRespondingNodeTypeConfigUpdateAckMultiError is an error wrapping multiple
// validation errors returned by
// IdRespondingNodeTypeConfigUpdateAck.ValidateAll() if the designated
// constraints aren't met.
type IdRespondingNodeTypeConfigUpdateAckMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdRespondingNodeTypeConfigUpdateAckMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdRespondingNodeTypeConfigUpdateAckMultiError) AllErrors() []error { return m }

// IdRespondingNodeTypeConfigUpdateAckValidationError is the validation error
// returned by IdRespondingNodeTypeConfigUpdateAck.Validate if the designated
// constraints aren't met.
type IdRespondingNodeTypeConfigUpdateAckValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdRespondingNodeTypeConfigUpdateAckValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdRespondingNodeTypeConfigUpdateAckValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdRespondingNodeTypeConfigUpdateAckValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdRespondingNodeTypeConfigUpdateAckValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdRespondingNodeTypeConfigUpdateAckValidationError) ErrorName() string {
	return "IdRespondingNodeTypeConfigUpdateAckValidationError"
}

// Error satisfies the builtin error interface
func (e IdRespondingNodeTypeConfigUpdateAckValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdRespondingNodeTypeConfigUpdateAck.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdRespondingNodeTypeConfigUpdateAckValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdRespondingNodeTypeConfigUpdateAckValidationError{}

// Validate checks the field values on
// IdrespondingNodeTypeResourceCoordResponse with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *IdrespondingNodeTypeResourceCoordResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// IdrespondingNodeTypeResourceCoordResponse with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// IdrespondingNodeTypeResourceCoordResponseMultiError, or nil if none found.
func (m *IdrespondingNodeTypeResourceCoordResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *IdrespondingNodeTypeResourceCoordResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 59 {
		err := IdrespondingNodeTypeResourceCoordResponseValidationError{
			field:  "Value",
			reason: "value must equal 59",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdrespondingNodeTypeResourceCoordResponseMultiError(errors)
	}

	return nil
}

// IdrespondingNodeTypeResourceCoordResponseMultiError is an error wrapping
// multiple validation errors returned by
// IdrespondingNodeTypeResourceCoordResponse.ValidateAll() if the designated
// constraints aren't met.
type IdrespondingNodeTypeResourceCoordResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdrespondingNodeTypeResourceCoordResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdrespondingNodeTypeResourceCoordResponseMultiError) AllErrors() []error { return m }

// IdrespondingNodeTypeResourceCoordResponseValidationError is the validation
// error returned by IdrespondingNodeTypeResourceCoordResponse.Validate if the
// designated constraints aren't met.
type IdrespondingNodeTypeResourceCoordResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdrespondingNodeTypeResourceCoordResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdrespondingNodeTypeResourceCoordResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdrespondingNodeTypeResourceCoordResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdrespondingNodeTypeResourceCoordResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdrespondingNodeTypeResourceCoordResponseValidationError) ErrorName() string {
	return "IdrespondingNodeTypeResourceCoordResponseValidationError"
}

// Error satisfies the builtin error interface
func (e IdrespondingNodeTypeResourceCoordResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdrespondingNodeTypeResourceCoordResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdrespondingNodeTypeResourceCoordResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdrespondingNodeTypeResourceCoordResponseValidationError{}

// Validate checks the field values on IdResponseInfoReconfCompl with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdResponseInfoReconfCompl) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdResponseInfoReconfCompl with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdResponseInfoReconfComplMultiError, or nil if none found.
func (m *IdResponseInfoReconfCompl) ValidateAll() error {
	return m.validate(true)
}

func (m *IdResponseInfoReconfCompl) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 60 {
		err := IdResponseInfoReconfComplValidationError{
			field:  "Value",
			reason: "value must equal 60",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdResponseInfoReconfComplMultiError(errors)
	}

	return nil
}

// IdResponseInfoReconfComplMultiError is an error wrapping multiple validation
// errors returned by IdResponseInfoReconfCompl.ValidateAll() if the
// designated constraints aren't met.
type IdResponseInfoReconfComplMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdResponseInfoReconfComplMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdResponseInfoReconfComplMultiError) AllErrors() []error { return m }

// IdResponseInfoReconfComplValidationError is the validation error returned by
// IdResponseInfoReconfCompl.Validate if the designated constraints aren't met.
type IdResponseInfoReconfComplValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdResponseInfoReconfComplValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdResponseInfoReconfComplValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdResponseInfoReconfComplValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdResponseInfoReconfComplValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdResponseInfoReconfComplValidationError) ErrorName() string {
	return "IdResponseInfoReconfComplValidationError"
}

// Error satisfies the builtin error interface
func (e IdResponseInfoReconfComplValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdResponseInfoReconfCompl.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdResponseInfoReconfComplValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdResponseInfoReconfComplValidationError{}

// Validate checks the field values on IdRRcconfigIndication with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdRRcconfigIndication) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdRRcconfigIndication with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdRRcconfigIndicationMultiError, or nil if none found.
func (m *IdRRcconfigIndication) ValidateAll() error {
	return m.validate(true)
}

func (m *IdRRcconfigIndication) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 61 {
		err := IdRRcconfigIndicationValidationError{
			field:  "Value",
			reason: "value must equal 61",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdRRcconfigIndicationMultiError(errors)
	}

	return nil
}

// IdRRcconfigIndicationMultiError is an error wrapping multiple validation
// errors returned by IdRRcconfigIndication.ValidateAll() if the designated
// constraints aren't met.
type IdRRcconfigIndicationMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdRRcconfigIndicationMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdRRcconfigIndicationMultiError) AllErrors() []error { return m }

// IdRRcconfigIndicationValidationError is the validation error returned by
// IdRRcconfigIndication.Validate if the designated constraints aren't met.
type IdRRcconfigIndicationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdRRcconfigIndicationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdRRcconfigIndicationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdRRcconfigIndicationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdRRcconfigIndicationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdRRcconfigIndicationValidationError) ErrorName() string {
	return "IdRRcconfigIndicationValidationError"
}

// Error satisfies the builtin error interface
func (e IdRRcconfigIndicationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdRRcconfigIndication.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdRRcconfigIndicationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdRRcconfigIndicationValidationError{}

// Validate checks the field values on IdRRcresumeCause with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *IdRRcresumeCause) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdRRcresumeCause with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdRRcresumeCauseMultiError, or nil if none found.
func (m *IdRRcresumeCause) ValidateAll() error {
	return m.validate(true)
}

func (m *IdRRcresumeCause) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 62 {
		err := IdRRcresumeCauseValidationError{
			field:  "Value",
			reason: "value must equal 62",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdRRcresumeCauseMultiError(errors)
	}

	return nil
}

// IdRRcresumeCauseMultiError is an error wrapping multiple validation errors
// returned by IdRRcresumeCause.ValidateAll() if the designated constraints
// aren't met.
type IdRRcresumeCauseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdRRcresumeCauseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdRRcresumeCauseMultiError) AllErrors() []error { return m }

// IdRRcresumeCauseValidationError is the validation error returned by
// IdRRcresumeCause.Validate if the designated constraints aren't met.
type IdRRcresumeCauseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdRRcresumeCauseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdRRcresumeCauseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdRRcresumeCauseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdRRcresumeCauseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdRRcresumeCauseValidationError) ErrorName() string { return "IdRRcresumeCauseValidationError" }

// Error satisfies the builtin error interface
func (e IdRRcresumeCauseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdRRcresumeCause.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdRRcresumeCauseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdRRcresumeCauseValidationError{}

// Validate checks the field values on IdSCgconfigurationQuery with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdSCgconfigurationQuery) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdSCgconfigurationQuery with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdSCgconfigurationQueryMultiError, or nil if none found.
func (m *IdSCgconfigurationQuery) ValidateAll() error {
	return m.validate(true)
}

func (m *IdSCgconfigurationQuery) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 63 {
		err := IdSCgconfigurationQueryValidationError{
			field:  "Value",
			reason: "value must equal 63",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdSCgconfigurationQueryMultiError(errors)
	}

	return nil
}

// IdSCgconfigurationQueryMultiError is an error wrapping multiple validation
// errors returned by IdSCgconfigurationQuery.ValidateAll() if the designated
// constraints aren't met.
type IdSCgconfigurationQueryMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdSCgconfigurationQueryMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdSCgconfigurationQueryMultiError) AllErrors() []error { return m }

// IdSCgconfigurationQueryValidationError is the validation error returned by
// IdSCgconfigurationQuery.Validate if the designated constraints aren't met.
type IdSCgconfigurationQueryValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdSCgconfigurationQueryValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdSCgconfigurationQueryValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdSCgconfigurationQueryValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdSCgconfigurationQueryValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdSCgconfigurationQueryValidationError) ErrorName() string {
	return "IdSCgconfigurationQueryValidationError"
}

// Error satisfies the builtin error interface
func (e IdSCgconfigurationQueryValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdSCgconfigurationQuery.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdSCgconfigurationQueryValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdSCgconfigurationQueryValidationError{}

// Validate checks the field values on IdselectedPlmn with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *IdselectedPlmn) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdselectedPlmn with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in IdselectedPlmnMultiError,
// or nil if none found.
func (m *IdselectedPlmn) ValidateAll() error {
	return m.validate(true)
}

func (m *IdselectedPlmn) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 64 {
		err := IdselectedPlmnValidationError{
			field:  "Value",
			reason: "value must equal 64",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdselectedPlmnMultiError(errors)
	}

	return nil
}

// IdselectedPlmnMultiError is an error wrapping multiple validation errors
// returned by IdselectedPlmn.ValidateAll() if the designated constraints
// aren't met.
type IdselectedPlmnMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdselectedPlmnMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdselectedPlmnMultiError) AllErrors() []error { return m }

// IdselectedPlmnValidationError is the validation error returned by
// IdselectedPlmn.Validate if the designated constraints aren't met.
type IdselectedPlmnValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdselectedPlmnValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdselectedPlmnValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdselectedPlmnValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdselectedPlmnValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdselectedPlmnValidationError) ErrorName() string { return "IdselectedPlmnValidationError" }

// Error satisfies the builtin error interface
func (e IdselectedPlmnValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdselectedPlmn.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdselectedPlmnValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdselectedPlmnValidationError{}

// Validate checks the field values on IdServedCellsToActivate with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdServedCellsToActivate) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdServedCellsToActivate with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdServedCellsToActivateMultiError, or nil if none found.
func (m *IdServedCellsToActivate) ValidateAll() error {
	return m.validate(true)
}

func (m *IdServedCellsToActivate) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 65 {
		err := IdServedCellsToActivateValidationError{
			field:  "Value",
			reason: "value must equal 65",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdServedCellsToActivateMultiError(errors)
	}

	return nil
}

// IdServedCellsToActivateMultiError is an error wrapping multiple validation
// errors returned by IdServedCellsToActivate.ValidateAll() if the designated
// constraints aren't met.
type IdServedCellsToActivateMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdServedCellsToActivateMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdServedCellsToActivateMultiError) AllErrors() []error { return m }

// IdServedCellsToActivateValidationError is the validation error returned by
// IdServedCellsToActivate.Validate if the designated constraints aren't met.
type IdServedCellsToActivateValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdServedCellsToActivateValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdServedCellsToActivateValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdServedCellsToActivateValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdServedCellsToActivateValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdServedCellsToActivateValidationError) ErrorName() string {
	return "IdServedCellsToActivateValidationError"
}

// Error satisfies the builtin error interface
func (e IdServedCellsToActivateValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdServedCellsToActivate.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdServedCellsToActivateValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdServedCellsToActivateValidationError{}

// Validate checks the field values on IdservedCellsToUpdateEUTra with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdservedCellsToUpdateEUTra) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdservedCellsToUpdateEUTra with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdservedCellsToUpdateEUTraMultiError, or nil if none found.
func (m *IdservedCellsToUpdateEUTra) ValidateAll() error {
	return m.validate(true)
}

func (m *IdservedCellsToUpdateEUTra) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 66 {
		err := IdservedCellsToUpdateEUTraValidationError{
			field:  "Value",
			reason: "value must equal 66",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdservedCellsToUpdateEUTraMultiError(errors)
	}

	return nil
}

// IdservedCellsToUpdateEUTraMultiError is an error wrapping multiple
// validation errors returned by IdservedCellsToUpdateEUTra.ValidateAll() if
// the designated constraints aren't met.
type IdservedCellsToUpdateEUTraMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdservedCellsToUpdateEUTraMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdservedCellsToUpdateEUTraMultiError) AllErrors() []error { return m }

// IdservedCellsToUpdateEUTraValidationError is the validation error returned
// by IdservedCellsToUpdateEUTra.Validate if the designated constraints aren't met.
type IdservedCellsToUpdateEUTraValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdservedCellsToUpdateEUTraValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdservedCellsToUpdateEUTraValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdservedCellsToUpdateEUTraValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdservedCellsToUpdateEUTraValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdservedCellsToUpdateEUTraValidationError) ErrorName() string {
	return "IdservedCellsToUpdateEUTraValidationError"
}

// Error satisfies the builtin error interface
func (e IdservedCellsToUpdateEUTraValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdservedCellsToUpdateEUTra.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdservedCellsToUpdateEUTraValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdservedCellsToUpdateEUTraValidationError{}

// Validate checks the field values on
// IdServedCellsToUpdateInitiatingNodeChoice with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *IdServedCellsToUpdateInitiatingNodeChoice) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// IdServedCellsToUpdateInitiatingNodeChoice with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// IdServedCellsToUpdateInitiatingNodeChoiceMultiError, or nil if none found.
func (m *IdServedCellsToUpdateInitiatingNodeChoice) ValidateAll() error {
	return m.validate(true)
}

func (m *IdServedCellsToUpdateInitiatingNodeChoice) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 67 {
		err := IdServedCellsToUpdateInitiatingNodeChoiceValidationError{
			field:  "Value",
			reason: "value must equal 67",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdServedCellsToUpdateInitiatingNodeChoiceMultiError(errors)
	}

	return nil
}

// IdServedCellsToUpdateInitiatingNodeChoiceMultiError is an error wrapping
// multiple validation errors returned by
// IdServedCellsToUpdateInitiatingNodeChoice.ValidateAll() if the designated
// constraints aren't met.
type IdServedCellsToUpdateInitiatingNodeChoiceMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdServedCellsToUpdateInitiatingNodeChoiceMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdServedCellsToUpdateInitiatingNodeChoiceMultiError) AllErrors() []error { return m }

// IdServedCellsToUpdateInitiatingNodeChoiceValidationError is the validation
// error returned by IdServedCellsToUpdateInitiatingNodeChoice.Validate if the
// designated constraints aren't met.
type IdServedCellsToUpdateInitiatingNodeChoiceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdServedCellsToUpdateInitiatingNodeChoiceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdServedCellsToUpdateInitiatingNodeChoiceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdServedCellsToUpdateInitiatingNodeChoiceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdServedCellsToUpdateInitiatingNodeChoiceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdServedCellsToUpdateInitiatingNodeChoiceValidationError) ErrorName() string {
	return "IdServedCellsToUpdateInitiatingNodeChoiceValidationError"
}

// Error satisfies the builtin error interface
func (e IdServedCellsToUpdateInitiatingNodeChoiceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdServedCellsToUpdateInitiatingNodeChoice.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdServedCellsToUpdateInitiatingNodeChoiceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdServedCellsToUpdateInitiatingNodeChoiceValidationError{}

// Validate checks the field values on IdservedCellsToUpdateNR with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdservedCellsToUpdateNR) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdservedCellsToUpdateNR with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdservedCellsToUpdateNRMultiError, or nil if none found.
func (m *IdservedCellsToUpdateNR) ValidateAll() error {
	return m.validate(true)
}

func (m *IdservedCellsToUpdateNR) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 68 {
		err := IdservedCellsToUpdateNRValidationError{
			field:  "Value",
			reason: "value must equal 68",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdservedCellsToUpdateNRMultiError(errors)
	}

	return nil
}

// IdservedCellsToUpdateNRMultiError is an error wrapping multiple validation
// errors returned by IdservedCellsToUpdateNR.ValidateAll() if the designated
// constraints aren't met.
type IdservedCellsToUpdateNRMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdservedCellsToUpdateNRMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdservedCellsToUpdateNRMultiError) AllErrors() []error { return m }

// IdservedCellsToUpdateNRValidationError is the validation error returned by
// IdservedCellsToUpdateNR.Validate if the designated constraints aren't met.
type IdservedCellsToUpdateNRValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdservedCellsToUpdateNRValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdservedCellsToUpdateNRValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdservedCellsToUpdateNRValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdservedCellsToUpdateNRValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdservedCellsToUpdateNRValidationError) ErrorName() string {
	return "IdservedCellsToUpdateNRValidationError"
}

// Error satisfies the builtin error interface
func (e IdservedCellsToUpdateNRValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdservedCellsToUpdateNR.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdservedCellsToUpdateNRValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdservedCellsToUpdateNRValidationError{}

// Validate checks the field values on IdsngRAnnodeSecurityKey with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdsngRAnnodeSecurityKey) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdsngRAnnodeSecurityKey with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdsngRAnnodeSecurityKeyMultiError, or nil if none found.
func (m *IdsngRAnnodeSecurityKey) ValidateAll() error {
	return m.validate(true)
}

func (m *IdsngRAnnodeSecurityKey) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 69 {
		err := IdsngRAnnodeSecurityKeyValidationError{
			field:  "Value",
			reason: "value must equal 69",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdsngRAnnodeSecurityKeyMultiError(errors)
	}

	return nil
}

// IdsngRAnnodeSecurityKeyMultiError is an error wrapping multiple validation
// errors returned by IdsngRAnnodeSecurityKey.ValidateAll() if the designated
// constraints aren't met.
type IdsngRAnnodeSecurityKeyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdsngRAnnodeSecurityKeyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdsngRAnnodeSecurityKeyMultiError) AllErrors() []error { return m }

// IdsngRAnnodeSecurityKeyValidationError is the validation error returned by
// IdsngRAnnodeSecurityKey.Validate if the designated constraints aren't met.
type IdsngRAnnodeSecurityKeyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdsngRAnnodeSecurityKeyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdsngRAnnodeSecurityKeyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdsngRAnnodeSecurityKeyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdsngRAnnodeSecurityKeyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdsngRAnnodeSecurityKeyValidationError) ErrorName() string {
	return "IdsngRAnnodeSecurityKeyValidationError"
}

// Error satisfies the builtin error interface
func (e IdsngRAnnodeSecurityKeyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdsngRAnnodeSecurityKey.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdsngRAnnodeSecurityKeyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdsngRAnnodeSecurityKeyValidationError{}

// Validate checks the field values on IdSNGRAnnodeUeAMbr with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdSNGRAnnodeUeAMbr) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdSNGRAnnodeUeAMbr with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdSNGRAnnodeUeAMbrMultiError, or nil if none found.
func (m *IdSNGRAnnodeUeAMbr) ValidateAll() error {
	return m.validate(true)
}

func (m *IdSNGRAnnodeUeAMbr) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 70 {
		err := IdSNGRAnnodeUeAMbrValidationError{
			field:  "Value",
			reason: "value must equal 70",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdSNGRAnnodeUeAMbrMultiError(errors)
	}

	return nil
}

// IdSNGRAnnodeUeAMbrMultiError is an error wrapping multiple validation errors
// returned by IdSNGRAnnodeUeAMbr.ValidateAll() if the designated constraints
// aren't met.
type IdSNGRAnnodeUeAMbrMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdSNGRAnnodeUeAMbrMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdSNGRAnnodeUeAMbrMultiError) AllErrors() []error { return m }

// IdSNGRAnnodeUeAMbrValidationError is the validation error returned by
// IdSNGRAnnodeUeAMbr.Validate if the designated constraints aren't met.
type IdSNGRAnnodeUeAMbrValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdSNGRAnnodeUeAMbrValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdSNGRAnnodeUeAMbrValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdSNGRAnnodeUeAMbrValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdSNGRAnnodeUeAMbrValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdSNGRAnnodeUeAMbrValidationError) ErrorName() string {
	return "IdSNGRAnnodeUeAMbrValidationError"
}

// Error satisfies the builtin error interface
func (e IdSNGRAnnodeUeAMbrValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdSNGRAnnodeUeAMbr.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdSNGRAnnodeUeAMbrValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdSNGRAnnodeUeAMbrValidationError{}

// Validate checks the field values on IdSNGRAnnodeUexnApid with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdSNGRAnnodeUexnApid) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdSNGRAnnodeUexnApid with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdSNGRAnnodeUexnApidMultiError, or nil if none found.
func (m *IdSNGRAnnodeUexnApid) ValidateAll() error {
	return m.validate(true)
}

func (m *IdSNGRAnnodeUexnApid) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 71 {
		err := IdSNGRAnnodeUexnApidValidationError{
			field:  "Value",
			reason: "value must equal 71",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdSNGRAnnodeUexnApidMultiError(errors)
	}

	return nil
}

// IdSNGRAnnodeUexnApidMultiError is an error wrapping multiple validation
// errors returned by IdSNGRAnnodeUexnApid.ValidateAll() if the designated
// constraints aren't met.
type IdSNGRAnnodeUexnApidMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdSNGRAnnodeUexnApidMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdSNGRAnnodeUexnApidMultiError) AllErrors() []error { return m }

// IdSNGRAnnodeUexnApidValidationError is the validation error returned by
// IdSNGRAnnodeUexnApid.Validate if the designated constraints aren't met.
type IdSNGRAnnodeUexnApidValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdSNGRAnnodeUexnApidValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdSNGRAnnodeUexnApidValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdSNGRAnnodeUexnApidValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdSNGRAnnodeUexnApidValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdSNGRAnnodeUexnApidValidationError) ErrorName() string {
	return "IdSNGRAnnodeUexnApidValidationError"
}

// Error satisfies the builtin error interface
func (e IdSNGRAnnodeUexnApidValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdSNGRAnnodeUexnApid.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdSNGRAnnodeUexnApidValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdSNGRAnnodeUexnApidValidationError{}

// Validate checks the field values on IdSNtoMNContainer with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *IdSNtoMNContainer) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdSNtoMNContainer with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdSNtoMNContainerMultiError, or nil if none found.
func (m *IdSNtoMNContainer) ValidateAll() error {
	return m.validate(true)
}

func (m *IdSNtoMNContainer) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 72 {
		err := IdSNtoMNContainerValidationError{
			field:  "Value",
			reason: "value must equal 72",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdSNtoMNContainerMultiError(errors)
	}

	return nil
}

// IdSNtoMNContainerMultiError is an error wrapping multiple validation errors
// returned by IdSNtoMNContainer.ValidateAll() if the designated constraints
// aren't met.
type IdSNtoMNContainerMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdSNtoMNContainerMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdSNtoMNContainerMultiError) AllErrors() []error { return m }

// IdSNtoMNContainerValidationError is the validation error returned by
// IdSNtoMNContainer.Validate if the designated constraints aren't met.
type IdSNtoMNContainerValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdSNtoMNContainerValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdSNtoMNContainerValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdSNtoMNContainerValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdSNtoMNContainerValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdSNtoMNContainerValidationError) ErrorName() string {
	return "IdSNtoMNContainerValidationError"
}

// Error satisfies the builtin error interface
func (e IdSNtoMNContainerValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdSNtoMNContainer.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdSNtoMNContainerValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdSNtoMNContainerValidationError{}

// Validate checks the field values on IdsourceNgRAnnodeUexnApid with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdsourceNgRAnnodeUexnApid) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdsourceNgRAnnodeUexnApid with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdsourceNgRAnnodeUexnApidMultiError, or nil if none found.
func (m *IdsourceNgRAnnodeUexnApid) ValidateAll() error {
	return m.validate(true)
}

func (m *IdsourceNgRAnnodeUexnApid) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 73 {
		err := IdsourceNgRAnnodeUexnApidValidationError{
			field:  "Value",
			reason: "value must equal 73",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdsourceNgRAnnodeUexnApidMultiError(errors)
	}

	return nil
}

// IdsourceNgRAnnodeUexnApidMultiError is an error wrapping multiple validation
// errors returned by IdsourceNgRAnnodeUexnApid.ValidateAll() if the
// designated constraints aren't met.
type IdsourceNgRAnnodeUexnApidMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdsourceNgRAnnodeUexnApidMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdsourceNgRAnnodeUexnApidMultiError) AllErrors() []error { return m }

// IdsourceNgRAnnodeUexnApidValidationError is the validation error returned by
// IdsourceNgRAnnodeUexnApid.Validate if the designated constraints aren't met.
type IdsourceNgRAnnodeUexnApidValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdsourceNgRAnnodeUexnApidValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdsourceNgRAnnodeUexnApidValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdsourceNgRAnnodeUexnApidValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdsourceNgRAnnodeUexnApidValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdsourceNgRAnnodeUexnApidValidationError) ErrorName() string {
	return "IdsourceNgRAnnodeUexnApidValidationError"
}

// Error satisfies the builtin error interface
func (e IdsourceNgRAnnodeUexnApidValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdsourceNgRAnnodeUexnApid.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdsourceNgRAnnodeUexnApidValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdsourceNgRAnnodeUexnApidValidationError{}

// Validate checks the field values on IdSplitSrbRRctransfer with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdSplitSrbRRctransfer) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdSplitSrbRRctransfer with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdSplitSrbRRctransferMultiError, or nil if none found.
func (m *IdSplitSrbRRctransfer) ValidateAll() error {
	return m.validate(true)
}

func (m *IdSplitSrbRRctransfer) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 74 {
		err := IdSplitSrbRRctransferValidationError{
			field:  "Value",
			reason: "value must equal 74",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdSplitSrbRRctransferMultiError(errors)
	}

	return nil
}

// IdSplitSrbRRctransferMultiError is an error wrapping multiple validation
// errors returned by IdSplitSrbRRctransfer.ValidateAll() if the designated
// constraints aren't met.
type IdSplitSrbRRctransferMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdSplitSrbRRctransferMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdSplitSrbRRctransferMultiError) AllErrors() []error { return m }

// IdSplitSrbRRctransferValidationError is the validation error returned by
// IdSplitSrbRRctransfer.Validate if the designated constraints aren't met.
type IdSplitSrbRRctransferValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdSplitSrbRRctransferValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdSplitSrbRRctransferValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdSplitSrbRRctransferValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdSplitSrbRRctransferValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdSplitSrbRRctransferValidationError) ErrorName() string {
	return "IdSplitSrbRRctransferValidationError"
}

// Error satisfies the builtin error interface
func (e IdSplitSrbRRctransferValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdSplitSrbRRctransfer.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdSplitSrbRRctransferValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdSplitSrbRRctransferValidationError{}

// Validate checks the field values on IdTAisupportlist with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *IdTAisupportlist) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdTAisupportlist with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdTAisupportlistMultiError, or nil if none found.
func (m *IdTAisupportlist) ValidateAll() error {
	return m.validate(true)
}

func (m *IdTAisupportlist) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 75 {
		err := IdTAisupportlistValidationError{
			field:  "Value",
			reason: "value must equal 75",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdTAisupportlistMultiError(errors)
	}

	return nil
}

// IdTAisupportlistMultiError is an error wrapping multiple validation errors
// returned by IdTAisupportlist.ValidateAll() if the designated constraints
// aren't met.
type IdTAisupportlistMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdTAisupportlistMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdTAisupportlistMultiError) AllErrors() []error { return m }

// IdTAisupportlistValidationError is the validation error returned by
// IdTAisupportlist.Validate if the designated constraints aren't met.
type IdTAisupportlistValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdTAisupportlistValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdTAisupportlistValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdTAisupportlistValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdTAisupportlistValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdTAisupportlistValidationError) ErrorName() string { return "IdTAisupportlistValidationError" }

// Error satisfies the builtin error interface
func (e IdTAisupportlistValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdTAisupportlist.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdTAisupportlistValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdTAisupportlistValidationError{}

// Validate checks the field values on IdTimeToWait with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *IdTimeToWait) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdTimeToWait with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in IdTimeToWaitMultiError, or
// nil if none found.
func (m *IdTimeToWait) ValidateAll() error {
	return m.validate(true)
}

func (m *IdTimeToWait) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 76 {
		err := IdTimeToWaitValidationError{
			field:  "Value",
			reason: "value must equal 76",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdTimeToWaitMultiError(errors)
	}

	return nil
}

// IdTimeToWaitMultiError is an error wrapping multiple validation errors
// returned by IdTimeToWait.ValidateAll() if the designated constraints aren't met.
type IdTimeToWaitMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdTimeToWaitMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdTimeToWaitMultiError) AllErrors() []error { return m }

// IdTimeToWaitValidationError is the validation error returned by
// IdTimeToWait.Validate if the designated constraints aren't met.
type IdTimeToWaitValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdTimeToWaitValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdTimeToWaitValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdTimeToWaitValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdTimeToWaitValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdTimeToWaitValidationError) ErrorName() string { return "IdTimeToWaitValidationError" }

// Error satisfies the builtin error interface
func (e IdTimeToWaitValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdTimeToWait.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdTimeToWaitValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdTimeToWaitValidationError{}

// Validate checks the field values on IdTarget2SourceNgRAnnodeTranspContainer
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *IdTarget2SourceNgRAnnodeTranspContainer) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// IdTarget2SourceNgRAnnodeTranspContainer with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// IdTarget2SourceNgRAnnodeTranspContainerMultiError, or nil if none found.
func (m *IdTarget2SourceNgRAnnodeTranspContainer) ValidateAll() error {
	return m.validate(true)
}

func (m *IdTarget2SourceNgRAnnodeTranspContainer) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 77 {
		err := IdTarget2SourceNgRAnnodeTranspContainerValidationError{
			field:  "Value",
			reason: "value must equal 77",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdTarget2SourceNgRAnnodeTranspContainerMultiError(errors)
	}

	return nil
}

// IdTarget2SourceNgRAnnodeTranspContainerMultiError is an error wrapping
// multiple validation errors returned by
// IdTarget2SourceNgRAnnodeTranspContainer.ValidateAll() if the designated
// constraints aren't met.
type IdTarget2SourceNgRAnnodeTranspContainerMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdTarget2SourceNgRAnnodeTranspContainerMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdTarget2SourceNgRAnnodeTranspContainerMultiError) AllErrors() []error { return m }

// IdTarget2SourceNgRAnnodeTranspContainerValidationError is the validation
// error returned by IdTarget2SourceNgRAnnodeTranspContainer.Validate if the
// designated constraints aren't met.
type IdTarget2SourceNgRAnnodeTranspContainerValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdTarget2SourceNgRAnnodeTranspContainerValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdTarget2SourceNgRAnnodeTranspContainerValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdTarget2SourceNgRAnnodeTranspContainerValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdTarget2SourceNgRAnnodeTranspContainerValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdTarget2SourceNgRAnnodeTranspContainerValidationError) ErrorName() string {
	return "IdTarget2SourceNgRAnnodeTranspContainerValidationError"
}

// Error satisfies the builtin error interface
func (e IdTarget2SourceNgRAnnodeTranspContainerValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdTarget2SourceNgRAnnodeTranspContainer.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdTarget2SourceNgRAnnodeTranspContainerValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdTarget2SourceNgRAnnodeTranspContainerValidationError{}

// Validate checks the field values on IdtargetCellGlobalId with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdtargetCellGlobalId) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdtargetCellGlobalId with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdtargetCellGlobalIdMultiError, or nil if none found.
func (m *IdtargetCellGlobalId) ValidateAll() error {
	return m.validate(true)
}

func (m *IdtargetCellGlobalId) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 78 {
		err := IdtargetCellGlobalIdValidationError{
			field:  "Value",
			reason: "value must equal 78",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdtargetCellGlobalIdMultiError(errors)
	}

	return nil
}

// IdtargetCellGlobalIdMultiError is an error wrapping multiple validation
// errors returned by IdtargetCellGlobalId.ValidateAll() if the designated
// constraints aren't met.
type IdtargetCellGlobalIdMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdtargetCellGlobalIdMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdtargetCellGlobalIdMultiError) AllErrors() []error { return m }

// IdtargetCellGlobalIdValidationError is the validation error returned by
// IdtargetCellGlobalId.Validate if the designated constraints aren't met.
type IdtargetCellGlobalIdValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdtargetCellGlobalIdValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdtargetCellGlobalIdValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdtargetCellGlobalIdValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdtargetCellGlobalIdValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdtargetCellGlobalIdValidationError) ErrorName() string {
	return "IdtargetCellGlobalIdValidationError"
}

// Error satisfies the builtin error interface
func (e IdtargetCellGlobalIdValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdtargetCellGlobalId.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdtargetCellGlobalIdValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdtargetCellGlobalIdValidationError{}

// Validate checks the field values on IdtargetNgRAnnodeUexnApid with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdtargetNgRAnnodeUexnApid) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdtargetNgRAnnodeUexnApid with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdtargetNgRAnnodeUexnApidMultiError, or nil if none found.
func (m *IdtargetNgRAnnodeUexnApid) ValidateAll() error {
	return m.validate(true)
}

func (m *IdtargetNgRAnnodeUexnApid) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 79 {
		err := IdtargetNgRAnnodeUexnApidValidationError{
			field:  "Value",
			reason: "value must equal 79",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdtargetNgRAnnodeUexnApidMultiError(errors)
	}

	return nil
}

// IdtargetNgRAnnodeUexnApidMultiError is an error wrapping multiple validation
// errors returned by IdtargetNgRAnnodeUexnApid.ValidateAll() if the
// designated constraints aren't met.
type IdtargetNgRAnnodeUexnApidMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdtargetNgRAnnodeUexnApidMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdtargetNgRAnnodeUexnApidMultiError) AllErrors() []error { return m }

// IdtargetNgRAnnodeUexnApidValidationError is the validation error returned by
// IdtargetNgRAnnodeUexnApid.Validate if the designated constraints aren't met.
type IdtargetNgRAnnodeUexnApidValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdtargetNgRAnnodeUexnApidValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdtargetNgRAnnodeUexnApidValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdtargetNgRAnnodeUexnApidValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdtargetNgRAnnodeUexnApidValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdtargetNgRAnnodeUexnApidValidationError) ErrorName() string {
	return "IdtargetNgRAnnodeUexnApidValidationError"
}

// Error satisfies the builtin error interface
func (e IdtargetNgRAnnodeUexnApidValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdtargetNgRAnnodeUexnApid.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdtargetNgRAnnodeUexnApidValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdtargetNgRAnnodeUexnApidValidationError{}

// Validate checks the field values on IdtargetSNGRAnnodeId with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdtargetSNGRAnnodeId) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdtargetSNGRAnnodeId with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdtargetSNGRAnnodeIdMultiError, or nil if none found.
func (m *IdtargetSNGRAnnodeId) ValidateAll() error {
	return m.validate(true)
}

func (m *IdtargetSNGRAnnodeId) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 80 {
		err := IdtargetSNGRAnnodeIdValidationError{
			field:  "Value",
			reason: "value must equal 80",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdtargetSNGRAnnodeIdMultiError(errors)
	}

	return nil
}

// IdtargetSNGRAnnodeIdMultiError is an error wrapping multiple validation
// errors returned by IdtargetSNGRAnnodeId.ValidateAll() if the designated
// constraints aren't met.
type IdtargetSNGRAnnodeIdMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdtargetSNGRAnnodeIdMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdtargetSNGRAnnodeIdMultiError) AllErrors() []error { return m }

// IdtargetSNGRAnnodeIdValidationError is the validation error returned by
// IdtargetSNGRAnnodeId.Validate if the designated constraints aren't met.
type IdtargetSNGRAnnodeIdValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdtargetSNGRAnnodeIdValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdtargetSNGRAnnodeIdValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdtargetSNGRAnnodeIdValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdtargetSNGRAnnodeIdValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdtargetSNGRAnnodeIdValidationError) ErrorName() string {
	return "IdtargetSNGRAnnodeIdValidationError"
}

// Error satisfies the builtin error interface
func (e IdtargetSNGRAnnodeIdValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdtargetSNGRAnnodeId.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdtargetSNGRAnnodeIdValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdtargetSNGRAnnodeIdValidationError{}

// Validate checks the field values on IdTraceActivation with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *IdTraceActivation) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdTraceActivation with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdTraceActivationMultiError, or nil if none found.
func (m *IdTraceActivation) ValidateAll() error {
	return m.validate(true)
}

func (m *IdTraceActivation) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 81 {
		err := IdTraceActivationValidationError{
			field:  "Value",
			reason: "value must equal 81",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdTraceActivationMultiError(errors)
	}

	return nil
}

// IdTraceActivationMultiError is an error wrapping multiple validation errors
// returned by IdTraceActivation.ValidateAll() if the designated constraints
// aren't met.
type IdTraceActivationMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdTraceActivationMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdTraceActivationMultiError) AllErrors() []error { return m }

// IdTraceActivationValidationError is the validation error returned by
// IdTraceActivation.Validate if the designated constraints aren't met.
type IdTraceActivationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdTraceActivationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdTraceActivationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdTraceActivationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdTraceActivationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdTraceActivationValidationError) ErrorName() string {
	return "IdTraceActivationValidationError"
}

// Error satisfies the builtin error interface
func (e IdTraceActivationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdTraceActivation.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdTraceActivationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdTraceActivationValidationError{}

// Validate checks the field values on IdUEcontextId with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *IdUEcontextId) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdUEcontextId with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in IdUEcontextIdMultiError, or
// nil if none found.
func (m *IdUEcontextId) ValidateAll() error {
	return m.validate(true)
}

func (m *IdUEcontextId) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 82 {
		err := IdUEcontextIdValidationError{
			field:  "Value",
			reason: "value must equal 82",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdUEcontextIdMultiError(errors)
	}

	return nil
}

// IdUEcontextIdMultiError is an error wrapping multiple validation errors
// returned by IdUEcontextId.ValidateAll() if the designated constraints
// aren't met.
type IdUEcontextIdMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdUEcontextIdMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdUEcontextIdMultiError) AllErrors() []error { return m }

// IdUEcontextIdValidationError is the validation error returned by
// IdUEcontextId.Validate if the designated constraints aren't met.
type IdUEcontextIdValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdUEcontextIdValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdUEcontextIdValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdUEcontextIdValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdUEcontextIdValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdUEcontextIdValidationError) ErrorName() string { return "IdUEcontextIdValidationError" }

// Error satisfies the builtin error interface
func (e IdUEcontextIdValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdUEcontextId.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdUEcontextIdValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdUEcontextIdValidationError{}

// Validate checks the field values on IdUEcontextInfoHorequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdUEcontextInfoHorequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdUEcontextInfoHorequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdUEcontextInfoHorequestMultiError, or nil if none found.
func (m *IdUEcontextInfoHorequest) ValidateAll() error {
	return m.validate(true)
}

func (m *IdUEcontextInfoHorequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 83 {
		err := IdUEcontextInfoHorequestValidationError{
			field:  "Value",
			reason: "value must equal 83",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdUEcontextInfoHorequestMultiError(errors)
	}

	return nil
}

// IdUEcontextInfoHorequestMultiError is an error wrapping multiple validation
// errors returned by IdUEcontextInfoHorequest.ValidateAll() if the designated
// constraints aren't met.
type IdUEcontextInfoHorequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdUEcontextInfoHorequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdUEcontextInfoHorequestMultiError) AllErrors() []error { return m }

// IdUEcontextInfoHorequestValidationError is the validation error returned by
// IdUEcontextInfoHorequest.Validate if the designated constraints aren't met.
type IdUEcontextInfoHorequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdUEcontextInfoHorequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdUEcontextInfoHorequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdUEcontextInfoHorequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdUEcontextInfoHorequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdUEcontextInfoHorequestValidationError) ErrorName() string {
	return "IdUEcontextInfoHorequestValidationError"
}

// Error satisfies the builtin error interface
func (e IdUEcontextInfoHorequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdUEcontextInfoHorequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdUEcontextInfoHorequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdUEcontextInfoHorequestValidationError{}

// Validate checks the field values on IdUEcontextInfoRetrUectxtResp with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdUEcontextInfoRetrUectxtResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdUEcontextInfoRetrUectxtResp with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// IdUEcontextInfoRetrUectxtRespMultiError, or nil if none found.
func (m *IdUEcontextInfoRetrUectxtResp) ValidateAll() error {
	return m.validate(true)
}

func (m *IdUEcontextInfoRetrUectxtResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 84 {
		err := IdUEcontextInfoRetrUectxtRespValidationError{
			field:  "Value",
			reason: "value must equal 84",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdUEcontextInfoRetrUectxtRespMultiError(errors)
	}

	return nil
}

// IdUEcontextInfoRetrUectxtRespMultiError is an error wrapping multiple
// validation errors returned by IdUEcontextInfoRetrUectxtResp.ValidateAll()
// if the designated constraints aren't met.
type IdUEcontextInfoRetrUectxtRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdUEcontextInfoRetrUectxtRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdUEcontextInfoRetrUectxtRespMultiError) AllErrors() []error { return m }

// IdUEcontextInfoRetrUectxtRespValidationError is the validation error
// returned by IdUEcontextInfoRetrUectxtResp.Validate if the designated
// constraints aren't met.
type IdUEcontextInfoRetrUectxtRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdUEcontextInfoRetrUectxtRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdUEcontextInfoRetrUectxtRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdUEcontextInfoRetrUectxtRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdUEcontextInfoRetrUectxtRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdUEcontextInfoRetrUectxtRespValidationError) ErrorName() string {
	return "IdUEcontextInfoRetrUectxtRespValidationError"
}

// Error satisfies the builtin error interface
func (e IdUEcontextInfoRetrUectxtRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdUEcontextInfoRetrUectxtResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdUEcontextInfoRetrUectxtRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdUEcontextInfoRetrUectxtRespValidationError{}

// Validate checks the field values on IdUEcontextInfoSNmodRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdUEcontextInfoSNmodRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdUEcontextInfoSNmodRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdUEcontextInfoSNmodRequestMultiError, or nil if none found.
func (m *IdUEcontextInfoSNmodRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *IdUEcontextInfoSNmodRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 85 {
		err := IdUEcontextInfoSNmodRequestValidationError{
			field:  "Value",
			reason: "value must equal 85",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdUEcontextInfoSNmodRequestMultiError(errors)
	}

	return nil
}

// IdUEcontextInfoSNmodRequestMultiError is an error wrapping multiple
// validation errors returned by IdUEcontextInfoSNmodRequest.ValidateAll() if
// the designated constraints aren't met.
type IdUEcontextInfoSNmodRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdUEcontextInfoSNmodRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdUEcontextInfoSNmodRequestMultiError) AllErrors() []error { return m }

// IdUEcontextInfoSNmodRequestValidationError is the validation error returned
// by IdUEcontextInfoSNmodRequest.Validate if the designated constraints
// aren't met.
type IdUEcontextInfoSNmodRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdUEcontextInfoSNmodRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdUEcontextInfoSNmodRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdUEcontextInfoSNmodRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdUEcontextInfoSNmodRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdUEcontextInfoSNmodRequestValidationError) ErrorName() string {
	return "IdUEcontextInfoSNmodRequestValidationError"
}

// Error satisfies the builtin error interface
func (e IdUEcontextInfoSNmodRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdUEcontextInfoSNmodRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdUEcontextInfoSNmodRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdUEcontextInfoSNmodRequestValidationError{}

// Validate checks the field values on IdUEcontextKeptIndicator with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdUEcontextKeptIndicator) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdUEcontextKeptIndicator with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdUEcontextKeptIndicatorMultiError, or nil if none found.
func (m *IdUEcontextKeptIndicator) ValidateAll() error {
	return m.validate(true)
}

func (m *IdUEcontextKeptIndicator) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 86 {
		err := IdUEcontextKeptIndicatorValidationError{
			field:  "Value",
			reason: "value must equal 86",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdUEcontextKeptIndicatorMultiError(errors)
	}

	return nil
}

// IdUEcontextKeptIndicatorMultiError is an error wrapping multiple validation
// errors returned by IdUEcontextKeptIndicator.ValidateAll() if the designated
// constraints aren't met.
type IdUEcontextKeptIndicatorMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdUEcontextKeptIndicatorMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdUEcontextKeptIndicatorMultiError) AllErrors() []error { return m }

// IdUEcontextKeptIndicatorValidationError is the validation error returned by
// IdUEcontextKeptIndicator.Validate if the designated constraints aren't met.
type IdUEcontextKeptIndicatorValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdUEcontextKeptIndicatorValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdUEcontextKeptIndicatorValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdUEcontextKeptIndicatorValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdUEcontextKeptIndicatorValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdUEcontextKeptIndicatorValidationError) ErrorName() string {
	return "IdUEcontextKeptIndicatorValidationError"
}

// Error satisfies the builtin error interface
func (e IdUEcontextKeptIndicatorValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdUEcontextKeptIndicator.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdUEcontextKeptIndicatorValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdUEcontextKeptIndicatorValidationError{}

// Validate checks the field values on IdUEcontextRefAtSnHOrequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdUEcontextRefAtSnHOrequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdUEcontextRefAtSnHOrequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdUEcontextRefAtSnHOrequestMultiError, or nil if none found.
func (m *IdUEcontextRefAtSnHOrequest) ValidateAll() error {
	return m.validate(true)
}

func (m *IdUEcontextRefAtSnHOrequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 87 {
		err := IdUEcontextRefAtSnHOrequestValidationError{
			field:  "Value",
			reason: "value must equal 87",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdUEcontextRefAtSnHOrequestMultiError(errors)
	}

	return nil
}

// IdUEcontextRefAtSnHOrequestMultiError is an error wrapping multiple
// validation errors returned by IdUEcontextRefAtSnHOrequest.ValidateAll() if
// the designated constraints aren't met.
type IdUEcontextRefAtSnHOrequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdUEcontextRefAtSnHOrequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdUEcontextRefAtSnHOrequestMultiError) AllErrors() []error { return m }

// IdUEcontextRefAtSnHOrequestValidationError is the validation error returned
// by IdUEcontextRefAtSnHOrequest.Validate if the designated constraints
// aren't met.
type IdUEcontextRefAtSnHOrequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdUEcontextRefAtSnHOrequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdUEcontextRefAtSnHOrequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdUEcontextRefAtSnHOrequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdUEcontextRefAtSnHOrequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdUEcontextRefAtSnHOrequestValidationError) ErrorName() string {
	return "IdUEcontextRefAtSnHOrequestValidationError"
}

// Error satisfies the builtin error interface
func (e IdUEcontextRefAtSnHOrequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdUEcontextRefAtSnHOrequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdUEcontextRefAtSnHOrequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdUEcontextRefAtSnHOrequestValidationError{}

// Validate checks the field values on IdUEhistoryInformation with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdUEhistoryInformation) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdUEhistoryInformation with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdUEhistoryInformationMultiError, or nil if none found.
func (m *IdUEhistoryInformation) ValidateAll() error {
	return m.validate(true)
}

func (m *IdUEhistoryInformation) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 88 {
		err := IdUEhistoryInformationValidationError{
			field:  "Value",
			reason: "value must equal 88",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdUEhistoryInformationMultiError(errors)
	}

	return nil
}

// IdUEhistoryInformationMultiError is an error wrapping multiple validation
// errors returned by IdUEhistoryInformation.ValidateAll() if the designated
// constraints aren't met.
type IdUEhistoryInformationMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdUEhistoryInformationMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdUEhistoryInformationMultiError) AllErrors() []error { return m }

// IdUEhistoryInformationValidationError is the validation error returned by
// IdUEhistoryInformation.Validate if the designated constraints aren't met.
type IdUEhistoryInformationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdUEhistoryInformationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdUEhistoryInformationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdUEhistoryInformationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdUEhistoryInformationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdUEhistoryInformationValidationError) ErrorName() string {
	return "IdUEhistoryInformationValidationError"
}

// Error satisfies the builtin error interface
func (e IdUEhistoryInformationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdUEhistoryInformation.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdUEhistoryInformationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdUEhistoryInformationValidationError{}

// Validate checks the field values on IdUEidentityIndexValue with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdUEidentityIndexValue) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdUEidentityIndexValue with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdUEidentityIndexValueMultiError, or nil if none found.
func (m *IdUEidentityIndexValue) ValidateAll() error {
	return m.validate(true)
}

func (m *IdUEidentityIndexValue) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 89 {
		err := IdUEidentityIndexValueValidationError{
			field:  "Value",
			reason: "value must equal 89",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdUEidentityIndexValueMultiError(errors)
	}

	return nil
}

// IdUEidentityIndexValueMultiError is an error wrapping multiple validation
// errors returned by IdUEidentityIndexValue.ValidateAll() if the designated
// constraints aren't met.
type IdUEidentityIndexValueMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdUEidentityIndexValueMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdUEidentityIndexValueMultiError) AllErrors() []error { return m }

// IdUEidentityIndexValueValidationError is the validation error returned by
// IdUEidentityIndexValue.Validate if the designated constraints aren't met.
type IdUEidentityIndexValueValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdUEidentityIndexValueValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdUEidentityIndexValueValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdUEidentityIndexValueValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdUEidentityIndexValueValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdUEidentityIndexValueValidationError) ErrorName() string {
	return "IdUEidentityIndexValueValidationError"
}

// Error satisfies the builtin error interface
func (e IdUEidentityIndexValueValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdUEidentityIndexValue.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdUEidentityIndexValueValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdUEidentityIndexValueValidationError{}

// Validate checks the field values on IdUEranpagingIdentity with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdUEranpagingIdentity) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdUEranpagingIdentity with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdUEranpagingIdentityMultiError, or nil if none found.
func (m *IdUEranpagingIdentity) ValidateAll() error {
	return m.validate(true)
}

func (m *IdUEranpagingIdentity) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 90 {
		err := IdUEranpagingIdentityValidationError{
			field:  "Value",
			reason: "value must equal 90",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdUEranpagingIdentityMultiError(errors)
	}

	return nil
}

// IdUEranpagingIdentityMultiError is an error wrapping multiple validation
// errors returned by IdUEranpagingIdentity.ValidateAll() if the designated
// constraints aren't met.
type IdUEranpagingIdentityMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdUEranpagingIdentityMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdUEranpagingIdentityMultiError) AllErrors() []error { return m }

// IdUEranpagingIdentityValidationError is the validation error returned by
// IdUEranpagingIdentity.Validate if the designated constraints aren't met.
type IdUEranpagingIdentityValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdUEranpagingIdentityValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdUEranpagingIdentityValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdUEranpagingIdentityValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdUEranpagingIdentityValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdUEranpagingIdentityValidationError) ErrorName() string {
	return "IdUEranpagingIdentityValidationError"
}

// Error satisfies the builtin error interface
func (e IdUEranpagingIdentityValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdUEranpagingIdentity.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdUEranpagingIdentityValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdUEranpagingIdentityValidationError{}

// Validate checks the field values on IdUEsecurityCapabilities with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdUEsecurityCapabilities) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdUEsecurityCapabilities with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdUEsecurityCapabilitiesMultiError, or nil if none found.
func (m *IdUEsecurityCapabilities) ValidateAll() error {
	return m.validate(true)
}

func (m *IdUEsecurityCapabilities) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 91 {
		err := IdUEsecurityCapabilitiesValidationError{
			field:  "Value",
			reason: "value must equal 91",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdUEsecurityCapabilitiesMultiError(errors)
	}

	return nil
}

// IdUEsecurityCapabilitiesMultiError is an error wrapping multiple validation
// errors returned by IdUEsecurityCapabilities.ValidateAll() if the designated
// constraints aren't met.
type IdUEsecurityCapabilitiesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdUEsecurityCapabilitiesMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdUEsecurityCapabilitiesMultiError) AllErrors() []error { return m }

// IdUEsecurityCapabilitiesValidationError is the validation error returned by
// IdUEsecurityCapabilities.Validate if the designated constraints aren't met.
type IdUEsecurityCapabilitiesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdUEsecurityCapabilitiesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdUEsecurityCapabilitiesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdUEsecurityCapabilitiesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdUEsecurityCapabilitiesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdUEsecurityCapabilitiesValidationError) ErrorName() string {
	return "IdUEsecurityCapabilitiesValidationError"
}

// Error satisfies the builtin error interface
func (e IdUEsecurityCapabilitiesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdUEsecurityCapabilities.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdUEsecurityCapabilitiesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdUEsecurityCapabilitiesValidationError{}

// Validate checks the field values on IdUserPlaneTrafficActivityReport with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *IdUserPlaneTrafficActivityReport) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdUserPlaneTrafficActivityReport with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// IdUserPlaneTrafficActivityReportMultiError, or nil if none found.
func (m *IdUserPlaneTrafficActivityReport) ValidateAll() error {
	return m.validate(true)
}

func (m *IdUserPlaneTrafficActivityReport) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 92 {
		err := IdUserPlaneTrafficActivityReportValidationError{
			field:  "Value",
			reason: "value must equal 92",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdUserPlaneTrafficActivityReportMultiError(errors)
	}

	return nil
}

// IdUserPlaneTrafficActivityReportMultiError is an error wrapping multiple
// validation errors returned by
// IdUserPlaneTrafficActivityReport.ValidateAll() if the designated
// constraints aren't met.
type IdUserPlaneTrafficActivityReportMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdUserPlaneTrafficActivityReportMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdUserPlaneTrafficActivityReportMultiError) AllErrors() []error { return m }

// IdUserPlaneTrafficActivityReportValidationError is the validation error
// returned by IdUserPlaneTrafficActivityReport.Validate if the designated
// constraints aren't met.
type IdUserPlaneTrafficActivityReportValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdUserPlaneTrafficActivityReportValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdUserPlaneTrafficActivityReportValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdUserPlaneTrafficActivityReportValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdUserPlaneTrafficActivityReportValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdUserPlaneTrafficActivityReportValidationError) ErrorName() string {
	return "IdUserPlaneTrafficActivityReportValidationError"
}

// Error satisfies the builtin error interface
func (e IdUserPlaneTrafficActivityReportValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdUserPlaneTrafficActivityReport.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdUserPlaneTrafficActivityReportValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdUserPlaneTrafficActivityReportValidationError{}

// Validate checks the field values on IdXnRemovalThreshold with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdXnRemovalThreshold) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdXnRemovalThreshold with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdXnRemovalThresholdMultiError, or nil if none found.
func (m *IdXnRemovalThreshold) ValidateAll() error {
	return m.validate(true)
}

func (m *IdXnRemovalThreshold) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 93 {
		err := IdXnRemovalThresholdValidationError{
			field:  "Value",
			reason: "value must equal 93",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdXnRemovalThresholdMultiError(errors)
	}

	return nil
}

// IdXnRemovalThresholdMultiError is an error wrapping multiple validation
// errors returned by IdXnRemovalThreshold.ValidateAll() if the designated
// constraints aren't met.
type IdXnRemovalThresholdMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdXnRemovalThresholdMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdXnRemovalThresholdMultiError) AllErrors() []error { return m }

// IdXnRemovalThresholdValidationError is the validation error returned by
// IdXnRemovalThreshold.Validate if the designated constraints aren't met.
type IdXnRemovalThresholdValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdXnRemovalThresholdValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdXnRemovalThresholdValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdXnRemovalThresholdValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdXnRemovalThresholdValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdXnRemovalThresholdValidationError) ErrorName() string {
	return "IdXnRemovalThresholdValidationError"
}

// Error satisfies the builtin error interface
func (e IdXnRemovalThresholdValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdXnRemovalThreshold.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdXnRemovalThresholdValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdXnRemovalThresholdValidationError{}

// Validate checks the field values on IdDesiredActNotificationLevel with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdDesiredActNotificationLevel) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdDesiredActNotificationLevel with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// IdDesiredActNotificationLevelMultiError, or nil if none found.
func (m *IdDesiredActNotificationLevel) ValidateAll() error {
	return m.validate(true)
}

func (m *IdDesiredActNotificationLevel) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 94 {
		err := IdDesiredActNotificationLevelValidationError{
			field:  "Value",
			reason: "value must equal 94",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdDesiredActNotificationLevelMultiError(errors)
	}

	return nil
}

// IdDesiredActNotificationLevelMultiError is an error wrapping multiple
// validation errors returned by IdDesiredActNotificationLevel.ValidateAll()
// if the designated constraints aren't met.
type IdDesiredActNotificationLevelMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdDesiredActNotificationLevelMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdDesiredActNotificationLevelMultiError) AllErrors() []error { return m }

// IdDesiredActNotificationLevelValidationError is the validation error
// returned by IdDesiredActNotificationLevel.Validate if the designated
// constraints aren't met.
type IdDesiredActNotificationLevelValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdDesiredActNotificationLevelValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdDesiredActNotificationLevelValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdDesiredActNotificationLevelValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdDesiredActNotificationLevelValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdDesiredActNotificationLevelValidationError) ErrorName() string {
	return "IdDesiredActNotificationLevelValidationError"
}

// Error satisfies the builtin error interface
func (e IdDesiredActNotificationLevelValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdDesiredActNotificationLevel.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdDesiredActNotificationLevelValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdDesiredActNotificationLevelValidationError{}

// Validate checks the field values on IdAvailableDrbids with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *IdAvailableDrbids) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdAvailableDrbids with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdAvailableDrbidsMultiError, or nil if none found.
func (m *IdAvailableDrbids) ValidateAll() error {
	return m.validate(true)
}

func (m *IdAvailableDrbids) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 95 {
		err := IdAvailableDrbidsValidationError{
			field:  "Value",
			reason: "value must equal 95",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdAvailableDrbidsMultiError(errors)
	}

	return nil
}

// IdAvailableDrbidsMultiError is an error wrapping multiple validation errors
// returned by IdAvailableDrbids.ValidateAll() if the designated constraints
// aren't met.
type IdAvailableDrbidsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdAvailableDrbidsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdAvailableDrbidsMultiError) AllErrors() []error { return m }

// IdAvailableDrbidsValidationError is the validation error returned by
// IdAvailableDrbids.Validate if the designated constraints aren't met.
type IdAvailableDrbidsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdAvailableDrbidsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdAvailableDrbidsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdAvailableDrbidsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdAvailableDrbidsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdAvailableDrbidsValidationError) ErrorName() string {
	return "IdAvailableDrbidsValidationError"
}

// Error satisfies the builtin error interface
func (e IdAvailableDrbidsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdAvailableDrbids.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdAvailableDrbidsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdAvailableDrbidsValidationError{}

// Validate checks the field values on IdAdditionalDrbids with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdAdditionalDrbids) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdAdditionalDrbids with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdAdditionalDrbidsMultiError, or nil if none found.
func (m *IdAdditionalDrbids) ValidateAll() error {
	return m.validate(true)
}

func (m *IdAdditionalDrbids) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 96 {
		err := IdAdditionalDrbidsValidationError{
			field:  "Value",
			reason: "value must equal 96",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdAdditionalDrbidsMultiError(errors)
	}

	return nil
}

// IdAdditionalDrbidsMultiError is an error wrapping multiple validation errors
// returned by IdAdditionalDrbids.ValidateAll() if the designated constraints
// aren't met.
type IdAdditionalDrbidsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdAdditionalDrbidsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdAdditionalDrbidsMultiError) AllErrors() []error { return m }

// IdAdditionalDrbidsValidationError is the validation error returned by
// IdAdditionalDrbids.Validate if the designated constraints aren't met.
type IdAdditionalDrbidsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdAdditionalDrbidsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdAdditionalDrbidsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdAdditionalDrbidsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdAdditionalDrbidsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdAdditionalDrbidsValidationError) ErrorName() string {
	return "IdAdditionalDrbidsValidationError"
}

// Error satisfies the builtin error interface
func (e IdAdditionalDrbidsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdAdditionalDrbids.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdAdditionalDrbidsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdAdditionalDrbidsValidationError{}

// Validate checks the field values on IdSpareDrbids with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *IdSpareDrbids) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdSpareDrbids with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in IdSpareDrbidsMultiError, or
// nil if none found.
func (m *IdSpareDrbids) ValidateAll() error {
	return m.validate(true)
}

func (m *IdSpareDrbids) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 97 {
		err := IdSpareDrbidsValidationError{
			field:  "Value",
			reason: "value must equal 97",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdSpareDrbidsMultiError(errors)
	}

	return nil
}

// IdSpareDrbidsMultiError is an error wrapping multiple validation errors
// returned by IdSpareDrbids.ValidateAll() if the designated constraints
// aren't met.
type IdSpareDrbidsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdSpareDrbidsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdSpareDrbidsMultiError) AllErrors() []error { return m }

// IdSpareDrbidsValidationError is the validation error returned by
// IdSpareDrbids.Validate if the designated constraints aren't met.
type IdSpareDrbidsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdSpareDrbidsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdSpareDrbidsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdSpareDrbidsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdSpareDrbidsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdSpareDrbidsValidationError) ErrorName() string { return "IdSpareDrbidsValidationError" }

// Error satisfies the builtin error interface
func (e IdSpareDrbidsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdSpareDrbids.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdSpareDrbidsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdSpareDrbidsValidationError{}

// Validate checks the field values on IdRequiredNumberOfDrbids with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdRequiredNumberOfDrbids) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdRequiredNumberOfDrbids with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdRequiredNumberOfDrbidsMultiError, or nil if none found.
func (m *IdRequiredNumberOfDrbids) ValidateAll() error {
	return m.validate(true)
}

func (m *IdRequiredNumberOfDrbids) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 98 {
		err := IdRequiredNumberOfDrbidsValidationError{
			field:  "Value",
			reason: "value must equal 98",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdRequiredNumberOfDrbidsMultiError(errors)
	}

	return nil
}

// IdRequiredNumberOfDrbidsMultiError is an error wrapping multiple validation
// errors returned by IdRequiredNumberOfDrbids.ValidateAll() if the designated
// constraints aren't met.
type IdRequiredNumberOfDrbidsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdRequiredNumberOfDrbidsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdRequiredNumberOfDrbidsMultiError) AllErrors() []error { return m }

// IdRequiredNumberOfDrbidsValidationError is the validation error returned by
// IdRequiredNumberOfDrbids.Validate if the designated constraints aren't met.
type IdRequiredNumberOfDrbidsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdRequiredNumberOfDrbidsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdRequiredNumberOfDrbidsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdRequiredNumberOfDrbidsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdRequiredNumberOfDrbidsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdRequiredNumberOfDrbidsValidationError) ErrorName() string {
	return "IdRequiredNumberOfDrbidsValidationError"
}

// Error satisfies the builtin error interface
func (e IdRequiredNumberOfDrbidsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdRequiredNumberOfDrbids.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdRequiredNumberOfDrbidsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdRequiredNumberOfDrbidsValidationError{}

// Validate checks the field values on IdTNlaToAddList with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *IdTNlaToAddList) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdTNlaToAddList with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdTNlaToAddListMultiError, or nil if none found.
func (m *IdTNlaToAddList) ValidateAll() error {
	return m.validate(true)
}

func (m *IdTNlaToAddList) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 99 {
		err := IdTNlaToAddListValidationError{
			field:  "Value",
			reason: "value must equal 99",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdTNlaToAddListMultiError(errors)
	}

	return nil
}

// IdTNlaToAddListMultiError is an error wrapping multiple validation errors
// returned by IdTNlaToAddList.ValidateAll() if the designated constraints
// aren't met.
type IdTNlaToAddListMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdTNlaToAddListMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdTNlaToAddListMultiError) AllErrors() []error { return m }

// IdTNlaToAddListValidationError is the validation error returned by
// IdTNlaToAddList.Validate if the designated constraints aren't met.
type IdTNlaToAddListValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdTNlaToAddListValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdTNlaToAddListValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdTNlaToAddListValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdTNlaToAddListValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdTNlaToAddListValidationError) ErrorName() string { return "IdTNlaToAddListValidationError" }

// Error satisfies the builtin error interface
func (e IdTNlaToAddListValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdTNlaToAddList.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdTNlaToAddListValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdTNlaToAddListValidationError{}

// Validate checks the field values on IdTNlaToUpdateList with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdTNlaToUpdateList) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdTNlaToUpdateList with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdTNlaToUpdateListMultiError, or nil if none found.
func (m *IdTNlaToUpdateList) ValidateAll() error {
	return m.validate(true)
}

func (m *IdTNlaToUpdateList) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 100 {
		err := IdTNlaToUpdateListValidationError{
			field:  "Value",
			reason: "value must equal 100",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdTNlaToUpdateListMultiError(errors)
	}

	return nil
}

// IdTNlaToUpdateListMultiError is an error wrapping multiple validation errors
// returned by IdTNlaToUpdateList.ValidateAll() if the designated constraints
// aren't met.
type IdTNlaToUpdateListMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdTNlaToUpdateListMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdTNlaToUpdateListMultiError) AllErrors() []error { return m }

// IdTNlaToUpdateListValidationError is the validation error returned by
// IdTNlaToUpdateList.Validate if the designated constraints aren't met.
type IdTNlaToUpdateListValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdTNlaToUpdateListValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdTNlaToUpdateListValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdTNlaToUpdateListValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdTNlaToUpdateListValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdTNlaToUpdateListValidationError) ErrorName() string {
	return "IdTNlaToUpdateListValidationError"
}

// Error satisfies the builtin error interface
func (e IdTNlaToUpdateListValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdTNlaToUpdateList.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdTNlaToUpdateListValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdTNlaToUpdateListValidationError{}

// Validate checks the field values on IdTNlaToRemoveList with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdTNlaToRemoveList) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdTNlaToRemoveList with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdTNlaToRemoveListMultiError, or nil if none found.
func (m *IdTNlaToRemoveList) ValidateAll() error {
	return m.validate(true)
}

func (m *IdTNlaToRemoveList) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 101 {
		err := IdTNlaToRemoveListValidationError{
			field:  "Value",
			reason: "value must equal 101",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdTNlaToRemoveListMultiError(errors)
	}

	return nil
}

// IdTNlaToRemoveListMultiError is an error wrapping multiple validation errors
// returned by IdTNlaToRemoveList.ValidateAll() if the designated constraints
// aren't met.
type IdTNlaToRemoveListMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdTNlaToRemoveListMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdTNlaToRemoveListMultiError) AllErrors() []error { return m }

// IdTNlaToRemoveListValidationError is the validation error returned by
// IdTNlaToRemoveList.Validate if the designated constraints aren't met.
type IdTNlaToRemoveListValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdTNlaToRemoveListValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdTNlaToRemoveListValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdTNlaToRemoveListValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdTNlaToRemoveListValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdTNlaToRemoveListValidationError) ErrorName() string {
	return "IdTNlaToRemoveListValidationError"
}

// Error satisfies the builtin error interface
func (e IdTNlaToRemoveListValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdTNlaToRemoveList.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdTNlaToRemoveListValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdTNlaToRemoveListValidationError{}

// Validate checks the field values on IdTNlaSetupList with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *IdTNlaSetupList) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdTNlaSetupList with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdTNlaSetupListMultiError, or nil if none found.
func (m *IdTNlaSetupList) ValidateAll() error {
	return m.validate(true)
}

func (m *IdTNlaSetupList) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 102 {
		err := IdTNlaSetupListValidationError{
			field:  "Value",
			reason: "value must equal 102",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdTNlaSetupListMultiError(errors)
	}

	return nil
}

// IdTNlaSetupListMultiError is an error wrapping multiple validation errors
// returned by IdTNlaSetupList.ValidateAll() if the designated constraints
// aren't met.
type IdTNlaSetupListMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdTNlaSetupListMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdTNlaSetupListMultiError) AllErrors() []error { return m }

// IdTNlaSetupListValidationError is the validation error returned by
// IdTNlaSetupList.Validate if the designated constraints aren't met.
type IdTNlaSetupListValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdTNlaSetupListValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdTNlaSetupListValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdTNlaSetupListValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdTNlaSetupListValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdTNlaSetupListValidationError) ErrorName() string { return "IdTNlaSetupListValidationError" }

// Error satisfies the builtin error interface
func (e IdTNlaSetupListValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdTNlaSetupList.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdTNlaSetupListValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdTNlaSetupListValidationError{}

// Validate checks the field values on IdTNlaFailedToSetupList with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdTNlaFailedToSetupList) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdTNlaFailedToSetupList with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdTNlaFailedToSetupListMultiError, or nil if none found.
func (m *IdTNlaFailedToSetupList) ValidateAll() error {
	return m.validate(true)
}

func (m *IdTNlaFailedToSetupList) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 103 {
		err := IdTNlaFailedToSetupListValidationError{
			field:  "Value",
			reason: "value must equal 103",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdTNlaFailedToSetupListMultiError(errors)
	}

	return nil
}

// IdTNlaFailedToSetupListMultiError is an error wrapping multiple validation
// errors returned by IdTNlaFailedToSetupList.ValidateAll() if the designated
// constraints aren't met.
type IdTNlaFailedToSetupListMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdTNlaFailedToSetupListMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdTNlaFailedToSetupListMultiError) AllErrors() []error { return m }

// IdTNlaFailedToSetupListValidationError is the validation error returned by
// IdTNlaFailedToSetupList.Validate if the designated constraints aren't met.
type IdTNlaFailedToSetupListValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdTNlaFailedToSetupListValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdTNlaFailedToSetupListValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdTNlaFailedToSetupListValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdTNlaFailedToSetupListValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdTNlaFailedToSetupListValidationError) ErrorName() string {
	return "IdTNlaFailedToSetupListValidationError"
}

// Error satisfies the builtin error interface
func (e IdTNlaFailedToSetupListValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdTNlaFailedToSetupList.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdTNlaFailedToSetupListValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdTNlaFailedToSetupListValidationError{}

// Validate checks the field values on IdPDusessionToBeReleasedRelReqAck with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *IdPDusessionToBeReleasedRelReqAck) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdPDusessionToBeReleasedRelReqAck
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// IdPDusessionToBeReleasedRelReqAckMultiError, or nil if none found.
func (m *IdPDusessionToBeReleasedRelReqAck) ValidateAll() error {
	return m.validate(true)
}

func (m *IdPDusessionToBeReleasedRelReqAck) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 104 {
		err := IdPDusessionToBeReleasedRelReqAckValidationError{
			field:  "Value",
			reason: "value must equal 104",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdPDusessionToBeReleasedRelReqAckMultiError(errors)
	}

	return nil
}

// IdPDusessionToBeReleasedRelReqAckMultiError is an error wrapping multiple
// validation errors returned by
// IdPDusessionToBeReleasedRelReqAck.ValidateAll() if the designated
// constraints aren't met.
type IdPDusessionToBeReleasedRelReqAckMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdPDusessionToBeReleasedRelReqAckMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdPDusessionToBeReleasedRelReqAckMultiError) AllErrors() []error { return m }

// IdPDusessionToBeReleasedRelReqAckValidationError is the validation error
// returned by IdPDusessionToBeReleasedRelReqAck.Validate if the designated
// constraints aren't met.
type IdPDusessionToBeReleasedRelReqAckValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdPDusessionToBeReleasedRelReqAckValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdPDusessionToBeReleasedRelReqAckValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdPDusessionToBeReleasedRelReqAckValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdPDusessionToBeReleasedRelReqAckValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdPDusessionToBeReleasedRelReqAckValidationError) ErrorName() string {
	return "IdPDusessionToBeReleasedRelReqAckValidationError"
}

// Error satisfies the builtin error interface
func (e IdPDusessionToBeReleasedRelReqAckValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdPDusessionToBeReleasedRelReqAck.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdPDusessionToBeReleasedRelReqAckValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdPDusessionToBeReleasedRelReqAckValidationError{}

// Validate checks the field values on IdSNGRAnnodeMaxIpdataRateUL with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdSNGRAnnodeMaxIpdataRateUL) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdSNGRAnnodeMaxIpdataRateUL with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdSNGRAnnodeMaxIpdataRateULMultiError, or nil if none found.
func (m *IdSNGRAnnodeMaxIpdataRateUL) ValidateAll() error {
	return m.validate(true)
}

func (m *IdSNGRAnnodeMaxIpdataRateUL) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 105 {
		err := IdSNGRAnnodeMaxIpdataRateULValidationError{
			field:  "Value",
			reason: "value must equal 105",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdSNGRAnnodeMaxIpdataRateULMultiError(errors)
	}

	return nil
}

// IdSNGRAnnodeMaxIpdataRateULMultiError is an error wrapping multiple
// validation errors returned by IdSNGRAnnodeMaxIpdataRateUL.ValidateAll() if
// the designated constraints aren't met.
type IdSNGRAnnodeMaxIpdataRateULMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdSNGRAnnodeMaxIpdataRateULMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdSNGRAnnodeMaxIpdataRateULMultiError) AllErrors() []error { return m }

// IdSNGRAnnodeMaxIpdataRateULValidationError is the validation error returned
// by IdSNGRAnnodeMaxIpdataRateUL.Validate if the designated constraints
// aren't met.
type IdSNGRAnnodeMaxIpdataRateULValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdSNGRAnnodeMaxIpdataRateULValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdSNGRAnnodeMaxIpdataRateULValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdSNGRAnnodeMaxIpdataRateULValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdSNGRAnnodeMaxIpdataRateULValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdSNGRAnnodeMaxIpdataRateULValidationError) ErrorName() string {
	return "IdSNGRAnnodeMaxIpdataRateULValidationError"
}

// Error satisfies the builtin error interface
func (e IdSNGRAnnodeMaxIpdataRateULValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdSNGRAnnodeMaxIpdataRateUL.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdSNGRAnnodeMaxIpdataRateULValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdSNGRAnnodeMaxIpdataRateULValidationError{}

// Validate checks the field values on
// IdPDusessionResourceSecondaryRatusageList with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *IdPDusessionResourceSecondaryRatusageList) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// IdPDusessionResourceSecondaryRatusageList with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// IdPDusessionResourceSecondaryRatusageListMultiError, or nil if none found.
func (m *IdPDusessionResourceSecondaryRatusageList) ValidateAll() error {
	return m.validate(true)
}

func (m *IdPDusessionResourceSecondaryRatusageList) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 107 {
		err := IdPDusessionResourceSecondaryRatusageListValidationError{
			field:  "Value",
			reason: "value must equal 107",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdPDusessionResourceSecondaryRatusageListMultiError(errors)
	}

	return nil
}

// IdPDusessionResourceSecondaryRatusageListMultiError is an error wrapping
// multiple validation errors returned by
// IdPDusessionResourceSecondaryRatusageList.ValidateAll() if the designated
// constraints aren't met.
type IdPDusessionResourceSecondaryRatusageListMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdPDusessionResourceSecondaryRatusageListMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdPDusessionResourceSecondaryRatusageListMultiError) AllErrors() []error { return m }

// IdPDusessionResourceSecondaryRatusageListValidationError is the validation
// error returned by IdPDusessionResourceSecondaryRatusageList.Validate if the
// designated constraints aren't met.
type IdPDusessionResourceSecondaryRatusageListValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdPDusessionResourceSecondaryRatusageListValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdPDusessionResourceSecondaryRatusageListValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdPDusessionResourceSecondaryRatusageListValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdPDusessionResourceSecondaryRatusageListValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdPDusessionResourceSecondaryRatusageListValidationError) ErrorName() string {
	return "IdPDusessionResourceSecondaryRatusageListValidationError"
}

// Error satisfies the builtin error interface
func (e IdPDusessionResourceSecondaryRatusageListValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdPDusessionResourceSecondaryRatusageList.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdPDusessionResourceSecondaryRatusageListValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdPDusessionResourceSecondaryRatusageListValidationError{}

// Validate checks the field values on IdAdditionalULNGUTNlatUpfList with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdAdditionalULNGUTNlatUpfList) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdAdditionalULNGUTNlatUpfList with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// IdAdditionalULNGUTNlatUpfListMultiError, or nil if none found.
func (m *IdAdditionalULNGUTNlatUpfList) ValidateAll() error {
	return m.validate(true)
}

func (m *IdAdditionalULNGUTNlatUpfList) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 108 {
		err := IdAdditionalULNGUTNlatUpfListValidationError{
			field:  "Value",
			reason: "value must equal 108",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdAdditionalULNGUTNlatUpfListMultiError(errors)
	}

	return nil
}

// IdAdditionalULNGUTNlatUpfListMultiError is an error wrapping multiple
// validation errors returned by IdAdditionalULNGUTNlatUpfList.ValidateAll()
// if the designated constraints aren't met.
type IdAdditionalULNGUTNlatUpfListMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdAdditionalULNGUTNlatUpfListMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdAdditionalULNGUTNlatUpfListMultiError) AllErrors() []error { return m }

// IdAdditionalULNGUTNlatUpfListValidationError is the validation error
// returned by IdAdditionalULNGUTNlatUpfList.Validate if the designated
// constraints aren't met.
type IdAdditionalULNGUTNlatUpfListValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdAdditionalULNGUTNlatUpfListValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdAdditionalULNGUTNlatUpfListValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdAdditionalULNGUTNlatUpfListValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdAdditionalULNGUTNlatUpfListValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdAdditionalULNGUTNlatUpfListValidationError) ErrorName() string {
	return "IdAdditionalULNGUTNlatUpfListValidationError"
}

// Error satisfies the builtin error interface
func (e IdAdditionalULNGUTNlatUpfListValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdAdditionalULNGUTNlatUpfList.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdAdditionalULNGUTNlatUpfListValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdAdditionalULNGUTNlatUpfListValidationError{}

// Validate checks the field values on
// IdSecondarydataForwardingInfoFromTargetList with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *IdSecondarydataForwardingInfoFromTargetList) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// IdSecondarydataForwardingInfoFromTargetList with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// IdSecondarydataForwardingInfoFromTargetListMultiError, or nil if none found.
func (m *IdSecondarydataForwardingInfoFromTargetList) ValidateAll() error {
	return m.validate(true)
}

func (m *IdSecondarydataForwardingInfoFromTargetList) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 109 {
		err := IdSecondarydataForwardingInfoFromTargetListValidationError{
			field:  "Value",
			reason: "value must equal 109",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdSecondarydataForwardingInfoFromTargetListMultiError(errors)
	}

	return nil
}

// IdSecondarydataForwardingInfoFromTargetListMultiError is an error wrapping
// multiple validation errors returned by
// IdSecondarydataForwardingInfoFromTargetList.ValidateAll() if the designated
// constraints aren't met.
type IdSecondarydataForwardingInfoFromTargetListMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdSecondarydataForwardingInfoFromTargetListMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdSecondarydataForwardingInfoFromTargetListMultiError) AllErrors() []error { return m }

// IdSecondarydataForwardingInfoFromTargetListValidationError is the validation
// error returned by IdSecondarydataForwardingInfoFromTargetList.Validate if
// the designated constraints aren't met.
type IdSecondarydataForwardingInfoFromTargetListValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdSecondarydataForwardingInfoFromTargetListValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdSecondarydataForwardingInfoFromTargetListValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdSecondarydataForwardingInfoFromTargetListValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdSecondarydataForwardingInfoFromTargetListValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdSecondarydataForwardingInfoFromTargetListValidationError) ErrorName() string {
	return "IdSecondarydataForwardingInfoFromTargetListValidationError"
}

// Error satisfies the builtin error interface
func (e IdSecondarydataForwardingInfoFromTargetListValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdSecondarydataForwardingInfoFromTargetList.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdSecondarydataForwardingInfoFromTargetListValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdSecondarydataForwardingInfoFromTargetListValidationError{}

// Validate checks the field values on IdLocationInformationSnreporting with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *IdLocationInformationSnreporting) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdLocationInformationSnreporting with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// IdLocationInformationSnreportingMultiError, or nil if none found.
func (m *IdLocationInformationSnreporting) ValidateAll() error {
	return m.validate(true)
}

func (m *IdLocationInformationSnreporting) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 110 {
		err := IdLocationInformationSnreportingValidationError{
			field:  "Value",
			reason: "value must equal 110",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdLocationInformationSnreportingMultiError(errors)
	}

	return nil
}

// IdLocationInformationSnreportingMultiError is an error wrapping multiple
// validation errors returned by
// IdLocationInformationSnreporting.ValidateAll() if the designated
// constraints aren't met.
type IdLocationInformationSnreportingMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdLocationInformationSnreportingMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdLocationInformationSnreportingMultiError) AllErrors() []error { return m }

// IdLocationInformationSnreportingValidationError is the validation error
// returned by IdLocationInformationSnreporting.Validate if the designated
// constraints aren't met.
type IdLocationInformationSnreportingValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdLocationInformationSnreportingValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdLocationInformationSnreportingValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdLocationInformationSnreportingValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdLocationInformationSnreportingValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdLocationInformationSnreportingValidationError) ErrorName() string {
	return "IdLocationInformationSnreportingValidationError"
}

// Error satisfies the builtin error interface
func (e IdLocationInformationSnreportingValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdLocationInformationSnreporting.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdLocationInformationSnreportingValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdLocationInformationSnreportingValidationError{}

// Validate checks the field values on IdLocationInformationSn with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdLocationInformationSn) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdLocationInformationSn with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdLocationInformationSnMultiError, or nil if none found.
func (m *IdLocationInformationSn) ValidateAll() error {
	return m.validate(true)
}

func (m *IdLocationInformationSn) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 111 {
		err := IdLocationInformationSnValidationError{
			field:  "Value",
			reason: "value must equal 111",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdLocationInformationSnMultiError(errors)
	}

	return nil
}

// IdLocationInformationSnMultiError is an error wrapping multiple validation
// errors returned by IdLocationInformationSn.ValidateAll() if the designated
// constraints aren't met.
type IdLocationInformationSnMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdLocationInformationSnMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdLocationInformationSnMultiError) AllErrors() []error { return m }

// IdLocationInformationSnValidationError is the validation error returned by
// IdLocationInformationSn.Validate if the designated constraints aren't met.
type IdLocationInformationSnValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdLocationInformationSnValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdLocationInformationSnValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdLocationInformationSnValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdLocationInformationSnValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdLocationInformationSnValidationError) ErrorName() string {
	return "IdLocationInformationSnValidationError"
}

// Error satisfies the builtin error interface
func (e IdLocationInformationSnValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdLocationInformationSn.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdLocationInformationSnValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdLocationInformationSnValidationError{}

// Validate checks the field values on IdLastEUTranplmnidentity with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdLastEUTranplmnidentity) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdLastEUTranplmnidentity with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdLastEUTranplmnidentityMultiError, or nil if none found.
func (m *IdLastEUTranplmnidentity) ValidateAll() error {
	return m.validate(true)
}

func (m *IdLastEUTranplmnidentity) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 112 {
		err := IdLastEUTranplmnidentityValidationError{
			field:  "Value",
			reason: "value must equal 112",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdLastEUTranplmnidentityMultiError(errors)
	}

	return nil
}

// IdLastEUTranplmnidentityMultiError is an error wrapping multiple validation
// errors returned by IdLastEUTranplmnidentity.ValidateAll() if the designated
// constraints aren't met.
type IdLastEUTranplmnidentityMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdLastEUTranplmnidentityMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdLastEUTranplmnidentityMultiError) AllErrors() []error { return m }

// IdLastEUTranplmnidentityValidationError is the validation error returned by
// IdLastEUTranplmnidentity.Validate if the designated constraints aren't met.
type IdLastEUTranplmnidentityValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdLastEUTranplmnidentityValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdLastEUTranplmnidentityValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdLastEUTranplmnidentityValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdLastEUTranplmnidentityValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdLastEUTranplmnidentityValidationError) ErrorName() string {
	return "IdLastEUTranplmnidentityValidationError"
}

// Error satisfies the builtin error interface
func (e IdLastEUTranplmnidentityValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdLastEUTranplmnidentity.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdLastEUTranplmnidentityValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdLastEUTranplmnidentityValidationError{}

// Validate checks the field values on IdSNGRAnnodeMaxIpdataRateDL with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdSNGRAnnodeMaxIpdataRateDL) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdSNGRAnnodeMaxIpdataRateDL with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdSNGRAnnodeMaxIpdataRateDLMultiError, or nil if none found.
func (m *IdSNGRAnnodeMaxIpdataRateDL) ValidateAll() error {
	return m.validate(true)
}

func (m *IdSNGRAnnodeMaxIpdataRateDL) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 113 {
		err := IdSNGRAnnodeMaxIpdataRateDLValidationError{
			field:  "Value",
			reason: "value must equal 113",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdSNGRAnnodeMaxIpdataRateDLMultiError(errors)
	}

	return nil
}

// IdSNGRAnnodeMaxIpdataRateDLMultiError is an error wrapping multiple
// validation errors returned by IdSNGRAnnodeMaxIpdataRateDL.ValidateAll() if
// the designated constraints aren't met.
type IdSNGRAnnodeMaxIpdataRateDLMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdSNGRAnnodeMaxIpdataRateDLMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdSNGRAnnodeMaxIpdataRateDLMultiError) AllErrors() []error { return m }

// IdSNGRAnnodeMaxIpdataRateDLValidationError is the validation error returned
// by IdSNGRAnnodeMaxIpdataRateDL.Validate if the designated constraints
// aren't met.
type IdSNGRAnnodeMaxIpdataRateDLValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdSNGRAnnodeMaxIpdataRateDLValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdSNGRAnnodeMaxIpdataRateDLValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdSNGRAnnodeMaxIpdataRateDLValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdSNGRAnnodeMaxIpdataRateDLValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdSNGRAnnodeMaxIpdataRateDLValidationError) ErrorName() string {
	return "IdSNGRAnnodeMaxIpdataRateDLValidationError"
}

// Error satisfies the builtin error interface
func (e IdSNGRAnnodeMaxIpdataRateDLValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdSNGRAnnodeMaxIpdataRateDL.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdSNGRAnnodeMaxIpdataRateDLValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdSNGRAnnodeMaxIpdataRateDLValidationError{}

// Validate checks the field values on IdMaxIprateDL with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *IdMaxIprateDL) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdMaxIprateDL with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in IdMaxIprateDLMultiError, or
// nil if none found.
func (m *IdMaxIprateDL) ValidateAll() error {
	return m.validate(true)
}

func (m *IdMaxIprateDL) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 114 {
		err := IdMaxIprateDLValidationError{
			field:  "Value",
			reason: "value must equal 114",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdMaxIprateDLMultiError(errors)
	}

	return nil
}

// IdMaxIprateDLMultiError is an error wrapping multiple validation errors
// returned by IdMaxIprateDL.ValidateAll() if the designated constraints
// aren't met.
type IdMaxIprateDLMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdMaxIprateDLMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdMaxIprateDLMultiError) AllErrors() []error { return m }

// IdMaxIprateDLValidationError is the validation error returned by
// IdMaxIprateDL.Validate if the designated constraints aren't met.
type IdMaxIprateDLValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdMaxIprateDLValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdMaxIprateDLValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdMaxIprateDLValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdMaxIprateDLValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdMaxIprateDLValidationError) ErrorName() string { return "IdMaxIprateDLValidationError" }

// Error satisfies the builtin error interface
func (e IdMaxIprateDLValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdMaxIprateDL.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdMaxIprateDLValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdMaxIprateDLValidationError{}

// Validate checks the field values on IdSecurityResult with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *IdSecurityResult) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdSecurityResult with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdSecurityResultMultiError, or nil if none found.
func (m *IdSecurityResult) ValidateAll() error {
	return m.validate(true)
}

func (m *IdSecurityResult) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 115 {
		err := IdSecurityResultValidationError{
			field:  "Value",
			reason: "value must equal 115",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdSecurityResultMultiError(errors)
	}

	return nil
}

// IdSecurityResultMultiError is an error wrapping multiple validation errors
// returned by IdSecurityResult.ValidateAll() if the designated constraints
// aren't met.
type IdSecurityResultMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdSecurityResultMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdSecurityResultMultiError) AllErrors() []error { return m }

// IdSecurityResultValidationError is the validation error returned by
// IdSecurityResult.Validate if the designated constraints aren't met.
type IdSecurityResultValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdSecurityResultValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdSecurityResultValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdSecurityResultValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdSecurityResultValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdSecurityResultValidationError) ErrorName() string { return "IdSecurityResultValidationError" }

// Error satisfies the builtin error interface
func (e IdSecurityResultValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdSecurityResult.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdSecurityResultValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdSecurityResultValidationError{}

// Validate checks the field values on IdSNSsai with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *IdSNSsai) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdSNSsai with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in IdSNSsaiMultiError, or nil
// if none found.
func (m *IdSNSsai) ValidateAll() error {
	return m.validate(true)
}

func (m *IdSNSsai) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 116 {
		err := IdSNSsaiValidationError{
			field:  "Value",
			reason: "value must equal 116",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdSNSsaiMultiError(errors)
	}

	return nil
}

// IdSNSsaiMultiError is an error wrapping multiple validation errors returned
// by IdSNSsai.ValidateAll() if the designated constraints aren't met.
type IdSNSsaiMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdSNSsaiMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdSNSsaiMultiError) AllErrors() []error { return m }

// IdSNSsaiValidationError is the validation error returned by
// IdSNSsai.Validate if the designated constraints aren't met.
type IdSNSsaiValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdSNSsaiValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdSNSsaiValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdSNSsaiValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdSNSsaiValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdSNSsaiValidationError) ErrorName() string { return "IdSNSsaiValidationError" }

// Error satisfies the builtin error interface
func (e IdSNSsaiValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdSNSsai.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdSNSsaiValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdSNSsaiValidationError{}

// Validate checks the field values on IdMRDCResourceCoordinationInfo with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdMRDCResourceCoordinationInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdMRDCResourceCoordinationInfo with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// IdMRDCResourceCoordinationInfoMultiError, or nil if none found.
func (m *IdMRDCResourceCoordinationInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *IdMRDCResourceCoordinationInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 117 {
		err := IdMRDCResourceCoordinationInfoValidationError{
			field:  "Value",
			reason: "value must equal 117",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdMRDCResourceCoordinationInfoMultiError(errors)
	}

	return nil
}

// IdMRDCResourceCoordinationInfoMultiError is an error wrapping multiple
// validation errors returned by IdMRDCResourceCoordinationInfo.ValidateAll()
// if the designated constraints aren't met.
type IdMRDCResourceCoordinationInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdMRDCResourceCoordinationInfoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdMRDCResourceCoordinationInfoMultiError) AllErrors() []error { return m }

// IdMRDCResourceCoordinationInfoValidationError is the validation error
// returned by IdMRDCResourceCoordinationInfo.Validate if the designated
// constraints aren't met.
type IdMRDCResourceCoordinationInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdMRDCResourceCoordinationInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdMRDCResourceCoordinationInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdMRDCResourceCoordinationInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdMRDCResourceCoordinationInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdMRDCResourceCoordinationInfoValidationError) ErrorName() string {
	return "IdMRDCResourceCoordinationInfoValidationError"
}

// Error satisfies the builtin error interface
func (e IdMRDCResourceCoordinationInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdMRDCResourceCoordinationInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdMRDCResourceCoordinationInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdMRDCResourceCoordinationInfoValidationError{}

// Validate checks the field values on IdAMfRegionInformationToAdd with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdAMfRegionInformationToAdd) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdAMfRegionInformationToAdd with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdAMfRegionInformationToAddMultiError, or nil if none found.
func (m *IdAMfRegionInformationToAdd) ValidateAll() error {
	return m.validate(true)
}

func (m *IdAMfRegionInformationToAdd) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 118 {
		err := IdAMfRegionInformationToAddValidationError{
			field:  "Value",
			reason: "value must equal 118",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdAMfRegionInformationToAddMultiError(errors)
	}

	return nil
}

// IdAMfRegionInformationToAddMultiError is an error wrapping multiple
// validation errors returned by IdAMfRegionInformationToAdd.ValidateAll() if
// the designated constraints aren't met.
type IdAMfRegionInformationToAddMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdAMfRegionInformationToAddMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdAMfRegionInformationToAddMultiError) AllErrors() []error { return m }

// IdAMfRegionInformationToAddValidationError is the validation error returned
// by IdAMfRegionInformationToAdd.Validate if the designated constraints
// aren't met.
type IdAMfRegionInformationToAddValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdAMfRegionInformationToAddValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdAMfRegionInformationToAddValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdAMfRegionInformationToAddValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdAMfRegionInformationToAddValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdAMfRegionInformationToAddValidationError) ErrorName() string {
	return "IdAMfRegionInformationToAddValidationError"
}

// Error satisfies the builtin error interface
func (e IdAMfRegionInformationToAddValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdAMfRegionInformationToAdd.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdAMfRegionInformationToAddValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdAMfRegionInformationToAddValidationError{}

// Validate checks the field values on IdAMfRegionInformationToDelete with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdAMfRegionInformationToDelete) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdAMfRegionInformationToDelete with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// IdAMfRegionInformationToDeleteMultiError, or nil if none found.
func (m *IdAMfRegionInformationToDelete) ValidateAll() error {
	return m.validate(true)
}

func (m *IdAMfRegionInformationToDelete) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 119 {
		err := IdAMfRegionInformationToDeleteValidationError{
			field:  "Value",
			reason: "value must equal 119",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdAMfRegionInformationToDeleteMultiError(errors)
	}

	return nil
}

// IdAMfRegionInformationToDeleteMultiError is an error wrapping multiple
// validation errors returned by IdAMfRegionInformationToDelete.ValidateAll()
// if the designated constraints aren't met.
type IdAMfRegionInformationToDeleteMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdAMfRegionInformationToDeleteMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdAMfRegionInformationToDeleteMultiError) AllErrors() []error { return m }

// IdAMfRegionInformationToDeleteValidationError is the validation error
// returned by IdAMfRegionInformationToDelete.Validate if the designated
// constraints aren't met.
type IdAMfRegionInformationToDeleteValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdAMfRegionInformationToDeleteValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdAMfRegionInformationToDeleteValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdAMfRegionInformationToDeleteValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdAMfRegionInformationToDeleteValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdAMfRegionInformationToDeleteValidationError) ErrorName() string {
	return "IdAMfRegionInformationToDeleteValidationError"
}

// Error satisfies the builtin error interface
func (e IdAMfRegionInformationToDeleteValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdAMfRegionInformationToDelete.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdAMfRegionInformationToDeleteValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdAMfRegionInformationToDeleteValidationError{}

// Validate checks the field values on IdOldQoSflowMapULendmarkerexpected with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *IdOldQoSflowMapULendmarkerexpected) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdOldQoSflowMapULendmarkerexpected
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// IdOldQoSflowMapULendmarkerexpectedMultiError, or nil if none found.
func (m *IdOldQoSflowMapULendmarkerexpected) ValidateAll() error {
	return m.validate(true)
}

func (m *IdOldQoSflowMapULendmarkerexpected) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 120 {
		err := IdOldQoSflowMapULendmarkerexpectedValidationError{
			field:  "Value",
			reason: "value must equal 120",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdOldQoSflowMapULendmarkerexpectedMultiError(errors)
	}

	return nil
}

// IdOldQoSflowMapULendmarkerexpectedMultiError is an error wrapping multiple
// validation errors returned by
// IdOldQoSflowMapULendmarkerexpected.ValidateAll() if the designated
// constraints aren't met.
type IdOldQoSflowMapULendmarkerexpectedMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdOldQoSflowMapULendmarkerexpectedMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdOldQoSflowMapULendmarkerexpectedMultiError) AllErrors() []error { return m }

// IdOldQoSflowMapULendmarkerexpectedValidationError is the validation error
// returned by IdOldQoSflowMapULendmarkerexpected.Validate if the designated
// constraints aren't met.
type IdOldQoSflowMapULendmarkerexpectedValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdOldQoSflowMapULendmarkerexpectedValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdOldQoSflowMapULendmarkerexpectedValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdOldQoSflowMapULendmarkerexpectedValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdOldQoSflowMapULendmarkerexpectedValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdOldQoSflowMapULendmarkerexpectedValidationError) ErrorName() string {
	return "IdOldQoSflowMapULendmarkerexpectedValidationError"
}

// Error satisfies the builtin error interface
func (e IdOldQoSflowMapULendmarkerexpectedValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdOldQoSflowMapULendmarkerexpected.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdOldQoSflowMapULendmarkerexpectedValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdOldQoSflowMapULendmarkerexpectedValidationError{}

// Validate checks the field values on IdRAnpagingFailure with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdRAnpagingFailure) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdRAnpagingFailure with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdRAnpagingFailureMultiError, or nil if none found.
func (m *IdRAnpagingFailure) ValidateAll() error {
	return m.validate(true)
}

func (m *IdRAnpagingFailure) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 121 {
		err := IdRAnpagingFailureValidationError{
			field:  "Value",
			reason: "value must equal 121",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdRAnpagingFailureMultiError(errors)
	}

	return nil
}

// IdRAnpagingFailureMultiError is an error wrapping multiple validation errors
// returned by IdRAnpagingFailure.ValidateAll() if the designated constraints
// aren't met.
type IdRAnpagingFailureMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdRAnpagingFailureMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdRAnpagingFailureMultiError) AllErrors() []error { return m }

// IdRAnpagingFailureValidationError is the validation error returned by
// IdRAnpagingFailure.Validate if the designated constraints aren't met.
type IdRAnpagingFailureValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdRAnpagingFailureValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdRAnpagingFailureValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdRAnpagingFailureValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdRAnpagingFailureValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdRAnpagingFailureValidationError) ErrorName() string {
	return "IdRAnpagingFailureValidationError"
}

// Error satisfies the builtin error interface
func (e IdRAnpagingFailureValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdRAnpagingFailure.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdRAnpagingFailureValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdRAnpagingFailureValidationError{}

// Validate checks the field values on IdUEradioCapabilityForPaging with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdUEradioCapabilityForPaging) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdUEradioCapabilityForPaging with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdUEradioCapabilityForPagingMultiError, or nil if none found.
func (m *IdUEradioCapabilityForPaging) ValidateAll() error {
	return m.validate(true)
}

func (m *IdUEradioCapabilityForPaging) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 122 {
		err := IdUEradioCapabilityForPagingValidationError{
			field:  "Value",
			reason: "value must equal 122",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdUEradioCapabilityForPagingMultiError(errors)
	}

	return nil
}

// IdUEradioCapabilityForPagingMultiError is an error wrapping multiple
// validation errors returned by IdUEradioCapabilityForPaging.ValidateAll() if
// the designated constraints aren't met.
type IdUEradioCapabilityForPagingMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdUEradioCapabilityForPagingMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdUEradioCapabilityForPagingMultiError) AllErrors() []error { return m }

// IdUEradioCapabilityForPagingValidationError is the validation error returned
// by IdUEradioCapabilityForPaging.Validate if the designated constraints
// aren't met.
type IdUEradioCapabilityForPagingValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdUEradioCapabilityForPagingValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdUEradioCapabilityForPagingValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdUEradioCapabilityForPagingValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdUEradioCapabilityForPagingValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdUEradioCapabilityForPagingValidationError) ErrorName() string {
	return "IdUEradioCapabilityForPagingValidationError"
}

// Error satisfies the builtin error interface
func (e IdUEradioCapabilityForPagingValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdUEradioCapabilityForPaging.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdUEradioCapabilityForPagingValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdUEradioCapabilityForPagingValidationError{}

// Validate checks the field values on IdPDusessionDataForwardingSNmodResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *IdPDusessionDataForwardingSNmodResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// IdPDusessionDataForwardingSNmodResponse with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// IdPDusessionDataForwardingSNmodResponseMultiError, or nil if none found.
func (m *IdPDusessionDataForwardingSNmodResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *IdPDusessionDataForwardingSNmodResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 123 {
		err := IdPDusessionDataForwardingSNmodResponseValidationError{
			field:  "Value",
			reason: "value must equal 123",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdPDusessionDataForwardingSNmodResponseMultiError(errors)
	}

	return nil
}

// IdPDusessionDataForwardingSNmodResponseMultiError is an error wrapping
// multiple validation errors returned by
// IdPDusessionDataForwardingSNmodResponse.ValidateAll() if the designated
// constraints aren't met.
type IdPDusessionDataForwardingSNmodResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdPDusessionDataForwardingSNmodResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdPDusessionDataForwardingSNmodResponseMultiError) AllErrors() []error { return m }

// IdPDusessionDataForwardingSNmodResponseValidationError is the validation
// error returned by IdPDusessionDataForwardingSNmodResponse.Validate if the
// designated constraints aren't met.
type IdPDusessionDataForwardingSNmodResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdPDusessionDataForwardingSNmodResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdPDusessionDataForwardingSNmodResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdPDusessionDataForwardingSNmodResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdPDusessionDataForwardingSNmodResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdPDusessionDataForwardingSNmodResponseValidationError) ErrorName() string {
	return "IdPDusessionDataForwardingSNmodResponseValidationError"
}

// Error satisfies the builtin error interface
func (e IdPDusessionDataForwardingSNmodResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdPDusessionDataForwardingSNmodResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdPDusessionDataForwardingSNmodResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdPDusessionDataForwardingSNmodResponseValidationError{}

// Validate checks the field values on IdDRbsNotAdmittedSetupModifyList with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *IdDRbsNotAdmittedSetupModifyList) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdDRbsNotAdmittedSetupModifyList with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// IdDRbsNotAdmittedSetupModifyListMultiError, or nil if none found.
func (m *IdDRbsNotAdmittedSetupModifyList) ValidateAll() error {
	return m.validate(true)
}

func (m *IdDRbsNotAdmittedSetupModifyList) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 124 {
		err := IdDRbsNotAdmittedSetupModifyListValidationError{
			field:  "Value",
			reason: "value must equal 124",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdDRbsNotAdmittedSetupModifyListMultiError(errors)
	}

	return nil
}

// IdDRbsNotAdmittedSetupModifyListMultiError is an error wrapping multiple
// validation errors returned by
// IdDRbsNotAdmittedSetupModifyList.ValidateAll() if the designated
// constraints aren't met.
type IdDRbsNotAdmittedSetupModifyListMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdDRbsNotAdmittedSetupModifyListMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdDRbsNotAdmittedSetupModifyListMultiError) AllErrors() []error { return m }

// IdDRbsNotAdmittedSetupModifyListValidationError is the validation error
// returned by IdDRbsNotAdmittedSetupModifyList.Validate if the designated
// constraints aren't met.
type IdDRbsNotAdmittedSetupModifyListValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdDRbsNotAdmittedSetupModifyListValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdDRbsNotAdmittedSetupModifyListValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdDRbsNotAdmittedSetupModifyListValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdDRbsNotAdmittedSetupModifyListValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdDRbsNotAdmittedSetupModifyListValidationError) ErrorName() string {
	return "IdDRbsNotAdmittedSetupModifyListValidationError"
}

// Error satisfies the builtin error interface
func (e IdDRbsNotAdmittedSetupModifyListValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdDRbsNotAdmittedSetupModifyList.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdDRbsNotAdmittedSetupModifyListValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdDRbsNotAdmittedSetupModifyListValidationError{}

// Validate checks the field values on IdSecondaryMNXnUTNlinfoatM with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdSecondaryMNXnUTNlinfoatM) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdSecondaryMNXnUTNlinfoatM with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdSecondaryMNXnUTNlinfoatMMultiError, or nil if none found.
func (m *IdSecondaryMNXnUTNlinfoatM) ValidateAll() error {
	return m.validate(true)
}

func (m *IdSecondaryMNXnUTNlinfoatM) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 125 {
		err := IdSecondaryMNXnUTNlinfoatMValidationError{
			field:  "Value",
			reason: "value must equal 125",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdSecondaryMNXnUTNlinfoatMMultiError(errors)
	}

	return nil
}

// IdSecondaryMNXnUTNlinfoatMMultiError is an error wrapping multiple
// validation errors returned by IdSecondaryMNXnUTNlinfoatM.ValidateAll() if
// the designated constraints aren't met.
type IdSecondaryMNXnUTNlinfoatMMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdSecondaryMNXnUTNlinfoatMMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdSecondaryMNXnUTNlinfoatMMultiError) AllErrors() []error { return m }

// IdSecondaryMNXnUTNlinfoatMValidationError is the validation error returned
// by IdSecondaryMNXnUTNlinfoatM.Validate if the designated constraints aren't met.
type IdSecondaryMNXnUTNlinfoatMValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdSecondaryMNXnUTNlinfoatMValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdSecondaryMNXnUTNlinfoatMValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdSecondaryMNXnUTNlinfoatMValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdSecondaryMNXnUTNlinfoatMValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdSecondaryMNXnUTNlinfoatMValidationError) ErrorName() string {
	return "IdSecondaryMNXnUTNlinfoatMValidationError"
}

// Error satisfies the builtin error interface
func (e IdSecondaryMNXnUTNlinfoatMValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdSecondaryMNXnUTNlinfoatM.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdSecondaryMNXnUTNlinfoatMValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdSecondaryMNXnUTNlinfoatMValidationError{}

// Validate checks the field values on IdNEDCTDmPattern with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *IdNEDCTDmPattern) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdNEDCTDmPattern with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdNEDCTDmPatternMultiError, or nil if none found.
func (m *IdNEDCTDmPattern) ValidateAll() error {
	return m.validate(true)
}

func (m *IdNEDCTDmPattern) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 126 {
		err := IdNEDCTDmPatternValidationError{
			field:  "Value",
			reason: "value must equal 126",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdNEDCTDmPatternMultiError(errors)
	}

	return nil
}

// IdNEDCTDmPatternMultiError is an error wrapping multiple validation errors
// returned by IdNEDCTDmPattern.ValidateAll() if the designated constraints
// aren't met.
type IdNEDCTDmPatternMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdNEDCTDmPatternMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdNEDCTDmPatternMultiError) AllErrors() []error { return m }

// IdNEDCTDmPatternValidationError is the validation error returned by
// IdNEDCTDmPattern.Validate if the designated constraints aren't met.
type IdNEDCTDmPatternValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdNEDCTDmPatternValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdNEDCTDmPatternValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdNEDCTDmPatternValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdNEDCTDmPatternValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdNEDCTDmPatternValidationError) ErrorName() string { return "IdNEDCTDmPatternValidationError" }

// Error satisfies the builtin error interface
func (e IdNEDCTDmPatternValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdNEDCTDmPattern.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdNEDCTDmPatternValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdNEDCTDmPatternValidationError{}

// Validate checks the field values on IdPDusessionCommonNetworkInstance with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *IdPDusessionCommonNetworkInstance) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdPDusessionCommonNetworkInstance
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// IdPDusessionCommonNetworkInstanceMultiError, or nil if none found.
func (m *IdPDusessionCommonNetworkInstance) ValidateAll() error {
	return m.validate(true)
}

func (m *IdPDusessionCommonNetworkInstance) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 127 {
		err := IdPDusessionCommonNetworkInstanceValidationError{
			field:  "Value",
			reason: "value must equal 127",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdPDusessionCommonNetworkInstanceMultiError(errors)
	}

	return nil
}

// IdPDusessionCommonNetworkInstanceMultiError is an error wrapping multiple
// validation errors returned by
// IdPDusessionCommonNetworkInstance.ValidateAll() if the designated
// constraints aren't met.
type IdPDusessionCommonNetworkInstanceMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdPDusessionCommonNetworkInstanceMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdPDusessionCommonNetworkInstanceMultiError) AllErrors() []error { return m }

// IdPDusessionCommonNetworkInstanceValidationError is the validation error
// returned by IdPDusessionCommonNetworkInstance.Validate if the designated
// constraints aren't met.
type IdPDusessionCommonNetworkInstanceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdPDusessionCommonNetworkInstanceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdPDusessionCommonNetworkInstanceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdPDusessionCommonNetworkInstanceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdPDusessionCommonNetworkInstanceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdPDusessionCommonNetworkInstanceValidationError) ErrorName() string {
	return "IdPDusessionCommonNetworkInstanceValidationError"
}

// Error satisfies the builtin error interface
func (e IdPDusessionCommonNetworkInstanceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdPDusessionCommonNetworkInstance.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdPDusessionCommonNetworkInstanceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdPDusessionCommonNetworkInstanceValidationError{}

// Validate checks the field values on IdBPlmnIDInfoEUtra with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdBPlmnIDInfoEUtra) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdBPlmnIDInfoEUtra with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdBPlmnIDInfoEUtraMultiError, or nil if none found.
func (m *IdBPlmnIDInfoEUtra) ValidateAll() error {
	return m.validate(true)
}

func (m *IdBPlmnIDInfoEUtra) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 128 {
		err := IdBPlmnIDInfoEUtraValidationError{
			field:  "Value",
			reason: "value must equal 128",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdBPlmnIDInfoEUtraMultiError(errors)
	}

	return nil
}

// IdBPlmnIDInfoEUtraMultiError is an error wrapping multiple validation errors
// returned by IdBPlmnIDInfoEUtra.ValidateAll() if the designated constraints
// aren't met.
type IdBPlmnIDInfoEUtraMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdBPlmnIDInfoEUtraMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdBPlmnIDInfoEUtraMultiError) AllErrors() []error { return m }

// IdBPlmnIDInfoEUtraValidationError is the validation error returned by
// IdBPlmnIDInfoEUtra.Validate if the designated constraints aren't met.
type IdBPlmnIDInfoEUtraValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdBPlmnIDInfoEUtraValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdBPlmnIDInfoEUtraValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdBPlmnIDInfoEUtraValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdBPlmnIDInfoEUtraValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdBPlmnIDInfoEUtraValidationError) ErrorName() string {
	return "IdBPlmnIDInfoEUtraValidationError"
}

// Error satisfies the builtin error interface
func (e IdBPlmnIDInfoEUtraValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdBPlmnIDInfoEUtra.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdBPlmnIDInfoEUtraValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdBPlmnIDInfoEUtraValidationError{}

// Validate checks the field values on IdBPlmnIDInfoNR with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *IdBPlmnIDInfoNR) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdBPlmnIDInfoNR with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdBPlmnIDInfoNRMultiError, or nil if none found.
func (m *IdBPlmnIDInfoNR) ValidateAll() error {
	return m.validate(true)
}

func (m *IdBPlmnIDInfoNR) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 129 {
		err := IdBPlmnIDInfoNRValidationError{
			field:  "Value",
			reason: "value must equal 129",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdBPlmnIDInfoNRMultiError(errors)
	}

	return nil
}

// IdBPlmnIDInfoNRMultiError is an error wrapping multiple validation errors
// returned by IdBPlmnIDInfoNR.ValidateAll() if the designated constraints
// aren't met.
type IdBPlmnIDInfoNRMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdBPlmnIDInfoNRMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdBPlmnIDInfoNRMultiError) AllErrors() []error { return m }

// IdBPlmnIDInfoNRValidationError is the validation error returned by
// IdBPlmnIDInfoNR.Validate if the designated constraints aren't met.
type IdBPlmnIDInfoNRValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdBPlmnIDInfoNRValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdBPlmnIDInfoNRValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdBPlmnIDInfoNRValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdBPlmnIDInfoNRValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdBPlmnIDInfoNRValidationError) ErrorName() string { return "IdBPlmnIDInfoNRValidationError" }

// Error satisfies the builtin error interface
func (e IdBPlmnIDInfoNRValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdBPlmnIDInfoNR.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdBPlmnIDInfoNRValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdBPlmnIDInfoNRValidationError{}

// Validate checks the field values on IdInterfaceInstanceIndication with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdInterfaceInstanceIndication) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdInterfaceInstanceIndication with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// IdInterfaceInstanceIndicationMultiError, or nil if none found.
func (m *IdInterfaceInstanceIndication) ValidateAll() error {
	return m.validate(true)
}

func (m *IdInterfaceInstanceIndication) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 130 {
		err := IdInterfaceInstanceIndicationValidationError{
			field:  "Value",
			reason: "value must equal 130",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdInterfaceInstanceIndicationMultiError(errors)
	}

	return nil
}

// IdInterfaceInstanceIndicationMultiError is an error wrapping multiple
// validation errors returned by IdInterfaceInstanceIndication.ValidateAll()
// if the designated constraints aren't met.
type IdInterfaceInstanceIndicationMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdInterfaceInstanceIndicationMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdInterfaceInstanceIndicationMultiError) AllErrors() []error { return m }

// IdInterfaceInstanceIndicationValidationError is the validation error
// returned by IdInterfaceInstanceIndication.Validate if the designated
// constraints aren't met.
type IdInterfaceInstanceIndicationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdInterfaceInstanceIndicationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdInterfaceInstanceIndicationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdInterfaceInstanceIndicationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdInterfaceInstanceIndicationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdInterfaceInstanceIndicationValidationError) ErrorName() string {
	return "IdInterfaceInstanceIndicationValidationError"
}

// Error satisfies the builtin error interface
func (e IdInterfaceInstanceIndicationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdInterfaceInstanceIndication.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdInterfaceInstanceIndicationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdInterfaceInstanceIndicationValidationError{}

// Validate checks the field values on IdSNGRAnnodeAdditionTriggerInd with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdSNGRAnnodeAdditionTriggerInd) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdSNGRAnnodeAdditionTriggerInd with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// IdSNGRAnnodeAdditionTriggerIndMultiError, or nil if none found.
func (m *IdSNGRAnnodeAdditionTriggerInd) ValidateAll() error {
	return m.validate(true)
}

func (m *IdSNGRAnnodeAdditionTriggerInd) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 131 {
		err := IdSNGRAnnodeAdditionTriggerIndValidationError{
			field:  "Value",
			reason: "value must equal 131",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdSNGRAnnodeAdditionTriggerIndMultiError(errors)
	}

	return nil
}

// IdSNGRAnnodeAdditionTriggerIndMultiError is an error wrapping multiple
// validation errors returned by IdSNGRAnnodeAdditionTriggerInd.ValidateAll()
// if the designated constraints aren't met.
type IdSNGRAnnodeAdditionTriggerIndMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdSNGRAnnodeAdditionTriggerIndMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdSNGRAnnodeAdditionTriggerIndMultiError) AllErrors() []error { return m }

// IdSNGRAnnodeAdditionTriggerIndValidationError is the validation error
// returned by IdSNGRAnnodeAdditionTriggerInd.Validate if the designated
// constraints aren't met.
type IdSNGRAnnodeAdditionTriggerIndValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdSNGRAnnodeAdditionTriggerIndValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdSNGRAnnodeAdditionTriggerIndValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdSNGRAnnodeAdditionTriggerIndValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdSNGRAnnodeAdditionTriggerIndValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdSNGRAnnodeAdditionTriggerIndValidationError) ErrorName() string {
	return "IdSNGRAnnodeAdditionTriggerIndValidationError"
}

// Error satisfies the builtin error interface
func (e IdSNGRAnnodeAdditionTriggerIndValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdSNGRAnnodeAdditionTriggerInd.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdSNGRAnnodeAdditionTriggerIndValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdSNGRAnnodeAdditionTriggerIndValidationError{}

// Validate checks the field values on IdDefaultDrbAllowed with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdDefaultDrbAllowed) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdDefaultDrbAllowed with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdDefaultDrbAllowedMultiError, or nil if none found.
func (m *IdDefaultDrbAllowed) ValidateAll() error {
	return m.validate(true)
}

func (m *IdDefaultDrbAllowed) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 132 {
		err := IdDefaultDrbAllowedValidationError{
			field:  "Value",
			reason: "value must equal 132",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdDefaultDrbAllowedMultiError(errors)
	}

	return nil
}

// IdDefaultDrbAllowedMultiError is an error wrapping multiple validation
// errors returned by IdDefaultDrbAllowed.ValidateAll() if the designated
// constraints aren't met.
type IdDefaultDrbAllowedMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdDefaultDrbAllowedMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdDefaultDrbAllowedMultiError) AllErrors() []error { return m }

// IdDefaultDrbAllowedValidationError is the validation error returned by
// IdDefaultDrbAllowed.Validate if the designated constraints aren't met.
type IdDefaultDrbAllowedValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdDefaultDrbAllowedValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdDefaultDrbAllowedValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdDefaultDrbAllowedValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdDefaultDrbAllowedValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdDefaultDrbAllowedValidationError) ErrorName() string {
	return "IdDefaultDrbAllowedValidationError"
}

// Error satisfies the builtin error interface
func (e IdDefaultDrbAllowedValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdDefaultDrbAllowed.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdDefaultDrbAllowedValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdDefaultDrbAllowedValidationError{}

// Validate checks the field values on IdDRbIDstakenintouse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdDRbIDstakenintouse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdDRbIDstakenintouse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdDRbIDstakenintouseMultiError, or nil if none found.
func (m *IdDRbIDstakenintouse) ValidateAll() error {
	return m.validate(true)
}

func (m *IdDRbIDstakenintouse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 133 {
		err := IdDRbIDstakenintouseValidationError{
			field:  "Value",
			reason: "value must equal 133",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdDRbIDstakenintouseMultiError(errors)
	}

	return nil
}

// IdDRbIDstakenintouseMultiError is an error wrapping multiple validation
// errors returned by IdDRbIDstakenintouse.ValidateAll() if the designated
// constraints aren't met.
type IdDRbIDstakenintouseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdDRbIDstakenintouseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdDRbIDstakenintouseMultiError) AllErrors() []error { return m }

// IdDRbIDstakenintouseValidationError is the validation error returned by
// IdDRbIDstakenintouse.Validate if the designated constraints aren't met.
type IdDRbIDstakenintouseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdDRbIDstakenintouseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdDRbIDstakenintouseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdDRbIDstakenintouseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdDRbIDstakenintouseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdDRbIDstakenintouseValidationError) ErrorName() string {
	return "IdDRbIDstakenintouseValidationError"
}

// Error satisfies the builtin error interface
func (e IdDRbIDstakenintouseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdDRbIDstakenintouse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdDRbIDstakenintouseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdDRbIDstakenintouseValidationError{}

// Validate checks the field values on IdSplitSessionIndicator with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdSplitSessionIndicator) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdSplitSessionIndicator with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdSplitSessionIndicatorMultiError, or nil if none found.
func (m *IdSplitSessionIndicator) ValidateAll() error {
	return m.validate(true)
}

func (m *IdSplitSessionIndicator) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 134 {
		err := IdSplitSessionIndicatorValidationError{
			field:  "Value",
			reason: "value must equal 134",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdSplitSessionIndicatorMultiError(errors)
	}

	return nil
}

// IdSplitSessionIndicatorMultiError is an error wrapping multiple validation
// errors returned by IdSplitSessionIndicator.ValidateAll() if the designated
// constraints aren't met.
type IdSplitSessionIndicatorMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdSplitSessionIndicatorMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdSplitSessionIndicatorMultiError) AllErrors() []error { return m }

// IdSplitSessionIndicatorValidationError is the validation error returned by
// IdSplitSessionIndicator.Validate if the designated constraints aren't met.
type IdSplitSessionIndicatorValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdSplitSessionIndicatorValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdSplitSessionIndicatorValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdSplitSessionIndicatorValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdSplitSessionIndicatorValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdSplitSessionIndicatorValidationError) ErrorName() string {
	return "IdSplitSessionIndicatorValidationError"
}

// Error satisfies the builtin error interface
func (e IdSplitSessionIndicatorValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdSplitSessionIndicator.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdSplitSessionIndicatorValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdSplitSessionIndicatorValidationError{}

// Validate checks the field values on IdCNtypeRestrictionsForEquivalent with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *IdCNtypeRestrictionsForEquivalent) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdCNtypeRestrictionsForEquivalent
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// IdCNtypeRestrictionsForEquivalentMultiError, or nil if none found.
func (m *IdCNtypeRestrictionsForEquivalent) ValidateAll() error {
	return m.validate(true)
}

func (m *IdCNtypeRestrictionsForEquivalent) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 135 {
		err := IdCNtypeRestrictionsForEquivalentValidationError{
			field:  "Value",
			reason: "value must equal 135",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdCNtypeRestrictionsForEquivalentMultiError(errors)
	}

	return nil
}

// IdCNtypeRestrictionsForEquivalentMultiError is an error wrapping multiple
// validation errors returned by
// IdCNtypeRestrictionsForEquivalent.ValidateAll() if the designated
// constraints aren't met.
type IdCNtypeRestrictionsForEquivalentMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdCNtypeRestrictionsForEquivalentMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdCNtypeRestrictionsForEquivalentMultiError) AllErrors() []error { return m }

// IdCNtypeRestrictionsForEquivalentValidationError is the validation error
// returned by IdCNtypeRestrictionsForEquivalent.Validate if the designated
// constraints aren't met.
type IdCNtypeRestrictionsForEquivalentValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdCNtypeRestrictionsForEquivalentValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdCNtypeRestrictionsForEquivalentValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdCNtypeRestrictionsForEquivalentValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdCNtypeRestrictionsForEquivalentValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdCNtypeRestrictionsForEquivalentValidationError) ErrorName() string {
	return "IdCNtypeRestrictionsForEquivalentValidationError"
}

// Error satisfies the builtin error interface
func (e IdCNtypeRestrictionsForEquivalentValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdCNtypeRestrictionsForEquivalent.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdCNtypeRestrictionsForEquivalentValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdCNtypeRestrictionsForEquivalentValidationError{}

// Validate checks the field values on IdCNtypeRestrictionsForServing with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdCNtypeRestrictionsForServing) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdCNtypeRestrictionsForServing with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// IdCNtypeRestrictionsForServingMultiError, or nil if none found.
func (m *IdCNtypeRestrictionsForServing) ValidateAll() error {
	return m.validate(true)
}

func (m *IdCNtypeRestrictionsForServing) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 136 {
		err := IdCNtypeRestrictionsForServingValidationError{
			field:  "Value",
			reason: "value must equal 136",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdCNtypeRestrictionsForServingMultiError(errors)
	}

	return nil
}

// IdCNtypeRestrictionsForServingMultiError is an error wrapping multiple
// validation errors returned by IdCNtypeRestrictionsForServing.ValidateAll()
// if the designated constraints aren't met.
type IdCNtypeRestrictionsForServingMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdCNtypeRestrictionsForServingMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdCNtypeRestrictionsForServingMultiError) AllErrors() []error { return m }

// IdCNtypeRestrictionsForServingValidationError is the validation error
// returned by IdCNtypeRestrictionsForServing.Validate if the designated
// constraints aren't met.
type IdCNtypeRestrictionsForServingValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdCNtypeRestrictionsForServingValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdCNtypeRestrictionsForServingValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdCNtypeRestrictionsForServingValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdCNtypeRestrictionsForServingValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdCNtypeRestrictionsForServingValidationError) ErrorName() string {
	return "IdCNtypeRestrictionsForServingValidationError"
}

// Error satisfies the builtin error interface
func (e IdCNtypeRestrictionsForServingValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdCNtypeRestrictionsForServing.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdCNtypeRestrictionsForServingValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdCNtypeRestrictionsForServingValidationError{}

// Validate checks the field values on IdDRbstransferredtoMN with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdDRbstransferredtoMN) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdDRbstransferredtoMN with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdDRbstransferredtoMNMultiError, or nil if none found.
func (m *IdDRbstransferredtoMN) ValidateAll() error {
	return m.validate(true)
}

func (m *IdDRbstransferredtoMN) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 137 {
		err := IdDRbstransferredtoMNValidationError{
			field:  "Value",
			reason: "value must equal 137",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdDRbstransferredtoMNMultiError(errors)
	}

	return nil
}

// IdDRbstransferredtoMNMultiError is an error wrapping multiple validation
// errors returned by IdDRbstransferredtoMN.ValidateAll() if the designated
// constraints aren't met.
type IdDRbstransferredtoMNMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdDRbstransferredtoMNMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdDRbstransferredtoMNMultiError) AllErrors() []error { return m }

// IdDRbstransferredtoMNValidationError is the validation error returned by
// IdDRbstransferredtoMN.Validate if the designated constraints aren't met.
type IdDRbstransferredtoMNValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdDRbstransferredtoMNValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdDRbstransferredtoMNValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdDRbstransferredtoMNValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdDRbstransferredtoMNValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdDRbstransferredtoMNValidationError) ErrorName() string {
	return "IdDRbstransferredtoMNValidationError"
}

// Error satisfies the builtin error interface
func (e IdDRbstransferredtoMNValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdDRbstransferredtoMN.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdDRbstransferredtoMNValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdDRbstransferredtoMNValidationError{}

// Validate checks the field values on IdULforwardingProposal with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdULforwardingProposal) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdULforwardingProposal with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdULforwardingProposalMultiError, or nil if none found.
func (m *IdULforwardingProposal) ValidateAll() error {
	return m.validate(true)
}

func (m *IdULforwardingProposal) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 138 {
		err := IdULforwardingProposalValidationError{
			field:  "Value",
			reason: "value must equal 138",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdULforwardingProposalMultiError(errors)
	}

	return nil
}

// IdULforwardingProposalMultiError is an error wrapping multiple validation
// errors returned by IdULforwardingProposal.ValidateAll() if the designated
// constraints aren't met.
type IdULforwardingProposalMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdULforwardingProposalMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdULforwardingProposalMultiError) AllErrors() []error { return m }

// IdULforwardingProposalValidationError is the validation error returned by
// IdULforwardingProposal.Validate if the designated constraints aren't met.
type IdULforwardingProposalValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdULforwardingProposalValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdULforwardingProposalValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdULforwardingProposalValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdULforwardingProposalValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdULforwardingProposalValidationError) ErrorName() string {
	return "IdULforwardingProposalValidationError"
}

// Error satisfies the builtin error interface
func (e IdULforwardingProposalValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdULforwardingProposal.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdULforwardingProposalValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdULforwardingProposalValidationError{}

// Validate checks the field values on IdEndpointIpaddressAndPort with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdEndpointIpaddressAndPort) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdEndpointIpaddressAndPort with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdEndpointIpaddressAndPortMultiError, or nil if none found.
func (m *IdEndpointIpaddressAndPort) ValidateAll() error {
	return m.validate(true)
}

func (m *IdEndpointIpaddressAndPort) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 139 {
		err := IdEndpointIpaddressAndPortValidationError{
			field:  "Value",
			reason: "value must equal 139",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdEndpointIpaddressAndPortMultiError(errors)
	}

	return nil
}

// IdEndpointIpaddressAndPortMultiError is an error wrapping multiple
// validation errors returned by IdEndpointIpaddressAndPort.ValidateAll() if
// the designated constraints aren't met.
type IdEndpointIpaddressAndPortMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdEndpointIpaddressAndPortMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdEndpointIpaddressAndPortMultiError) AllErrors() []error { return m }

// IdEndpointIpaddressAndPortValidationError is the validation error returned
// by IdEndpointIpaddressAndPort.Validate if the designated constraints aren't met.
type IdEndpointIpaddressAndPortValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdEndpointIpaddressAndPortValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdEndpointIpaddressAndPortValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdEndpointIpaddressAndPortValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdEndpointIpaddressAndPortValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdEndpointIpaddressAndPortValidationError) ErrorName() string {
	return "IdEndpointIpaddressAndPortValidationError"
}

// Error satisfies the builtin error interface
func (e IdEndpointIpaddressAndPortValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdEndpointIpaddressAndPort.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdEndpointIpaddressAndPortValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdEndpointIpaddressAndPortValidationError{}

// Validate checks the field values on IdIntendedTddDLULconfigurationNR with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *IdIntendedTddDLULconfigurationNR) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdIntendedTddDLULconfigurationNR with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// IdIntendedTddDLULconfigurationNRMultiError, or nil if none found.
func (m *IdIntendedTddDLULconfigurationNR) ValidateAll() error {
	return m.validate(true)
}

func (m *IdIntendedTddDLULconfigurationNR) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 140 {
		err := IdIntendedTddDLULconfigurationNRValidationError{
			field:  "Value",
			reason: "value must equal 140",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdIntendedTddDLULconfigurationNRMultiError(errors)
	}

	return nil
}

// IdIntendedTddDLULconfigurationNRMultiError is an error wrapping multiple
// validation errors returned by
// IdIntendedTddDLULconfigurationNR.ValidateAll() if the designated
// constraints aren't met.
type IdIntendedTddDLULconfigurationNRMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdIntendedTddDLULconfigurationNRMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdIntendedTddDLULconfigurationNRMultiError) AllErrors() []error { return m }

// IdIntendedTddDLULconfigurationNRValidationError is the validation error
// returned by IdIntendedTddDLULconfigurationNR.Validate if the designated
// constraints aren't met.
type IdIntendedTddDLULconfigurationNRValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdIntendedTddDLULconfigurationNRValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdIntendedTddDLULconfigurationNRValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdIntendedTddDLULconfigurationNRValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdIntendedTddDLULconfigurationNRValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdIntendedTddDLULconfigurationNRValidationError) ErrorName() string {
	return "IdIntendedTddDLULconfigurationNRValidationError"
}

// Error satisfies the builtin error interface
func (e IdIntendedTddDLULconfigurationNRValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdIntendedTddDLULconfigurationNR.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdIntendedTddDLULconfigurationNRValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdIntendedTddDLULconfigurationNRValidationError{}

// Validate checks the field values on IdTNlconfigurationInfo with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdTNlconfigurationInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdTNlconfigurationInfo with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdTNlconfigurationInfoMultiError, or nil if none found.
func (m *IdTNlconfigurationInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *IdTNlconfigurationInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 141 {
		err := IdTNlconfigurationInfoValidationError{
			field:  "Value",
			reason: "value must equal 141",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdTNlconfigurationInfoMultiError(errors)
	}

	return nil
}

// IdTNlconfigurationInfoMultiError is an error wrapping multiple validation
// errors returned by IdTNlconfigurationInfo.ValidateAll() if the designated
// constraints aren't met.
type IdTNlconfigurationInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdTNlconfigurationInfoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdTNlconfigurationInfoMultiError) AllErrors() []error { return m }

// IdTNlconfigurationInfoValidationError is the validation error returned by
// IdTNlconfigurationInfo.Validate if the designated constraints aren't met.
type IdTNlconfigurationInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdTNlconfigurationInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdTNlconfigurationInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdTNlconfigurationInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdTNlconfigurationInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdTNlconfigurationInfoValidationError) ErrorName() string {
	return "IdTNlconfigurationInfoValidationError"
}

// Error satisfies the builtin error interface
func (e IdTNlconfigurationInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdTNlconfigurationInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdTNlconfigurationInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdTNlconfigurationInfoValidationError{}

// Validate checks the field values on IdPartialListIndicatorNR with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdPartialListIndicatorNR) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdPartialListIndicatorNR with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdPartialListIndicatorNRMultiError, or nil if none found.
func (m *IdPartialListIndicatorNR) ValidateAll() error {
	return m.validate(true)
}

func (m *IdPartialListIndicatorNR) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 142 {
		err := IdPartialListIndicatorNRValidationError{
			field:  "Value",
			reason: "value must equal 142",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdPartialListIndicatorNRMultiError(errors)
	}

	return nil
}

// IdPartialListIndicatorNRMultiError is an error wrapping multiple validation
// errors returned by IdPartialListIndicatorNR.ValidateAll() if the designated
// constraints aren't met.
type IdPartialListIndicatorNRMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdPartialListIndicatorNRMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdPartialListIndicatorNRMultiError) AllErrors() []error { return m }

// IdPartialListIndicatorNRValidationError is the validation error returned by
// IdPartialListIndicatorNR.Validate if the designated constraints aren't met.
type IdPartialListIndicatorNRValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdPartialListIndicatorNRValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdPartialListIndicatorNRValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdPartialListIndicatorNRValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdPartialListIndicatorNRValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdPartialListIndicatorNRValidationError) ErrorName() string {
	return "IdPartialListIndicatorNRValidationError"
}

// Error satisfies the builtin error interface
func (e IdPartialListIndicatorNRValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdPartialListIndicatorNR.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdPartialListIndicatorNRValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdPartialListIndicatorNRValidationError{}

// Validate checks the field values on IdMessageOversizeNotification with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdMessageOversizeNotification) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdMessageOversizeNotification with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// IdMessageOversizeNotificationMultiError, or nil if none found.
func (m *IdMessageOversizeNotification) ValidateAll() error {
	return m.validate(true)
}

func (m *IdMessageOversizeNotification) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 143 {
		err := IdMessageOversizeNotificationValidationError{
			field:  "Value",
			reason: "value must equal 143",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdMessageOversizeNotificationMultiError(errors)
	}

	return nil
}

// IdMessageOversizeNotificationMultiError is an error wrapping multiple
// validation errors returned by IdMessageOversizeNotification.ValidateAll()
// if the designated constraints aren't met.
type IdMessageOversizeNotificationMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdMessageOversizeNotificationMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdMessageOversizeNotificationMultiError) AllErrors() []error { return m }

// IdMessageOversizeNotificationValidationError is the validation error
// returned by IdMessageOversizeNotification.Validate if the designated
// constraints aren't met.
type IdMessageOversizeNotificationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdMessageOversizeNotificationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdMessageOversizeNotificationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdMessageOversizeNotificationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdMessageOversizeNotificationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdMessageOversizeNotificationValidationError) ErrorName() string {
	return "IdMessageOversizeNotificationValidationError"
}

// Error satisfies the builtin error interface
func (e IdMessageOversizeNotificationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdMessageOversizeNotification.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdMessageOversizeNotificationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdMessageOversizeNotificationValidationError{}

// Validate checks the field values on IdCellAndCapacityAssistanceInfoNR with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *IdCellAndCapacityAssistanceInfoNR) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdCellAndCapacityAssistanceInfoNR
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// IdCellAndCapacityAssistanceInfoNRMultiError, or nil if none found.
func (m *IdCellAndCapacityAssistanceInfoNR) ValidateAll() error {
	return m.validate(true)
}

func (m *IdCellAndCapacityAssistanceInfoNR) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 144 {
		err := IdCellAndCapacityAssistanceInfoNRValidationError{
			field:  "Value",
			reason: "value must equal 144",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdCellAndCapacityAssistanceInfoNRMultiError(errors)
	}

	return nil
}

// IdCellAndCapacityAssistanceInfoNRMultiError is an error wrapping multiple
// validation errors returned by
// IdCellAndCapacityAssistanceInfoNR.ValidateAll() if the designated
// constraints aren't met.
type IdCellAndCapacityAssistanceInfoNRMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdCellAndCapacityAssistanceInfoNRMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdCellAndCapacityAssistanceInfoNRMultiError) AllErrors() []error { return m }

// IdCellAndCapacityAssistanceInfoNRValidationError is the validation error
// returned by IdCellAndCapacityAssistanceInfoNR.Validate if the designated
// constraints aren't met.
type IdCellAndCapacityAssistanceInfoNRValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdCellAndCapacityAssistanceInfoNRValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdCellAndCapacityAssistanceInfoNRValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdCellAndCapacityAssistanceInfoNRValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdCellAndCapacityAssistanceInfoNRValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdCellAndCapacityAssistanceInfoNRValidationError) ErrorName() string {
	return "IdCellAndCapacityAssistanceInfoNRValidationError"
}

// Error satisfies the builtin error interface
func (e IdCellAndCapacityAssistanceInfoNRValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdCellAndCapacityAssistanceInfoNR.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdCellAndCapacityAssistanceInfoNRValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdCellAndCapacityAssistanceInfoNRValidationError{}

// Validate checks the field values on IdNGRAntraceId with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *IdNGRAntraceId) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdNGRAntraceId with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in IdNGRAntraceIdMultiError,
// or nil if none found.
func (m *IdNGRAntraceId) ValidateAll() error {
	return m.validate(true)
}

func (m *IdNGRAntraceId) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 145 {
		err := IdNGRAntraceIdValidationError{
			field:  "Value",
			reason: "value must equal 145",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdNGRAntraceIdMultiError(errors)
	}

	return nil
}

// IdNGRAntraceIdMultiError is an error wrapping multiple validation errors
// returned by IdNGRAntraceId.ValidateAll() if the designated constraints
// aren't met.
type IdNGRAntraceIdMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdNGRAntraceIdMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdNGRAntraceIdMultiError) AllErrors() []error { return m }

// IdNGRAntraceIdValidationError is the validation error returned by
// IdNGRAntraceId.Validate if the designated constraints aren't met.
type IdNGRAntraceIdValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdNGRAntraceIdValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdNGRAntraceIdValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdNGRAntraceIdValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdNGRAntraceIdValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdNGRAntraceIdValidationError) ErrorName() string { return "IdNGRAntraceIdValidationError" }

// Error satisfies the builtin error interface
func (e IdNGRAntraceIdValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdNGRAntraceId.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdNGRAntraceIdValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdNGRAntraceIdValidationError{}

// Validate checks the field values on IdNonGbrresourcesOffered with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdNonGbrresourcesOffered) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdNonGbrresourcesOffered with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdNonGbrresourcesOfferedMultiError, or nil if none found.
func (m *IdNonGbrresourcesOffered) ValidateAll() error {
	return m.validate(true)
}

func (m *IdNonGbrresourcesOffered) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 146 {
		err := IdNonGbrresourcesOfferedValidationError{
			field:  "Value",
			reason: "value must equal 146",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdNonGbrresourcesOfferedMultiError(errors)
	}

	return nil
}

// IdNonGbrresourcesOfferedMultiError is an error wrapping multiple validation
// errors returned by IdNonGbrresourcesOffered.ValidateAll() if the designated
// constraints aren't met.
type IdNonGbrresourcesOfferedMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdNonGbrresourcesOfferedMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdNonGbrresourcesOfferedMultiError) AllErrors() []error { return m }

// IdNonGbrresourcesOfferedValidationError is the validation error returned by
// IdNonGbrresourcesOffered.Validate if the designated constraints aren't met.
type IdNonGbrresourcesOfferedValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdNonGbrresourcesOfferedValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdNonGbrresourcesOfferedValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdNonGbrresourcesOfferedValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdNonGbrresourcesOfferedValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdNonGbrresourcesOfferedValidationError) ErrorName() string {
	return "IdNonGbrresourcesOfferedValidationError"
}

// Error satisfies the builtin error interface
func (e IdNonGbrresourcesOfferedValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdNonGbrresourcesOffered.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdNonGbrresourcesOfferedValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdNonGbrresourcesOfferedValidationError{}

// Validate checks the field values on IdFastMcgrecoveryRrctransferSNtoMN with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *IdFastMcgrecoveryRrctransferSNtoMN) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdFastMcgrecoveryRrctransferSNtoMN
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// IdFastMcgrecoveryRrctransferSNtoMNMultiError, or nil if none found.
func (m *IdFastMcgrecoveryRrctransferSNtoMN) ValidateAll() error {
	return m.validate(true)
}

func (m *IdFastMcgrecoveryRrctransferSNtoMN) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 147 {
		err := IdFastMcgrecoveryRrctransferSNtoMNValidationError{
			field:  "Value",
			reason: "value must equal 147",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdFastMcgrecoveryRrctransferSNtoMNMultiError(errors)
	}

	return nil
}

// IdFastMcgrecoveryRrctransferSNtoMNMultiError is an error wrapping multiple
// validation errors returned by
// IdFastMcgrecoveryRrctransferSNtoMN.ValidateAll() if the designated
// constraints aren't met.
type IdFastMcgrecoveryRrctransferSNtoMNMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdFastMcgrecoveryRrctransferSNtoMNMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdFastMcgrecoveryRrctransferSNtoMNMultiError) AllErrors() []error { return m }

// IdFastMcgrecoveryRrctransferSNtoMNValidationError is the validation error
// returned by IdFastMcgrecoveryRrctransferSNtoMN.Validate if the designated
// constraints aren't met.
type IdFastMcgrecoveryRrctransferSNtoMNValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdFastMcgrecoveryRrctransferSNtoMNValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdFastMcgrecoveryRrctransferSNtoMNValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdFastMcgrecoveryRrctransferSNtoMNValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdFastMcgrecoveryRrctransferSNtoMNValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdFastMcgrecoveryRrctransferSNtoMNValidationError) ErrorName() string {
	return "IdFastMcgrecoveryRrctransferSNtoMNValidationError"
}

// Error satisfies the builtin error interface
func (e IdFastMcgrecoveryRrctransferSNtoMNValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdFastMcgrecoveryRrctransferSNtoMN.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdFastMcgrecoveryRrctransferSNtoMNValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdFastMcgrecoveryRrctransferSNtoMNValidationError{}

// Validate checks the field values on IdRequestedFastMcgrecoveryViaSrb3 with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *IdRequestedFastMcgrecoveryViaSrb3) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdRequestedFastMcgrecoveryViaSrb3
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// IdRequestedFastMcgrecoveryViaSrb3MultiError, or nil if none found.
func (m *IdRequestedFastMcgrecoveryViaSrb3) ValidateAll() error {
	return m.validate(true)
}

func (m *IdRequestedFastMcgrecoveryViaSrb3) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 148 {
		err := IdRequestedFastMcgrecoveryViaSrb3ValidationError{
			field:  "Value",
			reason: "value must equal 148",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdRequestedFastMcgrecoveryViaSrb3MultiError(errors)
	}

	return nil
}

// IdRequestedFastMcgrecoveryViaSrb3MultiError is an error wrapping multiple
// validation errors returned by
// IdRequestedFastMcgrecoveryViaSrb3.ValidateAll() if the designated
// constraints aren't met.
type IdRequestedFastMcgrecoveryViaSrb3MultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdRequestedFastMcgrecoveryViaSrb3MultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdRequestedFastMcgrecoveryViaSrb3MultiError) AllErrors() []error { return m }

// IdRequestedFastMcgrecoveryViaSrb3ValidationError is the validation error
// returned by IdRequestedFastMcgrecoveryViaSrb3.Validate if the designated
// constraints aren't met.
type IdRequestedFastMcgrecoveryViaSrb3ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdRequestedFastMcgrecoveryViaSrb3ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdRequestedFastMcgrecoveryViaSrb3ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdRequestedFastMcgrecoveryViaSrb3ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdRequestedFastMcgrecoveryViaSrb3ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdRequestedFastMcgrecoveryViaSrb3ValidationError) ErrorName() string {
	return "IdRequestedFastMcgrecoveryViaSrb3ValidationError"
}

// Error satisfies the builtin error interface
func (e IdRequestedFastMcgrecoveryViaSrb3ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdRequestedFastMcgrecoveryViaSrb3.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdRequestedFastMcgrecoveryViaSrb3ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdRequestedFastMcgrecoveryViaSrb3ValidationError{}

// Validate checks the field values on IdAvailableFastMcgrecoveryViaSrb3 with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *IdAvailableFastMcgrecoveryViaSrb3) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdAvailableFastMcgrecoveryViaSrb3
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// IdAvailableFastMcgrecoveryViaSrb3MultiError, or nil if none found.
func (m *IdAvailableFastMcgrecoveryViaSrb3) ValidateAll() error {
	return m.validate(true)
}

func (m *IdAvailableFastMcgrecoveryViaSrb3) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 149 {
		err := IdAvailableFastMcgrecoveryViaSrb3ValidationError{
			field:  "Value",
			reason: "value must equal 149",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdAvailableFastMcgrecoveryViaSrb3MultiError(errors)
	}

	return nil
}

// IdAvailableFastMcgrecoveryViaSrb3MultiError is an error wrapping multiple
// validation errors returned by
// IdAvailableFastMcgrecoveryViaSrb3.ValidateAll() if the designated
// constraints aren't met.
type IdAvailableFastMcgrecoveryViaSrb3MultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdAvailableFastMcgrecoveryViaSrb3MultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdAvailableFastMcgrecoveryViaSrb3MultiError) AllErrors() []error { return m }

// IdAvailableFastMcgrecoveryViaSrb3ValidationError is the validation error
// returned by IdAvailableFastMcgrecoveryViaSrb3.Validate if the designated
// constraints aren't met.
type IdAvailableFastMcgrecoveryViaSrb3ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdAvailableFastMcgrecoveryViaSrb3ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdAvailableFastMcgrecoveryViaSrb3ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdAvailableFastMcgrecoveryViaSrb3ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdAvailableFastMcgrecoveryViaSrb3ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdAvailableFastMcgrecoveryViaSrb3ValidationError) ErrorName() string {
	return "IdAvailableFastMcgrecoveryViaSrb3ValidationError"
}

// Error satisfies the builtin error interface
func (e IdAvailableFastMcgrecoveryViaSrb3ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdAvailableFastMcgrecoveryViaSrb3.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdAvailableFastMcgrecoveryViaSrb3ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdAvailableFastMcgrecoveryViaSrb3ValidationError{}

// Validate checks the field values on IdRequestedFastMcgrecoveryViaSrb3Release
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *IdRequestedFastMcgrecoveryViaSrb3Release) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// IdRequestedFastMcgrecoveryViaSrb3Release with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// IdRequestedFastMcgrecoveryViaSrb3ReleaseMultiError, or nil if none found.
func (m *IdRequestedFastMcgrecoveryViaSrb3Release) ValidateAll() error {
	return m.validate(true)
}

func (m *IdRequestedFastMcgrecoveryViaSrb3Release) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 150 {
		err := IdRequestedFastMcgrecoveryViaSrb3ReleaseValidationError{
			field:  "Value",
			reason: "value must equal 150",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdRequestedFastMcgrecoveryViaSrb3ReleaseMultiError(errors)
	}

	return nil
}

// IdRequestedFastMcgrecoveryViaSrb3ReleaseMultiError is an error wrapping
// multiple validation errors returned by
// IdRequestedFastMcgrecoveryViaSrb3Release.ValidateAll() if the designated
// constraints aren't met.
type IdRequestedFastMcgrecoveryViaSrb3ReleaseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdRequestedFastMcgrecoveryViaSrb3ReleaseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdRequestedFastMcgrecoveryViaSrb3ReleaseMultiError) AllErrors() []error { return m }

// IdRequestedFastMcgrecoveryViaSrb3ReleaseValidationError is the validation
// error returned by IdRequestedFastMcgrecoveryViaSrb3Release.Validate if the
// designated constraints aren't met.
type IdRequestedFastMcgrecoveryViaSrb3ReleaseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdRequestedFastMcgrecoveryViaSrb3ReleaseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdRequestedFastMcgrecoveryViaSrb3ReleaseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdRequestedFastMcgrecoveryViaSrb3ReleaseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdRequestedFastMcgrecoveryViaSrb3ReleaseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdRequestedFastMcgrecoveryViaSrb3ReleaseValidationError) ErrorName() string {
	return "IdRequestedFastMcgrecoveryViaSrb3ReleaseValidationError"
}

// Error satisfies the builtin error interface
func (e IdRequestedFastMcgrecoveryViaSrb3ReleaseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdRequestedFastMcgrecoveryViaSrb3Release.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdRequestedFastMcgrecoveryViaSrb3ReleaseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdRequestedFastMcgrecoveryViaSrb3ReleaseValidationError{}

// Validate checks the field values on IdReleaseFastMcgrecoveryViaSrb3 with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdReleaseFastMcgrecoveryViaSrb3) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdReleaseFastMcgrecoveryViaSrb3 with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// IdReleaseFastMcgrecoveryViaSrb3MultiError, or nil if none found.
func (m *IdReleaseFastMcgrecoveryViaSrb3) ValidateAll() error {
	return m.validate(true)
}

func (m *IdReleaseFastMcgrecoveryViaSrb3) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 151 {
		err := IdReleaseFastMcgrecoveryViaSrb3ValidationError{
			field:  "Value",
			reason: "value must equal 151",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdReleaseFastMcgrecoveryViaSrb3MultiError(errors)
	}

	return nil
}

// IdReleaseFastMcgrecoveryViaSrb3MultiError is an error wrapping multiple
// validation errors returned by IdReleaseFastMcgrecoveryViaSrb3.ValidateAll()
// if the designated constraints aren't met.
type IdReleaseFastMcgrecoveryViaSrb3MultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdReleaseFastMcgrecoveryViaSrb3MultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdReleaseFastMcgrecoveryViaSrb3MultiError) AllErrors() []error { return m }

// IdReleaseFastMcgrecoveryViaSrb3ValidationError is the validation error
// returned by IdReleaseFastMcgrecoveryViaSrb3.Validate if the designated
// constraints aren't met.
type IdReleaseFastMcgrecoveryViaSrb3ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdReleaseFastMcgrecoveryViaSrb3ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdReleaseFastMcgrecoveryViaSrb3ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdReleaseFastMcgrecoveryViaSrb3ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdReleaseFastMcgrecoveryViaSrb3ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdReleaseFastMcgrecoveryViaSrb3ValidationError) ErrorName() string {
	return "IdReleaseFastMcgrecoveryViaSrb3ValidationError"
}

// Error satisfies the builtin error interface
func (e IdReleaseFastMcgrecoveryViaSrb3ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdReleaseFastMcgrecoveryViaSrb3.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdReleaseFastMcgrecoveryViaSrb3ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdReleaseFastMcgrecoveryViaSrb3ValidationError{}

// Validate checks the field values on IdFastMcgrecoveryRrctransferMNtoSN with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *IdFastMcgrecoveryRrctransferMNtoSN) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdFastMcgrecoveryRrctransferMNtoSN
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// IdFastMcgrecoveryRrctransferMNtoSNMultiError, or nil if none found.
func (m *IdFastMcgrecoveryRrctransferMNtoSN) ValidateAll() error {
	return m.validate(true)
}

func (m *IdFastMcgrecoveryRrctransferMNtoSN) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 152 {
		err := IdFastMcgrecoveryRrctransferMNtoSNValidationError{
			field:  "Value",
			reason: "value must equal 152",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdFastMcgrecoveryRrctransferMNtoSNMultiError(errors)
	}

	return nil
}

// IdFastMcgrecoveryRrctransferMNtoSNMultiError is an error wrapping multiple
// validation errors returned by
// IdFastMcgrecoveryRrctransferMNtoSN.ValidateAll() if the designated
// constraints aren't met.
type IdFastMcgrecoveryRrctransferMNtoSNMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdFastMcgrecoveryRrctransferMNtoSNMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdFastMcgrecoveryRrctransferMNtoSNMultiError) AllErrors() []error { return m }

// IdFastMcgrecoveryRrctransferMNtoSNValidationError is the validation error
// returned by IdFastMcgrecoveryRrctransferMNtoSN.Validate if the designated
// constraints aren't met.
type IdFastMcgrecoveryRrctransferMNtoSNValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdFastMcgrecoveryRrctransferMNtoSNValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdFastMcgrecoveryRrctransferMNtoSNValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdFastMcgrecoveryRrctransferMNtoSNValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdFastMcgrecoveryRrctransferMNtoSNValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdFastMcgrecoveryRrctransferMNtoSNValidationError) ErrorName() string {
	return "IdFastMcgrecoveryRrctransferMNtoSNValidationError"
}

// Error satisfies the builtin error interface
func (e IdFastMcgrecoveryRrctransferMNtoSNValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdFastMcgrecoveryRrctransferMNtoSN.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdFastMcgrecoveryRrctransferMNtoSNValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdFastMcgrecoveryRrctransferMNtoSNValidationError{}

// Validate checks the field values on IdExtendedRatrestrictionInformation with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *IdExtendedRatrestrictionInformation) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdExtendedRatrestrictionInformation
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// IdExtendedRatrestrictionInformationMultiError, or nil if none found.
func (m *IdExtendedRatrestrictionInformation) ValidateAll() error {
	return m.validate(true)
}

func (m *IdExtendedRatrestrictionInformation) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 153 {
		err := IdExtendedRatrestrictionInformationValidationError{
			field:  "Value",
			reason: "value must equal 153",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdExtendedRatrestrictionInformationMultiError(errors)
	}

	return nil
}

// IdExtendedRatrestrictionInformationMultiError is an error wrapping multiple
// validation errors returned by
// IdExtendedRatrestrictionInformation.ValidateAll() if the designated
// constraints aren't met.
type IdExtendedRatrestrictionInformationMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdExtendedRatrestrictionInformationMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdExtendedRatrestrictionInformationMultiError) AllErrors() []error { return m }

// IdExtendedRatrestrictionInformationValidationError is the validation error
// returned by IdExtendedRatrestrictionInformation.Validate if the designated
// constraints aren't met.
type IdExtendedRatrestrictionInformationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdExtendedRatrestrictionInformationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdExtendedRatrestrictionInformationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdExtendedRatrestrictionInformationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdExtendedRatrestrictionInformationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdExtendedRatrestrictionInformationValidationError) ErrorName() string {
	return "IdExtendedRatrestrictionInformationValidationError"
}

// Error satisfies the builtin error interface
func (e IdExtendedRatrestrictionInformationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdExtendedRatrestrictionInformation.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdExtendedRatrestrictionInformationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdExtendedRatrestrictionInformationValidationError{}

// Validate checks the field values on IdQoSmonitoringRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdQoSmonitoringRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdQoSmonitoringRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdQoSmonitoringRequestMultiError, or nil if none found.
func (m *IdQoSmonitoringRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *IdQoSmonitoringRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 154 {
		err := IdQoSmonitoringRequestValidationError{
			field:  "Value",
			reason: "value must equal 154",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdQoSmonitoringRequestMultiError(errors)
	}

	return nil
}

// IdQoSmonitoringRequestMultiError is an error wrapping multiple validation
// errors returned by IdQoSmonitoringRequest.ValidateAll() if the designated
// constraints aren't met.
type IdQoSmonitoringRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdQoSmonitoringRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdQoSmonitoringRequestMultiError) AllErrors() []error { return m }

// IdQoSmonitoringRequestValidationError is the validation error returned by
// IdQoSmonitoringRequest.Validate if the designated constraints aren't met.
type IdQoSmonitoringRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdQoSmonitoringRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdQoSmonitoringRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdQoSmonitoringRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdQoSmonitoringRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdQoSmonitoringRequestValidationError) ErrorName() string {
	return "IdQoSmonitoringRequestValidationError"
}

// Error satisfies the builtin error interface
func (e IdQoSmonitoringRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdQoSmonitoringRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdQoSmonitoringRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdQoSmonitoringRequestValidationError{}

// Validate checks the field values on IdFiveGcmobilityRestrictionListContainer
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *IdFiveGcmobilityRestrictionListContainer) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// IdFiveGcmobilityRestrictionListContainer with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// IdFiveGcmobilityRestrictionListContainerMultiError, or nil if none found.
func (m *IdFiveGcmobilityRestrictionListContainer) ValidateAll() error {
	return m.validate(true)
}

func (m *IdFiveGcmobilityRestrictionListContainer) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 155 {
		err := IdFiveGcmobilityRestrictionListContainerValidationError{
			field:  "Value",
			reason: "value must equal 155",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdFiveGcmobilityRestrictionListContainerMultiError(errors)
	}

	return nil
}

// IdFiveGcmobilityRestrictionListContainerMultiError is an error wrapping
// multiple validation errors returned by
// IdFiveGcmobilityRestrictionListContainer.ValidateAll() if the designated
// constraints aren't met.
type IdFiveGcmobilityRestrictionListContainerMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdFiveGcmobilityRestrictionListContainerMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdFiveGcmobilityRestrictionListContainerMultiError) AllErrors() []error { return m }

// IdFiveGcmobilityRestrictionListContainerValidationError is the validation
// error returned by IdFiveGcmobilityRestrictionListContainer.Validate if the
// designated constraints aren't met.
type IdFiveGcmobilityRestrictionListContainerValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdFiveGcmobilityRestrictionListContainerValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdFiveGcmobilityRestrictionListContainerValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdFiveGcmobilityRestrictionListContainerValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdFiveGcmobilityRestrictionListContainerValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdFiveGcmobilityRestrictionListContainerValidationError) ErrorName() string {
	return "IdFiveGcmobilityRestrictionListContainerValidationError"
}

// Error satisfies the builtin error interface
func (e IdFiveGcmobilityRestrictionListContainerValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdFiveGcmobilityRestrictionListContainer.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdFiveGcmobilityRestrictionListContainerValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdFiveGcmobilityRestrictionListContainerValidationError{}

// Validate checks the field values on IdPartialListIndicatorEUtra with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdPartialListIndicatorEUtra) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdPartialListIndicatorEUtra with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdPartialListIndicatorEUtraMultiError, or nil if none found.
func (m *IdPartialListIndicatorEUtra) ValidateAll() error {
	return m.validate(true)
}

func (m *IdPartialListIndicatorEUtra) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 156 {
		err := IdPartialListIndicatorEUtraValidationError{
			field:  "Value",
			reason: "value must equal 156",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdPartialListIndicatorEUtraMultiError(errors)
	}

	return nil
}

// IdPartialListIndicatorEUtraMultiError is an error wrapping multiple
// validation errors returned by IdPartialListIndicatorEUtra.ValidateAll() if
// the designated constraints aren't met.
type IdPartialListIndicatorEUtraMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdPartialListIndicatorEUtraMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdPartialListIndicatorEUtraMultiError) AllErrors() []error { return m }

// IdPartialListIndicatorEUtraValidationError is the validation error returned
// by IdPartialListIndicatorEUtra.Validate if the designated constraints
// aren't met.
type IdPartialListIndicatorEUtraValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdPartialListIndicatorEUtraValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdPartialListIndicatorEUtraValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdPartialListIndicatorEUtraValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdPartialListIndicatorEUtraValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdPartialListIndicatorEUtraValidationError) ErrorName() string {
	return "IdPartialListIndicatorEUtraValidationError"
}

// Error satisfies the builtin error interface
func (e IdPartialListIndicatorEUtraValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdPartialListIndicatorEUtra.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdPartialListIndicatorEUtraValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdPartialListIndicatorEUtraValidationError{}

// Validate checks the field values on IdCellAndCapacityAssistanceInfoEUtra
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *IdCellAndCapacityAssistanceInfoEUtra) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdCellAndCapacityAssistanceInfoEUtra
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// IdCellAndCapacityAssistanceInfoEUtraMultiError, or nil if none found.
func (m *IdCellAndCapacityAssistanceInfoEUtra) ValidateAll() error {
	return m.validate(true)
}

func (m *IdCellAndCapacityAssistanceInfoEUtra) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 157 {
		err := IdCellAndCapacityAssistanceInfoEUtraValidationError{
			field:  "Value",
			reason: "value must equal 157",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdCellAndCapacityAssistanceInfoEUtraMultiError(errors)
	}

	return nil
}

// IdCellAndCapacityAssistanceInfoEUtraMultiError is an error wrapping multiple
// validation errors returned by
// IdCellAndCapacityAssistanceInfoEUtra.ValidateAll() if the designated
// constraints aren't met.
type IdCellAndCapacityAssistanceInfoEUtraMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdCellAndCapacityAssistanceInfoEUtraMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdCellAndCapacityAssistanceInfoEUtraMultiError) AllErrors() []error { return m }

// IdCellAndCapacityAssistanceInfoEUtraValidationError is the validation error
// returned by IdCellAndCapacityAssistanceInfoEUtra.Validate if the designated
// constraints aren't met.
type IdCellAndCapacityAssistanceInfoEUtraValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdCellAndCapacityAssistanceInfoEUtraValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdCellAndCapacityAssistanceInfoEUtraValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdCellAndCapacityAssistanceInfoEUtraValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdCellAndCapacityAssistanceInfoEUtraValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdCellAndCapacityAssistanceInfoEUtraValidationError) ErrorName() string {
	return "IdCellAndCapacityAssistanceInfoEUtraValidationError"
}

// Error satisfies the builtin error interface
func (e IdCellAndCapacityAssistanceInfoEUtraValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdCellAndCapacityAssistanceInfoEUtra.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdCellAndCapacityAssistanceInfoEUtraValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdCellAndCapacityAssistanceInfoEUtraValidationError{}

// Validate checks the field values on IdCHoinformationReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdCHoinformationReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdCHoinformationReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdCHoinformationReqMultiError, or nil if none found.
func (m *IdCHoinformationReq) ValidateAll() error {
	return m.validate(true)
}

func (m *IdCHoinformationReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 158 {
		err := IdCHoinformationReqValidationError{
			field:  "Value",
			reason: "value must equal 158",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdCHoinformationReqMultiError(errors)
	}

	return nil
}

// IdCHoinformationReqMultiError is an error wrapping multiple validation
// errors returned by IdCHoinformationReq.ValidateAll() if the designated
// constraints aren't met.
type IdCHoinformationReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdCHoinformationReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdCHoinformationReqMultiError) AllErrors() []error { return m }

// IdCHoinformationReqValidationError is the validation error returned by
// IdCHoinformationReq.Validate if the designated constraints aren't met.
type IdCHoinformationReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdCHoinformationReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdCHoinformationReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdCHoinformationReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdCHoinformationReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdCHoinformationReqValidationError) ErrorName() string {
	return "IdCHoinformationReqValidationError"
}

// Error satisfies the builtin error interface
func (e IdCHoinformationReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdCHoinformationReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdCHoinformationReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdCHoinformationReqValidationError{}

// Validate checks the field values on IdCHoinformationAck with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdCHoinformationAck) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdCHoinformationAck with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdCHoinformationAckMultiError, or nil if none found.
func (m *IdCHoinformationAck) ValidateAll() error {
	return m.validate(true)
}

func (m *IdCHoinformationAck) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 159 {
		err := IdCHoinformationAckValidationError{
			field:  "Value",
			reason: "value must equal 159",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdCHoinformationAckMultiError(errors)
	}

	return nil
}

// IdCHoinformationAckMultiError is an error wrapping multiple validation
// errors returned by IdCHoinformationAck.ValidateAll() if the designated
// constraints aren't met.
type IdCHoinformationAckMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdCHoinformationAckMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdCHoinformationAckMultiError) AllErrors() []error { return m }

// IdCHoinformationAckValidationError is the validation error returned by
// IdCHoinformationAck.Validate if the designated constraints aren't met.
type IdCHoinformationAckValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdCHoinformationAckValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdCHoinformationAckValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdCHoinformationAckValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdCHoinformationAckValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdCHoinformationAckValidationError) ErrorName() string {
	return "IdCHoinformationAckValidationError"
}

// Error satisfies the builtin error interface
func (e IdCHoinformationAckValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdCHoinformationAck.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdCHoinformationAckValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdCHoinformationAckValidationError{}

// Validate checks the field values on IdtargetCellsToCancel with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdtargetCellsToCancel) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdtargetCellsToCancel with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdtargetCellsToCancelMultiError, or nil if none found.
func (m *IdtargetCellsToCancel) ValidateAll() error {
	return m.validate(true)
}

func (m *IdtargetCellsToCancel) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 160 {
		err := IdtargetCellsToCancelValidationError{
			field:  "Value",
			reason: "value must equal 160",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdtargetCellsToCancelMultiError(errors)
	}

	return nil
}

// IdtargetCellsToCancelMultiError is an error wrapping multiple validation
// errors returned by IdtargetCellsToCancel.ValidateAll() if the designated
// constraints aren't met.
type IdtargetCellsToCancelMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdtargetCellsToCancelMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdtargetCellsToCancelMultiError) AllErrors() []error { return m }

// IdtargetCellsToCancelValidationError is the validation error returned by
// IdtargetCellsToCancel.Validate if the designated constraints aren't met.
type IdtargetCellsToCancelValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdtargetCellsToCancelValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdtargetCellsToCancelValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdtargetCellsToCancelValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdtargetCellsToCancelValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdtargetCellsToCancelValidationError) ErrorName() string {
	return "IdtargetCellsToCancelValidationError"
}

// Error satisfies the builtin error interface
func (e IdtargetCellsToCancelValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdtargetCellsToCancel.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdtargetCellsToCancelValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdtargetCellsToCancelValidationError{}

// Validate checks the field values on IdrequestedTargetCellGlobalId with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdrequestedTargetCellGlobalId) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdrequestedTargetCellGlobalId with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// IdrequestedTargetCellGlobalIdMultiError, or nil if none found.
func (m *IdrequestedTargetCellGlobalId) ValidateAll() error {
	return m.validate(true)
}

func (m *IdrequestedTargetCellGlobalId) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 161 {
		err := IdrequestedTargetCellGlobalIdValidationError{
			field:  "Value",
			reason: "value must equal 161",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdrequestedTargetCellGlobalIdMultiError(errors)
	}

	return nil
}

// IdrequestedTargetCellGlobalIdMultiError is an error wrapping multiple
// validation errors returned by IdrequestedTargetCellGlobalId.ValidateAll()
// if the designated constraints aren't met.
type IdrequestedTargetCellGlobalIdMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdrequestedTargetCellGlobalIdMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdrequestedTargetCellGlobalIdMultiError) AllErrors() []error { return m }

// IdrequestedTargetCellGlobalIdValidationError is the validation error
// returned by IdrequestedTargetCellGlobalId.Validate if the designated
// constraints aren't met.
type IdrequestedTargetCellGlobalIdValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdrequestedTargetCellGlobalIdValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdrequestedTargetCellGlobalIdValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdrequestedTargetCellGlobalIdValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdrequestedTargetCellGlobalIdValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdrequestedTargetCellGlobalIdValidationError) ErrorName() string {
	return "IdrequestedTargetCellGlobalIdValidationError"
}

// Error satisfies the builtin error interface
func (e IdrequestedTargetCellGlobalIdValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdrequestedTargetCellGlobalId.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdrequestedTargetCellGlobalIdValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdrequestedTargetCellGlobalIdValidationError{}

// Validate checks the field values on IdprocedureStage with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *IdprocedureStage) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdprocedureStage with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdprocedureStageMultiError, or nil if none found.
func (m *IdprocedureStage) ValidateAll() error {
	return m.validate(true)
}

func (m *IdprocedureStage) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 162 {
		err := IdprocedureStageValidationError{
			field:  "Value",
			reason: "value must equal 162",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdprocedureStageMultiError(errors)
	}

	return nil
}

// IdprocedureStageMultiError is an error wrapping multiple validation errors
// returned by IdprocedureStage.ValidateAll() if the designated constraints
// aren't met.
type IdprocedureStageMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdprocedureStageMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdprocedureStageMultiError) AllErrors() []error { return m }

// IdprocedureStageValidationError is the validation error returned by
// IdprocedureStage.Validate if the designated constraints aren't met.
type IdprocedureStageValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdprocedureStageValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdprocedureStageValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdprocedureStageValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdprocedureStageValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdprocedureStageValidationError) ErrorName() string { return "IdprocedureStageValidationError" }

// Error satisfies the builtin error interface
func (e IdprocedureStageValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdprocedureStage.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdprocedureStageValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdprocedureStageValidationError{}

// Validate checks the field values on IdDApsrequestInfo with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *IdDApsrequestInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdDApsrequestInfo with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdDApsrequestInfoMultiError, or nil if none found.
func (m *IdDApsrequestInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *IdDApsrequestInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 163 {
		err := IdDApsrequestInfoValidationError{
			field:  "Value",
			reason: "value must equal 163",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdDApsrequestInfoMultiError(errors)
	}

	return nil
}

// IdDApsrequestInfoMultiError is an error wrapping multiple validation errors
// returned by IdDApsrequestInfo.ValidateAll() if the designated constraints
// aren't met.
type IdDApsrequestInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdDApsrequestInfoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdDApsrequestInfoMultiError) AllErrors() []error { return m }

// IdDApsrequestInfoValidationError is the validation error returned by
// IdDApsrequestInfo.Validate if the designated constraints aren't met.
type IdDApsrequestInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdDApsrequestInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdDApsrequestInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdDApsrequestInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdDApsrequestInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdDApsrequestInfoValidationError) ErrorName() string {
	return "IdDApsrequestInfoValidationError"
}

// Error satisfies the builtin error interface
func (e IdDApsrequestInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdDApsrequestInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdDApsrequestInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdDApsrequestInfoValidationError{}

// Validate checks the field values on IdDApsresponseInfoList with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdDApsresponseInfoList) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdDApsresponseInfoList with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdDApsresponseInfoListMultiError, or nil if none found.
func (m *IdDApsresponseInfoList) ValidateAll() error {
	return m.validate(true)
}

func (m *IdDApsresponseInfoList) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 164 {
		err := IdDApsresponseInfoListValidationError{
			field:  "Value",
			reason: "value must equal 164",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdDApsresponseInfoListMultiError(errors)
	}

	return nil
}

// IdDApsresponseInfoListMultiError is an error wrapping multiple validation
// errors returned by IdDApsresponseInfoList.ValidateAll() if the designated
// constraints aren't met.
type IdDApsresponseInfoListMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdDApsresponseInfoListMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdDApsresponseInfoListMultiError) AllErrors() []error { return m }

// IdDApsresponseInfoListValidationError is the validation error returned by
// IdDApsresponseInfoList.Validate if the designated constraints aren't met.
type IdDApsresponseInfoListValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdDApsresponseInfoListValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdDApsresponseInfoListValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdDApsresponseInfoListValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdDApsresponseInfoListValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdDApsresponseInfoListValidationError) ErrorName() string {
	return "IdDApsresponseInfoListValidationError"
}

// Error satisfies the builtin error interface
func (e IdDApsresponseInfoListValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdDApsresponseInfoList.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdDApsresponseInfoListValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdDApsresponseInfoListValidationError{}

// Validate checks the field values on IdCHoMRdcIndicator with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdCHoMRdcIndicator) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdCHoMRdcIndicator with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdCHoMRdcIndicatorMultiError, or nil if none found.
func (m *IdCHoMRdcIndicator) ValidateAll() error {
	return m.validate(true)
}

func (m *IdCHoMRdcIndicator) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 165 {
		err := IdCHoMRdcIndicatorValidationError{
			field:  "Value",
			reason: "value must equal 165",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdCHoMRdcIndicatorMultiError(errors)
	}

	return nil
}

// IdCHoMRdcIndicatorMultiError is an error wrapping multiple validation errors
// returned by IdCHoMRdcIndicator.ValidateAll() if the designated constraints
// aren't met.
type IdCHoMRdcIndicatorMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdCHoMRdcIndicatorMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdCHoMRdcIndicatorMultiError) AllErrors() []error { return m }

// IdCHoMRdcIndicatorValidationError is the validation error returned by
// IdCHoMRdcIndicator.Validate if the designated constraints aren't met.
type IdCHoMRdcIndicatorValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdCHoMRdcIndicatorValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdCHoMRdcIndicatorValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdCHoMRdcIndicatorValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdCHoMRdcIndicatorValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdCHoMRdcIndicatorValidationError) ErrorName() string {
	return "IdCHoMRdcIndicatorValidationError"
}

// Error satisfies the builtin error interface
func (e IdCHoMRdcIndicatorValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdCHoMRdcIndicator.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdCHoMRdcIndicatorValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdCHoMRdcIndicatorValidationError{}

// Validate checks the field values on IdOffsetOfNbiotChannelNumberToDlEArfcn
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *IdOffsetOfNbiotChannelNumberToDlEArfcn) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// IdOffsetOfNbiotChannelNumberToDlEArfcn with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// IdOffsetOfNbiotChannelNumberToDlEArfcnMultiError, or nil if none found.
func (m *IdOffsetOfNbiotChannelNumberToDlEArfcn) ValidateAll() error {
	return m.validate(true)
}

func (m *IdOffsetOfNbiotChannelNumberToDlEArfcn) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 166 {
		err := IdOffsetOfNbiotChannelNumberToDlEArfcnValidationError{
			field:  "Value",
			reason: "value must equal 166",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdOffsetOfNbiotChannelNumberToDlEArfcnMultiError(errors)
	}

	return nil
}

// IdOffsetOfNbiotChannelNumberToDlEArfcnMultiError is an error wrapping
// multiple validation errors returned by
// IdOffsetOfNbiotChannelNumberToDlEArfcn.ValidateAll() if the designated
// constraints aren't met.
type IdOffsetOfNbiotChannelNumberToDlEArfcnMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdOffsetOfNbiotChannelNumberToDlEArfcnMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdOffsetOfNbiotChannelNumberToDlEArfcnMultiError) AllErrors() []error { return m }

// IdOffsetOfNbiotChannelNumberToDlEArfcnValidationError is the validation
// error returned by IdOffsetOfNbiotChannelNumberToDlEArfcn.Validate if the
// designated constraints aren't met.
type IdOffsetOfNbiotChannelNumberToDlEArfcnValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdOffsetOfNbiotChannelNumberToDlEArfcnValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdOffsetOfNbiotChannelNumberToDlEArfcnValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdOffsetOfNbiotChannelNumberToDlEArfcnValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdOffsetOfNbiotChannelNumberToDlEArfcnValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdOffsetOfNbiotChannelNumberToDlEArfcnValidationError) ErrorName() string {
	return "IdOffsetOfNbiotChannelNumberToDlEArfcnValidationError"
}

// Error satisfies the builtin error interface
func (e IdOffsetOfNbiotChannelNumberToDlEArfcnValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdOffsetOfNbiotChannelNumberToDlEArfcn.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdOffsetOfNbiotChannelNumberToDlEArfcnValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdOffsetOfNbiotChannelNumberToDlEArfcnValidationError{}

// Validate checks the field values on IdOffsetOfNbiotChannelNumberToUlEArfcn
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *IdOffsetOfNbiotChannelNumberToUlEArfcn) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// IdOffsetOfNbiotChannelNumberToUlEArfcn with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// IdOffsetOfNbiotChannelNumberToUlEArfcnMultiError, or nil if none found.
func (m *IdOffsetOfNbiotChannelNumberToUlEArfcn) ValidateAll() error {
	return m.validate(true)
}

func (m *IdOffsetOfNbiotChannelNumberToUlEArfcn) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 167 {
		err := IdOffsetOfNbiotChannelNumberToUlEArfcnValidationError{
			field:  "Value",
			reason: "value must equal 167",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdOffsetOfNbiotChannelNumberToUlEArfcnMultiError(errors)
	}

	return nil
}

// IdOffsetOfNbiotChannelNumberToUlEArfcnMultiError is an error wrapping
// multiple validation errors returned by
// IdOffsetOfNbiotChannelNumberToUlEArfcn.ValidateAll() if the designated
// constraints aren't met.
type IdOffsetOfNbiotChannelNumberToUlEArfcnMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdOffsetOfNbiotChannelNumberToUlEArfcnMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdOffsetOfNbiotChannelNumberToUlEArfcnMultiError) AllErrors() []error { return m }

// IdOffsetOfNbiotChannelNumberToUlEArfcnValidationError is the validation
// error returned by IdOffsetOfNbiotChannelNumberToUlEArfcn.Validate if the
// designated constraints aren't met.
type IdOffsetOfNbiotChannelNumberToUlEArfcnValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdOffsetOfNbiotChannelNumberToUlEArfcnValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdOffsetOfNbiotChannelNumberToUlEArfcnValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdOffsetOfNbiotChannelNumberToUlEArfcnValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdOffsetOfNbiotChannelNumberToUlEArfcnValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdOffsetOfNbiotChannelNumberToUlEArfcnValidationError) ErrorName() string {
	return "IdOffsetOfNbiotChannelNumberToUlEArfcnValidationError"
}

// Error satisfies the builtin error interface
func (e IdOffsetOfNbiotChannelNumberToUlEArfcnValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdOffsetOfNbiotChannelNumberToUlEArfcn.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdOffsetOfNbiotChannelNumberToUlEArfcnValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdOffsetOfNbiotChannelNumberToUlEArfcnValidationError{}

// Validate checks the field values on IdNBioTULDLAlignmentOffset with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdNBioTULDLAlignmentOffset) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdNBioTULDLAlignmentOffset with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdNBioTULDLAlignmentOffsetMultiError, or nil if none found.
func (m *IdNBioTULDLAlignmentOffset) ValidateAll() error {
	return m.validate(true)
}

func (m *IdNBioTULDLAlignmentOffset) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 168 {
		err := IdNBioTULDLAlignmentOffsetValidationError{
			field:  "Value",
			reason: "value must equal 168",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdNBioTULDLAlignmentOffsetMultiError(errors)
	}

	return nil
}

// IdNBioTULDLAlignmentOffsetMultiError is an error wrapping multiple
// validation errors returned by IdNBioTULDLAlignmentOffset.ValidateAll() if
// the designated constraints aren't met.
type IdNBioTULDLAlignmentOffsetMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdNBioTULDLAlignmentOffsetMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdNBioTULDLAlignmentOffsetMultiError) AllErrors() []error { return m }

// IdNBioTULDLAlignmentOffsetValidationError is the validation error returned
// by IdNBioTULDLAlignmentOffset.Validate if the designated constraints aren't met.
type IdNBioTULDLAlignmentOffsetValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdNBioTULDLAlignmentOffsetValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdNBioTULDLAlignmentOffsetValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdNBioTULDLAlignmentOffsetValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdNBioTULDLAlignmentOffsetValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdNBioTULDLAlignmentOffsetValidationError) ErrorName() string {
	return "IdNBioTULDLAlignmentOffsetValidationError"
}

// Error satisfies the builtin error interface
func (e IdNBioTULDLAlignmentOffsetValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdNBioTULDLAlignmentOffset.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdNBioTULDLAlignmentOffsetValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdNBioTULDLAlignmentOffsetValidationError{}

// Validate checks the field values on IdLTev2XservicesAuthorized with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdLTev2XservicesAuthorized) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdLTev2XservicesAuthorized with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdLTev2XservicesAuthorizedMultiError, or nil if none found.
func (m *IdLTev2XservicesAuthorized) ValidateAll() error {
	return m.validate(true)
}

func (m *IdLTev2XservicesAuthorized) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 169 {
		err := IdLTev2XservicesAuthorizedValidationError{
			field:  "Value",
			reason: "value must equal 169",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdLTev2XservicesAuthorizedMultiError(errors)
	}

	return nil
}

// IdLTev2XservicesAuthorizedMultiError is an error wrapping multiple
// validation errors returned by IdLTev2XservicesAuthorized.ValidateAll() if
// the designated constraints aren't met.
type IdLTev2XservicesAuthorizedMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdLTev2XservicesAuthorizedMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdLTev2XservicesAuthorizedMultiError) AllErrors() []error { return m }

// IdLTev2XservicesAuthorizedValidationError is the validation error returned
// by IdLTev2XservicesAuthorized.Validate if the designated constraints aren't met.
type IdLTev2XservicesAuthorizedValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdLTev2XservicesAuthorizedValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdLTev2XservicesAuthorizedValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdLTev2XservicesAuthorizedValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdLTev2XservicesAuthorizedValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdLTev2XservicesAuthorizedValidationError) ErrorName() string {
	return "IdLTev2XservicesAuthorizedValidationError"
}

// Error satisfies the builtin error interface
func (e IdLTev2XservicesAuthorizedValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdLTev2XservicesAuthorized.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdLTev2XservicesAuthorizedValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdLTev2XservicesAuthorizedValidationError{}

// Validate checks the field values on IdNRv2XservicesAuthorized with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdNRv2XservicesAuthorized) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdNRv2XservicesAuthorized with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdNRv2XservicesAuthorizedMultiError, or nil if none found.
func (m *IdNRv2XservicesAuthorized) ValidateAll() error {
	return m.validate(true)
}

func (m *IdNRv2XservicesAuthorized) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 170 {
		err := IdNRv2XservicesAuthorizedValidationError{
			field:  "Value",
			reason: "value must equal 170",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdNRv2XservicesAuthorizedMultiError(errors)
	}

	return nil
}

// IdNRv2XservicesAuthorizedMultiError is an error wrapping multiple validation
// errors returned by IdNRv2XservicesAuthorized.ValidateAll() if the
// designated constraints aren't met.
type IdNRv2XservicesAuthorizedMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdNRv2XservicesAuthorizedMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdNRv2XservicesAuthorizedMultiError) AllErrors() []error { return m }

// IdNRv2XservicesAuthorizedValidationError is the validation error returned by
// IdNRv2XservicesAuthorized.Validate if the designated constraints aren't met.
type IdNRv2XservicesAuthorizedValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdNRv2XservicesAuthorizedValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdNRv2XservicesAuthorizedValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdNRv2XservicesAuthorizedValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdNRv2XservicesAuthorizedValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdNRv2XservicesAuthorizedValidationError) ErrorName() string {
	return "IdNRv2XservicesAuthorizedValidationError"
}

// Error satisfies the builtin error interface
func (e IdNRv2XservicesAuthorizedValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdNRv2XservicesAuthorized.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdNRv2XservicesAuthorizedValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdNRv2XservicesAuthorizedValidationError{}

// Validate checks the field values on IdLTeuesidelinkAggregateMaximumBitRate
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *IdLTeuesidelinkAggregateMaximumBitRate) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// IdLTeuesidelinkAggregateMaximumBitRate with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// IdLTeuesidelinkAggregateMaximumBitRateMultiError, or nil if none found.
func (m *IdLTeuesidelinkAggregateMaximumBitRate) ValidateAll() error {
	return m.validate(true)
}

func (m *IdLTeuesidelinkAggregateMaximumBitRate) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 171 {
		err := IdLTeuesidelinkAggregateMaximumBitRateValidationError{
			field:  "Value",
			reason: "value must equal 171",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdLTeuesidelinkAggregateMaximumBitRateMultiError(errors)
	}

	return nil
}

// IdLTeuesidelinkAggregateMaximumBitRateMultiError is an error wrapping
// multiple validation errors returned by
// IdLTeuesidelinkAggregateMaximumBitRate.ValidateAll() if the designated
// constraints aren't met.
type IdLTeuesidelinkAggregateMaximumBitRateMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdLTeuesidelinkAggregateMaximumBitRateMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdLTeuesidelinkAggregateMaximumBitRateMultiError) AllErrors() []error { return m }

// IdLTeuesidelinkAggregateMaximumBitRateValidationError is the validation
// error returned by IdLTeuesidelinkAggregateMaximumBitRate.Validate if the
// designated constraints aren't met.
type IdLTeuesidelinkAggregateMaximumBitRateValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdLTeuesidelinkAggregateMaximumBitRateValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdLTeuesidelinkAggregateMaximumBitRateValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdLTeuesidelinkAggregateMaximumBitRateValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdLTeuesidelinkAggregateMaximumBitRateValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdLTeuesidelinkAggregateMaximumBitRateValidationError) ErrorName() string {
	return "IdLTeuesidelinkAggregateMaximumBitRateValidationError"
}

// Error satisfies the builtin error interface
func (e IdLTeuesidelinkAggregateMaximumBitRateValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdLTeuesidelinkAggregateMaximumBitRate.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdLTeuesidelinkAggregateMaximumBitRateValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdLTeuesidelinkAggregateMaximumBitRateValidationError{}

// Validate checks the field values on IdNRuesidelinkAggregateMaximumBitRate
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *IdNRuesidelinkAggregateMaximumBitRate) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdNRuesidelinkAggregateMaximumBitRate
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// IdNRuesidelinkAggregateMaximumBitRateMultiError, or nil if none found.
func (m *IdNRuesidelinkAggregateMaximumBitRate) ValidateAll() error {
	return m.validate(true)
}

func (m *IdNRuesidelinkAggregateMaximumBitRate) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 172 {
		err := IdNRuesidelinkAggregateMaximumBitRateValidationError{
			field:  "Value",
			reason: "value must equal 172",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdNRuesidelinkAggregateMaximumBitRateMultiError(errors)
	}

	return nil
}

// IdNRuesidelinkAggregateMaximumBitRateMultiError is an error wrapping
// multiple validation errors returned by
// IdNRuesidelinkAggregateMaximumBitRate.ValidateAll() if the designated
// constraints aren't met.
type IdNRuesidelinkAggregateMaximumBitRateMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdNRuesidelinkAggregateMaximumBitRateMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdNRuesidelinkAggregateMaximumBitRateMultiError) AllErrors() []error { return m }

// IdNRuesidelinkAggregateMaximumBitRateValidationError is the validation error
// returned by IdNRuesidelinkAggregateMaximumBitRate.Validate if the
// designated constraints aren't met.
type IdNRuesidelinkAggregateMaximumBitRateValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdNRuesidelinkAggregateMaximumBitRateValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdNRuesidelinkAggregateMaximumBitRateValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdNRuesidelinkAggregateMaximumBitRateValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdNRuesidelinkAggregateMaximumBitRateValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdNRuesidelinkAggregateMaximumBitRateValidationError) ErrorName() string {
	return "IdNRuesidelinkAggregateMaximumBitRateValidationError"
}

// Error satisfies the builtin error interface
func (e IdNRuesidelinkAggregateMaximumBitRateValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdNRuesidelinkAggregateMaximumBitRate.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdNRuesidelinkAggregateMaximumBitRateValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdNRuesidelinkAggregateMaximumBitRateValidationError{}

// Validate checks the field values on IdPC5QoSparameters with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdPC5QoSparameters) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdPC5QoSparameters with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdPC5QoSparametersMultiError, or nil if none found.
func (m *IdPC5QoSparameters) ValidateAll() error {
	return m.validate(true)
}

func (m *IdPC5QoSparameters) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 173 {
		err := IdPC5QoSparametersValidationError{
			field:  "Value",
			reason: "value must equal 173",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdPC5QoSparametersMultiError(errors)
	}

	return nil
}

// IdPC5QoSparametersMultiError is an error wrapping multiple validation errors
// returned by IdPC5QoSparameters.ValidateAll() if the designated constraints
// aren't met.
type IdPC5QoSparametersMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdPC5QoSparametersMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdPC5QoSparametersMultiError) AllErrors() []error { return m }

// IdPC5QoSparametersValidationError is the validation error returned by
// IdPC5QoSparameters.Validate if the designated constraints aren't met.
type IdPC5QoSparametersValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdPC5QoSparametersValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdPC5QoSparametersValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdPC5QoSparametersValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdPC5QoSparametersValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdPC5QoSparametersValidationError) ErrorName() string {
	return "IdPC5QoSparametersValidationError"
}

// Error satisfies the builtin error interface
func (e IdPC5QoSparametersValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdPC5QoSparameters.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdPC5QoSparametersValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdPC5QoSparametersValidationError{}

// Validate checks the field values on IdAlternativeQoSparaSetList with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdAlternativeQoSparaSetList) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdAlternativeQoSparaSetList with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdAlternativeQoSparaSetListMultiError, or nil if none found.
func (m *IdAlternativeQoSparaSetList) ValidateAll() error {
	return m.validate(true)
}

func (m *IdAlternativeQoSparaSetList) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 174 {
		err := IdAlternativeQoSparaSetListValidationError{
			field:  "Value",
			reason: "value must equal 174",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdAlternativeQoSparaSetListMultiError(errors)
	}

	return nil
}

// IdAlternativeQoSparaSetListMultiError is an error wrapping multiple
// validation errors returned by IdAlternativeQoSparaSetList.ValidateAll() if
// the designated constraints aren't met.
type IdAlternativeQoSparaSetListMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdAlternativeQoSparaSetListMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdAlternativeQoSparaSetListMultiError) AllErrors() []error { return m }

// IdAlternativeQoSparaSetListValidationError is the validation error returned
// by IdAlternativeQoSparaSetList.Validate if the designated constraints
// aren't met.
type IdAlternativeQoSparaSetListValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdAlternativeQoSparaSetListValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdAlternativeQoSparaSetListValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdAlternativeQoSparaSetListValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdAlternativeQoSparaSetListValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdAlternativeQoSparaSetListValidationError) ErrorName() string {
	return "IdAlternativeQoSparaSetListValidationError"
}

// Error satisfies the builtin error interface
func (e IdAlternativeQoSparaSetListValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdAlternativeQoSparaSetList.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdAlternativeQoSparaSetListValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdAlternativeQoSparaSetListValidationError{}

// Validate checks the field values on IdCurrentQoSparaSetIndex with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdCurrentQoSparaSetIndex) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdCurrentQoSparaSetIndex with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdCurrentQoSparaSetIndexMultiError, or nil if none found.
func (m *IdCurrentQoSparaSetIndex) ValidateAll() error {
	return m.validate(true)
}

func (m *IdCurrentQoSparaSetIndex) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 175 {
		err := IdCurrentQoSparaSetIndexValidationError{
			field:  "Value",
			reason: "value must equal 175",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdCurrentQoSparaSetIndexMultiError(errors)
	}

	return nil
}

// IdCurrentQoSparaSetIndexMultiError is an error wrapping multiple validation
// errors returned by IdCurrentQoSparaSetIndex.ValidateAll() if the designated
// constraints aren't met.
type IdCurrentQoSparaSetIndexMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdCurrentQoSparaSetIndexMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdCurrentQoSparaSetIndexMultiError) AllErrors() []error { return m }

// IdCurrentQoSparaSetIndexValidationError is the validation error returned by
// IdCurrentQoSparaSetIndex.Validate if the designated constraints aren't met.
type IdCurrentQoSparaSetIndexValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdCurrentQoSparaSetIndexValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdCurrentQoSparaSetIndexValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdCurrentQoSparaSetIndexValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdCurrentQoSparaSetIndexValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdCurrentQoSparaSetIndexValidationError) ErrorName() string {
	return "IdCurrentQoSparaSetIndexValidationError"
}

// Error satisfies the builtin error interface
func (e IdCurrentQoSparaSetIndexValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdCurrentQoSparaSetIndex.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdCurrentQoSparaSetIndexValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdCurrentQoSparaSetIndexValidationError{}

// Validate checks the field values on IdMobilityInformation with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdMobilityInformation) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdMobilityInformation with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdMobilityInformationMultiError, or nil if none found.
func (m *IdMobilityInformation) ValidateAll() error {
	return m.validate(true)
}

func (m *IdMobilityInformation) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 176 {
		err := IdMobilityInformationValidationError{
			field:  "Value",
			reason: "value must equal 176",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdMobilityInformationMultiError(errors)
	}

	return nil
}

// IdMobilityInformationMultiError is an error wrapping multiple validation
// errors returned by IdMobilityInformation.ValidateAll() if the designated
// constraints aren't met.
type IdMobilityInformationMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdMobilityInformationMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdMobilityInformationMultiError) AllErrors() []error { return m }

// IdMobilityInformationValidationError is the validation error returned by
// IdMobilityInformation.Validate if the designated constraints aren't met.
type IdMobilityInformationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdMobilityInformationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdMobilityInformationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdMobilityInformationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdMobilityInformationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdMobilityInformationValidationError) ErrorName() string {
	return "IdMobilityInformationValidationError"
}

// Error satisfies the builtin error interface
func (e IdMobilityInformationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdMobilityInformation.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdMobilityInformationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdMobilityInformationValidationError{}

// Validate checks the field values on IdInitiatingConditionFailureIndication
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *IdInitiatingConditionFailureIndication) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// IdInitiatingConditionFailureIndication with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// IdInitiatingConditionFailureIndicationMultiError, or nil if none found.
func (m *IdInitiatingConditionFailureIndication) ValidateAll() error {
	return m.validate(true)
}

func (m *IdInitiatingConditionFailureIndication) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 177 {
		err := IdInitiatingConditionFailureIndicationValidationError{
			field:  "Value",
			reason: "value must equal 177",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdInitiatingConditionFailureIndicationMultiError(errors)
	}

	return nil
}

// IdInitiatingConditionFailureIndicationMultiError is an error wrapping
// multiple validation errors returned by
// IdInitiatingConditionFailureIndication.ValidateAll() if the designated
// constraints aren't met.
type IdInitiatingConditionFailureIndicationMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdInitiatingConditionFailureIndicationMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdInitiatingConditionFailureIndicationMultiError) AllErrors() []error { return m }

// IdInitiatingConditionFailureIndicationValidationError is the validation
// error returned by IdInitiatingConditionFailureIndication.Validate if the
// designated constraints aren't met.
type IdInitiatingConditionFailureIndicationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdInitiatingConditionFailureIndicationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdInitiatingConditionFailureIndicationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdInitiatingConditionFailureIndicationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdInitiatingConditionFailureIndicationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdInitiatingConditionFailureIndicationValidationError) ErrorName() string {
	return "IdInitiatingConditionFailureIndicationValidationError"
}

// Error satisfies the builtin error interface
func (e IdInitiatingConditionFailureIndicationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdInitiatingConditionFailureIndication.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdInitiatingConditionFailureIndicationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdInitiatingConditionFailureIndicationValidationError{}

// Validate checks the field values on IdUEhistoryInformationFromTheUe with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdUEhistoryInformationFromTheUe) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdUEhistoryInformationFromTheUe with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// IdUEhistoryInformationFromTheUeMultiError, or nil if none found.
func (m *IdUEhistoryInformationFromTheUe) ValidateAll() error {
	return m.validate(true)
}

func (m *IdUEhistoryInformationFromTheUe) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 178 {
		err := IdUEhistoryInformationFromTheUeValidationError{
			field:  "Value",
			reason: "value must equal 178",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdUEhistoryInformationFromTheUeMultiError(errors)
	}

	return nil
}

// IdUEhistoryInformationFromTheUeMultiError is an error wrapping multiple
// validation errors returned by IdUEhistoryInformationFromTheUe.ValidateAll()
// if the designated constraints aren't met.
type IdUEhistoryInformationFromTheUeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdUEhistoryInformationFromTheUeMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdUEhistoryInformationFromTheUeMultiError) AllErrors() []error { return m }

// IdUEhistoryInformationFromTheUeValidationError is the validation error
// returned by IdUEhistoryInformationFromTheUe.Validate if the designated
// constraints aren't met.
type IdUEhistoryInformationFromTheUeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdUEhistoryInformationFromTheUeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdUEhistoryInformationFromTheUeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdUEhistoryInformationFromTheUeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdUEhistoryInformationFromTheUeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdUEhistoryInformationFromTheUeValidationError) ErrorName() string {
	return "IdUEhistoryInformationFromTheUeValidationError"
}

// Error satisfies the builtin error interface
func (e IdUEhistoryInformationFromTheUeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdUEhistoryInformationFromTheUe.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdUEhistoryInformationFromTheUeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdUEhistoryInformationFromTheUeValidationError{}

// Validate checks the field values on IdHandoverReportType with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdHandoverReportType) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdHandoverReportType with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdHandoverReportTypeMultiError, or nil if none found.
func (m *IdHandoverReportType) ValidateAll() error {
	return m.validate(true)
}

func (m *IdHandoverReportType) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 179 {
		err := IdHandoverReportTypeValidationError{
			field:  "Value",
			reason: "value must equal 179",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdHandoverReportTypeMultiError(errors)
	}

	return nil
}

// IdHandoverReportTypeMultiError is an error wrapping multiple validation
// errors returned by IdHandoverReportType.ValidateAll() if the designated
// constraints aren't met.
type IdHandoverReportTypeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdHandoverReportTypeMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdHandoverReportTypeMultiError) AllErrors() []error { return m }

// IdHandoverReportTypeValidationError is the validation error returned by
// IdHandoverReportType.Validate if the designated constraints aren't met.
type IdHandoverReportTypeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdHandoverReportTypeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdHandoverReportTypeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdHandoverReportTypeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdHandoverReportTypeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdHandoverReportTypeValidationError) ErrorName() string {
	return "IdHandoverReportTypeValidationError"
}

// Error satisfies the builtin error interface
func (e IdHandoverReportTypeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdHandoverReportType.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdHandoverReportTypeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdHandoverReportTypeValidationError{}

// Validate checks the field values on IdHandoverCause with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *IdHandoverCause) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdHandoverCause with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdHandoverCauseMultiError, or nil if none found.
func (m *IdHandoverCause) ValidateAll() error {
	return m.validate(true)
}

func (m *IdHandoverCause) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 180 {
		err := IdHandoverCauseValidationError{
			field:  "Value",
			reason: "value must equal 180",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdHandoverCauseMultiError(errors)
	}

	return nil
}

// IdHandoverCauseMultiError is an error wrapping multiple validation errors
// returned by IdHandoverCause.ValidateAll() if the designated constraints
// aren't met.
type IdHandoverCauseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdHandoverCauseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdHandoverCauseMultiError) AllErrors() []error { return m }

// IdHandoverCauseValidationError is the validation error returned by
// IdHandoverCause.Validate if the designated constraints aren't met.
type IdHandoverCauseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdHandoverCauseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdHandoverCauseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdHandoverCauseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdHandoverCauseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdHandoverCauseValidationError) ErrorName() string { return "IdHandoverCauseValidationError" }

// Error satisfies the builtin error interface
func (e IdHandoverCauseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdHandoverCause.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdHandoverCauseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdHandoverCauseValidationError{}

// Validate checks the field values on IdSourceCellCgi with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *IdSourceCellCgi) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdSourceCellCgi with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdSourceCellCgiMultiError, or nil if none found.
func (m *IdSourceCellCgi) ValidateAll() error {
	return m.validate(true)
}

func (m *IdSourceCellCgi) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 181 {
		err := IdSourceCellCgiValidationError{
			field:  "Value",
			reason: "value must equal 181",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdSourceCellCgiMultiError(errors)
	}

	return nil
}

// IdSourceCellCgiMultiError is an error wrapping multiple validation errors
// returned by IdSourceCellCgi.ValidateAll() if the designated constraints
// aren't met.
type IdSourceCellCgiMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdSourceCellCgiMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdSourceCellCgiMultiError) AllErrors() []error { return m }

// IdSourceCellCgiValidationError is the validation error returned by
// IdSourceCellCgi.Validate if the designated constraints aren't met.
type IdSourceCellCgiValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdSourceCellCgiValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdSourceCellCgiValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdSourceCellCgiValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdSourceCellCgiValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdSourceCellCgiValidationError) ErrorName() string { return "IdSourceCellCgiValidationError" }

// Error satisfies the builtin error interface
func (e IdSourceCellCgiValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdSourceCellCgi.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdSourceCellCgiValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdSourceCellCgiValidationError{}

// Validate checks the field values on IdTargetCellCgi with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *IdTargetCellCgi) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdTargetCellCgi with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdTargetCellCgiMultiError, or nil if none found.
func (m *IdTargetCellCgi) ValidateAll() error {
	return m.validate(true)
}

func (m *IdTargetCellCgi) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 182 {
		err := IdTargetCellCgiValidationError{
			field:  "Value",
			reason: "value must equal 182",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdTargetCellCgiMultiError(errors)
	}

	return nil
}

// IdTargetCellCgiMultiError is an error wrapping multiple validation errors
// returned by IdTargetCellCgi.ValidateAll() if the designated constraints
// aren't met.
type IdTargetCellCgiMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdTargetCellCgiMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdTargetCellCgiMultiError) AllErrors() []error { return m }

// IdTargetCellCgiValidationError is the validation error returned by
// IdTargetCellCgi.Validate if the designated constraints aren't met.
type IdTargetCellCgiValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdTargetCellCgiValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdTargetCellCgiValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdTargetCellCgiValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdTargetCellCgiValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdTargetCellCgiValidationError) ErrorName() string { return "IdTargetCellCgiValidationError" }

// Error satisfies the builtin error interface
func (e IdTargetCellCgiValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdTargetCellCgi.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdTargetCellCgiValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdTargetCellCgiValidationError{}

// Validate checks the field values on IdReEstablishmentCellCgi with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdReEstablishmentCellCgi) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdReEstablishmentCellCgi with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdReEstablishmentCellCgiMultiError, or nil if none found.
func (m *IdReEstablishmentCellCgi) ValidateAll() error {
	return m.validate(true)
}

func (m *IdReEstablishmentCellCgi) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 183 {
		err := IdReEstablishmentCellCgiValidationError{
			field:  "Value",
			reason: "value must equal 183",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdReEstablishmentCellCgiMultiError(errors)
	}

	return nil
}

// IdReEstablishmentCellCgiMultiError is an error wrapping multiple validation
// errors returned by IdReEstablishmentCellCgi.ValidateAll() if the designated
// constraints aren't met.
type IdReEstablishmentCellCgiMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdReEstablishmentCellCgiMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdReEstablishmentCellCgiMultiError) AllErrors() []error { return m }

// IdReEstablishmentCellCgiValidationError is the validation error returned by
// IdReEstablishmentCellCgi.Validate if the designated constraints aren't met.
type IdReEstablishmentCellCgiValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdReEstablishmentCellCgiValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdReEstablishmentCellCgiValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdReEstablishmentCellCgiValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdReEstablishmentCellCgiValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdReEstablishmentCellCgiValidationError) ErrorName() string {
	return "IdReEstablishmentCellCgiValidationError"
}

// Error satisfies the builtin error interface
func (e IdReEstablishmentCellCgiValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdReEstablishmentCellCgi.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdReEstablishmentCellCgiValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdReEstablishmentCellCgiValidationError{}

// Validate checks the field values on IdTargetCellinEutran with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdTargetCellinEutran) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdTargetCellinEutran with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdTargetCellinEutranMultiError, or nil if none found.
func (m *IdTargetCellinEutran) ValidateAll() error {
	return m.validate(true)
}

func (m *IdTargetCellinEutran) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 184 {
		err := IdTargetCellinEutranValidationError{
			field:  "Value",
			reason: "value must equal 184",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdTargetCellinEutranMultiError(errors)
	}

	return nil
}

// IdTargetCellinEutranMultiError is an error wrapping multiple validation
// errors returned by IdTargetCellinEutran.ValidateAll() if the designated
// constraints aren't met.
type IdTargetCellinEutranMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdTargetCellinEutranMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdTargetCellinEutranMultiError) AllErrors() []error { return m }

// IdTargetCellinEutranValidationError is the validation error returned by
// IdTargetCellinEutran.Validate if the designated constraints aren't met.
type IdTargetCellinEutranValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdTargetCellinEutranValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdTargetCellinEutranValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdTargetCellinEutranValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdTargetCellinEutranValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdTargetCellinEutranValidationError) ErrorName() string {
	return "IdTargetCellinEutranValidationError"
}

// Error satisfies the builtin error interface
func (e IdTargetCellinEutranValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdTargetCellinEutran.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdTargetCellinEutranValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdTargetCellinEutranValidationError{}

// Validate checks the field values on IdSourceCellCrnti with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *IdSourceCellCrnti) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdSourceCellCrnti with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdSourceCellCrntiMultiError, or nil if none found.
func (m *IdSourceCellCrnti) ValidateAll() error {
	return m.validate(true)
}

func (m *IdSourceCellCrnti) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 185 {
		err := IdSourceCellCrntiValidationError{
			field:  "Value",
			reason: "value must equal 185",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdSourceCellCrntiMultiError(errors)
	}

	return nil
}

// IdSourceCellCrntiMultiError is an error wrapping multiple validation errors
// returned by IdSourceCellCrnti.ValidateAll() if the designated constraints
// aren't met.
type IdSourceCellCrntiMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdSourceCellCrntiMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdSourceCellCrntiMultiError) AllErrors() []error { return m }

// IdSourceCellCrntiValidationError is the validation error returned by
// IdSourceCellCrnti.Validate if the designated constraints aren't met.
type IdSourceCellCrntiValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdSourceCellCrntiValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdSourceCellCrntiValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdSourceCellCrntiValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdSourceCellCrntiValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdSourceCellCrntiValidationError) ErrorName() string {
	return "IdSourceCellCrntiValidationError"
}

// Error satisfies the builtin error interface
func (e IdSourceCellCrntiValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdSourceCellCrnti.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdSourceCellCrntiValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdSourceCellCrntiValidationError{}

// Validate checks the field values on IdUErlfreportContainer with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdUErlfreportContainer) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdUErlfreportContainer with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdUErlfreportContainerMultiError, or nil if none found.
func (m *IdUErlfreportContainer) ValidateAll() error {
	return m.validate(true)
}

func (m *IdUErlfreportContainer) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 186 {
		err := IdUErlfreportContainerValidationError{
			field:  "Value",
			reason: "value must equal 186",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdUErlfreportContainerMultiError(errors)
	}

	return nil
}

// IdUErlfreportContainerMultiError is an error wrapping multiple validation
// errors returned by IdUErlfreportContainer.ValidateAll() if the designated
// constraints aren't met.
type IdUErlfreportContainerMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdUErlfreportContainerMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdUErlfreportContainerMultiError) AllErrors() []error { return m }

// IdUErlfreportContainerValidationError is the validation error returned by
// IdUErlfreportContainer.Validate if the designated constraints aren't met.
type IdUErlfreportContainerValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdUErlfreportContainerValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdUErlfreportContainerValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdUErlfreportContainerValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdUErlfreportContainerValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdUErlfreportContainerValidationError) ErrorName() string {
	return "IdUErlfreportContainerValidationError"
}

// Error satisfies the builtin error interface
func (e IdUErlfreportContainerValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdUErlfreportContainer.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdUErlfreportContainerValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdUErlfreportContainerValidationError{}

// Validate checks the field values on IdNGranNode1MeasurementID with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdNGranNode1MeasurementID) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdNGranNode1MeasurementID with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdNGranNode1MeasurementIDMultiError, or nil if none found.
func (m *IdNGranNode1MeasurementID) ValidateAll() error {
	return m.validate(true)
}

func (m *IdNGranNode1MeasurementID) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 187 {
		err := IdNGranNode1MeasurementIDValidationError{
			field:  "Value",
			reason: "value must equal 187",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdNGranNode1MeasurementIDMultiError(errors)
	}

	return nil
}

// IdNGranNode1MeasurementIDMultiError is an error wrapping multiple validation
// errors returned by IdNGranNode1MeasurementID.ValidateAll() if the
// designated constraints aren't met.
type IdNGranNode1MeasurementIDMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdNGranNode1MeasurementIDMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdNGranNode1MeasurementIDMultiError) AllErrors() []error { return m }

// IdNGranNode1MeasurementIDValidationError is the validation error returned by
// IdNGranNode1MeasurementID.Validate if the designated constraints aren't met.
type IdNGranNode1MeasurementIDValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdNGranNode1MeasurementIDValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdNGranNode1MeasurementIDValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdNGranNode1MeasurementIDValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdNGranNode1MeasurementIDValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdNGranNode1MeasurementIDValidationError) ErrorName() string {
	return "IdNGranNode1MeasurementIDValidationError"
}

// Error satisfies the builtin error interface
func (e IdNGranNode1MeasurementIDValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdNGranNode1MeasurementID.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdNGranNode1MeasurementIDValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdNGranNode1MeasurementIDValidationError{}

// Validate checks the field values on IdNGranNode2MeasurementID with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdNGranNode2MeasurementID) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdNGranNode2MeasurementID with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdNGranNode2MeasurementIDMultiError, or nil if none found.
func (m *IdNGranNode2MeasurementID) ValidateAll() error {
	return m.validate(true)
}

func (m *IdNGranNode2MeasurementID) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 188 {
		err := IdNGranNode2MeasurementIDValidationError{
			field:  "Value",
			reason: "value must equal 188",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdNGranNode2MeasurementIDMultiError(errors)
	}

	return nil
}

// IdNGranNode2MeasurementIDMultiError is an error wrapping multiple validation
// errors returned by IdNGranNode2MeasurementID.ValidateAll() if the
// designated constraints aren't met.
type IdNGranNode2MeasurementIDMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdNGranNode2MeasurementIDMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdNGranNode2MeasurementIDMultiError) AllErrors() []error { return m }

// IdNGranNode2MeasurementIDValidationError is the validation error returned by
// IdNGranNode2MeasurementID.Validate if the designated constraints aren't met.
type IdNGranNode2MeasurementIDValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdNGranNode2MeasurementIDValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdNGranNode2MeasurementIDValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdNGranNode2MeasurementIDValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdNGranNode2MeasurementIDValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdNGranNode2MeasurementIDValidationError) ErrorName() string {
	return "IdNGranNode2MeasurementIDValidationError"
}

// Error satisfies the builtin error interface
func (e IdNGranNode2MeasurementIDValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdNGranNode2MeasurementID.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdNGranNode2MeasurementIDValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdNGranNode2MeasurementIDValidationError{}

// Validate checks the field values on IdRegistrationRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdRegistrationRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdRegistrationRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdRegistrationRequestMultiError, or nil if none found.
func (m *IdRegistrationRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *IdRegistrationRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 189 {
		err := IdRegistrationRequestValidationError{
			field:  "Value",
			reason: "value must equal 189",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdRegistrationRequestMultiError(errors)
	}

	return nil
}

// IdRegistrationRequestMultiError is an error wrapping multiple validation
// errors returned by IdRegistrationRequest.ValidateAll() if the designated
// constraints aren't met.
type IdRegistrationRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdRegistrationRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdRegistrationRequestMultiError) AllErrors() []error { return m }

// IdRegistrationRequestValidationError is the validation error returned by
// IdRegistrationRequest.Validate if the designated constraints aren't met.
type IdRegistrationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdRegistrationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdRegistrationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdRegistrationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdRegistrationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdRegistrationRequestValidationError) ErrorName() string {
	return "IdRegistrationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e IdRegistrationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdRegistrationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdRegistrationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdRegistrationRequestValidationError{}

// Validate checks the field values on IdReportCharacteristics with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdReportCharacteristics) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdReportCharacteristics with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdReportCharacteristicsMultiError, or nil if none found.
func (m *IdReportCharacteristics) ValidateAll() error {
	return m.validate(true)
}

func (m *IdReportCharacteristics) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 190 {
		err := IdReportCharacteristicsValidationError{
			field:  "Value",
			reason: "value must equal 190",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdReportCharacteristicsMultiError(errors)
	}

	return nil
}

// IdReportCharacteristicsMultiError is an error wrapping multiple validation
// errors returned by IdReportCharacteristics.ValidateAll() if the designated
// constraints aren't met.
type IdReportCharacteristicsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdReportCharacteristicsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdReportCharacteristicsMultiError) AllErrors() []error { return m }

// IdReportCharacteristicsValidationError is the validation error returned by
// IdReportCharacteristics.Validate if the designated constraints aren't met.
type IdReportCharacteristicsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdReportCharacteristicsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdReportCharacteristicsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdReportCharacteristicsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdReportCharacteristicsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdReportCharacteristicsValidationError) ErrorName() string {
	return "IdReportCharacteristicsValidationError"
}

// Error satisfies the builtin error interface
func (e IdReportCharacteristicsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdReportCharacteristics.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdReportCharacteristicsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdReportCharacteristicsValidationError{}

// Validate checks the field values on IdCellToReport with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *IdCellToReport) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdCellToReport with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in IdCellToReportMultiError,
// or nil if none found.
func (m *IdCellToReport) ValidateAll() error {
	return m.validate(true)
}

func (m *IdCellToReport) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 191 {
		err := IdCellToReportValidationError{
			field:  "Value",
			reason: "value must equal 191",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdCellToReportMultiError(errors)
	}

	return nil
}

// IdCellToReportMultiError is an error wrapping multiple validation errors
// returned by IdCellToReport.ValidateAll() if the designated constraints
// aren't met.
type IdCellToReportMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdCellToReportMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdCellToReportMultiError) AllErrors() []error { return m }

// IdCellToReportValidationError is the validation error returned by
// IdCellToReport.Validate if the designated constraints aren't met.
type IdCellToReportValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdCellToReportValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdCellToReportValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdCellToReportValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdCellToReportValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdCellToReportValidationError) ErrorName() string { return "IdCellToReportValidationError" }

// Error satisfies the builtin error interface
func (e IdCellToReportValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdCellToReport.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdCellToReportValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdCellToReportValidationError{}

// Validate checks the field values on IdReportingPeriodicity with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdReportingPeriodicity) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdReportingPeriodicity with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdReportingPeriodicityMultiError, or nil if none found.
func (m *IdReportingPeriodicity) ValidateAll() error {
	return m.validate(true)
}

func (m *IdReportingPeriodicity) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 192 {
		err := IdReportingPeriodicityValidationError{
			field:  "Value",
			reason: "value must equal 192",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdReportingPeriodicityMultiError(errors)
	}

	return nil
}

// IdReportingPeriodicityMultiError is an error wrapping multiple validation
// errors returned by IdReportingPeriodicity.ValidateAll() if the designated
// constraints aren't met.
type IdReportingPeriodicityMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdReportingPeriodicityMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdReportingPeriodicityMultiError) AllErrors() []error { return m }

// IdReportingPeriodicityValidationError is the validation error returned by
// IdReportingPeriodicity.Validate if the designated constraints aren't met.
type IdReportingPeriodicityValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdReportingPeriodicityValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdReportingPeriodicityValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdReportingPeriodicityValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdReportingPeriodicityValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdReportingPeriodicityValidationError) ErrorName() string {
	return "IdReportingPeriodicityValidationError"
}

// Error satisfies the builtin error interface
func (e IdReportingPeriodicityValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdReportingPeriodicity.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdReportingPeriodicityValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdReportingPeriodicityValidationError{}

// Validate checks the field values on IdCellMeasurementResult with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdCellMeasurementResult) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdCellMeasurementResult with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdCellMeasurementResultMultiError, or nil if none found.
func (m *IdCellMeasurementResult) ValidateAll() error {
	return m.validate(true)
}

func (m *IdCellMeasurementResult) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 193 {
		err := IdCellMeasurementResultValidationError{
			field:  "Value",
			reason: "value must equal 193",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdCellMeasurementResultMultiError(errors)
	}

	return nil
}

// IdCellMeasurementResultMultiError is an error wrapping multiple validation
// errors returned by IdCellMeasurementResult.ValidateAll() if the designated
// constraints aren't met.
type IdCellMeasurementResultMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdCellMeasurementResultMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdCellMeasurementResultMultiError) AllErrors() []error { return m }

// IdCellMeasurementResultValidationError is the validation error returned by
// IdCellMeasurementResult.Validate if the designated constraints aren't met.
type IdCellMeasurementResultValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdCellMeasurementResultValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdCellMeasurementResultValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdCellMeasurementResultValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdCellMeasurementResultValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdCellMeasurementResultValidationError) ErrorName() string {
	return "IdCellMeasurementResultValidationError"
}

// Error satisfies the builtin error interface
func (e IdCellMeasurementResultValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdCellMeasurementResult.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdCellMeasurementResultValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdCellMeasurementResultValidationError{}

// Validate checks the field values on IdNGRAnnode1CellId with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdNGRAnnode1CellId) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdNGRAnnode1CellId with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdNGRAnnode1CellIdMultiError, or nil if none found.
func (m *IdNGRAnnode1CellId) ValidateAll() error {
	return m.validate(true)
}

func (m *IdNGRAnnode1CellId) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 194 {
		err := IdNGRAnnode1CellIdValidationError{
			field:  "Value",
			reason: "value must equal 194",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdNGRAnnode1CellIdMultiError(errors)
	}

	return nil
}

// IdNGRAnnode1CellIdMultiError is an error wrapping multiple validation errors
// returned by IdNGRAnnode1CellId.ValidateAll() if the designated constraints
// aren't met.
type IdNGRAnnode1CellIdMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdNGRAnnode1CellIdMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdNGRAnnode1CellIdMultiError) AllErrors() []error { return m }

// IdNGRAnnode1CellIdValidationError is the validation error returned by
// IdNGRAnnode1CellId.Validate if the designated constraints aren't met.
type IdNGRAnnode1CellIdValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdNGRAnnode1CellIdValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdNGRAnnode1CellIdValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdNGRAnnode1CellIdValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdNGRAnnode1CellIdValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdNGRAnnode1CellIdValidationError) ErrorName() string {
	return "IdNGRAnnode1CellIdValidationError"
}

// Error satisfies the builtin error interface
func (e IdNGRAnnode1CellIdValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdNGRAnnode1CellId.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdNGRAnnode1CellIdValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdNGRAnnode1CellIdValidationError{}

// Validate checks the field values on IdNGRAnnode2CellId with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdNGRAnnode2CellId) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdNGRAnnode2CellId with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdNGRAnnode2CellIdMultiError, or nil if none found.
func (m *IdNGRAnnode2CellId) ValidateAll() error {
	return m.validate(true)
}

func (m *IdNGRAnnode2CellId) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 195 {
		err := IdNGRAnnode2CellIdValidationError{
			field:  "Value",
			reason: "value must equal 195",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdNGRAnnode2CellIdMultiError(errors)
	}

	return nil
}

// IdNGRAnnode2CellIdMultiError is an error wrapping multiple validation errors
// returned by IdNGRAnnode2CellId.ValidateAll() if the designated constraints
// aren't met.
type IdNGRAnnode2CellIdMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdNGRAnnode2CellIdMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdNGRAnnode2CellIdMultiError) AllErrors() []error { return m }

// IdNGRAnnode2CellIdValidationError is the validation error returned by
// IdNGRAnnode2CellId.Validate if the designated constraints aren't met.
type IdNGRAnnode2CellIdValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdNGRAnnode2CellIdValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdNGRAnnode2CellIdValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdNGRAnnode2CellIdValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdNGRAnnode2CellIdValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdNGRAnnode2CellIdValidationError) ErrorName() string {
	return "IdNGRAnnode2CellIdValidationError"
}

// Error satisfies the builtin error interface
func (e IdNGRAnnode2CellIdValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdNGRAnnode2CellId.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdNGRAnnode2CellIdValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdNGRAnnode2CellIdValidationError{}

// Validate checks the field values on IdNGRAnnode1MobilityParameters with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdNGRAnnode1MobilityParameters) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdNGRAnnode1MobilityParameters with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// IdNGRAnnode1MobilityParametersMultiError, or nil if none found.
func (m *IdNGRAnnode1MobilityParameters) ValidateAll() error {
	return m.validate(true)
}

func (m *IdNGRAnnode1MobilityParameters) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 196 {
		err := IdNGRAnnode1MobilityParametersValidationError{
			field:  "Value",
			reason: "value must equal 196",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdNGRAnnode1MobilityParametersMultiError(errors)
	}

	return nil
}

// IdNGRAnnode1MobilityParametersMultiError is an error wrapping multiple
// validation errors returned by IdNGRAnnode1MobilityParameters.ValidateAll()
// if the designated constraints aren't met.
type IdNGRAnnode1MobilityParametersMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdNGRAnnode1MobilityParametersMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdNGRAnnode1MobilityParametersMultiError) AllErrors() []error { return m }

// IdNGRAnnode1MobilityParametersValidationError is the validation error
// returned by IdNGRAnnode1MobilityParameters.Validate if the designated
// constraints aren't met.
type IdNGRAnnode1MobilityParametersValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdNGRAnnode1MobilityParametersValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdNGRAnnode1MobilityParametersValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdNGRAnnode1MobilityParametersValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdNGRAnnode1MobilityParametersValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdNGRAnnode1MobilityParametersValidationError) ErrorName() string {
	return "IdNGRAnnode1MobilityParametersValidationError"
}

// Error satisfies the builtin error interface
func (e IdNGRAnnode1MobilityParametersValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdNGRAnnode1MobilityParameters.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdNGRAnnode1MobilityParametersValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdNGRAnnode1MobilityParametersValidationError{}

// Validate checks the field values on IdNGRAnnode2ProposedMobilityParameters
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *IdNGRAnnode2ProposedMobilityParameters) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// IdNGRAnnode2ProposedMobilityParameters with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// IdNGRAnnode2ProposedMobilityParametersMultiError, or nil if none found.
func (m *IdNGRAnnode2ProposedMobilityParameters) ValidateAll() error {
	return m.validate(true)
}

func (m *IdNGRAnnode2ProposedMobilityParameters) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 197 {
		err := IdNGRAnnode2ProposedMobilityParametersValidationError{
			field:  "Value",
			reason: "value must equal 197",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdNGRAnnode2ProposedMobilityParametersMultiError(errors)
	}

	return nil
}

// IdNGRAnnode2ProposedMobilityParametersMultiError is an error wrapping
// multiple validation errors returned by
// IdNGRAnnode2ProposedMobilityParameters.ValidateAll() if the designated
// constraints aren't met.
type IdNGRAnnode2ProposedMobilityParametersMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdNGRAnnode2ProposedMobilityParametersMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdNGRAnnode2ProposedMobilityParametersMultiError) AllErrors() []error { return m }

// IdNGRAnnode2ProposedMobilityParametersValidationError is the validation
// error returned by IdNGRAnnode2ProposedMobilityParameters.Validate if the
// designated constraints aren't met.
type IdNGRAnnode2ProposedMobilityParametersValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdNGRAnnode2ProposedMobilityParametersValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdNGRAnnode2ProposedMobilityParametersValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdNGRAnnode2ProposedMobilityParametersValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdNGRAnnode2ProposedMobilityParametersValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdNGRAnnode2ProposedMobilityParametersValidationError) ErrorName() string {
	return "IdNGRAnnode2ProposedMobilityParametersValidationError"
}

// Error satisfies the builtin error interface
func (e IdNGRAnnode2ProposedMobilityParametersValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdNGRAnnode2ProposedMobilityParameters.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdNGRAnnode2ProposedMobilityParametersValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdNGRAnnode2ProposedMobilityParametersValidationError{}

// Validate checks the field values on IdMobilityParametersModificationRange
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *IdMobilityParametersModificationRange) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdMobilityParametersModificationRange
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// IdMobilityParametersModificationRangeMultiError, or nil if none found.
func (m *IdMobilityParametersModificationRange) ValidateAll() error {
	return m.validate(true)
}

func (m *IdMobilityParametersModificationRange) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 198 {
		err := IdMobilityParametersModificationRangeValidationError{
			field:  "Value",
			reason: "value must equal 198",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdMobilityParametersModificationRangeMultiError(errors)
	}

	return nil
}

// IdMobilityParametersModificationRangeMultiError is an error wrapping
// multiple validation errors returned by
// IdMobilityParametersModificationRange.ValidateAll() if the designated
// constraints aren't met.
type IdMobilityParametersModificationRangeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdMobilityParametersModificationRangeMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdMobilityParametersModificationRangeMultiError) AllErrors() []error { return m }

// IdMobilityParametersModificationRangeValidationError is the validation error
// returned by IdMobilityParametersModificationRange.Validate if the
// designated constraints aren't met.
type IdMobilityParametersModificationRangeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdMobilityParametersModificationRangeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdMobilityParametersModificationRangeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdMobilityParametersModificationRangeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdMobilityParametersModificationRangeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdMobilityParametersModificationRangeValidationError) ErrorName() string {
	return "IdMobilityParametersModificationRangeValidationError"
}

// Error satisfies the builtin error interface
func (e IdMobilityParametersModificationRangeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdMobilityParametersModificationRange.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdMobilityParametersModificationRangeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdMobilityParametersModificationRangeValidationError{}

// Validate checks the field values on IdTDduldlconfigurationCommonNr with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdTDduldlconfigurationCommonNr) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdTDduldlconfigurationCommonNr with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// IdTDduldlconfigurationCommonNrMultiError, or nil if none found.
func (m *IdTDduldlconfigurationCommonNr) ValidateAll() error {
	return m.validate(true)
}

func (m *IdTDduldlconfigurationCommonNr) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 199 {
		err := IdTDduldlconfigurationCommonNrValidationError{
			field:  "Value",
			reason: "value must equal 199",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdTDduldlconfigurationCommonNrMultiError(errors)
	}

	return nil
}

// IdTDduldlconfigurationCommonNrMultiError is an error wrapping multiple
// validation errors returned by IdTDduldlconfigurationCommonNr.ValidateAll()
// if the designated constraints aren't met.
type IdTDduldlconfigurationCommonNrMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdTDduldlconfigurationCommonNrMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdTDduldlconfigurationCommonNrMultiError) AllErrors() []error { return m }

// IdTDduldlconfigurationCommonNrValidationError is the validation error
// returned by IdTDduldlconfigurationCommonNr.Validate if the designated
// constraints aren't met.
type IdTDduldlconfigurationCommonNrValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdTDduldlconfigurationCommonNrValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdTDduldlconfigurationCommonNrValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdTDduldlconfigurationCommonNrValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdTDduldlconfigurationCommonNrValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdTDduldlconfigurationCommonNrValidationError) ErrorName() string {
	return "IdTDduldlconfigurationCommonNrValidationError"
}

// Error satisfies the builtin error interface
func (e IdTDduldlconfigurationCommonNrValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdTDduldlconfigurationCommonNr.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdTDduldlconfigurationCommonNrValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdTDduldlconfigurationCommonNrValidationError{}

// Validate checks the field values on IdCarrierList with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *IdCarrierList) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdCarrierList with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in IdCarrierListMultiError, or
// nil if none found.
func (m *IdCarrierList) ValidateAll() error {
	return m.validate(true)
}

func (m *IdCarrierList) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 200 {
		err := IdCarrierListValidationError{
			field:  "Value",
			reason: "value must equal 200",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdCarrierListMultiError(errors)
	}

	return nil
}

// IdCarrierListMultiError is an error wrapping multiple validation errors
// returned by IdCarrierList.ValidateAll() if the designated constraints
// aren't met.
type IdCarrierListMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdCarrierListMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdCarrierListMultiError) AllErrors() []error { return m }

// IdCarrierListValidationError is the validation error returned by
// IdCarrierList.Validate if the designated constraints aren't met.
type IdCarrierListValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdCarrierListValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdCarrierListValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdCarrierListValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdCarrierListValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdCarrierListValidationError) ErrorName() string { return "IdCarrierListValidationError" }

// Error satisfies the builtin error interface
func (e IdCarrierListValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdCarrierList.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdCarrierListValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdCarrierListValidationError{}

// Validate checks the field values on IdULcarrierList with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *IdULcarrierList) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdULcarrierList with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdULcarrierListMultiError, or nil if none found.
func (m *IdULcarrierList) ValidateAll() error {
	return m.validate(true)
}

func (m *IdULcarrierList) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 201 {
		err := IdULcarrierListValidationError{
			field:  "Value",
			reason: "value must equal 201",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdULcarrierListMultiError(errors)
	}

	return nil
}

// IdULcarrierListMultiError is an error wrapping multiple validation errors
// returned by IdULcarrierList.ValidateAll() if the designated constraints
// aren't met.
type IdULcarrierListMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdULcarrierListMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdULcarrierListMultiError) AllErrors() []error { return m }

// IdULcarrierListValidationError is the validation error returned by
// IdULcarrierList.Validate if the designated constraints aren't met.
type IdULcarrierListValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdULcarrierListValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdULcarrierListValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdULcarrierListValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdULcarrierListValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdULcarrierListValidationError) ErrorName() string { return "IdULcarrierListValidationError" }

// Error satisfies the builtin error interface
func (e IdULcarrierListValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdULcarrierList.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdULcarrierListValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdULcarrierListValidationError{}

// Validate checks the field values on IdFrequencyShift7P5Khz with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdFrequencyShift7P5Khz) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdFrequencyShift7P5Khz with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdFrequencyShift7P5KhzMultiError, or nil if none found.
func (m *IdFrequencyShift7P5Khz) ValidateAll() error {
	return m.validate(true)
}

func (m *IdFrequencyShift7P5Khz) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 202 {
		err := IdFrequencyShift7P5KhzValidationError{
			field:  "Value",
			reason: "value must equal 202",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdFrequencyShift7P5KhzMultiError(errors)
	}

	return nil
}

// IdFrequencyShift7P5KhzMultiError is an error wrapping multiple validation
// errors returned by IdFrequencyShift7P5Khz.ValidateAll() if the designated
// constraints aren't met.
type IdFrequencyShift7P5KhzMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdFrequencyShift7P5KhzMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdFrequencyShift7P5KhzMultiError) AllErrors() []error { return m }

// IdFrequencyShift7P5KhzValidationError is the validation error returned by
// IdFrequencyShift7P5Khz.Validate if the designated constraints aren't met.
type IdFrequencyShift7P5KhzValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdFrequencyShift7P5KhzValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdFrequencyShift7P5KhzValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdFrequencyShift7P5KhzValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdFrequencyShift7P5KhzValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdFrequencyShift7P5KhzValidationError) ErrorName() string {
	return "IdFrequencyShift7P5KhzValidationError"
}

// Error satisfies the builtin error interface
func (e IdFrequencyShift7P5KhzValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdFrequencyShift7P5Khz.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdFrequencyShift7P5KhzValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdFrequencyShift7P5KhzValidationError{}

// Validate checks the field values on IdSSbPositionsInBurst with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdSSbPositionsInBurst) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdSSbPositionsInBurst with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdSSbPositionsInBurstMultiError, or nil if none found.
func (m *IdSSbPositionsInBurst) ValidateAll() error {
	return m.validate(true)
}

func (m *IdSSbPositionsInBurst) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 203 {
		err := IdSSbPositionsInBurstValidationError{
			field:  "Value",
			reason: "value must equal 203",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdSSbPositionsInBurstMultiError(errors)
	}

	return nil
}

// IdSSbPositionsInBurstMultiError is an error wrapping multiple validation
// errors returned by IdSSbPositionsInBurst.ValidateAll() if the designated
// constraints aren't met.
type IdSSbPositionsInBurstMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdSSbPositionsInBurstMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdSSbPositionsInBurstMultiError) AllErrors() []error { return m }

// IdSSbPositionsInBurstValidationError is the validation error returned by
// IdSSbPositionsInBurst.Validate if the designated constraints aren't met.
type IdSSbPositionsInBurstValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdSSbPositionsInBurstValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdSSbPositionsInBurstValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdSSbPositionsInBurstValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdSSbPositionsInBurstValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdSSbPositionsInBurstValidationError) ErrorName() string {
	return "IdSSbPositionsInBurstValidationError"
}

// Error satisfies the builtin error interface
func (e IdSSbPositionsInBurstValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdSSbPositionsInBurst.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdSSbPositionsInBurstValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdSSbPositionsInBurstValidationError{}

// Validate checks the field values on IdNRcellPrachconfig with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdNRcellPrachconfig) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdNRcellPrachconfig with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdNRcellPrachconfigMultiError, or nil if none found.
func (m *IdNRcellPrachconfig) ValidateAll() error {
	return m.validate(true)
}

func (m *IdNRcellPrachconfig) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 204 {
		err := IdNRcellPrachconfigValidationError{
			field:  "Value",
			reason: "value must equal 204",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdNRcellPrachconfigMultiError(errors)
	}

	return nil
}

// IdNRcellPrachconfigMultiError is an error wrapping multiple validation
// errors returned by IdNRcellPrachconfig.ValidateAll() if the designated
// constraints aren't met.
type IdNRcellPrachconfigMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdNRcellPrachconfigMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdNRcellPrachconfigMultiError) AllErrors() []error { return m }

// IdNRcellPrachconfigValidationError is the validation error returned by
// IdNRcellPrachconfig.Validate if the designated constraints aren't met.
type IdNRcellPrachconfigValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdNRcellPrachconfigValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdNRcellPrachconfigValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdNRcellPrachconfigValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdNRcellPrachconfigValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdNRcellPrachconfigValidationError) ErrorName() string {
	return "IdNRcellPrachconfigValidationError"
}

// Error satisfies the builtin error interface
func (e IdNRcellPrachconfigValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdNRcellPrachconfig.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdNRcellPrachconfigValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdNRcellPrachconfigValidationError{}

// Validate checks the field values on IdRAchreportInformation with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdRAchreportInformation) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdRAchreportInformation with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdRAchreportInformationMultiError, or nil if none found.
func (m *IdRAchreportInformation) ValidateAll() error {
	return m.validate(true)
}

func (m *IdRAchreportInformation) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 205 {
		err := IdRAchreportInformationValidationError{
			field:  "Value",
			reason: "value must equal 205",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdRAchreportInformationMultiError(errors)
	}

	return nil
}

// IdRAchreportInformationMultiError is an error wrapping multiple validation
// errors returned by IdRAchreportInformation.ValidateAll() if the designated
// constraints aren't met.
type IdRAchreportInformationMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdRAchreportInformationMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdRAchreportInformationMultiError) AllErrors() []error { return m }

// IdRAchreportInformationValidationError is the validation error returned by
// IdRAchreportInformation.Validate if the designated constraints aren't met.
type IdRAchreportInformationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdRAchreportInformationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdRAchreportInformationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdRAchreportInformationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdRAchreportInformationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdRAchreportInformationValidationError) ErrorName() string {
	return "IdRAchreportInformationValidationError"
}

// Error satisfies the builtin error interface
func (e IdRAchreportInformationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdRAchreportInformation.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdRAchreportInformationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdRAchreportInformationValidationError{}

// Validate checks the field values on IdIAbnodeIndication with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdIAbnodeIndication) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdIAbnodeIndication with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdIAbnodeIndicationMultiError, or nil if none found.
func (m *IdIAbnodeIndication) ValidateAll() error {
	return m.validate(true)
}

func (m *IdIAbnodeIndication) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 206 {
		err := IdIAbnodeIndicationValidationError{
			field:  "Value",
			reason: "value must equal 206",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdIAbnodeIndicationMultiError(errors)
	}

	return nil
}

// IdIAbnodeIndicationMultiError is an error wrapping multiple validation
// errors returned by IdIAbnodeIndication.ValidateAll() if the designated
// constraints aren't met.
type IdIAbnodeIndicationMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdIAbnodeIndicationMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdIAbnodeIndicationMultiError) AllErrors() []error { return m }

// IdIAbnodeIndicationValidationError is the validation error returned by
// IdIAbnodeIndication.Validate if the designated constraints aren't met.
type IdIAbnodeIndicationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdIAbnodeIndicationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdIAbnodeIndicationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdIAbnodeIndicationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdIAbnodeIndicationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdIAbnodeIndicationValidationError) ErrorName() string {
	return "IdIAbnodeIndicationValidationError"
}

// Error satisfies the builtin error interface
func (e IdIAbnodeIndicationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdIAbnodeIndication.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdIAbnodeIndicationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdIAbnodeIndicationValidationError{}

// Validate checks the field values on IdRedundantULNGUTNlatUpf with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdRedundantULNGUTNlatUpf) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdRedundantULNGUTNlatUpf with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdRedundantULNGUTNlatUpfMultiError, or nil if none found.
func (m *IdRedundantULNGUTNlatUpf) ValidateAll() error {
	return m.validate(true)
}

func (m *IdRedundantULNGUTNlatUpf) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 207 {
		err := IdRedundantULNGUTNlatUpfValidationError{
			field:  "Value",
			reason: "value must equal 207",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdRedundantULNGUTNlatUpfMultiError(errors)
	}

	return nil
}

// IdRedundantULNGUTNlatUpfMultiError is an error wrapping multiple validation
// errors returned by IdRedundantULNGUTNlatUpf.ValidateAll() if the designated
// constraints aren't met.
type IdRedundantULNGUTNlatUpfMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdRedundantULNGUTNlatUpfMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdRedundantULNGUTNlatUpfMultiError) AllErrors() []error { return m }

// IdRedundantULNGUTNlatUpfValidationError is the validation error returned by
// IdRedundantULNGUTNlatUpf.Validate if the designated constraints aren't met.
type IdRedundantULNGUTNlatUpfValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdRedundantULNGUTNlatUpfValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdRedundantULNGUTNlatUpfValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdRedundantULNGUTNlatUpfValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdRedundantULNGUTNlatUpfValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdRedundantULNGUTNlatUpfValidationError) ErrorName() string {
	return "IdRedundantULNGUTNlatUpfValidationError"
}

// Error satisfies the builtin error interface
func (e IdRedundantULNGUTNlatUpfValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdRedundantULNGUTNlatUpf.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdRedundantULNGUTNlatUpfValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdRedundantULNGUTNlatUpfValidationError{}

// Validate checks the field values on IdCNpacketDelayBudgetDownlink with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdCNpacketDelayBudgetDownlink) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdCNpacketDelayBudgetDownlink with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// IdCNpacketDelayBudgetDownlinkMultiError, or nil if none found.
func (m *IdCNpacketDelayBudgetDownlink) ValidateAll() error {
	return m.validate(true)
}

func (m *IdCNpacketDelayBudgetDownlink) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 208 {
		err := IdCNpacketDelayBudgetDownlinkValidationError{
			field:  "Value",
			reason: "value must equal 208",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdCNpacketDelayBudgetDownlinkMultiError(errors)
	}

	return nil
}

// IdCNpacketDelayBudgetDownlinkMultiError is an error wrapping multiple
// validation errors returned by IdCNpacketDelayBudgetDownlink.ValidateAll()
// if the designated constraints aren't met.
type IdCNpacketDelayBudgetDownlinkMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdCNpacketDelayBudgetDownlinkMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdCNpacketDelayBudgetDownlinkMultiError) AllErrors() []error { return m }

// IdCNpacketDelayBudgetDownlinkValidationError is the validation error
// returned by IdCNpacketDelayBudgetDownlink.Validate if the designated
// constraints aren't met.
type IdCNpacketDelayBudgetDownlinkValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdCNpacketDelayBudgetDownlinkValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdCNpacketDelayBudgetDownlinkValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdCNpacketDelayBudgetDownlinkValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdCNpacketDelayBudgetDownlinkValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdCNpacketDelayBudgetDownlinkValidationError) ErrorName() string {
	return "IdCNpacketDelayBudgetDownlinkValidationError"
}

// Error satisfies the builtin error interface
func (e IdCNpacketDelayBudgetDownlinkValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdCNpacketDelayBudgetDownlink.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdCNpacketDelayBudgetDownlinkValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdCNpacketDelayBudgetDownlinkValidationError{}

// Validate checks the field values on IdCNpacketDelayBudgetUplink with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdCNpacketDelayBudgetUplink) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdCNpacketDelayBudgetUplink with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdCNpacketDelayBudgetUplinkMultiError, or nil if none found.
func (m *IdCNpacketDelayBudgetUplink) ValidateAll() error {
	return m.validate(true)
}

func (m *IdCNpacketDelayBudgetUplink) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 209 {
		err := IdCNpacketDelayBudgetUplinkValidationError{
			field:  "Value",
			reason: "value must equal 209",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdCNpacketDelayBudgetUplinkMultiError(errors)
	}

	return nil
}

// IdCNpacketDelayBudgetUplinkMultiError is an error wrapping multiple
// validation errors returned by IdCNpacketDelayBudgetUplink.ValidateAll() if
// the designated constraints aren't met.
type IdCNpacketDelayBudgetUplinkMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdCNpacketDelayBudgetUplinkMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdCNpacketDelayBudgetUplinkMultiError) AllErrors() []error { return m }

// IdCNpacketDelayBudgetUplinkValidationError is the validation error returned
// by IdCNpacketDelayBudgetUplink.Validate if the designated constraints
// aren't met.
type IdCNpacketDelayBudgetUplinkValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdCNpacketDelayBudgetUplinkValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdCNpacketDelayBudgetUplinkValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdCNpacketDelayBudgetUplinkValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdCNpacketDelayBudgetUplinkValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdCNpacketDelayBudgetUplinkValidationError) ErrorName() string {
	return "IdCNpacketDelayBudgetUplinkValidationError"
}

// Error satisfies the builtin error interface
func (e IdCNpacketDelayBudgetUplinkValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdCNpacketDelayBudgetUplink.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdCNpacketDelayBudgetUplinkValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdCNpacketDelayBudgetUplinkValidationError{}

// Validate checks the field values on IdAdditionalRedundantULNGUTNlatUpfList
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *IdAdditionalRedundantULNGUTNlatUpfList) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// IdAdditionalRedundantULNGUTNlatUpfList with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// IdAdditionalRedundantULNGUTNlatUpfListMultiError, or nil if none found.
func (m *IdAdditionalRedundantULNGUTNlatUpfList) ValidateAll() error {
	return m.validate(true)
}

func (m *IdAdditionalRedundantULNGUTNlatUpfList) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 210 {
		err := IdAdditionalRedundantULNGUTNlatUpfListValidationError{
			field:  "Value",
			reason: "value must equal 210",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdAdditionalRedundantULNGUTNlatUpfListMultiError(errors)
	}

	return nil
}

// IdAdditionalRedundantULNGUTNlatUpfListMultiError is an error wrapping
// multiple validation errors returned by
// IdAdditionalRedundantULNGUTNlatUpfList.ValidateAll() if the designated
// constraints aren't met.
type IdAdditionalRedundantULNGUTNlatUpfListMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdAdditionalRedundantULNGUTNlatUpfListMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdAdditionalRedundantULNGUTNlatUpfListMultiError) AllErrors() []error { return m }

// IdAdditionalRedundantULNGUTNlatUpfListValidationError is the validation
// error returned by IdAdditionalRedundantULNGUTNlatUpfList.Validate if the
// designated constraints aren't met.
type IdAdditionalRedundantULNGUTNlatUpfListValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdAdditionalRedundantULNGUTNlatUpfListValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdAdditionalRedundantULNGUTNlatUpfListValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdAdditionalRedundantULNGUTNlatUpfListValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdAdditionalRedundantULNGUTNlatUpfListValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdAdditionalRedundantULNGUTNlatUpfListValidationError) ErrorName() string {
	return "IdAdditionalRedundantULNGUTNlatUpfListValidationError"
}

// Error satisfies the builtin error interface
func (e IdAdditionalRedundantULNGUTNlatUpfListValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdAdditionalRedundantULNGUTNlatUpfList.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdAdditionalRedundantULNGUTNlatUpfListValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdAdditionalRedundantULNGUTNlatUpfListValidationError{}

// Validate checks the field values on IdRedundantCommonNetworkInstance with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *IdRedundantCommonNetworkInstance) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdRedundantCommonNetworkInstance with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// IdRedundantCommonNetworkInstanceMultiError, or nil if none found.
func (m *IdRedundantCommonNetworkInstance) ValidateAll() error {
	return m.validate(true)
}

func (m *IdRedundantCommonNetworkInstance) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 211 {
		err := IdRedundantCommonNetworkInstanceValidationError{
			field:  "Value",
			reason: "value must equal 211",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdRedundantCommonNetworkInstanceMultiError(errors)
	}

	return nil
}

// IdRedundantCommonNetworkInstanceMultiError is an error wrapping multiple
// validation errors returned by
// IdRedundantCommonNetworkInstance.ValidateAll() if the designated
// constraints aren't met.
type IdRedundantCommonNetworkInstanceMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdRedundantCommonNetworkInstanceMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdRedundantCommonNetworkInstanceMultiError) AllErrors() []error { return m }

// IdRedundantCommonNetworkInstanceValidationError is the validation error
// returned by IdRedundantCommonNetworkInstance.Validate if the designated
// constraints aren't met.
type IdRedundantCommonNetworkInstanceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdRedundantCommonNetworkInstanceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdRedundantCommonNetworkInstanceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdRedundantCommonNetworkInstanceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdRedundantCommonNetworkInstanceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdRedundantCommonNetworkInstanceValidationError) ErrorName() string {
	return "IdRedundantCommonNetworkInstanceValidationError"
}

// Error satisfies the builtin error interface
func (e IdRedundantCommonNetworkInstanceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdRedundantCommonNetworkInstance.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdRedundantCommonNetworkInstanceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdRedundantCommonNetworkInstanceValidationError{}

// Validate checks the field values on IdTSctrafficCharacteristics with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdTSctrafficCharacteristics) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdTSctrafficCharacteristics with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdTSctrafficCharacteristicsMultiError, or nil if none found.
func (m *IdTSctrafficCharacteristics) ValidateAll() error {
	return m.validate(true)
}

func (m *IdTSctrafficCharacteristics) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 212 {
		err := IdTSctrafficCharacteristicsValidationError{
			field:  "Value",
			reason: "value must equal 212",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdTSctrafficCharacteristicsMultiError(errors)
	}

	return nil
}

// IdTSctrafficCharacteristicsMultiError is an error wrapping multiple
// validation errors returned by IdTSctrafficCharacteristics.ValidateAll() if
// the designated constraints aren't met.
type IdTSctrafficCharacteristicsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdTSctrafficCharacteristicsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdTSctrafficCharacteristicsMultiError) AllErrors() []error { return m }

// IdTSctrafficCharacteristicsValidationError is the validation error returned
// by IdTSctrafficCharacteristics.Validate if the designated constraints
// aren't met.
type IdTSctrafficCharacteristicsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdTSctrafficCharacteristicsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdTSctrafficCharacteristicsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdTSctrafficCharacteristicsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdTSctrafficCharacteristicsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdTSctrafficCharacteristicsValidationError) ErrorName() string {
	return "IdTSctrafficCharacteristicsValidationError"
}

// Error satisfies the builtin error interface
func (e IdTSctrafficCharacteristicsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdTSctrafficCharacteristics.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdTSctrafficCharacteristicsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdTSctrafficCharacteristicsValidationError{}

// Validate checks the field values on IdRedundantQoSflowIndicator with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdRedundantQoSflowIndicator) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdRedundantQoSflowIndicator with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdRedundantQoSflowIndicatorMultiError, or nil if none found.
func (m *IdRedundantQoSflowIndicator) ValidateAll() error {
	return m.validate(true)
}

func (m *IdRedundantQoSflowIndicator) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 213 {
		err := IdRedundantQoSflowIndicatorValidationError{
			field:  "Value",
			reason: "value must equal 213",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdRedundantQoSflowIndicatorMultiError(errors)
	}

	return nil
}

// IdRedundantQoSflowIndicatorMultiError is an error wrapping multiple
// validation errors returned by IdRedundantQoSflowIndicator.ValidateAll() if
// the designated constraints aren't met.
type IdRedundantQoSflowIndicatorMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdRedundantQoSflowIndicatorMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdRedundantQoSflowIndicatorMultiError) AllErrors() []error { return m }

// IdRedundantQoSflowIndicatorValidationError is the validation error returned
// by IdRedundantQoSflowIndicator.Validate if the designated constraints
// aren't met.
type IdRedundantQoSflowIndicatorValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdRedundantQoSflowIndicatorValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdRedundantQoSflowIndicatorValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdRedundantQoSflowIndicatorValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdRedundantQoSflowIndicatorValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdRedundantQoSflowIndicatorValidationError) ErrorName() string {
	return "IdRedundantQoSflowIndicatorValidationError"
}

// Error satisfies the builtin error interface
func (e IdRedundantQoSflowIndicatorValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdRedundantQoSflowIndicator.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdRedundantQoSflowIndicatorValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdRedundantQoSflowIndicatorValidationError{}

// Validate checks the field values on IdRedundantDLNGUTNlatNgRAn with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdRedundantDLNGUTNlatNgRAn) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdRedundantDLNGUTNlatNgRAn with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdRedundantDLNGUTNlatNgRAnMultiError, or nil if none found.
func (m *IdRedundantDLNGUTNlatNgRAn) ValidateAll() error {
	return m.validate(true)
}

func (m *IdRedundantDLNGUTNlatNgRAn) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 214 {
		err := IdRedundantDLNGUTNlatNgRAnValidationError{
			field:  "Value",
			reason: "value must equal 214",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdRedundantDLNGUTNlatNgRAnMultiError(errors)
	}

	return nil
}

// IdRedundantDLNGUTNlatNgRAnMultiError is an error wrapping multiple
// validation errors returned by IdRedundantDLNGUTNlatNgRAn.ValidateAll() if
// the designated constraints aren't met.
type IdRedundantDLNGUTNlatNgRAnMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdRedundantDLNGUTNlatNgRAnMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdRedundantDLNGUTNlatNgRAnMultiError) AllErrors() []error { return m }

// IdRedundantDLNGUTNlatNgRAnValidationError is the validation error returned
// by IdRedundantDLNGUTNlatNgRAn.Validate if the designated constraints aren't met.
type IdRedundantDLNGUTNlatNgRAnValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdRedundantDLNGUTNlatNgRAnValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdRedundantDLNGUTNlatNgRAnValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdRedundantDLNGUTNlatNgRAnValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdRedundantDLNGUTNlatNgRAnValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdRedundantDLNGUTNlatNgRAnValidationError) ErrorName() string {
	return "IdRedundantDLNGUTNlatNgRAnValidationError"
}

// Error satisfies the builtin error interface
func (e IdRedundantDLNGUTNlatNgRAnValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdRedundantDLNGUTNlatNgRAn.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdRedundantDLNGUTNlatNgRAnValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdRedundantDLNGUTNlatNgRAnValidationError{}

// Validate checks the field values on IdExtendedPacketDelayBudget with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdExtendedPacketDelayBudget) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdExtendedPacketDelayBudget with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdExtendedPacketDelayBudgetMultiError, or nil if none found.
func (m *IdExtendedPacketDelayBudget) ValidateAll() error {
	return m.validate(true)
}

func (m *IdExtendedPacketDelayBudget) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 215 {
		err := IdExtendedPacketDelayBudgetValidationError{
			field:  "Value",
			reason: "value must equal 215",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdExtendedPacketDelayBudgetMultiError(errors)
	}

	return nil
}

// IdExtendedPacketDelayBudgetMultiError is an error wrapping multiple
// validation errors returned by IdExtendedPacketDelayBudget.ValidateAll() if
// the designated constraints aren't met.
type IdExtendedPacketDelayBudgetMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdExtendedPacketDelayBudgetMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdExtendedPacketDelayBudgetMultiError) AllErrors() []error { return m }

// IdExtendedPacketDelayBudgetValidationError is the validation error returned
// by IdExtendedPacketDelayBudget.Validate if the designated constraints
// aren't met.
type IdExtendedPacketDelayBudgetValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdExtendedPacketDelayBudgetValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdExtendedPacketDelayBudgetValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdExtendedPacketDelayBudgetValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdExtendedPacketDelayBudgetValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdExtendedPacketDelayBudgetValidationError) ErrorName() string {
	return "IdExtendedPacketDelayBudgetValidationError"
}

// Error satisfies the builtin error interface
func (e IdExtendedPacketDelayBudgetValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdExtendedPacketDelayBudget.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdExtendedPacketDelayBudgetValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdExtendedPacketDelayBudgetValidationError{}

// Validate checks the field values on IdAdditionalPDcpDuplicationTNlList with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *IdAdditionalPDcpDuplicationTNlList) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdAdditionalPDcpDuplicationTNlList
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// IdAdditionalPDcpDuplicationTNlListMultiError, or nil if none found.
func (m *IdAdditionalPDcpDuplicationTNlList) ValidateAll() error {
	return m.validate(true)
}

func (m *IdAdditionalPDcpDuplicationTNlList) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 216 {
		err := IdAdditionalPDcpDuplicationTNlListValidationError{
			field:  "Value",
			reason: "value must equal 216",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdAdditionalPDcpDuplicationTNlListMultiError(errors)
	}

	return nil
}

// IdAdditionalPDcpDuplicationTNlListMultiError is an error wrapping multiple
// validation errors returned by
// IdAdditionalPDcpDuplicationTNlList.ValidateAll() if the designated
// constraints aren't met.
type IdAdditionalPDcpDuplicationTNlListMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdAdditionalPDcpDuplicationTNlListMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdAdditionalPDcpDuplicationTNlListMultiError) AllErrors() []error { return m }

// IdAdditionalPDcpDuplicationTNlListValidationError is the validation error
// returned by IdAdditionalPDcpDuplicationTNlList.Validate if the designated
// constraints aren't met.
type IdAdditionalPDcpDuplicationTNlListValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdAdditionalPDcpDuplicationTNlListValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdAdditionalPDcpDuplicationTNlListValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdAdditionalPDcpDuplicationTNlListValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdAdditionalPDcpDuplicationTNlListValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdAdditionalPDcpDuplicationTNlListValidationError) ErrorName() string {
	return "IdAdditionalPDcpDuplicationTNlListValidationError"
}

// Error satisfies the builtin error interface
func (e IdAdditionalPDcpDuplicationTNlListValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdAdditionalPDcpDuplicationTNlList.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdAdditionalPDcpDuplicationTNlListValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdAdditionalPDcpDuplicationTNlListValidationError{}

// Validate checks the field values on IdRedundantPdusessionInformation with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *IdRedundantPdusessionInformation) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdRedundantPdusessionInformation with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// IdRedundantPdusessionInformationMultiError, or nil if none found.
func (m *IdRedundantPdusessionInformation) ValidateAll() error {
	return m.validate(true)
}

func (m *IdRedundantPdusessionInformation) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 217 {
		err := IdRedundantPdusessionInformationValidationError{
			field:  "Value",
			reason: "value must equal 217",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdRedundantPdusessionInformationMultiError(errors)
	}

	return nil
}

// IdRedundantPdusessionInformationMultiError is an error wrapping multiple
// validation errors returned by
// IdRedundantPdusessionInformation.ValidateAll() if the designated
// constraints aren't met.
type IdRedundantPdusessionInformationMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdRedundantPdusessionInformationMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdRedundantPdusessionInformationMultiError) AllErrors() []error { return m }

// IdRedundantPdusessionInformationValidationError is the validation error
// returned by IdRedundantPdusessionInformation.Validate if the designated
// constraints aren't met.
type IdRedundantPdusessionInformationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdRedundantPdusessionInformationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdRedundantPdusessionInformationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdRedundantPdusessionInformationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdRedundantPdusessionInformationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdRedundantPdusessionInformationValidationError) ErrorName() string {
	return "IdRedundantPdusessionInformationValidationError"
}

// Error satisfies the builtin error interface
func (e IdRedundantPdusessionInformationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdRedundantPdusessionInformation.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdRedundantPdusessionInformationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdRedundantPdusessionInformationValidationError{}

// Validate checks the field values on IdUsedRsninformation with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdUsedRsninformation) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdUsedRsninformation with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdUsedRsninformationMultiError, or nil if none found.
func (m *IdUsedRsninformation) ValidateAll() error {
	return m.validate(true)
}

func (m *IdUsedRsninformation) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 218 {
		err := IdUsedRsninformationValidationError{
			field:  "Value",
			reason: "value must equal 218",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdUsedRsninformationMultiError(errors)
	}

	return nil
}

// IdUsedRsninformationMultiError is an error wrapping multiple validation
// errors returned by IdUsedRsninformation.ValidateAll() if the designated
// constraints aren't met.
type IdUsedRsninformationMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdUsedRsninformationMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdUsedRsninformationMultiError) AllErrors() []error { return m }

// IdUsedRsninformationValidationError is the validation error returned by
// IdUsedRsninformation.Validate if the designated constraints aren't met.
type IdUsedRsninformationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdUsedRsninformationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdUsedRsninformationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdUsedRsninformationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdUsedRsninformationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdUsedRsninformationValidationError) ErrorName() string {
	return "IdUsedRsninformationValidationError"
}

// Error satisfies the builtin error interface
func (e IdUsedRsninformationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdUsedRsninformation.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdUsedRsninformationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdUsedRsninformationValidationError{}

// Validate checks the field values on IdRLcduplicationInformation with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdRLcduplicationInformation) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdRLcduplicationInformation with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdRLcduplicationInformationMultiError, or nil if none found.
func (m *IdRLcduplicationInformation) ValidateAll() error {
	return m.validate(true)
}

func (m *IdRLcduplicationInformation) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 219 {
		err := IdRLcduplicationInformationValidationError{
			field:  "Value",
			reason: "value must equal 219",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdRLcduplicationInformationMultiError(errors)
	}

	return nil
}

// IdRLcduplicationInformationMultiError is an error wrapping multiple
// validation errors returned by IdRLcduplicationInformation.ValidateAll() if
// the designated constraints aren't met.
type IdRLcduplicationInformationMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdRLcduplicationInformationMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdRLcduplicationInformationMultiError) AllErrors() []error { return m }

// IdRLcduplicationInformationValidationError is the validation error returned
// by IdRLcduplicationInformation.Validate if the designated constraints
// aren't met.
type IdRLcduplicationInformationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdRLcduplicationInformationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdRLcduplicationInformationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdRLcduplicationInformationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdRLcduplicationInformationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdRLcduplicationInformationValidationError) ErrorName() string {
	return "IdRLcduplicationInformationValidationError"
}

// Error satisfies the builtin error interface
func (e IdRLcduplicationInformationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdRLcduplicationInformation.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdRLcduplicationInformationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdRLcduplicationInformationValidationError{}

// Validate checks the field values on IdNPnBroadcastInformation with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdNPnBroadcastInformation) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdNPnBroadcastInformation with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdNPnBroadcastInformationMultiError, or nil if none found.
func (m *IdNPnBroadcastInformation) ValidateAll() error {
	return m.validate(true)
}

func (m *IdNPnBroadcastInformation) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 220 {
		err := IdNPnBroadcastInformationValidationError{
			field:  "Value",
			reason: "value must equal 220",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdNPnBroadcastInformationMultiError(errors)
	}

	return nil
}

// IdNPnBroadcastInformationMultiError is an error wrapping multiple validation
// errors returned by IdNPnBroadcastInformation.ValidateAll() if the
// designated constraints aren't met.
type IdNPnBroadcastInformationMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdNPnBroadcastInformationMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdNPnBroadcastInformationMultiError) AllErrors() []error { return m }

// IdNPnBroadcastInformationValidationError is the validation error returned by
// IdNPnBroadcastInformation.Validate if the designated constraints aren't met.
type IdNPnBroadcastInformationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdNPnBroadcastInformationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdNPnBroadcastInformationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdNPnBroadcastInformationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdNPnBroadcastInformationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdNPnBroadcastInformationValidationError) ErrorName() string {
	return "IdNPnBroadcastInformationValidationError"
}

// Error satisfies the builtin error interface
func (e IdNPnBroadcastInformationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdNPnBroadcastInformation.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdNPnBroadcastInformationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdNPnBroadcastInformationValidationError{}

// Validate checks the field values on IdNPnpagingAssistanceInformation with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *IdNPnpagingAssistanceInformation) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdNPnpagingAssistanceInformation with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// IdNPnpagingAssistanceInformationMultiError, or nil if none found.
func (m *IdNPnpagingAssistanceInformation) ValidateAll() error {
	return m.validate(true)
}

func (m *IdNPnpagingAssistanceInformation) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 221 {
		err := IdNPnpagingAssistanceInformationValidationError{
			field:  "Value",
			reason: "value must equal 221",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdNPnpagingAssistanceInformationMultiError(errors)
	}

	return nil
}

// IdNPnpagingAssistanceInformationMultiError is an error wrapping multiple
// validation errors returned by
// IdNPnpagingAssistanceInformation.ValidateAll() if the designated
// constraints aren't met.
type IdNPnpagingAssistanceInformationMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdNPnpagingAssistanceInformationMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdNPnpagingAssistanceInformationMultiError) AllErrors() []error { return m }

// IdNPnpagingAssistanceInformationValidationError is the validation error
// returned by IdNPnpagingAssistanceInformation.Validate if the designated
// constraints aren't met.
type IdNPnpagingAssistanceInformationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdNPnpagingAssistanceInformationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdNPnpagingAssistanceInformationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdNPnpagingAssistanceInformationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdNPnpagingAssistanceInformationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdNPnpagingAssistanceInformationValidationError) ErrorName() string {
	return "IdNPnpagingAssistanceInformationValidationError"
}

// Error satisfies the builtin error interface
func (e IdNPnpagingAssistanceInformationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdNPnpagingAssistanceInformation.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdNPnpagingAssistanceInformationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdNPnpagingAssistanceInformationValidationError{}

// Validate checks the field values on IdNPnmobilityInformation with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdNPnmobilityInformation) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdNPnmobilityInformation with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdNPnmobilityInformationMultiError, or nil if none found.
func (m *IdNPnmobilityInformation) ValidateAll() error {
	return m.validate(true)
}

func (m *IdNPnmobilityInformation) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 222 {
		err := IdNPnmobilityInformationValidationError{
			field:  "Value",
			reason: "value must equal 222",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdNPnmobilityInformationMultiError(errors)
	}

	return nil
}

// IdNPnmobilityInformationMultiError is an error wrapping multiple validation
// errors returned by IdNPnmobilityInformation.ValidateAll() if the designated
// constraints aren't met.
type IdNPnmobilityInformationMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdNPnmobilityInformationMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdNPnmobilityInformationMultiError) AllErrors() []error { return m }

// IdNPnmobilityInformationValidationError is the validation error returned by
// IdNPnmobilityInformation.Validate if the designated constraints aren't met.
type IdNPnmobilityInformationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdNPnmobilityInformationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdNPnmobilityInformationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdNPnmobilityInformationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdNPnmobilityInformationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdNPnmobilityInformationValidationError) ErrorName() string {
	return "IdNPnmobilityInformationValidationError"
}

// Error satisfies the builtin error interface
func (e IdNPnmobilityInformationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdNPnmobilityInformation.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdNPnmobilityInformationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdNPnmobilityInformationValidationError{}

// Validate checks the field values on IdNPnSupport with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *IdNPnSupport) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdNPnSupport with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in IdNPnSupportMultiError, or
// nil if none found.
func (m *IdNPnSupport) ValidateAll() error {
	return m.validate(true)
}

func (m *IdNPnSupport) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 223 {
		err := IdNPnSupportValidationError{
			field:  "Value",
			reason: "value must equal 223",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdNPnSupportMultiError(errors)
	}

	return nil
}

// IdNPnSupportMultiError is an error wrapping multiple validation errors
// returned by IdNPnSupport.ValidateAll() if the designated constraints aren't met.
type IdNPnSupportMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdNPnSupportMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdNPnSupportMultiError) AllErrors() []error { return m }

// IdNPnSupportValidationError is the validation error returned by
// IdNPnSupport.Validate if the designated constraints aren't met.
type IdNPnSupportValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdNPnSupportValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdNPnSupportValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdNPnSupportValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdNPnSupportValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdNPnSupportValidationError) ErrorName() string { return "IdNPnSupportValidationError" }

// Error satisfies the builtin error interface
func (e IdNPnSupportValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdNPnSupport.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdNPnSupportValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdNPnSupportValidationError{}

// Validate checks the field values on IdMDtConfiguration with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdMDtConfiguration) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdMDtConfiguration with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdMDtConfigurationMultiError, or nil if none found.
func (m *IdMDtConfiguration) ValidateAll() error {
	return m.validate(true)
}

func (m *IdMDtConfiguration) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 224 {
		err := IdMDtConfigurationValidationError{
			field:  "Value",
			reason: "value must equal 224",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdMDtConfigurationMultiError(errors)
	}

	return nil
}

// IdMDtConfigurationMultiError is an error wrapping multiple validation errors
// returned by IdMDtConfiguration.ValidateAll() if the designated constraints
// aren't met.
type IdMDtConfigurationMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdMDtConfigurationMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdMDtConfigurationMultiError) AllErrors() []error { return m }

// IdMDtConfigurationValidationError is the validation error returned by
// IdMDtConfiguration.Validate if the designated constraints aren't met.
type IdMDtConfigurationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdMDtConfigurationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdMDtConfigurationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdMDtConfigurationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdMDtConfigurationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdMDtConfigurationValidationError) ErrorName() string {
	return "IdMDtConfigurationValidationError"
}

// Error satisfies the builtin error interface
func (e IdMDtConfigurationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdMDtConfiguration.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdMDtConfigurationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdMDtConfigurationValidationError{}

// Validate checks the field values on IdMDtplmnlist with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *IdMDtplmnlist) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdMDtplmnlist with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in IdMDtplmnlistMultiError, or
// nil if none found.
func (m *IdMDtplmnlist) ValidateAll() error {
	return m.validate(true)
}

func (m *IdMDtplmnlist) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 225 {
		err := IdMDtplmnlistValidationError{
			field:  "Value",
			reason: "value must equal 225",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdMDtplmnlistMultiError(errors)
	}

	return nil
}

// IdMDtplmnlistMultiError is an error wrapping multiple validation errors
// returned by IdMDtplmnlist.ValidateAll() if the designated constraints
// aren't met.
type IdMDtplmnlistMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdMDtplmnlistMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdMDtplmnlistMultiError) AllErrors() []error { return m }

// IdMDtplmnlistValidationError is the validation error returned by
// IdMDtplmnlist.Validate if the designated constraints aren't met.
type IdMDtplmnlistValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdMDtplmnlistValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdMDtplmnlistValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdMDtplmnlistValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdMDtplmnlistValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdMDtplmnlistValidationError) ErrorName() string { return "IdMDtplmnlistValidationError" }

// Error satisfies the builtin error interface
func (e IdMDtplmnlistValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdMDtplmnlist.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdMDtplmnlistValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdMDtplmnlistValidationError{}

// Validate checks the field values on IdTraceCollectionEntityUri with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdTraceCollectionEntityUri) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdTraceCollectionEntityUri with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdTraceCollectionEntityUriMultiError, or nil if none found.
func (m *IdTraceCollectionEntityUri) ValidateAll() error {
	return m.validate(true)
}

func (m *IdTraceCollectionEntityUri) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 226 {
		err := IdTraceCollectionEntityUriValidationError{
			field:  "Value",
			reason: "value must equal 226",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdTraceCollectionEntityUriMultiError(errors)
	}

	return nil
}

// IdTraceCollectionEntityUriMultiError is an error wrapping multiple
// validation errors returned by IdTraceCollectionEntityUri.ValidateAll() if
// the designated constraints aren't met.
type IdTraceCollectionEntityUriMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdTraceCollectionEntityUriMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdTraceCollectionEntityUriMultiError) AllErrors() []error { return m }

// IdTraceCollectionEntityUriValidationError is the validation error returned
// by IdTraceCollectionEntityUri.Validate if the designated constraints aren't met.
type IdTraceCollectionEntityUriValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdTraceCollectionEntityUriValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdTraceCollectionEntityUriValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdTraceCollectionEntityUriValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdTraceCollectionEntityUriValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdTraceCollectionEntityUriValidationError) ErrorName() string {
	return "IdTraceCollectionEntityUriValidationError"
}

// Error satisfies the builtin error interface
func (e IdTraceCollectionEntityUriValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdTraceCollectionEntityUri.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdTraceCollectionEntityUriValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdTraceCollectionEntityUriValidationError{}

// Validate checks the field values on IdUEradioCapabilityId with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdUEradioCapabilityId) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdUEradioCapabilityId with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdUEradioCapabilityIdMultiError, or nil if none found.
func (m *IdUEradioCapabilityId) ValidateAll() error {
	return m.validate(true)
}

func (m *IdUEradioCapabilityId) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 227 {
		err := IdUEradioCapabilityIdValidationError{
			field:  "Value",
			reason: "value must equal 227",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdUEradioCapabilityIdMultiError(errors)
	}

	return nil
}

// IdUEradioCapabilityIdMultiError is an error wrapping multiple validation
// errors returned by IdUEradioCapabilityId.ValidateAll() if the designated
// constraints aren't met.
type IdUEradioCapabilityIdMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdUEradioCapabilityIdMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdUEradioCapabilityIdMultiError) AllErrors() []error { return m }

// IdUEradioCapabilityIdValidationError is the validation error returned by
// IdUEradioCapabilityId.Validate if the designated constraints aren't met.
type IdUEradioCapabilityIdValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdUEradioCapabilityIdValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdUEradioCapabilityIdValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdUEradioCapabilityIdValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdUEradioCapabilityIdValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdUEradioCapabilityIdValidationError) ErrorName() string {
	return "IdUEradioCapabilityIdValidationError"
}

// Error satisfies the builtin error interface
func (e IdUEradioCapabilityIdValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdUEradioCapabilityId.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdUEradioCapabilityIdValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdUEradioCapabilityIdValidationError{}

// Validate checks the field values on IdCSiRStransmissionIndication with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdCSiRStransmissionIndication) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdCSiRStransmissionIndication with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// IdCSiRStransmissionIndicationMultiError, or nil if none found.
func (m *IdCSiRStransmissionIndication) ValidateAll() error {
	return m.validate(true)
}

func (m *IdCSiRStransmissionIndication) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 228 {
		err := IdCSiRStransmissionIndicationValidationError{
			field:  "Value",
			reason: "value must equal 228",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdCSiRStransmissionIndicationMultiError(errors)
	}

	return nil
}

// IdCSiRStransmissionIndicationMultiError is an error wrapping multiple
// validation errors returned by IdCSiRStransmissionIndication.ValidateAll()
// if the designated constraints aren't met.
type IdCSiRStransmissionIndicationMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdCSiRStransmissionIndicationMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdCSiRStransmissionIndicationMultiError) AllErrors() []error { return m }

// IdCSiRStransmissionIndicationValidationError is the validation error
// returned by IdCSiRStransmissionIndication.Validate if the designated
// constraints aren't met.
type IdCSiRStransmissionIndicationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdCSiRStransmissionIndicationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdCSiRStransmissionIndicationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdCSiRStransmissionIndicationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdCSiRStransmissionIndicationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdCSiRStransmissionIndicationValidationError) ErrorName() string {
	return "IdCSiRStransmissionIndicationValidationError"
}

// Error satisfies the builtin error interface
func (e IdCSiRStransmissionIndicationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdCSiRStransmissionIndication.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdCSiRStransmissionIndicationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdCSiRStransmissionIndicationValidationError{}

// Validate checks the field values on IdSNtriggered with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *IdSNtriggered) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdSNtriggered with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in IdSNtriggeredMultiError, or
// nil if none found.
func (m *IdSNtriggered) ValidateAll() error {
	return m.validate(true)
}

func (m *IdSNtriggered) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 229 {
		err := IdSNtriggeredValidationError{
			field:  "Value",
			reason: "value must equal 229",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdSNtriggeredMultiError(errors)
	}

	return nil
}

// IdSNtriggeredMultiError is an error wrapping multiple validation errors
// returned by IdSNtriggered.ValidateAll() if the designated constraints
// aren't met.
type IdSNtriggeredMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdSNtriggeredMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdSNtriggeredMultiError) AllErrors() []error { return m }

// IdSNtriggeredValidationError is the validation error returned by
// IdSNtriggered.Validate if the designated constraints aren't met.
type IdSNtriggeredValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdSNtriggeredValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdSNtriggeredValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdSNtriggeredValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdSNtriggeredValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdSNtriggeredValidationError) ErrorName() string { return "IdSNtriggeredValidationError" }

// Error satisfies the builtin error interface
func (e IdSNtriggeredValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdSNtriggered.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdSNtriggeredValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdSNtriggeredValidationError{}

// Validate checks the field values on IdDLcarrierList with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *IdDLcarrierList) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdDLcarrierList with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdDLcarrierListMultiError, or nil if none found.
func (m *IdDLcarrierList) ValidateAll() error {
	return m.validate(true)
}

func (m *IdDLcarrierList) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 230 {
		err := IdDLcarrierListValidationError{
			field:  "Value",
			reason: "value must equal 230",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdDLcarrierListMultiError(errors)
	}

	return nil
}

// IdDLcarrierListMultiError is an error wrapping multiple validation errors
// returned by IdDLcarrierList.ValidateAll() if the designated constraints
// aren't met.
type IdDLcarrierListMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdDLcarrierListMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdDLcarrierListMultiError) AllErrors() []error { return m }

// IdDLcarrierListValidationError is the validation error returned by
// IdDLcarrierList.Validate if the designated constraints aren't met.
type IdDLcarrierListValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdDLcarrierListValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdDLcarrierListValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdDLcarrierListValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdDLcarrierListValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdDLcarrierListValidationError) ErrorName() string { return "IdDLcarrierListValidationError" }

// Error satisfies the builtin error interface
func (e IdDLcarrierListValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdDLcarrierList.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdDLcarrierListValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdDLcarrierListValidationError{}

// Validate checks the field values on IdExtendedTaisliceSupportList with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdExtendedTaisliceSupportList) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdExtendedTaisliceSupportList with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// IdExtendedTaisliceSupportListMultiError, or nil if none found.
func (m *IdExtendedTaisliceSupportList) ValidateAll() error {
	return m.validate(true)
}

func (m *IdExtendedTaisliceSupportList) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 231 {
		err := IdExtendedTaisliceSupportListValidationError{
			field:  "Value",
			reason: "value must equal 231",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdExtendedTaisliceSupportListMultiError(errors)
	}

	return nil
}

// IdExtendedTaisliceSupportListMultiError is an error wrapping multiple
// validation errors returned by IdExtendedTaisliceSupportList.ValidateAll()
// if the designated constraints aren't met.
type IdExtendedTaisliceSupportListMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdExtendedTaisliceSupportListMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdExtendedTaisliceSupportListMultiError) AllErrors() []error { return m }

// IdExtendedTaisliceSupportListValidationError is the validation error
// returned by IdExtendedTaisliceSupportList.Validate if the designated
// constraints aren't met.
type IdExtendedTaisliceSupportListValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdExtendedTaisliceSupportListValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdExtendedTaisliceSupportListValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdExtendedTaisliceSupportListValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdExtendedTaisliceSupportListValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdExtendedTaisliceSupportListValidationError) ErrorName() string {
	return "IdExtendedTaisliceSupportListValidationError"
}

// Error satisfies the builtin error interface
func (e IdExtendedTaisliceSupportListValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdExtendedTaisliceSupportList.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdExtendedTaisliceSupportListValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdExtendedTaisliceSupportListValidationError{}

// Validate checks the field values on IdcellAssistanceInfoEUtra with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdcellAssistanceInfoEUtra) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdcellAssistanceInfoEUtra with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdcellAssistanceInfoEUtraMultiError, or nil if none found.
func (m *IdcellAssistanceInfoEUtra) ValidateAll() error {
	return m.validate(true)
}

func (m *IdcellAssistanceInfoEUtra) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 232 {
		err := IdcellAssistanceInfoEUtraValidationError{
			field:  "Value",
			reason: "value must equal 232",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdcellAssistanceInfoEUtraMultiError(errors)
	}

	return nil
}

// IdcellAssistanceInfoEUtraMultiError is an error wrapping multiple validation
// errors returned by IdcellAssistanceInfoEUtra.ValidateAll() if the
// designated constraints aren't met.
type IdcellAssistanceInfoEUtraMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdcellAssistanceInfoEUtraMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdcellAssistanceInfoEUtraMultiError) AllErrors() []error { return m }

// IdcellAssistanceInfoEUtraValidationError is the validation error returned by
// IdcellAssistanceInfoEUtra.Validate if the designated constraints aren't met.
type IdcellAssistanceInfoEUtraValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdcellAssistanceInfoEUtraValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdcellAssistanceInfoEUtraValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdcellAssistanceInfoEUtraValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdcellAssistanceInfoEUtraValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdcellAssistanceInfoEUtraValidationError) ErrorName() string {
	return "IdcellAssistanceInfoEUtraValidationError"
}

// Error satisfies the builtin error interface
func (e IdcellAssistanceInfoEUtraValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdcellAssistanceInfoEUtra.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdcellAssistanceInfoEUtraValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdcellAssistanceInfoEUtraValidationError{}

// Validate checks the field values on IdConfiguredTacindication with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdConfiguredTacindication) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdConfiguredTacindication with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdConfiguredTacindicationMultiError, or nil if none found.
func (m *IdConfiguredTacindication) ValidateAll() error {
	return m.validate(true)
}

func (m *IdConfiguredTacindication) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 233 {
		err := IdConfiguredTacindicationValidationError{
			field:  "Value",
			reason: "value must equal 233",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdConfiguredTacindicationMultiError(errors)
	}

	return nil
}

// IdConfiguredTacindicationMultiError is an error wrapping multiple validation
// errors returned by IdConfiguredTacindication.ValidateAll() if the
// designated constraints aren't met.
type IdConfiguredTacindicationMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdConfiguredTacindicationMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdConfiguredTacindicationMultiError) AllErrors() []error { return m }

// IdConfiguredTacindicationValidationError is the validation error returned by
// IdConfiguredTacindication.Validate if the designated constraints aren't met.
type IdConfiguredTacindicationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdConfiguredTacindicationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdConfiguredTacindicationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdConfiguredTacindicationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdConfiguredTacindicationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdConfiguredTacindicationValidationError) ErrorName() string {
	return "IdConfiguredTacindicationValidationError"
}

// Error satisfies the builtin error interface
func (e IdConfiguredTacindicationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdConfiguredTacindication.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdConfiguredTacindicationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdConfiguredTacindicationValidationError{}

// Validate checks the field values on IdsecondarySNULPDcpUPTNlinfo with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdsecondarySNULPDcpUPTNlinfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdsecondarySNULPDcpUPTNlinfo with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdsecondarySNULPDcpUPTNlinfoMultiError, or nil if none found.
func (m *IdsecondarySNULPDcpUPTNlinfo) ValidateAll() error {
	return m.validate(true)
}

func (m *IdsecondarySNULPDcpUPTNlinfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 234 {
		err := IdsecondarySNULPDcpUPTNlinfoValidationError{
			field:  "Value",
			reason: "value must equal 234",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdsecondarySNULPDcpUPTNlinfoMultiError(errors)
	}

	return nil
}

// IdsecondarySNULPDcpUPTNlinfoMultiError is an error wrapping multiple
// validation errors returned by IdsecondarySNULPDcpUPTNlinfo.ValidateAll() if
// the designated constraints aren't met.
type IdsecondarySNULPDcpUPTNlinfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdsecondarySNULPDcpUPTNlinfoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdsecondarySNULPDcpUPTNlinfoMultiError) AllErrors() []error { return m }

// IdsecondarySNULPDcpUPTNlinfoValidationError is the validation error returned
// by IdsecondarySNULPDcpUPTNlinfo.Validate if the designated constraints
// aren't met.
type IdsecondarySNULPDcpUPTNlinfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdsecondarySNULPDcpUPTNlinfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdsecondarySNULPDcpUPTNlinfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdsecondarySNULPDcpUPTNlinfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdsecondarySNULPDcpUPTNlinfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdsecondarySNULPDcpUPTNlinfoValidationError) ErrorName() string {
	return "IdsecondarySNULPDcpUPTNlinfoValidationError"
}

// Error satisfies the builtin error interface
func (e IdsecondarySNULPDcpUPTNlinfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdsecondarySNULPDcpUPTNlinfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdsecondarySNULPDcpUPTNlinfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdsecondarySNULPDcpUPTNlinfoValidationError{}

// Validate checks the field values on IdpdcpDuplicationConfiguration with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdpdcpDuplicationConfiguration) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdpdcpDuplicationConfiguration with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// IdpdcpDuplicationConfigurationMultiError, or nil if none found.
func (m *IdpdcpDuplicationConfiguration) ValidateAll() error {
	return m.validate(true)
}

func (m *IdpdcpDuplicationConfiguration) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 235 {
		err := IdpdcpDuplicationConfigurationValidationError{
			field:  "Value",
			reason: "value must equal 235",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdpdcpDuplicationConfigurationMultiError(errors)
	}

	return nil
}

// IdpdcpDuplicationConfigurationMultiError is an error wrapping multiple
// validation errors returned by IdpdcpDuplicationConfiguration.ValidateAll()
// if the designated constraints aren't met.
type IdpdcpDuplicationConfigurationMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdpdcpDuplicationConfigurationMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdpdcpDuplicationConfigurationMultiError) AllErrors() []error { return m }

// IdpdcpDuplicationConfigurationValidationError is the validation error
// returned by IdpdcpDuplicationConfiguration.Validate if the designated
// constraints aren't met.
type IdpdcpDuplicationConfigurationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdpdcpDuplicationConfigurationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdpdcpDuplicationConfigurationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdpdcpDuplicationConfigurationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdpdcpDuplicationConfigurationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdpdcpDuplicationConfigurationValidationError) ErrorName() string {
	return "IdpdcpDuplicationConfigurationValidationError"
}

// Error satisfies the builtin error interface
func (e IdpdcpDuplicationConfigurationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdpdcpDuplicationConfiguration.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdpdcpDuplicationConfigurationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdpdcpDuplicationConfigurationValidationError{}

// Validate checks the field values on IdduplicationActivation with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdduplicationActivation) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdduplicationActivation with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdduplicationActivationMultiError, or nil if none found.
func (m *IdduplicationActivation) ValidateAll() error {
	return m.validate(true)
}

func (m *IdduplicationActivation) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 236 {
		err := IdduplicationActivationValidationError{
			field:  "Value",
			reason: "value must equal 236",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdduplicationActivationMultiError(errors)
	}

	return nil
}

// IdduplicationActivationMultiError is an error wrapping multiple validation
// errors returned by IdduplicationActivation.ValidateAll() if the designated
// constraints aren't met.
type IdduplicationActivationMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdduplicationActivationMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdduplicationActivationMultiError) AllErrors() []error { return m }

// IdduplicationActivationValidationError is the validation error returned by
// IdduplicationActivation.Validate if the designated constraints aren't met.
type IdduplicationActivationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdduplicationActivationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdduplicationActivationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdduplicationActivationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdduplicationActivationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdduplicationActivationValidationError) ErrorName() string {
	return "IdduplicationActivationValidationError"
}

// Error satisfies the builtin error interface
func (e IdduplicationActivationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdduplicationActivation.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdduplicationActivationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdduplicationActivationValidationError{}

// Validate checks the field values on IdNPrachconfiguration with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdNPrachconfiguration) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdNPrachconfiguration with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdNPrachconfigurationMultiError, or nil if none found.
func (m *IdNPrachconfiguration) ValidateAll() error {
	return m.validate(true)
}

func (m *IdNPrachconfiguration) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 237 {
		err := IdNPrachconfigurationValidationError{
			field:  "Value",
			reason: "value must equal 237",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdNPrachconfigurationMultiError(errors)
	}

	return nil
}

// IdNPrachconfigurationMultiError is an error wrapping multiple validation
// errors returned by IdNPrachconfiguration.ValidateAll() if the designated
// constraints aren't met.
type IdNPrachconfigurationMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdNPrachconfigurationMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdNPrachconfigurationMultiError) AllErrors() []error { return m }

// IdNPrachconfigurationValidationError is the validation error returned by
// IdNPrachconfiguration.Validate if the designated constraints aren't met.
type IdNPrachconfigurationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdNPrachconfigurationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdNPrachconfigurationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdNPrachconfigurationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdNPrachconfigurationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdNPrachconfigurationValidationError) ErrorName() string {
	return "IdNPrachconfigurationValidationError"
}

// Error satisfies the builtin error interface
func (e IdNPrachconfigurationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdNPrachconfiguration.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdNPrachconfigurationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdNPrachconfigurationValidationError{}

// Validate checks the field values on IdQosMonitoringReportingFrequency with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *IdQosMonitoringReportingFrequency) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdQosMonitoringReportingFrequency
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// IdQosMonitoringReportingFrequencyMultiError, or nil if none found.
func (m *IdQosMonitoringReportingFrequency) ValidateAll() error {
	return m.validate(true)
}

func (m *IdQosMonitoringReportingFrequency) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 238 {
		err := IdQosMonitoringReportingFrequencyValidationError{
			field:  "Value",
			reason: "value must equal 238",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdQosMonitoringReportingFrequencyMultiError(errors)
	}

	return nil
}

// IdQosMonitoringReportingFrequencyMultiError is an error wrapping multiple
// validation errors returned by
// IdQosMonitoringReportingFrequency.ValidateAll() if the designated
// constraints aren't met.
type IdQosMonitoringReportingFrequencyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdQosMonitoringReportingFrequencyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdQosMonitoringReportingFrequencyMultiError) AllErrors() []error { return m }

// IdQosMonitoringReportingFrequencyValidationError is the validation error
// returned by IdQosMonitoringReportingFrequency.Validate if the designated
// constraints aren't met.
type IdQosMonitoringReportingFrequencyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdQosMonitoringReportingFrequencyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdQosMonitoringReportingFrequencyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdQosMonitoringReportingFrequencyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdQosMonitoringReportingFrequencyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdQosMonitoringReportingFrequencyValidationError) ErrorName() string {
	return "IdQosMonitoringReportingFrequencyValidationError"
}

// Error satisfies the builtin error interface
func (e IdQosMonitoringReportingFrequencyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdQosMonitoringReportingFrequency.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdQosMonitoringReportingFrequencyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdQosMonitoringReportingFrequencyValidationError{}

// Validate checks the field values on
// IdQoSflowsMappedtoDrbSetupResponseMNterminated with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *IdQoSflowsMappedtoDrbSetupResponseMNterminated) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// IdQoSflowsMappedtoDrbSetupResponseMNterminated with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in
// IdQoSflowsMappedtoDrbSetupResponseMNterminatedMultiError, or nil if none found.
func (m *IdQoSflowsMappedtoDrbSetupResponseMNterminated) ValidateAll() error {
	return m.validate(true)
}

func (m *IdQoSflowsMappedtoDrbSetupResponseMNterminated) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 239 {
		err := IdQoSflowsMappedtoDrbSetupResponseMNterminatedValidationError{
			field:  "Value",
			reason: "value must equal 239",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdQoSflowsMappedtoDrbSetupResponseMNterminatedMultiError(errors)
	}

	return nil
}

// IdQoSflowsMappedtoDrbSetupResponseMNterminatedMultiError is an error
// wrapping multiple validation errors returned by
// IdQoSflowsMappedtoDrbSetupResponseMNterminated.ValidateAll() if the
// designated constraints aren't met.
type IdQoSflowsMappedtoDrbSetupResponseMNterminatedMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdQoSflowsMappedtoDrbSetupResponseMNterminatedMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdQoSflowsMappedtoDrbSetupResponseMNterminatedMultiError) AllErrors() []error { return m }

// IdQoSflowsMappedtoDrbSetupResponseMNterminatedValidationError is the
// validation error returned by
// IdQoSflowsMappedtoDrbSetupResponseMNterminated.Validate if the designated
// constraints aren't met.
type IdQoSflowsMappedtoDrbSetupResponseMNterminatedValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdQoSflowsMappedtoDrbSetupResponseMNterminatedValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdQoSflowsMappedtoDrbSetupResponseMNterminatedValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e IdQoSflowsMappedtoDrbSetupResponseMNterminatedValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdQoSflowsMappedtoDrbSetupResponseMNterminatedValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdQoSflowsMappedtoDrbSetupResponseMNterminatedValidationError) ErrorName() string {
	return "IdQoSflowsMappedtoDrbSetupResponseMNterminatedValidationError"
}

// Error satisfies the builtin error interface
func (e IdQoSflowsMappedtoDrbSetupResponseMNterminatedValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdQoSflowsMappedtoDrbSetupResponseMNterminated.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdQoSflowsMappedtoDrbSetupResponseMNterminatedValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdQoSflowsMappedtoDrbSetupResponseMNterminatedValidationError{}

// Validate checks the field values on IdDLschedulingPDcchCCeusage with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdDLschedulingPDcchCCeusage) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdDLschedulingPDcchCCeusage with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdDLschedulingPDcchCCeusageMultiError, or nil if none found.
func (m *IdDLschedulingPDcchCCeusage) ValidateAll() error {
	return m.validate(true)
}

func (m *IdDLschedulingPDcchCCeusage) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 240 {
		err := IdDLschedulingPDcchCCeusageValidationError{
			field:  "Value",
			reason: "value must equal 240",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdDLschedulingPDcchCCeusageMultiError(errors)
	}

	return nil
}

// IdDLschedulingPDcchCCeusageMultiError is an error wrapping multiple
// validation errors returned by IdDLschedulingPDcchCCeusage.ValidateAll() if
// the designated constraints aren't met.
type IdDLschedulingPDcchCCeusageMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdDLschedulingPDcchCCeusageMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdDLschedulingPDcchCCeusageMultiError) AllErrors() []error { return m }

// IdDLschedulingPDcchCCeusageValidationError is the validation error returned
// by IdDLschedulingPDcchCCeusage.Validate if the designated constraints
// aren't met.
type IdDLschedulingPDcchCCeusageValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdDLschedulingPDcchCCeusageValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdDLschedulingPDcchCCeusageValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdDLschedulingPDcchCCeusageValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdDLschedulingPDcchCCeusageValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdDLschedulingPDcchCCeusageValidationError) ErrorName() string {
	return "IdDLschedulingPDcchCCeusageValidationError"
}

// Error satisfies the builtin error interface
func (e IdDLschedulingPDcchCCeusageValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdDLschedulingPDcchCCeusage.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdDLschedulingPDcchCCeusageValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdDLschedulingPDcchCCeusageValidationError{}

// Validate checks the field values on IdULschedulingPDcchCCeusage with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdULschedulingPDcchCCeusage) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdULschedulingPDcchCCeusage with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdULschedulingPDcchCCeusageMultiError, or nil if none found.
func (m *IdULschedulingPDcchCCeusage) ValidateAll() error {
	return m.validate(true)
}

func (m *IdULschedulingPDcchCCeusage) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 241 {
		err := IdULschedulingPDcchCCeusageValidationError{
			field:  "Value",
			reason: "value must equal 241",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdULschedulingPDcchCCeusageMultiError(errors)
	}

	return nil
}

// IdULschedulingPDcchCCeusageMultiError is an error wrapping multiple
// validation errors returned by IdULschedulingPDcchCCeusage.ValidateAll() if
// the designated constraints aren't met.
type IdULschedulingPDcchCCeusageMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdULschedulingPDcchCCeusageMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdULschedulingPDcchCCeusageMultiError) AllErrors() []error { return m }

// IdULschedulingPDcchCCeusageValidationError is the validation error returned
// by IdULschedulingPDcchCCeusage.Validate if the designated constraints
// aren't met.
type IdULschedulingPDcchCCeusageValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdULschedulingPDcchCCeusageValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdULschedulingPDcchCCeusageValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdULschedulingPDcchCCeusageValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdULschedulingPDcchCCeusageValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdULschedulingPDcchCCeusageValidationError) ErrorName() string {
	return "IdULschedulingPDcchCCeusageValidationError"
}

// Error satisfies the builtin error interface
func (e IdULschedulingPDcchCCeusageValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdULschedulingPDcchCCeusage.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdULschedulingPDcchCCeusageValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdULschedulingPDcchCCeusageValidationError{}

// Validate checks the field values on IdSFnOffset with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *IdSFnOffset) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdSFnOffset with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in IdSFnOffsetMultiError, or
// nil if none found.
func (m *IdSFnOffset) ValidateAll() error {
	return m.validate(true)
}

func (m *IdSFnOffset) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 242 {
		err := IdSFnOffsetValidationError{
			field:  "Value",
			reason: "value must equal 242",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdSFnOffsetMultiError(errors)
	}

	return nil
}

// IdSFnOffsetMultiError is an error wrapping multiple validation errors
// returned by IdSFnOffset.ValidateAll() if the designated constraints aren't met.
type IdSFnOffsetMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdSFnOffsetMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdSFnOffsetMultiError) AllErrors() []error { return m }

// IdSFnOffsetValidationError is the validation error returned by
// IdSFnOffset.Validate if the designated constraints aren't met.
type IdSFnOffsetValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdSFnOffsetValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdSFnOffsetValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdSFnOffsetValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdSFnOffsetValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdSFnOffsetValidationError) ErrorName() string { return "IdSFnOffsetValidationError" }

// Error satisfies the builtin error interface
func (e IdSFnOffsetValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdSFnOffset.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdSFnOffsetValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdSFnOffsetValidationError{}

// Validate checks the field values on IdQoSmonitoringDisabled with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdQoSmonitoringDisabled) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdQoSmonitoringDisabled with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdQoSmonitoringDisabledMultiError, or nil if none found.
func (m *IdQoSmonitoringDisabled) ValidateAll() error {
	return m.validate(true)
}

func (m *IdQoSmonitoringDisabled) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 243 {
		err := IdQoSmonitoringDisabledValidationError{
			field:  "Value",
			reason: "value must equal 243",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdQoSmonitoringDisabledMultiError(errors)
	}

	return nil
}

// IdQoSmonitoringDisabledMultiError is an error wrapping multiple validation
// errors returned by IdQoSmonitoringDisabled.ValidateAll() if the designated
// constraints aren't met.
type IdQoSmonitoringDisabledMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdQoSmonitoringDisabledMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdQoSmonitoringDisabledMultiError) AllErrors() []error { return m }

// IdQoSmonitoringDisabledValidationError is the validation error returned by
// IdQoSmonitoringDisabled.Validate if the designated constraints aren't met.
type IdQoSmonitoringDisabledValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdQoSmonitoringDisabledValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdQoSmonitoringDisabledValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdQoSmonitoringDisabledValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdQoSmonitoringDisabledValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdQoSmonitoringDisabledValidationError) ErrorName() string {
	return "IdQoSmonitoringDisabledValidationError"
}

// Error satisfies the builtin error interface
func (e IdQoSmonitoringDisabledValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdQoSmonitoringDisabled.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdQoSmonitoringDisabledValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdQoSmonitoringDisabledValidationError{}

// Validate checks the field values on IdExtendedUeidentityIndexValue with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdExtendedUeidentityIndexValue) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdExtendedUeidentityIndexValue with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// IdExtendedUeidentityIndexValueMultiError, or nil if none found.
func (m *IdExtendedUeidentityIndexValue) ValidateAll() error {
	return m.validate(true)
}

func (m *IdExtendedUeidentityIndexValue) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 244 {
		err := IdExtendedUeidentityIndexValueValidationError{
			field:  "Value",
			reason: "value must equal 244",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdExtendedUeidentityIndexValueMultiError(errors)
	}

	return nil
}

// IdExtendedUeidentityIndexValueMultiError is an error wrapping multiple
// validation errors returned by IdExtendedUeidentityIndexValue.ValidateAll()
// if the designated constraints aren't met.
type IdExtendedUeidentityIndexValueMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdExtendedUeidentityIndexValueMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdExtendedUeidentityIndexValueMultiError) AllErrors() []error { return m }

// IdExtendedUeidentityIndexValueValidationError is the validation error
// returned by IdExtendedUeidentityIndexValue.Validate if the designated
// constraints aren't met.
type IdExtendedUeidentityIndexValueValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdExtendedUeidentityIndexValueValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdExtendedUeidentityIndexValueValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdExtendedUeidentityIndexValueValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdExtendedUeidentityIndexValueValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdExtendedUeidentityIndexValueValidationError) ErrorName() string {
	return "IdExtendedUeidentityIndexValueValidationError"
}

// Error satisfies the builtin error interface
func (e IdExtendedUeidentityIndexValueValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdExtendedUeidentityIndexValue.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdExtendedUeidentityIndexValueValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdExtendedUeidentityIndexValueValidationError{}

// Validate checks the field values on IdPagingeDrxinformation with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdPagingeDrxinformation) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdPagingeDrxinformation with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdPagingeDrxinformationMultiError, or nil if none found.
func (m *IdPagingeDrxinformation) ValidateAll() error {
	return m.validate(true)
}

func (m *IdPagingeDrxinformation) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 245 {
		err := IdPagingeDrxinformationValidationError{
			field:  "Value",
			reason: "value must equal 245",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdPagingeDrxinformationMultiError(errors)
	}

	return nil
}

// IdPagingeDrxinformationMultiError is an error wrapping multiple validation
// errors returned by IdPagingeDrxinformation.ValidateAll() if the designated
// constraints aren't met.
type IdPagingeDrxinformationMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdPagingeDrxinformationMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdPagingeDrxinformationMultiError) AllErrors() []error { return m }

// IdPagingeDrxinformationValidationError is the validation error returned by
// IdPagingeDrxinformation.Validate if the designated constraints aren't met.
type IdPagingeDrxinformationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdPagingeDrxinformationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdPagingeDrxinformationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdPagingeDrxinformationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdPagingeDrxinformationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdPagingeDrxinformationValidationError) ErrorName() string {
	return "IdPagingeDrxinformationValidationError"
}

// Error satisfies the builtin error interface
func (e IdPagingeDrxinformationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdPagingeDrxinformation.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdPagingeDrxinformationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdPagingeDrxinformationValidationError{}

// Validate checks the field values on IdCHoMRdcEarlyDataForwarding with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdCHoMRdcEarlyDataForwarding) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdCHoMRdcEarlyDataForwarding with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdCHoMRdcEarlyDataForwardingMultiError, or nil if none found.
func (m *IdCHoMRdcEarlyDataForwarding) ValidateAll() error {
	return m.validate(true)
}

func (m *IdCHoMRdcEarlyDataForwarding) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 246 {
		err := IdCHoMRdcEarlyDataForwardingValidationError{
			field:  "Value",
			reason: "value must equal 246",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdCHoMRdcEarlyDataForwardingMultiError(errors)
	}

	return nil
}

// IdCHoMRdcEarlyDataForwardingMultiError is an error wrapping multiple
// validation errors returned by IdCHoMRdcEarlyDataForwarding.ValidateAll() if
// the designated constraints aren't met.
type IdCHoMRdcEarlyDataForwardingMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdCHoMRdcEarlyDataForwardingMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdCHoMRdcEarlyDataForwardingMultiError) AllErrors() []error { return m }

// IdCHoMRdcEarlyDataForwardingValidationError is the validation error returned
// by IdCHoMRdcEarlyDataForwarding.Validate if the designated constraints
// aren't met.
type IdCHoMRdcEarlyDataForwardingValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdCHoMRdcEarlyDataForwardingValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdCHoMRdcEarlyDataForwardingValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdCHoMRdcEarlyDataForwardingValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdCHoMRdcEarlyDataForwardingValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdCHoMRdcEarlyDataForwardingValidationError) ErrorName() string {
	return "IdCHoMRdcEarlyDataForwardingValidationError"
}

// Error satisfies the builtin error interface
func (e IdCHoMRdcEarlyDataForwardingValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdCHoMRdcEarlyDataForwarding.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdCHoMRdcEarlyDataForwardingValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdCHoMRdcEarlyDataForwardingValidationError{}

// Validate checks the field values on IdSCgindicator with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *IdSCgindicator) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdSCgindicator with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in IdSCgindicatorMultiError,
// or nil if none found.
func (m *IdSCgindicator) ValidateAll() error {
	return m.validate(true)
}

func (m *IdSCgindicator) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 247 {
		err := IdSCgindicatorValidationError{
			field:  "Value",
			reason: "value must equal 247",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdSCgindicatorMultiError(errors)
	}

	return nil
}

// IdSCgindicatorMultiError is an error wrapping multiple validation errors
// returned by IdSCgindicator.ValidateAll() if the designated constraints
// aren't met.
type IdSCgindicatorMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdSCgindicatorMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdSCgindicatorMultiError) AllErrors() []error { return m }

// IdSCgindicatorValidationError is the validation error returned by
// IdSCgindicator.Validate if the designated constraints aren't met.
type IdSCgindicatorValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdSCgindicatorValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdSCgindicatorValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdSCgindicatorValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdSCgindicatorValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdSCgindicatorValidationError) ErrorName() string { return "IdSCgindicatorValidationError" }

// Error satisfies the builtin error interface
func (e IdSCgindicatorValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdSCgindicator.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdSCgindicatorValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdSCgindicatorValidationError{}

// Validate checks the field values on IdUEspecificDrx with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *IdUEspecificDrx) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdUEspecificDrx with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdUEspecificDrxMultiError, or nil if none found.
func (m *IdUEspecificDrx) ValidateAll() error {
	return m.validate(true)
}

func (m *IdUEspecificDrx) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 248 {
		err := IdUEspecificDrxValidationError{
			field:  "Value",
			reason: "value must equal 248",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdUEspecificDrxMultiError(errors)
	}

	return nil
}

// IdUEspecificDrxMultiError is an error wrapping multiple validation errors
// returned by IdUEspecificDrx.ValidateAll() if the designated constraints
// aren't met.
type IdUEspecificDrxMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdUEspecificDrxMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdUEspecificDrxMultiError) AllErrors() []error { return m }

// IdUEspecificDrxValidationError is the validation error returned by
// IdUEspecificDrx.Validate if the designated constraints aren't met.
type IdUEspecificDrxValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdUEspecificDrxValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdUEspecificDrxValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdUEspecificDrxValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdUEspecificDrxValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdUEspecificDrxValidationError) ErrorName() string { return "IdUEspecificDrxValidationError" }

// Error satisfies the builtin error interface
func (e IdUEspecificDrxValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdUEspecificDrx.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdUEspecificDrxValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdUEspecificDrxValidationError{}

// Validate checks the field values on IdPDusessionExpectedUeactivityBehaviour
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *IdPDusessionExpectedUeactivityBehaviour) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// IdPDusessionExpectedUeactivityBehaviour with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// IdPDusessionExpectedUeactivityBehaviourMultiError, or nil if none found.
func (m *IdPDusessionExpectedUeactivityBehaviour) ValidateAll() error {
	return m.validate(true)
}

func (m *IdPDusessionExpectedUeactivityBehaviour) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 249 {
		err := IdPDusessionExpectedUeactivityBehaviourValidationError{
			field:  "Value",
			reason: "value must equal 249",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdPDusessionExpectedUeactivityBehaviourMultiError(errors)
	}

	return nil
}

// IdPDusessionExpectedUeactivityBehaviourMultiError is an error wrapping
// multiple validation errors returned by
// IdPDusessionExpectedUeactivityBehaviour.ValidateAll() if the designated
// constraints aren't met.
type IdPDusessionExpectedUeactivityBehaviourMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdPDusessionExpectedUeactivityBehaviourMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdPDusessionExpectedUeactivityBehaviourMultiError) AllErrors() []error { return m }

// IdPDusessionExpectedUeactivityBehaviourValidationError is the validation
// error returned by IdPDusessionExpectedUeactivityBehaviour.Validate if the
// designated constraints aren't met.
type IdPDusessionExpectedUeactivityBehaviourValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdPDusessionExpectedUeactivityBehaviourValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdPDusessionExpectedUeactivityBehaviourValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdPDusessionExpectedUeactivityBehaviourValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdPDusessionExpectedUeactivityBehaviourValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdPDusessionExpectedUeactivityBehaviourValidationError) ErrorName() string {
	return "IdPDusessionExpectedUeactivityBehaviourValidationError"
}

// Error satisfies the builtin error interface
func (e IdPDusessionExpectedUeactivityBehaviourValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdPDusessionExpectedUeactivityBehaviour.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdPDusessionExpectedUeactivityBehaviourValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdPDusessionExpectedUeactivityBehaviourValidationError{}

// Validate checks the field values on IdQoSMappingInformation with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdQoSMappingInformation) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdQoSMappingInformation with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdQoSMappingInformationMultiError, or nil if none found.
func (m *IdQoSMappingInformation) ValidateAll() error {
	return m.validate(true)
}

func (m *IdQoSMappingInformation) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 250 {
		err := IdQoSMappingInformationValidationError{
			field:  "Value",
			reason: "value must equal 250",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdQoSMappingInformationMultiError(errors)
	}

	return nil
}

// IdQoSMappingInformationMultiError is an error wrapping multiple validation
// errors returned by IdQoSMappingInformation.ValidateAll() if the designated
// constraints aren't met.
type IdQoSMappingInformationMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdQoSMappingInformationMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdQoSMappingInformationMultiError) AllErrors() []error { return m }

// IdQoSMappingInformationValidationError is the validation error returned by
// IdQoSMappingInformation.Validate if the designated constraints aren't met.
type IdQoSMappingInformationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdQoSMappingInformationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdQoSMappingInformationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdQoSMappingInformationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdQoSMappingInformationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdQoSMappingInformationValidationError) ErrorName() string {
	return "IdQoSMappingInformationValidationError"
}

// Error satisfies the builtin error interface
func (e IdQoSMappingInformationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdQoSMappingInformation.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdQoSMappingInformationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdQoSMappingInformationValidationError{}

// Validate checks the field values on IdAdditionLocationInformation with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdAdditionLocationInformation) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdAdditionLocationInformation with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// IdAdditionLocationInformationMultiError, or nil if none found.
func (m *IdAdditionLocationInformation) ValidateAll() error {
	return m.validate(true)
}

func (m *IdAdditionLocationInformation) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 251 {
		err := IdAdditionLocationInformationValidationError{
			field:  "Value",
			reason: "value must equal 251",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdAdditionLocationInformationMultiError(errors)
	}

	return nil
}

// IdAdditionLocationInformationMultiError is an error wrapping multiple
// validation errors returned by IdAdditionLocationInformation.ValidateAll()
// if the designated constraints aren't met.
type IdAdditionLocationInformationMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdAdditionLocationInformationMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdAdditionLocationInformationMultiError) AllErrors() []error { return m }

// IdAdditionLocationInformationValidationError is the validation error
// returned by IdAdditionLocationInformation.Validate if the designated
// constraints aren't met.
type IdAdditionLocationInformationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdAdditionLocationInformationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdAdditionLocationInformationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdAdditionLocationInformationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdAdditionLocationInformationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdAdditionLocationInformationValidationError) ErrorName() string {
	return "IdAdditionLocationInformationValidationError"
}

// Error satisfies the builtin error interface
func (e IdAdditionLocationInformationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdAdditionLocationInformation.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdAdditionLocationInformationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdAdditionLocationInformationValidationError{}

// Validate checks the field values on IddataForwardingInfoFromTargetEUTrannode
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *IddataForwardingInfoFromTargetEUTrannode) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// IddataForwardingInfoFromTargetEUTrannode with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// IddataForwardingInfoFromTargetEUTrannodeMultiError, or nil if none found.
func (m *IddataForwardingInfoFromTargetEUTrannode) ValidateAll() error {
	return m.validate(true)
}

func (m *IddataForwardingInfoFromTargetEUTrannode) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 252 {
		err := IddataForwardingInfoFromTargetEUTrannodeValidationError{
			field:  "Value",
			reason: "value must equal 252",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IddataForwardingInfoFromTargetEUTrannodeMultiError(errors)
	}

	return nil
}

// IddataForwardingInfoFromTargetEUTrannodeMultiError is an error wrapping
// multiple validation errors returned by
// IddataForwardingInfoFromTargetEUTrannode.ValidateAll() if the designated
// constraints aren't met.
type IddataForwardingInfoFromTargetEUTrannodeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IddataForwardingInfoFromTargetEUTrannodeMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IddataForwardingInfoFromTargetEUTrannodeMultiError) AllErrors() []error { return m }

// IddataForwardingInfoFromTargetEUTrannodeValidationError is the validation
// error returned by IddataForwardingInfoFromTargetEUTrannode.Validate if the
// designated constraints aren't met.
type IddataForwardingInfoFromTargetEUTrannodeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IddataForwardingInfoFromTargetEUTrannodeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IddataForwardingInfoFromTargetEUTrannodeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IddataForwardingInfoFromTargetEUTrannodeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IddataForwardingInfoFromTargetEUTrannodeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IddataForwardingInfoFromTargetEUTrannodeValidationError) ErrorName() string {
	return "IddataForwardingInfoFromTargetEUTrannodeValidationError"
}

// Error satisfies the builtin error interface
func (e IddataForwardingInfoFromTargetEUTrannodeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIddataForwardingInfoFromTargetEUTrannode.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IddataForwardingInfoFromTargetEUTrannodeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IddataForwardingInfoFromTargetEUTrannodeValidationError{}

// Validate checks the field values on IdDirectForwardingPathAvailability with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *IdDirectForwardingPathAvailability) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdDirectForwardingPathAvailability
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// IdDirectForwardingPathAvailabilityMultiError, or nil if none found.
func (m *IdDirectForwardingPathAvailability) ValidateAll() error {
	return m.validate(true)
}

func (m *IdDirectForwardingPathAvailability) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 253 {
		err := IdDirectForwardingPathAvailabilityValidationError{
			field:  "Value",
			reason: "value must equal 253",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdDirectForwardingPathAvailabilityMultiError(errors)
	}

	return nil
}

// IdDirectForwardingPathAvailabilityMultiError is an error wrapping multiple
// validation errors returned by
// IdDirectForwardingPathAvailability.ValidateAll() if the designated
// constraints aren't met.
type IdDirectForwardingPathAvailabilityMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdDirectForwardingPathAvailabilityMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdDirectForwardingPathAvailabilityMultiError) AllErrors() []error { return m }

// IdDirectForwardingPathAvailabilityValidationError is the validation error
// returned by IdDirectForwardingPathAvailability.Validate if the designated
// constraints aren't met.
type IdDirectForwardingPathAvailabilityValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdDirectForwardingPathAvailabilityValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdDirectForwardingPathAvailabilityValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdDirectForwardingPathAvailabilityValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdDirectForwardingPathAvailabilityValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdDirectForwardingPathAvailabilityValidationError) ErrorName() string {
	return "IdDirectForwardingPathAvailabilityValidationError"
}

// Error satisfies the builtin error interface
func (e IdDirectForwardingPathAvailabilityValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdDirectForwardingPathAvailability.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdDirectForwardingPathAvailabilityValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdDirectForwardingPathAvailabilityValidationError{}

// Validate checks the field values on IdSourceNgRAnnodeID with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdSourceNgRAnnodeID) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdSourceNgRAnnodeID with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdSourceNgRAnnodeIDMultiError, or nil if none found.
func (m *IdSourceNgRAnnodeID) ValidateAll() error {
	return m.validate(true)
}

func (m *IdSourceNgRAnnodeID) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 254 {
		err := IdSourceNgRAnnodeIDValidationError{
			field:  "Value",
			reason: "value must equal 254",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdSourceNgRAnnodeIDMultiError(errors)
	}

	return nil
}

// IdSourceNgRAnnodeIDMultiError is an error wrapping multiple validation
// errors returned by IdSourceNgRAnnodeID.ValidateAll() if the designated
// constraints aren't met.
type IdSourceNgRAnnodeIDMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdSourceNgRAnnodeIDMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdSourceNgRAnnodeIDMultiError) AllErrors() []error { return m }

// IdSourceNgRAnnodeIDValidationError is the validation error returned by
// IdSourceNgRAnnodeID.Validate if the designated constraints aren't met.
type IdSourceNgRAnnodeIDValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdSourceNgRAnnodeIDValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdSourceNgRAnnodeIDValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdSourceNgRAnnodeIDValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdSourceNgRAnnodeIDValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdSourceNgRAnnodeIDValidationError) ErrorName() string {
	return "IdSourceNgRAnnodeIDValidationError"
}

// Error satisfies the builtin error interface
func (e IdSourceNgRAnnodeIDValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdSourceNgRAnnodeID.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdSourceNgRAnnodeIDValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdSourceNgRAnnodeIDValidationError{}

// Validate checks the field values on IdSourceDlforwardingIpaddress with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdSourceDlforwardingIpaddress) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdSourceDlforwardingIpaddress with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// IdSourceDlforwardingIpaddressMultiError, or nil if none found.
func (m *IdSourceDlforwardingIpaddress) ValidateAll() error {
	return m.validate(true)
}

func (m *IdSourceDlforwardingIpaddress) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 255 {
		err := IdSourceDlforwardingIpaddressValidationError{
			field:  "Value",
			reason: "value must equal 255",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdSourceDlforwardingIpaddressMultiError(errors)
	}

	return nil
}

// IdSourceDlforwardingIpaddressMultiError is an error wrapping multiple
// validation errors returned by IdSourceDlforwardingIpaddress.ValidateAll()
// if the designated constraints aren't met.
type IdSourceDlforwardingIpaddressMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdSourceDlforwardingIpaddressMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdSourceDlforwardingIpaddressMultiError) AllErrors() []error { return m }

// IdSourceDlforwardingIpaddressValidationError is the validation error
// returned by IdSourceDlforwardingIpaddress.Validate if the designated
// constraints aren't met.
type IdSourceDlforwardingIpaddressValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdSourceDlforwardingIpaddressValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdSourceDlforwardingIpaddressValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdSourceDlforwardingIpaddressValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdSourceDlforwardingIpaddressValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdSourceDlforwardingIpaddressValidationError) ErrorName() string {
	return "IdSourceDlforwardingIpaddressValidationError"
}

// Error satisfies the builtin error interface
func (e IdSourceDlforwardingIpaddressValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdSourceDlforwardingIpaddress.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdSourceDlforwardingIpaddressValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdSourceDlforwardingIpaddressValidationError{}

// Validate checks the field values on IdSourceNodeDlforwardingIpaddress with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *IdSourceNodeDlforwardingIpaddress) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdSourceNodeDlforwardingIpaddress
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// IdSourceNodeDlforwardingIpaddressMultiError, or nil if none found.
func (m *IdSourceNodeDlforwardingIpaddress) ValidateAll() error {
	return m.validate(true)
}

func (m *IdSourceNodeDlforwardingIpaddress) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 256 {
		err := IdSourceNodeDlforwardingIpaddressValidationError{
			field:  "Value",
			reason: "value must equal 256",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdSourceNodeDlforwardingIpaddressMultiError(errors)
	}

	return nil
}

// IdSourceNodeDlforwardingIpaddressMultiError is an error wrapping multiple
// validation errors returned by
// IdSourceNodeDlforwardingIpaddress.ValidateAll() if the designated
// constraints aren't met.
type IdSourceNodeDlforwardingIpaddressMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdSourceNodeDlforwardingIpaddressMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdSourceNodeDlforwardingIpaddressMultiError) AllErrors() []error { return m }

// IdSourceNodeDlforwardingIpaddressValidationError is the validation error
// returned by IdSourceNodeDlforwardingIpaddress.Validate if the designated
// constraints aren't met.
type IdSourceNodeDlforwardingIpaddressValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdSourceNodeDlforwardingIpaddressValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdSourceNodeDlforwardingIpaddressValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdSourceNodeDlforwardingIpaddressValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdSourceNodeDlforwardingIpaddressValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdSourceNodeDlforwardingIpaddressValidationError) ErrorName() string {
	return "IdSourceNodeDlforwardingIpaddressValidationError"
}

// Error satisfies the builtin error interface
func (e IdSourceNodeDlforwardingIpaddressValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdSourceNodeDlforwardingIpaddress.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdSourceNodeDlforwardingIpaddressValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdSourceNodeDlforwardingIpaddressValidationError{}

// Validate checks the field values on IdExtendedReportIntervalMdt with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdExtendedReportIntervalMdt) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdExtendedReportIntervalMdt with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdExtendedReportIntervalMdtMultiError, or nil if none found.
func (m *IdExtendedReportIntervalMdt) ValidateAll() error {
	return m.validate(true)
}

func (m *IdExtendedReportIntervalMdt) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 257 {
		err := IdExtendedReportIntervalMdtValidationError{
			field:  "Value",
			reason: "value must equal 257",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdExtendedReportIntervalMdtMultiError(errors)
	}

	return nil
}

// IdExtendedReportIntervalMdtMultiError is an error wrapping multiple
// validation errors returned by IdExtendedReportIntervalMdt.ValidateAll() if
// the designated constraints aren't met.
type IdExtendedReportIntervalMdtMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdExtendedReportIntervalMdtMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdExtendedReportIntervalMdtMultiError) AllErrors() []error { return m }

// IdExtendedReportIntervalMdtValidationError is the validation error returned
// by IdExtendedReportIntervalMdt.Validate if the designated constraints
// aren't met.
type IdExtendedReportIntervalMdtValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdExtendedReportIntervalMdtValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdExtendedReportIntervalMdtValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdExtendedReportIntervalMdtValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdExtendedReportIntervalMdtValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdExtendedReportIntervalMdtValidationError) ErrorName() string {
	return "IdExtendedReportIntervalMdtValidationError"
}

// Error satisfies the builtin error interface
func (e IdExtendedReportIntervalMdtValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdExtendedReportIntervalMdt.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdExtendedReportIntervalMdtValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdExtendedReportIntervalMdtValidationError{}

// Validate checks the field values on IdSecurityIndication with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdSecurityIndication) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdSecurityIndication with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdSecurityIndicationMultiError, or nil if none found.
func (m *IdSecurityIndication) ValidateAll() error {
	return m.validate(true)
}

func (m *IdSecurityIndication) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 258 {
		err := IdSecurityIndicationValidationError{
			field:  "Value",
			reason: "value must equal 258",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdSecurityIndicationMultiError(errors)
	}

	return nil
}

// IdSecurityIndicationMultiError is an error wrapping multiple validation
// errors returned by IdSecurityIndication.ValidateAll() if the designated
// constraints aren't met.
type IdSecurityIndicationMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdSecurityIndicationMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdSecurityIndicationMultiError) AllErrors() []error { return m }

// IdSecurityIndicationValidationError is the validation error returned by
// IdSecurityIndication.Validate if the designated constraints aren't met.
type IdSecurityIndicationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdSecurityIndicationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdSecurityIndicationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdSecurityIndicationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdSecurityIndicationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdSecurityIndicationValidationError) ErrorName() string {
	return "IdSecurityIndicationValidationError"
}

// Error satisfies the builtin error interface
func (e IdSecurityIndicationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdSecurityIndication.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdSecurityIndicationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdSecurityIndicationValidationError{}

// Validate checks the field values on IdRRcconnReestabIndicator with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdRRcconnReestabIndicator) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdRRcconnReestabIndicator with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdRRcconnReestabIndicatorMultiError, or nil if none found.
func (m *IdRRcconnReestabIndicator) ValidateAll() error {
	return m.validate(true)
}

func (m *IdRRcconnReestabIndicator) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 259 {
		err := IdRRcconnReestabIndicatorValidationError{
			field:  "Value",
			reason: "value must equal 259",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdRRcconnReestabIndicatorMultiError(errors)
	}

	return nil
}

// IdRRcconnReestabIndicatorMultiError is an error wrapping multiple validation
// errors returned by IdRRcconnReestabIndicator.ValidateAll() if the
// designated constraints aren't met.
type IdRRcconnReestabIndicatorMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdRRcconnReestabIndicatorMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdRRcconnReestabIndicatorMultiError) AllErrors() []error { return m }

// IdRRcconnReestabIndicatorValidationError is the validation error returned by
// IdRRcconnReestabIndicator.Validate if the designated constraints aren't met.
type IdRRcconnReestabIndicatorValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdRRcconnReestabIndicatorValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdRRcconnReestabIndicatorValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdRRcconnReestabIndicatorValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdRRcconnReestabIndicatorValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdRRcconnReestabIndicatorValidationError) ErrorName() string {
	return "IdRRcconnReestabIndicatorValidationError"
}

// Error satisfies the builtin error interface
func (e IdRRcconnReestabIndicatorValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdRRcconnReestabIndicator.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdRRcconnReestabIndicatorValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdRRcconnReestabIndicatorValidationError{}

// Validate checks the field values on IdTargetNodeId with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *IdTargetNodeId) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdTargetNodeId with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in IdTargetNodeIdMultiError,
// or nil if none found.
func (m *IdTargetNodeId) ValidateAll() error {
	return m.validate(true)
}

func (m *IdTargetNodeId) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 260 {
		err := IdTargetNodeIdValidationError{
			field:  "Value",
			reason: "value must equal 260",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdTargetNodeIdMultiError(errors)
	}

	return nil
}

// IdTargetNodeIdMultiError is an error wrapping multiple validation errors
// returned by IdTargetNodeId.ValidateAll() if the designated constraints
// aren't met.
type IdTargetNodeIdMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdTargetNodeIdMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdTargetNodeIdMultiError) AllErrors() []error { return m }

// IdTargetNodeIdValidationError is the validation error returned by
// IdTargetNodeId.Validate if the designated constraints aren't met.
type IdTargetNodeIdValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdTargetNodeIdValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdTargetNodeIdValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdTargetNodeIdValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdTargetNodeIdValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdTargetNodeIdValidationError) ErrorName() string { return "IdTargetNodeIdValidationError" }

// Error satisfies the builtin error interface
func (e IdTargetNodeIdValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdTargetNodeId.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdTargetNodeIdValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdTargetNodeIdValidationError{}
