/*
SPDX-FileCopyrightText: 2020-present Open Networking Foundation <info@opennetworking.org>

SPDX-License-Identifier: LicenseRef-ONF-Member-1.0
*/

syntax = "proto3";

// Package xapp defines the interior gRPC interfaces for xApps to interact with E2T.
package xapp.v1;

import "google/protobuf/duration.proto";
import "github.com/onosproject/onos-e2t/api/e2ap_v01_00_00_asn/v1/e2ap_pdu_contents.proto";
import "github.com/onosproject/onos-e2t/api/headers/v1/headers.proto";

message RegisterAppRequest {
    headers.v1.RequestHeader header = 1;
    // Request encoding format (ASN.1 or Protobuf)
    // Add subscriptions
    // Remove subscriptions
    // Send control/insert/policy/query messages to specific device
}

// SubscribeRequest a subscription or subscription delete request
message SubscribeRequest {
    headers.v1.RequestHeader header = 1;
    oneof req {
        // Subscription Request
        e2ap_v01_00_00_asn.v1.RicsubscriptionRequest sub_req = 2;
        // Subscription Delete Request
        e2ap_v01_00_00_asn.v1.RicsubscriptionDeleteRequest del_req = 3;
    }

}

// SubscribeResponse
message SubscribeResponse {
    headers.v1.ResponseHeader header = 1;
    oneof resp {
        // Subscription response
        e2ap_v01_00_00_asn.v1.RicsubscriptionResponse sub_resp = 2;
        // Subscription failure response
        e2ap_v01_00_00_asn.v1.RicsubscriptionFailure sub_failure_resp = 3;

        // Subscription delete response
        e2ap_v01_00_00_asn.v1.RicsubscriptionDeleteResponse sub_del_resp = 4;

        // Subscription delete failure response
        e2ap_v01_00_00_asn.v1.RicsubscriptionDeleteFailure sub_del_failure_resp = 5;

        // Ric Indication message
        e2ap_v01_00_00_asn.v1.Ricindication indication = 6;

        // response as an array of bytes (e.g. ASN.1 format)
        bytes payload = 7;

    }
}



message RegisterAppResponse {
    headers.v1.RequestHeader header = 1;
    // ID of E2 node that sent the message
    string e2node = 2;
    // Service model ID
    string service_model = 3;

    // Message data (encoded as ASN.1 or Protobuf)
    bytes payload = 4;
}

// E2TService provides means for enhanced interactions with the ONOS RIC E2 Termination service.
service E2TService {
    // List of registered/available SMs

    // Subscribe sends a subscription and subscription delete request and
    // receives a subscription or subscription delete response
    rpc Subscribe(SubscribeRequest) returns (stream SubscribeResponse);
    // RegisterApp establishes a bi-directional stream for conducting interactions with the E2 nodes in the RAN environment.
    rpc RegisterApp (stream RegisterAppRequest) returns (stream RegisterAppResponse);
}
