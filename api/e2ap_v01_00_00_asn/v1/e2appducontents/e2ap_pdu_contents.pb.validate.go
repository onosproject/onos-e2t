// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/e2ap_v01_00_00_asn/v1/e2ap_pdu_contents.proto

package e2appducontents

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/golang/protobuf/ptypes"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = ptypes.DynamicAny{}
)

// define the regex for a UUID once up-front
var _e_2_ap_pdu_contents_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on RicsubscriptionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RicsubscriptionRequest) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetProtocolIes()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RicsubscriptionRequestValidationError{
				field:  "ProtocolIes",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// RicsubscriptionRequestValidationError is the validation error returned by
// RicsubscriptionRequest.Validate if the designated constraints aren't met.
type RicsubscriptionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RicsubscriptionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RicsubscriptionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RicsubscriptionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RicsubscriptionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RicsubscriptionRequestValidationError) ErrorName() string {
	return "RicsubscriptionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RicsubscriptionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRicsubscriptionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RicsubscriptionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RicsubscriptionRequestValidationError{}

// Validate checks the field values on RicsubscriptionRequestIes with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RicsubscriptionRequestIes) Validate() error {
	if m == nil {
		return nil
	}

	switch m.RicsubscriptionRequestIes.(type) {

	case *RicsubscriptionRequestIes_Instance001:

		if v, ok := interface{}(m.GetInstance001()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RicsubscriptionRequestIesValidationError{
					field:  "Instance001",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *RicsubscriptionRequestIes_Instance002:

		if v, ok := interface{}(m.GetInstance002()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RicsubscriptionRequestIesValidationError{
					field:  "Instance002",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *RicsubscriptionRequestIes_Instance003:

		if v, ok := interface{}(m.GetInstance003()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RicsubscriptionRequestIesValidationError{
					field:  "Instance003",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// RicsubscriptionRequestIesValidationError is the validation error returned by
// RicsubscriptionRequestIes.Validate if the designated constraints aren't met.
type RicsubscriptionRequestIesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RicsubscriptionRequestIesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RicsubscriptionRequestIesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RicsubscriptionRequestIesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RicsubscriptionRequestIesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RicsubscriptionRequestIesValidationError) ErrorName() string {
	return "RicsubscriptionRequestIesValidationError"
}

// Error satisfies the builtin error interface
func (e RicsubscriptionRequestIesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRicsubscriptionRequestIes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RicsubscriptionRequestIesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RicsubscriptionRequestIesValidationError{}

// Validate checks the field values on RicsubscriptionDetails with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RicsubscriptionDetails) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for RicEventTriggerDefinition

	if v, ok := interface{}(m.GetRicActionToBeSetupList()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RicsubscriptionDetailsValidationError{
				field:  "RicActionToBeSetupList",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// RicsubscriptionDetailsValidationError is the validation error returned by
// RicsubscriptionDetails.Validate if the designated constraints aren't met.
type RicsubscriptionDetailsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RicsubscriptionDetailsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RicsubscriptionDetailsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RicsubscriptionDetailsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RicsubscriptionDetailsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RicsubscriptionDetailsValidationError) ErrorName() string {
	return "RicsubscriptionDetailsValidationError"
}

// Error satisfies the builtin error interface
func (e RicsubscriptionDetailsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRicsubscriptionDetails.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RicsubscriptionDetailsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RicsubscriptionDetailsValidationError{}

// Validate checks the field values on RicactionsToBeSetupList with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RicactionsToBeSetupList) Validate() error {
	if m == nil {
		return nil
	}

	if len(m.GetValue()) > 16 {
		return RicactionsToBeSetupListValidationError{
			field:  "Value",
			reason: "value must contain no more than 16 item(s)",
		}
	}

	for idx, item := range m.GetValue() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RicactionsToBeSetupListValidationError{
					field:  fmt.Sprintf("Value[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// RicactionsToBeSetupListValidationError is the validation error returned by
// RicactionsToBeSetupList.Validate if the designated constraints aren't met.
type RicactionsToBeSetupListValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RicactionsToBeSetupListValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RicactionsToBeSetupListValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RicactionsToBeSetupListValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RicactionsToBeSetupListValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RicactionsToBeSetupListValidationError) ErrorName() string {
	return "RicactionsToBeSetupListValidationError"
}

// Error satisfies the builtin error interface
func (e RicactionsToBeSetupListValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRicactionsToBeSetupList.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RicactionsToBeSetupListValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RicactionsToBeSetupListValidationError{}

// Validate checks the field values on RicactionToBeSetupItemIes with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RicactionToBeSetupItemIes) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetValue()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RicactionToBeSetupItemIesValidationError{
				field:  "Value",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// RicactionToBeSetupItemIesValidationError is the validation error returned by
// RicactionToBeSetupItemIes.Validate if the designated constraints aren't met.
type RicactionToBeSetupItemIesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RicactionToBeSetupItemIesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RicactionToBeSetupItemIesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RicactionToBeSetupItemIesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RicactionToBeSetupItemIesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RicactionToBeSetupItemIesValidationError) ErrorName() string {
	return "RicactionToBeSetupItemIesValidationError"
}

// Error satisfies the builtin error interface
func (e RicactionToBeSetupItemIesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRicactionToBeSetupItemIes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RicactionToBeSetupItemIesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RicactionToBeSetupItemIesValidationError{}

// Validate checks the field values on RicactionToBeSetupItem with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RicactionToBeSetupItem) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetRicActionId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RicactionToBeSetupItemValidationError{
				field:  "RicActionId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for RicActionType

	// no validation rules for RicActionDefinition

	if v, ok := interface{}(m.GetRicSubsequentAction()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RicactionToBeSetupItemValidationError{
				field:  "RicSubsequentAction",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// RicactionToBeSetupItemValidationError is the validation error returned by
// RicactionToBeSetupItem.Validate if the designated constraints aren't met.
type RicactionToBeSetupItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RicactionToBeSetupItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RicactionToBeSetupItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RicactionToBeSetupItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RicactionToBeSetupItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RicactionToBeSetupItemValidationError) ErrorName() string {
	return "RicactionToBeSetupItemValidationError"
}

// Error satisfies the builtin error interface
func (e RicactionToBeSetupItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRicactionToBeSetupItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RicactionToBeSetupItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RicactionToBeSetupItemValidationError{}

// Validate checks the field values on RicsubscriptionResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RicsubscriptionResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetProtocolIes()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RicsubscriptionResponseValidationError{
				field:  "ProtocolIes",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// RicsubscriptionResponseValidationError is the validation error returned by
// RicsubscriptionResponse.Validate if the designated constraints aren't met.
type RicsubscriptionResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RicsubscriptionResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RicsubscriptionResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RicsubscriptionResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RicsubscriptionResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RicsubscriptionResponseValidationError) ErrorName() string {
	return "RicsubscriptionResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RicsubscriptionResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRicsubscriptionResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RicsubscriptionResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RicsubscriptionResponseValidationError{}

// Validate checks the field values on RicsubscriptionResponseIes with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RicsubscriptionResponseIes) Validate() error {
	if m == nil {
		return nil
	}

	switch m.RicsubscriptionResponseIes.(type) {

	case *RicsubscriptionResponseIes_Instance001:

		if v, ok := interface{}(m.GetInstance001()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RicsubscriptionResponseIesValidationError{
					field:  "Instance001",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *RicsubscriptionResponseIes_Instance002:

		if v, ok := interface{}(m.GetInstance002()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RicsubscriptionResponseIesValidationError{
					field:  "Instance002",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *RicsubscriptionResponseIes_Instance003:

		if v, ok := interface{}(m.GetInstance003()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RicsubscriptionResponseIesValidationError{
					field:  "Instance003",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *RicsubscriptionResponseIes_Instance004:

		if v, ok := interface{}(m.GetInstance004()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RicsubscriptionResponseIesValidationError{
					field:  "Instance004",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// RicsubscriptionResponseIesValidationError is the validation error returned
// by RicsubscriptionResponseIes.Validate if the designated constraints aren't met.
type RicsubscriptionResponseIesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RicsubscriptionResponseIesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RicsubscriptionResponseIesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RicsubscriptionResponseIesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RicsubscriptionResponseIesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RicsubscriptionResponseIesValidationError) ErrorName() string {
	return "RicsubscriptionResponseIesValidationError"
}

// Error satisfies the builtin error interface
func (e RicsubscriptionResponseIesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRicsubscriptionResponseIes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RicsubscriptionResponseIesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RicsubscriptionResponseIesValidationError{}

// Validate checks the field values on RicactionAdmittedList with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RicactionAdmittedList) Validate() error {
	if m == nil {
		return nil
	}

	if len(m.GetValue()) > 16 {
		return RicactionAdmittedListValidationError{
			field:  "Value",
			reason: "value must contain no more than 16 item(s)",
		}
	}

	for idx, item := range m.GetValue() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RicactionAdmittedListValidationError{
					field:  fmt.Sprintf("Value[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// RicactionAdmittedListValidationError is the validation error returned by
// RicactionAdmittedList.Validate if the designated constraints aren't met.
type RicactionAdmittedListValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RicactionAdmittedListValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RicactionAdmittedListValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RicactionAdmittedListValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RicactionAdmittedListValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RicactionAdmittedListValidationError) ErrorName() string {
	return "RicactionAdmittedListValidationError"
}

// Error satisfies the builtin error interface
func (e RicactionAdmittedListValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRicactionAdmittedList.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RicactionAdmittedListValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RicactionAdmittedListValidationError{}

// Validate checks the field values on RicactionAdmittedItemIes with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RicactionAdmittedItemIes) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RicactionAdmittedItemIesValidationError{
				field:  "Id",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetCriticality()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RicactionAdmittedItemIesValidationError{
				field:  "Criticality",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetType()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RicactionAdmittedItemIesValidationError{
				field:  "Type",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetPresence()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RicactionAdmittedItemIesValidationError{
				field:  "Presence",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// RicactionAdmittedItemIesValidationError is the validation error returned by
// RicactionAdmittedItemIes.Validate if the designated constraints aren't met.
type RicactionAdmittedItemIesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RicactionAdmittedItemIesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RicactionAdmittedItemIesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RicactionAdmittedItemIesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RicactionAdmittedItemIesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RicactionAdmittedItemIesValidationError) ErrorName() string {
	return "RicactionAdmittedItemIesValidationError"
}

// Error satisfies the builtin error interface
func (e RicactionAdmittedItemIesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRicactionAdmittedItemIes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RicactionAdmittedItemIesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RicactionAdmittedItemIesValidationError{}

// Validate checks the field values on RicactionAdmittedItem with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RicactionAdmittedItem) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetRicActionId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RicactionAdmittedItemValidationError{
				field:  "RicActionId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// RicactionAdmittedItemValidationError is the validation error returned by
// RicactionAdmittedItem.Validate if the designated constraints aren't met.
type RicactionAdmittedItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RicactionAdmittedItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RicactionAdmittedItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RicactionAdmittedItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RicactionAdmittedItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RicactionAdmittedItemValidationError) ErrorName() string {
	return "RicactionAdmittedItemValidationError"
}

// Error satisfies the builtin error interface
func (e RicactionAdmittedItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRicactionAdmittedItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RicactionAdmittedItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RicactionAdmittedItemValidationError{}

// Validate checks the field values on RicactionNotAdmittedList with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RicactionNotAdmittedList) Validate() error {
	if m == nil {
		return nil
	}

	if len(m.GetValue()) > 16 {
		return RicactionNotAdmittedListValidationError{
			field:  "Value",
			reason: "value must contain no more than 16 item(s)",
		}
	}

	for idx, item := range m.GetValue() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RicactionNotAdmittedListValidationError{
					field:  fmt.Sprintf("Value[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// RicactionNotAdmittedListValidationError is the validation error returned by
// RicactionNotAdmittedList.Validate if the designated constraints aren't met.
type RicactionNotAdmittedListValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RicactionNotAdmittedListValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RicactionNotAdmittedListValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RicactionNotAdmittedListValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RicactionNotAdmittedListValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RicactionNotAdmittedListValidationError) ErrorName() string {
	return "RicactionNotAdmittedListValidationError"
}

// Error satisfies the builtin error interface
func (e RicactionNotAdmittedListValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRicactionNotAdmittedList.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RicactionNotAdmittedListValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RicactionNotAdmittedListValidationError{}

// Validate checks the field values on RicactionNotAdmittedItemIes with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RicactionNotAdmittedItemIes) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RicactionNotAdmittedItemIesValidationError{
				field:  "Id",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetCriticality()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RicactionNotAdmittedItemIesValidationError{
				field:  "Criticality",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetType()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RicactionNotAdmittedItemIesValidationError{
				field:  "Type",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetPresence()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RicactionNotAdmittedItemIesValidationError{
				field:  "Presence",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// RicactionNotAdmittedItemIesValidationError is the validation error returned
// by RicactionNotAdmittedItemIes.Validate if the designated constraints
// aren't met.
type RicactionNotAdmittedItemIesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RicactionNotAdmittedItemIesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RicactionNotAdmittedItemIesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RicactionNotAdmittedItemIesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RicactionNotAdmittedItemIesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RicactionNotAdmittedItemIesValidationError) ErrorName() string {
	return "RicactionNotAdmittedItemIesValidationError"
}

// Error satisfies the builtin error interface
func (e RicactionNotAdmittedItemIesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRicactionNotAdmittedItemIes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RicactionNotAdmittedItemIesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RicactionNotAdmittedItemIesValidationError{}

// Validate checks the field values on RicactionNotAdmittedItem with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RicactionNotAdmittedItem) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetRicActionId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RicactionNotAdmittedItemValidationError{
				field:  "RicActionId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetCause()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RicactionNotAdmittedItemValidationError{
				field:  "Cause",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// RicactionNotAdmittedItemValidationError is the validation error returned by
// RicactionNotAdmittedItem.Validate if the designated constraints aren't met.
type RicactionNotAdmittedItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RicactionNotAdmittedItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RicactionNotAdmittedItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RicactionNotAdmittedItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RicactionNotAdmittedItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RicactionNotAdmittedItemValidationError) ErrorName() string {
	return "RicactionNotAdmittedItemValidationError"
}

// Error satisfies the builtin error interface
func (e RicactionNotAdmittedItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRicactionNotAdmittedItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RicactionNotAdmittedItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RicactionNotAdmittedItemValidationError{}

// Validate checks the field values on RicsubscriptionFailure with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RicsubscriptionFailure) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetProtocolIes()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RicsubscriptionFailureValidationError{
				field:  "ProtocolIes",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// RicsubscriptionFailureValidationError is the validation error returned by
// RicsubscriptionFailure.Validate if the designated constraints aren't met.
type RicsubscriptionFailureValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RicsubscriptionFailureValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RicsubscriptionFailureValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RicsubscriptionFailureValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RicsubscriptionFailureValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RicsubscriptionFailureValidationError) ErrorName() string {
	return "RicsubscriptionFailureValidationError"
}

// Error satisfies the builtin error interface
func (e RicsubscriptionFailureValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRicsubscriptionFailure.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RicsubscriptionFailureValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RicsubscriptionFailureValidationError{}

// Validate checks the field values on RicsubscriptionFailureIes with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RicsubscriptionFailureIes) Validate() error {
	if m == nil {
		return nil
	}

	switch m.RicsubscriptionFailureIes.(type) {

	case *RicsubscriptionFailureIes_Instance001:

		if v, ok := interface{}(m.GetInstance001()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RicsubscriptionFailureIesValidationError{
					field:  "Instance001",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *RicsubscriptionFailureIes_Instance002:

		if v, ok := interface{}(m.GetInstance002()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RicsubscriptionFailureIesValidationError{
					field:  "Instance002",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *RicsubscriptionFailureIes_Instance003:

		if v, ok := interface{}(m.GetInstance003()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RicsubscriptionFailureIesValidationError{
					field:  "Instance003",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *RicsubscriptionFailureIes_Instance004:

		if v, ok := interface{}(m.GetInstance004()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RicsubscriptionFailureIesValidationError{
					field:  "Instance004",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// RicsubscriptionFailureIesValidationError is the validation error returned by
// RicsubscriptionFailureIes.Validate if the designated constraints aren't met.
type RicsubscriptionFailureIesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RicsubscriptionFailureIesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RicsubscriptionFailureIesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RicsubscriptionFailureIesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RicsubscriptionFailureIesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RicsubscriptionFailureIesValidationError) ErrorName() string {
	return "RicsubscriptionFailureIesValidationError"
}

// Error satisfies the builtin error interface
func (e RicsubscriptionFailureIesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRicsubscriptionFailureIes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RicsubscriptionFailureIesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RicsubscriptionFailureIesValidationError{}

// Validate checks the field values on RicsubscriptionDeleteRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RicsubscriptionDeleteRequest) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetProtocolIes()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RicsubscriptionDeleteRequestValidationError{
				field:  "ProtocolIes",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// RicsubscriptionDeleteRequestValidationError is the validation error returned
// by RicsubscriptionDeleteRequest.Validate if the designated constraints
// aren't met.
type RicsubscriptionDeleteRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RicsubscriptionDeleteRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RicsubscriptionDeleteRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RicsubscriptionDeleteRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RicsubscriptionDeleteRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RicsubscriptionDeleteRequestValidationError) ErrorName() string {
	return "RicsubscriptionDeleteRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RicsubscriptionDeleteRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRicsubscriptionDeleteRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RicsubscriptionDeleteRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RicsubscriptionDeleteRequestValidationError{}

// Validate checks the field values on RicsubscriptionDeleteRequestIes with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RicsubscriptionDeleteRequestIes) Validate() error {
	if m == nil {
		return nil
	}

	switch m.RicsubscriptionDeleteRequestIes.(type) {

	case *RicsubscriptionDeleteRequestIes_Instance001:

		if v, ok := interface{}(m.GetInstance001()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RicsubscriptionDeleteRequestIesValidationError{
					field:  "Instance001",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *RicsubscriptionDeleteRequestIes_Instance002:

		if v, ok := interface{}(m.GetInstance002()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RicsubscriptionDeleteRequestIesValidationError{
					field:  "Instance002",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// RicsubscriptionDeleteRequestIesValidationError is the validation error
// returned by RicsubscriptionDeleteRequestIes.Validate if the designated
// constraints aren't met.
type RicsubscriptionDeleteRequestIesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RicsubscriptionDeleteRequestIesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RicsubscriptionDeleteRequestIesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RicsubscriptionDeleteRequestIesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RicsubscriptionDeleteRequestIesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RicsubscriptionDeleteRequestIesValidationError) ErrorName() string {
	return "RicsubscriptionDeleteRequestIesValidationError"
}

// Error satisfies the builtin error interface
func (e RicsubscriptionDeleteRequestIesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRicsubscriptionDeleteRequestIes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RicsubscriptionDeleteRequestIesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RicsubscriptionDeleteRequestIesValidationError{}

// Validate checks the field values on RicsubscriptionDeleteResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RicsubscriptionDeleteResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetProtocolIes()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RicsubscriptionDeleteResponseValidationError{
				field:  "ProtocolIes",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// RicsubscriptionDeleteResponseValidationError is the validation error
// returned by RicsubscriptionDeleteResponse.Validate if the designated
// constraints aren't met.
type RicsubscriptionDeleteResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RicsubscriptionDeleteResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RicsubscriptionDeleteResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RicsubscriptionDeleteResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RicsubscriptionDeleteResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RicsubscriptionDeleteResponseValidationError) ErrorName() string {
	return "RicsubscriptionDeleteResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RicsubscriptionDeleteResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRicsubscriptionDeleteResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RicsubscriptionDeleteResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RicsubscriptionDeleteResponseValidationError{}

// Validate checks the field values on RicsubscriptionDeleteResponseIes with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned.
func (m *RicsubscriptionDeleteResponseIes) Validate() error {
	if m == nil {
		return nil
	}

	switch m.RicsubscriptionDeleteResponseIes.(type) {

	case *RicsubscriptionDeleteResponseIes_Instance001:

		if v, ok := interface{}(m.GetInstance001()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RicsubscriptionDeleteResponseIesValidationError{
					field:  "Instance001",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *RicsubscriptionDeleteResponseIes_Instance002:

		if v, ok := interface{}(m.GetInstance002()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RicsubscriptionDeleteResponseIesValidationError{
					field:  "Instance002",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// RicsubscriptionDeleteResponseIesValidationError is the validation error
// returned by RicsubscriptionDeleteResponseIes.Validate if the designated
// constraints aren't met.
type RicsubscriptionDeleteResponseIesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RicsubscriptionDeleteResponseIesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RicsubscriptionDeleteResponseIesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RicsubscriptionDeleteResponseIesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RicsubscriptionDeleteResponseIesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RicsubscriptionDeleteResponseIesValidationError) ErrorName() string {
	return "RicsubscriptionDeleteResponseIesValidationError"
}

// Error satisfies the builtin error interface
func (e RicsubscriptionDeleteResponseIesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRicsubscriptionDeleteResponseIes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RicsubscriptionDeleteResponseIesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RicsubscriptionDeleteResponseIesValidationError{}

// Validate checks the field values on RicsubscriptionDeleteFailure with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RicsubscriptionDeleteFailure) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetProtocolIes()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RicsubscriptionDeleteFailureValidationError{
				field:  "ProtocolIes",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// RicsubscriptionDeleteFailureValidationError is the validation error returned
// by RicsubscriptionDeleteFailure.Validate if the designated constraints
// aren't met.
type RicsubscriptionDeleteFailureValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RicsubscriptionDeleteFailureValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RicsubscriptionDeleteFailureValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RicsubscriptionDeleteFailureValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RicsubscriptionDeleteFailureValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RicsubscriptionDeleteFailureValidationError) ErrorName() string {
	return "RicsubscriptionDeleteFailureValidationError"
}

// Error satisfies the builtin error interface
func (e RicsubscriptionDeleteFailureValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRicsubscriptionDeleteFailure.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RicsubscriptionDeleteFailureValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RicsubscriptionDeleteFailureValidationError{}

// Validate checks the field values on RicsubscriptionDeleteFailureIes with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RicsubscriptionDeleteFailureIes) Validate() error {
	if m == nil {
		return nil
	}

	switch m.RicsubscriptionDeleteFailureIes.(type) {

	case *RicsubscriptionDeleteFailureIes_Instance001:

		if v, ok := interface{}(m.GetInstance001()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RicsubscriptionDeleteFailureIesValidationError{
					field:  "Instance001",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *RicsubscriptionDeleteFailureIes_Instance002:

		if v, ok := interface{}(m.GetInstance002()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RicsubscriptionDeleteFailureIesValidationError{
					field:  "Instance002",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *RicsubscriptionDeleteFailureIes_Instance003:

		if v, ok := interface{}(m.GetInstance003()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RicsubscriptionDeleteFailureIesValidationError{
					field:  "Instance003",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *RicsubscriptionDeleteFailureIes_Instance004:

		if v, ok := interface{}(m.GetInstance004()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RicsubscriptionDeleteFailureIesValidationError{
					field:  "Instance004",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// RicsubscriptionDeleteFailureIesValidationError is the validation error
// returned by RicsubscriptionDeleteFailureIes.Validate if the designated
// constraints aren't met.
type RicsubscriptionDeleteFailureIesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RicsubscriptionDeleteFailureIesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RicsubscriptionDeleteFailureIesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RicsubscriptionDeleteFailureIesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RicsubscriptionDeleteFailureIesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RicsubscriptionDeleteFailureIesValidationError) ErrorName() string {
	return "RicsubscriptionDeleteFailureIesValidationError"
}

// Error satisfies the builtin error interface
func (e RicsubscriptionDeleteFailureIesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRicsubscriptionDeleteFailureIes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RicsubscriptionDeleteFailureIesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RicsubscriptionDeleteFailureIesValidationError{}

// Validate checks the field values on Ricindication with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *Ricindication) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetProtocolIes()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RicindicationValidationError{
				field:  "ProtocolIes",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// RicindicationValidationError is the validation error returned by
// Ricindication.Validate if the designated constraints aren't met.
type RicindicationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RicindicationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RicindicationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RicindicationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RicindicationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RicindicationValidationError) ErrorName() string { return "RicindicationValidationError" }

// Error satisfies the builtin error interface
func (e RicindicationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRicindication.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RicindicationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RicindicationValidationError{}

// Validate checks the field values on RicindicationIes with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *RicindicationIes) Validate() error {
	if m == nil {
		return nil
	}

	switch m.RicindicationIes.(type) {

	case *RicindicationIes_Instance001:

		if v, ok := interface{}(m.GetInstance001()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RicindicationIesValidationError{
					field:  "Instance001",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *RicindicationIes_Instance002:

		if v, ok := interface{}(m.GetInstance002()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RicindicationIesValidationError{
					field:  "Instance002",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *RicindicationIes_Instance003:

		if v, ok := interface{}(m.GetInstance003()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RicindicationIesValidationError{
					field:  "Instance003",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *RicindicationIes_Instance004:

		if v, ok := interface{}(m.GetInstance004()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RicindicationIesValidationError{
					field:  "Instance004",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *RicindicationIes_Instance005:

		if v, ok := interface{}(m.GetInstance005()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RicindicationIesValidationError{
					field:  "Instance005",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *RicindicationIes_Instance006:

		if v, ok := interface{}(m.GetInstance006()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RicindicationIesValidationError{
					field:  "Instance006",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *RicindicationIes_Instance007:

		if v, ok := interface{}(m.GetInstance007()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RicindicationIesValidationError{
					field:  "Instance007",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *RicindicationIes_Instance008:

		if v, ok := interface{}(m.GetInstance008()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RicindicationIesValidationError{
					field:  "Instance008",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// RicindicationIesValidationError is the validation error returned by
// RicindicationIes.Validate if the designated constraints aren't met.
type RicindicationIesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RicindicationIesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RicindicationIesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RicindicationIesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RicindicationIesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RicindicationIesValidationError) ErrorName() string { return "RicindicationIesValidationError" }

// Error satisfies the builtin error interface
func (e RicindicationIesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRicindicationIes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RicindicationIesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RicindicationIesValidationError{}

// Validate checks the field values on RiccontrolRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *RiccontrolRequest) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetProtocolIes()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RiccontrolRequestValidationError{
				field:  "ProtocolIes",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// RiccontrolRequestValidationError is the validation error returned by
// RiccontrolRequest.Validate if the designated constraints aren't met.
type RiccontrolRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RiccontrolRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RiccontrolRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RiccontrolRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RiccontrolRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RiccontrolRequestValidationError) ErrorName() string {
	return "RiccontrolRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RiccontrolRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRiccontrolRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RiccontrolRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RiccontrolRequestValidationError{}

// Validate checks the field values on RiccontrolRequestIes with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RiccontrolRequestIes) Validate() error {
	if m == nil {
		return nil
	}

	switch m.RiccontrolRequestIes.(type) {

	case *RiccontrolRequestIes_Instance001:

		if v, ok := interface{}(m.GetInstance001()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RiccontrolRequestIesValidationError{
					field:  "Instance001",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *RiccontrolRequestIes_Instance002:

		if v, ok := interface{}(m.GetInstance002()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RiccontrolRequestIesValidationError{
					field:  "Instance002",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *RiccontrolRequestIes_Instance003:

		if v, ok := interface{}(m.GetInstance003()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RiccontrolRequestIesValidationError{
					field:  "Instance003",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *RiccontrolRequestIes_Instance004:

		if v, ok := interface{}(m.GetInstance004()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RiccontrolRequestIesValidationError{
					field:  "Instance004",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *RiccontrolRequestIes_Instance005:

		if v, ok := interface{}(m.GetInstance005()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RiccontrolRequestIesValidationError{
					field:  "Instance005",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *RiccontrolRequestIes_Instance006:

		if v, ok := interface{}(m.GetInstance006()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RiccontrolRequestIesValidationError{
					field:  "Instance006",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// RiccontrolRequestIesValidationError is the validation error returned by
// RiccontrolRequestIes.Validate if the designated constraints aren't met.
type RiccontrolRequestIesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RiccontrolRequestIesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RiccontrolRequestIesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RiccontrolRequestIesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RiccontrolRequestIesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RiccontrolRequestIesValidationError) ErrorName() string {
	return "RiccontrolRequestIesValidationError"
}

// Error satisfies the builtin error interface
func (e RiccontrolRequestIesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRiccontrolRequestIes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RiccontrolRequestIesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RiccontrolRequestIesValidationError{}

// Validate checks the field values on RiccontrolAcknowledge with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RiccontrolAcknowledge) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetProtocolIes()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RiccontrolAcknowledgeValidationError{
				field:  "ProtocolIes",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// RiccontrolAcknowledgeValidationError is the validation error returned by
// RiccontrolAcknowledge.Validate if the designated constraints aren't met.
type RiccontrolAcknowledgeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RiccontrolAcknowledgeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RiccontrolAcknowledgeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RiccontrolAcknowledgeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RiccontrolAcknowledgeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RiccontrolAcknowledgeValidationError) ErrorName() string {
	return "RiccontrolAcknowledgeValidationError"
}

// Error satisfies the builtin error interface
func (e RiccontrolAcknowledgeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRiccontrolAcknowledge.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RiccontrolAcknowledgeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RiccontrolAcknowledgeValidationError{}

// Validate checks the field values on RiccontrolAcknowledgeIes with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RiccontrolAcknowledgeIes) Validate() error {
	if m == nil {
		return nil
	}

	switch m.RiccontrolAcknowledgeIes.(type) {

	case *RiccontrolAcknowledgeIes_Instance001:

		if v, ok := interface{}(m.GetInstance001()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RiccontrolAcknowledgeIesValidationError{
					field:  "Instance001",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *RiccontrolAcknowledgeIes_Instance002:

		if v, ok := interface{}(m.GetInstance002()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RiccontrolAcknowledgeIesValidationError{
					field:  "Instance002",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *RiccontrolAcknowledgeIes_Instance003:

		if v, ok := interface{}(m.GetInstance003()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RiccontrolAcknowledgeIesValidationError{
					field:  "Instance003",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *RiccontrolAcknowledgeIes_Instance004:

		if v, ok := interface{}(m.GetInstance004()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RiccontrolAcknowledgeIesValidationError{
					field:  "Instance004",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *RiccontrolAcknowledgeIes_Instance005:

		if v, ok := interface{}(m.GetInstance005()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RiccontrolAcknowledgeIesValidationError{
					field:  "Instance005",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// RiccontrolAcknowledgeIesValidationError is the validation error returned by
// RiccontrolAcknowledgeIes.Validate if the designated constraints aren't met.
type RiccontrolAcknowledgeIesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RiccontrolAcknowledgeIesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RiccontrolAcknowledgeIesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RiccontrolAcknowledgeIesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RiccontrolAcknowledgeIesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RiccontrolAcknowledgeIesValidationError) ErrorName() string {
	return "RiccontrolAcknowledgeIesValidationError"
}

// Error satisfies the builtin error interface
func (e RiccontrolAcknowledgeIesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRiccontrolAcknowledgeIes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RiccontrolAcknowledgeIesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RiccontrolAcknowledgeIesValidationError{}

// Validate checks the field values on RiccontrolFailure with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *RiccontrolFailure) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetProtocolIes()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RiccontrolFailureValidationError{
				field:  "ProtocolIes",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// RiccontrolFailureValidationError is the validation error returned by
// RiccontrolFailure.Validate if the designated constraints aren't met.
type RiccontrolFailureValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RiccontrolFailureValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RiccontrolFailureValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RiccontrolFailureValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RiccontrolFailureValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RiccontrolFailureValidationError) ErrorName() string {
	return "RiccontrolFailureValidationError"
}

// Error satisfies the builtin error interface
func (e RiccontrolFailureValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRiccontrolFailure.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RiccontrolFailureValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RiccontrolFailureValidationError{}

// Validate checks the field values on RiccontrolFailureIes with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RiccontrolFailureIes) Validate() error {
	if m == nil {
		return nil
	}

	switch m.RiccontrolFailureIes.(type) {

	case *RiccontrolFailureIes_Instance001:

		if v, ok := interface{}(m.GetInstance001()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RiccontrolFailureIesValidationError{
					field:  "Instance001",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *RiccontrolFailureIes_Instance002:

		if v, ok := interface{}(m.GetInstance002()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RiccontrolFailureIesValidationError{
					field:  "Instance002",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *RiccontrolFailureIes_Instance003:

		if v, ok := interface{}(m.GetInstance003()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RiccontrolFailureIesValidationError{
					field:  "Instance003",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *RiccontrolFailureIes_Instance004:

		if v, ok := interface{}(m.GetInstance004()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RiccontrolFailureIesValidationError{
					field:  "Instance004",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *RiccontrolFailureIes_Instance005:

		if v, ok := interface{}(m.GetInstance005()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RiccontrolFailureIesValidationError{
					field:  "Instance005",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// RiccontrolFailureIesValidationError is the validation error returned by
// RiccontrolFailureIes.Validate if the designated constraints aren't met.
type RiccontrolFailureIesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RiccontrolFailureIesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RiccontrolFailureIesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RiccontrolFailureIesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RiccontrolFailureIesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RiccontrolFailureIesValidationError) ErrorName() string {
	return "RiccontrolFailureIesValidationError"
}

// Error satisfies the builtin error interface
func (e RiccontrolFailureIesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRiccontrolFailureIes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RiccontrolFailureIesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RiccontrolFailureIesValidationError{}

// Validate checks the field values on ErrorIndication with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *ErrorIndication) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetProtocolIes()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ErrorIndicationValidationError{
				field:  "ProtocolIes",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ErrorIndicationValidationError is the validation error returned by
// ErrorIndication.Validate if the designated constraints aren't met.
type ErrorIndicationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ErrorIndicationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ErrorIndicationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ErrorIndicationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ErrorIndicationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ErrorIndicationValidationError) ErrorName() string { return "ErrorIndicationValidationError" }

// Error satisfies the builtin error interface
func (e ErrorIndicationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sErrorIndication.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ErrorIndicationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ErrorIndicationValidationError{}

// Validate checks the field values on ErrorIndicationIes with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ErrorIndicationIes) Validate() error {
	if m == nil {
		return nil
	}

	switch m.ErrorIndicationIes.(type) {

	case *ErrorIndicationIes_Instance001:

		if v, ok := interface{}(m.GetInstance001()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ErrorIndicationIesValidationError{
					field:  "Instance001",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *ErrorIndicationIes_Instance002:

		if v, ok := interface{}(m.GetInstance002()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ErrorIndicationIesValidationError{
					field:  "Instance002",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *ErrorIndicationIes_Instance003:

		if v, ok := interface{}(m.GetInstance003()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ErrorIndicationIesValidationError{
					field:  "Instance003",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *ErrorIndicationIes_Instance004:

		if v, ok := interface{}(m.GetInstance004()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ErrorIndicationIesValidationError{
					field:  "Instance004",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ErrorIndicationIesValidationError is the validation error returned by
// ErrorIndicationIes.Validate if the designated constraints aren't met.
type ErrorIndicationIesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ErrorIndicationIesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ErrorIndicationIesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ErrorIndicationIesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ErrorIndicationIesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ErrorIndicationIesValidationError) ErrorName() string {
	return "ErrorIndicationIesValidationError"
}

// Error satisfies the builtin error interface
func (e ErrorIndicationIesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sErrorIndicationIes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ErrorIndicationIesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ErrorIndicationIesValidationError{}

// Validate checks the field values on E2SetupRequest with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *E2SetupRequest) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetProtocolIes()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return E2SetupRequestValidationError{
				field:  "ProtocolIes",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// E2SetupRequestValidationError is the validation error returned by
// E2SetupRequest.Validate if the designated constraints aren't met.
type E2SetupRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e E2SetupRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e E2SetupRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e E2SetupRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e E2SetupRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e E2SetupRequestValidationError) ErrorName() string { return "E2SetupRequestValidationError" }

// Error satisfies the builtin error interface
func (e E2SetupRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sE2SetupRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = E2SetupRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = E2SetupRequestValidationError{}

// Validate checks the field values on E2SetupRequestIes with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *E2SetupRequestIes) Validate() error {
	if m == nil {
		return nil
	}

	switch m.E2SetupRequestIes.(type) {

	case *E2SetupRequestIes_Instance001:

		if v, ok := interface{}(m.GetInstance001()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return E2SetupRequestIesValidationError{
					field:  "Instance001",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *E2SetupRequestIes_Instance002:

		if v, ok := interface{}(m.GetInstance002()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return E2SetupRequestIesValidationError{
					field:  "Instance002",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// E2SetupRequestIesValidationError is the validation error returned by
// E2SetupRequestIes.Validate if the designated constraints aren't met.
type E2SetupRequestIesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e E2SetupRequestIesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e E2SetupRequestIesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e E2SetupRequestIesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e E2SetupRequestIesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e E2SetupRequestIesValidationError) ErrorName() string {
	return "E2SetupRequestIesValidationError"
}

// Error satisfies the builtin error interface
func (e E2SetupRequestIesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sE2SetupRequestIes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = E2SetupRequestIesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = E2SetupRequestIesValidationError{}

// Validate checks the field values on E2SetupResponse with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *E2SetupResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetProtocolIes()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return E2SetupResponseValidationError{
				field:  "ProtocolIes",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// E2SetupResponseValidationError is the validation error returned by
// E2SetupResponse.Validate if the designated constraints aren't met.
type E2SetupResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e E2SetupResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e E2SetupResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e E2SetupResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e E2SetupResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e E2SetupResponseValidationError) ErrorName() string { return "E2SetupResponseValidationError" }

// Error satisfies the builtin error interface
func (e E2SetupResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sE2SetupResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = E2SetupResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = E2SetupResponseValidationError{}

// Validate checks the field values on E2SetupResponseIes with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *E2SetupResponseIes) Validate() error {
	if m == nil {
		return nil
	}

	switch m.E2SetupResponseIes.(type) {

	case *E2SetupResponseIes_Instance001:

		if v, ok := interface{}(m.GetInstance001()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return E2SetupResponseIesValidationError{
					field:  "Instance001",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *E2SetupResponseIes_Instance002:

		if v, ok := interface{}(m.GetInstance002()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return E2SetupResponseIesValidationError{
					field:  "Instance002",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *E2SetupResponseIes_Instance003:

		if v, ok := interface{}(m.GetInstance003()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return E2SetupResponseIesValidationError{
					field:  "Instance003",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// E2SetupResponseIesValidationError is the validation error returned by
// E2SetupResponseIes.Validate if the designated constraints aren't met.
type E2SetupResponseIesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e E2SetupResponseIesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e E2SetupResponseIesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e E2SetupResponseIesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e E2SetupResponseIesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e E2SetupResponseIesValidationError) ErrorName() string {
	return "E2SetupResponseIesValidationError"
}

// Error satisfies the builtin error interface
func (e E2SetupResponseIesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sE2SetupResponseIes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = E2SetupResponseIesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = E2SetupResponseIesValidationError{}

// Validate checks the field values on E2SetupFailure with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *E2SetupFailure) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetProtocolIes()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return E2SetupFailureValidationError{
				field:  "ProtocolIes",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// E2SetupFailureValidationError is the validation error returned by
// E2SetupFailure.Validate if the designated constraints aren't met.
type E2SetupFailureValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e E2SetupFailureValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e E2SetupFailureValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e E2SetupFailureValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e E2SetupFailureValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e E2SetupFailureValidationError) ErrorName() string { return "E2SetupFailureValidationError" }

// Error satisfies the builtin error interface
func (e E2SetupFailureValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sE2SetupFailure.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = E2SetupFailureValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = E2SetupFailureValidationError{}

// Validate checks the field values on E2SetupFailureIes with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *E2SetupFailureIes) Validate() error {
	if m == nil {
		return nil
	}

	switch m.E2SetupFailureIes.(type) {

	case *E2SetupFailureIes_Instance001:

		if v, ok := interface{}(m.GetInstance001()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return E2SetupFailureIesValidationError{
					field:  "Instance001",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *E2SetupFailureIes_Instance002:

		if v, ok := interface{}(m.GetInstance002()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return E2SetupFailureIesValidationError{
					field:  "Instance002",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *E2SetupFailureIes_Instance003:

		if v, ok := interface{}(m.GetInstance003()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return E2SetupFailureIesValidationError{
					field:  "Instance003",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// E2SetupFailureIesValidationError is the validation error returned by
// E2SetupFailureIes.Validate if the designated constraints aren't met.
type E2SetupFailureIesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e E2SetupFailureIesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e E2SetupFailureIesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e E2SetupFailureIesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e E2SetupFailureIesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e E2SetupFailureIesValidationError) ErrorName() string {
	return "E2SetupFailureIesValidationError"
}

// Error satisfies the builtin error interface
func (e E2SetupFailureIesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sE2SetupFailureIes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = E2SetupFailureIesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = E2SetupFailureIesValidationError{}

// Validate checks the field values on ResetRequest with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *ResetRequest) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetProtocolIes()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ResetRequestValidationError{
				field:  "ProtocolIes",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ResetRequestValidationError is the validation error returned by
// ResetRequest.Validate if the designated constraints aren't met.
type ResetRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResetRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ResetRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ResetRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ResetRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ResetRequestValidationError) ErrorName() string { return "ResetRequestValidationError" }

// Error satisfies the builtin error interface
func (e ResetRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResetRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResetRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResetRequestValidationError{}

// Validate checks the field values on ResetRequestIes with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *ResetRequestIes) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ResetRequestIesValidationError{
				field:  "Id",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetCriticality()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ResetRequestIesValidationError{
				field:  "Criticality",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetType()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ResetRequestIesValidationError{
				field:  "Type",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetPresence()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ResetRequestIesValidationError{
				field:  "Presence",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ResetRequestIesValidationError is the validation error returned by
// ResetRequestIes.Validate if the designated constraints aren't met.
type ResetRequestIesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResetRequestIesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ResetRequestIesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ResetRequestIesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ResetRequestIesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ResetRequestIesValidationError) ErrorName() string { return "ResetRequestIesValidationError" }

// Error satisfies the builtin error interface
func (e ResetRequestIesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResetRequestIes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResetRequestIesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResetRequestIesValidationError{}

// Validate checks the field values on ResetResponse with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *ResetResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetProtocolIes()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ResetResponseValidationError{
				field:  "ProtocolIes",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ResetResponseValidationError is the validation error returned by
// ResetResponse.Validate if the designated constraints aren't met.
type ResetResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResetResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ResetResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ResetResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ResetResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ResetResponseValidationError) ErrorName() string { return "ResetResponseValidationError" }

// Error satisfies the builtin error interface
func (e ResetResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResetResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResetResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResetResponseValidationError{}

// Validate checks the field values on ResetResponseIes with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *ResetResponseIes) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ResetResponseIesValidationError{
				field:  "Id",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetCriticality()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ResetResponseIesValidationError{
				field:  "Criticality",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetType()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ResetResponseIesValidationError{
				field:  "Type",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetPresence()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ResetResponseIesValidationError{
				field:  "Presence",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ResetResponseIesValidationError is the validation error returned by
// ResetResponseIes.Validate if the designated constraints aren't met.
type ResetResponseIesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResetResponseIesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ResetResponseIesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ResetResponseIesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ResetResponseIesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ResetResponseIesValidationError) ErrorName() string { return "ResetResponseIesValidationError" }

// Error satisfies the builtin error interface
func (e ResetResponseIesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResetResponseIes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResetResponseIesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResetResponseIesValidationError{}

// Validate checks the field values on RicserviceUpdate with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *RicserviceUpdate) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetProtocolIes()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RicserviceUpdateValidationError{
				field:  "ProtocolIes",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// RicserviceUpdateValidationError is the validation error returned by
// RicserviceUpdate.Validate if the designated constraints aren't met.
type RicserviceUpdateValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RicserviceUpdateValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RicserviceUpdateValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RicserviceUpdateValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RicserviceUpdateValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RicserviceUpdateValidationError) ErrorName() string { return "RicserviceUpdateValidationError" }

// Error satisfies the builtin error interface
func (e RicserviceUpdateValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRicserviceUpdate.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RicserviceUpdateValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RicserviceUpdateValidationError{}

// Validate checks the field values on RicserviceUpdateIes with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RicserviceUpdateIes) Validate() error {
	if m == nil {
		return nil
	}

	switch m.RicserviceUpdateIes.(type) {

	case *RicserviceUpdateIes_Instance001:

		if v, ok := interface{}(m.GetInstance001()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RicserviceUpdateIesValidationError{
					field:  "Instance001",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *RicserviceUpdateIes_Instance002:

		if v, ok := interface{}(m.GetInstance002()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RicserviceUpdateIesValidationError{
					field:  "Instance002",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *RicserviceUpdateIes_Instance003:

		if v, ok := interface{}(m.GetInstance003()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RicserviceUpdateIesValidationError{
					field:  "Instance003",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// RicserviceUpdateIesValidationError is the validation error returned by
// RicserviceUpdateIes.Validate if the designated constraints aren't met.
type RicserviceUpdateIesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RicserviceUpdateIesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RicserviceUpdateIesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RicserviceUpdateIesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RicserviceUpdateIesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RicserviceUpdateIesValidationError) ErrorName() string {
	return "RicserviceUpdateIesValidationError"
}

// Error satisfies the builtin error interface
func (e RicserviceUpdateIesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRicserviceUpdateIes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RicserviceUpdateIesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RicserviceUpdateIesValidationError{}

// Validate checks the field values on RanfunctionsList with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *RanfunctionsList) Validate() error {
	if m == nil {
		return nil
	}

	if len(m.GetValue()) > 16 {
		return RanfunctionsListValidationError{
			field:  "Value",
			reason: "value must contain no more than 16 item(s)",
		}
	}

	for idx, item := range m.GetValue() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RanfunctionsListValidationError{
					field:  fmt.Sprintf("Value[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// RanfunctionsListValidationError is the validation error returned by
// RanfunctionsList.Validate if the designated constraints aren't met.
type RanfunctionsListValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RanfunctionsListValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RanfunctionsListValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RanfunctionsListValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RanfunctionsListValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RanfunctionsListValidationError) ErrorName() string { return "RanfunctionsListValidationError" }

// Error satisfies the builtin error interface
func (e RanfunctionsListValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRanfunctionsList.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RanfunctionsListValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RanfunctionsListValidationError{}

// Validate checks the field values on RanfunctionItemIes with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RanfunctionItemIes) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RanfunctionItemIesValidationError{
				field:  "Id",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetCriticality()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RanfunctionItemIesValidationError{
				field:  "Criticality",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetType()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RanfunctionItemIesValidationError{
				field:  "Type",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetPresence()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RanfunctionItemIesValidationError{
				field:  "Presence",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// RanfunctionItemIesValidationError is the validation error returned by
// RanfunctionItemIes.Validate if the designated constraints aren't met.
type RanfunctionItemIesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RanfunctionItemIesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RanfunctionItemIesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RanfunctionItemIesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RanfunctionItemIesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RanfunctionItemIesValidationError) ErrorName() string {
	return "RanfunctionItemIesValidationError"
}

// Error satisfies the builtin error interface
func (e RanfunctionItemIesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRanfunctionItemIes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RanfunctionItemIesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RanfunctionItemIesValidationError{}

// Validate checks the field values on RanfunctionItem with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *RanfunctionItem) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetRanFunctionId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RanfunctionItemValidationError{
				field:  "RanFunctionId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetRanFunctionDefinition()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RanfunctionItemValidationError{
				field:  "RanFunctionDefinition",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetRanFunctionRevision()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RanfunctionItemValidationError{
				field:  "RanFunctionRevision",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// RanfunctionItemValidationError is the validation error returned by
// RanfunctionItem.Validate if the designated constraints aren't met.
type RanfunctionItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RanfunctionItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RanfunctionItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RanfunctionItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RanfunctionItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RanfunctionItemValidationError) ErrorName() string { return "RanfunctionItemValidationError" }

// Error satisfies the builtin error interface
func (e RanfunctionItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRanfunctionItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RanfunctionItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RanfunctionItemValidationError{}

// Validate checks the field values on RanfunctionsIdList with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RanfunctionsIdList) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetValue() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RanfunctionsIdListValidationError{
					field:  fmt.Sprintf("Value[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// RanfunctionsIdListValidationError is the validation error returned by
// RanfunctionsIdList.Validate if the designated constraints aren't met.
type RanfunctionsIdListValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RanfunctionsIdListValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RanfunctionsIdListValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RanfunctionsIdListValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RanfunctionsIdListValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RanfunctionsIdListValidationError) ErrorName() string {
	return "RanfunctionsIdListValidationError"
}

// Error satisfies the builtin error interface
func (e RanfunctionsIdListValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRanfunctionsIdList.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RanfunctionsIdListValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RanfunctionsIdListValidationError{}

// Validate checks the field values on RanfunctionIdItemIes with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RanfunctionIdItemIes) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RanfunctionIdItemIesValidationError{
				field:  "Id",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetCriticality()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RanfunctionIdItemIesValidationError{
				field:  "Criticality",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetType()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RanfunctionIdItemIesValidationError{
				field:  "Type",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetPresence()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RanfunctionIdItemIesValidationError{
				field:  "Presence",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// RanfunctionIdItemIesValidationError is the validation error returned by
// RanfunctionIdItemIes.Validate if the designated constraints aren't met.
type RanfunctionIdItemIesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RanfunctionIdItemIesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RanfunctionIdItemIesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RanfunctionIdItemIesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RanfunctionIdItemIesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RanfunctionIdItemIesValidationError) ErrorName() string {
	return "RanfunctionIdItemIesValidationError"
}

// Error satisfies the builtin error interface
func (e RanfunctionIdItemIesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRanfunctionIdItemIes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RanfunctionIdItemIesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RanfunctionIdItemIesValidationError{}

// Validate checks the field values on RanfunctionIdItem with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *RanfunctionIdItem) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetRanFunctionId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RanfunctionIdItemValidationError{
				field:  "RanFunctionId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetRanFunctionRevision()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RanfunctionIdItemValidationError{
				field:  "RanFunctionRevision",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// RanfunctionIdItemValidationError is the validation error returned by
// RanfunctionIdItem.Validate if the designated constraints aren't met.
type RanfunctionIdItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RanfunctionIdItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RanfunctionIdItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RanfunctionIdItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RanfunctionIdItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RanfunctionIdItemValidationError) ErrorName() string {
	return "RanfunctionIdItemValidationError"
}

// Error satisfies the builtin error interface
func (e RanfunctionIdItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRanfunctionIdItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RanfunctionIdItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RanfunctionIdItemValidationError{}

// Validate checks the field values on RicserviceUpdateAcknowledge with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RicserviceUpdateAcknowledge) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetProtocolIes()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RicserviceUpdateAcknowledgeValidationError{
				field:  "ProtocolIes",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// RicserviceUpdateAcknowledgeValidationError is the validation error returned
// by RicserviceUpdateAcknowledge.Validate if the designated constraints
// aren't met.
type RicserviceUpdateAcknowledgeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RicserviceUpdateAcknowledgeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RicserviceUpdateAcknowledgeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RicserviceUpdateAcknowledgeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RicserviceUpdateAcknowledgeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RicserviceUpdateAcknowledgeValidationError) ErrorName() string {
	return "RicserviceUpdateAcknowledgeValidationError"
}

// Error satisfies the builtin error interface
func (e RicserviceUpdateAcknowledgeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRicserviceUpdateAcknowledge.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RicserviceUpdateAcknowledgeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RicserviceUpdateAcknowledgeValidationError{}

// Validate checks the field values on RicserviceUpdateAcknowledgeIes with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RicserviceUpdateAcknowledgeIes) Validate() error {
	if m == nil {
		return nil
	}

	switch m.RicserviceUpdateAcknowledgeIes.(type) {

	case *RicserviceUpdateAcknowledgeIes_Instance001:

		if v, ok := interface{}(m.GetInstance001()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RicserviceUpdateAcknowledgeIesValidationError{
					field:  "Instance001",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *RicserviceUpdateAcknowledgeIes_Instance002:

		if v, ok := interface{}(m.GetInstance002()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RicserviceUpdateAcknowledgeIesValidationError{
					field:  "Instance002",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// RicserviceUpdateAcknowledgeIesValidationError is the validation error
// returned by RicserviceUpdateAcknowledgeIes.Validate if the designated
// constraints aren't met.
type RicserviceUpdateAcknowledgeIesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RicserviceUpdateAcknowledgeIesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RicserviceUpdateAcknowledgeIesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RicserviceUpdateAcknowledgeIesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RicserviceUpdateAcknowledgeIesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RicserviceUpdateAcknowledgeIesValidationError) ErrorName() string {
	return "RicserviceUpdateAcknowledgeIesValidationError"
}

// Error satisfies the builtin error interface
func (e RicserviceUpdateAcknowledgeIesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRicserviceUpdateAcknowledgeIes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RicserviceUpdateAcknowledgeIesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RicserviceUpdateAcknowledgeIesValidationError{}

// Validate checks the field values on RanfunctionsIdcauseList with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RanfunctionsIdcauseList) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetValue() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RanfunctionsIdcauseListValidationError{
					field:  fmt.Sprintf("Value[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// RanfunctionsIdcauseListValidationError is the validation error returned by
// RanfunctionsIdcauseList.Validate if the designated constraints aren't met.
type RanfunctionsIdcauseListValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RanfunctionsIdcauseListValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RanfunctionsIdcauseListValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RanfunctionsIdcauseListValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RanfunctionsIdcauseListValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RanfunctionsIdcauseListValidationError) ErrorName() string {
	return "RanfunctionsIdcauseListValidationError"
}

// Error satisfies the builtin error interface
func (e RanfunctionsIdcauseListValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRanfunctionsIdcauseList.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RanfunctionsIdcauseListValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RanfunctionsIdcauseListValidationError{}

// Validate checks the field values on RanfunctionIdcauseItemIes with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RanfunctionIdcauseItemIes) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RanfunctionIdcauseItemIesValidationError{
				field:  "Id",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetCriticality()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RanfunctionIdcauseItemIesValidationError{
				field:  "Criticality",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetType()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RanfunctionIdcauseItemIesValidationError{
				field:  "Type",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetPresence()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RanfunctionIdcauseItemIesValidationError{
				field:  "Presence",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// RanfunctionIdcauseItemIesValidationError is the validation error returned by
// RanfunctionIdcauseItemIes.Validate if the designated constraints aren't met.
type RanfunctionIdcauseItemIesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RanfunctionIdcauseItemIesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RanfunctionIdcauseItemIesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RanfunctionIdcauseItemIesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RanfunctionIdcauseItemIesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RanfunctionIdcauseItemIesValidationError) ErrorName() string {
	return "RanfunctionIdcauseItemIesValidationError"
}

// Error satisfies the builtin error interface
func (e RanfunctionIdcauseItemIesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRanfunctionIdcauseItemIes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RanfunctionIdcauseItemIesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RanfunctionIdcauseItemIesValidationError{}

// Validate checks the field values on RanfunctionIdcauseItem with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RanfunctionIdcauseItem) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetRanFunctionId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RanfunctionIdcauseItemValidationError{
				field:  "RanFunctionId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetCause()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RanfunctionIdcauseItemValidationError{
				field:  "Cause",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// RanfunctionIdcauseItemValidationError is the validation error returned by
// RanfunctionIdcauseItem.Validate if the designated constraints aren't met.
type RanfunctionIdcauseItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RanfunctionIdcauseItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RanfunctionIdcauseItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RanfunctionIdcauseItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RanfunctionIdcauseItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RanfunctionIdcauseItemValidationError) ErrorName() string {
	return "RanfunctionIdcauseItemValidationError"
}

// Error satisfies the builtin error interface
func (e RanfunctionIdcauseItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRanfunctionIdcauseItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RanfunctionIdcauseItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RanfunctionIdcauseItemValidationError{}

// Validate checks the field values on RicserviceUpdateFailure with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RicserviceUpdateFailure) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetProtocolIes()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RicserviceUpdateFailureValidationError{
				field:  "ProtocolIes",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// RicserviceUpdateFailureValidationError is the validation error returned by
// RicserviceUpdateFailure.Validate if the designated constraints aren't met.
type RicserviceUpdateFailureValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RicserviceUpdateFailureValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RicserviceUpdateFailureValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RicserviceUpdateFailureValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RicserviceUpdateFailureValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RicserviceUpdateFailureValidationError) ErrorName() string {
	return "RicserviceUpdateFailureValidationError"
}

// Error satisfies the builtin error interface
func (e RicserviceUpdateFailureValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRicserviceUpdateFailure.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RicserviceUpdateFailureValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RicserviceUpdateFailureValidationError{}

// Validate checks the field values on RicserviceUpdateFailureIes with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RicserviceUpdateFailureIes) Validate() error {
	if m == nil {
		return nil
	}

	switch m.RicserviceUpdateFailureIes.(type) {

	case *RicserviceUpdateFailureIes_Instance001:

		if v, ok := interface{}(m.GetInstance001()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RicserviceUpdateFailureIesValidationError{
					field:  "Instance001",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *RicserviceUpdateFailureIes_Instance002:

		if v, ok := interface{}(m.GetInstance002()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RicserviceUpdateFailureIesValidationError{
					field:  "Instance002",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *RicserviceUpdateFailureIes_Instance003:

		if v, ok := interface{}(m.GetInstance003()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RicserviceUpdateFailureIesValidationError{
					field:  "Instance003",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// RicserviceUpdateFailureIesValidationError is the validation error returned
// by RicserviceUpdateFailureIes.Validate if the designated constraints aren't met.
type RicserviceUpdateFailureIesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RicserviceUpdateFailureIesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RicserviceUpdateFailureIesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RicserviceUpdateFailureIesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RicserviceUpdateFailureIesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RicserviceUpdateFailureIesValidationError) ErrorName() string {
	return "RicserviceUpdateFailureIesValidationError"
}

// Error satisfies the builtin error interface
func (e RicserviceUpdateFailureIesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRicserviceUpdateFailureIes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RicserviceUpdateFailureIesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RicserviceUpdateFailureIesValidationError{}

// Validate checks the field values on RicserviceQuery with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *RicserviceQuery) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetProtocolIes()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RicserviceQueryValidationError{
				field:  "ProtocolIes",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// RicserviceQueryValidationError is the validation error returned by
// RicserviceQuery.Validate if the designated constraints aren't met.
type RicserviceQueryValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RicserviceQueryValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RicserviceQueryValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RicserviceQueryValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RicserviceQueryValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RicserviceQueryValidationError) ErrorName() string { return "RicserviceQueryValidationError" }

// Error satisfies the builtin error interface
func (e RicserviceQueryValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRicserviceQuery.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RicserviceQueryValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RicserviceQueryValidationError{}

// Validate checks the field values on RicserviceQueryIes with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RicserviceQueryIes) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RicserviceQueryIesValidationError{
				field:  "Id",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetCriticality()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RicserviceQueryIesValidationError{
				field:  "Criticality",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetType()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RicserviceQueryIesValidationError{
				field:  "Type",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetPresence()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RicserviceQueryIesValidationError{
				field:  "Presence",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// RicserviceQueryIesValidationError is the validation error returned by
// RicserviceQueryIes.Validate if the designated constraints aren't met.
type RicserviceQueryIesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RicserviceQueryIesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RicserviceQueryIesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RicserviceQueryIesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RicserviceQueryIesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RicserviceQueryIesValidationError) ErrorName() string {
	return "RicserviceQueryIesValidationError"
}

// Error satisfies the builtin error interface
func (e RicserviceQueryIesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRicserviceQueryIes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RicserviceQueryIesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RicserviceQueryIesValidationError{}

// Validate checks the field values on
// RicsubscriptionRequestIes_RicsubscriptionRequestIes001 with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RicsubscriptionRequestIes_RicsubscriptionRequestIes001) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RicsubscriptionRequestIes_RicsubscriptionRequestIes001ValidationError{
				field:  "Id",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetCriticality()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RicsubscriptionRequestIes_RicsubscriptionRequestIes001ValidationError{
				field:  "Criticality",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetType()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RicsubscriptionRequestIes_RicsubscriptionRequestIes001ValidationError{
				field:  "Type",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetPresence()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RicsubscriptionRequestIes_RicsubscriptionRequestIes001ValidationError{
				field:  "Presence",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// RicsubscriptionRequestIes_RicsubscriptionRequestIes001ValidationError is the
// validation error returned by
// RicsubscriptionRequestIes_RicsubscriptionRequestIes001.Validate if the
// designated constraints aren't met.
type RicsubscriptionRequestIes_RicsubscriptionRequestIes001ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RicsubscriptionRequestIes_RicsubscriptionRequestIes001ValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e RicsubscriptionRequestIes_RicsubscriptionRequestIes001ValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e RicsubscriptionRequestIes_RicsubscriptionRequestIes001ValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e RicsubscriptionRequestIes_RicsubscriptionRequestIes001ValidationError) Key() bool {
	return e.key
}

// ErrorName returns error name.
func (e RicsubscriptionRequestIes_RicsubscriptionRequestIes001ValidationError) ErrorName() string {
	return "RicsubscriptionRequestIes_RicsubscriptionRequestIes001ValidationError"
}

// Error satisfies the builtin error interface
func (e RicsubscriptionRequestIes_RicsubscriptionRequestIes001ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRicsubscriptionRequestIes_RicsubscriptionRequestIes001.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RicsubscriptionRequestIes_RicsubscriptionRequestIes001ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RicsubscriptionRequestIes_RicsubscriptionRequestIes001ValidationError{}

// Validate checks the field values on
// RicsubscriptionRequestIes_RicsubscriptionRequestIes002 with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RicsubscriptionRequestIes_RicsubscriptionRequestIes002) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RicsubscriptionRequestIes_RicsubscriptionRequestIes002ValidationError{
				field:  "Id",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetCriticality()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RicsubscriptionRequestIes_RicsubscriptionRequestIes002ValidationError{
				field:  "Criticality",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetType()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RicsubscriptionRequestIes_RicsubscriptionRequestIes002ValidationError{
				field:  "Type",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetPresence()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RicsubscriptionRequestIes_RicsubscriptionRequestIes002ValidationError{
				field:  "Presence",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// RicsubscriptionRequestIes_RicsubscriptionRequestIes002ValidationError is the
// validation error returned by
// RicsubscriptionRequestIes_RicsubscriptionRequestIes002.Validate if the
// designated constraints aren't met.
type RicsubscriptionRequestIes_RicsubscriptionRequestIes002ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RicsubscriptionRequestIes_RicsubscriptionRequestIes002ValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e RicsubscriptionRequestIes_RicsubscriptionRequestIes002ValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e RicsubscriptionRequestIes_RicsubscriptionRequestIes002ValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e RicsubscriptionRequestIes_RicsubscriptionRequestIes002ValidationError) Key() bool {
	return e.key
}

// ErrorName returns error name.
func (e RicsubscriptionRequestIes_RicsubscriptionRequestIes002ValidationError) ErrorName() string {
	return "RicsubscriptionRequestIes_RicsubscriptionRequestIes002ValidationError"
}

// Error satisfies the builtin error interface
func (e RicsubscriptionRequestIes_RicsubscriptionRequestIes002ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRicsubscriptionRequestIes_RicsubscriptionRequestIes002.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RicsubscriptionRequestIes_RicsubscriptionRequestIes002ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RicsubscriptionRequestIes_RicsubscriptionRequestIes002ValidationError{}

// Validate checks the field values on
// RicsubscriptionRequestIes_RicsubscriptionRequestIes003 with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RicsubscriptionRequestIes_RicsubscriptionRequestIes003) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RicsubscriptionRequestIes_RicsubscriptionRequestIes003ValidationError{
				field:  "Id",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetCriticality()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RicsubscriptionRequestIes_RicsubscriptionRequestIes003ValidationError{
				field:  "Criticality",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetType()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RicsubscriptionRequestIes_RicsubscriptionRequestIes003ValidationError{
				field:  "Type",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetPresence()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RicsubscriptionRequestIes_RicsubscriptionRequestIes003ValidationError{
				field:  "Presence",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// RicsubscriptionRequestIes_RicsubscriptionRequestIes003ValidationError is the
// validation error returned by
// RicsubscriptionRequestIes_RicsubscriptionRequestIes003.Validate if the
// designated constraints aren't met.
type RicsubscriptionRequestIes_RicsubscriptionRequestIes003ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RicsubscriptionRequestIes_RicsubscriptionRequestIes003ValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e RicsubscriptionRequestIes_RicsubscriptionRequestIes003ValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e RicsubscriptionRequestIes_RicsubscriptionRequestIes003ValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e RicsubscriptionRequestIes_RicsubscriptionRequestIes003ValidationError) Key() bool {
	return e.key
}

// ErrorName returns error name.
func (e RicsubscriptionRequestIes_RicsubscriptionRequestIes003ValidationError) ErrorName() string {
	return "RicsubscriptionRequestIes_RicsubscriptionRequestIes003ValidationError"
}

// Error satisfies the builtin error interface
func (e RicsubscriptionRequestIes_RicsubscriptionRequestIes003ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRicsubscriptionRequestIes_RicsubscriptionRequestIes003.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RicsubscriptionRequestIes_RicsubscriptionRequestIes003ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RicsubscriptionRequestIes_RicsubscriptionRequestIes003ValidationError{}

// Validate checks the field values on
// RicsubscriptionResponseIes_RicsubscriptionResponseIes001 with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RicsubscriptionResponseIes_RicsubscriptionResponseIes001) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RicsubscriptionResponseIes_RicsubscriptionResponseIes001ValidationError{
				field:  "Id",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetCriticality()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RicsubscriptionResponseIes_RicsubscriptionResponseIes001ValidationError{
				field:  "Criticality",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetType()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RicsubscriptionResponseIes_RicsubscriptionResponseIes001ValidationError{
				field:  "Type",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetPresence()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RicsubscriptionResponseIes_RicsubscriptionResponseIes001ValidationError{
				field:  "Presence",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// RicsubscriptionResponseIes_RicsubscriptionResponseIes001ValidationError is
// the validation error returned by
// RicsubscriptionResponseIes_RicsubscriptionResponseIes001.Validate if the
// designated constraints aren't met.
type RicsubscriptionResponseIes_RicsubscriptionResponseIes001ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RicsubscriptionResponseIes_RicsubscriptionResponseIes001ValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e RicsubscriptionResponseIes_RicsubscriptionResponseIes001ValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e RicsubscriptionResponseIes_RicsubscriptionResponseIes001ValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e RicsubscriptionResponseIes_RicsubscriptionResponseIes001ValidationError) Key() bool {
	return e.key
}

// ErrorName returns error name.
func (e RicsubscriptionResponseIes_RicsubscriptionResponseIes001ValidationError) ErrorName() string {
	return "RicsubscriptionResponseIes_RicsubscriptionResponseIes001ValidationError"
}

// Error satisfies the builtin error interface
func (e RicsubscriptionResponseIes_RicsubscriptionResponseIes001ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRicsubscriptionResponseIes_RicsubscriptionResponseIes001.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RicsubscriptionResponseIes_RicsubscriptionResponseIes001ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RicsubscriptionResponseIes_RicsubscriptionResponseIes001ValidationError{}

// Validate checks the field values on
// RicsubscriptionResponseIes_RicsubscriptionResponseIes002 with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RicsubscriptionResponseIes_RicsubscriptionResponseIes002) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RicsubscriptionResponseIes_RicsubscriptionResponseIes002ValidationError{
				field:  "Id",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetCriticality()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RicsubscriptionResponseIes_RicsubscriptionResponseIes002ValidationError{
				field:  "Criticality",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetType()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RicsubscriptionResponseIes_RicsubscriptionResponseIes002ValidationError{
				field:  "Type",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetPresence()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RicsubscriptionResponseIes_RicsubscriptionResponseIes002ValidationError{
				field:  "Presence",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// RicsubscriptionResponseIes_RicsubscriptionResponseIes002ValidationError is
// the validation error returned by
// RicsubscriptionResponseIes_RicsubscriptionResponseIes002.Validate if the
// designated constraints aren't met.
type RicsubscriptionResponseIes_RicsubscriptionResponseIes002ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RicsubscriptionResponseIes_RicsubscriptionResponseIes002ValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e RicsubscriptionResponseIes_RicsubscriptionResponseIes002ValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e RicsubscriptionResponseIes_RicsubscriptionResponseIes002ValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e RicsubscriptionResponseIes_RicsubscriptionResponseIes002ValidationError) Key() bool {
	return e.key
}

// ErrorName returns error name.
func (e RicsubscriptionResponseIes_RicsubscriptionResponseIes002ValidationError) ErrorName() string {
	return "RicsubscriptionResponseIes_RicsubscriptionResponseIes002ValidationError"
}

// Error satisfies the builtin error interface
func (e RicsubscriptionResponseIes_RicsubscriptionResponseIes002ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRicsubscriptionResponseIes_RicsubscriptionResponseIes002.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RicsubscriptionResponseIes_RicsubscriptionResponseIes002ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RicsubscriptionResponseIes_RicsubscriptionResponseIes002ValidationError{}

// Validate checks the field values on
// RicsubscriptionResponseIes_RicsubscriptionResponseIes003 with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RicsubscriptionResponseIes_RicsubscriptionResponseIes003) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RicsubscriptionResponseIes_RicsubscriptionResponseIes003ValidationError{
				field:  "Id",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetCriticality()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RicsubscriptionResponseIes_RicsubscriptionResponseIes003ValidationError{
				field:  "Criticality",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetType()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RicsubscriptionResponseIes_RicsubscriptionResponseIes003ValidationError{
				field:  "Type",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetPresence()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RicsubscriptionResponseIes_RicsubscriptionResponseIes003ValidationError{
				field:  "Presence",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// RicsubscriptionResponseIes_RicsubscriptionResponseIes003ValidationError is
// the validation error returned by
// RicsubscriptionResponseIes_RicsubscriptionResponseIes003.Validate if the
// designated constraints aren't met.
type RicsubscriptionResponseIes_RicsubscriptionResponseIes003ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RicsubscriptionResponseIes_RicsubscriptionResponseIes003ValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e RicsubscriptionResponseIes_RicsubscriptionResponseIes003ValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e RicsubscriptionResponseIes_RicsubscriptionResponseIes003ValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e RicsubscriptionResponseIes_RicsubscriptionResponseIes003ValidationError) Key() bool {
	return e.key
}

// ErrorName returns error name.
func (e RicsubscriptionResponseIes_RicsubscriptionResponseIes003ValidationError) ErrorName() string {
	return "RicsubscriptionResponseIes_RicsubscriptionResponseIes003ValidationError"
}

// Error satisfies the builtin error interface
func (e RicsubscriptionResponseIes_RicsubscriptionResponseIes003ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRicsubscriptionResponseIes_RicsubscriptionResponseIes003.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RicsubscriptionResponseIes_RicsubscriptionResponseIes003ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RicsubscriptionResponseIes_RicsubscriptionResponseIes003ValidationError{}

// Validate checks the field values on
// RicsubscriptionResponseIes_RicsubscriptionResponseIes004 with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RicsubscriptionResponseIes_RicsubscriptionResponseIes004) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RicsubscriptionResponseIes_RicsubscriptionResponseIes004ValidationError{
				field:  "Id",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetCriticality()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RicsubscriptionResponseIes_RicsubscriptionResponseIes004ValidationError{
				field:  "Criticality",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetType()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RicsubscriptionResponseIes_RicsubscriptionResponseIes004ValidationError{
				field:  "Type",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetPresence()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RicsubscriptionResponseIes_RicsubscriptionResponseIes004ValidationError{
				field:  "Presence",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// RicsubscriptionResponseIes_RicsubscriptionResponseIes004ValidationError is
// the validation error returned by
// RicsubscriptionResponseIes_RicsubscriptionResponseIes004.Validate if the
// designated constraints aren't met.
type RicsubscriptionResponseIes_RicsubscriptionResponseIes004ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RicsubscriptionResponseIes_RicsubscriptionResponseIes004ValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e RicsubscriptionResponseIes_RicsubscriptionResponseIes004ValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e RicsubscriptionResponseIes_RicsubscriptionResponseIes004ValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e RicsubscriptionResponseIes_RicsubscriptionResponseIes004ValidationError) Key() bool {
	return e.key
}

// ErrorName returns error name.
func (e RicsubscriptionResponseIes_RicsubscriptionResponseIes004ValidationError) ErrorName() string {
	return "RicsubscriptionResponseIes_RicsubscriptionResponseIes004ValidationError"
}

// Error satisfies the builtin error interface
func (e RicsubscriptionResponseIes_RicsubscriptionResponseIes004ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRicsubscriptionResponseIes_RicsubscriptionResponseIes004.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RicsubscriptionResponseIes_RicsubscriptionResponseIes004ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RicsubscriptionResponseIes_RicsubscriptionResponseIes004ValidationError{}

// Validate checks the field values on
// RicsubscriptionFailureIes_RicsubscriptionFailureIes001 with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RicsubscriptionFailureIes_RicsubscriptionFailureIes001) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RicsubscriptionFailureIes_RicsubscriptionFailureIes001ValidationError{
				field:  "Id",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetCriticality()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RicsubscriptionFailureIes_RicsubscriptionFailureIes001ValidationError{
				field:  "Criticality",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetType()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RicsubscriptionFailureIes_RicsubscriptionFailureIes001ValidationError{
				field:  "Type",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetPresence()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RicsubscriptionFailureIes_RicsubscriptionFailureIes001ValidationError{
				field:  "Presence",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// RicsubscriptionFailureIes_RicsubscriptionFailureIes001ValidationError is the
// validation error returned by
// RicsubscriptionFailureIes_RicsubscriptionFailureIes001.Validate if the
// designated constraints aren't met.
type RicsubscriptionFailureIes_RicsubscriptionFailureIes001ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RicsubscriptionFailureIes_RicsubscriptionFailureIes001ValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e RicsubscriptionFailureIes_RicsubscriptionFailureIes001ValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e RicsubscriptionFailureIes_RicsubscriptionFailureIes001ValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e RicsubscriptionFailureIes_RicsubscriptionFailureIes001ValidationError) Key() bool {
	return e.key
}

// ErrorName returns error name.
func (e RicsubscriptionFailureIes_RicsubscriptionFailureIes001ValidationError) ErrorName() string {
	return "RicsubscriptionFailureIes_RicsubscriptionFailureIes001ValidationError"
}

// Error satisfies the builtin error interface
func (e RicsubscriptionFailureIes_RicsubscriptionFailureIes001ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRicsubscriptionFailureIes_RicsubscriptionFailureIes001.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RicsubscriptionFailureIes_RicsubscriptionFailureIes001ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RicsubscriptionFailureIes_RicsubscriptionFailureIes001ValidationError{}

// Validate checks the field values on
// RicsubscriptionFailureIes_RicsubscriptionFailureIes002 with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RicsubscriptionFailureIes_RicsubscriptionFailureIes002) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RicsubscriptionFailureIes_RicsubscriptionFailureIes002ValidationError{
				field:  "Id",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetCriticality()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RicsubscriptionFailureIes_RicsubscriptionFailureIes002ValidationError{
				field:  "Criticality",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetType()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RicsubscriptionFailureIes_RicsubscriptionFailureIes002ValidationError{
				field:  "Type",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetPresence()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RicsubscriptionFailureIes_RicsubscriptionFailureIes002ValidationError{
				field:  "Presence",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// RicsubscriptionFailureIes_RicsubscriptionFailureIes002ValidationError is the
// validation error returned by
// RicsubscriptionFailureIes_RicsubscriptionFailureIes002.Validate if the
// designated constraints aren't met.
type RicsubscriptionFailureIes_RicsubscriptionFailureIes002ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RicsubscriptionFailureIes_RicsubscriptionFailureIes002ValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e RicsubscriptionFailureIes_RicsubscriptionFailureIes002ValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e RicsubscriptionFailureIes_RicsubscriptionFailureIes002ValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e RicsubscriptionFailureIes_RicsubscriptionFailureIes002ValidationError) Key() bool {
	return e.key
}

// ErrorName returns error name.
func (e RicsubscriptionFailureIes_RicsubscriptionFailureIes002ValidationError) ErrorName() string {
	return "RicsubscriptionFailureIes_RicsubscriptionFailureIes002ValidationError"
}

// Error satisfies the builtin error interface
func (e RicsubscriptionFailureIes_RicsubscriptionFailureIes002ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRicsubscriptionFailureIes_RicsubscriptionFailureIes002.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RicsubscriptionFailureIes_RicsubscriptionFailureIes002ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RicsubscriptionFailureIes_RicsubscriptionFailureIes002ValidationError{}

// Validate checks the field values on
// RicsubscriptionFailureIes_RicsubscriptionFailureIes003 with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RicsubscriptionFailureIes_RicsubscriptionFailureIes003) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RicsubscriptionFailureIes_RicsubscriptionFailureIes003ValidationError{
				field:  "Id",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetCriticality()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RicsubscriptionFailureIes_RicsubscriptionFailureIes003ValidationError{
				field:  "Criticality",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetType()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RicsubscriptionFailureIes_RicsubscriptionFailureIes003ValidationError{
				field:  "Type",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetPresence()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RicsubscriptionFailureIes_RicsubscriptionFailureIes003ValidationError{
				field:  "Presence",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// RicsubscriptionFailureIes_RicsubscriptionFailureIes003ValidationError is the
// validation error returned by
// RicsubscriptionFailureIes_RicsubscriptionFailureIes003.Validate if the
// designated constraints aren't met.
type RicsubscriptionFailureIes_RicsubscriptionFailureIes003ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RicsubscriptionFailureIes_RicsubscriptionFailureIes003ValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e RicsubscriptionFailureIes_RicsubscriptionFailureIes003ValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e RicsubscriptionFailureIes_RicsubscriptionFailureIes003ValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e RicsubscriptionFailureIes_RicsubscriptionFailureIes003ValidationError) Key() bool {
	return e.key
}

// ErrorName returns error name.
func (e RicsubscriptionFailureIes_RicsubscriptionFailureIes003ValidationError) ErrorName() string {
	return "RicsubscriptionFailureIes_RicsubscriptionFailureIes003ValidationError"
}

// Error satisfies the builtin error interface
func (e RicsubscriptionFailureIes_RicsubscriptionFailureIes003ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRicsubscriptionFailureIes_RicsubscriptionFailureIes003.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RicsubscriptionFailureIes_RicsubscriptionFailureIes003ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RicsubscriptionFailureIes_RicsubscriptionFailureIes003ValidationError{}

// Validate checks the field values on
// RicsubscriptionFailureIes_RicsubscriptionFailureIes004 with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RicsubscriptionFailureIes_RicsubscriptionFailureIes004) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RicsubscriptionFailureIes_RicsubscriptionFailureIes004ValidationError{
				field:  "Id",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetCriticality()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RicsubscriptionFailureIes_RicsubscriptionFailureIes004ValidationError{
				field:  "Criticality",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetType()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RicsubscriptionFailureIes_RicsubscriptionFailureIes004ValidationError{
				field:  "Type",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetPresence()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RicsubscriptionFailureIes_RicsubscriptionFailureIes004ValidationError{
				field:  "Presence",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// RicsubscriptionFailureIes_RicsubscriptionFailureIes004ValidationError is the
// validation error returned by
// RicsubscriptionFailureIes_RicsubscriptionFailureIes004.Validate if the
// designated constraints aren't met.
type RicsubscriptionFailureIes_RicsubscriptionFailureIes004ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RicsubscriptionFailureIes_RicsubscriptionFailureIes004ValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e RicsubscriptionFailureIes_RicsubscriptionFailureIes004ValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e RicsubscriptionFailureIes_RicsubscriptionFailureIes004ValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e RicsubscriptionFailureIes_RicsubscriptionFailureIes004ValidationError) Key() bool {
	return e.key
}

// ErrorName returns error name.
func (e RicsubscriptionFailureIes_RicsubscriptionFailureIes004ValidationError) ErrorName() string {
	return "RicsubscriptionFailureIes_RicsubscriptionFailureIes004ValidationError"
}

// Error satisfies the builtin error interface
func (e RicsubscriptionFailureIes_RicsubscriptionFailureIes004ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRicsubscriptionFailureIes_RicsubscriptionFailureIes004.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RicsubscriptionFailureIes_RicsubscriptionFailureIes004ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RicsubscriptionFailureIes_RicsubscriptionFailureIes004ValidationError{}

// Validate checks the field values on
// RicsubscriptionDeleteRequestIes_RicsubscriptionDeleteRequestIes001 with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RicsubscriptionDeleteRequestIes_RicsubscriptionDeleteRequestIes001) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RicsubscriptionDeleteRequestIes_RicsubscriptionDeleteRequestIes001ValidationError{
				field:  "Id",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetCriticality()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RicsubscriptionDeleteRequestIes_RicsubscriptionDeleteRequestIes001ValidationError{
				field:  "Criticality",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetType()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RicsubscriptionDeleteRequestIes_RicsubscriptionDeleteRequestIes001ValidationError{
				field:  "Type",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetPresence()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RicsubscriptionDeleteRequestIes_RicsubscriptionDeleteRequestIes001ValidationError{
				field:  "Presence",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// RicsubscriptionDeleteRequestIes_RicsubscriptionDeleteRequestIes001ValidationError
// is the validation error returned by
// RicsubscriptionDeleteRequestIes_RicsubscriptionDeleteRequestIes001.Validate
// if the designated constraints aren't met.
type RicsubscriptionDeleteRequestIes_RicsubscriptionDeleteRequestIes001ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RicsubscriptionDeleteRequestIes_RicsubscriptionDeleteRequestIes001ValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e RicsubscriptionDeleteRequestIes_RicsubscriptionDeleteRequestIes001ValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e RicsubscriptionDeleteRequestIes_RicsubscriptionDeleteRequestIes001ValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e RicsubscriptionDeleteRequestIes_RicsubscriptionDeleteRequestIes001ValidationError) Key() bool {
	return e.key
}

// ErrorName returns error name.
func (e RicsubscriptionDeleteRequestIes_RicsubscriptionDeleteRequestIes001ValidationError) ErrorName() string {
	return "RicsubscriptionDeleteRequestIes_RicsubscriptionDeleteRequestIes001ValidationError"
}

// Error satisfies the builtin error interface
func (e RicsubscriptionDeleteRequestIes_RicsubscriptionDeleteRequestIes001ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRicsubscriptionDeleteRequestIes_RicsubscriptionDeleteRequestIes001.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RicsubscriptionDeleteRequestIes_RicsubscriptionDeleteRequestIes001ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RicsubscriptionDeleteRequestIes_RicsubscriptionDeleteRequestIes001ValidationError{}

// Validate checks the field values on
// RicsubscriptionDeleteRequestIes_RicsubscriptionDeleteRequestIes002 with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RicsubscriptionDeleteRequestIes_RicsubscriptionDeleteRequestIes002) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RicsubscriptionDeleteRequestIes_RicsubscriptionDeleteRequestIes002ValidationError{
				field:  "Id",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetCriticality()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RicsubscriptionDeleteRequestIes_RicsubscriptionDeleteRequestIes002ValidationError{
				field:  "Criticality",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetType()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RicsubscriptionDeleteRequestIes_RicsubscriptionDeleteRequestIes002ValidationError{
				field:  "Type",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetPresence()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RicsubscriptionDeleteRequestIes_RicsubscriptionDeleteRequestIes002ValidationError{
				field:  "Presence",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// RicsubscriptionDeleteRequestIes_RicsubscriptionDeleteRequestIes002ValidationError
// is the validation error returned by
// RicsubscriptionDeleteRequestIes_RicsubscriptionDeleteRequestIes002.Validate
// if the designated constraints aren't met.
type RicsubscriptionDeleteRequestIes_RicsubscriptionDeleteRequestIes002ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RicsubscriptionDeleteRequestIes_RicsubscriptionDeleteRequestIes002ValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e RicsubscriptionDeleteRequestIes_RicsubscriptionDeleteRequestIes002ValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e RicsubscriptionDeleteRequestIes_RicsubscriptionDeleteRequestIes002ValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e RicsubscriptionDeleteRequestIes_RicsubscriptionDeleteRequestIes002ValidationError) Key() bool {
	return e.key
}

// ErrorName returns error name.
func (e RicsubscriptionDeleteRequestIes_RicsubscriptionDeleteRequestIes002ValidationError) ErrorName() string {
	return "RicsubscriptionDeleteRequestIes_RicsubscriptionDeleteRequestIes002ValidationError"
}

// Error satisfies the builtin error interface
func (e RicsubscriptionDeleteRequestIes_RicsubscriptionDeleteRequestIes002ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRicsubscriptionDeleteRequestIes_RicsubscriptionDeleteRequestIes002.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RicsubscriptionDeleteRequestIes_RicsubscriptionDeleteRequestIes002ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RicsubscriptionDeleteRequestIes_RicsubscriptionDeleteRequestIes002ValidationError{}

// Validate checks the field values on
// RicsubscriptionDeleteResponseIes_RicsubscriptionDeleteResponseIes001 with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned.
func (m *RicsubscriptionDeleteResponseIes_RicsubscriptionDeleteResponseIes001) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RicsubscriptionDeleteResponseIes_RicsubscriptionDeleteResponseIes001ValidationError{
				field:  "Id",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetCriticality()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RicsubscriptionDeleteResponseIes_RicsubscriptionDeleteResponseIes001ValidationError{
				field:  "Criticality",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetType()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RicsubscriptionDeleteResponseIes_RicsubscriptionDeleteResponseIes001ValidationError{
				field:  "Type",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetPresence()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RicsubscriptionDeleteResponseIes_RicsubscriptionDeleteResponseIes001ValidationError{
				field:  "Presence",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// RicsubscriptionDeleteResponseIes_RicsubscriptionDeleteResponseIes001ValidationError
// is the validation error returned by
// RicsubscriptionDeleteResponseIes_RicsubscriptionDeleteResponseIes001.Validate
// if the designated constraints aren't met.
type RicsubscriptionDeleteResponseIes_RicsubscriptionDeleteResponseIes001ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RicsubscriptionDeleteResponseIes_RicsubscriptionDeleteResponseIes001ValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e RicsubscriptionDeleteResponseIes_RicsubscriptionDeleteResponseIes001ValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e RicsubscriptionDeleteResponseIes_RicsubscriptionDeleteResponseIes001ValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e RicsubscriptionDeleteResponseIes_RicsubscriptionDeleteResponseIes001ValidationError) Key() bool {
	return e.key
}

// ErrorName returns error name.
func (e RicsubscriptionDeleteResponseIes_RicsubscriptionDeleteResponseIes001ValidationError) ErrorName() string {
	return "RicsubscriptionDeleteResponseIes_RicsubscriptionDeleteResponseIes001ValidationError"
}

// Error satisfies the builtin error interface
func (e RicsubscriptionDeleteResponseIes_RicsubscriptionDeleteResponseIes001ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRicsubscriptionDeleteResponseIes_RicsubscriptionDeleteResponseIes001.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RicsubscriptionDeleteResponseIes_RicsubscriptionDeleteResponseIes001ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RicsubscriptionDeleteResponseIes_RicsubscriptionDeleteResponseIes001ValidationError{}

// Validate checks the field values on
// RicsubscriptionDeleteResponseIes_RicsubscriptionDeleteResponseIes002 with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned.
func (m *RicsubscriptionDeleteResponseIes_RicsubscriptionDeleteResponseIes002) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RicsubscriptionDeleteResponseIes_RicsubscriptionDeleteResponseIes002ValidationError{
				field:  "Id",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetCriticality()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RicsubscriptionDeleteResponseIes_RicsubscriptionDeleteResponseIes002ValidationError{
				field:  "Criticality",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetType()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RicsubscriptionDeleteResponseIes_RicsubscriptionDeleteResponseIes002ValidationError{
				field:  "Type",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetPresence()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RicsubscriptionDeleteResponseIes_RicsubscriptionDeleteResponseIes002ValidationError{
				field:  "Presence",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// RicsubscriptionDeleteResponseIes_RicsubscriptionDeleteResponseIes002ValidationError
// is the validation error returned by
// RicsubscriptionDeleteResponseIes_RicsubscriptionDeleteResponseIes002.Validate
// if the designated constraints aren't met.
type RicsubscriptionDeleteResponseIes_RicsubscriptionDeleteResponseIes002ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RicsubscriptionDeleteResponseIes_RicsubscriptionDeleteResponseIes002ValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e RicsubscriptionDeleteResponseIes_RicsubscriptionDeleteResponseIes002ValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e RicsubscriptionDeleteResponseIes_RicsubscriptionDeleteResponseIes002ValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e RicsubscriptionDeleteResponseIes_RicsubscriptionDeleteResponseIes002ValidationError) Key() bool {
	return e.key
}

// ErrorName returns error name.
func (e RicsubscriptionDeleteResponseIes_RicsubscriptionDeleteResponseIes002ValidationError) ErrorName() string {
	return "RicsubscriptionDeleteResponseIes_RicsubscriptionDeleteResponseIes002ValidationError"
}

// Error satisfies the builtin error interface
func (e RicsubscriptionDeleteResponseIes_RicsubscriptionDeleteResponseIes002ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRicsubscriptionDeleteResponseIes_RicsubscriptionDeleteResponseIes002.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RicsubscriptionDeleteResponseIes_RicsubscriptionDeleteResponseIes002ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RicsubscriptionDeleteResponseIes_RicsubscriptionDeleteResponseIes002ValidationError{}

// Validate checks the field values on
// RicsubscriptionDeleteFailureIes_RicsubscriptionDeleteFailureIes001 with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RicsubscriptionDeleteFailureIes_RicsubscriptionDeleteFailureIes001) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RicsubscriptionDeleteFailureIes_RicsubscriptionDeleteFailureIes001ValidationError{
				field:  "Id",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetCriticality()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RicsubscriptionDeleteFailureIes_RicsubscriptionDeleteFailureIes001ValidationError{
				field:  "Criticality",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetType()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RicsubscriptionDeleteFailureIes_RicsubscriptionDeleteFailureIes001ValidationError{
				field:  "Type",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetPresence()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RicsubscriptionDeleteFailureIes_RicsubscriptionDeleteFailureIes001ValidationError{
				field:  "Presence",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// RicsubscriptionDeleteFailureIes_RicsubscriptionDeleteFailureIes001ValidationError
// is the validation error returned by
// RicsubscriptionDeleteFailureIes_RicsubscriptionDeleteFailureIes001.Validate
// if the designated constraints aren't met.
type RicsubscriptionDeleteFailureIes_RicsubscriptionDeleteFailureIes001ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RicsubscriptionDeleteFailureIes_RicsubscriptionDeleteFailureIes001ValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e RicsubscriptionDeleteFailureIes_RicsubscriptionDeleteFailureIes001ValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e RicsubscriptionDeleteFailureIes_RicsubscriptionDeleteFailureIes001ValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e RicsubscriptionDeleteFailureIes_RicsubscriptionDeleteFailureIes001ValidationError) Key() bool {
	return e.key
}

// ErrorName returns error name.
func (e RicsubscriptionDeleteFailureIes_RicsubscriptionDeleteFailureIes001ValidationError) ErrorName() string {
	return "RicsubscriptionDeleteFailureIes_RicsubscriptionDeleteFailureIes001ValidationError"
}

// Error satisfies the builtin error interface
func (e RicsubscriptionDeleteFailureIes_RicsubscriptionDeleteFailureIes001ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRicsubscriptionDeleteFailureIes_RicsubscriptionDeleteFailureIes001.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RicsubscriptionDeleteFailureIes_RicsubscriptionDeleteFailureIes001ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RicsubscriptionDeleteFailureIes_RicsubscriptionDeleteFailureIes001ValidationError{}

// Validate checks the field values on
// RicsubscriptionDeleteFailureIes_RicsubscriptionDeleteFailureIes002 with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RicsubscriptionDeleteFailureIes_RicsubscriptionDeleteFailureIes002) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RicsubscriptionDeleteFailureIes_RicsubscriptionDeleteFailureIes002ValidationError{
				field:  "Id",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetCriticality()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RicsubscriptionDeleteFailureIes_RicsubscriptionDeleteFailureIes002ValidationError{
				field:  "Criticality",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetType()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RicsubscriptionDeleteFailureIes_RicsubscriptionDeleteFailureIes002ValidationError{
				field:  "Type",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetPresence()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RicsubscriptionDeleteFailureIes_RicsubscriptionDeleteFailureIes002ValidationError{
				field:  "Presence",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// RicsubscriptionDeleteFailureIes_RicsubscriptionDeleteFailureIes002ValidationError
// is the validation error returned by
// RicsubscriptionDeleteFailureIes_RicsubscriptionDeleteFailureIes002.Validate
// if the designated constraints aren't met.
type RicsubscriptionDeleteFailureIes_RicsubscriptionDeleteFailureIes002ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RicsubscriptionDeleteFailureIes_RicsubscriptionDeleteFailureIes002ValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e RicsubscriptionDeleteFailureIes_RicsubscriptionDeleteFailureIes002ValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e RicsubscriptionDeleteFailureIes_RicsubscriptionDeleteFailureIes002ValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e RicsubscriptionDeleteFailureIes_RicsubscriptionDeleteFailureIes002ValidationError) Key() bool {
	return e.key
}

// ErrorName returns error name.
func (e RicsubscriptionDeleteFailureIes_RicsubscriptionDeleteFailureIes002ValidationError) ErrorName() string {
	return "RicsubscriptionDeleteFailureIes_RicsubscriptionDeleteFailureIes002ValidationError"
}

// Error satisfies the builtin error interface
func (e RicsubscriptionDeleteFailureIes_RicsubscriptionDeleteFailureIes002ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRicsubscriptionDeleteFailureIes_RicsubscriptionDeleteFailureIes002.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RicsubscriptionDeleteFailureIes_RicsubscriptionDeleteFailureIes002ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RicsubscriptionDeleteFailureIes_RicsubscriptionDeleteFailureIes002ValidationError{}

// Validate checks the field values on
// RicsubscriptionDeleteFailureIes_RicsubscriptionDeleteFailureIes003 with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RicsubscriptionDeleteFailureIes_RicsubscriptionDeleteFailureIes003) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RicsubscriptionDeleteFailureIes_RicsubscriptionDeleteFailureIes003ValidationError{
				field:  "Id",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetCriticality()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RicsubscriptionDeleteFailureIes_RicsubscriptionDeleteFailureIes003ValidationError{
				field:  "Criticality",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetType()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RicsubscriptionDeleteFailureIes_RicsubscriptionDeleteFailureIes003ValidationError{
				field:  "Type",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetPresence()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RicsubscriptionDeleteFailureIes_RicsubscriptionDeleteFailureIes003ValidationError{
				field:  "Presence",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// RicsubscriptionDeleteFailureIes_RicsubscriptionDeleteFailureIes003ValidationError
// is the validation error returned by
// RicsubscriptionDeleteFailureIes_RicsubscriptionDeleteFailureIes003.Validate
// if the designated constraints aren't met.
type RicsubscriptionDeleteFailureIes_RicsubscriptionDeleteFailureIes003ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RicsubscriptionDeleteFailureIes_RicsubscriptionDeleteFailureIes003ValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e RicsubscriptionDeleteFailureIes_RicsubscriptionDeleteFailureIes003ValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e RicsubscriptionDeleteFailureIes_RicsubscriptionDeleteFailureIes003ValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e RicsubscriptionDeleteFailureIes_RicsubscriptionDeleteFailureIes003ValidationError) Key() bool {
	return e.key
}

// ErrorName returns error name.
func (e RicsubscriptionDeleteFailureIes_RicsubscriptionDeleteFailureIes003ValidationError) ErrorName() string {
	return "RicsubscriptionDeleteFailureIes_RicsubscriptionDeleteFailureIes003ValidationError"
}

// Error satisfies the builtin error interface
func (e RicsubscriptionDeleteFailureIes_RicsubscriptionDeleteFailureIes003ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRicsubscriptionDeleteFailureIes_RicsubscriptionDeleteFailureIes003.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RicsubscriptionDeleteFailureIes_RicsubscriptionDeleteFailureIes003ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RicsubscriptionDeleteFailureIes_RicsubscriptionDeleteFailureIes003ValidationError{}

// Validate checks the field values on
// RicsubscriptionDeleteFailureIes_RicsubscriptionDeleteFailureIes004 with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RicsubscriptionDeleteFailureIes_RicsubscriptionDeleteFailureIes004) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RicsubscriptionDeleteFailureIes_RicsubscriptionDeleteFailureIes004ValidationError{
				field:  "Id",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetCriticality()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RicsubscriptionDeleteFailureIes_RicsubscriptionDeleteFailureIes004ValidationError{
				field:  "Criticality",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetType()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RicsubscriptionDeleteFailureIes_RicsubscriptionDeleteFailureIes004ValidationError{
				field:  "Type",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetPresence()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RicsubscriptionDeleteFailureIes_RicsubscriptionDeleteFailureIes004ValidationError{
				field:  "Presence",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// RicsubscriptionDeleteFailureIes_RicsubscriptionDeleteFailureIes004ValidationError
// is the validation error returned by
// RicsubscriptionDeleteFailureIes_RicsubscriptionDeleteFailureIes004.Validate
// if the designated constraints aren't met.
type RicsubscriptionDeleteFailureIes_RicsubscriptionDeleteFailureIes004ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RicsubscriptionDeleteFailureIes_RicsubscriptionDeleteFailureIes004ValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e RicsubscriptionDeleteFailureIes_RicsubscriptionDeleteFailureIes004ValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e RicsubscriptionDeleteFailureIes_RicsubscriptionDeleteFailureIes004ValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e RicsubscriptionDeleteFailureIes_RicsubscriptionDeleteFailureIes004ValidationError) Key() bool {
	return e.key
}

// ErrorName returns error name.
func (e RicsubscriptionDeleteFailureIes_RicsubscriptionDeleteFailureIes004ValidationError) ErrorName() string {
	return "RicsubscriptionDeleteFailureIes_RicsubscriptionDeleteFailureIes004ValidationError"
}

// Error satisfies the builtin error interface
func (e RicsubscriptionDeleteFailureIes_RicsubscriptionDeleteFailureIes004ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRicsubscriptionDeleteFailureIes_RicsubscriptionDeleteFailureIes004.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RicsubscriptionDeleteFailureIes_RicsubscriptionDeleteFailureIes004ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RicsubscriptionDeleteFailureIes_RicsubscriptionDeleteFailureIes004ValidationError{}

// Validate checks the field values on RicindicationIes_RicindicationIes001
// with the rules defined in the proto definition for this message. If any
// rules are violated, an error is returned.
func (m *RicindicationIes_RicindicationIes001) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RicindicationIes_RicindicationIes001ValidationError{
				field:  "Id",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetCriticality()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RicindicationIes_RicindicationIes001ValidationError{
				field:  "Criticality",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetType()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RicindicationIes_RicindicationIes001ValidationError{
				field:  "Type",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetPresence()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RicindicationIes_RicindicationIes001ValidationError{
				field:  "Presence",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// RicindicationIes_RicindicationIes001ValidationError is the validation error
// returned by RicindicationIes_RicindicationIes001.Validate if the designated
// constraints aren't met.
type RicindicationIes_RicindicationIes001ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RicindicationIes_RicindicationIes001ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RicindicationIes_RicindicationIes001ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RicindicationIes_RicindicationIes001ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RicindicationIes_RicindicationIes001ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RicindicationIes_RicindicationIes001ValidationError) ErrorName() string {
	return "RicindicationIes_RicindicationIes001ValidationError"
}

// Error satisfies the builtin error interface
func (e RicindicationIes_RicindicationIes001ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRicindicationIes_RicindicationIes001.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RicindicationIes_RicindicationIes001ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RicindicationIes_RicindicationIes001ValidationError{}

// Validate checks the field values on RicindicationIes_RicindicationIes002
// with the rules defined in the proto definition for this message. If any
// rules are violated, an error is returned.
func (m *RicindicationIes_RicindicationIes002) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RicindicationIes_RicindicationIes002ValidationError{
				field:  "Id",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetCriticality()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RicindicationIes_RicindicationIes002ValidationError{
				field:  "Criticality",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetType()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RicindicationIes_RicindicationIes002ValidationError{
				field:  "Type",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetPresence()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RicindicationIes_RicindicationIes002ValidationError{
				field:  "Presence",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// RicindicationIes_RicindicationIes002ValidationError is the validation error
// returned by RicindicationIes_RicindicationIes002.Validate if the designated
// constraints aren't met.
type RicindicationIes_RicindicationIes002ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RicindicationIes_RicindicationIes002ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RicindicationIes_RicindicationIes002ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RicindicationIes_RicindicationIes002ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RicindicationIes_RicindicationIes002ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RicindicationIes_RicindicationIes002ValidationError) ErrorName() string {
	return "RicindicationIes_RicindicationIes002ValidationError"
}

// Error satisfies the builtin error interface
func (e RicindicationIes_RicindicationIes002ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRicindicationIes_RicindicationIes002.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RicindicationIes_RicindicationIes002ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RicindicationIes_RicindicationIes002ValidationError{}

// Validate checks the field values on RicindicationIes_RicindicationIes003
// with the rules defined in the proto definition for this message. If any
// rules are violated, an error is returned.
func (m *RicindicationIes_RicindicationIes003) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RicindicationIes_RicindicationIes003ValidationError{
				field:  "Id",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetCriticality()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RicindicationIes_RicindicationIes003ValidationError{
				field:  "Criticality",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetType()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RicindicationIes_RicindicationIes003ValidationError{
				field:  "Type",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetPresence()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RicindicationIes_RicindicationIes003ValidationError{
				field:  "Presence",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// RicindicationIes_RicindicationIes003ValidationError is the validation error
// returned by RicindicationIes_RicindicationIes003.Validate if the designated
// constraints aren't met.
type RicindicationIes_RicindicationIes003ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RicindicationIes_RicindicationIes003ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RicindicationIes_RicindicationIes003ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RicindicationIes_RicindicationIes003ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RicindicationIes_RicindicationIes003ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RicindicationIes_RicindicationIes003ValidationError) ErrorName() string {
	return "RicindicationIes_RicindicationIes003ValidationError"
}

// Error satisfies the builtin error interface
func (e RicindicationIes_RicindicationIes003ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRicindicationIes_RicindicationIes003.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RicindicationIes_RicindicationIes003ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RicindicationIes_RicindicationIes003ValidationError{}

// Validate checks the field values on RicindicationIes_RicindicationIes004
// with the rules defined in the proto definition for this message. If any
// rules are violated, an error is returned.
func (m *RicindicationIes_RicindicationIes004) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RicindicationIes_RicindicationIes004ValidationError{
				field:  "Id",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetCriticality()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RicindicationIes_RicindicationIes004ValidationError{
				field:  "Criticality",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetType()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RicindicationIes_RicindicationIes004ValidationError{
				field:  "Type",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetPresence()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RicindicationIes_RicindicationIes004ValidationError{
				field:  "Presence",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// RicindicationIes_RicindicationIes004ValidationError is the validation error
// returned by RicindicationIes_RicindicationIes004.Validate if the designated
// constraints aren't met.
type RicindicationIes_RicindicationIes004ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RicindicationIes_RicindicationIes004ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RicindicationIes_RicindicationIes004ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RicindicationIes_RicindicationIes004ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RicindicationIes_RicindicationIes004ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RicindicationIes_RicindicationIes004ValidationError) ErrorName() string {
	return "RicindicationIes_RicindicationIes004ValidationError"
}

// Error satisfies the builtin error interface
func (e RicindicationIes_RicindicationIes004ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRicindicationIes_RicindicationIes004.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RicindicationIes_RicindicationIes004ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RicindicationIes_RicindicationIes004ValidationError{}

// Validate checks the field values on RicindicationIes_RicindicationIes005
// with the rules defined in the proto definition for this message. If any
// rules are violated, an error is returned.
func (m *RicindicationIes_RicindicationIes005) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RicindicationIes_RicindicationIes005ValidationError{
				field:  "Id",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetCriticality()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RicindicationIes_RicindicationIes005ValidationError{
				field:  "Criticality",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Type

	if v, ok := interface{}(m.GetPresence()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RicindicationIes_RicindicationIes005ValidationError{
				field:  "Presence",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// RicindicationIes_RicindicationIes005ValidationError is the validation error
// returned by RicindicationIes_RicindicationIes005.Validate if the designated
// constraints aren't met.
type RicindicationIes_RicindicationIes005ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RicindicationIes_RicindicationIes005ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RicindicationIes_RicindicationIes005ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RicindicationIes_RicindicationIes005ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RicindicationIes_RicindicationIes005ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RicindicationIes_RicindicationIes005ValidationError) ErrorName() string {
	return "RicindicationIes_RicindicationIes005ValidationError"
}

// Error satisfies the builtin error interface
func (e RicindicationIes_RicindicationIes005ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRicindicationIes_RicindicationIes005.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RicindicationIes_RicindicationIes005ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RicindicationIes_RicindicationIes005ValidationError{}

// Validate checks the field values on RicindicationIes_RicindicationIes006
// with the rules defined in the proto definition for this message. If any
// rules are violated, an error is returned.
func (m *RicindicationIes_RicindicationIes006) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RicindicationIes_RicindicationIes006ValidationError{
				field:  "Id",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetCriticality()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RicindicationIes_RicindicationIes006ValidationError{
				field:  "Criticality",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetType()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RicindicationIes_RicindicationIes006ValidationError{
				field:  "Type",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetPresence()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RicindicationIes_RicindicationIes006ValidationError{
				field:  "Presence",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// RicindicationIes_RicindicationIes006ValidationError is the validation error
// returned by RicindicationIes_RicindicationIes006.Validate if the designated
// constraints aren't met.
type RicindicationIes_RicindicationIes006ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RicindicationIes_RicindicationIes006ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RicindicationIes_RicindicationIes006ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RicindicationIes_RicindicationIes006ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RicindicationIes_RicindicationIes006ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RicindicationIes_RicindicationIes006ValidationError) ErrorName() string {
	return "RicindicationIes_RicindicationIes006ValidationError"
}

// Error satisfies the builtin error interface
func (e RicindicationIes_RicindicationIes006ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRicindicationIes_RicindicationIes006.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RicindicationIes_RicindicationIes006ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RicindicationIes_RicindicationIes006ValidationError{}

// Validate checks the field values on RicindicationIes_RicindicationIes007
// with the rules defined in the proto definition for this message. If any
// rules are violated, an error is returned.
func (m *RicindicationIes_RicindicationIes007) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RicindicationIes_RicindicationIes007ValidationError{
				field:  "Id",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetCriticality()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RicindicationIes_RicindicationIes007ValidationError{
				field:  "Criticality",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetType()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RicindicationIes_RicindicationIes007ValidationError{
				field:  "Type",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetPresence()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RicindicationIes_RicindicationIes007ValidationError{
				field:  "Presence",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// RicindicationIes_RicindicationIes007ValidationError is the validation error
// returned by RicindicationIes_RicindicationIes007.Validate if the designated
// constraints aren't met.
type RicindicationIes_RicindicationIes007ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RicindicationIes_RicindicationIes007ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RicindicationIes_RicindicationIes007ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RicindicationIes_RicindicationIes007ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RicindicationIes_RicindicationIes007ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RicindicationIes_RicindicationIes007ValidationError) ErrorName() string {
	return "RicindicationIes_RicindicationIes007ValidationError"
}

// Error satisfies the builtin error interface
func (e RicindicationIes_RicindicationIes007ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRicindicationIes_RicindicationIes007.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RicindicationIes_RicindicationIes007ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RicindicationIes_RicindicationIes007ValidationError{}

// Validate checks the field values on RicindicationIes_RicindicationIes008
// with the rules defined in the proto definition for this message. If any
// rules are violated, an error is returned.
func (m *RicindicationIes_RicindicationIes008) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RicindicationIes_RicindicationIes008ValidationError{
				field:  "Id",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetCriticality()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RicindicationIes_RicindicationIes008ValidationError{
				field:  "Criticality",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetType()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RicindicationIes_RicindicationIes008ValidationError{
				field:  "Type",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetPresence()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RicindicationIes_RicindicationIes008ValidationError{
				field:  "Presence",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// RicindicationIes_RicindicationIes008ValidationError is the validation error
// returned by RicindicationIes_RicindicationIes008.Validate if the designated
// constraints aren't met.
type RicindicationIes_RicindicationIes008ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RicindicationIes_RicindicationIes008ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RicindicationIes_RicindicationIes008ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RicindicationIes_RicindicationIes008ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RicindicationIes_RicindicationIes008ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RicindicationIes_RicindicationIes008ValidationError) ErrorName() string {
	return "RicindicationIes_RicindicationIes008ValidationError"
}

// Error satisfies the builtin error interface
func (e RicindicationIes_RicindicationIes008ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRicindicationIes_RicindicationIes008.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RicindicationIes_RicindicationIes008ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RicindicationIes_RicindicationIes008ValidationError{}

// Validate checks the field values on
// RiccontrolRequestIes_RiccontrolRequestIes001 with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *RiccontrolRequestIes_RiccontrolRequestIes001) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RiccontrolRequestIes_RiccontrolRequestIes001ValidationError{
				field:  "Id",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetCriticality()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RiccontrolRequestIes_RiccontrolRequestIes001ValidationError{
				field:  "Criticality",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetType()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RiccontrolRequestIes_RiccontrolRequestIes001ValidationError{
				field:  "Type",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetPresence()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RiccontrolRequestIes_RiccontrolRequestIes001ValidationError{
				field:  "Presence",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// RiccontrolRequestIes_RiccontrolRequestIes001ValidationError is the
// validation error returned by
// RiccontrolRequestIes_RiccontrolRequestIes001.Validate if the designated
// constraints aren't met.
type RiccontrolRequestIes_RiccontrolRequestIes001ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RiccontrolRequestIes_RiccontrolRequestIes001ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RiccontrolRequestIes_RiccontrolRequestIes001ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RiccontrolRequestIes_RiccontrolRequestIes001ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RiccontrolRequestIes_RiccontrolRequestIes001ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RiccontrolRequestIes_RiccontrolRequestIes001ValidationError) ErrorName() string {
	return "RiccontrolRequestIes_RiccontrolRequestIes001ValidationError"
}

// Error satisfies the builtin error interface
func (e RiccontrolRequestIes_RiccontrolRequestIes001ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRiccontrolRequestIes_RiccontrolRequestIes001.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RiccontrolRequestIes_RiccontrolRequestIes001ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RiccontrolRequestIes_RiccontrolRequestIes001ValidationError{}

// Validate checks the field values on
// RiccontrolRequestIes_RiccontrolRequestIes002 with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *RiccontrolRequestIes_RiccontrolRequestIes002) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RiccontrolRequestIes_RiccontrolRequestIes002ValidationError{
				field:  "Id",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetCriticality()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RiccontrolRequestIes_RiccontrolRequestIes002ValidationError{
				field:  "Criticality",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetType()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RiccontrolRequestIes_RiccontrolRequestIes002ValidationError{
				field:  "Type",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetPresence()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RiccontrolRequestIes_RiccontrolRequestIes002ValidationError{
				field:  "Presence",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// RiccontrolRequestIes_RiccontrolRequestIes002ValidationError is the
// validation error returned by
// RiccontrolRequestIes_RiccontrolRequestIes002.Validate if the designated
// constraints aren't met.
type RiccontrolRequestIes_RiccontrolRequestIes002ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RiccontrolRequestIes_RiccontrolRequestIes002ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RiccontrolRequestIes_RiccontrolRequestIes002ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RiccontrolRequestIes_RiccontrolRequestIes002ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RiccontrolRequestIes_RiccontrolRequestIes002ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RiccontrolRequestIes_RiccontrolRequestIes002ValidationError) ErrorName() string {
	return "RiccontrolRequestIes_RiccontrolRequestIes002ValidationError"
}

// Error satisfies the builtin error interface
func (e RiccontrolRequestIes_RiccontrolRequestIes002ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRiccontrolRequestIes_RiccontrolRequestIes002.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RiccontrolRequestIes_RiccontrolRequestIes002ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RiccontrolRequestIes_RiccontrolRequestIes002ValidationError{}

// Validate checks the field values on
// RiccontrolRequestIes_RiccontrolRequestIes003 with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *RiccontrolRequestIes_RiccontrolRequestIes003) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RiccontrolRequestIes_RiccontrolRequestIes003ValidationError{
				field:  "Id",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetCriticality()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RiccontrolRequestIes_RiccontrolRequestIes003ValidationError{
				field:  "Criticality",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetType()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RiccontrolRequestIes_RiccontrolRequestIes003ValidationError{
				field:  "Type",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetPresence()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RiccontrolRequestIes_RiccontrolRequestIes003ValidationError{
				field:  "Presence",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// RiccontrolRequestIes_RiccontrolRequestIes003ValidationError is the
// validation error returned by
// RiccontrolRequestIes_RiccontrolRequestIes003.Validate if the designated
// constraints aren't met.
type RiccontrolRequestIes_RiccontrolRequestIes003ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RiccontrolRequestIes_RiccontrolRequestIes003ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RiccontrolRequestIes_RiccontrolRequestIes003ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RiccontrolRequestIes_RiccontrolRequestIes003ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RiccontrolRequestIes_RiccontrolRequestIes003ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RiccontrolRequestIes_RiccontrolRequestIes003ValidationError) ErrorName() string {
	return "RiccontrolRequestIes_RiccontrolRequestIes003ValidationError"
}

// Error satisfies the builtin error interface
func (e RiccontrolRequestIes_RiccontrolRequestIes003ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRiccontrolRequestIes_RiccontrolRequestIes003.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RiccontrolRequestIes_RiccontrolRequestIes003ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RiccontrolRequestIes_RiccontrolRequestIes003ValidationError{}

// Validate checks the field values on
// RiccontrolRequestIes_RiccontrolRequestIes004 with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *RiccontrolRequestIes_RiccontrolRequestIes004) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RiccontrolRequestIes_RiccontrolRequestIes004ValidationError{
				field:  "Id",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetCriticality()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RiccontrolRequestIes_RiccontrolRequestIes004ValidationError{
				field:  "Criticality",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetType()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RiccontrolRequestIes_RiccontrolRequestIes004ValidationError{
				field:  "Type",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetPresence()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RiccontrolRequestIes_RiccontrolRequestIes004ValidationError{
				field:  "Presence",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// RiccontrolRequestIes_RiccontrolRequestIes004ValidationError is the
// validation error returned by
// RiccontrolRequestIes_RiccontrolRequestIes004.Validate if the designated
// constraints aren't met.
type RiccontrolRequestIes_RiccontrolRequestIes004ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RiccontrolRequestIes_RiccontrolRequestIes004ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RiccontrolRequestIes_RiccontrolRequestIes004ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RiccontrolRequestIes_RiccontrolRequestIes004ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RiccontrolRequestIes_RiccontrolRequestIes004ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RiccontrolRequestIes_RiccontrolRequestIes004ValidationError) ErrorName() string {
	return "RiccontrolRequestIes_RiccontrolRequestIes004ValidationError"
}

// Error satisfies the builtin error interface
func (e RiccontrolRequestIes_RiccontrolRequestIes004ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRiccontrolRequestIes_RiccontrolRequestIes004.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RiccontrolRequestIes_RiccontrolRequestIes004ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RiccontrolRequestIes_RiccontrolRequestIes004ValidationError{}

// Validate checks the field values on
// RiccontrolRequestIes_RiccontrolRequestIes005 with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *RiccontrolRequestIes_RiccontrolRequestIes005) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RiccontrolRequestIes_RiccontrolRequestIes005ValidationError{
				field:  "Id",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetCriticality()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RiccontrolRequestIes_RiccontrolRequestIes005ValidationError{
				field:  "Criticality",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetType()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RiccontrolRequestIes_RiccontrolRequestIes005ValidationError{
				field:  "Type",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetPresence()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RiccontrolRequestIes_RiccontrolRequestIes005ValidationError{
				field:  "Presence",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// RiccontrolRequestIes_RiccontrolRequestIes005ValidationError is the
// validation error returned by
// RiccontrolRequestIes_RiccontrolRequestIes005.Validate if the designated
// constraints aren't met.
type RiccontrolRequestIes_RiccontrolRequestIes005ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RiccontrolRequestIes_RiccontrolRequestIes005ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RiccontrolRequestIes_RiccontrolRequestIes005ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RiccontrolRequestIes_RiccontrolRequestIes005ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RiccontrolRequestIes_RiccontrolRequestIes005ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RiccontrolRequestIes_RiccontrolRequestIes005ValidationError) ErrorName() string {
	return "RiccontrolRequestIes_RiccontrolRequestIes005ValidationError"
}

// Error satisfies the builtin error interface
func (e RiccontrolRequestIes_RiccontrolRequestIes005ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRiccontrolRequestIes_RiccontrolRequestIes005.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RiccontrolRequestIes_RiccontrolRequestIes005ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RiccontrolRequestIes_RiccontrolRequestIes005ValidationError{}

// Validate checks the field values on
// RiccontrolRequestIes_RiccontrolRequestIes006 with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *RiccontrolRequestIes_RiccontrolRequestIes006) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RiccontrolRequestIes_RiccontrolRequestIes006ValidationError{
				field:  "Id",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetCriticality()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RiccontrolRequestIes_RiccontrolRequestIes006ValidationError{
				field:  "Criticality",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Type

	if v, ok := interface{}(m.GetPresence()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RiccontrolRequestIes_RiccontrolRequestIes006ValidationError{
				field:  "Presence",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// RiccontrolRequestIes_RiccontrolRequestIes006ValidationError is the
// validation error returned by
// RiccontrolRequestIes_RiccontrolRequestIes006.Validate if the designated
// constraints aren't met.
type RiccontrolRequestIes_RiccontrolRequestIes006ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RiccontrolRequestIes_RiccontrolRequestIes006ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RiccontrolRequestIes_RiccontrolRequestIes006ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RiccontrolRequestIes_RiccontrolRequestIes006ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RiccontrolRequestIes_RiccontrolRequestIes006ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RiccontrolRequestIes_RiccontrolRequestIes006ValidationError) ErrorName() string {
	return "RiccontrolRequestIes_RiccontrolRequestIes006ValidationError"
}

// Error satisfies the builtin error interface
func (e RiccontrolRequestIes_RiccontrolRequestIes006ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRiccontrolRequestIes_RiccontrolRequestIes006.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RiccontrolRequestIes_RiccontrolRequestIes006ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RiccontrolRequestIes_RiccontrolRequestIes006ValidationError{}

// Validate checks the field values on
// RiccontrolAcknowledgeIes_RiccontrolAcknowledgeIes001 with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *RiccontrolAcknowledgeIes_RiccontrolAcknowledgeIes001) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RiccontrolAcknowledgeIes_RiccontrolAcknowledgeIes001ValidationError{
				field:  "Id",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetCriticality()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RiccontrolAcknowledgeIes_RiccontrolAcknowledgeIes001ValidationError{
				field:  "Criticality",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetType()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RiccontrolAcknowledgeIes_RiccontrolAcknowledgeIes001ValidationError{
				field:  "Type",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetPresence()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RiccontrolAcknowledgeIes_RiccontrolAcknowledgeIes001ValidationError{
				field:  "Presence",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// RiccontrolAcknowledgeIes_RiccontrolAcknowledgeIes001ValidationError is the
// validation error returned by
// RiccontrolAcknowledgeIes_RiccontrolAcknowledgeIes001.Validate if the
// designated constraints aren't met.
type RiccontrolAcknowledgeIes_RiccontrolAcknowledgeIes001ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RiccontrolAcknowledgeIes_RiccontrolAcknowledgeIes001ValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e RiccontrolAcknowledgeIes_RiccontrolAcknowledgeIes001ValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e RiccontrolAcknowledgeIes_RiccontrolAcknowledgeIes001ValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e RiccontrolAcknowledgeIes_RiccontrolAcknowledgeIes001ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RiccontrolAcknowledgeIes_RiccontrolAcknowledgeIes001ValidationError) ErrorName() string {
	return "RiccontrolAcknowledgeIes_RiccontrolAcknowledgeIes001ValidationError"
}

// Error satisfies the builtin error interface
func (e RiccontrolAcknowledgeIes_RiccontrolAcknowledgeIes001ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRiccontrolAcknowledgeIes_RiccontrolAcknowledgeIes001.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RiccontrolAcknowledgeIes_RiccontrolAcknowledgeIes001ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RiccontrolAcknowledgeIes_RiccontrolAcknowledgeIes001ValidationError{}

// Validate checks the field values on
// RiccontrolAcknowledgeIes_RiccontrolAcknowledgeIes002 with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *RiccontrolAcknowledgeIes_RiccontrolAcknowledgeIes002) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RiccontrolAcknowledgeIes_RiccontrolAcknowledgeIes002ValidationError{
				field:  "Id",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetCriticality()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RiccontrolAcknowledgeIes_RiccontrolAcknowledgeIes002ValidationError{
				field:  "Criticality",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetType()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RiccontrolAcknowledgeIes_RiccontrolAcknowledgeIes002ValidationError{
				field:  "Type",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetPresence()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RiccontrolAcknowledgeIes_RiccontrolAcknowledgeIes002ValidationError{
				field:  "Presence",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// RiccontrolAcknowledgeIes_RiccontrolAcknowledgeIes002ValidationError is the
// validation error returned by
// RiccontrolAcknowledgeIes_RiccontrolAcknowledgeIes002.Validate if the
// designated constraints aren't met.
type RiccontrolAcknowledgeIes_RiccontrolAcknowledgeIes002ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RiccontrolAcknowledgeIes_RiccontrolAcknowledgeIes002ValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e RiccontrolAcknowledgeIes_RiccontrolAcknowledgeIes002ValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e RiccontrolAcknowledgeIes_RiccontrolAcknowledgeIes002ValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e RiccontrolAcknowledgeIes_RiccontrolAcknowledgeIes002ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RiccontrolAcknowledgeIes_RiccontrolAcknowledgeIes002ValidationError) ErrorName() string {
	return "RiccontrolAcknowledgeIes_RiccontrolAcknowledgeIes002ValidationError"
}

// Error satisfies the builtin error interface
func (e RiccontrolAcknowledgeIes_RiccontrolAcknowledgeIes002ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRiccontrolAcknowledgeIes_RiccontrolAcknowledgeIes002.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RiccontrolAcknowledgeIes_RiccontrolAcknowledgeIes002ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RiccontrolAcknowledgeIes_RiccontrolAcknowledgeIes002ValidationError{}

// Validate checks the field values on
// RiccontrolAcknowledgeIes_RiccontrolAcknowledgeIes003 with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *RiccontrolAcknowledgeIes_RiccontrolAcknowledgeIes003) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RiccontrolAcknowledgeIes_RiccontrolAcknowledgeIes003ValidationError{
				field:  "Id",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetCriticality()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RiccontrolAcknowledgeIes_RiccontrolAcknowledgeIes003ValidationError{
				field:  "Criticality",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetType()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RiccontrolAcknowledgeIes_RiccontrolAcknowledgeIes003ValidationError{
				field:  "Type",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetPresence()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RiccontrolAcknowledgeIes_RiccontrolAcknowledgeIes003ValidationError{
				field:  "Presence",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// RiccontrolAcknowledgeIes_RiccontrolAcknowledgeIes003ValidationError is the
// validation error returned by
// RiccontrolAcknowledgeIes_RiccontrolAcknowledgeIes003.Validate if the
// designated constraints aren't met.
type RiccontrolAcknowledgeIes_RiccontrolAcknowledgeIes003ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RiccontrolAcknowledgeIes_RiccontrolAcknowledgeIes003ValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e RiccontrolAcknowledgeIes_RiccontrolAcknowledgeIes003ValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e RiccontrolAcknowledgeIes_RiccontrolAcknowledgeIes003ValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e RiccontrolAcknowledgeIes_RiccontrolAcknowledgeIes003ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RiccontrolAcknowledgeIes_RiccontrolAcknowledgeIes003ValidationError) ErrorName() string {
	return "RiccontrolAcknowledgeIes_RiccontrolAcknowledgeIes003ValidationError"
}

// Error satisfies the builtin error interface
func (e RiccontrolAcknowledgeIes_RiccontrolAcknowledgeIes003ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRiccontrolAcknowledgeIes_RiccontrolAcknowledgeIes003.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RiccontrolAcknowledgeIes_RiccontrolAcknowledgeIes003ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RiccontrolAcknowledgeIes_RiccontrolAcknowledgeIes003ValidationError{}

// Validate checks the field values on
// RiccontrolAcknowledgeIes_RiccontrolAcknowledgeIes004 with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *RiccontrolAcknowledgeIes_RiccontrolAcknowledgeIes004) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RiccontrolAcknowledgeIes_RiccontrolAcknowledgeIes004ValidationError{
				field:  "Id",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetCriticality()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RiccontrolAcknowledgeIes_RiccontrolAcknowledgeIes004ValidationError{
				field:  "Criticality",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Type

	if v, ok := interface{}(m.GetPresence()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RiccontrolAcknowledgeIes_RiccontrolAcknowledgeIes004ValidationError{
				field:  "Presence",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// RiccontrolAcknowledgeIes_RiccontrolAcknowledgeIes004ValidationError is the
// validation error returned by
// RiccontrolAcknowledgeIes_RiccontrolAcknowledgeIes004.Validate if the
// designated constraints aren't met.
type RiccontrolAcknowledgeIes_RiccontrolAcknowledgeIes004ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RiccontrolAcknowledgeIes_RiccontrolAcknowledgeIes004ValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e RiccontrolAcknowledgeIes_RiccontrolAcknowledgeIes004ValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e RiccontrolAcknowledgeIes_RiccontrolAcknowledgeIes004ValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e RiccontrolAcknowledgeIes_RiccontrolAcknowledgeIes004ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RiccontrolAcknowledgeIes_RiccontrolAcknowledgeIes004ValidationError) ErrorName() string {
	return "RiccontrolAcknowledgeIes_RiccontrolAcknowledgeIes004ValidationError"
}

// Error satisfies the builtin error interface
func (e RiccontrolAcknowledgeIes_RiccontrolAcknowledgeIes004ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRiccontrolAcknowledgeIes_RiccontrolAcknowledgeIes004.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RiccontrolAcknowledgeIes_RiccontrolAcknowledgeIes004ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RiccontrolAcknowledgeIes_RiccontrolAcknowledgeIes004ValidationError{}

// Validate checks the field values on
// RiccontrolAcknowledgeIes_RiccontrolAcknowledgeIes005 with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *RiccontrolAcknowledgeIes_RiccontrolAcknowledgeIes005) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RiccontrolAcknowledgeIes_RiccontrolAcknowledgeIes005ValidationError{
				field:  "Id",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetCriticality()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RiccontrolAcknowledgeIes_RiccontrolAcknowledgeIes005ValidationError{
				field:  "Criticality",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetType()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RiccontrolAcknowledgeIes_RiccontrolAcknowledgeIes005ValidationError{
				field:  "Type",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetPresence()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RiccontrolAcknowledgeIes_RiccontrolAcknowledgeIes005ValidationError{
				field:  "Presence",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// RiccontrolAcknowledgeIes_RiccontrolAcknowledgeIes005ValidationError is the
// validation error returned by
// RiccontrolAcknowledgeIes_RiccontrolAcknowledgeIes005.Validate if the
// designated constraints aren't met.
type RiccontrolAcknowledgeIes_RiccontrolAcknowledgeIes005ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RiccontrolAcknowledgeIes_RiccontrolAcknowledgeIes005ValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e RiccontrolAcknowledgeIes_RiccontrolAcknowledgeIes005ValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e RiccontrolAcknowledgeIes_RiccontrolAcknowledgeIes005ValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e RiccontrolAcknowledgeIes_RiccontrolAcknowledgeIes005ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RiccontrolAcknowledgeIes_RiccontrolAcknowledgeIes005ValidationError) ErrorName() string {
	return "RiccontrolAcknowledgeIes_RiccontrolAcknowledgeIes005ValidationError"
}

// Error satisfies the builtin error interface
func (e RiccontrolAcknowledgeIes_RiccontrolAcknowledgeIes005ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRiccontrolAcknowledgeIes_RiccontrolAcknowledgeIes005.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RiccontrolAcknowledgeIes_RiccontrolAcknowledgeIes005ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RiccontrolAcknowledgeIes_RiccontrolAcknowledgeIes005ValidationError{}

// Validate checks the field values on
// RiccontrolFailureIes_RiccontrolFailureIes001 with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *RiccontrolFailureIes_RiccontrolFailureIes001) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RiccontrolFailureIes_RiccontrolFailureIes001ValidationError{
				field:  "Id",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetCriticality()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RiccontrolFailureIes_RiccontrolFailureIes001ValidationError{
				field:  "Criticality",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetType()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RiccontrolFailureIes_RiccontrolFailureIes001ValidationError{
				field:  "Type",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetPresence()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RiccontrolFailureIes_RiccontrolFailureIes001ValidationError{
				field:  "Presence",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// RiccontrolFailureIes_RiccontrolFailureIes001ValidationError is the
// validation error returned by
// RiccontrolFailureIes_RiccontrolFailureIes001.Validate if the designated
// constraints aren't met.
type RiccontrolFailureIes_RiccontrolFailureIes001ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RiccontrolFailureIes_RiccontrolFailureIes001ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RiccontrolFailureIes_RiccontrolFailureIes001ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RiccontrolFailureIes_RiccontrolFailureIes001ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RiccontrolFailureIes_RiccontrolFailureIes001ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RiccontrolFailureIes_RiccontrolFailureIes001ValidationError) ErrorName() string {
	return "RiccontrolFailureIes_RiccontrolFailureIes001ValidationError"
}

// Error satisfies the builtin error interface
func (e RiccontrolFailureIes_RiccontrolFailureIes001ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRiccontrolFailureIes_RiccontrolFailureIes001.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RiccontrolFailureIes_RiccontrolFailureIes001ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RiccontrolFailureIes_RiccontrolFailureIes001ValidationError{}

// Validate checks the field values on
// RiccontrolFailureIes_RiccontrolFailureIes002 with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *RiccontrolFailureIes_RiccontrolFailureIes002) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RiccontrolFailureIes_RiccontrolFailureIes002ValidationError{
				field:  "Id",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetCriticality()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RiccontrolFailureIes_RiccontrolFailureIes002ValidationError{
				field:  "Criticality",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetType()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RiccontrolFailureIes_RiccontrolFailureIes002ValidationError{
				field:  "Type",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetPresence()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RiccontrolFailureIes_RiccontrolFailureIes002ValidationError{
				field:  "Presence",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// RiccontrolFailureIes_RiccontrolFailureIes002ValidationError is the
// validation error returned by
// RiccontrolFailureIes_RiccontrolFailureIes002.Validate if the designated
// constraints aren't met.
type RiccontrolFailureIes_RiccontrolFailureIes002ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RiccontrolFailureIes_RiccontrolFailureIes002ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RiccontrolFailureIes_RiccontrolFailureIes002ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RiccontrolFailureIes_RiccontrolFailureIes002ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RiccontrolFailureIes_RiccontrolFailureIes002ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RiccontrolFailureIes_RiccontrolFailureIes002ValidationError) ErrorName() string {
	return "RiccontrolFailureIes_RiccontrolFailureIes002ValidationError"
}

// Error satisfies the builtin error interface
func (e RiccontrolFailureIes_RiccontrolFailureIes002ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRiccontrolFailureIes_RiccontrolFailureIes002.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RiccontrolFailureIes_RiccontrolFailureIes002ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RiccontrolFailureIes_RiccontrolFailureIes002ValidationError{}

// Validate checks the field values on
// RiccontrolFailureIes_RiccontrolFailureIes003 with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *RiccontrolFailureIes_RiccontrolFailureIes003) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RiccontrolFailureIes_RiccontrolFailureIes003ValidationError{
				field:  "Id",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetCriticality()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RiccontrolFailureIes_RiccontrolFailureIes003ValidationError{
				field:  "Criticality",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetType()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RiccontrolFailureIes_RiccontrolFailureIes003ValidationError{
				field:  "Type",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetPresence()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RiccontrolFailureIes_RiccontrolFailureIes003ValidationError{
				field:  "Presence",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// RiccontrolFailureIes_RiccontrolFailureIes003ValidationError is the
// validation error returned by
// RiccontrolFailureIes_RiccontrolFailureIes003.Validate if the designated
// constraints aren't met.
type RiccontrolFailureIes_RiccontrolFailureIes003ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RiccontrolFailureIes_RiccontrolFailureIes003ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RiccontrolFailureIes_RiccontrolFailureIes003ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RiccontrolFailureIes_RiccontrolFailureIes003ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RiccontrolFailureIes_RiccontrolFailureIes003ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RiccontrolFailureIes_RiccontrolFailureIes003ValidationError) ErrorName() string {
	return "RiccontrolFailureIes_RiccontrolFailureIes003ValidationError"
}

// Error satisfies the builtin error interface
func (e RiccontrolFailureIes_RiccontrolFailureIes003ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRiccontrolFailureIes_RiccontrolFailureIes003.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RiccontrolFailureIes_RiccontrolFailureIes003ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RiccontrolFailureIes_RiccontrolFailureIes003ValidationError{}

// Validate checks the field values on
// RiccontrolFailureIes_RiccontrolFailureIes004 with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *RiccontrolFailureIes_RiccontrolFailureIes004) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RiccontrolFailureIes_RiccontrolFailureIes004ValidationError{
				field:  "Id",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetCriticality()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RiccontrolFailureIes_RiccontrolFailureIes004ValidationError{
				field:  "Criticality",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetType()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RiccontrolFailureIes_RiccontrolFailureIes004ValidationError{
				field:  "Type",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetPresence()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RiccontrolFailureIes_RiccontrolFailureIes004ValidationError{
				field:  "Presence",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// RiccontrolFailureIes_RiccontrolFailureIes004ValidationError is the
// validation error returned by
// RiccontrolFailureIes_RiccontrolFailureIes004.Validate if the designated
// constraints aren't met.
type RiccontrolFailureIes_RiccontrolFailureIes004ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RiccontrolFailureIes_RiccontrolFailureIes004ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RiccontrolFailureIes_RiccontrolFailureIes004ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RiccontrolFailureIes_RiccontrolFailureIes004ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RiccontrolFailureIes_RiccontrolFailureIes004ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RiccontrolFailureIes_RiccontrolFailureIes004ValidationError) ErrorName() string {
	return "RiccontrolFailureIes_RiccontrolFailureIes004ValidationError"
}

// Error satisfies the builtin error interface
func (e RiccontrolFailureIes_RiccontrolFailureIes004ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRiccontrolFailureIes_RiccontrolFailureIes004.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RiccontrolFailureIes_RiccontrolFailureIes004ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RiccontrolFailureIes_RiccontrolFailureIes004ValidationError{}

// Validate checks the field values on
// RiccontrolFailureIes_RiccontrolFailureIes005 with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *RiccontrolFailureIes_RiccontrolFailureIes005) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RiccontrolFailureIes_RiccontrolFailureIes005ValidationError{
				field:  "Id",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetCriticality()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RiccontrolFailureIes_RiccontrolFailureIes005ValidationError{
				field:  "Criticality",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetType()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RiccontrolFailureIes_RiccontrolFailureIes005ValidationError{
				field:  "Type",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetPresence()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RiccontrolFailureIes_RiccontrolFailureIes005ValidationError{
				field:  "Presence",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// RiccontrolFailureIes_RiccontrolFailureIes005ValidationError is the
// validation error returned by
// RiccontrolFailureIes_RiccontrolFailureIes005.Validate if the designated
// constraints aren't met.
type RiccontrolFailureIes_RiccontrolFailureIes005ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RiccontrolFailureIes_RiccontrolFailureIes005ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RiccontrolFailureIes_RiccontrolFailureIes005ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RiccontrolFailureIes_RiccontrolFailureIes005ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RiccontrolFailureIes_RiccontrolFailureIes005ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RiccontrolFailureIes_RiccontrolFailureIes005ValidationError) ErrorName() string {
	return "RiccontrolFailureIes_RiccontrolFailureIes005ValidationError"
}

// Error satisfies the builtin error interface
func (e RiccontrolFailureIes_RiccontrolFailureIes005ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRiccontrolFailureIes_RiccontrolFailureIes005.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RiccontrolFailureIes_RiccontrolFailureIes005ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RiccontrolFailureIes_RiccontrolFailureIes005ValidationError{}

// Validate checks the field values on ErrorIndicationIes_ErrorIndicationIes001
// with the rules defined in the proto definition for this message. If any
// rules are violated, an error is returned.
func (m *ErrorIndicationIes_ErrorIndicationIes001) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ErrorIndicationIes_ErrorIndicationIes001ValidationError{
				field:  "Id",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetCriticality()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ErrorIndicationIes_ErrorIndicationIes001ValidationError{
				field:  "Criticality",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetType()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ErrorIndicationIes_ErrorIndicationIes001ValidationError{
				field:  "Type",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetPresence()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ErrorIndicationIes_ErrorIndicationIes001ValidationError{
				field:  "Presence",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ErrorIndicationIes_ErrorIndicationIes001ValidationError is the validation
// error returned by ErrorIndicationIes_ErrorIndicationIes001.Validate if the
// designated constraints aren't met.
type ErrorIndicationIes_ErrorIndicationIes001ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ErrorIndicationIes_ErrorIndicationIes001ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ErrorIndicationIes_ErrorIndicationIes001ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ErrorIndicationIes_ErrorIndicationIes001ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ErrorIndicationIes_ErrorIndicationIes001ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ErrorIndicationIes_ErrorIndicationIes001ValidationError) ErrorName() string {
	return "ErrorIndicationIes_ErrorIndicationIes001ValidationError"
}

// Error satisfies the builtin error interface
func (e ErrorIndicationIes_ErrorIndicationIes001ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sErrorIndicationIes_ErrorIndicationIes001.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ErrorIndicationIes_ErrorIndicationIes001ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ErrorIndicationIes_ErrorIndicationIes001ValidationError{}

// Validate checks the field values on ErrorIndicationIes_ErrorIndicationIes002
// with the rules defined in the proto definition for this message. If any
// rules are violated, an error is returned.
func (m *ErrorIndicationIes_ErrorIndicationIes002) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ErrorIndicationIes_ErrorIndicationIes002ValidationError{
				field:  "Id",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetCriticality()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ErrorIndicationIes_ErrorIndicationIes002ValidationError{
				field:  "Criticality",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetType()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ErrorIndicationIes_ErrorIndicationIes002ValidationError{
				field:  "Type",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetPresence()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ErrorIndicationIes_ErrorIndicationIes002ValidationError{
				field:  "Presence",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ErrorIndicationIes_ErrorIndicationIes002ValidationError is the validation
// error returned by ErrorIndicationIes_ErrorIndicationIes002.Validate if the
// designated constraints aren't met.
type ErrorIndicationIes_ErrorIndicationIes002ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ErrorIndicationIes_ErrorIndicationIes002ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ErrorIndicationIes_ErrorIndicationIes002ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ErrorIndicationIes_ErrorIndicationIes002ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ErrorIndicationIes_ErrorIndicationIes002ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ErrorIndicationIes_ErrorIndicationIes002ValidationError) ErrorName() string {
	return "ErrorIndicationIes_ErrorIndicationIes002ValidationError"
}

// Error satisfies the builtin error interface
func (e ErrorIndicationIes_ErrorIndicationIes002ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sErrorIndicationIes_ErrorIndicationIes002.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ErrorIndicationIes_ErrorIndicationIes002ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ErrorIndicationIes_ErrorIndicationIes002ValidationError{}

// Validate checks the field values on ErrorIndicationIes_ErrorIndicationIes003
// with the rules defined in the proto definition for this message. If any
// rules are violated, an error is returned.
func (m *ErrorIndicationIes_ErrorIndicationIes003) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ErrorIndicationIes_ErrorIndicationIes003ValidationError{
				field:  "Id",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetCriticality()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ErrorIndicationIes_ErrorIndicationIes003ValidationError{
				field:  "Criticality",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetType()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ErrorIndicationIes_ErrorIndicationIes003ValidationError{
				field:  "Type",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetPresence()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ErrorIndicationIes_ErrorIndicationIes003ValidationError{
				field:  "Presence",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ErrorIndicationIes_ErrorIndicationIes003ValidationError is the validation
// error returned by ErrorIndicationIes_ErrorIndicationIes003.Validate if the
// designated constraints aren't met.
type ErrorIndicationIes_ErrorIndicationIes003ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ErrorIndicationIes_ErrorIndicationIes003ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ErrorIndicationIes_ErrorIndicationIes003ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ErrorIndicationIes_ErrorIndicationIes003ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ErrorIndicationIes_ErrorIndicationIes003ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ErrorIndicationIes_ErrorIndicationIes003ValidationError) ErrorName() string {
	return "ErrorIndicationIes_ErrorIndicationIes003ValidationError"
}

// Error satisfies the builtin error interface
func (e ErrorIndicationIes_ErrorIndicationIes003ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sErrorIndicationIes_ErrorIndicationIes003.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ErrorIndicationIes_ErrorIndicationIes003ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ErrorIndicationIes_ErrorIndicationIes003ValidationError{}

// Validate checks the field values on ErrorIndicationIes_ErrorIndicationIes004
// with the rules defined in the proto definition for this message. If any
// rules are violated, an error is returned.
func (m *ErrorIndicationIes_ErrorIndicationIes004) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ErrorIndicationIes_ErrorIndicationIes004ValidationError{
				field:  "Id",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetCriticality()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ErrorIndicationIes_ErrorIndicationIes004ValidationError{
				field:  "Criticality",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetType()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ErrorIndicationIes_ErrorIndicationIes004ValidationError{
				field:  "Type",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetPresence()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ErrorIndicationIes_ErrorIndicationIes004ValidationError{
				field:  "Presence",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ErrorIndicationIes_ErrorIndicationIes004ValidationError is the validation
// error returned by ErrorIndicationIes_ErrorIndicationIes004.Validate if the
// designated constraints aren't met.
type ErrorIndicationIes_ErrorIndicationIes004ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ErrorIndicationIes_ErrorIndicationIes004ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ErrorIndicationIes_ErrorIndicationIes004ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ErrorIndicationIes_ErrorIndicationIes004ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ErrorIndicationIes_ErrorIndicationIes004ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ErrorIndicationIes_ErrorIndicationIes004ValidationError) ErrorName() string {
	return "ErrorIndicationIes_ErrorIndicationIes004ValidationError"
}

// Error satisfies the builtin error interface
func (e ErrorIndicationIes_ErrorIndicationIes004ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sErrorIndicationIes_ErrorIndicationIes004.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ErrorIndicationIes_ErrorIndicationIes004ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ErrorIndicationIes_ErrorIndicationIes004ValidationError{}

// Validate checks the field values on E2SetupRequestIes_E2SetupRequestIes001
// with the rules defined in the proto definition for this message. If any
// rules are violated, an error is returned.
func (m *E2SetupRequestIes_E2SetupRequestIes001) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return E2SetupRequestIes_E2SetupRequestIes001ValidationError{
				field:  "Id",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetCriticality()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return E2SetupRequestIes_E2SetupRequestIes001ValidationError{
				field:  "Criticality",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetType()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return E2SetupRequestIes_E2SetupRequestIes001ValidationError{
				field:  "Type",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetPresence()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return E2SetupRequestIes_E2SetupRequestIes001ValidationError{
				field:  "Presence",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// E2SetupRequestIes_E2SetupRequestIes001ValidationError is the validation
// error returned by E2SetupRequestIes_E2SetupRequestIes001.Validate if the
// designated constraints aren't met.
type E2SetupRequestIes_E2SetupRequestIes001ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e E2SetupRequestIes_E2SetupRequestIes001ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e E2SetupRequestIes_E2SetupRequestIes001ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e E2SetupRequestIes_E2SetupRequestIes001ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e E2SetupRequestIes_E2SetupRequestIes001ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e E2SetupRequestIes_E2SetupRequestIes001ValidationError) ErrorName() string {
	return "E2SetupRequestIes_E2SetupRequestIes001ValidationError"
}

// Error satisfies the builtin error interface
func (e E2SetupRequestIes_E2SetupRequestIes001ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sE2SetupRequestIes_E2SetupRequestIes001.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = E2SetupRequestIes_E2SetupRequestIes001ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = E2SetupRequestIes_E2SetupRequestIes001ValidationError{}

// Validate checks the field values on E2SetupRequestIes_E2SetupRequestIes002
// with the rules defined in the proto definition for this message. If any
// rules are violated, an error is returned.
func (m *E2SetupRequestIes_E2SetupRequestIes002) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return E2SetupRequestIes_E2SetupRequestIes002ValidationError{
				field:  "Id",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetCriticality()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return E2SetupRequestIes_E2SetupRequestIes002ValidationError{
				field:  "Criticality",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetType()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return E2SetupRequestIes_E2SetupRequestIes002ValidationError{
				field:  "Type",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetPresence()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return E2SetupRequestIes_E2SetupRequestIes002ValidationError{
				field:  "Presence",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// E2SetupRequestIes_E2SetupRequestIes002ValidationError is the validation
// error returned by E2SetupRequestIes_E2SetupRequestIes002.Validate if the
// designated constraints aren't met.
type E2SetupRequestIes_E2SetupRequestIes002ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e E2SetupRequestIes_E2SetupRequestIes002ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e E2SetupRequestIes_E2SetupRequestIes002ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e E2SetupRequestIes_E2SetupRequestIes002ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e E2SetupRequestIes_E2SetupRequestIes002ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e E2SetupRequestIes_E2SetupRequestIes002ValidationError) ErrorName() string {
	return "E2SetupRequestIes_E2SetupRequestIes002ValidationError"
}

// Error satisfies the builtin error interface
func (e E2SetupRequestIes_E2SetupRequestIes002ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sE2SetupRequestIes_E2SetupRequestIes002.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = E2SetupRequestIes_E2SetupRequestIes002ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = E2SetupRequestIes_E2SetupRequestIes002ValidationError{}

// Validate checks the field values on E2SetupResponseIes_E2SetupResponseIes001
// with the rules defined in the proto definition for this message. If any
// rules are violated, an error is returned.
func (m *E2SetupResponseIes_E2SetupResponseIes001) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return E2SetupResponseIes_E2SetupResponseIes001ValidationError{
				field:  "Id",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetCriticality()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return E2SetupResponseIes_E2SetupResponseIes001ValidationError{
				field:  "Criticality",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetType()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return E2SetupResponseIes_E2SetupResponseIes001ValidationError{
				field:  "Type",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetPresence()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return E2SetupResponseIes_E2SetupResponseIes001ValidationError{
				field:  "Presence",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// E2SetupResponseIes_E2SetupResponseIes001ValidationError is the validation
// error returned by E2SetupResponseIes_E2SetupResponseIes001.Validate if the
// designated constraints aren't met.
type E2SetupResponseIes_E2SetupResponseIes001ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e E2SetupResponseIes_E2SetupResponseIes001ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e E2SetupResponseIes_E2SetupResponseIes001ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e E2SetupResponseIes_E2SetupResponseIes001ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e E2SetupResponseIes_E2SetupResponseIes001ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e E2SetupResponseIes_E2SetupResponseIes001ValidationError) ErrorName() string {
	return "E2SetupResponseIes_E2SetupResponseIes001ValidationError"
}

// Error satisfies the builtin error interface
func (e E2SetupResponseIes_E2SetupResponseIes001ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sE2SetupResponseIes_E2SetupResponseIes001.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = E2SetupResponseIes_E2SetupResponseIes001ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = E2SetupResponseIes_E2SetupResponseIes001ValidationError{}

// Validate checks the field values on E2SetupResponseIes_E2SetupResponseIes002
// with the rules defined in the proto definition for this message. If any
// rules are violated, an error is returned.
func (m *E2SetupResponseIes_E2SetupResponseIes002) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return E2SetupResponseIes_E2SetupResponseIes002ValidationError{
				field:  "Id",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetCriticality()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return E2SetupResponseIes_E2SetupResponseIes002ValidationError{
				field:  "Criticality",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetType()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return E2SetupResponseIes_E2SetupResponseIes002ValidationError{
				field:  "Type",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetPresence()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return E2SetupResponseIes_E2SetupResponseIes002ValidationError{
				field:  "Presence",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// E2SetupResponseIes_E2SetupResponseIes002ValidationError is the validation
// error returned by E2SetupResponseIes_E2SetupResponseIes002.Validate if the
// designated constraints aren't met.
type E2SetupResponseIes_E2SetupResponseIes002ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e E2SetupResponseIes_E2SetupResponseIes002ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e E2SetupResponseIes_E2SetupResponseIes002ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e E2SetupResponseIes_E2SetupResponseIes002ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e E2SetupResponseIes_E2SetupResponseIes002ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e E2SetupResponseIes_E2SetupResponseIes002ValidationError) ErrorName() string {
	return "E2SetupResponseIes_E2SetupResponseIes002ValidationError"
}

// Error satisfies the builtin error interface
func (e E2SetupResponseIes_E2SetupResponseIes002ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sE2SetupResponseIes_E2SetupResponseIes002.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = E2SetupResponseIes_E2SetupResponseIes002ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = E2SetupResponseIes_E2SetupResponseIes002ValidationError{}

// Validate checks the field values on E2SetupResponseIes_E2SetupResponseIes003
// with the rules defined in the proto definition for this message. If any
// rules are violated, an error is returned.
func (m *E2SetupResponseIes_E2SetupResponseIes003) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return E2SetupResponseIes_E2SetupResponseIes003ValidationError{
				field:  "Id",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetCriticality()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return E2SetupResponseIes_E2SetupResponseIes003ValidationError{
				field:  "Criticality",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetType()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return E2SetupResponseIes_E2SetupResponseIes003ValidationError{
				field:  "Type",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetPresence()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return E2SetupResponseIes_E2SetupResponseIes003ValidationError{
				field:  "Presence",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// E2SetupResponseIes_E2SetupResponseIes003ValidationError is the validation
// error returned by E2SetupResponseIes_E2SetupResponseIes003.Validate if the
// designated constraints aren't met.
type E2SetupResponseIes_E2SetupResponseIes003ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e E2SetupResponseIes_E2SetupResponseIes003ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e E2SetupResponseIes_E2SetupResponseIes003ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e E2SetupResponseIes_E2SetupResponseIes003ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e E2SetupResponseIes_E2SetupResponseIes003ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e E2SetupResponseIes_E2SetupResponseIes003ValidationError) ErrorName() string {
	return "E2SetupResponseIes_E2SetupResponseIes003ValidationError"
}

// Error satisfies the builtin error interface
func (e E2SetupResponseIes_E2SetupResponseIes003ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sE2SetupResponseIes_E2SetupResponseIes003.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = E2SetupResponseIes_E2SetupResponseIes003ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = E2SetupResponseIes_E2SetupResponseIes003ValidationError{}

// Validate checks the field values on E2SetupFailureIes_E2SetupFailureIes001
// with the rules defined in the proto definition for this message. If any
// rules are violated, an error is returned.
func (m *E2SetupFailureIes_E2SetupFailureIes001) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return E2SetupFailureIes_E2SetupFailureIes001ValidationError{
				field:  "Id",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetCriticality()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return E2SetupFailureIes_E2SetupFailureIes001ValidationError{
				field:  "Criticality",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetType()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return E2SetupFailureIes_E2SetupFailureIes001ValidationError{
				field:  "Type",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetPresence()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return E2SetupFailureIes_E2SetupFailureIes001ValidationError{
				field:  "Presence",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// E2SetupFailureIes_E2SetupFailureIes001ValidationError is the validation
// error returned by E2SetupFailureIes_E2SetupFailureIes001.Validate if the
// designated constraints aren't met.
type E2SetupFailureIes_E2SetupFailureIes001ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e E2SetupFailureIes_E2SetupFailureIes001ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e E2SetupFailureIes_E2SetupFailureIes001ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e E2SetupFailureIes_E2SetupFailureIes001ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e E2SetupFailureIes_E2SetupFailureIes001ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e E2SetupFailureIes_E2SetupFailureIes001ValidationError) ErrorName() string {
	return "E2SetupFailureIes_E2SetupFailureIes001ValidationError"
}

// Error satisfies the builtin error interface
func (e E2SetupFailureIes_E2SetupFailureIes001ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sE2SetupFailureIes_E2SetupFailureIes001.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = E2SetupFailureIes_E2SetupFailureIes001ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = E2SetupFailureIes_E2SetupFailureIes001ValidationError{}

// Validate checks the field values on E2SetupFailureIes_E2SetupFailureIes002
// with the rules defined in the proto definition for this message. If any
// rules are violated, an error is returned.
func (m *E2SetupFailureIes_E2SetupFailureIes002) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return E2SetupFailureIes_E2SetupFailureIes002ValidationError{
				field:  "Id",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetCriticality()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return E2SetupFailureIes_E2SetupFailureIes002ValidationError{
				field:  "Criticality",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Type

	if v, ok := interface{}(m.GetPresence()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return E2SetupFailureIes_E2SetupFailureIes002ValidationError{
				field:  "Presence",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// E2SetupFailureIes_E2SetupFailureIes002ValidationError is the validation
// error returned by E2SetupFailureIes_E2SetupFailureIes002.Validate if the
// designated constraints aren't met.
type E2SetupFailureIes_E2SetupFailureIes002ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e E2SetupFailureIes_E2SetupFailureIes002ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e E2SetupFailureIes_E2SetupFailureIes002ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e E2SetupFailureIes_E2SetupFailureIes002ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e E2SetupFailureIes_E2SetupFailureIes002ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e E2SetupFailureIes_E2SetupFailureIes002ValidationError) ErrorName() string {
	return "E2SetupFailureIes_E2SetupFailureIes002ValidationError"
}

// Error satisfies the builtin error interface
func (e E2SetupFailureIes_E2SetupFailureIes002ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sE2SetupFailureIes_E2SetupFailureIes002.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = E2SetupFailureIes_E2SetupFailureIes002ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = E2SetupFailureIes_E2SetupFailureIes002ValidationError{}

// Validate checks the field values on E2SetupFailureIes_E2SetupFailureIes003
// with the rules defined in the proto definition for this message. If any
// rules are violated, an error is returned.
func (m *E2SetupFailureIes_E2SetupFailureIes003) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return E2SetupFailureIes_E2SetupFailureIes003ValidationError{
				field:  "Id",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetCriticality()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return E2SetupFailureIes_E2SetupFailureIes003ValidationError{
				field:  "Criticality",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetType()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return E2SetupFailureIes_E2SetupFailureIes003ValidationError{
				field:  "Type",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetPresence()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return E2SetupFailureIes_E2SetupFailureIes003ValidationError{
				field:  "Presence",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// E2SetupFailureIes_E2SetupFailureIes003ValidationError is the validation
// error returned by E2SetupFailureIes_E2SetupFailureIes003.Validate if the
// designated constraints aren't met.
type E2SetupFailureIes_E2SetupFailureIes003ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e E2SetupFailureIes_E2SetupFailureIes003ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e E2SetupFailureIes_E2SetupFailureIes003ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e E2SetupFailureIes_E2SetupFailureIes003ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e E2SetupFailureIes_E2SetupFailureIes003ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e E2SetupFailureIes_E2SetupFailureIes003ValidationError) ErrorName() string {
	return "E2SetupFailureIes_E2SetupFailureIes003ValidationError"
}

// Error satisfies the builtin error interface
func (e E2SetupFailureIes_E2SetupFailureIes003ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sE2SetupFailureIes_E2SetupFailureIes003.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = E2SetupFailureIes_E2SetupFailureIes003ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = E2SetupFailureIes_E2SetupFailureIes003ValidationError{}

// Validate checks the field values on
// RicserviceUpdateIes_RicserviceUpdateIes001 with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *RicserviceUpdateIes_RicserviceUpdateIes001) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RicserviceUpdateIes_RicserviceUpdateIes001ValidationError{
				field:  "Id",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetCriticality()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RicserviceUpdateIes_RicserviceUpdateIes001ValidationError{
				field:  "Criticality",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetType()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RicserviceUpdateIes_RicserviceUpdateIes001ValidationError{
				field:  "Type",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetPresence()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RicserviceUpdateIes_RicserviceUpdateIes001ValidationError{
				field:  "Presence",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// RicserviceUpdateIes_RicserviceUpdateIes001ValidationError is the validation
// error returned by RicserviceUpdateIes_RicserviceUpdateIes001.Validate if
// the designated constraints aren't met.
type RicserviceUpdateIes_RicserviceUpdateIes001ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RicserviceUpdateIes_RicserviceUpdateIes001ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RicserviceUpdateIes_RicserviceUpdateIes001ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RicserviceUpdateIes_RicserviceUpdateIes001ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RicserviceUpdateIes_RicserviceUpdateIes001ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RicserviceUpdateIes_RicserviceUpdateIes001ValidationError) ErrorName() string {
	return "RicserviceUpdateIes_RicserviceUpdateIes001ValidationError"
}

// Error satisfies the builtin error interface
func (e RicserviceUpdateIes_RicserviceUpdateIes001ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRicserviceUpdateIes_RicserviceUpdateIes001.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RicserviceUpdateIes_RicserviceUpdateIes001ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RicserviceUpdateIes_RicserviceUpdateIes001ValidationError{}

// Validate checks the field values on
// RicserviceUpdateIes_RicserviceUpdateIes002 with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *RicserviceUpdateIes_RicserviceUpdateIes002) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RicserviceUpdateIes_RicserviceUpdateIes002ValidationError{
				field:  "Id",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetCriticality()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RicserviceUpdateIes_RicserviceUpdateIes002ValidationError{
				field:  "Criticality",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetType()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RicserviceUpdateIes_RicserviceUpdateIes002ValidationError{
				field:  "Type",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetPresence()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RicserviceUpdateIes_RicserviceUpdateIes002ValidationError{
				field:  "Presence",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// RicserviceUpdateIes_RicserviceUpdateIes002ValidationError is the validation
// error returned by RicserviceUpdateIes_RicserviceUpdateIes002.Validate if
// the designated constraints aren't met.
type RicserviceUpdateIes_RicserviceUpdateIes002ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RicserviceUpdateIes_RicserviceUpdateIes002ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RicserviceUpdateIes_RicserviceUpdateIes002ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RicserviceUpdateIes_RicserviceUpdateIes002ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RicserviceUpdateIes_RicserviceUpdateIes002ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RicserviceUpdateIes_RicserviceUpdateIes002ValidationError) ErrorName() string {
	return "RicserviceUpdateIes_RicserviceUpdateIes002ValidationError"
}

// Error satisfies the builtin error interface
func (e RicserviceUpdateIes_RicserviceUpdateIes002ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRicserviceUpdateIes_RicserviceUpdateIes002.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RicserviceUpdateIes_RicserviceUpdateIes002ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RicserviceUpdateIes_RicserviceUpdateIes002ValidationError{}

// Validate checks the field values on
// RicserviceUpdateIes_RicserviceUpdateIes003 with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *RicserviceUpdateIes_RicserviceUpdateIes003) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RicserviceUpdateIes_RicserviceUpdateIes003ValidationError{
				field:  "Id",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetCriticality()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RicserviceUpdateIes_RicserviceUpdateIes003ValidationError{
				field:  "Criticality",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetType()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RicserviceUpdateIes_RicserviceUpdateIes003ValidationError{
				field:  "Type",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetPresence()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RicserviceUpdateIes_RicserviceUpdateIes003ValidationError{
				field:  "Presence",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// RicserviceUpdateIes_RicserviceUpdateIes003ValidationError is the validation
// error returned by RicserviceUpdateIes_RicserviceUpdateIes003.Validate if
// the designated constraints aren't met.
type RicserviceUpdateIes_RicserviceUpdateIes003ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RicserviceUpdateIes_RicserviceUpdateIes003ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RicserviceUpdateIes_RicserviceUpdateIes003ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RicserviceUpdateIes_RicserviceUpdateIes003ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RicserviceUpdateIes_RicserviceUpdateIes003ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RicserviceUpdateIes_RicserviceUpdateIes003ValidationError) ErrorName() string {
	return "RicserviceUpdateIes_RicserviceUpdateIes003ValidationError"
}

// Error satisfies the builtin error interface
func (e RicserviceUpdateIes_RicserviceUpdateIes003ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRicserviceUpdateIes_RicserviceUpdateIes003.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RicserviceUpdateIes_RicserviceUpdateIes003ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RicserviceUpdateIes_RicserviceUpdateIes003ValidationError{}

// Validate checks the field values on
// RicserviceUpdateAcknowledgeIes_RicserviceUpdateAcknowledgeIes001 with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RicserviceUpdateAcknowledgeIes_RicserviceUpdateAcknowledgeIes001) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RicserviceUpdateAcknowledgeIes_RicserviceUpdateAcknowledgeIes001ValidationError{
				field:  "Id",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetCriticality()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RicserviceUpdateAcknowledgeIes_RicserviceUpdateAcknowledgeIes001ValidationError{
				field:  "Criticality",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetType()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RicserviceUpdateAcknowledgeIes_RicserviceUpdateAcknowledgeIes001ValidationError{
				field:  "Type",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetPresence()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RicserviceUpdateAcknowledgeIes_RicserviceUpdateAcknowledgeIes001ValidationError{
				field:  "Presence",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// RicserviceUpdateAcknowledgeIes_RicserviceUpdateAcknowledgeIes001ValidationError
// is the validation error returned by
// RicserviceUpdateAcknowledgeIes_RicserviceUpdateAcknowledgeIes001.Validate
// if the designated constraints aren't met.
type RicserviceUpdateAcknowledgeIes_RicserviceUpdateAcknowledgeIes001ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RicserviceUpdateAcknowledgeIes_RicserviceUpdateAcknowledgeIes001ValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e RicserviceUpdateAcknowledgeIes_RicserviceUpdateAcknowledgeIes001ValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e RicserviceUpdateAcknowledgeIes_RicserviceUpdateAcknowledgeIes001ValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e RicserviceUpdateAcknowledgeIes_RicserviceUpdateAcknowledgeIes001ValidationError) Key() bool {
	return e.key
}

// ErrorName returns error name.
func (e RicserviceUpdateAcknowledgeIes_RicserviceUpdateAcknowledgeIes001ValidationError) ErrorName() string {
	return "RicserviceUpdateAcknowledgeIes_RicserviceUpdateAcknowledgeIes001ValidationError"
}

// Error satisfies the builtin error interface
func (e RicserviceUpdateAcknowledgeIes_RicserviceUpdateAcknowledgeIes001ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRicserviceUpdateAcknowledgeIes_RicserviceUpdateAcknowledgeIes001.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RicserviceUpdateAcknowledgeIes_RicserviceUpdateAcknowledgeIes001ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RicserviceUpdateAcknowledgeIes_RicserviceUpdateAcknowledgeIes001ValidationError{}

// Validate checks the field values on
// RicserviceUpdateAcknowledgeIes_RicserviceUpdateAcknowledgeIes002 with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RicserviceUpdateAcknowledgeIes_RicserviceUpdateAcknowledgeIes002) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RicserviceUpdateAcknowledgeIes_RicserviceUpdateAcknowledgeIes002ValidationError{
				field:  "Id",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetCriticality()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RicserviceUpdateAcknowledgeIes_RicserviceUpdateAcknowledgeIes002ValidationError{
				field:  "Criticality",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetType()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RicserviceUpdateAcknowledgeIes_RicserviceUpdateAcknowledgeIes002ValidationError{
				field:  "Type",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetPresence()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RicserviceUpdateAcknowledgeIes_RicserviceUpdateAcknowledgeIes002ValidationError{
				field:  "Presence",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// RicserviceUpdateAcknowledgeIes_RicserviceUpdateAcknowledgeIes002ValidationError
// is the validation error returned by
// RicserviceUpdateAcknowledgeIes_RicserviceUpdateAcknowledgeIes002.Validate
// if the designated constraints aren't met.
type RicserviceUpdateAcknowledgeIes_RicserviceUpdateAcknowledgeIes002ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RicserviceUpdateAcknowledgeIes_RicserviceUpdateAcknowledgeIes002ValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e RicserviceUpdateAcknowledgeIes_RicserviceUpdateAcknowledgeIes002ValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e RicserviceUpdateAcknowledgeIes_RicserviceUpdateAcknowledgeIes002ValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e RicserviceUpdateAcknowledgeIes_RicserviceUpdateAcknowledgeIes002ValidationError) Key() bool {
	return e.key
}

// ErrorName returns error name.
func (e RicserviceUpdateAcknowledgeIes_RicserviceUpdateAcknowledgeIes002ValidationError) ErrorName() string {
	return "RicserviceUpdateAcknowledgeIes_RicserviceUpdateAcknowledgeIes002ValidationError"
}

// Error satisfies the builtin error interface
func (e RicserviceUpdateAcknowledgeIes_RicserviceUpdateAcknowledgeIes002ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRicserviceUpdateAcknowledgeIes_RicserviceUpdateAcknowledgeIes002.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RicserviceUpdateAcknowledgeIes_RicserviceUpdateAcknowledgeIes002ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RicserviceUpdateAcknowledgeIes_RicserviceUpdateAcknowledgeIes002ValidationError{}

// Validate checks the field values on
// RicserviceUpdateFailureIes_RicserviceUpdateFailureIes001 with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RicserviceUpdateFailureIes_RicserviceUpdateFailureIes001) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RicserviceUpdateFailureIes_RicserviceUpdateFailureIes001ValidationError{
				field:  "Id",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetCriticality()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RicserviceUpdateFailureIes_RicserviceUpdateFailureIes001ValidationError{
				field:  "Criticality",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetType()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RicserviceUpdateFailureIes_RicserviceUpdateFailureIes001ValidationError{
				field:  "Type",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetPresence()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RicserviceUpdateFailureIes_RicserviceUpdateFailureIes001ValidationError{
				field:  "Presence",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// RicserviceUpdateFailureIes_RicserviceUpdateFailureIes001ValidationError is
// the validation error returned by
// RicserviceUpdateFailureIes_RicserviceUpdateFailureIes001.Validate if the
// designated constraints aren't met.
type RicserviceUpdateFailureIes_RicserviceUpdateFailureIes001ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RicserviceUpdateFailureIes_RicserviceUpdateFailureIes001ValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e RicserviceUpdateFailureIes_RicserviceUpdateFailureIes001ValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e RicserviceUpdateFailureIes_RicserviceUpdateFailureIes001ValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e RicserviceUpdateFailureIes_RicserviceUpdateFailureIes001ValidationError) Key() bool {
	return e.key
}

// ErrorName returns error name.
func (e RicserviceUpdateFailureIes_RicserviceUpdateFailureIes001ValidationError) ErrorName() string {
	return "RicserviceUpdateFailureIes_RicserviceUpdateFailureIes001ValidationError"
}

// Error satisfies the builtin error interface
func (e RicserviceUpdateFailureIes_RicserviceUpdateFailureIes001ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRicserviceUpdateFailureIes_RicserviceUpdateFailureIes001.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RicserviceUpdateFailureIes_RicserviceUpdateFailureIes001ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RicserviceUpdateFailureIes_RicserviceUpdateFailureIes001ValidationError{}

// Validate checks the field values on
// RicserviceUpdateFailureIes_RicserviceUpdateFailureIes002 with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RicserviceUpdateFailureIes_RicserviceUpdateFailureIes002) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RicserviceUpdateFailureIes_RicserviceUpdateFailureIes002ValidationError{
				field:  "Id",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetCriticality()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RicserviceUpdateFailureIes_RicserviceUpdateFailureIes002ValidationError{
				field:  "Criticality",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Type

	if v, ok := interface{}(m.GetPresence()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RicserviceUpdateFailureIes_RicserviceUpdateFailureIes002ValidationError{
				field:  "Presence",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// RicserviceUpdateFailureIes_RicserviceUpdateFailureIes002ValidationError is
// the validation error returned by
// RicserviceUpdateFailureIes_RicserviceUpdateFailureIes002.Validate if the
// designated constraints aren't met.
type RicserviceUpdateFailureIes_RicserviceUpdateFailureIes002ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RicserviceUpdateFailureIes_RicserviceUpdateFailureIes002ValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e RicserviceUpdateFailureIes_RicserviceUpdateFailureIes002ValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e RicserviceUpdateFailureIes_RicserviceUpdateFailureIes002ValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e RicserviceUpdateFailureIes_RicserviceUpdateFailureIes002ValidationError) Key() bool {
	return e.key
}

// ErrorName returns error name.
func (e RicserviceUpdateFailureIes_RicserviceUpdateFailureIes002ValidationError) ErrorName() string {
	return "RicserviceUpdateFailureIes_RicserviceUpdateFailureIes002ValidationError"
}

// Error satisfies the builtin error interface
func (e RicserviceUpdateFailureIes_RicserviceUpdateFailureIes002ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRicserviceUpdateFailureIes_RicserviceUpdateFailureIes002.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RicserviceUpdateFailureIes_RicserviceUpdateFailureIes002ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RicserviceUpdateFailureIes_RicserviceUpdateFailureIes002ValidationError{}

// Validate checks the field values on
// RicserviceUpdateFailureIes_RicserviceUpdateFailureIes003 with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RicserviceUpdateFailureIes_RicserviceUpdateFailureIes003) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RicserviceUpdateFailureIes_RicserviceUpdateFailureIes003ValidationError{
				field:  "Id",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetCriticality()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RicserviceUpdateFailureIes_RicserviceUpdateFailureIes003ValidationError{
				field:  "Criticality",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetType()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RicserviceUpdateFailureIes_RicserviceUpdateFailureIes003ValidationError{
				field:  "Type",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetPresence()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RicserviceUpdateFailureIes_RicserviceUpdateFailureIes003ValidationError{
				field:  "Presence",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// RicserviceUpdateFailureIes_RicserviceUpdateFailureIes003ValidationError is
// the validation error returned by
// RicserviceUpdateFailureIes_RicserviceUpdateFailureIes003.Validate if the
// designated constraints aren't met.
type RicserviceUpdateFailureIes_RicserviceUpdateFailureIes003ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RicserviceUpdateFailureIes_RicserviceUpdateFailureIes003ValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e RicserviceUpdateFailureIes_RicserviceUpdateFailureIes003ValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e RicserviceUpdateFailureIes_RicserviceUpdateFailureIes003ValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e RicserviceUpdateFailureIes_RicserviceUpdateFailureIes003ValidationError) Key() bool {
	return e.key
}

// ErrorName returns error name.
func (e RicserviceUpdateFailureIes_RicserviceUpdateFailureIes003ValidationError) ErrorName() string {
	return "RicserviceUpdateFailureIes_RicserviceUpdateFailureIes003ValidationError"
}

// Error satisfies the builtin error interface
func (e RicserviceUpdateFailureIes_RicserviceUpdateFailureIes003ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRicserviceUpdateFailureIes_RicserviceUpdateFailureIes003.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RicserviceUpdateFailureIes_RicserviceUpdateFailureIes003ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RicserviceUpdateFailureIes_RicserviceUpdateFailureIes003ValidationError{}
