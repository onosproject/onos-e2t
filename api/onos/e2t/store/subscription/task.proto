/*
SPDX-FileCopyrightText: 2021-present Open Networking Foundation <info@opennetworking.org>

SPDX-License-Identifier: LicenseRef-ONF-Member-1.0
*/

syntax = "proto3";

// Package onos.e2t.store.subscription defines message types for E2T stores
package onos.e2t.store.subscription;

import "gogoproto/gogo.proto";
import "onos/e2t/store/subscription/subscription.proto";

message TaskID {
    string node_id = 1 [(gogoproto.customname) = "NodeID", (gogoproto.casttype) = "NodeID"];
    string request_id = 2 [(gogoproto.customname) = "RequestID", (gogoproto.casttype) = "RequestID"];
    string hash = 3;
}

// Task is a subscription task
message Task {
    TaskMeta meta = 1 [(gogoproto.nullable) = false, (gogoproto.embed) = true];
    TaskSpec spec = 2 [(gogoproto.nullable) = false];
    TaskStatus status = 3 [(gogoproto.nullable) = false];
}

// TaskMeta is subscription task metadata
message TaskMeta {
    TaskID id = 1 [(gogoproto.customname) = "ID", (gogoproto.nullable) = false];
    uint64 revision = 2 [(gogoproto.casttype) = "Revision"];
    ServiceModel service_model = 3 [(gogoproto.nullable) = false];
}

message TaskSpec {
    SubscriptionSpec subscription = 1 [(gogoproto.nullable) = false];
}

// TaskStatus is the subscription task status
message TaskStatus {
    TaskPhase phase = 1;
    TaskState state = 2;
    TaskFailure failure = 3;
    uint64 mastership_term = 4;
}

// TaskPhase is a subscription task phase
enum TaskPhase {
    // OPEN is a subscription task open phase
    OPEN = 0;
    // CLOSE is a subscription task close phase
    CLOSE = 1;
}

// TaskState is a subscription task state
enum TaskState {
    // TASK_PENDING indicates the subscription task phase is pending
    TASK_PENDING = 0;
    // TASK_COMPLETE indicates the subscription task phase is complete
    TASK_COMPLETE = 1;
    // TASK_FAILED indicates the subscription task phase failed
    TASK_FAILED = 2;
}

// TaskFailure is a subscription failure status
message TaskFailure {
    TaskFailureCause cause = 1;
    string message = 2;
}

// TaskFailureCause is a failure cause
enum TaskFailureCause {
    CAUSE_UNKNOWN = 0;
    CAUSE_MISC_CONTROL_PROCESSING_OVERLOAD = 1;
    CAUSE_MISC_HARDWARE_FAILURE = 2;
    CAUSE_MISC_OM_INTERVENTION = 3;
    CAUSE_MISC_UNSPECIFIED = 4;
    CAUSE_PROTOCOL_TRANSFER_SYNTAX_ERROR = 5;
    CAUSE_PROTOCOL_ABSTRACT_SYNTAX_ERROR_REJECT = 6;
    CAUSE_PROTOCOL_ABSTRACT_SYNTAX_ERROR_IGNORE_AND_NOTIFY = 7;
    CAUSE_PROTOCOL_MESSAGE_NOT_COMPATIBLE_WITH_RECEIVER_STATE = 8;
    CAUSE_PROTOCOL_SEMANTIC_ERROR = 9;
    CAUSE_PROTOCOL_ABSTRACT_SYNTAX_ERROR_FALSELY_CONSTRUCTED_MESSAGE = 10;
    CAUSE_PROTOCOL_UNSPECIFIED = 11;
    CAUSE_RIC_RAN_FUNCTION_ID_INVALID = 12;
    CAUSE_RIC_ACTION_NOT_SUPPORTED = 13;
    CAUSE_RIC_EXCESSIVE_ACTIONS = 14;
    CAUSE_RIC_DUPLICATE_ACTION = 15;
    CAUSE_RIC_DUPLICATE_EVENT = 16;
    CAUSE_RIC_FUNCTION_RESOURCE_LIMIT = 17;
    CAUSE_RIC_REQUEST_ID_UNKNOWN = 18;
    CAUSE_RIC_INCONSISTENT_ACTION_SUBSEQUENT_ACTION_SEQUENCE = 19;
    CAUSE_RIC_CONTROL_MESSAGE_INVALID = 20;
    CAUSE_RIC_CALL_PROCESS_ID_INVALID = 21;
    CAUSE_RIC_UNSPECIFIED = 22;
    CAUSE_RICSERVICE_FUNCTION_NOT_REQUIRED = 23;
    CAUSE_RICSERVICE_EXCESSIVE_FUNCTIONS = 24;
    CAUSE_RICSERVICE_RIC_RESOURCE_LIMIT = 25;
    CAUSE_TRANSPORT_UNSPECIFIED = 26;
    CAUSE_TRANSPORT_TRANSPORT_RESOURCE_UNAVAILABLE = 27;
}

// Type of change
enum TaskEventType {
    TASK_EVENT_UNKNOWN = 0;
    TASK_CREATED = 1;
    TASK_UPDATED = 2;
    TASK_DELETED = 3;
    TASK_REPLAYED = 4;
}

// TaskEvent is a subscription Task event
message TaskEvent {
    TaskEventType type = 1;
    Task task = 2 [(gogoproto.nullable) = false];
}
