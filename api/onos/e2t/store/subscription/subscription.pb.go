// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: api/onos/e2t/store/subscription/subscription.proto

// Package onos.e2t.store.subscription defines message types for E2T stores

package subscription

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// SubscriptionState is a subscription state
type SubscriptionState int32

const (
	SubscriptionState_SUBSCRIPTION_ACTIVE         SubscriptionState = 0
	SubscriptionState_SUBSCRIPTION_PENDING_DELETE SubscriptionState = 1
	SubscriptionState_SUBSCRIPTION_FAILED         SubscriptionState = 2
)

var SubscriptionState_name = map[int32]string{
	0: "SUBSCRIPTION_ACTIVE",
	1: "SUBSCRIPTION_PENDING_DELETE",
	2: "SUBSCRIPTION_FAILED",
}

var SubscriptionState_value = map[string]int32{
	"SUBSCRIPTION_ACTIVE":         0,
	"SUBSCRIPTION_PENDING_DELETE": 1,
	"SUBSCRIPTION_FAILED":         2,
}

func (x SubscriptionState) String() string {
	return proto.EnumName(SubscriptionState_name, int32(x))
}

func (SubscriptionState) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_d343e70fd5f3882e, []int{0}
}

// SubscriptionEventType is a subscription event type
type SubscriptionEventType int32

const (
	SubscriptionEventType_SUBSCRIPTION_EVENT_UNKNOWN SubscriptionEventType = 0
	SubscriptionEventType_SUBSCRIPTION_CREATED       SubscriptionEventType = 1
	SubscriptionEventType_SUBSCRIPTION_UPDATED       SubscriptionEventType = 2
	SubscriptionEventType_SUBSCRIPTION_DELETED       SubscriptionEventType = 3
	SubscriptionEventType_SUBSCRIPTION_REPLAYED      SubscriptionEventType = 4
)

var SubscriptionEventType_name = map[int32]string{
	0: "SUBSCRIPTION_EVENT_UNKNOWN",
	1: "SUBSCRIPTION_CREATED",
	2: "SUBSCRIPTION_UPDATED",
	3: "SUBSCRIPTION_DELETED",
	4: "SUBSCRIPTION_REPLAYED",
}

var SubscriptionEventType_value = map[string]int32{
	"SUBSCRIPTION_EVENT_UNKNOWN": 0,
	"SUBSCRIPTION_CREATED":       1,
	"SUBSCRIPTION_UPDATED":       2,
	"SUBSCRIPTION_DELETED":       3,
	"SUBSCRIPTION_REPLAYED":      4,
}

func (x SubscriptionEventType) String() string {
	return proto.EnumName(SubscriptionEventType_name, int32(x))
}

func (SubscriptionEventType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_d343e70fd5f3882e, []int{1}
}

type ActionType int32

const (
	ActionType_ACTION_TYPE_REPORT ActionType = 0
	ActionType_ACTION_TYPE_INSERT ActionType = 1
	ActionType_ACTION_TYPE_POLICY ActionType = 2
)

var ActionType_name = map[int32]string{
	0: "ACTION_TYPE_REPORT",
	1: "ACTION_TYPE_INSERT",
	2: "ACTION_TYPE_POLICY",
}

var ActionType_value = map[string]int32{
	"ACTION_TYPE_REPORT": 0,
	"ACTION_TYPE_INSERT": 1,
	"ACTION_TYPE_POLICY": 2,
}

func (x ActionType) String() string {
	return proto.EnumName(ActionType_name, int32(x))
}

func (ActionType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_d343e70fd5f3882e, []int{2}
}

type SubsequentActionType int32

const (
	SubsequentActionType_SUBSEQUENT_ACTION_TYPE_CONTINUE SubsequentActionType = 0
	SubsequentActionType_SUBSEQUENT_ACTION_TYPE_WAIT     SubsequentActionType = 1
)

var SubsequentActionType_name = map[int32]string{
	0: "SUBSEQUENT_ACTION_TYPE_CONTINUE",
	1: "SUBSEQUENT_ACTION_TYPE_WAIT",
}

var SubsequentActionType_value = map[string]int32{
	"SUBSEQUENT_ACTION_TYPE_CONTINUE": 0,
	"SUBSEQUENT_ACTION_TYPE_WAIT":     1,
}

func (x SubsequentActionType) String() string {
	return proto.EnumName(SubsequentActionType_name, int32(x))
}

func (SubsequentActionType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_d343e70fd5f3882e, []int{3}
}

type TimeToWait int32

const (
	TimeToWait_TIME_TO_WAIT_ZERO   TimeToWait = 0
	TimeToWait_TIME_TO_WAIT_W1MS   TimeToWait = 1
	TimeToWait_TIME_TO_WAIT_W2MS   TimeToWait = 2
	TimeToWait_TIME_TO_WAIT_W5MS   TimeToWait = 3
	TimeToWait_TIME_TO_WAIT_W10MS  TimeToWait = 4
	TimeToWait_TIME_TO_WAIT_W20MS  TimeToWait = 5
	TimeToWait_TIME_TO_WAIT_W30MS  TimeToWait = 6
	TimeToWait_TIME_TO_WAIT_W40MS  TimeToWait = 7
	TimeToWait_TIME_TO_WAIT_W50MS  TimeToWait = 8
	TimeToWait_TIME_TO_WAIT_W100MS TimeToWait = 9
	TimeToWait_TIME_TO_WAIT_W200MS TimeToWait = 10
	TimeToWait_TIME_TO_WAIT_W500MS TimeToWait = 11
	TimeToWait_TIME_TO_WAIT_W1S    TimeToWait = 12
	TimeToWait_TIME_TO_WAIT_W2S    TimeToWait = 13
	TimeToWait_TIME_TO_WAIT_W5S    TimeToWait = 14
	TimeToWait_TIME_TO_WAIT_W10S   TimeToWait = 15
	TimeToWait_TIME_TO_WAIT_W20S   TimeToWait = 16
	TimeToWait_TIME_TO_WAIT_W60S   TimeToWait = 17
)

var TimeToWait_name = map[int32]string{
	0:  "TIME_TO_WAIT_ZERO",
	1:  "TIME_TO_WAIT_W1MS",
	2:  "TIME_TO_WAIT_W2MS",
	3:  "TIME_TO_WAIT_W5MS",
	4:  "TIME_TO_WAIT_W10MS",
	5:  "TIME_TO_WAIT_W20MS",
	6:  "TIME_TO_WAIT_W30MS",
	7:  "TIME_TO_WAIT_W40MS",
	8:  "TIME_TO_WAIT_W50MS",
	9:  "TIME_TO_WAIT_W100MS",
	10: "TIME_TO_WAIT_W200MS",
	11: "TIME_TO_WAIT_W500MS",
	12: "TIME_TO_WAIT_W1S",
	13: "TIME_TO_WAIT_W2S",
	14: "TIME_TO_WAIT_W5S",
	15: "TIME_TO_WAIT_W10S",
	16: "TIME_TO_WAIT_W20S",
	17: "TIME_TO_WAIT_W60S",
}

var TimeToWait_value = map[string]int32{
	"TIME_TO_WAIT_ZERO":   0,
	"TIME_TO_WAIT_W1MS":   1,
	"TIME_TO_WAIT_W2MS":   2,
	"TIME_TO_WAIT_W5MS":   3,
	"TIME_TO_WAIT_W10MS":  4,
	"TIME_TO_WAIT_W20MS":  5,
	"TIME_TO_WAIT_W30MS":  6,
	"TIME_TO_WAIT_W40MS":  7,
	"TIME_TO_WAIT_W50MS":  8,
	"TIME_TO_WAIT_W100MS": 9,
	"TIME_TO_WAIT_W200MS": 10,
	"TIME_TO_WAIT_W500MS": 11,
	"TIME_TO_WAIT_W1S":    12,
	"TIME_TO_WAIT_W2S":    13,
	"TIME_TO_WAIT_W5S":    14,
	"TIME_TO_WAIT_W10S":   15,
	"TIME_TO_WAIT_W20S":   16,
	"TIME_TO_WAIT_W60S":   17,
}

func (x TimeToWait) String() string {
	return proto.EnumName(TimeToWait_name, int32(x))
}

func (TimeToWait) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_d343e70fd5f3882e, []int{4}
}

type SubscriptionID struct {
	NodeID     NodeID     `protobuf:"bytes,1,opt,name=node_id,json=nodeId,proto3,casttype=NodeID" json:"node_id,omitempty"`
	RequestID  RequestID  `protobuf:"bytes,2,opt,name=request_id,json=requestId,proto3,casttype=RequestID" json:"request_id,omitempty"`
	AppID      AppID      `protobuf:"bytes,3,opt,name=app_id,json=appId,proto3,casttype=AppID" json:"app_id,omitempty"`
	InstanceID InstanceID `protobuf:"bytes,4,opt,name=instance_id,json=instanceId,proto3,casttype=InstanceID" json:"instance_id,omitempty"`
}

func (m *SubscriptionID) Reset()         { *m = SubscriptionID{} }
func (m *SubscriptionID) String() string { return proto.CompactTextString(m) }
func (*SubscriptionID) ProtoMessage()    {}
func (*SubscriptionID) Descriptor() ([]byte, []int) {
	return fileDescriptor_d343e70fd5f3882e, []int{0}
}
func (m *SubscriptionID) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SubscriptionID) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SubscriptionID.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SubscriptionID) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubscriptionID.Merge(m, src)
}
func (m *SubscriptionID) XXX_Size() int {
	return m.Size()
}
func (m *SubscriptionID) XXX_DiscardUnknown() {
	xxx_messageInfo_SubscriptionID.DiscardUnknown(m)
}

var xxx_messageInfo_SubscriptionID proto.InternalMessageInfo

func (m *SubscriptionID) GetNodeID() NodeID {
	if m != nil {
		return m.NodeID
	}
	return ""
}

func (m *SubscriptionID) GetRequestID() RequestID {
	if m != nil {
		return m.RequestID
	}
	return ""
}

func (m *SubscriptionID) GetAppID() AppID {
	if m != nil {
		return m.AppID
	}
	return ""
}

func (m *SubscriptionID) GetInstanceID() InstanceID {
	if m != nil {
		return m.InstanceID
	}
	return ""
}

// Subscription is a subscription state
type Subscription struct {
	SubscriptionMeta `protobuf:"bytes,1,opt,name=meta,proto3,embedded=meta" json:"meta"`
	Spec             SubscriptionSpec   `protobuf:"bytes,2,opt,name=spec,proto3" json:"spec"`
	Status           SubscriptionStatus `protobuf:"bytes,3,opt,name=status,proto3" json:"status"`
}

func (m *Subscription) Reset()         { *m = Subscription{} }
func (m *Subscription) String() string { return proto.CompactTextString(m) }
func (*Subscription) ProtoMessage()    {}
func (*Subscription) Descriptor() ([]byte, []int) {
	return fileDescriptor_d343e70fd5f3882e, []int{1}
}
func (m *Subscription) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Subscription) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Subscription.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Subscription) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Subscription.Merge(m, src)
}
func (m *Subscription) XXX_Size() int {
	return m.Size()
}
func (m *Subscription) XXX_DiscardUnknown() {
	xxx_messageInfo_Subscription.DiscardUnknown(m)
}

var xxx_messageInfo_Subscription proto.InternalMessageInfo

func (m *Subscription) GetSpec() SubscriptionSpec {
	if m != nil {
		return m.Spec
	}
	return SubscriptionSpec{}
}

func (m *Subscription) GetStatus() SubscriptionStatus {
	if m != nil {
		return m.Status
	}
	return SubscriptionStatus{}
}

// SubscriptionMeta is subscription metadata
type SubscriptionMeta struct {
	ID       SubscriptionID `protobuf:"bytes,1,opt,name=id,proto3" json:"id"`
	Revision Revision       `protobuf:"varint,2,opt,name=revision,proto3,casttype=Revision" json:"revision,omitempty"`
}

func (m *SubscriptionMeta) Reset()         { *m = SubscriptionMeta{} }
func (m *SubscriptionMeta) String() string { return proto.CompactTextString(m) }
func (*SubscriptionMeta) ProtoMessage()    {}
func (*SubscriptionMeta) Descriptor() ([]byte, []int) {
	return fileDescriptor_d343e70fd5f3882e, []int{2}
}
func (m *SubscriptionMeta) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SubscriptionMeta) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SubscriptionMeta.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SubscriptionMeta) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubscriptionMeta.Merge(m, src)
}
func (m *SubscriptionMeta) XXX_Size() int {
	return m.Size()
}
func (m *SubscriptionMeta) XXX_DiscardUnknown() {
	xxx_messageInfo_SubscriptionMeta.DiscardUnknown(m)
}

var xxx_messageInfo_SubscriptionMeta proto.InternalMessageInfo

func (m *SubscriptionMeta) GetID() SubscriptionID {
	if m != nil {
		return m.ID
	}
	return SubscriptionID{}
}

func (m *SubscriptionMeta) GetRevision() Revision {
	if m != nil {
		return m.Revision
	}
	return 0
}

type SubscriptionSpec struct {
	EventTrigger *SubscriptionEventTrigger `protobuf:"bytes,1,opt,name=event_trigger,json=eventTrigger,proto3" json:"event_trigger,omitempty"`
	Actions      []SubscriptionAction      `protobuf:"bytes,2,rep,name=actions,proto3" json:"actions"`
}

func (m *SubscriptionSpec) Reset()         { *m = SubscriptionSpec{} }
func (m *SubscriptionSpec) String() string { return proto.CompactTextString(m) }
func (*SubscriptionSpec) ProtoMessage()    {}
func (*SubscriptionSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_d343e70fd5f3882e, []int{3}
}
func (m *SubscriptionSpec) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SubscriptionSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SubscriptionSpec.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SubscriptionSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubscriptionSpec.Merge(m, src)
}
func (m *SubscriptionSpec) XXX_Size() int {
	return m.Size()
}
func (m *SubscriptionSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_SubscriptionSpec.DiscardUnknown(m)
}

var xxx_messageInfo_SubscriptionSpec proto.InternalMessageInfo

func (m *SubscriptionSpec) GetEventTrigger() *SubscriptionEventTrigger {
	if m != nil {
		return m.EventTrigger
	}
	return nil
}

func (m *SubscriptionSpec) GetActions() []SubscriptionAction {
	if m != nil {
		return m.Actions
	}
	return nil
}

// SubscriptionStatus is the subscription status
type SubscriptionStatus struct {
	State SubscriptionState `protobuf:"varint,1,opt,name=state,proto3,enum=onos.e2t.store.subscription.SubscriptionState" json:"state,omitempty"`
}

func (m *SubscriptionStatus) Reset()         { *m = SubscriptionStatus{} }
func (m *SubscriptionStatus) String() string { return proto.CompactTextString(m) }
func (*SubscriptionStatus) ProtoMessage()    {}
func (*SubscriptionStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_d343e70fd5f3882e, []int{4}
}
func (m *SubscriptionStatus) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SubscriptionStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SubscriptionStatus.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SubscriptionStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubscriptionStatus.Merge(m, src)
}
func (m *SubscriptionStatus) XXX_Size() int {
	return m.Size()
}
func (m *SubscriptionStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_SubscriptionStatus.DiscardUnknown(m)
}

var xxx_messageInfo_SubscriptionStatus proto.InternalMessageInfo

func (m *SubscriptionStatus) GetState() SubscriptionState {
	if m != nil {
		return m.State
	}
	return SubscriptionState_SUBSCRIPTION_ACTIVE
}

// SubscriptionEvent is a subscription event
type SubscriptionEvent struct {
	Type         SubscriptionEventType `protobuf:"varint,1,opt,name=type,proto3,enum=onos.e2t.store.subscription.SubscriptionEventType" json:"type,omitempty"`
	Subscription Subscription          `protobuf:"bytes,2,opt,name=subscription,proto3" json:"subscription"`
}

func (m *SubscriptionEvent) Reset()         { *m = SubscriptionEvent{} }
func (m *SubscriptionEvent) String() string { return proto.CompactTextString(m) }
func (*SubscriptionEvent) ProtoMessage()    {}
func (*SubscriptionEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_d343e70fd5f3882e, []int{5}
}
func (m *SubscriptionEvent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SubscriptionEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SubscriptionEvent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SubscriptionEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubscriptionEvent.Merge(m, src)
}
func (m *SubscriptionEvent) XXX_Size() int {
	return m.Size()
}
func (m *SubscriptionEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_SubscriptionEvent.DiscardUnknown(m)
}

var xxx_messageInfo_SubscriptionEvent proto.InternalMessageInfo

func (m *SubscriptionEvent) GetType() SubscriptionEventType {
	if m != nil {
		return m.Type
	}
	return SubscriptionEventType_SUBSCRIPTION_EVENT_UNKNOWN
}

func (m *SubscriptionEvent) GetSubscription() Subscription {
	if m != nil {
		return m.Subscription
	}
	return Subscription{}
}

type SubscriptionEventTrigger struct {
	Contents []byte `protobuf:"bytes,1,opt,name=contents,proto3" json:"contents,omitempty"`
}

func (m *SubscriptionEventTrigger) Reset()         { *m = SubscriptionEventTrigger{} }
func (m *SubscriptionEventTrigger) String() string { return proto.CompactTextString(m) }
func (*SubscriptionEventTrigger) ProtoMessage()    {}
func (*SubscriptionEventTrigger) Descriptor() ([]byte, []int) {
	return fileDescriptor_d343e70fd5f3882e, []int{6}
}
func (m *SubscriptionEventTrigger) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SubscriptionEventTrigger) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SubscriptionEventTrigger.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SubscriptionEventTrigger) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubscriptionEventTrigger.Merge(m, src)
}
func (m *SubscriptionEventTrigger) XXX_Size() int {
	return m.Size()
}
func (m *SubscriptionEventTrigger) XXX_DiscardUnknown() {
	xxx_messageInfo_SubscriptionEventTrigger.DiscardUnknown(m)
}

var xxx_messageInfo_SubscriptionEventTrigger proto.InternalMessageInfo

func (m *SubscriptionEventTrigger) GetContents() []byte {
	if m != nil {
		return m.Contents
	}
	return nil
}

type SubscriptionAction struct {
	ID               int32             `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Type             ActionType        `protobuf:"varint,2,opt,name=type,proto3,enum=onos.e2t.store.subscription.ActionType" json:"type,omitempty"`
	Contents         []byte            `protobuf:"bytes,3,opt,name=contents,proto3" json:"contents,omitempty"`
	SubsequentAction *SubsequentAction `protobuf:"bytes,4,opt,name=subsequent_action,json=subsequentAction,proto3" json:"subsequent_action,omitempty"`
}

func (m *SubscriptionAction) Reset()         { *m = SubscriptionAction{} }
func (m *SubscriptionAction) String() string { return proto.CompactTextString(m) }
func (*SubscriptionAction) ProtoMessage()    {}
func (*SubscriptionAction) Descriptor() ([]byte, []int) {
	return fileDescriptor_d343e70fd5f3882e, []int{7}
}
func (m *SubscriptionAction) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SubscriptionAction) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SubscriptionAction.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SubscriptionAction) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubscriptionAction.Merge(m, src)
}
func (m *SubscriptionAction) XXX_Size() int {
	return m.Size()
}
func (m *SubscriptionAction) XXX_DiscardUnknown() {
	xxx_messageInfo_SubscriptionAction.DiscardUnknown(m)
}

var xxx_messageInfo_SubscriptionAction proto.InternalMessageInfo

func (m *SubscriptionAction) GetID() int32 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *SubscriptionAction) GetType() ActionType {
	if m != nil {
		return m.Type
	}
	return ActionType_ACTION_TYPE_REPORT
}

func (m *SubscriptionAction) GetContents() []byte {
	if m != nil {
		return m.Contents
	}
	return nil
}

func (m *SubscriptionAction) GetSubsequentAction() *SubsequentAction {
	if m != nil {
		return m.SubsequentAction
	}
	return nil
}

// sequence from e2ap-v01.00.00.asn1:1132
type SubsequentAction struct {
	Type       SubsequentActionType `protobuf:"varint,1,opt,name=type,proto3,enum=onos.e2t.store.subscription.SubsequentActionType" json:"type,omitempty"`
	TimeToWait TimeToWait           `protobuf:"varint,2,opt,name=time_to_wait,json=timeToWait,proto3,enum=onos.e2t.store.subscription.TimeToWait" json:"time_to_wait,omitempty"`
}

func (m *SubsequentAction) Reset()         { *m = SubsequentAction{} }
func (m *SubsequentAction) String() string { return proto.CompactTextString(m) }
func (*SubsequentAction) ProtoMessage()    {}
func (*SubsequentAction) Descriptor() ([]byte, []int) {
	return fileDescriptor_d343e70fd5f3882e, []int{8}
}
func (m *SubsequentAction) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SubsequentAction) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SubsequentAction.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SubsequentAction) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubsequentAction.Merge(m, src)
}
func (m *SubsequentAction) XXX_Size() int {
	return m.Size()
}
func (m *SubsequentAction) XXX_DiscardUnknown() {
	xxx_messageInfo_SubsequentAction.DiscardUnknown(m)
}

var xxx_messageInfo_SubsequentAction proto.InternalMessageInfo

func (m *SubsequentAction) GetType() SubsequentActionType {
	if m != nil {
		return m.Type
	}
	return SubsequentActionType_SUBSEQUENT_ACTION_TYPE_CONTINUE
}

func (m *SubsequentAction) GetTimeToWait() TimeToWait {
	if m != nil {
		return m.TimeToWait
	}
	return TimeToWait_TIME_TO_WAIT_ZERO
}

func init() {
	proto.RegisterEnum("onos.e2t.store.subscription.SubscriptionState", SubscriptionState_name, SubscriptionState_value)
	proto.RegisterEnum("onos.e2t.store.subscription.SubscriptionEventType", SubscriptionEventType_name, SubscriptionEventType_value)
	proto.RegisterEnum("onos.e2t.store.subscription.ActionType", ActionType_name, ActionType_value)
	proto.RegisterEnum("onos.e2t.store.subscription.SubsequentActionType", SubsequentActionType_name, SubsequentActionType_value)
	proto.RegisterEnum("onos.e2t.store.subscription.TimeToWait", TimeToWait_name, TimeToWait_value)
	proto.RegisterType((*SubscriptionID)(nil), "onos.e2t.store.subscription.SubscriptionID")
	proto.RegisterType((*Subscription)(nil), "onos.e2t.store.subscription.Subscription")
	proto.RegisterType((*SubscriptionMeta)(nil), "onos.e2t.store.subscription.SubscriptionMeta")
	proto.RegisterType((*SubscriptionSpec)(nil), "onos.e2t.store.subscription.SubscriptionSpec")
	proto.RegisterType((*SubscriptionStatus)(nil), "onos.e2t.store.subscription.SubscriptionStatus")
	proto.RegisterType((*SubscriptionEvent)(nil), "onos.e2t.store.subscription.SubscriptionEvent")
	proto.RegisterType((*SubscriptionEventTrigger)(nil), "onos.e2t.store.subscription.SubscriptionEventTrigger")
	proto.RegisterType((*SubscriptionAction)(nil), "onos.e2t.store.subscription.SubscriptionAction")
	proto.RegisterType((*SubsequentAction)(nil), "onos.e2t.store.subscription.SubsequentAction")
}

func init() {
	proto.RegisterFile("api/onos/e2t/store/subscription/subscription.proto", fileDescriptor_d343e70fd5f3882e)
}

var fileDescriptor_d343e70fd5f3882e = []byte{
	// 981 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x56, 0xc1, 0x6e, 0xdb, 0x46,
	0x13, 0x16, 0x29, 0x59, 0xb6, 0xc7, 0x8a, 0xff, 0xf5, 0xfe, 0x76, 0xea, 0x3a, 0x85, 0x18, 0xa8,
	0x87, 0x26, 0x2e, 0x22, 0x39, 0x4c, 0x1d, 0xa0, 0x28, 0x7a, 0x90, 0x4c, 0xc6, 0x58, 0xc4, 0xa2,
	0xd4, 0x25, 0x1d, 0xc3, 0x46, 0x01, 0x82, 0x91, 0xb6, 0x06, 0x0f, 0x26, 0x59, 0x71, 0x9d, 0x22,
	0x0f, 0xd0, 0x7b, 0x1f, 0xa1, 0x87, 0x3e, 0x40, 0xd1, 0x17, 0xe8, 0x35, 0x47, 0x1f, 0x7b, 0x12,
	0x5a, 0xb9, 0x6f, 0xd0, 0x5b, 0x4e, 0xc5, 0x2e, 0x69, 0x9b, 0x14, 0xd5, 0x40, 0xba, 0xed, 0x7e,
	0x33, 0xdf, 0xb7, 0x33, 0xdf, 0x8c, 0x08, 0x81, 0xee, 0x45, 0x7e, 0x2b, 0x0c, 0xc2, 0xb8, 0xc5,
	0x74, 0xde, 0x8a, 0x79, 0x38, 0x62, 0xad, 0xf8, 0xf2, 0x75, 0x3c, 0x18, 0xf9, 0x11, 0xf7, 0xc3,
	0x20, 0x77, 0x69, 0x46, 0xa3, 0x90, 0x87, 0xf8, 0x81, 0xc8, 0x6f, 0x32, 0x9d, 0x37, 0x65, 0x7e,
	0x33, 0x9b, 0xb2, 0xb3, 0x79, 0x1e, 0x9e, 0x87, 0x32, 0xaf, 0x25, 0x4e, 0x09, 0xa5, 0xf1, 0xb7,
	0x02, 0xeb, 0x76, 0x26, 0x8d, 0x18, 0xf8, 0x09, 0x2c, 0x07, 0xe1, 0x90, 0xb9, 0xfe, 0x70, 0x5b,
	0x79, 0xa8, 0x3c, 0x5a, 0xed, 0x6c, 0x4e, 0xc6, 0x5a, 0xd5, 0x0a, 0x87, 0x8c, 0x18, 0xef, 0x6f,
	0x4f, 0xb4, 0x2a, 0x92, 0xc8, 0x10, 0x7f, 0x09, 0x30, 0x62, 0xdf, 0x5f, 0xb2, 0x98, 0x0b, 0x86,
	0x2a, 0x19, 0x3b, 0x93, 0xb1, 0xb6, 0x4a, 0x13, 0x54, 0x92, 0xee, 0x2e, 0x74, 0x35, 0xcd, 0x26,
	0x43, 0xfc, 0x18, 0xaa, 0x5e, 0x14, 0x09, 0x5a, 0x59, 0xd2, 0xf0, 0x64, 0xac, 0x2d, 0xb5, 0xa3,
	0x48, 0x52, 0x92, 0x03, 0x5d, 0xf2, 0xa2, 0x88, 0x0c, 0xf1, 0xd7, 0xb0, 0xe6, 0x07, 0x31, 0xf7,
	0x82, 0x81, 0x2c, 0xac, 0x22, 0xf3, 0x3f, 0x99, 0x8c, 0x35, 0x20, 0x29, 0x2c, 0x49, 0x99, 0x1b,
	0x85, 0x1b, 0x02, 0x19, 0x36, 0xfe, 0x51, 0xa0, 0x96, 0x6d, 0x13, 0xbf, 0x84, 0xca, 0x05, 0xe3,
	0x9e, 0xec, 0x70, 0x4d, 0x7f, 0xd2, 0xfc, 0x80, 0x73, 0xcd, 0x2c, 0xb1, 0xcb, 0xb8, 0xd7, 0x59,
	0x79, 0x37, 0xd6, 0x4a, 0x57, 0x63, 0x4d, 0xa1, 0x52, 0x04, 0x1f, 0x42, 0x25, 0x8e, 0xd8, 0x40,
	0x36, 0xbf, 0x88, 0x98, 0x1d, 0xb1, 0x41, 0xa7, 0x22, 0xc4, 0xa8, 0x14, 0xc0, 0x5d, 0xa8, 0xc6,
	0xdc, 0xe3, 0x97, 0xb1, 0x34, 0x64, 0x4d, 0x6f, 0xcd, 0x2f, 0x25, 0x69, 0xa9, 0x58, 0x2a, 0xd2,
	0xf8, 0x51, 0x01, 0x34, 0x5d, 0x3c, 0x3e, 0x04, 0x35, 0x9d, 0xec, 0x9a, 0xfe, 0xf9, 0xdc, 0xfa,
	0xc4, 0xe8, 0x80, 0xd0, 0x9e, 0x8c, 0x35, 0x95, 0x18, 0x54, 0xf5, 0x87, 0xf8, 0x11, 0xac, 0x8c,
	0xd8, 0x1b, 0x3f, 0xf6, 0xc3, 0x40, 0x76, 0x5e, 0xe9, 0xd4, 0xde, 0x8f, 0xb5, 0x15, 0x9a, 0x62,
	0xf4, 0x36, 0xda, 0xf8, 0x7d, 0xaa, 0x0e, 0xd1, 0x37, 0x3e, 0x83, 0x7b, 0xec, 0x0d, 0x0b, 0xb8,
	0xcb, 0x47, 0xfe, 0xf9, 0x39, 0x1b, 0xa5, 0x25, 0xed, 0xcf, 0x5d, 0x92, 0x29, 0xd8, 0x4e, 0x42,
	0xa6, 0x35, 0x96, 0xb9, 0xe1, 0x1e, 0x2c, 0x7b, 0x03, 0x91, 0x13, 0x6f, 0xab, 0x0f, 0xcb, 0x0b,
	0x19, 0xd9, 0x96, 0xbc, 0xd4, 0xc8, 0x1b, 0x95, 0xc6, 0x19, 0xe0, 0xa2, 0xdb, 0xd8, 0x80, 0x25,
	0xe1, 0x34, 0x93, 0xa5, 0xaf, 0xeb, 0xcd, 0x85, 0xa6, 0xc5, 0x68, 0x42, 0x6e, 0xfc, 0xaa, 0xc0,
	0x46, 0xa1, 0x2f, 0xfc, 0x02, 0x2a, 0xfc, 0x6d, 0x74, 0x23, 0xad, 0x2f, 0xe8, 0xca, 0xdb, 0x88,
	0x51, 0xc9, 0xc7, 0x36, 0xd4, 0xb2, 0xb9, 0xe9, 0x8e, 0x3e, 0x9e, 0x5b, 0x2f, 0x75, 0x22, 0x27,
	0xd2, 0x78, 0x0e, 0xdb, 0xff, 0x35, 0x09, 0xbc, 0x03, 0x2b, 0x83, 0x30, 0xe0, 0x2c, 0xe0, 0xb1,
	0x2c, 0xbe, 0x46, 0x6f, 0xef, 0x8d, 0xbf, 0x94, 0xbc, 0x8f, 0x89, 0xd9, 0xf8, 0xfe, 0xed, 0x4a,
	0x2e, 0x75, 0xaa, 0x99, 0x0d, 0xfb, 0x2a, 0xf5, 0x40, 0x95, 0x1e, 0x7c, 0xf6, 0xc1, 0x9a, 0x13,
	0xa9, 0x4c, 0xe3, 0xd9, 0x3a, 0xca, 0xf9, 0x3a, 0xf0, 0x19, 0x6c, 0x08, 0xb2, 0xf8, 0x10, 0x05,
	0xdc, 0x4d, 0x86, 0x2c, 0xbf, 0x29, 0xf3, 0xfc, 0x7a, 0x13, 0x56, 0xf2, 0x1e, 0x45, 0xf1, 0x14,
	0xd2, 0xf8, 0x25, 0x5d, 0xf6, 0x2c, 0x88, 0xcd, 0xdc, 0x34, 0x9f, 0x2e, 0xf4, 0x46, 0xa6, 0x27,
	0x02, 0x35, 0xee, 0x5f, 0x30, 0x97, 0x87, 0xee, 0x0f, 0x9e, 0xcf, 0xe7, 0x32, 0xc6, 0xf1, 0x2f,
	0x98, 0x13, 0x9e, 0x78, 0x3e, 0xa7, 0xc0, 0x6f, 0xcf, 0xbb, 0xdf, 0xe5, 0x97, 0x4e, 0x6e, 0x24,
	0xfe, 0x08, 0xfe, 0x6f, 0x1f, 0x77, 0xec, 0x03, 0x4a, 0xfa, 0x0e, 0xe9, 0x59, 0x6e, 0xfb, 0xc0,
	0x21, 0xaf, 0x4c, 0x54, 0xc2, 0x1a, 0x3c, 0xc8, 0x05, 0xfa, 0xa6, 0x65, 0x10, 0xeb, 0xd0, 0x35,
	0xcc, 0x23, 0xd3, 0x31, 0x91, 0x52, 0x60, 0xbe, 0x68, 0x93, 0x23, 0xd3, 0x40, 0xea, 0xee, 0xcf,
	0x0a, 0x6c, 0xcd, 0xdc, 0x4f, 0x5c, 0x87, 0x9d, 0x1c, 0xc5, 0x7c, 0x65, 0x5a, 0x8e, 0x7b, 0x6c,
	0xbd, 0xb4, 0x7a, 0x27, 0x16, 0x2a, 0xe1, 0x6d, 0xd8, 0xcc, 0xc5, 0x0f, 0xa8, 0xd9, 0x76, 0x4c,
	0x03, 0x29, 0x85, 0xc8, 0x71, 0xdf, 0x90, 0x11, 0xb5, 0x10, 0x49, 0xea, 0x33, 0x50, 0x19, 0x7f,
	0x0c, 0x5b, 0xb9, 0x08, 0x35, 0xfb, 0x47, 0xed, 0x53, 0xd3, 0x40, 0x95, 0x5d, 0x07, 0xe0, 0xce,
	0x69, 0x7c, 0x1f, 0xb0, 0x68, 0xbb, 0x67, 0xb9, 0xce, 0x69, 0xdf, 0x14, 0x79, 0x3d, 0xea, 0xa0,
	0xd2, 0x34, 0x4e, 0x2c, 0xdb, 0xa4, 0x0e, 0x52, 0xa6, 0xf1, 0x7e, 0xef, 0x88, 0x1c, 0x9c, 0x22,
	0x75, 0xf7, 0x5b, 0xd8, 0x9c, 0x35, 0x49, 0xfc, 0x29, 0x68, 0xa2, 0x10, 0xf3, 0x9b, 0x63, 0xd1,
	0x6e, 0x96, 0x7a, 0xd0, 0xb3, 0x1c, 0x62, 0x1d, 0x67, 0xfc, 0x9e, 0x91, 0x74, 0xd2, 0x26, 0x0e,
	0x52, 0x76, 0x7f, 0x2b, 0x03, 0xdc, 0x4d, 0x16, 0x6f, 0xc1, 0x86, 0x43, 0xba, 0xa6, 0xeb, 0xf4,
	0x64, 0x82, 0x7b, 0x66, 0xd2, 0x1e, 0x2a, 0x15, 0xe0, 0x93, 0xa7, 0x5d, 0x1b, 0x29, 0x45, 0x58,
	0xef, 0xda, 0x48, 0x2d, 0xc2, 0xfb, 0x5d, 0x1b, 0x95, 0x45, 0x83, 0x53, 0x22, 0x7b, 0x5d, 0x1b,
	0x55, 0x8a, 0xb8, 0x2e, 0xf0, 0xa5, 0x22, 0xfe, 0x4c, 0xe0, 0xd5, 0x22, 0xfe, 0x85, 0xc0, 0x97,
	0x8b, 0xf8, 0xbe, 0xc0, 0x57, 0xc4, 0x4a, 0x4d, 0xbf, 0x2b, 0x02, 0xab, 0xc5, 0x80, 0x2e, 0x03,
	0x50, 0x0c, 0xec, 0xcb, 0xc0, 0x1a, 0xde, 0x04, 0x34, 0x25, 0x65, 0xa3, 0x5a, 0x11, 0xd5, 0x6d,
	0x74, 0xaf, 0x88, 0xee, 0xdb, 0x68, 0x7d, 0x86, 0x93, 0x7b, 0x36, 0xfa, 0xdf, 0x0c, 0x27, 0xf7,
	0x6c, 0x84, 0x8a, 0xf0, 0xf3, 0x3d, 0x1b, 0x6d, 0x74, 0xb6, 0xdf, 0x4d, 0xea, 0xca, 0xd5, 0xa4,
	0xae, 0xfc, 0x39, 0xa9, 0x2b, 0x3f, 0x5d, 0xd7, 0x4b, 0x57, 0xd7, 0xf5, 0xd2, 0x1f, 0xd7, 0xf5,
	0xd2, 0xeb, 0xaa, 0xfc, 0x37, 0xf6, 0xec, 0xdf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x83, 0xe5, 0xf6,
	0xa8, 0xf6, 0x09, 0x00, 0x00,
}

func (m *SubscriptionID) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SubscriptionID) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SubscriptionID) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.InstanceID) > 0 {
		i -= len(m.InstanceID)
		copy(dAtA[i:], m.InstanceID)
		i = encodeVarintSubscription(dAtA, i, uint64(len(m.InstanceID)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.AppID) > 0 {
		i -= len(m.AppID)
		copy(dAtA[i:], m.AppID)
		i = encodeVarintSubscription(dAtA, i, uint64(len(m.AppID)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.RequestID) > 0 {
		i -= len(m.RequestID)
		copy(dAtA[i:], m.RequestID)
		i = encodeVarintSubscription(dAtA, i, uint64(len(m.RequestID)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.NodeID) > 0 {
		i -= len(m.NodeID)
		copy(dAtA[i:], m.NodeID)
		i = encodeVarintSubscription(dAtA, i, uint64(len(m.NodeID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Subscription) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Subscription) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Subscription) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Status.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintSubscription(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size, err := m.Spec.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintSubscription(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size, err := m.SubscriptionMeta.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintSubscription(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *SubscriptionMeta) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SubscriptionMeta) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SubscriptionMeta) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Revision != 0 {
		i = encodeVarintSubscription(dAtA, i, uint64(m.Revision))
		i--
		dAtA[i] = 0x10
	}
	{
		size, err := m.ID.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintSubscription(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *SubscriptionSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SubscriptionSpec) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SubscriptionSpec) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Actions) > 0 {
		for iNdEx := len(m.Actions) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Actions[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintSubscription(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.EventTrigger != nil {
		{
			size, err := m.EventTrigger.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSubscription(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SubscriptionStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SubscriptionStatus) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SubscriptionStatus) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.State != 0 {
		i = encodeVarintSubscription(dAtA, i, uint64(m.State))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SubscriptionEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SubscriptionEvent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SubscriptionEvent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Subscription.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintSubscription(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if m.Type != 0 {
		i = encodeVarintSubscription(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SubscriptionEventTrigger) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SubscriptionEventTrigger) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SubscriptionEventTrigger) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Contents) > 0 {
		i -= len(m.Contents)
		copy(dAtA[i:], m.Contents)
		i = encodeVarintSubscription(dAtA, i, uint64(len(m.Contents)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SubscriptionAction) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SubscriptionAction) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SubscriptionAction) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SubsequentAction != nil {
		{
			size, err := m.SubsequentAction.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSubscription(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.Contents) > 0 {
		i -= len(m.Contents)
		copy(dAtA[i:], m.Contents)
		i = encodeVarintSubscription(dAtA, i, uint64(len(m.Contents)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Type != 0 {
		i = encodeVarintSubscription(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x10
	}
	if m.ID != 0 {
		i = encodeVarintSubscription(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SubsequentAction) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SubsequentAction) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SubsequentAction) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TimeToWait != 0 {
		i = encodeVarintSubscription(dAtA, i, uint64(m.TimeToWait))
		i--
		dAtA[i] = 0x10
	}
	if m.Type != 0 {
		i = encodeVarintSubscription(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintSubscription(dAtA []byte, offset int, v uint64) int {
	offset -= sovSubscription(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *SubscriptionID) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.NodeID)
	if l > 0 {
		n += 1 + l + sovSubscription(uint64(l))
	}
	l = len(m.RequestID)
	if l > 0 {
		n += 1 + l + sovSubscription(uint64(l))
	}
	l = len(m.AppID)
	if l > 0 {
		n += 1 + l + sovSubscription(uint64(l))
	}
	l = len(m.InstanceID)
	if l > 0 {
		n += 1 + l + sovSubscription(uint64(l))
	}
	return n
}

func (m *Subscription) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.SubscriptionMeta.Size()
	n += 1 + l + sovSubscription(uint64(l))
	l = m.Spec.Size()
	n += 1 + l + sovSubscription(uint64(l))
	l = m.Status.Size()
	n += 1 + l + sovSubscription(uint64(l))
	return n
}

func (m *SubscriptionMeta) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.ID.Size()
	n += 1 + l + sovSubscription(uint64(l))
	if m.Revision != 0 {
		n += 1 + sovSubscription(uint64(m.Revision))
	}
	return n
}

func (m *SubscriptionSpec) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EventTrigger != nil {
		l = m.EventTrigger.Size()
		n += 1 + l + sovSubscription(uint64(l))
	}
	if len(m.Actions) > 0 {
		for _, e := range m.Actions {
			l = e.Size()
			n += 1 + l + sovSubscription(uint64(l))
		}
	}
	return n
}

func (m *SubscriptionStatus) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.State != 0 {
		n += 1 + sovSubscription(uint64(m.State))
	}
	return n
}

func (m *SubscriptionEvent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovSubscription(uint64(m.Type))
	}
	l = m.Subscription.Size()
	n += 1 + l + sovSubscription(uint64(l))
	return n
}

func (m *SubscriptionEventTrigger) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Contents)
	if l > 0 {
		n += 1 + l + sovSubscription(uint64(l))
	}
	return n
}

func (m *SubscriptionAction) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovSubscription(uint64(m.ID))
	}
	if m.Type != 0 {
		n += 1 + sovSubscription(uint64(m.Type))
	}
	l = len(m.Contents)
	if l > 0 {
		n += 1 + l + sovSubscription(uint64(l))
	}
	if m.SubsequentAction != nil {
		l = m.SubsequentAction.Size()
		n += 1 + l + sovSubscription(uint64(l))
	}
	return n
}

func (m *SubsequentAction) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovSubscription(uint64(m.Type))
	}
	if m.TimeToWait != 0 {
		n += 1 + sovSubscription(uint64(m.TimeToWait))
	}
	return n
}

func sovSubscription(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozSubscription(x uint64) (n int) {
	return sovSubscription(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *SubscriptionID) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSubscription
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SubscriptionID: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SubscriptionID: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSubscription
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSubscription
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSubscription
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NodeID = NodeID(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSubscription
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSubscription
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSubscription
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RequestID = RequestID(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSubscription
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSubscription
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSubscription
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AppID = AppID(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InstanceID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSubscription
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSubscription
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSubscription
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InstanceID = InstanceID(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSubscription(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSubscription
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSubscription
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Subscription) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSubscription
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Subscription: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Subscription: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubscriptionMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSubscription
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSubscription
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSubscription
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.SubscriptionMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSubscription
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSubscription
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSubscription
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Spec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSubscription
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSubscription
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSubscription
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSubscription(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSubscription
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSubscription
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SubscriptionMeta) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSubscription
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SubscriptionMeta: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SubscriptionMeta: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSubscription
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSubscription
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSubscription
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Revision", wireType)
			}
			m.Revision = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSubscription
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Revision |= Revision(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSubscription(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSubscription
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSubscription
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SubscriptionSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSubscription
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SubscriptionSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SubscriptionSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventTrigger", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSubscription
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSubscription
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSubscription
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.EventTrigger == nil {
				m.EventTrigger = &SubscriptionEventTrigger{}
			}
			if err := m.EventTrigger.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Actions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSubscription
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSubscription
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSubscription
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Actions = append(m.Actions, SubscriptionAction{})
			if err := m.Actions[len(m.Actions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSubscription(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSubscription
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSubscription
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SubscriptionStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSubscription
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SubscriptionStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SubscriptionStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSubscription
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= SubscriptionState(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSubscription(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSubscription
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSubscription
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SubscriptionEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSubscription
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SubscriptionEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SubscriptionEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSubscription
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= SubscriptionEventType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Subscription", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSubscription
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSubscription
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSubscription
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Subscription.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSubscription(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSubscription
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSubscription
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SubscriptionEventTrigger) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSubscription
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SubscriptionEventTrigger: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SubscriptionEventTrigger: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Contents", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSubscription
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSubscription
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthSubscription
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Contents = append(m.Contents[:0], dAtA[iNdEx:postIndex]...)
			if m.Contents == nil {
				m.Contents = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSubscription(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSubscription
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSubscription
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SubscriptionAction) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSubscription
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SubscriptionAction: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SubscriptionAction: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSubscription
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSubscription
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= ActionType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Contents", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSubscription
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSubscription
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthSubscription
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Contents = append(m.Contents[:0], dAtA[iNdEx:postIndex]...)
			if m.Contents == nil {
				m.Contents = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubsequentAction", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSubscription
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSubscription
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSubscription
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SubsequentAction == nil {
				m.SubsequentAction = &SubsequentAction{}
			}
			if err := m.SubsequentAction.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSubscription(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSubscription
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSubscription
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SubsequentAction) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSubscription
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SubsequentAction: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SubsequentAction: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSubscription
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= SubsequentActionType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeToWait", wireType)
			}
			m.TimeToWait = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSubscription
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TimeToWait |= TimeToWait(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSubscription(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSubscription
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSubscription
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSubscription(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSubscription
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSubscription
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSubscription
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthSubscription
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupSubscription
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthSubscription
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthSubscription        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSubscription          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupSubscription = fmt.Errorf("proto: unexpected end of group")
)
