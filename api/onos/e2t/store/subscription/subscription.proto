/*
Copyright 2020-present Open Networking Foundation.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

syntax = "proto3";

// Package onos.e2t.store.subscription defines message types for E2T stores
package onos.e2t.store.subscription;

import "gogoproto/gogo.proto";

message SubscriptionID {
    string node_id = 1 [(gogoproto.customname) = "NodeID", (gogoproto.casttype) = "NodeID"];
    string request_id = 2 [(gogoproto.customname) = "RequestID", (gogoproto.casttype) = "RequestID"];
    string app_id = 3 [(gogoproto.customname) = "AppID", (gogoproto.casttype) = "AppID"];
    string instance_id = 4 [(gogoproto.customname) = "InstanceID", (gogoproto.casttype) = "InstanceID"];
}

// Subscription is a subscription state
message Subscription {
    SubscriptionMeta meta = 1 [(gogoproto.nullable) = false, (gogoproto.embed) = true];
    SubscriptionSpec spec = 2 [(gogoproto.nullable) = false];
    SubscriptionStatus status = 3 [(gogoproto.nullable) = false];
}

// SubscriptionMeta is subscription metadata
message SubscriptionMeta {
    SubscriptionID id = 1 [(gogoproto.customname) = "ID", (gogoproto.nullable) = false];
    uint64 revision = 2 [(gogoproto.casttype) = "Revision"];
}

message SubscriptionSpec {
    SubscriptionEventTrigger event_trigger = 1;
    repeated SubscriptionAction actions = 2 [(gogoproto.nullable) = false];
}

// SubscriptionStatus is the subscription status
message SubscriptionStatus {
    SubscriptionState state = 1;
}

// SubscriptionState is a subscription state
enum SubscriptionState {
    SUBSCRIPTION_ACTIVE = 0;
    SUBSCRIPTION_PENDING_DELETE = 1;
    SUBSCRIPTION_FAILED = 2;
}

// SubscriptionEventType is a subscription event type
enum SubscriptionEventType {
    SUBSCRIPTION_EVENT_UNKNOWN = 0;
    SUBSCRIPTION_CREATED = 1;
    SUBSCRIPTION_UPDATED = 2;
    SUBSCRIPTION_DELETED = 3;
    SUBSCRIPTION_REPLAYED = 4;
}

// SubscriptionEvent is a subscription event
message SubscriptionEvent {
    SubscriptionEventType type = 1;
    Subscription subscription = 2 [(gogoproto.nullable) = false];
}

message SubscriptionEventTrigger {
    bytes contents = 1;
}

message SubscriptionAction {
    int32 id = 1 [(gogoproto.customname) = "ID"];
    ActionType type = 2;
    bytes contents = 3;
    SubsequentAction subsequent_action = 4;
}

enum ActionType {
    ACTION_TYPE_REPORT = 0;
    ACTION_TYPE_INSERT = 1;
    ACTION_TYPE_POLICY = 2;
}

// sequence from e2ap-v01.00.00.asn1:1132
message SubsequentAction {
    SubsequentActionType type = 1;
    TimeToWait time_to_wait = 2;
}

enum SubsequentActionType {
    SUBSEQUENT_ACTION_TYPE_CONTINUE = 0;
    SUBSEQUENT_ACTION_TYPE_WAIT = 1;
}

enum TimeToWait {
    TIME_TO_WAIT_ZERO = 0;
    TIME_TO_WAIT_W1MS = 1;
    TIME_TO_WAIT_W2MS = 2;
    TIME_TO_WAIT_W5MS = 3;
    TIME_TO_WAIT_W10MS = 4;
    TIME_TO_WAIT_W20MS = 5;
    TIME_TO_WAIT_W30MS = 6;
    TIME_TO_WAIT_W40MS = 7;
    TIME_TO_WAIT_W50MS = 8;
    TIME_TO_WAIT_W100MS = 9;
    TIME_TO_WAIT_W200MS = 10;
    TIME_TO_WAIT_W500MS = 11;
    TIME_TO_WAIT_W1S = 12;
    TIME_TO_WAIT_W2S = 13;
    TIME_TO_WAIT_W5S = 14;
    TIME_TO_WAIT_W10S = 15;
    TIME_TO_WAIT_W20S = 16;
    TIME_TO_WAIT_W60S = 17;
}
