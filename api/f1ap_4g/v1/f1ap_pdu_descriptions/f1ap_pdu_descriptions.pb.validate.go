// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/f1ap_4g/v1/f1ap_pdu_descriptions.proto

package f1appdudescriptionsv1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on F1ApPDuExtIes with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *F1ApPDuExtIes) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on F1ApPDuExtIes with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in F1ApPDuExtIesMultiError, or
// nil if none found.
func (m *F1ApPDuExtIes) ValidateAll() error {
	return m.validate(true)
}

func (m *F1ApPDuExtIes) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return F1ApPDuExtIesMultiError(errors)
	}

	return nil
}

// F1ApPDuExtIesMultiError is an error wrapping multiple validation errors
// returned by F1ApPDuExtIes.ValidateAll() if the designated constraints
// aren't met.
type F1ApPDuExtIesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m F1ApPDuExtIesMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m F1ApPDuExtIesMultiError) AllErrors() []error { return m }

// F1ApPDuExtIesValidationError is the validation error returned by
// F1ApPDuExtIes.Validate if the designated constraints aren't met.
type F1ApPDuExtIesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e F1ApPDuExtIesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e F1ApPDuExtIesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e F1ApPDuExtIesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e F1ApPDuExtIesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e F1ApPDuExtIesValidationError) ErrorName() string { return "F1ApPDuExtIesValidationError" }

// Error satisfies the builtin error interface
func (e F1ApPDuExtIesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sF1ApPDuExtIes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = F1ApPDuExtIesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = F1ApPDuExtIesValidationError{}

// Validate checks the field values on F1ApPDu with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *F1ApPDu) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on F1ApPDu with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in F1ApPDuMultiError, or nil if none found.
func (m *F1ApPDu) ValidateAll() error {
	return m.validate(true)
}

func (m *F1ApPDu) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch m.F1ApPdu.(type) {

	case *F1ApPDu_InitiatingMessage:

		if all {
			switch v := interface{}(m.GetInitiatingMessage()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, F1ApPDuValidationError{
						field:  "InitiatingMessage",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, F1ApPDuValidationError{
						field:  "InitiatingMessage",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetInitiatingMessage()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return F1ApPDuValidationError{
					field:  "InitiatingMessage",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *F1ApPDu_SuccessfulOutcome:

		if all {
			switch v := interface{}(m.GetSuccessfulOutcome()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, F1ApPDuValidationError{
						field:  "SuccessfulOutcome",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, F1ApPDuValidationError{
						field:  "SuccessfulOutcome",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetSuccessfulOutcome()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return F1ApPDuValidationError{
					field:  "SuccessfulOutcome",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *F1ApPDu_UnsuccessfulOutcome:

		if all {
			switch v := interface{}(m.GetUnsuccessfulOutcome()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, F1ApPDuValidationError{
						field:  "UnsuccessfulOutcome",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, F1ApPDuValidationError{
						field:  "UnsuccessfulOutcome",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetUnsuccessfulOutcome()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return F1ApPDuValidationError{
					field:  "UnsuccessfulOutcome",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *F1ApPDu_ChoiceExtension:

		if all {
			switch v := interface{}(m.GetChoiceExtension()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, F1ApPDuValidationError{
						field:  "ChoiceExtension",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, F1ApPDuValidationError{
						field:  "ChoiceExtension",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetChoiceExtension()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return F1ApPDuValidationError{
					field:  "ChoiceExtension",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return F1ApPDuMultiError(errors)
	}

	return nil
}

// F1ApPDuMultiError is an error wrapping multiple validation errors returned
// by F1ApPDu.ValidateAll() if the designated constraints aren't met.
type F1ApPDuMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m F1ApPDuMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m F1ApPDuMultiError) AllErrors() []error { return m }

// F1ApPDuValidationError is the validation error returned by F1ApPDu.Validate
// if the designated constraints aren't met.
type F1ApPDuValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e F1ApPDuValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e F1ApPDuValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e F1ApPDuValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e F1ApPDuValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e F1ApPDuValidationError) ErrorName() string { return "F1ApPDuValidationError" }

// Error satisfies the builtin error interface
func (e F1ApPDuValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sF1ApPDu.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = F1ApPDuValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = F1ApPDuValidationError{}

// Validate checks the field values on InitiatingMessage with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *InitiatingMessage) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on InitiatingMessage with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// InitiatingMessageMultiError, or nil if none found.
func (m *InitiatingMessage) ValidateAll() error {
	return m.validate(true)
}

func (m *InitiatingMessage) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ProcedureCode

	// no validation rules for Criticality

	if all {
		switch v := interface{}(m.GetValue()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, InitiatingMessageValidationError{
					field:  "Value",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, InitiatingMessageValidationError{
					field:  "Value",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetValue()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return InitiatingMessageValidationError{
				field:  "Value",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return InitiatingMessageMultiError(errors)
	}

	return nil
}

// InitiatingMessageMultiError is an error wrapping multiple validation errors
// returned by InitiatingMessage.ValidateAll() if the designated constraints
// aren't met.
type InitiatingMessageMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m InitiatingMessageMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m InitiatingMessageMultiError) AllErrors() []error { return m }

// InitiatingMessageValidationError is the validation error returned by
// InitiatingMessage.Validate if the designated constraints aren't met.
type InitiatingMessageValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InitiatingMessageValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InitiatingMessageValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InitiatingMessageValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InitiatingMessageValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InitiatingMessageValidationError) ErrorName() string {
	return "InitiatingMessageValidationError"
}

// Error satisfies the builtin error interface
func (e InitiatingMessageValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInitiatingMessage.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InitiatingMessageValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InitiatingMessageValidationError{}

// Validate checks the field values on
// InitiatingMessageF1ApElementaryProcedures with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *InitiatingMessageF1ApElementaryProcedures) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// InitiatingMessageF1ApElementaryProcedures with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// InitiatingMessageF1ApElementaryProceduresMultiError, or nil if none found.
func (m *InitiatingMessageF1ApElementaryProcedures) ValidateAll() error {
	return m.validate(true)
}

func (m *InitiatingMessageF1ApElementaryProcedures) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch m.ImValues.(type) {

	case *InitiatingMessageF1ApElementaryProcedures_Reset_:

		if all {
			switch v := interface{}(m.GetReset_()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, InitiatingMessageF1ApElementaryProceduresValidationError{
						field:  "Reset_",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, InitiatingMessageF1ApElementaryProceduresValidationError{
						field:  "Reset_",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetReset_()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return InitiatingMessageF1ApElementaryProceduresValidationError{
					field:  "Reset_",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *InitiatingMessageF1ApElementaryProcedures_F1SetupRequest:

		if all {
			switch v := interface{}(m.GetF1SetupRequest()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, InitiatingMessageF1ApElementaryProceduresValidationError{
						field:  "F1SetupRequest",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, InitiatingMessageF1ApElementaryProceduresValidationError{
						field:  "F1SetupRequest",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetF1SetupRequest()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return InitiatingMessageF1ApElementaryProceduresValidationError{
					field:  "F1SetupRequest",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *InitiatingMessageF1ApElementaryProcedures_GNbduconfigurationUpdate:

		if all {
			switch v := interface{}(m.GetGNbduconfigurationUpdate()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, InitiatingMessageF1ApElementaryProceduresValidationError{
						field:  "GNbduconfigurationUpdate",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, InitiatingMessageF1ApElementaryProceduresValidationError{
						field:  "GNbduconfigurationUpdate",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetGNbduconfigurationUpdate()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return InitiatingMessageF1ApElementaryProceduresValidationError{
					field:  "GNbduconfigurationUpdate",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *InitiatingMessageF1ApElementaryProcedures_GNbcuconfigurationUpdate:

		if all {
			switch v := interface{}(m.GetGNbcuconfigurationUpdate()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, InitiatingMessageF1ApElementaryProceduresValidationError{
						field:  "GNbcuconfigurationUpdate",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, InitiatingMessageF1ApElementaryProceduresValidationError{
						field:  "GNbcuconfigurationUpdate",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetGNbcuconfigurationUpdate()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return InitiatingMessageF1ApElementaryProceduresValidationError{
					field:  "GNbcuconfigurationUpdate",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *InitiatingMessageF1ApElementaryProcedures_UEcontextSetupRequest:

		if all {
			switch v := interface{}(m.GetUEcontextSetupRequest()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, InitiatingMessageF1ApElementaryProceduresValidationError{
						field:  "UEcontextSetupRequest",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, InitiatingMessageF1ApElementaryProceduresValidationError{
						field:  "UEcontextSetupRequest",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetUEcontextSetupRequest()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return InitiatingMessageF1ApElementaryProceduresValidationError{
					field:  "UEcontextSetupRequest",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *InitiatingMessageF1ApElementaryProcedures_UEcontextReleaseCommand:

		if all {
			switch v := interface{}(m.GetUEcontextReleaseCommand()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, InitiatingMessageF1ApElementaryProceduresValidationError{
						field:  "UEcontextReleaseCommand",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, InitiatingMessageF1ApElementaryProceduresValidationError{
						field:  "UEcontextReleaseCommand",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetUEcontextReleaseCommand()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return InitiatingMessageF1ApElementaryProceduresValidationError{
					field:  "UEcontextReleaseCommand",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *InitiatingMessageF1ApElementaryProcedures_UEcontextModificationRequest:

		if all {
			switch v := interface{}(m.GetUEcontextModificationRequest()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, InitiatingMessageF1ApElementaryProceduresValidationError{
						field:  "UEcontextModificationRequest",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, InitiatingMessageF1ApElementaryProceduresValidationError{
						field:  "UEcontextModificationRequest",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetUEcontextModificationRequest()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return InitiatingMessageF1ApElementaryProceduresValidationError{
					field:  "UEcontextModificationRequest",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *InitiatingMessageF1ApElementaryProcedures_UEcontextModificationRequired:

		if all {
			switch v := interface{}(m.GetUEcontextModificationRequired()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, InitiatingMessageF1ApElementaryProceduresValidationError{
						field:  "UEcontextModificationRequired",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, InitiatingMessageF1ApElementaryProceduresValidationError{
						field:  "UEcontextModificationRequired",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetUEcontextModificationRequired()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return InitiatingMessageF1ApElementaryProceduresValidationError{
					field:  "UEcontextModificationRequired",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *InitiatingMessageF1ApElementaryProcedures_WriteReplaceWarningRequest:

		if all {
			switch v := interface{}(m.GetWriteReplaceWarningRequest()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, InitiatingMessageF1ApElementaryProceduresValidationError{
						field:  "WriteReplaceWarningRequest",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, InitiatingMessageF1ApElementaryProceduresValidationError{
						field:  "WriteReplaceWarningRequest",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetWriteReplaceWarningRequest()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return InitiatingMessageF1ApElementaryProceduresValidationError{
					field:  "WriteReplaceWarningRequest",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *InitiatingMessageF1ApElementaryProcedures_PWscancelRequest:

		if all {
			switch v := interface{}(m.GetPWscancelRequest()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, InitiatingMessageF1ApElementaryProceduresValidationError{
						field:  "PWscancelRequest",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, InitiatingMessageF1ApElementaryProceduresValidationError{
						field:  "PWscancelRequest",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetPWscancelRequest()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return InitiatingMessageF1ApElementaryProceduresValidationError{
					field:  "PWscancelRequest",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *InitiatingMessageF1ApElementaryProcedures_ErrorIndication:

		if all {
			switch v := interface{}(m.GetErrorIndication()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, InitiatingMessageF1ApElementaryProceduresValidationError{
						field:  "ErrorIndication",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, InitiatingMessageF1ApElementaryProceduresValidationError{
						field:  "ErrorIndication",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetErrorIndication()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return InitiatingMessageF1ApElementaryProceduresValidationError{
					field:  "ErrorIndication",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *InitiatingMessageF1ApElementaryProcedures_UEcontextReleaseRequest:

		if all {
			switch v := interface{}(m.GetUEcontextReleaseRequest()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, InitiatingMessageF1ApElementaryProceduresValidationError{
						field:  "UEcontextReleaseRequest",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, InitiatingMessageF1ApElementaryProceduresValidationError{
						field:  "UEcontextReleaseRequest",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetUEcontextReleaseRequest()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return InitiatingMessageF1ApElementaryProceduresValidationError{
					field:  "UEcontextReleaseRequest",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *InitiatingMessageF1ApElementaryProcedures_InitialUlrrcmessageTransfer:

		if all {
			switch v := interface{}(m.GetInitialUlrrcmessageTransfer()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, InitiatingMessageF1ApElementaryProceduresValidationError{
						field:  "InitialUlrrcmessageTransfer",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, InitiatingMessageF1ApElementaryProceduresValidationError{
						field:  "InitialUlrrcmessageTransfer",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetInitialUlrrcmessageTransfer()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return InitiatingMessageF1ApElementaryProceduresValidationError{
					field:  "InitialUlrrcmessageTransfer",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *InitiatingMessageF1ApElementaryProcedures_DLrrcmessageTransfer:

		if all {
			switch v := interface{}(m.GetDLrrcmessageTransfer()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, InitiatingMessageF1ApElementaryProceduresValidationError{
						field:  "DLrrcmessageTransfer",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, InitiatingMessageF1ApElementaryProceduresValidationError{
						field:  "DLrrcmessageTransfer",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetDLrrcmessageTransfer()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return InitiatingMessageF1ApElementaryProceduresValidationError{
					field:  "DLrrcmessageTransfer",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *InitiatingMessageF1ApElementaryProcedures_ULrrcmessageTransfer:

		if all {
			switch v := interface{}(m.GetULrrcmessageTransfer()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, InitiatingMessageF1ApElementaryProceduresValidationError{
						field:  "ULrrcmessageTransfer",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, InitiatingMessageF1ApElementaryProceduresValidationError{
						field:  "ULrrcmessageTransfer",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetULrrcmessageTransfer()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return InitiatingMessageF1ApElementaryProceduresValidationError{
					field:  "ULrrcmessageTransfer",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *InitiatingMessageF1ApElementaryProcedures_UEinactivityNotification:

		if all {
			switch v := interface{}(m.GetUEinactivityNotification()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, InitiatingMessageF1ApElementaryProceduresValidationError{
						field:  "UEinactivityNotification",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, InitiatingMessageF1ApElementaryProceduresValidationError{
						field:  "UEinactivityNotification",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetUEinactivityNotification()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return InitiatingMessageF1ApElementaryProceduresValidationError{
					field:  "UEinactivityNotification",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *InitiatingMessageF1ApElementaryProcedures_GNbduresourceCoordinationRequest:

		if all {
			switch v := interface{}(m.GetGNbduresourceCoordinationRequest()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, InitiatingMessageF1ApElementaryProceduresValidationError{
						field:  "GNbduresourceCoordinationRequest",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, InitiatingMessageF1ApElementaryProceduresValidationError{
						field:  "GNbduresourceCoordinationRequest",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetGNbduresourceCoordinationRequest()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return InitiatingMessageF1ApElementaryProceduresValidationError{
					field:  "GNbduresourceCoordinationRequest",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *InitiatingMessageF1ApElementaryProcedures_PrivateMessage:

		if all {
			switch v := interface{}(m.GetPrivateMessage()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, InitiatingMessageF1ApElementaryProceduresValidationError{
						field:  "PrivateMessage",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, InitiatingMessageF1ApElementaryProceduresValidationError{
						field:  "PrivateMessage",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetPrivateMessage()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return InitiatingMessageF1ApElementaryProceduresValidationError{
					field:  "PrivateMessage",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *InitiatingMessageF1ApElementaryProcedures_SystemInformationDeliveryCommand:

		if all {
			switch v := interface{}(m.GetSystemInformationDeliveryCommand()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, InitiatingMessageF1ApElementaryProceduresValidationError{
						field:  "SystemInformationDeliveryCommand",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, InitiatingMessageF1ApElementaryProceduresValidationError{
						field:  "SystemInformationDeliveryCommand",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetSystemInformationDeliveryCommand()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return InitiatingMessageF1ApElementaryProceduresValidationError{
					field:  "SystemInformationDeliveryCommand",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *InitiatingMessageF1ApElementaryProcedures_Paging:

		if all {
			switch v := interface{}(m.GetPaging()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, InitiatingMessageF1ApElementaryProceduresValidationError{
						field:  "Paging",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, InitiatingMessageF1ApElementaryProceduresValidationError{
						field:  "Paging",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetPaging()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return InitiatingMessageF1ApElementaryProceduresValidationError{
					field:  "Paging",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *InitiatingMessageF1ApElementaryProcedures_Notify:

		if all {
			switch v := interface{}(m.GetNotify()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, InitiatingMessageF1ApElementaryProceduresValidationError{
						field:  "Notify",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, InitiatingMessageF1ApElementaryProceduresValidationError{
						field:  "Notify",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetNotify()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return InitiatingMessageF1ApElementaryProceduresValidationError{
					field:  "Notify",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *InitiatingMessageF1ApElementaryProcedures_NetworkAccessRateReduction:

		if all {
			switch v := interface{}(m.GetNetworkAccessRateReduction()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, InitiatingMessageF1ApElementaryProceduresValidationError{
						field:  "NetworkAccessRateReduction",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, InitiatingMessageF1ApElementaryProceduresValidationError{
						field:  "NetworkAccessRateReduction",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetNetworkAccessRateReduction()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return InitiatingMessageF1ApElementaryProceduresValidationError{
					field:  "NetworkAccessRateReduction",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *InitiatingMessageF1ApElementaryProcedures_PWsrestartIndication:

		if all {
			switch v := interface{}(m.GetPWsrestartIndication()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, InitiatingMessageF1ApElementaryProceduresValidationError{
						field:  "PWsrestartIndication",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, InitiatingMessageF1ApElementaryProceduresValidationError{
						field:  "PWsrestartIndication",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetPWsrestartIndication()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return InitiatingMessageF1ApElementaryProceduresValidationError{
					field:  "PWsrestartIndication",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *InitiatingMessageF1ApElementaryProcedures_PWsfailureIndication:

		if all {
			switch v := interface{}(m.GetPWsfailureIndication()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, InitiatingMessageF1ApElementaryProceduresValidationError{
						field:  "PWsfailureIndication",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, InitiatingMessageF1ApElementaryProceduresValidationError{
						field:  "PWsfailureIndication",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetPWsfailureIndication()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return InitiatingMessageF1ApElementaryProceduresValidationError{
					field:  "PWsfailureIndication",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *InitiatingMessageF1ApElementaryProcedures_GNbdustatusIndication:

		if all {
			switch v := interface{}(m.GetGNbdustatusIndication()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, InitiatingMessageF1ApElementaryProceduresValidationError{
						field:  "GNbdustatusIndication",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, InitiatingMessageF1ApElementaryProceduresValidationError{
						field:  "GNbdustatusIndication",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetGNbdustatusIndication()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return InitiatingMessageF1ApElementaryProceduresValidationError{
					field:  "GNbdustatusIndication",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *InitiatingMessageF1ApElementaryProcedures_RRcdeliveryReport:

		if all {
			switch v := interface{}(m.GetRRcdeliveryReport()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, InitiatingMessageF1ApElementaryProceduresValidationError{
						field:  "RRcdeliveryReport",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, InitiatingMessageF1ApElementaryProceduresValidationError{
						field:  "RRcdeliveryReport",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetRRcdeliveryReport()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return InitiatingMessageF1ApElementaryProceduresValidationError{
					field:  "RRcdeliveryReport",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *InitiatingMessageF1ApElementaryProcedures_F1RemovalRequest:

		if all {
			switch v := interface{}(m.GetF1RemovalRequest()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, InitiatingMessageF1ApElementaryProceduresValidationError{
						field:  "F1RemovalRequest",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, InitiatingMessageF1ApElementaryProceduresValidationError{
						field:  "F1RemovalRequest",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetF1RemovalRequest()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return InitiatingMessageF1ApElementaryProceduresValidationError{
					field:  "F1RemovalRequest",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *InitiatingMessageF1ApElementaryProcedures_TraceStart:

		if all {
			switch v := interface{}(m.GetTraceStart()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, InitiatingMessageF1ApElementaryProceduresValidationError{
						field:  "TraceStart",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, InitiatingMessageF1ApElementaryProceduresValidationError{
						field:  "TraceStart",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetTraceStart()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return InitiatingMessageF1ApElementaryProceduresValidationError{
					field:  "TraceStart",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return InitiatingMessageF1ApElementaryProceduresMultiError(errors)
	}

	return nil
}

// InitiatingMessageF1ApElementaryProceduresMultiError is an error wrapping
// multiple validation errors returned by
// InitiatingMessageF1ApElementaryProcedures.ValidateAll() if the designated
// constraints aren't met.
type InitiatingMessageF1ApElementaryProceduresMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m InitiatingMessageF1ApElementaryProceduresMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m InitiatingMessageF1ApElementaryProceduresMultiError) AllErrors() []error { return m }

// InitiatingMessageF1ApElementaryProceduresValidationError is the validation
// error returned by InitiatingMessageF1ApElementaryProcedures.Validate if the
// designated constraints aren't met.
type InitiatingMessageF1ApElementaryProceduresValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InitiatingMessageF1ApElementaryProceduresValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InitiatingMessageF1ApElementaryProceduresValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InitiatingMessageF1ApElementaryProceduresValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InitiatingMessageF1ApElementaryProceduresValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InitiatingMessageF1ApElementaryProceduresValidationError) ErrorName() string {
	return "InitiatingMessageF1ApElementaryProceduresValidationError"
}

// Error satisfies the builtin error interface
func (e InitiatingMessageF1ApElementaryProceduresValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInitiatingMessageF1ApElementaryProcedures.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InitiatingMessageF1ApElementaryProceduresValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InitiatingMessageF1ApElementaryProceduresValidationError{}

// Validate checks the field values on SuccessfulOutcome with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *SuccessfulOutcome) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SuccessfulOutcome with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SuccessfulOutcomeMultiError, or nil if none found.
func (m *SuccessfulOutcome) ValidateAll() error {
	return m.validate(true)
}

func (m *SuccessfulOutcome) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ProcedureCode

	// no validation rules for Criticality

	if all {
		switch v := interface{}(m.GetValue()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SuccessfulOutcomeValidationError{
					field:  "Value",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SuccessfulOutcomeValidationError{
					field:  "Value",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetValue()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SuccessfulOutcomeValidationError{
				field:  "Value",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SuccessfulOutcomeMultiError(errors)
	}

	return nil
}

// SuccessfulOutcomeMultiError is an error wrapping multiple validation errors
// returned by SuccessfulOutcome.ValidateAll() if the designated constraints
// aren't met.
type SuccessfulOutcomeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SuccessfulOutcomeMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SuccessfulOutcomeMultiError) AllErrors() []error { return m }

// SuccessfulOutcomeValidationError is the validation error returned by
// SuccessfulOutcome.Validate if the designated constraints aren't met.
type SuccessfulOutcomeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SuccessfulOutcomeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SuccessfulOutcomeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SuccessfulOutcomeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SuccessfulOutcomeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SuccessfulOutcomeValidationError) ErrorName() string {
	return "SuccessfulOutcomeValidationError"
}

// Error satisfies the builtin error interface
func (e SuccessfulOutcomeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSuccessfulOutcome.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SuccessfulOutcomeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SuccessfulOutcomeValidationError{}

// Validate checks the field values on
// SuccessfulOutcomeF1ApElementaryProcedures with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SuccessfulOutcomeF1ApElementaryProcedures) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// SuccessfulOutcomeF1ApElementaryProcedures with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// SuccessfulOutcomeF1ApElementaryProceduresMultiError, or nil if none found.
func (m *SuccessfulOutcomeF1ApElementaryProcedures) ValidateAll() error {
	return m.validate(true)
}

func (m *SuccessfulOutcomeF1ApElementaryProcedures) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch m.SoValues.(type) {

	case *SuccessfulOutcomeF1ApElementaryProcedures_ResetAcknowledge:

		if all {
			switch v := interface{}(m.GetResetAcknowledge()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SuccessfulOutcomeF1ApElementaryProceduresValidationError{
						field:  "ResetAcknowledge",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SuccessfulOutcomeF1ApElementaryProceduresValidationError{
						field:  "ResetAcknowledge",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetResetAcknowledge()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SuccessfulOutcomeF1ApElementaryProceduresValidationError{
					field:  "ResetAcknowledge",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *SuccessfulOutcomeF1ApElementaryProcedures_F1SetupResponse:

		if all {
			switch v := interface{}(m.GetF1SetupResponse()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SuccessfulOutcomeF1ApElementaryProceduresValidationError{
						field:  "F1SetupResponse",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SuccessfulOutcomeF1ApElementaryProceduresValidationError{
						field:  "F1SetupResponse",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetF1SetupResponse()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SuccessfulOutcomeF1ApElementaryProceduresValidationError{
					field:  "F1SetupResponse",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *SuccessfulOutcomeF1ApElementaryProcedures_GNbduconfigurationUpdateAcknowledge:

		if all {
			switch v := interface{}(m.GetGNbduconfigurationUpdateAcknowledge()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SuccessfulOutcomeF1ApElementaryProceduresValidationError{
						field:  "GNbduconfigurationUpdateAcknowledge",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SuccessfulOutcomeF1ApElementaryProceduresValidationError{
						field:  "GNbduconfigurationUpdateAcknowledge",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetGNbduconfigurationUpdateAcknowledge()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SuccessfulOutcomeF1ApElementaryProceduresValidationError{
					field:  "GNbduconfigurationUpdateAcknowledge",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return SuccessfulOutcomeF1ApElementaryProceduresMultiError(errors)
	}

	return nil
}

// SuccessfulOutcomeF1ApElementaryProceduresMultiError is an error wrapping
// multiple validation errors returned by
// SuccessfulOutcomeF1ApElementaryProcedures.ValidateAll() if the designated
// constraints aren't met.
type SuccessfulOutcomeF1ApElementaryProceduresMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SuccessfulOutcomeF1ApElementaryProceduresMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SuccessfulOutcomeF1ApElementaryProceduresMultiError) AllErrors() []error { return m }

// SuccessfulOutcomeF1ApElementaryProceduresValidationError is the validation
// error returned by SuccessfulOutcomeF1ApElementaryProcedures.Validate if the
// designated constraints aren't met.
type SuccessfulOutcomeF1ApElementaryProceduresValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SuccessfulOutcomeF1ApElementaryProceduresValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SuccessfulOutcomeF1ApElementaryProceduresValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SuccessfulOutcomeF1ApElementaryProceduresValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SuccessfulOutcomeF1ApElementaryProceduresValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SuccessfulOutcomeF1ApElementaryProceduresValidationError) ErrorName() string {
	return "SuccessfulOutcomeF1ApElementaryProceduresValidationError"
}

// Error satisfies the builtin error interface
func (e SuccessfulOutcomeF1ApElementaryProceduresValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSuccessfulOutcomeF1ApElementaryProcedures.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SuccessfulOutcomeF1ApElementaryProceduresValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SuccessfulOutcomeF1ApElementaryProceduresValidationError{}

// Validate checks the field values on UnsuccessfulOutcome with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UnsuccessfulOutcome) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UnsuccessfulOutcome with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UnsuccessfulOutcomeMultiError, or nil if none found.
func (m *UnsuccessfulOutcome) ValidateAll() error {
	return m.validate(true)
}

func (m *UnsuccessfulOutcome) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ProcedureCode

	// no validation rules for Criticality

	if all {
		switch v := interface{}(m.GetValue()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UnsuccessfulOutcomeValidationError{
					field:  "Value",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UnsuccessfulOutcomeValidationError{
					field:  "Value",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetValue()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UnsuccessfulOutcomeValidationError{
				field:  "Value",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UnsuccessfulOutcomeMultiError(errors)
	}

	return nil
}

// UnsuccessfulOutcomeMultiError is an error wrapping multiple validation
// errors returned by UnsuccessfulOutcome.ValidateAll() if the designated
// constraints aren't met.
type UnsuccessfulOutcomeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UnsuccessfulOutcomeMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UnsuccessfulOutcomeMultiError) AllErrors() []error { return m }

// UnsuccessfulOutcomeValidationError is the validation error returned by
// UnsuccessfulOutcome.Validate if the designated constraints aren't met.
type UnsuccessfulOutcomeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UnsuccessfulOutcomeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UnsuccessfulOutcomeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UnsuccessfulOutcomeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UnsuccessfulOutcomeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UnsuccessfulOutcomeValidationError) ErrorName() string {
	return "UnsuccessfulOutcomeValidationError"
}

// Error satisfies the builtin error interface
func (e UnsuccessfulOutcomeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUnsuccessfulOutcome.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UnsuccessfulOutcomeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UnsuccessfulOutcomeValidationError{}

// Validate checks the field values on
// UnsuccessfulOutcomeF1ApElementaryProcedures with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UnsuccessfulOutcomeF1ApElementaryProcedures) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// UnsuccessfulOutcomeF1ApElementaryProcedures with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// UnsuccessfulOutcomeF1ApElementaryProceduresMultiError, or nil if none found.
func (m *UnsuccessfulOutcomeF1ApElementaryProcedures) ValidateAll() error {
	return m.validate(true)
}

func (m *UnsuccessfulOutcomeF1ApElementaryProcedures) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch m.UoValues.(type) {

	case *UnsuccessfulOutcomeF1ApElementaryProcedures_F1SetupFailure:

		if all {
			switch v := interface{}(m.GetF1SetupFailure()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UnsuccessfulOutcomeF1ApElementaryProceduresValidationError{
						field:  "F1SetupFailure",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UnsuccessfulOutcomeF1ApElementaryProceduresValidationError{
						field:  "F1SetupFailure",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetF1SetupFailure()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UnsuccessfulOutcomeF1ApElementaryProceduresValidationError{
					field:  "F1SetupFailure",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *UnsuccessfulOutcomeF1ApElementaryProcedures_GNbduconfigurationUpdateFailure:

		if all {
			switch v := interface{}(m.GetGNbduconfigurationUpdateFailure()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UnsuccessfulOutcomeF1ApElementaryProceduresValidationError{
						field:  "GNbduconfigurationUpdateFailure",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UnsuccessfulOutcomeF1ApElementaryProceduresValidationError{
						field:  "GNbduconfigurationUpdateFailure",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetGNbduconfigurationUpdateFailure()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UnsuccessfulOutcomeF1ApElementaryProceduresValidationError{
					field:  "GNbduconfigurationUpdateFailure",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return UnsuccessfulOutcomeF1ApElementaryProceduresMultiError(errors)
	}

	return nil
}

// UnsuccessfulOutcomeF1ApElementaryProceduresMultiError is an error wrapping
// multiple validation errors returned by
// UnsuccessfulOutcomeF1ApElementaryProcedures.ValidateAll() if the designated
// constraints aren't met.
type UnsuccessfulOutcomeF1ApElementaryProceduresMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UnsuccessfulOutcomeF1ApElementaryProceduresMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UnsuccessfulOutcomeF1ApElementaryProceduresMultiError) AllErrors() []error { return m }

// UnsuccessfulOutcomeF1ApElementaryProceduresValidationError is the validation
// error returned by UnsuccessfulOutcomeF1ApElementaryProcedures.Validate if
// the designated constraints aren't met.
type UnsuccessfulOutcomeF1ApElementaryProceduresValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UnsuccessfulOutcomeF1ApElementaryProceduresValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UnsuccessfulOutcomeF1ApElementaryProceduresValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UnsuccessfulOutcomeF1ApElementaryProceduresValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UnsuccessfulOutcomeF1ApElementaryProceduresValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UnsuccessfulOutcomeF1ApElementaryProceduresValidationError) ErrorName() string {
	return "UnsuccessfulOutcomeF1ApElementaryProceduresValidationError"
}

// Error satisfies the builtin error interface
func (e UnsuccessfulOutcomeF1ApElementaryProceduresValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUnsuccessfulOutcomeF1ApElementaryProcedures.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UnsuccessfulOutcomeF1ApElementaryProceduresValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UnsuccessfulOutcomeF1ApElementaryProceduresValidationError{}

// Validate checks the field values on F1ApPDuExtIes_Empty with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *F1ApPDuExtIes_Empty) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on F1ApPDuExtIes_Empty with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// F1ApPDuExtIes_EmptyMultiError, or nil if none found.
func (m *F1ApPDuExtIes_Empty) ValidateAll() error {
	return m.validate(true)
}

func (m *F1ApPDuExtIes_Empty) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return F1ApPDuExtIes_EmptyMultiError(errors)
	}

	return nil
}

// F1ApPDuExtIes_EmptyMultiError is an error wrapping multiple validation
// errors returned by F1ApPDuExtIes_Empty.ValidateAll() if the designated
// constraints aren't met.
type F1ApPDuExtIes_EmptyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m F1ApPDuExtIes_EmptyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m F1ApPDuExtIes_EmptyMultiError) AllErrors() []error { return m }

// F1ApPDuExtIes_EmptyValidationError is the validation error returned by
// F1ApPDuExtIes_Empty.Validate if the designated constraints aren't met.
type F1ApPDuExtIes_EmptyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e F1ApPDuExtIes_EmptyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e F1ApPDuExtIes_EmptyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e F1ApPDuExtIes_EmptyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e F1ApPDuExtIes_EmptyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e F1ApPDuExtIes_EmptyValidationError) ErrorName() string {
	return "F1ApPDuExtIes_EmptyValidationError"
}

// Error satisfies the builtin error interface
func (e F1ApPDuExtIes_EmptyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sF1ApPDuExtIes_Empty.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = F1ApPDuExtIes_EmptyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = F1ApPDuExtIes_EmptyValidationError{}
