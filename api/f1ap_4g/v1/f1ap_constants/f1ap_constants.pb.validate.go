// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/f1ap_4g/v1/f1ap_constants.proto

package f1apconstantsv1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on IdReset with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *IdReset) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdReset with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in IdResetMultiError, or nil if none found.
func (m *IdReset) ValidateAll() error {
	return m.validate(true)
}

func (m *IdReset) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 0 {
		err := IdResetValidationError{
			field:  "Value",
			reason: "value must equal 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdResetMultiError(errors)
	}

	return nil
}

// IdResetMultiError is an error wrapping multiple validation errors returned
// by IdReset.ValidateAll() if the designated constraints aren't met.
type IdResetMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdResetMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdResetMultiError) AllErrors() []error { return m }

// IdResetValidationError is the validation error returned by IdReset.Validate
// if the designated constraints aren't met.
type IdResetValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdResetValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdResetValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdResetValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdResetValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdResetValidationError) ErrorName() string { return "IdResetValidationError" }

// Error satisfies the builtin error interface
func (e IdResetValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdReset.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdResetValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdResetValidationError{}

// Validate checks the field values on IdF1Setup with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *IdF1Setup) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdF1Setup with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in IdF1SetupMultiError, or nil
// if none found.
func (m *IdF1Setup) ValidateAll() error {
	return m.validate(true)
}

func (m *IdF1Setup) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 1 {
		err := IdF1SetupValidationError{
			field:  "Value",
			reason: "value must equal 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdF1SetupMultiError(errors)
	}

	return nil
}

// IdF1SetupMultiError is an error wrapping multiple validation errors returned
// by IdF1Setup.ValidateAll() if the designated constraints aren't met.
type IdF1SetupMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdF1SetupMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdF1SetupMultiError) AllErrors() []error { return m }

// IdF1SetupValidationError is the validation error returned by
// IdF1Setup.Validate if the designated constraints aren't met.
type IdF1SetupValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdF1SetupValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdF1SetupValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdF1SetupValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdF1SetupValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdF1SetupValidationError) ErrorName() string { return "IdF1SetupValidationError" }

// Error satisfies the builtin error interface
func (e IdF1SetupValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdF1Setup.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdF1SetupValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdF1SetupValidationError{}

// Validate checks the field values on IdErrorIndication with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *IdErrorIndication) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdErrorIndication with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdErrorIndicationMultiError, or nil if none found.
func (m *IdErrorIndication) ValidateAll() error {
	return m.validate(true)
}

func (m *IdErrorIndication) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 2 {
		err := IdErrorIndicationValidationError{
			field:  "Value",
			reason: "value must equal 2",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdErrorIndicationMultiError(errors)
	}

	return nil
}

// IdErrorIndicationMultiError is an error wrapping multiple validation errors
// returned by IdErrorIndication.ValidateAll() if the designated constraints
// aren't met.
type IdErrorIndicationMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdErrorIndicationMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdErrorIndicationMultiError) AllErrors() []error { return m }

// IdErrorIndicationValidationError is the validation error returned by
// IdErrorIndication.Validate if the designated constraints aren't met.
type IdErrorIndicationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdErrorIndicationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdErrorIndicationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdErrorIndicationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdErrorIndicationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdErrorIndicationValidationError) ErrorName() string {
	return "IdErrorIndicationValidationError"
}

// Error satisfies the builtin error interface
func (e IdErrorIndicationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdErrorIndication.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdErrorIndicationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdErrorIndicationValidationError{}

// Validate checks the field values on IdgNbduconfigurationUpdate with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdgNbduconfigurationUpdate) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdgNbduconfigurationUpdate with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdgNbduconfigurationUpdateMultiError, or nil if none found.
func (m *IdgNbduconfigurationUpdate) ValidateAll() error {
	return m.validate(true)
}

func (m *IdgNbduconfigurationUpdate) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 3 {
		err := IdgNbduconfigurationUpdateValidationError{
			field:  "Value",
			reason: "value must equal 3",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdgNbduconfigurationUpdateMultiError(errors)
	}

	return nil
}

// IdgNbduconfigurationUpdateMultiError is an error wrapping multiple
// validation errors returned by IdgNbduconfigurationUpdate.ValidateAll() if
// the designated constraints aren't met.
type IdgNbduconfigurationUpdateMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdgNbduconfigurationUpdateMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdgNbduconfigurationUpdateMultiError) AllErrors() []error { return m }

// IdgNbduconfigurationUpdateValidationError is the validation error returned
// by IdgNbduconfigurationUpdate.Validate if the designated constraints aren't met.
type IdgNbduconfigurationUpdateValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdgNbduconfigurationUpdateValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdgNbduconfigurationUpdateValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdgNbduconfigurationUpdateValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdgNbduconfigurationUpdateValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdgNbduconfigurationUpdateValidationError) ErrorName() string {
	return "IdgNbduconfigurationUpdateValidationError"
}

// Error satisfies the builtin error interface
func (e IdgNbduconfigurationUpdateValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdgNbduconfigurationUpdate.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdgNbduconfigurationUpdateValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdgNbduconfigurationUpdateValidationError{}

// Validate checks the field values on IdgNbcuconfigurationUpdate with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdgNbcuconfigurationUpdate) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdgNbcuconfigurationUpdate with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdgNbcuconfigurationUpdateMultiError, or nil if none found.
func (m *IdgNbcuconfigurationUpdate) ValidateAll() error {
	return m.validate(true)
}

func (m *IdgNbcuconfigurationUpdate) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 4 {
		err := IdgNbcuconfigurationUpdateValidationError{
			field:  "Value",
			reason: "value must equal 4",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdgNbcuconfigurationUpdateMultiError(errors)
	}

	return nil
}

// IdgNbcuconfigurationUpdateMultiError is an error wrapping multiple
// validation errors returned by IdgNbcuconfigurationUpdate.ValidateAll() if
// the designated constraints aren't met.
type IdgNbcuconfigurationUpdateMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdgNbcuconfigurationUpdateMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdgNbcuconfigurationUpdateMultiError) AllErrors() []error { return m }

// IdgNbcuconfigurationUpdateValidationError is the validation error returned
// by IdgNbcuconfigurationUpdate.Validate if the designated constraints aren't met.
type IdgNbcuconfigurationUpdateValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdgNbcuconfigurationUpdateValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdgNbcuconfigurationUpdateValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdgNbcuconfigurationUpdateValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdgNbcuconfigurationUpdateValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdgNbcuconfigurationUpdateValidationError) ErrorName() string {
	return "IdgNbcuconfigurationUpdateValidationError"
}

// Error satisfies the builtin error interface
func (e IdgNbcuconfigurationUpdateValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdgNbcuconfigurationUpdate.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdgNbcuconfigurationUpdateValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdgNbcuconfigurationUpdateValidationError{}

// Validate checks the field values on IdUEcontextSetup with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *IdUEcontextSetup) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdUEcontextSetup with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdUEcontextSetupMultiError, or nil if none found.
func (m *IdUEcontextSetup) ValidateAll() error {
	return m.validate(true)
}

func (m *IdUEcontextSetup) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 5 {
		err := IdUEcontextSetupValidationError{
			field:  "Value",
			reason: "value must equal 5",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdUEcontextSetupMultiError(errors)
	}

	return nil
}

// IdUEcontextSetupMultiError is an error wrapping multiple validation errors
// returned by IdUEcontextSetup.ValidateAll() if the designated constraints
// aren't met.
type IdUEcontextSetupMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdUEcontextSetupMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdUEcontextSetupMultiError) AllErrors() []error { return m }

// IdUEcontextSetupValidationError is the validation error returned by
// IdUEcontextSetup.Validate if the designated constraints aren't met.
type IdUEcontextSetupValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdUEcontextSetupValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdUEcontextSetupValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdUEcontextSetupValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdUEcontextSetupValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdUEcontextSetupValidationError) ErrorName() string { return "IdUEcontextSetupValidationError" }

// Error satisfies the builtin error interface
func (e IdUEcontextSetupValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdUEcontextSetup.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdUEcontextSetupValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdUEcontextSetupValidationError{}

// Validate checks the field values on IdUEcontextRelease with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdUEcontextRelease) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdUEcontextRelease with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdUEcontextReleaseMultiError, or nil if none found.
func (m *IdUEcontextRelease) ValidateAll() error {
	return m.validate(true)
}

func (m *IdUEcontextRelease) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 6 {
		err := IdUEcontextReleaseValidationError{
			field:  "Value",
			reason: "value must equal 6",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdUEcontextReleaseMultiError(errors)
	}

	return nil
}

// IdUEcontextReleaseMultiError is an error wrapping multiple validation errors
// returned by IdUEcontextRelease.ValidateAll() if the designated constraints
// aren't met.
type IdUEcontextReleaseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdUEcontextReleaseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdUEcontextReleaseMultiError) AllErrors() []error { return m }

// IdUEcontextReleaseValidationError is the validation error returned by
// IdUEcontextRelease.Validate if the designated constraints aren't met.
type IdUEcontextReleaseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdUEcontextReleaseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdUEcontextReleaseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdUEcontextReleaseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdUEcontextReleaseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdUEcontextReleaseValidationError) ErrorName() string {
	return "IdUEcontextReleaseValidationError"
}

// Error satisfies the builtin error interface
func (e IdUEcontextReleaseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdUEcontextRelease.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdUEcontextReleaseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdUEcontextReleaseValidationError{}

// Validate checks the field values on IdUEcontextModification with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdUEcontextModification) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdUEcontextModification with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdUEcontextModificationMultiError, or nil if none found.
func (m *IdUEcontextModification) ValidateAll() error {
	return m.validate(true)
}

func (m *IdUEcontextModification) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 7 {
		err := IdUEcontextModificationValidationError{
			field:  "Value",
			reason: "value must equal 7",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdUEcontextModificationMultiError(errors)
	}

	return nil
}

// IdUEcontextModificationMultiError is an error wrapping multiple validation
// errors returned by IdUEcontextModification.ValidateAll() if the designated
// constraints aren't met.
type IdUEcontextModificationMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdUEcontextModificationMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdUEcontextModificationMultiError) AllErrors() []error { return m }

// IdUEcontextModificationValidationError is the validation error returned by
// IdUEcontextModification.Validate if the designated constraints aren't met.
type IdUEcontextModificationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdUEcontextModificationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdUEcontextModificationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdUEcontextModificationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdUEcontextModificationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdUEcontextModificationValidationError) ErrorName() string {
	return "IdUEcontextModificationValidationError"
}

// Error satisfies the builtin error interface
func (e IdUEcontextModificationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdUEcontextModification.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdUEcontextModificationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdUEcontextModificationValidationError{}

// Validate checks the field values on IdUEcontextModificationRequired with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdUEcontextModificationRequired) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdUEcontextModificationRequired with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// IdUEcontextModificationRequiredMultiError, or nil if none found.
func (m *IdUEcontextModificationRequired) ValidateAll() error {
	return m.validate(true)
}

func (m *IdUEcontextModificationRequired) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 8 {
		err := IdUEcontextModificationRequiredValidationError{
			field:  "Value",
			reason: "value must equal 8",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdUEcontextModificationRequiredMultiError(errors)
	}

	return nil
}

// IdUEcontextModificationRequiredMultiError is an error wrapping multiple
// validation errors returned by IdUEcontextModificationRequired.ValidateAll()
// if the designated constraints aren't met.
type IdUEcontextModificationRequiredMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdUEcontextModificationRequiredMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdUEcontextModificationRequiredMultiError) AllErrors() []error { return m }

// IdUEcontextModificationRequiredValidationError is the validation error
// returned by IdUEcontextModificationRequired.Validate if the designated
// constraints aren't met.
type IdUEcontextModificationRequiredValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdUEcontextModificationRequiredValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdUEcontextModificationRequiredValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdUEcontextModificationRequiredValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdUEcontextModificationRequiredValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdUEcontextModificationRequiredValidationError) ErrorName() string {
	return "IdUEcontextModificationRequiredValidationError"
}

// Error satisfies the builtin error interface
func (e IdUEcontextModificationRequiredValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdUEcontextModificationRequired.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdUEcontextModificationRequiredValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdUEcontextModificationRequiredValidationError{}

// Validate checks the field values on IdUEmobilityCommand with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdUEmobilityCommand) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdUEmobilityCommand with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdUEmobilityCommandMultiError, or nil if none found.
func (m *IdUEmobilityCommand) ValidateAll() error {
	return m.validate(true)
}

func (m *IdUEmobilityCommand) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 9 {
		err := IdUEmobilityCommandValidationError{
			field:  "Value",
			reason: "value must equal 9",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdUEmobilityCommandMultiError(errors)
	}

	return nil
}

// IdUEmobilityCommandMultiError is an error wrapping multiple validation
// errors returned by IdUEmobilityCommand.ValidateAll() if the designated
// constraints aren't met.
type IdUEmobilityCommandMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdUEmobilityCommandMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdUEmobilityCommandMultiError) AllErrors() []error { return m }

// IdUEmobilityCommandValidationError is the validation error returned by
// IdUEmobilityCommand.Validate if the designated constraints aren't met.
type IdUEmobilityCommandValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdUEmobilityCommandValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdUEmobilityCommandValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdUEmobilityCommandValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdUEmobilityCommandValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdUEmobilityCommandValidationError) ErrorName() string {
	return "IdUEmobilityCommandValidationError"
}

// Error satisfies the builtin error interface
func (e IdUEmobilityCommandValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdUEmobilityCommand.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdUEmobilityCommandValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdUEmobilityCommandValidationError{}

// Validate checks the field values on IdUEcontextReleaseRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdUEcontextReleaseRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdUEcontextReleaseRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdUEcontextReleaseRequestMultiError, or nil if none found.
func (m *IdUEcontextReleaseRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *IdUEcontextReleaseRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 10 {
		err := IdUEcontextReleaseRequestValidationError{
			field:  "Value",
			reason: "value must equal 10",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdUEcontextReleaseRequestMultiError(errors)
	}

	return nil
}

// IdUEcontextReleaseRequestMultiError is an error wrapping multiple validation
// errors returned by IdUEcontextReleaseRequest.ValidateAll() if the
// designated constraints aren't met.
type IdUEcontextReleaseRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdUEcontextReleaseRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdUEcontextReleaseRequestMultiError) AllErrors() []error { return m }

// IdUEcontextReleaseRequestValidationError is the validation error returned by
// IdUEcontextReleaseRequest.Validate if the designated constraints aren't met.
type IdUEcontextReleaseRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdUEcontextReleaseRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdUEcontextReleaseRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdUEcontextReleaseRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdUEcontextReleaseRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdUEcontextReleaseRequestValidationError) ErrorName() string {
	return "IdUEcontextReleaseRequestValidationError"
}

// Error satisfies the builtin error interface
func (e IdUEcontextReleaseRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdUEcontextReleaseRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdUEcontextReleaseRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdUEcontextReleaseRequestValidationError{}

// Validate checks the field values on IdInitialUlrrcmessageTransfer with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdInitialUlrrcmessageTransfer) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdInitialUlrrcmessageTransfer with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// IdInitialUlrrcmessageTransferMultiError, or nil if none found.
func (m *IdInitialUlrrcmessageTransfer) ValidateAll() error {
	return m.validate(true)
}

func (m *IdInitialUlrrcmessageTransfer) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 11 {
		err := IdInitialUlrrcmessageTransferValidationError{
			field:  "Value",
			reason: "value must equal 11",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdInitialUlrrcmessageTransferMultiError(errors)
	}

	return nil
}

// IdInitialUlrrcmessageTransferMultiError is an error wrapping multiple
// validation errors returned by IdInitialUlrrcmessageTransfer.ValidateAll()
// if the designated constraints aren't met.
type IdInitialUlrrcmessageTransferMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdInitialUlrrcmessageTransferMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdInitialUlrrcmessageTransferMultiError) AllErrors() []error { return m }

// IdInitialUlrrcmessageTransferValidationError is the validation error
// returned by IdInitialUlrrcmessageTransfer.Validate if the designated
// constraints aren't met.
type IdInitialUlrrcmessageTransferValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdInitialUlrrcmessageTransferValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdInitialUlrrcmessageTransferValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdInitialUlrrcmessageTransferValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdInitialUlrrcmessageTransferValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdInitialUlrrcmessageTransferValidationError) ErrorName() string {
	return "IdInitialUlrrcmessageTransferValidationError"
}

// Error satisfies the builtin error interface
func (e IdInitialUlrrcmessageTransferValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdInitialUlrrcmessageTransfer.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdInitialUlrrcmessageTransferValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdInitialUlrrcmessageTransferValidationError{}

// Validate checks the field values on IdDLrrcmessageTransfer with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdDLrrcmessageTransfer) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdDLrrcmessageTransfer with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdDLrrcmessageTransferMultiError, or nil if none found.
func (m *IdDLrrcmessageTransfer) ValidateAll() error {
	return m.validate(true)
}

func (m *IdDLrrcmessageTransfer) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 12 {
		err := IdDLrrcmessageTransferValidationError{
			field:  "Value",
			reason: "value must equal 12",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdDLrrcmessageTransferMultiError(errors)
	}

	return nil
}

// IdDLrrcmessageTransferMultiError is an error wrapping multiple validation
// errors returned by IdDLrrcmessageTransfer.ValidateAll() if the designated
// constraints aren't met.
type IdDLrrcmessageTransferMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdDLrrcmessageTransferMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdDLrrcmessageTransferMultiError) AllErrors() []error { return m }

// IdDLrrcmessageTransferValidationError is the validation error returned by
// IdDLrrcmessageTransfer.Validate if the designated constraints aren't met.
type IdDLrrcmessageTransferValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdDLrrcmessageTransferValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdDLrrcmessageTransferValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdDLrrcmessageTransferValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdDLrrcmessageTransferValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdDLrrcmessageTransferValidationError) ErrorName() string {
	return "IdDLrrcmessageTransferValidationError"
}

// Error satisfies the builtin error interface
func (e IdDLrrcmessageTransferValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdDLrrcmessageTransfer.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdDLrrcmessageTransferValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdDLrrcmessageTransferValidationError{}

// Validate checks the field values on IdULrrcmessageTransfer with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdULrrcmessageTransfer) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdULrrcmessageTransfer with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdULrrcmessageTransferMultiError, or nil if none found.
func (m *IdULrrcmessageTransfer) ValidateAll() error {
	return m.validate(true)
}

func (m *IdULrrcmessageTransfer) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 13 {
		err := IdULrrcmessageTransferValidationError{
			field:  "Value",
			reason: "value must equal 13",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdULrrcmessageTransferMultiError(errors)
	}

	return nil
}

// IdULrrcmessageTransferMultiError is an error wrapping multiple validation
// errors returned by IdULrrcmessageTransfer.ValidateAll() if the designated
// constraints aren't met.
type IdULrrcmessageTransferMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdULrrcmessageTransferMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdULrrcmessageTransferMultiError) AllErrors() []error { return m }

// IdULrrcmessageTransferValidationError is the validation error returned by
// IdULrrcmessageTransfer.Validate if the designated constraints aren't met.
type IdULrrcmessageTransferValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdULrrcmessageTransferValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdULrrcmessageTransferValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdULrrcmessageTransferValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdULrrcmessageTransferValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdULrrcmessageTransferValidationError) ErrorName() string {
	return "IdULrrcmessageTransferValidationError"
}

// Error satisfies the builtin error interface
func (e IdULrrcmessageTransferValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdULrrcmessageTransfer.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdULrrcmessageTransferValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdULrrcmessageTransferValidationError{}

// Validate checks the field values on IdprivateMessage with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *IdprivateMessage) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdprivateMessage with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdprivateMessageMultiError, or nil if none found.
func (m *IdprivateMessage) ValidateAll() error {
	return m.validate(true)
}

func (m *IdprivateMessage) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 14 {
		err := IdprivateMessageValidationError{
			field:  "Value",
			reason: "value must equal 14",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdprivateMessageMultiError(errors)
	}

	return nil
}

// IdprivateMessageMultiError is an error wrapping multiple validation errors
// returned by IdprivateMessage.ValidateAll() if the designated constraints
// aren't met.
type IdprivateMessageMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdprivateMessageMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdprivateMessageMultiError) AllErrors() []error { return m }

// IdprivateMessageValidationError is the validation error returned by
// IdprivateMessage.Validate if the designated constraints aren't met.
type IdprivateMessageValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdprivateMessageValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdprivateMessageValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdprivateMessageValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdprivateMessageValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdprivateMessageValidationError) ErrorName() string { return "IdprivateMessageValidationError" }

// Error satisfies the builtin error interface
func (e IdprivateMessageValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdprivateMessage.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdprivateMessageValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdprivateMessageValidationError{}

// Validate checks the field values on IdUEinactivityNotification with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdUEinactivityNotification) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdUEinactivityNotification with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdUEinactivityNotificationMultiError, or nil if none found.
func (m *IdUEinactivityNotification) ValidateAll() error {
	return m.validate(true)
}

func (m *IdUEinactivityNotification) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 15 {
		err := IdUEinactivityNotificationValidationError{
			field:  "Value",
			reason: "value must equal 15",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdUEinactivityNotificationMultiError(errors)
	}

	return nil
}

// IdUEinactivityNotificationMultiError is an error wrapping multiple
// validation errors returned by IdUEinactivityNotification.ValidateAll() if
// the designated constraints aren't met.
type IdUEinactivityNotificationMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdUEinactivityNotificationMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdUEinactivityNotificationMultiError) AllErrors() []error { return m }

// IdUEinactivityNotificationValidationError is the validation error returned
// by IdUEinactivityNotification.Validate if the designated constraints aren't met.
type IdUEinactivityNotificationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdUEinactivityNotificationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdUEinactivityNotificationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdUEinactivityNotificationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdUEinactivityNotificationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdUEinactivityNotificationValidationError) ErrorName() string {
	return "IdUEinactivityNotificationValidationError"
}

// Error satisfies the builtin error interface
func (e IdUEinactivityNotificationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdUEinactivityNotification.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdUEinactivityNotificationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdUEinactivityNotificationValidationError{}

// Validate checks the field values on IdGNbduresourceCoordination with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdGNbduresourceCoordination) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdGNbduresourceCoordination with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdGNbduresourceCoordinationMultiError, or nil if none found.
func (m *IdGNbduresourceCoordination) ValidateAll() error {
	return m.validate(true)
}

func (m *IdGNbduresourceCoordination) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 16 {
		err := IdGNbduresourceCoordinationValidationError{
			field:  "Value",
			reason: "value must equal 16",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdGNbduresourceCoordinationMultiError(errors)
	}

	return nil
}

// IdGNbduresourceCoordinationMultiError is an error wrapping multiple
// validation errors returned by IdGNbduresourceCoordination.ValidateAll() if
// the designated constraints aren't met.
type IdGNbduresourceCoordinationMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdGNbduresourceCoordinationMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdGNbduresourceCoordinationMultiError) AllErrors() []error { return m }

// IdGNbduresourceCoordinationValidationError is the validation error returned
// by IdGNbduresourceCoordination.Validate if the designated constraints
// aren't met.
type IdGNbduresourceCoordinationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdGNbduresourceCoordinationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdGNbduresourceCoordinationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdGNbduresourceCoordinationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdGNbduresourceCoordinationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdGNbduresourceCoordinationValidationError) ErrorName() string {
	return "IdGNbduresourceCoordinationValidationError"
}

// Error satisfies the builtin error interface
func (e IdGNbduresourceCoordinationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdGNbduresourceCoordination.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdGNbduresourceCoordinationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdGNbduresourceCoordinationValidationError{}

// Validate checks the field values on IdSystemInformationDeliveryCommand with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *IdSystemInformationDeliveryCommand) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdSystemInformationDeliveryCommand
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// IdSystemInformationDeliveryCommandMultiError, or nil if none found.
func (m *IdSystemInformationDeliveryCommand) ValidateAll() error {
	return m.validate(true)
}

func (m *IdSystemInformationDeliveryCommand) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 17 {
		err := IdSystemInformationDeliveryCommandValidationError{
			field:  "Value",
			reason: "value must equal 17",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdSystemInformationDeliveryCommandMultiError(errors)
	}

	return nil
}

// IdSystemInformationDeliveryCommandMultiError is an error wrapping multiple
// validation errors returned by
// IdSystemInformationDeliveryCommand.ValidateAll() if the designated
// constraints aren't met.
type IdSystemInformationDeliveryCommandMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdSystemInformationDeliveryCommandMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdSystemInformationDeliveryCommandMultiError) AllErrors() []error { return m }

// IdSystemInformationDeliveryCommandValidationError is the validation error
// returned by IdSystemInformationDeliveryCommand.Validate if the designated
// constraints aren't met.
type IdSystemInformationDeliveryCommandValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdSystemInformationDeliveryCommandValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdSystemInformationDeliveryCommandValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdSystemInformationDeliveryCommandValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdSystemInformationDeliveryCommandValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdSystemInformationDeliveryCommandValidationError) ErrorName() string {
	return "IdSystemInformationDeliveryCommandValidationError"
}

// Error satisfies the builtin error interface
func (e IdSystemInformationDeliveryCommandValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdSystemInformationDeliveryCommand.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdSystemInformationDeliveryCommandValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdSystemInformationDeliveryCommandValidationError{}

// Validate checks the field values on IdPaging with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *IdPaging) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdPaging with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in IdPagingMultiError, or nil
// if none found.
func (m *IdPaging) ValidateAll() error {
	return m.validate(true)
}

func (m *IdPaging) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 18 {
		err := IdPagingValidationError{
			field:  "Value",
			reason: "value must equal 18",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdPagingMultiError(errors)
	}

	return nil
}

// IdPagingMultiError is an error wrapping multiple validation errors returned
// by IdPaging.ValidateAll() if the designated constraints aren't met.
type IdPagingMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdPagingMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdPagingMultiError) AllErrors() []error { return m }

// IdPagingValidationError is the validation error returned by
// IdPaging.Validate if the designated constraints aren't met.
type IdPagingValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdPagingValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdPagingValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdPagingValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdPagingValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdPagingValidationError) ErrorName() string { return "IdPagingValidationError" }

// Error satisfies the builtin error interface
func (e IdPagingValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdPaging.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdPagingValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdPagingValidationError{}

// Validate checks the field values on IdNotify with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *IdNotify) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdNotify with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in IdNotifyMultiError, or nil
// if none found.
func (m *IdNotify) ValidateAll() error {
	return m.validate(true)
}

func (m *IdNotify) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 19 {
		err := IdNotifyValidationError{
			field:  "Value",
			reason: "value must equal 19",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdNotifyMultiError(errors)
	}

	return nil
}

// IdNotifyMultiError is an error wrapping multiple validation errors returned
// by IdNotify.ValidateAll() if the designated constraints aren't met.
type IdNotifyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdNotifyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdNotifyMultiError) AllErrors() []error { return m }

// IdNotifyValidationError is the validation error returned by
// IdNotify.Validate if the designated constraints aren't met.
type IdNotifyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdNotifyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdNotifyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdNotifyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdNotifyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdNotifyValidationError) ErrorName() string { return "IdNotifyValidationError" }

// Error satisfies the builtin error interface
func (e IdNotifyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdNotify.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdNotifyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdNotifyValidationError{}

// Validate checks the field values on IdWriteReplaceWarning with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdWriteReplaceWarning) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdWriteReplaceWarning with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdWriteReplaceWarningMultiError, or nil if none found.
func (m *IdWriteReplaceWarning) ValidateAll() error {
	return m.validate(true)
}

func (m *IdWriteReplaceWarning) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 20 {
		err := IdWriteReplaceWarningValidationError{
			field:  "Value",
			reason: "value must equal 20",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdWriteReplaceWarningMultiError(errors)
	}

	return nil
}

// IdWriteReplaceWarningMultiError is an error wrapping multiple validation
// errors returned by IdWriteReplaceWarning.ValidateAll() if the designated
// constraints aren't met.
type IdWriteReplaceWarningMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdWriteReplaceWarningMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdWriteReplaceWarningMultiError) AllErrors() []error { return m }

// IdWriteReplaceWarningValidationError is the validation error returned by
// IdWriteReplaceWarning.Validate if the designated constraints aren't met.
type IdWriteReplaceWarningValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdWriteReplaceWarningValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdWriteReplaceWarningValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdWriteReplaceWarningValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdWriteReplaceWarningValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdWriteReplaceWarningValidationError) ErrorName() string {
	return "IdWriteReplaceWarningValidationError"
}

// Error satisfies the builtin error interface
func (e IdWriteReplaceWarningValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdWriteReplaceWarning.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdWriteReplaceWarningValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdWriteReplaceWarningValidationError{}

// Validate checks the field values on IdPWscancel with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *IdPWscancel) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdPWscancel with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in IdPWscancelMultiError, or
// nil if none found.
func (m *IdPWscancel) ValidateAll() error {
	return m.validate(true)
}

func (m *IdPWscancel) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 21 {
		err := IdPWscancelValidationError{
			field:  "Value",
			reason: "value must equal 21",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdPWscancelMultiError(errors)
	}

	return nil
}

// IdPWscancelMultiError is an error wrapping multiple validation errors
// returned by IdPWscancel.ValidateAll() if the designated constraints aren't met.
type IdPWscancelMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdPWscancelMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdPWscancelMultiError) AllErrors() []error { return m }

// IdPWscancelValidationError is the validation error returned by
// IdPWscancel.Validate if the designated constraints aren't met.
type IdPWscancelValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdPWscancelValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdPWscancelValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdPWscancelValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdPWscancelValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdPWscancelValidationError) ErrorName() string { return "IdPWscancelValidationError" }

// Error satisfies the builtin error interface
func (e IdPWscancelValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdPWscancel.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdPWscancelValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdPWscancelValidationError{}

// Validate checks the field values on IdPWsrestartIndication with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdPWsrestartIndication) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdPWsrestartIndication with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdPWsrestartIndicationMultiError, or nil if none found.
func (m *IdPWsrestartIndication) ValidateAll() error {
	return m.validate(true)
}

func (m *IdPWsrestartIndication) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 22 {
		err := IdPWsrestartIndicationValidationError{
			field:  "Value",
			reason: "value must equal 22",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdPWsrestartIndicationMultiError(errors)
	}

	return nil
}

// IdPWsrestartIndicationMultiError is an error wrapping multiple validation
// errors returned by IdPWsrestartIndication.ValidateAll() if the designated
// constraints aren't met.
type IdPWsrestartIndicationMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdPWsrestartIndicationMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdPWsrestartIndicationMultiError) AllErrors() []error { return m }

// IdPWsrestartIndicationValidationError is the validation error returned by
// IdPWsrestartIndication.Validate if the designated constraints aren't met.
type IdPWsrestartIndicationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdPWsrestartIndicationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdPWsrestartIndicationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdPWsrestartIndicationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdPWsrestartIndicationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdPWsrestartIndicationValidationError) ErrorName() string {
	return "IdPWsrestartIndicationValidationError"
}

// Error satisfies the builtin error interface
func (e IdPWsrestartIndicationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdPWsrestartIndication.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdPWsrestartIndicationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdPWsrestartIndicationValidationError{}

// Validate checks the field values on IdPWsfailureIndication with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdPWsfailureIndication) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdPWsfailureIndication with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdPWsfailureIndicationMultiError, or nil if none found.
func (m *IdPWsfailureIndication) ValidateAll() error {
	return m.validate(true)
}

func (m *IdPWsfailureIndication) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 23 {
		err := IdPWsfailureIndicationValidationError{
			field:  "Value",
			reason: "value must equal 23",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdPWsfailureIndicationMultiError(errors)
	}

	return nil
}

// IdPWsfailureIndicationMultiError is an error wrapping multiple validation
// errors returned by IdPWsfailureIndication.ValidateAll() if the designated
// constraints aren't met.
type IdPWsfailureIndicationMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdPWsfailureIndicationMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdPWsfailureIndicationMultiError) AllErrors() []error { return m }

// IdPWsfailureIndicationValidationError is the validation error returned by
// IdPWsfailureIndication.Validate if the designated constraints aren't met.
type IdPWsfailureIndicationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdPWsfailureIndicationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdPWsfailureIndicationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdPWsfailureIndicationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdPWsfailureIndicationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdPWsfailureIndicationValidationError) ErrorName() string {
	return "IdPWsfailureIndicationValidationError"
}

// Error satisfies the builtin error interface
func (e IdPWsfailureIndicationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdPWsfailureIndication.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdPWsfailureIndicationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdPWsfailureIndicationValidationError{}

// Validate checks the field values on IdGNbdustatusIndication with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdGNbdustatusIndication) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdGNbdustatusIndication with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdGNbdustatusIndicationMultiError, or nil if none found.
func (m *IdGNbdustatusIndication) ValidateAll() error {
	return m.validate(true)
}

func (m *IdGNbdustatusIndication) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 24 {
		err := IdGNbdustatusIndicationValidationError{
			field:  "Value",
			reason: "value must equal 24",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdGNbdustatusIndicationMultiError(errors)
	}

	return nil
}

// IdGNbdustatusIndicationMultiError is an error wrapping multiple validation
// errors returned by IdGNbdustatusIndication.ValidateAll() if the designated
// constraints aren't met.
type IdGNbdustatusIndicationMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdGNbdustatusIndicationMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdGNbdustatusIndicationMultiError) AllErrors() []error { return m }

// IdGNbdustatusIndicationValidationError is the validation error returned by
// IdGNbdustatusIndication.Validate if the designated constraints aren't met.
type IdGNbdustatusIndicationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdGNbdustatusIndicationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdGNbdustatusIndicationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdGNbdustatusIndicationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdGNbdustatusIndicationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdGNbdustatusIndicationValidationError) ErrorName() string {
	return "IdGNbdustatusIndicationValidationError"
}

// Error satisfies the builtin error interface
func (e IdGNbdustatusIndicationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdGNbdustatusIndication.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdGNbdustatusIndicationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdGNbdustatusIndicationValidationError{}

// Validate checks the field values on IdRRcdeliveryReport with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdRRcdeliveryReport) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdRRcdeliveryReport with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdRRcdeliveryReportMultiError, or nil if none found.
func (m *IdRRcdeliveryReport) ValidateAll() error {
	return m.validate(true)
}

func (m *IdRRcdeliveryReport) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 25 {
		err := IdRRcdeliveryReportValidationError{
			field:  "Value",
			reason: "value must equal 25",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdRRcdeliveryReportMultiError(errors)
	}

	return nil
}

// IdRRcdeliveryReportMultiError is an error wrapping multiple validation
// errors returned by IdRRcdeliveryReport.ValidateAll() if the designated
// constraints aren't met.
type IdRRcdeliveryReportMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdRRcdeliveryReportMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdRRcdeliveryReportMultiError) AllErrors() []error { return m }

// IdRRcdeliveryReportValidationError is the validation error returned by
// IdRRcdeliveryReport.Validate if the designated constraints aren't met.
type IdRRcdeliveryReportValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdRRcdeliveryReportValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdRRcdeliveryReportValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdRRcdeliveryReportValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdRRcdeliveryReportValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdRRcdeliveryReportValidationError) ErrorName() string {
	return "IdRRcdeliveryReportValidationError"
}

// Error satisfies the builtin error interface
func (e IdRRcdeliveryReportValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdRRcdeliveryReport.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdRRcdeliveryReportValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdRRcdeliveryReportValidationError{}

// Validate checks the field values on IdF1Removal with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *IdF1Removal) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdF1Removal with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in IdF1RemovalMultiError, or
// nil if none found.
func (m *IdF1Removal) ValidateAll() error {
	return m.validate(true)
}

func (m *IdF1Removal) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 26 {
		err := IdF1RemovalValidationError{
			field:  "Value",
			reason: "value must equal 26",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdF1RemovalMultiError(errors)
	}

	return nil
}

// IdF1RemovalMultiError is an error wrapping multiple validation errors
// returned by IdF1Removal.ValidateAll() if the designated constraints aren't met.
type IdF1RemovalMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdF1RemovalMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdF1RemovalMultiError) AllErrors() []error { return m }

// IdF1RemovalValidationError is the validation error returned by
// IdF1Removal.Validate if the designated constraints aren't met.
type IdF1RemovalValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdF1RemovalValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdF1RemovalValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdF1RemovalValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdF1RemovalValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdF1RemovalValidationError) ErrorName() string { return "IdF1RemovalValidationError" }

// Error satisfies the builtin error interface
func (e IdF1RemovalValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdF1Removal.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdF1RemovalValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdF1RemovalValidationError{}

// Validate checks the field values on IdNetworkAccessRateReduction with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdNetworkAccessRateReduction) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdNetworkAccessRateReduction with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdNetworkAccessRateReductionMultiError, or nil if none found.
func (m *IdNetworkAccessRateReduction) ValidateAll() error {
	return m.validate(true)
}

func (m *IdNetworkAccessRateReduction) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 27 {
		err := IdNetworkAccessRateReductionValidationError{
			field:  "Value",
			reason: "value must equal 27",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdNetworkAccessRateReductionMultiError(errors)
	}

	return nil
}

// IdNetworkAccessRateReductionMultiError is an error wrapping multiple
// validation errors returned by IdNetworkAccessRateReduction.ValidateAll() if
// the designated constraints aren't met.
type IdNetworkAccessRateReductionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdNetworkAccessRateReductionMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdNetworkAccessRateReductionMultiError) AllErrors() []error { return m }

// IdNetworkAccessRateReductionValidationError is the validation error returned
// by IdNetworkAccessRateReduction.Validate if the designated constraints
// aren't met.
type IdNetworkAccessRateReductionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdNetworkAccessRateReductionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdNetworkAccessRateReductionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdNetworkAccessRateReductionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdNetworkAccessRateReductionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdNetworkAccessRateReductionValidationError) ErrorName() string {
	return "IdNetworkAccessRateReductionValidationError"
}

// Error satisfies the builtin error interface
func (e IdNetworkAccessRateReductionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdNetworkAccessRateReduction.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdNetworkAccessRateReductionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdNetworkAccessRateReductionValidationError{}

// Validate checks the field values on IdTraceStart with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *IdTraceStart) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdTraceStart with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in IdTraceStartMultiError, or
// nil if none found.
func (m *IdTraceStart) ValidateAll() error {
	return m.validate(true)
}

func (m *IdTraceStart) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 28 {
		err := IdTraceStartValidationError{
			field:  "Value",
			reason: "value must equal 28",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdTraceStartMultiError(errors)
	}

	return nil
}

// IdTraceStartMultiError is an error wrapping multiple validation errors
// returned by IdTraceStart.ValidateAll() if the designated constraints aren't met.
type IdTraceStartMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdTraceStartMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdTraceStartMultiError) AllErrors() []error { return m }

// IdTraceStartValidationError is the validation error returned by
// IdTraceStart.Validate if the designated constraints aren't met.
type IdTraceStartValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdTraceStartValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdTraceStartValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdTraceStartValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdTraceStartValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdTraceStartValidationError) ErrorName() string { return "IdTraceStartValidationError" }

// Error satisfies the builtin error interface
func (e IdTraceStartValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdTraceStart.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdTraceStartValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdTraceStartValidationError{}

// Validate checks the field values on IdDeactivateTrace with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *IdDeactivateTrace) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdDeactivateTrace with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdDeactivateTraceMultiError, or nil if none found.
func (m *IdDeactivateTrace) ValidateAll() error {
	return m.validate(true)
}

func (m *IdDeactivateTrace) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 29 {
		err := IdDeactivateTraceValidationError{
			field:  "Value",
			reason: "value must equal 29",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdDeactivateTraceMultiError(errors)
	}

	return nil
}

// IdDeactivateTraceMultiError is an error wrapping multiple validation errors
// returned by IdDeactivateTrace.ValidateAll() if the designated constraints
// aren't met.
type IdDeactivateTraceMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdDeactivateTraceMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdDeactivateTraceMultiError) AllErrors() []error { return m }

// IdDeactivateTraceValidationError is the validation error returned by
// IdDeactivateTrace.Validate if the designated constraints aren't met.
type IdDeactivateTraceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdDeactivateTraceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdDeactivateTraceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdDeactivateTraceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdDeactivateTraceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdDeactivateTraceValidationError) ErrorName() string {
	return "IdDeactivateTraceValidationError"
}

// Error satisfies the builtin error interface
func (e IdDeactivateTraceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdDeactivateTrace.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdDeactivateTraceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdDeactivateTraceValidationError{}

// Validate checks the field values on IdDUcuradioInformationTransfer with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdDUcuradioInformationTransfer) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdDUcuradioInformationTransfer with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// IdDUcuradioInformationTransferMultiError, or nil if none found.
func (m *IdDUcuradioInformationTransfer) ValidateAll() error {
	return m.validate(true)
}

func (m *IdDUcuradioInformationTransfer) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 30 {
		err := IdDUcuradioInformationTransferValidationError{
			field:  "Value",
			reason: "value must equal 30",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdDUcuradioInformationTransferMultiError(errors)
	}

	return nil
}

// IdDUcuradioInformationTransferMultiError is an error wrapping multiple
// validation errors returned by IdDUcuradioInformationTransfer.ValidateAll()
// if the designated constraints aren't met.
type IdDUcuradioInformationTransferMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdDUcuradioInformationTransferMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdDUcuradioInformationTransferMultiError) AllErrors() []error { return m }

// IdDUcuradioInformationTransferValidationError is the validation error
// returned by IdDUcuradioInformationTransfer.Validate if the designated
// constraints aren't met.
type IdDUcuradioInformationTransferValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdDUcuradioInformationTransferValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdDUcuradioInformationTransferValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdDUcuradioInformationTransferValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdDUcuradioInformationTransferValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdDUcuradioInformationTransferValidationError) ErrorName() string {
	return "IdDUcuradioInformationTransferValidationError"
}

// Error satisfies the builtin error interface
func (e IdDUcuradioInformationTransferValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdDUcuradioInformationTransfer.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdDUcuradioInformationTransferValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdDUcuradioInformationTransferValidationError{}

// Validate checks the field values on IdCUduradioInformationTransfer with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdCUduradioInformationTransfer) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdCUduradioInformationTransfer with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// IdCUduradioInformationTransferMultiError, or nil if none found.
func (m *IdCUduradioInformationTransfer) ValidateAll() error {
	return m.validate(true)
}

func (m *IdCUduradioInformationTransfer) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 31 {
		err := IdCUduradioInformationTransferValidationError{
			field:  "Value",
			reason: "value must equal 31",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdCUduradioInformationTransferMultiError(errors)
	}

	return nil
}

// IdCUduradioInformationTransferMultiError is an error wrapping multiple
// validation errors returned by IdCUduradioInformationTransfer.ValidateAll()
// if the designated constraints aren't met.
type IdCUduradioInformationTransferMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdCUduradioInformationTransferMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdCUduradioInformationTransferMultiError) AllErrors() []error { return m }

// IdCUduradioInformationTransferValidationError is the validation error
// returned by IdCUduradioInformationTransfer.Validate if the designated
// constraints aren't met.
type IdCUduradioInformationTransferValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdCUduradioInformationTransferValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdCUduradioInformationTransferValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdCUduradioInformationTransferValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdCUduradioInformationTransferValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdCUduradioInformationTransferValidationError) ErrorName() string {
	return "IdCUduradioInformationTransferValidationError"
}

// Error satisfies the builtin error interface
func (e IdCUduradioInformationTransferValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdCUduradioInformationTransfer.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdCUduradioInformationTransferValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdCUduradioInformationTransferValidationError{}

// Validate checks the field values on IdBApmappingConfiguration with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdBApmappingConfiguration) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdBApmappingConfiguration with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdBApmappingConfigurationMultiError, or nil if none found.
func (m *IdBApmappingConfiguration) ValidateAll() error {
	return m.validate(true)
}

func (m *IdBApmappingConfiguration) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 32 {
		err := IdBApmappingConfigurationValidationError{
			field:  "Value",
			reason: "value must equal 32",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdBApmappingConfigurationMultiError(errors)
	}

	return nil
}

// IdBApmappingConfigurationMultiError is an error wrapping multiple validation
// errors returned by IdBApmappingConfiguration.ValidateAll() if the
// designated constraints aren't met.
type IdBApmappingConfigurationMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdBApmappingConfigurationMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdBApmappingConfigurationMultiError) AllErrors() []error { return m }

// IdBApmappingConfigurationValidationError is the validation error returned by
// IdBApmappingConfiguration.Validate if the designated constraints aren't met.
type IdBApmappingConfigurationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdBApmappingConfigurationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdBApmappingConfigurationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdBApmappingConfigurationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdBApmappingConfigurationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdBApmappingConfigurationValidationError) ErrorName() string {
	return "IdBApmappingConfigurationValidationError"
}

// Error satisfies the builtin error interface
func (e IdBApmappingConfigurationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdBApmappingConfiguration.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdBApmappingConfigurationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdBApmappingConfigurationValidationError{}

// Validate checks the field values on IdGNbduresourceConfiguration with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdGNbduresourceConfiguration) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdGNbduresourceConfiguration with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdGNbduresourceConfigurationMultiError, or nil if none found.
func (m *IdGNbduresourceConfiguration) ValidateAll() error {
	return m.validate(true)
}

func (m *IdGNbduresourceConfiguration) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 33 {
		err := IdGNbduresourceConfigurationValidationError{
			field:  "Value",
			reason: "value must equal 33",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdGNbduresourceConfigurationMultiError(errors)
	}

	return nil
}

// IdGNbduresourceConfigurationMultiError is an error wrapping multiple
// validation errors returned by IdGNbduresourceConfiguration.ValidateAll() if
// the designated constraints aren't met.
type IdGNbduresourceConfigurationMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdGNbduresourceConfigurationMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdGNbduresourceConfigurationMultiError) AllErrors() []error { return m }

// IdGNbduresourceConfigurationValidationError is the validation error returned
// by IdGNbduresourceConfiguration.Validate if the designated constraints
// aren't met.
type IdGNbduresourceConfigurationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdGNbduresourceConfigurationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdGNbduresourceConfigurationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdGNbduresourceConfigurationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdGNbduresourceConfigurationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdGNbduresourceConfigurationValidationError) ErrorName() string {
	return "IdGNbduresourceConfigurationValidationError"
}

// Error satisfies the builtin error interface
func (e IdGNbduresourceConfigurationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdGNbduresourceConfiguration.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdGNbduresourceConfigurationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdGNbduresourceConfigurationValidationError{}

// Validate checks the field values on IdIAbtnladdressAllocation with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdIAbtnladdressAllocation) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdIAbtnladdressAllocation with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdIAbtnladdressAllocationMultiError, or nil if none found.
func (m *IdIAbtnladdressAllocation) ValidateAll() error {
	return m.validate(true)
}

func (m *IdIAbtnladdressAllocation) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 34 {
		err := IdIAbtnladdressAllocationValidationError{
			field:  "Value",
			reason: "value must equal 34",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdIAbtnladdressAllocationMultiError(errors)
	}

	return nil
}

// IdIAbtnladdressAllocationMultiError is an error wrapping multiple validation
// errors returned by IdIAbtnladdressAllocation.ValidateAll() if the
// designated constraints aren't met.
type IdIAbtnladdressAllocationMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdIAbtnladdressAllocationMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdIAbtnladdressAllocationMultiError) AllErrors() []error { return m }

// IdIAbtnladdressAllocationValidationError is the validation error returned by
// IdIAbtnladdressAllocation.Validate if the designated constraints aren't met.
type IdIAbtnladdressAllocationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdIAbtnladdressAllocationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdIAbtnladdressAllocationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdIAbtnladdressAllocationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdIAbtnladdressAllocationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdIAbtnladdressAllocationValidationError) ErrorName() string {
	return "IdIAbtnladdressAllocationValidationError"
}

// Error satisfies the builtin error interface
func (e IdIAbtnladdressAllocationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdIAbtnladdressAllocation.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdIAbtnladdressAllocationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdIAbtnladdressAllocationValidationError{}

// Validate checks the field values on IdIAbupconfigurationUpdate with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdIAbupconfigurationUpdate) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdIAbupconfigurationUpdate with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdIAbupconfigurationUpdateMultiError, or nil if none found.
func (m *IdIAbupconfigurationUpdate) ValidateAll() error {
	return m.validate(true)
}

func (m *IdIAbupconfigurationUpdate) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 35 {
		err := IdIAbupconfigurationUpdateValidationError{
			field:  "Value",
			reason: "value must equal 35",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdIAbupconfigurationUpdateMultiError(errors)
	}

	return nil
}

// IdIAbupconfigurationUpdateMultiError is an error wrapping multiple
// validation errors returned by IdIAbupconfigurationUpdate.ValidateAll() if
// the designated constraints aren't met.
type IdIAbupconfigurationUpdateMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdIAbupconfigurationUpdateMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdIAbupconfigurationUpdateMultiError) AllErrors() []error { return m }

// IdIAbupconfigurationUpdateValidationError is the validation error returned
// by IdIAbupconfigurationUpdate.Validate if the designated constraints aren't met.
type IdIAbupconfigurationUpdateValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdIAbupconfigurationUpdateValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdIAbupconfigurationUpdateValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdIAbupconfigurationUpdateValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdIAbupconfigurationUpdateValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdIAbupconfigurationUpdateValidationError) ErrorName() string {
	return "IdIAbupconfigurationUpdateValidationError"
}

// Error satisfies the builtin error interface
func (e IdIAbupconfigurationUpdateValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdIAbupconfigurationUpdate.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdIAbupconfigurationUpdateValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdIAbupconfigurationUpdateValidationError{}

// Validate checks the field values on IdresourceStatusReportingInitiation with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *IdresourceStatusReportingInitiation) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdresourceStatusReportingInitiation
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// IdresourceStatusReportingInitiationMultiError, or nil if none found.
func (m *IdresourceStatusReportingInitiation) ValidateAll() error {
	return m.validate(true)
}

func (m *IdresourceStatusReportingInitiation) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 36 {
		err := IdresourceStatusReportingInitiationValidationError{
			field:  "Value",
			reason: "value must equal 36",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdresourceStatusReportingInitiationMultiError(errors)
	}

	return nil
}

// IdresourceStatusReportingInitiationMultiError is an error wrapping multiple
// validation errors returned by
// IdresourceStatusReportingInitiation.ValidateAll() if the designated
// constraints aren't met.
type IdresourceStatusReportingInitiationMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdresourceStatusReportingInitiationMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdresourceStatusReportingInitiationMultiError) AllErrors() []error { return m }

// IdresourceStatusReportingInitiationValidationError is the validation error
// returned by IdresourceStatusReportingInitiation.Validate if the designated
// constraints aren't met.
type IdresourceStatusReportingInitiationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdresourceStatusReportingInitiationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdresourceStatusReportingInitiationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdresourceStatusReportingInitiationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdresourceStatusReportingInitiationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdresourceStatusReportingInitiationValidationError) ErrorName() string {
	return "IdresourceStatusReportingInitiationValidationError"
}

// Error satisfies the builtin error interface
func (e IdresourceStatusReportingInitiationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdresourceStatusReportingInitiation.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdresourceStatusReportingInitiationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdresourceStatusReportingInitiationValidationError{}

// Validate checks the field values on IdresourceStatusReporting with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdresourceStatusReporting) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdresourceStatusReporting with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdresourceStatusReportingMultiError, or nil if none found.
func (m *IdresourceStatusReporting) ValidateAll() error {
	return m.validate(true)
}

func (m *IdresourceStatusReporting) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 37 {
		err := IdresourceStatusReportingValidationError{
			field:  "Value",
			reason: "value must equal 37",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdresourceStatusReportingMultiError(errors)
	}

	return nil
}

// IdresourceStatusReportingMultiError is an error wrapping multiple validation
// errors returned by IdresourceStatusReporting.ValidateAll() if the
// designated constraints aren't met.
type IdresourceStatusReportingMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdresourceStatusReportingMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdresourceStatusReportingMultiError) AllErrors() []error { return m }

// IdresourceStatusReportingValidationError is the validation error returned by
// IdresourceStatusReporting.Validate if the designated constraints aren't met.
type IdresourceStatusReportingValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdresourceStatusReportingValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdresourceStatusReportingValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdresourceStatusReportingValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdresourceStatusReportingValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdresourceStatusReportingValidationError) ErrorName() string {
	return "IdresourceStatusReportingValidationError"
}

// Error satisfies the builtin error interface
func (e IdresourceStatusReportingValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdresourceStatusReporting.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdresourceStatusReportingValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdresourceStatusReportingValidationError{}

// Validate checks the field values on IdaccessAndMobilityIndication with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdaccessAndMobilityIndication) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdaccessAndMobilityIndication with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// IdaccessAndMobilityIndicationMultiError, or nil if none found.
func (m *IdaccessAndMobilityIndication) ValidateAll() error {
	return m.validate(true)
}

func (m *IdaccessAndMobilityIndication) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 38 {
		err := IdaccessAndMobilityIndicationValidationError{
			field:  "Value",
			reason: "value must equal 38",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdaccessAndMobilityIndicationMultiError(errors)
	}

	return nil
}

// IdaccessAndMobilityIndicationMultiError is an error wrapping multiple
// validation errors returned by IdaccessAndMobilityIndication.ValidateAll()
// if the designated constraints aren't met.
type IdaccessAndMobilityIndicationMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdaccessAndMobilityIndicationMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdaccessAndMobilityIndicationMultiError) AllErrors() []error { return m }

// IdaccessAndMobilityIndicationValidationError is the validation error
// returned by IdaccessAndMobilityIndication.Validate if the designated
// constraints aren't met.
type IdaccessAndMobilityIndicationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdaccessAndMobilityIndicationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdaccessAndMobilityIndicationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdaccessAndMobilityIndicationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdaccessAndMobilityIndicationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdaccessAndMobilityIndicationValidationError) ErrorName() string {
	return "IdaccessAndMobilityIndicationValidationError"
}

// Error satisfies the builtin error interface
func (e IdaccessAndMobilityIndicationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdaccessAndMobilityIndication.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdaccessAndMobilityIndicationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdaccessAndMobilityIndicationValidationError{}

// Validate checks the field values on IdaccessSuccess with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *IdaccessSuccess) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdaccessSuccess with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdaccessSuccessMultiError, or nil if none found.
func (m *IdaccessSuccess) ValidateAll() error {
	return m.validate(true)
}

func (m *IdaccessSuccess) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 39 {
		err := IdaccessSuccessValidationError{
			field:  "Value",
			reason: "value must equal 39",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdaccessSuccessMultiError(errors)
	}

	return nil
}

// IdaccessSuccessMultiError is an error wrapping multiple validation errors
// returned by IdaccessSuccess.ValidateAll() if the designated constraints
// aren't met.
type IdaccessSuccessMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdaccessSuccessMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdaccessSuccessMultiError) AllErrors() []error { return m }

// IdaccessSuccessValidationError is the validation error returned by
// IdaccessSuccess.Validate if the designated constraints aren't met.
type IdaccessSuccessValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdaccessSuccessValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdaccessSuccessValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdaccessSuccessValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdaccessSuccessValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdaccessSuccessValidationError) ErrorName() string { return "IdaccessSuccessValidationError" }

// Error satisfies the builtin error interface
func (e IdaccessSuccessValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdaccessSuccess.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdaccessSuccessValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdaccessSuccessValidationError{}

// Validate checks the field values on IdcellTrafficTrace with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdcellTrafficTrace) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdcellTrafficTrace with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdcellTrafficTraceMultiError, or nil if none found.
func (m *IdcellTrafficTrace) ValidateAll() error {
	return m.validate(true)
}

func (m *IdcellTrafficTrace) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 40 {
		err := IdcellTrafficTraceValidationError{
			field:  "Value",
			reason: "value must equal 40",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdcellTrafficTraceMultiError(errors)
	}

	return nil
}

// IdcellTrafficTraceMultiError is an error wrapping multiple validation errors
// returned by IdcellTrafficTrace.ValidateAll() if the designated constraints
// aren't met.
type IdcellTrafficTraceMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdcellTrafficTraceMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdcellTrafficTraceMultiError) AllErrors() []error { return m }

// IdcellTrafficTraceValidationError is the validation error returned by
// IdcellTrafficTrace.Validate if the designated constraints aren't met.
type IdcellTrafficTraceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdcellTrafficTraceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdcellTrafficTraceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdcellTrafficTraceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdcellTrafficTraceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdcellTrafficTraceValidationError) ErrorName() string {
	return "IdcellTrafficTraceValidationError"
}

// Error satisfies the builtin error interface
func (e IdcellTrafficTraceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdcellTrafficTrace.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdcellTrafficTraceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdcellTrafficTraceValidationError{}

// Validate checks the field values on IdPositioningMeasurementExchange with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *IdPositioningMeasurementExchange) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdPositioningMeasurementExchange with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// IdPositioningMeasurementExchangeMultiError, or nil if none found.
func (m *IdPositioningMeasurementExchange) ValidateAll() error {
	return m.validate(true)
}

func (m *IdPositioningMeasurementExchange) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 41 {
		err := IdPositioningMeasurementExchangeValidationError{
			field:  "Value",
			reason: "value must equal 41",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdPositioningMeasurementExchangeMultiError(errors)
	}

	return nil
}

// IdPositioningMeasurementExchangeMultiError is an error wrapping multiple
// validation errors returned by
// IdPositioningMeasurementExchange.ValidateAll() if the designated
// constraints aren't met.
type IdPositioningMeasurementExchangeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdPositioningMeasurementExchangeMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdPositioningMeasurementExchangeMultiError) AllErrors() []error { return m }

// IdPositioningMeasurementExchangeValidationError is the validation error
// returned by IdPositioningMeasurementExchange.Validate if the designated
// constraints aren't met.
type IdPositioningMeasurementExchangeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdPositioningMeasurementExchangeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdPositioningMeasurementExchangeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdPositioningMeasurementExchangeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdPositioningMeasurementExchangeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdPositioningMeasurementExchangeValidationError) ErrorName() string {
	return "IdPositioningMeasurementExchangeValidationError"
}

// Error satisfies the builtin error interface
func (e IdPositioningMeasurementExchangeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdPositioningMeasurementExchange.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdPositioningMeasurementExchangeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdPositioningMeasurementExchangeValidationError{}

// Validate checks the field values on
// IdPositioningAssistanceInformationControl with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *IdPositioningAssistanceInformationControl) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// IdPositioningAssistanceInformationControl with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// IdPositioningAssistanceInformationControlMultiError, or nil if none found.
func (m *IdPositioningAssistanceInformationControl) ValidateAll() error {
	return m.validate(true)
}

func (m *IdPositioningAssistanceInformationControl) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 42 {
		err := IdPositioningAssistanceInformationControlValidationError{
			field:  "Value",
			reason: "value must equal 42",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdPositioningAssistanceInformationControlMultiError(errors)
	}

	return nil
}

// IdPositioningAssistanceInformationControlMultiError is an error wrapping
// multiple validation errors returned by
// IdPositioningAssistanceInformationControl.ValidateAll() if the designated
// constraints aren't met.
type IdPositioningAssistanceInformationControlMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdPositioningAssistanceInformationControlMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdPositioningAssistanceInformationControlMultiError) AllErrors() []error { return m }

// IdPositioningAssistanceInformationControlValidationError is the validation
// error returned by IdPositioningAssistanceInformationControl.Validate if the
// designated constraints aren't met.
type IdPositioningAssistanceInformationControlValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdPositioningAssistanceInformationControlValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdPositioningAssistanceInformationControlValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdPositioningAssistanceInformationControlValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdPositioningAssistanceInformationControlValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdPositioningAssistanceInformationControlValidationError) ErrorName() string {
	return "IdPositioningAssistanceInformationControlValidationError"
}

// Error satisfies the builtin error interface
func (e IdPositioningAssistanceInformationControlValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdPositioningAssistanceInformationControl.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdPositioningAssistanceInformationControlValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdPositioningAssistanceInformationControlValidationError{}

// Validate checks the field values on
// IdPositioningAssistanceInformationFeedback with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *IdPositioningAssistanceInformationFeedback) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// IdPositioningAssistanceInformationFeedback with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// IdPositioningAssistanceInformationFeedbackMultiError, or nil if none found.
func (m *IdPositioningAssistanceInformationFeedback) ValidateAll() error {
	return m.validate(true)
}

func (m *IdPositioningAssistanceInformationFeedback) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 43 {
		err := IdPositioningAssistanceInformationFeedbackValidationError{
			field:  "Value",
			reason: "value must equal 43",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdPositioningAssistanceInformationFeedbackMultiError(errors)
	}

	return nil
}

// IdPositioningAssistanceInformationFeedbackMultiError is an error wrapping
// multiple validation errors returned by
// IdPositioningAssistanceInformationFeedback.ValidateAll() if the designated
// constraints aren't met.
type IdPositioningAssistanceInformationFeedbackMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdPositioningAssistanceInformationFeedbackMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdPositioningAssistanceInformationFeedbackMultiError) AllErrors() []error { return m }

// IdPositioningAssistanceInformationFeedbackValidationError is the validation
// error returned by IdPositioningAssistanceInformationFeedback.Validate if
// the designated constraints aren't met.
type IdPositioningAssistanceInformationFeedbackValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdPositioningAssistanceInformationFeedbackValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdPositioningAssistanceInformationFeedbackValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdPositioningAssistanceInformationFeedbackValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdPositioningAssistanceInformationFeedbackValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdPositioningAssistanceInformationFeedbackValidationError) ErrorName() string {
	return "IdPositioningAssistanceInformationFeedbackValidationError"
}

// Error satisfies the builtin error interface
func (e IdPositioningAssistanceInformationFeedbackValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdPositioningAssistanceInformationFeedback.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdPositioningAssistanceInformationFeedbackValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdPositioningAssistanceInformationFeedbackValidationError{}

// Validate checks the field values on IdPositioningMeasurementReport with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdPositioningMeasurementReport) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdPositioningMeasurementReport with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// IdPositioningMeasurementReportMultiError, or nil if none found.
func (m *IdPositioningMeasurementReport) ValidateAll() error {
	return m.validate(true)
}

func (m *IdPositioningMeasurementReport) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 44 {
		err := IdPositioningMeasurementReportValidationError{
			field:  "Value",
			reason: "value must equal 44",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdPositioningMeasurementReportMultiError(errors)
	}

	return nil
}

// IdPositioningMeasurementReportMultiError is an error wrapping multiple
// validation errors returned by IdPositioningMeasurementReport.ValidateAll()
// if the designated constraints aren't met.
type IdPositioningMeasurementReportMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdPositioningMeasurementReportMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdPositioningMeasurementReportMultiError) AllErrors() []error { return m }

// IdPositioningMeasurementReportValidationError is the validation error
// returned by IdPositioningMeasurementReport.Validate if the designated
// constraints aren't met.
type IdPositioningMeasurementReportValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdPositioningMeasurementReportValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdPositioningMeasurementReportValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdPositioningMeasurementReportValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdPositioningMeasurementReportValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdPositioningMeasurementReportValidationError) ErrorName() string {
	return "IdPositioningMeasurementReportValidationError"
}

// Error satisfies the builtin error interface
func (e IdPositioningMeasurementReportValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdPositioningMeasurementReport.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdPositioningMeasurementReportValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdPositioningMeasurementReportValidationError{}

// Validate checks the field values on IdPositioningMeasurementAbort with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdPositioningMeasurementAbort) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdPositioningMeasurementAbort with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// IdPositioningMeasurementAbortMultiError, or nil if none found.
func (m *IdPositioningMeasurementAbort) ValidateAll() error {
	return m.validate(true)
}

func (m *IdPositioningMeasurementAbort) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 45 {
		err := IdPositioningMeasurementAbortValidationError{
			field:  "Value",
			reason: "value must equal 45",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdPositioningMeasurementAbortMultiError(errors)
	}

	return nil
}

// IdPositioningMeasurementAbortMultiError is an error wrapping multiple
// validation errors returned by IdPositioningMeasurementAbort.ValidateAll()
// if the designated constraints aren't met.
type IdPositioningMeasurementAbortMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdPositioningMeasurementAbortMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdPositioningMeasurementAbortMultiError) AllErrors() []error { return m }

// IdPositioningMeasurementAbortValidationError is the validation error
// returned by IdPositioningMeasurementAbort.Validate if the designated
// constraints aren't met.
type IdPositioningMeasurementAbortValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdPositioningMeasurementAbortValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdPositioningMeasurementAbortValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdPositioningMeasurementAbortValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdPositioningMeasurementAbortValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdPositioningMeasurementAbortValidationError) ErrorName() string {
	return "IdPositioningMeasurementAbortValidationError"
}

// Error satisfies the builtin error interface
func (e IdPositioningMeasurementAbortValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdPositioningMeasurementAbort.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdPositioningMeasurementAbortValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdPositioningMeasurementAbortValidationError{}

// Validate checks the field values on
// IdPositioningMeasurementFailureIndication with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *IdPositioningMeasurementFailureIndication) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// IdPositioningMeasurementFailureIndication with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// IdPositioningMeasurementFailureIndicationMultiError, or nil if none found.
func (m *IdPositioningMeasurementFailureIndication) ValidateAll() error {
	return m.validate(true)
}

func (m *IdPositioningMeasurementFailureIndication) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 46 {
		err := IdPositioningMeasurementFailureIndicationValidationError{
			field:  "Value",
			reason: "value must equal 46",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdPositioningMeasurementFailureIndicationMultiError(errors)
	}

	return nil
}

// IdPositioningMeasurementFailureIndicationMultiError is an error wrapping
// multiple validation errors returned by
// IdPositioningMeasurementFailureIndication.ValidateAll() if the designated
// constraints aren't met.
type IdPositioningMeasurementFailureIndicationMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdPositioningMeasurementFailureIndicationMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdPositioningMeasurementFailureIndicationMultiError) AllErrors() []error { return m }

// IdPositioningMeasurementFailureIndicationValidationError is the validation
// error returned by IdPositioningMeasurementFailureIndication.Validate if the
// designated constraints aren't met.
type IdPositioningMeasurementFailureIndicationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdPositioningMeasurementFailureIndicationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdPositioningMeasurementFailureIndicationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdPositioningMeasurementFailureIndicationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdPositioningMeasurementFailureIndicationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdPositioningMeasurementFailureIndicationValidationError) ErrorName() string {
	return "IdPositioningMeasurementFailureIndicationValidationError"
}

// Error satisfies the builtin error interface
func (e IdPositioningMeasurementFailureIndicationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdPositioningMeasurementFailureIndication.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdPositioningMeasurementFailureIndicationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdPositioningMeasurementFailureIndicationValidationError{}

// Validate checks the field values on IdPositioningMeasurementUpdate with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdPositioningMeasurementUpdate) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdPositioningMeasurementUpdate with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// IdPositioningMeasurementUpdateMultiError, or nil if none found.
func (m *IdPositioningMeasurementUpdate) ValidateAll() error {
	return m.validate(true)
}

func (m *IdPositioningMeasurementUpdate) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 47 {
		err := IdPositioningMeasurementUpdateValidationError{
			field:  "Value",
			reason: "value must equal 47",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdPositioningMeasurementUpdateMultiError(errors)
	}

	return nil
}

// IdPositioningMeasurementUpdateMultiError is an error wrapping multiple
// validation errors returned by IdPositioningMeasurementUpdate.ValidateAll()
// if the designated constraints aren't met.
type IdPositioningMeasurementUpdateMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdPositioningMeasurementUpdateMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdPositioningMeasurementUpdateMultiError) AllErrors() []error { return m }

// IdPositioningMeasurementUpdateValidationError is the validation error
// returned by IdPositioningMeasurementUpdate.Validate if the designated
// constraints aren't met.
type IdPositioningMeasurementUpdateValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdPositioningMeasurementUpdateValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdPositioningMeasurementUpdateValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdPositioningMeasurementUpdateValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdPositioningMeasurementUpdateValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdPositioningMeasurementUpdateValidationError) ErrorName() string {
	return "IdPositioningMeasurementUpdateValidationError"
}

// Error satisfies the builtin error interface
func (e IdPositioningMeasurementUpdateValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdPositioningMeasurementUpdate.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdPositioningMeasurementUpdateValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdPositioningMeasurementUpdateValidationError{}

// Validate checks the field values on IdTRpinformationExchange with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdTRpinformationExchange) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdTRpinformationExchange with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdTRpinformationExchangeMultiError, or nil if none found.
func (m *IdTRpinformationExchange) ValidateAll() error {
	return m.validate(true)
}

func (m *IdTRpinformationExchange) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 48 {
		err := IdTRpinformationExchangeValidationError{
			field:  "Value",
			reason: "value must equal 48",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdTRpinformationExchangeMultiError(errors)
	}

	return nil
}

// IdTRpinformationExchangeMultiError is an error wrapping multiple validation
// errors returned by IdTRpinformationExchange.ValidateAll() if the designated
// constraints aren't met.
type IdTRpinformationExchangeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdTRpinformationExchangeMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdTRpinformationExchangeMultiError) AllErrors() []error { return m }

// IdTRpinformationExchangeValidationError is the validation error returned by
// IdTRpinformationExchange.Validate if the designated constraints aren't met.
type IdTRpinformationExchangeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdTRpinformationExchangeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdTRpinformationExchangeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdTRpinformationExchangeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdTRpinformationExchangeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdTRpinformationExchangeValidationError) ErrorName() string {
	return "IdTRpinformationExchangeValidationError"
}

// Error satisfies the builtin error interface
func (e IdTRpinformationExchangeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdTRpinformationExchange.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdTRpinformationExchangeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdTRpinformationExchangeValidationError{}

// Validate checks the field values on IdPositioningInformationExchange with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *IdPositioningInformationExchange) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdPositioningInformationExchange with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// IdPositioningInformationExchangeMultiError, or nil if none found.
func (m *IdPositioningInformationExchange) ValidateAll() error {
	return m.validate(true)
}

func (m *IdPositioningInformationExchange) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 49 {
		err := IdPositioningInformationExchangeValidationError{
			field:  "Value",
			reason: "value must equal 49",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdPositioningInformationExchangeMultiError(errors)
	}

	return nil
}

// IdPositioningInformationExchangeMultiError is an error wrapping multiple
// validation errors returned by
// IdPositioningInformationExchange.ValidateAll() if the designated
// constraints aren't met.
type IdPositioningInformationExchangeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdPositioningInformationExchangeMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdPositioningInformationExchangeMultiError) AllErrors() []error { return m }

// IdPositioningInformationExchangeValidationError is the validation error
// returned by IdPositioningInformationExchange.Validate if the designated
// constraints aren't met.
type IdPositioningInformationExchangeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdPositioningInformationExchangeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdPositioningInformationExchangeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdPositioningInformationExchangeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdPositioningInformationExchangeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdPositioningInformationExchangeValidationError) ErrorName() string {
	return "IdPositioningInformationExchangeValidationError"
}

// Error satisfies the builtin error interface
func (e IdPositioningInformationExchangeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdPositioningInformationExchange.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdPositioningInformationExchangeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdPositioningInformationExchangeValidationError{}

// Validate checks the field values on IdPositioningActivation with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdPositioningActivation) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdPositioningActivation with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdPositioningActivationMultiError, or nil if none found.
func (m *IdPositioningActivation) ValidateAll() error {
	return m.validate(true)
}

func (m *IdPositioningActivation) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 50 {
		err := IdPositioningActivationValidationError{
			field:  "Value",
			reason: "value must equal 50",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdPositioningActivationMultiError(errors)
	}

	return nil
}

// IdPositioningActivationMultiError is an error wrapping multiple validation
// errors returned by IdPositioningActivation.ValidateAll() if the designated
// constraints aren't met.
type IdPositioningActivationMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdPositioningActivationMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdPositioningActivationMultiError) AllErrors() []error { return m }

// IdPositioningActivationValidationError is the validation error returned by
// IdPositioningActivation.Validate if the designated constraints aren't met.
type IdPositioningActivationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdPositioningActivationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdPositioningActivationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdPositioningActivationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdPositioningActivationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdPositioningActivationValidationError) ErrorName() string {
	return "IdPositioningActivationValidationError"
}

// Error satisfies the builtin error interface
func (e IdPositioningActivationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdPositioningActivation.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdPositioningActivationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdPositioningActivationValidationError{}

// Validate checks the field values on IdPositioningDeactivation with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdPositioningDeactivation) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdPositioningDeactivation with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdPositioningDeactivationMultiError, or nil if none found.
func (m *IdPositioningDeactivation) ValidateAll() error {
	return m.validate(true)
}

func (m *IdPositioningDeactivation) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 51 {
		err := IdPositioningDeactivationValidationError{
			field:  "Value",
			reason: "value must equal 51",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdPositioningDeactivationMultiError(errors)
	}

	return nil
}

// IdPositioningDeactivationMultiError is an error wrapping multiple validation
// errors returned by IdPositioningDeactivation.ValidateAll() if the
// designated constraints aren't met.
type IdPositioningDeactivationMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdPositioningDeactivationMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdPositioningDeactivationMultiError) AllErrors() []error { return m }

// IdPositioningDeactivationValidationError is the validation error returned by
// IdPositioningDeactivation.Validate if the designated constraints aren't met.
type IdPositioningDeactivationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdPositioningDeactivationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdPositioningDeactivationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdPositioningDeactivationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdPositioningDeactivationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdPositioningDeactivationValidationError) ErrorName() string {
	return "IdPositioningDeactivationValidationError"
}

// Error satisfies the builtin error interface
func (e IdPositioningDeactivationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdPositioningDeactivation.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdPositioningDeactivationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdPositioningDeactivationValidationError{}

// Validate checks the field values on IdECIdmeasurementInitiation with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdECIdmeasurementInitiation) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdECIdmeasurementInitiation with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdECIdmeasurementInitiationMultiError, or nil if none found.
func (m *IdECIdmeasurementInitiation) ValidateAll() error {
	return m.validate(true)
}

func (m *IdECIdmeasurementInitiation) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 52 {
		err := IdECIdmeasurementInitiationValidationError{
			field:  "Value",
			reason: "value must equal 52",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdECIdmeasurementInitiationMultiError(errors)
	}

	return nil
}

// IdECIdmeasurementInitiationMultiError is an error wrapping multiple
// validation errors returned by IdECIdmeasurementInitiation.ValidateAll() if
// the designated constraints aren't met.
type IdECIdmeasurementInitiationMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdECIdmeasurementInitiationMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdECIdmeasurementInitiationMultiError) AllErrors() []error { return m }

// IdECIdmeasurementInitiationValidationError is the validation error returned
// by IdECIdmeasurementInitiation.Validate if the designated constraints
// aren't met.
type IdECIdmeasurementInitiationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdECIdmeasurementInitiationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdECIdmeasurementInitiationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdECIdmeasurementInitiationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdECIdmeasurementInitiationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdECIdmeasurementInitiationValidationError) ErrorName() string {
	return "IdECIdmeasurementInitiationValidationError"
}

// Error satisfies the builtin error interface
func (e IdECIdmeasurementInitiationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdECIdmeasurementInitiation.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdECIdmeasurementInitiationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdECIdmeasurementInitiationValidationError{}

// Validate checks the field values on IdECIdmeasurementFailureIndication with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *IdECIdmeasurementFailureIndication) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdECIdmeasurementFailureIndication
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// IdECIdmeasurementFailureIndicationMultiError, or nil if none found.
func (m *IdECIdmeasurementFailureIndication) ValidateAll() error {
	return m.validate(true)
}

func (m *IdECIdmeasurementFailureIndication) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 53 {
		err := IdECIdmeasurementFailureIndicationValidationError{
			field:  "Value",
			reason: "value must equal 53",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdECIdmeasurementFailureIndicationMultiError(errors)
	}

	return nil
}

// IdECIdmeasurementFailureIndicationMultiError is an error wrapping multiple
// validation errors returned by
// IdECIdmeasurementFailureIndication.ValidateAll() if the designated
// constraints aren't met.
type IdECIdmeasurementFailureIndicationMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdECIdmeasurementFailureIndicationMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdECIdmeasurementFailureIndicationMultiError) AllErrors() []error { return m }

// IdECIdmeasurementFailureIndicationValidationError is the validation error
// returned by IdECIdmeasurementFailureIndication.Validate if the designated
// constraints aren't met.
type IdECIdmeasurementFailureIndicationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdECIdmeasurementFailureIndicationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdECIdmeasurementFailureIndicationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdECIdmeasurementFailureIndicationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdECIdmeasurementFailureIndicationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdECIdmeasurementFailureIndicationValidationError) ErrorName() string {
	return "IdECIdmeasurementFailureIndicationValidationError"
}

// Error satisfies the builtin error interface
func (e IdECIdmeasurementFailureIndicationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdECIdmeasurementFailureIndication.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdECIdmeasurementFailureIndicationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdECIdmeasurementFailureIndicationValidationError{}

// Validate checks the field values on IdECIdmeasurementReport with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdECIdmeasurementReport) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdECIdmeasurementReport with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdECIdmeasurementReportMultiError, or nil if none found.
func (m *IdECIdmeasurementReport) ValidateAll() error {
	return m.validate(true)
}

func (m *IdECIdmeasurementReport) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 54 {
		err := IdECIdmeasurementReportValidationError{
			field:  "Value",
			reason: "value must equal 54",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdECIdmeasurementReportMultiError(errors)
	}

	return nil
}

// IdECIdmeasurementReportMultiError is an error wrapping multiple validation
// errors returned by IdECIdmeasurementReport.ValidateAll() if the designated
// constraints aren't met.
type IdECIdmeasurementReportMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdECIdmeasurementReportMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdECIdmeasurementReportMultiError) AllErrors() []error { return m }

// IdECIdmeasurementReportValidationError is the validation error returned by
// IdECIdmeasurementReport.Validate if the designated constraints aren't met.
type IdECIdmeasurementReportValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdECIdmeasurementReportValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdECIdmeasurementReportValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdECIdmeasurementReportValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdECIdmeasurementReportValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdECIdmeasurementReportValidationError) ErrorName() string {
	return "IdECIdmeasurementReportValidationError"
}

// Error satisfies the builtin error interface
func (e IdECIdmeasurementReportValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdECIdmeasurementReport.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdECIdmeasurementReportValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdECIdmeasurementReportValidationError{}

// Validate checks the field values on IdECIdmeasurementTermination with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdECIdmeasurementTermination) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdECIdmeasurementTermination with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdECIdmeasurementTerminationMultiError, or nil if none found.
func (m *IdECIdmeasurementTermination) ValidateAll() error {
	return m.validate(true)
}

func (m *IdECIdmeasurementTermination) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 55 {
		err := IdECIdmeasurementTerminationValidationError{
			field:  "Value",
			reason: "value must equal 55",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdECIdmeasurementTerminationMultiError(errors)
	}

	return nil
}

// IdECIdmeasurementTerminationMultiError is an error wrapping multiple
// validation errors returned by IdECIdmeasurementTermination.ValidateAll() if
// the designated constraints aren't met.
type IdECIdmeasurementTerminationMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdECIdmeasurementTerminationMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdECIdmeasurementTerminationMultiError) AllErrors() []error { return m }

// IdECIdmeasurementTerminationValidationError is the validation error returned
// by IdECIdmeasurementTermination.Validate if the designated constraints
// aren't met.
type IdECIdmeasurementTerminationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdECIdmeasurementTerminationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdECIdmeasurementTerminationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdECIdmeasurementTerminationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdECIdmeasurementTerminationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdECIdmeasurementTerminationValidationError) ErrorName() string {
	return "IdECIdmeasurementTerminationValidationError"
}

// Error satisfies the builtin error interface
func (e IdECIdmeasurementTerminationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdECIdmeasurementTermination.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdECIdmeasurementTerminationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdECIdmeasurementTerminationValidationError{}

// Validate checks the field values on IdPositioningInformationUpdate with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdPositioningInformationUpdate) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdPositioningInformationUpdate with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// IdPositioningInformationUpdateMultiError, or nil if none found.
func (m *IdPositioningInformationUpdate) ValidateAll() error {
	return m.validate(true)
}

func (m *IdPositioningInformationUpdate) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 56 {
		err := IdPositioningInformationUpdateValidationError{
			field:  "Value",
			reason: "value must equal 56",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdPositioningInformationUpdateMultiError(errors)
	}

	return nil
}

// IdPositioningInformationUpdateMultiError is an error wrapping multiple
// validation errors returned by IdPositioningInformationUpdate.ValidateAll()
// if the designated constraints aren't met.
type IdPositioningInformationUpdateMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdPositioningInformationUpdateMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdPositioningInformationUpdateMultiError) AllErrors() []error { return m }

// IdPositioningInformationUpdateValidationError is the validation error
// returned by IdPositioningInformationUpdate.Validate if the designated
// constraints aren't met.
type IdPositioningInformationUpdateValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdPositioningInformationUpdateValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdPositioningInformationUpdateValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdPositioningInformationUpdateValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdPositioningInformationUpdateValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdPositioningInformationUpdateValidationError) ErrorName() string {
	return "IdPositioningInformationUpdateValidationError"
}

// Error satisfies the builtin error interface
func (e IdPositioningInformationUpdateValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdPositioningInformationUpdate.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdPositioningInformationUpdateValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdPositioningInformationUpdateValidationError{}

// Validate checks the field values on IdReferenceTimeInformationReport with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *IdReferenceTimeInformationReport) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdReferenceTimeInformationReport with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// IdReferenceTimeInformationReportMultiError, or nil if none found.
func (m *IdReferenceTimeInformationReport) ValidateAll() error {
	return m.validate(true)
}

func (m *IdReferenceTimeInformationReport) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 57 {
		err := IdReferenceTimeInformationReportValidationError{
			field:  "Value",
			reason: "value must equal 57",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdReferenceTimeInformationReportMultiError(errors)
	}

	return nil
}

// IdReferenceTimeInformationReportMultiError is an error wrapping multiple
// validation errors returned by
// IdReferenceTimeInformationReport.ValidateAll() if the designated
// constraints aren't met.
type IdReferenceTimeInformationReportMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdReferenceTimeInformationReportMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdReferenceTimeInformationReportMultiError) AllErrors() []error { return m }

// IdReferenceTimeInformationReportValidationError is the validation error
// returned by IdReferenceTimeInformationReport.Validate if the designated
// constraints aren't met.
type IdReferenceTimeInformationReportValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdReferenceTimeInformationReportValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdReferenceTimeInformationReportValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdReferenceTimeInformationReportValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdReferenceTimeInformationReportValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdReferenceTimeInformationReportValidationError) ErrorName() string {
	return "IdReferenceTimeInformationReportValidationError"
}

// Error satisfies the builtin error interface
func (e IdReferenceTimeInformationReportValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdReferenceTimeInformationReport.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdReferenceTimeInformationReportValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdReferenceTimeInformationReportValidationError{}

// Validate checks the field values on
// IdReferenceTimeInformationReportingControl with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *IdReferenceTimeInformationReportingControl) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// IdReferenceTimeInformationReportingControl with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// IdReferenceTimeInformationReportingControlMultiError, or nil if none found.
func (m *IdReferenceTimeInformationReportingControl) ValidateAll() error {
	return m.validate(true)
}

func (m *IdReferenceTimeInformationReportingControl) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 58 {
		err := IdReferenceTimeInformationReportingControlValidationError{
			field:  "Value",
			reason: "value must equal 58",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdReferenceTimeInformationReportingControlMultiError(errors)
	}

	return nil
}

// IdReferenceTimeInformationReportingControlMultiError is an error wrapping
// multiple validation errors returned by
// IdReferenceTimeInformationReportingControl.ValidateAll() if the designated
// constraints aren't met.
type IdReferenceTimeInformationReportingControlMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdReferenceTimeInformationReportingControlMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdReferenceTimeInformationReportingControlMultiError) AllErrors() []error { return m }

// IdReferenceTimeInformationReportingControlValidationError is the validation
// error returned by IdReferenceTimeInformationReportingControl.Validate if
// the designated constraints aren't met.
type IdReferenceTimeInformationReportingControlValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdReferenceTimeInformationReportingControlValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdReferenceTimeInformationReportingControlValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdReferenceTimeInformationReportingControlValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdReferenceTimeInformationReportingControlValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdReferenceTimeInformationReportingControlValidationError) ErrorName() string {
	return "IdReferenceTimeInformationReportingControlValidationError"
}

// Error satisfies the builtin error interface
func (e IdReferenceTimeInformationReportingControlValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdReferenceTimeInformationReportingControl.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdReferenceTimeInformationReportingControlValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdReferenceTimeInformationReportingControlValidationError{}

// Validate checks the field values on MaxPrivateIes with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *MaxPrivateIes) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MaxPrivateIes with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in MaxPrivateIesMultiError, or
// nil if none found.
func (m *MaxPrivateIes) ValidateAll() error {
	return m.validate(true)
}

func (m *MaxPrivateIes) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 65535 {
		err := MaxPrivateIesValidationError{
			field:  "Value",
			reason: "value must equal 65535",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MaxPrivateIesMultiError(errors)
	}

	return nil
}

// MaxPrivateIesMultiError is an error wrapping multiple validation errors
// returned by MaxPrivateIes.ValidateAll() if the designated constraints
// aren't met.
type MaxPrivateIesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MaxPrivateIesMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MaxPrivateIesMultiError) AllErrors() []error { return m }

// MaxPrivateIesValidationError is the validation error returned by
// MaxPrivateIes.Validate if the designated constraints aren't met.
type MaxPrivateIesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MaxPrivateIesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MaxPrivateIesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MaxPrivateIesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MaxPrivateIesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MaxPrivateIesValidationError) ErrorName() string { return "MaxPrivateIesValidationError" }

// Error satisfies the builtin error interface
func (e MaxPrivateIesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMaxPrivateIes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MaxPrivateIesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MaxPrivateIesValidationError{}

// Validate checks the field values on MaxProtocolExtensions with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *MaxProtocolExtensions) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MaxProtocolExtensions with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MaxProtocolExtensionsMultiError, or nil if none found.
func (m *MaxProtocolExtensions) ValidateAll() error {
	return m.validate(true)
}

func (m *MaxProtocolExtensions) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 65535 {
		err := MaxProtocolExtensionsValidationError{
			field:  "Value",
			reason: "value must equal 65535",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MaxProtocolExtensionsMultiError(errors)
	}

	return nil
}

// MaxProtocolExtensionsMultiError is an error wrapping multiple validation
// errors returned by MaxProtocolExtensions.ValidateAll() if the designated
// constraints aren't met.
type MaxProtocolExtensionsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MaxProtocolExtensionsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MaxProtocolExtensionsMultiError) AllErrors() []error { return m }

// MaxProtocolExtensionsValidationError is the validation error returned by
// MaxProtocolExtensions.Validate if the designated constraints aren't met.
type MaxProtocolExtensionsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MaxProtocolExtensionsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MaxProtocolExtensionsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MaxProtocolExtensionsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MaxProtocolExtensionsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MaxProtocolExtensionsValidationError) ErrorName() string {
	return "MaxProtocolExtensionsValidationError"
}

// Error satisfies the builtin error interface
func (e MaxProtocolExtensionsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMaxProtocolExtensions.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MaxProtocolExtensionsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MaxProtocolExtensionsValidationError{}

// Validate checks the field values on MaxProtocolIes with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *MaxProtocolIes) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MaxProtocolIes with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in MaxProtocolIesMultiError,
// or nil if none found.
func (m *MaxProtocolIes) ValidateAll() error {
	return m.validate(true)
}

func (m *MaxProtocolIes) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 65535 {
		err := MaxProtocolIesValidationError{
			field:  "Value",
			reason: "value must equal 65535",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MaxProtocolIesMultiError(errors)
	}

	return nil
}

// MaxProtocolIesMultiError is an error wrapping multiple validation errors
// returned by MaxProtocolIes.ValidateAll() if the designated constraints
// aren't met.
type MaxProtocolIesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MaxProtocolIesMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MaxProtocolIesMultiError) AllErrors() []error { return m }

// MaxProtocolIesValidationError is the validation error returned by
// MaxProtocolIes.Validate if the designated constraints aren't met.
type MaxProtocolIesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MaxProtocolIesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MaxProtocolIesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MaxProtocolIesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MaxProtocolIesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MaxProtocolIesValidationError) ErrorName() string { return "MaxProtocolIesValidationError" }

// Error satisfies the builtin error interface
func (e MaxProtocolIesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMaxProtocolIes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MaxProtocolIesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MaxProtocolIesValidationError{}

// Validate checks the field values on MaxNrarfcn with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *MaxNrarfcn) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MaxNrarfcn with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in MaxNrarfcnMultiError, or
// nil if none found.
func (m *MaxNrarfcn) ValidateAll() error {
	return m.validate(true)
}

func (m *MaxNrarfcn) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 3279165 {
		err := MaxNrarfcnValidationError{
			field:  "Value",
			reason: "value must equal 3279165",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MaxNrarfcnMultiError(errors)
	}

	return nil
}

// MaxNrarfcnMultiError is an error wrapping multiple validation errors
// returned by MaxNrarfcn.ValidateAll() if the designated constraints aren't met.
type MaxNrarfcnMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MaxNrarfcnMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MaxNrarfcnMultiError) AllErrors() []error { return m }

// MaxNrarfcnValidationError is the validation error returned by
// MaxNrarfcn.Validate if the designated constraints aren't met.
type MaxNrarfcnValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MaxNrarfcnValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MaxNrarfcnValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MaxNrarfcnValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MaxNrarfcnValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MaxNrarfcnValidationError) ErrorName() string { return "MaxNrarfcnValidationError" }

// Error satisfies the builtin error interface
func (e MaxNrarfcnValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMaxNrarfcn.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MaxNrarfcnValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MaxNrarfcnValidationError{}

// Validate checks the field values on MaxnoofErrors with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *MaxnoofErrors) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MaxnoofErrors with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in MaxnoofErrorsMultiError, or
// nil if none found.
func (m *MaxnoofErrors) ValidateAll() error {
	return m.validate(true)
}

func (m *MaxnoofErrors) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 256 {
		err := MaxnoofErrorsValidationError{
			field:  "Value",
			reason: "value must equal 256",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MaxnoofErrorsMultiError(errors)
	}

	return nil
}

// MaxnoofErrorsMultiError is an error wrapping multiple validation errors
// returned by MaxnoofErrors.ValidateAll() if the designated constraints
// aren't met.
type MaxnoofErrorsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MaxnoofErrorsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MaxnoofErrorsMultiError) AllErrors() []error { return m }

// MaxnoofErrorsValidationError is the validation error returned by
// MaxnoofErrors.Validate if the designated constraints aren't met.
type MaxnoofErrorsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MaxnoofErrorsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MaxnoofErrorsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MaxnoofErrorsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MaxnoofErrorsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MaxnoofErrorsValidationError) ErrorName() string { return "MaxnoofErrorsValidationError" }

// Error satisfies the builtin error interface
func (e MaxnoofErrorsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMaxnoofErrors.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MaxnoofErrorsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MaxnoofErrorsValidationError{}

// Validate checks the field values on MaxnoofIndividualF1ConnectionsToReset
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *MaxnoofIndividualF1ConnectionsToReset) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MaxnoofIndividualF1ConnectionsToReset
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// MaxnoofIndividualF1ConnectionsToResetMultiError, or nil if none found.
func (m *MaxnoofIndividualF1ConnectionsToReset) ValidateAll() error {
	return m.validate(true)
}

func (m *MaxnoofIndividualF1ConnectionsToReset) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 65536 {
		err := MaxnoofIndividualF1ConnectionsToResetValidationError{
			field:  "Value",
			reason: "value must equal 65536",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MaxnoofIndividualF1ConnectionsToResetMultiError(errors)
	}

	return nil
}

// MaxnoofIndividualF1ConnectionsToResetMultiError is an error wrapping
// multiple validation errors returned by
// MaxnoofIndividualF1ConnectionsToReset.ValidateAll() if the designated
// constraints aren't met.
type MaxnoofIndividualF1ConnectionsToResetMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MaxnoofIndividualF1ConnectionsToResetMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MaxnoofIndividualF1ConnectionsToResetMultiError) AllErrors() []error { return m }

// MaxnoofIndividualF1ConnectionsToResetValidationError is the validation error
// returned by MaxnoofIndividualF1ConnectionsToReset.Validate if the
// designated constraints aren't met.
type MaxnoofIndividualF1ConnectionsToResetValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MaxnoofIndividualF1ConnectionsToResetValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MaxnoofIndividualF1ConnectionsToResetValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MaxnoofIndividualF1ConnectionsToResetValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MaxnoofIndividualF1ConnectionsToResetValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MaxnoofIndividualF1ConnectionsToResetValidationError) ErrorName() string {
	return "MaxnoofIndividualF1ConnectionsToResetValidationError"
}

// Error satisfies the builtin error interface
func (e MaxnoofIndividualF1ConnectionsToResetValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMaxnoofIndividualF1ConnectionsToReset.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MaxnoofIndividualF1ConnectionsToResetValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MaxnoofIndividualF1ConnectionsToResetValidationError{}

// Validate checks the field values on MaxCellingNbdu with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *MaxCellingNbdu) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MaxCellingNbdu with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in MaxCellingNbduMultiError,
// or nil if none found.
func (m *MaxCellingNbdu) ValidateAll() error {
	return m.validate(true)
}

func (m *MaxCellingNbdu) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 512 {
		err := MaxCellingNbduValidationError{
			field:  "Value",
			reason: "value must equal 512",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MaxCellingNbduMultiError(errors)
	}

	return nil
}

// MaxCellingNbduMultiError is an error wrapping multiple validation errors
// returned by MaxCellingNbdu.ValidateAll() if the designated constraints
// aren't met.
type MaxCellingNbduMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MaxCellingNbduMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MaxCellingNbduMultiError) AllErrors() []error { return m }

// MaxCellingNbduValidationError is the validation error returned by
// MaxCellingNbdu.Validate if the designated constraints aren't met.
type MaxCellingNbduValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MaxCellingNbduValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MaxCellingNbduValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MaxCellingNbduValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MaxCellingNbduValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MaxCellingNbduValidationError) ErrorName() string { return "MaxCellingNbduValidationError" }

// Error satisfies the builtin error interface
func (e MaxCellingNbduValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMaxCellingNbdu.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MaxCellingNbduValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MaxCellingNbduValidationError{}

// Validate checks the field values on MaxnoofScells with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *MaxnoofScells) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MaxnoofScells with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in MaxnoofScellsMultiError, or
// nil if none found.
func (m *MaxnoofScells) ValidateAll() error {
	return m.validate(true)
}

func (m *MaxnoofScells) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 32 {
		err := MaxnoofScellsValidationError{
			field:  "Value",
			reason: "value must equal 32",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MaxnoofScellsMultiError(errors)
	}

	return nil
}

// MaxnoofScellsMultiError is an error wrapping multiple validation errors
// returned by MaxnoofScells.ValidateAll() if the designated constraints
// aren't met.
type MaxnoofScellsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MaxnoofScellsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MaxnoofScellsMultiError) AllErrors() []error { return m }

// MaxnoofScellsValidationError is the validation error returned by
// MaxnoofScells.Validate if the designated constraints aren't met.
type MaxnoofScellsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MaxnoofScellsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MaxnoofScellsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MaxnoofScellsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MaxnoofScellsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MaxnoofScellsValidationError) ErrorName() string { return "MaxnoofScellsValidationError" }

// Error satisfies the builtin error interface
func (e MaxnoofScellsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMaxnoofScells.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MaxnoofScellsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MaxnoofScellsValidationError{}

// Validate checks the field values on MaxnoofSrbs with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *MaxnoofSrbs) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MaxnoofSrbs with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in MaxnoofSrbsMultiError, or
// nil if none found.
func (m *MaxnoofSrbs) ValidateAll() error {
	return m.validate(true)
}

func (m *MaxnoofSrbs) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 8 {
		err := MaxnoofSrbsValidationError{
			field:  "Value",
			reason: "value must equal 8",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MaxnoofSrbsMultiError(errors)
	}

	return nil
}

// MaxnoofSrbsMultiError is an error wrapping multiple validation errors
// returned by MaxnoofSrbs.ValidateAll() if the designated constraints aren't met.
type MaxnoofSrbsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MaxnoofSrbsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MaxnoofSrbsMultiError) AllErrors() []error { return m }

// MaxnoofSrbsValidationError is the validation error returned by
// MaxnoofSrbs.Validate if the designated constraints aren't met.
type MaxnoofSrbsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MaxnoofSrbsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MaxnoofSrbsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MaxnoofSrbsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MaxnoofSrbsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MaxnoofSrbsValidationError) ErrorName() string { return "MaxnoofSrbsValidationError" }

// Error satisfies the builtin error interface
func (e MaxnoofSrbsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMaxnoofSrbs.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MaxnoofSrbsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MaxnoofSrbsValidationError{}

// Validate checks the field values on MaxnoofDrbs with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *MaxnoofDrbs) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MaxnoofDrbs with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in MaxnoofDrbsMultiError, or
// nil if none found.
func (m *MaxnoofDrbs) ValidateAll() error {
	return m.validate(true)
}

func (m *MaxnoofDrbs) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 64 {
		err := MaxnoofDrbsValidationError{
			field:  "Value",
			reason: "value must equal 64",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MaxnoofDrbsMultiError(errors)
	}

	return nil
}

// MaxnoofDrbsMultiError is an error wrapping multiple validation errors
// returned by MaxnoofDrbs.ValidateAll() if the designated constraints aren't met.
type MaxnoofDrbsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MaxnoofDrbsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MaxnoofDrbsMultiError) AllErrors() []error { return m }

// MaxnoofDrbsValidationError is the validation error returned by
// MaxnoofDrbs.Validate if the designated constraints aren't met.
type MaxnoofDrbsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MaxnoofDrbsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MaxnoofDrbsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MaxnoofDrbsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MaxnoofDrbsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MaxnoofDrbsValidationError) ErrorName() string { return "MaxnoofDrbsValidationError" }

// Error satisfies the builtin error interface
func (e MaxnoofDrbsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMaxnoofDrbs.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MaxnoofDrbsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MaxnoofDrbsValidationError{}

// Validate checks the field values on MaxnoofUluptnlinformation with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *MaxnoofUluptnlinformation) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MaxnoofUluptnlinformation with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MaxnoofUluptnlinformationMultiError, or nil if none found.
func (m *MaxnoofUluptnlinformation) ValidateAll() error {
	return m.validate(true)
}

func (m *MaxnoofUluptnlinformation) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 2 {
		err := MaxnoofUluptnlinformationValidationError{
			field:  "Value",
			reason: "value must equal 2",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MaxnoofUluptnlinformationMultiError(errors)
	}

	return nil
}

// MaxnoofUluptnlinformationMultiError is an error wrapping multiple validation
// errors returned by MaxnoofUluptnlinformation.ValidateAll() if the
// designated constraints aren't met.
type MaxnoofUluptnlinformationMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MaxnoofUluptnlinformationMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MaxnoofUluptnlinformationMultiError) AllErrors() []error { return m }

// MaxnoofUluptnlinformationValidationError is the validation error returned by
// MaxnoofUluptnlinformation.Validate if the designated constraints aren't met.
type MaxnoofUluptnlinformationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MaxnoofUluptnlinformationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MaxnoofUluptnlinformationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MaxnoofUluptnlinformationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MaxnoofUluptnlinformationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MaxnoofUluptnlinformationValidationError) ErrorName() string {
	return "MaxnoofUluptnlinformationValidationError"
}

// Error satisfies the builtin error interface
func (e MaxnoofUluptnlinformationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMaxnoofUluptnlinformation.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MaxnoofUluptnlinformationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MaxnoofUluptnlinformationValidationError{}

// Validate checks the field values on MaxnoofDluptnlinformation with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *MaxnoofDluptnlinformation) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MaxnoofDluptnlinformation with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MaxnoofDluptnlinformationMultiError, or nil if none found.
func (m *MaxnoofDluptnlinformation) ValidateAll() error {
	return m.validate(true)
}

func (m *MaxnoofDluptnlinformation) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 2 {
		err := MaxnoofDluptnlinformationValidationError{
			field:  "Value",
			reason: "value must equal 2",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MaxnoofDluptnlinformationMultiError(errors)
	}

	return nil
}

// MaxnoofDluptnlinformationMultiError is an error wrapping multiple validation
// errors returned by MaxnoofDluptnlinformation.ValidateAll() if the
// designated constraints aren't met.
type MaxnoofDluptnlinformationMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MaxnoofDluptnlinformationMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MaxnoofDluptnlinformationMultiError) AllErrors() []error { return m }

// MaxnoofDluptnlinformationValidationError is the validation error returned by
// MaxnoofDluptnlinformation.Validate if the designated constraints aren't met.
type MaxnoofDluptnlinformationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MaxnoofDluptnlinformationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MaxnoofDluptnlinformationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MaxnoofDluptnlinformationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MaxnoofDluptnlinformationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MaxnoofDluptnlinformationValidationError) ErrorName() string {
	return "MaxnoofDluptnlinformationValidationError"
}

// Error satisfies the builtin error interface
func (e MaxnoofDluptnlinformationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMaxnoofDluptnlinformation.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MaxnoofDluptnlinformationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MaxnoofDluptnlinformationValidationError{}

// Validate checks the field values on MaxnoofBplmns with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *MaxnoofBplmns) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MaxnoofBplmns with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in MaxnoofBplmnsMultiError, or
// nil if none found.
func (m *MaxnoofBplmns) ValidateAll() error {
	return m.validate(true)
}

func (m *MaxnoofBplmns) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 6 {
		err := MaxnoofBplmnsValidationError{
			field:  "Value",
			reason: "value must equal 6",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MaxnoofBplmnsMultiError(errors)
	}

	return nil
}

// MaxnoofBplmnsMultiError is an error wrapping multiple validation errors
// returned by MaxnoofBplmns.ValidateAll() if the designated constraints
// aren't met.
type MaxnoofBplmnsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MaxnoofBplmnsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MaxnoofBplmnsMultiError) AllErrors() []error { return m }

// MaxnoofBplmnsValidationError is the validation error returned by
// MaxnoofBplmns.Validate if the designated constraints aren't met.
type MaxnoofBplmnsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MaxnoofBplmnsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MaxnoofBplmnsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MaxnoofBplmnsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MaxnoofBplmnsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MaxnoofBplmnsValidationError) ErrorName() string { return "MaxnoofBplmnsValidationError" }

// Error satisfies the builtin error interface
func (e MaxnoofBplmnsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMaxnoofBplmns.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MaxnoofBplmnsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MaxnoofBplmnsValidationError{}

// Validate checks the field values on MaxnoofCandidateSpCells with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *MaxnoofCandidateSpCells) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MaxnoofCandidateSpCells with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MaxnoofCandidateSpCellsMultiError, or nil if none found.
func (m *MaxnoofCandidateSpCells) ValidateAll() error {
	return m.validate(true)
}

func (m *MaxnoofCandidateSpCells) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 64 {
		err := MaxnoofCandidateSpCellsValidationError{
			field:  "Value",
			reason: "value must equal 64",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MaxnoofCandidateSpCellsMultiError(errors)
	}

	return nil
}

// MaxnoofCandidateSpCellsMultiError is an error wrapping multiple validation
// errors returned by MaxnoofCandidateSpCells.ValidateAll() if the designated
// constraints aren't met.
type MaxnoofCandidateSpCellsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MaxnoofCandidateSpCellsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MaxnoofCandidateSpCellsMultiError) AllErrors() []error { return m }

// MaxnoofCandidateSpCellsValidationError is the validation error returned by
// MaxnoofCandidateSpCells.Validate if the designated constraints aren't met.
type MaxnoofCandidateSpCellsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MaxnoofCandidateSpCellsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MaxnoofCandidateSpCellsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MaxnoofCandidateSpCellsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MaxnoofCandidateSpCellsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MaxnoofCandidateSpCellsValidationError) ErrorName() string {
	return "MaxnoofCandidateSpCellsValidationError"
}

// Error satisfies the builtin error interface
func (e MaxnoofCandidateSpCellsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMaxnoofCandidateSpCells.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MaxnoofCandidateSpCellsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MaxnoofCandidateSpCellsValidationError{}

// Validate checks the field values on MaxnoofPotentialSpCells with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *MaxnoofPotentialSpCells) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MaxnoofPotentialSpCells with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MaxnoofPotentialSpCellsMultiError, or nil if none found.
func (m *MaxnoofPotentialSpCells) ValidateAll() error {
	return m.validate(true)
}

func (m *MaxnoofPotentialSpCells) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 64 {
		err := MaxnoofPotentialSpCellsValidationError{
			field:  "Value",
			reason: "value must equal 64",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MaxnoofPotentialSpCellsMultiError(errors)
	}

	return nil
}

// MaxnoofPotentialSpCellsMultiError is an error wrapping multiple validation
// errors returned by MaxnoofPotentialSpCells.ValidateAll() if the designated
// constraints aren't met.
type MaxnoofPotentialSpCellsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MaxnoofPotentialSpCellsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MaxnoofPotentialSpCellsMultiError) AllErrors() []error { return m }

// MaxnoofPotentialSpCellsValidationError is the validation error returned by
// MaxnoofPotentialSpCells.Validate if the designated constraints aren't met.
type MaxnoofPotentialSpCellsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MaxnoofPotentialSpCellsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MaxnoofPotentialSpCellsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MaxnoofPotentialSpCellsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MaxnoofPotentialSpCellsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MaxnoofPotentialSpCellsValidationError) ErrorName() string {
	return "MaxnoofPotentialSpCellsValidationError"
}

// Error satisfies the builtin error interface
func (e MaxnoofPotentialSpCellsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMaxnoofPotentialSpCells.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MaxnoofPotentialSpCellsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MaxnoofPotentialSpCellsValidationError{}

// Validate checks the field values on MaxnoofNrCellBands with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *MaxnoofNrCellBands) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MaxnoofNrCellBands with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MaxnoofNrCellBandsMultiError, or nil if none found.
func (m *MaxnoofNrCellBands) ValidateAll() error {
	return m.validate(true)
}

func (m *MaxnoofNrCellBands) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 32 {
		err := MaxnoofNrCellBandsValidationError{
			field:  "Value",
			reason: "value must equal 32",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MaxnoofNrCellBandsMultiError(errors)
	}

	return nil
}

// MaxnoofNrCellBandsMultiError is an error wrapping multiple validation errors
// returned by MaxnoofNrCellBands.ValidateAll() if the designated constraints
// aren't met.
type MaxnoofNrCellBandsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MaxnoofNrCellBandsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MaxnoofNrCellBandsMultiError) AllErrors() []error { return m }

// MaxnoofNrCellBandsValidationError is the validation error returned by
// MaxnoofNrCellBands.Validate if the designated constraints aren't met.
type MaxnoofNrCellBandsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MaxnoofNrCellBandsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MaxnoofNrCellBandsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MaxnoofNrCellBandsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MaxnoofNrCellBandsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MaxnoofNrCellBandsValidationError) ErrorName() string {
	return "MaxnoofNrCellBandsValidationError"
}

// Error satisfies the builtin error interface
func (e MaxnoofNrCellBandsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMaxnoofNrCellBands.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MaxnoofNrCellBandsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MaxnoofNrCellBandsValidationError{}

// Validate checks the field values on MaxnoofSibtypes with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *MaxnoofSibtypes) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MaxnoofSibtypes with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MaxnoofSibtypesMultiError, or nil if none found.
func (m *MaxnoofSibtypes) ValidateAll() error {
	return m.validate(true)
}

func (m *MaxnoofSibtypes) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 32 {
		err := MaxnoofSibtypesValidationError{
			field:  "Value",
			reason: "value must equal 32",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MaxnoofSibtypesMultiError(errors)
	}

	return nil
}

// MaxnoofSibtypesMultiError is an error wrapping multiple validation errors
// returned by MaxnoofSibtypes.ValidateAll() if the designated constraints
// aren't met.
type MaxnoofSibtypesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MaxnoofSibtypesMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MaxnoofSibtypesMultiError) AllErrors() []error { return m }

// MaxnoofSibtypesValidationError is the validation error returned by
// MaxnoofSibtypes.Validate if the designated constraints aren't met.
type MaxnoofSibtypesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MaxnoofSibtypesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MaxnoofSibtypesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MaxnoofSibtypesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MaxnoofSibtypesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MaxnoofSibtypesValidationError) ErrorName() string { return "MaxnoofSibtypesValidationError" }

// Error satisfies the builtin error interface
func (e MaxnoofSibtypesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMaxnoofSibtypes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MaxnoofSibtypesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MaxnoofSibtypesValidationError{}

// Validate checks the field values on MaxnoofSitypes with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *MaxnoofSitypes) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MaxnoofSitypes with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in MaxnoofSitypesMultiError,
// or nil if none found.
func (m *MaxnoofSitypes) ValidateAll() error {
	return m.validate(true)
}

func (m *MaxnoofSitypes) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 32 {
		err := MaxnoofSitypesValidationError{
			field:  "Value",
			reason: "value must equal 32",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MaxnoofSitypesMultiError(errors)
	}

	return nil
}

// MaxnoofSitypesMultiError is an error wrapping multiple validation errors
// returned by MaxnoofSitypes.ValidateAll() if the designated constraints
// aren't met.
type MaxnoofSitypesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MaxnoofSitypesMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MaxnoofSitypesMultiError) AllErrors() []error { return m }

// MaxnoofSitypesValidationError is the validation error returned by
// MaxnoofSitypes.Validate if the designated constraints aren't met.
type MaxnoofSitypesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MaxnoofSitypesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MaxnoofSitypesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MaxnoofSitypesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MaxnoofSitypesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MaxnoofSitypesValidationError) ErrorName() string { return "MaxnoofSitypesValidationError" }

// Error satisfies the builtin error interface
func (e MaxnoofSitypesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMaxnoofSitypes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MaxnoofSitypesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MaxnoofSitypesValidationError{}

// Validate checks the field values on MaxnoofPagingCells with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *MaxnoofPagingCells) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MaxnoofPagingCells with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MaxnoofPagingCellsMultiError, or nil if none found.
func (m *MaxnoofPagingCells) ValidateAll() error {
	return m.validate(true)
}

func (m *MaxnoofPagingCells) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 512 {
		err := MaxnoofPagingCellsValidationError{
			field:  "Value",
			reason: "value must equal 512",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MaxnoofPagingCellsMultiError(errors)
	}

	return nil
}

// MaxnoofPagingCellsMultiError is an error wrapping multiple validation errors
// returned by MaxnoofPagingCells.ValidateAll() if the designated constraints
// aren't met.
type MaxnoofPagingCellsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MaxnoofPagingCellsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MaxnoofPagingCellsMultiError) AllErrors() []error { return m }

// MaxnoofPagingCellsValidationError is the validation error returned by
// MaxnoofPagingCells.Validate if the designated constraints aren't met.
type MaxnoofPagingCellsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MaxnoofPagingCellsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MaxnoofPagingCellsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MaxnoofPagingCellsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MaxnoofPagingCellsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MaxnoofPagingCellsValidationError) ErrorName() string {
	return "MaxnoofPagingCellsValidationError"
}

// Error satisfies the builtin error interface
func (e MaxnoofPagingCellsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMaxnoofPagingCells.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MaxnoofPagingCellsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MaxnoofPagingCellsValidationError{}

// Validate checks the field values on MaxnoofTnlassociations with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *MaxnoofTnlassociations) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MaxnoofTnlassociations with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MaxnoofTnlassociationsMultiError, or nil if none found.
func (m *MaxnoofTnlassociations) ValidateAll() error {
	return m.validate(true)
}

func (m *MaxnoofTnlassociations) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 32 {
		err := MaxnoofTnlassociationsValidationError{
			field:  "Value",
			reason: "value must equal 32",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MaxnoofTnlassociationsMultiError(errors)
	}

	return nil
}

// MaxnoofTnlassociationsMultiError is an error wrapping multiple validation
// errors returned by MaxnoofTnlassociations.ValidateAll() if the designated
// constraints aren't met.
type MaxnoofTnlassociationsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MaxnoofTnlassociationsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MaxnoofTnlassociationsMultiError) AllErrors() []error { return m }

// MaxnoofTnlassociationsValidationError is the validation error returned by
// MaxnoofTnlassociations.Validate if the designated constraints aren't met.
type MaxnoofTnlassociationsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MaxnoofTnlassociationsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MaxnoofTnlassociationsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MaxnoofTnlassociationsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MaxnoofTnlassociationsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MaxnoofTnlassociationsValidationError) ErrorName() string {
	return "MaxnoofTnlassociationsValidationError"
}

// Error satisfies the builtin error interface
func (e MaxnoofTnlassociationsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMaxnoofTnlassociations.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MaxnoofTnlassociationsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MaxnoofTnlassociationsValidationError{}

// Validate checks the field values on MaxnoofQoSflows with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *MaxnoofQoSflows) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MaxnoofQoSflows with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MaxnoofQoSflowsMultiError, or nil if none found.
func (m *MaxnoofQoSflows) ValidateAll() error {
	return m.validate(true)
}

func (m *MaxnoofQoSflows) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 64 {
		err := MaxnoofQoSflowsValidationError{
			field:  "Value",
			reason: "value must equal 64",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MaxnoofQoSflowsMultiError(errors)
	}

	return nil
}

// MaxnoofQoSflowsMultiError is an error wrapping multiple validation errors
// returned by MaxnoofQoSflows.ValidateAll() if the designated constraints
// aren't met.
type MaxnoofQoSflowsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MaxnoofQoSflowsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MaxnoofQoSflowsMultiError) AllErrors() []error { return m }

// MaxnoofQoSflowsValidationError is the validation error returned by
// MaxnoofQoSflows.Validate if the designated constraints aren't met.
type MaxnoofQoSflowsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MaxnoofQoSflowsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MaxnoofQoSflowsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MaxnoofQoSflowsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MaxnoofQoSflowsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MaxnoofQoSflowsValidationError) ErrorName() string { return "MaxnoofQoSflowsValidationError" }

// Error satisfies the builtin error interface
func (e MaxnoofQoSflowsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMaxnoofQoSflows.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MaxnoofQoSflowsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MaxnoofQoSflowsValidationError{}

// Validate checks the field values on MaxnoofSliceItems with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *MaxnoofSliceItems) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MaxnoofSliceItems with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MaxnoofSliceItemsMultiError, or nil if none found.
func (m *MaxnoofSliceItems) ValidateAll() error {
	return m.validate(true)
}

func (m *MaxnoofSliceItems) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 1024 {
		err := MaxnoofSliceItemsValidationError{
			field:  "Value",
			reason: "value must equal 1024",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MaxnoofSliceItemsMultiError(errors)
	}

	return nil
}

// MaxnoofSliceItemsMultiError is an error wrapping multiple validation errors
// returned by MaxnoofSliceItems.ValidateAll() if the designated constraints
// aren't met.
type MaxnoofSliceItemsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MaxnoofSliceItemsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MaxnoofSliceItemsMultiError) AllErrors() []error { return m }

// MaxnoofSliceItemsValidationError is the validation error returned by
// MaxnoofSliceItems.Validate if the designated constraints aren't met.
type MaxnoofSliceItemsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MaxnoofSliceItemsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MaxnoofSliceItemsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MaxnoofSliceItemsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MaxnoofSliceItemsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MaxnoofSliceItemsValidationError) ErrorName() string {
	return "MaxnoofSliceItemsValidationError"
}

// Error satisfies the builtin error interface
func (e MaxnoofSliceItemsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMaxnoofSliceItems.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MaxnoofSliceItemsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MaxnoofSliceItemsValidationError{}

// Validate checks the field values on MaxCellineNb with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *MaxCellineNb) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MaxCellineNb with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in MaxCellineNbMultiError, or
// nil if none found.
func (m *MaxCellineNb) ValidateAll() error {
	return m.validate(true)
}

func (m *MaxCellineNb) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 256 {
		err := MaxCellineNbValidationError{
			field:  "Value",
			reason: "value must equal 256",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MaxCellineNbMultiError(errors)
	}

	return nil
}

// MaxCellineNbMultiError is an error wrapping multiple validation errors
// returned by MaxCellineNb.ValidateAll() if the designated constraints aren't met.
type MaxCellineNbMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MaxCellineNbMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MaxCellineNbMultiError) AllErrors() []error { return m }

// MaxCellineNbValidationError is the validation error returned by
// MaxCellineNb.Validate if the designated constraints aren't met.
type MaxCellineNbValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MaxCellineNbValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MaxCellineNbValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MaxCellineNbValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MaxCellineNbValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MaxCellineNbValidationError) ErrorName() string { return "MaxCellineNbValidationError" }

// Error satisfies the builtin error interface
func (e MaxCellineNbValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMaxCellineNb.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MaxCellineNbValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MaxCellineNbValidationError{}

// Validate checks the field values on MaxnoofExtendedBplmns with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *MaxnoofExtendedBplmns) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MaxnoofExtendedBplmns with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MaxnoofExtendedBplmnsMultiError, or nil if none found.
func (m *MaxnoofExtendedBplmns) ValidateAll() error {
	return m.validate(true)
}

func (m *MaxnoofExtendedBplmns) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 6 {
		err := MaxnoofExtendedBplmnsValidationError{
			field:  "Value",
			reason: "value must equal 6",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MaxnoofExtendedBplmnsMultiError(errors)
	}

	return nil
}

// MaxnoofExtendedBplmnsMultiError is an error wrapping multiple validation
// errors returned by MaxnoofExtendedBplmns.ValidateAll() if the designated
// constraints aren't met.
type MaxnoofExtendedBplmnsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MaxnoofExtendedBplmnsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MaxnoofExtendedBplmnsMultiError) AllErrors() []error { return m }

// MaxnoofExtendedBplmnsValidationError is the validation error returned by
// MaxnoofExtendedBplmns.Validate if the designated constraints aren't met.
type MaxnoofExtendedBplmnsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MaxnoofExtendedBplmnsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MaxnoofExtendedBplmnsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MaxnoofExtendedBplmnsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MaxnoofExtendedBplmnsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MaxnoofExtendedBplmnsValidationError) ErrorName() string {
	return "MaxnoofExtendedBplmnsValidationError"
}

// Error satisfies the builtin error interface
func (e MaxnoofExtendedBplmnsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMaxnoofExtendedBplmns.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MaxnoofExtendedBplmnsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MaxnoofExtendedBplmnsValidationError{}

// Validate checks the field values on MaxnoofUeids with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *MaxnoofUeids) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MaxnoofUeids with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in MaxnoofUeidsMultiError, or
// nil if none found.
func (m *MaxnoofUeids) ValidateAll() error {
	return m.validate(true)
}

func (m *MaxnoofUeids) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 65536 {
		err := MaxnoofUeidsValidationError{
			field:  "Value",
			reason: "value must equal 65536",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MaxnoofUeidsMultiError(errors)
	}

	return nil
}

// MaxnoofUeidsMultiError is an error wrapping multiple validation errors
// returned by MaxnoofUeids.ValidateAll() if the designated constraints aren't met.
type MaxnoofUeidsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MaxnoofUeidsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MaxnoofUeidsMultiError) AllErrors() []error { return m }

// MaxnoofUeidsValidationError is the validation error returned by
// MaxnoofUeids.Validate if the designated constraints aren't met.
type MaxnoofUeidsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MaxnoofUeidsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MaxnoofUeidsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MaxnoofUeidsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MaxnoofUeidsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MaxnoofUeidsValidationError) ErrorName() string { return "MaxnoofUeidsValidationError" }

// Error satisfies the builtin error interface
func (e MaxnoofUeidsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMaxnoofUeids.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MaxnoofUeidsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MaxnoofUeidsValidationError{}

// Validate checks the field values on MaxnoofBplmnsNr with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *MaxnoofBplmnsNr) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MaxnoofBplmnsNr with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MaxnoofBplmnsNrMultiError, or nil if none found.
func (m *MaxnoofBplmnsNr) ValidateAll() error {
	return m.validate(true)
}

func (m *MaxnoofBplmnsNr) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 12 {
		err := MaxnoofBplmnsNrValidationError{
			field:  "Value",
			reason: "value must equal 12",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MaxnoofBplmnsNrMultiError(errors)
	}

	return nil
}

// MaxnoofBplmnsNrMultiError is an error wrapping multiple validation errors
// returned by MaxnoofBplmnsNr.ValidateAll() if the designated constraints
// aren't met.
type MaxnoofBplmnsNrMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MaxnoofBplmnsNrMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MaxnoofBplmnsNrMultiError) AllErrors() []error { return m }

// MaxnoofBplmnsNrValidationError is the validation error returned by
// MaxnoofBplmnsNr.Validate if the designated constraints aren't met.
type MaxnoofBplmnsNrValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MaxnoofBplmnsNrValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MaxnoofBplmnsNrValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MaxnoofBplmnsNrValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MaxnoofBplmnsNrValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MaxnoofBplmnsNrValidationError) ErrorName() string { return "MaxnoofBplmnsNrValidationError" }

// Error satisfies the builtin error interface
func (e MaxnoofBplmnsNrValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMaxnoofBplmnsNr.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MaxnoofBplmnsNrValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MaxnoofBplmnsNrValidationError{}

// Validate checks the field values on MaxnoofUacplmns with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *MaxnoofUacplmns) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MaxnoofUacplmns with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MaxnoofUacplmnsMultiError, or nil if none found.
func (m *MaxnoofUacplmns) ValidateAll() error {
	return m.validate(true)
}

func (m *MaxnoofUacplmns) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 12 {
		err := MaxnoofUacplmnsValidationError{
			field:  "Value",
			reason: "value must equal 12",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MaxnoofUacplmnsMultiError(errors)
	}

	return nil
}

// MaxnoofUacplmnsMultiError is an error wrapping multiple validation errors
// returned by MaxnoofUacplmns.ValidateAll() if the designated constraints
// aren't met.
type MaxnoofUacplmnsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MaxnoofUacplmnsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MaxnoofUacplmnsMultiError) AllErrors() []error { return m }

// MaxnoofUacplmnsValidationError is the validation error returned by
// MaxnoofUacplmns.Validate if the designated constraints aren't met.
type MaxnoofUacplmnsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MaxnoofUacplmnsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MaxnoofUacplmnsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MaxnoofUacplmnsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MaxnoofUacplmnsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MaxnoofUacplmnsValidationError) ErrorName() string { return "MaxnoofUacplmnsValidationError" }

// Error satisfies the builtin error interface
func (e MaxnoofUacplmnsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMaxnoofUacplmns.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MaxnoofUacplmnsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MaxnoofUacplmnsValidationError{}

// Validate checks the field values on MaxnoofUacperPlmn with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *MaxnoofUacperPlmn) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MaxnoofUacperPlmn with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MaxnoofUacperPlmnMultiError, or nil if none found.
func (m *MaxnoofUacperPlmn) ValidateAll() error {
	return m.validate(true)
}

func (m *MaxnoofUacperPlmn) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 64 {
		err := MaxnoofUacperPlmnValidationError{
			field:  "Value",
			reason: "value must equal 64",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MaxnoofUacperPlmnMultiError(errors)
	}

	return nil
}

// MaxnoofUacperPlmnMultiError is an error wrapping multiple validation errors
// returned by MaxnoofUacperPlmn.ValidateAll() if the designated constraints
// aren't met.
type MaxnoofUacperPlmnMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MaxnoofUacperPlmnMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MaxnoofUacperPlmnMultiError) AllErrors() []error { return m }

// MaxnoofUacperPlmnValidationError is the validation error returned by
// MaxnoofUacperPlmn.Validate if the designated constraints aren't met.
type MaxnoofUacperPlmnValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MaxnoofUacperPlmnValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MaxnoofUacperPlmnValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MaxnoofUacperPlmnValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MaxnoofUacperPlmnValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MaxnoofUacperPlmnValidationError) ErrorName() string {
	return "MaxnoofUacperPlmnValidationError"
}

// Error satisfies the builtin error interface
func (e MaxnoofUacperPlmnValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMaxnoofUacperPlmn.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MaxnoofUacperPlmnValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MaxnoofUacperPlmnValidationError{}

// Validate checks the field values on MaxnoofAdditionalSibs with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *MaxnoofAdditionalSibs) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MaxnoofAdditionalSibs with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MaxnoofAdditionalSibsMultiError, or nil if none found.
func (m *MaxnoofAdditionalSibs) ValidateAll() error {
	return m.validate(true)
}

func (m *MaxnoofAdditionalSibs) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 63 {
		err := MaxnoofAdditionalSibsValidationError{
			field:  "Value",
			reason: "value must equal 63",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MaxnoofAdditionalSibsMultiError(errors)
	}

	return nil
}

// MaxnoofAdditionalSibsMultiError is an error wrapping multiple validation
// errors returned by MaxnoofAdditionalSibs.ValidateAll() if the designated
// constraints aren't met.
type MaxnoofAdditionalSibsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MaxnoofAdditionalSibsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MaxnoofAdditionalSibsMultiError) AllErrors() []error { return m }

// MaxnoofAdditionalSibsValidationError is the validation error returned by
// MaxnoofAdditionalSibs.Validate if the designated constraints aren't met.
type MaxnoofAdditionalSibsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MaxnoofAdditionalSibsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MaxnoofAdditionalSibsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MaxnoofAdditionalSibsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MaxnoofAdditionalSibsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MaxnoofAdditionalSibsValidationError) ErrorName() string {
	return "MaxnoofAdditionalSibsValidationError"
}

// Error satisfies the builtin error interface
func (e MaxnoofAdditionalSibsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMaxnoofAdditionalSibs.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MaxnoofAdditionalSibsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MaxnoofAdditionalSibsValidationError{}

// Validate checks the field values on Maxnoofslots with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Maxnoofslots) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Maxnoofslots with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in MaxnoofslotsMultiError, or
// nil if none found.
func (m *Maxnoofslots) ValidateAll() error {
	return m.validate(true)
}

func (m *Maxnoofslots) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 5120 {
		err := MaxnoofslotsValidationError{
			field:  "Value",
			reason: "value must equal 5120",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MaxnoofslotsMultiError(errors)
	}

	return nil
}

// MaxnoofslotsMultiError is an error wrapping multiple validation errors
// returned by Maxnoofslots.ValidateAll() if the designated constraints aren't met.
type MaxnoofslotsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MaxnoofslotsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MaxnoofslotsMultiError) AllErrors() []error { return m }

// MaxnoofslotsValidationError is the validation error returned by
// Maxnoofslots.Validate if the designated constraints aren't met.
type MaxnoofslotsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MaxnoofslotsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MaxnoofslotsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MaxnoofslotsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MaxnoofslotsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MaxnoofslotsValidationError) ErrorName() string { return "MaxnoofslotsValidationError" }

// Error satisfies the builtin error interface
func (e MaxnoofslotsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMaxnoofslots.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MaxnoofslotsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MaxnoofslotsValidationError{}

// Validate checks the field values on MaxnoofTlas with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *MaxnoofTlas) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MaxnoofTlas with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in MaxnoofTlasMultiError, or
// nil if none found.
func (m *MaxnoofTlas) ValidateAll() error {
	return m.validate(true)
}

func (m *MaxnoofTlas) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 16 {
		err := MaxnoofTlasValidationError{
			field:  "Value",
			reason: "value must equal 16",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MaxnoofTlasMultiError(errors)
	}

	return nil
}

// MaxnoofTlasMultiError is an error wrapping multiple validation errors
// returned by MaxnoofTlas.ValidateAll() if the designated constraints aren't met.
type MaxnoofTlasMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MaxnoofTlasMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MaxnoofTlasMultiError) AllErrors() []error { return m }

// MaxnoofTlasValidationError is the validation error returned by
// MaxnoofTlas.Validate if the designated constraints aren't met.
type MaxnoofTlasValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MaxnoofTlasValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MaxnoofTlasValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MaxnoofTlasValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MaxnoofTlasValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MaxnoofTlasValidationError) ErrorName() string { return "MaxnoofTlasValidationError" }

// Error satisfies the builtin error interface
func (e MaxnoofTlasValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMaxnoofTlas.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MaxnoofTlasValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MaxnoofTlasValidationError{}

// Validate checks the field values on MaxnoofGtptlas with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *MaxnoofGtptlas) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MaxnoofGtptlas with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in MaxnoofGtptlasMultiError,
// or nil if none found.
func (m *MaxnoofGtptlas) ValidateAll() error {
	return m.validate(true)
}

func (m *MaxnoofGtptlas) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 16 {
		err := MaxnoofGtptlasValidationError{
			field:  "Value",
			reason: "value must equal 16",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MaxnoofGtptlasMultiError(errors)
	}

	return nil
}

// MaxnoofGtptlasMultiError is an error wrapping multiple validation errors
// returned by MaxnoofGtptlas.ValidateAll() if the designated constraints
// aren't met.
type MaxnoofGtptlasMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MaxnoofGtptlasMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MaxnoofGtptlasMultiError) AllErrors() []error { return m }

// MaxnoofGtptlasValidationError is the validation error returned by
// MaxnoofGtptlas.Validate if the designated constraints aren't met.
type MaxnoofGtptlasValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MaxnoofGtptlasValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MaxnoofGtptlasValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MaxnoofGtptlasValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MaxnoofGtptlasValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MaxnoofGtptlasValidationError) ErrorName() string { return "MaxnoofGtptlasValidationError" }

// Error satisfies the builtin error interface
func (e MaxnoofGtptlasValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMaxnoofGtptlas.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MaxnoofGtptlasValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MaxnoofGtptlasValidationError{}

// Validate checks the field values on MaxnoofBhrlcchannels with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *MaxnoofBhrlcchannels) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MaxnoofBhrlcchannels with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MaxnoofBhrlcchannelsMultiError, or nil if none found.
func (m *MaxnoofBhrlcchannels) ValidateAll() error {
	return m.validate(true)
}

func (m *MaxnoofBhrlcchannels) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 65536 {
		err := MaxnoofBhrlcchannelsValidationError{
			field:  "Value",
			reason: "value must equal 65536",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MaxnoofBhrlcchannelsMultiError(errors)
	}

	return nil
}

// MaxnoofBhrlcchannelsMultiError is an error wrapping multiple validation
// errors returned by MaxnoofBhrlcchannels.ValidateAll() if the designated
// constraints aren't met.
type MaxnoofBhrlcchannelsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MaxnoofBhrlcchannelsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MaxnoofBhrlcchannelsMultiError) AllErrors() []error { return m }

// MaxnoofBhrlcchannelsValidationError is the validation error returned by
// MaxnoofBhrlcchannels.Validate if the designated constraints aren't met.
type MaxnoofBhrlcchannelsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MaxnoofBhrlcchannelsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MaxnoofBhrlcchannelsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MaxnoofBhrlcchannelsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MaxnoofBhrlcchannelsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MaxnoofBhrlcchannelsValidationError) ErrorName() string {
	return "MaxnoofBhrlcchannelsValidationError"
}

// Error satisfies the builtin error interface
func (e MaxnoofBhrlcchannelsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMaxnoofBhrlcchannels.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MaxnoofBhrlcchannelsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MaxnoofBhrlcchannelsValidationError{}

// Validate checks the field values on MaxnoofRoutingEntries with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *MaxnoofRoutingEntries) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MaxnoofRoutingEntries with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MaxnoofRoutingEntriesMultiError, or nil if none found.
func (m *MaxnoofRoutingEntries) ValidateAll() error {
	return m.validate(true)
}

func (m *MaxnoofRoutingEntries) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 1024 {
		err := MaxnoofRoutingEntriesValidationError{
			field:  "Value",
			reason: "value must equal 1024",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MaxnoofRoutingEntriesMultiError(errors)
	}

	return nil
}

// MaxnoofRoutingEntriesMultiError is an error wrapping multiple validation
// errors returned by MaxnoofRoutingEntries.ValidateAll() if the designated
// constraints aren't met.
type MaxnoofRoutingEntriesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MaxnoofRoutingEntriesMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MaxnoofRoutingEntriesMultiError) AllErrors() []error { return m }

// MaxnoofRoutingEntriesValidationError is the validation error returned by
// MaxnoofRoutingEntries.Validate if the designated constraints aren't met.
type MaxnoofRoutingEntriesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MaxnoofRoutingEntriesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MaxnoofRoutingEntriesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MaxnoofRoutingEntriesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MaxnoofRoutingEntriesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MaxnoofRoutingEntriesValidationError) ErrorName() string {
	return "MaxnoofRoutingEntriesValidationError"
}

// Error satisfies the builtin error interface
func (e MaxnoofRoutingEntriesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMaxnoofRoutingEntries.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MaxnoofRoutingEntriesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MaxnoofRoutingEntriesValidationError{}

// Validate checks the field values on MaxnoofIabstcinfo with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *MaxnoofIabstcinfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MaxnoofIabstcinfo with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MaxnoofIabstcinfoMultiError, or nil if none found.
func (m *MaxnoofIabstcinfo) ValidateAll() error {
	return m.validate(true)
}

func (m *MaxnoofIabstcinfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 45 {
		err := MaxnoofIabstcinfoValidationError{
			field:  "Value",
			reason: "value must equal 45",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MaxnoofIabstcinfoMultiError(errors)
	}

	return nil
}

// MaxnoofIabstcinfoMultiError is an error wrapping multiple validation errors
// returned by MaxnoofIabstcinfo.ValidateAll() if the designated constraints
// aren't met.
type MaxnoofIabstcinfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MaxnoofIabstcinfoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MaxnoofIabstcinfoMultiError) AllErrors() []error { return m }

// MaxnoofIabstcinfoValidationError is the validation error returned by
// MaxnoofIabstcinfo.Validate if the designated constraints aren't met.
type MaxnoofIabstcinfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MaxnoofIabstcinfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MaxnoofIabstcinfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MaxnoofIabstcinfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MaxnoofIabstcinfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MaxnoofIabstcinfoValidationError) ErrorName() string {
	return "MaxnoofIabstcinfoValidationError"
}

// Error satisfies the builtin error interface
func (e MaxnoofIabstcinfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMaxnoofIabstcinfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MaxnoofIabstcinfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MaxnoofIabstcinfoValidationError{}

// Validate checks the field values on MaxnoofSymbols with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *MaxnoofSymbols) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MaxnoofSymbols with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in MaxnoofSymbolsMultiError,
// or nil if none found.
func (m *MaxnoofSymbols) ValidateAll() error {
	return m.validate(true)
}

func (m *MaxnoofSymbols) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 14 {
		err := MaxnoofSymbolsValidationError{
			field:  "Value",
			reason: "value must equal 14",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MaxnoofSymbolsMultiError(errors)
	}

	return nil
}

// MaxnoofSymbolsMultiError is an error wrapping multiple validation errors
// returned by MaxnoofSymbols.ValidateAll() if the designated constraints
// aren't met.
type MaxnoofSymbolsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MaxnoofSymbolsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MaxnoofSymbolsMultiError) AllErrors() []error { return m }

// MaxnoofSymbolsValidationError is the validation error returned by
// MaxnoofSymbols.Validate if the designated constraints aren't met.
type MaxnoofSymbolsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MaxnoofSymbolsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MaxnoofSymbolsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MaxnoofSymbolsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MaxnoofSymbolsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MaxnoofSymbolsValidationError) ErrorName() string { return "MaxnoofSymbolsValidationError" }

// Error satisfies the builtin error interface
func (e MaxnoofSymbolsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMaxnoofSymbols.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MaxnoofSymbolsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MaxnoofSymbolsValidationError{}

// Validate checks the field values on MaxnoofServingCells with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *MaxnoofServingCells) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MaxnoofServingCells with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MaxnoofServingCellsMultiError, or nil if none found.
func (m *MaxnoofServingCells) ValidateAll() error {
	return m.validate(true)
}

func (m *MaxnoofServingCells) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 32 {
		err := MaxnoofServingCellsValidationError{
			field:  "Value",
			reason: "value must equal 32",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MaxnoofServingCellsMultiError(errors)
	}

	return nil
}

// MaxnoofServingCellsMultiError is an error wrapping multiple validation
// errors returned by MaxnoofServingCells.ValidateAll() if the designated
// constraints aren't met.
type MaxnoofServingCellsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MaxnoofServingCellsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MaxnoofServingCellsMultiError) AllErrors() []error { return m }

// MaxnoofServingCellsValidationError is the validation error returned by
// MaxnoofServingCells.Validate if the designated constraints aren't met.
type MaxnoofServingCellsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MaxnoofServingCellsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MaxnoofServingCellsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MaxnoofServingCellsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MaxnoofServingCellsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MaxnoofServingCellsValidationError) ErrorName() string {
	return "MaxnoofServingCellsValidationError"
}

// Error satisfies the builtin error interface
func (e MaxnoofServingCellsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMaxnoofServingCells.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MaxnoofServingCellsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MaxnoofServingCellsValidationError{}

// Validate checks the field values on MaxnoofDufslots with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *MaxnoofDufslots) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MaxnoofDufslots with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MaxnoofDufslotsMultiError, or nil if none found.
func (m *MaxnoofDufslots) ValidateAll() error {
	return m.validate(true)
}

func (m *MaxnoofDufslots) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 320 {
		err := MaxnoofDufslotsValidationError{
			field:  "Value",
			reason: "value must equal 320",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MaxnoofDufslotsMultiError(errors)
	}

	return nil
}

// MaxnoofDufslotsMultiError is an error wrapping multiple validation errors
// returned by MaxnoofDufslots.ValidateAll() if the designated constraints
// aren't met.
type MaxnoofDufslotsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MaxnoofDufslotsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MaxnoofDufslotsMultiError) AllErrors() []error { return m }

// MaxnoofDufslotsValidationError is the validation error returned by
// MaxnoofDufslots.Validate if the designated constraints aren't met.
type MaxnoofDufslotsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MaxnoofDufslotsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MaxnoofDufslotsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MaxnoofDufslotsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MaxnoofDufslotsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MaxnoofDufslotsValidationError) ErrorName() string { return "MaxnoofDufslotsValidationError" }

// Error satisfies the builtin error interface
func (e MaxnoofDufslotsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMaxnoofDufslots.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MaxnoofDufslotsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MaxnoofDufslotsValidationError{}

// Validate checks the field values on MaxnoofHsnaslots with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *MaxnoofHsnaslots) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MaxnoofHsnaslots with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MaxnoofHsnaslotsMultiError, or nil if none found.
func (m *MaxnoofHsnaslots) ValidateAll() error {
	return m.validate(true)
}

func (m *MaxnoofHsnaslots) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 5120 {
		err := MaxnoofHsnaslotsValidationError{
			field:  "Value",
			reason: "value must equal 5120",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MaxnoofHsnaslotsMultiError(errors)
	}

	return nil
}

// MaxnoofHsnaslotsMultiError is an error wrapping multiple validation errors
// returned by MaxnoofHsnaslots.ValidateAll() if the designated constraints
// aren't met.
type MaxnoofHsnaslotsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MaxnoofHsnaslotsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MaxnoofHsnaslotsMultiError) AllErrors() []error { return m }

// MaxnoofHsnaslotsValidationError is the validation error returned by
// MaxnoofHsnaslots.Validate if the designated constraints aren't met.
type MaxnoofHsnaslotsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MaxnoofHsnaslotsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MaxnoofHsnaslotsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MaxnoofHsnaslotsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MaxnoofHsnaslotsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MaxnoofHsnaslotsValidationError) ErrorName() string { return "MaxnoofHsnaslotsValidationError" }

// Error satisfies the builtin error interface
func (e MaxnoofHsnaslotsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMaxnoofHsnaslots.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MaxnoofHsnaslotsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MaxnoofHsnaslotsValidationError{}

// Validate checks the field values on MaxnoofServedCellsIab with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *MaxnoofServedCellsIab) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MaxnoofServedCellsIab with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MaxnoofServedCellsIabMultiError, or nil if none found.
func (m *MaxnoofServedCellsIab) ValidateAll() error {
	return m.validate(true)
}

func (m *MaxnoofServedCellsIab) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 512 {
		err := MaxnoofServedCellsIabValidationError{
			field:  "Value",
			reason: "value must equal 512",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MaxnoofServedCellsIabMultiError(errors)
	}

	return nil
}

// MaxnoofServedCellsIabMultiError is an error wrapping multiple validation
// errors returned by MaxnoofServedCellsIab.ValidateAll() if the designated
// constraints aren't met.
type MaxnoofServedCellsIabMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MaxnoofServedCellsIabMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MaxnoofServedCellsIabMultiError) AllErrors() []error { return m }

// MaxnoofServedCellsIabValidationError is the validation error returned by
// MaxnoofServedCellsIab.Validate if the designated constraints aren't met.
type MaxnoofServedCellsIabValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MaxnoofServedCellsIabValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MaxnoofServedCellsIabValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MaxnoofServedCellsIabValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MaxnoofServedCellsIabValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MaxnoofServedCellsIabValidationError) ErrorName() string {
	return "MaxnoofServedCellsIabValidationError"
}

// Error satisfies the builtin error interface
func (e MaxnoofServedCellsIabValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMaxnoofServedCellsIab.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MaxnoofServedCellsIabValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MaxnoofServedCellsIabValidationError{}

// Validate checks the field values on MaxnoofChildIabnodes with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *MaxnoofChildIabnodes) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MaxnoofChildIabnodes with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MaxnoofChildIabnodesMultiError, or nil if none found.
func (m *MaxnoofChildIabnodes) ValidateAll() error {
	return m.validate(true)
}

func (m *MaxnoofChildIabnodes) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 1024 {
		err := MaxnoofChildIabnodesValidationError{
			field:  "Value",
			reason: "value must equal 1024",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MaxnoofChildIabnodesMultiError(errors)
	}

	return nil
}

// MaxnoofChildIabnodesMultiError is an error wrapping multiple validation
// errors returned by MaxnoofChildIabnodes.ValidateAll() if the designated
// constraints aren't met.
type MaxnoofChildIabnodesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MaxnoofChildIabnodesMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MaxnoofChildIabnodesMultiError) AllErrors() []error { return m }

// MaxnoofChildIabnodesValidationError is the validation error returned by
// MaxnoofChildIabnodes.Validate if the designated constraints aren't met.
type MaxnoofChildIabnodesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MaxnoofChildIabnodesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MaxnoofChildIabnodesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MaxnoofChildIabnodesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MaxnoofChildIabnodesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MaxnoofChildIabnodesValidationError) ErrorName() string {
	return "MaxnoofChildIabnodesValidationError"
}

// Error satisfies the builtin error interface
func (e MaxnoofChildIabnodesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMaxnoofChildIabnodes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MaxnoofChildIabnodesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MaxnoofChildIabnodesValidationError{}

// Validate checks the field values on MaxnoofNonUptrafficMappings with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *MaxnoofNonUptrafficMappings) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MaxnoofNonUptrafficMappings with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MaxnoofNonUptrafficMappingsMultiError, or nil if none found.
func (m *MaxnoofNonUptrafficMappings) ValidateAll() error {
	return m.validate(true)
}

func (m *MaxnoofNonUptrafficMappings) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 32 {
		err := MaxnoofNonUptrafficMappingsValidationError{
			field:  "Value",
			reason: "value must equal 32",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MaxnoofNonUptrafficMappingsMultiError(errors)
	}

	return nil
}

// MaxnoofNonUptrafficMappingsMultiError is an error wrapping multiple
// validation errors returned by MaxnoofNonUptrafficMappings.ValidateAll() if
// the designated constraints aren't met.
type MaxnoofNonUptrafficMappingsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MaxnoofNonUptrafficMappingsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MaxnoofNonUptrafficMappingsMultiError) AllErrors() []error { return m }

// MaxnoofNonUptrafficMappingsValidationError is the validation error returned
// by MaxnoofNonUptrafficMappings.Validate if the designated constraints
// aren't met.
type MaxnoofNonUptrafficMappingsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MaxnoofNonUptrafficMappingsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MaxnoofNonUptrafficMappingsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MaxnoofNonUptrafficMappingsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MaxnoofNonUptrafficMappingsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MaxnoofNonUptrafficMappingsValidationError) ErrorName() string {
	return "MaxnoofNonUptrafficMappingsValidationError"
}

// Error satisfies the builtin error interface
func (e MaxnoofNonUptrafficMappingsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMaxnoofNonUptrafficMappings.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MaxnoofNonUptrafficMappingsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MaxnoofNonUptrafficMappingsValidationError{}

// Validate checks the field values on MaxnoofTlasIab with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *MaxnoofTlasIab) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MaxnoofTlasIab with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in MaxnoofTlasIabMultiError,
// or nil if none found.
func (m *MaxnoofTlasIab) ValidateAll() error {
	return m.validate(true)
}

func (m *MaxnoofTlasIab) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 1024 {
		err := MaxnoofTlasIabValidationError{
			field:  "Value",
			reason: "value must equal 1024",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MaxnoofTlasIabMultiError(errors)
	}

	return nil
}

// MaxnoofTlasIabMultiError is an error wrapping multiple validation errors
// returned by MaxnoofTlasIab.ValidateAll() if the designated constraints
// aren't met.
type MaxnoofTlasIabMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MaxnoofTlasIabMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MaxnoofTlasIabMultiError) AllErrors() []error { return m }

// MaxnoofTlasIabValidationError is the validation error returned by
// MaxnoofTlasIab.Validate if the designated constraints aren't met.
type MaxnoofTlasIabValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MaxnoofTlasIabValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MaxnoofTlasIabValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MaxnoofTlasIabValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MaxnoofTlasIabValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MaxnoofTlasIabValidationError) ErrorName() string { return "MaxnoofTlasIabValidationError" }

// Error satisfies the builtin error interface
func (e MaxnoofTlasIabValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMaxnoofTlasIab.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MaxnoofTlasIabValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MaxnoofTlasIabValidationError{}

// Validate checks the field values on MaxnoofMappingEntries with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *MaxnoofMappingEntries) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MaxnoofMappingEntries with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MaxnoofMappingEntriesMultiError, or nil if none found.
func (m *MaxnoofMappingEntries) ValidateAll() error {
	return m.validate(true)
}

func (m *MaxnoofMappingEntries) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 67108864 {
		err := MaxnoofMappingEntriesValidationError{
			field:  "Value",
			reason: "value must equal 67108864",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MaxnoofMappingEntriesMultiError(errors)
	}

	return nil
}

// MaxnoofMappingEntriesMultiError is an error wrapping multiple validation
// errors returned by MaxnoofMappingEntries.ValidateAll() if the designated
// constraints aren't met.
type MaxnoofMappingEntriesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MaxnoofMappingEntriesMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MaxnoofMappingEntriesMultiError) AllErrors() []error { return m }

// MaxnoofMappingEntriesValidationError is the validation error returned by
// MaxnoofMappingEntries.Validate if the designated constraints aren't met.
type MaxnoofMappingEntriesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MaxnoofMappingEntriesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MaxnoofMappingEntriesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MaxnoofMappingEntriesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MaxnoofMappingEntriesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MaxnoofMappingEntriesValidationError) ErrorName() string {
	return "MaxnoofMappingEntriesValidationError"
}

// Error satisfies the builtin error interface
func (e MaxnoofMappingEntriesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMaxnoofMappingEntries.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MaxnoofMappingEntriesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MaxnoofMappingEntriesValidationError{}

// Validate checks the field values on MaxnoofDsinfo with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *MaxnoofDsinfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MaxnoofDsinfo with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in MaxnoofDsinfoMultiError, or
// nil if none found.
func (m *MaxnoofDsinfo) ValidateAll() error {
	return m.validate(true)
}

func (m *MaxnoofDsinfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 64 {
		err := MaxnoofDsinfoValidationError{
			field:  "Value",
			reason: "value must equal 64",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MaxnoofDsinfoMultiError(errors)
	}

	return nil
}

// MaxnoofDsinfoMultiError is an error wrapping multiple validation errors
// returned by MaxnoofDsinfo.ValidateAll() if the designated constraints
// aren't met.
type MaxnoofDsinfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MaxnoofDsinfoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MaxnoofDsinfoMultiError) AllErrors() []error { return m }

// MaxnoofDsinfoValidationError is the validation error returned by
// MaxnoofDsinfo.Validate if the designated constraints aren't met.
type MaxnoofDsinfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MaxnoofDsinfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MaxnoofDsinfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MaxnoofDsinfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MaxnoofDsinfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MaxnoofDsinfoValidationError) ErrorName() string { return "MaxnoofDsinfoValidationError" }

// Error satisfies the builtin error interface
func (e MaxnoofDsinfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMaxnoofDsinfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MaxnoofDsinfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MaxnoofDsinfoValidationError{}

// Validate checks the field values on MaxnoofEgressLinks with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *MaxnoofEgressLinks) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MaxnoofEgressLinks with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MaxnoofEgressLinksMultiError, or nil if none found.
func (m *MaxnoofEgressLinks) ValidateAll() error {
	return m.validate(true)
}

func (m *MaxnoofEgressLinks) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 2 {
		err := MaxnoofEgressLinksValidationError{
			field:  "Value",
			reason: "value must equal 2",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MaxnoofEgressLinksMultiError(errors)
	}

	return nil
}

// MaxnoofEgressLinksMultiError is an error wrapping multiple validation errors
// returned by MaxnoofEgressLinks.ValidateAll() if the designated constraints
// aren't met.
type MaxnoofEgressLinksMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MaxnoofEgressLinksMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MaxnoofEgressLinksMultiError) AllErrors() []error { return m }

// MaxnoofEgressLinksValidationError is the validation error returned by
// MaxnoofEgressLinks.Validate if the designated constraints aren't met.
type MaxnoofEgressLinksValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MaxnoofEgressLinksValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MaxnoofEgressLinksValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MaxnoofEgressLinksValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MaxnoofEgressLinksValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MaxnoofEgressLinksValidationError) ErrorName() string {
	return "MaxnoofEgressLinksValidationError"
}

// Error satisfies the builtin error interface
func (e MaxnoofEgressLinksValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMaxnoofEgressLinks.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MaxnoofEgressLinksValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MaxnoofEgressLinksValidationError{}

// Validate checks the field values on MaxnoofUluptnlinformationforIab with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *MaxnoofUluptnlinformationforIab) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MaxnoofUluptnlinformationforIab with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// MaxnoofUluptnlinformationforIabMultiError, or nil if none found.
func (m *MaxnoofUluptnlinformationforIab) ValidateAll() error {
	return m.validate(true)
}

func (m *MaxnoofUluptnlinformationforIab) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 32678 {
		err := MaxnoofUluptnlinformationforIabValidationError{
			field:  "Value",
			reason: "value must equal 32678",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MaxnoofUluptnlinformationforIabMultiError(errors)
	}

	return nil
}

// MaxnoofUluptnlinformationforIabMultiError is an error wrapping multiple
// validation errors returned by MaxnoofUluptnlinformationforIab.ValidateAll()
// if the designated constraints aren't met.
type MaxnoofUluptnlinformationforIabMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MaxnoofUluptnlinformationforIabMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MaxnoofUluptnlinformationforIabMultiError) AllErrors() []error { return m }

// MaxnoofUluptnlinformationforIabValidationError is the validation error
// returned by MaxnoofUluptnlinformationforIab.Validate if the designated
// constraints aren't met.
type MaxnoofUluptnlinformationforIabValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MaxnoofUluptnlinformationforIabValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MaxnoofUluptnlinformationforIabValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MaxnoofUluptnlinformationforIabValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MaxnoofUluptnlinformationforIabValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MaxnoofUluptnlinformationforIabValidationError) ErrorName() string {
	return "MaxnoofUluptnlinformationforIabValidationError"
}

// Error satisfies the builtin error interface
func (e MaxnoofUluptnlinformationforIabValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMaxnoofUluptnlinformationforIab.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MaxnoofUluptnlinformationforIabValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MaxnoofUluptnlinformationforIabValidationError{}

// Validate checks the field values on MaxnoofUptnladdresses with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *MaxnoofUptnladdresses) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MaxnoofUptnladdresses with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MaxnoofUptnladdressesMultiError, or nil if none found.
func (m *MaxnoofUptnladdresses) ValidateAll() error {
	return m.validate(true)
}

func (m *MaxnoofUptnladdresses) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 8 {
		err := MaxnoofUptnladdressesValidationError{
			field:  "Value",
			reason: "value must equal 8",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MaxnoofUptnladdressesMultiError(errors)
	}

	return nil
}

// MaxnoofUptnladdressesMultiError is an error wrapping multiple validation
// errors returned by MaxnoofUptnladdresses.ValidateAll() if the designated
// constraints aren't met.
type MaxnoofUptnladdressesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MaxnoofUptnladdressesMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MaxnoofUptnladdressesMultiError) AllErrors() []error { return m }

// MaxnoofUptnladdressesValidationError is the validation error returned by
// MaxnoofUptnladdresses.Validate if the designated constraints aren't met.
type MaxnoofUptnladdressesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MaxnoofUptnladdressesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MaxnoofUptnladdressesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MaxnoofUptnladdressesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MaxnoofUptnladdressesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MaxnoofUptnladdressesValidationError) ErrorName() string {
	return "MaxnoofUptnladdressesValidationError"
}

// Error satisfies the builtin error interface
func (e MaxnoofUptnladdressesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMaxnoofUptnladdresses.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MaxnoofUptnladdressesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MaxnoofUptnladdressesValidationError{}

// Validate checks the field values on MaxnoofSldrbs with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *MaxnoofSldrbs) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MaxnoofSldrbs with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in MaxnoofSldrbsMultiError, or
// nil if none found.
func (m *MaxnoofSldrbs) ValidateAll() error {
	return m.validate(true)
}

func (m *MaxnoofSldrbs) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 512 {
		err := MaxnoofSldrbsValidationError{
			field:  "Value",
			reason: "value must equal 512",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MaxnoofSldrbsMultiError(errors)
	}

	return nil
}

// MaxnoofSldrbsMultiError is an error wrapping multiple validation errors
// returned by MaxnoofSldrbs.ValidateAll() if the designated constraints
// aren't met.
type MaxnoofSldrbsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MaxnoofSldrbsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MaxnoofSldrbsMultiError) AllErrors() []error { return m }

// MaxnoofSldrbsValidationError is the validation error returned by
// MaxnoofSldrbs.Validate if the designated constraints aren't met.
type MaxnoofSldrbsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MaxnoofSldrbsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MaxnoofSldrbsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MaxnoofSldrbsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MaxnoofSldrbsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MaxnoofSldrbsValidationError) ErrorName() string { return "MaxnoofSldrbsValidationError" }

// Error satisfies the builtin error interface
func (e MaxnoofSldrbsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMaxnoofSldrbs.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MaxnoofSldrbsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MaxnoofSldrbsValidationError{}

// Validate checks the field values on MaxnoofQoSparaSets with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *MaxnoofQoSparaSets) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MaxnoofQoSparaSets with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MaxnoofQoSparaSetsMultiError, or nil if none found.
func (m *MaxnoofQoSparaSets) ValidateAll() error {
	return m.validate(true)
}

func (m *MaxnoofQoSparaSets) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 8 {
		err := MaxnoofQoSparaSetsValidationError{
			field:  "Value",
			reason: "value must equal 8",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MaxnoofQoSparaSetsMultiError(errors)
	}

	return nil
}

// MaxnoofQoSparaSetsMultiError is an error wrapping multiple validation errors
// returned by MaxnoofQoSparaSets.ValidateAll() if the designated constraints
// aren't met.
type MaxnoofQoSparaSetsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MaxnoofQoSparaSetsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MaxnoofQoSparaSetsMultiError) AllErrors() []error { return m }

// MaxnoofQoSparaSetsValidationError is the validation error returned by
// MaxnoofQoSparaSets.Validate if the designated constraints aren't met.
type MaxnoofQoSparaSetsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MaxnoofQoSparaSetsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MaxnoofQoSparaSetsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MaxnoofQoSparaSetsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MaxnoofQoSparaSetsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MaxnoofQoSparaSetsValidationError) ErrorName() string {
	return "MaxnoofQoSparaSetsValidationError"
}

// Error satisfies the builtin error interface
func (e MaxnoofQoSparaSetsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMaxnoofQoSparaSets.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MaxnoofQoSparaSetsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MaxnoofQoSparaSetsValidationError{}

// Validate checks the field values on MaxnoofPc5QoSflows with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *MaxnoofPc5QoSflows) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MaxnoofPc5QoSflows with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MaxnoofPc5QoSflowsMultiError, or nil if none found.
func (m *MaxnoofPc5QoSflows) ValidateAll() error {
	return m.validate(true)
}

func (m *MaxnoofPc5QoSflows) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 2048 {
		err := MaxnoofPc5QoSflowsValidationError{
			field:  "Value",
			reason: "value must equal 2048",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MaxnoofPc5QoSflowsMultiError(errors)
	}

	return nil
}

// MaxnoofPc5QoSflowsMultiError is an error wrapping multiple validation errors
// returned by MaxnoofPc5QoSflows.ValidateAll() if the designated constraints
// aren't met.
type MaxnoofPc5QoSflowsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MaxnoofPc5QoSflowsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MaxnoofPc5QoSflowsMultiError) AllErrors() []error { return m }

// MaxnoofPc5QoSflowsValidationError is the validation error returned by
// MaxnoofPc5QoSflows.Validate if the designated constraints aren't met.
type MaxnoofPc5QoSflowsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MaxnoofPc5QoSflowsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MaxnoofPc5QoSflowsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MaxnoofPc5QoSflowsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MaxnoofPc5QoSflowsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MaxnoofPc5QoSflowsValidationError) ErrorName() string {
	return "MaxnoofPc5QoSflowsValidationError"
}

// Error satisfies the builtin error interface
func (e MaxnoofPc5QoSflowsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMaxnoofPc5QoSflows.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MaxnoofPc5QoSflowsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MaxnoofPc5QoSflowsValidationError{}

// Validate checks the field values on MaxnoofSsbareas with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *MaxnoofSsbareas) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MaxnoofSsbareas with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MaxnoofSsbareasMultiError, or nil if none found.
func (m *MaxnoofSsbareas) ValidateAll() error {
	return m.validate(true)
}

func (m *MaxnoofSsbareas) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 64 {
		err := MaxnoofSsbareasValidationError{
			field:  "Value",
			reason: "value must equal 64",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MaxnoofSsbareasMultiError(errors)
	}

	return nil
}

// MaxnoofSsbareasMultiError is an error wrapping multiple validation errors
// returned by MaxnoofSsbareas.ValidateAll() if the designated constraints
// aren't met.
type MaxnoofSsbareasMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MaxnoofSsbareasMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MaxnoofSsbareasMultiError) AllErrors() []error { return m }

// MaxnoofSsbareasValidationError is the validation error returned by
// MaxnoofSsbareas.Validate if the designated constraints aren't met.
type MaxnoofSsbareasValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MaxnoofSsbareasValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MaxnoofSsbareasValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MaxnoofSsbareasValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MaxnoofSsbareasValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MaxnoofSsbareasValidationError) ErrorName() string { return "MaxnoofSsbareasValidationError" }

// Error satisfies the builtin error interface
func (e MaxnoofSsbareasValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMaxnoofSsbareas.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MaxnoofSsbareasValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MaxnoofSsbareasValidationError{}

// Validate checks the field values on MaxnoofPhysicalResourceBlocks with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *MaxnoofPhysicalResourceBlocks) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MaxnoofPhysicalResourceBlocks with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// MaxnoofPhysicalResourceBlocksMultiError, or nil if none found.
func (m *MaxnoofPhysicalResourceBlocks) ValidateAll() error {
	return m.validate(true)
}

func (m *MaxnoofPhysicalResourceBlocks) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 275 {
		err := MaxnoofPhysicalResourceBlocksValidationError{
			field:  "Value",
			reason: "value must equal 275",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MaxnoofPhysicalResourceBlocksMultiError(errors)
	}

	return nil
}

// MaxnoofPhysicalResourceBlocksMultiError is an error wrapping multiple
// validation errors returned by MaxnoofPhysicalResourceBlocks.ValidateAll()
// if the designated constraints aren't met.
type MaxnoofPhysicalResourceBlocksMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MaxnoofPhysicalResourceBlocksMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MaxnoofPhysicalResourceBlocksMultiError) AllErrors() []error { return m }

// MaxnoofPhysicalResourceBlocksValidationError is the validation error
// returned by MaxnoofPhysicalResourceBlocks.Validate if the designated
// constraints aren't met.
type MaxnoofPhysicalResourceBlocksValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MaxnoofPhysicalResourceBlocksValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MaxnoofPhysicalResourceBlocksValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MaxnoofPhysicalResourceBlocksValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MaxnoofPhysicalResourceBlocksValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MaxnoofPhysicalResourceBlocksValidationError) ErrorName() string {
	return "MaxnoofPhysicalResourceBlocksValidationError"
}

// Error satisfies the builtin error interface
func (e MaxnoofPhysicalResourceBlocksValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMaxnoofPhysicalResourceBlocks.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MaxnoofPhysicalResourceBlocksValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MaxnoofPhysicalResourceBlocksValidationError{}

// Validate checks the field values on MaxnoofPhysicalResourceBlocks1 with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *MaxnoofPhysicalResourceBlocks1) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MaxnoofPhysicalResourceBlocks1 with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// MaxnoofPhysicalResourceBlocks1MultiError, or nil if none found.
func (m *MaxnoofPhysicalResourceBlocks1) ValidateAll() error {
	return m.validate(true)
}

func (m *MaxnoofPhysicalResourceBlocks1) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 274 {
		err := MaxnoofPhysicalResourceBlocks1ValidationError{
			field:  "Value",
			reason: "value must equal 274",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MaxnoofPhysicalResourceBlocks1MultiError(errors)
	}

	return nil
}

// MaxnoofPhysicalResourceBlocks1MultiError is an error wrapping multiple
// validation errors returned by MaxnoofPhysicalResourceBlocks1.ValidateAll()
// if the designated constraints aren't met.
type MaxnoofPhysicalResourceBlocks1MultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MaxnoofPhysicalResourceBlocks1MultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MaxnoofPhysicalResourceBlocks1MultiError) AllErrors() []error { return m }

// MaxnoofPhysicalResourceBlocks1ValidationError is the validation error
// returned by MaxnoofPhysicalResourceBlocks1.Validate if the designated
// constraints aren't met.
type MaxnoofPhysicalResourceBlocks1ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MaxnoofPhysicalResourceBlocks1ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MaxnoofPhysicalResourceBlocks1ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MaxnoofPhysicalResourceBlocks1ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MaxnoofPhysicalResourceBlocks1ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MaxnoofPhysicalResourceBlocks1ValidationError) ErrorName() string {
	return "MaxnoofPhysicalResourceBlocks1ValidationError"
}

// Error satisfies the builtin error interface
func (e MaxnoofPhysicalResourceBlocks1ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMaxnoofPhysicalResourceBlocks1.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MaxnoofPhysicalResourceBlocks1ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MaxnoofPhysicalResourceBlocks1ValidationError{}

// Validate checks the field values on MaxnoofPrachconfigs with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *MaxnoofPrachconfigs) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MaxnoofPrachconfigs with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MaxnoofPrachconfigsMultiError, or nil if none found.
func (m *MaxnoofPrachconfigs) ValidateAll() error {
	return m.validate(true)
}

func (m *MaxnoofPrachconfigs) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 16 {
		err := MaxnoofPrachconfigsValidationError{
			field:  "Value",
			reason: "value must equal 16",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MaxnoofPrachconfigsMultiError(errors)
	}

	return nil
}

// MaxnoofPrachconfigsMultiError is an error wrapping multiple validation
// errors returned by MaxnoofPrachconfigs.ValidateAll() if the designated
// constraints aren't met.
type MaxnoofPrachconfigsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MaxnoofPrachconfigsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MaxnoofPrachconfigsMultiError) AllErrors() []error { return m }

// MaxnoofPrachconfigsValidationError is the validation error returned by
// MaxnoofPrachconfigs.Validate if the designated constraints aren't met.
type MaxnoofPrachconfigsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MaxnoofPrachconfigsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MaxnoofPrachconfigsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MaxnoofPrachconfigsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MaxnoofPrachconfigsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MaxnoofPrachconfigsValidationError) ErrorName() string {
	return "MaxnoofPrachconfigsValidationError"
}

// Error satisfies the builtin error interface
func (e MaxnoofPrachconfigsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMaxnoofPrachconfigs.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MaxnoofPrachconfigsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MaxnoofPrachconfigsValidationError{}

// Validate checks the field values on MaxnoofRachreports with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *MaxnoofRachreports) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MaxnoofRachreports with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MaxnoofRachreportsMultiError, or nil if none found.
func (m *MaxnoofRachreports) ValidateAll() error {
	return m.validate(true)
}

func (m *MaxnoofRachreports) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 64 {
		err := MaxnoofRachreportsValidationError{
			field:  "Value",
			reason: "value must equal 64",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MaxnoofRachreportsMultiError(errors)
	}

	return nil
}

// MaxnoofRachreportsMultiError is an error wrapping multiple validation errors
// returned by MaxnoofRachreports.ValidateAll() if the designated constraints
// aren't met.
type MaxnoofRachreportsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MaxnoofRachreportsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MaxnoofRachreportsMultiError) AllErrors() []error { return m }

// MaxnoofRachreportsValidationError is the validation error returned by
// MaxnoofRachreports.Validate if the designated constraints aren't met.
type MaxnoofRachreportsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MaxnoofRachreportsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MaxnoofRachreportsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MaxnoofRachreportsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MaxnoofRachreportsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MaxnoofRachreportsValidationError) ErrorName() string {
	return "MaxnoofRachreportsValidationError"
}

// Error satisfies the builtin error interface
func (e MaxnoofRachreportsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMaxnoofRachreports.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MaxnoofRachreportsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MaxnoofRachreportsValidationError{}

// Validate checks the field values on MaxnoofRlfreports with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *MaxnoofRlfreports) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MaxnoofRlfreports with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MaxnoofRlfreportsMultiError, or nil if none found.
func (m *MaxnoofRlfreports) ValidateAll() error {
	return m.validate(true)
}

func (m *MaxnoofRlfreports) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 64 {
		err := MaxnoofRlfreportsValidationError{
			field:  "Value",
			reason: "value must equal 64",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MaxnoofRlfreportsMultiError(errors)
	}

	return nil
}

// MaxnoofRlfreportsMultiError is an error wrapping multiple validation errors
// returned by MaxnoofRlfreports.ValidateAll() if the designated constraints
// aren't met.
type MaxnoofRlfreportsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MaxnoofRlfreportsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MaxnoofRlfreportsMultiError) AllErrors() []error { return m }

// MaxnoofRlfreportsValidationError is the validation error returned by
// MaxnoofRlfreports.Validate if the designated constraints aren't met.
type MaxnoofRlfreportsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MaxnoofRlfreportsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MaxnoofRlfreportsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MaxnoofRlfreportsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MaxnoofRlfreportsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MaxnoofRlfreportsValidationError) ErrorName() string {
	return "MaxnoofRlfreportsValidationError"
}

// Error satisfies the builtin error interface
func (e MaxnoofRlfreportsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMaxnoofRlfreports.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MaxnoofRlfreportsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MaxnoofRlfreportsValidationError{}

// Validate checks the field values on MaxnoofAdditionalPdcpduplicationTnl with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *MaxnoofAdditionalPdcpduplicationTnl) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MaxnoofAdditionalPdcpduplicationTnl
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// MaxnoofAdditionalPdcpduplicationTnlMultiError, or nil if none found.
func (m *MaxnoofAdditionalPdcpduplicationTnl) ValidateAll() error {
	return m.validate(true)
}

func (m *MaxnoofAdditionalPdcpduplicationTnl) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 2 {
		err := MaxnoofAdditionalPdcpduplicationTnlValidationError{
			field:  "Value",
			reason: "value must equal 2",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MaxnoofAdditionalPdcpduplicationTnlMultiError(errors)
	}

	return nil
}

// MaxnoofAdditionalPdcpduplicationTnlMultiError is an error wrapping multiple
// validation errors returned by
// MaxnoofAdditionalPdcpduplicationTnl.ValidateAll() if the designated
// constraints aren't met.
type MaxnoofAdditionalPdcpduplicationTnlMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MaxnoofAdditionalPdcpduplicationTnlMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MaxnoofAdditionalPdcpduplicationTnlMultiError) AllErrors() []error { return m }

// MaxnoofAdditionalPdcpduplicationTnlValidationError is the validation error
// returned by MaxnoofAdditionalPdcpduplicationTnl.Validate if the designated
// constraints aren't met.
type MaxnoofAdditionalPdcpduplicationTnlValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MaxnoofAdditionalPdcpduplicationTnlValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MaxnoofAdditionalPdcpduplicationTnlValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MaxnoofAdditionalPdcpduplicationTnlValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MaxnoofAdditionalPdcpduplicationTnlValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MaxnoofAdditionalPdcpduplicationTnlValidationError) ErrorName() string {
	return "MaxnoofAdditionalPdcpduplicationTnlValidationError"
}

// Error satisfies the builtin error interface
func (e MaxnoofAdditionalPdcpduplicationTnlValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMaxnoofAdditionalPdcpduplicationTnl.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MaxnoofAdditionalPdcpduplicationTnlValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MaxnoofAdditionalPdcpduplicationTnlValidationError{}

// Validate checks the field values on MaxnoofRlcduplicationState with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *MaxnoofRlcduplicationState) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MaxnoofRlcduplicationState with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MaxnoofRlcduplicationStateMultiError, or nil if none found.
func (m *MaxnoofRlcduplicationState) ValidateAll() error {
	return m.validate(true)
}

func (m *MaxnoofRlcduplicationState) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 3 {
		err := MaxnoofRlcduplicationStateValidationError{
			field:  "Value",
			reason: "value must equal 3",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MaxnoofRlcduplicationStateMultiError(errors)
	}

	return nil
}

// MaxnoofRlcduplicationStateMultiError is an error wrapping multiple
// validation errors returned by MaxnoofRlcduplicationState.ValidateAll() if
// the designated constraints aren't met.
type MaxnoofRlcduplicationStateMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MaxnoofRlcduplicationStateMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MaxnoofRlcduplicationStateMultiError) AllErrors() []error { return m }

// MaxnoofRlcduplicationStateValidationError is the validation error returned
// by MaxnoofRlcduplicationState.Validate if the designated constraints aren't met.
type MaxnoofRlcduplicationStateValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MaxnoofRlcduplicationStateValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MaxnoofRlcduplicationStateValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MaxnoofRlcduplicationStateValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MaxnoofRlcduplicationStateValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MaxnoofRlcduplicationStateValidationError) ErrorName() string {
	return "MaxnoofRlcduplicationStateValidationError"
}

// Error satisfies the builtin error interface
func (e MaxnoofRlcduplicationStateValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMaxnoofRlcduplicationState.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MaxnoofRlcduplicationStateValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MaxnoofRlcduplicationStateValidationError{}

// Validate checks the field values on MaxnoofChocells with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *MaxnoofChocells) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MaxnoofChocells with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MaxnoofChocellsMultiError, or nil if none found.
func (m *MaxnoofChocells) ValidateAll() error {
	return m.validate(true)
}

func (m *MaxnoofChocells) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 8 {
		err := MaxnoofChocellsValidationError{
			field:  "Value",
			reason: "value must equal 8",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MaxnoofChocellsMultiError(errors)
	}

	return nil
}

// MaxnoofChocellsMultiError is an error wrapping multiple validation errors
// returned by MaxnoofChocells.ValidateAll() if the designated constraints
// aren't met.
type MaxnoofChocellsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MaxnoofChocellsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MaxnoofChocellsMultiError) AllErrors() []error { return m }

// MaxnoofChocellsValidationError is the validation error returned by
// MaxnoofChocells.Validate if the designated constraints aren't met.
type MaxnoofChocellsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MaxnoofChocellsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MaxnoofChocellsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MaxnoofChocellsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MaxnoofChocellsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MaxnoofChocellsValidationError) ErrorName() string { return "MaxnoofChocellsValidationError" }

// Error satisfies the builtin error interface
func (e MaxnoofChocellsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMaxnoofChocells.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MaxnoofChocellsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MaxnoofChocellsValidationError{}

// Validate checks the field values on MaxnoofMdtplmns with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *MaxnoofMdtplmns) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MaxnoofMdtplmns with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MaxnoofMdtplmnsMultiError, or nil if none found.
func (m *MaxnoofMdtplmns) ValidateAll() error {
	return m.validate(true)
}

func (m *MaxnoofMdtplmns) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 16 {
		err := MaxnoofMdtplmnsValidationError{
			field:  "Value",
			reason: "value must equal 16",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MaxnoofMdtplmnsMultiError(errors)
	}

	return nil
}

// MaxnoofMdtplmnsMultiError is an error wrapping multiple validation errors
// returned by MaxnoofMdtplmns.ValidateAll() if the designated constraints
// aren't met.
type MaxnoofMdtplmnsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MaxnoofMdtplmnsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MaxnoofMdtplmnsMultiError) AllErrors() []error { return m }

// MaxnoofMdtplmnsValidationError is the validation error returned by
// MaxnoofMdtplmns.Validate if the designated constraints aren't met.
type MaxnoofMdtplmnsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MaxnoofMdtplmnsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MaxnoofMdtplmnsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MaxnoofMdtplmnsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MaxnoofMdtplmnsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MaxnoofMdtplmnsValidationError) ErrorName() string { return "MaxnoofMdtplmnsValidationError" }

// Error satisfies the builtin error interface
func (e MaxnoofMdtplmnsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMaxnoofMdtplmns.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MaxnoofMdtplmnsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MaxnoofMdtplmnsValidationError{}

// Validate checks the field values on MaxnoofCagsupported with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *MaxnoofCagsupported) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MaxnoofCagsupported with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MaxnoofCagsupportedMultiError, or nil if none found.
func (m *MaxnoofCagsupported) ValidateAll() error {
	return m.validate(true)
}

func (m *MaxnoofCagsupported) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 12 {
		err := MaxnoofCagsupportedValidationError{
			field:  "Value",
			reason: "value must equal 12",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MaxnoofCagsupportedMultiError(errors)
	}

	return nil
}

// MaxnoofCagsupportedMultiError is an error wrapping multiple validation
// errors returned by MaxnoofCagsupported.ValidateAll() if the designated
// constraints aren't met.
type MaxnoofCagsupportedMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MaxnoofCagsupportedMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MaxnoofCagsupportedMultiError) AllErrors() []error { return m }

// MaxnoofCagsupportedValidationError is the validation error returned by
// MaxnoofCagsupported.Validate if the designated constraints aren't met.
type MaxnoofCagsupportedValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MaxnoofCagsupportedValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MaxnoofCagsupportedValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MaxnoofCagsupportedValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MaxnoofCagsupportedValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MaxnoofCagsupportedValidationError) ErrorName() string {
	return "MaxnoofCagsupportedValidationError"
}

// Error satisfies the builtin error interface
func (e MaxnoofCagsupportedValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMaxnoofCagsupported.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MaxnoofCagsupportedValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MaxnoofCagsupportedValidationError{}

// Validate checks the field values on MaxnoofNidsupported with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *MaxnoofNidsupported) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MaxnoofNidsupported with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MaxnoofNidsupportedMultiError, or nil if none found.
func (m *MaxnoofNidsupported) ValidateAll() error {
	return m.validate(true)
}

func (m *MaxnoofNidsupported) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 12 {
		err := MaxnoofNidsupportedValidationError{
			field:  "Value",
			reason: "value must equal 12",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MaxnoofNidsupportedMultiError(errors)
	}

	return nil
}

// MaxnoofNidsupportedMultiError is an error wrapping multiple validation
// errors returned by MaxnoofNidsupported.ValidateAll() if the designated
// constraints aren't met.
type MaxnoofNidsupportedMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MaxnoofNidsupportedMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MaxnoofNidsupportedMultiError) AllErrors() []error { return m }

// MaxnoofNidsupportedValidationError is the validation error returned by
// MaxnoofNidsupported.Validate if the designated constraints aren't met.
type MaxnoofNidsupportedValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MaxnoofNidsupportedValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MaxnoofNidsupportedValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MaxnoofNidsupportedValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MaxnoofNidsupportedValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MaxnoofNidsupportedValidationError) ErrorName() string {
	return "MaxnoofNidsupportedValidationError"
}

// Error satisfies the builtin error interface
func (e MaxnoofNidsupportedValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMaxnoofNidsupported.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MaxnoofNidsupportedValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MaxnoofNidsupportedValidationError{}

// Validate checks the field values on MaxnoofNrscss with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *MaxnoofNrscss) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MaxnoofNrscss with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in MaxnoofNrscssMultiError, or
// nil if none found.
func (m *MaxnoofNrscss) ValidateAll() error {
	return m.validate(true)
}

func (m *MaxnoofNrscss) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 5 {
		err := MaxnoofNrscssValidationError{
			field:  "Value",
			reason: "value must equal 5",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MaxnoofNrscssMultiError(errors)
	}

	return nil
}

// MaxnoofNrscssMultiError is an error wrapping multiple validation errors
// returned by MaxnoofNrscss.ValidateAll() if the designated constraints
// aren't met.
type MaxnoofNrscssMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MaxnoofNrscssMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MaxnoofNrscssMultiError) AllErrors() []error { return m }

// MaxnoofNrscssValidationError is the validation error returned by
// MaxnoofNrscss.Validate if the designated constraints aren't met.
type MaxnoofNrscssValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MaxnoofNrscssValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MaxnoofNrscssValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MaxnoofNrscssValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MaxnoofNrscssValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MaxnoofNrscssValidationError) ErrorName() string { return "MaxnoofNrscssValidationError" }

// Error satisfies the builtin error interface
func (e MaxnoofNrscssValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMaxnoofNrscss.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MaxnoofNrscssValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MaxnoofNrscssValidationError{}

// Validate checks the field values on MaxnoofExtSliceItems with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *MaxnoofExtSliceItems) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MaxnoofExtSliceItems with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MaxnoofExtSliceItemsMultiError, or nil if none found.
func (m *MaxnoofExtSliceItems) ValidateAll() error {
	return m.validate(true)
}

func (m *MaxnoofExtSliceItems) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 65535 {
		err := MaxnoofExtSliceItemsValidationError{
			field:  "Value",
			reason: "value must equal 65535",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MaxnoofExtSliceItemsMultiError(errors)
	}

	return nil
}

// MaxnoofExtSliceItemsMultiError is an error wrapping multiple validation
// errors returned by MaxnoofExtSliceItems.ValidateAll() if the designated
// constraints aren't met.
type MaxnoofExtSliceItemsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MaxnoofExtSliceItemsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MaxnoofExtSliceItemsMultiError) AllErrors() []error { return m }

// MaxnoofExtSliceItemsValidationError is the validation error returned by
// MaxnoofExtSliceItems.Validate if the designated constraints aren't met.
type MaxnoofExtSliceItemsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MaxnoofExtSliceItemsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MaxnoofExtSliceItemsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MaxnoofExtSliceItemsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MaxnoofExtSliceItemsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MaxnoofExtSliceItemsValidationError) ErrorName() string {
	return "MaxnoofExtSliceItemsValidationError"
}

// Error satisfies the builtin error interface
func (e MaxnoofExtSliceItemsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMaxnoofExtSliceItems.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MaxnoofExtSliceItemsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MaxnoofExtSliceItemsValidationError{}

// Validate checks the field values on MaxnoofPosMeas with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *MaxnoofPosMeas) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MaxnoofPosMeas with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in MaxnoofPosMeasMultiError,
// or nil if none found.
func (m *MaxnoofPosMeas) ValidateAll() error {
	return m.validate(true)
}

func (m *MaxnoofPosMeas) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 16384 {
		err := MaxnoofPosMeasValidationError{
			field:  "Value",
			reason: "value must equal 16384",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MaxnoofPosMeasMultiError(errors)
	}

	return nil
}

// MaxnoofPosMeasMultiError is an error wrapping multiple validation errors
// returned by MaxnoofPosMeas.ValidateAll() if the designated constraints
// aren't met.
type MaxnoofPosMeasMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MaxnoofPosMeasMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MaxnoofPosMeasMultiError) AllErrors() []error { return m }

// MaxnoofPosMeasValidationError is the validation error returned by
// MaxnoofPosMeas.Validate if the designated constraints aren't met.
type MaxnoofPosMeasValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MaxnoofPosMeasValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MaxnoofPosMeasValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MaxnoofPosMeasValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MaxnoofPosMeasValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MaxnoofPosMeasValidationError) ErrorName() string { return "MaxnoofPosMeasValidationError" }

// Error satisfies the builtin error interface
func (e MaxnoofPosMeasValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMaxnoofPosMeas.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MaxnoofPosMeasValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MaxnoofPosMeasValidationError{}

// Validate checks the field values on MaxnoofTrpinfoTypes with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *MaxnoofTrpinfoTypes) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MaxnoofTrpinfoTypes with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MaxnoofTrpinfoTypesMultiError, or nil if none found.
func (m *MaxnoofTrpinfoTypes) ValidateAll() error {
	return m.validate(true)
}

func (m *MaxnoofTrpinfoTypes) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 64 {
		err := MaxnoofTrpinfoTypesValidationError{
			field:  "Value",
			reason: "value must equal 64",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MaxnoofTrpinfoTypesMultiError(errors)
	}

	return nil
}

// MaxnoofTrpinfoTypesMultiError is an error wrapping multiple validation
// errors returned by MaxnoofTrpinfoTypes.ValidateAll() if the designated
// constraints aren't met.
type MaxnoofTrpinfoTypesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MaxnoofTrpinfoTypesMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MaxnoofTrpinfoTypesMultiError) AllErrors() []error { return m }

// MaxnoofTrpinfoTypesValidationError is the validation error returned by
// MaxnoofTrpinfoTypes.Validate if the designated constraints aren't met.
type MaxnoofTrpinfoTypesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MaxnoofTrpinfoTypesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MaxnoofTrpinfoTypesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MaxnoofTrpinfoTypesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MaxnoofTrpinfoTypesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MaxnoofTrpinfoTypesValidationError) ErrorName() string {
	return "MaxnoofTrpinfoTypesValidationError"
}

// Error satisfies the builtin error interface
func (e MaxnoofTrpinfoTypesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMaxnoofTrpinfoTypes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MaxnoofTrpinfoTypesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MaxnoofTrpinfoTypesValidationError{}

// Validate checks the field values on MaxnoofTrps with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *MaxnoofTrps) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MaxnoofTrps with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in MaxnoofTrpsMultiError, or
// nil if none found.
func (m *MaxnoofTrps) ValidateAll() error {
	return m.validate(true)
}

func (m *MaxnoofTrps) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 65535 {
		err := MaxnoofTrpsValidationError{
			field:  "Value",
			reason: "value must equal 65535",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MaxnoofTrpsMultiError(errors)
	}

	return nil
}

// MaxnoofTrpsMultiError is an error wrapping multiple validation errors
// returned by MaxnoofTrps.ValidateAll() if the designated constraints aren't met.
type MaxnoofTrpsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MaxnoofTrpsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MaxnoofTrpsMultiError) AllErrors() []error { return m }

// MaxnoofTrpsValidationError is the validation error returned by
// MaxnoofTrps.Validate if the designated constraints aren't met.
type MaxnoofTrpsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MaxnoofTrpsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MaxnoofTrpsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MaxnoofTrpsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MaxnoofTrpsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MaxnoofTrpsValidationError) ErrorName() string { return "MaxnoofTrpsValidationError" }

// Error satisfies the builtin error interface
func (e MaxnoofTrpsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMaxnoofTrps.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MaxnoofTrpsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MaxnoofTrpsValidationError{}

// Validate checks the field values on MaxnoofSrstriggerStates with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *MaxnoofSrstriggerStates) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MaxnoofSrstriggerStates with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MaxnoofSrstriggerStatesMultiError, or nil if none found.
func (m *MaxnoofSrstriggerStates) ValidateAll() error {
	return m.validate(true)
}

func (m *MaxnoofSrstriggerStates) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 3 {
		err := MaxnoofSrstriggerStatesValidationError{
			field:  "Value",
			reason: "value must equal 3",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MaxnoofSrstriggerStatesMultiError(errors)
	}

	return nil
}

// MaxnoofSrstriggerStatesMultiError is an error wrapping multiple validation
// errors returned by MaxnoofSrstriggerStates.ValidateAll() if the designated
// constraints aren't met.
type MaxnoofSrstriggerStatesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MaxnoofSrstriggerStatesMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MaxnoofSrstriggerStatesMultiError) AllErrors() []error { return m }

// MaxnoofSrstriggerStatesValidationError is the validation error returned by
// MaxnoofSrstriggerStates.Validate if the designated constraints aren't met.
type MaxnoofSrstriggerStatesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MaxnoofSrstriggerStatesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MaxnoofSrstriggerStatesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MaxnoofSrstriggerStatesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MaxnoofSrstriggerStatesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MaxnoofSrstriggerStatesValidationError) ErrorName() string {
	return "MaxnoofSrstriggerStatesValidationError"
}

// Error satisfies the builtin error interface
func (e MaxnoofSrstriggerStatesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMaxnoofSrstriggerStates.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MaxnoofSrstriggerStatesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MaxnoofSrstriggerStatesValidationError{}

// Validate checks the field values on MaxnoofSpatialRelations with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *MaxnoofSpatialRelations) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MaxnoofSpatialRelations with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MaxnoofSpatialRelationsMultiError, or nil if none found.
func (m *MaxnoofSpatialRelations) ValidateAll() error {
	return m.validate(true)
}

func (m *MaxnoofSpatialRelations) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 64 {
		err := MaxnoofSpatialRelationsValidationError{
			field:  "Value",
			reason: "value must equal 64",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MaxnoofSpatialRelationsMultiError(errors)
	}

	return nil
}

// MaxnoofSpatialRelationsMultiError is an error wrapping multiple validation
// errors returned by MaxnoofSpatialRelations.ValidateAll() if the designated
// constraints aren't met.
type MaxnoofSpatialRelationsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MaxnoofSpatialRelationsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MaxnoofSpatialRelationsMultiError) AllErrors() []error { return m }

// MaxnoofSpatialRelationsValidationError is the validation error returned by
// MaxnoofSpatialRelations.Validate if the designated constraints aren't met.
type MaxnoofSpatialRelationsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MaxnoofSpatialRelationsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MaxnoofSpatialRelationsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MaxnoofSpatialRelationsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MaxnoofSpatialRelationsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MaxnoofSpatialRelationsValidationError) ErrorName() string {
	return "MaxnoofSpatialRelationsValidationError"
}

// Error satisfies the builtin error interface
func (e MaxnoofSpatialRelationsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMaxnoofSpatialRelations.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MaxnoofSpatialRelationsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MaxnoofSpatialRelationsValidationError{}

// Validate checks the field values on MaxnoBcastCell with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *MaxnoBcastCell) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MaxnoBcastCell with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in MaxnoBcastCellMultiError,
// or nil if none found.
func (m *MaxnoBcastCell) ValidateAll() error {
	return m.validate(true)
}

func (m *MaxnoBcastCell) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 16384 {
		err := MaxnoBcastCellValidationError{
			field:  "Value",
			reason: "value must equal 16384",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MaxnoBcastCellMultiError(errors)
	}

	return nil
}

// MaxnoBcastCellMultiError is an error wrapping multiple validation errors
// returned by MaxnoBcastCell.ValidateAll() if the designated constraints
// aren't met.
type MaxnoBcastCellMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MaxnoBcastCellMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MaxnoBcastCellMultiError) AllErrors() []error { return m }

// MaxnoBcastCellValidationError is the validation error returned by
// MaxnoBcastCell.Validate if the designated constraints aren't met.
type MaxnoBcastCellValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MaxnoBcastCellValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MaxnoBcastCellValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MaxnoBcastCellValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MaxnoBcastCellValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MaxnoBcastCellValidationError) ErrorName() string { return "MaxnoBcastCellValidationError" }

// Error satisfies the builtin error interface
func (e MaxnoBcastCellValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMaxnoBcastCell.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MaxnoBcastCellValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MaxnoBcastCellValidationError{}

// Validate checks the field values on MaxnoofAngleInfo with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *MaxnoofAngleInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MaxnoofAngleInfo with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MaxnoofAngleInfoMultiError, or nil if none found.
func (m *MaxnoofAngleInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *MaxnoofAngleInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 65535 {
		err := MaxnoofAngleInfoValidationError{
			field:  "Value",
			reason: "value must equal 65535",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MaxnoofAngleInfoMultiError(errors)
	}

	return nil
}

// MaxnoofAngleInfoMultiError is an error wrapping multiple validation errors
// returned by MaxnoofAngleInfo.ValidateAll() if the designated constraints
// aren't met.
type MaxnoofAngleInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MaxnoofAngleInfoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MaxnoofAngleInfoMultiError) AllErrors() []error { return m }

// MaxnoofAngleInfoValidationError is the validation error returned by
// MaxnoofAngleInfo.Validate if the designated constraints aren't met.
type MaxnoofAngleInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MaxnoofAngleInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MaxnoofAngleInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MaxnoofAngleInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MaxnoofAngleInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MaxnoofAngleInfoValidationError) ErrorName() string { return "MaxnoofAngleInfoValidationError" }

// Error satisfies the builtin error interface
func (e MaxnoofAngleInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMaxnoofAngleInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MaxnoofAngleInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MaxnoofAngleInfoValidationError{}

// Validate checks the field values on Maxnooflcsgcstranslation with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *Maxnooflcsgcstranslation) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Maxnooflcsgcstranslation with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MaxnooflcsgcstranslationMultiError, or nil if none found.
func (m *Maxnooflcsgcstranslation) ValidateAll() error {
	return m.validate(true)
}

func (m *Maxnooflcsgcstranslation) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 3 {
		err := MaxnooflcsgcstranslationValidationError{
			field:  "Value",
			reason: "value must equal 3",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MaxnooflcsgcstranslationMultiError(errors)
	}

	return nil
}

// MaxnooflcsgcstranslationMultiError is an error wrapping multiple validation
// errors returned by Maxnooflcsgcstranslation.ValidateAll() if the designated
// constraints aren't met.
type MaxnooflcsgcstranslationMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MaxnooflcsgcstranslationMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MaxnooflcsgcstranslationMultiError) AllErrors() []error { return m }

// MaxnooflcsgcstranslationValidationError is the validation error returned by
// Maxnooflcsgcstranslation.Validate if the designated constraints aren't met.
type MaxnooflcsgcstranslationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MaxnooflcsgcstranslationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MaxnooflcsgcstranslationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MaxnooflcsgcstranslationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MaxnooflcsgcstranslationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MaxnooflcsgcstranslationValidationError) ErrorName() string {
	return "MaxnooflcsgcstranslationValidationError"
}

// Error satisfies the builtin error interface
func (e MaxnooflcsgcstranslationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMaxnooflcsgcstranslation.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MaxnooflcsgcstranslationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MaxnooflcsgcstranslationValidationError{}

// Validate checks the field values on MaxnoofPath with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *MaxnoofPath) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MaxnoofPath with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in MaxnoofPathMultiError, or
// nil if none found.
func (m *MaxnoofPath) ValidateAll() error {
	return m.validate(true)
}

func (m *MaxnoofPath) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 2 {
		err := MaxnoofPathValidationError{
			field:  "Value",
			reason: "value must equal 2",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MaxnoofPathMultiError(errors)
	}

	return nil
}

// MaxnoofPathMultiError is an error wrapping multiple validation errors
// returned by MaxnoofPath.ValidateAll() if the designated constraints aren't met.
type MaxnoofPathMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MaxnoofPathMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MaxnoofPathMultiError) AllErrors() []error { return m }

// MaxnoofPathValidationError is the validation error returned by
// MaxnoofPath.Validate if the designated constraints aren't met.
type MaxnoofPathValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MaxnoofPathValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MaxnoofPathValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MaxnoofPathValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MaxnoofPathValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MaxnoofPathValidationError) ErrorName() string { return "MaxnoofPathValidationError" }

// Error satisfies the builtin error interface
func (e MaxnoofPathValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMaxnoofPath.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MaxnoofPathValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MaxnoofPathValidationError{}

// Validate checks the field values on MaxnoofMeasECId with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *MaxnoofMeasECId) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MaxnoofMeasECId with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MaxnoofMeasECIdMultiError, or nil if none found.
func (m *MaxnoofMeasECId) ValidateAll() error {
	return m.validate(true)
}

func (m *MaxnoofMeasECId) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 64 {
		err := MaxnoofMeasECIdValidationError{
			field:  "Value",
			reason: "value must equal 64",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MaxnoofMeasECIdMultiError(errors)
	}

	return nil
}

// MaxnoofMeasECIdMultiError is an error wrapping multiple validation errors
// returned by MaxnoofMeasECId.ValidateAll() if the designated constraints
// aren't met.
type MaxnoofMeasECIdMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MaxnoofMeasECIdMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MaxnoofMeasECIdMultiError) AllErrors() []error { return m }

// MaxnoofMeasECIdValidationError is the validation error returned by
// MaxnoofMeasECId.Validate if the designated constraints aren't met.
type MaxnoofMeasECIdValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MaxnoofMeasECIdValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MaxnoofMeasECIdValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MaxnoofMeasECIdValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MaxnoofMeasECIdValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MaxnoofMeasECIdValidationError) ErrorName() string { return "MaxnoofMeasECIdValidationError" }

// Error satisfies the builtin error interface
func (e MaxnoofMeasECIdValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMaxnoofMeasECId.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MaxnoofMeasECIdValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MaxnoofMeasECIdValidationError{}

// Validate checks the field values on MaxnoofSsbs with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *MaxnoofSsbs) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MaxnoofSsbs with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in MaxnoofSsbsMultiError, or
// nil if none found.
func (m *MaxnoofSsbs) ValidateAll() error {
	return m.validate(true)
}

func (m *MaxnoofSsbs) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 255 {
		err := MaxnoofSsbsValidationError{
			field:  "Value",
			reason: "value must equal 255",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MaxnoofSsbsMultiError(errors)
	}

	return nil
}

// MaxnoofSsbsMultiError is an error wrapping multiple validation errors
// returned by MaxnoofSsbs.ValidateAll() if the designated constraints aren't met.
type MaxnoofSsbsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MaxnoofSsbsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MaxnoofSsbsMultiError) AllErrors() []error { return m }

// MaxnoofSsbsValidationError is the validation error returned by
// MaxnoofSsbs.Validate if the designated constraints aren't met.
type MaxnoofSsbsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MaxnoofSsbsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MaxnoofSsbsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MaxnoofSsbsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MaxnoofSsbsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MaxnoofSsbsValidationError) ErrorName() string { return "MaxnoofSsbsValidationError" }

// Error satisfies the builtin error interface
func (e MaxnoofSsbsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMaxnoofSsbs.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MaxnoofSsbsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MaxnoofSsbsValidationError{}

// Validate checks the field values on MaxnoSrsResourceSets with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *MaxnoSrsResourceSets) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MaxnoSrsResourceSets with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MaxnoSrsResourceSetsMultiError, or nil if none found.
func (m *MaxnoSrsResourceSets) ValidateAll() error {
	return m.validate(true)
}

func (m *MaxnoSrsResourceSets) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 16 {
		err := MaxnoSrsResourceSetsValidationError{
			field:  "Value",
			reason: "value must equal 16",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MaxnoSrsResourceSetsMultiError(errors)
	}

	return nil
}

// MaxnoSrsResourceSetsMultiError is an error wrapping multiple validation
// errors returned by MaxnoSrsResourceSets.ValidateAll() if the designated
// constraints aren't met.
type MaxnoSrsResourceSetsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MaxnoSrsResourceSetsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MaxnoSrsResourceSetsMultiError) AllErrors() []error { return m }

// MaxnoSrsResourceSetsValidationError is the validation error returned by
// MaxnoSrsResourceSets.Validate if the designated constraints aren't met.
type MaxnoSrsResourceSetsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MaxnoSrsResourceSetsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MaxnoSrsResourceSetsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MaxnoSrsResourceSetsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MaxnoSrsResourceSetsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MaxnoSrsResourceSetsValidationError) ErrorName() string {
	return "MaxnoSrsResourceSetsValidationError"
}

// Error satisfies the builtin error interface
func (e MaxnoSrsResourceSetsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMaxnoSrsResourceSets.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MaxnoSrsResourceSetsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MaxnoSrsResourceSetsValidationError{}

// Validate checks the field values on MaxnoSrsResourcePerSet with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *MaxnoSrsResourcePerSet) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MaxnoSrsResourcePerSet with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MaxnoSrsResourcePerSetMultiError, or nil if none found.
func (m *MaxnoSrsResourcePerSet) ValidateAll() error {
	return m.validate(true)
}

func (m *MaxnoSrsResourcePerSet) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 16 {
		err := MaxnoSrsResourcePerSetValidationError{
			field:  "Value",
			reason: "value must equal 16",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MaxnoSrsResourcePerSetMultiError(errors)
	}

	return nil
}

// MaxnoSrsResourcePerSetMultiError is an error wrapping multiple validation
// errors returned by MaxnoSrsResourcePerSet.ValidateAll() if the designated
// constraints aren't met.
type MaxnoSrsResourcePerSetMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MaxnoSrsResourcePerSetMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MaxnoSrsResourcePerSetMultiError) AllErrors() []error { return m }

// MaxnoSrsResourcePerSetValidationError is the validation error returned by
// MaxnoSrsResourcePerSet.Validate if the designated constraints aren't met.
type MaxnoSrsResourcePerSetValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MaxnoSrsResourcePerSetValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MaxnoSrsResourcePerSetValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MaxnoSrsResourcePerSetValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MaxnoSrsResourcePerSetValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MaxnoSrsResourcePerSetValidationError) ErrorName() string {
	return "MaxnoSrsResourcePerSetValidationError"
}

// Error satisfies the builtin error interface
func (e MaxnoSrsResourcePerSetValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMaxnoSrsResourcePerSet.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MaxnoSrsResourcePerSetValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MaxnoSrsResourcePerSetValidationError{}

// Validate checks the field values on MaxnoSrsCarriers with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *MaxnoSrsCarriers) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MaxnoSrsCarriers with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MaxnoSrsCarriersMultiError, or nil if none found.
func (m *MaxnoSrsCarriers) ValidateAll() error {
	return m.validate(true)
}

func (m *MaxnoSrsCarriers) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 32 {
		err := MaxnoSrsCarriersValidationError{
			field:  "Value",
			reason: "value must equal 32",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MaxnoSrsCarriersMultiError(errors)
	}

	return nil
}

// MaxnoSrsCarriersMultiError is an error wrapping multiple validation errors
// returned by MaxnoSrsCarriers.ValidateAll() if the designated constraints
// aren't met.
type MaxnoSrsCarriersMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MaxnoSrsCarriersMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MaxnoSrsCarriersMultiError) AllErrors() []error { return m }

// MaxnoSrsCarriersValidationError is the validation error returned by
// MaxnoSrsCarriers.Validate if the designated constraints aren't met.
type MaxnoSrsCarriersValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MaxnoSrsCarriersValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MaxnoSrsCarriersValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MaxnoSrsCarriersValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MaxnoSrsCarriersValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MaxnoSrsCarriersValidationError) ErrorName() string { return "MaxnoSrsCarriersValidationError" }

// Error satisfies the builtin error interface
func (e MaxnoSrsCarriersValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMaxnoSrsCarriers.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MaxnoSrsCarriersValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MaxnoSrsCarriersValidationError{}

// Validate checks the field values on MaxnoScss with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *MaxnoScss) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MaxnoScss with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in MaxnoScssMultiError, or nil
// if none found.
func (m *MaxnoScss) ValidateAll() error {
	return m.validate(true)
}

func (m *MaxnoScss) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 5 {
		err := MaxnoScssValidationError{
			field:  "Value",
			reason: "value must equal 5",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MaxnoScssMultiError(errors)
	}

	return nil
}

// MaxnoScssMultiError is an error wrapping multiple validation errors returned
// by MaxnoScss.ValidateAll() if the designated constraints aren't met.
type MaxnoScssMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MaxnoScssMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MaxnoScssMultiError) AllErrors() []error { return m }

// MaxnoScssValidationError is the validation error returned by
// MaxnoScss.Validate if the designated constraints aren't met.
type MaxnoScssValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MaxnoScssValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MaxnoScssValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MaxnoScssValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MaxnoScssValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MaxnoScssValidationError) ErrorName() string { return "MaxnoScssValidationError" }

// Error satisfies the builtin error interface
func (e MaxnoScssValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMaxnoScss.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MaxnoScssValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MaxnoScssValidationError{}

// Validate checks the field values on MaxnoSrsResources with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *MaxnoSrsResources) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MaxnoSrsResources with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MaxnoSrsResourcesMultiError, or nil if none found.
func (m *MaxnoSrsResources) ValidateAll() error {
	return m.validate(true)
}

func (m *MaxnoSrsResources) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 64 {
		err := MaxnoSrsResourcesValidationError{
			field:  "Value",
			reason: "value must equal 64",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MaxnoSrsResourcesMultiError(errors)
	}

	return nil
}

// MaxnoSrsResourcesMultiError is an error wrapping multiple validation errors
// returned by MaxnoSrsResources.ValidateAll() if the designated constraints
// aren't met.
type MaxnoSrsResourcesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MaxnoSrsResourcesMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MaxnoSrsResourcesMultiError) AllErrors() []error { return m }

// MaxnoSrsResourcesValidationError is the validation error returned by
// MaxnoSrsResources.Validate if the designated constraints aren't met.
type MaxnoSrsResourcesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MaxnoSrsResourcesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MaxnoSrsResourcesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MaxnoSrsResourcesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MaxnoSrsResourcesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MaxnoSrsResourcesValidationError) ErrorName() string {
	return "MaxnoSrsResourcesValidationError"
}

// Error satisfies the builtin error interface
func (e MaxnoSrsResourcesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMaxnoSrsResources.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MaxnoSrsResourcesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MaxnoSrsResourcesValidationError{}

// Validate checks the field values on MaxnoSrsPosResources with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *MaxnoSrsPosResources) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MaxnoSrsPosResources with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MaxnoSrsPosResourcesMultiError, or nil if none found.
func (m *MaxnoSrsPosResources) ValidateAll() error {
	return m.validate(true)
}

func (m *MaxnoSrsPosResources) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 64 {
		err := MaxnoSrsPosResourcesValidationError{
			field:  "Value",
			reason: "value must equal 64",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MaxnoSrsPosResourcesMultiError(errors)
	}

	return nil
}

// MaxnoSrsPosResourcesMultiError is an error wrapping multiple validation
// errors returned by MaxnoSrsPosResources.ValidateAll() if the designated
// constraints aren't met.
type MaxnoSrsPosResourcesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MaxnoSrsPosResourcesMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MaxnoSrsPosResourcesMultiError) AllErrors() []error { return m }

// MaxnoSrsPosResourcesValidationError is the validation error returned by
// MaxnoSrsPosResources.Validate if the designated constraints aren't met.
type MaxnoSrsPosResourcesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MaxnoSrsPosResourcesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MaxnoSrsPosResourcesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MaxnoSrsPosResourcesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MaxnoSrsPosResourcesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MaxnoSrsPosResourcesValidationError) ErrorName() string {
	return "MaxnoSrsPosResourcesValidationError"
}

// Error satisfies the builtin error interface
func (e MaxnoSrsPosResourcesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMaxnoSrsPosResources.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MaxnoSrsPosResourcesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MaxnoSrsPosResourcesValidationError{}

// Validate checks the field values on MaxnoSrsPosResourceSets with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *MaxnoSrsPosResourceSets) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MaxnoSrsPosResourceSets with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MaxnoSrsPosResourceSetsMultiError, or nil if none found.
func (m *MaxnoSrsPosResourceSets) ValidateAll() error {
	return m.validate(true)
}

func (m *MaxnoSrsPosResourceSets) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 16 {
		err := MaxnoSrsPosResourceSetsValidationError{
			field:  "Value",
			reason: "value must equal 16",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MaxnoSrsPosResourceSetsMultiError(errors)
	}

	return nil
}

// MaxnoSrsPosResourceSetsMultiError is an error wrapping multiple validation
// errors returned by MaxnoSrsPosResourceSets.ValidateAll() if the designated
// constraints aren't met.
type MaxnoSrsPosResourceSetsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MaxnoSrsPosResourceSetsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MaxnoSrsPosResourceSetsMultiError) AllErrors() []error { return m }

// MaxnoSrsPosResourceSetsValidationError is the validation error returned by
// MaxnoSrsPosResourceSets.Validate if the designated constraints aren't met.
type MaxnoSrsPosResourceSetsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MaxnoSrsPosResourceSetsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MaxnoSrsPosResourceSetsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MaxnoSrsPosResourceSetsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MaxnoSrsPosResourceSetsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MaxnoSrsPosResourceSetsValidationError) ErrorName() string {
	return "MaxnoSrsPosResourceSetsValidationError"
}

// Error satisfies the builtin error interface
func (e MaxnoSrsPosResourceSetsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMaxnoSrsPosResourceSets.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MaxnoSrsPosResourceSetsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MaxnoSrsPosResourceSetsValidationError{}

// Validate checks the field values on MaxnoSrsPosResourcePerSet with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *MaxnoSrsPosResourcePerSet) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MaxnoSrsPosResourcePerSet with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MaxnoSrsPosResourcePerSetMultiError, or nil if none found.
func (m *MaxnoSrsPosResourcePerSet) ValidateAll() error {
	return m.validate(true)
}

func (m *MaxnoSrsPosResourcePerSet) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 16 {
		err := MaxnoSrsPosResourcePerSetValidationError{
			field:  "Value",
			reason: "value must equal 16",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MaxnoSrsPosResourcePerSetMultiError(errors)
	}

	return nil
}

// MaxnoSrsPosResourcePerSetMultiError is an error wrapping multiple validation
// errors returned by MaxnoSrsPosResourcePerSet.ValidateAll() if the
// designated constraints aren't met.
type MaxnoSrsPosResourcePerSetMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MaxnoSrsPosResourcePerSetMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MaxnoSrsPosResourcePerSetMultiError) AllErrors() []error { return m }

// MaxnoSrsPosResourcePerSetValidationError is the validation error returned by
// MaxnoSrsPosResourcePerSet.Validate if the designated constraints aren't met.
type MaxnoSrsPosResourcePerSetValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MaxnoSrsPosResourcePerSetValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MaxnoSrsPosResourcePerSetValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MaxnoSrsPosResourcePerSetValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MaxnoSrsPosResourcePerSetValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MaxnoSrsPosResourcePerSetValidationError) ErrorName() string {
	return "MaxnoSrsPosResourcePerSetValidationError"
}

// Error satisfies the builtin error interface
func (e MaxnoSrsPosResourcePerSetValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMaxnoSrsPosResourcePerSet.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MaxnoSrsPosResourcePerSetValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MaxnoSrsPosResourcePerSetValidationError{}

// Validate checks the field values on MaxnoofPrsResourceSets with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *MaxnoofPrsResourceSets) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MaxnoofPrsResourceSets with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MaxnoofPrsResourceSetsMultiError, or nil if none found.
func (m *MaxnoofPrsResourceSets) ValidateAll() error {
	return m.validate(true)
}

func (m *MaxnoofPrsResourceSets) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 2 {
		err := MaxnoofPrsResourceSetsValidationError{
			field:  "Value",
			reason: "value must equal 2",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MaxnoofPrsResourceSetsMultiError(errors)
	}

	return nil
}

// MaxnoofPrsResourceSetsMultiError is an error wrapping multiple validation
// errors returned by MaxnoofPrsResourceSets.ValidateAll() if the designated
// constraints aren't met.
type MaxnoofPrsResourceSetsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MaxnoofPrsResourceSetsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MaxnoofPrsResourceSetsMultiError) AllErrors() []error { return m }

// MaxnoofPrsResourceSetsValidationError is the validation error returned by
// MaxnoofPrsResourceSets.Validate if the designated constraints aren't met.
type MaxnoofPrsResourceSetsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MaxnoofPrsResourceSetsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MaxnoofPrsResourceSetsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MaxnoofPrsResourceSetsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MaxnoofPrsResourceSetsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MaxnoofPrsResourceSetsValidationError) ErrorName() string {
	return "MaxnoofPrsResourceSetsValidationError"
}

// Error satisfies the builtin error interface
func (e MaxnoofPrsResourceSetsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMaxnoofPrsResourceSets.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MaxnoofPrsResourceSetsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MaxnoofPrsResourceSetsValidationError{}

// Validate checks the field values on MaxnoofPrsResourcesPerSet with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *MaxnoofPrsResourcesPerSet) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MaxnoofPrsResourcesPerSet with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MaxnoofPrsResourcesPerSetMultiError, or nil if none found.
func (m *MaxnoofPrsResourcesPerSet) ValidateAll() error {
	return m.validate(true)
}

func (m *MaxnoofPrsResourcesPerSet) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 64 {
		err := MaxnoofPrsResourcesPerSetValidationError{
			field:  "Value",
			reason: "value must equal 64",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MaxnoofPrsResourcesPerSetMultiError(errors)
	}

	return nil
}

// MaxnoofPrsResourcesPerSetMultiError is an error wrapping multiple validation
// errors returned by MaxnoofPrsResourcesPerSet.ValidateAll() if the
// designated constraints aren't met.
type MaxnoofPrsResourcesPerSetMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MaxnoofPrsResourcesPerSetMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MaxnoofPrsResourcesPerSetMultiError) AllErrors() []error { return m }

// MaxnoofPrsResourcesPerSetValidationError is the validation error returned by
// MaxnoofPrsResourcesPerSet.Validate if the designated constraints aren't met.
type MaxnoofPrsResourcesPerSetValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MaxnoofPrsResourcesPerSetValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MaxnoofPrsResourcesPerSetValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MaxnoofPrsResourcesPerSetValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MaxnoofPrsResourcesPerSetValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MaxnoofPrsResourcesPerSetValidationError) ErrorName() string {
	return "MaxnoofPrsResourcesPerSetValidationError"
}

// Error satisfies the builtin error interface
func (e MaxnoofPrsResourcesPerSetValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMaxnoofPrsResourcesPerSet.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MaxnoofPrsResourcesPerSetValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MaxnoofPrsResourcesPerSetValidationError{}

// Validate checks the field values on MaxNoOfMeasTrps with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *MaxNoOfMeasTrps) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MaxNoOfMeasTrps with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MaxNoOfMeasTrpsMultiError, or nil if none found.
func (m *MaxNoOfMeasTrps) ValidateAll() error {
	return m.validate(true)
}

func (m *MaxNoOfMeasTrps) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 64 {
		err := MaxNoOfMeasTrpsValidationError{
			field:  "Value",
			reason: "value must equal 64",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MaxNoOfMeasTrpsMultiError(errors)
	}

	return nil
}

// MaxNoOfMeasTrpsMultiError is an error wrapping multiple validation errors
// returned by MaxNoOfMeasTrps.ValidateAll() if the designated constraints
// aren't met.
type MaxNoOfMeasTrpsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MaxNoOfMeasTrpsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MaxNoOfMeasTrpsMultiError) AllErrors() []error { return m }

// MaxNoOfMeasTrpsValidationError is the validation error returned by
// MaxNoOfMeasTrps.Validate if the designated constraints aren't met.
type MaxNoOfMeasTrpsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MaxNoOfMeasTrpsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MaxNoOfMeasTrpsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MaxNoOfMeasTrpsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MaxNoOfMeasTrpsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MaxNoOfMeasTrpsValidationError) ErrorName() string { return "MaxNoOfMeasTrpsValidationError" }

// Error satisfies the builtin error interface
func (e MaxNoOfMeasTrpsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMaxNoOfMeasTrps.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MaxNoOfMeasTrpsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MaxNoOfMeasTrpsValidationError{}

// Validate checks the field values on MaxnoofPrsresourceSets with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *MaxnoofPrsresourceSets) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MaxnoofPrsresourceSets with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MaxnoofPrsresourceSetsMultiError, or nil if none found.
func (m *MaxnoofPrsresourceSets) ValidateAll() error {
	return m.validate(true)
}

func (m *MaxnoofPrsresourceSets) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 8 {
		err := MaxnoofPrsresourceSetsValidationError{
			field:  "Value",
			reason: "value must equal 8",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MaxnoofPrsresourceSetsMultiError(errors)
	}

	return nil
}

// MaxnoofPrsresourceSetsMultiError is an error wrapping multiple validation
// errors returned by MaxnoofPrsresourceSets.ValidateAll() if the designated
// constraints aren't met.
type MaxnoofPrsresourceSetsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MaxnoofPrsresourceSetsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MaxnoofPrsresourceSetsMultiError) AllErrors() []error { return m }

// MaxnoofPrsresourceSetsValidationError is the validation error returned by
// MaxnoofPrsresourceSets.Validate if the designated constraints aren't met.
type MaxnoofPrsresourceSetsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MaxnoofPrsresourceSetsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MaxnoofPrsresourceSetsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MaxnoofPrsresourceSetsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MaxnoofPrsresourceSetsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MaxnoofPrsresourceSetsValidationError) ErrorName() string {
	return "MaxnoofPrsresourceSetsValidationError"
}

// Error satisfies the builtin error interface
func (e MaxnoofPrsresourceSetsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMaxnoofPrsresourceSets.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MaxnoofPrsresourceSetsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MaxnoofPrsresourceSetsValidationError{}

// Validate checks the field values on MaxnoofPrsresources with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *MaxnoofPrsresources) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MaxnoofPrsresources with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MaxnoofPrsresourcesMultiError, or nil if none found.
func (m *MaxnoofPrsresources) ValidateAll() error {
	return m.validate(true)
}

func (m *MaxnoofPrsresources) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 64 {
		err := MaxnoofPrsresourcesValidationError{
			field:  "Value",
			reason: "value must equal 64",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MaxnoofPrsresourcesMultiError(errors)
	}

	return nil
}

// MaxnoofPrsresourcesMultiError is an error wrapping multiple validation
// errors returned by MaxnoofPrsresources.ValidateAll() if the designated
// constraints aren't met.
type MaxnoofPrsresourcesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MaxnoofPrsresourcesMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MaxnoofPrsresourcesMultiError) AllErrors() []error { return m }

// MaxnoofPrsresourcesValidationError is the validation error returned by
// MaxnoofPrsresources.Validate if the designated constraints aren't met.
type MaxnoofPrsresourcesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MaxnoofPrsresourcesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MaxnoofPrsresourcesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MaxnoofPrsresourcesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MaxnoofPrsresourcesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MaxnoofPrsresourcesValidationError) ErrorName() string {
	return "MaxnoofPrsresourcesValidationError"
}

// Error satisfies the builtin error interface
func (e MaxnoofPrsresourcesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMaxnoofPrsresources.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MaxnoofPrsresourcesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MaxnoofPrsresourcesValidationError{}

// Validate checks the field values on IdCause with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *IdCause) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdCause with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in IdCauseMultiError, or nil if none found.
func (m *IdCause) ValidateAll() error {
	return m.validate(true)
}

func (m *IdCause) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 0 {
		err := IdCauseValidationError{
			field:  "Value",
			reason: "value must equal 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdCauseMultiError(errors)
	}

	return nil
}

// IdCauseMultiError is an error wrapping multiple validation errors returned
// by IdCause.ValidateAll() if the designated constraints aren't met.
type IdCauseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdCauseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdCauseMultiError) AllErrors() []error { return m }

// IdCauseValidationError is the validation error returned by IdCause.Validate
// if the designated constraints aren't met.
type IdCauseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdCauseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdCauseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdCauseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdCauseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdCauseValidationError) ErrorName() string { return "IdCauseValidationError" }

// Error satisfies the builtin error interface
func (e IdCauseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdCause.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdCauseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdCauseValidationError{}

// Validate checks the field values on IdCellsFailedtobeActivatedList with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdCellsFailedtobeActivatedList) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdCellsFailedtobeActivatedList with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// IdCellsFailedtobeActivatedListMultiError, or nil if none found.
func (m *IdCellsFailedtobeActivatedList) ValidateAll() error {
	return m.validate(true)
}

func (m *IdCellsFailedtobeActivatedList) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 1 {
		err := IdCellsFailedtobeActivatedListValidationError{
			field:  "Value",
			reason: "value must equal 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdCellsFailedtobeActivatedListMultiError(errors)
	}

	return nil
}

// IdCellsFailedtobeActivatedListMultiError is an error wrapping multiple
// validation errors returned by IdCellsFailedtobeActivatedList.ValidateAll()
// if the designated constraints aren't met.
type IdCellsFailedtobeActivatedListMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdCellsFailedtobeActivatedListMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdCellsFailedtobeActivatedListMultiError) AllErrors() []error { return m }

// IdCellsFailedtobeActivatedListValidationError is the validation error
// returned by IdCellsFailedtobeActivatedList.Validate if the designated
// constraints aren't met.
type IdCellsFailedtobeActivatedListValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdCellsFailedtobeActivatedListValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdCellsFailedtobeActivatedListValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdCellsFailedtobeActivatedListValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdCellsFailedtobeActivatedListValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdCellsFailedtobeActivatedListValidationError) ErrorName() string {
	return "IdCellsFailedtobeActivatedListValidationError"
}

// Error satisfies the builtin error interface
func (e IdCellsFailedtobeActivatedListValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdCellsFailedtobeActivatedList.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdCellsFailedtobeActivatedListValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdCellsFailedtobeActivatedListValidationError{}

// Validate checks the field values on IdCellsFailedtobeActivatedListItem with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *IdCellsFailedtobeActivatedListItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdCellsFailedtobeActivatedListItem
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// IdCellsFailedtobeActivatedListItemMultiError, or nil if none found.
func (m *IdCellsFailedtobeActivatedListItem) ValidateAll() error {
	return m.validate(true)
}

func (m *IdCellsFailedtobeActivatedListItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 2 {
		err := IdCellsFailedtobeActivatedListItemValidationError{
			field:  "Value",
			reason: "value must equal 2",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdCellsFailedtobeActivatedListItemMultiError(errors)
	}

	return nil
}

// IdCellsFailedtobeActivatedListItemMultiError is an error wrapping multiple
// validation errors returned by
// IdCellsFailedtobeActivatedListItem.ValidateAll() if the designated
// constraints aren't met.
type IdCellsFailedtobeActivatedListItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdCellsFailedtobeActivatedListItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdCellsFailedtobeActivatedListItemMultiError) AllErrors() []error { return m }

// IdCellsFailedtobeActivatedListItemValidationError is the validation error
// returned by IdCellsFailedtobeActivatedListItem.Validate if the designated
// constraints aren't met.
type IdCellsFailedtobeActivatedListItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdCellsFailedtobeActivatedListItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdCellsFailedtobeActivatedListItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdCellsFailedtobeActivatedListItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdCellsFailedtobeActivatedListItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdCellsFailedtobeActivatedListItemValidationError) ErrorName() string {
	return "IdCellsFailedtobeActivatedListItemValidationError"
}

// Error satisfies the builtin error interface
func (e IdCellsFailedtobeActivatedListItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdCellsFailedtobeActivatedListItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdCellsFailedtobeActivatedListItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdCellsFailedtobeActivatedListItemValidationError{}

// Validate checks the field values on IdCellstobeActivatedList with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdCellstobeActivatedList) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdCellstobeActivatedList with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdCellstobeActivatedListMultiError, or nil if none found.
func (m *IdCellstobeActivatedList) ValidateAll() error {
	return m.validate(true)
}

func (m *IdCellstobeActivatedList) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 3 {
		err := IdCellstobeActivatedListValidationError{
			field:  "Value",
			reason: "value must equal 3",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdCellstobeActivatedListMultiError(errors)
	}

	return nil
}

// IdCellstobeActivatedListMultiError is an error wrapping multiple validation
// errors returned by IdCellstobeActivatedList.ValidateAll() if the designated
// constraints aren't met.
type IdCellstobeActivatedListMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdCellstobeActivatedListMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdCellstobeActivatedListMultiError) AllErrors() []error { return m }

// IdCellstobeActivatedListValidationError is the validation error returned by
// IdCellstobeActivatedList.Validate if the designated constraints aren't met.
type IdCellstobeActivatedListValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdCellstobeActivatedListValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdCellstobeActivatedListValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdCellstobeActivatedListValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdCellstobeActivatedListValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdCellstobeActivatedListValidationError) ErrorName() string {
	return "IdCellstobeActivatedListValidationError"
}

// Error satisfies the builtin error interface
func (e IdCellstobeActivatedListValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdCellstobeActivatedList.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdCellstobeActivatedListValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdCellstobeActivatedListValidationError{}

// Validate checks the field values on IdCellstobeActivatedListItem with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdCellstobeActivatedListItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdCellstobeActivatedListItem with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdCellstobeActivatedListItemMultiError, or nil if none found.
func (m *IdCellstobeActivatedListItem) ValidateAll() error {
	return m.validate(true)
}

func (m *IdCellstobeActivatedListItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 4 {
		err := IdCellstobeActivatedListItemValidationError{
			field:  "Value",
			reason: "value must equal 4",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdCellstobeActivatedListItemMultiError(errors)
	}

	return nil
}

// IdCellstobeActivatedListItemMultiError is an error wrapping multiple
// validation errors returned by IdCellstobeActivatedListItem.ValidateAll() if
// the designated constraints aren't met.
type IdCellstobeActivatedListItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdCellstobeActivatedListItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdCellstobeActivatedListItemMultiError) AllErrors() []error { return m }

// IdCellstobeActivatedListItemValidationError is the validation error returned
// by IdCellstobeActivatedListItem.Validate if the designated constraints
// aren't met.
type IdCellstobeActivatedListItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdCellstobeActivatedListItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdCellstobeActivatedListItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdCellstobeActivatedListItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdCellstobeActivatedListItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdCellstobeActivatedListItemValidationError) ErrorName() string {
	return "IdCellstobeActivatedListItemValidationError"
}

// Error satisfies the builtin error interface
func (e IdCellstobeActivatedListItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdCellstobeActivatedListItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdCellstobeActivatedListItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdCellstobeActivatedListItemValidationError{}

// Validate checks the field values on IdCellstobeDeactivatedList with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdCellstobeDeactivatedList) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdCellstobeDeactivatedList with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdCellstobeDeactivatedListMultiError, or nil if none found.
func (m *IdCellstobeDeactivatedList) ValidateAll() error {
	return m.validate(true)
}

func (m *IdCellstobeDeactivatedList) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 5 {
		err := IdCellstobeDeactivatedListValidationError{
			field:  "Value",
			reason: "value must equal 5",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdCellstobeDeactivatedListMultiError(errors)
	}

	return nil
}

// IdCellstobeDeactivatedListMultiError is an error wrapping multiple
// validation errors returned by IdCellstobeDeactivatedList.ValidateAll() if
// the designated constraints aren't met.
type IdCellstobeDeactivatedListMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdCellstobeDeactivatedListMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdCellstobeDeactivatedListMultiError) AllErrors() []error { return m }

// IdCellstobeDeactivatedListValidationError is the validation error returned
// by IdCellstobeDeactivatedList.Validate if the designated constraints aren't met.
type IdCellstobeDeactivatedListValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdCellstobeDeactivatedListValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdCellstobeDeactivatedListValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdCellstobeDeactivatedListValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdCellstobeDeactivatedListValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdCellstobeDeactivatedListValidationError) ErrorName() string {
	return "IdCellstobeDeactivatedListValidationError"
}

// Error satisfies the builtin error interface
func (e IdCellstobeDeactivatedListValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdCellstobeDeactivatedList.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdCellstobeDeactivatedListValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdCellstobeDeactivatedListValidationError{}

// Validate checks the field values on IdCellstobeDeactivatedListItem with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdCellstobeDeactivatedListItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdCellstobeDeactivatedListItem with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// IdCellstobeDeactivatedListItemMultiError, or nil if none found.
func (m *IdCellstobeDeactivatedListItem) ValidateAll() error {
	return m.validate(true)
}

func (m *IdCellstobeDeactivatedListItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 6 {
		err := IdCellstobeDeactivatedListItemValidationError{
			field:  "Value",
			reason: "value must equal 6",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdCellstobeDeactivatedListItemMultiError(errors)
	}

	return nil
}

// IdCellstobeDeactivatedListItemMultiError is an error wrapping multiple
// validation errors returned by IdCellstobeDeactivatedListItem.ValidateAll()
// if the designated constraints aren't met.
type IdCellstobeDeactivatedListItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdCellstobeDeactivatedListItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdCellstobeDeactivatedListItemMultiError) AllErrors() []error { return m }

// IdCellstobeDeactivatedListItemValidationError is the validation error
// returned by IdCellstobeDeactivatedListItem.Validate if the designated
// constraints aren't met.
type IdCellstobeDeactivatedListItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdCellstobeDeactivatedListItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdCellstobeDeactivatedListItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdCellstobeDeactivatedListItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdCellstobeDeactivatedListItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdCellstobeDeactivatedListItemValidationError) ErrorName() string {
	return "IdCellstobeDeactivatedListItemValidationError"
}

// Error satisfies the builtin error interface
func (e IdCellstobeDeactivatedListItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdCellstobeDeactivatedListItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdCellstobeDeactivatedListItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdCellstobeDeactivatedListItemValidationError{}

// Validate checks the field values on IdCriticalityDiagnostics with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdCriticalityDiagnostics) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdCriticalityDiagnostics with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdCriticalityDiagnosticsMultiError, or nil if none found.
func (m *IdCriticalityDiagnostics) ValidateAll() error {
	return m.validate(true)
}

func (m *IdCriticalityDiagnostics) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 7 {
		err := IdCriticalityDiagnosticsValidationError{
			field:  "Value",
			reason: "value must equal 7",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdCriticalityDiagnosticsMultiError(errors)
	}

	return nil
}

// IdCriticalityDiagnosticsMultiError is an error wrapping multiple validation
// errors returned by IdCriticalityDiagnostics.ValidateAll() if the designated
// constraints aren't met.
type IdCriticalityDiagnosticsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdCriticalityDiagnosticsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdCriticalityDiagnosticsMultiError) AllErrors() []error { return m }

// IdCriticalityDiagnosticsValidationError is the validation error returned by
// IdCriticalityDiagnostics.Validate if the designated constraints aren't met.
type IdCriticalityDiagnosticsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdCriticalityDiagnosticsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdCriticalityDiagnosticsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdCriticalityDiagnosticsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdCriticalityDiagnosticsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdCriticalityDiagnosticsValidationError) ErrorName() string {
	return "IdCriticalityDiagnosticsValidationError"
}

// Error satisfies the builtin error interface
func (e IdCriticalityDiagnosticsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdCriticalityDiagnostics.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdCriticalityDiagnosticsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdCriticalityDiagnosticsValidationError{}

// Validate checks the field values on IdCUtoDurrcinformation with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdCUtoDurrcinformation) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdCUtoDurrcinformation with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdCUtoDurrcinformationMultiError, or nil if none found.
func (m *IdCUtoDurrcinformation) ValidateAll() error {
	return m.validate(true)
}

func (m *IdCUtoDurrcinformation) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 9 {
		err := IdCUtoDurrcinformationValidationError{
			field:  "Value",
			reason: "value must equal 9",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdCUtoDurrcinformationMultiError(errors)
	}

	return nil
}

// IdCUtoDurrcinformationMultiError is an error wrapping multiple validation
// errors returned by IdCUtoDurrcinformation.ValidateAll() if the designated
// constraints aren't met.
type IdCUtoDurrcinformationMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdCUtoDurrcinformationMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdCUtoDurrcinformationMultiError) AllErrors() []error { return m }

// IdCUtoDurrcinformationValidationError is the validation error returned by
// IdCUtoDurrcinformation.Validate if the designated constraints aren't met.
type IdCUtoDurrcinformationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdCUtoDurrcinformationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdCUtoDurrcinformationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdCUtoDurrcinformationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdCUtoDurrcinformationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdCUtoDurrcinformationValidationError) ErrorName() string {
	return "IdCUtoDurrcinformationValidationError"
}

// Error satisfies the builtin error interface
func (e IdCUtoDurrcinformationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdCUtoDurrcinformation.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdCUtoDurrcinformationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdCUtoDurrcinformationValidationError{}

// Validate checks the field values on IdDRbsFailedToBeModifiedItem with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdDRbsFailedToBeModifiedItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdDRbsFailedToBeModifiedItem with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdDRbsFailedToBeModifiedItemMultiError, or nil if none found.
func (m *IdDRbsFailedToBeModifiedItem) ValidateAll() error {
	return m.validate(true)
}

func (m *IdDRbsFailedToBeModifiedItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 12 {
		err := IdDRbsFailedToBeModifiedItemValidationError{
			field:  "Value",
			reason: "value must equal 12",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdDRbsFailedToBeModifiedItemMultiError(errors)
	}

	return nil
}

// IdDRbsFailedToBeModifiedItemMultiError is an error wrapping multiple
// validation errors returned by IdDRbsFailedToBeModifiedItem.ValidateAll() if
// the designated constraints aren't met.
type IdDRbsFailedToBeModifiedItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdDRbsFailedToBeModifiedItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdDRbsFailedToBeModifiedItemMultiError) AllErrors() []error { return m }

// IdDRbsFailedToBeModifiedItemValidationError is the validation error returned
// by IdDRbsFailedToBeModifiedItem.Validate if the designated constraints
// aren't met.
type IdDRbsFailedToBeModifiedItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdDRbsFailedToBeModifiedItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdDRbsFailedToBeModifiedItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdDRbsFailedToBeModifiedItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdDRbsFailedToBeModifiedItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdDRbsFailedToBeModifiedItemValidationError) ErrorName() string {
	return "IdDRbsFailedToBeModifiedItemValidationError"
}

// Error satisfies the builtin error interface
func (e IdDRbsFailedToBeModifiedItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdDRbsFailedToBeModifiedItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdDRbsFailedToBeModifiedItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdDRbsFailedToBeModifiedItemValidationError{}

// Validate checks the field values on IdDRbsFailedToBeModifiedList with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdDRbsFailedToBeModifiedList) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdDRbsFailedToBeModifiedList with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdDRbsFailedToBeModifiedListMultiError, or nil if none found.
func (m *IdDRbsFailedToBeModifiedList) ValidateAll() error {
	return m.validate(true)
}

func (m *IdDRbsFailedToBeModifiedList) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 13 {
		err := IdDRbsFailedToBeModifiedListValidationError{
			field:  "Value",
			reason: "value must equal 13",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdDRbsFailedToBeModifiedListMultiError(errors)
	}

	return nil
}

// IdDRbsFailedToBeModifiedListMultiError is an error wrapping multiple
// validation errors returned by IdDRbsFailedToBeModifiedList.ValidateAll() if
// the designated constraints aren't met.
type IdDRbsFailedToBeModifiedListMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdDRbsFailedToBeModifiedListMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdDRbsFailedToBeModifiedListMultiError) AllErrors() []error { return m }

// IdDRbsFailedToBeModifiedListValidationError is the validation error returned
// by IdDRbsFailedToBeModifiedList.Validate if the designated constraints
// aren't met.
type IdDRbsFailedToBeModifiedListValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdDRbsFailedToBeModifiedListValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdDRbsFailedToBeModifiedListValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdDRbsFailedToBeModifiedListValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdDRbsFailedToBeModifiedListValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdDRbsFailedToBeModifiedListValidationError) ErrorName() string {
	return "IdDRbsFailedToBeModifiedListValidationError"
}

// Error satisfies the builtin error interface
func (e IdDRbsFailedToBeModifiedListValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdDRbsFailedToBeModifiedList.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdDRbsFailedToBeModifiedListValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdDRbsFailedToBeModifiedListValidationError{}

// Validate checks the field values on IdDRbsFailedToBeSetupItem with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdDRbsFailedToBeSetupItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdDRbsFailedToBeSetupItem with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdDRbsFailedToBeSetupItemMultiError, or nil if none found.
func (m *IdDRbsFailedToBeSetupItem) ValidateAll() error {
	return m.validate(true)
}

func (m *IdDRbsFailedToBeSetupItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 14 {
		err := IdDRbsFailedToBeSetupItemValidationError{
			field:  "Value",
			reason: "value must equal 14",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdDRbsFailedToBeSetupItemMultiError(errors)
	}

	return nil
}

// IdDRbsFailedToBeSetupItemMultiError is an error wrapping multiple validation
// errors returned by IdDRbsFailedToBeSetupItem.ValidateAll() if the
// designated constraints aren't met.
type IdDRbsFailedToBeSetupItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdDRbsFailedToBeSetupItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdDRbsFailedToBeSetupItemMultiError) AllErrors() []error { return m }

// IdDRbsFailedToBeSetupItemValidationError is the validation error returned by
// IdDRbsFailedToBeSetupItem.Validate if the designated constraints aren't met.
type IdDRbsFailedToBeSetupItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdDRbsFailedToBeSetupItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdDRbsFailedToBeSetupItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdDRbsFailedToBeSetupItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdDRbsFailedToBeSetupItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdDRbsFailedToBeSetupItemValidationError) ErrorName() string {
	return "IdDRbsFailedToBeSetupItemValidationError"
}

// Error satisfies the builtin error interface
func (e IdDRbsFailedToBeSetupItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdDRbsFailedToBeSetupItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdDRbsFailedToBeSetupItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdDRbsFailedToBeSetupItemValidationError{}

// Validate checks the field values on IdDRbsFailedToBeSetupList with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdDRbsFailedToBeSetupList) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdDRbsFailedToBeSetupList with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdDRbsFailedToBeSetupListMultiError, or nil if none found.
func (m *IdDRbsFailedToBeSetupList) ValidateAll() error {
	return m.validate(true)
}

func (m *IdDRbsFailedToBeSetupList) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 15 {
		err := IdDRbsFailedToBeSetupListValidationError{
			field:  "Value",
			reason: "value must equal 15",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdDRbsFailedToBeSetupListMultiError(errors)
	}

	return nil
}

// IdDRbsFailedToBeSetupListMultiError is an error wrapping multiple validation
// errors returned by IdDRbsFailedToBeSetupList.ValidateAll() if the
// designated constraints aren't met.
type IdDRbsFailedToBeSetupListMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdDRbsFailedToBeSetupListMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdDRbsFailedToBeSetupListMultiError) AllErrors() []error { return m }

// IdDRbsFailedToBeSetupListValidationError is the validation error returned by
// IdDRbsFailedToBeSetupList.Validate if the designated constraints aren't met.
type IdDRbsFailedToBeSetupListValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdDRbsFailedToBeSetupListValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdDRbsFailedToBeSetupListValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdDRbsFailedToBeSetupListValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdDRbsFailedToBeSetupListValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdDRbsFailedToBeSetupListValidationError) ErrorName() string {
	return "IdDRbsFailedToBeSetupListValidationError"
}

// Error satisfies the builtin error interface
func (e IdDRbsFailedToBeSetupListValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdDRbsFailedToBeSetupList.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdDRbsFailedToBeSetupListValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdDRbsFailedToBeSetupListValidationError{}

// Validate checks the field values on IdDRbsFailedToBeSetupModItem with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdDRbsFailedToBeSetupModItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdDRbsFailedToBeSetupModItem with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdDRbsFailedToBeSetupModItemMultiError, or nil if none found.
func (m *IdDRbsFailedToBeSetupModItem) ValidateAll() error {
	return m.validate(true)
}

func (m *IdDRbsFailedToBeSetupModItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 16 {
		err := IdDRbsFailedToBeSetupModItemValidationError{
			field:  "Value",
			reason: "value must equal 16",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdDRbsFailedToBeSetupModItemMultiError(errors)
	}

	return nil
}

// IdDRbsFailedToBeSetupModItemMultiError is an error wrapping multiple
// validation errors returned by IdDRbsFailedToBeSetupModItem.ValidateAll() if
// the designated constraints aren't met.
type IdDRbsFailedToBeSetupModItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdDRbsFailedToBeSetupModItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdDRbsFailedToBeSetupModItemMultiError) AllErrors() []error { return m }

// IdDRbsFailedToBeSetupModItemValidationError is the validation error returned
// by IdDRbsFailedToBeSetupModItem.Validate if the designated constraints
// aren't met.
type IdDRbsFailedToBeSetupModItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdDRbsFailedToBeSetupModItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdDRbsFailedToBeSetupModItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdDRbsFailedToBeSetupModItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdDRbsFailedToBeSetupModItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdDRbsFailedToBeSetupModItemValidationError) ErrorName() string {
	return "IdDRbsFailedToBeSetupModItemValidationError"
}

// Error satisfies the builtin error interface
func (e IdDRbsFailedToBeSetupModItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdDRbsFailedToBeSetupModItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdDRbsFailedToBeSetupModItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdDRbsFailedToBeSetupModItemValidationError{}

// Validate checks the field values on IdDRbsFailedToBeSetupModList with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdDRbsFailedToBeSetupModList) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdDRbsFailedToBeSetupModList with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdDRbsFailedToBeSetupModListMultiError, or nil if none found.
func (m *IdDRbsFailedToBeSetupModList) ValidateAll() error {
	return m.validate(true)
}

func (m *IdDRbsFailedToBeSetupModList) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 17 {
		err := IdDRbsFailedToBeSetupModListValidationError{
			field:  "Value",
			reason: "value must equal 17",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdDRbsFailedToBeSetupModListMultiError(errors)
	}

	return nil
}

// IdDRbsFailedToBeSetupModListMultiError is an error wrapping multiple
// validation errors returned by IdDRbsFailedToBeSetupModList.ValidateAll() if
// the designated constraints aren't met.
type IdDRbsFailedToBeSetupModListMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdDRbsFailedToBeSetupModListMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdDRbsFailedToBeSetupModListMultiError) AllErrors() []error { return m }

// IdDRbsFailedToBeSetupModListValidationError is the validation error returned
// by IdDRbsFailedToBeSetupModList.Validate if the designated constraints
// aren't met.
type IdDRbsFailedToBeSetupModListValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdDRbsFailedToBeSetupModListValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdDRbsFailedToBeSetupModListValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdDRbsFailedToBeSetupModListValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdDRbsFailedToBeSetupModListValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdDRbsFailedToBeSetupModListValidationError) ErrorName() string {
	return "IdDRbsFailedToBeSetupModListValidationError"
}

// Error satisfies the builtin error interface
func (e IdDRbsFailedToBeSetupModListValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdDRbsFailedToBeSetupModList.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdDRbsFailedToBeSetupModListValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdDRbsFailedToBeSetupModListValidationError{}

// Validate checks the field values on IdDRbsModifiedConfItem with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdDRbsModifiedConfItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdDRbsModifiedConfItem with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdDRbsModifiedConfItemMultiError, or nil if none found.
func (m *IdDRbsModifiedConfItem) ValidateAll() error {
	return m.validate(true)
}

func (m *IdDRbsModifiedConfItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 18 {
		err := IdDRbsModifiedConfItemValidationError{
			field:  "Value",
			reason: "value must equal 18",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdDRbsModifiedConfItemMultiError(errors)
	}

	return nil
}

// IdDRbsModifiedConfItemMultiError is an error wrapping multiple validation
// errors returned by IdDRbsModifiedConfItem.ValidateAll() if the designated
// constraints aren't met.
type IdDRbsModifiedConfItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdDRbsModifiedConfItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdDRbsModifiedConfItemMultiError) AllErrors() []error { return m }

// IdDRbsModifiedConfItemValidationError is the validation error returned by
// IdDRbsModifiedConfItem.Validate if the designated constraints aren't met.
type IdDRbsModifiedConfItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdDRbsModifiedConfItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdDRbsModifiedConfItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdDRbsModifiedConfItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdDRbsModifiedConfItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdDRbsModifiedConfItemValidationError) ErrorName() string {
	return "IdDRbsModifiedConfItemValidationError"
}

// Error satisfies the builtin error interface
func (e IdDRbsModifiedConfItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdDRbsModifiedConfItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdDRbsModifiedConfItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdDRbsModifiedConfItemValidationError{}

// Validate checks the field values on IdDRbsModifiedConfList with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdDRbsModifiedConfList) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdDRbsModifiedConfList with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdDRbsModifiedConfListMultiError, or nil if none found.
func (m *IdDRbsModifiedConfList) ValidateAll() error {
	return m.validate(true)
}

func (m *IdDRbsModifiedConfList) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 19 {
		err := IdDRbsModifiedConfListValidationError{
			field:  "Value",
			reason: "value must equal 19",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdDRbsModifiedConfListMultiError(errors)
	}

	return nil
}

// IdDRbsModifiedConfListMultiError is an error wrapping multiple validation
// errors returned by IdDRbsModifiedConfList.ValidateAll() if the designated
// constraints aren't met.
type IdDRbsModifiedConfListMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdDRbsModifiedConfListMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdDRbsModifiedConfListMultiError) AllErrors() []error { return m }

// IdDRbsModifiedConfListValidationError is the validation error returned by
// IdDRbsModifiedConfList.Validate if the designated constraints aren't met.
type IdDRbsModifiedConfListValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdDRbsModifiedConfListValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdDRbsModifiedConfListValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdDRbsModifiedConfListValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdDRbsModifiedConfListValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdDRbsModifiedConfListValidationError) ErrorName() string {
	return "IdDRbsModifiedConfListValidationError"
}

// Error satisfies the builtin error interface
func (e IdDRbsModifiedConfListValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdDRbsModifiedConfList.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdDRbsModifiedConfListValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdDRbsModifiedConfListValidationError{}

// Validate checks the field values on IdDRbsModifiedItem with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdDRbsModifiedItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdDRbsModifiedItem with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdDRbsModifiedItemMultiError, or nil if none found.
func (m *IdDRbsModifiedItem) ValidateAll() error {
	return m.validate(true)
}

func (m *IdDRbsModifiedItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 20 {
		err := IdDRbsModifiedItemValidationError{
			field:  "Value",
			reason: "value must equal 20",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdDRbsModifiedItemMultiError(errors)
	}

	return nil
}

// IdDRbsModifiedItemMultiError is an error wrapping multiple validation errors
// returned by IdDRbsModifiedItem.ValidateAll() if the designated constraints
// aren't met.
type IdDRbsModifiedItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdDRbsModifiedItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdDRbsModifiedItemMultiError) AllErrors() []error { return m }

// IdDRbsModifiedItemValidationError is the validation error returned by
// IdDRbsModifiedItem.Validate if the designated constraints aren't met.
type IdDRbsModifiedItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdDRbsModifiedItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdDRbsModifiedItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdDRbsModifiedItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdDRbsModifiedItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdDRbsModifiedItemValidationError) ErrorName() string {
	return "IdDRbsModifiedItemValidationError"
}

// Error satisfies the builtin error interface
func (e IdDRbsModifiedItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdDRbsModifiedItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdDRbsModifiedItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdDRbsModifiedItemValidationError{}

// Validate checks the field values on IdDRbsModifiedList with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdDRbsModifiedList) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdDRbsModifiedList with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdDRbsModifiedListMultiError, or nil if none found.
func (m *IdDRbsModifiedList) ValidateAll() error {
	return m.validate(true)
}

func (m *IdDRbsModifiedList) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 21 {
		err := IdDRbsModifiedListValidationError{
			field:  "Value",
			reason: "value must equal 21",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdDRbsModifiedListMultiError(errors)
	}

	return nil
}

// IdDRbsModifiedListMultiError is an error wrapping multiple validation errors
// returned by IdDRbsModifiedList.ValidateAll() if the designated constraints
// aren't met.
type IdDRbsModifiedListMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdDRbsModifiedListMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdDRbsModifiedListMultiError) AllErrors() []error { return m }

// IdDRbsModifiedListValidationError is the validation error returned by
// IdDRbsModifiedList.Validate if the designated constraints aren't met.
type IdDRbsModifiedListValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdDRbsModifiedListValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdDRbsModifiedListValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdDRbsModifiedListValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdDRbsModifiedListValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdDRbsModifiedListValidationError) ErrorName() string {
	return "IdDRbsModifiedListValidationError"
}

// Error satisfies the builtin error interface
func (e IdDRbsModifiedListValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdDRbsModifiedList.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdDRbsModifiedListValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdDRbsModifiedListValidationError{}

// Validate checks the field values on IdDRbsRequiredToBeModifiedItem with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdDRbsRequiredToBeModifiedItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdDRbsRequiredToBeModifiedItem with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// IdDRbsRequiredToBeModifiedItemMultiError, or nil if none found.
func (m *IdDRbsRequiredToBeModifiedItem) ValidateAll() error {
	return m.validate(true)
}

func (m *IdDRbsRequiredToBeModifiedItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 22 {
		err := IdDRbsRequiredToBeModifiedItemValidationError{
			field:  "Value",
			reason: "value must equal 22",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdDRbsRequiredToBeModifiedItemMultiError(errors)
	}

	return nil
}

// IdDRbsRequiredToBeModifiedItemMultiError is an error wrapping multiple
// validation errors returned by IdDRbsRequiredToBeModifiedItem.ValidateAll()
// if the designated constraints aren't met.
type IdDRbsRequiredToBeModifiedItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdDRbsRequiredToBeModifiedItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdDRbsRequiredToBeModifiedItemMultiError) AllErrors() []error { return m }

// IdDRbsRequiredToBeModifiedItemValidationError is the validation error
// returned by IdDRbsRequiredToBeModifiedItem.Validate if the designated
// constraints aren't met.
type IdDRbsRequiredToBeModifiedItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdDRbsRequiredToBeModifiedItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdDRbsRequiredToBeModifiedItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdDRbsRequiredToBeModifiedItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdDRbsRequiredToBeModifiedItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdDRbsRequiredToBeModifiedItemValidationError) ErrorName() string {
	return "IdDRbsRequiredToBeModifiedItemValidationError"
}

// Error satisfies the builtin error interface
func (e IdDRbsRequiredToBeModifiedItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdDRbsRequiredToBeModifiedItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdDRbsRequiredToBeModifiedItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdDRbsRequiredToBeModifiedItemValidationError{}

// Validate checks the field values on IdDRbsRequiredToBeModifiedList with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdDRbsRequiredToBeModifiedList) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdDRbsRequiredToBeModifiedList with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// IdDRbsRequiredToBeModifiedListMultiError, or nil if none found.
func (m *IdDRbsRequiredToBeModifiedList) ValidateAll() error {
	return m.validate(true)
}

func (m *IdDRbsRequiredToBeModifiedList) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 23 {
		err := IdDRbsRequiredToBeModifiedListValidationError{
			field:  "Value",
			reason: "value must equal 23",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdDRbsRequiredToBeModifiedListMultiError(errors)
	}

	return nil
}

// IdDRbsRequiredToBeModifiedListMultiError is an error wrapping multiple
// validation errors returned by IdDRbsRequiredToBeModifiedList.ValidateAll()
// if the designated constraints aren't met.
type IdDRbsRequiredToBeModifiedListMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdDRbsRequiredToBeModifiedListMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdDRbsRequiredToBeModifiedListMultiError) AllErrors() []error { return m }

// IdDRbsRequiredToBeModifiedListValidationError is the validation error
// returned by IdDRbsRequiredToBeModifiedList.Validate if the designated
// constraints aren't met.
type IdDRbsRequiredToBeModifiedListValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdDRbsRequiredToBeModifiedListValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdDRbsRequiredToBeModifiedListValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdDRbsRequiredToBeModifiedListValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdDRbsRequiredToBeModifiedListValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdDRbsRequiredToBeModifiedListValidationError) ErrorName() string {
	return "IdDRbsRequiredToBeModifiedListValidationError"
}

// Error satisfies the builtin error interface
func (e IdDRbsRequiredToBeModifiedListValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdDRbsRequiredToBeModifiedList.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdDRbsRequiredToBeModifiedListValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdDRbsRequiredToBeModifiedListValidationError{}

// Validate checks the field values on IdDRbsRequiredToBeReleasedItem with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdDRbsRequiredToBeReleasedItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdDRbsRequiredToBeReleasedItem with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// IdDRbsRequiredToBeReleasedItemMultiError, or nil if none found.
func (m *IdDRbsRequiredToBeReleasedItem) ValidateAll() error {
	return m.validate(true)
}

func (m *IdDRbsRequiredToBeReleasedItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 24 {
		err := IdDRbsRequiredToBeReleasedItemValidationError{
			field:  "Value",
			reason: "value must equal 24",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdDRbsRequiredToBeReleasedItemMultiError(errors)
	}

	return nil
}

// IdDRbsRequiredToBeReleasedItemMultiError is an error wrapping multiple
// validation errors returned by IdDRbsRequiredToBeReleasedItem.ValidateAll()
// if the designated constraints aren't met.
type IdDRbsRequiredToBeReleasedItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdDRbsRequiredToBeReleasedItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdDRbsRequiredToBeReleasedItemMultiError) AllErrors() []error { return m }

// IdDRbsRequiredToBeReleasedItemValidationError is the validation error
// returned by IdDRbsRequiredToBeReleasedItem.Validate if the designated
// constraints aren't met.
type IdDRbsRequiredToBeReleasedItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdDRbsRequiredToBeReleasedItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdDRbsRequiredToBeReleasedItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdDRbsRequiredToBeReleasedItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdDRbsRequiredToBeReleasedItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdDRbsRequiredToBeReleasedItemValidationError) ErrorName() string {
	return "IdDRbsRequiredToBeReleasedItemValidationError"
}

// Error satisfies the builtin error interface
func (e IdDRbsRequiredToBeReleasedItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdDRbsRequiredToBeReleasedItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdDRbsRequiredToBeReleasedItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdDRbsRequiredToBeReleasedItemValidationError{}

// Validate checks the field values on IdDRbsRequiredToBeReleasedList with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdDRbsRequiredToBeReleasedList) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdDRbsRequiredToBeReleasedList with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// IdDRbsRequiredToBeReleasedListMultiError, or nil if none found.
func (m *IdDRbsRequiredToBeReleasedList) ValidateAll() error {
	return m.validate(true)
}

func (m *IdDRbsRequiredToBeReleasedList) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 25 {
		err := IdDRbsRequiredToBeReleasedListValidationError{
			field:  "Value",
			reason: "value must equal 25",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdDRbsRequiredToBeReleasedListMultiError(errors)
	}

	return nil
}

// IdDRbsRequiredToBeReleasedListMultiError is an error wrapping multiple
// validation errors returned by IdDRbsRequiredToBeReleasedList.ValidateAll()
// if the designated constraints aren't met.
type IdDRbsRequiredToBeReleasedListMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdDRbsRequiredToBeReleasedListMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdDRbsRequiredToBeReleasedListMultiError) AllErrors() []error { return m }

// IdDRbsRequiredToBeReleasedListValidationError is the validation error
// returned by IdDRbsRequiredToBeReleasedList.Validate if the designated
// constraints aren't met.
type IdDRbsRequiredToBeReleasedListValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdDRbsRequiredToBeReleasedListValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdDRbsRequiredToBeReleasedListValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdDRbsRequiredToBeReleasedListValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdDRbsRequiredToBeReleasedListValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdDRbsRequiredToBeReleasedListValidationError) ErrorName() string {
	return "IdDRbsRequiredToBeReleasedListValidationError"
}

// Error satisfies the builtin error interface
func (e IdDRbsRequiredToBeReleasedListValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdDRbsRequiredToBeReleasedList.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdDRbsRequiredToBeReleasedListValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdDRbsRequiredToBeReleasedListValidationError{}

// Validate checks the field values on IdDRbsSetupItem with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *IdDRbsSetupItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdDRbsSetupItem with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdDRbsSetupItemMultiError, or nil if none found.
func (m *IdDRbsSetupItem) ValidateAll() error {
	return m.validate(true)
}

func (m *IdDRbsSetupItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 26 {
		err := IdDRbsSetupItemValidationError{
			field:  "Value",
			reason: "value must equal 26",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdDRbsSetupItemMultiError(errors)
	}

	return nil
}

// IdDRbsSetupItemMultiError is an error wrapping multiple validation errors
// returned by IdDRbsSetupItem.ValidateAll() if the designated constraints
// aren't met.
type IdDRbsSetupItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdDRbsSetupItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdDRbsSetupItemMultiError) AllErrors() []error { return m }

// IdDRbsSetupItemValidationError is the validation error returned by
// IdDRbsSetupItem.Validate if the designated constraints aren't met.
type IdDRbsSetupItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdDRbsSetupItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdDRbsSetupItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdDRbsSetupItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdDRbsSetupItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdDRbsSetupItemValidationError) ErrorName() string { return "IdDRbsSetupItemValidationError" }

// Error satisfies the builtin error interface
func (e IdDRbsSetupItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdDRbsSetupItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdDRbsSetupItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdDRbsSetupItemValidationError{}

// Validate checks the field values on IdDRbsSetupList with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *IdDRbsSetupList) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdDRbsSetupList with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdDRbsSetupListMultiError, or nil if none found.
func (m *IdDRbsSetupList) ValidateAll() error {
	return m.validate(true)
}

func (m *IdDRbsSetupList) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 27 {
		err := IdDRbsSetupListValidationError{
			field:  "Value",
			reason: "value must equal 27",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdDRbsSetupListMultiError(errors)
	}

	return nil
}

// IdDRbsSetupListMultiError is an error wrapping multiple validation errors
// returned by IdDRbsSetupList.ValidateAll() if the designated constraints
// aren't met.
type IdDRbsSetupListMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdDRbsSetupListMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdDRbsSetupListMultiError) AllErrors() []error { return m }

// IdDRbsSetupListValidationError is the validation error returned by
// IdDRbsSetupList.Validate if the designated constraints aren't met.
type IdDRbsSetupListValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdDRbsSetupListValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdDRbsSetupListValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdDRbsSetupListValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdDRbsSetupListValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdDRbsSetupListValidationError) ErrorName() string { return "IdDRbsSetupListValidationError" }

// Error satisfies the builtin error interface
func (e IdDRbsSetupListValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdDRbsSetupList.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdDRbsSetupListValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdDRbsSetupListValidationError{}

// Validate checks the field values on IdDRbsSetupModItem with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdDRbsSetupModItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdDRbsSetupModItem with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdDRbsSetupModItemMultiError, or nil if none found.
func (m *IdDRbsSetupModItem) ValidateAll() error {
	return m.validate(true)
}

func (m *IdDRbsSetupModItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 28 {
		err := IdDRbsSetupModItemValidationError{
			field:  "Value",
			reason: "value must equal 28",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdDRbsSetupModItemMultiError(errors)
	}

	return nil
}

// IdDRbsSetupModItemMultiError is an error wrapping multiple validation errors
// returned by IdDRbsSetupModItem.ValidateAll() if the designated constraints
// aren't met.
type IdDRbsSetupModItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdDRbsSetupModItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdDRbsSetupModItemMultiError) AllErrors() []error { return m }

// IdDRbsSetupModItemValidationError is the validation error returned by
// IdDRbsSetupModItem.Validate if the designated constraints aren't met.
type IdDRbsSetupModItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdDRbsSetupModItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdDRbsSetupModItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdDRbsSetupModItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdDRbsSetupModItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdDRbsSetupModItemValidationError) ErrorName() string {
	return "IdDRbsSetupModItemValidationError"
}

// Error satisfies the builtin error interface
func (e IdDRbsSetupModItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdDRbsSetupModItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdDRbsSetupModItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdDRbsSetupModItemValidationError{}

// Validate checks the field values on IdDRbsSetupModList with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdDRbsSetupModList) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdDRbsSetupModList with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdDRbsSetupModListMultiError, or nil if none found.
func (m *IdDRbsSetupModList) ValidateAll() error {
	return m.validate(true)
}

func (m *IdDRbsSetupModList) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 29 {
		err := IdDRbsSetupModListValidationError{
			field:  "Value",
			reason: "value must equal 29",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdDRbsSetupModListMultiError(errors)
	}

	return nil
}

// IdDRbsSetupModListMultiError is an error wrapping multiple validation errors
// returned by IdDRbsSetupModList.ValidateAll() if the designated constraints
// aren't met.
type IdDRbsSetupModListMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdDRbsSetupModListMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdDRbsSetupModListMultiError) AllErrors() []error { return m }

// IdDRbsSetupModListValidationError is the validation error returned by
// IdDRbsSetupModList.Validate if the designated constraints aren't met.
type IdDRbsSetupModListValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdDRbsSetupModListValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdDRbsSetupModListValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdDRbsSetupModListValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdDRbsSetupModListValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdDRbsSetupModListValidationError) ErrorName() string {
	return "IdDRbsSetupModListValidationError"
}

// Error satisfies the builtin error interface
func (e IdDRbsSetupModListValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdDRbsSetupModList.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdDRbsSetupModListValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdDRbsSetupModListValidationError{}

// Validate checks the field values on IdDRbsToBeModifiedItem with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdDRbsToBeModifiedItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdDRbsToBeModifiedItem with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdDRbsToBeModifiedItemMultiError, or nil if none found.
func (m *IdDRbsToBeModifiedItem) ValidateAll() error {
	return m.validate(true)
}

func (m *IdDRbsToBeModifiedItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 30 {
		err := IdDRbsToBeModifiedItemValidationError{
			field:  "Value",
			reason: "value must equal 30",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdDRbsToBeModifiedItemMultiError(errors)
	}

	return nil
}

// IdDRbsToBeModifiedItemMultiError is an error wrapping multiple validation
// errors returned by IdDRbsToBeModifiedItem.ValidateAll() if the designated
// constraints aren't met.
type IdDRbsToBeModifiedItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdDRbsToBeModifiedItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdDRbsToBeModifiedItemMultiError) AllErrors() []error { return m }

// IdDRbsToBeModifiedItemValidationError is the validation error returned by
// IdDRbsToBeModifiedItem.Validate if the designated constraints aren't met.
type IdDRbsToBeModifiedItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdDRbsToBeModifiedItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdDRbsToBeModifiedItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdDRbsToBeModifiedItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdDRbsToBeModifiedItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdDRbsToBeModifiedItemValidationError) ErrorName() string {
	return "IdDRbsToBeModifiedItemValidationError"
}

// Error satisfies the builtin error interface
func (e IdDRbsToBeModifiedItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdDRbsToBeModifiedItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdDRbsToBeModifiedItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdDRbsToBeModifiedItemValidationError{}

// Validate checks the field values on IdDRbsToBeModifiedList with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdDRbsToBeModifiedList) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdDRbsToBeModifiedList with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdDRbsToBeModifiedListMultiError, or nil if none found.
func (m *IdDRbsToBeModifiedList) ValidateAll() error {
	return m.validate(true)
}

func (m *IdDRbsToBeModifiedList) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 31 {
		err := IdDRbsToBeModifiedListValidationError{
			field:  "Value",
			reason: "value must equal 31",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdDRbsToBeModifiedListMultiError(errors)
	}

	return nil
}

// IdDRbsToBeModifiedListMultiError is an error wrapping multiple validation
// errors returned by IdDRbsToBeModifiedList.ValidateAll() if the designated
// constraints aren't met.
type IdDRbsToBeModifiedListMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdDRbsToBeModifiedListMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdDRbsToBeModifiedListMultiError) AllErrors() []error { return m }

// IdDRbsToBeModifiedListValidationError is the validation error returned by
// IdDRbsToBeModifiedList.Validate if the designated constraints aren't met.
type IdDRbsToBeModifiedListValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdDRbsToBeModifiedListValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdDRbsToBeModifiedListValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdDRbsToBeModifiedListValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdDRbsToBeModifiedListValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdDRbsToBeModifiedListValidationError) ErrorName() string {
	return "IdDRbsToBeModifiedListValidationError"
}

// Error satisfies the builtin error interface
func (e IdDRbsToBeModifiedListValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdDRbsToBeModifiedList.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdDRbsToBeModifiedListValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdDRbsToBeModifiedListValidationError{}

// Validate checks the field values on IdDRbsToBeReleasedItem with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdDRbsToBeReleasedItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdDRbsToBeReleasedItem with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdDRbsToBeReleasedItemMultiError, or nil if none found.
func (m *IdDRbsToBeReleasedItem) ValidateAll() error {
	return m.validate(true)
}

func (m *IdDRbsToBeReleasedItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 32 {
		err := IdDRbsToBeReleasedItemValidationError{
			field:  "Value",
			reason: "value must equal 32",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdDRbsToBeReleasedItemMultiError(errors)
	}

	return nil
}

// IdDRbsToBeReleasedItemMultiError is an error wrapping multiple validation
// errors returned by IdDRbsToBeReleasedItem.ValidateAll() if the designated
// constraints aren't met.
type IdDRbsToBeReleasedItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdDRbsToBeReleasedItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdDRbsToBeReleasedItemMultiError) AllErrors() []error { return m }

// IdDRbsToBeReleasedItemValidationError is the validation error returned by
// IdDRbsToBeReleasedItem.Validate if the designated constraints aren't met.
type IdDRbsToBeReleasedItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdDRbsToBeReleasedItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdDRbsToBeReleasedItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdDRbsToBeReleasedItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdDRbsToBeReleasedItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdDRbsToBeReleasedItemValidationError) ErrorName() string {
	return "IdDRbsToBeReleasedItemValidationError"
}

// Error satisfies the builtin error interface
func (e IdDRbsToBeReleasedItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdDRbsToBeReleasedItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdDRbsToBeReleasedItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdDRbsToBeReleasedItemValidationError{}

// Validate checks the field values on IdDRbsToBeReleasedList with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdDRbsToBeReleasedList) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdDRbsToBeReleasedList with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdDRbsToBeReleasedListMultiError, or nil if none found.
func (m *IdDRbsToBeReleasedList) ValidateAll() error {
	return m.validate(true)
}

func (m *IdDRbsToBeReleasedList) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 33 {
		err := IdDRbsToBeReleasedListValidationError{
			field:  "Value",
			reason: "value must equal 33",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdDRbsToBeReleasedListMultiError(errors)
	}

	return nil
}

// IdDRbsToBeReleasedListMultiError is an error wrapping multiple validation
// errors returned by IdDRbsToBeReleasedList.ValidateAll() if the designated
// constraints aren't met.
type IdDRbsToBeReleasedListMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdDRbsToBeReleasedListMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdDRbsToBeReleasedListMultiError) AllErrors() []error { return m }

// IdDRbsToBeReleasedListValidationError is the validation error returned by
// IdDRbsToBeReleasedList.Validate if the designated constraints aren't met.
type IdDRbsToBeReleasedListValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdDRbsToBeReleasedListValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdDRbsToBeReleasedListValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdDRbsToBeReleasedListValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdDRbsToBeReleasedListValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdDRbsToBeReleasedListValidationError) ErrorName() string {
	return "IdDRbsToBeReleasedListValidationError"
}

// Error satisfies the builtin error interface
func (e IdDRbsToBeReleasedListValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdDRbsToBeReleasedList.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdDRbsToBeReleasedListValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdDRbsToBeReleasedListValidationError{}

// Validate checks the field values on IdDRbsToBeSetupItem with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdDRbsToBeSetupItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdDRbsToBeSetupItem with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdDRbsToBeSetupItemMultiError, or nil if none found.
func (m *IdDRbsToBeSetupItem) ValidateAll() error {
	return m.validate(true)
}

func (m *IdDRbsToBeSetupItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 34 {
		err := IdDRbsToBeSetupItemValidationError{
			field:  "Value",
			reason: "value must equal 34",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdDRbsToBeSetupItemMultiError(errors)
	}

	return nil
}

// IdDRbsToBeSetupItemMultiError is an error wrapping multiple validation
// errors returned by IdDRbsToBeSetupItem.ValidateAll() if the designated
// constraints aren't met.
type IdDRbsToBeSetupItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdDRbsToBeSetupItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdDRbsToBeSetupItemMultiError) AllErrors() []error { return m }

// IdDRbsToBeSetupItemValidationError is the validation error returned by
// IdDRbsToBeSetupItem.Validate if the designated constraints aren't met.
type IdDRbsToBeSetupItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdDRbsToBeSetupItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdDRbsToBeSetupItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdDRbsToBeSetupItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdDRbsToBeSetupItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdDRbsToBeSetupItemValidationError) ErrorName() string {
	return "IdDRbsToBeSetupItemValidationError"
}

// Error satisfies the builtin error interface
func (e IdDRbsToBeSetupItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdDRbsToBeSetupItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdDRbsToBeSetupItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdDRbsToBeSetupItemValidationError{}

// Validate checks the field values on IdDRbsToBeSetupList with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdDRbsToBeSetupList) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdDRbsToBeSetupList with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdDRbsToBeSetupListMultiError, or nil if none found.
func (m *IdDRbsToBeSetupList) ValidateAll() error {
	return m.validate(true)
}

func (m *IdDRbsToBeSetupList) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 35 {
		err := IdDRbsToBeSetupListValidationError{
			field:  "Value",
			reason: "value must equal 35",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdDRbsToBeSetupListMultiError(errors)
	}

	return nil
}

// IdDRbsToBeSetupListMultiError is an error wrapping multiple validation
// errors returned by IdDRbsToBeSetupList.ValidateAll() if the designated
// constraints aren't met.
type IdDRbsToBeSetupListMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdDRbsToBeSetupListMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdDRbsToBeSetupListMultiError) AllErrors() []error { return m }

// IdDRbsToBeSetupListValidationError is the validation error returned by
// IdDRbsToBeSetupList.Validate if the designated constraints aren't met.
type IdDRbsToBeSetupListValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdDRbsToBeSetupListValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdDRbsToBeSetupListValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdDRbsToBeSetupListValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdDRbsToBeSetupListValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdDRbsToBeSetupListValidationError) ErrorName() string {
	return "IdDRbsToBeSetupListValidationError"
}

// Error satisfies the builtin error interface
func (e IdDRbsToBeSetupListValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdDRbsToBeSetupList.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdDRbsToBeSetupListValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdDRbsToBeSetupListValidationError{}

// Validate checks the field values on IdDRbsToBeSetupModItem with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdDRbsToBeSetupModItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdDRbsToBeSetupModItem with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdDRbsToBeSetupModItemMultiError, or nil if none found.
func (m *IdDRbsToBeSetupModItem) ValidateAll() error {
	return m.validate(true)
}

func (m *IdDRbsToBeSetupModItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 36 {
		err := IdDRbsToBeSetupModItemValidationError{
			field:  "Value",
			reason: "value must equal 36",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdDRbsToBeSetupModItemMultiError(errors)
	}

	return nil
}

// IdDRbsToBeSetupModItemMultiError is an error wrapping multiple validation
// errors returned by IdDRbsToBeSetupModItem.ValidateAll() if the designated
// constraints aren't met.
type IdDRbsToBeSetupModItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdDRbsToBeSetupModItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdDRbsToBeSetupModItemMultiError) AllErrors() []error { return m }

// IdDRbsToBeSetupModItemValidationError is the validation error returned by
// IdDRbsToBeSetupModItem.Validate if the designated constraints aren't met.
type IdDRbsToBeSetupModItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdDRbsToBeSetupModItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdDRbsToBeSetupModItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdDRbsToBeSetupModItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdDRbsToBeSetupModItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdDRbsToBeSetupModItemValidationError) ErrorName() string {
	return "IdDRbsToBeSetupModItemValidationError"
}

// Error satisfies the builtin error interface
func (e IdDRbsToBeSetupModItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdDRbsToBeSetupModItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdDRbsToBeSetupModItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdDRbsToBeSetupModItemValidationError{}

// Validate checks the field values on IdDRbsToBeSetupModList with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdDRbsToBeSetupModList) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdDRbsToBeSetupModList with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdDRbsToBeSetupModListMultiError, or nil if none found.
func (m *IdDRbsToBeSetupModList) ValidateAll() error {
	return m.validate(true)
}

func (m *IdDRbsToBeSetupModList) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 37 {
		err := IdDRbsToBeSetupModListValidationError{
			field:  "Value",
			reason: "value must equal 37",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdDRbsToBeSetupModListMultiError(errors)
	}

	return nil
}

// IdDRbsToBeSetupModListMultiError is an error wrapping multiple validation
// errors returned by IdDRbsToBeSetupModList.ValidateAll() if the designated
// constraints aren't met.
type IdDRbsToBeSetupModListMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdDRbsToBeSetupModListMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdDRbsToBeSetupModListMultiError) AllErrors() []error { return m }

// IdDRbsToBeSetupModListValidationError is the validation error returned by
// IdDRbsToBeSetupModList.Validate if the designated constraints aren't met.
type IdDRbsToBeSetupModListValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdDRbsToBeSetupModListValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdDRbsToBeSetupModListValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdDRbsToBeSetupModListValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdDRbsToBeSetupModListValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdDRbsToBeSetupModListValidationError) ErrorName() string {
	return "IdDRbsToBeSetupModListValidationError"
}

// Error satisfies the builtin error interface
func (e IdDRbsToBeSetupModListValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdDRbsToBeSetupModList.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdDRbsToBeSetupModListValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdDRbsToBeSetupModListValidationError{}

// Validate checks the field values on IdDRxcycle with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *IdDRxcycle) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdDRxcycle with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in IdDRxcycleMultiError, or
// nil if none found.
func (m *IdDRxcycle) ValidateAll() error {
	return m.validate(true)
}

func (m *IdDRxcycle) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 38 {
		err := IdDRxcycleValidationError{
			field:  "Value",
			reason: "value must equal 38",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdDRxcycleMultiError(errors)
	}

	return nil
}

// IdDRxcycleMultiError is an error wrapping multiple validation errors
// returned by IdDRxcycle.ValidateAll() if the designated constraints aren't met.
type IdDRxcycleMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdDRxcycleMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdDRxcycleMultiError) AllErrors() []error { return m }

// IdDRxcycleValidationError is the validation error returned by
// IdDRxcycle.Validate if the designated constraints aren't met.
type IdDRxcycleValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdDRxcycleValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdDRxcycleValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdDRxcycleValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdDRxcycleValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdDRxcycleValidationError) ErrorName() string { return "IdDRxcycleValidationError" }

// Error satisfies the builtin error interface
func (e IdDRxcycleValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdDRxcycle.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdDRxcycleValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdDRxcycleValidationError{}

// Validate checks the field values on IdDUtoCurrcinformation with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdDUtoCurrcinformation) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdDUtoCurrcinformation with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdDUtoCurrcinformationMultiError, or nil if none found.
func (m *IdDUtoCurrcinformation) ValidateAll() error {
	return m.validate(true)
}

func (m *IdDUtoCurrcinformation) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 39 {
		err := IdDUtoCurrcinformationValidationError{
			field:  "Value",
			reason: "value must equal 39",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdDUtoCurrcinformationMultiError(errors)
	}

	return nil
}

// IdDUtoCurrcinformationMultiError is an error wrapping multiple validation
// errors returned by IdDUtoCurrcinformation.ValidateAll() if the designated
// constraints aren't met.
type IdDUtoCurrcinformationMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdDUtoCurrcinformationMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdDUtoCurrcinformationMultiError) AllErrors() []error { return m }

// IdDUtoCurrcinformationValidationError is the validation error returned by
// IdDUtoCurrcinformation.Validate if the designated constraints aren't met.
type IdDUtoCurrcinformationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdDUtoCurrcinformationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdDUtoCurrcinformationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdDUtoCurrcinformationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdDUtoCurrcinformationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdDUtoCurrcinformationValidationError) ErrorName() string {
	return "IdDUtoCurrcinformationValidationError"
}

// Error satisfies the builtin error interface
func (e IdDUtoCurrcinformationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdDUtoCurrcinformation.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdDUtoCurrcinformationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdDUtoCurrcinformationValidationError{}

// Validate checks the field values on IdgNbCUUEF1ApID with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *IdgNbCUUEF1ApID) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdgNbCUUEF1ApID with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdgNbCUUEF1ApIDMultiError, or nil if none found.
func (m *IdgNbCUUEF1ApID) ValidateAll() error {
	return m.validate(true)
}

func (m *IdgNbCUUEF1ApID) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 40 {
		err := IdgNbCUUEF1ApIDValidationError{
			field:  "Value",
			reason: "value must equal 40",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdgNbCUUEF1ApIDMultiError(errors)
	}

	return nil
}

// IdgNbCUUEF1ApIDMultiError is an error wrapping multiple validation errors
// returned by IdgNbCUUEF1ApID.ValidateAll() if the designated constraints
// aren't met.
type IdgNbCUUEF1ApIDMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdgNbCUUEF1ApIDMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdgNbCUUEF1ApIDMultiError) AllErrors() []error { return m }

// IdgNbCUUEF1ApIDValidationError is the validation error returned by
// IdgNbCUUEF1ApID.Validate if the designated constraints aren't met.
type IdgNbCUUEF1ApIDValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdgNbCUUEF1ApIDValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdgNbCUUEF1ApIDValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdgNbCUUEF1ApIDValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdgNbCUUEF1ApIDValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdgNbCUUEF1ApIDValidationError) ErrorName() string { return "IdgNbCUUEF1ApIDValidationError" }

// Error satisfies the builtin error interface
func (e IdgNbCUUEF1ApIDValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdgNbCUUEF1ApID.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdgNbCUUEF1ApIDValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdgNbCUUEF1ApIDValidationError{}

// Validate checks the field values on IdgNbDUUEF1ApID with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *IdgNbDUUEF1ApID) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdgNbDUUEF1ApID with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdgNbDUUEF1ApIDMultiError, or nil if none found.
func (m *IdgNbDUUEF1ApID) ValidateAll() error {
	return m.validate(true)
}

func (m *IdgNbDUUEF1ApID) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 41 {
		err := IdgNbDUUEF1ApIDValidationError{
			field:  "Value",
			reason: "value must equal 41",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdgNbDUUEF1ApIDMultiError(errors)
	}

	return nil
}

// IdgNbDUUEF1ApIDMultiError is an error wrapping multiple validation errors
// returned by IdgNbDUUEF1ApID.ValidateAll() if the designated constraints
// aren't met.
type IdgNbDUUEF1ApIDMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdgNbDUUEF1ApIDMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdgNbDUUEF1ApIDMultiError) AllErrors() []error { return m }

// IdgNbDUUEF1ApIDValidationError is the validation error returned by
// IdgNbDUUEF1ApID.Validate if the designated constraints aren't met.
type IdgNbDUUEF1ApIDValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdgNbDUUEF1ApIDValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdgNbDUUEF1ApIDValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdgNbDUUEF1ApIDValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdgNbDUUEF1ApIDValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdgNbDUUEF1ApIDValidationError) ErrorName() string { return "IdgNbDUUEF1ApIDValidationError" }

// Error satisfies the builtin error interface
func (e IdgNbDUUEF1ApIDValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdgNbDUUEF1ApID.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdgNbDUUEF1ApIDValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdgNbDUUEF1ApIDValidationError{}

// Validate checks the field values on IdgNbDUID with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *IdgNbDUID) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdgNbDUID with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in IdgNbDUIDMultiError, or nil
// if none found.
func (m *IdgNbDUID) ValidateAll() error {
	return m.validate(true)
}

func (m *IdgNbDUID) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 42 {
		err := IdgNbDUIDValidationError{
			field:  "Value",
			reason: "value must equal 42",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdgNbDUIDMultiError(errors)
	}

	return nil
}

// IdgNbDUIDMultiError is an error wrapping multiple validation errors returned
// by IdgNbDUID.ValidateAll() if the designated constraints aren't met.
type IdgNbDUIDMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdgNbDUIDMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdgNbDUIDMultiError) AllErrors() []error { return m }

// IdgNbDUIDValidationError is the validation error returned by
// IdgNbDUID.Validate if the designated constraints aren't met.
type IdgNbDUIDValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdgNbDUIDValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdgNbDUIDValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdgNbDUIDValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdgNbDUIDValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdgNbDUIDValidationError) ErrorName() string { return "IdgNbDUIDValidationError" }

// Error satisfies the builtin error interface
func (e IdgNbDUIDValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdgNbDUID.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdgNbDUIDValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdgNbDUIDValidationError{}

// Validate checks the field values on IdGNbDUServedCellsItem with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdGNbDUServedCellsItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdGNbDUServedCellsItem with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdGNbDUServedCellsItemMultiError, or nil if none found.
func (m *IdGNbDUServedCellsItem) ValidateAll() error {
	return m.validate(true)
}

func (m *IdGNbDUServedCellsItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 43 {
		err := IdGNbDUServedCellsItemValidationError{
			field:  "Value",
			reason: "value must equal 43",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdGNbDUServedCellsItemMultiError(errors)
	}

	return nil
}

// IdGNbDUServedCellsItemMultiError is an error wrapping multiple validation
// errors returned by IdGNbDUServedCellsItem.ValidateAll() if the designated
// constraints aren't met.
type IdGNbDUServedCellsItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdGNbDUServedCellsItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdGNbDUServedCellsItemMultiError) AllErrors() []error { return m }

// IdGNbDUServedCellsItemValidationError is the validation error returned by
// IdGNbDUServedCellsItem.Validate if the designated constraints aren't met.
type IdGNbDUServedCellsItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdGNbDUServedCellsItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdGNbDUServedCellsItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdGNbDUServedCellsItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdGNbDUServedCellsItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdGNbDUServedCellsItemValidationError) ErrorName() string {
	return "IdGNbDUServedCellsItemValidationError"
}

// Error satisfies the builtin error interface
func (e IdGNbDUServedCellsItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdGNbDUServedCellsItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdGNbDUServedCellsItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdGNbDUServedCellsItemValidationError{}

// Validate checks the field values on IdgNbDUServedCellsList with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdgNbDUServedCellsList) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdgNbDUServedCellsList with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdgNbDUServedCellsListMultiError, or nil if none found.
func (m *IdgNbDUServedCellsList) ValidateAll() error {
	return m.validate(true)
}

func (m *IdgNbDUServedCellsList) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 44 {
		err := IdgNbDUServedCellsListValidationError{
			field:  "Value",
			reason: "value must equal 44",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdgNbDUServedCellsListMultiError(errors)
	}

	return nil
}

// IdgNbDUServedCellsListMultiError is an error wrapping multiple validation
// errors returned by IdgNbDUServedCellsList.ValidateAll() if the designated
// constraints aren't met.
type IdgNbDUServedCellsListMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdgNbDUServedCellsListMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdgNbDUServedCellsListMultiError) AllErrors() []error { return m }

// IdgNbDUServedCellsListValidationError is the validation error returned by
// IdgNbDUServedCellsList.Validate if the designated constraints aren't met.
type IdgNbDUServedCellsListValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdgNbDUServedCellsListValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdgNbDUServedCellsListValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdgNbDUServedCellsListValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdgNbDUServedCellsListValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdgNbDUServedCellsListValidationError) ErrorName() string {
	return "IdgNbDUServedCellsListValidationError"
}

// Error satisfies the builtin error interface
func (e IdgNbDUServedCellsListValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdgNbDUServedCellsList.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdgNbDUServedCellsListValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdgNbDUServedCellsListValidationError{}

// Validate checks the field values on IdgNbDUName with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *IdgNbDUName) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdgNbDUName with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in IdgNbDUNameMultiError, or
// nil if none found.
func (m *IdgNbDUName) ValidateAll() error {
	return m.validate(true)
}

func (m *IdgNbDUName) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 45 {
		err := IdgNbDUNameValidationError{
			field:  "Value",
			reason: "value must equal 45",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdgNbDUNameMultiError(errors)
	}

	return nil
}

// IdgNbDUNameMultiError is an error wrapping multiple validation errors
// returned by IdgNbDUName.ValidateAll() if the designated constraints aren't met.
type IdgNbDUNameMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdgNbDUNameMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdgNbDUNameMultiError) AllErrors() []error { return m }

// IdgNbDUNameValidationError is the validation error returned by
// IdgNbDUName.Validate if the designated constraints aren't met.
type IdgNbDUNameValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdgNbDUNameValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdgNbDUNameValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdgNbDUNameValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdgNbDUNameValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdgNbDUNameValidationError) ErrorName() string { return "IdgNbDUNameValidationError" }

// Error satisfies the builtin error interface
func (e IdgNbDUNameValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdgNbDUName.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdgNbDUNameValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdgNbDUNameValidationError{}

// Validate checks the field values on IdNRcellId with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *IdNRcellId) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdNRcellId with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in IdNRcellIdMultiError, or
// nil if none found.
func (m *IdNRcellId) ValidateAll() error {
	return m.validate(true)
}

func (m *IdNRcellId) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 46 {
		err := IdNRcellIdValidationError{
			field:  "Value",
			reason: "value must equal 46",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdNRcellIdMultiError(errors)
	}

	return nil
}

// IdNRcellIdMultiError is an error wrapping multiple validation errors
// returned by IdNRcellId.ValidateAll() if the designated constraints aren't met.
type IdNRcellIdMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdNRcellIdMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdNRcellIdMultiError) AllErrors() []error { return m }

// IdNRcellIdValidationError is the validation error returned by
// IdNRcellId.Validate if the designated constraints aren't met.
type IdNRcellIdValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdNRcellIdValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdNRcellIdValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdNRcellIdValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdNRcellIdValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdNRcellIdValidationError) ErrorName() string { return "IdNRcellIdValidationError" }

// Error satisfies the builtin error interface
func (e IdNRcellIdValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdNRcellId.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdNRcellIdValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdNRcellIdValidationError{}

// Validate checks the field values on IdoldgNbDUUEF1ApID with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdoldgNbDUUEF1ApID) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdoldgNbDUUEF1ApID with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdoldgNbDUUEF1ApIDMultiError, or nil if none found.
func (m *IdoldgNbDUUEF1ApID) ValidateAll() error {
	return m.validate(true)
}

func (m *IdoldgNbDUUEF1ApID) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 47 {
		err := IdoldgNbDUUEF1ApIDValidationError{
			field:  "Value",
			reason: "value must equal 47",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdoldgNbDUUEF1ApIDMultiError(errors)
	}

	return nil
}

// IdoldgNbDUUEF1ApIDMultiError is an error wrapping multiple validation errors
// returned by IdoldgNbDUUEF1ApID.ValidateAll() if the designated constraints
// aren't met.
type IdoldgNbDUUEF1ApIDMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdoldgNbDUUEF1ApIDMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdoldgNbDUUEF1ApIDMultiError) AllErrors() []error { return m }

// IdoldgNbDUUEF1ApIDValidationError is the validation error returned by
// IdoldgNbDUUEF1ApID.Validate if the designated constraints aren't met.
type IdoldgNbDUUEF1ApIDValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdoldgNbDUUEF1ApIDValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdoldgNbDUUEF1ApIDValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdoldgNbDUUEF1ApIDValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdoldgNbDUUEF1ApIDValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdoldgNbDUUEF1ApIDValidationError) ErrorName() string {
	return "IdoldgNbDUUEF1ApIDValidationError"
}

// Error satisfies the builtin error interface
func (e IdoldgNbDUUEF1ApIDValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdoldgNbDUUEF1ApID.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdoldgNbDUUEF1ApIDValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdoldgNbDUUEF1ApIDValidationError{}

// Validate checks the field values on IdResetType with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *IdResetType) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdResetType with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in IdResetTypeMultiError, or
// nil if none found.
func (m *IdResetType) ValidateAll() error {
	return m.validate(true)
}

func (m *IdResetType) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 48 {
		err := IdResetTypeValidationError{
			field:  "Value",
			reason: "value must equal 48",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdResetTypeMultiError(errors)
	}

	return nil
}

// IdResetTypeMultiError is an error wrapping multiple validation errors
// returned by IdResetType.ValidateAll() if the designated constraints aren't met.
type IdResetTypeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdResetTypeMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdResetTypeMultiError) AllErrors() []error { return m }

// IdResetTypeValidationError is the validation error returned by
// IdResetType.Validate if the designated constraints aren't met.
type IdResetTypeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdResetTypeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdResetTypeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdResetTypeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdResetTypeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdResetTypeValidationError) ErrorName() string { return "IdResetTypeValidationError" }

// Error satisfies the builtin error interface
func (e IdResetTypeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdResetType.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdResetTypeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdResetTypeValidationError{}

// Validate checks the field values on IdResourceCoordinationTransferContainer
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *IdResourceCoordinationTransferContainer) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// IdResourceCoordinationTransferContainer with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// IdResourceCoordinationTransferContainerMultiError, or nil if none found.
func (m *IdResourceCoordinationTransferContainer) ValidateAll() error {
	return m.validate(true)
}

func (m *IdResourceCoordinationTransferContainer) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 49 {
		err := IdResourceCoordinationTransferContainerValidationError{
			field:  "Value",
			reason: "value must equal 49",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdResourceCoordinationTransferContainerMultiError(errors)
	}

	return nil
}

// IdResourceCoordinationTransferContainerMultiError is an error wrapping
// multiple validation errors returned by
// IdResourceCoordinationTransferContainer.ValidateAll() if the designated
// constraints aren't met.
type IdResourceCoordinationTransferContainerMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdResourceCoordinationTransferContainerMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdResourceCoordinationTransferContainerMultiError) AllErrors() []error { return m }

// IdResourceCoordinationTransferContainerValidationError is the validation
// error returned by IdResourceCoordinationTransferContainer.Validate if the
// designated constraints aren't met.
type IdResourceCoordinationTransferContainerValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdResourceCoordinationTransferContainerValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdResourceCoordinationTransferContainerValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdResourceCoordinationTransferContainerValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdResourceCoordinationTransferContainerValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdResourceCoordinationTransferContainerValidationError) ErrorName() string {
	return "IdResourceCoordinationTransferContainerValidationError"
}

// Error satisfies the builtin error interface
func (e IdResourceCoordinationTransferContainerValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdResourceCoordinationTransferContainer.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdResourceCoordinationTransferContainerValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdResourceCoordinationTransferContainerValidationError{}

// Validate checks the field values on IdRRccontainer with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *IdRRccontainer) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdRRccontainer with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in IdRRccontainerMultiError,
// or nil if none found.
func (m *IdRRccontainer) ValidateAll() error {
	return m.validate(true)
}

func (m *IdRRccontainer) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 50 {
		err := IdRRccontainerValidationError{
			field:  "Value",
			reason: "value must equal 50",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdRRccontainerMultiError(errors)
	}

	return nil
}

// IdRRccontainerMultiError is an error wrapping multiple validation errors
// returned by IdRRccontainer.ValidateAll() if the designated constraints
// aren't met.
type IdRRccontainerMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdRRccontainerMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdRRccontainerMultiError) AllErrors() []error { return m }

// IdRRccontainerValidationError is the validation error returned by
// IdRRccontainer.Validate if the designated constraints aren't met.
type IdRRccontainerValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdRRccontainerValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdRRccontainerValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdRRccontainerValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdRRccontainerValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdRRccontainerValidationError) ErrorName() string { return "IdRRccontainerValidationError" }

// Error satisfies the builtin error interface
func (e IdRRccontainerValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdRRccontainer.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdRRccontainerValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdRRccontainerValidationError{}

// Validate checks the field values on IdSCellToBeRemovedItem with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdSCellToBeRemovedItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdSCellToBeRemovedItem with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdSCellToBeRemovedItemMultiError, or nil if none found.
func (m *IdSCellToBeRemovedItem) ValidateAll() error {
	return m.validate(true)
}

func (m *IdSCellToBeRemovedItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 51 {
		err := IdSCellToBeRemovedItemValidationError{
			field:  "Value",
			reason: "value must equal 51",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdSCellToBeRemovedItemMultiError(errors)
	}

	return nil
}

// IdSCellToBeRemovedItemMultiError is an error wrapping multiple validation
// errors returned by IdSCellToBeRemovedItem.ValidateAll() if the designated
// constraints aren't met.
type IdSCellToBeRemovedItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdSCellToBeRemovedItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdSCellToBeRemovedItemMultiError) AllErrors() []error { return m }

// IdSCellToBeRemovedItemValidationError is the validation error returned by
// IdSCellToBeRemovedItem.Validate if the designated constraints aren't met.
type IdSCellToBeRemovedItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdSCellToBeRemovedItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdSCellToBeRemovedItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdSCellToBeRemovedItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdSCellToBeRemovedItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdSCellToBeRemovedItemValidationError) ErrorName() string {
	return "IdSCellToBeRemovedItemValidationError"
}

// Error satisfies the builtin error interface
func (e IdSCellToBeRemovedItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdSCellToBeRemovedItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdSCellToBeRemovedItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdSCellToBeRemovedItemValidationError{}

// Validate checks the field values on IdSCellToBeRemovedList with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdSCellToBeRemovedList) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdSCellToBeRemovedList with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdSCellToBeRemovedListMultiError, or nil if none found.
func (m *IdSCellToBeRemovedList) ValidateAll() error {
	return m.validate(true)
}

func (m *IdSCellToBeRemovedList) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 52 {
		err := IdSCellToBeRemovedListValidationError{
			field:  "Value",
			reason: "value must equal 52",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdSCellToBeRemovedListMultiError(errors)
	}

	return nil
}

// IdSCellToBeRemovedListMultiError is an error wrapping multiple validation
// errors returned by IdSCellToBeRemovedList.ValidateAll() if the designated
// constraints aren't met.
type IdSCellToBeRemovedListMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdSCellToBeRemovedListMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdSCellToBeRemovedListMultiError) AllErrors() []error { return m }

// IdSCellToBeRemovedListValidationError is the validation error returned by
// IdSCellToBeRemovedList.Validate if the designated constraints aren't met.
type IdSCellToBeRemovedListValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdSCellToBeRemovedListValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdSCellToBeRemovedListValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdSCellToBeRemovedListValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdSCellToBeRemovedListValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdSCellToBeRemovedListValidationError) ErrorName() string {
	return "IdSCellToBeRemovedListValidationError"
}

// Error satisfies the builtin error interface
func (e IdSCellToBeRemovedListValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdSCellToBeRemovedList.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdSCellToBeRemovedListValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdSCellToBeRemovedListValidationError{}

// Validate checks the field values on IdSCellToBeSetupItem with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdSCellToBeSetupItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdSCellToBeSetupItem with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdSCellToBeSetupItemMultiError, or nil if none found.
func (m *IdSCellToBeSetupItem) ValidateAll() error {
	return m.validate(true)
}

func (m *IdSCellToBeSetupItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 53 {
		err := IdSCellToBeSetupItemValidationError{
			field:  "Value",
			reason: "value must equal 53",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdSCellToBeSetupItemMultiError(errors)
	}

	return nil
}

// IdSCellToBeSetupItemMultiError is an error wrapping multiple validation
// errors returned by IdSCellToBeSetupItem.ValidateAll() if the designated
// constraints aren't met.
type IdSCellToBeSetupItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdSCellToBeSetupItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdSCellToBeSetupItemMultiError) AllErrors() []error { return m }

// IdSCellToBeSetupItemValidationError is the validation error returned by
// IdSCellToBeSetupItem.Validate if the designated constraints aren't met.
type IdSCellToBeSetupItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdSCellToBeSetupItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdSCellToBeSetupItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdSCellToBeSetupItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdSCellToBeSetupItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdSCellToBeSetupItemValidationError) ErrorName() string {
	return "IdSCellToBeSetupItemValidationError"
}

// Error satisfies the builtin error interface
func (e IdSCellToBeSetupItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdSCellToBeSetupItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdSCellToBeSetupItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdSCellToBeSetupItemValidationError{}

// Validate checks the field values on IdSCellToBeSetupList with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdSCellToBeSetupList) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdSCellToBeSetupList with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdSCellToBeSetupListMultiError, or nil if none found.
func (m *IdSCellToBeSetupList) ValidateAll() error {
	return m.validate(true)
}

func (m *IdSCellToBeSetupList) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 54 {
		err := IdSCellToBeSetupListValidationError{
			field:  "Value",
			reason: "value must equal 54",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdSCellToBeSetupListMultiError(errors)
	}

	return nil
}

// IdSCellToBeSetupListMultiError is an error wrapping multiple validation
// errors returned by IdSCellToBeSetupList.ValidateAll() if the designated
// constraints aren't met.
type IdSCellToBeSetupListMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdSCellToBeSetupListMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdSCellToBeSetupListMultiError) AllErrors() []error { return m }

// IdSCellToBeSetupListValidationError is the validation error returned by
// IdSCellToBeSetupList.Validate if the designated constraints aren't met.
type IdSCellToBeSetupListValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdSCellToBeSetupListValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdSCellToBeSetupListValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdSCellToBeSetupListValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdSCellToBeSetupListValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdSCellToBeSetupListValidationError) ErrorName() string {
	return "IdSCellToBeSetupListValidationError"
}

// Error satisfies the builtin error interface
func (e IdSCellToBeSetupListValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdSCellToBeSetupList.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdSCellToBeSetupListValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdSCellToBeSetupListValidationError{}

// Validate checks the field values on IdSCellToBeSetupModItem with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdSCellToBeSetupModItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdSCellToBeSetupModItem with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdSCellToBeSetupModItemMultiError, or nil if none found.
func (m *IdSCellToBeSetupModItem) ValidateAll() error {
	return m.validate(true)
}

func (m *IdSCellToBeSetupModItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 55 {
		err := IdSCellToBeSetupModItemValidationError{
			field:  "Value",
			reason: "value must equal 55",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdSCellToBeSetupModItemMultiError(errors)
	}

	return nil
}

// IdSCellToBeSetupModItemMultiError is an error wrapping multiple validation
// errors returned by IdSCellToBeSetupModItem.ValidateAll() if the designated
// constraints aren't met.
type IdSCellToBeSetupModItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdSCellToBeSetupModItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdSCellToBeSetupModItemMultiError) AllErrors() []error { return m }

// IdSCellToBeSetupModItemValidationError is the validation error returned by
// IdSCellToBeSetupModItem.Validate if the designated constraints aren't met.
type IdSCellToBeSetupModItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdSCellToBeSetupModItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdSCellToBeSetupModItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdSCellToBeSetupModItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdSCellToBeSetupModItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdSCellToBeSetupModItemValidationError) ErrorName() string {
	return "IdSCellToBeSetupModItemValidationError"
}

// Error satisfies the builtin error interface
func (e IdSCellToBeSetupModItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdSCellToBeSetupModItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdSCellToBeSetupModItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdSCellToBeSetupModItemValidationError{}

// Validate checks the field values on IdSCellToBeSetupModList with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdSCellToBeSetupModList) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdSCellToBeSetupModList with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdSCellToBeSetupModListMultiError, or nil if none found.
func (m *IdSCellToBeSetupModList) ValidateAll() error {
	return m.validate(true)
}

func (m *IdSCellToBeSetupModList) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 56 {
		err := IdSCellToBeSetupModListValidationError{
			field:  "Value",
			reason: "value must equal 56",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdSCellToBeSetupModListMultiError(errors)
	}

	return nil
}

// IdSCellToBeSetupModListMultiError is an error wrapping multiple validation
// errors returned by IdSCellToBeSetupModList.ValidateAll() if the designated
// constraints aren't met.
type IdSCellToBeSetupModListMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdSCellToBeSetupModListMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdSCellToBeSetupModListMultiError) AllErrors() []error { return m }

// IdSCellToBeSetupModListValidationError is the validation error returned by
// IdSCellToBeSetupModList.Validate if the designated constraints aren't met.
type IdSCellToBeSetupModListValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdSCellToBeSetupModListValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdSCellToBeSetupModListValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdSCellToBeSetupModListValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdSCellToBeSetupModListValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdSCellToBeSetupModListValidationError) ErrorName() string {
	return "IdSCellToBeSetupModListValidationError"
}

// Error satisfies the builtin error interface
func (e IdSCellToBeSetupModListValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdSCellToBeSetupModList.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdSCellToBeSetupModListValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdSCellToBeSetupModListValidationError{}

// Validate checks the field values on IdServedCellsToAddItem with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdServedCellsToAddItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdServedCellsToAddItem with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdServedCellsToAddItemMultiError, or nil if none found.
func (m *IdServedCellsToAddItem) ValidateAll() error {
	return m.validate(true)
}

func (m *IdServedCellsToAddItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 57 {
		err := IdServedCellsToAddItemValidationError{
			field:  "Value",
			reason: "value must equal 57",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdServedCellsToAddItemMultiError(errors)
	}

	return nil
}

// IdServedCellsToAddItemMultiError is an error wrapping multiple validation
// errors returned by IdServedCellsToAddItem.ValidateAll() if the designated
// constraints aren't met.
type IdServedCellsToAddItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdServedCellsToAddItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdServedCellsToAddItemMultiError) AllErrors() []error { return m }

// IdServedCellsToAddItemValidationError is the validation error returned by
// IdServedCellsToAddItem.Validate if the designated constraints aren't met.
type IdServedCellsToAddItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdServedCellsToAddItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdServedCellsToAddItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdServedCellsToAddItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdServedCellsToAddItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdServedCellsToAddItemValidationError) ErrorName() string {
	return "IdServedCellsToAddItemValidationError"
}

// Error satisfies the builtin error interface
func (e IdServedCellsToAddItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdServedCellsToAddItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdServedCellsToAddItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdServedCellsToAddItemValidationError{}

// Validate checks the field values on IdServedCellsToAddList with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdServedCellsToAddList) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdServedCellsToAddList with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdServedCellsToAddListMultiError, or nil if none found.
func (m *IdServedCellsToAddList) ValidateAll() error {
	return m.validate(true)
}

func (m *IdServedCellsToAddList) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 58 {
		err := IdServedCellsToAddListValidationError{
			field:  "Value",
			reason: "value must equal 58",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdServedCellsToAddListMultiError(errors)
	}

	return nil
}

// IdServedCellsToAddListMultiError is an error wrapping multiple validation
// errors returned by IdServedCellsToAddList.ValidateAll() if the designated
// constraints aren't met.
type IdServedCellsToAddListMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdServedCellsToAddListMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdServedCellsToAddListMultiError) AllErrors() []error { return m }

// IdServedCellsToAddListValidationError is the validation error returned by
// IdServedCellsToAddList.Validate if the designated constraints aren't met.
type IdServedCellsToAddListValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdServedCellsToAddListValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdServedCellsToAddListValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdServedCellsToAddListValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdServedCellsToAddListValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdServedCellsToAddListValidationError) ErrorName() string {
	return "IdServedCellsToAddListValidationError"
}

// Error satisfies the builtin error interface
func (e IdServedCellsToAddListValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdServedCellsToAddList.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdServedCellsToAddListValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdServedCellsToAddListValidationError{}

// Validate checks the field values on IdServedCellsToDeleteItem with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdServedCellsToDeleteItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdServedCellsToDeleteItem with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdServedCellsToDeleteItemMultiError, or nil if none found.
func (m *IdServedCellsToDeleteItem) ValidateAll() error {
	return m.validate(true)
}

func (m *IdServedCellsToDeleteItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 59 {
		err := IdServedCellsToDeleteItemValidationError{
			field:  "Value",
			reason: "value must equal 59",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdServedCellsToDeleteItemMultiError(errors)
	}

	return nil
}

// IdServedCellsToDeleteItemMultiError is an error wrapping multiple validation
// errors returned by IdServedCellsToDeleteItem.ValidateAll() if the
// designated constraints aren't met.
type IdServedCellsToDeleteItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdServedCellsToDeleteItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdServedCellsToDeleteItemMultiError) AllErrors() []error { return m }

// IdServedCellsToDeleteItemValidationError is the validation error returned by
// IdServedCellsToDeleteItem.Validate if the designated constraints aren't met.
type IdServedCellsToDeleteItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdServedCellsToDeleteItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdServedCellsToDeleteItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdServedCellsToDeleteItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdServedCellsToDeleteItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdServedCellsToDeleteItemValidationError) ErrorName() string {
	return "IdServedCellsToDeleteItemValidationError"
}

// Error satisfies the builtin error interface
func (e IdServedCellsToDeleteItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdServedCellsToDeleteItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdServedCellsToDeleteItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdServedCellsToDeleteItemValidationError{}

// Validate checks the field values on IdServedCellsToDeleteList with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdServedCellsToDeleteList) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdServedCellsToDeleteList with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdServedCellsToDeleteListMultiError, or nil if none found.
func (m *IdServedCellsToDeleteList) ValidateAll() error {
	return m.validate(true)
}

func (m *IdServedCellsToDeleteList) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 60 {
		err := IdServedCellsToDeleteListValidationError{
			field:  "Value",
			reason: "value must equal 60",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdServedCellsToDeleteListMultiError(errors)
	}

	return nil
}

// IdServedCellsToDeleteListMultiError is an error wrapping multiple validation
// errors returned by IdServedCellsToDeleteList.ValidateAll() if the
// designated constraints aren't met.
type IdServedCellsToDeleteListMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdServedCellsToDeleteListMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdServedCellsToDeleteListMultiError) AllErrors() []error { return m }

// IdServedCellsToDeleteListValidationError is the validation error returned by
// IdServedCellsToDeleteList.Validate if the designated constraints aren't met.
type IdServedCellsToDeleteListValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdServedCellsToDeleteListValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdServedCellsToDeleteListValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdServedCellsToDeleteListValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdServedCellsToDeleteListValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdServedCellsToDeleteListValidationError) ErrorName() string {
	return "IdServedCellsToDeleteListValidationError"
}

// Error satisfies the builtin error interface
func (e IdServedCellsToDeleteListValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdServedCellsToDeleteList.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdServedCellsToDeleteListValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdServedCellsToDeleteListValidationError{}

// Validate checks the field values on IdServedCellsToModifyItem with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdServedCellsToModifyItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdServedCellsToModifyItem with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdServedCellsToModifyItemMultiError, or nil if none found.
func (m *IdServedCellsToModifyItem) ValidateAll() error {
	return m.validate(true)
}

func (m *IdServedCellsToModifyItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 61 {
		err := IdServedCellsToModifyItemValidationError{
			field:  "Value",
			reason: "value must equal 61",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdServedCellsToModifyItemMultiError(errors)
	}

	return nil
}

// IdServedCellsToModifyItemMultiError is an error wrapping multiple validation
// errors returned by IdServedCellsToModifyItem.ValidateAll() if the
// designated constraints aren't met.
type IdServedCellsToModifyItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdServedCellsToModifyItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdServedCellsToModifyItemMultiError) AllErrors() []error { return m }

// IdServedCellsToModifyItemValidationError is the validation error returned by
// IdServedCellsToModifyItem.Validate if the designated constraints aren't met.
type IdServedCellsToModifyItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdServedCellsToModifyItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdServedCellsToModifyItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdServedCellsToModifyItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdServedCellsToModifyItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdServedCellsToModifyItemValidationError) ErrorName() string {
	return "IdServedCellsToModifyItemValidationError"
}

// Error satisfies the builtin error interface
func (e IdServedCellsToModifyItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdServedCellsToModifyItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdServedCellsToModifyItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdServedCellsToModifyItemValidationError{}

// Validate checks the field values on IdServedCellsToModifyList with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdServedCellsToModifyList) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdServedCellsToModifyList with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdServedCellsToModifyListMultiError, or nil if none found.
func (m *IdServedCellsToModifyList) ValidateAll() error {
	return m.validate(true)
}

func (m *IdServedCellsToModifyList) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 62 {
		err := IdServedCellsToModifyListValidationError{
			field:  "Value",
			reason: "value must equal 62",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdServedCellsToModifyListMultiError(errors)
	}

	return nil
}

// IdServedCellsToModifyListMultiError is an error wrapping multiple validation
// errors returned by IdServedCellsToModifyList.ValidateAll() if the
// designated constraints aren't met.
type IdServedCellsToModifyListMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdServedCellsToModifyListMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdServedCellsToModifyListMultiError) AllErrors() []error { return m }

// IdServedCellsToModifyListValidationError is the validation error returned by
// IdServedCellsToModifyList.Validate if the designated constraints aren't met.
type IdServedCellsToModifyListValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdServedCellsToModifyListValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdServedCellsToModifyListValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdServedCellsToModifyListValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdServedCellsToModifyListValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdServedCellsToModifyListValidationError) ErrorName() string {
	return "IdServedCellsToModifyListValidationError"
}

// Error satisfies the builtin error interface
func (e IdServedCellsToModifyListValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdServedCellsToModifyList.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdServedCellsToModifyListValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdServedCellsToModifyListValidationError{}

// Validate checks the field values on IdSpCellID with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *IdSpCellID) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdSpCellID with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in IdSpCellIDMultiError, or
// nil if none found.
func (m *IdSpCellID) ValidateAll() error {
	return m.validate(true)
}

func (m *IdSpCellID) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 63 {
		err := IdSpCellIDValidationError{
			field:  "Value",
			reason: "value must equal 63",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdSpCellIDMultiError(errors)
	}

	return nil
}

// IdSpCellIDMultiError is an error wrapping multiple validation errors
// returned by IdSpCellID.ValidateAll() if the designated constraints aren't met.
type IdSpCellIDMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdSpCellIDMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdSpCellIDMultiError) AllErrors() []error { return m }

// IdSpCellIDValidationError is the validation error returned by
// IdSpCellID.Validate if the designated constraints aren't met.
type IdSpCellIDValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdSpCellIDValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdSpCellIDValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdSpCellIDValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdSpCellIDValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdSpCellIDValidationError) ErrorName() string { return "IdSpCellIDValidationError" }

// Error satisfies the builtin error interface
func (e IdSpCellIDValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdSpCellID.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdSpCellIDValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdSpCellIDValidationError{}

// Validate checks the field values on IdSRbid with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *IdSRbid) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdSRbid with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in IdSRbidMultiError, or nil if none found.
func (m *IdSRbid) ValidateAll() error {
	return m.validate(true)
}

func (m *IdSRbid) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 64 {
		err := IdSRbidValidationError{
			field:  "Value",
			reason: "value must equal 64",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdSRbidMultiError(errors)
	}

	return nil
}

// IdSRbidMultiError is an error wrapping multiple validation errors returned
// by IdSRbid.ValidateAll() if the designated constraints aren't met.
type IdSRbidMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdSRbidMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdSRbidMultiError) AllErrors() []error { return m }

// IdSRbidValidationError is the validation error returned by IdSRbid.Validate
// if the designated constraints aren't met.
type IdSRbidValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdSRbidValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdSRbidValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdSRbidValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdSRbidValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdSRbidValidationError) ErrorName() string { return "IdSRbidValidationError" }

// Error satisfies the builtin error interface
func (e IdSRbidValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdSRbid.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdSRbidValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdSRbidValidationError{}

// Validate checks the field values on IdSRbsFailedToBeSetupItem with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdSRbsFailedToBeSetupItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdSRbsFailedToBeSetupItem with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdSRbsFailedToBeSetupItemMultiError, or nil if none found.
func (m *IdSRbsFailedToBeSetupItem) ValidateAll() error {
	return m.validate(true)
}

func (m *IdSRbsFailedToBeSetupItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 65 {
		err := IdSRbsFailedToBeSetupItemValidationError{
			field:  "Value",
			reason: "value must equal 65",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdSRbsFailedToBeSetupItemMultiError(errors)
	}

	return nil
}

// IdSRbsFailedToBeSetupItemMultiError is an error wrapping multiple validation
// errors returned by IdSRbsFailedToBeSetupItem.ValidateAll() if the
// designated constraints aren't met.
type IdSRbsFailedToBeSetupItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdSRbsFailedToBeSetupItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdSRbsFailedToBeSetupItemMultiError) AllErrors() []error { return m }

// IdSRbsFailedToBeSetupItemValidationError is the validation error returned by
// IdSRbsFailedToBeSetupItem.Validate if the designated constraints aren't met.
type IdSRbsFailedToBeSetupItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdSRbsFailedToBeSetupItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdSRbsFailedToBeSetupItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdSRbsFailedToBeSetupItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdSRbsFailedToBeSetupItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdSRbsFailedToBeSetupItemValidationError) ErrorName() string {
	return "IdSRbsFailedToBeSetupItemValidationError"
}

// Error satisfies the builtin error interface
func (e IdSRbsFailedToBeSetupItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdSRbsFailedToBeSetupItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdSRbsFailedToBeSetupItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdSRbsFailedToBeSetupItemValidationError{}

// Validate checks the field values on IdSRbsFailedToBeSetupList with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdSRbsFailedToBeSetupList) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdSRbsFailedToBeSetupList with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdSRbsFailedToBeSetupListMultiError, or nil if none found.
func (m *IdSRbsFailedToBeSetupList) ValidateAll() error {
	return m.validate(true)
}

func (m *IdSRbsFailedToBeSetupList) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 66 {
		err := IdSRbsFailedToBeSetupListValidationError{
			field:  "Value",
			reason: "value must equal 66",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdSRbsFailedToBeSetupListMultiError(errors)
	}

	return nil
}

// IdSRbsFailedToBeSetupListMultiError is an error wrapping multiple validation
// errors returned by IdSRbsFailedToBeSetupList.ValidateAll() if the
// designated constraints aren't met.
type IdSRbsFailedToBeSetupListMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdSRbsFailedToBeSetupListMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdSRbsFailedToBeSetupListMultiError) AllErrors() []error { return m }

// IdSRbsFailedToBeSetupListValidationError is the validation error returned by
// IdSRbsFailedToBeSetupList.Validate if the designated constraints aren't met.
type IdSRbsFailedToBeSetupListValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdSRbsFailedToBeSetupListValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdSRbsFailedToBeSetupListValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdSRbsFailedToBeSetupListValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdSRbsFailedToBeSetupListValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdSRbsFailedToBeSetupListValidationError) ErrorName() string {
	return "IdSRbsFailedToBeSetupListValidationError"
}

// Error satisfies the builtin error interface
func (e IdSRbsFailedToBeSetupListValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdSRbsFailedToBeSetupList.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdSRbsFailedToBeSetupListValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdSRbsFailedToBeSetupListValidationError{}

// Validate checks the field values on IdSRbsFailedToBeSetupModItem with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdSRbsFailedToBeSetupModItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdSRbsFailedToBeSetupModItem with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdSRbsFailedToBeSetupModItemMultiError, or nil if none found.
func (m *IdSRbsFailedToBeSetupModItem) ValidateAll() error {
	return m.validate(true)
}

func (m *IdSRbsFailedToBeSetupModItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 67 {
		err := IdSRbsFailedToBeSetupModItemValidationError{
			field:  "Value",
			reason: "value must equal 67",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdSRbsFailedToBeSetupModItemMultiError(errors)
	}

	return nil
}

// IdSRbsFailedToBeSetupModItemMultiError is an error wrapping multiple
// validation errors returned by IdSRbsFailedToBeSetupModItem.ValidateAll() if
// the designated constraints aren't met.
type IdSRbsFailedToBeSetupModItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdSRbsFailedToBeSetupModItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdSRbsFailedToBeSetupModItemMultiError) AllErrors() []error { return m }

// IdSRbsFailedToBeSetupModItemValidationError is the validation error returned
// by IdSRbsFailedToBeSetupModItem.Validate if the designated constraints
// aren't met.
type IdSRbsFailedToBeSetupModItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdSRbsFailedToBeSetupModItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdSRbsFailedToBeSetupModItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdSRbsFailedToBeSetupModItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdSRbsFailedToBeSetupModItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdSRbsFailedToBeSetupModItemValidationError) ErrorName() string {
	return "IdSRbsFailedToBeSetupModItemValidationError"
}

// Error satisfies the builtin error interface
func (e IdSRbsFailedToBeSetupModItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdSRbsFailedToBeSetupModItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdSRbsFailedToBeSetupModItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdSRbsFailedToBeSetupModItemValidationError{}

// Validate checks the field values on IdSRbsFailedToBeSetupModList with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdSRbsFailedToBeSetupModList) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdSRbsFailedToBeSetupModList with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdSRbsFailedToBeSetupModListMultiError, or nil if none found.
func (m *IdSRbsFailedToBeSetupModList) ValidateAll() error {
	return m.validate(true)
}

func (m *IdSRbsFailedToBeSetupModList) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 68 {
		err := IdSRbsFailedToBeSetupModListValidationError{
			field:  "Value",
			reason: "value must equal 68",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdSRbsFailedToBeSetupModListMultiError(errors)
	}

	return nil
}

// IdSRbsFailedToBeSetupModListMultiError is an error wrapping multiple
// validation errors returned by IdSRbsFailedToBeSetupModList.ValidateAll() if
// the designated constraints aren't met.
type IdSRbsFailedToBeSetupModListMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdSRbsFailedToBeSetupModListMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdSRbsFailedToBeSetupModListMultiError) AllErrors() []error { return m }

// IdSRbsFailedToBeSetupModListValidationError is the validation error returned
// by IdSRbsFailedToBeSetupModList.Validate if the designated constraints
// aren't met.
type IdSRbsFailedToBeSetupModListValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdSRbsFailedToBeSetupModListValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdSRbsFailedToBeSetupModListValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdSRbsFailedToBeSetupModListValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdSRbsFailedToBeSetupModListValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdSRbsFailedToBeSetupModListValidationError) ErrorName() string {
	return "IdSRbsFailedToBeSetupModListValidationError"
}

// Error satisfies the builtin error interface
func (e IdSRbsFailedToBeSetupModListValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdSRbsFailedToBeSetupModList.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdSRbsFailedToBeSetupModListValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdSRbsFailedToBeSetupModListValidationError{}

// Validate checks the field values on IdSRbsRequiredToBeReleasedItem with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdSRbsRequiredToBeReleasedItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdSRbsRequiredToBeReleasedItem with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// IdSRbsRequiredToBeReleasedItemMultiError, or nil if none found.
func (m *IdSRbsRequiredToBeReleasedItem) ValidateAll() error {
	return m.validate(true)
}

func (m *IdSRbsRequiredToBeReleasedItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 69 {
		err := IdSRbsRequiredToBeReleasedItemValidationError{
			field:  "Value",
			reason: "value must equal 69",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdSRbsRequiredToBeReleasedItemMultiError(errors)
	}

	return nil
}

// IdSRbsRequiredToBeReleasedItemMultiError is an error wrapping multiple
// validation errors returned by IdSRbsRequiredToBeReleasedItem.ValidateAll()
// if the designated constraints aren't met.
type IdSRbsRequiredToBeReleasedItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdSRbsRequiredToBeReleasedItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdSRbsRequiredToBeReleasedItemMultiError) AllErrors() []error { return m }

// IdSRbsRequiredToBeReleasedItemValidationError is the validation error
// returned by IdSRbsRequiredToBeReleasedItem.Validate if the designated
// constraints aren't met.
type IdSRbsRequiredToBeReleasedItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdSRbsRequiredToBeReleasedItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdSRbsRequiredToBeReleasedItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdSRbsRequiredToBeReleasedItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdSRbsRequiredToBeReleasedItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdSRbsRequiredToBeReleasedItemValidationError) ErrorName() string {
	return "IdSRbsRequiredToBeReleasedItemValidationError"
}

// Error satisfies the builtin error interface
func (e IdSRbsRequiredToBeReleasedItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdSRbsRequiredToBeReleasedItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdSRbsRequiredToBeReleasedItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdSRbsRequiredToBeReleasedItemValidationError{}

// Validate checks the field values on IdSRbsRequiredToBeReleasedList with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdSRbsRequiredToBeReleasedList) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdSRbsRequiredToBeReleasedList with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// IdSRbsRequiredToBeReleasedListMultiError, or nil if none found.
func (m *IdSRbsRequiredToBeReleasedList) ValidateAll() error {
	return m.validate(true)
}

func (m *IdSRbsRequiredToBeReleasedList) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 70 {
		err := IdSRbsRequiredToBeReleasedListValidationError{
			field:  "Value",
			reason: "value must equal 70",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdSRbsRequiredToBeReleasedListMultiError(errors)
	}

	return nil
}

// IdSRbsRequiredToBeReleasedListMultiError is an error wrapping multiple
// validation errors returned by IdSRbsRequiredToBeReleasedList.ValidateAll()
// if the designated constraints aren't met.
type IdSRbsRequiredToBeReleasedListMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdSRbsRequiredToBeReleasedListMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdSRbsRequiredToBeReleasedListMultiError) AllErrors() []error { return m }

// IdSRbsRequiredToBeReleasedListValidationError is the validation error
// returned by IdSRbsRequiredToBeReleasedList.Validate if the designated
// constraints aren't met.
type IdSRbsRequiredToBeReleasedListValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdSRbsRequiredToBeReleasedListValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdSRbsRequiredToBeReleasedListValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdSRbsRequiredToBeReleasedListValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdSRbsRequiredToBeReleasedListValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdSRbsRequiredToBeReleasedListValidationError) ErrorName() string {
	return "IdSRbsRequiredToBeReleasedListValidationError"
}

// Error satisfies the builtin error interface
func (e IdSRbsRequiredToBeReleasedListValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdSRbsRequiredToBeReleasedList.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdSRbsRequiredToBeReleasedListValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdSRbsRequiredToBeReleasedListValidationError{}

// Validate checks the field values on IdSRbsToBeReleasedItem with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdSRbsToBeReleasedItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdSRbsToBeReleasedItem with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdSRbsToBeReleasedItemMultiError, or nil if none found.
func (m *IdSRbsToBeReleasedItem) ValidateAll() error {
	return m.validate(true)
}

func (m *IdSRbsToBeReleasedItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 71 {
		err := IdSRbsToBeReleasedItemValidationError{
			field:  "Value",
			reason: "value must equal 71",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdSRbsToBeReleasedItemMultiError(errors)
	}

	return nil
}

// IdSRbsToBeReleasedItemMultiError is an error wrapping multiple validation
// errors returned by IdSRbsToBeReleasedItem.ValidateAll() if the designated
// constraints aren't met.
type IdSRbsToBeReleasedItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdSRbsToBeReleasedItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdSRbsToBeReleasedItemMultiError) AllErrors() []error { return m }

// IdSRbsToBeReleasedItemValidationError is the validation error returned by
// IdSRbsToBeReleasedItem.Validate if the designated constraints aren't met.
type IdSRbsToBeReleasedItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdSRbsToBeReleasedItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdSRbsToBeReleasedItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdSRbsToBeReleasedItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdSRbsToBeReleasedItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdSRbsToBeReleasedItemValidationError) ErrorName() string {
	return "IdSRbsToBeReleasedItemValidationError"
}

// Error satisfies the builtin error interface
func (e IdSRbsToBeReleasedItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdSRbsToBeReleasedItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdSRbsToBeReleasedItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdSRbsToBeReleasedItemValidationError{}

// Validate checks the field values on IdSRbsToBeReleasedList with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdSRbsToBeReleasedList) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdSRbsToBeReleasedList with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdSRbsToBeReleasedListMultiError, or nil if none found.
func (m *IdSRbsToBeReleasedList) ValidateAll() error {
	return m.validate(true)
}

func (m *IdSRbsToBeReleasedList) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 72 {
		err := IdSRbsToBeReleasedListValidationError{
			field:  "Value",
			reason: "value must equal 72",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdSRbsToBeReleasedListMultiError(errors)
	}

	return nil
}

// IdSRbsToBeReleasedListMultiError is an error wrapping multiple validation
// errors returned by IdSRbsToBeReleasedList.ValidateAll() if the designated
// constraints aren't met.
type IdSRbsToBeReleasedListMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdSRbsToBeReleasedListMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdSRbsToBeReleasedListMultiError) AllErrors() []error { return m }

// IdSRbsToBeReleasedListValidationError is the validation error returned by
// IdSRbsToBeReleasedList.Validate if the designated constraints aren't met.
type IdSRbsToBeReleasedListValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdSRbsToBeReleasedListValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdSRbsToBeReleasedListValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdSRbsToBeReleasedListValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdSRbsToBeReleasedListValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdSRbsToBeReleasedListValidationError) ErrorName() string {
	return "IdSRbsToBeReleasedListValidationError"
}

// Error satisfies the builtin error interface
func (e IdSRbsToBeReleasedListValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdSRbsToBeReleasedList.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdSRbsToBeReleasedListValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdSRbsToBeReleasedListValidationError{}

// Validate checks the field values on IdSRbsToBeSetupItem with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdSRbsToBeSetupItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdSRbsToBeSetupItem with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdSRbsToBeSetupItemMultiError, or nil if none found.
func (m *IdSRbsToBeSetupItem) ValidateAll() error {
	return m.validate(true)
}

func (m *IdSRbsToBeSetupItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 73 {
		err := IdSRbsToBeSetupItemValidationError{
			field:  "Value",
			reason: "value must equal 73",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdSRbsToBeSetupItemMultiError(errors)
	}

	return nil
}

// IdSRbsToBeSetupItemMultiError is an error wrapping multiple validation
// errors returned by IdSRbsToBeSetupItem.ValidateAll() if the designated
// constraints aren't met.
type IdSRbsToBeSetupItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdSRbsToBeSetupItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdSRbsToBeSetupItemMultiError) AllErrors() []error { return m }

// IdSRbsToBeSetupItemValidationError is the validation error returned by
// IdSRbsToBeSetupItem.Validate if the designated constraints aren't met.
type IdSRbsToBeSetupItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdSRbsToBeSetupItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdSRbsToBeSetupItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdSRbsToBeSetupItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdSRbsToBeSetupItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdSRbsToBeSetupItemValidationError) ErrorName() string {
	return "IdSRbsToBeSetupItemValidationError"
}

// Error satisfies the builtin error interface
func (e IdSRbsToBeSetupItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdSRbsToBeSetupItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdSRbsToBeSetupItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdSRbsToBeSetupItemValidationError{}

// Validate checks the field values on IdSRbsToBeSetupList with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdSRbsToBeSetupList) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdSRbsToBeSetupList with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdSRbsToBeSetupListMultiError, or nil if none found.
func (m *IdSRbsToBeSetupList) ValidateAll() error {
	return m.validate(true)
}

func (m *IdSRbsToBeSetupList) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 74 {
		err := IdSRbsToBeSetupListValidationError{
			field:  "Value",
			reason: "value must equal 74",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdSRbsToBeSetupListMultiError(errors)
	}

	return nil
}

// IdSRbsToBeSetupListMultiError is an error wrapping multiple validation
// errors returned by IdSRbsToBeSetupList.ValidateAll() if the designated
// constraints aren't met.
type IdSRbsToBeSetupListMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdSRbsToBeSetupListMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdSRbsToBeSetupListMultiError) AllErrors() []error { return m }

// IdSRbsToBeSetupListValidationError is the validation error returned by
// IdSRbsToBeSetupList.Validate if the designated constraints aren't met.
type IdSRbsToBeSetupListValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdSRbsToBeSetupListValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdSRbsToBeSetupListValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdSRbsToBeSetupListValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdSRbsToBeSetupListValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdSRbsToBeSetupListValidationError) ErrorName() string {
	return "IdSRbsToBeSetupListValidationError"
}

// Error satisfies the builtin error interface
func (e IdSRbsToBeSetupListValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdSRbsToBeSetupList.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdSRbsToBeSetupListValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdSRbsToBeSetupListValidationError{}

// Validate checks the field values on IdSRbsToBeSetupModItem with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdSRbsToBeSetupModItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdSRbsToBeSetupModItem with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdSRbsToBeSetupModItemMultiError, or nil if none found.
func (m *IdSRbsToBeSetupModItem) ValidateAll() error {
	return m.validate(true)
}

func (m *IdSRbsToBeSetupModItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 75 {
		err := IdSRbsToBeSetupModItemValidationError{
			field:  "Value",
			reason: "value must equal 75",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdSRbsToBeSetupModItemMultiError(errors)
	}

	return nil
}

// IdSRbsToBeSetupModItemMultiError is an error wrapping multiple validation
// errors returned by IdSRbsToBeSetupModItem.ValidateAll() if the designated
// constraints aren't met.
type IdSRbsToBeSetupModItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdSRbsToBeSetupModItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdSRbsToBeSetupModItemMultiError) AllErrors() []error { return m }

// IdSRbsToBeSetupModItemValidationError is the validation error returned by
// IdSRbsToBeSetupModItem.Validate if the designated constraints aren't met.
type IdSRbsToBeSetupModItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdSRbsToBeSetupModItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdSRbsToBeSetupModItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdSRbsToBeSetupModItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdSRbsToBeSetupModItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdSRbsToBeSetupModItemValidationError) ErrorName() string {
	return "IdSRbsToBeSetupModItemValidationError"
}

// Error satisfies the builtin error interface
func (e IdSRbsToBeSetupModItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdSRbsToBeSetupModItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdSRbsToBeSetupModItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdSRbsToBeSetupModItemValidationError{}

// Validate checks the field values on IdSRbsToBeSetupModList with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdSRbsToBeSetupModList) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdSRbsToBeSetupModList with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdSRbsToBeSetupModListMultiError, or nil if none found.
func (m *IdSRbsToBeSetupModList) ValidateAll() error {
	return m.validate(true)
}

func (m *IdSRbsToBeSetupModList) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 76 {
		err := IdSRbsToBeSetupModListValidationError{
			field:  "Value",
			reason: "value must equal 76",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdSRbsToBeSetupModListMultiError(errors)
	}

	return nil
}

// IdSRbsToBeSetupModListMultiError is an error wrapping multiple validation
// errors returned by IdSRbsToBeSetupModList.ValidateAll() if the designated
// constraints aren't met.
type IdSRbsToBeSetupModListMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdSRbsToBeSetupModListMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdSRbsToBeSetupModListMultiError) AllErrors() []error { return m }

// IdSRbsToBeSetupModListValidationError is the validation error returned by
// IdSRbsToBeSetupModList.Validate if the designated constraints aren't met.
type IdSRbsToBeSetupModListValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdSRbsToBeSetupModListValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdSRbsToBeSetupModListValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdSRbsToBeSetupModListValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdSRbsToBeSetupModListValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdSRbsToBeSetupModListValidationError) ErrorName() string {
	return "IdSRbsToBeSetupModListValidationError"
}

// Error satisfies the builtin error interface
func (e IdSRbsToBeSetupModListValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdSRbsToBeSetupModList.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdSRbsToBeSetupModListValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdSRbsToBeSetupModListValidationError{}

// Validate checks the field values on IdTimeToWait with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *IdTimeToWait) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdTimeToWait with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in IdTimeToWaitMultiError, or
// nil if none found.
func (m *IdTimeToWait) ValidateAll() error {
	return m.validate(true)
}

func (m *IdTimeToWait) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 77 {
		err := IdTimeToWaitValidationError{
			field:  "Value",
			reason: "value must equal 77",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdTimeToWaitMultiError(errors)
	}

	return nil
}

// IdTimeToWaitMultiError is an error wrapping multiple validation errors
// returned by IdTimeToWait.ValidateAll() if the designated constraints aren't met.
type IdTimeToWaitMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdTimeToWaitMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdTimeToWaitMultiError) AllErrors() []error { return m }

// IdTimeToWaitValidationError is the validation error returned by
// IdTimeToWait.Validate if the designated constraints aren't met.
type IdTimeToWaitValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdTimeToWaitValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdTimeToWaitValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdTimeToWaitValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdTimeToWaitValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdTimeToWaitValidationError) ErrorName() string { return "IdTimeToWaitValidationError" }

// Error satisfies the builtin error interface
func (e IdTimeToWaitValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdTimeToWait.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdTimeToWaitValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdTimeToWaitValidationError{}

// Validate checks the field values on IdTransactionId with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *IdTransactionId) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdTransactionId with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdTransactionIdMultiError, or nil if none found.
func (m *IdTransactionId) ValidateAll() error {
	return m.validate(true)
}

func (m *IdTransactionId) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 78 {
		err := IdTransactionIdValidationError{
			field:  "Value",
			reason: "value must equal 78",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdTransactionIdMultiError(errors)
	}

	return nil
}

// IdTransactionIdMultiError is an error wrapping multiple validation errors
// returned by IdTransactionId.ValidateAll() if the designated constraints
// aren't met.
type IdTransactionIdMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdTransactionIdMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdTransactionIdMultiError) AllErrors() []error { return m }

// IdTransactionIdValidationError is the validation error returned by
// IdTransactionId.Validate if the designated constraints aren't met.
type IdTransactionIdValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdTransactionIdValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdTransactionIdValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdTransactionIdValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdTransactionIdValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdTransactionIdValidationError) ErrorName() string { return "IdTransactionIdValidationError" }

// Error satisfies the builtin error interface
func (e IdTransactionIdValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdTransactionId.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdTransactionIdValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdTransactionIdValidationError{}

// Validate checks the field values on IdTransmissionActionIndicator with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdTransmissionActionIndicator) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdTransmissionActionIndicator with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// IdTransmissionActionIndicatorMultiError, or nil if none found.
func (m *IdTransmissionActionIndicator) ValidateAll() error {
	return m.validate(true)
}

func (m *IdTransmissionActionIndicator) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 79 {
		err := IdTransmissionActionIndicatorValidationError{
			field:  "Value",
			reason: "value must equal 79",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdTransmissionActionIndicatorMultiError(errors)
	}

	return nil
}

// IdTransmissionActionIndicatorMultiError is an error wrapping multiple
// validation errors returned by IdTransmissionActionIndicator.ValidateAll()
// if the designated constraints aren't met.
type IdTransmissionActionIndicatorMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdTransmissionActionIndicatorMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdTransmissionActionIndicatorMultiError) AllErrors() []error { return m }

// IdTransmissionActionIndicatorValidationError is the validation error
// returned by IdTransmissionActionIndicator.Validate if the designated
// constraints aren't met.
type IdTransmissionActionIndicatorValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdTransmissionActionIndicatorValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdTransmissionActionIndicatorValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdTransmissionActionIndicatorValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdTransmissionActionIndicatorValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdTransmissionActionIndicatorValidationError) ErrorName() string {
	return "IdTransmissionActionIndicatorValidationError"
}

// Error satisfies the builtin error interface
func (e IdTransmissionActionIndicatorValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdTransmissionActionIndicator.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdTransmissionActionIndicatorValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdTransmissionActionIndicatorValidationError{}

// Validate checks the field values on IdUEassociatedLogicalF1ConnectionItem
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *IdUEassociatedLogicalF1ConnectionItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdUEassociatedLogicalF1ConnectionItem
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// IdUEassociatedLogicalF1ConnectionItemMultiError, or nil if none found.
func (m *IdUEassociatedLogicalF1ConnectionItem) ValidateAll() error {
	return m.validate(true)
}

func (m *IdUEassociatedLogicalF1ConnectionItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 80 {
		err := IdUEassociatedLogicalF1ConnectionItemValidationError{
			field:  "Value",
			reason: "value must equal 80",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdUEassociatedLogicalF1ConnectionItemMultiError(errors)
	}

	return nil
}

// IdUEassociatedLogicalF1ConnectionItemMultiError is an error wrapping
// multiple validation errors returned by
// IdUEassociatedLogicalF1ConnectionItem.ValidateAll() if the designated
// constraints aren't met.
type IdUEassociatedLogicalF1ConnectionItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdUEassociatedLogicalF1ConnectionItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdUEassociatedLogicalF1ConnectionItemMultiError) AllErrors() []error { return m }

// IdUEassociatedLogicalF1ConnectionItemValidationError is the validation error
// returned by IdUEassociatedLogicalF1ConnectionItem.Validate if the
// designated constraints aren't met.
type IdUEassociatedLogicalF1ConnectionItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdUEassociatedLogicalF1ConnectionItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdUEassociatedLogicalF1ConnectionItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdUEassociatedLogicalF1ConnectionItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdUEassociatedLogicalF1ConnectionItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdUEassociatedLogicalF1ConnectionItemValidationError) ErrorName() string {
	return "IdUEassociatedLogicalF1ConnectionItemValidationError"
}

// Error satisfies the builtin error interface
func (e IdUEassociatedLogicalF1ConnectionItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdUEassociatedLogicalF1ConnectionItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdUEassociatedLogicalF1ConnectionItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdUEassociatedLogicalF1ConnectionItemValidationError{}

// Validate checks the field values on
// IdUEassociatedLogicalF1ConnectionListResAck with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *IdUEassociatedLogicalF1ConnectionListResAck) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// IdUEassociatedLogicalF1ConnectionListResAck with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// IdUEassociatedLogicalF1ConnectionListResAckMultiError, or nil if none found.
func (m *IdUEassociatedLogicalF1ConnectionListResAck) ValidateAll() error {
	return m.validate(true)
}

func (m *IdUEassociatedLogicalF1ConnectionListResAck) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 81 {
		err := IdUEassociatedLogicalF1ConnectionListResAckValidationError{
			field:  "Value",
			reason: "value must equal 81",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdUEassociatedLogicalF1ConnectionListResAckMultiError(errors)
	}

	return nil
}

// IdUEassociatedLogicalF1ConnectionListResAckMultiError is an error wrapping
// multiple validation errors returned by
// IdUEassociatedLogicalF1ConnectionListResAck.ValidateAll() if the designated
// constraints aren't met.
type IdUEassociatedLogicalF1ConnectionListResAckMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdUEassociatedLogicalF1ConnectionListResAckMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdUEassociatedLogicalF1ConnectionListResAckMultiError) AllErrors() []error { return m }

// IdUEassociatedLogicalF1ConnectionListResAckValidationError is the validation
// error returned by IdUEassociatedLogicalF1ConnectionListResAck.Validate if
// the designated constraints aren't met.
type IdUEassociatedLogicalF1ConnectionListResAckValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdUEassociatedLogicalF1ConnectionListResAckValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdUEassociatedLogicalF1ConnectionListResAckValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdUEassociatedLogicalF1ConnectionListResAckValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdUEassociatedLogicalF1ConnectionListResAckValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdUEassociatedLogicalF1ConnectionListResAckValidationError) ErrorName() string {
	return "IdUEassociatedLogicalF1ConnectionListResAckValidationError"
}

// Error satisfies the builtin error interface
func (e IdUEassociatedLogicalF1ConnectionListResAckValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdUEassociatedLogicalF1ConnectionListResAck.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdUEassociatedLogicalF1ConnectionListResAckValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdUEassociatedLogicalF1ConnectionListResAckValidationError{}

// Validate checks the field values on IdgNbCUName with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *IdgNbCUName) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdgNbCUName with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in IdgNbCUNameMultiError, or
// nil if none found.
func (m *IdgNbCUName) ValidateAll() error {
	return m.validate(true)
}

func (m *IdgNbCUName) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 82 {
		err := IdgNbCUNameValidationError{
			field:  "Value",
			reason: "value must equal 82",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdgNbCUNameMultiError(errors)
	}

	return nil
}

// IdgNbCUNameMultiError is an error wrapping multiple validation errors
// returned by IdgNbCUName.ValidateAll() if the designated constraints aren't met.
type IdgNbCUNameMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdgNbCUNameMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdgNbCUNameMultiError) AllErrors() []error { return m }

// IdgNbCUNameValidationError is the validation error returned by
// IdgNbCUName.Validate if the designated constraints aren't met.
type IdgNbCUNameValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdgNbCUNameValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdgNbCUNameValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdgNbCUNameValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdgNbCUNameValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdgNbCUNameValidationError) ErrorName() string { return "IdgNbCUNameValidationError" }

// Error satisfies the builtin error interface
func (e IdgNbCUNameValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdgNbCUName.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdgNbCUNameValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdgNbCUNameValidationError{}

// Validate checks the field values on IdSCellFailedtoSetupList with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdSCellFailedtoSetupList) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdSCellFailedtoSetupList with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdSCellFailedtoSetupListMultiError, or nil if none found.
func (m *IdSCellFailedtoSetupList) ValidateAll() error {
	return m.validate(true)
}

func (m *IdSCellFailedtoSetupList) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 83 {
		err := IdSCellFailedtoSetupListValidationError{
			field:  "Value",
			reason: "value must equal 83",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdSCellFailedtoSetupListMultiError(errors)
	}

	return nil
}

// IdSCellFailedtoSetupListMultiError is an error wrapping multiple validation
// errors returned by IdSCellFailedtoSetupList.ValidateAll() if the designated
// constraints aren't met.
type IdSCellFailedtoSetupListMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdSCellFailedtoSetupListMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdSCellFailedtoSetupListMultiError) AllErrors() []error { return m }

// IdSCellFailedtoSetupListValidationError is the validation error returned by
// IdSCellFailedtoSetupList.Validate if the designated constraints aren't met.
type IdSCellFailedtoSetupListValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdSCellFailedtoSetupListValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdSCellFailedtoSetupListValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdSCellFailedtoSetupListValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdSCellFailedtoSetupListValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdSCellFailedtoSetupListValidationError) ErrorName() string {
	return "IdSCellFailedtoSetupListValidationError"
}

// Error satisfies the builtin error interface
func (e IdSCellFailedtoSetupListValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdSCellFailedtoSetupList.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdSCellFailedtoSetupListValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdSCellFailedtoSetupListValidationError{}

// Validate checks the field values on IdSCellFailedtoSetupItem with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdSCellFailedtoSetupItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdSCellFailedtoSetupItem with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdSCellFailedtoSetupItemMultiError, or nil if none found.
func (m *IdSCellFailedtoSetupItem) ValidateAll() error {
	return m.validate(true)
}

func (m *IdSCellFailedtoSetupItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 84 {
		err := IdSCellFailedtoSetupItemValidationError{
			field:  "Value",
			reason: "value must equal 84",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdSCellFailedtoSetupItemMultiError(errors)
	}

	return nil
}

// IdSCellFailedtoSetupItemMultiError is an error wrapping multiple validation
// errors returned by IdSCellFailedtoSetupItem.ValidateAll() if the designated
// constraints aren't met.
type IdSCellFailedtoSetupItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdSCellFailedtoSetupItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdSCellFailedtoSetupItemMultiError) AllErrors() []error { return m }

// IdSCellFailedtoSetupItemValidationError is the validation error returned by
// IdSCellFailedtoSetupItem.Validate if the designated constraints aren't met.
type IdSCellFailedtoSetupItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdSCellFailedtoSetupItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdSCellFailedtoSetupItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdSCellFailedtoSetupItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdSCellFailedtoSetupItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdSCellFailedtoSetupItemValidationError) ErrorName() string {
	return "IdSCellFailedtoSetupItemValidationError"
}

// Error satisfies the builtin error interface
func (e IdSCellFailedtoSetupItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdSCellFailedtoSetupItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdSCellFailedtoSetupItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdSCellFailedtoSetupItemValidationError{}

// Validate checks the field values on IdSCellFailedtoSetupModList with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdSCellFailedtoSetupModList) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdSCellFailedtoSetupModList with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdSCellFailedtoSetupModListMultiError, or nil if none found.
func (m *IdSCellFailedtoSetupModList) ValidateAll() error {
	return m.validate(true)
}

func (m *IdSCellFailedtoSetupModList) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 85 {
		err := IdSCellFailedtoSetupModListValidationError{
			field:  "Value",
			reason: "value must equal 85",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdSCellFailedtoSetupModListMultiError(errors)
	}

	return nil
}

// IdSCellFailedtoSetupModListMultiError is an error wrapping multiple
// validation errors returned by IdSCellFailedtoSetupModList.ValidateAll() if
// the designated constraints aren't met.
type IdSCellFailedtoSetupModListMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdSCellFailedtoSetupModListMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdSCellFailedtoSetupModListMultiError) AllErrors() []error { return m }

// IdSCellFailedtoSetupModListValidationError is the validation error returned
// by IdSCellFailedtoSetupModList.Validate if the designated constraints
// aren't met.
type IdSCellFailedtoSetupModListValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdSCellFailedtoSetupModListValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdSCellFailedtoSetupModListValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdSCellFailedtoSetupModListValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdSCellFailedtoSetupModListValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdSCellFailedtoSetupModListValidationError) ErrorName() string {
	return "IdSCellFailedtoSetupModListValidationError"
}

// Error satisfies the builtin error interface
func (e IdSCellFailedtoSetupModListValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdSCellFailedtoSetupModList.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdSCellFailedtoSetupModListValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdSCellFailedtoSetupModListValidationError{}

// Validate checks the field values on IdSCellFailedtoSetupModItem with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdSCellFailedtoSetupModItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdSCellFailedtoSetupModItem with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdSCellFailedtoSetupModItemMultiError, or nil if none found.
func (m *IdSCellFailedtoSetupModItem) ValidateAll() error {
	return m.validate(true)
}

func (m *IdSCellFailedtoSetupModItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 86 {
		err := IdSCellFailedtoSetupModItemValidationError{
			field:  "Value",
			reason: "value must equal 86",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdSCellFailedtoSetupModItemMultiError(errors)
	}

	return nil
}

// IdSCellFailedtoSetupModItemMultiError is an error wrapping multiple
// validation errors returned by IdSCellFailedtoSetupModItem.ValidateAll() if
// the designated constraints aren't met.
type IdSCellFailedtoSetupModItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdSCellFailedtoSetupModItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdSCellFailedtoSetupModItemMultiError) AllErrors() []error { return m }

// IdSCellFailedtoSetupModItemValidationError is the validation error returned
// by IdSCellFailedtoSetupModItem.Validate if the designated constraints
// aren't met.
type IdSCellFailedtoSetupModItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdSCellFailedtoSetupModItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdSCellFailedtoSetupModItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdSCellFailedtoSetupModItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdSCellFailedtoSetupModItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdSCellFailedtoSetupModItemValidationError) ErrorName() string {
	return "IdSCellFailedtoSetupModItemValidationError"
}

// Error satisfies the builtin error interface
func (e IdSCellFailedtoSetupModItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdSCellFailedtoSetupModItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdSCellFailedtoSetupModItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdSCellFailedtoSetupModItemValidationError{}

// Validate checks the field values on IdRRcreconfigurationCompleteIndicator
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *IdRRcreconfigurationCompleteIndicator) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdRRcreconfigurationCompleteIndicator
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// IdRRcreconfigurationCompleteIndicatorMultiError, or nil if none found.
func (m *IdRRcreconfigurationCompleteIndicator) ValidateAll() error {
	return m.validate(true)
}

func (m *IdRRcreconfigurationCompleteIndicator) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 87 {
		err := IdRRcreconfigurationCompleteIndicatorValidationError{
			field:  "Value",
			reason: "value must equal 87",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdRRcreconfigurationCompleteIndicatorMultiError(errors)
	}

	return nil
}

// IdRRcreconfigurationCompleteIndicatorMultiError is an error wrapping
// multiple validation errors returned by
// IdRRcreconfigurationCompleteIndicator.ValidateAll() if the designated
// constraints aren't met.
type IdRRcreconfigurationCompleteIndicatorMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdRRcreconfigurationCompleteIndicatorMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdRRcreconfigurationCompleteIndicatorMultiError) AllErrors() []error { return m }

// IdRRcreconfigurationCompleteIndicatorValidationError is the validation error
// returned by IdRRcreconfigurationCompleteIndicator.Validate if the
// designated constraints aren't met.
type IdRRcreconfigurationCompleteIndicatorValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdRRcreconfigurationCompleteIndicatorValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdRRcreconfigurationCompleteIndicatorValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdRRcreconfigurationCompleteIndicatorValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdRRcreconfigurationCompleteIndicatorValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdRRcreconfigurationCompleteIndicatorValidationError) ErrorName() string {
	return "IdRRcreconfigurationCompleteIndicatorValidationError"
}

// Error satisfies the builtin error interface
func (e IdRRcreconfigurationCompleteIndicatorValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdRRcreconfigurationCompleteIndicator.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdRRcreconfigurationCompleteIndicatorValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdRRcreconfigurationCompleteIndicatorValidationError{}

// Validate checks the field values on IdCellsStatusItem with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *IdCellsStatusItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdCellsStatusItem with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdCellsStatusItemMultiError, or nil if none found.
func (m *IdCellsStatusItem) ValidateAll() error {
	return m.validate(true)
}

func (m *IdCellsStatusItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 88 {
		err := IdCellsStatusItemValidationError{
			field:  "Value",
			reason: "value must equal 88",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdCellsStatusItemMultiError(errors)
	}

	return nil
}

// IdCellsStatusItemMultiError is an error wrapping multiple validation errors
// returned by IdCellsStatusItem.ValidateAll() if the designated constraints
// aren't met.
type IdCellsStatusItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdCellsStatusItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdCellsStatusItemMultiError) AllErrors() []error { return m }

// IdCellsStatusItemValidationError is the validation error returned by
// IdCellsStatusItem.Validate if the designated constraints aren't met.
type IdCellsStatusItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdCellsStatusItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdCellsStatusItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdCellsStatusItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdCellsStatusItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdCellsStatusItemValidationError) ErrorName() string {
	return "IdCellsStatusItemValidationError"
}

// Error satisfies the builtin error interface
func (e IdCellsStatusItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdCellsStatusItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdCellsStatusItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdCellsStatusItemValidationError{}

// Validate checks the field values on IdCellsStatusList with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *IdCellsStatusList) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdCellsStatusList with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdCellsStatusListMultiError, or nil if none found.
func (m *IdCellsStatusList) ValidateAll() error {
	return m.validate(true)
}

func (m *IdCellsStatusList) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 89 {
		err := IdCellsStatusListValidationError{
			field:  "Value",
			reason: "value must equal 89",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdCellsStatusListMultiError(errors)
	}

	return nil
}

// IdCellsStatusListMultiError is an error wrapping multiple validation errors
// returned by IdCellsStatusList.ValidateAll() if the designated constraints
// aren't met.
type IdCellsStatusListMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdCellsStatusListMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdCellsStatusListMultiError) AllErrors() []error { return m }

// IdCellsStatusListValidationError is the validation error returned by
// IdCellsStatusList.Validate if the designated constraints aren't met.
type IdCellsStatusListValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdCellsStatusListValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdCellsStatusListValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdCellsStatusListValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdCellsStatusListValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdCellsStatusListValidationError) ErrorName() string {
	return "IdCellsStatusListValidationError"
}

// Error satisfies the builtin error interface
func (e IdCellsStatusListValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdCellsStatusList.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdCellsStatusListValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdCellsStatusListValidationError{}

// Validate checks the field values on IdCandidateSpCellList with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdCandidateSpCellList) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdCandidateSpCellList with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdCandidateSpCellListMultiError, or nil if none found.
func (m *IdCandidateSpCellList) ValidateAll() error {
	return m.validate(true)
}

func (m *IdCandidateSpCellList) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 90 {
		err := IdCandidateSpCellListValidationError{
			field:  "Value",
			reason: "value must equal 90",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdCandidateSpCellListMultiError(errors)
	}

	return nil
}

// IdCandidateSpCellListMultiError is an error wrapping multiple validation
// errors returned by IdCandidateSpCellList.ValidateAll() if the designated
// constraints aren't met.
type IdCandidateSpCellListMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdCandidateSpCellListMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdCandidateSpCellListMultiError) AllErrors() []error { return m }

// IdCandidateSpCellListValidationError is the validation error returned by
// IdCandidateSpCellList.Validate if the designated constraints aren't met.
type IdCandidateSpCellListValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdCandidateSpCellListValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdCandidateSpCellListValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdCandidateSpCellListValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdCandidateSpCellListValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdCandidateSpCellListValidationError) ErrorName() string {
	return "IdCandidateSpCellListValidationError"
}

// Error satisfies the builtin error interface
func (e IdCandidateSpCellListValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdCandidateSpCellList.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdCandidateSpCellListValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdCandidateSpCellListValidationError{}

// Validate checks the field values on IdCandidateSpCellItem with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdCandidateSpCellItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdCandidateSpCellItem with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdCandidateSpCellItemMultiError, or nil if none found.
func (m *IdCandidateSpCellItem) ValidateAll() error {
	return m.validate(true)
}

func (m *IdCandidateSpCellItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 91 {
		err := IdCandidateSpCellItemValidationError{
			field:  "Value",
			reason: "value must equal 91",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdCandidateSpCellItemMultiError(errors)
	}

	return nil
}

// IdCandidateSpCellItemMultiError is an error wrapping multiple validation
// errors returned by IdCandidateSpCellItem.ValidateAll() if the designated
// constraints aren't met.
type IdCandidateSpCellItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdCandidateSpCellItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdCandidateSpCellItemMultiError) AllErrors() []error { return m }

// IdCandidateSpCellItemValidationError is the validation error returned by
// IdCandidateSpCellItem.Validate if the designated constraints aren't met.
type IdCandidateSpCellItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdCandidateSpCellItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdCandidateSpCellItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdCandidateSpCellItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdCandidateSpCellItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdCandidateSpCellItemValidationError) ErrorName() string {
	return "IdCandidateSpCellItemValidationError"
}

// Error satisfies the builtin error interface
func (e IdCandidateSpCellItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdCandidateSpCellItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdCandidateSpCellItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdCandidateSpCellItemValidationError{}

// Validate checks the field values on IdPotentialSpCellList with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdPotentialSpCellList) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdPotentialSpCellList with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdPotentialSpCellListMultiError, or nil if none found.
func (m *IdPotentialSpCellList) ValidateAll() error {
	return m.validate(true)
}

func (m *IdPotentialSpCellList) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 92 {
		err := IdPotentialSpCellListValidationError{
			field:  "Value",
			reason: "value must equal 92",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdPotentialSpCellListMultiError(errors)
	}

	return nil
}

// IdPotentialSpCellListMultiError is an error wrapping multiple validation
// errors returned by IdPotentialSpCellList.ValidateAll() if the designated
// constraints aren't met.
type IdPotentialSpCellListMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdPotentialSpCellListMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdPotentialSpCellListMultiError) AllErrors() []error { return m }

// IdPotentialSpCellListValidationError is the validation error returned by
// IdPotentialSpCellList.Validate if the designated constraints aren't met.
type IdPotentialSpCellListValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdPotentialSpCellListValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdPotentialSpCellListValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdPotentialSpCellListValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdPotentialSpCellListValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdPotentialSpCellListValidationError) ErrorName() string {
	return "IdPotentialSpCellListValidationError"
}

// Error satisfies the builtin error interface
func (e IdPotentialSpCellListValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdPotentialSpCellList.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdPotentialSpCellListValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdPotentialSpCellListValidationError{}

// Validate checks the field values on IdPotentialSpCellItem with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdPotentialSpCellItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdPotentialSpCellItem with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdPotentialSpCellItemMultiError, or nil if none found.
func (m *IdPotentialSpCellItem) ValidateAll() error {
	return m.validate(true)
}

func (m *IdPotentialSpCellItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 93 {
		err := IdPotentialSpCellItemValidationError{
			field:  "Value",
			reason: "value must equal 93",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdPotentialSpCellItemMultiError(errors)
	}

	return nil
}

// IdPotentialSpCellItemMultiError is an error wrapping multiple validation
// errors returned by IdPotentialSpCellItem.ValidateAll() if the designated
// constraints aren't met.
type IdPotentialSpCellItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdPotentialSpCellItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdPotentialSpCellItemMultiError) AllErrors() []error { return m }

// IdPotentialSpCellItemValidationError is the validation error returned by
// IdPotentialSpCellItem.Validate if the designated constraints aren't met.
type IdPotentialSpCellItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdPotentialSpCellItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdPotentialSpCellItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdPotentialSpCellItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdPotentialSpCellItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdPotentialSpCellItemValidationError) ErrorName() string {
	return "IdPotentialSpCellItemValidationError"
}

// Error satisfies the builtin error interface
func (e IdPotentialSpCellItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdPotentialSpCellItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdPotentialSpCellItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdPotentialSpCellItemValidationError{}

// Validate checks the field values on IdFullConfiguration with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdFullConfiguration) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdFullConfiguration with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdFullConfigurationMultiError, or nil if none found.
func (m *IdFullConfiguration) ValidateAll() error {
	return m.validate(true)
}

func (m *IdFullConfiguration) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 94 {
		err := IdFullConfigurationValidationError{
			field:  "Value",
			reason: "value must equal 94",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdFullConfigurationMultiError(errors)
	}

	return nil
}

// IdFullConfigurationMultiError is an error wrapping multiple validation
// errors returned by IdFullConfiguration.ValidateAll() if the designated
// constraints aren't met.
type IdFullConfigurationMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdFullConfigurationMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdFullConfigurationMultiError) AllErrors() []error { return m }

// IdFullConfigurationValidationError is the validation error returned by
// IdFullConfiguration.Validate if the designated constraints aren't met.
type IdFullConfigurationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdFullConfigurationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdFullConfigurationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdFullConfigurationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdFullConfigurationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdFullConfigurationValidationError) ErrorName() string {
	return "IdFullConfigurationValidationError"
}

// Error satisfies the builtin error interface
func (e IdFullConfigurationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdFullConfiguration.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdFullConfigurationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdFullConfigurationValidationError{}

// Validate checks the field values on IdCRNti with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *IdCRNti) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdCRNti with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in IdCRNtiMultiError, or nil if none found.
func (m *IdCRNti) ValidateAll() error {
	return m.validate(true)
}

func (m *IdCRNti) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 95 {
		err := IdCRNtiValidationError{
			field:  "Value",
			reason: "value must equal 95",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdCRNtiMultiError(errors)
	}

	return nil
}

// IdCRNtiMultiError is an error wrapping multiple validation errors returned
// by IdCRNti.ValidateAll() if the designated constraints aren't met.
type IdCRNtiMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdCRNtiMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdCRNtiMultiError) AllErrors() []error { return m }

// IdCRNtiValidationError is the validation error returned by IdCRNti.Validate
// if the designated constraints aren't met.
type IdCRNtiValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdCRNtiValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdCRNtiValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdCRNtiValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdCRNtiValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdCRNtiValidationError) ErrorName() string { return "IdCRNtiValidationError" }

// Error satisfies the builtin error interface
func (e IdCRNtiValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdCRNti.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdCRNtiValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdCRNtiValidationError{}

// Validate checks the field values on IdSpCellUlconfigured with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdSpCellUlconfigured) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdSpCellUlconfigured with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdSpCellUlconfiguredMultiError, or nil if none found.
func (m *IdSpCellUlconfigured) ValidateAll() error {
	return m.validate(true)
}

func (m *IdSpCellUlconfigured) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 96 {
		err := IdSpCellUlconfiguredValidationError{
			field:  "Value",
			reason: "value must equal 96",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdSpCellUlconfiguredMultiError(errors)
	}

	return nil
}

// IdSpCellUlconfiguredMultiError is an error wrapping multiple validation
// errors returned by IdSpCellUlconfigured.ValidateAll() if the designated
// constraints aren't met.
type IdSpCellUlconfiguredMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdSpCellUlconfiguredMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdSpCellUlconfiguredMultiError) AllErrors() []error { return m }

// IdSpCellUlconfiguredValidationError is the validation error returned by
// IdSpCellUlconfigured.Validate if the designated constraints aren't met.
type IdSpCellUlconfiguredValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdSpCellUlconfiguredValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdSpCellUlconfiguredValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdSpCellUlconfiguredValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdSpCellUlconfiguredValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdSpCellUlconfiguredValidationError) ErrorName() string {
	return "IdSpCellUlconfiguredValidationError"
}

// Error satisfies the builtin error interface
func (e IdSpCellUlconfiguredValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdSpCellUlconfigured.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdSpCellUlconfiguredValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdSpCellUlconfiguredValidationError{}

// Validate checks the field values on IdInactivityMonitoringRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdInactivityMonitoringRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdInactivityMonitoringRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// IdInactivityMonitoringRequestMultiError, or nil if none found.
func (m *IdInactivityMonitoringRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *IdInactivityMonitoringRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 97 {
		err := IdInactivityMonitoringRequestValidationError{
			field:  "Value",
			reason: "value must equal 97",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdInactivityMonitoringRequestMultiError(errors)
	}

	return nil
}

// IdInactivityMonitoringRequestMultiError is an error wrapping multiple
// validation errors returned by IdInactivityMonitoringRequest.ValidateAll()
// if the designated constraints aren't met.
type IdInactivityMonitoringRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdInactivityMonitoringRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdInactivityMonitoringRequestMultiError) AllErrors() []error { return m }

// IdInactivityMonitoringRequestValidationError is the validation error
// returned by IdInactivityMonitoringRequest.Validate if the designated
// constraints aren't met.
type IdInactivityMonitoringRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdInactivityMonitoringRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdInactivityMonitoringRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdInactivityMonitoringRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdInactivityMonitoringRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdInactivityMonitoringRequestValidationError) ErrorName() string {
	return "IdInactivityMonitoringRequestValidationError"
}

// Error satisfies the builtin error interface
func (e IdInactivityMonitoringRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdInactivityMonitoringRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdInactivityMonitoringRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdInactivityMonitoringRequestValidationError{}

// Validate checks the field values on IdInactivityMonitoringResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdInactivityMonitoringResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdInactivityMonitoringResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// IdInactivityMonitoringResponseMultiError, or nil if none found.
func (m *IdInactivityMonitoringResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *IdInactivityMonitoringResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 98 {
		err := IdInactivityMonitoringResponseValidationError{
			field:  "Value",
			reason: "value must equal 98",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdInactivityMonitoringResponseMultiError(errors)
	}

	return nil
}

// IdInactivityMonitoringResponseMultiError is an error wrapping multiple
// validation errors returned by IdInactivityMonitoringResponse.ValidateAll()
// if the designated constraints aren't met.
type IdInactivityMonitoringResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdInactivityMonitoringResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdInactivityMonitoringResponseMultiError) AllErrors() []error { return m }

// IdInactivityMonitoringResponseValidationError is the validation error
// returned by IdInactivityMonitoringResponse.Validate if the designated
// constraints aren't met.
type IdInactivityMonitoringResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdInactivityMonitoringResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdInactivityMonitoringResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdInactivityMonitoringResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdInactivityMonitoringResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdInactivityMonitoringResponseValidationError) ErrorName() string {
	return "IdInactivityMonitoringResponseValidationError"
}

// Error satisfies the builtin error interface
func (e IdInactivityMonitoringResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdInactivityMonitoringResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdInactivityMonitoringResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdInactivityMonitoringResponseValidationError{}

// Validate checks the field values on IdDRbActivityItem with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *IdDRbActivityItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdDRbActivityItem with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdDRbActivityItemMultiError, or nil if none found.
func (m *IdDRbActivityItem) ValidateAll() error {
	return m.validate(true)
}

func (m *IdDRbActivityItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 99 {
		err := IdDRbActivityItemValidationError{
			field:  "Value",
			reason: "value must equal 99",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdDRbActivityItemMultiError(errors)
	}

	return nil
}

// IdDRbActivityItemMultiError is an error wrapping multiple validation errors
// returned by IdDRbActivityItem.ValidateAll() if the designated constraints
// aren't met.
type IdDRbActivityItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdDRbActivityItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdDRbActivityItemMultiError) AllErrors() []error { return m }

// IdDRbActivityItemValidationError is the validation error returned by
// IdDRbActivityItem.Validate if the designated constraints aren't met.
type IdDRbActivityItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdDRbActivityItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdDRbActivityItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdDRbActivityItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdDRbActivityItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdDRbActivityItemValidationError) ErrorName() string {
	return "IdDRbActivityItemValidationError"
}

// Error satisfies the builtin error interface
func (e IdDRbActivityItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdDRbActivityItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdDRbActivityItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdDRbActivityItemValidationError{}

// Validate checks the field values on IdDRbActivityList with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *IdDRbActivityList) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdDRbActivityList with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdDRbActivityListMultiError, or nil if none found.
func (m *IdDRbActivityList) ValidateAll() error {
	return m.validate(true)
}

func (m *IdDRbActivityList) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 100 {
		err := IdDRbActivityListValidationError{
			field:  "Value",
			reason: "value must equal 100",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdDRbActivityListMultiError(errors)
	}

	return nil
}

// IdDRbActivityListMultiError is an error wrapping multiple validation errors
// returned by IdDRbActivityList.ValidateAll() if the designated constraints
// aren't met.
type IdDRbActivityListMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdDRbActivityListMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdDRbActivityListMultiError) AllErrors() []error { return m }

// IdDRbActivityListValidationError is the validation error returned by
// IdDRbActivityList.Validate if the designated constraints aren't met.
type IdDRbActivityListValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdDRbActivityListValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdDRbActivityListValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdDRbActivityListValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdDRbActivityListValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdDRbActivityListValidationError) ErrorName() string {
	return "IdDRbActivityListValidationError"
}

// Error satisfies the builtin error interface
func (e IdDRbActivityListValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdDRbActivityList.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdDRbActivityListValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdDRbActivityListValidationError{}

// Validate checks the field values on
// IdEUtraNRCellResourceCoordinationReqContainer with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *IdEUtraNRCellResourceCoordinationReqContainer) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// IdEUtraNRCellResourceCoordinationReqContainer with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// IdEUtraNRCellResourceCoordinationReqContainerMultiError, or nil if none found.
func (m *IdEUtraNRCellResourceCoordinationReqContainer) ValidateAll() error {
	return m.validate(true)
}

func (m *IdEUtraNRCellResourceCoordinationReqContainer) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 101 {
		err := IdEUtraNRCellResourceCoordinationReqContainerValidationError{
			field:  "Value",
			reason: "value must equal 101",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdEUtraNRCellResourceCoordinationReqContainerMultiError(errors)
	}

	return nil
}

// IdEUtraNRCellResourceCoordinationReqContainerMultiError is an error wrapping
// multiple validation errors returned by
// IdEUtraNRCellResourceCoordinationReqContainer.ValidateAll() if the
// designated constraints aren't met.
type IdEUtraNRCellResourceCoordinationReqContainerMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdEUtraNRCellResourceCoordinationReqContainerMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdEUtraNRCellResourceCoordinationReqContainerMultiError) AllErrors() []error { return m }

// IdEUtraNRCellResourceCoordinationReqContainerValidationError is the
// validation error returned by
// IdEUtraNRCellResourceCoordinationReqContainer.Validate if the designated
// constraints aren't met.
type IdEUtraNRCellResourceCoordinationReqContainerValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdEUtraNRCellResourceCoordinationReqContainerValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdEUtraNRCellResourceCoordinationReqContainerValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e IdEUtraNRCellResourceCoordinationReqContainerValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdEUtraNRCellResourceCoordinationReqContainerValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdEUtraNRCellResourceCoordinationReqContainerValidationError) ErrorName() string {
	return "IdEUtraNRCellResourceCoordinationReqContainerValidationError"
}

// Error satisfies the builtin error interface
func (e IdEUtraNRCellResourceCoordinationReqContainerValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdEUtraNRCellResourceCoordinationReqContainer.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdEUtraNRCellResourceCoordinationReqContainerValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdEUtraNRCellResourceCoordinationReqContainerValidationError{}

// Validate checks the field values on
// IdEUtraNRCellResourceCoordinationReqAckContainer with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *IdEUtraNRCellResourceCoordinationReqAckContainer) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// IdEUtraNRCellResourceCoordinationReqAckContainer with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in
// IdEUtraNRCellResourceCoordinationReqAckContainerMultiError, or nil if none found.
func (m *IdEUtraNRCellResourceCoordinationReqAckContainer) ValidateAll() error {
	return m.validate(true)
}

func (m *IdEUtraNRCellResourceCoordinationReqAckContainer) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 102 {
		err := IdEUtraNRCellResourceCoordinationReqAckContainerValidationError{
			field:  "Value",
			reason: "value must equal 102",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdEUtraNRCellResourceCoordinationReqAckContainerMultiError(errors)
	}

	return nil
}

// IdEUtraNRCellResourceCoordinationReqAckContainerMultiError is an error
// wrapping multiple validation errors returned by
// IdEUtraNRCellResourceCoordinationReqAckContainer.ValidateAll() if the
// designated constraints aren't met.
type IdEUtraNRCellResourceCoordinationReqAckContainerMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdEUtraNRCellResourceCoordinationReqAckContainerMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdEUtraNRCellResourceCoordinationReqAckContainerMultiError) AllErrors() []error { return m }

// IdEUtraNRCellResourceCoordinationReqAckContainerValidationError is the
// validation error returned by
// IdEUtraNRCellResourceCoordinationReqAckContainer.Validate if the designated
// constraints aren't met.
type IdEUtraNRCellResourceCoordinationReqAckContainerValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdEUtraNRCellResourceCoordinationReqAckContainerValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e IdEUtraNRCellResourceCoordinationReqAckContainerValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e IdEUtraNRCellResourceCoordinationReqAckContainerValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e IdEUtraNRCellResourceCoordinationReqAckContainerValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdEUtraNRCellResourceCoordinationReqAckContainerValidationError) ErrorName() string {
	return "IdEUtraNRCellResourceCoordinationReqAckContainerValidationError"
}

// Error satisfies the builtin error interface
func (e IdEUtraNRCellResourceCoordinationReqAckContainerValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdEUtraNRCellResourceCoordinationReqAckContainer.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdEUtraNRCellResourceCoordinationReqAckContainerValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdEUtraNRCellResourceCoordinationReqAckContainerValidationError{}

// Validate checks the field values on IdProtectedEUtraResourcesList with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdProtectedEUtraResourcesList) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdProtectedEUtraResourcesList with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// IdProtectedEUtraResourcesListMultiError, or nil if none found.
func (m *IdProtectedEUtraResourcesList) ValidateAll() error {
	return m.validate(true)
}

func (m *IdProtectedEUtraResourcesList) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 105 {
		err := IdProtectedEUtraResourcesListValidationError{
			field:  "Value",
			reason: "value must equal 105",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdProtectedEUtraResourcesListMultiError(errors)
	}

	return nil
}

// IdProtectedEUtraResourcesListMultiError is an error wrapping multiple
// validation errors returned by IdProtectedEUtraResourcesList.ValidateAll()
// if the designated constraints aren't met.
type IdProtectedEUtraResourcesListMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdProtectedEUtraResourcesListMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdProtectedEUtraResourcesListMultiError) AllErrors() []error { return m }

// IdProtectedEUtraResourcesListValidationError is the validation error
// returned by IdProtectedEUtraResourcesList.Validate if the designated
// constraints aren't met.
type IdProtectedEUtraResourcesListValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdProtectedEUtraResourcesListValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdProtectedEUtraResourcesListValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdProtectedEUtraResourcesListValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdProtectedEUtraResourcesListValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdProtectedEUtraResourcesListValidationError) ErrorName() string {
	return "IdProtectedEUtraResourcesListValidationError"
}

// Error satisfies the builtin error interface
func (e IdProtectedEUtraResourcesListValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdProtectedEUtraResourcesList.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdProtectedEUtraResourcesListValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdProtectedEUtraResourcesListValidationError{}

// Validate checks the field values on IdRequestType with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *IdRequestType) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdRequestType with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in IdRequestTypeMultiError, or
// nil if none found.
func (m *IdRequestType) ValidateAll() error {
	return m.validate(true)
}

func (m *IdRequestType) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 106 {
		err := IdRequestTypeValidationError{
			field:  "Value",
			reason: "value must equal 106",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdRequestTypeMultiError(errors)
	}

	return nil
}

// IdRequestTypeMultiError is an error wrapping multiple validation errors
// returned by IdRequestType.ValidateAll() if the designated constraints
// aren't met.
type IdRequestTypeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdRequestTypeMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdRequestTypeMultiError) AllErrors() []error { return m }

// IdRequestTypeValidationError is the validation error returned by
// IdRequestType.Validate if the designated constraints aren't met.
type IdRequestTypeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdRequestTypeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdRequestTypeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdRequestTypeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdRequestTypeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdRequestTypeValidationError) ErrorName() string { return "IdRequestTypeValidationError" }

// Error satisfies the builtin error interface
func (e IdRequestTypeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdRequestType.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdRequestTypeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdRequestTypeValidationError{}

// Validate checks the field values on IdServCellIndex with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *IdServCellIndex) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdServCellIndex with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdServCellIndexMultiError, or nil if none found.
func (m *IdServCellIndex) ValidateAll() error {
	return m.validate(true)
}

func (m *IdServCellIndex) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 107 {
		err := IdServCellIndexValidationError{
			field:  "Value",
			reason: "value must equal 107",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdServCellIndexMultiError(errors)
	}

	return nil
}

// IdServCellIndexMultiError is an error wrapping multiple validation errors
// returned by IdServCellIndex.ValidateAll() if the designated constraints
// aren't met.
type IdServCellIndexMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdServCellIndexMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdServCellIndexMultiError) AllErrors() []error { return m }

// IdServCellIndexValidationError is the validation error returned by
// IdServCellIndex.Validate if the designated constraints aren't met.
type IdServCellIndexValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdServCellIndexValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdServCellIndexValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdServCellIndexValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdServCellIndexValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdServCellIndexValidationError) ErrorName() string { return "IdServCellIndexValidationError" }

// Error satisfies the builtin error interface
func (e IdServCellIndexValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdServCellIndex.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdServCellIndexValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdServCellIndexValidationError{}

// Validate checks the field values on IdRAtFrequencyPriorityInformation with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *IdRAtFrequencyPriorityInformation) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdRAtFrequencyPriorityInformation
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// IdRAtFrequencyPriorityInformationMultiError, or nil if none found.
func (m *IdRAtFrequencyPriorityInformation) ValidateAll() error {
	return m.validate(true)
}

func (m *IdRAtFrequencyPriorityInformation) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 108 {
		err := IdRAtFrequencyPriorityInformationValidationError{
			field:  "Value",
			reason: "value must equal 108",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdRAtFrequencyPriorityInformationMultiError(errors)
	}

	return nil
}

// IdRAtFrequencyPriorityInformationMultiError is an error wrapping multiple
// validation errors returned by
// IdRAtFrequencyPriorityInformation.ValidateAll() if the designated
// constraints aren't met.
type IdRAtFrequencyPriorityInformationMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdRAtFrequencyPriorityInformationMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdRAtFrequencyPriorityInformationMultiError) AllErrors() []error { return m }

// IdRAtFrequencyPriorityInformationValidationError is the validation error
// returned by IdRAtFrequencyPriorityInformation.Validate if the designated
// constraints aren't met.
type IdRAtFrequencyPriorityInformationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdRAtFrequencyPriorityInformationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdRAtFrequencyPriorityInformationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdRAtFrequencyPriorityInformationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdRAtFrequencyPriorityInformationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdRAtFrequencyPriorityInformationValidationError) ErrorName() string {
	return "IdRAtFrequencyPriorityInformationValidationError"
}

// Error satisfies the builtin error interface
func (e IdRAtFrequencyPriorityInformationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdRAtFrequencyPriorityInformation.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdRAtFrequencyPriorityInformationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdRAtFrequencyPriorityInformationValidationError{}

// Validate checks the field values on IdExecuteDuplication with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdExecuteDuplication) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdExecuteDuplication with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdExecuteDuplicationMultiError, or nil if none found.
func (m *IdExecuteDuplication) ValidateAll() error {
	return m.validate(true)
}

func (m *IdExecuteDuplication) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 109 {
		err := IdExecuteDuplicationValidationError{
			field:  "Value",
			reason: "value must equal 109",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdExecuteDuplicationMultiError(errors)
	}

	return nil
}

// IdExecuteDuplicationMultiError is an error wrapping multiple validation
// errors returned by IdExecuteDuplication.ValidateAll() if the designated
// constraints aren't met.
type IdExecuteDuplicationMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdExecuteDuplicationMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdExecuteDuplicationMultiError) AllErrors() []error { return m }

// IdExecuteDuplicationValidationError is the validation error returned by
// IdExecuteDuplication.Validate if the designated constraints aren't met.
type IdExecuteDuplicationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdExecuteDuplicationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdExecuteDuplicationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdExecuteDuplicationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdExecuteDuplicationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdExecuteDuplicationValidationError) ErrorName() string {
	return "IdExecuteDuplicationValidationError"
}

// Error satisfies the builtin error interface
func (e IdExecuteDuplicationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdExecuteDuplication.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdExecuteDuplicationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdExecuteDuplicationValidationError{}

// Validate checks the field values on IdNRcgi with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *IdNRcgi) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdNRcgi with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in IdNRcgiMultiError, or nil if none found.
func (m *IdNRcgi) ValidateAll() error {
	return m.validate(true)
}

func (m *IdNRcgi) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 111 {
		err := IdNRcgiValidationError{
			field:  "Value",
			reason: "value must equal 111",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdNRcgiMultiError(errors)
	}

	return nil
}

// IdNRcgiMultiError is an error wrapping multiple validation errors returned
// by IdNRcgi.ValidateAll() if the designated constraints aren't met.
type IdNRcgiMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdNRcgiMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdNRcgiMultiError) AllErrors() []error { return m }

// IdNRcgiValidationError is the validation error returned by IdNRcgi.Validate
// if the designated constraints aren't met.
type IdNRcgiValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdNRcgiValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdNRcgiValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdNRcgiValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdNRcgiValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdNRcgiValidationError) ErrorName() string { return "IdNRcgiValidationError" }

// Error satisfies the builtin error interface
func (e IdNRcgiValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdNRcgi.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdNRcgiValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdNRcgiValidationError{}

// Validate checks the field values on IdPagingCellItem with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *IdPagingCellItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdPagingCellItem with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdPagingCellItemMultiError, or nil if none found.
func (m *IdPagingCellItem) ValidateAll() error {
	return m.validate(true)
}

func (m *IdPagingCellItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 112 {
		err := IdPagingCellItemValidationError{
			field:  "Value",
			reason: "value must equal 112",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdPagingCellItemMultiError(errors)
	}

	return nil
}

// IdPagingCellItemMultiError is an error wrapping multiple validation errors
// returned by IdPagingCellItem.ValidateAll() if the designated constraints
// aren't met.
type IdPagingCellItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdPagingCellItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdPagingCellItemMultiError) AllErrors() []error { return m }

// IdPagingCellItemValidationError is the validation error returned by
// IdPagingCellItem.Validate if the designated constraints aren't met.
type IdPagingCellItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdPagingCellItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdPagingCellItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdPagingCellItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdPagingCellItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdPagingCellItemValidationError) ErrorName() string { return "IdPagingCellItemValidationError" }

// Error satisfies the builtin error interface
func (e IdPagingCellItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdPagingCellItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdPagingCellItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdPagingCellItemValidationError{}

// Validate checks the field values on IdPagingCellList with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *IdPagingCellList) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdPagingCellList with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdPagingCellListMultiError, or nil if none found.
func (m *IdPagingCellList) ValidateAll() error {
	return m.validate(true)
}

func (m *IdPagingCellList) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 113 {
		err := IdPagingCellListValidationError{
			field:  "Value",
			reason: "value must equal 113",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdPagingCellListMultiError(errors)
	}

	return nil
}

// IdPagingCellListMultiError is an error wrapping multiple validation errors
// returned by IdPagingCellList.ValidateAll() if the designated constraints
// aren't met.
type IdPagingCellListMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdPagingCellListMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdPagingCellListMultiError) AllErrors() []error { return m }

// IdPagingCellListValidationError is the validation error returned by
// IdPagingCellList.Validate if the designated constraints aren't met.
type IdPagingCellListValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdPagingCellListValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdPagingCellListValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdPagingCellListValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdPagingCellListValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdPagingCellListValidationError) ErrorName() string { return "IdPagingCellListValidationError" }

// Error satisfies the builtin error interface
func (e IdPagingCellListValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdPagingCellList.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdPagingCellListValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdPagingCellListValidationError{}

// Validate checks the field values on IdPagingDrx with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *IdPagingDrx) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdPagingDrx with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in IdPagingDrxMultiError, or
// nil if none found.
func (m *IdPagingDrx) ValidateAll() error {
	return m.validate(true)
}

func (m *IdPagingDrx) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 114 {
		err := IdPagingDrxValidationError{
			field:  "Value",
			reason: "value must equal 114",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdPagingDrxMultiError(errors)
	}

	return nil
}

// IdPagingDrxMultiError is an error wrapping multiple validation errors
// returned by IdPagingDrx.ValidateAll() if the designated constraints aren't met.
type IdPagingDrxMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdPagingDrxMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdPagingDrxMultiError) AllErrors() []error { return m }

// IdPagingDrxValidationError is the validation error returned by
// IdPagingDrx.Validate if the designated constraints aren't met.
type IdPagingDrxValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdPagingDrxValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdPagingDrxValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdPagingDrxValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdPagingDrxValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdPagingDrxValidationError) ErrorName() string { return "IdPagingDrxValidationError" }

// Error satisfies the builtin error interface
func (e IdPagingDrxValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdPagingDrx.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdPagingDrxValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdPagingDrxValidationError{}

// Validate checks the field values on IdPagingPriority with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *IdPagingPriority) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdPagingPriority with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdPagingPriorityMultiError, or nil if none found.
func (m *IdPagingPriority) ValidateAll() error {
	return m.validate(true)
}

func (m *IdPagingPriority) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 115 {
		err := IdPagingPriorityValidationError{
			field:  "Value",
			reason: "value must equal 115",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdPagingPriorityMultiError(errors)
	}

	return nil
}

// IdPagingPriorityMultiError is an error wrapping multiple validation errors
// returned by IdPagingPriority.ValidateAll() if the designated constraints
// aren't met.
type IdPagingPriorityMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdPagingPriorityMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdPagingPriorityMultiError) AllErrors() []error { return m }

// IdPagingPriorityValidationError is the validation error returned by
// IdPagingPriority.Validate if the designated constraints aren't met.
type IdPagingPriorityValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdPagingPriorityValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdPagingPriorityValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdPagingPriorityValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdPagingPriorityValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdPagingPriorityValidationError) ErrorName() string { return "IdPagingPriorityValidationError" }

// Error satisfies the builtin error interface
func (e IdPagingPriorityValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdPagingPriority.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdPagingPriorityValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdPagingPriorityValidationError{}

// Validate checks the field values on IdSItypeList with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *IdSItypeList) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdSItypeList with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in IdSItypeListMultiError, or
// nil if none found.
func (m *IdSItypeList) ValidateAll() error {
	return m.validate(true)
}

func (m *IdSItypeList) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 116 {
		err := IdSItypeListValidationError{
			field:  "Value",
			reason: "value must equal 116",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdSItypeListMultiError(errors)
	}

	return nil
}

// IdSItypeListMultiError is an error wrapping multiple validation errors
// returned by IdSItypeList.ValidateAll() if the designated constraints aren't met.
type IdSItypeListMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdSItypeListMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdSItypeListMultiError) AllErrors() []error { return m }

// IdSItypeListValidationError is the validation error returned by
// IdSItypeList.Validate if the designated constraints aren't met.
type IdSItypeListValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdSItypeListValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdSItypeListValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdSItypeListValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdSItypeListValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdSItypeListValidationError) ErrorName() string { return "IdSItypeListValidationError" }

// Error satisfies the builtin error interface
func (e IdSItypeListValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdSItypeList.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdSItypeListValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdSItypeListValidationError{}

// Validate checks the field values on IdUEidentityIndexValue with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdUEidentityIndexValue) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdUEidentityIndexValue with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdUEidentityIndexValueMultiError, or nil if none found.
func (m *IdUEidentityIndexValue) ValidateAll() error {
	return m.validate(true)
}

func (m *IdUEidentityIndexValue) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 117 {
		err := IdUEidentityIndexValueValidationError{
			field:  "Value",
			reason: "value must equal 117",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdUEidentityIndexValueMultiError(errors)
	}

	return nil
}

// IdUEidentityIndexValueMultiError is an error wrapping multiple validation
// errors returned by IdUEidentityIndexValue.ValidateAll() if the designated
// constraints aren't met.
type IdUEidentityIndexValueMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdUEidentityIndexValueMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdUEidentityIndexValueMultiError) AllErrors() []error { return m }

// IdUEidentityIndexValueValidationError is the validation error returned by
// IdUEidentityIndexValue.Validate if the designated constraints aren't met.
type IdUEidentityIndexValueValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdUEidentityIndexValueValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdUEidentityIndexValueValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdUEidentityIndexValueValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdUEidentityIndexValueValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdUEidentityIndexValueValidationError) ErrorName() string {
	return "IdUEidentityIndexValueValidationError"
}

// Error satisfies the builtin error interface
func (e IdUEidentityIndexValueValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdUEidentityIndexValue.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdUEidentityIndexValueValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdUEidentityIndexValueValidationError{}

// Validate checks the field values on IdgNbCUsystemInformation with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdgNbCUsystemInformation) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdgNbCUsystemInformation with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdgNbCUsystemInformationMultiError, or nil if none found.
func (m *IdgNbCUsystemInformation) ValidateAll() error {
	return m.validate(true)
}

func (m *IdgNbCUsystemInformation) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 118 {
		err := IdgNbCUsystemInformationValidationError{
			field:  "Value",
			reason: "value must equal 118",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdgNbCUsystemInformationMultiError(errors)
	}

	return nil
}

// IdgNbCUsystemInformationMultiError is an error wrapping multiple validation
// errors returned by IdgNbCUsystemInformation.ValidateAll() if the designated
// constraints aren't met.
type IdgNbCUsystemInformationMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdgNbCUsystemInformationMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdgNbCUsystemInformationMultiError) AllErrors() []error { return m }

// IdgNbCUsystemInformationValidationError is the validation error returned by
// IdgNbCUsystemInformation.Validate if the designated constraints aren't met.
type IdgNbCUsystemInformationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdgNbCUsystemInformationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdgNbCUsystemInformationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdgNbCUsystemInformationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdgNbCUsystemInformationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdgNbCUsystemInformationValidationError) ErrorName() string {
	return "IdgNbCUsystemInformationValidationError"
}

// Error satisfies the builtin error interface
func (e IdgNbCUsystemInformationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdgNbCUsystemInformation.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdgNbCUsystemInformationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdgNbCUsystemInformationValidationError{}

// Validate checks the field values on IdHandoverPreparationInformation with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *IdHandoverPreparationInformation) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdHandoverPreparationInformation with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// IdHandoverPreparationInformationMultiError, or nil if none found.
func (m *IdHandoverPreparationInformation) ValidateAll() error {
	return m.validate(true)
}

func (m *IdHandoverPreparationInformation) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 119 {
		err := IdHandoverPreparationInformationValidationError{
			field:  "Value",
			reason: "value must equal 119",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdHandoverPreparationInformationMultiError(errors)
	}

	return nil
}

// IdHandoverPreparationInformationMultiError is an error wrapping multiple
// validation errors returned by
// IdHandoverPreparationInformation.ValidateAll() if the designated
// constraints aren't met.
type IdHandoverPreparationInformationMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdHandoverPreparationInformationMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdHandoverPreparationInformationMultiError) AllErrors() []error { return m }

// IdHandoverPreparationInformationValidationError is the validation error
// returned by IdHandoverPreparationInformation.Validate if the designated
// constraints aren't met.
type IdHandoverPreparationInformationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdHandoverPreparationInformationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdHandoverPreparationInformationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdHandoverPreparationInformationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdHandoverPreparationInformationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdHandoverPreparationInformationValidationError) ErrorName() string {
	return "IdHandoverPreparationInformationValidationError"
}

// Error satisfies the builtin error interface
func (e IdHandoverPreparationInformationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdHandoverPreparationInformation.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdHandoverPreparationInformationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdHandoverPreparationInformationValidationError{}

// Validate checks the field values on IdGNbCUTNlAssociationToAddItem with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdGNbCUTNlAssociationToAddItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdGNbCUTNlAssociationToAddItem with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// IdGNbCUTNlAssociationToAddItemMultiError, or nil if none found.
func (m *IdGNbCUTNlAssociationToAddItem) ValidateAll() error {
	return m.validate(true)
}

func (m *IdGNbCUTNlAssociationToAddItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 120 {
		err := IdGNbCUTNlAssociationToAddItemValidationError{
			field:  "Value",
			reason: "value must equal 120",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdGNbCUTNlAssociationToAddItemMultiError(errors)
	}

	return nil
}

// IdGNbCUTNlAssociationToAddItemMultiError is an error wrapping multiple
// validation errors returned by IdGNbCUTNlAssociationToAddItem.ValidateAll()
// if the designated constraints aren't met.
type IdGNbCUTNlAssociationToAddItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdGNbCUTNlAssociationToAddItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdGNbCUTNlAssociationToAddItemMultiError) AllErrors() []error { return m }

// IdGNbCUTNlAssociationToAddItemValidationError is the validation error
// returned by IdGNbCUTNlAssociationToAddItem.Validate if the designated
// constraints aren't met.
type IdGNbCUTNlAssociationToAddItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdGNbCUTNlAssociationToAddItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdGNbCUTNlAssociationToAddItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdGNbCUTNlAssociationToAddItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdGNbCUTNlAssociationToAddItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdGNbCUTNlAssociationToAddItemValidationError) ErrorName() string {
	return "IdGNbCUTNlAssociationToAddItemValidationError"
}

// Error satisfies the builtin error interface
func (e IdGNbCUTNlAssociationToAddItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdGNbCUTNlAssociationToAddItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdGNbCUTNlAssociationToAddItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdGNbCUTNlAssociationToAddItemValidationError{}

// Validate checks the field values on IdGNbCUTNlAssociationToAddList with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdGNbCUTNlAssociationToAddList) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdGNbCUTNlAssociationToAddList with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// IdGNbCUTNlAssociationToAddListMultiError, or nil if none found.
func (m *IdGNbCUTNlAssociationToAddList) ValidateAll() error {
	return m.validate(true)
}

func (m *IdGNbCUTNlAssociationToAddList) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 121 {
		err := IdGNbCUTNlAssociationToAddListValidationError{
			field:  "Value",
			reason: "value must equal 121",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdGNbCUTNlAssociationToAddListMultiError(errors)
	}

	return nil
}

// IdGNbCUTNlAssociationToAddListMultiError is an error wrapping multiple
// validation errors returned by IdGNbCUTNlAssociationToAddList.ValidateAll()
// if the designated constraints aren't met.
type IdGNbCUTNlAssociationToAddListMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdGNbCUTNlAssociationToAddListMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdGNbCUTNlAssociationToAddListMultiError) AllErrors() []error { return m }

// IdGNbCUTNlAssociationToAddListValidationError is the validation error
// returned by IdGNbCUTNlAssociationToAddList.Validate if the designated
// constraints aren't met.
type IdGNbCUTNlAssociationToAddListValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdGNbCUTNlAssociationToAddListValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdGNbCUTNlAssociationToAddListValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdGNbCUTNlAssociationToAddListValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdGNbCUTNlAssociationToAddListValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdGNbCUTNlAssociationToAddListValidationError) ErrorName() string {
	return "IdGNbCUTNlAssociationToAddListValidationError"
}

// Error satisfies the builtin error interface
func (e IdGNbCUTNlAssociationToAddListValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdGNbCUTNlAssociationToAddList.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdGNbCUTNlAssociationToAddListValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdGNbCUTNlAssociationToAddListValidationError{}

// Validate checks the field values on IdGNbCUTNlAssociationToRemoveItem with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *IdGNbCUTNlAssociationToRemoveItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdGNbCUTNlAssociationToRemoveItem
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// IdGNbCUTNlAssociationToRemoveItemMultiError, or nil if none found.
func (m *IdGNbCUTNlAssociationToRemoveItem) ValidateAll() error {
	return m.validate(true)
}

func (m *IdGNbCUTNlAssociationToRemoveItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 122 {
		err := IdGNbCUTNlAssociationToRemoveItemValidationError{
			field:  "Value",
			reason: "value must equal 122",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdGNbCUTNlAssociationToRemoveItemMultiError(errors)
	}

	return nil
}

// IdGNbCUTNlAssociationToRemoveItemMultiError is an error wrapping multiple
// validation errors returned by
// IdGNbCUTNlAssociationToRemoveItem.ValidateAll() if the designated
// constraints aren't met.
type IdGNbCUTNlAssociationToRemoveItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdGNbCUTNlAssociationToRemoveItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdGNbCUTNlAssociationToRemoveItemMultiError) AllErrors() []error { return m }

// IdGNbCUTNlAssociationToRemoveItemValidationError is the validation error
// returned by IdGNbCUTNlAssociationToRemoveItem.Validate if the designated
// constraints aren't met.
type IdGNbCUTNlAssociationToRemoveItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdGNbCUTNlAssociationToRemoveItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdGNbCUTNlAssociationToRemoveItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdGNbCUTNlAssociationToRemoveItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdGNbCUTNlAssociationToRemoveItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdGNbCUTNlAssociationToRemoveItemValidationError) ErrorName() string {
	return "IdGNbCUTNlAssociationToRemoveItemValidationError"
}

// Error satisfies the builtin error interface
func (e IdGNbCUTNlAssociationToRemoveItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdGNbCUTNlAssociationToRemoveItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdGNbCUTNlAssociationToRemoveItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdGNbCUTNlAssociationToRemoveItemValidationError{}

// Validate checks the field values on IdGNbCUTNlAssociationToRemoveList with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *IdGNbCUTNlAssociationToRemoveList) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdGNbCUTNlAssociationToRemoveList
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// IdGNbCUTNlAssociationToRemoveListMultiError, or nil if none found.
func (m *IdGNbCUTNlAssociationToRemoveList) ValidateAll() error {
	return m.validate(true)
}

func (m *IdGNbCUTNlAssociationToRemoveList) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 123 {
		err := IdGNbCUTNlAssociationToRemoveListValidationError{
			field:  "Value",
			reason: "value must equal 123",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdGNbCUTNlAssociationToRemoveListMultiError(errors)
	}

	return nil
}

// IdGNbCUTNlAssociationToRemoveListMultiError is an error wrapping multiple
// validation errors returned by
// IdGNbCUTNlAssociationToRemoveList.ValidateAll() if the designated
// constraints aren't met.
type IdGNbCUTNlAssociationToRemoveListMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdGNbCUTNlAssociationToRemoveListMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdGNbCUTNlAssociationToRemoveListMultiError) AllErrors() []error { return m }

// IdGNbCUTNlAssociationToRemoveListValidationError is the validation error
// returned by IdGNbCUTNlAssociationToRemoveList.Validate if the designated
// constraints aren't met.
type IdGNbCUTNlAssociationToRemoveListValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdGNbCUTNlAssociationToRemoveListValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdGNbCUTNlAssociationToRemoveListValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdGNbCUTNlAssociationToRemoveListValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdGNbCUTNlAssociationToRemoveListValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdGNbCUTNlAssociationToRemoveListValidationError) ErrorName() string {
	return "IdGNbCUTNlAssociationToRemoveListValidationError"
}

// Error satisfies the builtin error interface
func (e IdGNbCUTNlAssociationToRemoveListValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdGNbCUTNlAssociationToRemoveList.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdGNbCUTNlAssociationToRemoveListValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdGNbCUTNlAssociationToRemoveListValidationError{}

// Validate checks the field values on IdGNbCUTNlAssociationToUpdateItem with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *IdGNbCUTNlAssociationToUpdateItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdGNbCUTNlAssociationToUpdateItem
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// IdGNbCUTNlAssociationToUpdateItemMultiError, or nil if none found.
func (m *IdGNbCUTNlAssociationToUpdateItem) ValidateAll() error {
	return m.validate(true)
}

func (m *IdGNbCUTNlAssociationToUpdateItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 124 {
		err := IdGNbCUTNlAssociationToUpdateItemValidationError{
			field:  "Value",
			reason: "value must equal 124",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdGNbCUTNlAssociationToUpdateItemMultiError(errors)
	}

	return nil
}

// IdGNbCUTNlAssociationToUpdateItemMultiError is an error wrapping multiple
// validation errors returned by
// IdGNbCUTNlAssociationToUpdateItem.ValidateAll() if the designated
// constraints aren't met.
type IdGNbCUTNlAssociationToUpdateItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdGNbCUTNlAssociationToUpdateItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdGNbCUTNlAssociationToUpdateItemMultiError) AllErrors() []error { return m }

// IdGNbCUTNlAssociationToUpdateItemValidationError is the validation error
// returned by IdGNbCUTNlAssociationToUpdateItem.Validate if the designated
// constraints aren't met.
type IdGNbCUTNlAssociationToUpdateItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdGNbCUTNlAssociationToUpdateItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdGNbCUTNlAssociationToUpdateItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdGNbCUTNlAssociationToUpdateItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdGNbCUTNlAssociationToUpdateItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdGNbCUTNlAssociationToUpdateItemValidationError) ErrorName() string {
	return "IdGNbCUTNlAssociationToUpdateItemValidationError"
}

// Error satisfies the builtin error interface
func (e IdGNbCUTNlAssociationToUpdateItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdGNbCUTNlAssociationToUpdateItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdGNbCUTNlAssociationToUpdateItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdGNbCUTNlAssociationToUpdateItemValidationError{}

// Validate checks the field values on IdGNbCUTNlAssociationToUpdateList with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *IdGNbCUTNlAssociationToUpdateList) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdGNbCUTNlAssociationToUpdateList
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// IdGNbCUTNlAssociationToUpdateListMultiError, or nil if none found.
func (m *IdGNbCUTNlAssociationToUpdateList) ValidateAll() error {
	return m.validate(true)
}

func (m *IdGNbCUTNlAssociationToUpdateList) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 125 {
		err := IdGNbCUTNlAssociationToUpdateListValidationError{
			field:  "Value",
			reason: "value must equal 125",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdGNbCUTNlAssociationToUpdateListMultiError(errors)
	}

	return nil
}

// IdGNbCUTNlAssociationToUpdateListMultiError is an error wrapping multiple
// validation errors returned by
// IdGNbCUTNlAssociationToUpdateList.ValidateAll() if the designated
// constraints aren't met.
type IdGNbCUTNlAssociationToUpdateListMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdGNbCUTNlAssociationToUpdateListMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdGNbCUTNlAssociationToUpdateListMultiError) AllErrors() []error { return m }

// IdGNbCUTNlAssociationToUpdateListValidationError is the validation error
// returned by IdGNbCUTNlAssociationToUpdateList.Validate if the designated
// constraints aren't met.
type IdGNbCUTNlAssociationToUpdateListValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdGNbCUTNlAssociationToUpdateListValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdGNbCUTNlAssociationToUpdateListValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdGNbCUTNlAssociationToUpdateListValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdGNbCUTNlAssociationToUpdateListValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdGNbCUTNlAssociationToUpdateListValidationError) ErrorName() string {
	return "IdGNbCUTNlAssociationToUpdateListValidationError"
}

// Error satisfies the builtin error interface
func (e IdGNbCUTNlAssociationToUpdateListValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdGNbCUTNlAssociationToUpdateList.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdGNbCUTNlAssociationToUpdateListValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdGNbCUTNlAssociationToUpdateListValidationError{}

// Validate checks the field values on IdMaskedImeisv with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *IdMaskedImeisv) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdMaskedImeisv with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in IdMaskedImeisvMultiError,
// or nil if none found.
func (m *IdMaskedImeisv) ValidateAll() error {
	return m.validate(true)
}

func (m *IdMaskedImeisv) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 126 {
		err := IdMaskedImeisvValidationError{
			field:  "Value",
			reason: "value must equal 126",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdMaskedImeisvMultiError(errors)
	}

	return nil
}

// IdMaskedImeisvMultiError is an error wrapping multiple validation errors
// returned by IdMaskedImeisv.ValidateAll() if the designated constraints
// aren't met.
type IdMaskedImeisvMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdMaskedImeisvMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdMaskedImeisvMultiError) AllErrors() []error { return m }

// IdMaskedImeisvValidationError is the validation error returned by
// IdMaskedImeisv.Validate if the designated constraints aren't met.
type IdMaskedImeisvValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdMaskedImeisvValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdMaskedImeisvValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdMaskedImeisvValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdMaskedImeisvValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdMaskedImeisvValidationError) ErrorName() string { return "IdMaskedImeisvValidationError" }

// Error satisfies the builtin error interface
func (e IdMaskedImeisvValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdMaskedImeisv.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdMaskedImeisvValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdMaskedImeisvValidationError{}

// Validate checks the field values on IdPagingIdentity with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *IdPagingIdentity) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdPagingIdentity with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdPagingIdentityMultiError, or nil if none found.
func (m *IdPagingIdentity) ValidateAll() error {
	return m.validate(true)
}

func (m *IdPagingIdentity) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 127 {
		err := IdPagingIdentityValidationError{
			field:  "Value",
			reason: "value must equal 127",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdPagingIdentityMultiError(errors)
	}

	return nil
}

// IdPagingIdentityMultiError is an error wrapping multiple validation errors
// returned by IdPagingIdentity.ValidateAll() if the designated constraints
// aren't met.
type IdPagingIdentityMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdPagingIdentityMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdPagingIdentityMultiError) AllErrors() []error { return m }

// IdPagingIdentityValidationError is the validation error returned by
// IdPagingIdentity.Validate if the designated constraints aren't met.
type IdPagingIdentityValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdPagingIdentityValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdPagingIdentityValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdPagingIdentityValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdPagingIdentityValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdPagingIdentityValidationError) ErrorName() string { return "IdPagingIdentityValidationError" }

// Error satisfies the builtin error interface
func (e IdPagingIdentityValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdPagingIdentity.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdPagingIdentityValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdPagingIdentityValidationError{}

// Validate checks the field values on IdDUtoCurrccontainer with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdDUtoCurrccontainer) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdDUtoCurrccontainer with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdDUtoCurrccontainerMultiError, or nil if none found.
func (m *IdDUtoCurrccontainer) ValidateAll() error {
	return m.validate(true)
}

func (m *IdDUtoCurrccontainer) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 128 {
		err := IdDUtoCurrccontainerValidationError{
			field:  "Value",
			reason: "value must equal 128",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdDUtoCurrccontainerMultiError(errors)
	}

	return nil
}

// IdDUtoCurrccontainerMultiError is an error wrapping multiple validation
// errors returned by IdDUtoCurrccontainer.ValidateAll() if the designated
// constraints aren't met.
type IdDUtoCurrccontainerMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdDUtoCurrccontainerMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdDUtoCurrccontainerMultiError) AllErrors() []error { return m }

// IdDUtoCurrccontainerValidationError is the validation error returned by
// IdDUtoCurrccontainer.Validate if the designated constraints aren't met.
type IdDUtoCurrccontainerValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdDUtoCurrccontainerValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdDUtoCurrccontainerValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdDUtoCurrccontainerValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdDUtoCurrccontainerValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdDUtoCurrccontainerValidationError) ErrorName() string {
	return "IdDUtoCurrccontainerValidationError"
}

// Error satisfies the builtin error interface
func (e IdDUtoCurrccontainerValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdDUtoCurrccontainer.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdDUtoCurrccontainerValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdDUtoCurrccontainerValidationError{}

// Validate checks the field values on IdCellstobeBarredList with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdCellstobeBarredList) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdCellstobeBarredList with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdCellstobeBarredListMultiError, or nil if none found.
func (m *IdCellstobeBarredList) ValidateAll() error {
	return m.validate(true)
}

func (m *IdCellstobeBarredList) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 129 {
		err := IdCellstobeBarredListValidationError{
			field:  "Value",
			reason: "value must equal 129",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdCellstobeBarredListMultiError(errors)
	}

	return nil
}

// IdCellstobeBarredListMultiError is an error wrapping multiple validation
// errors returned by IdCellstobeBarredList.ValidateAll() if the designated
// constraints aren't met.
type IdCellstobeBarredListMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdCellstobeBarredListMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdCellstobeBarredListMultiError) AllErrors() []error { return m }

// IdCellstobeBarredListValidationError is the validation error returned by
// IdCellstobeBarredList.Validate if the designated constraints aren't met.
type IdCellstobeBarredListValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdCellstobeBarredListValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdCellstobeBarredListValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdCellstobeBarredListValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdCellstobeBarredListValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdCellstobeBarredListValidationError) ErrorName() string {
	return "IdCellstobeBarredListValidationError"
}

// Error satisfies the builtin error interface
func (e IdCellstobeBarredListValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdCellstobeBarredList.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdCellstobeBarredListValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdCellstobeBarredListValidationError{}

// Validate checks the field values on IdCellstobeBarredItem with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdCellstobeBarredItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdCellstobeBarredItem with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdCellstobeBarredItemMultiError, or nil if none found.
func (m *IdCellstobeBarredItem) ValidateAll() error {
	return m.validate(true)
}

func (m *IdCellstobeBarredItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 130 {
		err := IdCellstobeBarredItemValidationError{
			field:  "Value",
			reason: "value must equal 130",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdCellstobeBarredItemMultiError(errors)
	}

	return nil
}

// IdCellstobeBarredItemMultiError is an error wrapping multiple validation
// errors returned by IdCellstobeBarredItem.ValidateAll() if the designated
// constraints aren't met.
type IdCellstobeBarredItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdCellstobeBarredItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdCellstobeBarredItemMultiError) AllErrors() []error { return m }

// IdCellstobeBarredItemValidationError is the validation error returned by
// IdCellstobeBarredItem.Validate if the designated constraints aren't met.
type IdCellstobeBarredItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdCellstobeBarredItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdCellstobeBarredItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdCellstobeBarredItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdCellstobeBarredItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdCellstobeBarredItemValidationError) ErrorName() string {
	return "IdCellstobeBarredItemValidationError"
}

// Error satisfies the builtin error interface
func (e IdCellstobeBarredItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdCellstobeBarredItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdCellstobeBarredItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdCellstobeBarredItemValidationError{}

// Validate checks the field values on IdTAisliceSupportList with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdTAisliceSupportList) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdTAisliceSupportList with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdTAisliceSupportListMultiError, or nil if none found.
func (m *IdTAisliceSupportList) ValidateAll() error {
	return m.validate(true)
}

func (m *IdTAisliceSupportList) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 131 {
		err := IdTAisliceSupportListValidationError{
			field:  "Value",
			reason: "value must equal 131",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdTAisliceSupportListMultiError(errors)
	}

	return nil
}

// IdTAisliceSupportListMultiError is an error wrapping multiple validation
// errors returned by IdTAisliceSupportList.ValidateAll() if the designated
// constraints aren't met.
type IdTAisliceSupportListMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdTAisliceSupportListMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdTAisliceSupportListMultiError) AllErrors() []error { return m }

// IdTAisliceSupportListValidationError is the validation error returned by
// IdTAisliceSupportList.Validate if the designated constraints aren't met.
type IdTAisliceSupportListValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdTAisliceSupportListValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdTAisliceSupportListValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdTAisliceSupportListValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdTAisliceSupportListValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdTAisliceSupportListValidationError) ErrorName() string {
	return "IdTAisliceSupportListValidationError"
}

// Error satisfies the builtin error interface
func (e IdTAisliceSupportListValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdTAisliceSupportList.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdTAisliceSupportListValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdTAisliceSupportListValidationError{}

// Validate checks the field values on IdGNbCUTNlAssociationSetupList with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdGNbCUTNlAssociationSetupList) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdGNbCUTNlAssociationSetupList with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// IdGNbCUTNlAssociationSetupListMultiError, or nil if none found.
func (m *IdGNbCUTNlAssociationSetupList) ValidateAll() error {
	return m.validate(true)
}

func (m *IdGNbCUTNlAssociationSetupList) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 132 {
		err := IdGNbCUTNlAssociationSetupListValidationError{
			field:  "Value",
			reason: "value must equal 132",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdGNbCUTNlAssociationSetupListMultiError(errors)
	}

	return nil
}

// IdGNbCUTNlAssociationSetupListMultiError is an error wrapping multiple
// validation errors returned by IdGNbCUTNlAssociationSetupList.ValidateAll()
// if the designated constraints aren't met.
type IdGNbCUTNlAssociationSetupListMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdGNbCUTNlAssociationSetupListMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdGNbCUTNlAssociationSetupListMultiError) AllErrors() []error { return m }

// IdGNbCUTNlAssociationSetupListValidationError is the validation error
// returned by IdGNbCUTNlAssociationSetupList.Validate if the designated
// constraints aren't met.
type IdGNbCUTNlAssociationSetupListValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdGNbCUTNlAssociationSetupListValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdGNbCUTNlAssociationSetupListValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdGNbCUTNlAssociationSetupListValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdGNbCUTNlAssociationSetupListValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdGNbCUTNlAssociationSetupListValidationError) ErrorName() string {
	return "IdGNbCUTNlAssociationSetupListValidationError"
}

// Error satisfies the builtin error interface
func (e IdGNbCUTNlAssociationSetupListValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdGNbCUTNlAssociationSetupList.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdGNbCUTNlAssociationSetupListValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdGNbCUTNlAssociationSetupListValidationError{}

// Validate checks the field values on IdGNbCUTNlAssociationSetupItem with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdGNbCUTNlAssociationSetupItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdGNbCUTNlAssociationSetupItem with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// IdGNbCUTNlAssociationSetupItemMultiError, or nil if none found.
func (m *IdGNbCUTNlAssociationSetupItem) ValidateAll() error {
	return m.validate(true)
}

func (m *IdGNbCUTNlAssociationSetupItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 133 {
		err := IdGNbCUTNlAssociationSetupItemValidationError{
			field:  "Value",
			reason: "value must equal 133",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdGNbCUTNlAssociationSetupItemMultiError(errors)
	}

	return nil
}

// IdGNbCUTNlAssociationSetupItemMultiError is an error wrapping multiple
// validation errors returned by IdGNbCUTNlAssociationSetupItem.ValidateAll()
// if the designated constraints aren't met.
type IdGNbCUTNlAssociationSetupItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdGNbCUTNlAssociationSetupItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdGNbCUTNlAssociationSetupItemMultiError) AllErrors() []error { return m }

// IdGNbCUTNlAssociationSetupItemValidationError is the validation error
// returned by IdGNbCUTNlAssociationSetupItem.Validate if the designated
// constraints aren't met.
type IdGNbCUTNlAssociationSetupItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdGNbCUTNlAssociationSetupItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdGNbCUTNlAssociationSetupItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdGNbCUTNlAssociationSetupItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdGNbCUTNlAssociationSetupItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdGNbCUTNlAssociationSetupItemValidationError) ErrorName() string {
	return "IdGNbCUTNlAssociationSetupItemValidationError"
}

// Error satisfies the builtin error interface
func (e IdGNbCUTNlAssociationSetupItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdGNbCUTNlAssociationSetupItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdGNbCUTNlAssociationSetupItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdGNbCUTNlAssociationSetupItemValidationError{}

// Validate checks the field values on IdGNbCUTNlAssociationFailedToSetupList
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *IdGNbCUTNlAssociationFailedToSetupList) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// IdGNbCUTNlAssociationFailedToSetupList with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// IdGNbCUTNlAssociationFailedToSetupListMultiError, or nil if none found.
func (m *IdGNbCUTNlAssociationFailedToSetupList) ValidateAll() error {
	return m.validate(true)
}

func (m *IdGNbCUTNlAssociationFailedToSetupList) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 134 {
		err := IdGNbCUTNlAssociationFailedToSetupListValidationError{
			field:  "Value",
			reason: "value must equal 134",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdGNbCUTNlAssociationFailedToSetupListMultiError(errors)
	}

	return nil
}

// IdGNbCUTNlAssociationFailedToSetupListMultiError is an error wrapping
// multiple validation errors returned by
// IdGNbCUTNlAssociationFailedToSetupList.ValidateAll() if the designated
// constraints aren't met.
type IdGNbCUTNlAssociationFailedToSetupListMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdGNbCUTNlAssociationFailedToSetupListMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdGNbCUTNlAssociationFailedToSetupListMultiError) AllErrors() []error { return m }

// IdGNbCUTNlAssociationFailedToSetupListValidationError is the validation
// error returned by IdGNbCUTNlAssociationFailedToSetupList.Validate if the
// designated constraints aren't met.
type IdGNbCUTNlAssociationFailedToSetupListValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdGNbCUTNlAssociationFailedToSetupListValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdGNbCUTNlAssociationFailedToSetupListValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdGNbCUTNlAssociationFailedToSetupListValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdGNbCUTNlAssociationFailedToSetupListValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdGNbCUTNlAssociationFailedToSetupListValidationError) ErrorName() string {
	return "IdGNbCUTNlAssociationFailedToSetupListValidationError"
}

// Error satisfies the builtin error interface
func (e IdGNbCUTNlAssociationFailedToSetupListValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdGNbCUTNlAssociationFailedToSetupList.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdGNbCUTNlAssociationFailedToSetupListValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdGNbCUTNlAssociationFailedToSetupListValidationError{}

// Validate checks the field values on IdGNbCUTNlAssociationFailedToSetupItem
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *IdGNbCUTNlAssociationFailedToSetupItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// IdGNbCUTNlAssociationFailedToSetupItem with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// IdGNbCUTNlAssociationFailedToSetupItemMultiError, or nil if none found.
func (m *IdGNbCUTNlAssociationFailedToSetupItem) ValidateAll() error {
	return m.validate(true)
}

func (m *IdGNbCUTNlAssociationFailedToSetupItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 135 {
		err := IdGNbCUTNlAssociationFailedToSetupItemValidationError{
			field:  "Value",
			reason: "value must equal 135",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdGNbCUTNlAssociationFailedToSetupItemMultiError(errors)
	}

	return nil
}

// IdGNbCUTNlAssociationFailedToSetupItemMultiError is an error wrapping
// multiple validation errors returned by
// IdGNbCUTNlAssociationFailedToSetupItem.ValidateAll() if the designated
// constraints aren't met.
type IdGNbCUTNlAssociationFailedToSetupItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdGNbCUTNlAssociationFailedToSetupItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdGNbCUTNlAssociationFailedToSetupItemMultiError) AllErrors() []error { return m }

// IdGNbCUTNlAssociationFailedToSetupItemValidationError is the validation
// error returned by IdGNbCUTNlAssociationFailedToSetupItem.Validate if the
// designated constraints aren't met.
type IdGNbCUTNlAssociationFailedToSetupItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdGNbCUTNlAssociationFailedToSetupItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdGNbCUTNlAssociationFailedToSetupItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdGNbCUTNlAssociationFailedToSetupItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdGNbCUTNlAssociationFailedToSetupItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdGNbCUTNlAssociationFailedToSetupItemValidationError) ErrorName() string {
	return "IdGNbCUTNlAssociationFailedToSetupItemValidationError"
}

// Error satisfies the builtin error interface
func (e IdGNbCUTNlAssociationFailedToSetupItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdGNbCUTNlAssociationFailedToSetupItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdGNbCUTNlAssociationFailedToSetupItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdGNbCUTNlAssociationFailedToSetupItemValidationError{}

// Validate checks the field values on IdDRbNotifyItem with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *IdDRbNotifyItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdDRbNotifyItem with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdDRbNotifyItemMultiError, or nil if none found.
func (m *IdDRbNotifyItem) ValidateAll() error {
	return m.validate(true)
}

func (m *IdDRbNotifyItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 136 {
		err := IdDRbNotifyItemValidationError{
			field:  "Value",
			reason: "value must equal 136",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdDRbNotifyItemMultiError(errors)
	}

	return nil
}

// IdDRbNotifyItemMultiError is an error wrapping multiple validation errors
// returned by IdDRbNotifyItem.ValidateAll() if the designated constraints
// aren't met.
type IdDRbNotifyItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdDRbNotifyItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdDRbNotifyItemMultiError) AllErrors() []error { return m }

// IdDRbNotifyItemValidationError is the validation error returned by
// IdDRbNotifyItem.Validate if the designated constraints aren't met.
type IdDRbNotifyItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdDRbNotifyItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdDRbNotifyItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdDRbNotifyItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdDRbNotifyItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdDRbNotifyItemValidationError) ErrorName() string { return "IdDRbNotifyItemValidationError" }

// Error satisfies the builtin error interface
func (e IdDRbNotifyItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdDRbNotifyItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdDRbNotifyItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdDRbNotifyItemValidationError{}

// Validate checks the field values on IdDRbNotifyList with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *IdDRbNotifyList) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdDRbNotifyList with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdDRbNotifyListMultiError, or nil if none found.
func (m *IdDRbNotifyList) ValidateAll() error {
	return m.validate(true)
}

func (m *IdDRbNotifyList) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 137 {
		err := IdDRbNotifyListValidationError{
			field:  "Value",
			reason: "value must equal 137",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdDRbNotifyListMultiError(errors)
	}

	return nil
}

// IdDRbNotifyListMultiError is an error wrapping multiple validation errors
// returned by IdDRbNotifyList.ValidateAll() if the designated constraints
// aren't met.
type IdDRbNotifyListMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdDRbNotifyListMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdDRbNotifyListMultiError) AllErrors() []error { return m }

// IdDRbNotifyListValidationError is the validation error returned by
// IdDRbNotifyList.Validate if the designated constraints aren't met.
type IdDRbNotifyListValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdDRbNotifyListValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdDRbNotifyListValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdDRbNotifyListValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdDRbNotifyListValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdDRbNotifyListValidationError) ErrorName() string { return "IdDRbNotifyListValidationError" }

// Error satisfies the builtin error interface
func (e IdDRbNotifyListValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdDRbNotifyList.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdDRbNotifyListValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdDRbNotifyListValidationError{}

// Validate checks the field values on IdNotficationControl with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdNotficationControl) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdNotficationControl with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdNotficationControlMultiError, or nil if none found.
func (m *IdNotficationControl) ValidateAll() error {
	return m.validate(true)
}

func (m *IdNotficationControl) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 138 {
		err := IdNotficationControlValidationError{
			field:  "Value",
			reason: "value must equal 138",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdNotficationControlMultiError(errors)
	}

	return nil
}

// IdNotficationControlMultiError is an error wrapping multiple validation
// errors returned by IdNotficationControl.ValidateAll() if the designated
// constraints aren't met.
type IdNotficationControlMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdNotficationControlMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdNotficationControlMultiError) AllErrors() []error { return m }

// IdNotficationControlValidationError is the validation error returned by
// IdNotficationControl.Validate if the designated constraints aren't met.
type IdNotficationControlValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdNotficationControlValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdNotficationControlValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdNotficationControlValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdNotficationControlValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdNotficationControlValidationError) ErrorName() string {
	return "IdNotficationControlValidationError"
}

// Error satisfies the builtin error interface
func (e IdNotficationControlValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdNotficationControl.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdNotficationControlValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdNotficationControlValidationError{}

// Validate checks the field values on IdRAnac with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *IdRAnac) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdRAnac with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in IdRAnacMultiError, or nil if none found.
func (m *IdRAnac) ValidateAll() error {
	return m.validate(true)
}

func (m *IdRAnac) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 139 {
		err := IdRAnacValidationError{
			field:  "Value",
			reason: "value must equal 139",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdRAnacMultiError(errors)
	}

	return nil
}

// IdRAnacMultiError is an error wrapping multiple validation errors returned
// by IdRAnac.ValidateAll() if the designated constraints aren't met.
type IdRAnacMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdRAnacMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdRAnacMultiError) AllErrors() []error { return m }

// IdRAnacValidationError is the validation error returned by IdRAnac.Validate
// if the designated constraints aren't met.
type IdRAnacValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdRAnacValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdRAnacValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdRAnacValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdRAnacValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdRAnacValidationError) ErrorName() string { return "IdRAnacValidationError" }

// Error satisfies the builtin error interface
func (e IdRAnacValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdRAnac.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdRAnacValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdRAnacValidationError{}

// Validate checks the field values on IdPWssystemInformation with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdPWssystemInformation) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdPWssystemInformation with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdPWssystemInformationMultiError, or nil if none found.
func (m *IdPWssystemInformation) ValidateAll() error {
	return m.validate(true)
}

func (m *IdPWssystemInformation) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 140 {
		err := IdPWssystemInformationValidationError{
			field:  "Value",
			reason: "value must equal 140",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdPWssystemInformationMultiError(errors)
	}

	return nil
}

// IdPWssystemInformationMultiError is an error wrapping multiple validation
// errors returned by IdPWssystemInformation.ValidateAll() if the designated
// constraints aren't met.
type IdPWssystemInformationMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdPWssystemInformationMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdPWssystemInformationMultiError) AllErrors() []error { return m }

// IdPWssystemInformationValidationError is the validation error returned by
// IdPWssystemInformation.Validate if the designated constraints aren't met.
type IdPWssystemInformationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdPWssystemInformationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdPWssystemInformationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdPWssystemInformationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdPWssystemInformationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdPWssystemInformationValidationError) ErrorName() string {
	return "IdPWssystemInformationValidationError"
}

// Error satisfies the builtin error interface
func (e IdPWssystemInformationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdPWssystemInformation.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdPWssystemInformationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdPWssystemInformationValidationError{}

// Validate checks the field values on IdRepetitionPeriod with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdRepetitionPeriod) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdRepetitionPeriod with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdRepetitionPeriodMultiError, or nil if none found.
func (m *IdRepetitionPeriod) ValidateAll() error {
	return m.validate(true)
}

func (m *IdRepetitionPeriod) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 141 {
		err := IdRepetitionPeriodValidationError{
			field:  "Value",
			reason: "value must equal 141",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdRepetitionPeriodMultiError(errors)
	}

	return nil
}

// IdRepetitionPeriodMultiError is an error wrapping multiple validation errors
// returned by IdRepetitionPeriod.ValidateAll() if the designated constraints
// aren't met.
type IdRepetitionPeriodMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdRepetitionPeriodMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdRepetitionPeriodMultiError) AllErrors() []error { return m }

// IdRepetitionPeriodValidationError is the validation error returned by
// IdRepetitionPeriod.Validate if the designated constraints aren't met.
type IdRepetitionPeriodValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdRepetitionPeriodValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdRepetitionPeriodValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdRepetitionPeriodValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdRepetitionPeriodValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdRepetitionPeriodValidationError) ErrorName() string {
	return "IdRepetitionPeriodValidationError"
}

// Error satisfies the builtin error interface
func (e IdRepetitionPeriodValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdRepetitionPeriod.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdRepetitionPeriodValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdRepetitionPeriodValidationError{}

// Validate checks the field values on IdNumberofBroadcastRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdNumberofBroadcastRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdNumberofBroadcastRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdNumberofBroadcastRequestMultiError, or nil if none found.
func (m *IdNumberofBroadcastRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *IdNumberofBroadcastRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 142 {
		err := IdNumberofBroadcastRequestValidationError{
			field:  "Value",
			reason: "value must equal 142",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdNumberofBroadcastRequestMultiError(errors)
	}

	return nil
}

// IdNumberofBroadcastRequestMultiError is an error wrapping multiple
// validation errors returned by IdNumberofBroadcastRequest.ValidateAll() if
// the designated constraints aren't met.
type IdNumberofBroadcastRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdNumberofBroadcastRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdNumberofBroadcastRequestMultiError) AllErrors() []error { return m }

// IdNumberofBroadcastRequestValidationError is the validation error returned
// by IdNumberofBroadcastRequest.Validate if the designated constraints aren't met.
type IdNumberofBroadcastRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdNumberofBroadcastRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdNumberofBroadcastRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdNumberofBroadcastRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdNumberofBroadcastRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdNumberofBroadcastRequestValidationError) ErrorName() string {
	return "IdNumberofBroadcastRequestValidationError"
}

// Error satisfies the builtin error interface
func (e IdNumberofBroadcastRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdNumberofBroadcastRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdNumberofBroadcastRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdNumberofBroadcastRequestValidationError{}

// Validate checks the field values on IdCellsToBeBroadcastList with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdCellsToBeBroadcastList) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdCellsToBeBroadcastList with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdCellsToBeBroadcastListMultiError, or nil if none found.
func (m *IdCellsToBeBroadcastList) ValidateAll() error {
	return m.validate(true)
}

func (m *IdCellsToBeBroadcastList) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 144 {
		err := IdCellsToBeBroadcastListValidationError{
			field:  "Value",
			reason: "value must equal 144",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdCellsToBeBroadcastListMultiError(errors)
	}

	return nil
}

// IdCellsToBeBroadcastListMultiError is an error wrapping multiple validation
// errors returned by IdCellsToBeBroadcastList.ValidateAll() if the designated
// constraints aren't met.
type IdCellsToBeBroadcastListMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdCellsToBeBroadcastListMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdCellsToBeBroadcastListMultiError) AllErrors() []error { return m }

// IdCellsToBeBroadcastListValidationError is the validation error returned by
// IdCellsToBeBroadcastList.Validate if the designated constraints aren't met.
type IdCellsToBeBroadcastListValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdCellsToBeBroadcastListValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdCellsToBeBroadcastListValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdCellsToBeBroadcastListValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdCellsToBeBroadcastListValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdCellsToBeBroadcastListValidationError) ErrorName() string {
	return "IdCellsToBeBroadcastListValidationError"
}

// Error satisfies the builtin error interface
func (e IdCellsToBeBroadcastListValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdCellsToBeBroadcastList.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdCellsToBeBroadcastListValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdCellsToBeBroadcastListValidationError{}

// Validate checks the field values on IdCellsToBeBroadcastItem with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdCellsToBeBroadcastItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdCellsToBeBroadcastItem with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdCellsToBeBroadcastItemMultiError, or nil if none found.
func (m *IdCellsToBeBroadcastItem) ValidateAll() error {
	return m.validate(true)
}

func (m *IdCellsToBeBroadcastItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 145 {
		err := IdCellsToBeBroadcastItemValidationError{
			field:  "Value",
			reason: "value must equal 145",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdCellsToBeBroadcastItemMultiError(errors)
	}

	return nil
}

// IdCellsToBeBroadcastItemMultiError is an error wrapping multiple validation
// errors returned by IdCellsToBeBroadcastItem.ValidateAll() if the designated
// constraints aren't met.
type IdCellsToBeBroadcastItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdCellsToBeBroadcastItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdCellsToBeBroadcastItemMultiError) AllErrors() []error { return m }

// IdCellsToBeBroadcastItemValidationError is the validation error returned by
// IdCellsToBeBroadcastItem.Validate if the designated constraints aren't met.
type IdCellsToBeBroadcastItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdCellsToBeBroadcastItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdCellsToBeBroadcastItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdCellsToBeBroadcastItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdCellsToBeBroadcastItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdCellsToBeBroadcastItemValidationError) ErrorName() string {
	return "IdCellsToBeBroadcastItemValidationError"
}

// Error satisfies the builtin error interface
func (e IdCellsToBeBroadcastItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdCellsToBeBroadcastItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdCellsToBeBroadcastItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdCellsToBeBroadcastItemValidationError{}

// Validate checks the field values on IdCellsBroadcastCompletedList with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdCellsBroadcastCompletedList) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdCellsBroadcastCompletedList with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// IdCellsBroadcastCompletedListMultiError, or nil if none found.
func (m *IdCellsBroadcastCompletedList) ValidateAll() error {
	return m.validate(true)
}

func (m *IdCellsBroadcastCompletedList) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 146 {
		err := IdCellsBroadcastCompletedListValidationError{
			field:  "Value",
			reason: "value must equal 146",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdCellsBroadcastCompletedListMultiError(errors)
	}

	return nil
}

// IdCellsBroadcastCompletedListMultiError is an error wrapping multiple
// validation errors returned by IdCellsBroadcastCompletedList.ValidateAll()
// if the designated constraints aren't met.
type IdCellsBroadcastCompletedListMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdCellsBroadcastCompletedListMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdCellsBroadcastCompletedListMultiError) AllErrors() []error { return m }

// IdCellsBroadcastCompletedListValidationError is the validation error
// returned by IdCellsBroadcastCompletedList.Validate if the designated
// constraints aren't met.
type IdCellsBroadcastCompletedListValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdCellsBroadcastCompletedListValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdCellsBroadcastCompletedListValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdCellsBroadcastCompletedListValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdCellsBroadcastCompletedListValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdCellsBroadcastCompletedListValidationError) ErrorName() string {
	return "IdCellsBroadcastCompletedListValidationError"
}

// Error satisfies the builtin error interface
func (e IdCellsBroadcastCompletedListValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdCellsBroadcastCompletedList.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdCellsBroadcastCompletedListValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdCellsBroadcastCompletedListValidationError{}

// Validate checks the field values on IdCellsBroadcastCompletedItem with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdCellsBroadcastCompletedItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdCellsBroadcastCompletedItem with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// IdCellsBroadcastCompletedItemMultiError, or nil if none found.
func (m *IdCellsBroadcastCompletedItem) ValidateAll() error {
	return m.validate(true)
}

func (m *IdCellsBroadcastCompletedItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 147 {
		err := IdCellsBroadcastCompletedItemValidationError{
			field:  "Value",
			reason: "value must equal 147",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdCellsBroadcastCompletedItemMultiError(errors)
	}

	return nil
}

// IdCellsBroadcastCompletedItemMultiError is an error wrapping multiple
// validation errors returned by IdCellsBroadcastCompletedItem.ValidateAll()
// if the designated constraints aren't met.
type IdCellsBroadcastCompletedItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdCellsBroadcastCompletedItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdCellsBroadcastCompletedItemMultiError) AllErrors() []error { return m }

// IdCellsBroadcastCompletedItemValidationError is the validation error
// returned by IdCellsBroadcastCompletedItem.Validate if the designated
// constraints aren't met.
type IdCellsBroadcastCompletedItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdCellsBroadcastCompletedItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdCellsBroadcastCompletedItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdCellsBroadcastCompletedItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdCellsBroadcastCompletedItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdCellsBroadcastCompletedItemValidationError) ErrorName() string {
	return "IdCellsBroadcastCompletedItemValidationError"
}

// Error satisfies the builtin error interface
func (e IdCellsBroadcastCompletedItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdCellsBroadcastCompletedItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdCellsBroadcastCompletedItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdCellsBroadcastCompletedItemValidationError{}

// Validate checks the field values on IdBroadcastToBeCancelledList with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdBroadcastToBeCancelledList) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdBroadcastToBeCancelledList with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdBroadcastToBeCancelledListMultiError, or nil if none found.
func (m *IdBroadcastToBeCancelledList) ValidateAll() error {
	return m.validate(true)
}

func (m *IdBroadcastToBeCancelledList) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 148 {
		err := IdBroadcastToBeCancelledListValidationError{
			field:  "Value",
			reason: "value must equal 148",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdBroadcastToBeCancelledListMultiError(errors)
	}

	return nil
}

// IdBroadcastToBeCancelledListMultiError is an error wrapping multiple
// validation errors returned by IdBroadcastToBeCancelledList.ValidateAll() if
// the designated constraints aren't met.
type IdBroadcastToBeCancelledListMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdBroadcastToBeCancelledListMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdBroadcastToBeCancelledListMultiError) AllErrors() []error { return m }

// IdBroadcastToBeCancelledListValidationError is the validation error returned
// by IdBroadcastToBeCancelledList.Validate if the designated constraints
// aren't met.
type IdBroadcastToBeCancelledListValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdBroadcastToBeCancelledListValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdBroadcastToBeCancelledListValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdBroadcastToBeCancelledListValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdBroadcastToBeCancelledListValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdBroadcastToBeCancelledListValidationError) ErrorName() string {
	return "IdBroadcastToBeCancelledListValidationError"
}

// Error satisfies the builtin error interface
func (e IdBroadcastToBeCancelledListValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdBroadcastToBeCancelledList.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdBroadcastToBeCancelledListValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdBroadcastToBeCancelledListValidationError{}

// Validate checks the field values on IdBroadcastToBeCancelledItem with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdBroadcastToBeCancelledItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdBroadcastToBeCancelledItem with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdBroadcastToBeCancelledItemMultiError, or nil if none found.
func (m *IdBroadcastToBeCancelledItem) ValidateAll() error {
	return m.validate(true)
}

func (m *IdBroadcastToBeCancelledItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 149 {
		err := IdBroadcastToBeCancelledItemValidationError{
			field:  "Value",
			reason: "value must equal 149",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdBroadcastToBeCancelledItemMultiError(errors)
	}

	return nil
}

// IdBroadcastToBeCancelledItemMultiError is an error wrapping multiple
// validation errors returned by IdBroadcastToBeCancelledItem.ValidateAll() if
// the designated constraints aren't met.
type IdBroadcastToBeCancelledItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdBroadcastToBeCancelledItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdBroadcastToBeCancelledItemMultiError) AllErrors() []error { return m }

// IdBroadcastToBeCancelledItemValidationError is the validation error returned
// by IdBroadcastToBeCancelledItem.Validate if the designated constraints
// aren't met.
type IdBroadcastToBeCancelledItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdBroadcastToBeCancelledItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdBroadcastToBeCancelledItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdBroadcastToBeCancelledItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdBroadcastToBeCancelledItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdBroadcastToBeCancelledItemValidationError) ErrorName() string {
	return "IdBroadcastToBeCancelledItemValidationError"
}

// Error satisfies the builtin error interface
func (e IdBroadcastToBeCancelledItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdBroadcastToBeCancelledItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdBroadcastToBeCancelledItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdBroadcastToBeCancelledItemValidationError{}

// Validate checks the field values on IdCellsBroadcastCancelledList with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdCellsBroadcastCancelledList) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdCellsBroadcastCancelledList with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// IdCellsBroadcastCancelledListMultiError, or nil if none found.
func (m *IdCellsBroadcastCancelledList) ValidateAll() error {
	return m.validate(true)
}

func (m *IdCellsBroadcastCancelledList) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 150 {
		err := IdCellsBroadcastCancelledListValidationError{
			field:  "Value",
			reason: "value must equal 150",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdCellsBroadcastCancelledListMultiError(errors)
	}

	return nil
}

// IdCellsBroadcastCancelledListMultiError is an error wrapping multiple
// validation errors returned by IdCellsBroadcastCancelledList.ValidateAll()
// if the designated constraints aren't met.
type IdCellsBroadcastCancelledListMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdCellsBroadcastCancelledListMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdCellsBroadcastCancelledListMultiError) AllErrors() []error { return m }

// IdCellsBroadcastCancelledListValidationError is the validation error
// returned by IdCellsBroadcastCancelledList.Validate if the designated
// constraints aren't met.
type IdCellsBroadcastCancelledListValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdCellsBroadcastCancelledListValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdCellsBroadcastCancelledListValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdCellsBroadcastCancelledListValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdCellsBroadcastCancelledListValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdCellsBroadcastCancelledListValidationError) ErrorName() string {
	return "IdCellsBroadcastCancelledListValidationError"
}

// Error satisfies the builtin error interface
func (e IdCellsBroadcastCancelledListValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdCellsBroadcastCancelledList.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdCellsBroadcastCancelledListValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdCellsBroadcastCancelledListValidationError{}

// Validate checks the field values on IdCellsBroadcastCancelledItem with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdCellsBroadcastCancelledItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdCellsBroadcastCancelledItem with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// IdCellsBroadcastCancelledItemMultiError, or nil if none found.
func (m *IdCellsBroadcastCancelledItem) ValidateAll() error {
	return m.validate(true)
}

func (m *IdCellsBroadcastCancelledItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 151 {
		err := IdCellsBroadcastCancelledItemValidationError{
			field:  "Value",
			reason: "value must equal 151",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdCellsBroadcastCancelledItemMultiError(errors)
	}

	return nil
}

// IdCellsBroadcastCancelledItemMultiError is an error wrapping multiple
// validation errors returned by IdCellsBroadcastCancelledItem.ValidateAll()
// if the designated constraints aren't met.
type IdCellsBroadcastCancelledItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdCellsBroadcastCancelledItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdCellsBroadcastCancelledItemMultiError) AllErrors() []error { return m }

// IdCellsBroadcastCancelledItemValidationError is the validation error
// returned by IdCellsBroadcastCancelledItem.Validate if the designated
// constraints aren't met.
type IdCellsBroadcastCancelledItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdCellsBroadcastCancelledItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdCellsBroadcastCancelledItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdCellsBroadcastCancelledItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdCellsBroadcastCancelledItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdCellsBroadcastCancelledItemValidationError) ErrorName() string {
	return "IdCellsBroadcastCancelledItemValidationError"
}

// Error satisfies the builtin error interface
func (e IdCellsBroadcastCancelledItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdCellsBroadcastCancelledItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdCellsBroadcastCancelledItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdCellsBroadcastCancelledItemValidationError{}

// Validate checks the field values on IdNRCGiListForRestartList with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdNRCGiListForRestartList) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdNRCGiListForRestartList with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdNRCGiListForRestartListMultiError, or nil if none found.
func (m *IdNRCGiListForRestartList) ValidateAll() error {
	return m.validate(true)
}

func (m *IdNRCGiListForRestartList) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 152 {
		err := IdNRCGiListForRestartListValidationError{
			field:  "Value",
			reason: "value must equal 152",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdNRCGiListForRestartListMultiError(errors)
	}

	return nil
}

// IdNRCGiListForRestartListMultiError is an error wrapping multiple validation
// errors returned by IdNRCGiListForRestartList.ValidateAll() if the
// designated constraints aren't met.
type IdNRCGiListForRestartListMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdNRCGiListForRestartListMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdNRCGiListForRestartListMultiError) AllErrors() []error { return m }

// IdNRCGiListForRestartListValidationError is the validation error returned by
// IdNRCGiListForRestartList.Validate if the designated constraints aren't met.
type IdNRCGiListForRestartListValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdNRCGiListForRestartListValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdNRCGiListForRestartListValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdNRCGiListForRestartListValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdNRCGiListForRestartListValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdNRCGiListForRestartListValidationError) ErrorName() string {
	return "IdNRCGiListForRestartListValidationError"
}

// Error satisfies the builtin error interface
func (e IdNRCGiListForRestartListValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdNRCGiListForRestartList.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdNRCGiListForRestartListValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdNRCGiListForRestartListValidationError{}

// Validate checks the field values on IdNRCGiListForRestartItem with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdNRCGiListForRestartItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdNRCGiListForRestartItem with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdNRCGiListForRestartItemMultiError, or nil if none found.
func (m *IdNRCGiListForRestartItem) ValidateAll() error {
	return m.validate(true)
}

func (m *IdNRCGiListForRestartItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 153 {
		err := IdNRCGiListForRestartItemValidationError{
			field:  "Value",
			reason: "value must equal 153",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdNRCGiListForRestartItemMultiError(errors)
	}

	return nil
}

// IdNRCGiListForRestartItemMultiError is an error wrapping multiple validation
// errors returned by IdNRCGiListForRestartItem.ValidateAll() if the
// designated constraints aren't met.
type IdNRCGiListForRestartItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdNRCGiListForRestartItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdNRCGiListForRestartItemMultiError) AllErrors() []error { return m }

// IdNRCGiListForRestartItemValidationError is the validation error returned by
// IdNRCGiListForRestartItem.Validate if the designated constraints aren't met.
type IdNRCGiListForRestartItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdNRCGiListForRestartItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdNRCGiListForRestartItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdNRCGiListForRestartItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdNRCGiListForRestartItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdNRCGiListForRestartItemValidationError) ErrorName() string {
	return "IdNRCGiListForRestartItemValidationError"
}

// Error satisfies the builtin error interface
func (e IdNRCGiListForRestartItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdNRCGiListForRestartItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdNRCGiListForRestartItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdNRCGiListForRestartItemValidationError{}

// Validate checks the field values on IdPWsFailedNRCGiList with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdPWsFailedNRCGiList) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdPWsFailedNRCGiList with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdPWsFailedNRCGiListMultiError, or nil if none found.
func (m *IdPWsFailedNRCGiList) ValidateAll() error {
	return m.validate(true)
}

func (m *IdPWsFailedNRCGiList) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 154 {
		err := IdPWsFailedNRCGiListValidationError{
			field:  "Value",
			reason: "value must equal 154",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdPWsFailedNRCGiListMultiError(errors)
	}

	return nil
}

// IdPWsFailedNRCGiListMultiError is an error wrapping multiple validation
// errors returned by IdPWsFailedNRCGiList.ValidateAll() if the designated
// constraints aren't met.
type IdPWsFailedNRCGiListMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdPWsFailedNRCGiListMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdPWsFailedNRCGiListMultiError) AllErrors() []error { return m }

// IdPWsFailedNRCGiListValidationError is the validation error returned by
// IdPWsFailedNRCGiList.Validate if the designated constraints aren't met.
type IdPWsFailedNRCGiListValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdPWsFailedNRCGiListValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdPWsFailedNRCGiListValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdPWsFailedNRCGiListValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdPWsFailedNRCGiListValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdPWsFailedNRCGiListValidationError) ErrorName() string {
	return "IdPWsFailedNRCGiListValidationError"
}

// Error satisfies the builtin error interface
func (e IdPWsFailedNRCGiListValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdPWsFailedNRCGiList.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdPWsFailedNRCGiListValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdPWsFailedNRCGiListValidationError{}

// Validate checks the field values on IdPWsFailedNRCGiItem with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdPWsFailedNRCGiItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdPWsFailedNRCGiItem with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdPWsFailedNRCGiItemMultiError, or nil if none found.
func (m *IdPWsFailedNRCGiItem) ValidateAll() error {
	return m.validate(true)
}

func (m *IdPWsFailedNRCGiItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 155 {
		err := IdPWsFailedNRCGiItemValidationError{
			field:  "Value",
			reason: "value must equal 155",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdPWsFailedNRCGiItemMultiError(errors)
	}

	return nil
}

// IdPWsFailedNRCGiItemMultiError is an error wrapping multiple validation
// errors returned by IdPWsFailedNRCGiItem.ValidateAll() if the designated
// constraints aren't met.
type IdPWsFailedNRCGiItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdPWsFailedNRCGiItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdPWsFailedNRCGiItemMultiError) AllErrors() []error { return m }

// IdPWsFailedNRCGiItemValidationError is the validation error returned by
// IdPWsFailedNRCGiItem.Validate if the designated constraints aren't met.
type IdPWsFailedNRCGiItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdPWsFailedNRCGiItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdPWsFailedNRCGiItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdPWsFailedNRCGiItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdPWsFailedNRCGiItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdPWsFailedNRCGiItemValidationError) ErrorName() string {
	return "IdPWsFailedNRCGiItemValidationError"
}

// Error satisfies the builtin error interface
func (e IdPWsFailedNRCGiItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdPWsFailedNRCGiItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdPWsFailedNRCGiItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdPWsFailedNRCGiItemValidationError{}

// Validate checks the field values on IdConfirmedUeid with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *IdConfirmedUeid) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdConfirmedUeid with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdConfirmedUeidMultiError, or nil if none found.
func (m *IdConfirmedUeid) ValidateAll() error {
	return m.validate(true)
}

func (m *IdConfirmedUeid) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 156 {
		err := IdConfirmedUeidValidationError{
			field:  "Value",
			reason: "value must equal 156",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdConfirmedUeidMultiError(errors)
	}

	return nil
}

// IdConfirmedUeidMultiError is an error wrapping multiple validation errors
// returned by IdConfirmedUeid.ValidateAll() if the designated constraints
// aren't met.
type IdConfirmedUeidMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdConfirmedUeidMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdConfirmedUeidMultiError) AllErrors() []error { return m }

// IdConfirmedUeidValidationError is the validation error returned by
// IdConfirmedUeid.Validate if the designated constraints aren't met.
type IdConfirmedUeidValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdConfirmedUeidValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdConfirmedUeidValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdConfirmedUeidValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdConfirmedUeidValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdConfirmedUeidValidationError) ErrorName() string { return "IdConfirmedUeidValidationError" }

// Error satisfies the builtin error interface
func (e IdConfirmedUeidValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdConfirmedUeid.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdConfirmedUeidValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdConfirmedUeidValidationError{}

// Validate checks the field values on IdCancelallWarningMessagesIndicator with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *IdCancelallWarningMessagesIndicator) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdCancelallWarningMessagesIndicator
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// IdCancelallWarningMessagesIndicatorMultiError, or nil if none found.
func (m *IdCancelallWarningMessagesIndicator) ValidateAll() error {
	return m.validate(true)
}

func (m *IdCancelallWarningMessagesIndicator) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 157 {
		err := IdCancelallWarningMessagesIndicatorValidationError{
			field:  "Value",
			reason: "value must equal 157",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdCancelallWarningMessagesIndicatorMultiError(errors)
	}

	return nil
}

// IdCancelallWarningMessagesIndicatorMultiError is an error wrapping multiple
// validation errors returned by
// IdCancelallWarningMessagesIndicator.ValidateAll() if the designated
// constraints aren't met.
type IdCancelallWarningMessagesIndicatorMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdCancelallWarningMessagesIndicatorMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdCancelallWarningMessagesIndicatorMultiError) AllErrors() []error { return m }

// IdCancelallWarningMessagesIndicatorValidationError is the validation error
// returned by IdCancelallWarningMessagesIndicator.Validate if the designated
// constraints aren't met.
type IdCancelallWarningMessagesIndicatorValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdCancelallWarningMessagesIndicatorValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdCancelallWarningMessagesIndicatorValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdCancelallWarningMessagesIndicatorValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdCancelallWarningMessagesIndicatorValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdCancelallWarningMessagesIndicatorValidationError) ErrorName() string {
	return "IdCancelallWarningMessagesIndicatorValidationError"
}

// Error satisfies the builtin error interface
func (e IdCancelallWarningMessagesIndicatorValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdCancelallWarningMessagesIndicator.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdCancelallWarningMessagesIndicatorValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdCancelallWarningMessagesIndicatorValidationError{}

// Validate checks the field values on IdGNbDUUEAMbrUL with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *IdGNbDUUEAMbrUL) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdGNbDUUEAMbrUL with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdGNbDUUEAMbrULMultiError, or nil if none found.
func (m *IdGNbDUUEAMbrUL) ValidateAll() error {
	return m.validate(true)
}

func (m *IdGNbDUUEAMbrUL) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 158 {
		err := IdGNbDUUEAMbrULValidationError{
			field:  "Value",
			reason: "value must equal 158",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdGNbDUUEAMbrULMultiError(errors)
	}

	return nil
}

// IdGNbDUUEAMbrULMultiError is an error wrapping multiple validation errors
// returned by IdGNbDUUEAMbrUL.ValidateAll() if the designated constraints
// aren't met.
type IdGNbDUUEAMbrULMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdGNbDUUEAMbrULMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdGNbDUUEAMbrULMultiError) AllErrors() []error { return m }

// IdGNbDUUEAMbrULValidationError is the validation error returned by
// IdGNbDUUEAMbrUL.Validate if the designated constraints aren't met.
type IdGNbDUUEAMbrULValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdGNbDUUEAMbrULValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdGNbDUUEAMbrULValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdGNbDUUEAMbrULValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdGNbDUUEAMbrULValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdGNbDUUEAMbrULValidationError) ErrorName() string { return "IdGNbDUUEAMbrULValidationError" }

// Error satisfies the builtin error interface
func (e IdGNbDUUEAMbrULValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdGNbDUUEAMbrUL.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdGNbDUUEAMbrULValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdGNbDUUEAMbrULValidationError{}

// Validate checks the field values on IdDRxconfigurationIndicator with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdDRxconfigurationIndicator) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdDRxconfigurationIndicator with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdDRxconfigurationIndicatorMultiError, or nil if none found.
func (m *IdDRxconfigurationIndicator) ValidateAll() error {
	return m.validate(true)
}

func (m *IdDRxconfigurationIndicator) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 159 {
		err := IdDRxconfigurationIndicatorValidationError{
			field:  "Value",
			reason: "value must equal 159",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdDRxconfigurationIndicatorMultiError(errors)
	}

	return nil
}

// IdDRxconfigurationIndicatorMultiError is an error wrapping multiple
// validation errors returned by IdDRxconfigurationIndicator.ValidateAll() if
// the designated constraints aren't met.
type IdDRxconfigurationIndicatorMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdDRxconfigurationIndicatorMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdDRxconfigurationIndicatorMultiError) AllErrors() []error { return m }

// IdDRxconfigurationIndicatorValidationError is the validation error returned
// by IdDRxconfigurationIndicator.Validate if the designated constraints
// aren't met.
type IdDRxconfigurationIndicatorValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdDRxconfigurationIndicatorValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdDRxconfigurationIndicatorValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdDRxconfigurationIndicatorValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdDRxconfigurationIndicatorValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdDRxconfigurationIndicatorValidationError) ErrorName() string {
	return "IdDRxconfigurationIndicatorValidationError"
}

// Error satisfies the builtin error interface
func (e IdDRxconfigurationIndicatorValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdDRxconfigurationIndicator.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdDRxconfigurationIndicatorValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdDRxconfigurationIndicatorValidationError{}

// Validate checks the field values on IdRLcStatus with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *IdRLcStatus) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdRLcStatus with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in IdRLcStatusMultiError, or
// nil if none found.
func (m *IdRLcStatus) ValidateAll() error {
	return m.validate(true)
}

func (m *IdRLcStatus) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 160 {
		err := IdRLcStatusValidationError{
			field:  "Value",
			reason: "value must equal 160",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdRLcStatusMultiError(errors)
	}

	return nil
}

// IdRLcStatusMultiError is an error wrapping multiple validation errors
// returned by IdRLcStatus.ValidateAll() if the designated constraints aren't met.
type IdRLcStatusMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdRLcStatusMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdRLcStatusMultiError) AllErrors() []error { return m }

// IdRLcStatusValidationError is the validation error returned by
// IdRLcStatus.Validate if the designated constraints aren't met.
type IdRLcStatusValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdRLcStatusValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdRLcStatusValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdRLcStatusValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdRLcStatusValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdRLcStatusValidationError) ErrorName() string { return "IdRLcStatusValidationError" }

// Error satisfies the builtin error interface
func (e IdRLcStatusValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdRLcStatus.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdRLcStatusValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdRLcStatusValidationError{}

// Validate checks the field values on IdDLpdcpsnlength with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *IdDLpdcpsnlength) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdDLpdcpsnlength with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdDLpdcpsnlengthMultiError, or nil if none found.
func (m *IdDLpdcpsnlength) ValidateAll() error {
	return m.validate(true)
}

func (m *IdDLpdcpsnlength) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 161 {
		err := IdDLpdcpsnlengthValidationError{
			field:  "Value",
			reason: "value must equal 161",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdDLpdcpsnlengthMultiError(errors)
	}

	return nil
}

// IdDLpdcpsnlengthMultiError is an error wrapping multiple validation errors
// returned by IdDLpdcpsnlength.ValidateAll() if the designated constraints
// aren't met.
type IdDLpdcpsnlengthMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdDLpdcpsnlengthMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdDLpdcpsnlengthMultiError) AllErrors() []error { return m }

// IdDLpdcpsnlengthValidationError is the validation error returned by
// IdDLpdcpsnlength.Validate if the designated constraints aren't met.
type IdDLpdcpsnlengthValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdDLpdcpsnlengthValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdDLpdcpsnlengthValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdDLpdcpsnlengthValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdDLpdcpsnlengthValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdDLpdcpsnlengthValidationError) ErrorName() string { return "IdDLpdcpsnlengthValidationError" }

// Error satisfies the builtin error interface
func (e IdDLpdcpsnlengthValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdDLpdcpsnlength.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdDLpdcpsnlengthValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdDLpdcpsnlengthValidationError{}

// Validate checks the field values on IdGNbDUconfigurationQuery with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdGNbDUconfigurationQuery) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdGNbDUconfigurationQuery with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdGNbDUconfigurationQueryMultiError, or nil if none found.
func (m *IdGNbDUconfigurationQuery) ValidateAll() error {
	return m.validate(true)
}

func (m *IdGNbDUconfigurationQuery) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 162 {
		err := IdGNbDUconfigurationQueryValidationError{
			field:  "Value",
			reason: "value must equal 162",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdGNbDUconfigurationQueryMultiError(errors)
	}

	return nil
}

// IdGNbDUconfigurationQueryMultiError is an error wrapping multiple validation
// errors returned by IdGNbDUconfigurationQuery.ValidateAll() if the
// designated constraints aren't met.
type IdGNbDUconfigurationQueryMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdGNbDUconfigurationQueryMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdGNbDUconfigurationQueryMultiError) AllErrors() []error { return m }

// IdGNbDUconfigurationQueryValidationError is the validation error returned by
// IdGNbDUconfigurationQuery.Validate if the designated constraints aren't met.
type IdGNbDUconfigurationQueryValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdGNbDUconfigurationQueryValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdGNbDUconfigurationQueryValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdGNbDUconfigurationQueryValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdGNbDUconfigurationQueryValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdGNbDUconfigurationQueryValidationError) ErrorName() string {
	return "IdGNbDUconfigurationQueryValidationError"
}

// Error satisfies the builtin error interface
func (e IdGNbDUconfigurationQueryValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdGNbDUconfigurationQuery.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdGNbDUconfigurationQueryValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdGNbDUconfigurationQueryValidationError{}

// Validate checks the field values on IdMeasurementTimingConfiguration with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *IdMeasurementTimingConfiguration) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdMeasurementTimingConfiguration with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// IdMeasurementTimingConfigurationMultiError, or nil if none found.
func (m *IdMeasurementTimingConfiguration) ValidateAll() error {
	return m.validate(true)
}

func (m *IdMeasurementTimingConfiguration) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 163 {
		err := IdMeasurementTimingConfigurationValidationError{
			field:  "Value",
			reason: "value must equal 163",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdMeasurementTimingConfigurationMultiError(errors)
	}

	return nil
}

// IdMeasurementTimingConfigurationMultiError is an error wrapping multiple
// validation errors returned by
// IdMeasurementTimingConfiguration.ValidateAll() if the designated
// constraints aren't met.
type IdMeasurementTimingConfigurationMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdMeasurementTimingConfigurationMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdMeasurementTimingConfigurationMultiError) AllErrors() []error { return m }

// IdMeasurementTimingConfigurationValidationError is the validation error
// returned by IdMeasurementTimingConfiguration.Validate if the designated
// constraints aren't met.
type IdMeasurementTimingConfigurationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdMeasurementTimingConfigurationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdMeasurementTimingConfigurationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdMeasurementTimingConfigurationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdMeasurementTimingConfigurationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdMeasurementTimingConfigurationValidationError) ErrorName() string {
	return "IdMeasurementTimingConfigurationValidationError"
}

// Error satisfies the builtin error interface
func (e IdMeasurementTimingConfigurationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdMeasurementTimingConfiguration.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdMeasurementTimingConfigurationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdMeasurementTimingConfigurationValidationError{}

// Validate checks the field values on IdDRbInformation with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *IdDRbInformation) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdDRbInformation with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdDRbInformationMultiError, or nil if none found.
func (m *IdDRbInformation) ValidateAll() error {
	return m.validate(true)
}

func (m *IdDRbInformation) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 164 {
		err := IdDRbInformationValidationError{
			field:  "Value",
			reason: "value must equal 164",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdDRbInformationMultiError(errors)
	}

	return nil
}

// IdDRbInformationMultiError is an error wrapping multiple validation errors
// returned by IdDRbInformation.ValidateAll() if the designated constraints
// aren't met.
type IdDRbInformationMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdDRbInformationMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdDRbInformationMultiError) AllErrors() []error { return m }

// IdDRbInformationValidationError is the validation error returned by
// IdDRbInformation.Validate if the designated constraints aren't met.
type IdDRbInformationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdDRbInformationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdDRbInformationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdDRbInformationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdDRbInformationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdDRbInformationValidationError) ErrorName() string { return "IdDRbInformationValidationError" }

// Error satisfies the builtin error interface
func (e IdDRbInformationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdDRbInformation.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdDRbInformationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdDRbInformationValidationError{}

// Validate checks the field values on IdServingPlmn with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *IdServingPlmn) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdServingPlmn with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in IdServingPlmnMultiError, or
// nil if none found.
func (m *IdServingPlmn) ValidateAll() error {
	return m.validate(true)
}

func (m *IdServingPlmn) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 165 {
		err := IdServingPlmnValidationError{
			field:  "Value",
			reason: "value must equal 165",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdServingPlmnMultiError(errors)
	}

	return nil
}

// IdServingPlmnMultiError is an error wrapping multiple validation errors
// returned by IdServingPlmn.ValidateAll() if the designated constraints
// aren't met.
type IdServingPlmnMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdServingPlmnMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdServingPlmnMultiError) AllErrors() []error { return m }

// IdServingPlmnValidationError is the validation error returned by
// IdServingPlmn.Validate if the designated constraints aren't met.
type IdServingPlmnValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdServingPlmnValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdServingPlmnValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdServingPlmnValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdServingPlmnValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdServingPlmnValidationError) ErrorName() string { return "IdServingPlmnValidationError" }

// Error satisfies the builtin error interface
func (e IdServingPlmnValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdServingPlmn.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdServingPlmnValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdServingPlmnValidationError{}

// Validate checks the field values on IdProtectedEUtraResourcesItem with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdProtectedEUtraResourcesItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdProtectedEUtraResourcesItem with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// IdProtectedEUtraResourcesItemMultiError, or nil if none found.
func (m *IdProtectedEUtraResourcesItem) ValidateAll() error {
	return m.validate(true)
}

func (m *IdProtectedEUtraResourcesItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 168 {
		err := IdProtectedEUtraResourcesItemValidationError{
			field:  "Value",
			reason: "value must equal 168",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdProtectedEUtraResourcesItemMultiError(errors)
	}

	return nil
}

// IdProtectedEUtraResourcesItemMultiError is an error wrapping multiple
// validation errors returned by IdProtectedEUtraResourcesItem.ValidateAll()
// if the designated constraints aren't met.
type IdProtectedEUtraResourcesItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdProtectedEUtraResourcesItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdProtectedEUtraResourcesItemMultiError) AllErrors() []error { return m }

// IdProtectedEUtraResourcesItemValidationError is the validation error
// returned by IdProtectedEUtraResourcesItem.Validate if the designated
// constraints aren't met.
type IdProtectedEUtraResourcesItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdProtectedEUtraResourcesItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdProtectedEUtraResourcesItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdProtectedEUtraResourcesItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdProtectedEUtraResourcesItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdProtectedEUtraResourcesItemValidationError) ErrorName() string {
	return "IdProtectedEUtraResourcesItemValidationError"
}

// Error satisfies the builtin error interface
func (e IdProtectedEUtraResourcesItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdProtectedEUtraResourcesItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdProtectedEUtraResourcesItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdProtectedEUtraResourcesItemValidationError{}

// Validate checks the field values on IdGNbCURRcVersion with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *IdGNbCURRcVersion) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdGNbCURRcVersion with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdGNbCURRcVersionMultiError, or nil if none found.
func (m *IdGNbCURRcVersion) ValidateAll() error {
	return m.validate(true)
}

func (m *IdGNbCURRcVersion) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 170 {
		err := IdGNbCURRcVersionValidationError{
			field:  "Value",
			reason: "value must equal 170",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdGNbCURRcVersionMultiError(errors)
	}

	return nil
}

// IdGNbCURRcVersionMultiError is an error wrapping multiple validation errors
// returned by IdGNbCURRcVersion.ValidateAll() if the designated constraints
// aren't met.
type IdGNbCURRcVersionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdGNbCURRcVersionMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdGNbCURRcVersionMultiError) AllErrors() []error { return m }

// IdGNbCURRcVersionValidationError is the validation error returned by
// IdGNbCURRcVersion.Validate if the designated constraints aren't met.
type IdGNbCURRcVersionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdGNbCURRcVersionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdGNbCURRcVersionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdGNbCURRcVersionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdGNbCURRcVersionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdGNbCURRcVersionValidationError) ErrorName() string {
	return "IdGNbCURRcVersionValidationError"
}

// Error satisfies the builtin error interface
func (e IdGNbCURRcVersionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdGNbCURRcVersion.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdGNbCURRcVersionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdGNbCURRcVersionValidationError{}

// Validate checks the field values on IdGNbDURRcVersion with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *IdGNbDURRcVersion) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdGNbDURRcVersion with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdGNbDURRcVersionMultiError, or nil if none found.
func (m *IdGNbDURRcVersion) ValidateAll() error {
	return m.validate(true)
}

func (m *IdGNbDURRcVersion) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 171 {
		err := IdGNbDURRcVersionValidationError{
			field:  "Value",
			reason: "value must equal 171",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdGNbDURRcVersionMultiError(errors)
	}

	return nil
}

// IdGNbDURRcVersionMultiError is an error wrapping multiple validation errors
// returned by IdGNbDURRcVersion.ValidateAll() if the designated constraints
// aren't met.
type IdGNbDURRcVersionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdGNbDURRcVersionMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdGNbDURRcVersionMultiError) AllErrors() []error { return m }

// IdGNbDURRcVersionValidationError is the validation error returned by
// IdGNbDURRcVersion.Validate if the designated constraints aren't met.
type IdGNbDURRcVersionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdGNbDURRcVersionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdGNbDURRcVersionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdGNbDURRcVersionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdGNbDURRcVersionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdGNbDURRcVersionValidationError) ErrorName() string {
	return "IdGNbDURRcVersionValidationError"
}

// Error satisfies the builtin error interface
func (e IdGNbDURRcVersionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdGNbDURRcVersion.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdGNbDURRcVersionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdGNbDURRcVersionValidationError{}

// Validate checks the field values on IdGNbduoverloadInformation with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdGNbduoverloadInformation) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdGNbduoverloadInformation with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdGNbduoverloadInformationMultiError, or nil if none found.
func (m *IdGNbduoverloadInformation) ValidateAll() error {
	return m.validate(true)
}

func (m *IdGNbduoverloadInformation) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 172 {
		err := IdGNbduoverloadInformationValidationError{
			field:  "Value",
			reason: "value must equal 172",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdGNbduoverloadInformationMultiError(errors)
	}

	return nil
}

// IdGNbduoverloadInformationMultiError is an error wrapping multiple
// validation errors returned by IdGNbduoverloadInformation.ValidateAll() if
// the designated constraints aren't met.
type IdGNbduoverloadInformationMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdGNbduoverloadInformationMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdGNbduoverloadInformationMultiError) AllErrors() []error { return m }

// IdGNbduoverloadInformationValidationError is the validation error returned
// by IdGNbduoverloadInformation.Validate if the designated constraints aren't met.
type IdGNbduoverloadInformationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdGNbduoverloadInformationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdGNbduoverloadInformationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdGNbduoverloadInformationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdGNbduoverloadInformationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdGNbduoverloadInformationValidationError) ErrorName() string {
	return "IdGNbduoverloadInformationValidationError"
}

// Error satisfies the builtin error interface
func (e IdGNbduoverloadInformationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdGNbduoverloadInformation.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdGNbduoverloadInformationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdGNbduoverloadInformationValidationError{}

// Validate checks the field values on IdCellGroupConfig with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *IdCellGroupConfig) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdCellGroupConfig with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdCellGroupConfigMultiError, or nil if none found.
func (m *IdCellGroupConfig) ValidateAll() error {
	return m.validate(true)
}

func (m *IdCellGroupConfig) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 173 {
		err := IdCellGroupConfigValidationError{
			field:  "Value",
			reason: "value must equal 173",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdCellGroupConfigMultiError(errors)
	}

	return nil
}

// IdCellGroupConfigMultiError is an error wrapping multiple validation errors
// returned by IdCellGroupConfig.ValidateAll() if the designated constraints
// aren't met.
type IdCellGroupConfigMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdCellGroupConfigMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdCellGroupConfigMultiError) AllErrors() []error { return m }

// IdCellGroupConfigValidationError is the validation error returned by
// IdCellGroupConfig.Validate if the designated constraints aren't met.
type IdCellGroupConfigValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdCellGroupConfigValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdCellGroupConfigValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdCellGroupConfigValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdCellGroupConfigValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdCellGroupConfigValidationError) ErrorName() string {
	return "IdCellGroupConfigValidationError"
}

// Error satisfies the builtin error interface
func (e IdCellGroupConfigValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdCellGroupConfig.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdCellGroupConfigValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdCellGroupConfigValidationError{}

// Validate checks the field values on IdRLcfailureIndication with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdRLcfailureIndication) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdRLcfailureIndication with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdRLcfailureIndicationMultiError, or nil if none found.
func (m *IdRLcfailureIndication) ValidateAll() error {
	return m.validate(true)
}

func (m *IdRLcfailureIndication) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 174 {
		err := IdRLcfailureIndicationValidationError{
			field:  "Value",
			reason: "value must equal 174",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdRLcfailureIndicationMultiError(errors)
	}

	return nil
}

// IdRLcfailureIndicationMultiError is an error wrapping multiple validation
// errors returned by IdRLcfailureIndication.ValidateAll() if the designated
// constraints aren't met.
type IdRLcfailureIndicationMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdRLcfailureIndicationMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdRLcfailureIndicationMultiError) AllErrors() []error { return m }

// IdRLcfailureIndicationValidationError is the validation error returned by
// IdRLcfailureIndication.Validate if the designated constraints aren't met.
type IdRLcfailureIndicationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdRLcfailureIndicationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdRLcfailureIndicationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdRLcfailureIndicationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdRLcfailureIndicationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdRLcfailureIndicationValidationError) ErrorName() string {
	return "IdRLcfailureIndicationValidationError"
}

// Error satisfies the builtin error interface
func (e IdRLcfailureIndicationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdRLcfailureIndication.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdRLcfailureIndicationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdRLcfailureIndicationValidationError{}

// Validate checks the field values on IdUplinkTxDirectCurrentListInformation
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *IdUplinkTxDirectCurrentListInformation) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// IdUplinkTxDirectCurrentListInformation with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// IdUplinkTxDirectCurrentListInformationMultiError, or nil if none found.
func (m *IdUplinkTxDirectCurrentListInformation) ValidateAll() error {
	return m.validate(true)
}

func (m *IdUplinkTxDirectCurrentListInformation) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 175 {
		err := IdUplinkTxDirectCurrentListInformationValidationError{
			field:  "Value",
			reason: "value must equal 175",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdUplinkTxDirectCurrentListInformationMultiError(errors)
	}

	return nil
}

// IdUplinkTxDirectCurrentListInformationMultiError is an error wrapping
// multiple validation errors returned by
// IdUplinkTxDirectCurrentListInformation.ValidateAll() if the designated
// constraints aren't met.
type IdUplinkTxDirectCurrentListInformationMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdUplinkTxDirectCurrentListInformationMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdUplinkTxDirectCurrentListInformationMultiError) AllErrors() []error { return m }

// IdUplinkTxDirectCurrentListInformationValidationError is the validation
// error returned by IdUplinkTxDirectCurrentListInformation.Validate if the
// designated constraints aren't met.
type IdUplinkTxDirectCurrentListInformationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdUplinkTxDirectCurrentListInformationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdUplinkTxDirectCurrentListInformationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdUplinkTxDirectCurrentListInformationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdUplinkTxDirectCurrentListInformationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdUplinkTxDirectCurrentListInformationValidationError) ErrorName() string {
	return "IdUplinkTxDirectCurrentListInformationValidationError"
}

// Error satisfies the builtin error interface
func (e IdUplinkTxDirectCurrentListInformationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdUplinkTxDirectCurrentListInformation.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdUplinkTxDirectCurrentListInformationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdUplinkTxDirectCurrentListInformationValidationError{}

// Validate checks the field values on IdDCBasedDuplicationConfigured with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdDCBasedDuplicationConfigured) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdDCBasedDuplicationConfigured with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// IdDCBasedDuplicationConfiguredMultiError, or nil if none found.
func (m *IdDCBasedDuplicationConfigured) ValidateAll() error {
	return m.validate(true)
}

func (m *IdDCBasedDuplicationConfigured) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 176 {
		err := IdDCBasedDuplicationConfiguredValidationError{
			field:  "Value",
			reason: "value must equal 176",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdDCBasedDuplicationConfiguredMultiError(errors)
	}

	return nil
}

// IdDCBasedDuplicationConfiguredMultiError is an error wrapping multiple
// validation errors returned by IdDCBasedDuplicationConfigured.ValidateAll()
// if the designated constraints aren't met.
type IdDCBasedDuplicationConfiguredMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdDCBasedDuplicationConfiguredMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdDCBasedDuplicationConfiguredMultiError) AllErrors() []error { return m }

// IdDCBasedDuplicationConfiguredValidationError is the validation error
// returned by IdDCBasedDuplicationConfigured.Validate if the designated
// constraints aren't met.
type IdDCBasedDuplicationConfiguredValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdDCBasedDuplicationConfiguredValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdDCBasedDuplicationConfiguredValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdDCBasedDuplicationConfiguredValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdDCBasedDuplicationConfiguredValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdDCBasedDuplicationConfiguredValidationError) ErrorName() string {
	return "IdDCBasedDuplicationConfiguredValidationError"
}

// Error satisfies the builtin error interface
func (e IdDCBasedDuplicationConfiguredValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdDCBasedDuplicationConfigured.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdDCBasedDuplicationConfiguredValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdDCBasedDuplicationConfiguredValidationError{}

// Validate checks the field values on IdDCBasedDuplicationActivation with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdDCBasedDuplicationActivation) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdDCBasedDuplicationActivation with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// IdDCBasedDuplicationActivationMultiError, or nil if none found.
func (m *IdDCBasedDuplicationActivation) ValidateAll() error {
	return m.validate(true)
}

func (m *IdDCBasedDuplicationActivation) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 177 {
		err := IdDCBasedDuplicationActivationValidationError{
			field:  "Value",
			reason: "value must equal 177",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdDCBasedDuplicationActivationMultiError(errors)
	}

	return nil
}

// IdDCBasedDuplicationActivationMultiError is an error wrapping multiple
// validation errors returned by IdDCBasedDuplicationActivation.ValidateAll()
// if the designated constraints aren't met.
type IdDCBasedDuplicationActivationMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdDCBasedDuplicationActivationMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdDCBasedDuplicationActivationMultiError) AllErrors() []error { return m }

// IdDCBasedDuplicationActivationValidationError is the validation error
// returned by IdDCBasedDuplicationActivation.Validate if the designated
// constraints aren't met.
type IdDCBasedDuplicationActivationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdDCBasedDuplicationActivationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdDCBasedDuplicationActivationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdDCBasedDuplicationActivationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdDCBasedDuplicationActivationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdDCBasedDuplicationActivationValidationError) ErrorName() string {
	return "IdDCBasedDuplicationActivationValidationError"
}

// Error satisfies the builtin error interface
func (e IdDCBasedDuplicationActivationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdDCBasedDuplicationActivation.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdDCBasedDuplicationActivationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdDCBasedDuplicationActivationValidationError{}

// Validate checks the field values on IdSUlaccessIndication with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdSUlaccessIndication) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdSUlaccessIndication with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdSUlaccessIndicationMultiError, or nil if none found.
func (m *IdSUlaccessIndication) ValidateAll() error {
	return m.validate(true)
}

func (m *IdSUlaccessIndication) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 178 {
		err := IdSUlaccessIndicationValidationError{
			field:  "Value",
			reason: "value must equal 178",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdSUlaccessIndicationMultiError(errors)
	}

	return nil
}

// IdSUlaccessIndicationMultiError is an error wrapping multiple validation
// errors returned by IdSUlaccessIndication.ValidateAll() if the designated
// constraints aren't met.
type IdSUlaccessIndicationMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdSUlaccessIndicationMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdSUlaccessIndicationMultiError) AllErrors() []error { return m }

// IdSUlaccessIndicationValidationError is the validation error returned by
// IdSUlaccessIndication.Validate if the designated constraints aren't met.
type IdSUlaccessIndicationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdSUlaccessIndicationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdSUlaccessIndicationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdSUlaccessIndicationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdSUlaccessIndicationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdSUlaccessIndicationValidationError) ErrorName() string {
	return "IdSUlaccessIndicationValidationError"
}

// Error satisfies the builtin error interface
func (e IdSUlaccessIndicationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdSUlaccessIndication.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdSUlaccessIndicationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdSUlaccessIndicationValidationError{}

// Validate checks the field values on IdAvailablePlmnlist with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdAvailablePlmnlist) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdAvailablePlmnlist with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdAvailablePlmnlistMultiError, or nil if none found.
func (m *IdAvailablePlmnlist) ValidateAll() error {
	return m.validate(true)
}

func (m *IdAvailablePlmnlist) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 179 {
		err := IdAvailablePlmnlistValidationError{
			field:  "Value",
			reason: "value must equal 179",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdAvailablePlmnlistMultiError(errors)
	}

	return nil
}

// IdAvailablePlmnlistMultiError is an error wrapping multiple validation
// errors returned by IdAvailablePlmnlist.ValidateAll() if the designated
// constraints aren't met.
type IdAvailablePlmnlistMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdAvailablePlmnlistMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdAvailablePlmnlistMultiError) AllErrors() []error { return m }

// IdAvailablePlmnlistValidationError is the validation error returned by
// IdAvailablePlmnlist.Validate if the designated constraints aren't met.
type IdAvailablePlmnlistValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdAvailablePlmnlistValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdAvailablePlmnlistValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdAvailablePlmnlistValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdAvailablePlmnlistValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdAvailablePlmnlistValidationError) ErrorName() string {
	return "IdAvailablePlmnlistValidationError"
}

// Error satisfies the builtin error interface
func (e IdAvailablePlmnlistValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdAvailablePlmnlist.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdAvailablePlmnlistValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdAvailablePlmnlistValidationError{}

// Validate checks the field values on IdPDusessionId with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *IdPDusessionId) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdPDusessionId with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in IdPDusessionIdMultiError,
// or nil if none found.
func (m *IdPDusessionId) ValidateAll() error {
	return m.validate(true)
}

func (m *IdPDusessionId) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 180 {
		err := IdPDusessionIdValidationError{
			field:  "Value",
			reason: "value must equal 180",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdPDusessionIdMultiError(errors)
	}

	return nil
}

// IdPDusessionIdMultiError is an error wrapping multiple validation errors
// returned by IdPDusessionId.ValidateAll() if the designated constraints
// aren't met.
type IdPDusessionIdMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdPDusessionIdMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdPDusessionIdMultiError) AllErrors() []error { return m }

// IdPDusessionIdValidationError is the validation error returned by
// IdPDusessionId.Validate if the designated constraints aren't met.
type IdPDusessionIdValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdPDusessionIdValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdPDusessionIdValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdPDusessionIdValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdPDusessionIdValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdPDusessionIdValidationError) ErrorName() string { return "IdPDusessionIdValidationError" }

// Error satisfies the builtin error interface
func (e IdPDusessionIdValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdPDusessionId.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdPDusessionIdValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdPDusessionIdValidationError{}

// Validate checks the field values on IdULpdusessionAggregateMaximumBitRate
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *IdULpdusessionAggregateMaximumBitRate) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdULpdusessionAggregateMaximumBitRate
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// IdULpdusessionAggregateMaximumBitRateMultiError, or nil if none found.
func (m *IdULpdusessionAggregateMaximumBitRate) ValidateAll() error {
	return m.validate(true)
}

func (m *IdULpdusessionAggregateMaximumBitRate) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 181 {
		err := IdULpdusessionAggregateMaximumBitRateValidationError{
			field:  "Value",
			reason: "value must equal 181",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdULpdusessionAggregateMaximumBitRateMultiError(errors)
	}

	return nil
}

// IdULpdusessionAggregateMaximumBitRateMultiError is an error wrapping
// multiple validation errors returned by
// IdULpdusessionAggregateMaximumBitRate.ValidateAll() if the designated
// constraints aren't met.
type IdULpdusessionAggregateMaximumBitRateMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdULpdusessionAggregateMaximumBitRateMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdULpdusessionAggregateMaximumBitRateMultiError) AllErrors() []error { return m }

// IdULpdusessionAggregateMaximumBitRateValidationError is the validation error
// returned by IdULpdusessionAggregateMaximumBitRate.Validate if the
// designated constraints aren't met.
type IdULpdusessionAggregateMaximumBitRateValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdULpdusessionAggregateMaximumBitRateValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdULpdusessionAggregateMaximumBitRateValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdULpdusessionAggregateMaximumBitRateValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdULpdusessionAggregateMaximumBitRateValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdULpdusessionAggregateMaximumBitRateValidationError) ErrorName() string {
	return "IdULpdusessionAggregateMaximumBitRateValidationError"
}

// Error satisfies the builtin error interface
func (e IdULpdusessionAggregateMaximumBitRateValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdULpdusessionAggregateMaximumBitRate.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdULpdusessionAggregateMaximumBitRateValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdULpdusessionAggregateMaximumBitRateValidationError{}

// Validate checks the field values on IdServingCellMo with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *IdServingCellMo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdServingCellMo with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdServingCellMoMultiError, or nil if none found.
func (m *IdServingCellMo) ValidateAll() error {
	return m.validate(true)
}

func (m *IdServingCellMo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 182 {
		err := IdServingCellMoValidationError{
			field:  "Value",
			reason: "value must equal 182",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdServingCellMoMultiError(errors)
	}

	return nil
}

// IdServingCellMoMultiError is an error wrapping multiple validation errors
// returned by IdServingCellMo.ValidateAll() if the designated constraints
// aren't met.
type IdServingCellMoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdServingCellMoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdServingCellMoMultiError) AllErrors() []error { return m }

// IdServingCellMoValidationError is the validation error returned by
// IdServingCellMo.Validate if the designated constraints aren't met.
type IdServingCellMoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdServingCellMoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdServingCellMoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdServingCellMoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdServingCellMoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdServingCellMoValidationError) ErrorName() string { return "IdServingCellMoValidationError" }

// Error satisfies the builtin error interface
func (e IdServingCellMoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdServingCellMo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdServingCellMoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdServingCellMoValidationError{}

// Validate checks the field values on IdQoSflowMappingIndication with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdQoSflowMappingIndication) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdQoSflowMappingIndication with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdQoSflowMappingIndicationMultiError, or nil if none found.
func (m *IdQoSflowMappingIndication) ValidateAll() error {
	return m.validate(true)
}

func (m *IdQoSflowMappingIndication) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 183 {
		err := IdQoSflowMappingIndicationValidationError{
			field:  "Value",
			reason: "value must equal 183",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdQoSflowMappingIndicationMultiError(errors)
	}

	return nil
}

// IdQoSflowMappingIndicationMultiError is an error wrapping multiple
// validation errors returned by IdQoSflowMappingIndication.ValidateAll() if
// the designated constraints aren't met.
type IdQoSflowMappingIndicationMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdQoSflowMappingIndicationMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdQoSflowMappingIndicationMultiError) AllErrors() []error { return m }

// IdQoSflowMappingIndicationValidationError is the validation error returned
// by IdQoSflowMappingIndication.Validate if the designated constraints aren't met.
type IdQoSflowMappingIndicationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdQoSflowMappingIndicationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdQoSflowMappingIndicationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdQoSflowMappingIndicationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdQoSflowMappingIndicationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdQoSflowMappingIndicationValidationError) ErrorName() string {
	return "IdQoSflowMappingIndicationValidationError"
}

// Error satisfies the builtin error interface
func (e IdQoSflowMappingIndicationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdQoSflowMappingIndication.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdQoSflowMappingIndicationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdQoSflowMappingIndicationValidationError{}

// Validate checks the field values on IdRRcdeliveryStatusRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdRRcdeliveryStatusRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdRRcdeliveryStatusRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdRRcdeliveryStatusRequestMultiError, or nil if none found.
func (m *IdRRcdeliveryStatusRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *IdRRcdeliveryStatusRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 184 {
		err := IdRRcdeliveryStatusRequestValidationError{
			field:  "Value",
			reason: "value must equal 184",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdRRcdeliveryStatusRequestMultiError(errors)
	}

	return nil
}

// IdRRcdeliveryStatusRequestMultiError is an error wrapping multiple
// validation errors returned by IdRRcdeliveryStatusRequest.ValidateAll() if
// the designated constraints aren't met.
type IdRRcdeliveryStatusRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdRRcdeliveryStatusRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdRRcdeliveryStatusRequestMultiError) AllErrors() []error { return m }

// IdRRcdeliveryStatusRequestValidationError is the validation error returned
// by IdRRcdeliveryStatusRequest.Validate if the designated constraints aren't met.
type IdRRcdeliveryStatusRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdRRcdeliveryStatusRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdRRcdeliveryStatusRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdRRcdeliveryStatusRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdRRcdeliveryStatusRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdRRcdeliveryStatusRequestValidationError) ErrorName() string {
	return "IdRRcdeliveryStatusRequestValidationError"
}

// Error satisfies the builtin error interface
func (e IdRRcdeliveryStatusRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdRRcdeliveryStatusRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdRRcdeliveryStatusRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdRRcdeliveryStatusRequestValidationError{}

// Validate checks the field values on IdRRcdeliveryStatus with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdRRcdeliveryStatus) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdRRcdeliveryStatus with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdRRcdeliveryStatusMultiError, or nil if none found.
func (m *IdRRcdeliveryStatus) ValidateAll() error {
	return m.validate(true)
}

func (m *IdRRcdeliveryStatus) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 185 {
		err := IdRRcdeliveryStatusValidationError{
			field:  "Value",
			reason: "value must equal 185",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdRRcdeliveryStatusMultiError(errors)
	}

	return nil
}

// IdRRcdeliveryStatusMultiError is an error wrapping multiple validation
// errors returned by IdRRcdeliveryStatus.ValidateAll() if the designated
// constraints aren't met.
type IdRRcdeliveryStatusMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdRRcdeliveryStatusMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdRRcdeliveryStatusMultiError) AllErrors() []error { return m }

// IdRRcdeliveryStatusValidationError is the validation error returned by
// IdRRcdeliveryStatus.Validate if the designated constraints aren't met.
type IdRRcdeliveryStatusValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdRRcdeliveryStatusValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdRRcdeliveryStatusValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdRRcdeliveryStatusValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdRRcdeliveryStatusValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdRRcdeliveryStatusValidationError) ErrorName() string {
	return "IdRRcdeliveryStatusValidationError"
}

// Error satisfies the builtin error interface
func (e IdRRcdeliveryStatusValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdRRcdeliveryStatus.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdRRcdeliveryStatusValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdRRcdeliveryStatusValidationError{}

// Validate checks the field values on IdBearerTypeChange with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdBearerTypeChange) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdBearerTypeChange with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdBearerTypeChangeMultiError, or nil if none found.
func (m *IdBearerTypeChange) ValidateAll() error {
	return m.validate(true)
}

func (m *IdBearerTypeChange) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 186 {
		err := IdBearerTypeChangeValidationError{
			field:  "Value",
			reason: "value must equal 186",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdBearerTypeChangeMultiError(errors)
	}

	return nil
}

// IdBearerTypeChangeMultiError is an error wrapping multiple validation errors
// returned by IdBearerTypeChange.ValidateAll() if the designated constraints
// aren't met.
type IdBearerTypeChangeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdBearerTypeChangeMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdBearerTypeChangeMultiError) AllErrors() []error { return m }

// IdBearerTypeChangeValidationError is the validation error returned by
// IdBearerTypeChange.Validate if the designated constraints aren't met.
type IdBearerTypeChangeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdBearerTypeChangeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdBearerTypeChangeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdBearerTypeChangeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdBearerTypeChangeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdBearerTypeChangeValidationError) ErrorName() string {
	return "IdBearerTypeChangeValidationError"
}

// Error satisfies the builtin error interface
func (e IdBearerTypeChangeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdBearerTypeChange.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdBearerTypeChangeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdBearerTypeChangeValidationError{}

// Validate checks the field values on IdRLcmode with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *IdRLcmode) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdRLcmode with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in IdRLcmodeMultiError, or nil
// if none found.
func (m *IdRLcmode) ValidateAll() error {
	return m.validate(true)
}

func (m *IdRLcmode) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 187 {
		err := IdRLcmodeValidationError{
			field:  "Value",
			reason: "value must equal 187",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdRLcmodeMultiError(errors)
	}

	return nil
}

// IdRLcmodeMultiError is an error wrapping multiple validation errors returned
// by IdRLcmode.ValidateAll() if the designated constraints aren't met.
type IdRLcmodeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdRLcmodeMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdRLcmodeMultiError) AllErrors() []error { return m }

// IdRLcmodeValidationError is the validation error returned by
// IdRLcmode.Validate if the designated constraints aren't met.
type IdRLcmodeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdRLcmodeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdRLcmodeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdRLcmodeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdRLcmodeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdRLcmodeValidationError) ErrorName() string { return "IdRLcmodeValidationError" }

// Error satisfies the builtin error interface
func (e IdRLcmodeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdRLcmode.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdRLcmodeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdRLcmodeValidationError{}

// Validate checks the field values on IdDuplicationActivation with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdDuplicationActivation) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdDuplicationActivation with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdDuplicationActivationMultiError, or nil if none found.
func (m *IdDuplicationActivation) ValidateAll() error {
	return m.validate(true)
}

func (m *IdDuplicationActivation) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 188 {
		err := IdDuplicationActivationValidationError{
			field:  "Value",
			reason: "value must equal 188",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdDuplicationActivationMultiError(errors)
	}

	return nil
}

// IdDuplicationActivationMultiError is an error wrapping multiple validation
// errors returned by IdDuplicationActivation.ValidateAll() if the designated
// constraints aren't met.
type IdDuplicationActivationMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdDuplicationActivationMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdDuplicationActivationMultiError) AllErrors() []error { return m }

// IdDuplicationActivationValidationError is the validation error returned by
// IdDuplicationActivation.Validate if the designated constraints aren't met.
type IdDuplicationActivationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdDuplicationActivationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdDuplicationActivationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdDuplicationActivationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdDuplicationActivationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdDuplicationActivationValidationError) ErrorName() string {
	return "IdDuplicationActivationValidationError"
}

// Error satisfies the builtin error interface
func (e IdDuplicationActivationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdDuplicationActivation.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdDuplicationActivationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdDuplicationActivationValidationError{}

// Validate checks the field values on IdDedicatedSIdeliveryNeededUeList with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *IdDedicatedSIdeliveryNeededUeList) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdDedicatedSIdeliveryNeededUeList
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// IdDedicatedSIdeliveryNeededUeListMultiError, or nil if none found.
func (m *IdDedicatedSIdeliveryNeededUeList) ValidateAll() error {
	return m.validate(true)
}

func (m *IdDedicatedSIdeliveryNeededUeList) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 189 {
		err := IdDedicatedSIdeliveryNeededUeListValidationError{
			field:  "Value",
			reason: "value must equal 189",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdDedicatedSIdeliveryNeededUeListMultiError(errors)
	}

	return nil
}

// IdDedicatedSIdeliveryNeededUeListMultiError is an error wrapping multiple
// validation errors returned by
// IdDedicatedSIdeliveryNeededUeList.ValidateAll() if the designated
// constraints aren't met.
type IdDedicatedSIdeliveryNeededUeListMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdDedicatedSIdeliveryNeededUeListMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdDedicatedSIdeliveryNeededUeListMultiError) AllErrors() []error { return m }

// IdDedicatedSIdeliveryNeededUeListValidationError is the validation error
// returned by IdDedicatedSIdeliveryNeededUeList.Validate if the designated
// constraints aren't met.
type IdDedicatedSIdeliveryNeededUeListValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdDedicatedSIdeliveryNeededUeListValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdDedicatedSIdeliveryNeededUeListValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdDedicatedSIdeliveryNeededUeListValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdDedicatedSIdeliveryNeededUeListValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdDedicatedSIdeliveryNeededUeListValidationError) ErrorName() string {
	return "IdDedicatedSIdeliveryNeededUeListValidationError"
}

// Error satisfies the builtin error interface
func (e IdDedicatedSIdeliveryNeededUeListValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdDedicatedSIdeliveryNeededUeList.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdDedicatedSIdeliveryNeededUeListValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdDedicatedSIdeliveryNeededUeListValidationError{}

// Validate checks the field values on IdDedicatedSIdeliveryNeededUeItem with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *IdDedicatedSIdeliveryNeededUeItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdDedicatedSIdeliveryNeededUeItem
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// IdDedicatedSIdeliveryNeededUeItemMultiError, or nil if none found.
func (m *IdDedicatedSIdeliveryNeededUeItem) ValidateAll() error {
	return m.validate(true)
}

func (m *IdDedicatedSIdeliveryNeededUeItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 190 {
		err := IdDedicatedSIdeliveryNeededUeItemValidationError{
			field:  "Value",
			reason: "value must equal 190",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdDedicatedSIdeliveryNeededUeItemMultiError(errors)
	}

	return nil
}

// IdDedicatedSIdeliveryNeededUeItemMultiError is an error wrapping multiple
// validation errors returned by
// IdDedicatedSIdeliveryNeededUeItem.ValidateAll() if the designated
// constraints aren't met.
type IdDedicatedSIdeliveryNeededUeItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdDedicatedSIdeliveryNeededUeItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdDedicatedSIdeliveryNeededUeItemMultiError) AllErrors() []error { return m }

// IdDedicatedSIdeliveryNeededUeItemValidationError is the validation error
// returned by IdDedicatedSIdeliveryNeededUeItem.Validate if the designated
// constraints aren't met.
type IdDedicatedSIdeliveryNeededUeItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdDedicatedSIdeliveryNeededUeItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdDedicatedSIdeliveryNeededUeItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdDedicatedSIdeliveryNeededUeItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdDedicatedSIdeliveryNeededUeItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdDedicatedSIdeliveryNeededUeItemValidationError) ErrorName() string {
	return "IdDedicatedSIdeliveryNeededUeItemValidationError"
}

// Error satisfies the builtin error interface
func (e IdDedicatedSIdeliveryNeededUeItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdDedicatedSIdeliveryNeededUeItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdDedicatedSIdeliveryNeededUeItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdDedicatedSIdeliveryNeededUeItemValidationError{}

// Validate checks the field values on IdDRxLongCycleStartOffset with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdDRxLongCycleStartOffset) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdDRxLongCycleStartOffset with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdDRxLongCycleStartOffsetMultiError, or nil if none found.
func (m *IdDRxLongCycleStartOffset) ValidateAll() error {
	return m.validate(true)
}

func (m *IdDRxLongCycleStartOffset) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 191 {
		err := IdDRxLongCycleStartOffsetValidationError{
			field:  "Value",
			reason: "value must equal 191",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdDRxLongCycleStartOffsetMultiError(errors)
	}

	return nil
}

// IdDRxLongCycleStartOffsetMultiError is an error wrapping multiple validation
// errors returned by IdDRxLongCycleStartOffset.ValidateAll() if the
// designated constraints aren't met.
type IdDRxLongCycleStartOffsetMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdDRxLongCycleStartOffsetMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdDRxLongCycleStartOffsetMultiError) AllErrors() []error { return m }

// IdDRxLongCycleStartOffsetValidationError is the validation error returned by
// IdDRxLongCycleStartOffset.Validate if the designated constraints aren't met.
type IdDRxLongCycleStartOffsetValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdDRxLongCycleStartOffsetValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdDRxLongCycleStartOffsetValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdDRxLongCycleStartOffsetValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdDRxLongCycleStartOffsetValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdDRxLongCycleStartOffsetValidationError) ErrorName() string {
	return "IdDRxLongCycleStartOffsetValidationError"
}

// Error satisfies the builtin error interface
func (e IdDRxLongCycleStartOffsetValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdDRxLongCycleStartOffset.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdDRxLongCycleStartOffsetValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdDRxLongCycleStartOffsetValidationError{}

// Validate checks the field values on IdULpdcpsnlength with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *IdULpdcpsnlength) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdULpdcpsnlength with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdULpdcpsnlengthMultiError, or nil if none found.
func (m *IdULpdcpsnlength) ValidateAll() error {
	return m.validate(true)
}

func (m *IdULpdcpsnlength) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 192 {
		err := IdULpdcpsnlengthValidationError{
			field:  "Value",
			reason: "value must equal 192",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdULpdcpsnlengthMultiError(errors)
	}

	return nil
}

// IdULpdcpsnlengthMultiError is an error wrapping multiple validation errors
// returned by IdULpdcpsnlength.ValidateAll() if the designated constraints
// aren't met.
type IdULpdcpsnlengthMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdULpdcpsnlengthMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdULpdcpsnlengthMultiError) AllErrors() []error { return m }

// IdULpdcpsnlengthValidationError is the validation error returned by
// IdULpdcpsnlength.Validate if the designated constraints aren't met.
type IdULpdcpsnlengthValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdULpdcpsnlengthValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdULpdcpsnlengthValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdULpdcpsnlengthValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdULpdcpsnlengthValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdULpdcpsnlengthValidationError) ErrorName() string { return "IdULpdcpsnlengthValidationError" }

// Error satisfies the builtin error interface
func (e IdULpdcpsnlengthValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdULpdcpsnlength.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdULpdcpsnlengthValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdULpdcpsnlengthValidationError{}

// Validate checks the field values on IdSelectedBandCombinationIndex with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdSelectedBandCombinationIndex) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdSelectedBandCombinationIndex with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// IdSelectedBandCombinationIndexMultiError, or nil if none found.
func (m *IdSelectedBandCombinationIndex) ValidateAll() error {
	return m.validate(true)
}

func (m *IdSelectedBandCombinationIndex) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 193 {
		err := IdSelectedBandCombinationIndexValidationError{
			field:  "Value",
			reason: "value must equal 193",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdSelectedBandCombinationIndexMultiError(errors)
	}

	return nil
}

// IdSelectedBandCombinationIndexMultiError is an error wrapping multiple
// validation errors returned by IdSelectedBandCombinationIndex.ValidateAll()
// if the designated constraints aren't met.
type IdSelectedBandCombinationIndexMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdSelectedBandCombinationIndexMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdSelectedBandCombinationIndexMultiError) AllErrors() []error { return m }

// IdSelectedBandCombinationIndexValidationError is the validation error
// returned by IdSelectedBandCombinationIndex.Validate if the designated
// constraints aren't met.
type IdSelectedBandCombinationIndexValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdSelectedBandCombinationIndexValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdSelectedBandCombinationIndexValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdSelectedBandCombinationIndexValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdSelectedBandCombinationIndexValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdSelectedBandCombinationIndexValidationError) ErrorName() string {
	return "IdSelectedBandCombinationIndexValidationError"
}

// Error satisfies the builtin error interface
func (e IdSelectedBandCombinationIndexValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdSelectedBandCombinationIndex.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdSelectedBandCombinationIndexValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdSelectedBandCombinationIndexValidationError{}

// Validate checks the field values on IdSelectedFeatureSetEntryIndex with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdSelectedFeatureSetEntryIndex) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdSelectedFeatureSetEntryIndex with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// IdSelectedFeatureSetEntryIndexMultiError, or nil if none found.
func (m *IdSelectedFeatureSetEntryIndex) ValidateAll() error {
	return m.validate(true)
}

func (m *IdSelectedFeatureSetEntryIndex) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 194 {
		err := IdSelectedFeatureSetEntryIndexValidationError{
			field:  "Value",
			reason: "value must equal 194",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdSelectedFeatureSetEntryIndexMultiError(errors)
	}

	return nil
}

// IdSelectedFeatureSetEntryIndexMultiError is an error wrapping multiple
// validation errors returned by IdSelectedFeatureSetEntryIndex.ValidateAll()
// if the designated constraints aren't met.
type IdSelectedFeatureSetEntryIndexMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdSelectedFeatureSetEntryIndexMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdSelectedFeatureSetEntryIndexMultiError) AllErrors() []error { return m }

// IdSelectedFeatureSetEntryIndexValidationError is the validation error
// returned by IdSelectedFeatureSetEntryIndex.Validate if the designated
// constraints aren't met.
type IdSelectedFeatureSetEntryIndexValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdSelectedFeatureSetEntryIndexValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdSelectedFeatureSetEntryIndexValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdSelectedFeatureSetEntryIndexValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdSelectedFeatureSetEntryIndexValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdSelectedFeatureSetEntryIndexValidationError) ErrorName() string {
	return "IdSelectedFeatureSetEntryIndexValidationError"
}

// Error satisfies the builtin error interface
func (e IdSelectedFeatureSetEntryIndexValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdSelectedFeatureSetEntryIndex.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdSelectedFeatureSetEntryIndexValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdSelectedFeatureSetEntryIndexValidationError{}

// Validate checks the field values on
// IdResourceCoordinationTransferInformation with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *IdResourceCoordinationTransferInformation) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// IdResourceCoordinationTransferInformation with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// IdResourceCoordinationTransferInformationMultiError, or nil if none found.
func (m *IdResourceCoordinationTransferInformation) ValidateAll() error {
	return m.validate(true)
}

func (m *IdResourceCoordinationTransferInformation) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 195 {
		err := IdResourceCoordinationTransferInformationValidationError{
			field:  "Value",
			reason: "value must equal 195",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdResourceCoordinationTransferInformationMultiError(errors)
	}

	return nil
}

// IdResourceCoordinationTransferInformationMultiError is an error wrapping
// multiple validation errors returned by
// IdResourceCoordinationTransferInformation.ValidateAll() if the designated
// constraints aren't met.
type IdResourceCoordinationTransferInformationMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdResourceCoordinationTransferInformationMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdResourceCoordinationTransferInformationMultiError) AllErrors() []error { return m }

// IdResourceCoordinationTransferInformationValidationError is the validation
// error returned by IdResourceCoordinationTransferInformation.Validate if the
// designated constraints aren't met.
type IdResourceCoordinationTransferInformationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdResourceCoordinationTransferInformationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdResourceCoordinationTransferInformationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdResourceCoordinationTransferInformationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdResourceCoordinationTransferInformationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdResourceCoordinationTransferInformationValidationError) ErrorName() string {
	return "IdResourceCoordinationTransferInformationValidationError"
}

// Error satisfies the builtin error interface
func (e IdResourceCoordinationTransferInformationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdResourceCoordinationTransferInformation.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdResourceCoordinationTransferInformationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdResourceCoordinationTransferInformationValidationError{}

// Validate checks the field values on IdExtendedServedPlmnsList with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdExtendedServedPlmnsList) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdExtendedServedPlmnsList with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdExtendedServedPlmnsListMultiError, or nil if none found.
func (m *IdExtendedServedPlmnsList) ValidateAll() error {
	return m.validate(true)
}

func (m *IdExtendedServedPlmnsList) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 196 {
		err := IdExtendedServedPlmnsListValidationError{
			field:  "Value",
			reason: "value must equal 196",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdExtendedServedPlmnsListMultiError(errors)
	}

	return nil
}

// IdExtendedServedPlmnsListMultiError is an error wrapping multiple validation
// errors returned by IdExtendedServedPlmnsList.ValidateAll() if the
// designated constraints aren't met.
type IdExtendedServedPlmnsListMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdExtendedServedPlmnsListMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdExtendedServedPlmnsListMultiError) AllErrors() []error { return m }

// IdExtendedServedPlmnsListValidationError is the validation error returned by
// IdExtendedServedPlmnsList.Validate if the designated constraints aren't met.
type IdExtendedServedPlmnsListValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdExtendedServedPlmnsListValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdExtendedServedPlmnsListValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdExtendedServedPlmnsListValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdExtendedServedPlmnsListValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdExtendedServedPlmnsListValidationError) ErrorName() string {
	return "IdExtendedServedPlmnsListValidationError"
}

// Error satisfies the builtin error interface
func (e IdExtendedServedPlmnsListValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdExtendedServedPlmnsList.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdExtendedServedPlmnsListValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdExtendedServedPlmnsListValidationError{}

// Validate checks the field values on IdExtendedAvailablePlmnList with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdExtendedAvailablePlmnList) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdExtendedAvailablePlmnList with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdExtendedAvailablePlmnListMultiError, or nil if none found.
func (m *IdExtendedAvailablePlmnList) ValidateAll() error {
	return m.validate(true)
}

func (m *IdExtendedAvailablePlmnList) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 197 {
		err := IdExtendedAvailablePlmnListValidationError{
			field:  "Value",
			reason: "value must equal 197",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdExtendedAvailablePlmnListMultiError(errors)
	}

	return nil
}

// IdExtendedAvailablePlmnListMultiError is an error wrapping multiple
// validation errors returned by IdExtendedAvailablePlmnList.ValidateAll() if
// the designated constraints aren't met.
type IdExtendedAvailablePlmnListMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdExtendedAvailablePlmnListMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdExtendedAvailablePlmnListMultiError) AllErrors() []error { return m }

// IdExtendedAvailablePlmnListValidationError is the validation error returned
// by IdExtendedAvailablePlmnList.Validate if the designated constraints
// aren't met.
type IdExtendedAvailablePlmnListValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdExtendedAvailablePlmnListValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdExtendedAvailablePlmnListValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdExtendedAvailablePlmnListValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdExtendedAvailablePlmnListValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdExtendedAvailablePlmnListValidationError) ErrorName() string {
	return "IdExtendedAvailablePlmnListValidationError"
}

// Error satisfies the builtin error interface
func (e IdExtendedAvailablePlmnListValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdExtendedAvailablePlmnList.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdExtendedAvailablePlmnListValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdExtendedAvailablePlmnListValidationError{}

// Validate checks the field values on IdAssociatedSCellList with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdAssociatedSCellList) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdAssociatedSCellList with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdAssociatedSCellListMultiError, or nil if none found.
func (m *IdAssociatedSCellList) ValidateAll() error {
	return m.validate(true)
}

func (m *IdAssociatedSCellList) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 198 {
		err := IdAssociatedSCellListValidationError{
			field:  "Value",
			reason: "value must equal 198",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdAssociatedSCellListMultiError(errors)
	}

	return nil
}

// IdAssociatedSCellListMultiError is an error wrapping multiple validation
// errors returned by IdAssociatedSCellList.ValidateAll() if the designated
// constraints aren't met.
type IdAssociatedSCellListMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdAssociatedSCellListMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdAssociatedSCellListMultiError) AllErrors() []error { return m }

// IdAssociatedSCellListValidationError is the validation error returned by
// IdAssociatedSCellList.Validate if the designated constraints aren't met.
type IdAssociatedSCellListValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdAssociatedSCellListValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdAssociatedSCellListValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdAssociatedSCellListValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdAssociatedSCellListValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdAssociatedSCellListValidationError) ErrorName() string {
	return "IdAssociatedSCellListValidationError"
}

// Error satisfies the builtin error interface
func (e IdAssociatedSCellListValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdAssociatedSCellList.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdAssociatedSCellListValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdAssociatedSCellListValidationError{}

// Validate checks the field values on IdlatestRRcVersionEnhanced with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdlatestRRcVersionEnhanced) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdlatestRRcVersionEnhanced with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdlatestRRcVersionEnhancedMultiError, or nil if none found.
func (m *IdlatestRRcVersionEnhanced) ValidateAll() error {
	return m.validate(true)
}

func (m *IdlatestRRcVersionEnhanced) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 199 {
		err := IdlatestRRcVersionEnhancedValidationError{
			field:  "Value",
			reason: "value must equal 199",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdlatestRRcVersionEnhancedMultiError(errors)
	}

	return nil
}

// IdlatestRRcVersionEnhancedMultiError is an error wrapping multiple
// validation errors returned by IdlatestRRcVersionEnhanced.ValidateAll() if
// the designated constraints aren't met.
type IdlatestRRcVersionEnhancedMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdlatestRRcVersionEnhancedMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdlatestRRcVersionEnhancedMultiError) AllErrors() []error { return m }

// IdlatestRRcVersionEnhancedValidationError is the validation error returned
// by IdlatestRRcVersionEnhanced.Validate if the designated constraints aren't met.
type IdlatestRRcVersionEnhancedValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdlatestRRcVersionEnhancedValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdlatestRRcVersionEnhancedValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdlatestRRcVersionEnhancedValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdlatestRRcVersionEnhancedValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdlatestRRcVersionEnhancedValidationError) ErrorName() string {
	return "IdlatestRRcVersionEnhancedValidationError"
}

// Error satisfies the builtin error interface
func (e IdlatestRRcVersionEnhancedValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdlatestRRcVersionEnhanced.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdlatestRRcVersionEnhancedValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdlatestRRcVersionEnhancedValidationError{}

// Validate checks the field values on IdAssociatedSCellItem with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdAssociatedSCellItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdAssociatedSCellItem with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdAssociatedSCellItemMultiError, or nil if none found.
func (m *IdAssociatedSCellItem) ValidateAll() error {
	return m.validate(true)
}

func (m *IdAssociatedSCellItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 200 {
		err := IdAssociatedSCellItemValidationError{
			field:  "Value",
			reason: "value must equal 200",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdAssociatedSCellItemMultiError(errors)
	}

	return nil
}

// IdAssociatedSCellItemMultiError is an error wrapping multiple validation
// errors returned by IdAssociatedSCellItem.ValidateAll() if the designated
// constraints aren't met.
type IdAssociatedSCellItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdAssociatedSCellItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdAssociatedSCellItemMultiError) AllErrors() []error { return m }

// IdAssociatedSCellItemValidationError is the validation error returned by
// IdAssociatedSCellItem.Validate if the designated constraints aren't met.
type IdAssociatedSCellItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdAssociatedSCellItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdAssociatedSCellItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdAssociatedSCellItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdAssociatedSCellItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdAssociatedSCellItemValidationError) ErrorName() string {
	return "IdAssociatedSCellItemValidationError"
}

// Error satisfies the builtin error interface
func (e IdAssociatedSCellItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdAssociatedSCellItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdAssociatedSCellItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdAssociatedSCellItemValidationError{}

// Validate checks the field values on IdCellDirection with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *IdCellDirection) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdCellDirection with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdCellDirectionMultiError, or nil if none found.
func (m *IdCellDirection) ValidateAll() error {
	return m.validate(true)
}

func (m *IdCellDirection) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 201 {
		err := IdCellDirectionValidationError{
			field:  "Value",
			reason: "value must equal 201",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdCellDirectionMultiError(errors)
	}

	return nil
}

// IdCellDirectionMultiError is an error wrapping multiple validation errors
// returned by IdCellDirection.ValidateAll() if the designated constraints
// aren't met.
type IdCellDirectionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdCellDirectionMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdCellDirectionMultiError) AllErrors() []error { return m }

// IdCellDirectionValidationError is the validation error returned by
// IdCellDirection.Validate if the designated constraints aren't met.
type IdCellDirectionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdCellDirectionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdCellDirectionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdCellDirectionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdCellDirectionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdCellDirectionValidationError) ErrorName() string { return "IdCellDirectionValidationError" }

// Error satisfies the builtin error interface
func (e IdCellDirectionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdCellDirection.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdCellDirectionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdCellDirectionValidationError{}

// Validate checks the field values on IdSRbsSetupList with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *IdSRbsSetupList) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdSRbsSetupList with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdSRbsSetupListMultiError, or nil if none found.
func (m *IdSRbsSetupList) ValidateAll() error {
	return m.validate(true)
}

func (m *IdSRbsSetupList) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 202 {
		err := IdSRbsSetupListValidationError{
			field:  "Value",
			reason: "value must equal 202",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdSRbsSetupListMultiError(errors)
	}

	return nil
}

// IdSRbsSetupListMultiError is an error wrapping multiple validation errors
// returned by IdSRbsSetupList.ValidateAll() if the designated constraints
// aren't met.
type IdSRbsSetupListMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdSRbsSetupListMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdSRbsSetupListMultiError) AllErrors() []error { return m }

// IdSRbsSetupListValidationError is the validation error returned by
// IdSRbsSetupList.Validate if the designated constraints aren't met.
type IdSRbsSetupListValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdSRbsSetupListValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdSRbsSetupListValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdSRbsSetupListValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdSRbsSetupListValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdSRbsSetupListValidationError) ErrorName() string { return "IdSRbsSetupListValidationError" }

// Error satisfies the builtin error interface
func (e IdSRbsSetupListValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdSRbsSetupList.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdSRbsSetupListValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdSRbsSetupListValidationError{}

// Validate checks the field values on IdSRbsSetupItem with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *IdSRbsSetupItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdSRbsSetupItem with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdSRbsSetupItemMultiError, or nil if none found.
func (m *IdSRbsSetupItem) ValidateAll() error {
	return m.validate(true)
}

func (m *IdSRbsSetupItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 203 {
		err := IdSRbsSetupItemValidationError{
			field:  "Value",
			reason: "value must equal 203",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdSRbsSetupItemMultiError(errors)
	}

	return nil
}

// IdSRbsSetupItemMultiError is an error wrapping multiple validation errors
// returned by IdSRbsSetupItem.ValidateAll() if the designated constraints
// aren't met.
type IdSRbsSetupItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdSRbsSetupItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdSRbsSetupItemMultiError) AllErrors() []error { return m }

// IdSRbsSetupItemValidationError is the validation error returned by
// IdSRbsSetupItem.Validate if the designated constraints aren't met.
type IdSRbsSetupItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdSRbsSetupItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdSRbsSetupItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdSRbsSetupItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdSRbsSetupItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdSRbsSetupItemValidationError) ErrorName() string { return "IdSRbsSetupItemValidationError" }

// Error satisfies the builtin error interface
func (e IdSRbsSetupItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdSRbsSetupItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdSRbsSetupItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdSRbsSetupItemValidationError{}

// Validate checks the field values on IdSRbsSetupModList with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdSRbsSetupModList) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdSRbsSetupModList with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdSRbsSetupModListMultiError, or nil if none found.
func (m *IdSRbsSetupModList) ValidateAll() error {
	return m.validate(true)
}

func (m *IdSRbsSetupModList) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 204 {
		err := IdSRbsSetupModListValidationError{
			field:  "Value",
			reason: "value must equal 204",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdSRbsSetupModListMultiError(errors)
	}

	return nil
}

// IdSRbsSetupModListMultiError is an error wrapping multiple validation errors
// returned by IdSRbsSetupModList.ValidateAll() if the designated constraints
// aren't met.
type IdSRbsSetupModListMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdSRbsSetupModListMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdSRbsSetupModListMultiError) AllErrors() []error { return m }

// IdSRbsSetupModListValidationError is the validation error returned by
// IdSRbsSetupModList.Validate if the designated constraints aren't met.
type IdSRbsSetupModListValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdSRbsSetupModListValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdSRbsSetupModListValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdSRbsSetupModListValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdSRbsSetupModListValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdSRbsSetupModListValidationError) ErrorName() string {
	return "IdSRbsSetupModListValidationError"
}

// Error satisfies the builtin error interface
func (e IdSRbsSetupModListValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdSRbsSetupModList.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdSRbsSetupModListValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdSRbsSetupModListValidationError{}

// Validate checks the field values on IdSRbsSetupModItem with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdSRbsSetupModItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdSRbsSetupModItem with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdSRbsSetupModItemMultiError, or nil if none found.
func (m *IdSRbsSetupModItem) ValidateAll() error {
	return m.validate(true)
}

func (m *IdSRbsSetupModItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 205 {
		err := IdSRbsSetupModItemValidationError{
			field:  "Value",
			reason: "value must equal 205",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdSRbsSetupModItemMultiError(errors)
	}

	return nil
}

// IdSRbsSetupModItemMultiError is an error wrapping multiple validation errors
// returned by IdSRbsSetupModItem.ValidateAll() if the designated constraints
// aren't met.
type IdSRbsSetupModItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdSRbsSetupModItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdSRbsSetupModItemMultiError) AllErrors() []error { return m }

// IdSRbsSetupModItemValidationError is the validation error returned by
// IdSRbsSetupModItem.Validate if the designated constraints aren't met.
type IdSRbsSetupModItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdSRbsSetupModItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdSRbsSetupModItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdSRbsSetupModItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdSRbsSetupModItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdSRbsSetupModItemValidationError) ErrorName() string {
	return "IdSRbsSetupModItemValidationError"
}

// Error satisfies the builtin error interface
func (e IdSRbsSetupModItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdSRbsSetupModItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdSRbsSetupModItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdSRbsSetupModItemValidationError{}

// Validate checks the field values on IdSRbsModifiedList with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdSRbsModifiedList) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdSRbsModifiedList with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdSRbsModifiedListMultiError, or nil if none found.
func (m *IdSRbsModifiedList) ValidateAll() error {
	return m.validate(true)
}

func (m *IdSRbsModifiedList) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 206 {
		err := IdSRbsModifiedListValidationError{
			field:  "Value",
			reason: "value must equal 206",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdSRbsModifiedListMultiError(errors)
	}

	return nil
}

// IdSRbsModifiedListMultiError is an error wrapping multiple validation errors
// returned by IdSRbsModifiedList.ValidateAll() if the designated constraints
// aren't met.
type IdSRbsModifiedListMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdSRbsModifiedListMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdSRbsModifiedListMultiError) AllErrors() []error { return m }

// IdSRbsModifiedListValidationError is the validation error returned by
// IdSRbsModifiedList.Validate if the designated constraints aren't met.
type IdSRbsModifiedListValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdSRbsModifiedListValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdSRbsModifiedListValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdSRbsModifiedListValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdSRbsModifiedListValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdSRbsModifiedListValidationError) ErrorName() string {
	return "IdSRbsModifiedListValidationError"
}

// Error satisfies the builtin error interface
func (e IdSRbsModifiedListValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdSRbsModifiedList.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdSRbsModifiedListValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdSRbsModifiedListValidationError{}

// Validate checks the field values on IdSRbsModifiedItem with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdSRbsModifiedItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdSRbsModifiedItem with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdSRbsModifiedItemMultiError, or nil if none found.
func (m *IdSRbsModifiedItem) ValidateAll() error {
	return m.validate(true)
}

func (m *IdSRbsModifiedItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 207 {
		err := IdSRbsModifiedItemValidationError{
			field:  "Value",
			reason: "value must equal 207",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdSRbsModifiedItemMultiError(errors)
	}

	return nil
}

// IdSRbsModifiedItemMultiError is an error wrapping multiple validation errors
// returned by IdSRbsModifiedItem.ValidateAll() if the designated constraints
// aren't met.
type IdSRbsModifiedItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdSRbsModifiedItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdSRbsModifiedItemMultiError) AllErrors() []error { return m }

// IdSRbsModifiedItemValidationError is the validation error returned by
// IdSRbsModifiedItem.Validate if the designated constraints aren't met.
type IdSRbsModifiedItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdSRbsModifiedItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdSRbsModifiedItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdSRbsModifiedItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdSRbsModifiedItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdSRbsModifiedItemValidationError) ErrorName() string {
	return "IdSRbsModifiedItemValidationError"
}

// Error satisfies the builtin error interface
func (e IdSRbsModifiedItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdSRbsModifiedItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdSRbsModifiedItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdSRbsModifiedItemValidationError{}

// Validate checks the field values on IdPhInfoScg with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *IdPhInfoScg) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdPhInfoScg with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in IdPhInfoScgMultiError, or
// nil if none found.
func (m *IdPhInfoScg) ValidateAll() error {
	return m.validate(true)
}

func (m *IdPhInfoScg) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 208 {
		err := IdPhInfoScgValidationError{
			field:  "Value",
			reason: "value must equal 208",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdPhInfoScgMultiError(errors)
	}

	return nil
}

// IdPhInfoScgMultiError is an error wrapping multiple validation errors
// returned by IdPhInfoScg.ValidateAll() if the designated constraints aren't met.
type IdPhInfoScgMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdPhInfoScgMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdPhInfoScgMultiError) AllErrors() []error { return m }

// IdPhInfoScgValidationError is the validation error returned by
// IdPhInfoScg.Validate if the designated constraints aren't met.
type IdPhInfoScgValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdPhInfoScgValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdPhInfoScgValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdPhInfoScgValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdPhInfoScgValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdPhInfoScgValidationError) ErrorName() string { return "IdPhInfoScgValidationError" }

// Error satisfies the builtin error interface
func (e IdPhInfoScgValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdPhInfoScg.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdPhInfoScgValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdPhInfoScgValidationError{}

// Validate checks the field values on IdRequestedBandCombinationIndex with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdRequestedBandCombinationIndex) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdRequestedBandCombinationIndex with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// IdRequestedBandCombinationIndexMultiError, or nil if none found.
func (m *IdRequestedBandCombinationIndex) ValidateAll() error {
	return m.validate(true)
}

func (m *IdRequestedBandCombinationIndex) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 209 {
		err := IdRequestedBandCombinationIndexValidationError{
			field:  "Value",
			reason: "value must equal 209",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdRequestedBandCombinationIndexMultiError(errors)
	}

	return nil
}

// IdRequestedBandCombinationIndexMultiError is an error wrapping multiple
// validation errors returned by IdRequestedBandCombinationIndex.ValidateAll()
// if the designated constraints aren't met.
type IdRequestedBandCombinationIndexMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdRequestedBandCombinationIndexMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdRequestedBandCombinationIndexMultiError) AllErrors() []error { return m }

// IdRequestedBandCombinationIndexValidationError is the validation error
// returned by IdRequestedBandCombinationIndex.Validate if the designated
// constraints aren't met.
type IdRequestedBandCombinationIndexValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdRequestedBandCombinationIndexValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdRequestedBandCombinationIndexValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdRequestedBandCombinationIndexValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdRequestedBandCombinationIndexValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdRequestedBandCombinationIndexValidationError) ErrorName() string {
	return "IdRequestedBandCombinationIndexValidationError"
}

// Error satisfies the builtin error interface
func (e IdRequestedBandCombinationIndexValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdRequestedBandCombinationIndex.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdRequestedBandCombinationIndexValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdRequestedBandCombinationIndexValidationError{}

// Validate checks the field values on IdRequestedFeatureSetEntryIndex with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdRequestedFeatureSetEntryIndex) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdRequestedFeatureSetEntryIndex with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// IdRequestedFeatureSetEntryIndexMultiError, or nil if none found.
func (m *IdRequestedFeatureSetEntryIndex) ValidateAll() error {
	return m.validate(true)
}

func (m *IdRequestedFeatureSetEntryIndex) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 210 {
		err := IdRequestedFeatureSetEntryIndexValidationError{
			field:  "Value",
			reason: "value must equal 210",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdRequestedFeatureSetEntryIndexMultiError(errors)
	}

	return nil
}

// IdRequestedFeatureSetEntryIndexMultiError is an error wrapping multiple
// validation errors returned by IdRequestedFeatureSetEntryIndex.ValidateAll()
// if the designated constraints aren't met.
type IdRequestedFeatureSetEntryIndexMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdRequestedFeatureSetEntryIndexMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdRequestedFeatureSetEntryIndexMultiError) AllErrors() []error { return m }

// IdRequestedFeatureSetEntryIndexValidationError is the validation error
// returned by IdRequestedFeatureSetEntryIndex.Validate if the designated
// constraints aren't met.
type IdRequestedFeatureSetEntryIndexValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdRequestedFeatureSetEntryIndexValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdRequestedFeatureSetEntryIndexValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdRequestedFeatureSetEntryIndexValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdRequestedFeatureSetEntryIndexValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdRequestedFeatureSetEntryIndexValidationError) ErrorName() string {
	return "IdRequestedFeatureSetEntryIndexValidationError"
}

// Error satisfies the builtin error interface
func (e IdRequestedFeatureSetEntryIndexValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdRequestedFeatureSetEntryIndex.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdRequestedFeatureSetEntryIndexValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdRequestedFeatureSetEntryIndexValidationError{}

// Validate checks the field values on IdRequestedPMaxFr2 with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdRequestedPMaxFr2) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdRequestedPMaxFr2 with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdRequestedPMaxFr2MultiError, or nil if none found.
func (m *IdRequestedPMaxFr2) ValidateAll() error {
	return m.validate(true)
}

func (m *IdRequestedPMaxFr2) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 211 {
		err := IdRequestedPMaxFr2ValidationError{
			field:  "Value",
			reason: "value must equal 211",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdRequestedPMaxFr2MultiError(errors)
	}

	return nil
}

// IdRequestedPMaxFr2MultiError is an error wrapping multiple validation errors
// returned by IdRequestedPMaxFr2.ValidateAll() if the designated constraints
// aren't met.
type IdRequestedPMaxFr2MultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdRequestedPMaxFr2MultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdRequestedPMaxFr2MultiError) AllErrors() []error { return m }

// IdRequestedPMaxFr2ValidationError is the validation error returned by
// IdRequestedPMaxFr2.Validate if the designated constraints aren't met.
type IdRequestedPMaxFr2ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdRequestedPMaxFr2ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdRequestedPMaxFr2ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdRequestedPMaxFr2ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdRequestedPMaxFr2ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdRequestedPMaxFr2ValidationError) ErrorName() string {
	return "IdRequestedPMaxFr2ValidationError"
}

// Error satisfies the builtin error interface
func (e IdRequestedPMaxFr2ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdRequestedPMaxFr2.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdRequestedPMaxFr2ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdRequestedPMaxFr2ValidationError{}

// Validate checks the field values on IdDRxConfig with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *IdDRxConfig) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdDRxConfig with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in IdDRxConfigMultiError, or
// nil if none found.
func (m *IdDRxConfig) ValidateAll() error {
	return m.validate(true)
}

func (m *IdDRxConfig) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 212 {
		err := IdDRxConfigValidationError{
			field:  "Value",
			reason: "value must equal 212",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdDRxConfigMultiError(errors)
	}

	return nil
}

// IdDRxConfigMultiError is an error wrapping multiple validation errors
// returned by IdDRxConfig.ValidateAll() if the designated constraints aren't met.
type IdDRxConfigMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdDRxConfigMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdDRxConfigMultiError) AllErrors() []error { return m }

// IdDRxConfigValidationError is the validation error returned by
// IdDRxConfig.Validate if the designated constraints aren't met.
type IdDRxConfigValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdDRxConfigValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdDRxConfigValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdDRxConfigValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdDRxConfigValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdDRxConfigValidationError) ErrorName() string { return "IdDRxConfigValidationError" }

// Error satisfies the builtin error interface
func (e IdDRxConfigValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdDRxConfig.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdDRxConfigValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdDRxConfigValidationError{}

// Validate checks the field values on IdIgnoreResourceCoordinationContainer
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *IdIgnoreResourceCoordinationContainer) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdIgnoreResourceCoordinationContainer
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// IdIgnoreResourceCoordinationContainerMultiError, or nil if none found.
func (m *IdIgnoreResourceCoordinationContainer) ValidateAll() error {
	return m.validate(true)
}

func (m *IdIgnoreResourceCoordinationContainer) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 213 {
		err := IdIgnoreResourceCoordinationContainerValidationError{
			field:  "Value",
			reason: "value must equal 213",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdIgnoreResourceCoordinationContainerMultiError(errors)
	}

	return nil
}

// IdIgnoreResourceCoordinationContainerMultiError is an error wrapping
// multiple validation errors returned by
// IdIgnoreResourceCoordinationContainer.ValidateAll() if the designated
// constraints aren't met.
type IdIgnoreResourceCoordinationContainerMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdIgnoreResourceCoordinationContainerMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdIgnoreResourceCoordinationContainerMultiError) AllErrors() []error { return m }

// IdIgnoreResourceCoordinationContainerValidationError is the validation error
// returned by IdIgnoreResourceCoordinationContainer.Validate if the
// designated constraints aren't met.
type IdIgnoreResourceCoordinationContainerValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdIgnoreResourceCoordinationContainerValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdIgnoreResourceCoordinationContainerValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdIgnoreResourceCoordinationContainerValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdIgnoreResourceCoordinationContainerValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdIgnoreResourceCoordinationContainerValidationError) ErrorName() string {
	return "IdIgnoreResourceCoordinationContainerValidationError"
}

// Error satisfies the builtin error interface
func (e IdIgnoreResourceCoordinationContainerValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdIgnoreResourceCoordinationContainer.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdIgnoreResourceCoordinationContainerValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdIgnoreResourceCoordinationContainerValidationError{}

// Validate checks the field values on IdUEassistanceInformation with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdUEassistanceInformation) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdUEassistanceInformation with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdUEassistanceInformationMultiError, or nil if none found.
func (m *IdUEassistanceInformation) ValidateAll() error {
	return m.validate(true)
}

func (m *IdUEassistanceInformation) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 214 {
		err := IdUEassistanceInformationValidationError{
			field:  "Value",
			reason: "value must equal 214",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdUEassistanceInformationMultiError(errors)
	}

	return nil
}

// IdUEassistanceInformationMultiError is an error wrapping multiple validation
// errors returned by IdUEassistanceInformation.ValidateAll() if the
// designated constraints aren't met.
type IdUEassistanceInformationMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdUEassistanceInformationMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdUEassistanceInformationMultiError) AllErrors() []error { return m }

// IdUEassistanceInformationValidationError is the validation error returned by
// IdUEassistanceInformation.Validate if the designated constraints aren't met.
type IdUEassistanceInformationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdUEassistanceInformationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdUEassistanceInformationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdUEassistanceInformationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdUEassistanceInformationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdUEassistanceInformationValidationError) ErrorName() string {
	return "IdUEassistanceInformationValidationError"
}

// Error satisfies the builtin error interface
func (e IdUEassistanceInformationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdUEassistanceInformation.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdUEassistanceInformationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdUEassistanceInformationValidationError{}

// Validate checks the field values on IdNeedforGap with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *IdNeedforGap) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdNeedforGap with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in IdNeedforGapMultiError, or
// nil if none found.
func (m *IdNeedforGap) ValidateAll() error {
	return m.validate(true)
}

func (m *IdNeedforGap) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 215 {
		err := IdNeedforGapValidationError{
			field:  "Value",
			reason: "value must equal 215",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdNeedforGapMultiError(errors)
	}

	return nil
}

// IdNeedforGapMultiError is an error wrapping multiple validation errors
// returned by IdNeedforGap.ValidateAll() if the designated constraints aren't met.
type IdNeedforGapMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdNeedforGapMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdNeedforGapMultiError) AllErrors() []error { return m }

// IdNeedforGapValidationError is the validation error returned by
// IdNeedforGap.Validate if the designated constraints aren't met.
type IdNeedforGapValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdNeedforGapValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdNeedforGapValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdNeedforGapValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdNeedforGapValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdNeedforGapValidationError) ErrorName() string { return "IdNeedforGapValidationError" }

// Error satisfies the builtin error interface
func (e IdNeedforGapValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdNeedforGap.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdNeedforGapValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdNeedforGapValidationError{}

// Validate checks the field values on IdPagingOrigin with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *IdPagingOrigin) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdPagingOrigin with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in IdPagingOriginMultiError,
// or nil if none found.
func (m *IdPagingOrigin) ValidateAll() error {
	return m.validate(true)
}

func (m *IdPagingOrigin) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 216 {
		err := IdPagingOriginValidationError{
			field:  "Value",
			reason: "value must equal 216",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdPagingOriginMultiError(errors)
	}

	return nil
}

// IdPagingOriginMultiError is an error wrapping multiple validation errors
// returned by IdPagingOrigin.ValidateAll() if the designated constraints
// aren't met.
type IdPagingOriginMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdPagingOriginMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdPagingOriginMultiError) AllErrors() []error { return m }

// IdPagingOriginValidationError is the validation error returned by
// IdPagingOrigin.Validate if the designated constraints aren't met.
type IdPagingOriginValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdPagingOriginValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdPagingOriginValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdPagingOriginValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdPagingOriginValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdPagingOriginValidationError) ErrorName() string { return "IdPagingOriginValidationError" }

// Error satisfies the builtin error interface
func (e IdPagingOriginValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdPagingOrigin.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdPagingOriginValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdPagingOriginValidationError{}

// Validate checks the field values on IdnewgNbCUUEF1ApID with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdnewgNbCUUEF1ApID) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdnewgNbCUUEF1ApID with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdnewgNbCUUEF1ApIDMultiError, or nil if none found.
func (m *IdnewgNbCUUEF1ApID) ValidateAll() error {
	return m.validate(true)
}

func (m *IdnewgNbCUUEF1ApID) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 217 {
		err := IdnewgNbCUUEF1ApIDValidationError{
			field:  "Value",
			reason: "value must equal 217",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdnewgNbCUUEF1ApIDMultiError(errors)
	}

	return nil
}

// IdnewgNbCUUEF1ApIDMultiError is an error wrapping multiple validation errors
// returned by IdnewgNbCUUEF1ApID.ValidateAll() if the designated constraints
// aren't met.
type IdnewgNbCUUEF1ApIDMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdnewgNbCUUEF1ApIDMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdnewgNbCUUEF1ApIDMultiError) AllErrors() []error { return m }

// IdnewgNbCUUEF1ApIDValidationError is the validation error returned by
// IdnewgNbCUUEF1ApID.Validate if the designated constraints aren't met.
type IdnewgNbCUUEF1ApIDValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdnewgNbCUUEF1ApIDValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdnewgNbCUUEF1ApIDValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdnewgNbCUUEF1ApIDValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdnewgNbCUUEF1ApIDValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdnewgNbCUUEF1ApIDValidationError) ErrorName() string {
	return "IdnewgNbCUUEF1ApIDValidationError"
}

// Error satisfies the builtin error interface
func (e IdnewgNbCUUEF1ApIDValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdnewgNbCUUEF1ApID.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdnewgNbCUUEF1ApIDValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdnewgNbCUUEF1ApIDValidationError{}

// Validate checks the field values on IdRedirectedRrcmessage with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdRedirectedRrcmessage) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdRedirectedRrcmessage with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdRedirectedRrcmessageMultiError, or nil if none found.
func (m *IdRedirectedRrcmessage) ValidateAll() error {
	return m.validate(true)
}

func (m *IdRedirectedRrcmessage) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 218 {
		err := IdRedirectedRrcmessageValidationError{
			field:  "Value",
			reason: "value must equal 218",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdRedirectedRrcmessageMultiError(errors)
	}

	return nil
}

// IdRedirectedRrcmessageMultiError is an error wrapping multiple validation
// errors returned by IdRedirectedRrcmessage.ValidateAll() if the designated
// constraints aren't met.
type IdRedirectedRrcmessageMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdRedirectedRrcmessageMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdRedirectedRrcmessageMultiError) AllErrors() []error { return m }

// IdRedirectedRrcmessageValidationError is the validation error returned by
// IdRedirectedRrcmessage.Validate if the designated constraints aren't met.
type IdRedirectedRrcmessageValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdRedirectedRrcmessageValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdRedirectedRrcmessageValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdRedirectedRrcmessageValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdRedirectedRrcmessageValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdRedirectedRrcmessageValidationError) ErrorName() string {
	return "IdRedirectedRrcmessageValidationError"
}

// Error satisfies the builtin error interface
func (e IdRedirectedRrcmessageValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdRedirectedRrcmessage.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdRedirectedRrcmessageValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdRedirectedRrcmessageValidationError{}

// Validate checks the field values on IdnewgNbDUUEF1ApID with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdnewgNbDUUEF1ApID) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdnewgNbDUUEF1ApID with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdnewgNbDUUEF1ApIDMultiError, or nil if none found.
func (m *IdnewgNbDUUEF1ApID) ValidateAll() error {
	return m.validate(true)
}

func (m *IdnewgNbDUUEF1ApID) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 219 {
		err := IdnewgNbDUUEF1ApIDValidationError{
			field:  "Value",
			reason: "value must equal 219",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdnewgNbDUUEF1ApIDMultiError(errors)
	}

	return nil
}

// IdnewgNbDUUEF1ApIDMultiError is an error wrapping multiple validation errors
// returned by IdnewgNbDUUEF1ApID.ValidateAll() if the designated constraints
// aren't met.
type IdnewgNbDUUEF1ApIDMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdnewgNbDUUEF1ApIDMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdnewgNbDUUEF1ApIDMultiError) AllErrors() []error { return m }

// IdnewgNbDUUEF1ApIDValidationError is the validation error returned by
// IdnewgNbDUUEF1ApID.Validate if the designated constraints aren't met.
type IdnewgNbDUUEF1ApIDValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdnewgNbDUUEF1ApIDValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdnewgNbDUUEF1ApIDValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdnewgNbDUUEF1ApIDValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdnewgNbDUUEF1ApIDValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdnewgNbDUUEF1ApIDValidationError) ErrorName() string {
	return "IdnewgNbDUUEF1ApIDValidationError"
}

// Error satisfies the builtin error interface
func (e IdnewgNbDUUEF1ApIDValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdnewgNbDUUEF1ApID.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdnewgNbDUUEF1ApIDValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdnewgNbDUUEF1ApIDValidationError{}

// Validate checks the field values on IdNotificationInformation with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdNotificationInformation) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdNotificationInformation with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdNotificationInformationMultiError, or nil if none found.
func (m *IdNotificationInformation) ValidateAll() error {
	return m.validate(true)
}

func (m *IdNotificationInformation) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 220 {
		err := IdNotificationInformationValidationError{
			field:  "Value",
			reason: "value must equal 220",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdNotificationInformationMultiError(errors)
	}

	return nil
}

// IdNotificationInformationMultiError is an error wrapping multiple validation
// errors returned by IdNotificationInformation.ValidateAll() if the
// designated constraints aren't met.
type IdNotificationInformationMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdNotificationInformationMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdNotificationInformationMultiError) AllErrors() []error { return m }

// IdNotificationInformationValidationError is the validation error returned by
// IdNotificationInformation.Validate if the designated constraints aren't met.
type IdNotificationInformationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdNotificationInformationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdNotificationInformationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdNotificationInformationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdNotificationInformationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdNotificationInformationValidationError) ErrorName() string {
	return "IdNotificationInformationValidationError"
}

// Error satisfies the builtin error interface
func (e IdNotificationInformationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdNotificationInformation.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdNotificationInformationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdNotificationInformationValidationError{}

// Validate checks the field values on IdPLmnassistanceInfoForNetShar with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdPLmnassistanceInfoForNetShar) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdPLmnassistanceInfoForNetShar with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// IdPLmnassistanceInfoForNetSharMultiError, or nil if none found.
func (m *IdPLmnassistanceInfoForNetShar) ValidateAll() error {
	return m.validate(true)
}

func (m *IdPLmnassistanceInfoForNetShar) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 221 {
		err := IdPLmnassistanceInfoForNetSharValidationError{
			field:  "Value",
			reason: "value must equal 221",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdPLmnassistanceInfoForNetSharMultiError(errors)
	}

	return nil
}

// IdPLmnassistanceInfoForNetSharMultiError is an error wrapping multiple
// validation errors returned by IdPLmnassistanceInfoForNetShar.ValidateAll()
// if the designated constraints aren't met.
type IdPLmnassistanceInfoForNetSharMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdPLmnassistanceInfoForNetSharMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdPLmnassistanceInfoForNetSharMultiError) AllErrors() []error { return m }

// IdPLmnassistanceInfoForNetSharValidationError is the validation error
// returned by IdPLmnassistanceInfoForNetShar.Validate if the designated
// constraints aren't met.
type IdPLmnassistanceInfoForNetSharValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdPLmnassistanceInfoForNetSharValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdPLmnassistanceInfoForNetSharValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdPLmnassistanceInfoForNetSharValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdPLmnassistanceInfoForNetSharValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdPLmnassistanceInfoForNetSharValidationError) ErrorName() string {
	return "IdPLmnassistanceInfoForNetSharValidationError"
}

// Error satisfies the builtin error interface
func (e IdPLmnassistanceInfoForNetSharValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdPLmnassistanceInfoForNetShar.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdPLmnassistanceInfoForNetSharValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdPLmnassistanceInfoForNetSharValidationError{}

// Validate checks the field values on IdUEcontextNotRetrievable with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdUEcontextNotRetrievable) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdUEcontextNotRetrievable with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdUEcontextNotRetrievableMultiError, or nil if none found.
func (m *IdUEcontextNotRetrievable) ValidateAll() error {
	return m.validate(true)
}

func (m *IdUEcontextNotRetrievable) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 222 {
		err := IdUEcontextNotRetrievableValidationError{
			field:  "Value",
			reason: "value must equal 222",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdUEcontextNotRetrievableMultiError(errors)
	}

	return nil
}

// IdUEcontextNotRetrievableMultiError is an error wrapping multiple validation
// errors returned by IdUEcontextNotRetrievable.ValidateAll() if the
// designated constraints aren't met.
type IdUEcontextNotRetrievableMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdUEcontextNotRetrievableMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdUEcontextNotRetrievableMultiError) AllErrors() []error { return m }

// IdUEcontextNotRetrievableValidationError is the validation error returned by
// IdUEcontextNotRetrievable.Validate if the designated constraints aren't met.
type IdUEcontextNotRetrievableValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdUEcontextNotRetrievableValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdUEcontextNotRetrievableValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdUEcontextNotRetrievableValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdUEcontextNotRetrievableValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdUEcontextNotRetrievableValidationError) ErrorName() string {
	return "IdUEcontextNotRetrievableValidationError"
}

// Error satisfies the builtin error interface
func (e IdUEcontextNotRetrievableValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdUEcontextNotRetrievable.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdUEcontextNotRetrievableValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdUEcontextNotRetrievableValidationError{}

// Validate checks the field values on IdBPlmnIDInfoList with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *IdBPlmnIDInfoList) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdBPlmnIDInfoList with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdBPlmnIDInfoListMultiError, or nil if none found.
func (m *IdBPlmnIDInfoList) ValidateAll() error {
	return m.validate(true)
}

func (m *IdBPlmnIDInfoList) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 223 {
		err := IdBPlmnIDInfoListValidationError{
			field:  "Value",
			reason: "value must equal 223",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdBPlmnIDInfoListMultiError(errors)
	}

	return nil
}

// IdBPlmnIDInfoListMultiError is an error wrapping multiple validation errors
// returned by IdBPlmnIDInfoList.ValidateAll() if the designated constraints
// aren't met.
type IdBPlmnIDInfoListMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdBPlmnIDInfoListMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdBPlmnIDInfoListMultiError) AllErrors() []error { return m }

// IdBPlmnIDInfoListValidationError is the validation error returned by
// IdBPlmnIDInfoList.Validate if the designated constraints aren't met.
type IdBPlmnIDInfoListValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdBPlmnIDInfoListValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdBPlmnIDInfoListValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdBPlmnIDInfoListValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdBPlmnIDInfoListValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdBPlmnIDInfoListValidationError) ErrorName() string {
	return "IdBPlmnIDInfoListValidationError"
}

// Error satisfies the builtin error interface
func (e IdBPlmnIDInfoListValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdBPlmnIDInfoList.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdBPlmnIDInfoListValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdBPlmnIDInfoListValidationError{}

// Validate checks the field values on IdSelectedPlmnid with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *IdSelectedPlmnid) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdSelectedPlmnid with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdSelectedPlmnidMultiError, or nil if none found.
func (m *IdSelectedPlmnid) ValidateAll() error {
	return m.validate(true)
}

func (m *IdSelectedPlmnid) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 224 {
		err := IdSelectedPlmnidValidationError{
			field:  "Value",
			reason: "value must equal 224",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdSelectedPlmnidMultiError(errors)
	}

	return nil
}

// IdSelectedPlmnidMultiError is an error wrapping multiple validation errors
// returned by IdSelectedPlmnid.ValidateAll() if the designated constraints
// aren't met.
type IdSelectedPlmnidMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdSelectedPlmnidMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdSelectedPlmnidMultiError) AllErrors() []error { return m }

// IdSelectedPlmnidValidationError is the validation error returned by
// IdSelectedPlmnid.Validate if the designated constraints aren't met.
type IdSelectedPlmnidValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdSelectedPlmnidValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdSelectedPlmnidValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdSelectedPlmnidValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdSelectedPlmnidValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdSelectedPlmnidValidationError) ErrorName() string { return "IdSelectedPlmnidValidationError" }

// Error satisfies the builtin error interface
func (e IdSelectedPlmnidValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdSelectedPlmnid.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdSelectedPlmnidValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdSelectedPlmnidValidationError{}

// Validate checks the field values on IdUAcAssistanceInfo with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdUAcAssistanceInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdUAcAssistanceInfo with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdUAcAssistanceInfoMultiError, or nil if none found.
func (m *IdUAcAssistanceInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *IdUAcAssistanceInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 225 {
		err := IdUAcAssistanceInfoValidationError{
			field:  "Value",
			reason: "value must equal 225",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdUAcAssistanceInfoMultiError(errors)
	}

	return nil
}

// IdUAcAssistanceInfoMultiError is an error wrapping multiple validation
// errors returned by IdUAcAssistanceInfo.ValidateAll() if the designated
// constraints aren't met.
type IdUAcAssistanceInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdUAcAssistanceInfoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdUAcAssistanceInfoMultiError) AllErrors() []error { return m }

// IdUAcAssistanceInfoValidationError is the validation error returned by
// IdUAcAssistanceInfo.Validate if the designated constraints aren't met.
type IdUAcAssistanceInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdUAcAssistanceInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdUAcAssistanceInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdUAcAssistanceInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdUAcAssistanceInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdUAcAssistanceInfoValidationError) ErrorName() string {
	return "IdUAcAssistanceInfoValidationError"
}

// Error satisfies the builtin error interface
func (e IdUAcAssistanceInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdUAcAssistanceInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdUAcAssistanceInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdUAcAssistanceInfoValidationError{}

// Validate checks the field values on IdRAnueid with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *IdRAnueid) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdRAnueid with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in IdRAnueidMultiError, or nil
// if none found.
func (m *IdRAnueid) ValidateAll() error {
	return m.validate(true)
}

func (m *IdRAnueid) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 226 {
		err := IdRAnueidValidationError{
			field:  "Value",
			reason: "value must equal 226",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdRAnueidMultiError(errors)
	}

	return nil
}

// IdRAnueidMultiError is an error wrapping multiple validation errors returned
// by IdRAnueid.ValidateAll() if the designated constraints aren't met.
type IdRAnueidMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdRAnueidMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdRAnueidMultiError) AllErrors() []error { return m }

// IdRAnueidValidationError is the validation error returned by
// IdRAnueid.Validate if the designated constraints aren't met.
type IdRAnueidValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdRAnueidValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdRAnueidValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdRAnueidValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdRAnueidValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdRAnueidValidationError) ErrorName() string { return "IdRAnueidValidationError" }

// Error satisfies the builtin error interface
func (e IdRAnueidValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdRAnueid.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdRAnueidValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdRAnueidValidationError{}

// Validate checks the field values on IdGNbDUTNlAssociationToRemoveItem with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *IdGNbDUTNlAssociationToRemoveItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdGNbDUTNlAssociationToRemoveItem
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// IdGNbDUTNlAssociationToRemoveItemMultiError, or nil if none found.
func (m *IdGNbDUTNlAssociationToRemoveItem) ValidateAll() error {
	return m.validate(true)
}

func (m *IdGNbDUTNlAssociationToRemoveItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 227 {
		err := IdGNbDUTNlAssociationToRemoveItemValidationError{
			field:  "Value",
			reason: "value must equal 227",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdGNbDUTNlAssociationToRemoveItemMultiError(errors)
	}

	return nil
}

// IdGNbDUTNlAssociationToRemoveItemMultiError is an error wrapping multiple
// validation errors returned by
// IdGNbDUTNlAssociationToRemoveItem.ValidateAll() if the designated
// constraints aren't met.
type IdGNbDUTNlAssociationToRemoveItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdGNbDUTNlAssociationToRemoveItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdGNbDUTNlAssociationToRemoveItemMultiError) AllErrors() []error { return m }

// IdGNbDUTNlAssociationToRemoveItemValidationError is the validation error
// returned by IdGNbDUTNlAssociationToRemoveItem.Validate if the designated
// constraints aren't met.
type IdGNbDUTNlAssociationToRemoveItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdGNbDUTNlAssociationToRemoveItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdGNbDUTNlAssociationToRemoveItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdGNbDUTNlAssociationToRemoveItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdGNbDUTNlAssociationToRemoveItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdGNbDUTNlAssociationToRemoveItemValidationError) ErrorName() string {
	return "IdGNbDUTNlAssociationToRemoveItemValidationError"
}

// Error satisfies the builtin error interface
func (e IdGNbDUTNlAssociationToRemoveItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdGNbDUTNlAssociationToRemoveItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdGNbDUTNlAssociationToRemoveItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdGNbDUTNlAssociationToRemoveItemValidationError{}

// Validate checks the field values on IdGNbDUTNlAssociationToRemoveList with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *IdGNbDUTNlAssociationToRemoveList) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdGNbDUTNlAssociationToRemoveList
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// IdGNbDUTNlAssociationToRemoveListMultiError, or nil if none found.
func (m *IdGNbDUTNlAssociationToRemoveList) ValidateAll() error {
	return m.validate(true)
}

func (m *IdGNbDUTNlAssociationToRemoveList) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 228 {
		err := IdGNbDUTNlAssociationToRemoveListValidationError{
			field:  "Value",
			reason: "value must equal 228",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdGNbDUTNlAssociationToRemoveListMultiError(errors)
	}

	return nil
}

// IdGNbDUTNlAssociationToRemoveListMultiError is an error wrapping multiple
// validation errors returned by
// IdGNbDUTNlAssociationToRemoveList.ValidateAll() if the designated
// constraints aren't met.
type IdGNbDUTNlAssociationToRemoveListMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdGNbDUTNlAssociationToRemoveListMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdGNbDUTNlAssociationToRemoveListMultiError) AllErrors() []error { return m }

// IdGNbDUTNlAssociationToRemoveListValidationError is the validation error
// returned by IdGNbDUTNlAssociationToRemoveList.Validate if the designated
// constraints aren't met.
type IdGNbDUTNlAssociationToRemoveListValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdGNbDUTNlAssociationToRemoveListValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdGNbDUTNlAssociationToRemoveListValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdGNbDUTNlAssociationToRemoveListValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdGNbDUTNlAssociationToRemoveListValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdGNbDUTNlAssociationToRemoveListValidationError) ErrorName() string {
	return "IdGNbDUTNlAssociationToRemoveListValidationError"
}

// Error satisfies the builtin error interface
func (e IdGNbDUTNlAssociationToRemoveListValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdGNbDUTNlAssociationToRemoveList.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdGNbDUTNlAssociationToRemoveListValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdGNbDUTNlAssociationToRemoveListValidationError{}

// Validate checks the field values on
// IdTNlassociationTransportLayerAddressgNbdu with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *IdTNlassociationTransportLayerAddressgNbdu) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// IdTNlassociationTransportLayerAddressgNbdu with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// IdTNlassociationTransportLayerAddressgNbduMultiError, or nil if none found.
func (m *IdTNlassociationTransportLayerAddressgNbdu) ValidateAll() error {
	return m.validate(true)
}

func (m *IdTNlassociationTransportLayerAddressgNbdu) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 229 {
		err := IdTNlassociationTransportLayerAddressgNbduValidationError{
			field:  "Value",
			reason: "value must equal 229",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdTNlassociationTransportLayerAddressgNbduMultiError(errors)
	}

	return nil
}

// IdTNlassociationTransportLayerAddressgNbduMultiError is an error wrapping
// multiple validation errors returned by
// IdTNlassociationTransportLayerAddressgNbdu.ValidateAll() if the designated
// constraints aren't met.
type IdTNlassociationTransportLayerAddressgNbduMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdTNlassociationTransportLayerAddressgNbduMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdTNlassociationTransportLayerAddressgNbduMultiError) AllErrors() []error { return m }

// IdTNlassociationTransportLayerAddressgNbduValidationError is the validation
// error returned by IdTNlassociationTransportLayerAddressgNbdu.Validate if
// the designated constraints aren't met.
type IdTNlassociationTransportLayerAddressgNbduValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdTNlassociationTransportLayerAddressgNbduValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdTNlassociationTransportLayerAddressgNbduValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdTNlassociationTransportLayerAddressgNbduValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdTNlassociationTransportLayerAddressgNbduValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdTNlassociationTransportLayerAddressgNbduValidationError) ErrorName() string {
	return "IdTNlassociationTransportLayerAddressgNbduValidationError"
}

// Error satisfies the builtin error interface
func (e IdTNlassociationTransportLayerAddressgNbduValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdTNlassociationTransportLayerAddressgNbdu.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdTNlassociationTransportLayerAddressgNbduValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdTNlassociationTransportLayerAddressgNbduValidationError{}

// Validate checks the field values on IdportNumber with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *IdportNumber) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdportNumber with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in IdportNumberMultiError, or
// nil if none found.
func (m *IdportNumber) ValidateAll() error {
	return m.validate(true)
}

func (m *IdportNumber) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 230 {
		err := IdportNumberValidationError{
			field:  "Value",
			reason: "value must equal 230",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdportNumberMultiError(errors)
	}

	return nil
}

// IdportNumberMultiError is an error wrapping multiple validation errors
// returned by IdportNumber.ValidateAll() if the designated constraints aren't met.
type IdportNumberMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdportNumberMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdportNumberMultiError) AllErrors() []error { return m }

// IdportNumberValidationError is the validation error returned by
// IdportNumber.Validate if the designated constraints aren't met.
type IdportNumberValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdportNumberValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdportNumberValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdportNumberValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdportNumberValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdportNumberValidationError) ErrorName() string { return "IdportNumberValidationError" }

// Error satisfies the builtin error interface
func (e IdportNumberValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdportNumber.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdportNumberValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdportNumberValidationError{}

// Validate checks the field values on IdAdditionalSibmessageList with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdAdditionalSibmessageList) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdAdditionalSibmessageList with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdAdditionalSibmessageListMultiError, or nil if none found.
func (m *IdAdditionalSibmessageList) ValidateAll() error {
	return m.validate(true)
}

func (m *IdAdditionalSibmessageList) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 231 {
		err := IdAdditionalSibmessageListValidationError{
			field:  "Value",
			reason: "value must equal 231",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdAdditionalSibmessageListMultiError(errors)
	}

	return nil
}

// IdAdditionalSibmessageListMultiError is an error wrapping multiple
// validation errors returned by IdAdditionalSibmessageList.ValidateAll() if
// the designated constraints aren't met.
type IdAdditionalSibmessageListMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdAdditionalSibmessageListMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdAdditionalSibmessageListMultiError) AllErrors() []error { return m }

// IdAdditionalSibmessageListValidationError is the validation error returned
// by IdAdditionalSibmessageList.Validate if the designated constraints aren't met.
type IdAdditionalSibmessageListValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdAdditionalSibmessageListValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdAdditionalSibmessageListValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdAdditionalSibmessageListValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdAdditionalSibmessageListValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdAdditionalSibmessageListValidationError) ErrorName() string {
	return "IdAdditionalSibmessageListValidationError"
}

// Error satisfies the builtin error interface
func (e IdAdditionalSibmessageListValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdAdditionalSibmessageList.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdAdditionalSibmessageListValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdAdditionalSibmessageListValidationError{}

// Validate checks the field values on IdCellType with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *IdCellType) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdCellType with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in IdCellTypeMultiError, or
// nil if none found.
func (m *IdCellType) ValidateAll() error {
	return m.validate(true)
}

func (m *IdCellType) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 232 {
		err := IdCellTypeValidationError{
			field:  "Value",
			reason: "value must equal 232",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdCellTypeMultiError(errors)
	}

	return nil
}

// IdCellTypeMultiError is an error wrapping multiple validation errors
// returned by IdCellType.ValidateAll() if the designated constraints aren't met.
type IdCellTypeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdCellTypeMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdCellTypeMultiError) AllErrors() []error { return m }

// IdCellTypeValidationError is the validation error returned by
// IdCellType.Validate if the designated constraints aren't met.
type IdCellTypeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdCellTypeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdCellTypeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdCellTypeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdCellTypeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdCellTypeValidationError) ErrorName() string { return "IdCellTypeValidationError" }

// Error satisfies the builtin error interface
func (e IdCellTypeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdCellType.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdCellTypeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdCellTypeValidationError{}

// Validate checks the field values on IdIgnorePrachconfiguration with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdIgnorePrachconfiguration) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdIgnorePrachconfiguration with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdIgnorePrachconfigurationMultiError, or nil if none found.
func (m *IdIgnorePrachconfiguration) ValidateAll() error {
	return m.validate(true)
}

func (m *IdIgnorePrachconfiguration) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 233 {
		err := IdIgnorePrachconfigurationValidationError{
			field:  "Value",
			reason: "value must equal 233",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdIgnorePrachconfigurationMultiError(errors)
	}

	return nil
}

// IdIgnorePrachconfigurationMultiError is an error wrapping multiple
// validation errors returned by IdIgnorePrachconfiguration.ValidateAll() if
// the designated constraints aren't met.
type IdIgnorePrachconfigurationMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdIgnorePrachconfigurationMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdIgnorePrachconfigurationMultiError) AllErrors() []error { return m }

// IdIgnorePrachconfigurationValidationError is the validation error returned
// by IdIgnorePrachconfiguration.Validate if the designated constraints aren't met.
type IdIgnorePrachconfigurationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdIgnorePrachconfigurationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdIgnorePrachconfigurationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdIgnorePrachconfigurationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdIgnorePrachconfigurationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdIgnorePrachconfigurationValidationError) ErrorName() string {
	return "IdIgnorePrachconfigurationValidationError"
}

// Error satisfies the builtin error interface
func (e IdIgnorePrachconfigurationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdIgnorePrachconfiguration.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdIgnorePrachconfigurationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdIgnorePrachconfigurationValidationError{}

// Validate checks the field values on IdCGConfig with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *IdCGConfig) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdCGConfig with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in IdCGConfigMultiError, or
// nil if none found.
func (m *IdCGConfig) ValidateAll() error {
	return m.validate(true)
}

func (m *IdCGConfig) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 234 {
		err := IdCGConfigValidationError{
			field:  "Value",
			reason: "value must equal 234",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdCGConfigMultiError(errors)
	}

	return nil
}

// IdCGConfigMultiError is an error wrapping multiple validation errors
// returned by IdCGConfig.ValidateAll() if the designated constraints aren't met.
type IdCGConfigMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdCGConfigMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdCGConfigMultiError) AllErrors() []error { return m }

// IdCGConfigValidationError is the validation error returned by
// IdCGConfig.Validate if the designated constraints aren't met.
type IdCGConfigValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdCGConfigValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdCGConfigValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdCGConfigValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdCGConfigValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdCGConfigValidationError) ErrorName() string { return "IdCGConfigValidationError" }

// Error satisfies the builtin error interface
func (e IdCGConfigValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdCGConfig.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdCGConfigValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdCGConfigValidationError{}

// Validate checks the field values on IdPDcchBlindDetectionScg with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdPDcchBlindDetectionScg) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdPDcchBlindDetectionScg with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdPDcchBlindDetectionScgMultiError, or nil if none found.
func (m *IdPDcchBlindDetectionScg) ValidateAll() error {
	return m.validate(true)
}

func (m *IdPDcchBlindDetectionScg) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 235 {
		err := IdPDcchBlindDetectionScgValidationError{
			field:  "Value",
			reason: "value must equal 235",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdPDcchBlindDetectionScgMultiError(errors)
	}

	return nil
}

// IdPDcchBlindDetectionScgMultiError is an error wrapping multiple validation
// errors returned by IdPDcchBlindDetectionScg.ValidateAll() if the designated
// constraints aren't met.
type IdPDcchBlindDetectionScgMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdPDcchBlindDetectionScgMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdPDcchBlindDetectionScgMultiError) AllErrors() []error { return m }

// IdPDcchBlindDetectionScgValidationError is the validation error returned by
// IdPDcchBlindDetectionScg.Validate if the designated constraints aren't met.
type IdPDcchBlindDetectionScgValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdPDcchBlindDetectionScgValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdPDcchBlindDetectionScgValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdPDcchBlindDetectionScgValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdPDcchBlindDetectionScgValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdPDcchBlindDetectionScgValidationError) ErrorName() string {
	return "IdPDcchBlindDetectionScgValidationError"
}

// Error satisfies the builtin error interface
func (e IdPDcchBlindDetectionScgValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdPDcchBlindDetectionScg.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdPDcchBlindDetectionScgValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdPDcchBlindDetectionScgValidationError{}

// Validate checks the field values on IdRequestedPDcchBlindDetectionScg with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *IdRequestedPDcchBlindDetectionScg) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdRequestedPDcchBlindDetectionScg
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// IdRequestedPDcchBlindDetectionScgMultiError, or nil if none found.
func (m *IdRequestedPDcchBlindDetectionScg) ValidateAll() error {
	return m.validate(true)
}

func (m *IdRequestedPDcchBlindDetectionScg) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 236 {
		err := IdRequestedPDcchBlindDetectionScgValidationError{
			field:  "Value",
			reason: "value must equal 236",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdRequestedPDcchBlindDetectionScgMultiError(errors)
	}

	return nil
}

// IdRequestedPDcchBlindDetectionScgMultiError is an error wrapping multiple
// validation errors returned by
// IdRequestedPDcchBlindDetectionScg.ValidateAll() if the designated
// constraints aren't met.
type IdRequestedPDcchBlindDetectionScgMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdRequestedPDcchBlindDetectionScgMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdRequestedPDcchBlindDetectionScgMultiError) AllErrors() []error { return m }

// IdRequestedPDcchBlindDetectionScgValidationError is the validation error
// returned by IdRequestedPDcchBlindDetectionScg.Validate if the designated
// constraints aren't met.
type IdRequestedPDcchBlindDetectionScgValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdRequestedPDcchBlindDetectionScgValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdRequestedPDcchBlindDetectionScgValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdRequestedPDcchBlindDetectionScgValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdRequestedPDcchBlindDetectionScgValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdRequestedPDcchBlindDetectionScgValidationError) ErrorName() string {
	return "IdRequestedPDcchBlindDetectionScgValidationError"
}

// Error satisfies the builtin error interface
func (e IdRequestedPDcchBlindDetectionScgValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdRequestedPDcchBlindDetectionScg.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdRequestedPDcchBlindDetectionScgValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdRequestedPDcchBlindDetectionScgValidationError{}

// Validate checks the field values on IdPhInfoMcg with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *IdPhInfoMcg) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdPhInfoMcg with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in IdPhInfoMcgMultiError, or
// nil if none found.
func (m *IdPhInfoMcg) ValidateAll() error {
	return m.validate(true)
}

func (m *IdPhInfoMcg) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 237 {
		err := IdPhInfoMcgValidationError{
			field:  "Value",
			reason: "value must equal 237",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdPhInfoMcgMultiError(errors)
	}

	return nil
}

// IdPhInfoMcgMultiError is an error wrapping multiple validation errors
// returned by IdPhInfoMcg.ValidateAll() if the designated constraints aren't met.
type IdPhInfoMcgMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdPhInfoMcgMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdPhInfoMcgMultiError) AllErrors() []error { return m }

// IdPhInfoMcgValidationError is the validation error returned by
// IdPhInfoMcg.Validate if the designated constraints aren't met.
type IdPhInfoMcgValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdPhInfoMcgValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdPhInfoMcgValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdPhInfoMcgValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdPhInfoMcgValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdPhInfoMcgValidationError) ErrorName() string { return "IdPhInfoMcgValidationError" }

// Error satisfies the builtin error interface
func (e IdPhInfoMcgValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdPhInfoMcg.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdPhInfoMcgValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdPhInfoMcgValidationError{}

// Validate checks the field values on IdMeasGapSharingConfig with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdMeasGapSharingConfig) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdMeasGapSharingConfig with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdMeasGapSharingConfigMultiError, or nil if none found.
func (m *IdMeasGapSharingConfig) ValidateAll() error {
	return m.validate(true)
}

func (m *IdMeasGapSharingConfig) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 238 {
		err := IdMeasGapSharingConfigValidationError{
			field:  "Value",
			reason: "value must equal 238",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdMeasGapSharingConfigMultiError(errors)
	}

	return nil
}

// IdMeasGapSharingConfigMultiError is an error wrapping multiple validation
// errors returned by IdMeasGapSharingConfig.ValidateAll() if the designated
// constraints aren't met.
type IdMeasGapSharingConfigMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdMeasGapSharingConfigMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdMeasGapSharingConfigMultiError) AllErrors() []error { return m }

// IdMeasGapSharingConfigValidationError is the validation error returned by
// IdMeasGapSharingConfig.Validate if the designated constraints aren't met.
type IdMeasGapSharingConfigValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdMeasGapSharingConfigValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdMeasGapSharingConfigValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdMeasGapSharingConfigValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdMeasGapSharingConfigValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdMeasGapSharingConfigValidationError) ErrorName() string {
	return "IdMeasGapSharingConfigValidationError"
}

// Error satisfies the builtin error interface
func (e IdMeasGapSharingConfigValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdMeasGapSharingConfig.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdMeasGapSharingConfigValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdMeasGapSharingConfigValidationError{}

// Validate checks the field values on IdsystemInformationAreaId with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdsystemInformationAreaId) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdsystemInformationAreaId with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdsystemInformationAreaIdMultiError, or nil if none found.
func (m *IdsystemInformationAreaId) ValidateAll() error {
	return m.validate(true)
}

func (m *IdsystemInformationAreaId) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 239 {
		err := IdsystemInformationAreaIdValidationError{
			field:  "Value",
			reason: "value must equal 239",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdsystemInformationAreaIdMultiError(errors)
	}

	return nil
}

// IdsystemInformationAreaIdMultiError is an error wrapping multiple validation
// errors returned by IdsystemInformationAreaId.ValidateAll() if the
// designated constraints aren't met.
type IdsystemInformationAreaIdMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdsystemInformationAreaIdMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdsystemInformationAreaIdMultiError) AllErrors() []error { return m }

// IdsystemInformationAreaIdValidationError is the validation error returned by
// IdsystemInformationAreaId.Validate if the designated constraints aren't met.
type IdsystemInformationAreaIdValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdsystemInformationAreaIdValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdsystemInformationAreaIdValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdsystemInformationAreaIdValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdsystemInformationAreaIdValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdsystemInformationAreaIdValidationError) ErrorName() string {
	return "IdsystemInformationAreaIdValidationError"
}

// Error satisfies the builtin error interface
func (e IdsystemInformationAreaIdValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdsystemInformationAreaId.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdsystemInformationAreaIdValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdsystemInformationAreaIdValidationError{}

// Validate checks the field values on IdareaScope with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *IdareaScope) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdareaScope with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in IdareaScopeMultiError, or
// nil if none found.
func (m *IdareaScope) ValidateAll() error {
	return m.validate(true)
}

func (m *IdareaScope) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 240 {
		err := IdareaScopeValidationError{
			field:  "Value",
			reason: "value must equal 240",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdareaScopeMultiError(errors)
	}

	return nil
}

// IdareaScopeMultiError is an error wrapping multiple validation errors
// returned by IdareaScope.ValidateAll() if the designated constraints aren't met.
type IdareaScopeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdareaScopeMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdareaScopeMultiError) AllErrors() []error { return m }

// IdareaScopeValidationError is the validation error returned by
// IdareaScope.Validate if the designated constraints aren't met.
type IdareaScopeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdareaScopeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdareaScopeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdareaScopeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdareaScopeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdareaScopeValidationError) ErrorName() string { return "IdareaScopeValidationError" }

// Error satisfies the builtin error interface
func (e IdareaScopeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdareaScope.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdareaScopeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdareaScopeValidationError{}

// Validate checks the field values on IdRRccontainerRRcsetupComplete with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdRRccontainerRRcsetupComplete) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdRRccontainerRRcsetupComplete with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// IdRRccontainerRRcsetupCompleteMultiError, or nil if none found.
func (m *IdRRccontainerRRcsetupComplete) ValidateAll() error {
	return m.validate(true)
}

func (m *IdRRccontainerRRcsetupComplete) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 241 {
		err := IdRRccontainerRRcsetupCompleteValidationError{
			field:  "Value",
			reason: "value must equal 241",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdRRccontainerRRcsetupCompleteMultiError(errors)
	}

	return nil
}

// IdRRccontainerRRcsetupCompleteMultiError is an error wrapping multiple
// validation errors returned by IdRRccontainerRRcsetupComplete.ValidateAll()
// if the designated constraints aren't met.
type IdRRccontainerRRcsetupCompleteMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdRRccontainerRRcsetupCompleteMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdRRccontainerRRcsetupCompleteMultiError) AllErrors() []error { return m }

// IdRRccontainerRRcsetupCompleteValidationError is the validation error
// returned by IdRRccontainerRRcsetupComplete.Validate if the designated
// constraints aren't met.
type IdRRccontainerRRcsetupCompleteValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdRRccontainerRRcsetupCompleteValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdRRccontainerRRcsetupCompleteValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdRRccontainerRRcsetupCompleteValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdRRccontainerRRcsetupCompleteValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdRRccontainerRRcsetupCompleteValidationError) ErrorName() string {
	return "IdRRccontainerRRcsetupCompleteValidationError"
}

// Error satisfies the builtin error interface
func (e IdRRccontainerRRcsetupCompleteValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdRRccontainerRRcsetupComplete.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdRRccontainerRRcsetupCompleteValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdRRccontainerRRcsetupCompleteValidationError{}

// Validate checks the field values on IdTraceActivation with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *IdTraceActivation) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdTraceActivation with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdTraceActivationMultiError, or nil if none found.
func (m *IdTraceActivation) ValidateAll() error {
	return m.validate(true)
}

func (m *IdTraceActivation) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 242 {
		err := IdTraceActivationValidationError{
			field:  "Value",
			reason: "value must equal 242",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdTraceActivationMultiError(errors)
	}

	return nil
}

// IdTraceActivationMultiError is an error wrapping multiple validation errors
// returned by IdTraceActivation.ValidateAll() if the designated constraints
// aren't met.
type IdTraceActivationMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdTraceActivationMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdTraceActivationMultiError) AllErrors() []error { return m }

// IdTraceActivationValidationError is the validation error returned by
// IdTraceActivation.Validate if the designated constraints aren't met.
type IdTraceActivationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdTraceActivationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdTraceActivationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdTraceActivationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdTraceActivationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdTraceActivationValidationError) ErrorName() string {
	return "IdTraceActivationValidationError"
}

// Error satisfies the builtin error interface
func (e IdTraceActivationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdTraceActivation.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdTraceActivationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdTraceActivationValidationError{}

// Validate checks the field values on IdTraceId with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *IdTraceId) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdTraceId with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in IdTraceIdMultiError, or nil
// if none found.
func (m *IdTraceId) ValidateAll() error {
	return m.validate(true)
}

func (m *IdTraceId) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 243 {
		err := IdTraceIdValidationError{
			field:  "Value",
			reason: "value must equal 243",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdTraceIdMultiError(errors)
	}

	return nil
}

// IdTraceIdMultiError is an error wrapping multiple validation errors returned
// by IdTraceId.ValidateAll() if the designated constraints aren't met.
type IdTraceIdMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdTraceIdMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdTraceIdMultiError) AllErrors() []error { return m }

// IdTraceIdValidationError is the validation error returned by
// IdTraceId.Validate if the designated constraints aren't met.
type IdTraceIdValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdTraceIdValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdTraceIdValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdTraceIdValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdTraceIdValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdTraceIdValidationError) ErrorName() string { return "IdTraceIdValidationError" }

// Error satisfies the builtin error interface
func (e IdTraceIdValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdTraceId.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdTraceIdValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdTraceIdValidationError{}

// Validate checks the field values on IdNeighbourCellInformationList with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdNeighbourCellInformationList) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdNeighbourCellInformationList with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// IdNeighbourCellInformationListMultiError, or nil if none found.
func (m *IdNeighbourCellInformationList) ValidateAll() error {
	return m.validate(true)
}

func (m *IdNeighbourCellInformationList) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 244 {
		err := IdNeighbourCellInformationListValidationError{
			field:  "Value",
			reason: "value must equal 244",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdNeighbourCellInformationListMultiError(errors)
	}

	return nil
}

// IdNeighbourCellInformationListMultiError is an error wrapping multiple
// validation errors returned by IdNeighbourCellInformationList.ValidateAll()
// if the designated constraints aren't met.
type IdNeighbourCellInformationListMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdNeighbourCellInformationListMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdNeighbourCellInformationListMultiError) AllErrors() []error { return m }

// IdNeighbourCellInformationListValidationError is the validation error
// returned by IdNeighbourCellInformationList.Validate if the designated
// constraints aren't met.
type IdNeighbourCellInformationListValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdNeighbourCellInformationListValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdNeighbourCellInformationListValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdNeighbourCellInformationListValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdNeighbourCellInformationListValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdNeighbourCellInformationListValidationError) ErrorName() string {
	return "IdNeighbourCellInformationListValidationError"
}

// Error satisfies the builtin error interface
func (e IdNeighbourCellInformationListValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdNeighbourCellInformationList.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdNeighbourCellInformationListValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdNeighbourCellInformationListValidationError{}

// Validate checks the field values on IdSymbolAllocInSlot with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdSymbolAllocInSlot) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdSymbolAllocInSlot with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdSymbolAllocInSlotMultiError, or nil if none found.
func (m *IdSymbolAllocInSlot) ValidateAll() error {
	return m.validate(true)
}

func (m *IdSymbolAllocInSlot) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 246 {
		err := IdSymbolAllocInSlotValidationError{
			field:  "Value",
			reason: "value must equal 246",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdSymbolAllocInSlotMultiError(errors)
	}

	return nil
}

// IdSymbolAllocInSlotMultiError is an error wrapping multiple validation
// errors returned by IdSymbolAllocInSlot.ValidateAll() if the designated
// constraints aren't met.
type IdSymbolAllocInSlotMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdSymbolAllocInSlotMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdSymbolAllocInSlotMultiError) AllErrors() []error { return m }

// IdSymbolAllocInSlotValidationError is the validation error returned by
// IdSymbolAllocInSlot.Validate if the designated constraints aren't met.
type IdSymbolAllocInSlotValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdSymbolAllocInSlotValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdSymbolAllocInSlotValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdSymbolAllocInSlotValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdSymbolAllocInSlotValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdSymbolAllocInSlotValidationError) ErrorName() string {
	return "IdSymbolAllocInSlotValidationError"
}

// Error satisfies the builtin error interface
func (e IdSymbolAllocInSlotValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdSymbolAllocInSlot.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdSymbolAllocInSlotValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdSymbolAllocInSlotValidationError{}

// Validate checks the field values on IdNumDlulsymbols with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *IdNumDlulsymbols) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdNumDlulsymbols with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdNumDlulsymbolsMultiError, or nil if none found.
func (m *IdNumDlulsymbols) ValidateAll() error {
	return m.validate(true)
}

func (m *IdNumDlulsymbols) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 247 {
		err := IdNumDlulsymbolsValidationError{
			field:  "Value",
			reason: "value must equal 247",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdNumDlulsymbolsMultiError(errors)
	}

	return nil
}

// IdNumDlulsymbolsMultiError is an error wrapping multiple validation errors
// returned by IdNumDlulsymbols.ValidateAll() if the designated constraints
// aren't met.
type IdNumDlulsymbolsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdNumDlulsymbolsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdNumDlulsymbolsMultiError) AllErrors() []error { return m }

// IdNumDlulsymbolsValidationError is the validation error returned by
// IdNumDlulsymbols.Validate if the designated constraints aren't met.
type IdNumDlulsymbolsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdNumDlulsymbolsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdNumDlulsymbolsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdNumDlulsymbolsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdNumDlulsymbolsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdNumDlulsymbolsValidationError) ErrorName() string { return "IdNumDlulsymbolsValidationError" }

// Error satisfies the builtin error interface
func (e IdNumDlulsymbolsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdNumDlulsymbols.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdNumDlulsymbolsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdNumDlulsymbolsValidationError{}

// Validate checks the field values on IdAdditionalRrmpriorityIndex with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdAdditionalRrmpriorityIndex) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdAdditionalRrmpriorityIndex with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdAdditionalRrmpriorityIndexMultiError, or nil if none found.
func (m *IdAdditionalRrmpriorityIndex) ValidateAll() error {
	return m.validate(true)
}

func (m *IdAdditionalRrmpriorityIndex) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 248 {
		err := IdAdditionalRrmpriorityIndexValidationError{
			field:  "Value",
			reason: "value must equal 248",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdAdditionalRrmpriorityIndexMultiError(errors)
	}

	return nil
}

// IdAdditionalRrmpriorityIndexMultiError is an error wrapping multiple
// validation errors returned by IdAdditionalRrmpriorityIndex.ValidateAll() if
// the designated constraints aren't met.
type IdAdditionalRrmpriorityIndexMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdAdditionalRrmpriorityIndexMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdAdditionalRrmpriorityIndexMultiError) AllErrors() []error { return m }

// IdAdditionalRrmpriorityIndexValidationError is the validation error returned
// by IdAdditionalRrmpriorityIndex.Validate if the designated constraints
// aren't met.
type IdAdditionalRrmpriorityIndexValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdAdditionalRrmpriorityIndexValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdAdditionalRrmpriorityIndexValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdAdditionalRrmpriorityIndexValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdAdditionalRrmpriorityIndexValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdAdditionalRrmpriorityIndexValidationError) ErrorName() string {
	return "IdAdditionalRrmpriorityIndexValidationError"
}

// Error satisfies the builtin error interface
func (e IdAdditionalRrmpriorityIndexValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdAdditionalRrmpriorityIndex.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdAdditionalRrmpriorityIndexValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdAdditionalRrmpriorityIndexValidationError{}

// Validate checks the field values on IdDUcuradioInformationType with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdDUcuradioInformationType) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdDUcuradioInformationType with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdDUcuradioInformationTypeMultiError, or nil if none found.
func (m *IdDUcuradioInformationType) ValidateAll() error {
	return m.validate(true)
}

func (m *IdDUcuradioInformationType) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 249 {
		err := IdDUcuradioInformationTypeValidationError{
			field:  "Value",
			reason: "value must equal 249",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdDUcuradioInformationTypeMultiError(errors)
	}

	return nil
}

// IdDUcuradioInformationTypeMultiError is an error wrapping multiple
// validation errors returned by IdDUcuradioInformationType.ValidateAll() if
// the designated constraints aren't met.
type IdDUcuradioInformationTypeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdDUcuradioInformationTypeMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdDUcuradioInformationTypeMultiError) AllErrors() []error { return m }

// IdDUcuradioInformationTypeValidationError is the validation error returned
// by IdDUcuradioInformationType.Validate if the designated constraints aren't met.
type IdDUcuradioInformationTypeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdDUcuradioInformationTypeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdDUcuradioInformationTypeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdDUcuradioInformationTypeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdDUcuradioInformationTypeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdDUcuradioInformationTypeValidationError) ErrorName() string {
	return "IdDUcuradioInformationTypeValidationError"
}

// Error satisfies the builtin error interface
func (e IdDUcuradioInformationTypeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdDUcuradioInformationType.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdDUcuradioInformationTypeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdDUcuradioInformationTypeValidationError{}

// Validate checks the field values on IdCUduradioInformationType with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdCUduradioInformationType) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdCUduradioInformationType with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdCUduradioInformationTypeMultiError, or nil if none found.
func (m *IdCUduradioInformationType) ValidateAll() error {
	return m.validate(true)
}

func (m *IdCUduradioInformationType) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 250 {
		err := IdCUduradioInformationTypeValidationError{
			field:  "Value",
			reason: "value must equal 250",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdCUduradioInformationTypeMultiError(errors)
	}

	return nil
}

// IdCUduradioInformationTypeMultiError is an error wrapping multiple
// validation errors returned by IdCUduradioInformationType.ValidateAll() if
// the designated constraints aren't met.
type IdCUduradioInformationTypeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdCUduradioInformationTypeMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdCUduradioInformationTypeMultiError) AllErrors() []error { return m }

// IdCUduradioInformationTypeValidationError is the validation error returned
// by IdCUduradioInformationType.Validate if the designated constraints aren't met.
type IdCUduradioInformationTypeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdCUduradioInformationTypeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdCUduradioInformationTypeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdCUduradioInformationTypeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdCUduradioInformationTypeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdCUduradioInformationTypeValidationError) ErrorName() string {
	return "IdCUduradioInformationTypeValidationError"
}

// Error satisfies the builtin error interface
func (e IdCUduradioInformationTypeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdCUduradioInformationType.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdCUduradioInformationTypeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdCUduradioInformationTypeValidationError{}

// Validate checks the field values on IdAggressorgNbsetId with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdAggressorgNbsetId) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdAggressorgNbsetId with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdAggressorgNbsetIdMultiError, or nil if none found.
func (m *IdAggressorgNbsetId) ValidateAll() error {
	return m.validate(true)
}

func (m *IdAggressorgNbsetId) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 251 {
		err := IdAggressorgNbsetIdValidationError{
			field:  "Value",
			reason: "value must equal 251",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdAggressorgNbsetIdMultiError(errors)
	}

	return nil
}

// IdAggressorgNbsetIdMultiError is an error wrapping multiple validation
// errors returned by IdAggressorgNbsetId.ValidateAll() if the designated
// constraints aren't met.
type IdAggressorgNbsetIdMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdAggressorgNbsetIdMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdAggressorgNbsetIdMultiError) AllErrors() []error { return m }

// IdAggressorgNbsetIdValidationError is the validation error returned by
// IdAggressorgNbsetId.Validate if the designated constraints aren't met.
type IdAggressorgNbsetIdValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdAggressorgNbsetIdValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdAggressorgNbsetIdValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdAggressorgNbsetIdValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdAggressorgNbsetIdValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdAggressorgNbsetIdValidationError) ErrorName() string {
	return "IdAggressorgNbsetIdValidationError"
}

// Error satisfies the builtin error interface
func (e IdAggressorgNbsetIdValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdAggressorgNbsetId.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdAggressorgNbsetIdValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdAggressorgNbsetIdValidationError{}

// Validate checks the field values on IdVictimgNbsetId with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *IdVictimgNbsetId) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdVictimgNbsetId with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdVictimgNbsetIdMultiError, or nil if none found.
func (m *IdVictimgNbsetId) ValidateAll() error {
	return m.validate(true)
}

func (m *IdVictimgNbsetId) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 252 {
		err := IdVictimgNbsetIdValidationError{
			field:  "Value",
			reason: "value must equal 252",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdVictimgNbsetIdMultiError(errors)
	}

	return nil
}

// IdVictimgNbsetIdMultiError is an error wrapping multiple validation errors
// returned by IdVictimgNbsetId.ValidateAll() if the designated constraints
// aren't met.
type IdVictimgNbsetIdMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdVictimgNbsetIdMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdVictimgNbsetIdMultiError) AllErrors() []error { return m }

// IdVictimgNbsetIdValidationError is the validation error returned by
// IdVictimgNbsetId.Validate if the designated constraints aren't met.
type IdVictimgNbsetIdValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdVictimgNbsetIdValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdVictimgNbsetIdValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdVictimgNbsetIdValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdVictimgNbsetIdValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdVictimgNbsetIdValidationError) ErrorName() string { return "IdVictimgNbsetIdValidationError" }

// Error satisfies the builtin error interface
func (e IdVictimgNbsetIdValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdVictimgNbsetId.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdVictimgNbsetIdValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdVictimgNbsetIdValidationError{}

// Validate checks the field values on IdLowerLayerPresenceStatusChange with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *IdLowerLayerPresenceStatusChange) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdLowerLayerPresenceStatusChange with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// IdLowerLayerPresenceStatusChangeMultiError, or nil if none found.
func (m *IdLowerLayerPresenceStatusChange) ValidateAll() error {
	return m.validate(true)
}

func (m *IdLowerLayerPresenceStatusChange) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 253 {
		err := IdLowerLayerPresenceStatusChangeValidationError{
			field:  "Value",
			reason: "value must equal 253",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdLowerLayerPresenceStatusChangeMultiError(errors)
	}

	return nil
}

// IdLowerLayerPresenceStatusChangeMultiError is an error wrapping multiple
// validation errors returned by
// IdLowerLayerPresenceStatusChange.ValidateAll() if the designated
// constraints aren't met.
type IdLowerLayerPresenceStatusChangeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdLowerLayerPresenceStatusChangeMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdLowerLayerPresenceStatusChangeMultiError) AllErrors() []error { return m }

// IdLowerLayerPresenceStatusChangeValidationError is the validation error
// returned by IdLowerLayerPresenceStatusChange.Validate if the designated
// constraints aren't met.
type IdLowerLayerPresenceStatusChangeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdLowerLayerPresenceStatusChangeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdLowerLayerPresenceStatusChangeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdLowerLayerPresenceStatusChangeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdLowerLayerPresenceStatusChangeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdLowerLayerPresenceStatusChangeValidationError) ErrorName() string {
	return "IdLowerLayerPresenceStatusChangeValidationError"
}

// Error satisfies the builtin error interface
func (e IdLowerLayerPresenceStatusChangeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdLowerLayerPresenceStatusChange.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdLowerLayerPresenceStatusChangeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdLowerLayerPresenceStatusChangeValidationError{}

// Validate checks the field values on IdTransportLayerAddressInfo with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdTransportLayerAddressInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdTransportLayerAddressInfo with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdTransportLayerAddressInfoMultiError, or nil if none found.
func (m *IdTransportLayerAddressInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *IdTransportLayerAddressInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 254 {
		err := IdTransportLayerAddressInfoValidationError{
			field:  "Value",
			reason: "value must equal 254",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdTransportLayerAddressInfoMultiError(errors)
	}

	return nil
}

// IdTransportLayerAddressInfoMultiError is an error wrapping multiple
// validation errors returned by IdTransportLayerAddressInfo.ValidateAll() if
// the designated constraints aren't met.
type IdTransportLayerAddressInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdTransportLayerAddressInfoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdTransportLayerAddressInfoMultiError) AllErrors() []error { return m }

// IdTransportLayerAddressInfoValidationError is the validation error returned
// by IdTransportLayerAddressInfo.Validate if the designated constraints
// aren't met.
type IdTransportLayerAddressInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdTransportLayerAddressInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdTransportLayerAddressInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdTransportLayerAddressInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdTransportLayerAddressInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdTransportLayerAddressInfoValidationError) ErrorName() string {
	return "IdTransportLayerAddressInfoValidationError"
}

// Error satisfies the builtin error interface
func (e IdTransportLayerAddressInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdTransportLayerAddressInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdTransportLayerAddressInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdTransportLayerAddressInfoValidationError{}

// Validate checks the field values on IdNeighbourCellInformationItem with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdNeighbourCellInformationItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdNeighbourCellInformationItem with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// IdNeighbourCellInformationItemMultiError, or nil if none found.
func (m *IdNeighbourCellInformationItem) ValidateAll() error {
	return m.validate(true)
}

func (m *IdNeighbourCellInformationItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 255 {
		err := IdNeighbourCellInformationItemValidationError{
			field:  "Value",
			reason: "value must equal 255",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdNeighbourCellInformationItemMultiError(errors)
	}

	return nil
}

// IdNeighbourCellInformationItemMultiError is an error wrapping multiple
// validation errors returned by IdNeighbourCellInformationItem.ValidateAll()
// if the designated constraints aren't met.
type IdNeighbourCellInformationItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdNeighbourCellInformationItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdNeighbourCellInformationItemMultiError) AllErrors() []error { return m }

// IdNeighbourCellInformationItemValidationError is the validation error
// returned by IdNeighbourCellInformationItem.Validate if the designated
// constraints aren't met.
type IdNeighbourCellInformationItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdNeighbourCellInformationItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdNeighbourCellInformationItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdNeighbourCellInformationItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdNeighbourCellInformationItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdNeighbourCellInformationItemValidationError) ErrorName() string {
	return "IdNeighbourCellInformationItemValidationError"
}

// Error satisfies the builtin error interface
func (e IdNeighbourCellInformationItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdNeighbourCellInformationItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdNeighbourCellInformationItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdNeighbourCellInformationItemValidationError{}

// Validate checks the field values on IdIntendedTddDLULconfig with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdIntendedTddDLULconfig) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdIntendedTddDLULconfig with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdIntendedTddDLULconfigMultiError, or nil if none found.
func (m *IdIntendedTddDLULconfig) ValidateAll() error {
	return m.validate(true)
}

func (m *IdIntendedTddDLULconfig) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 256 {
		err := IdIntendedTddDLULconfigValidationError{
			field:  "Value",
			reason: "value must equal 256",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdIntendedTddDLULconfigMultiError(errors)
	}

	return nil
}

// IdIntendedTddDLULconfigMultiError is an error wrapping multiple validation
// errors returned by IdIntendedTddDLULconfig.ValidateAll() if the designated
// constraints aren't met.
type IdIntendedTddDLULconfigMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdIntendedTddDLULconfigMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdIntendedTddDLULconfigMultiError) AllErrors() []error { return m }

// IdIntendedTddDLULconfigValidationError is the validation error returned by
// IdIntendedTddDLULconfig.Validate if the designated constraints aren't met.
type IdIntendedTddDLULconfigValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdIntendedTddDLULconfigValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdIntendedTddDLULconfigValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdIntendedTddDLULconfigValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdIntendedTddDLULconfigValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdIntendedTddDLULconfigValidationError) ErrorName() string {
	return "IdIntendedTddDLULconfigValidationError"
}

// Error satisfies the builtin error interface
func (e IdIntendedTddDLULconfigValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdIntendedTddDLULconfig.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdIntendedTddDLULconfigValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdIntendedTddDLULconfigValidationError{}

// Validate checks the field values on IdQosMonitoringRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdQosMonitoringRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdQosMonitoringRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdQosMonitoringRequestMultiError, or nil if none found.
func (m *IdQosMonitoringRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *IdQosMonitoringRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 257 {
		err := IdQosMonitoringRequestValidationError{
			field:  "Value",
			reason: "value must equal 257",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdQosMonitoringRequestMultiError(errors)
	}

	return nil
}

// IdQosMonitoringRequestMultiError is an error wrapping multiple validation
// errors returned by IdQosMonitoringRequest.ValidateAll() if the designated
// constraints aren't met.
type IdQosMonitoringRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdQosMonitoringRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdQosMonitoringRequestMultiError) AllErrors() []error { return m }

// IdQosMonitoringRequestValidationError is the validation error returned by
// IdQosMonitoringRequest.Validate if the designated constraints aren't met.
type IdQosMonitoringRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdQosMonitoringRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdQosMonitoringRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdQosMonitoringRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdQosMonitoringRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdQosMonitoringRequestValidationError) ErrorName() string {
	return "IdQosMonitoringRequestValidationError"
}

// Error satisfies the builtin error interface
func (e IdQosMonitoringRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdQosMonitoringRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdQosMonitoringRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdQosMonitoringRequestValidationError{}

// Validate checks the field values on IdBHchannelsToBeSetupList with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdBHchannelsToBeSetupList) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdBHchannelsToBeSetupList with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdBHchannelsToBeSetupListMultiError, or nil if none found.
func (m *IdBHchannelsToBeSetupList) ValidateAll() error {
	return m.validate(true)
}

func (m *IdBHchannelsToBeSetupList) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 258 {
		err := IdBHchannelsToBeSetupListValidationError{
			field:  "Value",
			reason: "value must equal 258",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdBHchannelsToBeSetupListMultiError(errors)
	}

	return nil
}

// IdBHchannelsToBeSetupListMultiError is an error wrapping multiple validation
// errors returned by IdBHchannelsToBeSetupList.ValidateAll() if the
// designated constraints aren't met.
type IdBHchannelsToBeSetupListMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdBHchannelsToBeSetupListMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdBHchannelsToBeSetupListMultiError) AllErrors() []error { return m }

// IdBHchannelsToBeSetupListValidationError is the validation error returned by
// IdBHchannelsToBeSetupList.Validate if the designated constraints aren't met.
type IdBHchannelsToBeSetupListValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdBHchannelsToBeSetupListValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdBHchannelsToBeSetupListValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdBHchannelsToBeSetupListValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdBHchannelsToBeSetupListValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdBHchannelsToBeSetupListValidationError) ErrorName() string {
	return "IdBHchannelsToBeSetupListValidationError"
}

// Error satisfies the builtin error interface
func (e IdBHchannelsToBeSetupListValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdBHchannelsToBeSetupList.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdBHchannelsToBeSetupListValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdBHchannelsToBeSetupListValidationError{}

// Validate checks the field values on IdBHchannelsToBeSetupItem with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdBHchannelsToBeSetupItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdBHchannelsToBeSetupItem with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdBHchannelsToBeSetupItemMultiError, or nil if none found.
func (m *IdBHchannelsToBeSetupItem) ValidateAll() error {
	return m.validate(true)
}

func (m *IdBHchannelsToBeSetupItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 259 {
		err := IdBHchannelsToBeSetupItemValidationError{
			field:  "Value",
			reason: "value must equal 259",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdBHchannelsToBeSetupItemMultiError(errors)
	}

	return nil
}

// IdBHchannelsToBeSetupItemMultiError is an error wrapping multiple validation
// errors returned by IdBHchannelsToBeSetupItem.ValidateAll() if the
// designated constraints aren't met.
type IdBHchannelsToBeSetupItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdBHchannelsToBeSetupItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdBHchannelsToBeSetupItemMultiError) AllErrors() []error { return m }

// IdBHchannelsToBeSetupItemValidationError is the validation error returned by
// IdBHchannelsToBeSetupItem.Validate if the designated constraints aren't met.
type IdBHchannelsToBeSetupItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdBHchannelsToBeSetupItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdBHchannelsToBeSetupItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdBHchannelsToBeSetupItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdBHchannelsToBeSetupItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdBHchannelsToBeSetupItemValidationError) ErrorName() string {
	return "IdBHchannelsToBeSetupItemValidationError"
}

// Error satisfies the builtin error interface
func (e IdBHchannelsToBeSetupItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdBHchannelsToBeSetupItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdBHchannelsToBeSetupItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdBHchannelsToBeSetupItemValidationError{}

// Validate checks the field values on IdBHchannelsSetupList with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdBHchannelsSetupList) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdBHchannelsSetupList with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdBHchannelsSetupListMultiError, or nil if none found.
func (m *IdBHchannelsSetupList) ValidateAll() error {
	return m.validate(true)
}

func (m *IdBHchannelsSetupList) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 260 {
		err := IdBHchannelsSetupListValidationError{
			field:  "Value",
			reason: "value must equal 260",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdBHchannelsSetupListMultiError(errors)
	}

	return nil
}

// IdBHchannelsSetupListMultiError is an error wrapping multiple validation
// errors returned by IdBHchannelsSetupList.ValidateAll() if the designated
// constraints aren't met.
type IdBHchannelsSetupListMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdBHchannelsSetupListMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdBHchannelsSetupListMultiError) AllErrors() []error { return m }

// IdBHchannelsSetupListValidationError is the validation error returned by
// IdBHchannelsSetupList.Validate if the designated constraints aren't met.
type IdBHchannelsSetupListValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdBHchannelsSetupListValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdBHchannelsSetupListValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdBHchannelsSetupListValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdBHchannelsSetupListValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdBHchannelsSetupListValidationError) ErrorName() string {
	return "IdBHchannelsSetupListValidationError"
}

// Error satisfies the builtin error interface
func (e IdBHchannelsSetupListValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdBHchannelsSetupList.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdBHchannelsSetupListValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdBHchannelsSetupListValidationError{}

// Validate checks the field values on IdBHchannelsSetupItem with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdBHchannelsSetupItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdBHchannelsSetupItem with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdBHchannelsSetupItemMultiError, or nil if none found.
func (m *IdBHchannelsSetupItem) ValidateAll() error {
	return m.validate(true)
}

func (m *IdBHchannelsSetupItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 261 {
		err := IdBHchannelsSetupItemValidationError{
			field:  "Value",
			reason: "value must equal 261",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdBHchannelsSetupItemMultiError(errors)
	}

	return nil
}

// IdBHchannelsSetupItemMultiError is an error wrapping multiple validation
// errors returned by IdBHchannelsSetupItem.ValidateAll() if the designated
// constraints aren't met.
type IdBHchannelsSetupItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdBHchannelsSetupItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdBHchannelsSetupItemMultiError) AllErrors() []error { return m }

// IdBHchannelsSetupItemValidationError is the validation error returned by
// IdBHchannelsSetupItem.Validate if the designated constraints aren't met.
type IdBHchannelsSetupItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdBHchannelsSetupItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdBHchannelsSetupItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdBHchannelsSetupItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdBHchannelsSetupItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdBHchannelsSetupItemValidationError) ErrorName() string {
	return "IdBHchannelsSetupItemValidationError"
}

// Error satisfies the builtin error interface
func (e IdBHchannelsSetupItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdBHchannelsSetupItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdBHchannelsSetupItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdBHchannelsSetupItemValidationError{}

// Validate checks the field values on IdBHchannelsToBeModifiedItem with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdBHchannelsToBeModifiedItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdBHchannelsToBeModifiedItem with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdBHchannelsToBeModifiedItemMultiError, or nil if none found.
func (m *IdBHchannelsToBeModifiedItem) ValidateAll() error {
	return m.validate(true)
}

func (m *IdBHchannelsToBeModifiedItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 262 {
		err := IdBHchannelsToBeModifiedItemValidationError{
			field:  "Value",
			reason: "value must equal 262",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdBHchannelsToBeModifiedItemMultiError(errors)
	}

	return nil
}

// IdBHchannelsToBeModifiedItemMultiError is an error wrapping multiple
// validation errors returned by IdBHchannelsToBeModifiedItem.ValidateAll() if
// the designated constraints aren't met.
type IdBHchannelsToBeModifiedItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdBHchannelsToBeModifiedItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdBHchannelsToBeModifiedItemMultiError) AllErrors() []error { return m }

// IdBHchannelsToBeModifiedItemValidationError is the validation error returned
// by IdBHchannelsToBeModifiedItem.Validate if the designated constraints
// aren't met.
type IdBHchannelsToBeModifiedItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdBHchannelsToBeModifiedItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdBHchannelsToBeModifiedItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdBHchannelsToBeModifiedItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdBHchannelsToBeModifiedItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdBHchannelsToBeModifiedItemValidationError) ErrorName() string {
	return "IdBHchannelsToBeModifiedItemValidationError"
}

// Error satisfies the builtin error interface
func (e IdBHchannelsToBeModifiedItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdBHchannelsToBeModifiedItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdBHchannelsToBeModifiedItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdBHchannelsToBeModifiedItemValidationError{}

// Validate checks the field values on IdBHchannelsToBeModifiedList with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdBHchannelsToBeModifiedList) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdBHchannelsToBeModifiedList with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdBHchannelsToBeModifiedListMultiError, or nil if none found.
func (m *IdBHchannelsToBeModifiedList) ValidateAll() error {
	return m.validate(true)
}

func (m *IdBHchannelsToBeModifiedList) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 263 {
		err := IdBHchannelsToBeModifiedListValidationError{
			field:  "Value",
			reason: "value must equal 263",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdBHchannelsToBeModifiedListMultiError(errors)
	}

	return nil
}

// IdBHchannelsToBeModifiedListMultiError is an error wrapping multiple
// validation errors returned by IdBHchannelsToBeModifiedList.ValidateAll() if
// the designated constraints aren't met.
type IdBHchannelsToBeModifiedListMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdBHchannelsToBeModifiedListMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdBHchannelsToBeModifiedListMultiError) AllErrors() []error { return m }

// IdBHchannelsToBeModifiedListValidationError is the validation error returned
// by IdBHchannelsToBeModifiedList.Validate if the designated constraints
// aren't met.
type IdBHchannelsToBeModifiedListValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdBHchannelsToBeModifiedListValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdBHchannelsToBeModifiedListValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdBHchannelsToBeModifiedListValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdBHchannelsToBeModifiedListValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdBHchannelsToBeModifiedListValidationError) ErrorName() string {
	return "IdBHchannelsToBeModifiedListValidationError"
}

// Error satisfies the builtin error interface
func (e IdBHchannelsToBeModifiedListValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdBHchannelsToBeModifiedList.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdBHchannelsToBeModifiedListValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdBHchannelsToBeModifiedListValidationError{}

// Validate checks the field values on IdBHchannelsToBeReleasedItem with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdBHchannelsToBeReleasedItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdBHchannelsToBeReleasedItem with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdBHchannelsToBeReleasedItemMultiError, or nil if none found.
func (m *IdBHchannelsToBeReleasedItem) ValidateAll() error {
	return m.validate(true)
}

func (m *IdBHchannelsToBeReleasedItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 264 {
		err := IdBHchannelsToBeReleasedItemValidationError{
			field:  "Value",
			reason: "value must equal 264",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdBHchannelsToBeReleasedItemMultiError(errors)
	}

	return nil
}

// IdBHchannelsToBeReleasedItemMultiError is an error wrapping multiple
// validation errors returned by IdBHchannelsToBeReleasedItem.ValidateAll() if
// the designated constraints aren't met.
type IdBHchannelsToBeReleasedItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdBHchannelsToBeReleasedItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdBHchannelsToBeReleasedItemMultiError) AllErrors() []error { return m }

// IdBHchannelsToBeReleasedItemValidationError is the validation error returned
// by IdBHchannelsToBeReleasedItem.Validate if the designated constraints
// aren't met.
type IdBHchannelsToBeReleasedItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdBHchannelsToBeReleasedItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdBHchannelsToBeReleasedItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdBHchannelsToBeReleasedItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdBHchannelsToBeReleasedItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdBHchannelsToBeReleasedItemValidationError) ErrorName() string {
	return "IdBHchannelsToBeReleasedItemValidationError"
}

// Error satisfies the builtin error interface
func (e IdBHchannelsToBeReleasedItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdBHchannelsToBeReleasedItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdBHchannelsToBeReleasedItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdBHchannelsToBeReleasedItemValidationError{}

// Validate checks the field values on IdBHchannelsToBeReleasedList with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdBHchannelsToBeReleasedList) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdBHchannelsToBeReleasedList with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdBHchannelsToBeReleasedListMultiError, or nil if none found.
func (m *IdBHchannelsToBeReleasedList) ValidateAll() error {
	return m.validate(true)
}

func (m *IdBHchannelsToBeReleasedList) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 265 {
		err := IdBHchannelsToBeReleasedListValidationError{
			field:  "Value",
			reason: "value must equal 265",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdBHchannelsToBeReleasedListMultiError(errors)
	}

	return nil
}

// IdBHchannelsToBeReleasedListMultiError is an error wrapping multiple
// validation errors returned by IdBHchannelsToBeReleasedList.ValidateAll() if
// the designated constraints aren't met.
type IdBHchannelsToBeReleasedListMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdBHchannelsToBeReleasedListMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdBHchannelsToBeReleasedListMultiError) AllErrors() []error { return m }

// IdBHchannelsToBeReleasedListValidationError is the validation error returned
// by IdBHchannelsToBeReleasedList.Validate if the designated constraints
// aren't met.
type IdBHchannelsToBeReleasedListValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdBHchannelsToBeReleasedListValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdBHchannelsToBeReleasedListValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdBHchannelsToBeReleasedListValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdBHchannelsToBeReleasedListValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdBHchannelsToBeReleasedListValidationError) ErrorName() string {
	return "IdBHchannelsToBeReleasedListValidationError"
}

// Error satisfies the builtin error interface
func (e IdBHchannelsToBeReleasedListValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdBHchannelsToBeReleasedList.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdBHchannelsToBeReleasedListValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdBHchannelsToBeReleasedListValidationError{}

// Validate checks the field values on IdBHchannelsToBeSetupModItem with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdBHchannelsToBeSetupModItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdBHchannelsToBeSetupModItem with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdBHchannelsToBeSetupModItemMultiError, or nil if none found.
func (m *IdBHchannelsToBeSetupModItem) ValidateAll() error {
	return m.validate(true)
}

func (m *IdBHchannelsToBeSetupModItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 266 {
		err := IdBHchannelsToBeSetupModItemValidationError{
			field:  "Value",
			reason: "value must equal 266",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdBHchannelsToBeSetupModItemMultiError(errors)
	}

	return nil
}

// IdBHchannelsToBeSetupModItemMultiError is an error wrapping multiple
// validation errors returned by IdBHchannelsToBeSetupModItem.ValidateAll() if
// the designated constraints aren't met.
type IdBHchannelsToBeSetupModItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdBHchannelsToBeSetupModItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdBHchannelsToBeSetupModItemMultiError) AllErrors() []error { return m }

// IdBHchannelsToBeSetupModItemValidationError is the validation error returned
// by IdBHchannelsToBeSetupModItem.Validate if the designated constraints
// aren't met.
type IdBHchannelsToBeSetupModItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdBHchannelsToBeSetupModItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdBHchannelsToBeSetupModItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdBHchannelsToBeSetupModItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdBHchannelsToBeSetupModItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdBHchannelsToBeSetupModItemValidationError) ErrorName() string {
	return "IdBHchannelsToBeSetupModItemValidationError"
}

// Error satisfies the builtin error interface
func (e IdBHchannelsToBeSetupModItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdBHchannelsToBeSetupModItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdBHchannelsToBeSetupModItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdBHchannelsToBeSetupModItemValidationError{}

// Validate checks the field values on IdBHchannelsToBeSetupModList with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdBHchannelsToBeSetupModList) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdBHchannelsToBeSetupModList with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdBHchannelsToBeSetupModListMultiError, or nil if none found.
func (m *IdBHchannelsToBeSetupModList) ValidateAll() error {
	return m.validate(true)
}

func (m *IdBHchannelsToBeSetupModList) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 267 {
		err := IdBHchannelsToBeSetupModListValidationError{
			field:  "Value",
			reason: "value must equal 267",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdBHchannelsToBeSetupModListMultiError(errors)
	}

	return nil
}

// IdBHchannelsToBeSetupModListMultiError is an error wrapping multiple
// validation errors returned by IdBHchannelsToBeSetupModList.ValidateAll() if
// the designated constraints aren't met.
type IdBHchannelsToBeSetupModListMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdBHchannelsToBeSetupModListMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdBHchannelsToBeSetupModListMultiError) AllErrors() []error { return m }

// IdBHchannelsToBeSetupModListValidationError is the validation error returned
// by IdBHchannelsToBeSetupModList.Validate if the designated constraints
// aren't met.
type IdBHchannelsToBeSetupModListValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdBHchannelsToBeSetupModListValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdBHchannelsToBeSetupModListValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdBHchannelsToBeSetupModListValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdBHchannelsToBeSetupModListValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdBHchannelsToBeSetupModListValidationError) ErrorName() string {
	return "IdBHchannelsToBeSetupModListValidationError"
}

// Error satisfies the builtin error interface
func (e IdBHchannelsToBeSetupModListValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdBHchannelsToBeSetupModList.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdBHchannelsToBeSetupModListValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdBHchannelsToBeSetupModListValidationError{}

// Validate checks the field values on IdBHchannelsFailedToBeModifiedItem with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *IdBHchannelsFailedToBeModifiedItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdBHchannelsFailedToBeModifiedItem
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// IdBHchannelsFailedToBeModifiedItemMultiError, or nil if none found.
func (m *IdBHchannelsFailedToBeModifiedItem) ValidateAll() error {
	return m.validate(true)
}

func (m *IdBHchannelsFailedToBeModifiedItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 268 {
		err := IdBHchannelsFailedToBeModifiedItemValidationError{
			field:  "Value",
			reason: "value must equal 268",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdBHchannelsFailedToBeModifiedItemMultiError(errors)
	}

	return nil
}

// IdBHchannelsFailedToBeModifiedItemMultiError is an error wrapping multiple
// validation errors returned by
// IdBHchannelsFailedToBeModifiedItem.ValidateAll() if the designated
// constraints aren't met.
type IdBHchannelsFailedToBeModifiedItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdBHchannelsFailedToBeModifiedItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdBHchannelsFailedToBeModifiedItemMultiError) AllErrors() []error { return m }

// IdBHchannelsFailedToBeModifiedItemValidationError is the validation error
// returned by IdBHchannelsFailedToBeModifiedItem.Validate if the designated
// constraints aren't met.
type IdBHchannelsFailedToBeModifiedItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdBHchannelsFailedToBeModifiedItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdBHchannelsFailedToBeModifiedItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdBHchannelsFailedToBeModifiedItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdBHchannelsFailedToBeModifiedItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdBHchannelsFailedToBeModifiedItemValidationError) ErrorName() string {
	return "IdBHchannelsFailedToBeModifiedItemValidationError"
}

// Error satisfies the builtin error interface
func (e IdBHchannelsFailedToBeModifiedItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdBHchannelsFailedToBeModifiedItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdBHchannelsFailedToBeModifiedItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdBHchannelsFailedToBeModifiedItemValidationError{}

// Validate checks the field values on IdBHchannelsFailedToBeModifiedList with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *IdBHchannelsFailedToBeModifiedList) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdBHchannelsFailedToBeModifiedList
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// IdBHchannelsFailedToBeModifiedListMultiError, or nil if none found.
func (m *IdBHchannelsFailedToBeModifiedList) ValidateAll() error {
	return m.validate(true)
}

func (m *IdBHchannelsFailedToBeModifiedList) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 269 {
		err := IdBHchannelsFailedToBeModifiedListValidationError{
			field:  "Value",
			reason: "value must equal 269",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdBHchannelsFailedToBeModifiedListMultiError(errors)
	}

	return nil
}

// IdBHchannelsFailedToBeModifiedListMultiError is an error wrapping multiple
// validation errors returned by
// IdBHchannelsFailedToBeModifiedList.ValidateAll() if the designated
// constraints aren't met.
type IdBHchannelsFailedToBeModifiedListMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdBHchannelsFailedToBeModifiedListMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdBHchannelsFailedToBeModifiedListMultiError) AllErrors() []error { return m }

// IdBHchannelsFailedToBeModifiedListValidationError is the validation error
// returned by IdBHchannelsFailedToBeModifiedList.Validate if the designated
// constraints aren't met.
type IdBHchannelsFailedToBeModifiedListValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdBHchannelsFailedToBeModifiedListValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdBHchannelsFailedToBeModifiedListValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdBHchannelsFailedToBeModifiedListValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdBHchannelsFailedToBeModifiedListValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdBHchannelsFailedToBeModifiedListValidationError) ErrorName() string {
	return "IdBHchannelsFailedToBeModifiedListValidationError"
}

// Error satisfies the builtin error interface
func (e IdBHchannelsFailedToBeModifiedListValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdBHchannelsFailedToBeModifiedList.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdBHchannelsFailedToBeModifiedListValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdBHchannelsFailedToBeModifiedListValidationError{}

// Validate checks the field values on IdBHchannelsFailedToBeSetupModItem with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *IdBHchannelsFailedToBeSetupModItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdBHchannelsFailedToBeSetupModItem
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// IdBHchannelsFailedToBeSetupModItemMultiError, or nil if none found.
func (m *IdBHchannelsFailedToBeSetupModItem) ValidateAll() error {
	return m.validate(true)
}

func (m *IdBHchannelsFailedToBeSetupModItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 270 {
		err := IdBHchannelsFailedToBeSetupModItemValidationError{
			field:  "Value",
			reason: "value must equal 270",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdBHchannelsFailedToBeSetupModItemMultiError(errors)
	}

	return nil
}

// IdBHchannelsFailedToBeSetupModItemMultiError is an error wrapping multiple
// validation errors returned by
// IdBHchannelsFailedToBeSetupModItem.ValidateAll() if the designated
// constraints aren't met.
type IdBHchannelsFailedToBeSetupModItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdBHchannelsFailedToBeSetupModItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdBHchannelsFailedToBeSetupModItemMultiError) AllErrors() []error { return m }

// IdBHchannelsFailedToBeSetupModItemValidationError is the validation error
// returned by IdBHchannelsFailedToBeSetupModItem.Validate if the designated
// constraints aren't met.
type IdBHchannelsFailedToBeSetupModItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdBHchannelsFailedToBeSetupModItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdBHchannelsFailedToBeSetupModItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdBHchannelsFailedToBeSetupModItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdBHchannelsFailedToBeSetupModItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdBHchannelsFailedToBeSetupModItemValidationError) ErrorName() string {
	return "IdBHchannelsFailedToBeSetupModItemValidationError"
}

// Error satisfies the builtin error interface
func (e IdBHchannelsFailedToBeSetupModItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdBHchannelsFailedToBeSetupModItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdBHchannelsFailedToBeSetupModItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdBHchannelsFailedToBeSetupModItemValidationError{}

// Validate checks the field values on IdBHchannelsFailedToBeSetupModList with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *IdBHchannelsFailedToBeSetupModList) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdBHchannelsFailedToBeSetupModList
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// IdBHchannelsFailedToBeSetupModListMultiError, or nil if none found.
func (m *IdBHchannelsFailedToBeSetupModList) ValidateAll() error {
	return m.validate(true)
}

func (m *IdBHchannelsFailedToBeSetupModList) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 271 {
		err := IdBHchannelsFailedToBeSetupModListValidationError{
			field:  "Value",
			reason: "value must equal 271",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdBHchannelsFailedToBeSetupModListMultiError(errors)
	}

	return nil
}

// IdBHchannelsFailedToBeSetupModListMultiError is an error wrapping multiple
// validation errors returned by
// IdBHchannelsFailedToBeSetupModList.ValidateAll() if the designated
// constraints aren't met.
type IdBHchannelsFailedToBeSetupModListMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdBHchannelsFailedToBeSetupModListMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdBHchannelsFailedToBeSetupModListMultiError) AllErrors() []error { return m }

// IdBHchannelsFailedToBeSetupModListValidationError is the validation error
// returned by IdBHchannelsFailedToBeSetupModList.Validate if the designated
// constraints aren't met.
type IdBHchannelsFailedToBeSetupModListValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdBHchannelsFailedToBeSetupModListValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdBHchannelsFailedToBeSetupModListValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdBHchannelsFailedToBeSetupModListValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdBHchannelsFailedToBeSetupModListValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdBHchannelsFailedToBeSetupModListValidationError) ErrorName() string {
	return "IdBHchannelsFailedToBeSetupModListValidationError"
}

// Error satisfies the builtin error interface
func (e IdBHchannelsFailedToBeSetupModListValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdBHchannelsFailedToBeSetupModList.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdBHchannelsFailedToBeSetupModListValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdBHchannelsFailedToBeSetupModListValidationError{}

// Validate checks the field values on IdBHchannelsModifiedItem with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdBHchannelsModifiedItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdBHchannelsModifiedItem with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdBHchannelsModifiedItemMultiError, or nil if none found.
func (m *IdBHchannelsModifiedItem) ValidateAll() error {
	return m.validate(true)
}

func (m *IdBHchannelsModifiedItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 272 {
		err := IdBHchannelsModifiedItemValidationError{
			field:  "Value",
			reason: "value must equal 272",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdBHchannelsModifiedItemMultiError(errors)
	}

	return nil
}

// IdBHchannelsModifiedItemMultiError is an error wrapping multiple validation
// errors returned by IdBHchannelsModifiedItem.ValidateAll() if the designated
// constraints aren't met.
type IdBHchannelsModifiedItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdBHchannelsModifiedItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdBHchannelsModifiedItemMultiError) AllErrors() []error { return m }

// IdBHchannelsModifiedItemValidationError is the validation error returned by
// IdBHchannelsModifiedItem.Validate if the designated constraints aren't met.
type IdBHchannelsModifiedItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdBHchannelsModifiedItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdBHchannelsModifiedItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdBHchannelsModifiedItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdBHchannelsModifiedItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdBHchannelsModifiedItemValidationError) ErrorName() string {
	return "IdBHchannelsModifiedItemValidationError"
}

// Error satisfies the builtin error interface
func (e IdBHchannelsModifiedItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdBHchannelsModifiedItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdBHchannelsModifiedItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdBHchannelsModifiedItemValidationError{}

// Validate checks the field values on IdBHchannelsModifiedList with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdBHchannelsModifiedList) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdBHchannelsModifiedList with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdBHchannelsModifiedListMultiError, or nil if none found.
func (m *IdBHchannelsModifiedList) ValidateAll() error {
	return m.validate(true)
}

func (m *IdBHchannelsModifiedList) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 273 {
		err := IdBHchannelsModifiedListValidationError{
			field:  "Value",
			reason: "value must equal 273",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdBHchannelsModifiedListMultiError(errors)
	}

	return nil
}

// IdBHchannelsModifiedListMultiError is an error wrapping multiple validation
// errors returned by IdBHchannelsModifiedList.ValidateAll() if the designated
// constraints aren't met.
type IdBHchannelsModifiedListMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdBHchannelsModifiedListMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdBHchannelsModifiedListMultiError) AllErrors() []error { return m }

// IdBHchannelsModifiedListValidationError is the validation error returned by
// IdBHchannelsModifiedList.Validate if the designated constraints aren't met.
type IdBHchannelsModifiedListValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdBHchannelsModifiedListValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdBHchannelsModifiedListValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdBHchannelsModifiedListValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdBHchannelsModifiedListValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdBHchannelsModifiedListValidationError) ErrorName() string {
	return "IdBHchannelsModifiedListValidationError"
}

// Error satisfies the builtin error interface
func (e IdBHchannelsModifiedListValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdBHchannelsModifiedList.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdBHchannelsModifiedListValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdBHchannelsModifiedListValidationError{}

// Validate checks the field values on IdBHchannelsSetupModItem with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdBHchannelsSetupModItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdBHchannelsSetupModItem with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdBHchannelsSetupModItemMultiError, or nil if none found.
func (m *IdBHchannelsSetupModItem) ValidateAll() error {
	return m.validate(true)
}

func (m *IdBHchannelsSetupModItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 274 {
		err := IdBHchannelsSetupModItemValidationError{
			field:  "Value",
			reason: "value must equal 274",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdBHchannelsSetupModItemMultiError(errors)
	}

	return nil
}

// IdBHchannelsSetupModItemMultiError is an error wrapping multiple validation
// errors returned by IdBHchannelsSetupModItem.ValidateAll() if the designated
// constraints aren't met.
type IdBHchannelsSetupModItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdBHchannelsSetupModItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdBHchannelsSetupModItemMultiError) AllErrors() []error { return m }

// IdBHchannelsSetupModItemValidationError is the validation error returned by
// IdBHchannelsSetupModItem.Validate if the designated constraints aren't met.
type IdBHchannelsSetupModItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdBHchannelsSetupModItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdBHchannelsSetupModItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdBHchannelsSetupModItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdBHchannelsSetupModItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdBHchannelsSetupModItemValidationError) ErrorName() string {
	return "IdBHchannelsSetupModItemValidationError"
}

// Error satisfies the builtin error interface
func (e IdBHchannelsSetupModItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdBHchannelsSetupModItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdBHchannelsSetupModItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdBHchannelsSetupModItemValidationError{}

// Validate checks the field values on IdBHchannelsSetupModList with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdBHchannelsSetupModList) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdBHchannelsSetupModList with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdBHchannelsSetupModListMultiError, or nil if none found.
func (m *IdBHchannelsSetupModList) ValidateAll() error {
	return m.validate(true)
}

func (m *IdBHchannelsSetupModList) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 275 {
		err := IdBHchannelsSetupModListValidationError{
			field:  "Value",
			reason: "value must equal 275",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdBHchannelsSetupModListMultiError(errors)
	}

	return nil
}

// IdBHchannelsSetupModListMultiError is an error wrapping multiple validation
// errors returned by IdBHchannelsSetupModList.ValidateAll() if the designated
// constraints aren't met.
type IdBHchannelsSetupModListMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdBHchannelsSetupModListMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdBHchannelsSetupModListMultiError) AllErrors() []error { return m }

// IdBHchannelsSetupModListValidationError is the validation error returned by
// IdBHchannelsSetupModList.Validate if the designated constraints aren't met.
type IdBHchannelsSetupModListValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdBHchannelsSetupModListValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdBHchannelsSetupModListValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdBHchannelsSetupModListValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdBHchannelsSetupModListValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdBHchannelsSetupModListValidationError) ErrorName() string {
	return "IdBHchannelsSetupModListValidationError"
}

// Error satisfies the builtin error interface
func (e IdBHchannelsSetupModListValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdBHchannelsSetupModList.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdBHchannelsSetupModListValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdBHchannelsSetupModListValidationError{}

// Validate checks the field values on IdBHchannelsRequiredToBeReleasedItem
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *IdBHchannelsRequiredToBeReleasedItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdBHchannelsRequiredToBeReleasedItem
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// IdBHchannelsRequiredToBeReleasedItemMultiError, or nil if none found.
func (m *IdBHchannelsRequiredToBeReleasedItem) ValidateAll() error {
	return m.validate(true)
}

func (m *IdBHchannelsRequiredToBeReleasedItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 276 {
		err := IdBHchannelsRequiredToBeReleasedItemValidationError{
			field:  "Value",
			reason: "value must equal 276",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdBHchannelsRequiredToBeReleasedItemMultiError(errors)
	}

	return nil
}

// IdBHchannelsRequiredToBeReleasedItemMultiError is an error wrapping multiple
// validation errors returned by
// IdBHchannelsRequiredToBeReleasedItem.ValidateAll() if the designated
// constraints aren't met.
type IdBHchannelsRequiredToBeReleasedItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdBHchannelsRequiredToBeReleasedItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdBHchannelsRequiredToBeReleasedItemMultiError) AllErrors() []error { return m }

// IdBHchannelsRequiredToBeReleasedItemValidationError is the validation error
// returned by IdBHchannelsRequiredToBeReleasedItem.Validate if the designated
// constraints aren't met.
type IdBHchannelsRequiredToBeReleasedItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdBHchannelsRequiredToBeReleasedItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdBHchannelsRequiredToBeReleasedItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdBHchannelsRequiredToBeReleasedItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdBHchannelsRequiredToBeReleasedItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdBHchannelsRequiredToBeReleasedItemValidationError) ErrorName() string {
	return "IdBHchannelsRequiredToBeReleasedItemValidationError"
}

// Error satisfies the builtin error interface
func (e IdBHchannelsRequiredToBeReleasedItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdBHchannelsRequiredToBeReleasedItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdBHchannelsRequiredToBeReleasedItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdBHchannelsRequiredToBeReleasedItemValidationError{}

// Validate checks the field values on IdBHchannelsRequiredToBeReleasedList
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *IdBHchannelsRequiredToBeReleasedList) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdBHchannelsRequiredToBeReleasedList
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// IdBHchannelsRequiredToBeReleasedListMultiError, or nil if none found.
func (m *IdBHchannelsRequiredToBeReleasedList) ValidateAll() error {
	return m.validate(true)
}

func (m *IdBHchannelsRequiredToBeReleasedList) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 277 {
		err := IdBHchannelsRequiredToBeReleasedListValidationError{
			field:  "Value",
			reason: "value must equal 277",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdBHchannelsRequiredToBeReleasedListMultiError(errors)
	}

	return nil
}

// IdBHchannelsRequiredToBeReleasedListMultiError is an error wrapping multiple
// validation errors returned by
// IdBHchannelsRequiredToBeReleasedList.ValidateAll() if the designated
// constraints aren't met.
type IdBHchannelsRequiredToBeReleasedListMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdBHchannelsRequiredToBeReleasedListMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdBHchannelsRequiredToBeReleasedListMultiError) AllErrors() []error { return m }

// IdBHchannelsRequiredToBeReleasedListValidationError is the validation error
// returned by IdBHchannelsRequiredToBeReleasedList.Validate if the designated
// constraints aren't met.
type IdBHchannelsRequiredToBeReleasedListValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdBHchannelsRequiredToBeReleasedListValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdBHchannelsRequiredToBeReleasedListValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdBHchannelsRequiredToBeReleasedListValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdBHchannelsRequiredToBeReleasedListValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdBHchannelsRequiredToBeReleasedListValidationError) ErrorName() string {
	return "IdBHchannelsRequiredToBeReleasedListValidationError"
}

// Error satisfies the builtin error interface
func (e IdBHchannelsRequiredToBeReleasedListValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdBHchannelsRequiredToBeReleasedList.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdBHchannelsRequiredToBeReleasedListValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdBHchannelsRequiredToBeReleasedListValidationError{}

// Validate checks the field values on IdBHchannelsFailedToBeSetupItem with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdBHchannelsFailedToBeSetupItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdBHchannelsFailedToBeSetupItem with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// IdBHchannelsFailedToBeSetupItemMultiError, or nil if none found.
func (m *IdBHchannelsFailedToBeSetupItem) ValidateAll() error {
	return m.validate(true)
}

func (m *IdBHchannelsFailedToBeSetupItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 278 {
		err := IdBHchannelsFailedToBeSetupItemValidationError{
			field:  "Value",
			reason: "value must equal 278",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdBHchannelsFailedToBeSetupItemMultiError(errors)
	}

	return nil
}

// IdBHchannelsFailedToBeSetupItemMultiError is an error wrapping multiple
// validation errors returned by IdBHchannelsFailedToBeSetupItem.ValidateAll()
// if the designated constraints aren't met.
type IdBHchannelsFailedToBeSetupItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdBHchannelsFailedToBeSetupItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdBHchannelsFailedToBeSetupItemMultiError) AllErrors() []error { return m }

// IdBHchannelsFailedToBeSetupItemValidationError is the validation error
// returned by IdBHchannelsFailedToBeSetupItem.Validate if the designated
// constraints aren't met.
type IdBHchannelsFailedToBeSetupItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdBHchannelsFailedToBeSetupItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdBHchannelsFailedToBeSetupItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdBHchannelsFailedToBeSetupItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdBHchannelsFailedToBeSetupItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdBHchannelsFailedToBeSetupItemValidationError) ErrorName() string {
	return "IdBHchannelsFailedToBeSetupItemValidationError"
}

// Error satisfies the builtin error interface
func (e IdBHchannelsFailedToBeSetupItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdBHchannelsFailedToBeSetupItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdBHchannelsFailedToBeSetupItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdBHchannelsFailedToBeSetupItemValidationError{}

// Validate checks the field values on IdBHchannelsFailedToBeSetupList with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdBHchannelsFailedToBeSetupList) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdBHchannelsFailedToBeSetupList with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// IdBHchannelsFailedToBeSetupListMultiError, or nil if none found.
func (m *IdBHchannelsFailedToBeSetupList) ValidateAll() error {
	return m.validate(true)
}

func (m *IdBHchannelsFailedToBeSetupList) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 279 {
		err := IdBHchannelsFailedToBeSetupListValidationError{
			field:  "Value",
			reason: "value must equal 279",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdBHchannelsFailedToBeSetupListMultiError(errors)
	}

	return nil
}

// IdBHchannelsFailedToBeSetupListMultiError is an error wrapping multiple
// validation errors returned by IdBHchannelsFailedToBeSetupList.ValidateAll()
// if the designated constraints aren't met.
type IdBHchannelsFailedToBeSetupListMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdBHchannelsFailedToBeSetupListMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdBHchannelsFailedToBeSetupListMultiError) AllErrors() []error { return m }

// IdBHchannelsFailedToBeSetupListValidationError is the validation error
// returned by IdBHchannelsFailedToBeSetupList.Validate if the designated
// constraints aren't met.
type IdBHchannelsFailedToBeSetupListValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdBHchannelsFailedToBeSetupListValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdBHchannelsFailedToBeSetupListValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdBHchannelsFailedToBeSetupListValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdBHchannelsFailedToBeSetupListValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdBHchannelsFailedToBeSetupListValidationError) ErrorName() string {
	return "IdBHchannelsFailedToBeSetupListValidationError"
}

// Error satisfies the builtin error interface
func (e IdBHchannelsFailedToBeSetupListValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdBHchannelsFailedToBeSetupList.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdBHchannelsFailedToBeSetupListValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdBHchannelsFailedToBeSetupListValidationError{}

// Validate checks the field values on IdBHinfo with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *IdBHinfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdBHinfo with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in IdBHinfoMultiError, or nil
// if none found.
func (m *IdBHinfo) ValidateAll() error {
	return m.validate(true)
}

func (m *IdBHinfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 280 {
		err := IdBHinfoValidationError{
			field:  "Value",
			reason: "value must equal 280",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdBHinfoMultiError(errors)
	}

	return nil
}

// IdBHinfoMultiError is an error wrapping multiple validation errors returned
// by IdBHinfo.ValidateAll() if the designated constraints aren't met.
type IdBHinfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdBHinfoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdBHinfoMultiError) AllErrors() []error { return m }

// IdBHinfoValidationError is the validation error returned by
// IdBHinfo.Validate if the designated constraints aren't met.
type IdBHinfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdBHinfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdBHinfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdBHinfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdBHinfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdBHinfoValidationError) ErrorName() string { return "IdBHinfoValidationError" }

// Error satisfies the builtin error interface
func (e IdBHinfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdBHinfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdBHinfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdBHinfoValidationError{}

// Validate checks the field values on IdBApaddress with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *IdBApaddress) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdBApaddress with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in IdBApaddressMultiError, or
// nil if none found.
func (m *IdBApaddress) ValidateAll() error {
	return m.validate(true)
}

func (m *IdBApaddress) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 281 {
		err := IdBApaddressValidationError{
			field:  "Value",
			reason: "value must equal 281",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdBApaddressMultiError(errors)
	}

	return nil
}

// IdBApaddressMultiError is an error wrapping multiple validation errors
// returned by IdBApaddress.ValidateAll() if the designated constraints aren't met.
type IdBApaddressMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdBApaddressMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdBApaddressMultiError) AllErrors() []error { return m }

// IdBApaddressValidationError is the validation error returned by
// IdBApaddress.Validate if the designated constraints aren't met.
type IdBApaddressValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdBApaddressValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdBApaddressValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdBApaddressValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdBApaddressValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdBApaddressValidationError) ErrorName() string { return "IdBApaddressValidationError" }

// Error satisfies the builtin error interface
func (e IdBApaddressValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdBApaddress.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdBApaddressValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdBApaddressValidationError{}

// Validate checks the field values on IdConfiguredBapaddress with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdConfiguredBapaddress) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdConfiguredBapaddress with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdConfiguredBapaddressMultiError, or nil if none found.
func (m *IdConfiguredBapaddress) ValidateAll() error {
	return m.validate(true)
}

func (m *IdConfiguredBapaddress) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 282 {
		err := IdConfiguredBapaddressValidationError{
			field:  "Value",
			reason: "value must equal 282",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdConfiguredBapaddressMultiError(errors)
	}

	return nil
}

// IdConfiguredBapaddressMultiError is an error wrapping multiple validation
// errors returned by IdConfiguredBapaddress.ValidateAll() if the designated
// constraints aren't met.
type IdConfiguredBapaddressMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdConfiguredBapaddressMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdConfiguredBapaddressMultiError) AllErrors() []error { return m }

// IdConfiguredBapaddressValidationError is the validation error returned by
// IdConfiguredBapaddress.Validate if the designated constraints aren't met.
type IdConfiguredBapaddressValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdConfiguredBapaddressValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdConfiguredBapaddressValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdConfiguredBapaddressValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdConfiguredBapaddressValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdConfiguredBapaddressValidationError) ErrorName() string {
	return "IdConfiguredBapaddressValidationError"
}

// Error satisfies the builtin error interface
func (e IdConfiguredBapaddressValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdConfiguredBapaddress.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdConfiguredBapaddressValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdConfiguredBapaddressValidationError{}

// Validate checks the field values on IdBHRoutingInformationAddedList with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdBHRoutingInformationAddedList) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdBHRoutingInformationAddedList with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// IdBHRoutingInformationAddedListMultiError, or nil if none found.
func (m *IdBHRoutingInformationAddedList) ValidateAll() error {
	return m.validate(true)
}

func (m *IdBHRoutingInformationAddedList) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 283 {
		err := IdBHRoutingInformationAddedListValidationError{
			field:  "Value",
			reason: "value must equal 283",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdBHRoutingInformationAddedListMultiError(errors)
	}

	return nil
}

// IdBHRoutingInformationAddedListMultiError is an error wrapping multiple
// validation errors returned by IdBHRoutingInformationAddedList.ValidateAll()
// if the designated constraints aren't met.
type IdBHRoutingInformationAddedListMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdBHRoutingInformationAddedListMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdBHRoutingInformationAddedListMultiError) AllErrors() []error { return m }

// IdBHRoutingInformationAddedListValidationError is the validation error
// returned by IdBHRoutingInformationAddedList.Validate if the designated
// constraints aren't met.
type IdBHRoutingInformationAddedListValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdBHRoutingInformationAddedListValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdBHRoutingInformationAddedListValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdBHRoutingInformationAddedListValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdBHRoutingInformationAddedListValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdBHRoutingInformationAddedListValidationError) ErrorName() string {
	return "IdBHRoutingInformationAddedListValidationError"
}

// Error satisfies the builtin error interface
func (e IdBHRoutingInformationAddedListValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdBHRoutingInformationAddedList.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdBHRoutingInformationAddedListValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdBHRoutingInformationAddedListValidationError{}

// Validate checks the field values on IdBHRoutingInformationAddedListItem with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *IdBHRoutingInformationAddedListItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdBHRoutingInformationAddedListItem
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// IdBHRoutingInformationAddedListItemMultiError, or nil if none found.
func (m *IdBHRoutingInformationAddedListItem) ValidateAll() error {
	return m.validate(true)
}

func (m *IdBHRoutingInformationAddedListItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 284 {
		err := IdBHRoutingInformationAddedListItemValidationError{
			field:  "Value",
			reason: "value must equal 284",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdBHRoutingInformationAddedListItemMultiError(errors)
	}

	return nil
}

// IdBHRoutingInformationAddedListItemMultiError is an error wrapping multiple
// validation errors returned by
// IdBHRoutingInformationAddedListItem.ValidateAll() if the designated
// constraints aren't met.
type IdBHRoutingInformationAddedListItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdBHRoutingInformationAddedListItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdBHRoutingInformationAddedListItemMultiError) AllErrors() []error { return m }

// IdBHRoutingInformationAddedListItemValidationError is the validation error
// returned by IdBHRoutingInformationAddedListItem.Validate if the designated
// constraints aren't met.
type IdBHRoutingInformationAddedListItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdBHRoutingInformationAddedListItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdBHRoutingInformationAddedListItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdBHRoutingInformationAddedListItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdBHRoutingInformationAddedListItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdBHRoutingInformationAddedListItemValidationError) ErrorName() string {
	return "IdBHRoutingInformationAddedListItemValidationError"
}

// Error satisfies the builtin error interface
func (e IdBHRoutingInformationAddedListItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdBHRoutingInformationAddedListItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdBHRoutingInformationAddedListItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdBHRoutingInformationAddedListItemValidationError{}

// Validate checks the field values on IdBHRoutingInformationRemovedList with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *IdBHRoutingInformationRemovedList) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdBHRoutingInformationRemovedList
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// IdBHRoutingInformationRemovedListMultiError, or nil if none found.
func (m *IdBHRoutingInformationRemovedList) ValidateAll() error {
	return m.validate(true)
}

func (m *IdBHRoutingInformationRemovedList) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 285 {
		err := IdBHRoutingInformationRemovedListValidationError{
			field:  "Value",
			reason: "value must equal 285",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdBHRoutingInformationRemovedListMultiError(errors)
	}

	return nil
}

// IdBHRoutingInformationRemovedListMultiError is an error wrapping multiple
// validation errors returned by
// IdBHRoutingInformationRemovedList.ValidateAll() if the designated
// constraints aren't met.
type IdBHRoutingInformationRemovedListMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdBHRoutingInformationRemovedListMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdBHRoutingInformationRemovedListMultiError) AllErrors() []error { return m }

// IdBHRoutingInformationRemovedListValidationError is the validation error
// returned by IdBHRoutingInformationRemovedList.Validate if the designated
// constraints aren't met.
type IdBHRoutingInformationRemovedListValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdBHRoutingInformationRemovedListValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdBHRoutingInformationRemovedListValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdBHRoutingInformationRemovedListValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdBHRoutingInformationRemovedListValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdBHRoutingInformationRemovedListValidationError) ErrorName() string {
	return "IdBHRoutingInformationRemovedListValidationError"
}

// Error satisfies the builtin error interface
func (e IdBHRoutingInformationRemovedListValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdBHRoutingInformationRemovedList.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdBHRoutingInformationRemovedListValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdBHRoutingInformationRemovedListValidationError{}

// Validate checks the field values on IdBHRoutingInformationRemovedListItem
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *IdBHRoutingInformationRemovedListItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdBHRoutingInformationRemovedListItem
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// IdBHRoutingInformationRemovedListItemMultiError, or nil if none found.
func (m *IdBHRoutingInformationRemovedListItem) ValidateAll() error {
	return m.validate(true)
}

func (m *IdBHRoutingInformationRemovedListItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 286 {
		err := IdBHRoutingInformationRemovedListItemValidationError{
			field:  "Value",
			reason: "value must equal 286",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdBHRoutingInformationRemovedListItemMultiError(errors)
	}

	return nil
}

// IdBHRoutingInformationRemovedListItemMultiError is an error wrapping
// multiple validation errors returned by
// IdBHRoutingInformationRemovedListItem.ValidateAll() if the designated
// constraints aren't met.
type IdBHRoutingInformationRemovedListItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdBHRoutingInformationRemovedListItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdBHRoutingInformationRemovedListItemMultiError) AllErrors() []error { return m }

// IdBHRoutingInformationRemovedListItemValidationError is the validation error
// returned by IdBHRoutingInformationRemovedListItem.Validate if the
// designated constraints aren't met.
type IdBHRoutingInformationRemovedListItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdBHRoutingInformationRemovedListItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdBHRoutingInformationRemovedListItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdBHRoutingInformationRemovedListItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdBHRoutingInformationRemovedListItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdBHRoutingInformationRemovedListItemValidationError) ErrorName() string {
	return "IdBHRoutingInformationRemovedListItemValidationError"
}

// Error satisfies the builtin error interface
func (e IdBHRoutingInformationRemovedListItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdBHRoutingInformationRemovedListItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdBHRoutingInformationRemovedListItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdBHRoutingInformationRemovedListItemValidationError{}

// Validate checks the field values on IdULBHNonUPTrafficMapping with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdULBHNonUPTrafficMapping) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdULBHNonUPTrafficMapping with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdULBHNonUPTrafficMappingMultiError, or nil if none found.
func (m *IdULBHNonUPTrafficMapping) ValidateAll() error {
	return m.validate(true)
}

func (m *IdULBHNonUPTrafficMapping) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 287 {
		err := IdULBHNonUPTrafficMappingValidationError{
			field:  "Value",
			reason: "value must equal 287",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdULBHNonUPTrafficMappingMultiError(errors)
	}

	return nil
}

// IdULBHNonUPTrafficMappingMultiError is an error wrapping multiple validation
// errors returned by IdULBHNonUPTrafficMapping.ValidateAll() if the
// designated constraints aren't met.
type IdULBHNonUPTrafficMappingMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdULBHNonUPTrafficMappingMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdULBHNonUPTrafficMappingMultiError) AllErrors() []error { return m }

// IdULBHNonUPTrafficMappingValidationError is the validation error returned by
// IdULBHNonUPTrafficMapping.Validate if the designated constraints aren't met.
type IdULBHNonUPTrafficMappingValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdULBHNonUPTrafficMappingValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdULBHNonUPTrafficMappingValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdULBHNonUPTrafficMappingValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdULBHNonUPTrafficMappingValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdULBHNonUPTrafficMappingValidationError) ErrorName() string {
	return "IdULBHNonUPTrafficMappingValidationError"
}

// Error satisfies the builtin error interface
func (e IdULBHNonUPTrafficMappingValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdULBHNonUPTrafficMapping.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdULBHNonUPTrafficMappingValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdULBHNonUPTrafficMappingValidationError{}

// Validate checks the field values on IdActivatedCellstobeUpdatedList with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdActivatedCellstobeUpdatedList) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdActivatedCellstobeUpdatedList with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// IdActivatedCellstobeUpdatedListMultiError, or nil if none found.
func (m *IdActivatedCellstobeUpdatedList) ValidateAll() error {
	return m.validate(true)
}

func (m *IdActivatedCellstobeUpdatedList) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 288 {
		err := IdActivatedCellstobeUpdatedListValidationError{
			field:  "Value",
			reason: "value must equal 288",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdActivatedCellstobeUpdatedListMultiError(errors)
	}

	return nil
}

// IdActivatedCellstobeUpdatedListMultiError is an error wrapping multiple
// validation errors returned by IdActivatedCellstobeUpdatedList.ValidateAll()
// if the designated constraints aren't met.
type IdActivatedCellstobeUpdatedListMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdActivatedCellstobeUpdatedListMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdActivatedCellstobeUpdatedListMultiError) AllErrors() []error { return m }

// IdActivatedCellstobeUpdatedListValidationError is the validation error
// returned by IdActivatedCellstobeUpdatedList.Validate if the designated
// constraints aren't met.
type IdActivatedCellstobeUpdatedListValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdActivatedCellstobeUpdatedListValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdActivatedCellstobeUpdatedListValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdActivatedCellstobeUpdatedListValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdActivatedCellstobeUpdatedListValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdActivatedCellstobeUpdatedListValidationError) ErrorName() string {
	return "IdActivatedCellstobeUpdatedListValidationError"
}

// Error satisfies the builtin error interface
func (e IdActivatedCellstobeUpdatedListValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdActivatedCellstobeUpdatedList.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdActivatedCellstobeUpdatedListValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdActivatedCellstobeUpdatedListValidationError{}

// Validate checks the field values on IdChildNodesList with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *IdChildNodesList) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdChildNodesList with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdChildNodesListMultiError, or nil if none found.
func (m *IdChildNodesList) ValidateAll() error {
	return m.validate(true)
}

func (m *IdChildNodesList) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 289 {
		err := IdChildNodesListValidationError{
			field:  "Value",
			reason: "value must equal 289",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdChildNodesListMultiError(errors)
	}

	return nil
}

// IdChildNodesListMultiError is an error wrapping multiple validation errors
// returned by IdChildNodesList.ValidateAll() if the designated constraints
// aren't met.
type IdChildNodesListMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdChildNodesListMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdChildNodesListMultiError) AllErrors() []error { return m }

// IdChildNodesListValidationError is the validation error returned by
// IdChildNodesList.Validate if the designated constraints aren't met.
type IdChildNodesListValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdChildNodesListValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdChildNodesListValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdChildNodesListValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdChildNodesListValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdChildNodesListValidationError) ErrorName() string { return "IdChildNodesListValidationError" }

// Error satisfies the builtin error interface
func (e IdChildNodesListValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdChildNodesList.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdChildNodesListValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdChildNodesListValidationError{}

// Validate checks the field values on IdIAbInfoIAbDU with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *IdIAbInfoIAbDU) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdIAbInfoIAbDU with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in IdIAbInfoIAbDUMultiError,
// or nil if none found.
func (m *IdIAbInfoIAbDU) ValidateAll() error {
	return m.validate(true)
}

func (m *IdIAbInfoIAbDU) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 290 {
		err := IdIAbInfoIAbDUValidationError{
			field:  "Value",
			reason: "value must equal 290",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdIAbInfoIAbDUMultiError(errors)
	}

	return nil
}

// IdIAbInfoIAbDUMultiError is an error wrapping multiple validation errors
// returned by IdIAbInfoIAbDU.ValidateAll() if the designated constraints
// aren't met.
type IdIAbInfoIAbDUMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdIAbInfoIAbDUMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdIAbInfoIAbDUMultiError) AllErrors() []error { return m }

// IdIAbInfoIAbDUValidationError is the validation error returned by
// IdIAbInfoIAbDU.Validate if the designated constraints aren't met.
type IdIAbInfoIAbDUValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdIAbInfoIAbDUValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdIAbInfoIAbDUValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdIAbInfoIAbDUValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdIAbInfoIAbDUValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdIAbInfoIAbDUValidationError) ErrorName() string { return "IdIAbInfoIAbDUValidationError" }

// Error satisfies the builtin error interface
func (e IdIAbInfoIAbDUValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdIAbInfoIAbDU.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdIAbInfoIAbDUValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdIAbInfoIAbDUValidationError{}

// Validate checks the field values on IdIAbInfoIAbdonorCU with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdIAbInfoIAbdonorCU) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdIAbInfoIAbdonorCU with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdIAbInfoIAbdonorCUMultiError, or nil if none found.
func (m *IdIAbInfoIAbdonorCU) ValidateAll() error {
	return m.validate(true)
}

func (m *IdIAbInfoIAbdonorCU) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 291 {
		err := IdIAbInfoIAbdonorCUValidationError{
			field:  "Value",
			reason: "value must equal 291",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdIAbInfoIAbdonorCUMultiError(errors)
	}

	return nil
}

// IdIAbInfoIAbdonorCUMultiError is an error wrapping multiple validation
// errors returned by IdIAbInfoIAbdonorCU.ValidateAll() if the designated
// constraints aren't met.
type IdIAbInfoIAbdonorCUMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdIAbInfoIAbdonorCUMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdIAbInfoIAbdonorCUMultiError) AllErrors() []error { return m }

// IdIAbInfoIAbdonorCUValidationError is the validation error returned by
// IdIAbInfoIAbdonorCU.Validate if the designated constraints aren't met.
type IdIAbInfoIAbdonorCUValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdIAbInfoIAbdonorCUValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdIAbInfoIAbdonorCUValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdIAbInfoIAbdonorCUValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdIAbInfoIAbdonorCUValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdIAbInfoIAbdonorCUValidationError) ErrorName() string {
	return "IdIAbInfoIAbdonorCUValidationError"
}

// Error satisfies the builtin error interface
func (e IdIAbInfoIAbdonorCUValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdIAbInfoIAbdonorCU.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdIAbInfoIAbdonorCUValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdIAbInfoIAbdonorCUValidationError{}

// Validate checks the field values on IdIAbTNlAddressesToRemoveList with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdIAbTNlAddressesToRemoveList) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdIAbTNlAddressesToRemoveList with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// IdIAbTNlAddressesToRemoveListMultiError, or nil if none found.
func (m *IdIAbTNlAddressesToRemoveList) ValidateAll() error {
	return m.validate(true)
}

func (m *IdIAbTNlAddressesToRemoveList) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 292 {
		err := IdIAbTNlAddressesToRemoveListValidationError{
			field:  "Value",
			reason: "value must equal 292",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdIAbTNlAddressesToRemoveListMultiError(errors)
	}

	return nil
}

// IdIAbTNlAddressesToRemoveListMultiError is an error wrapping multiple
// validation errors returned by IdIAbTNlAddressesToRemoveList.ValidateAll()
// if the designated constraints aren't met.
type IdIAbTNlAddressesToRemoveListMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdIAbTNlAddressesToRemoveListMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdIAbTNlAddressesToRemoveListMultiError) AllErrors() []error { return m }

// IdIAbTNlAddressesToRemoveListValidationError is the validation error
// returned by IdIAbTNlAddressesToRemoveList.Validate if the designated
// constraints aren't met.
type IdIAbTNlAddressesToRemoveListValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdIAbTNlAddressesToRemoveListValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdIAbTNlAddressesToRemoveListValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdIAbTNlAddressesToRemoveListValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdIAbTNlAddressesToRemoveListValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdIAbTNlAddressesToRemoveListValidationError) ErrorName() string {
	return "IdIAbTNlAddressesToRemoveListValidationError"
}

// Error satisfies the builtin error interface
func (e IdIAbTNlAddressesToRemoveListValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdIAbTNlAddressesToRemoveList.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdIAbTNlAddressesToRemoveListValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdIAbTNlAddressesToRemoveListValidationError{}

// Validate checks the field values on IdIAbTNlAddressesToRemoveItem with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdIAbTNlAddressesToRemoveItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdIAbTNlAddressesToRemoveItem with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// IdIAbTNlAddressesToRemoveItemMultiError, or nil if none found.
func (m *IdIAbTNlAddressesToRemoveItem) ValidateAll() error {
	return m.validate(true)
}

func (m *IdIAbTNlAddressesToRemoveItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 293 {
		err := IdIAbTNlAddressesToRemoveItemValidationError{
			field:  "Value",
			reason: "value must equal 293",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdIAbTNlAddressesToRemoveItemMultiError(errors)
	}

	return nil
}

// IdIAbTNlAddressesToRemoveItemMultiError is an error wrapping multiple
// validation errors returned by IdIAbTNlAddressesToRemoveItem.ValidateAll()
// if the designated constraints aren't met.
type IdIAbTNlAddressesToRemoveItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdIAbTNlAddressesToRemoveItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdIAbTNlAddressesToRemoveItemMultiError) AllErrors() []error { return m }

// IdIAbTNlAddressesToRemoveItemValidationError is the validation error
// returned by IdIAbTNlAddressesToRemoveItem.Validate if the designated
// constraints aren't met.
type IdIAbTNlAddressesToRemoveItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdIAbTNlAddressesToRemoveItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdIAbTNlAddressesToRemoveItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdIAbTNlAddressesToRemoveItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdIAbTNlAddressesToRemoveItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdIAbTNlAddressesToRemoveItemValidationError) ErrorName() string {
	return "IdIAbTNlAddressesToRemoveItemValidationError"
}

// Error satisfies the builtin error interface
func (e IdIAbTNlAddressesToRemoveItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdIAbTNlAddressesToRemoveItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdIAbTNlAddressesToRemoveItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdIAbTNlAddressesToRemoveItemValidationError{}

// Validate checks the field values on IdIAbAllocatedTNlAddressList with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdIAbAllocatedTNlAddressList) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdIAbAllocatedTNlAddressList with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdIAbAllocatedTNlAddressListMultiError, or nil if none found.
func (m *IdIAbAllocatedTNlAddressList) ValidateAll() error {
	return m.validate(true)
}

func (m *IdIAbAllocatedTNlAddressList) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 294 {
		err := IdIAbAllocatedTNlAddressListValidationError{
			field:  "Value",
			reason: "value must equal 294",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdIAbAllocatedTNlAddressListMultiError(errors)
	}

	return nil
}

// IdIAbAllocatedTNlAddressListMultiError is an error wrapping multiple
// validation errors returned by IdIAbAllocatedTNlAddressList.ValidateAll() if
// the designated constraints aren't met.
type IdIAbAllocatedTNlAddressListMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdIAbAllocatedTNlAddressListMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdIAbAllocatedTNlAddressListMultiError) AllErrors() []error { return m }

// IdIAbAllocatedTNlAddressListValidationError is the validation error returned
// by IdIAbAllocatedTNlAddressList.Validate if the designated constraints
// aren't met.
type IdIAbAllocatedTNlAddressListValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdIAbAllocatedTNlAddressListValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdIAbAllocatedTNlAddressListValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdIAbAllocatedTNlAddressListValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdIAbAllocatedTNlAddressListValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdIAbAllocatedTNlAddressListValidationError) ErrorName() string {
	return "IdIAbAllocatedTNlAddressListValidationError"
}

// Error satisfies the builtin error interface
func (e IdIAbAllocatedTNlAddressListValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdIAbAllocatedTNlAddressList.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdIAbAllocatedTNlAddressListValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdIAbAllocatedTNlAddressListValidationError{}

// Validate checks the field values on IdIAbAllocatedTNlAddressItem with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdIAbAllocatedTNlAddressItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdIAbAllocatedTNlAddressItem with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdIAbAllocatedTNlAddressItemMultiError, or nil if none found.
func (m *IdIAbAllocatedTNlAddressItem) ValidateAll() error {
	return m.validate(true)
}

func (m *IdIAbAllocatedTNlAddressItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 295 {
		err := IdIAbAllocatedTNlAddressItemValidationError{
			field:  "Value",
			reason: "value must equal 295",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdIAbAllocatedTNlAddressItemMultiError(errors)
	}

	return nil
}

// IdIAbAllocatedTNlAddressItemMultiError is an error wrapping multiple
// validation errors returned by IdIAbAllocatedTNlAddressItem.ValidateAll() if
// the designated constraints aren't met.
type IdIAbAllocatedTNlAddressItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdIAbAllocatedTNlAddressItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdIAbAllocatedTNlAddressItemMultiError) AllErrors() []error { return m }

// IdIAbAllocatedTNlAddressItemValidationError is the validation error returned
// by IdIAbAllocatedTNlAddressItem.Validate if the designated constraints
// aren't met.
type IdIAbAllocatedTNlAddressItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdIAbAllocatedTNlAddressItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdIAbAllocatedTNlAddressItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdIAbAllocatedTNlAddressItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdIAbAllocatedTNlAddressItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdIAbAllocatedTNlAddressItemValidationError) ErrorName() string {
	return "IdIAbAllocatedTNlAddressItemValidationError"
}

// Error satisfies the builtin error interface
func (e IdIAbAllocatedTNlAddressItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdIAbAllocatedTNlAddressItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdIAbAllocatedTNlAddressItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdIAbAllocatedTNlAddressItemValidationError{}

// Validate checks the field values on IdIAbipv6RequestType with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdIAbipv6RequestType) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdIAbipv6RequestType with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdIAbipv6RequestTypeMultiError, or nil if none found.
func (m *IdIAbipv6RequestType) ValidateAll() error {
	return m.validate(true)
}

func (m *IdIAbipv6RequestType) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 296 {
		err := IdIAbipv6RequestTypeValidationError{
			field:  "Value",
			reason: "value must equal 296",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdIAbipv6RequestTypeMultiError(errors)
	}

	return nil
}

// IdIAbipv6RequestTypeMultiError is an error wrapping multiple validation
// errors returned by IdIAbipv6RequestType.ValidateAll() if the designated
// constraints aren't met.
type IdIAbipv6RequestTypeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdIAbipv6RequestTypeMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdIAbipv6RequestTypeMultiError) AllErrors() []error { return m }

// IdIAbipv6RequestTypeValidationError is the validation error returned by
// IdIAbipv6RequestType.Validate if the designated constraints aren't met.
type IdIAbipv6RequestTypeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdIAbipv6RequestTypeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdIAbipv6RequestTypeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdIAbipv6RequestTypeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdIAbipv6RequestTypeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdIAbipv6RequestTypeValidationError) ErrorName() string {
	return "IdIAbipv6RequestTypeValidationError"
}

// Error satisfies the builtin error interface
func (e IdIAbipv6RequestTypeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdIAbipv6RequestType.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdIAbipv6RequestTypeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdIAbipv6RequestTypeValidationError{}

// Validate checks the field values on IdIAbv4AddressesRequested with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdIAbv4AddressesRequested) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdIAbv4AddressesRequested with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdIAbv4AddressesRequestedMultiError, or nil if none found.
func (m *IdIAbv4AddressesRequested) ValidateAll() error {
	return m.validate(true)
}

func (m *IdIAbv4AddressesRequested) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 297 {
		err := IdIAbv4AddressesRequestedValidationError{
			field:  "Value",
			reason: "value must equal 297",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdIAbv4AddressesRequestedMultiError(errors)
	}

	return nil
}

// IdIAbv4AddressesRequestedMultiError is an error wrapping multiple validation
// errors returned by IdIAbv4AddressesRequested.ValidateAll() if the
// designated constraints aren't met.
type IdIAbv4AddressesRequestedMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdIAbv4AddressesRequestedMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdIAbv4AddressesRequestedMultiError) AllErrors() []error { return m }

// IdIAbv4AddressesRequestedValidationError is the validation error returned by
// IdIAbv4AddressesRequested.Validate if the designated constraints aren't met.
type IdIAbv4AddressesRequestedValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdIAbv4AddressesRequestedValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdIAbv4AddressesRequestedValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdIAbv4AddressesRequestedValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdIAbv4AddressesRequestedValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdIAbv4AddressesRequestedValidationError) ErrorName() string {
	return "IdIAbv4AddressesRequestedValidationError"
}

// Error satisfies the builtin error interface
func (e IdIAbv4AddressesRequestedValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdIAbv4AddressesRequested.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdIAbv4AddressesRequestedValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdIAbv4AddressesRequestedValidationError{}

// Validate checks the field values on IdIAbBarred with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *IdIAbBarred) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdIAbBarred with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in IdIAbBarredMultiError, or
// nil if none found.
func (m *IdIAbBarred) ValidateAll() error {
	return m.validate(true)
}

func (m *IdIAbBarred) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 298 {
		err := IdIAbBarredValidationError{
			field:  "Value",
			reason: "value must equal 298",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdIAbBarredMultiError(errors)
	}

	return nil
}

// IdIAbBarredMultiError is an error wrapping multiple validation errors
// returned by IdIAbBarred.ValidateAll() if the designated constraints aren't met.
type IdIAbBarredMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdIAbBarredMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdIAbBarredMultiError) AllErrors() []error { return m }

// IdIAbBarredValidationError is the validation error returned by
// IdIAbBarred.Validate if the designated constraints aren't met.
type IdIAbBarredValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdIAbBarredValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdIAbBarredValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdIAbBarredValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdIAbBarredValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdIAbBarredValidationError) ErrorName() string { return "IdIAbBarredValidationError" }

// Error satisfies the builtin error interface
func (e IdIAbBarredValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdIAbBarred.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdIAbBarredValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdIAbBarredValidationError{}

// Validate checks the field values on IdTrafficMappingInformation with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdTrafficMappingInformation) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdTrafficMappingInformation with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdTrafficMappingInformationMultiError, or nil if none found.
func (m *IdTrafficMappingInformation) ValidateAll() error {
	return m.validate(true)
}

func (m *IdTrafficMappingInformation) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 299 {
		err := IdTrafficMappingInformationValidationError{
			field:  "Value",
			reason: "value must equal 299",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdTrafficMappingInformationMultiError(errors)
	}

	return nil
}

// IdTrafficMappingInformationMultiError is an error wrapping multiple
// validation errors returned by IdTrafficMappingInformation.ValidateAll() if
// the designated constraints aren't met.
type IdTrafficMappingInformationMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdTrafficMappingInformationMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdTrafficMappingInformationMultiError) AllErrors() []error { return m }

// IdTrafficMappingInformationValidationError is the validation error returned
// by IdTrafficMappingInformation.Validate if the designated constraints
// aren't met.
type IdTrafficMappingInformationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdTrafficMappingInformationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdTrafficMappingInformationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdTrafficMappingInformationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdTrafficMappingInformationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdTrafficMappingInformationValidationError) ErrorName() string {
	return "IdTrafficMappingInformationValidationError"
}

// Error satisfies the builtin error interface
func (e IdTrafficMappingInformationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdTrafficMappingInformation.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdTrafficMappingInformationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdTrafficMappingInformationValidationError{}

// Validate checks the field values on IdULUPTNlInformationtoUpdateList with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *IdULUPTNlInformationtoUpdateList) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdULUPTNlInformationtoUpdateList with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// IdULUPTNlInformationtoUpdateListMultiError, or nil if none found.
func (m *IdULUPTNlInformationtoUpdateList) ValidateAll() error {
	return m.validate(true)
}

func (m *IdULUPTNlInformationtoUpdateList) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 300 {
		err := IdULUPTNlInformationtoUpdateListValidationError{
			field:  "Value",
			reason: "value must equal 300",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdULUPTNlInformationtoUpdateListMultiError(errors)
	}

	return nil
}

// IdULUPTNlInformationtoUpdateListMultiError is an error wrapping multiple
// validation errors returned by
// IdULUPTNlInformationtoUpdateList.ValidateAll() if the designated
// constraints aren't met.
type IdULUPTNlInformationtoUpdateListMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdULUPTNlInformationtoUpdateListMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdULUPTNlInformationtoUpdateListMultiError) AllErrors() []error { return m }

// IdULUPTNlInformationtoUpdateListValidationError is the validation error
// returned by IdULUPTNlInformationtoUpdateList.Validate if the designated
// constraints aren't met.
type IdULUPTNlInformationtoUpdateListValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdULUPTNlInformationtoUpdateListValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdULUPTNlInformationtoUpdateListValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdULUPTNlInformationtoUpdateListValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdULUPTNlInformationtoUpdateListValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdULUPTNlInformationtoUpdateListValidationError) ErrorName() string {
	return "IdULUPTNlInformationtoUpdateListValidationError"
}

// Error satisfies the builtin error interface
func (e IdULUPTNlInformationtoUpdateListValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdULUPTNlInformationtoUpdateList.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdULUPTNlInformationtoUpdateListValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdULUPTNlInformationtoUpdateListValidationError{}

// Validate checks the field values on IdULUPTNlInformationtoUpdateListItem
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *IdULUPTNlInformationtoUpdateListItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdULUPTNlInformationtoUpdateListItem
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// IdULUPTNlInformationtoUpdateListItemMultiError, or nil if none found.
func (m *IdULUPTNlInformationtoUpdateListItem) ValidateAll() error {
	return m.validate(true)
}

func (m *IdULUPTNlInformationtoUpdateListItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 301 {
		err := IdULUPTNlInformationtoUpdateListItemValidationError{
			field:  "Value",
			reason: "value must equal 301",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdULUPTNlInformationtoUpdateListItemMultiError(errors)
	}

	return nil
}

// IdULUPTNlInformationtoUpdateListItemMultiError is an error wrapping multiple
// validation errors returned by
// IdULUPTNlInformationtoUpdateListItem.ValidateAll() if the designated
// constraints aren't met.
type IdULUPTNlInformationtoUpdateListItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdULUPTNlInformationtoUpdateListItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdULUPTNlInformationtoUpdateListItemMultiError) AllErrors() []error { return m }

// IdULUPTNlInformationtoUpdateListItemValidationError is the validation error
// returned by IdULUPTNlInformationtoUpdateListItem.Validate if the designated
// constraints aren't met.
type IdULUPTNlInformationtoUpdateListItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdULUPTNlInformationtoUpdateListItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdULUPTNlInformationtoUpdateListItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdULUPTNlInformationtoUpdateListItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdULUPTNlInformationtoUpdateListItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdULUPTNlInformationtoUpdateListItemValidationError) ErrorName() string {
	return "IdULUPTNlInformationtoUpdateListItemValidationError"
}

// Error satisfies the builtin error interface
func (e IdULUPTNlInformationtoUpdateListItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdULUPTNlInformationtoUpdateListItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdULUPTNlInformationtoUpdateListItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdULUPTNlInformationtoUpdateListItemValidationError{}

// Validate checks the field values on IdULUPTNlAddresstoUpdateList with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdULUPTNlAddresstoUpdateList) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdULUPTNlAddresstoUpdateList with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdULUPTNlAddresstoUpdateListMultiError, or nil if none found.
func (m *IdULUPTNlAddresstoUpdateList) ValidateAll() error {
	return m.validate(true)
}

func (m *IdULUPTNlAddresstoUpdateList) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 302 {
		err := IdULUPTNlAddresstoUpdateListValidationError{
			field:  "Value",
			reason: "value must equal 302",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdULUPTNlAddresstoUpdateListMultiError(errors)
	}

	return nil
}

// IdULUPTNlAddresstoUpdateListMultiError is an error wrapping multiple
// validation errors returned by IdULUPTNlAddresstoUpdateList.ValidateAll() if
// the designated constraints aren't met.
type IdULUPTNlAddresstoUpdateListMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdULUPTNlAddresstoUpdateListMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdULUPTNlAddresstoUpdateListMultiError) AllErrors() []error { return m }

// IdULUPTNlAddresstoUpdateListValidationError is the validation error returned
// by IdULUPTNlAddresstoUpdateList.Validate if the designated constraints
// aren't met.
type IdULUPTNlAddresstoUpdateListValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdULUPTNlAddresstoUpdateListValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdULUPTNlAddresstoUpdateListValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdULUPTNlAddresstoUpdateListValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdULUPTNlAddresstoUpdateListValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdULUPTNlAddresstoUpdateListValidationError) ErrorName() string {
	return "IdULUPTNlAddresstoUpdateListValidationError"
}

// Error satisfies the builtin error interface
func (e IdULUPTNlAddresstoUpdateListValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdULUPTNlAddresstoUpdateList.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdULUPTNlAddresstoUpdateListValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdULUPTNlAddresstoUpdateListValidationError{}

// Validate checks the field values on IdULUPTNlAddresstoUpdateListItem with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *IdULUPTNlAddresstoUpdateListItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdULUPTNlAddresstoUpdateListItem with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// IdULUPTNlAddresstoUpdateListItemMultiError, or nil if none found.
func (m *IdULUPTNlAddresstoUpdateListItem) ValidateAll() error {
	return m.validate(true)
}

func (m *IdULUPTNlAddresstoUpdateListItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 303 {
		err := IdULUPTNlAddresstoUpdateListItemValidationError{
			field:  "Value",
			reason: "value must equal 303",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdULUPTNlAddresstoUpdateListItemMultiError(errors)
	}

	return nil
}

// IdULUPTNlAddresstoUpdateListItemMultiError is an error wrapping multiple
// validation errors returned by
// IdULUPTNlAddresstoUpdateListItem.ValidateAll() if the designated
// constraints aren't met.
type IdULUPTNlAddresstoUpdateListItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdULUPTNlAddresstoUpdateListItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdULUPTNlAddresstoUpdateListItemMultiError) AllErrors() []error { return m }

// IdULUPTNlAddresstoUpdateListItemValidationError is the validation error
// returned by IdULUPTNlAddresstoUpdateListItem.Validate if the designated
// constraints aren't met.
type IdULUPTNlAddresstoUpdateListItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdULUPTNlAddresstoUpdateListItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdULUPTNlAddresstoUpdateListItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdULUPTNlAddresstoUpdateListItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdULUPTNlAddresstoUpdateListItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdULUPTNlAddresstoUpdateListItemValidationError) ErrorName() string {
	return "IdULUPTNlAddresstoUpdateListItemValidationError"
}

// Error satisfies the builtin error interface
func (e IdULUPTNlAddresstoUpdateListItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdULUPTNlAddresstoUpdateListItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdULUPTNlAddresstoUpdateListItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdULUPTNlAddresstoUpdateListItemValidationError{}

// Validate checks the field values on IdDLUPTNlAddresstoUpdateList with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdDLUPTNlAddresstoUpdateList) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdDLUPTNlAddresstoUpdateList with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdDLUPTNlAddresstoUpdateListMultiError, or nil if none found.
func (m *IdDLUPTNlAddresstoUpdateList) ValidateAll() error {
	return m.validate(true)
}

func (m *IdDLUPTNlAddresstoUpdateList) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 304 {
		err := IdDLUPTNlAddresstoUpdateListValidationError{
			field:  "Value",
			reason: "value must equal 304",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdDLUPTNlAddresstoUpdateListMultiError(errors)
	}

	return nil
}

// IdDLUPTNlAddresstoUpdateListMultiError is an error wrapping multiple
// validation errors returned by IdDLUPTNlAddresstoUpdateList.ValidateAll() if
// the designated constraints aren't met.
type IdDLUPTNlAddresstoUpdateListMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdDLUPTNlAddresstoUpdateListMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdDLUPTNlAddresstoUpdateListMultiError) AllErrors() []error { return m }

// IdDLUPTNlAddresstoUpdateListValidationError is the validation error returned
// by IdDLUPTNlAddresstoUpdateList.Validate if the designated constraints
// aren't met.
type IdDLUPTNlAddresstoUpdateListValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdDLUPTNlAddresstoUpdateListValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdDLUPTNlAddresstoUpdateListValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdDLUPTNlAddresstoUpdateListValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdDLUPTNlAddresstoUpdateListValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdDLUPTNlAddresstoUpdateListValidationError) ErrorName() string {
	return "IdDLUPTNlAddresstoUpdateListValidationError"
}

// Error satisfies the builtin error interface
func (e IdDLUPTNlAddresstoUpdateListValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdDLUPTNlAddresstoUpdateList.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdDLUPTNlAddresstoUpdateListValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdDLUPTNlAddresstoUpdateListValidationError{}

// Validate checks the field values on IdDLUPTNlAddresstoUpdateListItem with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *IdDLUPTNlAddresstoUpdateListItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdDLUPTNlAddresstoUpdateListItem with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// IdDLUPTNlAddresstoUpdateListItemMultiError, or nil if none found.
func (m *IdDLUPTNlAddresstoUpdateListItem) ValidateAll() error {
	return m.validate(true)
}

func (m *IdDLUPTNlAddresstoUpdateListItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 305 {
		err := IdDLUPTNlAddresstoUpdateListItemValidationError{
			field:  "Value",
			reason: "value must equal 305",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdDLUPTNlAddresstoUpdateListItemMultiError(errors)
	}

	return nil
}

// IdDLUPTNlAddresstoUpdateListItemMultiError is an error wrapping multiple
// validation errors returned by
// IdDLUPTNlAddresstoUpdateListItem.ValidateAll() if the designated
// constraints aren't met.
type IdDLUPTNlAddresstoUpdateListItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdDLUPTNlAddresstoUpdateListItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdDLUPTNlAddresstoUpdateListItemMultiError) AllErrors() []error { return m }

// IdDLUPTNlAddresstoUpdateListItemValidationError is the validation error
// returned by IdDLUPTNlAddresstoUpdateListItem.Validate if the designated
// constraints aren't met.
type IdDLUPTNlAddresstoUpdateListItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdDLUPTNlAddresstoUpdateListItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdDLUPTNlAddresstoUpdateListItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdDLUPTNlAddresstoUpdateListItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdDLUPTNlAddresstoUpdateListItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdDLUPTNlAddresstoUpdateListItemValidationError) ErrorName() string {
	return "IdDLUPTNlAddresstoUpdateListItemValidationError"
}

// Error satisfies the builtin error interface
func (e IdDLUPTNlAddresstoUpdateListItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdDLUPTNlAddresstoUpdateListItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdDLUPTNlAddresstoUpdateListItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdDLUPTNlAddresstoUpdateListItemValidationError{}

// Validate checks the field values on IdNRv2XservicesAuthorized with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdNRv2XservicesAuthorized) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdNRv2XservicesAuthorized with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdNRv2XservicesAuthorizedMultiError, or nil if none found.
func (m *IdNRv2XservicesAuthorized) ValidateAll() error {
	return m.validate(true)
}

func (m *IdNRv2XservicesAuthorized) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 306 {
		err := IdNRv2XservicesAuthorizedValidationError{
			field:  "Value",
			reason: "value must equal 306",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdNRv2XservicesAuthorizedMultiError(errors)
	}

	return nil
}

// IdNRv2XservicesAuthorizedMultiError is an error wrapping multiple validation
// errors returned by IdNRv2XservicesAuthorized.ValidateAll() if the
// designated constraints aren't met.
type IdNRv2XservicesAuthorizedMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdNRv2XservicesAuthorizedMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdNRv2XservicesAuthorizedMultiError) AllErrors() []error { return m }

// IdNRv2XservicesAuthorizedValidationError is the validation error returned by
// IdNRv2XservicesAuthorized.Validate if the designated constraints aren't met.
type IdNRv2XservicesAuthorizedValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdNRv2XservicesAuthorizedValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdNRv2XservicesAuthorizedValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdNRv2XservicesAuthorizedValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdNRv2XservicesAuthorizedValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdNRv2XservicesAuthorizedValidationError) ErrorName() string {
	return "IdNRv2XservicesAuthorizedValidationError"
}

// Error satisfies the builtin error interface
func (e IdNRv2XservicesAuthorizedValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdNRv2XservicesAuthorized.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdNRv2XservicesAuthorizedValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdNRv2XservicesAuthorizedValidationError{}

// Validate checks the field values on IdLTev2XservicesAuthorized with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdLTev2XservicesAuthorized) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdLTev2XservicesAuthorized with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdLTev2XservicesAuthorizedMultiError, or nil if none found.
func (m *IdLTev2XservicesAuthorized) ValidateAll() error {
	return m.validate(true)
}

func (m *IdLTev2XservicesAuthorized) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 307 {
		err := IdLTev2XservicesAuthorizedValidationError{
			field:  "Value",
			reason: "value must equal 307",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdLTev2XservicesAuthorizedMultiError(errors)
	}

	return nil
}

// IdLTev2XservicesAuthorizedMultiError is an error wrapping multiple
// validation errors returned by IdLTev2XservicesAuthorized.ValidateAll() if
// the designated constraints aren't met.
type IdLTev2XservicesAuthorizedMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdLTev2XservicesAuthorizedMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdLTev2XservicesAuthorizedMultiError) AllErrors() []error { return m }

// IdLTev2XservicesAuthorizedValidationError is the validation error returned
// by IdLTev2XservicesAuthorized.Validate if the designated constraints aren't met.
type IdLTev2XservicesAuthorizedValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdLTev2XservicesAuthorizedValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdLTev2XservicesAuthorizedValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdLTev2XservicesAuthorizedValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdLTev2XservicesAuthorizedValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdLTev2XservicesAuthorizedValidationError) ErrorName() string {
	return "IdLTev2XservicesAuthorizedValidationError"
}

// Error satisfies the builtin error interface
func (e IdLTev2XservicesAuthorizedValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdLTev2XservicesAuthorized.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdLTev2XservicesAuthorizedValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdLTev2XservicesAuthorizedValidationError{}

// Validate checks the field values on IdNRuesidelinkAggregateMaximumBitrate
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *IdNRuesidelinkAggregateMaximumBitrate) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdNRuesidelinkAggregateMaximumBitrate
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// IdNRuesidelinkAggregateMaximumBitrateMultiError, or nil if none found.
func (m *IdNRuesidelinkAggregateMaximumBitrate) ValidateAll() error {
	return m.validate(true)
}

func (m *IdNRuesidelinkAggregateMaximumBitrate) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 308 {
		err := IdNRuesidelinkAggregateMaximumBitrateValidationError{
			field:  "Value",
			reason: "value must equal 308",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdNRuesidelinkAggregateMaximumBitrateMultiError(errors)
	}

	return nil
}

// IdNRuesidelinkAggregateMaximumBitrateMultiError is an error wrapping
// multiple validation errors returned by
// IdNRuesidelinkAggregateMaximumBitrate.ValidateAll() if the designated
// constraints aren't met.
type IdNRuesidelinkAggregateMaximumBitrateMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdNRuesidelinkAggregateMaximumBitrateMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdNRuesidelinkAggregateMaximumBitrateMultiError) AllErrors() []error { return m }

// IdNRuesidelinkAggregateMaximumBitrateValidationError is the validation error
// returned by IdNRuesidelinkAggregateMaximumBitrate.Validate if the
// designated constraints aren't met.
type IdNRuesidelinkAggregateMaximumBitrateValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdNRuesidelinkAggregateMaximumBitrateValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdNRuesidelinkAggregateMaximumBitrateValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdNRuesidelinkAggregateMaximumBitrateValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdNRuesidelinkAggregateMaximumBitrateValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdNRuesidelinkAggregateMaximumBitrateValidationError) ErrorName() string {
	return "IdNRuesidelinkAggregateMaximumBitrateValidationError"
}

// Error satisfies the builtin error interface
func (e IdNRuesidelinkAggregateMaximumBitrateValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdNRuesidelinkAggregateMaximumBitrate.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdNRuesidelinkAggregateMaximumBitrateValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdNRuesidelinkAggregateMaximumBitrateValidationError{}

// Validate checks the field values on IdLTeuesidelinkAggregateMaximumBitrate
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *IdLTeuesidelinkAggregateMaximumBitrate) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// IdLTeuesidelinkAggregateMaximumBitrate with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// IdLTeuesidelinkAggregateMaximumBitrateMultiError, or nil if none found.
func (m *IdLTeuesidelinkAggregateMaximumBitrate) ValidateAll() error {
	return m.validate(true)
}

func (m *IdLTeuesidelinkAggregateMaximumBitrate) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 309 {
		err := IdLTeuesidelinkAggregateMaximumBitrateValidationError{
			field:  "Value",
			reason: "value must equal 309",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdLTeuesidelinkAggregateMaximumBitrateMultiError(errors)
	}

	return nil
}

// IdLTeuesidelinkAggregateMaximumBitrateMultiError is an error wrapping
// multiple validation errors returned by
// IdLTeuesidelinkAggregateMaximumBitrate.ValidateAll() if the designated
// constraints aren't met.
type IdLTeuesidelinkAggregateMaximumBitrateMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdLTeuesidelinkAggregateMaximumBitrateMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdLTeuesidelinkAggregateMaximumBitrateMultiError) AllErrors() []error { return m }

// IdLTeuesidelinkAggregateMaximumBitrateValidationError is the validation
// error returned by IdLTeuesidelinkAggregateMaximumBitrate.Validate if the
// designated constraints aren't met.
type IdLTeuesidelinkAggregateMaximumBitrateValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdLTeuesidelinkAggregateMaximumBitrateValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdLTeuesidelinkAggregateMaximumBitrateValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdLTeuesidelinkAggregateMaximumBitrateValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdLTeuesidelinkAggregateMaximumBitrateValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdLTeuesidelinkAggregateMaximumBitrateValidationError) ErrorName() string {
	return "IdLTeuesidelinkAggregateMaximumBitrateValidationError"
}

// Error satisfies the builtin error interface
func (e IdLTeuesidelinkAggregateMaximumBitrateValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdLTeuesidelinkAggregateMaximumBitrate.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdLTeuesidelinkAggregateMaximumBitrateValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdLTeuesidelinkAggregateMaximumBitrateValidationError{}

// Validate checks the field values on IdSIb12Message with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *IdSIb12Message) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdSIb12Message with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in IdSIb12MessageMultiError,
// or nil if none found.
func (m *IdSIb12Message) ValidateAll() error {
	return m.validate(true)
}

func (m *IdSIb12Message) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 310 {
		err := IdSIb12MessageValidationError{
			field:  "Value",
			reason: "value must equal 310",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdSIb12MessageMultiError(errors)
	}

	return nil
}

// IdSIb12MessageMultiError is an error wrapping multiple validation errors
// returned by IdSIb12Message.ValidateAll() if the designated constraints
// aren't met.
type IdSIb12MessageMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdSIb12MessageMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdSIb12MessageMultiError) AllErrors() []error { return m }

// IdSIb12MessageValidationError is the validation error returned by
// IdSIb12Message.Validate if the designated constraints aren't met.
type IdSIb12MessageValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdSIb12MessageValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdSIb12MessageValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdSIb12MessageValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdSIb12MessageValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdSIb12MessageValidationError) ErrorName() string { return "IdSIb12MessageValidationError" }

// Error satisfies the builtin error interface
func (e IdSIb12MessageValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdSIb12Message.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdSIb12MessageValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdSIb12MessageValidationError{}

// Validate checks the field values on IdSIb13Message with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *IdSIb13Message) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdSIb13Message with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in IdSIb13MessageMultiError,
// or nil if none found.
func (m *IdSIb13Message) ValidateAll() error {
	return m.validate(true)
}

func (m *IdSIb13Message) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 311 {
		err := IdSIb13MessageValidationError{
			field:  "Value",
			reason: "value must equal 311",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdSIb13MessageMultiError(errors)
	}

	return nil
}

// IdSIb13MessageMultiError is an error wrapping multiple validation errors
// returned by IdSIb13Message.ValidateAll() if the designated constraints
// aren't met.
type IdSIb13MessageMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdSIb13MessageMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdSIb13MessageMultiError) AllErrors() []error { return m }

// IdSIb13MessageValidationError is the validation error returned by
// IdSIb13Message.Validate if the designated constraints aren't met.
type IdSIb13MessageValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdSIb13MessageValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdSIb13MessageValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdSIb13MessageValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdSIb13MessageValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdSIb13MessageValidationError) ErrorName() string { return "IdSIb13MessageValidationError" }

// Error satisfies the builtin error interface
func (e IdSIb13MessageValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdSIb13Message.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdSIb13MessageValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdSIb13MessageValidationError{}

// Validate checks the field values on IdSIb14Message with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *IdSIb14Message) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdSIb14Message with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in IdSIb14MessageMultiError,
// or nil if none found.
func (m *IdSIb14Message) ValidateAll() error {
	return m.validate(true)
}

func (m *IdSIb14Message) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 312 {
		err := IdSIb14MessageValidationError{
			field:  "Value",
			reason: "value must equal 312",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdSIb14MessageMultiError(errors)
	}

	return nil
}

// IdSIb14MessageMultiError is an error wrapping multiple validation errors
// returned by IdSIb14Message.ValidateAll() if the designated constraints
// aren't met.
type IdSIb14MessageMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdSIb14MessageMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdSIb14MessageMultiError) AllErrors() []error { return m }

// IdSIb14MessageValidationError is the validation error returned by
// IdSIb14Message.Validate if the designated constraints aren't met.
type IdSIb14MessageValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdSIb14MessageValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdSIb14MessageValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdSIb14MessageValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdSIb14MessageValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdSIb14MessageValidationError) ErrorName() string { return "IdSIb14MessageValidationError" }

// Error satisfies the builtin error interface
func (e IdSIb14MessageValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdSIb14Message.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdSIb14MessageValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdSIb14MessageValidationError{}

// Validate checks the field values on IdSLdrbsFailedToBeModifiedItem with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdSLdrbsFailedToBeModifiedItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdSLdrbsFailedToBeModifiedItem with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// IdSLdrbsFailedToBeModifiedItemMultiError, or nil if none found.
func (m *IdSLdrbsFailedToBeModifiedItem) ValidateAll() error {
	return m.validate(true)
}

func (m *IdSLdrbsFailedToBeModifiedItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 313 {
		err := IdSLdrbsFailedToBeModifiedItemValidationError{
			field:  "Value",
			reason: "value must equal 313",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdSLdrbsFailedToBeModifiedItemMultiError(errors)
	}

	return nil
}

// IdSLdrbsFailedToBeModifiedItemMultiError is an error wrapping multiple
// validation errors returned by IdSLdrbsFailedToBeModifiedItem.ValidateAll()
// if the designated constraints aren't met.
type IdSLdrbsFailedToBeModifiedItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdSLdrbsFailedToBeModifiedItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdSLdrbsFailedToBeModifiedItemMultiError) AllErrors() []error { return m }

// IdSLdrbsFailedToBeModifiedItemValidationError is the validation error
// returned by IdSLdrbsFailedToBeModifiedItem.Validate if the designated
// constraints aren't met.
type IdSLdrbsFailedToBeModifiedItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdSLdrbsFailedToBeModifiedItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdSLdrbsFailedToBeModifiedItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdSLdrbsFailedToBeModifiedItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdSLdrbsFailedToBeModifiedItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdSLdrbsFailedToBeModifiedItemValidationError) ErrorName() string {
	return "IdSLdrbsFailedToBeModifiedItemValidationError"
}

// Error satisfies the builtin error interface
func (e IdSLdrbsFailedToBeModifiedItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdSLdrbsFailedToBeModifiedItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdSLdrbsFailedToBeModifiedItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdSLdrbsFailedToBeModifiedItemValidationError{}

// Validate checks the field values on IdSLdrbsFailedToBeModifiedList with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdSLdrbsFailedToBeModifiedList) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdSLdrbsFailedToBeModifiedList with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// IdSLdrbsFailedToBeModifiedListMultiError, or nil if none found.
func (m *IdSLdrbsFailedToBeModifiedList) ValidateAll() error {
	return m.validate(true)
}

func (m *IdSLdrbsFailedToBeModifiedList) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 314 {
		err := IdSLdrbsFailedToBeModifiedListValidationError{
			field:  "Value",
			reason: "value must equal 314",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdSLdrbsFailedToBeModifiedListMultiError(errors)
	}

	return nil
}

// IdSLdrbsFailedToBeModifiedListMultiError is an error wrapping multiple
// validation errors returned by IdSLdrbsFailedToBeModifiedList.ValidateAll()
// if the designated constraints aren't met.
type IdSLdrbsFailedToBeModifiedListMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdSLdrbsFailedToBeModifiedListMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdSLdrbsFailedToBeModifiedListMultiError) AllErrors() []error { return m }

// IdSLdrbsFailedToBeModifiedListValidationError is the validation error
// returned by IdSLdrbsFailedToBeModifiedList.Validate if the designated
// constraints aren't met.
type IdSLdrbsFailedToBeModifiedListValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdSLdrbsFailedToBeModifiedListValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdSLdrbsFailedToBeModifiedListValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdSLdrbsFailedToBeModifiedListValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdSLdrbsFailedToBeModifiedListValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdSLdrbsFailedToBeModifiedListValidationError) ErrorName() string {
	return "IdSLdrbsFailedToBeModifiedListValidationError"
}

// Error satisfies the builtin error interface
func (e IdSLdrbsFailedToBeModifiedListValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdSLdrbsFailedToBeModifiedList.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdSLdrbsFailedToBeModifiedListValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdSLdrbsFailedToBeModifiedListValidationError{}

// Validate checks the field values on IdSLdrbsFailedToBeSetupItem with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdSLdrbsFailedToBeSetupItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdSLdrbsFailedToBeSetupItem with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdSLdrbsFailedToBeSetupItemMultiError, or nil if none found.
func (m *IdSLdrbsFailedToBeSetupItem) ValidateAll() error {
	return m.validate(true)
}

func (m *IdSLdrbsFailedToBeSetupItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 315 {
		err := IdSLdrbsFailedToBeSetupItemValidationError{
			field:  "Value",
			reason: "value must equal 315",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdSLdrbsFailedToBeSetupItemMultiError(errors)
	}

	return nil
}

// IdSLdrbsFailedToBeSetupItemMultiError is an error wrapping multiple
// validation errors returned by IdSLdrbsFailedToBeSetupItem.ValidateAll() if
// the designated constraints aren't met.
type IdSLdrbsFailedToBeSetupItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdSLdrbsFailedToBeSetupItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdSLdrbsFailedToBeSetupItemMultiError) AllErrors() []error { return m }

// IdSLdrbsFailedToBeSetupItemValidationError is the validation error returned
// by IdSLdrbsFailedToBeSetupItem.Validate if the designated constraints
// aren't met.
type IdSLdrbsFailedToBeSetupItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdSLdrbsFailedToBeSetupItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdSLdrbsFailedToBeSetupItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdSLdrbsFailedToBeSetupItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdSLdrbsFailedToBeSetupItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdSLdrbsFailedToBeSetupItemValidationError) ErrorName() string {
	return "IdSLdrbsFailedToBeSetupItemValidationError"
}

// Error satisfies the builtin error interface
func (e IdSLdrbsFailedToBeSetupItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdSLdrbsFailedToBeSetupItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdSLdrbsFailedToBeSetupItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdSLdrbsFailedToBeSetupItemValidationError{}

// Validate checks the field values on IdSLdrbsFailedToBeSetupList with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdSLdrbsFailedToBeSetupList) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdSLdrbsFailedToBeSetupList with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdSLdrbsFailedToBeSetupListMultiError, or nil if none found.
func (m *IdSLdrbsFailedToBeSetupList) ValidateAll() error {
	return m.validate(true)
}

func (m *IdSLdrbsFailedToBeSetupList) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 316 {
		err := IdSLdrbsFailedToBeSetupListValidationError{
			field:  "Value",
			reason: "value must equal 316",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdSLdrbsFailedToBeSetupListMultiError(errors)
	}

	return nil
}

// IdSLdrbsFailedToBeSetupListMultiError is an error wrapping multiple
// validation errors returned by IdSLdrbsFailedToBeSetupList.ValidateAll() if
// the designated constraints aren't met.
type IdSLdrbsFailedToBeSetupListMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdSLdrbsFailedToBeSetupListMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdSLdrbsFailedToBeSetupListMultiError) AllErrors() []error { return m }

// IdSLdrbsFailedToBeSetupListValidationError is the validation error returned
// by IdSLdrbsFailedToBeSetupList.Validate if the designated constraints
// aren't met.
type IdSLdrbsFailedToBeSetupListValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdSLdrbsFailedToBeSetupListValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdSLdrbsFailedToBeSetupListValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdSLdrbsFailedToBeSetupListValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdSLdrbsFailedToBeSetupListValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdSLdrbsFailedToBeSetupListValidationError) ErrorName() string {
	return "IdSLdrbsFailedToBeSetupListValidationError"
}

// Error satisfies the builtin error interface
func (e IdSLdrbsFailedToBeSetupListValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdSLdrbsFailedToBeSetupList.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdSLdrbsFailedToBeSetupListValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdSLdrbsFailedToBeSetupListValidationError{}

// Validate checks the field values on IdSLdrbsModifiedItem with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdSLdrbsModifiedItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdSLdrbsModifiedItem with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdSLdrbsModifiedItemMultiError, or nil if none found.
func (m *IdSLdrbsModifiedItem) ValidateAll() error {
	return m.validate(true)
}

func (m *IdSLdrbsModifiedItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 317 {
		err := IdSLdrbsModifiedItemValidationError{
			field:  "Value",
			reason: "value must equal 317",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdSLdrbsModifiedItemMultiError(errors)
	}

	return nil
}

// IdSLdrbsModifiedItemMultiError is an error wrapping multiple validation
// errors returned by IdSLdrbsModifiedItem.ValidateAll() if the designated
// constraints aren't met.
type IdSLdrbsModifiedItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdSLdrbsModifiedItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdSLdrbsModifiedItemMultiError) AllErrors() []error { return m }

// IdSLdrbsModifiedItemValidationError is the validation error returned by
// IdSLdrbsModifiedItem.Validate if the designated constraints aren't met.
type IdSLdrbsModifiedItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdSLdrbsModifiedItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdSLdrbsModifiedItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdSLdrbsModifiedItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdSLdrbsModifiedItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdSLdrbsModifiedItemValidationError) ErrorName() string {
	return "IdSLdrbsModifiedItemValidationError"
}

// Error satisfies the builtin error interface
func (e IdSLdrbsModifiedItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdSLdrbsModifiedItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdSLdrbsModifiedItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdSLdrbsModifiedItemValidationError{}

// Validate checks the field values on IdSLdrbsModifiedList with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdSLdrbsModifiedList) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdSLdrbsModifiedList with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdSLdrbsModifiedListMultiError, or nil if none found.
func (m *IdSLdrbsModifiedList) ValidateAll() error {
	return m.validate(true)
}

func (m *IdSLdrbsModifiedList) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 318 {
		err := IdSLdrbsModifiedListValidationError{
			field:  "Value",
			reason: "value must equal 318",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdSLdrbsModifiedListMultiError(errors)
	}

	return nil
}

// IdSLdrbsModifiedListMultiError is an error wrapping multiple validation
// errors returned by IdSLdrbsModifiedList.ValidateAll() if the designated
// constraints aren't met.
type IdSLdrbsModifiedListMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdSLdrbsModifiedListMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdSLdrbsModifiedListMultiError) AllErrors() []error { return m }

// IdSLdrbsModifiedListValidationError is the validation error returned by
// IdSLdrbsModifiedList.Validate if the designated constraints aren't met.
type IdSLdrbsModifiedListValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdSLdrbsModifiedListValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdSLdrbsModifiedListValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdSLdrbsModifiedListValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdSLdrbsModifiedListValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdSLdrbsModifiedListValidationError) ErrorName() string {
	return "IdSLdrbsModifiedListValidationError"
}

// Error satisfies the builtin error interface
func (e IdSLdrbsModifiedListValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdSLdrbsModifiedList.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdSLdrbsModifiedListValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdSLdrbsModifiedListValidationError{}

// Validate checks the field values on IdSLdrbsRequiredToBeModifiedItem with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *IdSLdrbsRequiredToBeModifiedItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdSLdrbsRequiredToBeModifiedItem with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// IdSLdrbsRequiredToBeModifiedItemMultiError, or nil if none found.
func (m *IdSLdrbsRequiredToBeModifiedItem) ValidateAll() error {
	return m.validate(true)
}

func (m *IdSLdrbsRequiredToBeModifiedItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 319 {
		err := IdSLdrbsRequiredToBeModifiedItemValidationError{
			field:  "Value",
			reason: "value must equal 319",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdSLdrbsRequiredToBeModifiedItemMultiError(errors)
	}

	return nil
}

// IdSLdrbsRequiredToBeModifiedItemMultiError is an error wrapping multiple
// validation errors returned by
// IdSLdrbsRequiredToBeModifiedItem.ValidateAll() if the designated
// constraints aren't met.
type IdSLdrbsRequiredToBeModifiedItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdSLdrbsRequiredToBeModifiedItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdSLdrbsRequiredToBeModifiedItemMultiError) AllErrors() []error { return m }

// IdSLdrbsRequiredToBeModifiedItemValidationError is the validation error
// returned by IdSLdrbsRequiredToBeModifiedItem.Validate if the designated
// constraints aren't met.
type IdSLdrbsRequiredToBeModifiedItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdSLdrbsRequiredToBeModifiedItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdSLdrbsRequiredToBeModifiedItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdSLdrbsRequiredToBeModifiedItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdSLdrbsRequiredToBeModifiedItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdSLdrbsRequiredToBeModifiedItemValidationError) ErrorName() string {
	return "IdSLdrbsRequiredToBeModifiedItemValidationError"
}

// Error satisfies the builtin error interface
func (e IdSLdrbsRequiredToBeModifiedItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdSLdrbsRequiredToBeModifiedItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdSLdrbsRequiredToBeModifiedItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdSLdrbsRequiredToBeModifiedItemValidationError{}

// Validate checks the field values on IdSLdrbsRequiredToBeModifiedList with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *IdSLdrbsRequiredToBeModifiedList) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdSLdrbsRequiredToBeModifiedList with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// IdSLdrbsRequiredToBeModifiedListMultiError, or nil if none found.
func (m *IdSLdrbsRequiredToBeModifiedList) ValidateAll() error {
	return m.validate(true)
}

func (m *IdSLdrbsRequiredToBeModifiedList) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 320 {
		err := IdSLdrbsRequiredToBeModifiedListValidationError{
			field:  "Value",
			reason: "value must equal 320",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdSLdrbsRequiredToBeModifiedListMultiError(errors)
	}

	return nil
}

// IdSLdrbsRequiredToBeModifiedListMultiError is an error wrapping multiple
// validation errors returned by
// IdSLdrbsRequiredToBeModifiedList.ValidateAll() if the designated
// constraints aren't met.
type IdSLdrbsRequiredToBeModifiedListMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdSLdrbsRequiredToBeModifiedListMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdSLdrbsRequiredToBeModifiedListMultiError) AllErrors() []error { return m }

// IdSLdrbsRequiredToBeModifiedListValidationError is the validation error
// returned by IdSLdrbsRequiredToBeModifiedList.Validate if the designated
// constraints aren't met.
type IdSLdrbsRequiredToBeModifiedListValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdSLdrbsRequiredToBeModifiedListValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdSLdrbsRequiredToBeModifiedListValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdSLdrbsRequiredToBeModifiedListValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdSLdrbsRequiredToBeModifiedListValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdSLdrbsRequiredToBeModifiedListValidationError) ErrorName() string {
	return "IdSLdrbsRequiredToBeModifiedListValidationError"
}

// Error satisfies the builtin error interface
func (e IdSLdrbsRequiredToBeModifiedListValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdSLdrbsRequiredToBeModifiedList.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdSLdrbsRequiredToBeModifiedListValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdSLdrbsRequiredToBeModifiedListValidationError{}

// Validate checks the field values on IdSLdrbsRequiredToBeReleasedItem with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *IdSLdrbsRequiredToBeReleasedItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdSLdrbsRequiredToBeReleasedItem with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// IdSLdrbsRequiredToBeReleasedItemMultiError, or nil if none found.
func (m *IdSLdrbsRequiredToBeReleasedItem) ValidateAll() error {
	return m.validate(true)
}

func (m *IdSLdrbsRequiredToBeReleasedItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 321 {
		err := IdSLdrbsRequiredToBeReleasedItemValidationError{
			field:  "Value",
			reason: "value must equal 321",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdSLdrbsRequiredToBeReleasedItemMultiError(errors)
	}

	return nil
}

// IdSLdrbsRequiredToBeReleasedItemMultiError is an error wrapping multiple
// validation errors returned by
// IdSLdrbsRequiredToBeReleasedItem.ValidateAll() if the designated
// constraints aren't met.
type IdSLdrbsRequiredToBeReleasedItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdSLdrbsRequiredToBeReleasedItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdSLdrbsRequiredToBeReleasedItemMultiError) AllErrors() []error { return m }

// IdSLdrbsRequiredToBeReleasedItemValidationError is the validation error
// returned by IdSLdrbsRequiredToBeReleasedItem.Validate if the designated
// constraints aren't met.
type IdSLdrbsRequiredToBeReleasedItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdSLdrbsRequiredToBeReleasedItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdSLdrbsRequiredToBeReleasedItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdSLdrbsRequiredToBeReleasedItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdSLdrbsRequiredToBeReleasedItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdSLdrbsRequiredToBeReleasedItemValidationError) ErrorName() string {
	return "IdSLdrbsRequiredToBeReleasedItemValidationError"
}

// Error satisfies the builtin error interface
func (e IdSLdrbsRequiredToBeReleasedItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdSLdrbsRequiredToBeReleasedItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdSLdrbsRequiredToBeReleasedItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdSLdrbsRequiredToBeReleasedItemValidationError{}

// Validate checks the field values on IdSLdrbsRequiredToBeReleasedList with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *IdSLdrbsRequiredToBeReleasedList) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdSLdrbsRequiredToBeReleasedList with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// IdSLdrbsRequiredToBeReleasedListMultiError, or nil if none found.
func (m *IdSLdrbsRequiredToBeReleasedList) ValidateAll() error {
	return m.validate(true)
}

func (m *IdSLdrbsRequiredToBeReleasedList) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 322 {
		err := IdSLdrbsRequiredToBeReleasedListValidationError{
			field:  "Value",
			reason: "value must equal 322",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdSLdrbsRequiredToBeReleasedListMultiError(errors)
	}

	return nil
}

// IdSLdrbsRequiredToBeReleasedListMultiError is an error wrapping multiple
// validation errors returned by
// IdSLdrbsRequiredToBeReleasedList.ValidateAll() if the designated
// constraints aren't met.
type IdSLdrbsRequiredToBeReleasedListMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdSLdrbsRequiredToBeReleasedListMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdSLdrbsRequiredToBeReleasedListMultiError) AllErrors() []error { return m }

// IdSLdrbsRequiredToBeReleasedListValidationError is the validation error
// returned by IdSLdrbsRequiredToBeReleasedList.Validate if the designated
// constraints aren't met.
type IdSLdrbsRequiredToBeReleasedListValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdSLdrbsRequiredToBeReleasedListValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdSLdrbsRequiredToBeReleasedListValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdSLdrbsRequiredToBeReleasedListValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdSLdrbsRequiredToBeReleasedListValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdSLdrbsRequiredToBeReleasedListValidationError) ErrorName() string {
	return "IdSLdrbsRequiredToBeReleasedListValidationError"
}

// Error satisfies the builtin error interface
func (e IdSLdrbsRequiredToBeReleasedListValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdSLdrbsRequiredToBeReleasedList.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdSLdrbsRequiredToBeReleasedListValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdSLdrbsRequiredToBeReleasedListValidationError{}

// Validate checks the field values on IdSLdrbsSetupItem with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *IdSLdrbsSetupItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdSLdrbsSetupItem with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdSLdrbsSetupItemMultiError, or nil if none found.
func (m *IdSLdrbsSetupItem) ValidateAll() error {
	return m.validate(true)
}

func (m *IdSLdrbsSetupItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 323 {
		err := IdSLdrbsSetupItemValidationError{
			field:  "Value",
			reason: "value must equal 323",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdSLdrbsSetupItemMultiError(errors)
	}

	return nil
}

// IdSLdrbsSetupItemMultiError is an error wrapping multiple validation errors
// returned by IdSLdrbsSetupItem.ValidateAll() if the designated constraints
// aren't met.
type IdSLdrbsSetupItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdSLdrbsSetupItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdSLdrbsSetupItemMultiError) AllErrors() []error { return m }

// IdSLdrbsSetupItemValidationError is the validation error returned by
// IdSLdrbsSetupItem.Validate if the designated constraints aren't met.
type IdSLdrbsSetupItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdSLdrbsSetupItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdSLdrbsSetupItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdSLdrbsSetupItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdSLdrbsSetupItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdSLdrbsSetupItemValidationError) ErrorName() string {
	return "IdSLdrbsSetupItemValidationError"
}

// Error satisfies the builtin error interface
func (e IdSLdrbsSetupItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdSLdrbsSetupItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdSLdrbsSetupItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdSLdrbsSetupItemValidationError{}

// Validate checks the field values on IdSLdrbsSetupList with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *IdSLdrbsSetupList) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdSLdrbsSetupList with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdSLdrbsSetupListMultiError, or nil if none found.
func (m *IdSLdrbsSetupList) ValidateAll() error {
	return m.validate(true)
}

func (m *IdSLdrbsSetupList) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 324 {
		err := IdSLdrbsSetupListValidationError{
			field:  "Value",
			reason: "value must equal 324",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdSLdrbsSetupListMultiError(errors)
	}

	return nil
}

// IdSLdrbsSetupListMultiError is an error wrapping multiple validation errors
// returned by IdSLdrbsSetupList.ValidateAll() if the designated constraints
// aren't met.
type IdSLdrbsSetupListMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdSLdrbsSetupListMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdSLdrbsSetupListMultiError) AllErrors() []error { return m }

// IdSLdrbsSetupListValidationError is the validation error returned by
// IdSLdrbsSetupList.Validate if the designated constraints aren't met.
type IdSLdrbsSetupListValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdSLdrbsSetupListValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdSLdrbsSetupListValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdSLdrbsSetupListValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdSLdrbsSetupListValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdSLdrbsSetupListValidationError) ErrorName() string {
	return "IdSLdrbsSetupListValidationError"
}

// Error satisfies the builtin error interface
func (e IdSLdrbsSetupListValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdSLdrbsSetupList.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdSLdrbsSetupListValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdSLdrbsSetupListValidationError{}

// Validate checks the field values on IdSLdrbsToBeModifiedItem with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdSLdrbsToBeModifiedItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdSLdrbsToBeModifiedItem with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdSLdrbsToBeModifiedItemMultiError, or nil if none found.
func (m *IdSLdrbsToBeModifiedItem) ValidateAll() error {
	return m.validate(true)
}

func (m *IdSLdrbsToBeModifiedItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 325 {
		err := IdSLdrbsToBeModifiedItemValidationError{
			field:  "Value",
			reason: "value must equal 325",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdSLdrbsToBeModifiedItemMultiError(errors)
	}

	return nil
}

// IdSLdrbsToBeModifiedItemMultiError is an error wrapping multiple validation
// errors returned by IdSLdrbsToBeModifiedItem.ValidateAll() if the designated
// constraints aren't met.
type IdSLdrbsToBeModifiedItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdSLdrbsToBeModifiedItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdSLdrbsToBeModifiedItemMultiError) AllErrors() []error { return m }

// IdSLdrbsToBeModifiedItemValidationError is the validation error returned by
// IdSLdrbsToBeModifiedItem.Validate if the designated constraints aren't met.
type IdSLdrbsToBeModifiedItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdSLdrbsToBeModifiedItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdSLdrbsToBeModifiedItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdSLdrbsToBeModifiedItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdSLdrbsToBeModifiedItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdSLdrbsToBeModifiedItemValidationError) ErrorName() string {
	return "IdSLdrbsToBeModifiedItemValidationError"
}

// Error satisfies the builtin error interface
func (e IdSLdrbsToBeModifiedItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdSLdrbsToBeModifiedItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdSLdrbsToBeModifiedItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdSLdrbsToBeModifiedItemValidationError{}

// Validate checks the field values on IdSLdrbsToBeModifiedList with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdSLdrbsToBeModifiedList) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdSLdrbsToBeModifiedList with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdSLdrbsToBeModifiedListMultiError, or nil if none found.
func (m *IdSLdrbsToBeModifiedList) ValidateAll() error {
	return m.validate(true)
}

func (m *IdSLdrbsToBeModifiedList) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 326 {
		err := IdSLdrbsToBeModifiedListValidationError{
			field:  "Value",
			reason: "value must equal 326",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdSLdrbsToBeModifiedListMultiError(errors)
	}

	return nil
}

// IdSLdrbsToBeModifiedListMultiError is an error wrapping multiple validation
// errors returned by IdSLdrbsToBeModifiedList.ValidateAll() if the designated
// constraints aren't met.
type IdSLdrbsToBeModifiedListMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdSLdrbsToBeModifiedListMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdSLdrbsToBeModifiedListMultiError) AllErrors() []error { return m }

// IdSLdrbsToBeModifiedListValidationError is the validation error returned by
// IdSLdrbsToBeModifiedList.Validate if the designated constraints aren't met.
type IdSLdrbsToBeModifiedListValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdSLdrbsToBeModifiedListValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdSLdrbsToBeModifiedListValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdSLdrbsToBeModifiedListValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdSLdrbsToBeModifiedListValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdSLdrbsToBeModifiedListValidationError) ErrorName() string {
	return "IdSLdrbsToBeModifiedListValidationError"
}

// Error satisfies the builtin error interface
func (e IdSLdrbsToBeModifiedListValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdSLdrbsToBeModifiedList.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdSLdrbsToBeModifiedListValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdSLdrbsToBeModifiedListValidationError{}

// Validate checks the field values on IdSLdrbsToBeReleasedItem with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdSLdrbsToBeReleasedItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdSLdrbsToBeReleasedItem with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdSLdrbsToBeReleasedItemMultiError, or nil if none found.
func (m *IdSLdrbsToBeReleasedItem) ValidateAll() error {
	return m.validate(true)
}

func (m *IdSLdrbsToBeReleasedItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 327 {
		err := IdSLdrbsToBeReleasedItemValidationError{
			field:  "Value",
			reason: "value must equal 327",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdSLdrbsToBeReleasedItemMultiError(errors)
	}

	return nil
}

// IdSLdrbsToBeReleasedItemMultiError is an error wrapping multiple validation
// errors returned by IdSLdrbsToBeReleasedItem.ValidateAll() if the designated
// constraints aren't met.
type IdSLdrbsToBeReleasedItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdSLdrbsToBeReleasedItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdSLdrbsToBeReleasedItemMultiError) AllErrors() []error { return m }

// IdSLdrbsToBeReleasedItemValidationError is the validation error returned by
// IdSLdrbsToBeReleasedItem.Validate if the designated constraints aren't met.
type IdSLdrbsToBeReleasedItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdSLdrbsToBeReleasedItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdSLdrbsToBeReleasedItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdSLdrbsToBeReleasedItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdSLdrbsToBeReleasedItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdSLdrbsToBeReleasedItemValidationError) ErrorName() string {
	return "IdSLdrbsToBeReleasedItemValidationError"
}

// Error satisfies the builtin error interface
func (e IdSLdrbsToBeReleasedItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdSLdrbsToBeReleasedItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdSLdrbsToBeReleasedItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdSLdrbsToBeReleasedItemValidationError{}

// Validate checks the field values on IdSLdrbsToBeReleasedList with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdSLdrbsToBeReleasedList) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdSLdrbsToBeReleasedList with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdSLdrbsToBeReleasedListMultiError, or nil if none found.
func (m *IdSLdrbsToBeReleasedList) ValidateAll() error {
	return m.validate(true)
}

func (m *IdSLdrbsToBeReleasedList) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 328 {
		err := IdSLdrbsToBeReleasedListValidationError{
			field:  "Value",
			reason: "value must equal 328",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdSLdrbsToBeReleasedListMultiError(errors)
	}

	return nil
}

// IdSLdrbsToBeReleasedListMultiError is an error wrapping multiple validation
// errors returned by IdSLdrbsToBeReleasedList.ValidateAll() if the designated
// constraints aren't met.
type IdSLdrbsToBeReleasedListMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdSLdrbsToBeReleasedListMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdSLdrbsToBeReleasedListMultiError) AllErrors() []error { return m }

// IdSLdrbsToBeReleasedListValidationError is the validation error returned by
// IdSLdrbsToBeReleasedList.Validate if the designated constraints aren't met.
type IdSLdrbsToBeReleasedListValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdSLdrbsToBeReleasedListValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdSLdrbsToBeReleasedListValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdSLdrbsToBeReleasedListValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdSLdrbsToBeReleasedListValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdSLdrbsToBeReleasedListValidationError) ErrorName() string {
	return "IdSLdrbsToBeReleasedListValidationError"
}

// Error satisfies the builtin error interface
func (e IdSLdrbsToBeReleasedListValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdSLdrbsToBeReleasedList.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdSLdrbsToBeReleasedListValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdSLdrbsToBeReleasedListValidationError{}

// Validate checks the field values on IdSLdrbsToBeSetupItem with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdSLdrbsToBeSetupItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdSLdrbsToBeSetupItem with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdSLdrbsToBeSetupItemMultiError, or nil if none found.
func (m *IdSLdrbsToBeSetupItem) ValidateAll() error {
	return m.validate(true)
}

func (m *IdSLdrbsToBeSetupItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 329 {
		err := IdSLdrbsToBeSetupItemValidationError{
			field:  "Value",
			reason: "value must equal 329",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdSLdrbsToBeSetupItemMultiError(errors)
	}

	return nil
}

// IdSLdrbsToBeSetupItemMultiError is an error wrapping multiple validation
// errors returned by IdSLdrbsToBeSetupItem.ValidateAll() if the designated
// constraints aren't met.
type IdSLdrbsToBeSetupItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdSLdrbsToBeSetupItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdSLdrbsToBeSetupItemMultiError) AllErrors() []error { return m }

// IdSLdrbsToBeSetupItemValidationError is the validation error returned by
// IdSLdrbsToBeSetupItem.Validate if the designated constraints aren't met.
type IdSLdrbsToBeSetupItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdSLdrbsToBeSetupItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdSLdrbsToBeSetupItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdSLdrbsToBeSetupItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdSLdrbsToBeSetupItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdSLdrbsToBeSetupItemValidationError) ErrorName() string {
	return "IdSLdrbsToBeSetupItemValidationError"
}

// Error satisfies the builtin error interface
func (e IdSLdrbsToBeSetupItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdSLdrbsToBeSetupItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdSLdrbsToBeSetupItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdSLdrbsToBeSetupItemValidationError{}

// Validate checks the field values on IdSLdrbsToBeSetupList with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdSLdrbsToBeSetupList) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdSLdrbsToBeSetupList with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdSLdrbsToBeSetupListMultiError, or nil if none found.
func (m *IdSLdrbsToBeSetupList) ValidateAll() error {
	return m.validate(true)
}

func (m *IdSLdrbsToBeSetupList) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 330 {
		err := IdSLdrbsToBeSetupListValidationError{
			field:  "Value",
			reason: "value must equal 330",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdSLdrbsToBeSetupListMultiError(errors)
	}

	return nil
}

// IdSLdrbsToBeSetupListMultiError is an error wrapping multiple validation
// errors returned by IdSLdrbsToBeSetupList.ValidateAll() if the designated
// constraints aren't met.
type IdSLdrbsToBeSetupListMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdSLdrbsToBeSetupListMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdSLdrbsToBeSetupListMultiError) AllErrors() []error { return m }

// IdSLdrbsToBeSetupListValidationError is the validation error returned by
// IdSLdrbsToBeSetupList.Validate if the designated constraints aren't met.
type IdSLdrbsToBeSetupListValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdSLdrbsToBeSetupListValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdSLdrbsToBeSetupListValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdSLdrbsToBeSetupListValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdSLdrbsToBeSetupListValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdSLdrbsToBeSetupListValidationError) ErrorName() string {
	return "IdSLdrbsToBeSetupListValidationError"
}

// Error satisfies the builtin error interface
func (e IdSLdrbsToBeSetupListValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdSLdrbsToBeSetupList.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdSLdrbsToBeSetupListValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdSLdrbsToBeSetupListValidationError{}

// Validate checks the field values on IdSLdrbsToBeSetupModItem with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdSLdrbsToBeSetupModItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdSLdrbsToBeSetupModItem with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdSLdrbsToBeSetupModItemMultiError, or nil if none found.
func (m *IdSLdrbsToBeSetupModItem) ValidateAll() error {
	return m.validate(true)
}

func (m *IdSLdrbsToBeSetupModItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 331 {
		err := IdSLdrbsToBeSetupModItemValidationError{
			field:  "Value",
			reason: "value must equal 331",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdSLdrbsToBeSetupModItemMultiError(errors)
	}

	return nil
}

// IdSLdrbsToBeSetupModItemMultiError is an error wrapping multiple validation
// errors returned by IdSLdrbsToBeSetupModItem.ValidateAll() if the designated
// constraints aren't met.
type IdSLdrbsToBeSetupModItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdSLdrbsToBeSetupModItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdSLdrbsToBeSetupModItemMultiError) AllErrors() []error { return m }

// IdSLdrbsToBeSetupModItemValidationError is the validation error returned by
// IdSLdrbsToBeSetupModItem.Validate if the designated constraints aren't met.
type IdSLdrbsToBeSetupModItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdSLdrbsToBeSetupModItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdSLdrbsToBeSetupModItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdSLdrbsToBeSetupModItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdSLdrbsToBeSetupModItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdSLdrbsToBeSetupModItemValidationError) ErrorName() string {
	return "IdSLdrbsToBeSetupModItemValidationError"
}

// Error satisfies the builtin error interface
func (e IdSLdrbsToBeSetupModItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdSLdrbsToBeSetupModItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdSLdrbsToBeSetupModItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdSLdrbsToBeSetupModItemValidationError{}

// Validate checks the field values on IdSLdrbsToBeSetupModList with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdSLdrbsToBeSetupModList) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdSLdrbsToBeSetupModList with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdSLdrbsToBeSetupModListMultiError, or nil if none found.
func (m *IdSLdrbsToBeSetupModList) ValidateAll() error {
	return m.validate(true)
}

func (m *IdSLdrbsToBeSetupModList) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 332 {
		err := IdSLdrbsToBeSetupModListValidationError{
			field:  "Value",
			reason: "value must equal 332",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdSLdrbsToBeSetupModListMultiError(errors)
	}

	return nil
}

// IdSLdrbsToBeSetupModListMultiError is an error wrapping multiple validation
// errors returned by IdSLdrbsToBeSetupModList.ValidateAll() if the designated
// constraints aren't met.
type IdSLdrbsToBeSetupModListMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdSLdrbsToBeSetupModListMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdSLdrbsToBeSetupModListMultiError) AllErrors() []error { return m }

// IdSLdrbsToBeSetupModListValidationError is the validation error returned by
// IdSLdrbsToBeSetupModList.Validate if the designated constraints aren't met.
type IdSLdrbsToBeSetupModListValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdSLdrbsToBeSetupModListValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdSLdrbsToBeSetupModListValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdSLdrbsToBeSetupModListValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdSLdrbsToBeSetupModListValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdSLdrbsToBeSetupModListValidationError) ErrorName() string {
	return "IdSLdrbsToBeSetupModListValidationError"
}

// Error satisfies the builtin error interface
func (e IdSLdrbsToBeSetupModListValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdSLdrbsToBeSetupModList.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdSLdrbsToBeSetupModListValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdSLdrbsToBeSetupModListValidationError{}

// Validate checks the field values on IdSLdrbsSetupModList with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdSLdrbsSetupModList) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdSLdrbsSetupModList with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdSLdrbsSetupModListMultiError, or nil if none found.
func (m *IdSLdrbsSetupModList) ValidateAll() error {
	return m.validate(true)
}

func (m *IdSLdrbsSetupModList) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 333 {
		err := IdSLdrbsSetupModListValidationError{
			field:  "Value",
			reason: "value must equal 333",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdSLdrbsSetupModListMultiError(errors)
	}

	return nil
}

// IdSLdrbsSetupModListMultiError is an error wrapping multiple validation
// errors returned by IdSLdrbsSetupModList.ValidateAll() if the designated
// constraints aren't met.
type IdSLdrbsSetupModListMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdSLdrbsSetupModListMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdSLdrbsSetupModListMultiError) AllErrors() []error { return m }

// IdSLdrbsSetupModListValidationError is the validation error returned by
// IdSLdrbsSetupModList.Validate if the designated constraints aren't met.
type IdSLdrbsSetupModListValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdSLdrbsSetupModListValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdSLdrbsSetupModListValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdSLdrbsSetupModListValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdSLdrbsSetupModListValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdSLdrbsSetupModListValidationError) ErrorName() string {
	return "IdSLdrbsSetupModListValidationError"
}

// Error satisfies the builtin error interface
func (e IdSLdrbsSetupModListValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdSLdrbsSetupModList.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdSLdrbsSetupModListValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdSLdrbsSetupModListValidationError{}

// Validate checks the field values on IdSLdrbsFailedToBeSetupModList with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdSLdrbsFailedToBeSetupModList) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdSLdrbsFailedToBeSetupModList with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// IdSLdrbsFailedToBeSetupModListMultiError, or nil if none found.
func (m *IdSLdrbsFailedToBeSetupModList) ValidateAll() error {
	return m.validate(true)
}

func (m *IdSLdrbsFailedToBeSetupModList) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 334 {
		err := IdSLdrbsFailedToBeSetupModListValidationError{
			field:  "Value",
			reason: "value must equal 334",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdSLdrbsFailedToBeSetupModListMultiError(errors)
	}

	return nil
}

// IdSLdrbsFailedToBeSetupModListMultiError is an error wrapping multiple
// validation errors returned by IdSLdrbsFailedToBeSetupModList.ValidateAll()
// if the designated constraints aren't met.
type IdSLdrbsFailedToBeSetupModListMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdSLdrbsFailedToBeSetupModListMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdSLdrbsFailedToBeSetupModListMultiError) AllErrors() []error { return m }

// IdSLdrbsFailedToBeSetupModListValidationError is the validation error
// returned by IdSLdrbsFailedToBeSetupModList.Validate if the designated
// constraints aren't met.
type IdSLdrbsFailedToBeSetupModListValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdSLdrbsFailedToBeSetupModListValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdSLdrbsFailedToBeSetupModListValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdSLdrbsFailedToBeSetupModListValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdSLdrbsFailedToBeSetupModListValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdSLdrbsFailedToBeSetupModListValidationError) ErrorName() string {
	return "IdSLdrbsFailedToBeSetupModListValidationError"
}

// Error satisfies the builtin error interface
func (e IdSLdrbsFailedToBeSetupModListValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdSLdrbsFailedToBeSetupModList.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdSLdrbsFailedToBeSetupModListValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdSLdrbsFailedToBeSetupModListValidationError{}

// Validate checks the field values on IdSLdrbsSetupModItem with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdSLdrbsSetupModItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdSLdrbsSetupModItem with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdSLdrbsSetupModItemMultiError, or nil if none found.
func (m *IdSLdrbsSetupModItem) ValidateAll() error {
	return m.validate(true)
}

func (m *IdSLdrbsSetupModItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 335 {
		err := IdSLdrbsSetupModItemValidationError{
			field:  "Value",
			reason: "value must equal 335",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdSLdrbsSetupModItemMultiError(errors)
	}

	return nil
}

// IdSLdrbsSetupModItemMultiError is an error wrapping multiple validation
// errors returned by IdSLdrbsSetupModItem.ValidateAll() if the designated
// constraints aren't met.
type IdSLdrbsSetupModItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdSLdrbsSetupModItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdSLdrbsSetupModItemMultiError) AllErrors() []error { return m }

// IdSLdrbsSetupModItemValidationError is the validation error returned by
// IdSLdrbsSetupModItem.Validate if the designated constraints aren't met.
type IdSLdrbsSetupModItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdSLdrbsSetupModItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdSLdrbsSetupModItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdSLdrbsSetupModItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdSLdrbsSetupModItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdSLdrbsSetupModItemValidationError) ErrorName() string {
	return "IdSLdrbsSetupModItemValidationError"
}

// Error satisfies the builtin error interface
func (e IdSLdrbsSetupModItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdSLdrbsSetupModItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdSLdrbsSetupModItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdSLdrbsSetupModItemValidationError{}

// Validate checks the field values on IdSLdrbsFailedToBeSetupModItem with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdSLdrbsFailedToBeSetupModItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdSLdrbsFailedToBeSetupModItem with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// IdSLdrbsFailedToBeSetupModItemMultiError, or nil if none found.
func (m *IdSLdrbsFailedToBeSetupModItem) ValidateAll() error {
	return m.validate(true)
}

func (m *IdSLdrbsFailedToBeSetupModItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 336 {
		err := IdSLdrbsFailedToBeSetupModItemValidationError{
			field:  "Value",
			reason: "value must equal 336",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdSLdrbsFailedToBeSetupModItemMultiError(errors)
	}

	return nil
}

// IdSLdrbsFailedToBeSetupModItemMultiError is an error wrapping multiple
// validation errors returned by IdSLdrbsFailedToBeSetupModItem.ValidateAll()
// if the designated constraints aren't met.
type IdSLdrbsFailedToBeSetupModItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdSLdrbsFailedToBeSetupModItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdSLdrbsFailedToBeSetupModItemMultiError) AllErrors() []error { return m }

// IdSLdrbsFailedToBeSetupModItemValidationError is the validation error
// returned by IdSLdrbsFailedToBeSetupModItem.Validate if the designated
// constraints aren't met.
type IdSLdrbsFailedToBeSetupModItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdSLdrbsFailedToBeSetupModItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdSLdrbsFailedToBeSetupModItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdSLdrbsFailedToBeSetupModItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdSLdrbsFailedToBeSetupModItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdSLdrbsFailedToBeSetupModItemValidationError) ErrorName() string {
	return "IdSLdrbsFailedToBeSetupModItemValidationError"
}

// Error satisfies the builtin error interface
func (e IdSLdrbsFailedToBeSetupModItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdSLdrbsFailedToBeSetupModItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdSLdrbsFailedToBeSetupModItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdSLdrbsFailedToBeSetupModItemValidationError{}

// Validate checks the field values on IdSLdrbsModifiedConfList with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdSLdrbsModifiedConfList) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdSLdrbsModifiedConfList with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdSLdrbsModifiedConfListMultiError, or nil if none found.
func (m *IdSLdrbsModifiedConfList) ValidateAll() error {
	return m.validate(true)
}

func (m *IdSLdrbsModifiedConfList) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 337 {
		err := IdSLdrbsModifiedConfListValidationError{
			field:  "Value",
			reason: "value must equal 337",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdSLdrbsModifiedConfListMultiError(errors)
	}

	return nil
}

// IdSLdrbsModifiedConfListMultiError is an error wrapping multiple validation
// errors returned by IdSLdrbsModifiedConfList.ValidateAll() if the designated
// constraints aren't met.
type IdSLdrbsModifiedConfListMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdSLdrbsModifiedConfListMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdSLdrbsModifiedConfListMultiError) AllErrors() []error { return m }

// IdSLdrbsModifiedConfListValidationError is the validation error returned by
// IdSLdrbsModifiedConfList.Validate if the designated constraints aren't met.
type IdSLdrbsModifiedConfListValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdSLdrbsModifiedConfListValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdSLdrbsModifiedConfListValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdSLdrbsModifiedConfListValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdSLdrbsModifiedConfListValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdSLdrbsModifiedConfListValidationError) ErrorName() string {
	return "IdSLdrbsModifiedConfListValidationError"
}

// Error satisfies the builtin error interface
func (e IdSLdrbsModifiedConfListValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdSLdrbsModifiedConfList.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdSLdrbsModifiedConfListValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdSLdrbsModifiedConfListValidationError{}

// Validate checks the field values on IdSLdrbsModifiedConfItem with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdSLdrbsModifiedConfItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdSLdrbsModifiedConfItem with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdSLdrbsModifiedConfItemMultiError, or nil if none found.
func (m *IdSLdrbsModifiedConfItem) ValidateAll() error {
	return m.validate(true)
}

func (m *IdSLdrbsModifiedConfItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 338 {
		err := IdSLdrbsModifiedConfItemValidationError{
			field:  "Value",
			reason: "value must equal 338",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdSLdrbsModifiedConfItemMultiError(errors)
	}

	return nil
}

// IdSLdrbsModifiedConfItemMultiError is an error wrapping multiple validation
// errors returned by IdSLdrbsModifiedConfItem.ValidateAll() if the designated
// constraints aren't met.
type IdSLdrbsModifiedConfItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdSLdrbsModifiedConfItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdSLdrbsModifiedConfItemMultiError) AllErrors() []error { return m }

// IdSLdrbsModifiedConfItemValidationError is the validation error returned by
// IdSLdrbsModifiedConfItem.Validate if the designated constraints aren't met.
type IdSLdrbsModifiedConfItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdSLdrbsModifiedConfItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdSLdrbsModifiedConfItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdSLdrbsModifiedConfItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdSLdrbsModifiedConfItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdSLdrbsModifiedConfItemValidationError) ErrorName() string {
	return "IdSLdrbsModifiedConfItemValidationError"
}

// Error satisfies the builtin error interface
func (e IdSLdrbsModifiedConfItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdSLdrbsModifiedConfItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdSLdrbsModifiedConfItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdSLdrbsModifiedConfItemValidationError{}

// Validate checks the field values on IdUEassistanceInformationEutra with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdUEassistanceInformationEutra) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdUEassistanceInformationEutra with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// IdUEassistanceInformationEutraMultiError, or nil if none found.
func (m *IdUEassistanceInformationEutra) ValidateAll() error {
	return m.validate(true)
}

func (m *IdUEassistanceInformationEutra) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 339 {
		err := IdUEassistanceInformationEutraValidationError{
			field:  "Value",
			reason: "value must equal 339",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdUEassistanceInformationEutraMultiError(errors)
	}

	return nil
}

// IdUEassistanceInformationEutraMultiError is an error wrapping multiple
// validation errors returned by IdUEassistanceInformationEutra.ValidateAll()
// if the designated constraints aren't met.
type IdUEassistanceInformationEutraMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdUEassistanceInformationEutraMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdUEassistanceInformationEutraMultiError) AllErrors() []error { return m }

// IdUEassistanceInformationEutraValidationError is the validation error
// returned by IdUEassistanceInformationEutra.Validate if the designated
// constraints aren't met.
type IdUEassistanceInformationEutraValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdUEassistanceInformationEutraValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdUEassistanceInformationEutraValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdUEassistanceInformationEutraValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdUEassistanceInformationEutraValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdUEassistanceInformationEutraValidationError) ErrorName() string {
	return "IdUEassistanceInformationEutraValidationError"
}

// Error satisfies the builtin error interface
func (e IdUEassistanceInformationEutraValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdUEassistanceInformationEutra.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdUEassistanceInformationEutraValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdUEassistanceInformationEutraValidationError{}

// Validate checks the field values on IdPC5LinkAmbr with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *IdPC5LinkAmbr) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdPC5LinkAmbr with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in IdPC5LinkAmbrMultiError, or
// nil if none found.
func (m *IdPC5LinkAmbr) ValidateAll() error {
	return m.validate(true)
}

func (m *IdPC5LinkAmbr) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 340 {
		err := IdPC5LinkAmbrValidationError{
			field:  "Value",
			reason: "value must equal 340",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdPC5LinkAmbrMultiError(errors)
	}

	return nil
}

// IdPC5LinkAmbrMultiError is an error wrapping multiple validation errors
// returned by IdPC5LinkAmbr.ValidateAll() if the designated constraints
// aren't met.
type IdPC5LinkAmbrMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdPC5LinkAmbrMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdPC5LinkAmbrMultiError) AllErrors() []error { return m }

// IdPC5LinkAmbrValidationError is the validation error returned by
// IdPC5LinkAmbr.Validate if the designated constraints aren't met.
type IdPC5LinkAmbrValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdPC5LinkAmbrValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdPC5LinkAmbrValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdPC5LinkAmbrValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdPC5LinkAmbrValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdPC5LinkAmbrValidationError) ErrorName() string { return "IdPC5LinkAmbrValidationError" }

// Error satisfies the builtin error interface
func (e IdPC5LinkAmbrValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdPC5LinkAmbr.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdPC5LinkAmbrValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdPC5LinkAmbrValidationError{}

// Validate checks the field values on IdSLPHyMAcRLcConfig with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdSLPHyMAcRLcConfig) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdSLPHyMAcRLcConfig with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdSLPHyMAcRLcConfigMultiError, or nil if none found.
func (m *IdSLPHyMAcRLcConfig) ValidateAll() error {
	return m.validate(true)
}

func (m *IdSLPHyMAcRLcConfig) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 341 {
		err := IdSLPHyMAcRLcConfigValidationError{
			field:  "Value",
			reason: "value must equal 341",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdSLPHyMAcRLcConfigMultiError(errors)
	}

	return nil
}

// IdSLPHyMAcRLcConfigMultiError is an error wrapping multiple validation
// errors returned by IdSLPHyMAcRLcConfig.ValidateAll() if the designated
// constraints aren't met.
type IdSLPHyMAcRLcConfigMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdSLPHyMAcRLcConfigMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdSLPHyMAcRLcConfigMultiError) AllErrors() []error { return m }

// IdSLPHyMAcRLcConfigValidationError is the validation error returned by
// IdSLPHyMAcRLcConfig.Validate if the designated constraints aren't met.
type IdSLPHyMAcRLcConfigValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdSLPHyMAcRLcConfigValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdSLPHyMAcRLcConfigValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdSLPHyMAcRLcConfigValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdSLPHyMAcRLcConfigValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdSLPHyMAcRLcConfigValidationError) ErrorName() string {
	return "IdSLPHyMAcRLcConfigValidationError"
}

// Error satisfies the builtin error interface
func (e IdSLPHyMAcRLcConfigValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdSLPHyMAcRLcConfig.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdSLPHyMAcRLcConfigValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdSLPHyMAcRLcConfigValidationError{}

// Validate checks the field values on IdSLConfigDedicatedEutraInfo with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdSLConfigDedicatedEutraInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdSLConfigDedicatedEutraInfo with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdSLConfigDedicatedEutraInfoMultiError, or nil if none found.
func (m *IdSLConfigDedicatedEutraInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *IdSLConfigDedicatedEutraInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 342 {
		err := IdSLConfigDedicatedEutraInfoValidationError{
			field:  "Value",
			reason: "value must equal 342",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdSLConfigDedicatedEutraInfoMultiError(errors)
	}

	return nil
}

// IdSLConfigDedicatedEutraInfoMultiError is an error wrapping multiple
// validation errors returned by IdSLConfigDedicatedEutraInfo.ValidateAll() if
// the designated constraints aren't met.
type IdSLConfigDedicatedEutraInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdSLConfigDedicatedEutraInfoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdSLConfigDedicatedEutraInfoMultiError) AllErrors() []error { return m }

// IdSLConfigDedicatedEutraInfoValidationError is the validation error returned
// by IdSLConfigDedicatedEutraInfo.Validate if the designated constraints
// aren't met.
type IdSLConfigDedicatedEutraInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdSLConfigDedicatedEutraInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdSLConfigDedicatedEutraInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdSLConfigDedicatedEutraInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdSLConfigDedicatedEutraInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdSLConfigDedicatedEutraInfoValidationError) ErrorName() string {
	return "IdSLConfigDedicatedEutraInfoValidationError"
}

// Error satisfies the builtin error interface
func (e IdSLConfigDedicatedEutraInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdSLConfigDedicatedEutraInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdSLConfigDedicatedEutraInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdSLConfigDedicatedEutraInfoValidationError{}

// Validate checks the field values on IdAlternativeQoSparaSetList with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdAlternativeQoSparaSetList) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdAlternativeQoSparaSetList with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdAlternativeQoSparaSetListMultiError, or nil if none found.
func (m *IdAlternativeQoSparaSetList) ValidateAll() error {
	return m.validate(true)
}

func (m *IdAlternativeQoSparaSetList) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 343 {
		err := IdAlternativeQoSparaSetListValidationError{
			field:  "Value",
			reason: "value must equal 343",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdAlternativeQoSparaSetListMultiError(errors)
	}

	return nil
}

// IdAlternativeQoSparaSetListMultiError is an error wrapping multiple
// validation errors returned by IdAlternativeQoSparaSetList.ValidateAll() if
// the designated constraints aren't met.
type IdAlternativeQoSparaSetListMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdAlternativeQoSparaSetListMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdAlternativeQoSparaSetListMultiError) AllErrors() []error { return m }

// IdAlternativeQoSparaSetListValidationError is the validation error returned
// by IdAlternativeQoSparaSetList.Validate if the designated constraints
// aren't met.
type IdAlternativeQoSparaSetListValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdAlternativeQoSparaSetListValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdAlternativeQoSparaSetListValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdAlternativeQoSparaSetListValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdAlternativeQoSparaSetListValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdAlternativeQoSparaSetListValidationError) ErrorName() string {
	return "IdAlternativeQoSparaSetListValidationError"
}

// Error satisfies the builtin error interface
func (e IdAlternativeQoSparaSetListValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdAlternativeQoSparaSetList.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdAlternativeQoSparaSetListValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdAlternativeQoSparaSetListValidationError{}

// Validate checks the field values on IdCurrentQoSparaSetIndex with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdCurrentQoSparaSetIndex) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdCurrentQoSparaSetIndex with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdCurrentQoSparaSetIndexMultiError, or nil if none found.
func (m *IdCurrentQoSparaSetIndex) ValidateAll() error {
	return m.validate(true)
}

func (m *IdCurrentQoSparaSetIndex) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 344 {
		err := IdCurrentQoSparaSetIndexValidationError{
			field:  "Value",
			reason: "value must equal 344",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdCurrentQoSparaSetIndexMultiError(errors)
	}

	return nil
}

// IdCurrentQoSparaSetIndexMultiError is an error wrapping multiple validation
// errors returned by IdCurrentQoSparaSetIndex.ValidateAll() if the designated
// constraints aren't met.
type IdCurrentQoSparaSetIndexMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdCurrentQoSparaSetIndexMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdCurrentQoSparaSetIndexMultiError) AllErrors() []error { return m }

// IdCurrentQoSparaSetIndexValidationError is the validation error returned by
// IdCurrentQoSparaSetIndex.Validate if the designated constraints aren't met.
type IdCurrentQoSparaSetIndexValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdCurrentQoSparaSetIndexValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdCurrentQoSparaSetIndexValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdCurrentQoSparaSetIndexValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdCurrentQoSparaSetIndexValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdCurrentQoSparaSetIndexValidationError) ErrorName() string {
	return "IdCurrentQoSparaSetIndexValidationError"
}

// Error satisfies the builtin error interface
func (e IdCurrentQoSparaSetIndexValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdCurrentQoSparaSetIndex.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdCurrentQoSparaSetIndexValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdCurrentQoSparaSetIndexValidationError{}

// Validate checks the field values on IdgNbcumeasurementId with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdgNbcumeasurementId) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdgNbcumeasurementId with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdgNbcumeasurementIdMultiError, or nil if none found.
func (m *IdgNbcumeasurementId) ValidateAll() error {
	return m.validate(true)
}

func (m *IdgNbcumeasurementId) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 345 {
		err := IdgNbcumeasurementIdValidationError{
			field:  "Value",
			reason: "value must equal 345",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdgNbcumeasurementIdMultiError(errors)
	}

	return nil
}

// IdgNbcumeasurementIdMultiError is an error wrapping multiple validation
// errors returned by IdgNbcumeasurementId.ValidateAll() if the designated
// constraints aren't met.
type IdgNbcumeasurementIdMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdgNbcumeasurementIdMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdgNbcumeasurementIdMultiError) AllErrors() []error { return m }

// IdgNbcumeasurementIdValidationError is the validation error returned by
// IdgNbcumeasurementId.Validate if the designated constraints aren't met.
type IdgNbcumeasurementIdValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdgNbcumeasurementIdValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdgNbcumeasurementIdValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdgNbcumeasurementIdValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdgNbcumeasurementIdValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdgNbcumeasurementIdValidationError) ErrorName() string {
	return "IdgNbcumeasurementIdValidationError"
}

// Error satisfies the builtin error interface
func (e IdgNbcumeasurementIdValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdgNbcumeasurementId.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdgNbcumeasurementIdValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdgNbcumeasurementIdValidationError{}

// Validate checks the field values on IdgNbdumeasurementId with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdgNbdumeasurementId) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdgNbdumeasurementId with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdgNbdumeasurementIdMultiError, or nil if none found.
func (m *IdgNbdumeasurementId) ValidateAll() error {
	return m.validate(true)
}

func (m *IdgNbdumeasurementId) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 346 {
		err := IdgNbdumeasurementIdValidationError{
			field:  "Value",
			reason: "value must equal 346",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdgNbdumeasurementIdMultiError(errors)
	}

	return nil
}

// IdgNbdumeasurementIdMultiError is an error wrapping multiple validation
// errors returned by IdgNbdumeasurementId.ValidateAll() if the designated
// constraints aren't met.
type IdgNbdumeasurementIdMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdgNbdumeasurementIdMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdgNbdumeasurementIdMultiError) AllErrors() []error { return m }

// IdgNbdumeasurementIdValidationError is the validation error returned by
// IdgNbdumeasurementId.Validate if the designated constraints aren't met.
type IdgNbdumeasurementIdValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdgNbdumeasurementIdValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdgNbdumeasurementIdValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdgNbdumeasurementIdValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdgNbdumeasurementIdValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdgNbdumeasurementIdValidationError) ErrorName() string {
	return "IdgNbdumeasurementIdValidationError"
}

// Error satisfies the builtin error interface
func (e IdgNbdumeasurementIdValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdgNbdumeasurementId.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdgNbdumeasurementIdValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdgNbdumeasurementIdValidationError{}

// Validate checks the field values on IdRegistrationRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdRegistrationRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdRegistrationRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdRegistrationRequestMultiError, or nil if none found.
func (m *IdRegistrationRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *IdRegistrationRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 347 {
		err := IdRegistrationRequestValidationError{
			field:  "Value",
			reason: "value must equal 347",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdRegistrationRequestMultiError(errors)
	}

	return nil
}

// IdRegistrationRequestMultiError is an error wrapping multiple validation
// errors returned by IdRegistrationRequest.ValidateAll() if the designated
// constraints aren't met.
type IdRegistrationRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdRegistrationRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdRegistrationRequestMultiError) AllErrors() []error { return m }

// IdRegistrationRequestValidationError is the validation error returned by
// IdRegistrationRequest.Validate if the designated constraints aren't met.
type IdRegistrationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdRegistrationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdRegistrationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdRegistrationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdRegistrationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdRegistrationRequestValidationError) ErrorName() string {
	return "IdRegistrationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e IdRegistrationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdRegistrationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdRegistrationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdRegistrationRequestValidationError{}

// Validate checks the field values on IdReportCharacteristics with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdReportCharacteristics) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdReportCharacteristics with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdReportCharacteristicsMultiError, or nil if none found.
func (m *IdReportCharacteristics) ValidateAll() error {
	return m.validate(true)
}

func (m *IdReportCharacteristics) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 348 {
		err := IdReportCharacteristicsValidationError{
			field:  "Value",
			reason: "value must equal 348",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdReportCharacteristicsMultiError(errors)
	}

	return nil
}

// IdReportCharacteristicsMultiError is an error wrapping multiple validation
// errors returned by IdReportCharacteristics.ValidateAll() if the designated
// constraints aren't met.
type IdReportCharacteristicsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdReportCharacteristicsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdReportCharacteristicsMultiError) AllErrors() []error { return m }

// IdReportCharacteristicsValidationError is the validation error returned by
// IdReportCharacteristics.Validate if the designated constraints aren't met.
type IdReportCharacteristicsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdReportCharacteristicsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdReportCharacteristicsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdReportCharacteristicsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdReportCharacteristicsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdReportCharacteristicsValidationError) ErrorName() string {
	return "IdReportCharacteristicsValidationError"
}

// Error satisfies the builtin error interface
func (e IdReportCharacteristicsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdReportCharacteristics.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdReportCharacteristicsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdReportCharacteristicsValidationError{}

// Validate checks the field values on IdCellToReportList with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdCellToReportList) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdCellToReportList with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdCellToReportListMultiError, or nil if none found.
func (m *IdCellToReportList) ValidateAll() error {
	return m.validate(true)
}

func (m *IdCellToReportList) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 349 {
		err := IdCellToReportListValidationError{
			field:  "Value",
			reason: "value must equal 349",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdCellToReportListMultiError(errors)
	}

	return nil
}

// IdCellToReportListMultiError is an error wrapping multiple validation errors
// returned by IdCellToReportList.ValidateAll() if the designated constraints
// aren't met.
type IdCellToReportListMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdCellToReportListMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdCellToReportListMultiError) AllErrors() []error { return m }

// IdCellToReportListValidationError is the validation error returned by
// IdCellToReportList.Validate if the designated constraints aren't met.
type IdCellToReportListValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdCellToReportListValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdCellToReportListValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdCellToReportListValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdCellToReportListValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdCellToReportListValidationError) ErrorName() string {
	return "IdCellToReportListValidationError"
}

// Error satisfies the builtin error interface
func (e IdCellToReportListValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdCellToReportList.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdCellToReportListValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdCellToReportListValidationError{}

// Validate checks the field values on IdCellMeasurementResultList with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdCellMeasurementResultList) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdCellMeasurementResultList with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdCellMeasurementResultListMultiError, or nil if none found.
func (m *IdCellMeasurementResultList) ValidateAll() error {
	return m.validate(true)
}

func (m *IdCellMeasurementResultList) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 350 {
		err := IdCellMeasurementResultListValidationError{
			field:  "Value",
			reason: "value must equal 350",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdCellMeasurementResultListMultiError(errors)
	}

	return nil
}

// IdCellMeasurementResultListMultiError is an error wrapping multiple
// validation errors returned by IdCellMeasurementResultList.ValidateAll() if
// the designated constraints aren't met.
type IdCellMeasurementResultListMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdCellMeasurementResultListMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdCellMeasurementResultListMultiError) AllErrors() []error { return m }

// IdCellMeasurementResultListValidationError is the validation error returned
// by IdCellMeasurementResultList.Validate if the designated constraints
// aren't met.
type IdCellMeasurementResultListValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdCellMeasurementResultListValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdCellMeasurementResultListValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdCellMeasurementResultListValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdCellMeasurementResultListValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdCellMeasurementResultListValidationError) ErrorName() string {
	return "IdCellMeasurementResultListValidationError"
}

// Error satisfies the builtin error interface
func (e IdCellMeasurementResultListValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdCellMeasurementResultList.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdCellMeasurementResultListValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdCellMeasurementResultListValidationError{}

// Validate checks the field values on IdHardwareLoadIndicator with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdHardwareLoadIndicator) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdHardwareLoadIndicator with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdHardwareLoadIndicatorMultiError, or nil if none found.
func (m *IdHardwareLoadIndicator) ValidateAll() error {
	return m.validate(true)
}

func (m *IdHardwareLoadIndicator) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 351 {
		err := IdHardwareLoadIndicatorValidationError{
			field:  "Value",
			reason: "value must equal 351",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdHardwareLoadIndicatorMultiError(errors)
	}

	return nil
}

// IdHardwareLoadIndicatorMultiError is an error wrapping multiple validation
// errors returned by IdHardwareLoadIndicator.ValidateAll() if the designated
// constraints aren't met.
type IdHardwareLoadIndicatorMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdHardwareLoadIndicatorMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdHardwareLoadIndicatorMultiError) AllErrors() []error { return m }

// IdHardwareLoadIndicatorValidationError is the validation error returned by
// IdHardwareLoadIndicator.Validate if the designated constraints aren't met.
type IdHardwareLoadIndicatorValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdHardwareLoadIndicatorValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdHardwareLoadIndicatorValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdHardwareLoadIndicatorValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdHardwareLoadIndicatorValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdHardwareLoadIndicatorValidationError) ErrorName() string {
	return "IdHardwareLoadIndicatorValidationError"
}

// Error satisfies the builtin error interface
func (e IdHardwareLoadIndicatorValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdHardwareLoadIndicator.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdHardwareLoadIndicatorValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdHardwareLoadIndicatorValidationError{}

// Validate checks the field values on IdReportingPeriodicity with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdReportingPeriodicity) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdReportingPeriodicity with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdReportingPeriodicityMultiError, or nil if none found.
func (m *IdReportingPeriodicity) ValidateAll() error {
	return m.validate(true)
}

func (m *IdReportingPeriodicity) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 352 {
		err := IdReportingPeriodicityValidationError{
			field:  "Value",
			reason: "value must equal 352",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdReportingPeriodicityMultiError(errors)
	}

	return nil
}

// IdReportingPeriodicityMultiError is an error wrapping multiple validation
// errors returned by IdReportingPeriodicity.ValidateAll() if the designated
// constraints aren't met.
type IdReportingPeriodicityMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdReportingPeriodicityMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdReportingPeriodicityMultiError) AllErrors() []error { return m }

// IdReportingPeriodicityValidationError is the validation error returned by
// IdReportingPeriodicity.Validate if the designated constraints aren't met.
type IdReportingPeriodicityValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdReportingPeriodicityValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdReportingPeriodicityValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdReportingPeriodicityValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdReportingPeriodicityValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdReportingPeriodicityValidationError) ErrorName() string {
	return "IdReportingPeriodicityValidationError"
}

// Error satisfies the builtin error interface
func (e IdReportingPeriodicityValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdReportingPeriodicity.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdReportingPeriodicityValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdReportingPeriodicityValidationError{}

// Validate checks the field values on IdTNlcapacityIndicator with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdTNlcapacityIndicator) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdTNlcapacityIndicator with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdTNlcapacityIndicatorMultiError, or nil if none found.
func (m *IdTNlcapacityIndicator) ValidateAll() error {
	return m.validate(true)
}

func (m *IdTNlcapacityIndicator) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 353 {
		err := IdTNlcapacityIndicatorValidationError{
			field:  "Value",
			reason: "value must equal 353",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdTNlcapacityIndicatorMultiError(errors)
	}

	return nil
}

// IdTNlcapacityIndicatorMultiError is an error wrapping multiple validation
// errors returned by IdTNlcapacityIndicator.ValidateAll() if the designated
// constraints aren't met.
type IdTNlcapacityIndicatorMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdTNlcapacityIndicatorMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdTNlcapacityIndicatorMultiError) AllErrors() []error { return m }

// IdTNlcapacityIndicatorValidationError is the validation error returned by
// IdTNlcapacityIndicator.Validate if the designated constraints aren't met.
type IdTNlcapacityIndicatorValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdTNlcapacityIndicatorValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdTNlcapacityIndicatorValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdTNlcapacityIndicatorValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdTNlcapacityIndicatorValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdTNlcapacityIndicatorValidationError) ErrorName() string {
	return "IdTNlcapacityIndicatorValidationError"
}

// Error satisfies the builtin error interface
func (e IdTNlcapacityIndicatorValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdTNlcapacityIndicator.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdTNlcapacityIndicatorValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdTNlcapacityIndicatorValidationError{}

// Validate checks the field values on IdCarrierList with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *IdCarrierList) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdCarrierList with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in IdCarrierListMultiError, or
// nil if none found.
func (m *IdCarrierList) ValidateAll() error {
	return m.validate(true)
}

func (m *IdCarrierList) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 354 {
		err := IdCarrierListValidationError{
			field:  "Value",
			reason: "value must equal 354",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdCarrierListMultiError(errors)
	}

	return nil
}

// IdCarrierListMultiError is an error wrapping multiple validation errors
// returned by IdCarrierList.ValidateAll() if the designated constraints
// aren't met.
type IdCarrierListMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdCarrierListMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdCarrierListMultiError) AllErrors() []error { return m }

// IdCarrierListValidationError is the validation error returned by
// IdCarrierList.Validate if the designated constraints aren't met.
type IdCarrierListValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdCarrierListValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdCarrierListValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdCarrierListValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdCarrierListValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdCarrierListValidationError) ErrorName() string { return "IdCarrierListValidationError" }

// Error satisfies the builtin error interface
func (e IdCarrierListValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdCarrierList.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdCarrierListValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdCarrierListValidationError{}

// Validate checks the field values on IdULcarrierList with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *IdULcarrierList) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdULcarrierList with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdULcarrierListMultiError, or nil if none found.
func (m *IdULcarrierList) ValidateAll() error {
	return m.validate(true)
}

func (m *IdULcarrierList) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 355 {
		err := IdULcarrierListValidationError{
			field:  "Value",
			reason: "value must equal 355",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdULcarrierListMultiError(errors)
	}

	return nil
}

// IdULcarrierListMultiError is an error wrapping multiple validation errors
// returned by IdULcarrierList.ValidateAll() if the designated constraints
// aren't met.
type IdULcarrierListMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdULcarrierListMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdULcarrierListMultiError) AllErrors() []error { return m }

// IdULcarrierListValidationError is the validation error returned by
// IdULcarrierList.Validate if the designated constraints aren't met.
type IdULcarrierListValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdULcarrierListValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdULcarrierListValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdULcarrierListValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdULcarrierListValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdULcarrierListValidationError) ErrorName() string { return "IdULcarrierListValidationError" }

// Error satisfies the builtin error interface
func (e IdULcarrierListValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdULcarrierList.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdULcarrierListValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdULcarrierListValidationError{}

// Validate checks the field values on IdFrequencyShift7P5Khz with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdFrequencyShift7P5Khz) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdFrequencyShift7P5Khz with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdFrequencyShift7P5KhzMultiError, or nil if none found.
func (m *IdFrequencyShift7P5Khz) ValidateAll() error {
	return m.validate(true)
}

func (m *IdFrequencyShift7P5Khz) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 356 {
		err := IdFrequencyShift7P5KhzValidationError{
			field:  "Value",
			reason: "value must equal 356",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdFrequencyShift7P5KhzMultiError(errors)
	}

	return nil
}

// IdFrequencyShift7P5KhzMultiError is an error wrapping multiple validation
// errors returned by IdFrequencyShift7P5Khz.ValidateAll() if the designated
// constraints aren't met.
type IdFrequencyShift7P5KhzMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdFrequencyShift7P5KhzMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdFrequencyShift7P5KhzMultiError) AllErrors() []error { return m }

// IdFrequencyShift7P5KhzValidationError is the validation error returned by
// IdFrequencyShift7P5Khz.Validate if the designated constraints aren't met.
type IdFrequencyShift7P5KhzValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdFrequencyShift7P5KhzValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdFrequencyShift7P5KhzValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdFrequencyShift7P5KhzValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdFrequencyShift7P5KhzValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdFrequencyShift7P5KhzValidationError) ErrorName() string {
	return "IdFrequencyShift7P5KhzValidationError"
}

// Error satisfies the builtin error interface
func (e IdFrequencyShift7P5KhzValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdFrequencyShift7P5Khz.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdFrequencyShift7P5KhzValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdFrequencyShift7P5KhzValidationError{}

// Validate checks the field values on IdSSbPositionsInBurst with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdSSbPositionsInBurst) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdSSbPositionsInBurst with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdSSbPositionsInBurstMultiError, or nil if none found.
func (m *IdSSbPositionsInBurst) ValidateAll() error {
	return m.validate(true)
}

func (m *IdSSbPositionsInBurst) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 357 {
		err := IdSSbPositionsInBurstValidationError{
			field:  "Value",
			reason: "value must equal 357",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdSSbPositionsInBurstMultiError(errors)
	}

	return nil
}

// IdSSbPositionsInBurstMultiError is an error wrapping multiple validation
// errors returned by IdSSbPositionsInBurst.ValidateAll() if the designated
// constraints aren't met.
type IdSSbPositionsInBurstMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdSSbPositionsInBurstMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdSSbPositionsInBurstMultiError) AllErrors() []error { return m }

// IdSSbPositionsInBurstValidationError is the validation error returned by
// IdSSbPositionsInBurst.Validate if the designated constraints aren't met.
type IdSSbPositionsInBurstValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdSSbPositionsInBurstValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdSSbPositionsInBurstValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdSSbPositionsInBurstValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdSSbPositionsInBurstValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdSSbPositionsInBurstValidationError) ErrorName() string {
	return "IdSSbPositionsInBurstValidationError"
}

// Error satisfies the builtin error interface
func (e IdSSbPositionsInBurstValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdSSbPositionsInBurst.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdSSbPositionsInBurstValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdSSbPositionsInBurstValidationError{}

// Validate checks the field values on IdNRprachconfig with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *IdNRprachconfig) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdNRprachconfig with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdNRprachconfigMultiError, or nil if none found.
func (m *IdNRprachconfig) ValidateAll() error {
	return m.validate(true)
}

func (m *IdNRprachconfig) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 358 {
		err := IdNRprachconfigValidationError{
			field:  "Value",
			reason: "value must equal 358",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdNRprachconfigMultiError(errors)
	}

	return nil
}

// IdNRprachconfigMultiError is an error wrapping multiple validation errors
// returned by IdNRprachconfig.ValidateAll() if the designated constraints
// aren't met.
type IdNRprachconfigMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdNRprachconfigMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdNRprachconfigMultiError) AllErrors() []error { return m }

// IdNRprachconfigValidationError is the validation error returned by
// IdNRprachconfig.Validate if the designated constraints aren't met.
type IdNRprachconfigValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdNRprachconfigValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdNRprachconfigValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdNRprachconfigValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdNRprachconfigValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdNRprachconfigValidationError) ErrorName() string { return "IdNRprachconfigValidationError" }

// Error satisfies the builtin error interface
func (e IdNRprachconfigValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdNRprachconfig.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdNRprachconfigValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdNRprachconfigValidationError{}

// Validate checks the field values on IdRAchreportInformationList with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdRAchreportInformationList) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdRAchreportInformationList with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdRAchreportInformationListMultiError, or nil if none found.
func (m *IdRAchreportInformationList) ValidateAll() error {
	return m.validate(true)
}

func (m *IdRAchreportInformationList) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 359 {
		err := IdRAchreportInformationListValidationError{
			field:  "Value",
			reason: "value must equal 359",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdRAchreportInformationListMultiError(errors)
	}

	return nil
}

// IdRAchreportInformationListMultiError is an error wrapping multiple
// validation errors returned by IdRAchreportInformationList.ValidateAll() if
// the designated constraints aren't met.
type IdRAchreportInformationListMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdRAchreportInformationListMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdRAchreportInformationListMultiError) AllErrors() []error { return m }

// IdRAchreportInformationListValidationError is the validation error returned
// by IdRAchreportInformationList.Validate if the designated constraints
// aren't met.
type IdRAchreportInformationListValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdRAchreportInformationListValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdRAchreportInformationListValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdRAchreportInformationListValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdRAchreportInformationListValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdRAchreportInformationListValidationError) ErrorName() string {
	return "IdRAchreportInformationListValidationError"
}

// Error satisfies the builtin error interface
func (e IdRAchreportInformationListValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdRAchreportInformationList.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdRAchreportInformationListValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdRAchreportInformationListValidationError{}

// Validate checks the field values on IdRLfreportInformationList with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdRLfreportInformationList) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdRLfreportInformationList with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdRLfreportInformationListMultiError, or nil if none found.
func (m *IdRLfreportInformationList) ValidateAll() error {
	return m.validate(true)
}

func (m *IdRLfreportInformationList) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 360 {
		err := IdRLfreportInformationListValidationError{
			field:  "Value",
			reason: "value must equal 360",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdRLfreportInformationListMultiError(errors)
	}

	return nil
}

// IdRLfreportInformationListMultiError is an error wrapping multiple
// validation errors returned by IdRLfreportInformationList.ValidateAll() if
// the designated constraints aren't met.
type IdRLfreportInformationListMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdRLfreportInformationListMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdRLfreportInformationListMultiError) AllErrors() []error { return m }

// IdRLfreportInformationListValidationError is the validation error returned
// by IdRLfreportInformationList.Validate if the designated constraints aren't met.
type IdRLfreportInformationListValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdRLfreportInformationListValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdRLfreportInformationListValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdRLfreportInformationListValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdRLfreportInformationListValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdRLfreportInformationListValidationError) ErrorName() string {
	return "IdRLfreportInformationListValidationError"
}

// Error satisfies the builtin error interface
func (e IdRLfreportInformationListValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdRLfreportInformationList.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdRLfreportInformationListValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdRLfreportInformationListValidationError{}

// Validate checks the field values on IdTDdULDLconfigCommonNr with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdTDdULDLconfigCommonNr) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdTDdULDLconfigCommonNr with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdTDdULDLconfigCommonNrMultiError, or nil if none found.
func (m *IdTDdULDLconfigCommonNr) ValidateAll() error {
	return m.validate(true)
}

func (m *IdTDdULDLconfigCommonNr) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 361 {
		err := IdTDdULDLconfigCommonNrValidationError{
			field:  "Value",
			reason: "value must equal 361",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdTDdULDLconfigCommonNrMultiError(errors)
	}

	return nil
}

// IdTDdULDLconfigCommonNrMultiError is an error wrapping multiple validation
// errors returned by IdTDdULDLconfigCommonNr.ValidateAll() if the designated
// constraints aren't met.
type IdTDdULDLconfigCommonNrMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdTDdULDLconfigCommonNrMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdTDdULDLconfigCommonNrMultiError) AllErrors() []error { return m }

// IdTDdULDLconfigCommonNrValidationError is the validation error returned by
// IdTDdULDLconfigCommonNr.Validate if the designated constraints aren't met.
type IdTDdULDLconfigCommonNrValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdTDdULDLconfigCommonNrValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdTDdULDLconfigCommonNrValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdTDdULDLconfigCommonNrValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdTDdULDLconfigCommonNrValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdTDdULDLconfigCommonNrValidationError) ErrorName() string {
	return "IdTDdULDLconfigCommonNrValidationError"
}

// Error satisfies the builtin error interface
func (e IdTDdULDLconfigCommonNrValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdTDdULDLconfigCommonNr.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdTDdULDLconfigCommonNrValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdTDdULDLconfigCommonNrValidationError{}

// Validate checks the field values on IdCNpacketDelayBudgetDownlink with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdCNpacketDelayBudgetDownlink) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdCNpacketDelayBudgetDownlink with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// IdCNpacketDelayBudgetDownlinkMultiError, or nil if none found.
func (m *IdCNpacketDelayBudgetDownlink) ValidateAll() error {
	return m.validate(true)
}

func (m *IdCNpacketDelayBudgetDownlink) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 362 {
		err := IdCNpacketDelayBudgetDownlinkValidationError{
			field:  "Value",
			reason: "value must equal 362",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdCNpacketDelayBudgetDownlinkMultiError(errors)
	}

	return nil
}

// IdCNpacketDelayBudgetDownlinkMultiError is an error wrapping multiple
// validation errors returned by IdCNpacketDelayBudgetDownlink.ValidateAll()
// if the designated constraints aren't met.
type IdCNpacketDelayBudgetDownlinkMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdCNpacketDelayBudgetDownlinkMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdCNpacketDelayBudgetDownlinkMultiError) AllErrors() []error { return m }

// IdCNpacketDelayBudgetDownlinkValidationError is the validation error
// returned by IdCNpacketDelayBudgetDownlink.Validate if the designated
// constraints aren't met.
type IdCNpacketDelayBudgetDownlinkValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdCNpacketDelayBudgetDownlinkValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdCNpacketDelayBudgetDownlinkValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdCNpacketDelayBudgetDownlinkValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdCNpacketDelayBudgetDownlinkValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdCNpacketDelayBudgetDownlinkValidationError) ErrorName() string {
	return "IdCNpacketDelayBudgetDownlinkValidationError"
}

// Error satisfies the builtin error interface
func (e IdCNpacketDelayBudgetDownlinkValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdCNpacketDelayBudgetDownlink.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdCNpacketDelayBudgetDownlinkValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdCNpacketDelayBudgetDownlinkValidationError{}

// Validate checks the field values on IdExtendedPacketDelayBudget with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdExtendedPacketDelayBudget) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdExtendedPacketDelayBudget with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdExtendedPacketDelayBudgetMultiError, or nil if none found.
func (m *IdExtendedPacketDelayBudget) ValidateAll() error {
	return m.validate(true)
}

func (m *IdExtendedPacketDelayBudget) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 363 {
		err := IdExtendedPacketDelayBudgetValidationError{
			field:  "Value",
			reason: "value must equal 363",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdExtendedPacketDelayBudgetMultiError(errors)
	}

	return nil
}

// IdExtendedPacketDelayBudgetMultiError is an error wrapping multiple
// validation errors returned by IdExtendedPacketDelayBudget.ValidateAll() if
// the designated constraints aren't met.
type IdExtendedPacketDelayBudgetMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdExtendedPacketDelayBudgetMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdExtendedPacketDelayBudgetMultiError) AllErrors() []error { return m }

// IdExtendedPacketDelayBudgetValidationError is the validation error returned
// by IdExtendedPacketDelayBudget.Validate if the designated constraints
// aren't met.
type IdExtendedPacketDelayBudgetValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdExtendedPacketDelayBudgetValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdExtendedPacketDelayBudgetValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdExtendedPacketDelayBudgetValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdExtendedPacketDelayBudgetValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdExtendedPacketDelayBudgetValidationError) ErrorName() string {
	return "IdExtendedPacketDelayBudgetValidationError"
}

// Error satisfies the builtin error interface
func (e IdExtendedPacketDelayBudgetValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdExtendedPacketDelayBudget.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdExtendedPacketDelayBudgetValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdExtendedPacketDelayBudgetValidationError{}

// Validate checks the field values on IdTSctrafficCharacteristics with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdTSctrafficCharacteristics) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdTSctrafficCharacteristics with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdTSctrafficCharacteristicsMultiError, or nil if none found.
func (m *IdTSctrafficCharacteristics) ValidateAll() error {
	return m.validate(true)
}

func (m *IdTSctrafficCharacteristics) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 364 {
		err := IdTSctrafficCharacteristicsValidationError{
			field:  "Value",
			reason: "value must equal 364",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdTSctrafficCharacteristicsMultiError(errors)
	}

	return nil
}

// IdTSctrafficCharacteristicsMultiError is an error wrapping multiple
// validation errors returned by IdTSctrafficCharacteristics.ValidateAll() if
// the designated constraints aren't met.
type IdTSctrafficCharacteristicsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdTSctrafficCharacteristicsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdTSctrafficCharacteristicsMultiError) AllErrors() []error { return m }

// IdTSctrafficCharacteristicsValidationError is the validation error returned
// by IdTSctrafficCharacteristics.Validate if the designated constraints
// aren't met.
type IdTSctrafficCharacteristicsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdTSctrafficCharacteristicsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdTSctrafficCharacteristicsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdTSctrafficCharacteristicsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdTSctrafficCharacteristicsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdTSctrafficCharacteristicsValidationError) ErrorName() string {
	return "IdTSctrafficCharacteristicsValidationError"
}

// Error satisfies the builtin error interface
func (e IdTSctrafficCharacteristicsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdTSctrafficCharacteristics.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdTSctrafficCharacteristicsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdTSctrafficCharacteristicsValidationError{}

// Validate checks the field values on IdReportingRequestType with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdReportingRequestType) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdReportingRequestType with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdReportingRequestTypeMultiError, or nil if none found.
func (m *IdReportingRequestType) ValidateAll() error {
	return m.validate(true)
}

func (m *IdReportingRequestType) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 365 {
		err := IdReportingRequestTypeValidationError{
			field:  "Value",
			reason: "value must equal 365",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdReportingRequestTypeMultiError(errors)
	}

	return nil
}

// IdReportingRequestTypeMultiError is an error wrapping multiple validation
// errors returned by IdReportingRequestType.ValidateAll() if the designated
// constraints aren't met.
type IdReportingRequestTypeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdReportingRequestTypeMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdReportingRequestTypeMultiError) AllErrors() []error { return m }

// IdReportingRequestTypeValidationError is the validation error returned by
// IdReportingRequestType.Validate if the designated constraints aren't met.
type IdReportingRequestTypeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdReportingRequestTypeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdReportingRequestTypeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdReportingRequestTypeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdReportingRequestTypeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdReportingRequestTypeValidationError) ErrorName() string {
	return "IdReportingRequestTypeValidationError"
}

// Error satisfies the builtin error interface
func (e IdReportingRequestTypeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdReportingRequestType.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdReportingRequestTypeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdReportingRequestTypeValidationError{}

// Validate checks the field values on IdTimeReferenceInformation with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdTimeReferenceInformation) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdTimeReferenceInformation with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdTimeReferenceInformationMultiError, or nil if none found.
func (m *IdTimeReferenceInformation) ValidateAll() error {
	return m.validate(true)
}

func (m *IdTimeReferenceInformation) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 366 {
		err := IdTimeReferenceInformationValidationError{
			field:  "Value",
			reason: "value must equal 366",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdTimeReferenceInformationMultiError(errors)
	}

	return nil
}

// IdTimeReferenceInformationMultiError is an error wrapping multiple
// validation errors returned by IdTimeReferenceInformation.ValidateAll() if
// the designated constraints aren't met.
type IdTimeReferenceInformationMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdTimeReferenceInformationMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdTimeReferenceInformationMultiError) AllErrors() []error { return m }

// IdTimeReferenceInformationValidationError is the validation error returned
// by IdTimeReferenceInformation.Validate if the designated constraints aren't met.
type IdTimeReferenceInformationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdTimeReferenceInformationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdTimeReferenceInformationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdTimeReferenceInformationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdTimeReferenceInformationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdTimeReferenceInformationValidationError) ErrorName() string {
	return "IdTimeReferenceInformationValidationError"
}

// Error satisfies the builtin error interface
func (e IdTimeReferenceInformationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdTimeReferenceInformation.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdTimeReferenceInformationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdTimeReferenceInformationValidationError{}

// Validate checks the field values on IdCNpacketDelayBudgetUplink with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdCNpacketDelayBudgetUplink) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdCNpacketDelayBudgetUplink with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdCNpacketDelayBudgetUplinkMultiError, or nil if none found.
func (m *IdCNpacketDelayBudgetUplink) ValidateAll() error {
	return m.validate(true)
}

func (m *IdCNpacketDelayBudgetUplink) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 369 {
		err := IdCNpacketDelayBudgetUplinkValidationError{
			field:  "Value",
			reason: "value must equal 369",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdCNpacketDelayBudgetUplinkMultiError(errors)
	}

	return nil
}

// IdCNpacketDelayBudgetUplinkMultiError is an error wrapping multiple
// validation errors returned by IdCNpacketDelayBudgetUplink.ValidateAll() if
// the designated constraints aren't met.
type IdCNpacketDelayBudgetUplinkMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdCNpacketDelayBudgetUplinkMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdCNpacketDelayBudgetUplinkMultiError) AllErrors() []error { return m }

// IdCNpacketDelayBudgetUplinkValidationError is the validation error returned
// by IdCNpacketDelayBudgetUplink.Validate if the designated constraints
// aren't met.
type IdCNpacketDelayBudgetUplinkValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdCNpacketDelayBudgetUplinkValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdCNpacketDelayBudgetUplinkValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdCNpacketDelayBudgetUplinkValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdCNpacketDelayBudgetUplinkValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdCNpacketDelayBudgetUplinkValidationError) ErrorName() string {
	return "IdCNpacketDelayBudgetUplinkValidationError"
}

// Error satisfies the builtin error interface
func (e IdCNpacketDelayBudgetUplinkValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdCNpacketDelayBudgetUplink.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdCNpacketDelayBudgetUplinkValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdCNpacketDelayBudgetUplinkValidationError{}

// Validate checks the field values on IdAdditionalPdcpduplicationTnlList with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *IdAdditionalPdcpduplicationTnlList) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdAdditionalPdcpduplicationTnlList
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// IdAdditionalPdcpduplicationTnlListMultiError, or nil if none found.
func (m *IdAdditionalPdcpduplicationTnlList) ValidateAll() error {
	return m.validate(true)
}

func (m *IdAdditionalPdcpduplicationTnlList) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 370 {
		err := IdAdditionalPdcpduplicationTnlListValidationError{
			field:  "Value",
			reason: "value must equal 370",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdAdditionalPdcpduplicationTnlListMultiError(errors)
	}

	return nil
}

// IdAdditionalPdcpduplicationTnlListMultiError is an error wrapping multiple
// validation errors returned by
// IdAdditionalPdcpduplicationTnlList.ValidateAll() if the designated
// constraints aren't met.
type IdAdditionalPdcpduplicationTnlListMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdAdditionalPdcpduplicationTnlListMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdAdditionalPdcpduplicationTnlListMultiError) AllErrors() []error { return m }

// IdAdditionalPdcpduplicationTnlListValidationError is the validation error
// returned by IdAdditionalPdcpduplicationTnlList.Validate if the designated
// constraints aren't met.
type IdAdditionalPdcpduplicationTnlListValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdAdditionalPdcpduplicationTnlListValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdAdditionalPdcpduplicationTnlListValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdAdditionalPdcpduplicationTnlListValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdAdditionalPdcpduplicationTnlListValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdAdditionalPdcpduplicationTnlListValidationError) ErrorName() string {
	return "IdAdditionalPdcpduplicationTnlListValidationError"
}

// Error satisfies the builtin error interface
func (e IdAdditionalPdcpduplicationTnlListValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdAdditionalPdcpduplicationTnlList.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdAdditionalPdcpduplicationTnlListValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdAdditionalPdcpduplicationTnlListValidationError{}

// Validate checks the field values on IdRLcduplicationInformation with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdRLcduplicationInformation) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdRLcduplicationInformation with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdRLcduplicationInformationMultiError, or nil if none found.
func (m *IdRLcduplicationInformation) ValidateAll() error {
	return m.validate(true)
}

func (m *IdRLcduplicationInformation) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 371 {
		err := IdRLcduplicationInformationValidationError{
			field:  "Value",
			reason: "value must equal 371",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdRLcduplicationInformationMultiError(errors)
	}

	return nil
}

// IdRLcduplicationInformationMultiError is an error wrapping multiple
// validation errors returned by IdRLcduplicationInformation.ValidateAll() if
// the designated constraints aren't met.
type IdRLcduplicationInformationMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdRLcduplicationInformationMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdRLcduplicationInformationMultiError) AllErrors() []error { return m }

// IdRLcduplicationInformationValidationError is the validation error returned
// by IdRLcduplicationInformation.Validate if the designated constraints
// aren't met.
type IdRLcduplicationInformationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdRLcduplicationInformationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdRLcduplicationInformationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdRLcduplicationInformationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdRLcduplicationInformationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdRLcduplicationInformationValidationError) ErrorName() string {
	return "IdRLcduplicationInformationValidationError"
}

// Error satisfies the builtin error interface
func (e IdRLcduplicationInformationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdRLcduplicationInformation.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdRLcduplicationInformationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdRLcduplicationInformationValidationError{}

// Validate checks the field values on IdAdditionalDuplicationIndication with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *IdAdditionalDuplicationIndication) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdAdditionalDuplicationIndication
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// IdAdditionalDuplicationIndicationMultiError, or nil if none found.
func (m *IdAdditionalDuplicationIndication) ValidateAll() error {
	return m.validate(true)
}

func (m *IdAdditionalDuplicationIndication) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 372 {
		err := IdAdditionalDuplicationIndicationValidationError{
			field:  "Value",
			reason: "value must equal 372",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdAdditionalDuplicationIndicationMultiError(errors)
	}

	return nil
}

// IdAdditionalDuplicationIndicationMultiError is an error wrapping multiple
// validation errors returned by
// IdAdditionalDuplicationIndication.ValidateAll() if the designated
// constraints aren't met.
type IdAdditionalDuplicationIndicationMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdAdditionalDuplicationIndicationMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdAdditionalDuplicationIndicationMultiError) AllErrors() []error { return m }

// IdAdditionalDuplicationIndicationValidationError is the validation error
// returned by IdAdditionalDuplicationIndication.Validate if the designated
// constraints aren't met.
type IdAdditionalDuplicationIndicationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdAdditionalDuplicationIndicationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdAdditionalDuplicationIndicationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdAdditionalDuplicationIndicationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdAdditionalDuplicationIndicationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdAdditionalDuplicationIndicationValidationError) ErrorName() string {
	return "IdAdditionalDuplicationIndicationValidationError"
}

// Error satisfies the builtin error interface
func (e IdAdditionalDuplicationIndicationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdAdditionalDuplicationIndication.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdAdditionalDuplicationIndicationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdAdditionalDuplicationIndicationValidationError{}

// Validate checks the field values on IdConditionalInterDumobilityInformation
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *IdConditionalInterDumobilityInformation) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// IdConditionalInterDumobilityInformation with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// IdConditionalInterDumobilityInformationMultiError, or nil if none found.
func (m *IdConditionalInterDumobilityInformation) ValidateAll() error {
	return m.validate(true)
}

func (m *IdConditionalInterDumobilityInformation) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 373 {
		err := IdConditionalInterDumobilityInformationValidationError{
			field:  "Value",
			reason: "value must equal 373",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdConditionalInterDumobilityInformationMultiError(errors)
	}

	return nil
}

// IdConditionalInterDumobilityInformationMultiError is an error wrapping
// multiple validation errors returned by
// IdConditionalInterDumobilityInformation.ValidateAll() if the designated
// constraints aren't met.
type IdConditionalInterDumobilityInformationMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdConditionalInterDumobilityInformationMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdConditionalInterDumobilityInformationMultiError) AllErrors() []error { return m }

// IdConditionalInterDumobilityInformationValidationError is the validation
// error returned by IdConditionalInterDumobilityInformation.Validate if the
// designated constraints aren't met.
type IdConditionalInterDumobilityInformationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdConditionalInterDumobilityInformationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdConditionalInterDumobilityInformationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdConditionalInterDumobilityInformationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdConditionalInterDumobilityInformationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdConditionalInterDumobilityInformationValidationError) ErrorName() string {
	return "IdConditionalInterDumobilityInformationValidationError"
}

// Error satisfies the builtin error interface
func (e IdConditionalInterDumobilityInformationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdConditionalInterDumobilityInformation.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdConditionalInterDumobilityInformationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdConditionalInterDumobilityInformationValidationError{}

// Validate checks the field values on IdConditionalIntraDumobilityInformation
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *IdConditionalIntraDumobilityInformation) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// IdConditionalIntraDumobilityInformation with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// IdConditionalIntraDumobilityInformationMultiError, or nil if none found.
func (m *IdConditionalIntraDumobilityInformation) ValidateAll() error {
	return m.validate(true)
}

func (m *IdConditionalIntraDumobilityInformation) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 374 {
		err := IdConditionalIntraDumobilityInformationValidationError{
			field:  "Value",
			reason: "value must equal 374",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdConditionalIntraDumobilityInformationMultiError(errors)
	}

	return nil
}

// IdConditionalIntraDumobilityInformationMultiError is an error wrapping
// multiple validation errors returned by
// IdConditionalIntraDumobilityInformation.ValidateAll() if the designated
// constraints aren't met.
type IdConditionalIntraDumobilityInformationMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdConditionalIntraDumobilityInformationMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdConditionalIntraDumobilityInformationMultiError) AllErrors() []error { return m }

// IdConditionalIntraDumobilityInformationValidationError is the validation
// error returned by IdConditionalIntraDumobilityInformation.Validate if the
// designated constraints aren't met.
type IdConditionalIntraDumobilityInformationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdConditionalIntraDumobilityInformationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdConditionalIntraDumobilityInformationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdConditionalIntraDumobilityInformationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdConditionalIntraDumobilityInformationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdConditionalIntraDumobilityInformationValidationError) ErrorName() string {
	return "IdConditionalIntraDumobilityInformationValidationError"
}

// Error satisfies the builtin error interface
func (e IdConditionalIntraDumobilityInformationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdConditionalIntraDumobilityInformation.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdConditionalIntraDumobilityInformationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdConditionalIntraDumobilityInformationValidationError{}

// Validate checks the field values on IdtargetCellsToCancel with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdtargetCellsToCancel) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdtargetCellsToCancel with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdtargetCellsToCancelMultiError, or nil if none found.
func (m *IdtargetCellsToCancel) ValidateAll() error {
	return m.validate(true)
}

func (m *IdtargetCellsToCancel) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 375 {
		err := IdtargetCellsToCancelValidationError{
			field:  "Value",
			reason: "value must equal 375",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdtargetCellsToCancelMultiError(errors)
	}

	return nil
}

// IdtargetCellsToCancelMultiError is an error wrapping multiple validation
// errors returned by IdtargetCellsToCancel.ValidateAll() if the designated
// constraints aren't met.
type IdtargetCellsToCancelMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdtargetCellsToCancelMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdtargetCellsToCancelMultiError) AllErrors() []error { return m }

// IdtargetCellsToCancelValidationError is the validation error returned by
// IdtargetCellsToCancel.Validate if the designated constraints aren't met.
type IdtargetCellsToCancelValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdtargetCellsToCancelValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdtargetCellsToCancelValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdtargetCellsToCancelValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdtargetCellsToCancelValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdtargetCellsToCancelValidationError) ErrorName() string {
	return "IdtargetCellsToCancelValidationError"
}

// Error satisfies the builtin error interface
func (e IdtargetCellsToCancelValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdtargetCellsToCancel.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdtargetCellsToCancelValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdtargetCellsToCancelValidationError{}

// Validate checks the field values on IdrequestedTargetCellGlobalId with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdrequestedTargetCellGlobalId) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdrequestedTargetCellGlobalId with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// IdrequestedTargetCellGlobalIdMultiError, or nil if none found.
func (m *IdrequestedTargetCellGlobalId) ValidateAll() error {
	return m.validate(true)
}

func (m *IdrequestedTargetCellGlobalId) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 376 {
		err := IdrequestedTargetCellGlobalIdValidationError{
			field:  "Value",
			reason: "value must equal 376",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdrequestedTargetCellGlobalIdMultiError(errors)
	}

	return nil
}

// IdrequestedTargetCellGlobalIdMultiError is an error wrapping multiple
// validation errors returned by IdrequestedTargetCellGlobalId.ValidateAll()
// if the designated constraints aren't met.
type IdrequestedTargetCellGlobalIdMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdrequestedTargetCellGlobalIdMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdrequestedTargetCellGlobalIdMultiError) AllErrors() []error { return m }

// IdrequestedTargetCellGlobalIdValidationError is the validation error
// returned by IdrequestedTargetCellGlobalId.Validate if the designated
// constraints aren't met.
type IdrequestedTargetCellGlobalIdValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdrequestedTargetCellGlobalIdValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdrequestedTargetCellGlobalIdValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdrequestedTargetCellGlobalIdValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdrequestedTargetCellGlobalIdValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdrequestedTargetCellGlobalIdValidationError) ErrorName() string {
	return "IdrequestedTargetCellGlobalIdValidationError"
}

// Error satisfies the builtin error interface
func (e IdrequestedTargetCellGlobalIdValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdrequestedTargetCellGlobalId.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdrequestedTargetCellGlobalIdValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdrequestedTargetCellGlobalIdValidationError{}

// Validate checks the field values on IdManagementBasedMdtplmnlist with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdManagementBasedMdtplmnlist) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdManagementBasedMdtplmnlist with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdManagementBasedMdtplmnlistMultiError, or nil if none found.
func (m *IdManagementBasedMdtplmnlist) ValidateAll() error {
	return m.validate(true)
}

func (m *IdManagementBasedMdtplmnlist) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 377 {
		err := IdManagementBasedMdtplmnlistValidationError{
			field:  "Value",
			reason: "value must equal 377",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdManagementBasedMdtplmnlistMultiError(errors)
	}

	return nil
}

// IdManagementBasedMdtplmnlistMultiError is an error wrapping multiple
// validation errors returned by IdManagementBasedMdtplmnlist.ValidateAll() if
// the designated constraints aren't met.
type IdManagementBasedMdtplmnlistMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdManagementBasedMdtplmnlistMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdManagementBasedMdtplmnlistMultiError) AllErrors() []error { return m }

// IdManagementBasedMdtplmnlistValidationError is the validation error returned
// by IdManagementBasedMdtplmnlist.Validate if the designated constraints
// aren't met.
type IdManagementBasedMdtplmnlistValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdManagementBasedMdtplmnlistValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdManagementBasedMdtplmnlistValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdManagementBasedMdtplmnlistValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdManagementBasedMdtplmnlistValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdManagementBasedMdtplmnlistValidationError) ErrorName() string {
	return "IdManagementBasedMdtplmnlistValidationError"
}

// Error satisfies the builtin error interface
func (e IdManagementBasedMdtplmnlistValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdManagementBasedMdtplmnlist.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdManagementBasedMdtplmnlistValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdManagementBasedMdtplmnlistValidationError{}

// Validate checks the field values on IdTraceCollectionEntityIpaddress with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *IdTraceCollectionEntityIpaddress) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdTraceCollectionEntityIpaddress with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// IdTraceCollectionEntityIpaddressMultiError, or nil if none found.
func (m *IdTraceCollectionEntityIpaddress) ValidateAll() error {
	return m.validate(true)
}

func (m *IdTraceCollectionEntityIpaddress) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 378 {
		err := IdTraceCollectionEntityIpaddressValidationError{
			field:  "Value",
			reason: "value must equal 378",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdTraceCollectionEntityIpaddressMultiError(errors)
	}

	return nil
}

// IdTraceCollectionEntityIpaddressMultiError is an error wrapping multiple
// validation errors returned by
// IdTraceCollectionEntityIpaddress.ValidateAll() if the designated
// constraints aren't met.
type IdTraceCollectionEntityIpaddressMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdTraceCollectionEntityIpaddressMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdTraceCollectionEntityIpaddressMultiError) AllErrors() []error { return m }

// IdTraceCollectionEntityIpaddressValidationError is the validation error
// returned by IdTraceCollectionEntityIpaddress.Validate if the designated
// constraints aren't met.
type IdTraceCollectionEntityIpaddressValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdTraceCollectionEntityIpaddressValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdTraceCollectionEntityIpaddressValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdTraceCollectionEntityIpaddressValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdTraceCollectionEntityIpaddressValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdTraceCollectionEntityIpaddressValidationError) ErrorName() string {
	return "IdTraceCollectionEntityIpaddressValidationError"
}

// Error satisfies the builtin error interface
func (e IdTraceCollectionEntityIpaddressValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdTraceCollectionEntityIpaddress.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdTraceCollectionEntityIpaddressValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdTraceCollectionEntityIpaddressValidationError{}

// Validate checks the field values on IdPrivacyIndicator with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdPrivacyIndicator) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdPrivacyIndicator with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdPrivacyIndicatorMultiError, or nil if none found.
func (m *IdPrivacyIndicator) ValidateAll() error {
	return m.validate(true)
}

func (m *IdPrivacyIndicator) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 379 {
		err := IdPrivacyIndicatorValidationError{
			field:  "Value",
			reason: "value must equal 379",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdPrivacyIndicatorMultiError(errors)
	}

	return nil
}

// IdPrivacyIndicatorMultiError is an error wrapping multiple validation errors
// returned by IdPrivacyIndicator.ValidateAll() if the designated constraints
// aren't met.
type IdPrivacyIndicatorMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdPrivacyIndicatorMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdPrivacyIndicatorMultiError) AllErrors() []error { return m }

// IdPrivacyIndicatorValidationError is the validation error returned by
// IdPrivacyIndicator.Validate if the designated constraints aren't met.
type IdPrivacyIndicatorValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdPrivacyIndicatorValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdPrivacyIndicatorValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdPrivacyIndicatorValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdPrivacyIndicatorValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdPrivacyIndicatorValidationError) ErrorName() string {
	return "IdPrivacyIndicatorValidationError"
}

// Error satisfies the builtin error interface
func (e IdPrivacyIndicatorValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdPrivacyIndicator.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdPrivacyIndicatorValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdPrivacyIndicatorValidationError{}

// Validate checks the field values on IdTraceCollectionEntityUri with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdTraceCollectionEntityUri) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdTraceCollectionEntityUri with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdTraceCollectionEntityUriMultiError, or nil if none found.
func (m *IdTraceCollectionEntityUri) ValidateAll() error {
	return m.validate(true)
}

func (m *IdTraceCollectionEntityUri) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 380 {
		err := IdTraceCollectionEntityUriValidationError{
			field:  "Value",
			reason: "value must equal 380",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdTraceCollectionEntityUriMultiError(errors)
	}

	return nil
}

// IdTraceCollectionEntityUriMultiError is an error wrapping multiple
// validation errors returned by IdTraceCollectionEntityUri.ValidateAll() if
// the designated constraints aren't met.
type IdTraceCollectionEntityUriMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdTraceCollectionEntityUriMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdTraceCollectionEntityUriMultiError) AllErrors() []error { return m }

// IdTraceCollectionEntityUriValidationError is the validation error returned
// by IdTraceCollectionEntityUri.Validate if the designated constraints aren't met.
type IdTraceCollectionEntityUriValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdTraceCollectionEntityUriValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdTraceCollectionEntityUriValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdTraceCollectionEntityUriValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdTraceCollectionEntityUriValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdTraceCollectionEntityUriValidationError) ErrorName() string {
	return "IdTraceCollectionEntityUriValidationError"
}

// Error satisfies the builtin error interface
func (e IdTraceCollectionEntityUriValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdTraceCollectionEntityUri.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdTraceCollectionEntityUriValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdTraceCollectionEntityUriValidationError{}

// Validate checks the field values on IdmdtConfiguration with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdmdtConfiguration) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdmdtConfiguration with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdmdtConfigurationMultiError, or nil if none found.
func (m *IdmdtConfiguration) ValidateAll() error {
	return m.validate(true)
}

func (m *IdmdtConfiguration) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 381 {
		err := IdmdtConfigurationValidationError{
			field:  "Value",
			reason: "value must equal 381",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdmdtConfigurationMultiError(errors)
	}

	return nil
}

// IdmdtConfigurationMultiError is an error wrapping multiple validation errors
// returned by IdmdtConfiguration.ValidateAll() if the designated constraints
// aren't met.
type IdmdtConfigurationMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdmdtConfigurationMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdmdtConfigurationMultiError) AllErrors() []error { return m }

// IdmdtConfigurationValidationError is the validation error returned by
// IdmdtConfiguration.Validate if the designated constraints aren't met.
type IdmdtConfigurationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdmdtConfigurationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdmdtConfigurationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdmdtConfigurationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdmdtConfigurationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdmdtConfigurationValidationError) ErrorName() string {
	return "IdmdtConfigurationValidationError"
}

// Error satisfies the builtin error interface
func (e IdmdtConfigurationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdmdtConfiguration.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdmdtConfigurationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdmdtConfigurationValidationError{}

// Validate checks the field values on IdServingNid with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *IdServingNid) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdServingNid with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in IdServingNidMultiError, or
// nil if none found.
func (m *IdServingNid) ValidateAll() error {
	return m.validate(true)
}

func (m *IdServingNid) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 382 {
		err := IdServingNidValidationError{
			field:  "Value",
			reason: "value must equal 382",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdServingNidMultiError(errors)
	}

	return nil
}

// IdServingNidMultiError is an error wrapping multiple validation errors
// returned by IdServingNid.ValidateAll() if the designated constraints aren't met.
type IdServingNidMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdServingNidMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdServingNidMultiError) AllErrors() []error { return m }

// IdServingNidValidationError is the validation error returned by
// IdServingNid.Validate if the designated constraints aren't met.
type IdServingNidValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdServingNidValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdServingNidValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdServingNidValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdServingNidValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdServingNidValidationError) ErrorName() string { return "IdServingNidValidationError" }

// Error satisfies the builtin error interface
func (e IdServingNidValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdServingNid.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdServingNidValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdServingNidValidationError{}

// Validate checks the field values on IdNPnbroadcastInformation with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdNPnbroadcastInformation) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdNPnbroadcastInformation with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdNPnbroadcastInformationMultiError, or nil if none found.
func (m *IdNPnbroadcastInformation) ValidateAll() error {
	return m.validate(true)
}

func (m *IdNPnbroadcastInformation) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 383 {
		err := IdNPnbroadcastInformationValidationError{
			field:  "Value",
			reason: "value must equal 383",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdNPnbroadcastInformationMultiError(errors)
	}

	return nil
}

// IdNPnbroadcastInformationMultiError is an error wrapping multiple validation
// errors returned by IdNPnbroadcastInformation.ValidateAll() if the
// designated constraints aren't met.
type IdNPnbroadcastInformationMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdNPnbroadcastInformationMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdNPnbroadcastInformationMultiError) AllErrors() []error { return m }

// IdNPnbroadcastInformationValidationError is the validation error returned by
// IdNPnbroadcastInformation.Validate if the designated constraints aren't met.
type IdNPnbroadcastInformationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdNPnbroadcastInformationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdNPnbroadcastInformationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdNPnbroadcastInformationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdNPnbroadcastInformationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdNPnbroadcastInformationValidationError) ErrorName() string {
	return "IdNPnbroadcastInformationValidationError"
}

// Error satisfies the builtin error interface
func (e IdNPnbroadcastInformationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdNPnbroadcastInformation.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdNPnbroadcastInformationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdNPnbroadcastInformationValidationError{}

// Validate checks the field values on IdNPnsupportInfo with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *IdNPnsupportInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdNPnsupportInfo with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdNPnsupportInfoMultiError, or nil if none found.
func (m *IdNPnsupportInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *IdNPnsupportInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 384 {
		err := IdNPnsupportInfoValidationError{
			field:  "Value",
			reason: "value must equal 384",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdNPnsupportInfoMultiError(errors)
	}

	return nil
}

// IdNPnsupportInfoMultiError is an error wrapping multiple validation errors
// returned by IdNPnsupportInfo.ValidateAll() if the designated constraints
// aren't met.
type IdNPnsupportInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdNPnsupportInfoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdNPnsupportInfoMultiError) AllErrors() []error { return m }

// IdNPnsupportInfoValidationError is the validation error returned by
// IdNPnsupportInfo.Validate if the designated constraints aren't met.
type IdNPnsupportInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdNPnsupportInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdNPnsupportInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdNPnsupportInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdNPnsupportInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdNPnsupportInfoValidationError) ErrorName() string { return "IdNPnsupportInfoValidationError" }

// Error satisfies the builtin error interface
func (e IdNPnsupportInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdNPnsupportInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdNPnsupportInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdNPnsupportInfoValidationError{}

// Validate checks the field values on IdNId with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *IdNId) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdNId with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in IdNIdMultiError, or nil if none found.
func (m *IdNId) ValidateAll() error {
	return m.validate(true)
}

func (m *IdNId) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 385 {
		err := IdNIdValidationError{
			field:  "Value",
			reason: "value must equal 385",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdNIdMultiError(errors)
	}

	return nil
}

// IdNIdMultiError is an error wrapping multiple validation errors returned by
// IdNId.ValidateAll() if the designated constraints aren't met.
type IdNIdMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdNIdMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdNIdMultiError) AllErrors() []error { return m }

// IdNIdValidationError is the validation error returned by IdNId.Validate if
// the designated constraints aren't met.
type IdNIdValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdNIdValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdNIdValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdNIdValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdNIdValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdNIdValidationError) ErrorName() string { return "IdNIdValidationError" }

// Error satisfies the builtin error interface
func (e IdNIdValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdNId.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdNIdValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdNIdValidationError{}

// Validate checks the field values on IdAvailableSnpnIDList with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdAvailableSnpnIDList) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdAvailableSnpnIDList with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdAvailableSnpnIDListMultiError, or nil if none found.
func (m *IdAvailableSnpnIDList) ValidateAll() error {
	return m.validate(true)
}

func (m *IdAvailableSnpnIDList) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 386 {
		err := IdAvailableSnpnIDListValidationError{
			field:  "Value",
			reason: "value must equal 386",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdAvailableSnpnIDListMultiError(errors)
	}

	return nil
}

// IdAvailableSnpnIDListMultiError is an error wrapping multiple validation
// errors returned by IdAvailableSnpnIDList.ValidateAll() if the designated
// constraints aren't met.
type IdAvailableSnpnIDListMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdAvailableSnpnIDListMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdAvailableSnpnIDListMultiError) AllErrors() []error { return m }

// IdAvailableSnpnIDListValidationError is the validation error returned by
// IdAvailableSnpnIDList.Validate if the designated constraints aren't met.
type IdAvailableSnpnIDListValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdAvailableSnpnIDListValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdAvailableSnpnIDListValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdAvailableSnpnIDListValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdAvailableSnpnIDListValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdAvailableSnpnIDListValidationError) ErrorName() string {
	return "IdAvailableSnpnIDListValidationError"
}

// Error satisfies the builtin error interface
func (e IdAvailableSnpnIDListValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdAvailableSnpnIDList.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdAvailableSnpnIDListValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdAvailableSnpnIDListValidationError{}

// Validate checks the field values on IdSIb10Message with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *IdSIb10Message) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdSIb10Message with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in IdSIb10MessageMultiError,
// or nil if none found.
func (m *IdSIb10Message) ValidateAll() error {
	return m.validate(true)
}

func (m *IdSIb10Message) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 387 {
		err := IdSIb10MessageValidationError{
			field:  "Value",
			reason: "value must equal 387",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdSIb10MessageMultiError(errors)
	}

	return nil
}

// IdSIb10MessageMultiError is an error wrapping multiple validation errors
// returned by IdSIb10Message.ValidateAll() if the designated constraints
// aren't met.
type IdSIb10MessageMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdSIb10MessageMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdSIb10MessageMultiError) AllErrors() []error { return m }

// IdSIb10MessageValidationError is the validation error returned by
// IdSIb10Message.Validate if the designated constraints aren't met.
type IdSIb10MessageValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdSIb10MessageValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdSIb10MessageValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdSIb10MessageValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdSIb10MessageValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdSIb10MessageValidationError) ErrorName() string { return "IdSIb10MessageValidationError" }

// Error satisfies the builtin error interface
func (e IdSIb10MessageValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdSIb10Message.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdSIb10MessageValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdSIb10MessageValidationError{}

// Validate checks the field values on IdDLcarrierList with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *IdDLcarrierList) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdDLcarrierList with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdDLcarrierListMultiError, or nil if none found.
func (m *IdDLcarrierList) ValidateAll() error {
	return m.validate(true)
}

func (m *IdDLcarrierList) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 389 {
		err := IdDLcarrierListValidationError{
			field:  "Value",
			reason: "value must equal 389",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdDLcarrierListMultiError(errors)
	}

	return nil
}

// IdDLcarrierListMultiError is an error wrapping multiple validation errors
// returned by IdDLcarrierList.ValidateAll() if the designated constraints
// aren't met.
type IdDLcarrierListMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdDLcarrierListMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdDLcarrierListMultiError) AllErrors() []error { return m }

// IdDLcarrierListValidationError is the validation error returned by
// IdDLcarrierList.Validate if the designated constraints aren't met.
type IdDLcarrierListValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdDLcarrierListValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdDLcarrierListValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdDLcarrierListValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdDLcarrierListValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdDLcarrierListValidationError) ErrorName() string { return "IdDLcarrierListValidationError" }

// Error satisfies the builtin error interface
func (e IdDLcarrierListValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdDLcarrierList.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdDLcarrierListValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdDLcarrierListValidationError{}

// Validate checks the field values on IdExtendedTaisliceSupportList with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdExtendedTaisliceSupportList) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdExtendedTaisliceSupportList with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// IdExtendedTaisliceSupportListMultiError, or nil if none found.
func (m *IdExtendedTaisliceSupportList) ValidateAll() error {
	return m.validate(true)
}

func (m *IdExtendedTaisliceSupportList) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 390 {
		err := IdExtendedTaisliceSupportListValidationError{
			field:  "Value",
			reason: "value must equal 390",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdExtendedTaisliceSupportListMultiError(errors)
	}

	return nil
}

// IdExtendedTaisliceSupportListMultiError is an error wrapping multiple
// validation errors returned by IdExtendedTaisliceSupportList.ValidateAll()
// if the designated constraints aren't met.
type IdExtendedTaisliceSupportListMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdExtendedTaisliceSupportListMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdExtendedTaisliceSupportListMultiError) AllErrors() []error { return m }

// IdExtendedTaisliceSupportListValidationError is the validation error
// returned by IdExtendedTaisliceSupportList.Validate if the designated
// constraints aren't met.
type IdExtendedTaisliceSupportListValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdExtendedTaisliceSupportListValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdExtendedTaisliceSupportListValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdExtendedTaisliceSupportListValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdExtendedTaisliceSupportListValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdExtendedTaisliceSupportListValidationError) ErrorName() string {
	return "IdExtendedTaisliceSupportListValidationError"
}

// Error satisfies the builtin error interface
func (e IdExtendedTaisliceSupportListValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdExtendedTaisliceSupportList.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdExtendedTaisliceSupportListValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdExtendedTaisliceSupportListValidationError{}

// Validate checks the field values on
// IdRequestedSrstransmissionCharacteristics with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *IdRequestedSrstransmissionCharacteristics) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// IdRequestedSrstransmissionCharacteristics with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// IdRequestedSrstransmissionCharacteristicsMultiError, or nil if none found.
func (m *IdRequestedSrstransmissionCharacteristics) ValidateAll() error {
	return m.validate(true)
}

func (m *IdRequestedSrstransmissionCharacteristics) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 391 {
		err := IdRequestedSrstransmissionCharacteristicsValidationError{
			field:  "Value",
			reason: "value must equal 391",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdRequestedSrstransmissionCharacteristicsMultiError(errors)
	}

	return nil
}

// IdRequestedSrstransmissionCharacteristicsMultiError is an error wrapping
// multiple validation errors returned by
// IdRequestedSrstransmissionCharacteristics.ValidateAll() if the designated
// constraints aren't met.
type IdRequestedSrstransmissionCharacteristicsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdRequestedSrstransmissionCharacteristicsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdRequestedSrstransmissionCharacteristicsMultiError) AllErrors() []error { return m }

// IdRequestedSrstransmissionCharacteristicsValidationError is the validation
// error returned by IdRequestedSrstransmissionCharacteristics.Validate if the
// designated constraints aren't met.
type IdRequestedSrstransmissionCharacteristicsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdRequestedSrstransmissionCharacteristicsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdRequestedSrstransmissionCharacteristicsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdRequestedSrstransmissionCharacteristicsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdRequestedSrstransmissionCharacteristicsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdRequestedSrstransmissionCharacteristicsValidationError) ErrorName() string {
	return "IdRequestedSrstransmissionCharacteristicsValidationError"
}

// Error satisfies the builtin error interface
func (e IdRequestedSrstransmissionCharacteristicsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdRequestedSrstransmissionCharacteristics.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdRequestedSrstransmissionCharacteristicsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdRequestedSrstransmissionCharacteristicsValidationError{}

// Validate checks the field values on IdPosAssistanceInformation with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdPosAssistanceInformation) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdPosAssistanceInformation with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdPosAssistanceInformationMultiError, or nil if none found.
func (m *IdPosAssistanceInformation) ValidateAll() error {
	return m.validate(true)
}

func (m *IdPosAssistanceInformation) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 392 {
		err := IdPosAssistanceInformationValidationError{
			field:  "Value",
			reason: "value must equal 392",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdPosAssistanceInformationMultiError(errors)
	}

	return nil
}

// IdPosAssistanceInformationMultiError is an error wrapping multiple
// validation errors returned by IdPosAssistanceInformation.ValidateAll() if
// the designated constraints aren't met.
type IdPosAssistanceInformationMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdPosAssistanceInformationMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdPosAssistanceInformationMultiError) AllErrors() []error { return m }

// IdPosAssistanceInformationValidationError is the validation error returned
// by IdPosAssistanceInformation.Validate if the designated constraints aren't met.
type IdPosAssistanceInformationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdPosAssistanceInformationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdPosAssistanceInformationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdPosAssistanceInformationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdPosAssistanceInformationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdPosAssistanceInformationValidationError) ErrorName() string {
	return "IdPosAssistanceInformationValidationError"
}

// Error satisfies the builtin error interface
func (e IdPosAssistanceInformationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdPosAssistanceInformation.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdPosAssistanceInformationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdPosAssistanceInformationValidationError{}

// Validate checks the field values on IdPosBroadcast with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *IdPosBroadcast) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdPosBroadcast with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in IdPosBroadcastMultiError,
// or nil if none found.
func (m *IdPosBroadcast) ValidateAll() error {
	return m.validate(true)
}

func (m *IdPosBroadcast) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 393 {
		err := IdPosBroadcastValidationError{
			field:  "Value",
			reason: "value must equal 393",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdPosBroadcastMultiError(errors)
	}

	return nil
}

// IdPosBroadcastMultiError is an error wrapping multiple validation errors
// returned by IdPosBroadcast.ValidateAll() if the designated constraints
// aren't met.
type IdPosBroadcastMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdPosBroadcastMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdPosBroadcastMultiError) AllErrors() []error { return m }

// IdPosBroadcastValidationError is the validation error returned by
// IdPosBroadcast.Validate if the designated constraints aren't met.
type IdPosBroadcastValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdPosBroadcastValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdPosBroadcastValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdPosBroadcastValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdPosBroadcastValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdPosBroadcastValidationError) ErrorName() string { return "IdPosBroadcastValidationError" }

// Error satisfies the builtin error interface
func (e IdPosBroadcastValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdPosBroadcast.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdPosBroadcastValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdPosBroadcastValidationError{}

// Validate checks the field values on IdRoutingId with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *IdRoutingId) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdRoutingId with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in IdRoutingIdMultiError, or
// nil if none found.
func (m *IdRoutingId) ValidateAll() error {
	return m.validate(true)
}

func (m *IdRoutingId) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 394 {
		err := IdRoutingIdValidationError{
			field:  "Value",
			reason: "value must equal 394",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdRoutingIdMultiError(errors)
	}

	return nil
}

// IdRoutingIdMultiError is an error wrapping multiple validation errors
// returned by IdRoutingId.ValidateAll() if the designated constraints aren't met.
type IdRoutingIdMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdRoutingIdMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdRoutingIdMultiError) AllErrors() []error { return m }

// IdRoutingIdValidationError is the validation error returned by
// IdRoutingId.Validate if the designated constraints aren't met.
type IdRoutingIdValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdRoutingIdValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdRoutingIdValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdRoutingIdValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdRoutingIdValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdRoutingIdValidationError) ErrorName() string { return "IdRoutingIdValidationError" }

// Error satisfies the builtin error interface
func (e IdRoutingIdValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdRoutingId.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdRoutingIdValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdRoutingIdValidationError{}

// Validate checks the field values on IdPosAssistanceInformationFailureList
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *IdPosAssistanceInformationFailureList) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdPosAssistanceInformationFailureList
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// IdPosAssistanceInformationFailureListMultiError, or nil if none found.
func (m *IdPosAssistanceInformationFailureList) ValidateAll() error {
	return m.validate(true)
}

func (m *IdPosAssistanceInformationFailureList) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 395 {
		err := IdPosAssistanceInformationFailureListValidationError{
			field:  "Value",
			reason: "value must equal 395",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdPosAssistanceInformationFailureListMultiError(errors)
	}

	return nil
}

// IdPosAssistanceInformationFailureListMultiError is an error wrapping
// multiple validation errors returned by
// IdPosAssistanceInformationFailureList.ValidateAll() if the designated
// constraints aren't met.
type IdPosAssistanceInformationFailureListMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdPosAssistanceInformationFailureListMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdPosAssistanceInformationFailureListMultiError) AllErrors() []error { return m }

// IdPosAssistanceInformationFailureListValidationError is the validation error
// returned by IdPosAssistanceInformationFailureList.Validate if the
// designated constraints aren't met.
type IdPosAssistanceInformationFailureListValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdPosAssistanceInformationFailureListValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdPosAssistanceInformationFailureListValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdPosAssistanceInformationFailureListValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdPosAssistanceInformationFailureListValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdPosAssistanceInformationFailureListValidationError) ErrorName() string {
	return "IdPosAssistanceInformationFailureListValidationError"
}

// Error satisfies the builtin error interface
func (e IdPosAssistanceInformationFailureListValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdPosAssistanceInformationFailureList.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdPosAssistanceInformationFailureListValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdPosAssistanceInformationFailureListValidationError{}

// Validate checks the field values on IdPosMeasurementQuantities with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdPosMeasurementQuantities) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdPosMeasurementQuantities with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdPosMeasurementQuantitiesMultiError, or nil if none found.
func (m *IdPosMeasurementQuantities) ValidateAll() error {
	return m.validate(true)
}

func (m *IdPosMeasurementQuantities) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 396 {
		err := IdPosMeasurementQuantitiesValidationError{
			field:  "Value",
			reason: "value must equal 396",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdPosMeasurementQuantitiesMultiError(errors)
	}

	return nil
}

// IdPosMeasurementQuantitiesMultiError is an error wrapping multiple
// validation errors returned by IdPosMeasurementQuantities.ValidateAll() if
// the designated constraints aren't met.
type IdPosMeasurementQuantitiesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdPosMeasurementQuantitiesMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdPosMeasurementQuantitiesMultiError) AllErrors() []error { return m }

// IdPosMeasurementQuantitiesValidationError is the validation error returned
// by IdPosMeasurementQuantities.Validate if the designated constraints aren't met.
type IdPosMeasurementQuantitiesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdPosMeasurementQuantitiesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdPosMeasurementQuantitiesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdPosMeasurementQuantitiesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdPosMeasurementQuantitiesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdPosMeasurementQuantitiesValidationError) ErrorName() string {
	return "IdPosMeasurementQuantitiesValidationError"
}

// Error satisfies the builtin error interface
func (e IdPosMeasurementQuantitiesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdPosMeasurementQuantities.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdPosMeasurementQuantitiesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdPosMeasurementQuantitiesValidationError{}

// Validate checks the field values on IdPosMeasurementResultList with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdPosMeasurementResultList) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdPosMeasurementResultList with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdPosMeasurementResultListMultiError, or nil if none found.
func (m *IdPosMeasurementResultList) ValidateAll() error {
	return m.validate(true)
}

func (m *IdPosMeasurementResultList) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 397 {
		err := IdPosMeasurementResultListValidationError{
			field:  "Value",
			reason: "value must equal 397",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdPosMeasurementResultListMultiError(errors)
	}

	return nil
}

// IdPosMeasurementResultListMultiError is an error wrapping multiple
// validation errors returned by IdPosMeasurementResultList.ValidateAll() if
// the designated constraints aren't met.
type IdPosMeasurementResultListMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdPosMeasurementResultListMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdPosMeasurementResultListMultiError) AllErrors() []error { return m }

// IdPosMeasurementResultListValidationError is the validation error returned
// by IdPosMeasurementResultList.Validate if the designated constraints aren't met.
type IdPosMeasurementResultListValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdPosMeasurementResultListValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdPosMeasurementResultListValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdPosMeasurementResultListValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdPosMeasurementResultListValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdPosMeasurementResultListValidationError) ErrorName() string {
	return "IdPosMeasurementResultListValidationError"
}

// Error satisfies the builtin error interface
func (e IdPosMeasurementResultListValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdPosMeasurementResultList.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdPosMeasurementResultListValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdPosMeasurementResultListValidationError{}

// Validate checks the field values on IdTRpinformationTypeListTrpreq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdTRpinformationTypeListTrpreq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdTRpinformationTypeListTrpreq with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// IdTRpinformationTypeListTrpreqMultiError, or nil if none found.
func (m *IdTRpinformationTypeListTrpreq) ValidateAll() error {
	return m.validate(true)
}

func (m *IdTRpinformationTypeListTrpreq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 398 {
		err := IdTRpinformationTypeListTrpreqValidationError{
			field:  "Value",
			reason: "value must equal 398",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdTRpinformationTypeListTrpreqMultiError(errors)
	}

	return nil
}

// IdTRpinformationTypeListTrpreqMultiError is an error wrapping multiple
// validation errors returned by IdTRpinformationTypeListTrpreq.ValidateAll()
// if the designated constraints aren't met.
type IdTRpinformationTypeListTrpreqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdTRpinformationTypeListTrpreqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdTRpinformationTypeListTrpreqMultiError) AllErrors() []error { return m }

// IdTRpinformationTypeListTrpreqValidationError is the validation error
// returned by IdTRpinformationTypeListTrpreq.Validate if the designated
// constraints aren't met.
type IdTRpinformationTypeListTrpreqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdTRpinformationTypeListTrpreqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdTRpinformationTypeListTrpreqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdTRpinformationTypeListTrpreqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdTRpinformationTypeListTrpreqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdTRpinformationTypeListTrpreqValidationError) ErrorName() string {
	return "IdTRpinformationTypeListTrpreqValidationError"
}

// Error satisfies the builtin error interface
func (e IdTRpinformationTypeListTrpreqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdTRpinformationTypeListTrpreq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdTRpinformationTypeListTrpreqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdTRpinformationTypeListTrpreqValidationError{}

// Validate checks the field values on IdTRpinformationTypeItem with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdTRpinformationTypeItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdTRpinformationTypeItem with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdTRpinformationTypeItemMultiError, or nil if none found.
func (m *IdTRpinformationTypeItem) ValidateAll() error {
	return m.validate(true)
}

func (m *IdTRpinformationTypeItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 399 {
		err := IdTRpinformationTypeItemValidationError{
			field:  "Value",
			reason: "value must equal 399",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdTRpinformationTypeItemMultiError(errors)
	}

	return nil
}

// IdTRpinformationTypeItemMultiError is an error wrapping multiple validation
// errors returned by IdTRpinformationTypeItem.ValidateAll() if the designated
// constraints aren't met.
type IdTRpinformationTypeItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdTRpinformationTypeItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdTRpinformationTypeItemMultiError) AllErrors() []error { return m }

// IdTRpinformationTypeItemValidationError is the validation error returned by
// IdTRpinformationTypeItem.Validate if the designated constraints aren't met.
type IdTRpinformationTypeItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdTRpinformationTypeItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdTRpinformationTypeItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdTRpinformationTypeItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdTRpinformationTypeItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdTRpinformationTypeItemValidationError) ErrorName() string {
	return "IdTRpinformationTypeItemValidationError"
}

// Error satisfies the builtin error interface
func (e IdTRpinformationTypeItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdTRpinformationTypeItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdTRpinformationTypeItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdTRpinformationTypeItemValidationError{}

// Validate checks the field values on IdTRpinformationListTrpresp with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdTRpinformationListTrpresp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdTRpinformationListTrpresp with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdTRpinformationListTrprespMultiError, or nil if none found.
func (m *IdTRpinformationListTrpresp) ValidateAll() error {
	return m.validate(true)
}

func (m *IdTRpinformationListTrpresp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 400 {
		err := IdTRpinformationListTrprespValidationError{
			field:  "Value",
			reason: "value must equal 400",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdTRpinformationListTrprespMultiError(errors)
	}

	return nil
}

// IdTRpinformationListTrprespMultiError is an error wrapping multiple
// validation errors returned by IdTRpinformationListTrpresp.ValidateAll() if
// the designated constraints aren't met.
type IdTRpinformationListTrprespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdTRpinformationListTrprespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdTRpinformationListTrprespMultiError) AllErrors() []error { return m }

// IdTRpinformationListTrprespValidationError is the validation error returned
// by IdTRpinformationListTrpresp.Validate if the designated constraints
// aren't met.
type IdTRpinformationListTrprespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdTRpinformationListTrprespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdTRpinformationListTrprespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdTRpinformationListTrprespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdTRpinformationListTrprespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdTRpinformationListTrprespValidationError) ErrorName() string {
	return "IdTRpinformationListTrprespValidationError"
}

// Error satisfies the builtin error interface
func (e IdTRpinformationListTrprespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdTRpinformationListTrpresp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdTRpinformationListTrprespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdTRpinformationListTrprespValidationError{}

// Validate checks the field values on IdTRpinformationItem with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdTRpinformationItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdTRpinformationItem with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdTRpinformationItemMultiError, or nil if none found.
func (m *IdTRpinformationItem) ValidateAll() error {
	return m.validate(true)
}

func (m *IdTRpinformationItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 401 {
		err := IdTRpinformationItemValidationError{
			field:  "Value",
			reason: "value must equal 401",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdTRpinformationItemMultiError(errors)
	}

	return nil
}

// IdTRpinformationItemMultiError is an error wrapping multiple validation
// errors returned by IdTRpinformationItem.ValidateAll() if the designated
// constraints aren't met.
type IdTRpinformationItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdTRpinformationItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdTRpinformationItemMultiError) AllErrors() []error { return m }

// IdTRpinformationItemValidationError is the validation error returned by
// IdTRpinformationItem.Validate if the designated constraints aren't met.
type IdTRpinformationItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdTRpinformationItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdTRpinformationItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdTRpinformationItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdTRpinformationItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdTRpinformationItemValidationError) ErrorName() string {
	return "IdTRpinformationItemValidationError"
}

// Error satisfies the builtin error interface
func (e IdTRpinformationItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdTRpinformationItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdTRpinformationItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdTRpinformationItemValidationError{}

// Validate checks the field values on IdLMfMeasurementId with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdLMfMeasurementId) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdLMfMeasurementId with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdLMfMeasurementIdMultiError, or nil if none found.
func (m *IdLMfMeasurementId) ValidateAll() error {
	return m.validate(true)
}

func (m *IdLMfMeasurementId) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 402 {
		err := IdLMfMeasurementIdValidationError{
			field:  "Value",
			reason: "value must equal 402",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdLMfMeasurementIdMultiError(errors)
	}

	return nil
}

// IdLMfMeasurementIdMultiError is an error wrapping multiple validation errors
// returned by IdLMfMeasurementId.ValidateAll() if the designated constraints
// aren't met.
type IdLMfMeasurementIdMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdLMfMeasurementIdMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdLMfMeasurementIdMultiError) AllErrors() []error { return m }

// IdLMfMeasurementIdValidationError is the validation error returned by
// IdLMfMeasurementId.Validate if the designated constraints aren't met.
type IdLMfMeasurementIdValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdLMfMeasurementIdValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdLMfMeasurementIdValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdLMfMeasurementIdValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdLMfMeasurementIdValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdLMfMeasurementIdValidationError) ErrorName() string {
	return "IdLMfMeasurementIdValidationError"
}

// Error satisfies the builtin error interface
func (e IdLMfMeasurementIdValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdLMfMeasurementId.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdLMfMeasurementIdValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdLMfMeasurementIdValidationError{}

// Validate checks the field values on IdSRstype with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *IdSRstype) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdSRstype with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in IdSRstypeMultiError, or nil
// if none found.
func (m *IdSRstype) ValidateAll() error {
	return m.validate(true)
}

func (m *IdSRstype) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 403 {
		err := IdSRstypeValidationError{
			field:  "Value",
			reason: "value must equal 403",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdSRstypeMultiError(errors)
	}

	return nil
}

// IdSRstypeMultiError is an error wrapping multiple validation errors returned
// by IdSRstype.ValidateAll() if the designated constraints aren't met.
type IdSRstypeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdSRstypeMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdSRstypeMultiError) AllErrors() []error { return m }

// IdSRstypeValidationError is the validation error returned by
// IdSRstype.Validate if the designated constraints aren't met.
type IdSRstypeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdSRstypeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdSRstypeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdSRstypeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdSRstypeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdSRstypeValidationError) ErrorName() string { return "IdSRstypeValidationError" }

// Error satisfies the builtin error interface
func (e IdSRstypeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdSRstype.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdSRstypeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdSRstypeValidationError{}

// Validate checks the field values on IdActivationTime with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *IdActivationTime) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdActivationTime with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdActivationTimeMultiError, or nil if none found.
func (m *IdActivationTime) ValidateAll() error {
	return m.validate(true)
}

func (m *IdActivationTime) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 404 {
		err := IdActivationTimeValidationError{
			field:  "Value",
			reason: "value must equal 404",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdActivationTimeMultiError(errors)
	}

	return nil
}

// IdActivationTimeMultiError is an error wrapping multiple validation errors
// returned by IdActivationTime.ValidateAll() if the designated constraints
// aren't met.
type IdActivationTimeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdActivationTimeMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdActivationTimeMultiError) AllErrors() []error { return m }

// IdActivationTimeValidationError is the validation error returned by
// IdActivationTime.Validate if the designated constraints aren't met.
type IdActivationTimeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdActivationTimeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdActivationTimeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdActivationTimeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdActivationTimeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdActivationTimeValidationError) ErrorName() string { return "IdActivationTimeValidationError" }

// Error satisfies the builtin error interface
func (e IdActivationTimeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdActivationTime.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdActivationTimeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdActivationTimeValidationError{}

// Validate checks the field values on IdAbortTransmission with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdAbortTransmission) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdAbortTransmission with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdAbortTransmissionMultiError, or nil if none found.
func (m *IdAbortTransmission) ValidateAll() error {
	return m.validate(true)
}

func (m *IdAbortTransmission) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 405 {
		err := IdAbortTransmissionValidationError{
			field:  "Value",
			reason: "value must equal 405",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdAbortTransmissionMultiError(errors)
	}

	return nil
}

// IdAbortTransmissionMultiError is an error wrapping multiple validation
// errors returned by IdAbortTransmission.ValidateAll() if the designated
// constraints aren't met.
type IdAbortTransmissionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdAbortTransmissionMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdAbortTransmissionMultiError) AllErrors() []error { return m }

// IdAbortTransmissionValidationError is the validation error returned by
// IdAbortTransmission.Validate if the designated constraints aren't met.
type IdAbortTransmissionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdAbortTransmissionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdAbortTransmissionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdAbortTransmissionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdAbortTransmissionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdAbortTransmissionValidationError) ErrorName() string {
	return "IdAbortTransmissionValidationError"
}

// Error satisfies the builtin error interface
func (e IdAbortTransmissionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdAbortTransmission.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdAbortTransmissionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdAbortTransmissionValidationError{}

// Validate checks the field values on IdPositioningBroadcastCells with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdPositioningBroadcastCells) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdPositioningBroadcastCells with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdPositioningBroadcastCellsMultiError, or nil if none found.
func (m *IdPositioningBroadcastCells) ValidateAll() error {
	return m.validate(true)
}

func (m *IdPositioningBroadcastCells) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 406 {
		err := IdPositioningBroadcastCellsValidationError{
			field:  "Value",
			reason: "value must equal 406",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdPositioningBroadcastCellsMultiError(errors)
	}

	return nil
}

// IdPositioningBroadcastCellsMultiError is an error wrapping multiple
// validation errors returned by IdPositioningBroadcastCells.ValidateAll() if
// the designated constraints aren't met.
type IdPositioningBroadcastCellsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdPositioningBroadcastCellsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdPositioningBroadcastCellsMultiError) AllErrors() []error { return m }

// IdPositioningBroadcastCellsValidationError is the validation error returned
// by IdPositioningBroadcastCells.Validate if the designated constraints
// aren't met.
type IdPositioningBroadcastCellsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdPositioningBroadcastCellsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdPositioningBroadcastCellsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdPositioningBroadcastCellsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdPositioningBroadcastCellsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdPositioningBroadcastCellsValidationError) ErrorName() string {
	return "IdPositioningBroadcastCellsValidationError"
}

// Error satisfies the builtin error interface
func (e IdPositioningBroadcastCellsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdPositioningBroadcastCells.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdPositioningBroadcastCellsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdPositioningBroadcastCellsValidationError{}

// Validate checks the field values on IdSRsconfiguration with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdSRsconfiguration) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdSRsconfiguration with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdSRsconfigurationMultiError, or nil if none found.
func (m *IdSRsconfiguration) ValidateAll() error {
	return m.validate(true)
}

func (m *IdSRsconfiguration) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 407 {
		err := IdSRsconfigurationValidationError{
			field:  "Value",
			reason: "value must equal 407",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdSRsconfigurationMultiError(errors)
	}

	return nil
}

// IdSRsconfigurationMultiError is an error wrapping multiple validation errors
// returned by IdSRsconfiguration.ValidateAll() if the designated constraints
// aren't met.
type IdSRsconfigurationMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdSRsconfigurationMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdSRsconfigurationMultiError) AllErrors() []error { return m }

// IdSRsconfigurationValidationError is the validation error returned by
// IdSRsconfiguration.Validate if the designated constraints aren't met.
type IdSRsconfigurationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdSRsconfigurationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdSRsconfigurationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdSRsconfigurationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdSRsconfigurationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdSRsconfigurationValidationError) ErrorName() string {
	return "IdSRsconfigurationValidationError"
}

// Error satisfies the builtin error interface
func (e IdSRsconfigurationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdSRsconfiguration.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdSRsconfigurationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdSRsconfigurationValidationError{}

// Validate checks the field values on IdPosReportCharacteristics with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdPosReportCharacteristics) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdPosReportCharacteristics with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdPosReportCharacteristicsMultiError, or nil if none found.
func (m *IdPosReportCharacteristics) ValidateAll() error {
	return m.validate(true)
}

func (m *IdPosReportCharacteristics) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 408 {
		err := IdPosReportCharacteristicsValidationError{
			field:  "Value",
			reason: "value must equal 408",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdPosReportCharacteristicsMultiError(errors)
	}

	return nil
}

// IdPosReportCharacteristicsMultiError is an error wrapping multiple
// validation errors returned by IdPosReportCharacteristics.ValidateAll() if
// the designated constraints aren't met.
type IdPosReportCharacteristicsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdPosReportCharacteristicsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdPosReportCharacteristicsMultiError) AllErrors() []error { return m }

// IdPosReportCharacteristicsValidationError is the validation error returned
// by IdPosReportCharacteristics.Validate if the designated constraints aren't met.
type IdPosReportCharacteristicsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdPosReportCharacteristicsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdPosReportCharacteristicsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdPosReportCharacteristicsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdPosReportCharacteristicsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdPosReportCharacteristicsValidationError) ErrorName() string {
	return "IdPosReportCharacteristicsValidationError"
}

// Error satisfies the builtin error interface
func (e IdPosReportCharacteristicsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdPosReportCharacteristics.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdPosReportCharacteristicsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdPosReportCharacteristicsValidationError{}

// Validate checks the field values on IdPosMeasurementPeriodicity with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdPosMeasurementPeriodicity) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdPosMeasurementPeriodicity with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdPosMeasurementPeriodicityMultiError, or nil if none found.
func (m *IdPosMeasurementPeriodicity) ValidateAll() error {
	return m.validate(true)
}

func (m *IdPosMeasurementPeriodicity) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 409 {
		err := IdPosMeasurementPeriodicityValidationError{
			field:  "Value",
			reason: "value must equal 409",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdPosMeasurementPeriodicityMultiError(errors)
	}

	return nil
}

// IdPosMeasurementPeriodicityMultiError is an error wrapping multiple
// validation errors returned by IdPosMeasurementPeriodicity.ValidateAll() if
// the designated constraints aren't met.
type IdPosMeasurementPeriodicityMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdPosMeasurementPeriodicityMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdPosMeasurementPeriodicityMultiError) AllErrors() []error { return m }

// IdPosMeasurementPeriodicityValidationError is the validation error returned
// by IdPosMeasurementPeriodicity.Validate if the designated constraints
// aren't met.
type IdPosMeasurementPeriodicityValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdPosMeasurementPeriodicityValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdPosMeasurementPeriodicityValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdPosMeasurementPeriodicityValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdPosMeasurementPeriodicityValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdPosMeasurementPeriodicityValidationError) ErrorName() string {
	return "IdPosMeasurementPeriodicityValidationError"
}

// Error satisfies the builtin error interface
func (e IdPosMeasurementPeriodicityValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdPosMeasurementPeriodicity.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdPosMeasurementPeriodicityValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdPosMeasurementPeriodicityValidationError{}

// Validate checks the field values on IdTRplist with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *IdTRplist) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdTRplist with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in IdTRplistMultiError, or nil
// if none found.
func (m *IdTRplist) ValidateAll() error {
	return m.validate(true)
}

func (m *IdTRplist) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 410 {
		err := IdTRplistValidationError{
			field:  "Value",
			reason: "value must equal 410",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdTRplistMultiError(errors)
	}

	return nil
}

// IdTRplistMultiError is an error wrapping multiple validation errors returned
// by IdTRplist.ValidateAll() if the designated constraints aren't met.
type IdTRplistMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdTRplistMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdTRplistMultiError) AllErrors() []error { return m }

// IdTRplistValidationError is the validation error returned by
// IdTRplist.Validate if the designated constraints aren't met.
type IdTRplistValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdTRplistValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdTRplistValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdTRplistValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdTRplistValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdTRplistValidationError) ErrorName() string { return "IdTRplistValidationError" }

// Error satisfies the builtin error interface
func (e IdTRplistValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdTRplist.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdTRplistValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdTRplistValidationError{}

// Validate checks the field values on IdRAnMeasurementId with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdRAnMeasurementId) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdRAnMeasurementId with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdRAnMeasurementIdMultiError, or nil if none found.
func (m *IdRAnMeasurementId) ValidateAll() error {
	return m.validate(true)
}

func (m *IdRAnMeasurementId) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 411 {
		err := IdRAnMeasurementIdValidationError{
			field:  "Value",
			reason: "value must equal 411",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdRAnMeasurementIdMultiError(errors)
	}

	return nil
}

// IdRAnMeasurementIdMultiError is an error wrapping multiple validation errors
// returned by IdRAnMeasurementId.ValidateAll() if the designated constraints
// aren't met.
type IdRAnMeasurementIdMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdRAnMeasurementIdMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdRAnMeasurementIdMultiError) AllErrors() []error { return m }

// IdRAnMeasurementIdValidationError is the validation error returned by
// IdRAnMeasurementId.Validate if the designated constraints aren't met.
type IdRAnMeasurementIdValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdRAnMeasurementIdValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdRAnMeasurementIdValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdRAnMeasurementIdValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdRAnMeasurementIdValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdRAnMeasurementIdValidationError) ErrorName() string {
	return "IdRAnMeasurementIdValidationError"
}

// Error satisfies the builtin error interface
func (e IdRAnMeasurementIdValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdRAnMeasurementId.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdRAnMeasurementIdValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdRAnMeasurementIdValidationError{}

// Validate checks the field values on IdLMfUEMeasurementId with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdLMfUEMeasurementId) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdLMfUEMeasurementId with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdLMfUEMeasurementIdMultiError, or nil if none found.
func (m *IdLMfUEMeasurementId) ValidateAll() error {
	return m.validate(true)
}

func (m *IdLMfUEMeasurementId) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 412 {
		err := IdLMfUEMeasurementIdValidationError{
			field:  "Value",
			reason: "value must equal 412",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdLMfUEMeasurementIdMultiError(errors)
	}

	return nil
}

// IdLMfUEMeasurementIdMultiError is an error wrapping multiple validation
// errors returned by IdLMfUEMeasurementId.ValidateAll() if the designated
// constraints aren't met.
type IdLMfUEMeasurementIdMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdLMfUEMeasurementIdMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdLMfUEMeasurementIdMultiError) AllErrors() []error { return m }

// IdLMfUEMeasurementIdValidationError is the validation error returned by
// IdLMfUEMeasurementId.Validate if the designated constraints aren't met.
type IdLMfUEMeasurementIdValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdLMfUEMeasurementIdValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdLMfUEMeasurementIdValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdLMfUEMeasurementIdValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdLMfUEMeasurementIdValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdLMfUEMeasurementIdValidationError) ErrorName() string {
	return "IdLMfUEMeasurementIdValidationError"
}

// Error satisfies the builtin error interface
func (e IdLMfUEMeasurementIdValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdLMfUEMeasurementId.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdLMfUEMeasurementIdValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdLMfUEMeasurementIdValidationError{}

// Validate checks the field values on IdRAnUEMeasurementId with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdRAnUEMeasurementId) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdRAnUEMeasurementId with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdRAnUEMeasurementIdMultiError, or nil if none found.
func (m *IdRAnUEMeasurementId) ValidateAll() error {
	return m.validate(true)
}

func (m *IdRAnUEMeasurementId) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 413 {
		err := IdRAnUEMeasurementIdValidationError{
			field:  "Value",
			reason: "value must equal 413",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdRAnUEMeasurementIdMultiError(errors)
	}

	return nil
}

// IdRAnUEMeasurementIdMultiError is an error wrapping multiple validation
// errors returned by IdRAnUEMeasurementId.ValidateAll() if the designated
// constraints aren't met.
type IdRAnUEMeasurementIdMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdRAnUEMeasurementIdMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdRAnUEMeasurementIdMultiError) AllErrors() []error { return m }

// IdRAnUEMeasurementIdValidationError is the validation error returned by
// IdRAnUEMeasurementId.Validate if the designated constraints aren't met.
type IdRAnUEMeasurementIdValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdRAnUEMeasurementIdValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdRAnUEMeasurementIdValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdRAnUEMeasurementIdValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdRAnUEMeasurementIdValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdRAnUEMeasurementIdValidationError) ErrorName() string {
	return "IdRAnUEMeasurementIdValidationError"
}

// Error satisfies the builtin error interface
func (e IdRAnUEMeasurementIdValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdRAnUEMeasurementId.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdRAnUEMeasurementIdValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdRAnUEMeasurementIdValidationError{}

// Validate checks the field values on IdECIdMeasurementQuantities with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdECIdMeasurementQuantities) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdECIdMeasurementQuantities with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdECIdMeasurementQuantitiesMultiError, or nil if none found.
func (m *IdECIdMeasurementQuantities) ValidateAll() error {
	return m.validate(true)
}

func (m *IdECIdMeasurementQuantities) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 414 {
		err := IdECIdMeasurementQuantitiesValidationError{
			field:  "Value",
			reason: "value must equal 414",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdECIdMeasurementQuantitiesMultiError(errors)
	}

	return nil
}

// IdECIdMeasurementQuantitiesMultiError is an error wrapping multiple
// validation errors returned by IdECIdMeasurementQuantities.ValidateAll() if
// the designated constraints aren't met.
type IdECIdMeasurementQuantitiesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdECIdMeasurementQuantitiesMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdECIdMeasurementQuantitiesMultiError) AllErrors() []error { return m }

// IdECIdMeasurementQuantitiesValidationError is the validation error returned
// by IdECIdMeasurementQuantities.Validate if the designated constraints
// aren't met.
type IdECIdMeasurementQuantitiesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdECIdMeasurementQuantitiesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdECIdMeasurementQuantitiesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdECIdMeasurementQuantitiesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdECIdMeasurementQuantitiesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdECIdMeasurementQuantitiesValidationError) ErrorName() string {
	return "IdECIdMeasurementQuantitiesValidationError"
}

// Error satisfies the builtin error interface
func (e IdECIdMeasurementQuantitiesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdECIdMeasurementQuantities.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdECIdMeasurementQuantitiesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdECIdMeasurementQuantitiesValidationError{}

// Validate checks the field values on IdECIdMeasurementQuantitiesItem with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdECIdMeasurementQuantitiesItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdECIdMeasurementQuantitiesItem with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// IdECIdMeasurementQuantitiesItemMultiError, or nil if none found.
func (m *IdECIdMeasurementQuantitiesItem) ValidateAll() error {
	return m.validate(true)
}

func (m *IdECIdMeasurementQuantitiesItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 415 {
		err := IdECIdMeasurementQuantitiesItemValidationError{
			field:  "Value",
			reason: "value must equal 415",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdECIdMeasurementQuantitiesItemMultiError(errors)
	}

	return nil
}

// IdECIdMeasurementQuantitiesItemMultiError is an error wrapping multiple
// validation errors returned by IdECIdMeasurementQuantitiesItem.ValidateAll()
// if the designated constraints aren't met.
type IdECIdMeasurementQuantitiesItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdECIdMeasurementQuantitiesItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdECIdMeasurementQuantitiesItemMultiError) AllErrors() []error { return m }

// IdECIdMeasurementQuantitiesItemValidationError is the validation error
// returned by IdECIdMeasurementQuantitiesItem.Validate if the designated
// constraints aren't met.
type IdECIdMeasurementQuantitiesItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdECIdMeasurementQuantitiesItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdECIdMeasurementQuantitiesItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdECIdMeasurementQuantitiesItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdECIdMeasurementQuantitiesItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdECIdMeasurementQuantitiesItemValidationError) ErrorName() string {
	return "IdECIdMeasurementQuantitiesItemValidationError"
}

// Error satisfies the builtin error interface
func (e IdECIdMeasurementQuantitiesItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdECIdMeasurementQuantitiesItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdECIdMeasurementQuantitiesItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdECIdMeasurementQuantitiesItemValidationError{}

// Validate checks the field values on IdECIdMeasurementPeriodicity with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdECIdMeasurementPeriodicity) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdECIdMeasurementPeriodicity with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdECIdMeasurementPeriodicityMultiError, or nil if none found.
func (m *IdECIdMeasurementPeriodicity) ValidateAll() error {
	return m.validate(true)
}

func (m *IdECIdMeasurementPeriodicity) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 416 {
		err := IdECIdMeasurementPeriodicityValidationError{
			field:  "Value",
			reason: "value must equal 416",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdECIdMeasurementPeriodicityMultiError(errors)
	}

	return nil
}

// IdECIdMeasurementPeriodicityMultiError is an error wrapping multiple
// validation errors returned by IdECIdMeasurementPeriodicity.ValidateAll() if
// the designated constraints aren't met.
type IdECIdMeasurementPeriodicityMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdECIdMeasurementPeriodicityMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdECIdMeasurementPeriodicityMultiError) AllErrors() []error { return m }

// IdECIdMeasurementPeriodicityValidationError is the validation error returned
// by IdECIdMeasurementPeriodicity.Validate if the designated constraints
// aren't met.
type IdECIdMeasurementPeriodicityValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdECIdMeasurementPeriodicityValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdECIdMeasurementPeriodicityValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdECIdMeasurementPeriodicityValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdECIdMeasurementPeriodicityValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdECIdMeasurementPeriodicityValidationError) ErrorName() string {
	return "IdECIdMeasurementPeriodicityValidationError"
}

// Error satisfies the builtin error interface
func (e IdECIdMeasurementPeriodicityValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdECIdMeasurementPeriodicity.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdECIdMeasurementPeriodicityValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdECIdMeasurementPeriodicityValidationError{}

// Validate checks the field values on IdECIdMeasurementResult with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdECIdMeasurementResult) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdECIdMeasurementResult with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdECIdMeasurementResultMultiError, or nil if none found.
func (m *IdECIdMeasurementResult) ValidateAll() error {
	return m.validate(true)
}

func (m *IdECIdMeasurementResult) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 417 {
		err := IdECIdMeasurementResultValidationError{
			field:  "Value",
			reason: "value must equal 417",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdECIdMeasurementResultMultiError(errors)
	}

	return nil
}

// IdECIdMeasurementResultMultiError is an error wrapping multiple validation
// errors returned by IdECIdMeasurementResult.ValidateAll() if the designated
// constraints aren't met.
type IdECIdMeasurementResultMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdECIdMeasurementResultMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdECIdMeasurementResultMultiError) AllErrors() []error { return m }

// IdECIdMeasurementResultValidationError is the validation error returned by
// IdECIdMeasurementResult.Validate if the designated constraints aren't met.
type IdECIdMeasurementResultValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdECIdMeasurementResultValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdECIdMeasurementResultValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdECIdMeasurementResultValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdECIdMeasurementResultValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdECIdMeasurementResultValidationError) ErrorName() string {
	return "IdECIdMeasurementResultValidationError"
}

// Error satisfies the builtin error interface
func (e IdECIdMeasurementResultValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdECIdMeasurementResult.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdECIdMeasurementResultValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdECIdMeasurementResultValidationError{}

// Validate checks the field values on IdCellPortionID with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *IdCellPortionID) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdCellPortionID with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdCellPortionIDMultiError, or nil if none found.
func (m *IdCellPortionID) ValidateAll() error {
	return m.validate(true)
}

func (m *IdCellPortionID) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 418 {
		err := IdCellPortionIDValidationError{
			field:  "Value",
			reason: "value must equal 418",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdCellPortionIDMultiError(errors)
	}

	return nil
}

// IdCellPortionIDMultiError is an error wrapping multiple validation errors
// returned by IdCellPortionID.ValidateAll() if the designated constraints
// aren't met.
type IdCellPortionIDMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdCellPortionIDMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdCellPortionIDMultiError) AllErrors() []error { return m }

// IdCellPortionIDValidationError is the validation error returned by
// IdCellPortionID.Validate if the designated constraints aren't met.
type IdCellPortionIDValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdCellPortionIDValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdCellPortionIDValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdCellPortionIDValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdCellPortionIDValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdCellPortionIDValidationError) ErrorName() string { return "IdCellPortionIDValidationError" }

// Error satisfies the builtin error interface
func (e IdCellPortionIDValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdCellPortionID.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdCellPortionIDValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdCellPortionIDValidationError{}

// Validate checks the field values on IdSFninitialisationTime with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdSFninitialisationTime) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdSFninitialisationTime with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdSFninitialisationTimeMultiError, or nil if none found.
func (m *IdSFninitialisationTime) ValidateAll() error {
	return m.validate(true)
}

func (m *IdSFninitialisationTime) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 419 {
		err := IdSFninitialisationTimeValidationError{
			field:  "Value",
			reason: "value must equal 419",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdSFninitialisationTimeMultiError(errors)
	}

	return nil
}

// IdSFninitialisationTimeMultiError is an error wrapping multiple validation
// errors returned by IdSFninitialisationTime.ValidateAll() if the designated
// constraints aren't met.
type IdSFninitialisationTimeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdSFninitialisationTimeMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdSFninitialisationTimeMultiError) AllErrors() []error { return m }

// IdSFninitialisationTimeValidationError is the validation error returned by
// IdSFninitialisationTime.Validate if the designated constraints aren't met.
type IdSFninitialisationTimeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdSFninitialisationTimeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdSFninitialisationTimeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdSFninitialisationTimeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdSFninitialisationTimeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdSFninitialisationTimeValidationError) ErrorName() string {
	return "IdSFninitialisationTimeValidationError"
}

// Error satisfies the builtin error interface
func (e IdSFninitialisationTimeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdSFninitialisationTime.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdSFninitialisationTimeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdSFninitialisationTimeValidationError{}

// Validate checks the field values on IdSystemFrameNumber with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdSystemFrameNumber) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdSystemFrameNumber with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdSystemFrameNumberMultiError, or nil if none found.
func (m *IdSystemFrameNumber) ValidateAll() error {
	return m.validate(true)
}

func (m *IdSystemFrameNumber) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 420 {
		err := IdSystemFrameNumberValidationError{
			field:  "Value",
			reason: "value must equal 420",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdSystemFrameNumberMultiError(errors)
	}

	return nil
}

// IdSystemFrameNumberMultiError is an error wrapping multiple validation
// errors returned by IdSystemFrameNumber.ValidateAll() if the designated
// constraints aren't met.
type IdSystemFrameNumberMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdSystemFrameNumberMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdSystemFrameNumberMultiError) AllErrors() []error { return m }

// IdSystemFrameNumberValidationError is the validation error returned by
// IdSystemFrameNumber.Validate if the designated constraints aren't met.
type IdSystemFrameNumberValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdSystemFrameNumberValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdSystemFrameNumberValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdSystemFrameNumberValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdSystemFrameNumberValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdSystemFrameNumberValidationError) ErrorName() string {
	return "IdSystemFrameNumberValidationError"
}

// Error satisfies the builtin error interface
func (e IdSystemFrameNumberValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdSystemFrameNumber.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdSystemFrameNumberValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdSystemFrameNumberValidationError{}

// Validate checks the field values on IdSlotNumber with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *IdSlotNumber) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdSlotNumber with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in IdSlotNumberMultiError, or
// nil if none found.
func (m *IdSlotNumber) ValidateAll() error {
	return m.validate(true)
}

func (m *IdSlotNumber) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 421 {
		err := IdSlotNumberValidationError{
			field:  "Value",
			reason: "value must equal 421",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdSlotNumberMultiError(errors)
	}

	return nil
}

// IdSlotNumberMultiError is an error wrapping multiple validation errors
// returned by IdSlotNumber.ValidateAll() if the designated constraints aren't met.
type IdSlotNumberMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdSlotNumberMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdSlotNumberMultiError) AllErrors() []error { return m }

// IdSlotNumberValidationError is the validation error returned by
// IdSlotNumber.Validate if the designated constraints aren't met.
type IdSlotNumberValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdSlotNumberValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdSlotNumberValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdSlotNumberValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdSlotNumberValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdSlotNumberValidationError) ErrorName() string { return "IdSlotNumberValidationError" }

// Error satisfies the builtin error interface
func (e IdSlotNumberValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdSlotNumber.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdSlotNumberValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdSlotNumberValidationError{}

// Validate checks the field values on IdTRpMeasurementRequestList with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdTRpMeasurementRequestList) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdTRpMeasurementRequestList with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdTRpMeasurementRequestListMultiError, or nil if none found.
func (m *IdTRpMeasurementRequestList) ValidateAll() error {
	return m.validate(true)
}

func (m *IdTRpMeasurementRequestList) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 422 {
		err := IdTRpMeasurementRequestListValidationError{
			field:  "Value",
			reason: "value must equal 422",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdTRpMeasurementRequestListMultiError(errors)
	}

	return nil
}

// IdTRpMeasurementRequestListMultiError is an error wrapping multiple
// validation errors returned by IdTRpMeasurementRequestList.ValidateAll() if
// the designated constraints aren't met.
type IdTRpMeasurementRequestListMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdTRpMeasurementRequestListMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdTRpMeasurementRequestListMultiError) AllErrors() []error { return m }

// IdTRpMeasurementRequestListValidationError is the validation error returned
// by IdTRpMeasurementRequestList.Validate if the designated constraints
// aren't met.
type IdTRpMeasurementRequestListValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdTRpMeasurementRequestListValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdTRpMeasurementRequestListValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdTRpMeasurementRequestListValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdTRpMeasurementRequestListValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdTRpMeasurementRequestListValidationError) ErrorName() string {
	return "IdTRpMeasurementRequestListValidationError"
}

// Error satisfies the builtin error interface
func (e IdTRpMeasurementRequestListValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdTRpMeasurementRequestList.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdTRpMeasurementRequestListValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdTRpMeasurementRequestListValidationError{}

// Validate checks the field values on IdMeasurementBeamInfoRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdMeasurementBeamInfoRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdMeasurementBeamInfoRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdMeasurementBeamInfoRequestMultiError, or nil if none found.
func (m *IdMeasurementBeamInfoRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *IdMeasurementBeamInfoRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 423 {
		err := IdMeasurementBeamInfoRequestValidationError{
			field:  "Value",
			reason: "value must equal 423",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdMeasurementBeamInfoRequestMultiError(errors)
	}

	return nil
}

// IdMeasurementBeamInfoRequestMultiError is an error wrapping multiple
// validation errors returned by IdMeasurementBeamInfoRequest.ValidateAll() if
// the designated constraints aren't met.
type IdMeasurementBeamInfoRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdMeasurementBeamInfoRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdMeasurementBeamInfoRequestMultiError) AllErrors() []error { return m }

// IdMeasurementBeamInfoRequestValidationError is the validation error returned
// by IdMeasurementBeamInfoRequest.Validate if the designated constraints
// aren't met.
type IdMeasurementBeamInfoRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdMeasurementBeamInfoRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdMeasurementBeamInfoRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdMeasurementBeamInfoRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdMeasurementBeamInfoRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdMeasurementBeamInfoRequestValidationError) ErrorName() string {
	return "IdMeasurementBeamInfoRequestValidationError"
}

// Error satisfies the builtin error interface
func (e IdMeasurementBeamInfoRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdMeasurementBeamInfoRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdMeasurementBeamInfoRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdMeasurementBeamInfoRequestValidationError{}

// Validate checks the field values on IdECIdReportCharacteristics with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdECIdReportCharacteristics) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdECIdReportCharacteristics with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdECIdReportCharacteristicsMultiError, or nil if none found.
func (m *IdECIdReportCharacteristics) ValidateAll() error {
	return m.validate(true)
}

func (m *IdECIdReportCharacteristics) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 424 {
		err := IdECIdReportCharacteristicsValidationError{
			field:  "Value",
			reason: "value must equal 424",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdECIdReportCharacteristicsMultiError(errors)
	}

	return nil
}

// IdECIdReportCharacteristicsMultiError is an error wrapping multiple
// validation errors returned by IdECIdReportCharacteristics.ValidateAll() if
// the designated constraints aren't met.
type IdECIdReportCharacteristicsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdECIdReportCharacteristicsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdECIdReportCharacteristicsMultiError) AllErrors() []error { return m }

// IdECIdReportCharacteristicsValidationError is the validation error returned
// by IdECIdReportCharacteristics.Validate if the designated constraints
// aren't met.
type IdECIdReportCharacteristicsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdECIdReportCharacteristicsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdECIdReportCharacteristicsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdECIdReportCharacteristicsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdECIdReportCharacteristicsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdECIdReportCharacteristicsValidationError) ErrorName() string {
	return "IdECIdReportCharacteristicsValidationError"
}

// Error satisfies the builtin error interface
func (e IdECIdReportCharacteristicsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdECIdReportCharacteristics.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdECIdReportCharacteristicsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdECIdReportCharacteristicsValidationError{}

// Validate checks the field values on IdConfiguredTacindication with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdConfiguredTacindication) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdConfiguredTacindication with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdConfiguredTacindicationMultiError, or nil if none found.
func (m *IdConfiguredTacindication) ValidateAll() error {
	return m.validate(true)
}

func (m *IdConfiguredTacindication) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 425 {
		err := IdConfiguredTacindicationValidationError{
			field:  "Value",
			reason: "value must equal 425",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdConfiguredTacindicationMultiError(errors)
	}

	return nil
}

// IdConfiguredTacindicationMultiError is an error wrapping multiple validation
// errors returned by IdConfiguredTacindication.ValidateAll() if the
// designated constraints aren't met.
type IdConfiguredTacindicationMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdConfiguredTacindicationMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdConfiguredTacindicationMultiError) AllErrors() []error { return m }

// IdConfiguredTacindicationValidationError is the validation error returned by
// IdConfiguredTacindication.Validate if the designated constraints aren't met.
type IdConfiguredTacindicationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdConfiguredTacindicationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdConfiguredTacindicationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdConfiguredTacindicationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdConfiguredTacindicationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdConfiguredTacindicationValidationError) ErrorName() string {
	return "IdConfiguredTacindicationValidationError"
}

// Error satisfies the builtin error interface
func (e IdConfiguredTacindicationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdConfiguredTacindication.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdConfiguredTacindicationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdConfiguredTacindicationValidationError{}

// Validate checks the field values on IdExtendedGNbCUName with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdExtendedGNbCUName) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdExtendedGNbCUName with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdExtendedGNbCUNameMultiError, or nil if none found.
func (m *IdExtendedGNbCUName) ValidateAll() error {
	return m.validate(true)
}

func (m *IdExtendedGNbCUName) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 426 {
		err := IdExtendedGNbCUNameValidationError{
			field:  "Value",
			reason: "value must equal 426",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdExtendedGNbCUNameMultiError(errors)
	}

	return nil
}

// IdExtendedGNbCUNameMultiError is an error wrapping multiple validation
// errors returned by IdExtendedGNbCUName.ValidateAll() if the designated
// constraints aren't met.
type IdExtendedGNbCUNameMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdExtendedGNbCUNameMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdExtendedGNbCUNameMultiError) AllErrors() []error { return m }

// IdExtendedGNbCUNameValidationError is the validation error returned by
// IdExtendedGNbCUName.Validate if the designated constraints aren't met.
type IdExtendedGNbCUNameValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdExtendedGNbCUNameValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdExtendedGNbCUNameValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdExtendedGNbCUNameValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdExtendedGNbCUNameValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdExtendedGNbCUNameValidationError) ErrorName() string {
	return "IdExtendedGNbCUNameValidationError"
}

// Error satisfies the builtin error interface
func (e IdExtendedGNbCUNameValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdExtendedGNbCUName.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdExtendedGNbCUNameValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdExtendedGNbCUNameValidationError{}

// Validate checks the field values on IdExtendedGNbDUName with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdExtendedGNbDUName) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdExtendedGNbDUName with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdExtendedGNbDUNameMultiError, or nil if none found.
func (m *IdExtendedGNbDUName) ValidateAll() error {
	return m.validate(true)
}

func (m *IdExtendedGNbDUName) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 427 {
		err := IdExtendedGNbDUNameValidationError{
			field:  "Value",
			reason: "value must equal 427",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdExtendedGNbDUNameMultiError(errors)
	}

	return nil
}

// IdExtendedGNbDUNameMultiError is an error wrapping multiple validation
// errors returned by IdExtendedGNbDUName.ValidateAll() if the designated
// constraints aren't met.
type IdExtendedGNbDUNameMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdExtendedGNbDUNameMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdExtendedGNbDUNameMultiError) AllErrors() []error { return m }

// IdExtendedGNbDUNameValidationError is the validation error returned by
// IdExtendedGNbDUName.Validate if the designated constraints aren't met.
type IdExtendedGNbDUNameValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdExtendedGNbDUNameValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdExtendedGNbDUNameValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdExtendedGNbDUNameValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdExtendedGNbDUNameValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdExtendedGNbDUNameValidationError) ErrorName() string {
	return "IdExtendedGNbDUNameValidationError"
}

// Error satisfies the builtin error interface
func (e IdExtendedGNbDUNameValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdExtendedGNbDUName.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdExtendedGNbDUNameValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdExtendedGNbDUNameValidationError{}

// Validate checks the field values on IdF1CtransferPath with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *IdF1CtransferPath) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdF1CtransferPath with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdF1CtransferPathMultiError, or nil if none found.
func (m *IdF1CtransferPath) ValidateAll() error {
	return m.validate(true)
}

func (m *IdF1CtransferPath) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 428 {
		err := IdF1CtransferPathValidationError{
			field:  "Value",
			reason: "value must equal 428",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdF1CtransferPathMultiError(errors)
	}

	return nil
}

// IdF1CtransferPathMultiError is an error wrapping multiple validation errors
// returned by IdF1CtransferPath.ValidateAll() if the designated constraints
// aren't met.
type IdF1CtransferPathMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdF1CtransferPathMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdF1CtransferPathMultiError) AllErrors() []error { return m }

// IdF1CtransferPathValidationError is the validation error returned by
// IdF1CtransferPath.Validate if the designated constraints aren't met.
type IdF1CtransferPathValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdF1CtransferPathValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdF1CtransferPathValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdF1CtransferPathValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdF1CtransferPathValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdF1CtransferPathValidationError) ErrorName() string {
	return "IdF1CtransferPathValidationError"
}

// Error satisfies the builtin error interface
func (e IdF1CtransferPathValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdF1CtransferPath.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdF1CtransferPathValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdF1CtransferPathValidationError{}

// Validate checks the field values on IdSFnOffset with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *IdSFnOffset) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdSFnOffset with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in IdSFnOffsetMultiError, or
// nil if none found.
func (m *IdSFnOffset) ValidateAll() error {
	return m.validate(true)
}

func (m *IdSFnOffset) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 429 {
		err := IdSFnOffsetValidationError{
			field:  "Value",
			reason: "value must equal 429",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdSFnOffsetMultiError(errors)
	}

	return nil
}

// IdSFnOffsetMultiError is an error wrapping multiple validation errors
// returned by IdSFnOffset.ValidateAll() if the designated constraints aren't met.
type IdSFnOffsetMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdSFnOffsetMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdSFnOffsetMultiError) AllErrors() []error { return m }

// IdSFnOffsetValidationError is the validation error returned by
// IdSFnOffset.Validate if the designated constraints aren't met.
type IdSFnOffsetValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdSFnOffsetValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdSFnOffsetValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdSFnOffsetValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdSFnOffsetValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdSFnOffsetValidationError) ErrorName() string { return "IdSFnOffsetValidationError" }

// Error satisfies the builtin error interface
func (e IdSFnOffsetValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdSFnOffset.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdSFnOffsetValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdSFnOffsetValidationError{}

// Validate checks the field values on IdTransmissionStopIndicator with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdTransmissionStopIndicator) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdTransmissionStopIndicator with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdTransmissionStopIndicatorMultiError, or nil if none found.
func (m *IdTransmissionStopIndicator) ValidateAll() error {
	return m.validate(true)
}

func (m *IdTransmissionStopIndicator) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 430 {
		err := IdTransmissionStopIndicatorValidationError{
			field:  "Value",
			reason: "value must equal 430",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdTransmissionStopIndicatorMultiError(errors)
	}

	return nil
}

// IdTransmissionStopIndicatorMultiError is an error wrapping multiple
// validation errors returned by IdTransmissionStopIndicator.ValidateAll() if
// the designated constraints aren't met.
type IdTransmissionStopIndicatorMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdTransmissionStopIndicatorMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdTransmissionStopIndicatorMultiError) AllErrors() []error { return m }

// IdTransmissionStopIndicatorValidationError is the validation error returned
// by IdTransmissionStopIndicator.Validate if the designated constraints
// aren't met.
type IdTransmissionStopIndicatorValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdTransmissionStopIndicatorValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdTransmissionStopIndicatorValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdTransmissionStopIndicatorValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdTransmissionStopIndicatorValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdTransmissionStopIndicatorValidationError) ErrorName() string {
	return "IdTransmissionStopIndicatorValidationError"
}

// Error satisfies the builtin error interface
func (e IdTransmissionStopIndicatorValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdTransmissionStopIndicator.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdTransmissionStopIndicatorValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdTransmissionStopIndicatorValidationError{}

// Validate checks the field values on IdSrsFrequency with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *IdSrsFrequency) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdSrsFrequency with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in IdSrsFrequencyMultiError,
// or nil if none found.
func (m *IdSrsFrequency) ValidateAll() error {
	return m.validate(true)
}

func (m *IdSrsFrequency) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 431 {
		err := IdSrsFrequencyValidationError{
			field:  "Value",
			reason: "value must equal 431",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdSrsFrequencyMultiError(errors)
	}

	return nil
}

// IdSrsFrequencyMultiError is an error wrapping multiple validation errors
// returned by IdSrsFrequency.ValidateAll() if the designated constraints
// aren't met.
type IdSrsFrequencyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdSrsFrequencyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdSrsFrequencyMultiError) AllErrors() []error { return m }

// IdSrsFrequencyValidationError is the validation error returned by
// IdSrsFrequency.Validate if the designated constraints aren't met.
type IdSrsFrequencyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdSrsFrequencyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdSrsFrequencyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdSrsFrequencyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdSrsFrequencyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdSrsFrequencyValidationError) ErrorName() string { return "IdSrsFrequencyValidationError" }

// Error satisfies the builtin error interface
func (e IdSrsFrequencyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdSrsFrequency.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdSrsFrequencyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdSrsFrequencyValidationError{}

// Validate checks the field values on IdSCgindicator with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *IdSCgindicator) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdSCgindicator with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in IdSCgindicatorMultiError,
// or nil if none found.
func (m *IdSCgindicator) ValidateAll() error {
	return m.validate(true)
}

func (m *IdSCgindicator) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 432 {
		err := IdSCgindicatorValidationError{
			field:  "Value",
			reason: "value must equal 432",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdSCgindicatorMultiError(errors)
	}

	return nil
}

// IdSCgindicatorMultiError is an error wrapping multiple validation errors
// returned by IdSCgindicator.ValidateAll() if the designated constraints
// aren't met.
type IdSCgindicatorMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdSCgindicatorMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdSCgindicatorMultiError) AllErrors() []error { return m }

// IdSCgindicatorValidationError is the validation error returned by
// IdSCgindicator.Validate if the designated constraints aren't met.
type IdSCgindicatorValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdSCgindicatorValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdSCgindicatorValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdSCgindicatorValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdSCgindicatorValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdSCgindicatorValidationError) ErrorName() string { return "IdSCgindicatorValidationError" }

// Error satisfies the builtin error interface
func (e IdSCgindicatorValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdSCgindicator.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdSCgindicatorValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdSCgindicatorValidationError{}

// Validate checks the field values on IdEstimatedArrivalProbability with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdEstimatedArrivalProbability) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdEstimatedArrivalProbability with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// IdEstimatedArrivalProbabilityMultiError, or nil if none found.
func (m *IdEstimatedArrivalProbability) ValidateAll() error {
	return m.validate(true)
}

func (m *IdEstimatedArrivalProbability) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 433 {
		err := IdEstimatedArrivalProbabilityValidationError{
			field:  "Value",
			reason: "value must equal 433",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdEstimatedArrivalProbabilityMultiError(errors)
	}

	return nil
}

// IdEstimatedArrivalProbabilityMultiError is an error wrapping multiple
// validation errors returned by IdEstimatedArrivalProbability.ValidateAll()
// if the designated constraints aren't met.
type IdEstimatedArrivalProbabilityMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdEstimatedArrivalProbabilityMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdEstimatedArrivalProbabilityMultiError) AllErrors() []error { return m }

// IdEstimatedArrivalProbabilityValidationError is the validation error
// returned by IdEstimatedArrivalProbability.Validate if the designated
// constraints aren't met.
type IdEstimatedArrivalProbabilityValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdEstimatedArrivalProbabilityValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdEstimatedArrivalProbabilityValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdEstimatedArrivalProbabilityValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdEstimatedArrivalProbabilityValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdEstimatedArrivalProbabilityValidationError) ErrorName() string {
	return "IdEstimatedArrivalProbabilityValidationError"
}

// Error satisfies the builtin error interface
func (e IdEstimatedArrivalProbabilityValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdEstimatedArrivalProbability.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdEstimatedArrivalProbabilityValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdEstimatedArrivalProbabilityValidationError{}

// Validate checks the field values on IdTRptype with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *IdTRptype) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdTRptype with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in IdTRptypeMultiError, or nil
// if none found.
func (m *IdTRptype) ValidateAll() error {
	return m.validate(true)
}

func (m *IdTRptype) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 434 {
		err := IdTRptypeValidationError{
			field:  "Value",
			reason: "value must equal 434",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdTRptypeMultiError(errors)
	}

	return nil
}

// IdTRptypeMultiError is an error wrapping multiple validation errors returned
// by IdTRptype.ValidateAll() if the designated constraints aren't met.
type IdTRptypeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdTRptypeMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdTRptypeMultiError) AllErrors() []error { return m }

// IdTRptypeValidationError is the validation error returned by
// IdTRptype.Validate if the designated constraints aren't met.
type IdTRptypeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdTRptypeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdTRptypeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdTRptypeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdTRptypeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdTRptypeValidationError) ErrorName() string { return "IdTRptypeValidationError" }

// Error satisfies the builtin error interface
func (e IdTRptypeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdTRptype.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdTRptypeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdTRptypeValidationError{}

// Validate checks the field values on IdSRsspatialRelationPerSrsresource with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *IdSRsspatialRelationPerSrsresource) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdSRsspatialRelationPerSrsresource
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// IdSRsspatialRelationPerSrsresourceMultiError, or nil if none found.
func (m *IdSRsspatialRelationPerSrsresource) ValidateAll() error {
	return m.validate(true)
}

func (m *IdSRsspatialRelationPerSrsresource) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 435 {
		err := IdSRsspatialRelationPerSrsresourceValidationError{
			field:  "Value",
			reason: "value must equal 435",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdSRsspatialRelationPerSrsresourceMultiError(errors)
	}

	return nil
}

// IdSRsspatialRelationPerSrsresourceMultiError is an error wrapping multiple
// validation errors returned by
// IdSRsspatialRelationPerSrsresource.ValidateAll() if the designated
// constraints aren't met.
type IdSRsspatialRelationPerSrsresourceMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdSRsspatialRelationPerSrsresourceMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdSRsspatialRelationPerSrsresourceMultiError) AllErrors() []error { return m }

// IdSRsspatialRelationPerSrsresourceValidationError is the validation error
// returned by IdSRsspatialRelationPerSrsresource.Validate if the designated
// constraints aren't met.
type IdSRsspatialRelationPerSrsresourceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdSRsspatialRelationPerSrsresourceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdSRsspatialRelationPerSrsresourceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdSRsspatialRelationPerSrsresourceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdSRsspatialRelationPerSrsresourceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdSRsspatialRelationPerSrsresourceValidationError) ErrorName() string {
	return "IdSRsspatialRelationPerSrsresourceValidationError"
}

// Error satisfies the builtin error interface
func (e IdSRsspatialRelationPerSrsresourceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdSRsspatialRelationPerSrsresource.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdSRsspatialRelationPerSrsresourceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdSRsspatialRelationPerSrsresourceValidationError{}

// Validate checks the field values on IdPDcpterminatingNodeDltnladdrInfo with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *IdPDcpterminatingNodeDltnladdrInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdPDcpterminatingNodeDltnladdrInfo
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// IdPDcpterminatingNodeDltnladdrInfoMultiError, or nil if none found.
func (m *IdPDcpterminatingNodeDltnladdrInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *IdPDcpterminatingNodeDltnladdrInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 436 {
		err := IdPDcpterminatingNodeDltnladdrInfoValidationError{
			field:  "Value",
			reason: "value must equal 436",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdPDcpterminatingNodeDltnladdrInfoMultiError(errors)
	}

	return nil
}

// IdPDcpterminatingNodeDltnladdrInfoMultiError is an error wrapping multiple
// validation errors returned by
// IdPDcpterminatingNodeDltnladdrInfo.ValidateAll() if the designated
// constraints aren't met.
type IdPDcpterminatingNodeDltnladdrInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdPDcpterminatingNodeDltnladdrInfoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdPDcpterminatingNodeDltnladdrInfoMultiError) AllErrors() []error { return m }

// IdPDcpterminatingNodeDltnladdrInfoValidationError is the validation error
// returned by IdPDcpterminatingNodeDltnladdrInfo.Validate if the designated
// constraints aren't met.
type IdPDcpterminatingNodeDltnladdrInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdPDcpterminatingNodeDltnladdrInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdPDcpterminatingNodeDltnladdrInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdPDcpterminatingNodeDltnladdrInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdPDcpterminatingNodeDltnladdrInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdPDcpterminatingNodeDltnladdrInfoValidationError) ErrorName() string {
	return "IdPDcpterminatingNodeDltnladdrInfoValidationError"
}

// Error satisfies the builtin error interface
func (e IdPDcpterminatingNodeDltnladdrInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdPDcpterminatingNodeDltnladdrInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdPDcpterminatingNodeDltnladdrInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdPDcpterminatingNodeDltnladdrInfoValidationError{}

// Validate checks the field values on IdENbdltnladdress with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *IdENbdltnladdress) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdENbdltnladdress with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdENbdltnladdressMultiError, or nil if none found.
func (m *IdENbdltnladdress) ValidateAll() error {
	return m.validate(true)
}

func (m *IdENbdltnladdress) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 437 {
		err := IdENbdltnladdressValidationError{
			field:  "Value",
			reason: "value must equal 437",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdENbdltnladdressMultiError(errors)
	}

	return nil
}

// IdENbdltnladdressMultiError is an error wrapping multiple validation errors
// returned by IdENbdltnladdress.ValidateAll() if the designated constraints
// aren't met.
type IdENbdltnladdressMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdENbdltnladdressMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdENbdltnladdressMultiError) AllErrors() []error { return m }

// IdENbdltnladdressValidationError is the validation error returned by
// IdENbdltnladdress.Validate if the designated constraints aren't met.
type IdENbdltnladdressValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdENbdltnladdressValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdENbdltnladdressValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdENbdltnladdressValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdENbdltnladdressValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdENbdltnladdressValidationError) ErrorName() string {
	return "IdENbdltnladdressValidationError"
}

// Error satisfies the builtin error interface
func (e IdENbdltnladdressValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdENbdltnladdress.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdENbdltnladdressValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdENbdltnladdressValidationError{}

// Validate checks the field values on IdPosMeasurementPeriodicityExtended with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *IdPosMeasurementPeriodicityExtended) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdPosMeasurementPeriodicityExtended
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// IdPosMeasurementPeriodicityExtendedMultiError, or nil if none found.
func (m *IdPosMeasurementPeriodicityExtended) ValidateAll() error {
	return m.validate(true)
}

func (m *IdPosMeasurementPeriodicityExtended) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 438 {
		err := IdPosMeasurementPeriodicityExtendedValidationError{
			field:  "Value",
			reason: "value must equal 438",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdPosMeasurementPeriodicityExtendedMultiError(errors)
	}

	return nil
}

// IdPosMeasurementPeriodicityExtendedMultiError is an error wrapping multiple
// validation errors returned by
// IdPosMeasurementPeriodicityExtended.ValidateAll() if the designated
// constraints aren't met.
type IdPosMeasurementPeriodicityExtendedMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdPosMeasurementPeriodicityExtendedMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdPosMeasurementPeriodicityExtendedMultiError) AllErrors() []error { return m }

// IdPosMeasurementPeriodicityExtendedValidationError is the validation error
// returned by IdPosMeasurementPeriodicityExtended.Validate if the designated
// constraints aren't met.
type IdPosMeasurementPeriodicityExtendedValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdPosMeasurementPeriodicityExtendedValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdPosMeasurementPeriodicityExtendedValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdPosMeasurementPeriodicityExtendedValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdPosMeasurementPeriodicityExtendedValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdPosMeasurementPeriodicityExtendedValidationError) ErrorName() string {
	return "IdPosMeasurementPeriodicityExtendedValidationError"
}

// Error satisfies the builtin error interface
func (e IdPosMeasurementPeriodicityExtendedValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdPosMeasurementPeriodicityExtended.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdPosMeasurementPeriodicityExtendedValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdPosMeasurementPeriodicityExtendedValidationError{}

// Validate checks the field values on IdPRsResourceID with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *IdPRsResourceID) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdPRsResourceID with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdPRsResourceIDMultiError, or nil if none found.
func (m *IdPRsResourceID) ValidateAll() error {
	return m.validate(true)
}

func (m *IdPRsResourceID) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 439 {
		err := IdPRsResourceIDValidationError{
			field:  "Value",
			reason: "value must equal 439",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdPRsResourceIDMultiError(errors)
	}

	return nil
}

// IdPRsResourceIDMultiError is an error wrapping multiple validation errors
// returned by IdPRsResourceID.ValidateAll() if the designated constraints
// aren't met.
type IdPRsResourceIDMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdPRsResourceIDMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdPRsResourceIDMultiError) AllErrors() []error { return m }

// IdPRsResourceIDValidationError is the validation error returned by
// IdPRsResourceID.Validate if the designated constraints aren't met.
type IdPRsResourceIDValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdPRsResourceIDValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdPRsResourceIDValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdPRsResourceIDValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdPRsResourceIDValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdPRsResourceIDValidationError) ErrorName() string { return "IdPRsResourceIDValidationError" }

// Error satisfies the builtin error interface
func (e IdPRsResourceIDValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdPRsResourceID.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdPRsResourceIDValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdPRsResourceIDValidationError{}

// Validate checks the field values on IdLocationMeasurementInformation with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *IdLocationMeasurementInformation) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdLocationMeasurementInformation with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// IdLocationMeasurementInformationMultiError, or nil if none found.
func (m *IdLocationMeasurementInformation) ValidateAll() error {
	return m.validate(true)
}

func (m *IdLocationMeasurementInformation) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 440 {
		err := IdLocationMeasurementInformationValidationError{
			field:  "Value",
			reason: "value must equal 440",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdLocationMeasurementInformationMultiError(errors)
	}

	return nil
}

// IdLocationMeasurementInformationMultiError is an error wrapping multiple
// validation errors returned by
// IdLocationMeasurementInformation.ValidateAll() if the designated
// constraints aren't met.
type IdLocationMeasurementInformationMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdLocationMeasurementInformationMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdLocationMeasurementInformationMultiError) AllErrors() []error { return m }

// IdLocationMeasurementInformationValidationError is the validation error
// returned by IdLocationMeasurementInformation.Validate if the designated
// constraints aren't met.
type IdLocationMeasurementInformationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdLocationMeasurementInformationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdLocationMeasurementInformationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdLocationMeasurementInformationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdLocationMeasurementInformationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdLocationMeasurementInformationValidationError) ErrorName() string {
	return "IdLocationMeasurementInformationValidationError"
}

// Error satisfies the builtin error interface
func (e IdLocationMeasurementInformationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdLocationMeasurementInformation.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdLocationMeasurementInformationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdLocationMeasurementInformationValidationError{}

// Validate checks the field values on IdInterFrequencyConfigNoGap with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdInterFrequencyConfigNoGap) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdInterFrequencyConfigNoGap with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdInterFrequencyConfigNoGapMultiError, or nil if none found.
func (m *IdInterFrequencyConfigNoGap) ValidateAll() error {
	return m.validate(true)
}

func (m *IdInterFrequencyConfigNoGap) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 651 {
		err := IdInterFrequencyConfigNoGapValidationError{
			field:  "Value",
			reason: "value must equal 651",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdInterFrequencyConfigNoGapMultiError(errors)
	}

	return nil
}

// IdInterFrequencyConfigNoGapMultiError is an error wrapping multiple
// validation errors returned by IdInterFrequencyConfigNoGap.ValidateAll() if
// the designated constraints aren't met.
type IdInterFrequencyConfigNoGapMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdInterFrequencyConfigNoGapMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdInterFrequencyConfigNoGapMultiError) AllErrors() []error { return m }

// IdInterFrequencyConfigNoGapValidationError is the validation error returned
// by IdInterFrequencyConfigNoGap.Validate if the designated constraints
// aren't met.
type IdInterFrequencyConfigNoGapValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdInterFrequencyConfigNoGapValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdInterFrequencyConfigNoGapValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdInterFrequencyConfigNoGapValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdInterFrequencyConfigNoGapValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdInterFrequencyConfigNoGapValidationError) ErrorName() string {
	return "IdInterFrequencyConfigNoGapValidationError"
}

// Error satisfies the builtin error interface
func (e IdInterFrequencyConfigNoGapValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdInterFrequencyConfigNoGap.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdInterFrequencyConfigNoGapValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdInterFrequencyConfigNoGapValidationError{}

// Validate checks the field values on IdNeedForGapsInfoNr with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdNeedForGapsInfoNr) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdNeedForGapsInfoNr with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdNeedForGapsInfoNrMultiError, or nil if none found.
func (m *IdNeedForGapsInfoNr) ValidateAll() error {
	return m.validate(true)
}

func (m *IdNeedForGapsInfoNr) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 665 {
		err := IdNeedForGapsInfoNrValidationError{
			field:  "Value",
			reason: "value must equal 665",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdNeedForGapsInfoNrMultiError(errors)
	}

	return nil
}

// IdNeedForGapsInfoNrMultiError is an error wrapping multiple validation
// errors returned by IdNeedForGapsInfoNr.ValidateAll() if the designated
// constraints aren't met.
type IdNeedForGapsInfoNrMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdNeedForGapsInfoNrMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdNeedForGapsInfoNrMultiError) AllErrors() []error { return m }

// IdNeedForGapsInfoNrValidationError is the validation error returned by
// IdNeedForGapsInfoNr.Validate if the designated constraints aren't met.
type IdNeedForGapsInfoNrValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdNeedForGapsInfoNrValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdNeedForGapsInfoNrValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdNeedForGapsInfoNrValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdNeedForGapsInfoNrValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdNeedForGapsInfoNrValidationError) ErrorName() string {
	return "IdNeedForGapsInfoNrValidationError"
}

// Error satisfies the builtin error interface
func (e IdNeedForGapsInfoNrValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdNeedForGapsInfoNr.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdNeedForGapsInfoNrValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdNeedForGapsInfoNrValidationError{}

// Validate checks the field values on IdPosMeasurementPeriodicityNrAoA with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *IdPosMeasurementPeriodicityNrAoA) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdPosMeasurementPeriodicityNrAoA with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// IdPosMeasurementPeriodicityNrAoAMultiError, or nil if none found.
func (m *IdPosMeasurementPeriodicityNrAoA) ValidateAll() error {
	return m.validate(true)
}

func (m *IdPosMeasurementPeriodicityNrAoA) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 672 {
		err := IdPosMeasurementPeriodicityNrAoAValidationError{
			field:  "Value",
			reason: "value must equal 672",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdPosMeasurementPeriodicityNrAoAMultiError(errors)
	}

	return nil
}

// IdPosMeasurementPeriodicityNrAoAMultiError is an error wrapping multiple
// validation errors returned by
// IdPosMeasurementPeriodicityNrAoA.ValidateAll() if the designated
// constraints aren't met.
type IdPosMeasurementPeriodicityNrAoAMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdPosMeasurementPeriodicityNrAoAMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdPosMeasurementPeriodicityNrAoAMultiError) AllErrors() []error { return m }

// IdPosMeasurementPeriodicityNrAoAValidationError is the validation error
// returned by IdPosMeasurementPeriodicityNrAoA.Validate if the designated
// constraints aren't met.
type IdPosMeasurementPeriodicityNrAoAValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdPosMeasurementPeriodicityNrAoAValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdPosMeasurementPeriodicityNrAoAValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdPosMeasurementPeriodicityNrAoAValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdPosMeasurementPeriodicityNrAoAValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdPosMeasurementPeriodicityNrAoAValidationError) ErrorName() string {
	return "IdPosMeasurementPeriodicityNrAoAValidationError"
}

// Error satisfies the builtin error interface
func (e IdPosMeasurementPeriodicityNrAoAValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdPosMeasurementPeriodicityNrAoA.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdPosMeasurementPeriodicityNrAoAValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdPosMeasurementPeriodicityNrAoAValidationError{}
