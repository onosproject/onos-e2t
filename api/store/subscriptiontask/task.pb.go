// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: api/store/subscriptiontask/task.proto

// Package onos.e2t.store.subscriptiontask defines message types for E2T stores

package subscriptiontask

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Phase is a subscription task phase
type Phase int32

const (
	// OPEN is a subscription task open phase
	Phase_OPEN Phase = 0
	// CLOSE is a subscription task close phase
	Phase_CLOSE Phase = 1
)

var Phase_name = map[int32]string{
	0: "OPEN",
	1: "CLOSE",
}

var Phase_value = map[string]int32{
	"OPEN":  0,
	"CLOSE": 1,
}

func (x Phase) String() string {
	return proto.EnumName(Phase_name, int32(x))
}

func (Phase) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_e147355c3a852149, []int{0}
}

// State is a subscription task state
type State int32

const (
	// PENDING indicates the subscription task phase is pending
	State_PENDING State = 0
	// COMPLETE indicates the subscription task phase is complete
	State_COMPLETE State = 1
	// FAILED indicates the subscription task phase failed
	State_FAILED State = 2
)

var State_name = map[int32]string{
	0: "PENDING",
	1: "COMPLETE",
	2: "FAILED",
}

var State_value = map[string]int32{
	"PENDING":  0,
	"COMPLETE": 1,
	"FAILED":   2,
}

func (x State) String() string {
	return proto.EnumName(State_name, int32(x))
}

func (State) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_e147355c3a852149, []int{1}
}

// Cause is a failure cause
type Cause int32

const (
	Cause_CAUSE_UNKNOWN                                                    Cause = 0
	Cause_CAUSE_MISC_CONTROL_PROCESSING_OVERLOAD                           Cause = 1
	Cause_CAUSE_MISC_HARDWARE_FAILURE                                      Cause = 2
	Cause_CAUSE_MISC_OM_INTERVENTION                                       Cause = 3
	Cause_CAUSE_MISC_UNSPECIFIED                                           Cause = 4
	Cause_CAUSE_PROTOCOL_TRANSFER_SYNTAX_ERROR                             Cause = 5
	Cause_CAUSE_PROTOCOL_ABSTRACT_SYNTAX_ERROR_REJECT                      Cause = 6
	Cause_CAUSE_PROTOCOL_ABSTRACT_SYNTAX_ERROR_IGNORE_AND_NOTIFY           Cause = 7
	Cause_CAUSE_PROTOCOL_MESSAGE_NOT_COMPATIBLE_WITH_RECEIVER_STATE        Cause = 8
	Cause_CAUSE_PROTOCOL_SEMANTIC_ERROR                                    Cause = 9
	Cause_CAUSE_PROTOCOL_ABSTRACT_SYNTAX_ERROR_FALSELY_CONSTRUCTED_MESSAGE Cause = 10
	Cause_CAUSE_PROTOCOL_UNSPECIFIED                                       Cause = 11
	Cause_CAUSE_RIC_RAN_FUNCTION_ID_INVALID                                Cause = 12
	Cause_CAUSE_RIC_ACTION_NOT_SUPPORTED                                   Cause = 13
	Cause_CAUSE_RIC_EXCESSIVE_ACTIONS                                      Cause = 14
	Cause_CAUSE_RIC_DUPLICATE_ACTION                                       Cause = 15
	Cause_CAUSE_RIC_DUPLICATE_EVENT                                        Cause = 16
	Cause_CAUSE_RIC_FUNCTION_RESOURCE_LIMIT                                Cause = 17
	Cause_CAUSE_RIC_REQUEST_ID_UNKNOWN                                     Cause = 18
	Cause_CAUSE_RIC_INCONSISTENT_ACTION_SUBSEQUENT_ACTION_SEQUENCE         Cause = 19
	Cause_CAUSE_RIC_CONTROL_MESSAGE_INVALID                                Cause = 20
	Cause_CAUSE_RIC_CALL_PROCESS_ID_INVALID                                Cause = 21
	Cause_CAUSE_RIC_UNSPECIFIED                                            Cause = 22
	Cause_CAUSE_RICSERVICE_FUNCTION_NOT_REQUIRED                           Cause = 23
	Cause_CAUSE_RICSERVICE_EXCESSIVE_FUNCTIONS                             Cause = 24
	Cause_CAUSE_RICSERVICE_RIC_RESOURCE_LIMIT                              Cause = 25
	Cause_CAUSE_TRANSPORT_UNSPECIFIED                                      Cause = 26
	Cause_CAUSE_TRANSPORT_TRANSPORT_RESOURCE_UNAVAILABLE                   Cause = 27
)

var Cause_name = map[int32]string{
	0:  "CAUSE_UNKNOWN",
	1:  "CAUSE_MISC_CONTROL_PROCESSING_OVERLOAD",
	2:  "CAUSE_MISC_HARDWARE_FAILURE",
	3:  "CAUSE_MISC_OM_INTERVENTION",
	4:  "CAUSE_MISC_UNSPECIFIED",
	5:  "CAUSE_PROTOCOL_TRANSFER_SYNTAX_ERROR",
	6:  "CAUSE_PROTOCOL_ABSTRACT_SYNTAX_ERROR_REJECT",
	7:  "CAUSE_PROTOCOL_ABSTRACT_SYNTAX_ERROR_IGNORE_AND_NOTIFY",
	8:  "CAUSE_PROTOCOL_MESSAGE_NOT_COMPATIBLE_WITH_RECEIVER_STATE",
	9:  "CAUSE_PROTOCOL_SEMANTIC_ERROR",
	10: "CAUSE_PROTOCOL_ABSTRACT_SYNTAX_ERROR_FALSELY_CONSTRUCTED_MESSAGE",
	11: "CAUSE_PROTOCOL_UNSPECIFIED",
	12: "CAUSE_RIC_RAN_FUNCTION_ID_INVALID",
	13: "CAUSE_RIC_ACTION_NOT_SUPPORTED",
	14: "CAUSE_RIC_EXCESSIVE_ACTIONS",
	15: "CAUSE_RIC_DUPLICATE_ACTION",
	16: "CAUSE_RIC_DUPLICATE_EVENT",
	17: "CAUSE_RIC_FUNCTION_RESOURCE_LIMIT",
	18: "CAUSE_RIC_REQUEST_ID_UNKNOWN",
	19: "CAUSE_RIC_INCONSISTENT_ACTION_SUBSEQUENT_ACTION_SEQUENCE",
	20: "CAUSE_RIC_CONTROL_MESSAGE_INVALID",
	21: "CAUSE_RIC_CALL_PROCESS_ID_INVALID",
	22: "CAUSE_RIC_UNSPECIFIED",
	23: "CAUSE_RICSERVICE_FUNCTION_NOT_REQUIRED",
	24: "CAUSE_RICSERVICE_EXCESSIVE_FUNCTIONS",
	25: "CAUSE_RICSERVICE_RIC_RESOURCE_LIMIT",
	26: "CAUSE_TRANSPORT_UNSPECIFIED",
	27: "CAUSE_TRANSPORT_TRANSPORT_RESOURCE_UNAVAILABLE",
}

var Cause_value = map[string]int32{
	"CAUSE_UNKNOWN":                                                    0,
	"CAUSE_MISC_CONTROL_PROCESSING_OVERLOAD":                           1,
	"CAUSE_MISC_HARDWARE_FAILURE":                                      2,
	"CAUSE_MISC_OM_INTERVENTION":                                       3,
	"CAUSE_MISC_UNSPECIFIED":                                           4,
	"CAUSE_PROTOCOL_TRANSFER_SYNTAX_ERROR":                             5,
	"CAUSE_PROTOCOL_ABSTRACT_SYNTAX_ERROR_REJECT":                      6,
	"CAUSE_PROTOCOL_ABSTRACT_SYNTAX_ERROR_IGNORE_AND_NOTIFY":           7,
	"CAUSE_PROTOCOL_MESSAGE_NOT_COMPATIBLE_WITH_RECEIVER_STATE":        8,
	"CAUSE_PROTOCOL_SEMANTIC_ERROR":                                    9,
	"CAUSE_PROTOCOL_ABSTRACT_SYNTAX_ERROR_FALSELY_CONSTRUCTED_MESSAGE": 10,
	"CAUSE_PROTOCOL_UNSPECIFIED":                                       11,
	"CAUSE_RIC_RAN_FUNCTION_ID_INVALID":                                12,
	"CAUSE_RIC_ACTION_NOT_SUPPORTED":                                   13,
	"CAUSE_RIC_EXCESSIVE_ACTIONS":                                      14,
	"CAUSE_RIC_DUPLICATE_ACTION":                                       15,
	"CAUSE_RIC_DUPLICATE_EVENT":                                        16,
	"CAUSE_RIC_FUNCTION_RESOURCE_LIMIT":                                17,
	"CAUSE_RIC_REQUEST_ID_UNKNOWN":                                     18,
	"CAUSE_RIC_INCONSISTENT_ACTION_SUBSEQUENT_ACTION_SEQUENCE":         19,
	"CAUSE_RIC_CONTROL_MESSAGE_INVALID":                                20,
	"CAUSE_RIC_CALL_PROCESS_ID_INVALID":                                21,
	"CAUSE_RIC_UNSPECIFIED":                                            22,
	"CAUSE_RICSERVICE_FUNCTION_NOT_REQUIRED":                           23,
	"CAUSE_RICSERVICE_EXCESSIVE_FUNCTIONS":                             24,
	"CAUSE_RICSERVICE_RIC_RESOURCE_LIMIT":                              25,
	"CAUSE_TRANSPORT_UNSPECIFIED":                                      26,
	"CAUSE_TRANSPORT_TRANSPORT_RESOURCE_UNAVAILABLE":                   27,
}

func (x Cause) String() string {
	return proto.EnumName(Cause_name, int32(x))
}

func (Cause) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_e147355c3a852149, []int{2}
}

// Type of change
type EventType int32

const (
	EventType_NONE     EventType = 0
	EventType_CREATED  EventType = 1
	EventType_UPDATED  EventType = 2
	EventType_REMOVED  EventType = 3
	EventType_REPLAYED EventType = 4
)

var EventType_name = map[int32]string{
	0: "NONE",
	1: "CREATED",
	2: "UPDATED",
	3: "REMOVED",
	4: "REPLAYED",
}

var EventType_value = map[string]int32{
	"NONE":     0,
	"CREATED":  1,
	"UPDATED":  2,
	"REMOVED":  3,
	"REPLAYED": 4,
}

func (x EventType) String() string {
	return proto.EnumName(EventType_name, int32(x))
}

func (EventType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_e147355c3a852149, []int{3}
}

// SubscriptionTaskMeta is metadata for a SubscriptionTask
type SubscriptionTaskMeta struct {
	ID                   ID       `protobuf:"bytes,1,opt,name=id,proto3,casttype=ID" json:"id,omitempty"`
	Revision             Revision `protobuf:"varint,2,opt,name=revision,proto3,casttype=Revision" json:"revision,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SubscriptionTaskMeta) Reset()         { *m = SubscriptionTaskMeta{} }
func (m *SubscriptionTaskMeta) String() string { return proto.CompactTextString(m) }
func (*SubscriptionTaskMeta) ProtoMessage()    {}
func (*SubscriptionTaskMeta) Descriptor() ([]byte, []int) {
	return fileDescriptor_e147355c3a852149, []int{0}
}
func (m *SubscriptionTaskMeta) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SubscriptionTaskMeta.Unmarshal(m, b)
}
func (m *SubscriptionTaskMeta) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SubscriptionTaskMeta.Marshal(b, m, deterministic)
}
func (m *SubscriptionTaskMeta) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubscriptionTaskMeta.Merge(m, src)
}
func (m *SubscriptionTaskMeta) XXX_Size() int {
	return xxx_messageInfo_SubscriptionTaskMeta.Size(m)
}
func (m *SubscriptionTaskMeta) XXX_DiscardUnknown() {
	xxx_messageInfo_SubscriptionTaskMeta.DiscardUnknown(m)
}

var xxx_messageInfo_SubscriptionTaskMeta proto.InternalMessageInfo

func (m *SubscriptionTaskMeta) GetID() ID {
	if m != nil {
		return m.ID
	}
	return ""
}

func (m *SubscriptionTaskMeta) GetRevision() Revision {
	if m != nil {
		return m.Revision
	}
	return 0
}

// SubscriptionTask is a task representing a subscription between an E2 termination and an E2 node
type SubscriptionTask struct {
	SubscriptionTaskMeta `protobuf:"bytes,1,opt,name=meta,proto3,embedded=meta" json:"meta"`
	Status               SubscriptionTaskStatus `protobuf:"bytes,2,opt,name=status,proto3" json:"status"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *SubscriptionTask) Reset()         { *m = SubscriptionTask{} }
func (m *SubscriptionTask) String() string { return proto.CompactTextString(m) }
func (*SubscriptionTask) ProtoMessage()    {}
func (*SubscriptionTask) Descriptor() ([]byte, []int) {
	return fileDescriptor_e147355c3a852149, []int{1}
}
func (m *SubscriptionTask) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SubscriptionTask.Unmarshal(m, b)
}
func (m *SubscriptionTask) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SubscriptionTask.Marshal(b, m, deterministic)
}
func (m *SubscriptionTask) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubscriptionTask.Merge(m, src)
}
func (m *SubscriptionTask) XXX_Size() int {
	return xxx_messageInfo_SubscriptionTask.Size(m)
}
func (m *SubscriptionTask) XXX_DiscardUnknown() {
	xxx_messageInfo_SubscriptionTask.DiscardUnknown(m)
}

var xxx_messageInfo_SubscriptionTask proto.InternalMessageInfo

func (m *SubscriptionTask) GetStatus() SubscriptionTaskStatus {
	if m != nil {
		return m.Status
	}
	return SubscriptionTaskStatus{}
}

// SubscriptionTaskStatus is the subscription task status
type SubscriptionTaskStatus struct {
	Phase                Phase    `protobuf:"varint,1,opt,name=phase,proto3,enum=onos.e2t.store.subscriptiontask.Phase" json:"phase,omitempty"`
	State                State    `protobuf:"varint,2,opt,name=state,proto3,enum=onos.e2t.store.subscriptiontask.State" json:"state,omitempty"`
	Failure              *Failure `protobuf:"bytes,3,opt,name=failure,proto3" json:"failure,omitempty"`
	MastershipTerm       uint64   `protobuf:"varint,4,opt,name=mastership_term,json=mastershipTerm,proto3" json:"mastership_term,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SubscriptionTaskStatus) Reset()         { *m = SubscriptionTaskStatus{} }
func (m *SubscriptionTaskStatus) String() string { return proto.CompactTextString(m) }
func (*SubscriptionTaskStatus) ProtoMessage()    {}
func (*SubscriptionTaskStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_e147355c3a852149, []int{2}
}
func (m *SubscriptionTaskStatus) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SubscriptionTaskStatus.Unmarshal(m, b)
}
func (m *SubscriptionTaskStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SubscriptionTaskStatus.Marshal(b, m, deterministic)
}
func (m *SubscriptionTaskStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubscriptionTaskStatus.Merge(m, src)
}
func (m *SubscriptionTaskStatus) XXX_Size() int {
	return xxx_messageInfo_SubscriptionTaskStatus.Size(m)
}
func (m *SubscriptionTaskStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_SubscriptionTaskStatus.DiscardUnknown(m)
}

var xxx_messageInfo_SubscriptionTaskStatus proto.InternalMessageInfo

func (m *SubscriptionTaskStatus) GetPhase() Phase {
	if m != nil {
		return m.Phase
	}
	return Phase_OPEN
}

func (m *SubscriptionTaskStatus) GetState() State {
	if m != nil {
		return m.State
	}
	return State_PENDING
}

func (m *SubscriptionTaskStatus) GetFailure() *Failure {
	if m != nil {
		return m.Failure
	}
	return nil
}

func (m *SubscriptionTaskStatus) GetMastershipTerm() uint64 {
	if m != nil {
		return m.MastershipTerm
	}
	return 0
}

// Failure is a subscription failure status
type Failure struct {
	Cause                Cause    `protobuf:"varint,1,opt,name=cause,proto3,enum=onos.e2t.store.subscriptiontask.Cause" json:"cause,omitempty"`
	Message              string   `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Failure) Reset()         { *m = Failure{} }
func (m *Failure) String() string { return proto.CompactTextString(m) }
func (*Failure) ProtoMessage()    {}
func (*Failure) Descriptor() ([]byte, []int) {
	return fileDescriptor_e147355c3a852149, []int{3}
}
func (m *Failure) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Failure.Unmarshal(m, b)
}
func (m *Failure) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Failure.Marshal(b, m, deterministic)
}
func (m *Failure) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Failure.Merge(m, src)
}
func (m *Failure) XXX_Size() int {
	return xxx_messageInfo_Failure.Size(m)
}
func (m *Failure) XXX_DiscardUnknown() {
	xxx_messageInfo_Failure.DiscardUnknown(m)
}

var xxx_messageInfo_Failure proto.InternalMessageInfo

func (m *Failure) GetCause() Cause {
	if m != nil {
		return m.Cause
	}
	return Cause_CAUSE_UNKNOWN
}

func (m *Failure) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

// Event is a SubscriptionTask event
type Event struct {
	Type                 EventType        `protobuf:"varint,1,opt,name=type,proto3,enum=onos.e2t.store.subscriptiontask.EventType" json:"type,omitempty"`
	Task                 SubscriptionTask `protobuf:"bytes,2,opt,name=task,proto3" json:"task"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *Event) Reset()         { *m = Event{} }
func (m *Event) String() string { return proto.CompactTextString(m) }
func (*Event) ProtoMessage()    {}
func (*Event) Descriptor() ([]byte, []int) {
	return fileDescriptor_e147355c3a852149, []int{4}
}
func (m *Event) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Event.Unmarshal(m, b)
}
func (m *Event) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Event.Marshal(b, m, deterministic)
}
func (m *Event) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Event.Merge(m, src)
}
func (m *Event) XXX_Size() int {
	return xxx_messageInfo_Event.Size(m)
}
func (m *Event) XXX_DiscardUnknown() {
	xxx_messageInfo_Event.DiscardUnknown(m)
}

var xxx_messageInfo_Event proto.InternalMessageInfo

func (m *Event) GetType() EventType {
	if m != nil {
		return m.Type
	}
	return EventType_NONE
}

func (m *Event) GetTask() SubscriptionTask {
	if m != nil {
		return m.Task
	}
	return SubscriptionTask{}
}

func init() {
	proto.RegisterEnum("onos.e2t.store.subscriptiontask.Phase", Phase_name, Phase_value)
	proto.RegisterEnum("onos.e2t.store.subscriptiontask.State", State_name, State_value)
	proto.RegisterEnum("onos.e2t.store.subscriptiontask.Cause", Cause_name, Cause_value)
	proto.RegisterEnum("onos.e2t.store.subscriptiontask.EventType", EventType_name, EventType_value)
	proto.RegisterType((*SubscriptionTaskMeta)(nil), "onos.e2t.store.subscriptiontask.SubscriptionTaskMeta")
	proto.RegisterType((*SubscriptionTask)(nil), "onos.e2t.store.subscriptiontask.SubscriptionTask")
	proto.RegisterType((*SubscriptionTaskStatus)(nil), "onos.e2t.store.subscriptiontask.SubscriptionTaskStatus")
	proto.RegisterType((*Failure)(nil), "onos.e2t.store.subscriptiontask.Failure")
	proto.RegisterType((*Event)(nil), "onos.e2t.store.subscriptiontask.Event")
}

func init() {
	proto.RegisterFile("api/store/subscriptiontask/task.proto", fileDescriptor_e147355c3a852149)
}

var fileDescriptor_e147355c3a852149 = []byte{
	// 1015 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x96, 0xcb, 0x6e, 0x1b, 0x37,
	0x17, 0xc7, 0x2d, 0x45, 0xb2, 0xe5, 0x63, 0x27, 0x61, 0xf8, 0x39, 0xfe, 0x64, 0xc7, 0x89, 0x1c,
	0xb5, 0x49, 0x0c, 0x15, 0x90, 0x51, 0x17, 0xbd, 0x22, 0x2d, 0x4a, 0x71, 0x8e, 0x1c, 0x26, 0x23,
	0xce, 0x94, 0xe4, 0xc8, 0xf1, 0xa6, 0x83, 0x49, 0x32, 0x75, 0x84, 0xd4, 0x96, 0xa0, 0x19, 0x07,
	0xc8, 0xb2, 0xef, 0xd0, 0xe7, 0xe9, 0xba, 0xcb, 0x3e, 0x81, 0x17, 0x7d, 0x83, 0x6e, 0xb3, 0x2a,
	0x38, 0xba, 0x8c, 0xac, 0x1a, 0xb0, 0xbd, 0x11, 0x86, 0xe4, 0xef, 0x7f, 0xee, 0x24, 0x04, 0x8f,
	0xa2, 0x41, 0x6f, 0x37, 0x49, 0xfb, 0xc3, 0x78, 0x37, 0x39, 0x7d, 0x95, 0xbc, 0x1e, 0xf6, 0x06,
	0x69, 0xaf, 0x7f, 0x92, 0x46, 0xc9, 0xbb, 0x5d, 0xfb, 0xd3, 0x1c, 0x0c, 0xfb, 0x69, 0x9f, 0xd6,
	0xfa, 0x27, 0xfd, 0xa4, 0x19, 0xef, 0xa5, 0xcd, 0x8c, 0x6d, 0xce, 0xb3, 0x9b, 0x6b, 0x47, 0xfd,
	0xa3, 0x7e, 0xc6, 0xee, 0xda, 0xaf, 0x91, 0xac, 0xfe, 0x33, 0xac, 0xe9, 0x19, 0xd2, 0x44, 0xc9,
	0xbb, 0x4e, 0x9c, 0x46, 0x74, 0x0b, 0x8a, 0xbd, 0x37, 0xd5, 0xc2, 0x76, 0x61, 0x67, 0xb9, 0xb5,
	0xfa, 0xf7, 0x59, 0xad, 0x28, 0x9c, 0x8f, 0xd9, 0xaf, 0x2a, 0xf6, 0xde, 0xd0, 0x1d, 0xa8, 0x0c,
	0xe3, 0xf7, 0xbd, 0xa4, 0xd7, 0x3f, 0xa9, 0x16, 0xb7, 0x0b, 0x3b, 0xa5, 0xd6, 0xea, 0xc7, 0xb3,
	0x5a, 0x45, 0x8d, 0xf7, 0xd4, 0xf4, 0xb4, 0xfe, 0x47, 0x01, 0xc8, 0xbc, 0x03, 0xaa, 0xa1, 0x74,
	0x1c, 0xa7, 0x51, 0x66, 0x7e, 0x65, 0xef, 0xcb, 0xe6, 0x25, 0xa1, 0x37, 0x2f, 0x8a, 0xb0, 0x55,
	0xf9, 0xf3, 0xac, 0xb6, 0xf0, 0xd7, 0x59, 0xad, 0xa0, 0x32, 0x63, 0x34, 0x80, 0xc5, 0x24, 0x8d,
	0xd2, 0xd3, 0x24, 0x8b, 0x68, 0x65, 0xef, 0xeb, 0x6b, 0x9b, 0xd5, 0x99, 0xbc, 0x55, 0xb2, 0x86,
	0xd5, 0xd8, 0x58, 0xfd, 0xb7, 0x22, 0xac, 0x5f, 0x0c, 0xd2, 0xa7, 0x50, 0x1e, 0xbc, 0x8d, 0x92,
	0x38, 0xcb, 0xe3, 0xd6, 0xde, 0xe3, 0x4b, 0x1d, 0xfa, 0x96, 0x56, 0x23, 0x91, 0x55, 0x5b, 0x17,
	0x71, 0x16, 0xee, 0x55, 0xd4, 0xd6, 0x6b, 0xac, 0x46, 0x22, 0xda, 0x82, 0xa5, 0x5f, 0xa2, 0xde,
	0xaf, 0xa7, 0xc3, 0xb8, 0x7a, 0x23, 0x4b, 0x77, 0xe7, 0x52, 0x7d, 0x7b, 0xc4, 0xab, 0x89, 0x90,
	0x3e, 0x81, 0xdb, 0xc7, 0x51, 0x92, 0xc6, 0xc3, 0xe4, 0x6d, 0x6f, 0x10, 0xa6, 0xf1, 0xf0, 0xb8,
	0x5a, 0xb2, 0xcd, 0x54, 0xb7, 0xf2, 0x6d, 0x13, 0x0f, 0x8f, 0xeb, 0x11, 0x2c, 0x8d, 0xc5, 0x36,
	0xea, 0xd7, 0xd1, 0xe9, 0x35, 0x72, 0xe6, 0x96, 0x56, 0x23, 0x11, 0xad, 0xc2, 0xd2, 0x71, 0x9c,
	0x24, 0xd1, 0xd1, 0x28, 0xeb, 0x65, 0x35, 0x59, 0xd6, 0x7f, 0x2f, 0x40, 0x19, 0xdf, 0xc7, 0x27,
	0x29, 0xfd, 0x01, 0x4a, 0xe9, 0x87, 0xc1, 0xc4, 0x41, 0xe3, 0x52, 0x07, 0x99, 0xca, 0x7c, 0x18,
	0xc4, 0x2a, 0xd3, 0xd1, 0x17, 0x50, 0xb2, 0xfb, 0xe3, 0x29, 0xf8, 0xfc, 0xda, 0x53, 0x30, 0xee,
	0x7f, 0x66, 0xa4, 0xb1, 0x05, 0xe5, 0xac, 0x69, 0xb4, 0x02, 0x25, 0xcf, 0x47, 0x49, 0x16, 0xe8,
	0x32, 0x94, 0xb9, 0xeb, 0x69, 0x24, 0x85, 0x46, 0x13, 0xca, 0x59, 0x53, 0xe8, 0x0a, 0x2c, 0xf9,
	0x28, 0x1d, 0x21, 0xf7, 0xc9, 0x02, 0x5d, 0x85, 0x0a, 0xf7, 0x3a, 0xbe, 0x8b, 0x06, 0x49, 0x81,
	0x02, 0x2c, 0xb6, 0x99, 0x70, 0xd1, 0x21, 0xc5, 0xc6, 0x3f, 0x15, 0x28, 0x67, 0xf5, 0xa0, 0x77,
	0xe0, 0x26, 0x67, 0x81, 0xc6, 0x30, 0x90, 0x2f, 0xa4, 0x77, 0x60, 0xed, 0x36, 0xe0, 0xf1, 0x68,
	0xab, 0x23, 0x34, 0x0f, 0xb9, 0x27, 0x8d, 0xf2, 0xdc, 0xd0, 0x57, 0x1e, 0x47, 0xad, 0x85, 0xdc,
	0x0f, 0xbd, 0x2e, 0x2a, 0xd7, 0x63, 0x0e, 0x29, 0xd0, 0x1a, 0xdc, 0x9b, 0x61, 0x9f, 0x31, 0xe5,
	0x1c, 0x30, 0x85, 0xa1, 0x75, 0x14, 0x28, 0x24, 0x45, 0xfa, 0x00, 0x36, 0x67, 0x00, 0xaf, 0x13,
	0x0a, 0x69, 0x50, 0x75, 0x51, 0x1a, 0xe1, 0x49, 0x72, 0x83, 0x6e, 0xc2, 0xfa, 0xcc, 0x79, 0x20,
	0xb5, 0x8f, 0x5c, 0xb4, 0x05, 0x3a, 0xa4, 0x44, 0x77, 0xe0, 0xd3, 0xd1, 0x99, 0xaf, 0x3c, 0xe3,
	0x71, 0xcf, 0x0d, 0x8d, 0x62, 0x52, 0xb7, 0x51, 0x85, 0xfa, 0x50, 0x1a, 0xf6, 0x32, 0x44, 0xa5,
	0x3c, 0x45, 0xca, 0x74, 0x17, 0x3e, 0x9b, 0x23, 0x59, 0x4b, 0x1b, 0xc5, 0xb8, 0x39, 0x47, 0x86,
	0x0a, 0x9f, 0x23, 0x37, 0x64, 0x91, 0x7e, 0x07, 0x5f, 0x5d, 0x49, 0x20, 0xf6, 0xa5, 0xa7, 0x30,
	0x64, 0xd2, 0x09, 0xa5, 0x67, 0x44, 0xfb, 0x90, 0x2c, 0xd1, 0xef, 0xe1, 0xdb, 0x39, 0x6d, 0x07,
	0xb5, 0x66, 0xfb, 0x68, 0x91, 0xd0, 0x56, 0x9c, 0x19, 0xd1, 0x72, 0x31, 0x3c, 0x10, 0xe6, 0x59,
	0xa8, 0x90, 0xa3, 0xe8, 0xda, 0x90, 0x0d, 0x33, 0x48, 0x2a, 0xf4, 0x21, 0xdc, 0x9f, 0x93, 0x6b,
	0xec, 0x30, 0x69, 0x04, 0x1f, 0xa7, 0xb3, 0x4c, 0x1d, 0xf8, 0xf1, 0x4a, 0xd1, 0xb5, 0x99, 0xab,
	0xd1, 0x3d, 0xb4, 0x3d, 0xd2, 0x46, 0x05, 0xdc, 0xa0, 0x33, 0x89, 0x85, 0x40, 0x5e, 0xfa, 0xa9,
	0x95, 0xd9, 0xf2, 0xae, 0xd0, 0x47, 0xf0, 0x70, 0x74, 0xae, 0x04, 0x0f, 0x15, 0x93, 0x61, 0x3b,
	0x90, 0xdc, 0xb6, 0x25, 0x14, 0x4e, 0x28, 0x64, 0x97, 0xb9, 0xc2, 0x21, 0xab, 0xb4, 0x0e, 0x0f,
	0x72, 0x8c, 0x8d, 0x00, 0x9b, 0xa8, 0x0e, 0x7c, 0xdf, 0x53, 0x06, 0x1d, 0x72, 0x33, 0x1f, 0x03,
	0xcb, 0xe0, 0xcb, 0x6c, 0x50, 0xba, 0x38, 0xa6, 0x35, 0xb9, 0x95, 0xc7, 0x62, 0x01, 0x27, 0xf0,
	0x5d, 0xc1, 0x99, 0x99, 0x00, 0xe4, 0x36, 0xbd, 0x0f, 0x1b, 0x17, 0x9d, 0xa3, 0x1d, 0x14, 0x42,
	0xce, 0x87, 0x3a, 0x0d, 0x53, 0xa1, 0xf6, 0x02, 0xc5, 0x31, 0x74, 0x45, 0x47, 0x18, 0x72, 0x87,
	0x6e, 0xc3, 0xd6, 0x4c, 0x46, 0xf8, 0x53, 0x80, 0xda, 0xd8, 0x64, 0x26, 0xb3, 0x4d, 0xe9, 0x53,
	0xf8, 0x26, 0x27, 0x84, 0xb4, 0x85, 0x13, 0xda, 0xa0, 0x34, 0x93, 0xcc, 0x74, 0xd0, 0xd2, 0x56,
	0x38, 0xb3, 0x93, 0x2d, 0x39, 0x92, 0xff, 0x9d, 0x0f, 0x63, 0x72, 0x31, 0x26, 0xcd, 0x9f, 0x54,
	0x6c, 0x6d, 0x0e, 0x63, 0xee, 0xf4, 0xf2, 0xcc, 0x16, 0xf6, 0x2e, 0xdd, 0x80, 0xbb, 0x39, 0x36,
	0xdb, 0x9a, 0xf5, 0xfc, 0x0a, 0x2a, 0xc1, 0x35, 0xaa, 0xae, 0xe0, 0x98, 0xa7, 0x6d, 0x8b, 0x6f,
	0x93, 0x13, 0x0a, 0x1d, 0xf2, 0xff, 0xfc, 0x96, 0xcc, 0xb0, 0x79, 0x0b, 0x26, 0x2a, 0x4d, 0xaa,
	0xf4, 0x09, 0x7c, 0xf2, 0x1f, 0x72, 0x54, 0xa9, 0x73, 0x75, 0xdc, 0xc8, 0xdb, 0x99, 0xdd, 0x37,
	0xdb, 0xe5, 0x73, 0xf1, 0x6d, 0xd2, 0x3d, 0x68, 0xce, 0x03, 0xf9, 0xd7, 0xd4, 0x5c, 0x20, 0x59,
	0x97, 0x09, 0x97, 0xb5, 0x5c, 0x24, 0xf7, 0x1a, 0xcf, 0x61, 0x79, 0xfa, 0x42, 0xda, 0x57, 0x4c,
	0x7a, 0x12, 0xc9, 0x82, 0x7d, 0xb1, 0xb8, 0x42, 0x66, 0xe7, 0xa8, 0x60, 0x17, 0x81, 0xef, 0x64,
	0x8b, 0xa2, 0x5d, 0x28, 0xec, 0x78, 0x5d, 0x74, 0xc8, 0x0d, 0xfb, 0x96, 0x29, 0xf4, 0x5d, 0x76,
	0x68, 0x5f, 0x86, 0x57, 0x8b, 0xd9, 0x7f, 0x86, 0x2f, 0xfe, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x0d,
	0xc7, 0xfa, 0xa6, 0x93, 0x08, 0x00, 0x00,
}
