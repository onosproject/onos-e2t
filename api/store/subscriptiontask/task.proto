/*
Copyright 2020-present Open Networking Foundation.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

syntax = "proto3";

// Package onos.e2t.store.subscriptiontask defines message types for E2T stores
package onos.e2t.store.subscriptiontask;

import "gogoproto/gogo.proto";

// SubscriptionTaskMeta is metadata for a SubscriptionTask
message SubscriptionTaskMeta {
    string id = 1 [(gogoproto.customname) = "ID", (gogoproto.casttype) = "ID"];
    uint64 revision = 2 [(gogoproto.casttype) = "Revision"];
}

// SubscriptionTask is a task representing a subscription between an E2 termination and an E2 node
message SubscriptionTask {
    SubscriptionTaskMeta meta = 1 [(gogoproto.nullable) = false, (gogoproto.embed) = true];
    SubscriptionTaskStatus status = 2 [(gogoproto.nullable) = false];
}

// SubscriptionTaskStatus is the subscription task status
message SubscriptionTaskStatus {
    Phase phase = 1;
    State state = 2;
    Failure failure = 3;
    uint64 mastership_term = 4;
}

// Phase is a subscription task phase
enum Phase {
    // OPEN is a subscription task open phase
    OPEN = 0;
    // CLOSE is a subscription task close phase
    CLOSE = 1;
}

// State is a subscription task state
enum State {
    // PENDING indicates the subscription task phase is pending
    PENDING = 0;
    // COMPLETE indicates the subscription task phase is complete
    COMPLETE = 1;
    // FAILED indicates the subscription task phase failed
    FAILED = 2;
}

// Failure is a subscription failure status
message Failure {
    Cause cause = 1;
    string message = 2;
}

// Cause is a failure cause
enum Cause {
    CAUSE_UNKNOWN = 0;
    CAUSE_MISC_CONTROL_PROCESSING_OVERLOAD = 1;
    CAUSE_MISC_HARDWARE_FAILURE = 2;
    CAUSE_MISC_OM_INTERVENTION = 3;
    CAUSE_MISC_UNSPECIFIED = 4;
    CAUSE_PROTOCOL_TRANSFER_SYNTAX_ERROR = 5;
    CAUSE_PROTOCOL_ABSTRACT_SYNTAX_ERROR_REJECT = 6;
    CAUSE_PROTOCOL_ABSTRACT_SYNTAX_ERROR_IGNORE_AND_NOTIFY = 7;
    CAUSE_PROTOCOL_MESSAGE_NOT_COMPATIBLE_WITH_RECEIVER_STATE = 8;
    CAUSE_PROTOCOL_SEMANTIC_ERROR = 9;
    CAUSE_PROTOCOL_ABSTRACT_SYNTAX_ERROR_FALSELY_CONSTRUCTED_MESSAGE = 10;
    CAUSE_PROTOCOL_UNSPECIFIED = 11;
    CAUSE_RIC_RAN_FUNCTION_ID_INVALID = 12;
    CAUSE_RIC_ACTION_NOT_SUPPORTED = 13;
    CAUSE_RIC_EXCESSIVE_ACTIONS = 14;
    CAUSE_RIC_DUPLICATE_ACTION = 15;
    CAUSE_RIC_DUPLICATE_EVENT = 16;
    CAUSE_RIC_FUNCTION_RESOURCE_LIMIT = 17;
    CAUSE_RIC_REQUEST_ID_UNKNOWN = 18;
    CAUSE_RIC_INCONSISTENT_ACTION_SUBSEQUENT_ACTION_SEQUENCE = 19;
    CAUSE_RIC_CONTROL_MESSAGE_INVALID = 20;
    CAUSE_RIC_CALL_PROCESS_ID_INVALID = 21;
    CAUSE_RIC_UNSPECIFIED = 22;
    CAUSE_RICSERVICE_FUNCTION_NOT_REQUIRED = 23;
    CAUSE_RICSERVICE_EXCESSIVE_FUNCTIONS = 24;
    CAUSE_RICSERVICE_RIC_RESOURCE_LIMIT = 25;
    CAUSE_TRANSPORT_UNSPECIFIED = 26;
    CAUSE_TRANSPORT_TRANSPORT_RESOURCE_UNAVAILABLE = 27;
}

// Type of change
enum EventType {
    NONE = 0;
    CREATED = 1;
    UPDATED = 2;
    REMOVED = 3;
    REPLAYED = 4;
}

// Event is a SubscriptionTask event
message Event {
    EventType type = 1;
    SubscriptionTask task = 2 [(gogoproto.nullable) = false];
}
