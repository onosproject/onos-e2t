/*
Copyright 2020-present Open Networking Foundation.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

syntax = "proto3";

// Package onos.e2t.store.subscription defines message types for E2T stores
package onos.e2t.store.subscription;

import "gogoproto/gogo.proto";

// Subscription is a subscription state
message Subscription {
    SubscriptionMeta meta = 1 [(gogoproto.nullable) = false, (gogoproto.embed) = true];
    SubscriptionSpec spec = 6 [(gogoproto.nullable) = false];
    SubscriptionStatus status = 7 [(gogoproto.nullable) = false];
}

// SubscriptionMeta is subscription metadata
message SubscriptionMeta {
    string id = 1 [(gogoproto.casttype) = "ID", (gogoproto.customname) = "ID"];
    uint64 revision = 2 [(gogoproto.casttype) = "Revision"];
    string app_id = 3 [(gogoproto.casttype) = "AppID", (gogoproto.customname) = "AppID"];
    string app_node_id = 4 [(gogoproto.casttype) = "AppNodeID", (gogoproto.customname) = "AppNodeID"];
    string e2_node_id = 5 [(gogoproto.casttype) = "E2NodeID", (gogoproto.customname) = "E2NodeID"];
}

message SubscriptionSpec {
    ServiceModel service_model = 2 [(gogoproto.nullable) = false];
    EventTrigger event_trigger = 3 [(gogoproto.nullable) = false];
    repeated Action actions = 4 [(gogoproto.nullable) = false];
}

// SubscriptionStatus is the subscription status
message SubscriptionStatus {
    State state = 1;
    string task_id = 2 [(gogoproto.customname) = "TaskID", (gogoproto.casttype) = "github.com/onosproject/onos-e2t/api/store/task.ID"];
}

// State is a subscription state
enum State {
    ACTIVE = 0;
    PENDING_DELETE = 1;
    FAILED = 2;
}

// EventType is a subscription event type
enum EventType {
    NONE = 0;
    ADDED = 1;
    UPDATED = 2;
    REMOVED = 3;
    REPLAYED = 4;
}

// Event is a subscription event
message Event {
    EventType type = 1;
    Subscription subscription = 2 [(gogoproto.nullable) = false];
}

// ServiceModel is a service model definition
message ServiceModel {
    string name = 1;
    string version = 2;
}

// Encoding indicates a payload encoding
enum Encoding {
    ENCODING_ASN1 = 0;
    ENCODING_PROTO = 1;
}

message Payload {
    Encoding encoding = 1;
    bytes data = 2;
}

message EventTrigger {
    Payload payload = 1 [(gogoproto.nullable) = false];
}

message Action {
    int32 id = 1 [(gogoproto.customname) = "ID"];
    ActionType type = 2;
    Payload payload = 3 [(gogoproto.nullable) = false];
    SubsequentAction subsequent_action = 4;
}

enum ActionType {
    ACTION_TYPE_REPORT = 0;
    ACTION_TYPE_INSERT = 1;
    ACTION_TYPE_POLICY = 2;
}

// sequence from e2ap-v01.00.00.asn1:1132
message SubsequentAction {
    SubsequentActionType type = 1;
    TimeToWait time_to_wait = 2;
}

enum SubsequentActionType {
    SUBSEQUENT_ACTION_TYPE_CONTINUE = 0;
    SUBSEQUENT_ACTION_TYPE_WAIT = 1;
}

enum TimeToWait {
    TIME_TO_WAIT_ZERO = 0;
    TIME_TO_WAIT_W1MS = 1;
    TIME_TO_WAIT_W2MS = 2;
    TIME_TO_WAIT_W5MS = 3;
    TIME_TO_WAIT_W10MS = 4;
    TIME_TO_WAIT_W20MS = 5;
    TIME_TO_WAIT_W30MS = 6;
    TIME_TO_WAIT_W40MS = 7;
    TIME_TO_WAIT_W50MS = 8;
    TIME_TO_WAIT_W100MS = 9;
    TIME_TO_WAIT_W200MS = 10;
    TIME_TO_WAIT_W500MS = 11;
    TIME_TO_WAIT_W1S = 12;
    TIME_TO_WAIT_W2S = 13;
    TIME_TO_WAIT_W5S = 14;
    TIME_TO_WAIT_W10S = 15;
    TIME_TO_WAIT_W20S = 16;
    TIME_TO_WAIT_W60S = 17;
}
