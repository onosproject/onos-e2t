// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/e2ap/v1beta1/e2ap_constants.proto

package e2ap_constants

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
)

// Validate checks the field values on IdE2Setup with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *IdE2Setup) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdE2Setup with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in IdE2SetupMultiError, or nil
// if none found.
func (m *IdE2Setup) ValidateAll() error {
	return m.validate(true)
}

func (m *IdE2Setup) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 1 {
		err := IdE2SetupValidationError{
			field:  "Value",
			reason: "value must equal 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdE2SetupMultiError(errors)
	}
	return nil
}

// IdE2SetupMultiError is an error wrapping multiple validation errors returned
// by IdE2Setup.ValidateAll() if the designated constraints aren't met.
type IdE2SetupMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdE2SetupMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdE2SetupMultiError) AllErrors() []error { return m }

// IdE2SetupValidationError is the validation error returned by
// IdE2Setup.Validate if the designated constraints aren't met.
type IdE2SetupValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdE2SetupValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdE2SetupValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdE2SetupValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdE2SetupValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdE2SetupValidationError) ErrorName() string { return "IdE2SetupValidationError" }

// Error satisfies the builtin error interface
func (e IdE2SetupValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdE2Setup.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdE2SetupValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdE2SetupValidationError{}

// Validate checks the field values on IdErrorIndication with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *IdErrorIndication) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdErrorIndication with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdErrorIndicationMultiError, or nil if none found.
func (m *IdErrorIndication) ValidateAll() error {
	return m.validate(true)
}

func (m *IdErrorIndication) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 2 {
		err := IdErrorIndicationValidationError{
			field:  "Value",
			reason: "value must equal 2",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdErrorIndicationMultiError(errors)
	}
	return nil
}

// IdErrorIndicationMultiError is an error wrapping multiple validation errors
// returned by IdErrorIndication.ValidateAll() if the designated constraints
// aren't met.
type IdErrorIndicationMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdErrorIndicationMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdErrorIndicationMultiError) AllErrors() []error { return m }

// IdErrorIndicationValidationError is the validation error returned by
// IdErrorIndication.Validate if the designated constraints aren't met.
type IdErrorIndicationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdErrorIndicationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdErrorIndicationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdErrorIndicationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdErrorIndicationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdErrorIndicationValidationError) ErrorName() string {
	return "IdErrorIndicationValidationError"
}

// Error satisfies the builtin error interface
func (e IdErrorIndicationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdErrorIndication.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdErrorIndicationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdErrorIndicationValidationError{}

// Validate checks the field values on IdReset with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *IdReset) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdReset with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in IdResetMultiError, or nil if none found.
func (m *IdReset) ValidateAll() error {
	return m.validate(true)
}

func (m *IdReset) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 3 {
		err := IdResetValidationError{
			field:  "Value",
			reason: "value must equal 3",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdResetMultiError(errors)
	}
	return nil
}

// IdResetMultiError is an error wrapping multiple validation errors returned
// by IdReset.ValidateAll() if the designated constraints aren't met.
type IdResetMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdResetMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdResetMultiError) AllErrors() []error { return m }

// IdResetValidationError is the validation error returned by IdReset.Validate
// if the designated constraints aren't met.
type IdResetValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdResetValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdResetValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdResetValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdResetValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdResetValidationError) ErrorName() string { return "IdResetValidationError" }

// Error satisfies the builtin error interface
func (e IdResetValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdReset.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdResetValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdResetValidationError{}

// Validate checks the field values on IdRiccontrol with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *IdRiccontrol) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdRiccontrol with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in IdRiccontrolMultiError, or
// nil if none found.
func (m *IdRiccontrol) ValidateAll() error {
	return m.validate(true)
}

func (m *IdRiccontrol) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 4 {
		err := IdRiccontrolValidationError{
			field:  "Value",
			reason: "value must equal 4",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdRiccontrolMultiError(errors)
	}
	return nil
}

// IdRiccontrolMultiError is an error wrapping multiple validation errors
// returned by IdRiccontrol.ValidateAll() if the designated constraints aren't met.
type IdRiccontrolMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdRiccontrolMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdRiccontrolMultiError) AllErrors() []error { return m }

// IdRiccontrolValidationError is the validation error returned by
// IdRiccontrol.Validate if the designated constraints aren't met.
type IdRiccontrolValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdRiccontrolValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdRiccontrolValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdRiccontrolValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdRiccontrolValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdRiccontrolValidationError) ErrorName() string { return "IdRiccontrolValidationError" }

// Error satisfies the builtin error interface
func (e IdRiccontrolValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdRiccontrol.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdRiccontrolValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdRiccontrolValidationError{}

// Validate checks the field values on IdRicindication with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *IdRicindication) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdRicindication with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdRicindicationMultiError, or nil if none found.
func (m *IdRicindication) ValidateAll() error {
	return m.validate(true)
}

func (m *IdRicindication) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 5 {
		err := IdRicindicationValidationError{
			field:  "Value",
			reason: "value must equal 5",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdRicindicationMultiError(errors)
	}
	return nil
}

// IdRicindicationMultiError is an error wrapping multiple validation errors
// returned by IdRicindication.ValidateAll() if the designated constraints
// aren't met.
type IdRicindicationMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdRicindicationMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdRicindicationMultiError) AllErrors() []error { return m }

// IdRicindicationValidationError is the validation error returned by
// IdRicindication.Validate if the designated constraints aren't met.
type IdRicindicationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdRicindicationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdRicindicationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdRicindicationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdRicindicationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdRicindicationValidationError) ErrorName() string { return "IdRicindicationValidationError" }

// Error satisfies the builtin error interface
func (e IdRicindicationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdRicindication.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdRicindicationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdRicindicationValidationError{}

// Validate checks the field values on IdRicserviceQuery with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *IdRicserviceQuery) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdRicserviceQuery with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdRicserviceQueryMultiError, or nil if none found.
func (m *IdRicserviceQuery) ValidateAll() error {
	return m.validate(true)
}

func (m *IdRicserviceQuery) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 6 {
		err := IdRicserviceQueryValidationError{
			field:  "Value",
			reason: "value must equal 6",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdRicserviceQueryMultiError(errors)
	}
	return nil
}

// IdRicserviceQueryMultiError is an error wrapping multiple validation errors
// returned by IdRicserviceQuery.ValidateAll() if the designated constraints
// aren't met.
type IdRicserviceQueryMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdRicserviceQueryMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdRicserviceQueryMultiError) AllErrors() []error { return m }

// IdRicserviceQueryValidationError is the validation error returned by
// IdRicserviceQuery.Validate if the designated constraints aren't met.
type IdRicserviceQueryValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdRicserviceQueryValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdRicserviceQueryValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdRicserviceQueryValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdRicserviceQueryValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdRicserviceQueryValidationError) ErrorName() string {
	return "IdRicserviceQueryValidationError"
}

// Error satisfies the builtin error interface
func (e IdRicserviceQueryValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdRicserviceQuery.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdRicserviceQueryValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdRicserviceQueryValidationError{}

// Validate checks the field values on IdRicserviceUpdate with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdRicserviceUpdate) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdRicserviceUpdate with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdRicserviceUpdateMultiError, or nil if none found.
func (m *IdRicserviceUpdate) ValidateAll() error {
	return m.validate(true)
}

func (m *IdRicserviceUpdate) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 7 {
		err := IdRicserviceUpdateValidationError{
			field:  "Value",
			reason: "value must equal 7",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdRicserviceUpdateMultiError(errors)
	}
	return nil
}

// IdRicserviceUpdateMultiError is an error wrapping multiple validation errors
// returned by IdRicserviceUpdate.ValidateAll() if the designated constraints
// aren't met.
type IdRicserviceUpdateMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdRicserviceUpdateMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdRicserviceUpdateMultiError) AllErrors() []error { return m }

// IdRicserviceUpdateValidationError is the validation error returned by
// IdRicserviceUpdate.Validate if the designated constraints aren't met.
type IdRicserviceUpdateValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdRicserviceUpdateValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdRicserviceUpdateValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdRicserviceUpdateValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdRicserviceUpdateValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdRicserviceUpdateValidationError) ErrorName() string {
	return "IdRicserviceUpdateValidationError"
}

// Error satisfies the builtin error interface
func (e IdRicserviceUpdateValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdRicserviceUpdate.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdRicserviceUpdateValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdRicserviceUpdateValidationError{}

// Validate checks the field values on IdRicsubscription with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *IdRicsubscription) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdRicsubscription with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdRicsubscriptionMultiError, or nil if none found.
func (m *IdRicsubscription) ValidateAll() error {
	return m.validate(true)
}

func (m *IdRicsubscription) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 8 {
		err := IdRicsubscriptionValidationError{
			field:  "Value",
			reason: "value must equal 8",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdRicsubscriptionMultiError(errors)
	}
	return nil
}

// IdRicsubscriptionMultiError is an error wrapping multiple validation errors
// returned by IdRicsubscription.ValidateAll() if the designated constraints
// aren't met.
type IdRicsubscriptionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdRicsubscriptionMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdRicsubscriptionMultiError) AllErrors() []error { return m }

// IdRicsubscriptionValidationError is the validation error returned by
// IdRicsubscription.Validate if the designated constraints aren't met.
type IdRicsubscriptionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdRicsubscriptionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdRicsubscriptionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdRicsubscriptionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdRicsubscriptionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdRicsubscriptionValidationError) ErrorName() string {
	return "IdRicsubscriptionValidationError"
}

// Error satisfies the builtin error interface
func (e IdRicsubscriptionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdRicsubscription.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdRicsubscriptionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdRicsubscriptionValidationError{}

// Validate checks the field values on IdRicsubscriptionDelete with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdRicsubscriptionDelete) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdRicsubscriptionDelete with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdRicsubscriptionDeleteMultiError, or nil if none found.
func (m *IdRicsubscriptionDelete) ValidateAll() error {
	return m.validate(true)
}

func (m *IdRicsubscriptionDelete) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 9 {
		err := IdRicsubscriptionDeleteValidationError{
			field:  "Value",
			reason: "value must equal 9",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdRicsubscriptionDeleteMultiError(errors)
	}
	return nil
}

// IdRicsubscriptionDeleteMultiError is an error wrapping multiple validation
// errors returned by IdRicsubscriptionDelete.ValidateAll() if the designated
// constraints aren't met.
type IdRicsubscriptionDeleteMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdRicsubscriptionDeleteMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdRicsubscriptionDeleteMultiError) AllErrors() []error { return m }

// IdRicsubscriptionDeleteValidationError is the validation error returned by
// IdRicsubscriptionDelete.Validate if the designated constraints aren't met.
type IdRicsubscriptionDeleteValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdRicsubscriptionDeleteValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdRicsubscriptionDeleteValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdRicsubscriptionDeleteValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdRicsubscriptionDeleteValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdRicsubscriptionDeleteValidationError) ErrorName() string {
	return "IdRicsubscriptionDeleteValidationError"
}

// Error satisfies the builtin error interface
func (e IdRicsubscriptionDeleteValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdRicsubscriptionDelete.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdRicsubscriptionDeleteValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdRicsubscriptionDeleteValidationError{}

// Validate checks the field values on MaxProtocolIes with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *MaxProtocolIes) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MaxProtocolIes with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in MaxProtocolIesMultiError,
// or nil if none found.
func (m *MaxProtocolIes) ValidateAll() error {
	return m.validate(true)
}

func (m *MaxProtocolIes) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 65535 {
		err := MaxProtocolIesValidationError{
			field:  "Value",
			reason: "value must equal 65535",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MaxProtocolIesMultiError(errors)
	}
	return nil
}

// MaxProtocolIesMultiError is an error wrapping multiple validation errors
// returned by MaxProtocolIes.ValidateAll() if the designated constraints
// aren't met.
type MaxProtocolIesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MaxProtocolIesMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MaxProtocolIesMultiError) AllErrors() []error { return m }

// MaxProtocolIesValidationError is the validation error returned by
// MaxProtocolIes.Validate if the designated constraints aren't met.
type MaxProtocolIesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MaxProtocolIesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MaxProtocolIesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MaxProtocolIesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MaxProtocolIesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MaxProtocolIesValidationError) ErrorName() string { return "MaxProtocolIesValidationError" }

// Error satisfies the builtin error interface
func (e MaxProtocolIesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMaxProtocolIes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MaxProtocolIesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MaxProtocolIesValidationError{}

// Validate checks the field values on MaxnoofErrors with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *MaxnoofErrors) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MaxnoofErrors with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in MaxnoofErrorsMultiError, or
// nil if none found.
func (m *MaxnoofErrors) ValidateAll() error {
	return m.validate(true)
}

func (m *MaxnoofErrors) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 256 {
		err := MaxnoofErrorsValidationError{
			field:  "Value",
			reason: "value must equal 256",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MaxnoofErrorsMultiError(errors)
	}
	return nil
}

// MaxnoofErrorsMultiError is an error wrapping multiple validation errors
// returned by MaxnoofErrors.ValidateAll() if the designated constraints
// aren't met.
type MaxnoofErrorsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MaxnoofErrorsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MaxnoofErrorsMultiError) AllErrors() []error { return m }

// MaxnoofErrorsValidationError is the validation error returned by
// MaxnoofErrors.Validate if the designated constraints aren't met.
type MaxnoofErrorsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MaxnoofErrorsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MaxnoofErrorsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MaxnoofErrorsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MaxnoofErrorsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MaxnoofErrorsValidationError) ErrorName() string { return "MaxnoofErrorsValidationError" }

// Error satisfies the builtin error interface
func (e MaxnoofErrorsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMaxnoofErrors.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MaxnoofErrorsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MaxnoofErrorsValidationError{}

// Validate checks the field values on MaxofRanfunctionId with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *MaxofRanfunctionId) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MaxofRanfunctionId with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MaxofRanfunctionIdMultiError, or nil if none found.
func (m *MaxofRanfunctionId) ValidateAll() error {
	return m.validate(true)
}

func (m *MaxofRanfunctionId) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 256 {
		err := MaxofRanfunctionIdValidationError{
			field:  "Value",
			reason: "value must equal 256",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MaxofRanfunctionIdMultiError(errors)
	}
	return nil
}

// MaxofRanfunctionIdMultiError is an error wrapping multiple validation errors
// returned by MaxofRanfunctionId.ValidateAll() if the designated constraints
// aren't met.
type MaxofRanfunctionIdMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MaxofRanfunctionIdMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MaxofRanfunctionIdMultiError) AllErrors() []error { return m }

// MaxofRanfunctionIdValidationError is the validation error returned by
// MaxofRanfunctionId.Validate if the designated constraints aren't met.
type MaxofRanfunctionIdValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MaxofRanfunctionIdValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MaxofRanfunctionIdValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MaxofRanfunctionIdValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MaxofRanfunctionIdValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MaxofRanfunctionIdValidationError) ErrorName() string {
	return "MaxofRanfunctionIdValidationError"
}

// Error satisfies the builtin error interface
func (e MaxofRanfunctionIdValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMaxofRanfunctionId.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MaxofRanfunctionIdValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MaxofRanfunctionIdValidationError{}

// Validate checks the field values on MaxofRicactionId with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *MaxofRicactionId) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MaxofRicactionId with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MaxofRicactionIdMultiError, or nil if none found.
func (m *MaxofRicactionId) ValidateAll() error {
	return m.validate(true)
}

func (m *MaxofRicactionId) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 16 {
		err := MaxofRicactionIdValidationError{
			field:  "Value",
			reason: "value must equal 16",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MaxofRicactionIdMultiError(errors)
	}
	return nil
}

// MaxofRicactionIdMultiError is an error wrapping multiple validation errors
// returned by MaxofRicactionId.ValidateAll() if the designated constraints
// aren't met.
type MaxofRicactionIdMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MaxofRicactionIdMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MaxofRicactionIdMultiError) AllErrors() []error { return m }

// MaxofRicactionIdValidationError is the validation error returned by
// MaxofRicactionId.Validate if the designated constraints aren't met.
type MaxofRicactionIdValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MaxofRicactionIdValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MaxofRicactionIdValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MaxofRicactionIdValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MaxofRicactionIdValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MaxofRicactionIdValidationError) ErrorName() string { return "MaxofRicactionIdValidationError" }

// Error satisfies the builtin error interface
func (e MaxofRicactionIdValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMaxofRicactionId.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MaxofRicactionIdValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MaxofRicactionIdValidationError{}

// Validate checks the field values on IdCause with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *IdCause) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdCause with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in IdCauseMultiError, or nil if none found.
func (m *IdCause) ValidateAll() error {
	return m.validate(true)
}

func (m *IdCause) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 1 {
		err := IdCauseValidationError{
			field:  "Value",
			reason: "value must equal 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdCauseMultiError(errors)
	}
	return nil
}

// IdCauseMultiError is an error wrapping multiple validation errors returned
// by IdCause.ValidateAll() if the designated constraints aren't met.
type IdCauseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdCauseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdCauseMultiError) AllErrors() []error { return m }

// IdCauseValidationError is the validation error returned by IdCause.Validate
// if the designated constraints aren't met.
type IdCauseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdCauseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdCauseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdCauseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdCauseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdCauseValidationError) ErrorName() string { return "IdCauseValidationError" }

// Error satisfies the builtin error interface
func (e IdCauseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdCause.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdCauseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdCauseValidationError{}

// Validate checks the field values on IdCriticalityDiagnostics with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdCriticalityDiagnostics) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdCriticalityDiagnostics with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdCriticalityDiagnosticsMultiError, or nil if none found.
func (m *IdCriticalityDiagnostics) ValidateAll() error {
	return m.validate(true)
}

func (m *IdCriticalityDiagnostics) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 2 {
		err := IdCriticalityDiagnosticsValidationError{
			field:  "Value",
			reason: "value must equal 2",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdCriticalityDiagnosticsMultiError(errors)
	}
	return nil
}

// IdCriticalityDiagnosticsMultiError is an error wrapping multiple validation
// errors returned by IdCriticalityDiagnostics.ValidateAll() if the designated
// constraints aren't met.
type IdCriticalityDiagnosticsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdCriticalityDiagnosticsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdCriticalityDiagnosticsMultiError) AllErrors() []error { return m }

// IdCriticalityDiagnosticsValidationError is the validation error returned by
// IdCriticalityDiagnostics.Validate if the designated constraints aren't met.
type IdCriticalityDiagnosticsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdCriticalityDiagnosticsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdCriticalityDiagnosticsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdCriticalityDiagnosticsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdCriticalityDiagnosticsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdCriticalityDiagnosticsValidationError) ErrorName() string {
	return "IdCriticalityDiagnosticsValidationError"
}

// Error satisfies the builtin error interface
func (e IdCriticalityDiagnosticsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdCriticalityDiagnostics.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdCriticalityDiagnosticsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdCriticalityDiagnosticsValidationError{}

// Validate checks the field values on IdGlobalE2NodeId with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *IdGlobalE2NodeId) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdGlobalE2NodeId with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdGlobalE2NodeIdMultiError, or nil if none found.
func (m *IdGlobalE2NodeId) ValidateAll() error {
	return m.validate(true)
}

func (m *IdGlobalE2NodeId) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 3 {
		err := IdGlobalE2NodeIdValidationError{
			field:  "Value",
			reason: "value must equal 3",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdGlobalE2NodeIdMultiError(errors)
	}
	return nil
}

// IdGlobalE2NodeIdMultiError is an error wrapping multiple validation errors
// returned by IdGlobalE2NodeId.ValidateAll() if the designated constraints
// aren't met.
type IdGlobalE2NodeIdMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdGlobalE2NodeIdMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdGlobalE2NodeIdMultiError) AllErrors() []error { return m }

// IdGlobalE2NodeIdValidationError is the validation error returned by
// IdGlobalE2NodeId.Validate if the designated constraints aren't met.
type IdGlobalE2NodeIdValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdGlobalE2NodeIdValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdGlobalE2NodeIdValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdGlobalE2NodeIdValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdGlobalE2NodeIdValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdGlobalE2NodeIdValidationError) ErrorName() string { return "IdGlobalE2NodeIdValidationError" }

// Error satisfies the builtin error interface
func (e IdGlobalE2NodeIdValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdGlobalE2NodeId.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdGlobalE2NodeIdValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdGlobalE2NodeIdValidationError{}

// Validate checks the field values on IdGlobalRicId with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *IdGlobalRicId) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdGlobalRicId with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in IdGlobalRicIdMultiError, or
// nil if none found.
func (m *IdGlobalRicId) ValidateAll() error {
	return m.validate(true)
}

func (m *IdGlobalRicId) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 4 {
		err := IdGlobalRicIdValidationError{
			field:  "Value",
			reason: "value must equal 4",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdGlobalRicIdMultiError(errors)
	}
	return nil
}

// IdGlobalRicIdMultiError is an error wrapping multiple validation errors
// returned by IdGlobalRicId.ValidateAll() if the designated constraints
// aren't met.
type IdGlobalRicIdMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdGlobalRicIdMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdGlobalRicIdMultiError) AllErrors() []error { return m }

// IdGlobalRicIdValidationError is the validation error returned by
// IdGlobalRicId.Validate if the designated constraints aren't met.
type IdGlobalRicIdValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdGlobalRicIdValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdGlobalRicIdValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdGlobalRicIdValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdGlobalRicIdValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdGlobalRicIdValidationError) ErrorName() string { return "IdGlobalRicIdValidationError" }

// Error satisfies the builtin error interface
func (e IdGlobalRicIdValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdGlobalRicId.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdGlobalRicIdValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdGlobalRicIdValidationError{}

// Validate checks the field values on IdRanfunctionId with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *IdRanfunctionId) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdRanfunctionId with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdRanfunctionIdMultiError, or nil if none found.
func (m *IdRanfunctionId) ValidateAll() error {
	return m.validate(true)
}

func (m *IdRanfunctionId) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 5 {
		err := IdRanfunctionIdValidationError{
			field:  "Value",
			reason: "value must equal 5",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdRanfunctionIdMultiError(errors)
	}
	return nil
}

// IdRanfunctionIdMultiError is an error wrapping multiple validation errors
// returned by IdRanfunctionId.ValidateAll() if the designated constraints
// aren't met.
type IdRanfunctionIdMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdRanfunctionIdMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdRanfunctionIdMultiError) AllErrors() []error { return m }

// IdRanfunctionIdValidationError is the validation error returned by
// IdRanfunctionId.Validate if the designated constraints aren't met.
type IdRanfunctionIdValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdRanfunctionIdValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdRanfunctionIdValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdRanfunctionIdValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdRanfunctionIdValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdRanfunctionIdValidationError) ErrorName() string { return "IdRanfunctionIdValidationError" }

// Error satisfies the builtin error interface
func (e IdRanfunctionIdValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdRanfunctionId.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdRanfunctionIdValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdRanfunctionIdValidationError{}

// Validate checks the field values on IdRanfunctionIdItem with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdRanfunctionIdItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdRanfunctionIdItem with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdRanfunctionIdItemMultiError, or nil if none found.
func (m *IdRanfunctionIdItem) ValidateAll() error {
	return m.validate(true)
}

func (m *IdRanfunctionIdItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 6 {
		err := IdRanfunctionIdItemValidationError{
			field:  "Value",
			reason: "value must equal 6",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdRanfunctionIdItemMultiError(errors)
	}
	return nil
}

// IdRanfunctionIdItemMultiError is an error wrapping multiple validation
// errors returned by IdRanfunctionIdItem.ValidateAll() if the designated
// constraints aren't met.
type IdRanfunctionIdItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdRanfunctionIdItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdRanfunctionIdItemMultiError) AllErrors() []error { return m }

// IdRanfunctionIdItemValidationError is the validation error returned by
// IdRanfunctionIdItem.Validate if the designated constraints aren't met.
type IdRanfunctionIdItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdRanfunctionIdItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdRanfunctionIdItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdRanfunctionIdItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdRanfunctionIdItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdRanfunctionIdItemValidationError) ErrorName() string {
	return "IdRanfunctionIdItemValidationError"
}

// Error satisfies the builtin error interface
func (e IdRanfunctionIdItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdRanfunctionIdItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdRanfunctionIdItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdRanfunctionIdItemValidationError{}

// Validate checks the field values on IdRanfunctionIecauseItem with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdRanfunctionIecauseItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdRanfunctionIecauseItem with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdRanfunctionIecauseItemMultiError, or nil if none found.
func (m *IdRanfunctionIecauseItem) ValidateAll() error {
	return m.validate(true)
}

func (m *IdRanfunctionIecauseItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 7 {
		err := IdRanfunctionIecauseItemValidationError{
			field:  "Value",
			reason: "value must equal 7",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdRanfunctionIecauseItemMultiError(errors)
	}
	return nil
}

// IdRanfunctionIecauseItemMultiError is an error wrapping multiple validation
// errors returned by IdRanfunctionIecauseItem.ValidateAll() if the designated
// constraints aren't met.
type IdRanfunctionIecauseItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdRanfunctionIecauseItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdRanfunctionIecauseItemMultiError) AllErrors() []error { return m }

// IdRanfunctionIecauseItemValidationError is the validation error returned by
// IdRanfunctionIecauseItem.Validate if the designated constraints aren't met.
type IdRanfunctionIecauseItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdRanfunctionIecauseItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdRanfunctionIecauseItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdRanfunctionIecauseItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdRanfunctionIecauseItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdRanfunctionIecauseItemValidationError) ErrorName() string {
	return "IdRanfunctionIecauseItemValidationError"
}

// Error satisfies the builtin error interface
func (e IdRanfunctionIecauseItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdRanfunctionIecauseItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdRanfunctionIecauseItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdRanfunctionIecauseItemValidationError{}

// Validate checks the field values on IdRanfunctionItem with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *IdRanfunctionItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdRanfunctionItem with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdRanfunctionItemMultiError, or nil if none found.
func (m *IdRanfunctionItem) ValidateAll() error {
	return m.validate(true)
}

func (m *IdRanfunctionItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 8 {
		err := IdRanfunctionItemValidationError{
			field:  "Value",
			reason: "value must equal 8",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdRanfunctionItemMultiError(errors)
	}
	return nil
}

// IdRanfunctionItemMultiError is an error wrapping multiple validation errors
// returned by IdRanfunctionItem.ValidateAll() if the designated constraints
// aren't met.
type IdRanfunctionItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdRanfunctionItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdRanfunctionItemMultiError) AllErrors() []error { return m }

// IdRanfunctionItemValidationError is the validation error returned by
// IdRanfunctionItem.Validate if the designated constraints aren't met.
type IdRanfunctionItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdRanfunctionItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdRanfunctionItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdRanfunctionItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdRanfunctionItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdRanfunctionItemValidationError) ErrorName() string {
	return "IdRanfunctionItemValidationError"
}

// Error satisfies the builtin error interface
func (e IdRanfunctionItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdRanfunctionItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdRanfunctionItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdRanfunctionItemValidationError{}

// Validate checks the field values on IdRanfunctionsAccepted with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdRanfunctionsAccepted) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdRanfunctionsAccepted with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdRanfunctionsAcceptedMultiError, or nil if none found.
func (m *IdRanfunctionsAccepted) ValidateAll() error {
	return m.validate(true)
}

func (m *IdRanfunctionsAccepted) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 9 {
		err := IdRanfunctionsAcceptedValidationError{
			field:  "Value",
			reason: "value must equal 9",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdRanfunctionsAcceptedMultiError(errors)
	}
	return nil
}

// IdRanfunctionsAcceptedMultiError is an error wrapping multiple validation
// errors returned by IdRanfunctionsAccepted.ValidateAll() if the designated
// constraints aren't met.
type IdRanfunctionsAcceptedMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdRanfunctionsAcceptedMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdRanfunctionsAcceptedMultiError) AllErrors() []error { return m }

// IdRanfunctionsAcceptedValidationError is the validation error returned by
// IdRanfunctionsAccepted.Validate if the designated constraints aren't met.
type IdRanfunctionsAcceptedValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdRanfunctionsAcceptedValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdRanfunctionsAcceptedValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdRanfunctionsAcceptedValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdRanfunctionsAcceptedValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdRanfunctionsAcceptedValidationError) ErrorName() string {
	return "IdRanfunctionsAcceptedValidationError"
}

// Error satisfies the builtin error interface
func (e IdRanfunctionsAcceptedValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdRanfunctionsAccepted.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdRanfunctionsAcceptedValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdRanfunctionsAcceptedValidationError{}

// Validate checks the field values on IdRanfunctionsAdded with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdRanfunctionsAdded) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdRanfunctionsAdded with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdRanfunctionsAddedMultiError, or nil if none found.
func (m *IdRanfunctionsAdded) ValidateAll() error {
	return m.validate(true)
}

func (m *IdRanfunctionsAdded) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 10 {
		err := IdRanfunctionsAddedValidationError{
			field:  "Value",
			reason: "value must equal 10",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdRanfunctionsAddedMultiError(errors)
	}
	return nil
}

// IdRanfunctionsAddedMultiError is an error wrapping multiple validation
// errors returned by IdRanfunctionsAdded.ValidateAll() if the designated
// constraints aren't met.
type IdRanfunctionsAddedMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdRanfunctionsAddedMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdRanfunctionsAddedMultiError) AllErrors() []error { return m }

// IdRanfunctionsAddedValidationError is the validation error returned by
// IdRanfunctionsAdded.Validate if the designated constraints aren't met.
type IdRanfunctionsAddedValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdRanfunctionsAddedValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdRanfunctionsAddedValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdRanfunctionsAddedValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdRanfunctionsAddedValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdRanfunctionsAddedValidationError) ErrorName() string {
	return "IdRanfunctionsAddedValidationError"
}

// Error satisfies the builtin error interface
func (e IdRanfunctionsAddedValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdRanfunctionsAdded.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdRanfunctionsAddedValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdRanfunctionsAddedValidationError{}

// Validate checks the field values on IdRanfunctionsDeleted with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdRanfunctionsDeleted) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdRanfunctionsDeleted with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdRanfunctionsDeletedMultiError, or nil if none found.
func (m *IdRanfunctionsDeleted) ValidateAll() error {
	return m.validate(true)
}

func (m *IdRanfunctionsDeleted) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 11 {
		err := IdRanfunctionsDeletedValidationError{
			field:  "Value",
			reason: "value must equal 11",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdRanfunctionsDeletedMultiError(errors)
	}
	return nil
}

// IdRanfunctionsDeletedMultiError is an error wrapping multiple validation
// errors returned by IdRanfunctionsDeleted.ValidateAll() if the designated
// constraints aren't met.
type IdRanfunctionsDeletedMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdRanfunctionsDeletedMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdRanfunctionsDeletedMultiError) AllErrors() []error { return m }

// IdRanfunctionsDeletedValidationError is the validation error returned by
// IdRanfunctionsDeleted.Validate if the designated constraints aren't met.
type IdRanfunctionsDeletedValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdRanfunctionsDeletedValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdRanfunctionsDeletedValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdRanfunctionsDeletedValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdRanfunctionsDeletedValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdRanfunctionsDeletedValidationError) ErrorName() string {
	return "IdRanfunctionsDeletedValidationError"
}

// Error satisfies the builtin error interface
func (e IdRanfunctionsDeletedValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdRanfunctionsDeleted.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdRanfunctionsDeletedValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdRanfunctionsDeletedValidationError{}

// Validate checks the field values on IdRanfunctionsModified with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdRanfunctionsModified) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdRanfunctionsModified with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdRanfunctionsModifiedMultiError, or nil if none found.
func (m *IdRanfunctionsModified) ValidateAll() error {
	return m.validate(true)
}

func (m *IdRanfunctionsModified) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 12 {
		err := IdRanfunctionsModifiedValidationError{
			field:  "Value",
			reason: "value must equal 12",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdRanfunctionsModifiedMultiError(errors)
	}
	return nil
}

// IdRanfunctionsModifiedMultiError is an error wrapping multiple validation
// errors returned by IdRanfunctionsModified.ValidateAll() if the designated
// constraints aren't met.
type IdRanfunctionsModifiedMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdRanfunctionsModifiedMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdRanfunctionsModifiedMultiError) AllErrors() []error { return m }

// IdRanfunctionsModifiedValidationError is the validation error returned by
// IdRanfunctionsModified.Validate if the designated constraints aren't met.
type IdRanfunctionsModifiedValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdRanfunctionsModifiedValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdRanfunctionsModifiedValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdRanfunctionsModifiedValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdRanfunctionsModifiedValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdRanfunctionsModifiedValidationError) ErrorName() string {
	return "IdRanfunctionsModifiedValidationError"
}

// Error satisfies the builtin error interface
func (e IdRanfunctionsModifiedValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdRanfunctionsModified.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdRanfunctionsModifiedValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdRanfunctionsModifiedValidationError{}

// Validate checks the field values on IdRanfunctionsRejected with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdRanfunctionsRejected) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdRanfunctionsRejected with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdRanfunctionsRejectedMultiError, or nil if none found.
func (m *IdRanfunctionsRejected) ValidateAll() error {
	return m.validate(true)
}

func (m *IdRanfunctionsRejected) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 13 {
		err := IdRanfunctionsRejectedValidationError{
			field:  "Value",
			reason: "value must equal 13",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdRanfunctionsRejectedMultiError(errors)
	}
	return nil
}

// IdRanfunctionsRejectedMultiError is an error wrapping multiple validation
// errors returned by IdRanfunctionsRejected.ValidateAll() if the designated
// constraints aren't met.
type IdRanfunctionsRejectedMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdRanfunctionsRejectedMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdRanfunctionsRejectedMultiError) AllErrors() []error { return m }

// IdRanfunctionsRejectedValidationError is the validation error returned by
// IdRanfunctionsRejected.Validate if the designated constraints aren't met.
type IdRanfunctionsRejectedValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdRanfunctionsRejectedValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdRanfunctionsRejectedValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdRanfunctionsRejectedValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdRanfunctionsRejectedValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdRanfunctionsRejectedValidationError) ErrorName() string {
	return "IdRanfunctionsRejectedValidationError"
}

// Error satisfies the builtin error interface
func (e IdRanfunctionsRejectedValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdRanfunctionsRejected.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdRanfunctionsRejectedValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdRanfunctionsRejectedValidationError{}

// Validate checks the field values on IdRicactionAdmittedItem with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdRicactionAdmittedItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdRicactionAdmittedItem with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdRicactionAdmittedItemMultiError, or nil if none found.
func (m *IdRicactionAdmittedItem) ValidateAll() error {
	return m.validate(true)
}

func (m *IdRicactionAdmittedItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 14 {
		err := IdRicactionAdmittedItemValidationError{
			field:  "Value",
			reason: "value must equal 14",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdRicactionAdmittedItemMultiError(errors)
	}
	return nil
}

// IdRicactionAdmittedItemMultiError is an error wrapping multiple validation
// errors returned by IdRicactionAdmittedItem.ValidateAll() if the designated
// constraints aren't met.
type IdRicactionAdmittedItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdRicactionAdmittedItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdRicactionAdmittedItemMultiError) AllErrors() []error { return m }

// IdRicactionAdmittedItemValidationError is the validation error returned by
// IdRicactionAdmittedItem.Validate if the designated constraints aren't met.
type IdRicactionAdmittedItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdRicactionAdmittedItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdRicactionAdmittedItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdRicactionAdmittedItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdRicactionAdmittedItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdRicactionAdmittedItemValidationError) ErrorName() string {
	return "IdRicactionAdmittedItemValidationError"
}

// Error satisfies the builtin error interface
func (e IdRicactionAdmittedItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdRicactionAdmittedItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdRicactionAdmittedItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdRicactionAdmittedItemValidationError{}

// Validate checks the field values on IdRicactionId with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *IdRicactionId) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdRicactionId with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in IdRicactionIdMultiError, or
// nil if none found.
func (m *IdRicactionId) ValidateAll() error {
	return m.validate(true)
}

func (m *IdRicactionId) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 15 {
		err := IdRicactionIdValidationError{
			field:  "Value",
			reason: "value must equal 15",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdRicactionIdMultiError(errors)
	}
	return nil
}

// IdRicactionIdMultiError is an error wrapping multiple validation errors
// returned by IdRicactionId.ValidateAll() if the designated constraints
// aren't met.
type IdRicactionIdMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdRicactionIdMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdRicactionIdMultiError) AllErrors() []error { return m }

// IdRicactionIdValidationError is the validation error returned by
// IdRicactionId.Validate if the designated constraints aren't met.
type IdRicactionIdValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdRicactionIdValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdRicactionIdValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdRicactionIdValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdRicactionIdValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdRicactionIdValidationError) ErrorName() string { return "IdRicactionIdValidationError" }

// Error satisfies the builtin error interface
func (e IdRicactionIdValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdRicactionId.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdRicactionIdValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdRicactionIdValidationError{}

// Validate checks the field values on IdRicactionNotAdmittedItem with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdRicactionNotAdmittedItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdRicactionNotAdmittedItem with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdRicactionNotAdmittedItemMultiError, or nil if none found.
func (m *IdRicactionNotAdmittedItem) ValidateAll() error {
	return m.validate(true)
}

func (m *IdRicactionNotAdmittedItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 16 {
		err := IdRicactionNotAdmittedItemValidationError{
			field:  "Value",
			reason: "value must equal 16",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdRicactionNotAdmittedItemMultiError(errors)
	}
	return nil
}

// IdRicactionNotAdmittedItemMultiError is an error wrapping multiple
// validation errors returned by IdRicactionNotAdmittedItem.ValidateAll() if
// the designated constraints aren't met.
type IdRicactionNotAdmittedItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdRicactionNotAdmittedItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdRicactionNotAdmittedItemMultiError) AllErrors() []error { return m }

// IdRicactionNotAdmittedItemValidationError is the validation error returned
// by IdRicactionNotAdmittedItem.Validate if the designated constraints aren't met.
type IdRicactionNotAdmittedItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdRicactionNotAdmittedItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdRicactionNotAdmittedItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdRicactionNotAdmittedItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdRicactionNotAdmittedItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdRicactionNotAdmittedItemValidationError) ErrorName() string {
	return "IdRicactionNotAdmittedItemValidationError"
}

// Error satisfies the builtin error interface
func (e IdRicactionNotAdmittedItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdRicactionNotAdmittedItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdRicactionNotAdmittedItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdRicactionNotAdmittedItemValidationError{}

// Validate checks the field values on IdRicactionsAdmitted with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdRicactionsAdmitted) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdRicactionsAdmitted with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdRicactionsAdmittedMultiError, or nil if none found.
func (m *IdRicactionsAdmitted) ValidateAll() error {
	return m.validate(true)
}

func (m *IdRicactionsAdmitted) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 17 {
		err := IdRicactionsAdmittedValidationError{
			field:  "Value",
			reason: "value must equal 17",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdRicactionsAdmittedMultiError(errors)
	}
	return nil
}

// IdRicactionsAdmittedMultiError is an error wrapping multiple validation
// errors returned by IdRicactionsAdmitted.ValidateAll() if the designated
// constraints aren't met.
type IdRicactionsAdmittedMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdRicactionsAdmittedMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdRicactionsAdmittedMultiError) AllErrors() []error { return m }

// IdRicactionsAdmittedValidationError is the validation error returned by
// IdRicactionsAdmitted.Validate if the designated constraints aren't met.
type IdRicactionsAdmittedValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdRicactionsAdmittedValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdRicactionsAdmittedValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdRicactionsAdmittedValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdRicactionsAdmittedValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdRicactionsAdmittedValidationError) ErrorName() string {
	return "IdRicactionsAdmittedValidationError"
}

// Error satisfies the builtin error interface
func (e IdRicactionsAdmittedValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdRicactionsAdmitted.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdRicactionsAdmittedValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdRicactionsAdmittedValidationError{}

// Validate checks the field values on IdRicactionsNotAdmitted with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdRicactionsNotAdmitted) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdRicactionsNotAdmitted with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdRicactionsNotAdmittedMultiError, or nil if none found.
func (m *IdRicactionsNotAdmitted) ValidateAll() error {
	return m.validate(true)
}

func (m *IdRicactionsNotAdmitted) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 18 {
		err := IdRicactionsNotAdmittedValidationError{
			field:  "Value",
			reason: "value must equal 18",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdRicactionsNotAdmittedMultiError(errors)
	}
	return nil
}

// IdRicactionsNotAdmittedMultiError is an error wrapping multiple validation
// errors returned by IdRicactionsNotAdmitted.ValidateAll() if the designated
// constraints aren't met.
type IdRicactionsNotAdmittedMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdRicactionsNotAdmittedMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdRicactionsNotAdmittedMultiError) AllErrors() []error { return m }

// IdRicactionsNotAdmittedValidationError is the validation error returned by
// IdRicactionsNotAdmitted.Validate if the designated constraints aren't met.
type IdRicactionsNotAdmittedValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdRicactionsNotAdmittedValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdRicactionsNotAdmittedValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdRicactionsNotAdmittedValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdRicactionsNotAdmittedValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdRicactionsNotAdmittedValidationError) ErrorName() string {
	return "IdRicactionsNotAdmittedValidationError"
}

// Error satisfies the builtin error interface
func (e IdRicactionsNotAdmittedValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdRicactionsNotAdmitted.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdRicactionsNotAdmittedValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdRicactionsNotAdmittedValidationError{}

// Validate checks the field values on IdRicactionToBeSetupItem with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdRicactionToBeSetupItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdRicactionToBeSetupItem with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdRicactionToBeSetupItemMultiError, or nil if none found.
func (m *IdRicactionToBeSetupItem) ValidateAll() error {
	return m.validate(true)
}

func (m *IdRicactionToBeSetupItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 19 {
		err := IdRicactionToBeSetupItemValidationError{
			field:  "Value",
			reason: "value must equal 19",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdRicactionToBeSetupItemMultiError(errors)
	}
	return nil
}

// IdRicactionToBeSetupItemMultiError is an error wrapping multiple validation
// errors returned by IdRicactionToBeSetupItem.ValidateAll() if the designated
// constraints aren't met.
type IdRicactionToBeSetupItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdRicactionToBeSetupItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdRicactionToBeSetupItemMultiError) AllErrors() []error { return m }

// IdRicactionToBeSetupItemValidationError is the validation error returned by
// IdRicactionToBeSetupItem.Validate if the designated constraints aren't met.
type IdRicactionToBeSetupItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdRicactionToBeSetupItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdRicactionToBeSetupItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdRicactionToBeSetupItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdRicactionToBeSetupItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdRicactionToBeSetupItemValidationError) ErrorName() string {
	return "IdRicactionToBeSetupItemValidationError"
}

// Error satisfies the builtin error interface
func (e IdRicactionToBeSetupItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdRicactionToBeSetupItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdRicactionToBeSetupItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdRicactionToBeSetupItemValidationError{}

// Validate checks the field values on IdRiccallProcessId with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdRiccallProcessId) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdRiccallProcessId with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdRiccallProcessIdMultiError, or nil if none found.
func (m *IdRiccallProcessId) ValidateAll() error {
	return m.validate(true)
}

func (m *IdRiccallProcessId) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 20 {
		err := IdRiccallProcessIdValidationError{
			field:  "Value",
			reason: "value must equal 20",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdRiccallProcessIdMultiError(errors)
	}
	return nil
}

// IdRiccallProcessIdMultiError is an error wrapping multiple validation errors
// returned by IdRiccallProcessId.ValidateAll() if the designated constraints
// aren't met.
type IdRiccallProcessIdMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdRiccallProcessIdMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdRiccallProcessIdMultiError) AllErrors() []error { return m }

// IdRiccallProcessIdValidationError is the validation error returned by
// IdRiccallProcessId.Validate if the designated constraints aren't met.
type IdRiccallProcessIdValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdRiccallProcessIdValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdRiccallProcessIdValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdRiccallProcessIdValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdRiccallProcessIdValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdRiccallProcessIdValidationError) ErrorName() string {
	return "IdRiccallProcessIdValidationError"
}

// Error satisfies the builtin error interface
func (e IdRiccallProcessIdValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdRiccallProcessId.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdRiccallProcessIdValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdRiccallProcessIdValidationError{}

// Validate checks the field values on IdRiccontrolAckRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdRiccontrolAckRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdRiccontrolAckRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdRiccontrolAckRequestMultiError, or nil if none found.
func (m *IdRiccontrolAckRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *IdRiccontrolAckRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 21 {
		err := IdRiccontrolAckRequestValidationError{
			field:  "Value",
			reason: "value must equal 21",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdRiccontrolAckRequestMultiError(errors)
	}
	return nil
}

// IdRiccontrolAckRequestMultiError is an error wrapping multiple validation
// errors returned by IdRiccontrolAckRequest.ValidateAll() if the designated
// constraints aren't met.
type IdRiccontrolAckRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdRiccontrolAckRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdRiccontrolAckRequestMultiError) AllErrors() []error { return m }

// IdRiccontrolAckRequestValidationError is the validation error returned by
// IdRiccontrolAckRequest.Validate if the designated constraints aren't met.
type IdRiccontrolAckRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdRiccontrolAckRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdRiccontrolAckRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdRiccontrolAckRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdRiccontrolAckRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdRiccontrolAckRequestValidationError) ErrorName() string {
	return "IdRiccontrolAckRequestValidationError"
}

// Error satisfies the builtin error interface
func (e IdRiccontrolAckRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdRiccontrolAckRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdRiccontrolAckRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdRiccontrolAckRequestValidationError{}

// Validate checks the field values on IdRiccontrolHeader with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdRiccontrolHeader) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdRiccontrolHeader with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdRiccontrolHeaderMultiError, or nil if none found.
func (m *IdRiccontrolHeader) ValidateAll() error {
	return m.validate(true)
}

func (m *IdRiccontrolHeader) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 22 {
		err := IdRiccontrolHeaderValidationError{
			field:  "Value",
			reason: "value must equal 22",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdRiccontrolHeaderMultiError(errors)
	}
	return nil
}

// IdRiccontrolHeaderMultiError is an error wrapping multiple validation errors
// returned by IdRiccontrolHeader.ValidateAll() if the designated constraints
// aren't met.
type IdRiccontrolHeaderMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdRiccontrolHeaderMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdRiccontrolHeaderMultiError) AllErrors() []error { return m }

// IdRiccontrolHeaderValidationError is the validation error returned by
// IdRiccontrolHeader.Validate if the designated constraints aren't met.
type IdRiccontrolHeaderValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdRiccontrolHeaderValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdRiccontrolHeaderValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdRiccontrolHeaderValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdRiccontrolHeaderValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdRiccontrolHeaderValidationError) ErrorName() string {
	return "IdRiccontrolHeaderValidationError"
}

// Error satisfies the builtin error interface
func (e IdRiccontrolHeaderValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdRiccontrolHeader.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdRiccontrolHeaderValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdRiccontrolHeaderValidationError{}

// Validate checks the field values on IdRiccontrolMessage with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdRiccontrolMessage) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdRiccontrolMessage with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdRiccontrolMessageMultiError, or nil if none found.
func (m *IdRiccontrolMessage) ValidateAll() error {
	return m.validate(true)
}

func (m *IdRiccontrolMessage) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 23 {
		err := IdRiccontrolMessageValidationError{
			field:  "Value",
			reason: "value must equal 23",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdRiccontrolMessageMultiError(errors)
	}
	return nil
}

// IdRiccontrolMessageMultiError is an error wrapping multiple validation
// errors returned by IdRiccontrolMessage.ValidateAll() if the designated
// constraints aren't met.
type IdRiccontrolMessageMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdRiccontrolMessageMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdRiccontrolMessageMultiError) AllErrors() []error { return m }

// IdRiccontrolMessageValidationError is the validation error returned by
// IdRiccontrolMessage.Validate if the designated constraints aren't met.
type IdRiccontrolMessageValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdRiccontrolMessageValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdRiccontrolMessageValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdRiccontrolMessageValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdRiccontrolMessageValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdRiccontrolMessageValidationError) ErrorName() string {
	return "IdRiccontrolMessageValidationError"
}

// Error satisfies the builtin error interface
func (e IdRiccontrolMessageValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdRiccontrolMessage.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdRiccontrolMessageValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdRiccontrolMessageValidationError{}

// Validate checks the field values on IdRiccontrolStatus with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdRiccontrolStatus) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdRiccontrolStatus with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdRiccontrolStatusMultiError, or nil if none found.
func (m *IdRiccontrolStatus) ValidateAll() error {
	return m.validate(true)
}

func (m *IdRiccontrolStatus) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 24 {
		err := IdRiccontrolStatusValidationError{
			field:  "Value",
			reason: "value must equal 24",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdRiccontrolStatusMultiError(errors)
	}
	return nil
}

// IdRiccontrolStatusMultiError is an error wrapping multiple validation errors
// returned by IdRiccontrolStatus.ValidateAll() if the designated constraints
// aren't met.
type IdRiccontrolStatusMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdRiccontrolStatusMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdRiccontrolStatusMultiError) AllErrors() []error { return m }

// IdRiccontrolStatusValidationError is the validation error returned by
// IdRiccontrolStatus.Validate if the designated constraints aren't met.
type IdRiccontrolStatusValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdRiccontrolStatusValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdRiccontrolStatusValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdRiccontrolStatusValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdRiccontrolStatusValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdRiccontrolStatusValidationError) ErrorName() string {
	return "IdRiccontrolStatusValidationError"
}

// Error satisfies the builtin error interface
func (e IdRiccontrolStatusValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdRiccontrolStatus.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdRiccontrolStatusValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdRiccontrolStatusValidationError{}

// Validate checks the field values on IdRicindicationHeader with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdRicindicationHeader) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdRicindicationHeader with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdRicindicationHeaderMultiError, or nil if none found.
func (m *IdRicindicationHeader) ValidateAll() error {
	return m.validate(true)
}

func (m *IdRicindicationHeader) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 25 {
		err := IdRicindicationHeaderValidationError{
			field:  "Value",
			reason: "value must equal 25",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdRicindicationHeaderMultiError(errors)
	}
	return nil
}

// IdRicindicationHeaderMultiError is an error wrapping multiple validation
// errors returned by IdRicindicationHeader.ValidateAll() if the designated
// constraints aren't met.
type IdRicindicationHeaderMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdRicindicationHeaderMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdRicindicationHeaderMultiError) AllErrors() []error { return m }

// IdRicindicationHeaderValidationError is the validation error returned by
// IdRicindicationHeader.Validate if the designated constraints aren't met.
type IdRicindicationHeaderValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdRicindicationHeaderValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdRicindicationHeaderValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdRicindicationHeaderValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdRicindicationHeaderValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdRicindicationHeaderValidationError) ErrorName() string {
	return "IdRicindicationHeaderValidationError"
}

// Error satisfies the builtin error interface
func (e IdRicindicationHeaderValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdRicindicationHeader.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdRicindicationHeaderValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdRicindicationHeaderValidationError{}

// Validate checks the field values on IdRicindicationMessage with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdRicindicationMessage) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdRicindicationMessage with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdRicindicationMessageMultiError, or nil if none found.
func (m *IdRicindicationMessage) ValidateAll() error {
	return m.validate(true)
}

func (m *IdRicindicationMessage) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 26 {
		err := IdRicindicationMessageValidationError{
			field:  "Value",
			reason: "value must equal 26",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdRicindicationMessageMultiError(errors)
	}
	return nil
}

// IdRicindicationMessageMultiError is an error wrapping multiple validation
// errors returned by IdRicindicationMessage.ValidateAll() if the designated
// constraints aren't met.
type IdRicindicationMessageMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdRicindicationMessageMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdRicindicationMessageMultiError) AllErrors() []error { return m }

// IdRicindicationMessageValidationError is the validation error returned by
// IdRicindicationMessage.Validate if the designated constraints aren't met.
type IdRicindicationMessageValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdRicindicationMessageValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdRicindicationMessageValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdRicindicationMessageValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdRicindicationMessageValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdRicindicationMessageValidationError) ErrorName() string {
	return "IdRicindicationMessageValidationError"
}

// Error satisfies the builtin error interface
func (e IdRicindicationMessageValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdRicindicationMessage.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdRicindicationMessageValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdRicindicationMessageValidationError{}

// Validate checks the field values on IdRicindicationSn with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *IdRicindicationSn) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdRicindicationSn with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdRicindicationSnMultiError, or nil if none found.
func (m *IdRicindicationSn) ValidateAll() error {
	return m.validate(true)
}

func (m *IdRicindicationSn) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 27 {
		err := IdRicindicationSnValidationError{
			field:  "Value",
			reason: "value must equal 27",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdRicindicationSnMultiError(errors)
	}
	return nil
}

// IdRicindicationSnMultiError is an error wrapping multiple validation errors
// returned by IdRicindicationSn.ValidateAll() if the designated constraints
// aren't met.
type IdRicindicationSnMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdRicindicationSnMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdRicindicationSnMultiError) AllErrors() []error { return m }

// IdRicindicationSnValidationError is the validation error returned by
// IdRicindicationSn.Validate if the designated constraints aren't met.
type IdRicindicationSnValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdRicindicationSnValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdRicindicationSnValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdRicindicationSnValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdRicindicationSnValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdRicindicationSnValidationError) ErrorName() string {
	return "IdRicindicationSnValidationError"
}

// Error satisfies the builtin error interface
func (e IdRicindicationSnValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdRicindicationSn.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdRicindicationSnValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdRicindicationSnValidationError{}

// Validate checks the field values on IdRicindicationType with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdRicindicationType) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdRicindicationType with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdRicindicationTypeMultiError, or nil if none found.
func (m *IdRicindicationType) ValidateAll() error {
	return m.validate(true)
}

func (m *IdRicindicationType) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 28 {
		err := IdRicindicationTypeValidationError{
			field:  "Value",
			reason: "value must equal 28",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdRicindicationTypeMultiError(errors)
	}
	return nil
}

// IdRicindicationTypeMultiError is an error wrapping multiple validation
// errors returned by IdRicindicationType.ValidateAll() if the designated
// constraints aren't met.
type IdRicindicationTypeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdRicindicationTypeMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdRicindicationTypeMultiError) AllErrors() []error { return m }

// IdRicindicationTypeValidationError is the validation error returned by
// IdRicindicationType.Validate if the designated constraints aren't met.
type IdRicindicationTypeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdRicindicationTypeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdRicindicationTypeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdRicindicationTypeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdRicindicationTypeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdRicindicationTypeValidationError) ErrorName() string {
	return "IdRicindicationTypeValidationError"
}

// Error satisfies the builtin error interface
func (e IdRicindicationTypeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdRicindicationType.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdRicindicationTypeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdRicindicationTypeValidationError{}

// Validate checks the field values on IdRicrequestId with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *IdRicrequestId) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdRicrequestId with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in IdRicrequestIdMultiError,
// or nil if none found.
func (m *IdRicrequestId) ValidateAll() error {
	return m.validate(true)
}

func (m *IdRicrequestId) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 29 {
		err := IdRicrequestIdValidationError{
			field:  "Value",
			reason: "value must equal 29",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdRicrequestIdMultiError(errors)
	}
	return nil
}

// IdRicrequestIdMultiError is an error wrapping multiple validation errors
// returned by IdRicrequestId.ValidateAll() if the designated constraints
// aren't met.
type IdRicrequestIdMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdRicrequestIdMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdRicrequestIdMultiError) AllErrors() []error { return m }

// IdRicrequestIdValidationError is the validation error returned by
// IdRicrequestId.Validate if the designated constraints aren't met.
type IdRicrequestIdValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdRicrequestIdValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdRicrequestIdValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdRicrequestIdValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdRicrequestIdValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdRicrequestIdValidationError) ErrorName() string { return "IdRicrequestIdValidationError" }

// Error satisfies the builtin error interface
func (e IdRicrequestIdValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdRicrequestId.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdRicrequestIdValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdRicrequestIdValidationError{}

// Validate checks the field values on IdRicsubscriptionDetails with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdRicsubscriptionDetails) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdRicsubscriptionDetails with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdRicsubscriptionDetailsMultiError, or nil if none found.
func (m *IdRicsubscriptionDetails) ValidateAll() error {
	return m.validate(true)
}

func (m *IdRicsubscriptionDetails) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 30 {
		err := IdRicsubscriptionDetailsValidationError{
			field:  "Value",
			reason: "value must equal 30",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdRicsubscriptionDetailsMultiError(errors)
	}
	return nil
}

// IdRicsubscriptionDetailsMultiError is an error wrapping multiple validation
// errors returned by IdRicsubscriptionDetails.ValidateAll() if the designated
// constraints aren't met.
type IdRicsubscriptionDetailsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdRicsubscriptionDetailsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdRicsubscriptionDetailsMultiError) AllErrors() []error { return m }

// IdRicsubscriptionDetailsValidationError is the validation error returned by
// IdRicsubscriptionDetails.Validate if the designated constraints aren't met.
type IdRicsubscriptionDetailsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdRicsubscriptionDetailsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdRicsubscriptionDetailsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdRicsubscriptionDetailsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdRicsubscriptionDetailsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdRicsubscriptionDetailsValidationError) ErrorName() string {
	return "IdRicsubscriptionDetailsValidationError"
}

// Error satisfies the builtin error interface
func (e IdRicsubscriptionDetailsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdRicsubscriptionDetails.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdRicsubscriptionDetailsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdRicsubscriptionDetailsValidationError{}

// Validate checks the field values on IdTimeToWait with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *IdTimeToWait) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdTimeToWait with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in IdTimeToWaitMultiError, or
// nil if none found.
func (m *IdTimeToWait) ValidateAll() error {
	return m.validate(true)
}

func (m *IdTimeToWait) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 31 {
		err := IdTimeToWaitValidationError{
			field:  "Value",
			reason: "value must equal 31",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdTimeToWaitMultiError(errors)
	}
	return nil
}

// IdTimeToWaitMultiError is an error wrapping multiple validation errors
// returned by IdTimeToWait.ValidateAll() if the designated constraints aren't met.
type IdTimeToWaitMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdTimeToWaitMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdTimeToWaitMultiError) AllErrors() []error { return m }

// IdTimeToWaitValidationError is the validation error returned by
// IdTimeToWait.Validate if the designated constraints aren't met.
type IdTimeToWaitValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdTimeToWaitValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdTimeToWaitValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdTimeToWaitValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdTimeToWaitValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdTimeToWaitValidationError) ErrorName() string { return "IdTimeToWaitValidationError" }

// Error satisfies the builtin error interface
func (e IdTimeToWaitValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdTimeToWait.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdTimeToWaitValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdTimeToWaitValidationError{}

// Validate checks the field values on IdRiccontrolOutcome with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdRiccontrolOutcome) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdRiccontrolOutcome with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdRiccontrolOutcomeMultiError, or nil if none found.
func (m *IdRiccontrolOutcome) ValidateAll() error {
	return m.validate(true)
}

func (m *IdRiccontrolOutcome) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 32 {
		err := IdRiccontrolOutcomeValidationError{
			field:  "Value",
			reason: "value must equal 32",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdRiccontrolOutcomeMultiError(errors)
	}
	return nil
}

// IdRiccontrolOutcomeMultiError is an error wrapping multiple validation
// errors returned by IdRiccontrolOutcome.ValidateAll() if the designated
// constraints aren't met.
type IdRiccontrolOutcomeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdRiccontrolOutcomeMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdRiccontrolOutcomeMultiError) AllErrors() []error { return m }

// IdRiccontrolOutcomeValidationError is the validation error returned by
// IdRiccontrolOutcome.Validate if the designated constraints aren't met.
type IdRiccontrolOutcomeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdRiccontrolOutcomeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdRiccontrolOutcomeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdRiccontrolOutcomeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdRiccontrolOutcomeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdRiccontrolOutcomeValidationError) ErrorName() string {
	return "IdRiccontrolOutcomeValidationError"
}

// Error satisfies the builtin error interface
func (e IdRiccontrolOutcomeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdRiccontrolOutcome.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdRiccontrolOutcomeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdRiccontrolOutcomeValidationError{}
